[
  {
    "owner": "rescript-lang",
    "repo": "rescript-lang.org.git",
    "content": "TITLE: Creating a Basic ReScript React Component\nDESCRIPTION: A simple greeting component that demonstrates the basic structure of a ReScript React component. The component function is marked with @react.component and named 'make', returning JSX that renders a greeting message.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/components-and-props.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\n// src/Greeting.res\n@react.component\nlet make = () => {\n  <div>\n    {React.string(\"Hello ReScripters!\")}\n  </div>\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from \"react\";\n\nfunction Greeting(props) {\n  return React.createElement(\"div\", undefined, \"Hello ReScripters!\");\n}\n\nvar make = Greeting;\n```\n\n----------------------------------------\n\nTITLE: Handling JavaScript Nullable Types with Option in ReScript\nDESCRIPTION: Demonstrates how to safely handle JavaScript's null and undefined values using ReScript's option type and Js.Nullable helpers. The example converts potentially null values to options and handles them with pattern matching.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/newcomer-examples.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nlet greetByName = (possiblyNullName) => {\n  let optionName = Js.Nullable.toOption(possiblyNullName)\n  switch optionName {\n  | None => \"Hi\"\n  | Some(name) => \"Hello \" ++ name\n  }\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction greetByName(possiblyNullName) {\n  if (possiblyNullName == null) {\n    return \"Hi\";\n  } else {\n    return \"Hello \" + possiblyNullName;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Fetch API with Async/Await in ReScript\nDESCRIPTION: A complete example of using JavaScript's fetch API in ReScript with async/await syntax. The code demonstrates how to create proper bindings for fetch, handle promises, process JSON responses, and implement error handling for network requests.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/async-await.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\n// A generic Response type for typing our fetch requests\nmodule Response = {\n  type t<'data>\n  @send external json: t<'data> => promise<'data> = \"json\"\n}\n\n// A binding to our globally available `fetch` function. `fetch` is a\n// standardized function to retrieve data from the network that is available in\n// all modern browsers.\n@val @scope(\"globalThis\")\nexternal fetch: (\n  string,\n  'params,\n) => promise<Response.t<{\"token\": Nullable.t<string>, \"error\": Nullable.t<string>}>> =\n  \"fetch\"\n\n// We now use our asynchronous `fetch` function to simulate a login.\n// Note how we use `await` with regular functions returning a `promise`.\nlet login = async (email: string, password: string) => {\n  let body = {\n    \"email\": email,\n    \"password\": password,\n  }\n\n  let params = {\n    \"method\": \"POST\",\n    \"headers\": {\n      \"Content-Type\": \"application/json\",\n    },\n    \"body\": Json.stringifyAny(body),\n  }\n\n  try {\n    let response = await fetch(\"https://reqres.in/api/login\", params)\n    let data = await response->Response.json\n\n    switch Nullable.toOption(data[\"error\"]) {\n    | Some(msg) => Error(msg)\n    | None =>\n      switch Nullable.toOption(data[\"token\"]) {\n      | Some(token) => Ok(token)\n      | None => Error(\"Didn't return a token\")\n      }\n    }\n  } catch {\n  | _ => Error(\"Unexpected network error occurred\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Traditional Function Calls with Pipe Syntax in ReScript\nDESCRIPTION: Demonstrates the basic usage of the pipe operator by transforming a nested function call into a more readable sequential pipe syntax. The pipe operator allows code to be read from left to right rather than inside-out.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/pipe.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\nvalidateAge(getAge(parseData(person)))\n```\n\nLANGUAGE: js\nCODE:\n```\nvalidateAge(getAge(parseData(person)));\n```\n\n----------------------------------------\n\nTITLE: Installing ReScript with npm create command\nDESCRIPTION: Command to create a new ReScript project using npm's create functionality. This is the recommended way to start a new ReScript project.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/installation.mdx#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm create rescript-app@latest\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Friend Status Hook in ReScript\nDESCRIPTION: A custom React hook that extracts the friend status monitoring logic into a reusable function, following React's hook naming convention and rules.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/hooks-custom.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\n// FriendStatusHook.res\n\ntype state = Offline | Loading | Online\n\nlet useFriendStatus = (friendId: string): state => {\n  let (state, setState) = React.useState(_ => Offline)\n\n  React.useEffect(() => {\n    let handleStatusChange = status => {\n      setState(_ => {\n        status.ChatAPI.isOnline ? Online : Offline\n      })\n    }\n\n    ChatAPI.subscribeToFriendStatus(friendId, handleStatusChange)\n    setState(_ => Loading)\n\n    let cleanup = () => {\n      ChatAPI.unsubscribeFromFriendStatus(friendId, handleStatusChange)\n    }\n\n    Some(cleanup)\n  })\n\n  state\n}\n```\n\n----------------------------------------\n\nTITLE: Exception Handling with Async Functions\nDESCRIPTION: Shows error handling patterns in async functions using try/catch and pattern matching on exceptions. Demonstrates handling both JavaScript and ReScript exceptions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/function.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nexception SomeReScriptException\n\nlet somethingThatMightThrow = async () => raise(SomeReScriptException)\n\nlet someAsyncFn = async () => {\n  switch await somethingThatMightThrow() {\n  | data => Some(data)\n  | exception JsError(_) => None\n  | exception SomeReScriptException => None\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar SomeReScriptException = /* @__PURE__ */Caml_exceptions.create(\"Example.SomeReScriptException\");\n\nasync function someAsyncFn(param) {\n  var data;\n  try {\n    data = await somethingThatMightThrow(undefined);\n  }\n  catch (raw_exn){\n    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);\n    if (exn.RE_EXN_ID === \"JsError\") {\n      return ;\n    }\n    if (exn.RE_EXN_ID === SomeReScriptException) {\n      return ;\n    }\n    throw exn;\n  }\n  return data;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Block Scoping in JavaScript vs ReScript\nDESCRIPTION: Demonstrates how block scoping and implicit returns work differently between JavaScript and ReScript. JavaScript requires an IIFE while ReScript has natural block scope returns.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/overview.mdx#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet result = (function() {\n  const x = 23;\n  const y = 34;\n  return x + y;\n})();\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet result = {\n  let x = 23\n  let y = 34\n  x + y\n}\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching Option Type in ReScript\nDESCRIPTION: Shows how to handle both cases of an Option type using pattern matching in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/null-undefined-option.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nswitch licenseNumber {\n| None =>\n  Console.log(\"The person doesn't have a car\")\n| Some(number) =>\n  Console.log(\"The person's license number is \" ++ Int.toString(number))\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar number = licenseNumber;\n\nif (number !== undefined) {\n  console.log(\"The person's license number is \" + number.toString());\n} else {\n  console.log(\"The person doesn't have a car\");\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useEffect in ReScript React\nDESCRIPTION: Demonstrates various ways to use the useEffect hook in ReScript, including running effects after every render, only once, and with different dependency configurations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/hooks-effect.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\n// Runs after every completed render\nReact.useEffect(() => {\n  // Run effects\n  None // or Some(() => {})\n})\n\n\n// Runs only once right after mounting the component\nReact.useEffect0(() => {\n  // Run effects\n  None // or Some(() => {})\n})\n\n// Runs everytime `prop1` has changed\nReact.useEffect1(() => {\n  // Run effects based on prop1\n  None\n}, [prop1])\n\n// Runs everytime `prop1` or `prop2` has changed\nReact.useEffect2(() => {\n  // Run effects based on prop1 / prop2\n  None\n}, (prop1, prop2))\n\nReact.useEffect3(() => {\n  None\n}, (prop1, prop2, prop3));\n\n// useEffect4...7 with according dependency\n// tuple just like useEffect3\n```\n\nLANGUAGE: javascript\nCODE:\n```\nReact.useEffect(function () { });\nReact.useEffect((function () { }), []);\nReact.useEffect((function () { }), [prop1]);\nReact.useEffect((function () { }), [ prop1, prop2 ]);\nReact.useEffect((function () { }), [ prop1, prop2, prop3 ]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Effects with Cleanup in ReScript React\nDESCRIPTION: Demonstrates how to use useEffect with cleanup in a ReScript React component. It subscribes to a friend's status and unsubscribes when the component unmounts or when the effect re-runs.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/hooks-effect.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\n// FriendStatus.res\n@react.component\nlet make = (~friendId: string) => {\n  let (state, setState) = React.useState(_ => Offline)\n\n  React.useEffectOnEveryRender(() => {\n    let handleStatusChange = (status) => {\n      setState(_ => {\n        status.ChatAPI.isOnline ? Online : Offline\n      })\n    }\n\n    ChatAPI.subscribeToFriendStatus(friendId, handleStatusChange)\n    setState(_ => Loading)\n\n    let cleanup = () => {\n      ChatAPI.unsubscribeFromFriendStatus(friendId, handleStatusChange)\n    }\n\n    Some(cleanup)\n  })\n\n  let text = switch(state) {\n    | Offline => friendId ++ \" is offline\"\n    | Online => friendId ++ \" is online\"\n    | Loading => \"loading...\"\n  }\n\n  <div>\n  \t{React.string(text)}\n  </div>\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction FriendStatus(Props) {\n  var friendId = Props.friendId;\n  var match = React.useState(function () {\n        return /* Offline */0;\n      });\n  var setState = match[1];\n  React.useEffect(function () {\n        var handleStatusChange = function (status) {\n          return Curry._1(setState, (function (param) {\n                        if (status.isOnline) {\n                          return /* Online */2;\n                        } else {\n                          return /* Offline */0;\n                        }\n                      }));\n        };\n        subscribeToFriendStatus(friendId, handleStatusChange);\n        Curry._1(setState, (function (param) {\n                return /* Loading */1;\n              }));\n        return (function (param) {\n                  unsubscribeFromFriendStatus(friendId, handleStatusChange);\n\n                });\n      });\n  var text;\n  switch (match[0]) {\n    case /* Offline */0 :\n        text = friendId + \" is offline\";\n        break;\n    case /* Loading */1 :\n        text = \"loading...\";\n        break;\n    case /* Online */2 :\n        text = friendId + \" is online\";\n        break;\n\n  }\n  return React.createElement(\"div\", undefined, text);\n}\n```\n\n----------------------------------------\n\nTITLE: String Interpolation in ReScript\nDESCRIPTION: Example of string interpolation in ReScript using backticks. This syntax allows for multiline strings, no special character escaping, and variable interpolation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/primitive-types.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nlet name = \"Joe\"\n\nlet greeting = `Hello\nWorld\n👋\n${name}\n`\n```\n\nLANGUAGE: js\nCODE:\n```\nvar name = \"Joe\";\n\nvar greeting = \"Hello\\nWorld\\n👋\\n\" + name + \"\\n\";\n```\n\n----------------------------------------\n\nTITLE: Declaring Basic Functions in ReScript\nDESCRIPTION: Declaration of a simple greeting function in ReScript that takes a name parameter and returns a greeting string. The function is defined using arrow syntax and concatenates strings.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/function.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\nlet greet = (name) => \"Hello \" ++ name\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction greet(name) {\n  return \"Hello \" + name;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic useState Hook Usage in ReScript\nDESCRIPTION: Demonstrates the basic syntax for using React.useState hook in ReScript and its corresponding JavaScript output.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/hooks-state.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nlet (state, setState) = React.useState(_ => initialState)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar match = React.useState(function () {\n      return initialState;\n    });\n\nvar state = match[0];\n\nvar setState = match[1];\n```\n\n----------------------------------------\n\nTITLE: Using Components in JSX in ReScript\nDESCRIPTION: Shows how to use a custom component within another component in ReScript React. This example demonstrates importing and using the Greeting component within an App component.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/components-and-props.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\n// src/App.res\n\n@react.component\nlet make = () => {\n  <div>\n    <Greeting/>\n  </div>\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar React = require(\"react\");\nvar Greeting = require(\"./Greeting.js\")\n\nfunction App(Props) {\n  return React.createElement(\"div\", undefined, React.createElement(Greeting.make, {}));\n}\n\nvar make = App;\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic React Element in ReScript\nDESCRIPTION: Demonstrates how to create a simple React element using JSX syntax in ReScript. The element is of type React.element and contains a string wrapped in an h1 tag.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/elements-and-jsx.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\nlet element = <h1> {React.string(\"Hello World\")} </h1>\n```\n\n----------------------------------------\n\nTITLE: Implementing Async/Await in ReScript\nDESCRIPTION: Demonstrates how to use async/await in ReScript. The code defines an async function that awaits the result of another async function and returns a greeting string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/function.mdx#2025-04-18_snippet_18\n\nLANGUAGE: res\nCODE:\n```\nlet getUserName = async (userId) => userId\n\nlet greetUser = async (userId) => {\n  let name = await getUserName(userId)  \n  \"Hello \" ++ name ++ \"!\"\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nasync function greetUser(userId) {\n  var name = await getUserName(userId);\n  return \"Hello \" + name + \"!\";\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Module Function Types in ReScript\nDESCRIPTION: This snippet demonstrates how to define a type signature for a functor. This allows hiding implementation details of the functor's return value while enforcing the input requirements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/module.mdx#2025-04-18_snippet_10\n\nLANGUAGE: res\nCODE:\n```\nmodule type Comparable = ...\n\nmodule type MakeSetType = (Item: Comparable) => {\n  type backingType\n  let empty: backingType\n  let add: (backingType, Item.t) => backingType\n}\n\nmodule MakeSet: MakeSetType = (Item: Comparable) => {\n  ...\n}\n```\n\nLANGUAGE: js\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Text Input State Management in ReScript\nDESCRIPTION: Example of using useState hook to manage text input state with onChange event handler.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/hooks-state.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\n@react.component\nlet make = () => {\n  let (text, setText) = React.useState(_ => \"\");\n\n  let onChange = evt => {\n    ReactEvent.Form.preventDefault(evt)\n    let value = ReactEvent.Form.target(evt)[\"value\"]\n    setText(_prev => value);\n  }\n\n  <div>\n    <input onChange value=text />\n  </div>\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a JSX-Compatible Component with @react.component Decorator\nDESCRIPTION: Demonstrates how to create a ReScript React component using the @react.component decorator, and shows the expanded output without the decorator.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/beyond-jsx.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nmodule Friend = {\n  @react.component\n  let make = (~name: string, ~children) => {\n    <div>\n      {React.string(name)}\n      children\n    </div>\n  }\n}\n```\n\nLANGUAGE: rescript\nCODE:\n```\nmodule Friend = {\n  type props<'name, 'children> = {\n    name: 'name,\n    children: 'children,\n  }\n\n  let make = ({name, children, _}: props<string, 'children>) => {\n    ReactDOM.createDOMElementVariadic(\"div\", [{React.string(name)}, children])\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Counter Component with useState Hook in ReScript React\nDESCRIPTION: An example of a Counter component that uses React.useState to maintain and update a count state. The component displays the current count and provides a button that increments the count when clicked.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/hooks-overview.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\n// Counter.res\n@react.component\nlet make = () => {\n  let (count, setCount) = React.useState(_ => 0);\n\n  let onClick = (_evt) => {\n    setCount(prev => prev + 1)\n  };\n\n  let msg = \"You clicked\" ++ Belt.Int.toString(count) ++  \"times\"\n\n  <div>\n    <p>{React.string(msg)}</p>\n    <button onClick> {React.string(\"Click me\")} </button>\n  </div>\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Counter(Props) {\n  var match = React.useState(function () {\n        return 0;\n      });\n  var setCount = match[1];\n  var onClick = function (_evt) {\n    return Curry._1(setCount, (function (prev) {\n                  return prev + 1 | 0;\n                }));\n  };\n  var msg = \"You clicked\" + String(match[0]) + \"times\";\n  return React.createElement(\"div\", undefined, React.createElement(\"p\", undefined, msg), React.createElement(\"button\", {\n                  onClick: onClick\n                }, \"Click me\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Fetch API Login with Async/Await in ReScript\nDESCRIPTION: This example demonstrates how to bind to the JavaScript Fetch API and use async/await in ReScript to implement a login function. It shows proper error handling with try/catch and pattern matching on nullable values returned from the API.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/async-await.mdx#2025-04-18_snippet_12\n\nLANGUAGE: rescript\nCODE:\n```\n// A generic Response type for typing our fetch requests\nmodule Response = {\n  type t<'data>\n  @send external json: t<'data> => promise<'data> = \"json\"\n}\n\n// A binding to our globally available `fetch` function. `fetch` is a\n// standardized function to retrieve data from the network that is available in\n// all modern browsers.\n@val @scope(\"globalThis\")\nexternal fetch: (\n  string,\n  'params,\n) => promise<Response.t<{\"token\": Js.Nullable.t<string>, \"error\": Js.Nullable.t<string>}>> =\n  \"fetch\"\n\n// We now use our asynchronous `fetch` function to simulate a login.\n// Note how we use `await` with regular functions returning a `promise`.\nlet login = async (email: string, password: string) => {\n  let body = {\n    \"email\": email,\n    \"password\": password,\n  }\n\n  let params = {\n    \"method\": \"POST\",\n    \"headers\": {\n      \"Content-Type\": \"application/json\",\n    },\n    \"body\": Js.Json.stringifyAny(body),\n  }\n\n  try {\n    let response = await fetch(\"https://reqres.in/api/login\", params)\n    let data = await response->Response.json\n\n    switch Js.Nullable.toOption(data[\"error\"]) {\n    | Some(msg) => Error(msg)\n    | None =>\n      switch Js.Nullable.toOption(data[\"token\"]) {\n      | Some(token) => Ok(token)\n      | None => Error(\"Didn't return a token\")\n      }\n    }\n  } catch {\n  | _ => Error(\"Unexpected network error occurred\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Counter Example with useReducer in ReScript\nDESCRIPTION: A complete counter implementation using React's useReducer hook in ReScript. Shows how to define action types, state structure, reducer function, and component rendering with basic increment and decrement functionality.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/hooks-reducer.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\n// Counter.res\n\ntype action = Inc | Dec\ntype state = {count: int}\n\nlet reducer = (state, action) => {\n  switch action {\n  | Inc => {count: state.count + 1}\n  | Dec => {count: state.count - 1}\n  }\n}\n\n@react.component\nlet make = () => {\n  let (state, dispatch) = React.useReducer(reducer, {count: 0})\n\n  <>\n    {React.string(\"Count:\" ++ Belt.Int.toString(state.count))}\n    <button onClick={(_) => dispatch(Dec)}> {React.string(\"-\")} </button>\n    <button onClick={(_) => dispatch(Inc)}> {React.string(\"+\")} </button>\n  </>\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction reducer(state, action) {\n  if (action) {\n    return {\n            count: state.count - 1 | 0\n          };\n  } else {\n    return {\n            count: state.count + 1 | 0\n          };\n  }\n}\n\nfunction Counter(Props) {\n  var match = React.useReducer(reducer, {\n        count: 0\n      });\n  var dispatch = match[1];\n  return React.createElement(React.Fragment, undefined, \"Count:\" + String(match[0].count), React.createElement(\"button\", {\n                  onClick: (function (param) {\n                      return Curry._1(dispatch, /* Dec */1);\n                    })\n                }, \"-\"), React.createElement(\"button\", {\n                  onClick: (function (param) {\n                      return Curry._1(dispatch, /* Inc */0);\n                    })\n                }, \"+\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Counter Component with useState Hook in ReScript React\nDESCRIPTION: A simple counter component example that demonstrates how to use the React.useState hook in ReScript. The component renders a count value and a button that increments the count when clicked. This shows the basic pattern of state management in React using ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/hooks-overview.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\n// Counter.res\n@react.component\nlet make = () => {\n  let (count, setCount) = React.useState(_ => 0)\n\n  let onClick = (_evt) => {\n    setCount(prev => prev + 1)\n  }\n\n  let msg = \"You clicked\" ++ Belt.Int.toString(count) ++  \"times\"\n\n  <div>\n    <p>{React.string(msg)}</p>\n    <button onClick> {React.string(\"Click me\")} </button>\n  </div>\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction Counter(Props) {\n  var match = React.useState(function () {\n        return 0;\n      });\n  var setCount = match[1];\n  var onClick = function (_evt) {\n    return Curry._1(setCount, (function (prev) {\n                  return prev + 1 | 0;\n                }));\n  };\n  var msg = \"You clicked\" + String(match[0]) + \"times\";\n  return React.createElement(\"div\", undefined, React.createElement(\"p\", undefined, msg), React.createElement(\"button\", {\n                  onClick: onClick\n                }, \"Click me\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Counter Component with useState Hook in ReScript React\nDESCRIPTION: This example demonstrates a Counter component that uses React.useState to maintain and update a count state when a button is clicked. It shows how to initialize state, update it with a setter function, and render the current count value in the UI.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/hooks-overview.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\n// Counter.res\n@react.component\nlet make = () => {\n  let (count, setCount) = React.useState(_ => 0);\n\n  let onClick = (_evt) => {\n    setCount(prev => prev + 1)\n  };\n\n  let msg = \"You clicked\" ++ Belt.Int.toString(count) ++  \"times\"\n\n  <div>\n    <p>{React.string(msg)}</p>\n    <button onClick> {React.string(\"Click me\")} </button>\n  </div>\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction Counter(Props) {\n  var match = React.useState(function () {\n        return 0;\n      });\n  var setCount = match[1];\n  var onClick = function (_evt) {\n    return Curry._1(setCount, (function (prev) {\n                  return prev + 1 | 0;\n                }));\n  };\n  var msg = \"You clicked\" + String(match[0]) + \"times\";\n  return React.createElement(\"div\", undefined, React.createElement(\"p\", undefined, msg), React.createElement(\"button\", {\n                  onClick: onClick\n                }, \"Click me\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Let Binding in ReScript\nDESCRIPTION: Demonstrates basic variable declaration with let binding syntax in ReScript. This example shows how to declare simple variables for different types (string and numbers) and perform operations with them.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/let-binding.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\nlet greeting = \"hello!\"\nlet score = 10\nlet newScore = 10 + score\n```\n\nLANGUAGE: js\nCODE:\n```\nvar greeting = \"hello!\";\nvar score = 10;\nvar newScore = 20;\n```\n\n----------------------------------------\n\nTITLE: Installing ReScript Core Standard Library\nDESCRIPTION: Console command to install the new ReScript Core standard library, which replaces the Js module and some frequently used Belt modules. This is recommended when using uncurried mode.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/migrate-to-v11.mdx#2025-04-18_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ npm install @rescript/core\n```\n\n----------------------------------------\n\nTITLE: Basic ReScript React Component Example\nDESCRIPTION: A minimal example of a ReScript React component that renders \"Hello World\". This can be used to test if the ReScript React setup is working correctly after installation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/installation.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\n// src/Test.res\n@react.component\nlet make = () => {\n  <div> {React.string(\"Hello World\")} </div>\n}\n```\n\n----------------------------------------\n\nTITLE: Using Async/Await with Promises in ReScript\nDESCRIPTION: Demonstrates the modern async/await approach for handling promises, providing a more ergonomic syntax compared to traditional promise chaining.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/promise.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\nlet logAsyncMessage = async () => {\n  let msg = await Promise.resolve(\"hello world\")\n  Console.log(`Message: ${msg}`)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic ReScript React Component\nDESCRIPTION: Example of a simple ReScript React component that renders 'Hello World' in a div element.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/installation.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\n// src/Test.res\n@react.component\nlet make = () => {\n  <div> {React.string(\"Hello World\")} </div>\n}\n```\n\n----------------------------------------\n\nTITLE: Counter Component with useEffect in ReScript React\nDESCRIPTION: Implements a counter component that updates the document title using useEffect. Demonstrates how to use useEffect for DOM manipulation and state management.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/hooks-effect.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\n// Counter.res\nmodule Document = {\n  type t;\n  @val external document: t = \"document\";\n  @set external setTitle: (t, string) => unit = \"title\"\n}\n\n@react.component\nlet make = () => {\n  let (count, setCount) = React.useState(_ => 0);\n\n  React.useEffect(() => {\n    open Document\n    document->setTitle(`You clicked ${Belt.Int.toString(count)} times!`)\n    None\n  }, );\n\n  let onClick = (_evt) => {\n    setCount(prev => prev + 1)\n  };\n\n  let msg = \"You clicked\" ++ Belt.Int.toString(count) ++  \"times\"\n\n  <div>\n    <p>{React.string(msg)}</p>\n    <button onClick> {React.string(\"Click me\")} </button>\n  </div>\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Counter(Props) {\n  var match = React.useState(function () {\n        return 0;\n      });\n  var setCount = match[1];\n  var count = match[0];\n  React.useEffect(function () {\n        document.title = \"You clicked \" + String(count) + \" times!\";\n\n      });\n  var onClick = function (_evt) {\n    return Curry._1(setCount, (function (prev) {\n                  return prev + 1 | 0;\n                }));\n  };\n  var msg = \"You clicked\" + String(count) + \"times\";\n  return React.createElement(\"div\", undefined,\n    React.createElement(\"p\", undefined, msg),\n      React.createElement(\"button\", {\n                  onClick: onClick\n                }, \"Click me\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Catch-all Constructors with Unboxed Variants in ReScript\nDESCRIPTION: Shows how to use unboxed variants to create catch-all constructors that handle unknown values gracefully. This pattern is useful when working with external APIs that might return values not explicitly modeled in your types.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/variant.mdx#2025-04-18_snippet_16\n\nLANGUAGE: rescript\nCODE:\n```\n@unboxed\ntype animal = Dog | Cat | Bird | UnknownAnimal(string)\n\ntype apiResponse = {\n  animal: animal\n}\n\nlet greetAnimal = (animal: animal) =>\n  switch animal {\n  | Dog => \"Wof\"\n  | Cat => \"Meow\"\n  | Bird => \"Kashiiin\"\n  | UnknownAnimal(otherAnimal) =>\n    `I don't know how to greet animal ${otherAnimal}`\n  }\n```\n\n----------------------------------------\n\nTITLE: ReScript Function Declaration Syntax Examples\nDESCRIPTION: A comprehensive set of examples showing various ways to declare functions in ReScript, including anonymous functions, labeled parameters, default values, and optional parameters.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/function.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\n// anonymous function\n(x, y) => 1\n// bind to a name\nlet add = (x, y) => 1\n\n// labeled\nlet add = (~first as x, ~second as y) => x + y\n// with punning sugar\nlet add = (~first, ~second) => first + second\n\n// labeled with default value\nlet add = (~first as x=1, ~second as y=2) => x + y\n// with punning\nlet add = (~first=1, ~second=2) => first + second\n\n// optional\nlet add = (~first as x=?, ~second as y=?) => switch x {...}\n// with punning\nlet add = (~first=?, ~second=?) => switch first {...}\n```\n\n----------------------------------------\n\nTITLE: Compiling ReScript with Stricter Errors in Shell\nDESCRIPTION: Demonstrates how to compile a ReScript project with stricter error checking, specifically promoting warning 110 (%todo) to an error.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/build-overview.mdx#2025-04-18_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nrescript -warn-error +110\n```\n\n----------------------------------------\n\nTITLE: Capturing Input Value onChange in ReScript React\nDESCRIPTION: This code snippet demonstrates how to create a React component that captures and updates an input value using useState and onChange event. It shows how to handle form events and access the input value in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/events.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nmodule App = {\n  @react.component\n  let make = () => {\n    let (value, setValue) = React.useState(_ => \"\")\n\n    <form>\n      <input\n        type_=\"text\"\n        defaultValue={value}\n        onChange={(ev: JsxEvent.Form.t) => {\n          let target = JsxEvent.Form.target(ev)\n          let value: string = target[\"value\"]\n          setValue(_prevValue => value)\n        }}\n      />\n      <p style={{color:\"red\"}}>{React.string(value)}</p>\n    </form>\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating External Bindings for date-fns in ReScript\nDESCRIPTION: Example of creating ReScript bindings for the 'format' function from date-fns library, showing how to handle JavaScript types in ReScript and import external functions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2025-03-05-what-can-i-do-with-rescript.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\n// DateFns.res - you might want to put this in a folder called \"bindings\" or \"external\"\ntype formatDateOptions // we're not even going to add anything to this yet until we need something\n\n@module(\"date-fns\") // this is the import path for the module\nexternal formatString: (\n  ~date: string, // the date string\n  ~formatStr: string, // how we want it formatted\n  ~options: formatDateOptions=?, // =? means the argument is optional\n) => string = \"format\" // \"format\" is the name of the function we are importing from the module\n```\n\n----------------------------------------\n\nTITLE: Using Type Annotations in ReScript\nDESCRIPTION: Demonstrates how to explicitly annotate types for variables and expressions in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/type.mdx#2025-04-18_snippet_1\n\nLANGUAGE: ReScript\nCODE:\n```\nlet score: int = 10\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar score = 10;\n```\n\n----------------------------------------\n\nTITLE: Explicit Pattern Matching Instead of Wildcard in ReScript\nDESCRIPTION: Demonstrates the recommended approach of explicitly writing out all cases in a pattern match rather than using a catch-all wildcard, which helps with maintenance when new variants are added.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_9\n\nLANGUAGE: res\nCODE:\n```\nswitch myStatus {\n| Vacations(_) => Console.log(\"Have fun!\")\n| Sabbatical(_) | Sick | Present => Console.log(\"Ok.\")\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nif (typeof myStatus !== \"object\" || myStatus.TAG !== \"Vacations\") {\n  console.log(\"Ok.\");\n} else {\n  console.log(\"Have fun!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom useFriendStatus Hook in ReScript\nDESCRIPTION: A custom hook that extracts the friend status tracking logic from components. This hook handles subscription to friend status changes and returns the current online state, enabling code reuse across components.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/hooks-custom.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\n// FriendStatusHook.res\n\n// module ChatAPI {...}\n\ntype state = Offline | Loading | Online\n\nlet useFriendStatus = (friendId: string): state => {\n  let (state, setState) = React.useState(_ => Offline)\n\n  React.useEffect(() => {\n    let handleStatusChange = status => {\n      setState(_ => {\n        status.ChatAPI.isOnline ? Online : Offline\n      })\n    }\n\n    ChatAPI.subscribeToFriendStatus(friendId, handleStatusChange)\n    setState(_ => Loading)\n\n    let cleanup = () => {\n      ChatAPI.unsubscribeFromFriendStatus(friendId, handleStatusChange)\n    }\n\n    Some(cleanup)\n  })\n\n  state\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Preact JSX Transform Module in ReScript\nDESCRIPTION: A complete implementation of a JSX transform module for Preact, including type definitions, external bindings for JSX operations, fragment support, and DOM element handling. Contains essential components required for the JSX transform to work at compile time, with customizable module imports for different frameworks.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/jsx.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\n// Preact.res\n/* Below is a number of aliases to the common `Jsx` module */\ntype element = Jsx.element\n\ntype component<'props> = Jsx.component<'props>\n\ntype componentLike<'props, 'return> = Jsx.componentLike<'props, 'return>\n\n@module(\"preact\")\nexternal jsx: (component<'props>, 'props) => element = \"jsx\"\n\n@module(\"preact\")\nexternal jsxKeyed: (component<'props>, 'props, ~key: string=?, @ignore unit) => element = \"jsx\"\n\n@module(\"preact\")\nexternal jsxs: (component<'props>, 'props) => element = \"jsxs\"\n\n@module(\"preact\")\nexternal jsxsKeyed: (component<'props>, 'props, ~key: string=?, @ignore unit) => element = \"jsxs\"\n\n/* These identity functions and static values below are optional, but lets \nyou move things easily to the `element` type. The only required thing to \ndefine though is `array`, which the JSX transform will output. */\nexternal array: array<element> => element = \"%identity\"\n@val external null: element = \"null\"\n\nexternal float: float => element = \"%identity\"\nexternal int: int => element = \"%identity\"\nexternal string: string => element = \"%identity\"\n\n/* These are needed for Fragment (<> </>) support */\ntype fragmentProps = {children?: element}\n\n@module(\"preact\") external jsxFragment: component<fragmentProps> = \"Fragment\"\n\n/* The Elements module is the equivalent to the ReactDOM module in React. This holds things relevant to _lowercase_ JSX elements. */\nmodule Elements = {\n  /* Here you can control what props lowercase JSX elements should have. \n  A base that the React JSX transform uses is provided via JsxDOM.domProps, \n  but you can make this anything. The editor tooling will support \n  autocompletion etc for your specific type. */\n  type props = JsxDOM.domProps\n\n  @module(\"preact\")\n  external jsx: (string, props) => Jsx.element = \"jsx\"\n\n  @module(\"preact\")\n  external div: (string, props) => Jsx.element = \"jsx\"\n\n  @module(\"preact\")\n  external jsxKeyed: (string, props, ~key: string=?, @ignore unit) => Jsx.element = \"jsx\"\n\n  @module(\"preact\")\n  external jsxs: (string, props) => Jsx.element = \"jsxs\"\n\n  @module(\"preact\")\n  external jsxsKeyed: (string, props, ~key: string=?, @ignore unit) => Jsx.element = \"jsxs\"\n\n  external someElement: element => option<element> = \"%identity\"\n}\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching on Tuples in ReScript\nDESCRIPTION: Shows pattern matching on an inline tuple, demonstrating how it can be used to create a 2D table-like structure.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_5\n\nLANGUAGE: ReScript\nCODE:\n```\ntype animal = Dog | Cat | Bird\nlet categoryId = switch (isBig, myAnimal) {\n| (true, Dog) => 1\n| (true, Cat) => 2\n| (true, Bird) => 3\n| (false, Dog | Cat) => 4\n| (false, Bird) => 5\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar categoryId = isBig ? (myAnimal + 1) | 0 : myAnimal >= 2 ? 5 : 4;\n```\n\n----------------------------------------\n\nTITLE: Accessing Module Contents in ReScript\nDESCRIPTION: Shows how to access a module's contents using dot notation. This example accesses types and functions from the previously defined School module.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/module.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\nlet anotherPerson: School.profession = School.Teacher\nJs.log(School.getProfession(anotherPerson)) /* \"A teacher\" */\n```\n\nLANGUAGE: js\nCODE:\n```\nvar anotherPerson = /* Teacher */0;\nconsole.log(\"A teacher\");\n```\n\n----------------------------------------\n\nTITLE: Implementing async/await with fetch API in ReScript\nDESCRIPTION: This snippet demonstrates how to use async/await in ReScript with the fetch API. It creates bindings for the fetch function, defines a Response module for handling JSON data, and implements a login function that makes an asynchronous API request and handles the response using pattern matching.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/async-await.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\n// A generic Response type for typing our fetch requests\nmodule Response = {\n  type t<'data>\n  @send external json: t<'data> => promise<'data> = \"json\"\n}\n\n// A binding to our globally available `fetch` function. `fetch` is a\n// standardized function to retrieve data from the network that is available in\n// all modern browsers.\n@val @scope(\"globalThis\")\nexternal fetch: (\n  string,\n  'params,\n) => promise<Response.t<{\"token\": Nullable.t<string>, \"error\": Nullable.t<string>}>> =\n  \"fetch\"\n\n// We now use our asynchronous `fetch` function to simulate a login.\n// Note how we use `await` with regular functions returning a `promise`.\nlet login = async (email: string, password: string) => {\n  let body = {\n    \"email\": email,\n    \"password\": password,\n  }\n\n  let params = {\n    \"method\": \"POST\",\n    \"headers\": {\n      \"Content-Type\": \"application/json\",\n    },\n    \"body\": Json.stringifyAny(body),\n  }\n\n  try {\n    let response = await fetch(\"https://reqres.in/api/login\", params)\n    let data = await response->Response.json\n\n    switch Nullable.toOption(data[\"error\"]) {\n    | Some(msg) => Error(msg)\n    | None =>\n      switch Nullable.toOption(data[\"token\"]) {\n      | Some(token) => Ok(token)\n      | None => Error(\"Didn't return a token\")\n      }\n    }\n  } catch {\n  | _ => Error(\"Unexpected network error occurred\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing JSX Syntax in JavaScript and ReScript\nDESCRIPTION: Shows the similarities and differences in JSX syntax between JavaScript and ReScript, including prop passing and children spread.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/overview.mdx#2025-04-18_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Comp message={message} />\n```\n\nLANGUAGE: ReScript\nCODE:\n```\n<Comp message />\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n<input checked />\n```\n\nLANGUAGE: ReScript\nCODE:\n```\n<input checked=true />\n```\n\nLANGUAGE: ReScript\nCODE:\n```\n<Comp>...children</Comp>\n```\n\n----------------------------------------\n\nTITLE: Using Pattern Matching with Variants for Optimized JavaScript Output\nDESCRIPTION: Demonstrates how ReScript's pattern matching on variants compiles to efficient JavaScript, with constant-time jumps instead of linear conditional checks.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/variant.mdx#2025-04-18_snippet_11\n\nLANGUAGE: res\nCODE:\n```\ntype animal = Dog | Cat | Bird\nlet data = Dog\nswitch data {\n| Dog => Js.log(\"Wof\")\n| Cat => Js.log(\"Meow\")\n| Bird => Js.log(\"Kashiiin\")\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nconsole.log(\"Wof\");\n\nvar data = /* Dog */0;\n```\n\n----------------------------------------\n\nTITLE: Optimal Pattern Matching in ReScript\nDESCRIPTION: The most efficient and maintainable implementation using pattern matching. Provides both conciseness and type safety while maintaining exhaustiveness checking.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_21\n\nLANGUAGE: rescript\nCODE:\n```\nlet optionBoolToBool = opt => {\n  switch opt {\n  | Some(trueOrFalse) => trueOrFalse\n  | None => false\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction optionBoolToBool(opt) {\n  if (opt !== undefined) {\n    return opt;\n  } else {\n    return false;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ReScript React Component Definition with Decorator\nDESCRIPTION: Demonstrates how to define a React component using the @react.component decorator and its expanded form showing the generated interface.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/beyond-jsx.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nmodule Friend = {\n  @react.component\n  let make = (~name: string, ~children) => {\n    <div>\n      {React.string(name)}\n      children\n    </div>\n  }\n}\n```\n\nLANGUAGE: rescript\nCODE:\n```\nmodule Friend = {\n  @obj\n  external makeProps: (\n    ~name: string,\n    ~children: 'children,\n    ~key: string=?,\n    unit) => {\"name\": string, \"children\": 'children} = \"\";\n\n  let make = (props: {\"name\": string, \"children\": 'children}) => {\n    // React element creation from the original make function\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a React Ref for State Management\nDESCRIPTION: Demonstrates how to create a ref using React.useRef hook and use it to track state that doesn't trigger re-renders. This example shows a click counter that updates without re-rendering the component.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/refs-and-the-dom.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\n@react.component\nlet make = () => {\n  let clicks = React.useRef(0)\n\n  let onClick = (_) => {\n    clicks.current = clicks.current + 1\n  };\n\n  <div onClick>\n    {Belt.Int.toString(clicks.current)->React.string}\n  </div>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a JS Object in ReScript\nDESCRIPTION: Demonstrates two ways to create a JavaScript object in ReScript: using object literal syntax and using a record type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/newcomer-examples.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet student1 = {\n  \"name\": \"John\",\n  \"age\": 30,\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar student1 = {\n  name: \"John\",\n  age: 30,\n};\n```\n\nLANGUAGE: rescript\nCODE:\n```\ntype payload = {\n  name: string,\n  age: int,\n}\n\nlet student1 = {\n  name: \"John\",\n  age: 30,\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar student1 = {\n  name: \"John\",\n  age: 30,\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Props for React Components in ReScript\nDESCRIPTION: Shows how to define component props using ReScript's labeled arguments. This example defines an Article component with title, visitorCount and children props, then demonstrates how ReScript translates this to JavaScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/components-and-props.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\n// src/Article.res\n@react.component\nlet make = (~title: string, ~visitorCount: int, ~children: React.element) => {\n  let visitorCountMsg = \"You are visitor number: \" ++ Belt.Int.toString(visitorCount);\n  <div>\n    <div> {React.string(title)} </div>\n    <div> {React.string(visitorCountMsg)} </div>\n    children\n  </div>\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar React = require(\"react\");\n\nfunction Article(Props) {\n  var title = Props.title;\n  var visitorCount = Props.visitorCount;\n  var children = Props.children;\n  var visitorCountMsg = \"You are visitor number: \" + String(visitorCount);\n  return React.createElement(\"div\", undefined, React.createElement(\"div\", undefined, title), React.createElement(\"div\", undefined, visitorCountMsg), children);\n}\n\nvar make = Article;\n```\n\n----------------------------------------\n\nTITLE: Creating Promises in ReScript\nDESCRIPTION: Demonstrates three ways to create promises in ReScript: using Promise.make with resolve/reject callbacks, Promise.resolve for immediate values, and Promise.reject for rejections.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/promise.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\nlet p1 = Promise.make((resolve, reject) => {\n  // We use uncurried functions for resolve / reject\n  // for cleaner JS output without unintended curry calls\n  resolve(\"hello world\")\n})\n\nlet p2 = Promise.resolve(\"some value\")\n\n// You can only reject `exn` values for streamlined catch handling\nexception MyOwnError(string)\nlet p3 = Promise.reject(MyOwnError(\"some rejection\"))\n```\n\n----------------------------------------\n\nTITLE: Stringifying ReScript Values to JSON\nDESCRIPTION: Shows how to convert ReScript values to JSON strings using Js.Json.stringifyAny. This example demonstrates converting an array of strings to its JSON representation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/json.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\nJs.log(Js.Json.stringifyAny([\"Amy\", \"Joe\"]))\n```\n\nLANGUAGE: js\nCODE:\n```\nconsole.log(JSON.stringify([\n  \"Amy\",\n  \"Joe\"\n]));\n```\n\n----------------------------------------\n\nTITLE: Optional Props in ReScript React Components\nDESCRIPTION: Demonstrates how to define and handle optional props in ReScript React. The Greeting component uses pattern matching on an optional name prop to conditionally render different greeting messages.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/components-and-props.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\n// Greeting.res\n@react.component\nlet make = (~name: option<string>=?) => {\n  let greeting = switch name {\n  | Some(name) => \"Hello \" ++ name ++ \"!\"\n  | None => \"Hello stranger!\"\n  }\n  <div> {React.string(greeting)} </div>\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Greeting(props) {\n  var name = props.name;\n  var greeting = name !== undefined ? \"Hello \" + name + \"!\" : \"Hello stranger!\";\n  return React.createElement(\"div\", undefined, greeting);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic useRef Hook Usage in ReScript\nDESCRIPTION: Demonstrates the basic syntax for using the useRef hook in ReScript and shows the resulting JavaScript output. The hook creates a persistent mutable container that will last for the component's lifetime.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/hooks-ref.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\nlet refContainer = React.useRef(initialValue);\n```\n\nLANGUAGE: js\nCODE:\n```\nvar button = React.useRef(null);\nReact.useRef(0);\n```\n\n----------------------------------------\n\nTITLE: Renaming Fields While Destructuring Records in ReScript\nDESCRIPTION: Shows how to rename a field during record destructuring. This example renames the 'name' field to 'n' during the destructuring operation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\nlet {name: n} = student1 // \"John\" assigned to `n`\n```\n\nLANGUAGE: js\nCODE:\n```\nvar n = \"John\";\n```\n\n----------------------------------------\n\nTITLE: Importing an ES6 Default Export in ReScript\nDESCRIPTION: Illustrates how to import a default export from an ES6 module using the \"default\" value on the right-hand side of the external declaration.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/import-from-export-to-js.mdx#2025-04-18_snippet_2\n\nLANGUAGE: ReScript\nCODE:\n```\n@module(\"./student\") external studentName: string = \"default\"\nJs.log(studentName)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Student from \"./student\";\nvar studentName = Student;\n```\n\n----------------------------------------\n\nTITLE: Implementing React Module in ReScript\nDESCRIPTION: This snippet demonstrates the implementation of a React module in a .res file, which implicitly defines the module React.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/module.mdx#2025-04-18_snippet_13\n\nLANGUAGE: res\nCODE:\n```\n/* file React.res (implementation. Compiles to module React) */\ntype state = int\nlet render = (str) => str\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction render(str) {\n  return str;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Variant Constructors with Arguments in ReScript\nDESCRIPTION: Demonstrates creating variant values with different constructors that hold data arguments, showing how to pass values to variant constructors.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/variant.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nlet myAccount = Facebook(\"Josh\", 26)\nlet friendAccount = Instagram(\"Jenny\")\n```\n\nLANGUAGE: js\nCODE:\n```\nvar myAccount = {\n  TAG: /* Facebook */1,\n  _0: \"Josh\",\n  _1: 26\n};\nvar friendAccount = {\n  TAG: /* Instagram */0,\n  _0: \"Jenny\"\n};\n```\n\n----------------------------------------\n\nTITLE: Theme Container Component with State Management\nDESCRIPTION: Complex example showing state management and prop passing between parent and child components for theme switching functionality.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/hooks-state.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\n// ThemeContainer.res\nmodule ControlPanel = {\n  @react.component\n  let make = (~setDarkmode, ~darkmode) => {\n    let onClick = evt => {\n      ReactEvent.Mouse.preventDefault(evt)\n      setDarkmode(prev => !prev)\n    }\n\n    let toggleText = \"Switch to \" ++ ((darkmode ? \"light\" : \"dark\") ++ \" theme\")\n\n    <div> <button onClick> {React.string(toggleText)} </button> </div>\n  }\n}\n\n@react.component\nlet make = (~content) => {\n  let (darkmode, setDarkmode) = React.useState(_ => false)\n\n  let className = darkmode ? \"theme-dark\" : \"theme-light\"\n\n  <div className>\n    <section>\n      <h1> {React.string(\"More Infos about ReScript\")} </h1> content\n    </section>\n    <ControlPanel darkmode setDarkmode />\n  </div>\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction ControlPanel(Props) {\n  var setDarkmode = Props.setDarkmode;\n  var darkmode = Props.darkmode;\n  var onClick = function (evt) {\n    evt.preventDefault();\n    return Curry._1(setDarkmode, (function (prev) {\n                  return !prev;\n                }));\n  };\n  var toggleText = \"Switch to \" + ((\n      darkmode ? \"light\" : \"dark\"\n    ) + \" theme\");\n  return React.createElement(\"div\", undefined, React.createElement(\"button\", {\n                  onClick: onClick\n                }, toggleText));\n}\n\nfunction ThemeContainer(Props) {\n  var content = Props.content;\n  var match = React.useState(function () {\n        return false;\n      });\n  var darkmode = match[0];\n  var className = darkmode ? \"theme-dark\" : \"theme-light\";\n  return React.createElement(\"div\", {\n              className: className\n            }, React.createElement(\"section\", undefined, React.createElement(\"h1\", undefined, \"More Infos about ReScript\"), content), React.createElement(Playground$ControlPanel, {\n                  setDarkmode: match[1],\n                  darkmode: darkmode\n                }));\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling with Async/Await in ReScript\nDESCRIPTION: Demonstrates error handling techniques using try/catch and switch statements with async/await in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/async-await.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet authenticate = async () => {\n  raise(Exn.raiseRangeError(\"Authentication failed.\"))\n}\n\nlet checkAuth = async () => {\n  try {\n    await authenticate()\n  } catch {\n  | Exn.Error(e) =>\n    switch Exn.message(e) {\n    | Some(msg) => Console.log(\"JS error thrown: \" ++ msg)\n    | None => Console.log(\"Some other exception has been thrown\")\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Type Inference in ReScript\nDESCRIPTION: Shows how ReScript can infer types without explicit annotations for variables and functions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/type.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\nlet score = 10\nlet add = (a, b) => a + b\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar score = 10;\nfunction add(a, b) {\n  return a + b | 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching with Option Type in ReScript\nDESCRIPTION: Demonstrates how to handle both cases of an Option type using pattern matching, ensuring safe handling of potentially nonexistent values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/null-undefined-option.mdx#2025-04-18_snippet_2\n\nLANGUAGE: ReScript\nCODE:\n```\nswitch licenseNumber {\n| None =>\n  Console.log(\"The person doesn't have a car\")\n| Some(number) =>\n  Console.log(\"The person's license number is \" ++ Int.toString(number))\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar number = licenseNumber;\n\nif (number !== undefined) {\n  console.log(\"The person's license number is \" + number.toString());\n} else {\n  console.log(\"The person doesn't have a car\");\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Native JSON Type Using Unboxed Variants in ReScript\nDESCRIPTION: Shows how to create a idiomatic JSON representation using unboxed variants. This example defines a recursive JSON type that can represent all possible JSON values including null, boolean, string, number, object, and array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/variant.mdx#2025-04-18_snippet_12\n\nLANGUAGE: rescript\nCODE:\n```\n@unboxed\ntype rec json =\n  | @as(null) Null\n  | Boolean(bool)\n  | String(string)\n  | Number(float)\n  | Object(Dict.t<json>)\n  | Array(array<json>)\n\nlet myValidJsonValue = Array([String(\"Hi\"), Number(123.)])\n```\n\n----------------------------------------\n\nTITLE: Basic Pipe Operator Usage in ReScript\nDESCRIPTION: Demonstrates how the pipe operator transforms nested function calls into a more readable linear form.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/pipe.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nvalidateAge(getAge(parseData(person)))\n```\n\nLANGUAGE: rescript\nCODE:\n```\nperson\n  ->parseData\n  ->getAge\n  ->validateAge\n```\n\n----------------------------------------\n\nTITLE: Basic useState Hook Usage in ReScript React\nDESCRIPTION: Demonstrates the basic syntax for using the useState hook in ReScript React, returning a tuple containing the state value and setState function. The JavaScript output shows how this is translated to JavaScript code.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/hooks-state.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nlet (state, setState) = React.useState(_ => initialState)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar match = React.useState(function () {\n      return initialState;\n    });\n\nvar state = match[0];\n\nvar setState = match[1];\n```\n\n----------------------------------------\n\nTITLE: Complex Pattern Matching with Nested Patterns\nDESCRIPTION: Demonstrates advanced pattern matching with nested patterns, including OR patterns, deep destructuring, and conditional logic based on nested data structures.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_7\n\nLANGUAGE: res\nCODE:\n```\nlet person1 = Teacher({name: \"Jane\", age: 35})\n\nlet message = switch person1 {\n| Teacher({name: \"Mary\" | \"Joe\"}) =>\n  `Hey, still going to the party on Saturday?`\n| Teacher({name}) =>\n  // this is matched only if `name` isn't \"Mary\" or \"Joe\"\n  `Hello ${name}.`\n| Student({name, reportCard: {passing: true, gpa}}) =>\n  `Congrats ${name}, nice GPA of ${Js.Float.toString(gpa)} you got there!`\n| Student({\n    reportCard: {gpa: 0.0},\n    status: Vacations(daysLeft) | Sabbatical(daysLeft)\n  }) =>\n  `Come back in ${Js.Int.toString(daysLeft)} days!`\n| Student({status: Sick}) =>\n  `How are you feeling?`\n| Student({name}) =>\n  `Good luck next semester ${name}!`\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar person1 = {\n  TAG: /* Teacher */0,\n  name: \"Jane\",\n  age: 35\n};\n\nvar message;\n\nif (person1.TAG) {\n  var match$1 = person1.status;\n  var name = person1.name;\n  var match$2 = person1.reportCard;\n  message = match$2.passing\n    ? \"Congrats \" +\n      name +\n      \", nice GPA of \" +\n      match$2.gpa.toString() +\n      \" you got there!\"\n    : typeof match$1 === \"number\"\n    ? match$1 !== 0\n      ? \"Good luck next semester \" + name + \"!\"\n      : \"How are you feeling?\"\n    : person1.reportCard.gpa !== 0.0\n    ? \"Good luck next semester \" + name + \"!\"\n    : \"Come back in \" + match$1._0.toString() + \" days!\";\n} else {\n  var name$1 = person1.name;\n  switch (name$1) {\n    case \"Joe\":\n    case \"Mary\":\n      message = \"Hey, still going to the party on Saturday?\";\n      break;\n    default:\n      message = \"Hello \" + name$1 + \".\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Final Typed ReScript Implementation\nDESCRIPTION: Fully converted ReScript code with proper type definitions and idiomatic syntax.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/converting-from-js.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\ntype school\ntype student\ntype payload = {\n  student: student\n}\n\n@module external school: school = \"school\"\n@send external getStudentById: (school, int) => student = \"getStudentById\"\n\nlet defaultId = 10\n\nlet queryResult = (usePayload, payload) => {\n  if usePayload {\n    payload.student\n  } else {\n    school->getStudentById(defaultId)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Theme Provider with useContext in ReScript React\nDESCRIPTION: This example demonstrates how to create a theme context in ReScript React and use the useContext hook to access theme values throughout a component tree. It includes creating a context, a provider component, and consuming the context in nested components to apply theme-specific styling.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/hooks-context.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\n// App.res\nmodule ThemeContext = {\n  let context = React.createContext(\"light\")\n\n  module Provider = {\n    let make = React.Context.provider(context)\n  }\n}\n\nmodule ThemedButton = {\n  @react.component\n  let make = () => {\n    let theme = React.useContext(ThemeContext.context)\n    let (color, backgroundColor) = switch theme {\n    | \"dark\" => (\"#ffffff\", \"#222222\")\n    | \"light\" | _ => (\"#000000\", \"#eeeeee\")\n    }\n\n    let style = ReactDOMStyle.make(~color, ~backgroundColor, ())\n\n    <button style> {React.string(\"I am a styled button!\")} </button>\n  }\n}\n\nmodule Toolbar = {\n  @react.component\n  let make = () => {\n    <div> <ThemedButton /> </div>\n  }\n}\n\n@react.component\nlet make = () => {\n  <ThemeContext.Provider value=\"dark\">\n    <div> <Toolbar /> </div>\n  </ThemeContext.Provider>\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar context = React.createContext(\"light\");\n\nvar make = context.Provider;\n\nvar Provider = {\n  make: make\n};\n\nvar ThemeContext = {\n  context: context,\n  Provider: Provider\n};\n\nfunction App$ThemedButton(props) {\n  var theme = React.useContext(context);\n  var match;\n  switch (theme) {\n    case \"dark\" :\n        match = [\n          \"#ffffff\",\n          \"#222222\"\n        ];\n        break;\n    case \"light\" :\n        match = [\n          \"#000000\",\n          \"#eeeeee\"\n        ];\n        break;\n    default:\n      match = [\n        \"#000000\",\n        \"#eeeeee\"\n      ];\n  }\n  var style = {\n    backgroundColor: match[1],\n    color: match[0]\n  };\n  return React.createElement(\"button\", {\n              style: style\n            }, \"I am a styled button!\");\n}\n\nvar ThemedButton = {\n  make: App$ThemedButton\n};\n\nfunction App$Toolbar(props) {\n  return React.createElement(\"div\", undefined, React.createElement(App$ThemedButton, {}));\n}\n\nvar Toolbar = {\n  make: App$Toolbar\n};\n\nfunction App(props) {\n  return React.createElement(make, {\n              value: \"dark\",\n              children: React.createElement(\"div\", undefined, React.createElement(App$Toolbar, {}))\n            });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining External Promise Functions in ReScript\nDESCRIPTION: External bindings for Promise-based API functions used in examples\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/async-await.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\n@val external fetchUserMail: string => promise<string> = \"GlobalAPI.fetchUserMail\"\n@val external sendAnalytics: string => promise<unit> = \"GlobalAPI.sendAnalytics\"\n```\n\n----------------------------------------\n\nTITLE: Using Type Parameters (Generics) in ReScript\nDESCRIPTION: Demonstrates how to use type parameters to create generic types and reduce code duplication.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/type.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ReScript\nCODE:\n```\ntype coordinates<'a> = ('a, 'a, 'a)\n\nlet a: coordinates<int> = (10, 20, 20)\nlet b: coordinates<float> = (10.5, 20.5, 20.5)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar a = [10, 20, 20];\nvar b = [10.5, 20.5, 20.5];\n```\n\n----------------------------------------\n\nTITLE: Binding to Record-like JS Objects using ReScript Record\nDESCRIPTION: Demonstrates how to bind a JavaScript object with fixed fields to a ReScript record type. It also shows how to use the @module external to import from a JavaScript module.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/bind-to-js-object.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\ntype person = {\n  name: string,\n  friends: array<string>,\n  age: int,\n}\n\n@module(\"MySchool\") external john: person = \"john\"\n\nlet johnName = john.name\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar MySchool = require(\"MySchool\");\n\nvar johnName = MySchool.john.name;\n```\n\n----------------------------------------\n\nTITLE: Function Declaration Syntax in ReScript\nDESCRIPTION: Provides examples of various function declaration syntaxes in ReScript, including anonymous functions, labeled arguments, default values, and optional parameters.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/function.mdx#2025-04-18_snippet_21\n\nLANGUAGE: res\nCODE:\n```\n// anonymous function\n(x, y) => 1\n// bind to a name\nlet add = (x, y) => 1\n\n// labeled\nlet add = (~first as x, ~second as y) => x + y\n// with punning sugar\nlet add = (~first, ~second) => first + second\n\n// labeled with default value\nlet add = (~first as x=1, ~second as y=2) => x + y\n// with punning\nlet add = (~first=1, ~second=2) => first + second\n\n// optional\nlet add = (~first as x=?, ~second as y=?) => switch x {...}\n// with punning\nlet add = (~first=?, ~second=?) => switch first {...}\n```\n\n----------------------------------------\n\nTITLE: Binding JS Function with Labeled Arguments in ReScript\nDESCRIPTION: Shows how to bind a JavaScript function with labeled arguments in ReScript, improving clarity of usage. The example includes both ReScript code and its JavaScript output.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/bind-to-js-function.mdx#2025-04-18_snippet_1\n\nLANGUAGE: ReScript\nCODE:\n```\n@module(\"MyGame\")\nexternal draw: (~x: int, ~y: int, ~border: bool=?) => unit = \"draw\"\n\ndraw(~x=10, ~y=20, ~border=true)\ndraw(~x=10, ~y=20)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar MyGame = require(\"MyGame\");\n\nMyGame.draw(10, 20, true);\nMyGame.draw(10, 20, undefined);\n```\n\n----------------------------------------\n\nTITLE: Creating Objects in ReScript\nDESCRIPTION: Demonstrates object creation syntax in ReScript with type inference.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/object.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet me = {\n  \"age\": 5,\n  \"name\": \"Big ReScript\"\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar me = {\n  \"age\": 5,\n  \"name\": \"Big ReScript\"\n};\n```\n\n----------------------------------------\n\nTITLE: Exhaustiveness Check in ReScript Pattern Matching\nDESCRIPTION: Illustrates ReScript's compile-time exhaustiveness check for pattern matching. It ensures all possible cases are handled, preventing potential runtime errors.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_14\n\nLANGUAGE: ReScript\nCODE:\n```\nlet message = switch person1 {\n| Teacher({name: \"Mary\" | \"Joe\"}) =>\n  `Hey, still going to the party on Saturday?`\n| Student({name, reportCard: {passing: true, gpa}}) =>\n  `Congrats ${name}, nice GPA of ${Float.toString(gpa)} you got there!`\n| Student({\n    reportCard: {gpa: 0.0},\n    status: Vacations(daysLeft) | Sabbatical(daysLeft)\n  }) =>\n  `Come back in ${Int.toString(daysLeft)} days!`\n| Student({status: Sick}) =>\n  `How are you feeling?`\n| Student({name}) =>\n  `Good luck next semester ${name}!`\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (person1.TAG) {\n  var match$1 = person1.status;\n  var name = person1.name;\n  var match$2 = person1.reportCard;\n  if (match$2.passing) {\n    \"Congrats \" + name + \", nice GPA of \" + match$2.gpa.toString() + \" you got there!\";\n  } else if (typeof match$1 === \"number\") {\n    if (match$1 !== 0) {\n      \"Good luck next semester \" + name + \"!\";\n    } else {\n      \"How are you feeling?\";\n    }\n  } else if (person1.reportCard.gpa !== 0.0) {\n    \"Good luck next semester \" + name + \"!\";\n  } else {\n    \"Come back in \" + match$1._0.toString() + \" days!\";\n  }\n} else {\n  switch (person1.name) {\n    case \"Joe\":\n    case \"Mary\":\n      break;\n    default:\n      throw {\n        RE_EXN_ID: \"Match_failure\",\n        _1: [\n          \"playground.res\",\n          13,\n          0\n        ],\n        Error: new Error()\n      };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Escaped Identifiers in ReScript\nDESCRIPTION: Demonstrates ReScript's escape hatch syntax that allows using normally illegal identifiers like those containing special characters, reserved keywords, or capitalized names. The syntax uses backslash followed by the identifier in double quotes.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/use-illegal-identifier-names.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\nlet \\\"my-🍎\" = 10\n\ntype element = {\n  \\\"aria-label\": string\n}\n\nlet myElement = {\n  \\\"aria-label\": \"close\"\n}\n\nlet label = myElement.\\\"aria-label\"\n\nlet calculate = (~\\\"Props\") => {\n  \\\"Props\" + 1\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar my$$unknown$unknown$unknown$unknown = 10;\n\nvar myElement = {\n  \"aria-label\": \"close\"\n};\n\nvar label = myElement[\"aria-label\"];\n\nfunction calculate(Props) {\n  return Props + 1 | 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Optional Labeled Arguments\nDESCRIPTION: Implementing optional labeled arguments with the ? syntax. This example shows how an optional radius parameter is handled using pattern matching on the option type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/function.mdx#2025-04-18_snippet_9\n\nLANGUAGE: res\nCODE:\n```\n// radius can be omitted\nlet drawCircle = (~color, ~radius=?) => {\n  setColor(color)\n  switch radius {\n  | None => startAt(1, 1)\n  | Some(r_) => startAt(r_, r_)\n  }\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar Caml_option = require(\"./stdlib/caml_option.js\");\n\nfunction drawCircle(color, radius) {\n  setColor(color);\n  if (radius === undefined) {\n    return startAt(1, 1);\n  }\n  var r_ = Caml_option.valFromOption(radius);\n  return startAt(r_, r_);\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Part of a Value in ReScript Pattern Matching\nDESCRIPTION: Demonstrates how to use the '_' wildcard to ignore parts of a value when pattern matching in ReScript. It shows examples with variant types like Teacher and Student.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_8\n\nLANGUAGE: ReScript\nCODE:\n```\nswitch person1 {\n| Teacher(_) => Console.log(\"Hi teacher\")\n| Student(_) => Console.log(\"Hey student\")\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (person1.TAG === \"Teacher\") {\n  console.log(\"Hi teacher\");\n} else {\n  console.log(\"Hey student\");\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Top-Level JavaScript with %%raw\nDESCRIPTION: Demonstrates how to paste raw JavaScript code at the top level using the %%raw syntax. The code is inserted as-is into the output JavaScript file.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/embed-raw-javascript.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\n%%raw(`\n// look ma, regular JavaScript!\nvar message = \"hello\";\nfunction greet(m) {\n  console.log(m)\n}\n`)\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// look ma, regular JavaScript!\nvar message = \"hello\";\nfunction greet(m) {\n  console.log(m)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a React Component with useEffect in ReScript\nDESCRIPTION: A FriendStatus component that displays whether a friend is online or offline using React hooks. It subscribes to friend status changes via an imaginary ChatAPI and updates state accordingly.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/hooks-custom.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\n// FriendStatus.res\n\nmodule ChatAPI = {\n  // Imaginary globally available ChatAPI for demo purposes\n  type status = { isOnline: bool };\n  @val external subscribeToFriendStatus: (string, status => unit) => unit = \"subscribeToFriendStatus\";\n  @val external unsubscribeFromFriendStatus: (string, status => unit) => unit = \"unsubscribeFromFriendStatus\";\n}\n\ntype state = Offline | Loading | Online;\n\n@react.component\nlet make = (~friendId: string) => {\n  let (state, setState) = React.useState(_ => Offline)\n\n  React.useEffect(() => {\n    let handleStatusChange = (status) => {\n      setState(_ => {\n        status.ChatAPI.isOnline ? Online : Offline\n      })\n    }\n\n    ChatAPI.subscribeToFriendStatus(friendId, handleStatusChange);\n    setState(_ => Loading);\n\n    let cleanup = () => {\n      ChatAPI.unsubscribeFromFriendStatus(friendId, handleStatusChange)\n    }\n\n    Some(cleanup)\n  })\n\n  let text = switch(state) {\n    | Offline => friendId ++ \" is offline\"\n    | Online => friendId ++ \" is online\"\n    | Loading => \"loading...\"\n  }\n\n  <div>\n  \t{React.string(text)}\n  </div>\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ReScript Variant Type with GenType Annotation\nDESCRIPTION: Example of how to define a ReScript variant type that will be exported to TypeScript using the @genType annotation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/typescript-integration.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\n@genType\ntype t = | A(int) | B(string)\n```\n\n----------------------------------------\n\nTITLE: JSON Decoding with Pattern Matching on Unboxed Variants in ReScript\nDESCRIPTION: Demonstrates how to write a JSON decoder using unboxed variants and pattern matching. The example shows decoding a user object with nested structures, leveraging the type safety of variants while maintaining idiomatic JavaScript representation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/variant.mdx#2025-04-18_snippet_13\n\nLANGUAGE: rescript\nCODE:\n```\n@unboxed\ntype rec json =\n  | @as(null) Null\n  | Boolean(bool)\n  | String(string)\n  | Number(float)\n  | Object(Dict.t<json>)\n  | Array(array<json>)\n\ntype rec user = {\n  name: string,\n  age: int,\n  bestFriend: option<user>,\n}\n\nlet rec decodeUser = json =>\n  switch json {\n  | Object(userDict) =>\n    switch (\n      userDict->Dict.get(\"name\"),\n      userDict->Dict.get(\"age\"),\n      userDict->Dict.get(\"bestFriend\"),\n    ) {\n    | (Some(String(name)), Some(Number(age)), Some(maybeBestFriend)) =>\n      Some({\n        name,\n        age: age->Float.toInt,\n        bestFriend: maybeBestFriend->decodeUser,\n      })\n    | _ => None\n    }\n  | _ => None\n  }\n\nlet decodeUsers = json =>\n  switch json {\n  | Array(array) => array->Array.map(decodeUser)->Array.keepSome\n  | _ => []\n  }\n```\n\n----------------------------------------\n\nTITLE: Defining Promise Type in ReScript Interface File\nDESCRIPTION: Example of how to type a function that returns a promise in a ReScript interface file. Shows declaration of a user type and a function that fetches a user asynchronously.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/promise.mdx#2025-04-18_snippet_0\n\nLANGUAGE: resi\nCODE:\n```\n// User.resi file\n\ntype user = {name: string}\n\nlet fetchUser: string => promise<user>\n```\n\n----------------------------------------\n\nTITLE: Rendering Array of Todos in ReScript React\nDESCRIPTION: Demonstrates how to map an array of todo items to React elements with unique keys. Shows the basic pattern of converting array<Jsx.element> to Jsx.element using React.array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/arrays-and-keys.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype todo = {id: string, text: string}\n\n@react.component\nlet make = () => {\n  let todos = [{id: \"todo1\", text: \"Todo 1\"}, {id: \"todo2\", text: \"Todo 2\"}]\n\n  let items = Array.map(todos, todo => {\n    <li key={todo.id}> {React.string(todo.text)} </li>\n  })\n\n  <ul> {React.array(items)} </ul>\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Playground(props) {\n  var todos = [\n    {\n      id: \"todo1\",\n      text: \"Todo 1\"\n    },\n    {\n      id: \"todo2\",\n      text: \"Todo 2\"\n    }\n  ];\n  var items = todos.map(function (todo) {\n        return JsxRuntime.jsx(\"li\", {\n                    children: todo.text\n                  }, todo.id);\n      });\n  return JsxRuntime.jsx(\"ul\", {\n              children: items\n            });\n}\n```\n\n----------------------------------------\n\nTITLE: Text Input with useState in ReScript React\nDESCRIPTION: Implements a text input component that maintains its value in state. Demonstrates handling form events, preventing default behavior, and updating state based on input changes.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/hooks-state.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\n@react.component\nlet make = () => {\n  let (text, setText) = React.useState(_ => \"\");\n\n  let onChange = evt => {\n    ReactEvent.Form.preventDefault(evt)\n    let value = ReactEvent.Form.target(evt)[\"value\"]\n    setText(_prev => value);\n  }\n\n  <div>\n    <input onChange value=text />\n  </div>\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing FriendStatus Component Using Custom Hook in ReScript\nDESCRIPTION: A React component that displays a friend's online status using the FriendStatusHook.useFriendStatus custom hook. The component receives a friend object and renders their online status as text.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/hooks-custom.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ReScript\nCODE:\n```\n// FriendStatus.res\ntype friend = { id: string }\n\n@react.component\nlet make = (~friend: friend) => {\n  let onlineState = FriendStatusHook.useFriendStatus(friend.id)\n\n  let status = switch(onlineState) {\n    | FriendStatusHook.Online => \"Online\"\n    | Loading => \"Loading\"\n    | Offline => \"Offline\"\n  }\n\n  React.string(status)\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction FriendStatus(Props) {\n  var friend = Props.friend;\n  var onlineState = useFriendStatus(friend.id);\n  var color;\n  switch (onlineState) {\n    case /* Offline */0 :\n        color = \"red\";\n        break;\n    case /* Loading */1 :\n        color = \"grey\";\n        break;\n    case /* Online */2 :\n        color = \"green\";\n        break;\n\n  }\n  return React.createElement(\"li\", {\n              style: {\n                color: color\n              }\n            }, friend.name);\n}\n```\n\n----------------------------------------\n\nTITLE: Using the option type in ReScript\nDESCRIPTION: Demonstrates how to use the option type to handle potentially null values and pattern match on them.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/newcomer-examples.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\nlet possiblyNullValue1 = None\nlet possiblyNullValue2 = Some(\"Hello\")\n\nswitch possiblyNullValue2 {\n| None => Console.log(\"Nothing to see here.\")\n| Some(message) => Console.log(message)\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar possiblyNullValue1;\nvar possiblyNullValue2 = \"Hello\";\n\nif (possiblyNullValue2 !== undefined) {\n  console.log(possiblyNullValue2);\n} else {\n  console.log(\"Nothing to see here.\");\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Specifications in ReScript\nDESCRIPTION: Defines output module format and location. This configuration generates CommonJS format output files alongside source files using the 'in-source' property.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/build-configuration.mdx#2025-04-18_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"package-specs\": {\n    \"module\": \"commonjs\",\n    \"in-source\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Props with Labeled Arguments in ReScript React\nDESCRIPTION: An example of defining component props using ReScript's labeled arguments. The Article component accepts title, visitorCount, and children props, showcasing how to manage different prop types and render them.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/components-and-props.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\n// src/Article.res\n@react.component\nlet make = (~title: string, ~visitorCount: int, ~children: React.element) => {\n  let visitorCountMsg = \"You are visitor number: \" ++ Belt.Int.toString(visitorCount);\n  <div>\n    <div> {React.string(title)} </div>\n    <div> {React.string(visitorCountMsg)} </div>\n    children\n  </div>\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from \"react\";\n\nfunction Article(props) {\n  var visitorCountMsg = \"You are visitor number: \" + String(props.visitorCount);\n  return React.createElement(\"div\", undefined, React.createElement(\"div\", undefined, props.title), React.createElement(\"div\", undefined, visitorCountMsg), props.children);\n}\n\nvar make = Article;\n```\n\n----------------------------------------\n\nTITLE: Passing callback refs between parent and child components\nDESCRIPTION: Example showing how to pass callback refs between components, allowing a parent component to access a child component's DOM element.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/refs-and-the-dom.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\n// Parent.res\n\n@send external focus: Dom.element => unit = \"focus\"\n\nmodule CustomTextInput = {\n  @react.component\n  let make = (~setInputRef) => {\n    <div>\n      <input type_=\"text\" ref={ReactDOM.Ref.callbackDomRef(setInputRef)} />\n    </div>\n  }\n}\n\n@react.component\nlet make = () => {\n  let textInput = React.useRef(Js.Nullable.null)\n  let setInputRef = element => { textInput.current = element}\n\n  <CustomTextInput setInputRef/>\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction CustomTextInput(Props) {\n  var setInputRef = Props.setInputRef;\n  return React.createElement(\"div\", undefined, React.createElement(\"input\", {\n                  ref: setInputRef,\n                  type: \"text\"\n                }));\n}\n\nvar CustomTextInput = {\n  make: CustomTextInput\n};\n\nfunction Parent(Props) {\n  var textInput = React.useRef(null);\n  var setInputRef = function (element) {\n    textInput.current = element;\n\n  };\n  return React.createElement(CustomTextInput, {\n              setInputRef: setInputRef\n            });\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Async/Await Usage in ReScript\nDESCRIPTION: Demonstrates the basic syntax for using async/await in ReScript, including defining async functions and using await to handle promises.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/async-await.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nlet logUserDetails = async (userId: string) => {\n  let email = await fetchUserMail(userId)\n\n  await sendAnalytics(`User details have been logged for ${userId}`)\n\n  Console.log(`Email address for user ${userId}: ${email}`)\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nasync function logUserDetails(userId) {\n  var email = await GlobalAPI.fetchUserMail(userId);\n  await GlobalAPI.sendAnalytics(\"User details have been logged for \" + userId + \"\");\n  console.log(\"Email address for user \" + userId + \": \" + email + \"\");\n}\n```\n\n----------------------------------------\n\nTITLE: Basic ReScript React Router Implementation\nDESCRIPTION: Shows a basic implementation of routing in a ReScript React application, using pattern matching on the URL path to render different components.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/router.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\n// App.res\n@react.component\nlet make = () => {\n  let url = RescriptReactRouter.useUrl()\n  \n  switch url.path {\n    | list{\"user\", id} => <User id />\n    | list{} => <Home/>\n    | _ => <PageNotFound/>\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Constraining Integer Arguments with Polymorphic Variants\nDESCRIPTION: Shows how to use polymorphic variants with @int annotation to constrain integer arguments to specific values, providing better type safety and semantic meaning for numeric constants.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/bind-to-js-function.mdx#2025-04-18_snippet_9\n\nLANGUAGE: res\nCODE:\n```\n@val\nexternal testIntType: (\n  @int [\n    | #onClosed\n    | @as(20) #onOpen\n    | #inBinary\n  ])\n  => int = \"testIntType\"\ntestIntType(#inBinary)\n```\n\nLANGUAGE: js\nCODE:\n```\ntestIntType(21);\n```\n\n----------------------------------------\n\nTITLE: Array Pattern Matching in ReScript\nDESCRIPTION: Demonstrates pattern matching on arrays, handling empty arrays, single-element arrays, and multi-element arrays with different branches of code.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_16\n\nLANGUAGE: res\nCODE:\n```\nlet students = [\"Jane\", \"Harvey\", \"Patrick\"]\nswitch students {\n| [] => Js.log(\"There are no students\")\n| [student1] =>\n  Js.log(\"There's a single student here: \" ++ student1)\n| manyStudents =>\n  // display the array of names\n  Js.log2(\"The students are: \", manyStudents)\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar students = [\"Jane\", \"Harvey\", \"Patrick\"];\n\nvar len = students.length;\n\nif (len !== 1) {\n  if (len !== 0) {\n    console.log(\"The students are: \", students);\n  } else {\n    console.log(\"There are no students\");\n  }\n} else {\n  var student1 = students[0];\n  console.log(\"There's a single student here: \" + student1);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useEffect in ReScript\nDESCRIPTION: Demonstrates the syntax for useEffect variants in ReScript, including useEffect, useEffect0, and useEffect1-7. Shows how to implement effects with and without cleanup, and how to handle dependencies.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/hooks-effect.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\n// Runs after every completed render\nReact.useEffect(() => {\n  // Run effects\n  None // or Some(() => {})\n})\n\n\n// Runs only once right after mounting the component\nReact.useEffect0(() => {\n  // Run effects\n  None // or Some(() => {})\n})\n\n// Runs everytime `prop1` has changed\nReact.useEffect1(() => {\n  // Run effects based on prop1\n  None\n}, [prop1])\n\n// Runs everytime `prop1` or `prop2` has changed\nReact.useEffect2(() => {\n  // Run effects based on prop1 / prop2\n  None\n}, (prop1, prop2))\n\nReact.useEffect3(() => {\n  None\n}, (prop1, prop2, prop3));\n\n// useEffect4...7 with according dependency\n// tuple just like useEffect3\n```\n\nLANGUAGE: js\nCODE:\n```\nReact.useEffect(function () { });\nReact.useEffect((function () { }), []);\nReact.useEffect((function () { }), [prop1]);\nReact.useEffect((function () { }), [ prop1, prop2 ]);\nReact.useEffect((function () { }), [ prop1, prop2, prop3 ]);\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching with Option Types\nDESCRIPTION: Handling option types using pattern matching to safely process both Some and None cases.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/null-undefined-option.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nswitch licenseNumber {\n| None =>\n  Js.log(\"The person doesn't have a car\")\n| Some(number) =>\n  Js.log(\"The person's license number is \" ++ Js.Int.toString(number))\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar number = licenseNumber;\n\nif (number !== undefined) {\n  console.log(\"The person's license number is \" + number.toString());\n} else {\n  console.log(\"The person doesn't have a car\");\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-argument Functions in ReScript\nDESCRIPTION: Definition and usage of a function that takes multiple arguments separated by commas. This example shows an add function that takes three parameters and returns their sum.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/function.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nlet add = (x, y, z) => x + y + z\nadd(1, 2, 3) // 6\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction add(x, y, z) {\n  return (x + y | 0) + z | 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic React Elements with JSX in ReScript\nDESCRIPTION: Demonstrates how to create a simple React element using JSX syntax in ReScript. Shows the fundamental pattern of wrapping string content with React.string() to convert it to a React element.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/elements-and-jsx.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\nlet element = <h1> {React.string(\"Hello World\")} </h1>\n```\n\n----------------------------------------\n\nTITLE: Counter Implementation with useReducer in ReScript\nDESCRIPTION: A complete counter component implementation using React.useReducer. Demonstrates defining action types as variants, state as a record, and implementing a reducer function with pattern matching.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/hooks-reducer.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\n// Counter.res\n\ntype action = Inc | Dec\ntype state = {count: int}\n\nlet reducer = (state, action) => {\n  switch action {\n  | Inc => {count: state.count + 1}\n  | Dec => {count: state.count - 1}\n  }\n}\n\n@react.component\nlet make = () => {\n  let (state, dispatch) = React.useReducer(reducer, {count: 0})\n\n  <>\n    {React.string(\"Count:\" ++ Belt.Int.toString(state.count))}\n    <button onClick={(_) => dispatch(Dec)}> {React.string(\"-\")} </button>\n    <button onClick={(_) => dispatch(Inc)}> {React.string(\"+\")} </button>\n  </>\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction reducer(state, action) {\n  if (action) {\n    return {\n            count: state.count - 1 | 0\n          };\n  } else {\n    return {\n            count: state.count + 1 | 0\n          };\n  }\n}\n\nfunction Counter(Props) {\n  var match = React.useReducer(reducer, {\n        count: 0\n      });\n  var dispatch = match[1];\n  return React.createElement(React.Fragment, undefined, \"Count:\" + String(match[0].count), React.createElement(\"button\", {\n                  onClick: (function (param) {\n                      return Curry._1(dispatch, /* Dec */1);\n                    })\n                }, \"-\"), React.createElement(\"button\", {\n                  onClick: (function (param) {\n                      return Curry._1(dispatch, /* Inc */0);\n                    })\n                }, \"+\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Using async/await with Promises in ReScript\nDESCRIPTION: Demonstrates the more ergonomic async/await syntax for working with promises in ReScript. This approach is recommended over the Promise.then method for better readability and fewer type issues.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/promise.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\nlet logAsyncMessage = async () => {\n  let msg = await Promise.resolve(\"hello world\")\n  Console.log(`Message: ${msg}`)\n}\n```\n\n----------------------------------------\n\nTITLE: Counter Example with useReducer in ReScript\nDESCRIPTION: A complete counter component implementation using React.useReducer with increment and decrement actions. It demonstrates defining action types, state types, and a reducer function in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/hooks-reducer.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\n// Counter.res\n\ntype action = Inc | Dec\ntype state = {count: int}\n\nlet reducer = (state, action) => {\n  switch action {\n  | Inc => {count: state.count + 1}\n  | Dec => {count: state.count - 1}\n  }\n}\n\n@react.component\nlet make = () => {\n  let (state, dispatch) = React.useReducer(reducer, {count: 0})\n\n  <>\n    {React.string(\"Count:\" ++ Belt.Int.toString(state.count))}\n    <button onClick={(_) => dispatch(Dec)}> {React.string(\"-\")} </button>\n    <button onClick={(_) => dispatch(Inc)}> {React.string(\"+\")} </button>\n  </>\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction reducer(state, action) {\n  if (action) {\n    return {\n            count: state.count - 1 | 0\n          };\n  } else {\n    return {\n            count: state.count + 1 | 0\n          };\n  }\n}\n\nfunction Counter(Props) {\n  var match = React.useReducer(reducer, {\n        count: 0\n      });\n  var dispatch = match[1];\n  return React.createElement(React.Fragment, undefined, \"Count:\" + String(match[0].count), React.createElement(\"button\", {\n                  onClick: (function (param) {\n                      return Curry._1(dispatch, /* Dec */1);\n                    })\n                }, \"-\"), React.createElement(\"button\", {\n                  onClick: (function (param) {\n                      return Curry._1(dispatch, /* Inc */0);\n                    })\n                }, \"+\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Using Unknown Type for Type Safety\nDESCRIPTION: Demonstrates using the unknown type for type safety when working with external JavaScript functions to ensure proper validation before use.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/bind-to-js-function.mdx#2025-04-18_snippet_9\n\nLANGUAGE: res\nCODE:\n```\n@get_index external getPropertyUnsafe: ({..}, string) => 'a = \"\"\n@get_index external getPropertySafe: ({..}, string) => unknown = \"\"\n\nlet person = {\"name\": \"Bob\", \"age\": 12}\n\nlet greeting1 = \"Hello, \" ++ getPropertyUnsafe(person, \"name\") // works (this time!)\n// let greeting2 = \"Hello, \" ++ getPropertySafe(person, \"name\") // syntax error\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Type Inference in ReScript\nDESCRIPTION: Shows how ReScript can infer types without explicit annotations for variables and functions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/type.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\nlet score = 10\nlet add = (a, b) => a + b\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar score = 10;\nfunction add(a, b) {\n  return a + b | 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Data Module with Shared Functions\nDESCRIPTION: Defines a module function that takes a type and a transformation function to create a module with logging and rendering capabilities.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/module-functions.mdx#2025-04-18_snippet_6\n\nLANGUAGE: res\nCODE:\n```\nmodule MakeDataModule = (\n  T: {\n    type t\n    let toString: t => string\n  },\n) => {\n  type t = T.t\n  let log = a => Console.log(\"The value is \" ++ T.toString(a))\n\n  module Render = {\n    @react.component\n    let make = (~value) => value->T.toString->React.string\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Type Annotations in ReScript\nDESCRIPTION: Demonstrates how to explicitly annotate types for variables and expressions in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/type.mdx#2025-04-18_snippet_1\n\nLANGUAGE: ReScript\nCODE:\n```\nlet score: int = 10\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar score = 10;\n```\n\n----------------------------------------\n\nTITLE: Matching on Arrays in ReScript\nDESCRIPTION: Demonstrates pattern matching on arrays in ReScript, including handling empty arrays, single-element arrays, and multi-element arrays.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_12\n\nLANGUAGE: ReScript\nCODE:\n```\nlet students = [\"Jane\", \"Harvey\", \"Patrick\"]\nswitch students {\n| [] => Console.log(\"There are no students\")\n| [student1] =>\n  Console.log(\"There's a single student here: \" ++ student1)\n| manyStudents =>\n  // display the array of names\n  Console.log2(\"The students are: \", manyStudents)\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar students = [\"Jane\", \"Harvey\", \"Patrick\"];\n\nvar len = students.length;\n\nif (len !== 1) {\n  if (len !== 0) {\n    console.log(\"The students are: \", students);\n  } else {\n    console.log(\"There are no students\");\n  }\n} else {\n  var student1 = students[0];\n  console.log(\"There's a single student here: \" + student1);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Module Signature in ReScript\nDESCRIPTION: Demonstrates how to create a module signature (type) using the 'module type' keyword, defining requirements for modules to match the signature.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/module.mdx#2025-04-18_snippet_7\n\nLANGUAGE: ReScript\nCODE:\n```\n/* Picking up previous section's example */\nmodule type EstablishmentType = {\n  type profession\n  let getProfession: profession => string\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Implementing Prop Drilling for Theme in ReScript React\nDESCRIPTION: This example demonstrates the traditional approach of manually passing theme props through component hierarchy. It defines a theme type and passes it from App to Toolbar to ThemedButton to Button, showing how prop drilling works in ReScript React.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/context.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\n// src/App.res\ntype theme = Light | Dark\n\nmodule Button = {\n  @react.component\n  let make = (~theme) => {\n    let className = switch theme {\n      | Light => \"theme-light\"\n      | Dark => \"theme-black\"\n    }\n    <button className> {React.string(\"Click me\")} </button>\n  }\n}\n\nmodule ThemedButton = {\n  @react.component\n  let make = (~theme) => {\n    <Button theme />\n  }\n}\n\nmodule Toolbar = {\n  @react.component\n  let make = (~theme) => {\n    <div>\n      <ThemedButton theme/>\n    </div>\n  }\n}\n\n@react.component\nlet make = () => {\n  // We define the theme in the\n  // toplevel App component and\n  // pass it down\n  <Toolbar theme=Dark/>\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction Button(props) {\n  var className = props.theme ? \"theme-black\" : \"theme-light\";\n  return React.createElement(\"button\", {\n              className: className\n            }, \"Click me\");\n}\n\nfunction ThemedButton(props) {\n  return React.createElement(App$Button, {\n              theme: props.theme\n            });\n}\n\nfunction Toolbar(props) {\n  return React.createElement(\"div\", undefined, React.createElement(App$ThemedButton, {\n                  theme: props.theme\n                }));\n}\n\nfunction App(props) {\n  return React.createElement(App$Toolbar, {\n              theme: /* Dark */1\n            });\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Variant Definition and Pattern Matching in ReScript\nDESCRIPTION: Demonstrates the basics of defining and using variants in ReScript. This example defines an animal type with pattern matching to handle different cases, showing how variants provide type safety for enumerated values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/variant.mdx#2025-04-18_snippet_15\n\nLANGUAGE: rescript\nCODE:\n```\ntype animal = Dog | Cat | Bird\n\ntype apiResponse = {\n  animal: animal\n}\n\nlet greetAnimal = (animal: animal) =>\n  switch animal {\n  | Dog => \"Wof\"\n  | Cat => \"Meow\"\n  | Bird => \"Kashiiin\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Using Optional Props with JSX in ReScript\nDESCRIPTION: Shows the special syntax for applying optional props in JSX and how it compiles to JavaScript. This snippet demonstrates the ?name syntax for passing optional values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/components-and-props.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\nlet name = Some(\"Andrea\")\n\n<Greeting ?name />\n```\n\nLANGUAGE: js\nCODE:\n```\nvar Caml_option = require(\"./stdlib/caml_option.js\");\nvar name = \"Andrea\";\n\nvar tmp = {};\n\nif (name !== undefined) {\n  tmp.name = Caml_option.valFromOption(name);\n}\n\nvar greeting = React.createElement(Playground$Greeting, tmp);\n```\n\n----------------------------------------\n\nTITLE: Creating Handwritten React Components in ReScript\nDESCRIPTION: Demonstrates how to write React components without using the @react.component decorator by manually defining the props type and make function. Shows both ReScript and compiled JavaScript output.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/components-and-props.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\nmodule Link = {\n  type props = {href: string, children: React.element};\n  \n  let make = (props: props) => { \n    <a href={props.href}>\n     {props.children}\n    </a>\n  }\n}\n\n<Link href=\"/docs\"> {React.string(\"Docs\")} </Link>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction make(props) {\n  return React.createElement(\n    \"a\",\n    { href: props.href },\n    props.children\n  );\n}\n\nvar Link = {\n  make: make,\n};\n\nReact.createElement(make, {\n  href: \"/docs\",\n  children: \"Docs\",\n});\n```\n\n----------------------------------------\n\nTITLE: Passing Information Between Hooks in a Chat Recipient Picker\nDESCRIPTION: Example of a chat recipient picker component that demonstrates passing information between hooks. It uses useState to track the selected recipient ID and passes that ID to the useFriendStatus hook to display the online status of the selected friend.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/hooks-custom.mdx#2025-04-18_snippet_5\n\nLANGUAGE: ReScript\nCODE:\n```\ntype friend = {id: string, name: string}\n\nlet friendList = [\n  {id: \"1\", name: \"Phoebe\"},\n  {id: \"2\", name: \"Rachel\"},\n  {id: \"3\", name: \"Ross\"},\n]\n\n@react.component\nlet make = () => {\n  let (recipientId, setRecipientId) = React.useState(_ => \"1\")\n  let recipientOnlineState = FriendStatusHook.useFriendStatus(recipientId)\n\n  let color = switch recipientOnlineState {\n  | FriendStatusHook.Offline => Circle.Red\n  | Online => Green\n  | Loading => Grey\n  }\n\n  let onChange = evt => {\n    let value = ReactEvent.Form.target(evt)[\"value\"]\n    setRecipientId(value)\n  }\n\n  let friends = Belt.Array.map(friendList, friend => {\n    <option key={friend.id} value={friend.id}>\n      {React.string(friend.name)}\n    </option>\n  })\n\n  <>\n    <Circle color />\n    <select value={recipientId} onChange>\n      {React.array(friends)}\n    </select>\n  </>\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar friendList = [\n  {\n    id: \"1\",\n    name: \"Phoebe\"\n  },\n  {\n    id: \"2\",\n    name: \"Rachel\"\n  },\n  {\n    id: \"3\",\n    name: \"Ross\"\n  }\n];\n\nfunction Playground(Props) {\n  var match = React.useState(function () {\n        return \"1\";\n      });\n  var setRecipientId = match[1];\n  var recipientId = match[0];\n  var recipientOnlineState = useFriendStatus(recipientId);\n  var color;\n  switch (recipientOnlineState) {\n    case /* Offline */0 :\n        color = /* Red */0;\n        break;\n    case /* Loading */1 :\n        color = /* Grey */2;\n        break;\n    case /* Online */2 :\n        color = /* Green */1;\n        break;\n\n  }\n  var onChange = function (evt) {\n    return Curry._1(setRecipientId, evt.target.value);\n  };\n  var friends = Belt_Array.map(friendList, (function (friend) {\n          return React.createElement(\"option\", {\n                      key: friend.id,\n                      value: friend.id\n                    }, friend.name);\n        }));\n  return React.createElement(React.Fragment, undefined, React.createElement(Playground$Circle, {\n                  color: color\n                }), React.createElement(\"select\", {\n                  value: recipientId,\n                  onChange: onChange\n                }, friends));\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Module Signatures in ReScript\nDESCRIPTION: Shows how to create module signatures (module types) to define interfaces that modules must satisfy. This example defines a signature that requires a type 'profession' and a function to get the profession as a string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/module.mdx#2025-04-18_snippet_9\n\nLANGUAGE: res\nCODE:\n```\n/* Picking up previous section's example */\nmodule type EstablishmentType = {\n  type profession\n  let getProfession: profession => string\n}\n```\n\nLANGUAGE: js\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: JSON Parsing Example - Complex Object\nDESCRIPTION: Example showing how to parse and extract data from a complex JSON object with nested arrays.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/json.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nlet getIds = s => {\n  let json = try Js.Json.parseExn(s) catch {\n  | _ => failwith(\"Error parsing JSON string\")\n  }\n\n  switch Js.Json.classify(json) {\n  | Js.Json.JSONObject(value) =>\n    switch Js.Dict.get(value, \"ids\") {\n    | Some(ids) =>\n      switch Js.Json.classify(ids) {\n      | Js.Json.JSONArray(ids) =>\n        ids\n      | _ => failwith(\"Expected an array\")\n      }\n    | None => failwith(\"Expected an `ids` property\")\n    }\n  | _ => failwith(\"Expected an object\")\n  }\n}\n\nJs.log(getIds(` { \"ids\" : [1, 2, 3 ] } `))\n```\n\n----------------------------------------\n\nTITLE: Various Type Annotation Patterns in ReScript\nDESCRIPTION: Demonstrates different ways to annotate expressions, variables, and function parameters and return types in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/type.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nlet myInt = 5\nlet myInt: int = 5\nlet myInt = (5: int) + (4: int)\nlet add = (x: int, y: int) : int => x + y\nlet drawCircle = (~radius as r: int): circleType => /* code here */\n```\n\nLANGUAGE: js\nCODE:\n```\nvar myInt = 9;\nfunction add(x, y) {\n  return x + y | 0;\n}\nfunction drawCircle(r) {\n  /* code here */\n}\n```\n\n----------------------------------------\n\nTITLE: ReScript Shared Props Implementation\nDESCRIPTION: Shows how to define and use shared prop types across multiple React components using the @react.component decorator with type arguments.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/extensions-of-props.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\ntype sharedProps<'x, 'y> = {x: 'x, y: 'y, z:string}\n\nmodule C1 = {\n  @react.component(:sharedProps<'a, 'b>)\n  let make = (~x, ~y, ~z) => React.string(x ++ y ++ z)\n}\n\nmodule C2 = {\n  @react.component(:sharedProps<string, 'b>)\n  let make = (~x, ~y, ~z) => React.string(x ++ y ++ z)\n}\n\nmodule C3 = {\n  type myProps = sharedProps<int, int>\n  @react.component(:myProps)\n  let make = (~x, ~y) => React.int(x + y)\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Record Types from Other Modules\nDESCRIPTION: Shows how to reference a record type defined in another module either by explicit type annotation or by using the module name as a prefix for at least one field.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/record.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\n// Example.res\n\nlet me: School.person = {age: 20, name: \"Big ReScript\"}\n/* or */\nlet me2 = {School.age: 20, name: \"Big ReScript\"}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar me = {\n  age: 20,\n  name: \"Big ReScript\"\n};\nvar me2 = {\n  age: 20,\n  name: \"Big ReScript\"\n};\n```\n\n----------------------------------------\n\nTITLE: Mapping ReScript Record to JavaScript Array\nDESCRIPTION: Shows how to map a ReScript record to a JavaScript array using indexed @as decorators.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/bind-to-js-object.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\ntype t = {\n  @as(\"0\") foo: int,\n  @as(\"1\") bar: string,\n}\n\nlet value = {foo: 7, bar: \"baz\"}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar value = [\n  7,\n  \"baz\"\n];\n```\n\n----------------------------------------\n\nTITLE: Basic Async/Await Usage in ReScript\nDESCRIPTION: Demonstrates the basic syntax of async/await in ReScript, showing how to define an async function and use await to handle promises. The example logs user details after fetching data asynchronously.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/async-await.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\n// Some fictive functionality that offers asynchronous network actions\n@val external fetchUserMail: string => promise<string> = \"GlobalAPI.fetchUserMail\"\n@val external sendAnalytics: string => promise<unit> = \"GlobalAPI.sendAnalytics\"\n\n// We use the `async` keyword to allow the use of `await` in the function body\nlet logUserDetails = async (userId: string) => {\n  // We use `await` to fetch the user email from our fictive user endpoint\n  let email = await fetchUserMail(userId)\n\n  await sendAnalytics(`User details have been logged for ${userId}`)\n\n  Js.log(`Email address for user ${userId}: ${email}`)\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nasync function logUserDetails(userId) {\n  var email = await GlobalAPI.fetchUserMail(userId);\n  await GlobalAPI.sendAnalytics(\"User details have been logged for \" + userId + \"\");\n  console.log(\"Email address for user \" + userId + \": \" + email + \"\");\n}\n```\n\n----------------------------------------\n\nTITLE: Array Filtering Operations\nDESCRIPTION: Functions for filtering array elements based on predicates, including keep, keepWithIndex, and keepMap variations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/array.mdx#2025-04-18_snippet_37\n\nLANGUAGE: rescript\nCODE:\n```\nBelt.Array.keep([1, 2, 3], (x) => mod(x, 2) == 0) == [2]\nBelt.Array.keepWithIndex([1, 2, 3], (_x, i) => i == 1) == [2]\n```\n\n----------------------------------------\n\nTITLE: Using Callback Refs with useRef in ReScript\nDESCRIPTION: Example demonstrating how to use a callback ref with useRef in ReScript. A custom input component creates a ref and defines a callback function that sets the ref's current value when the DOM element is attached.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/hooks-ref.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\n// CustomTextInput.res\n\n@send external focus: Dom.element => unit = \"focus\"\n\n@react.component\nlet make = () => {\n  let textInput = React.useRef(Js.Nullable.null)\n  let setTextInputRef = element => {\n    textInput.current = element;\n  }\n\n  let focusTextInput = _ => {\n    textInput.current\n    ->Js.Nullable.toOption\n    ->Belt.Option.forEach(input => input->focus)\n  }\n\n  <div>\n    <input type_=\"text\" ref={ReactDOM.Ref.callbackDomRef(setTextInputRef)} />\n    <input\n      type_=\"button\" value=\"Focus the text input\" onClick={focusTextInput}\n    />\n  </div>\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction CustomTextInput(Props) {\n  var textInput = React.useRef(null);\n  var setTextInputRef = function (element) {\n    textInput.current = element;\n\n  };\n  var focusTextInput = function (param) {\n    return Belt_Option.forEach(Caml_option.nullable_to_opt(textInput.current), (function (input) {\n                  input.focus();\n\n                }));\n  };\n  return React.createElement(\"div\", undefined, React.createElement(\"input\", {\n                  ref: setTextInputRef,\n                  type: \"text\"\n                }), React.createElement(\"input\", {\n                  type: \"button\",\n                  value: \"Focus the text input\",\n                  onClick: focusTextInput\n                }));\n}\n```\n\n----------------------------------------\n\nTITLE: Typing Async Functions in ReScript\nDESCRIPTION: Examples of how to properly type async functions in ReScript, including function type definitions, type annotations, and the difference between signature and implementation files.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/async-await.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\n// function type\ntype someAsyncFn = int => promise<int>\n\n// Function type annotation\nlet fetchData: string => promise<string> = async (userId) => {\n  await fetchUserMail(userId)\n}\n```\n\n----------------------------------------\n\nTITLE: Mutually Recursive Types in ReScript\nDESCRIPTION: Shows how to create types that reference each other using the 'and' keyword, enabling complex type relationships.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/type.mdx#2025-04-18_snippet_10\n\nLANGUAGE: res\nCODE:\n```\ntype rec student = {taughtBy: teacher}\nand teacher = {students: array<student>}\n```\n\nLANGUAGE: js\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Complex Pattern Matching with Exhaustiveness Checking in ReScript\nDESCRIPTION: Demonstrates ReScript's exhaustiveness checking feature which ensures all possible cases are handled in a pattern match, preventing common runtime errors by catching missing patterns at compile time.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_15\n\nLANGUAGE: res\nCODE:\n```\nlet message = switch person1 {\n| Teacher({name: \"Mary\" | \"Joe\"}) =>\n  `Hey, still going to the party on Saturday?`\n| Student({name, reportCard: {passing: true, gpa}}) =>\n  `Congrats ${name}, nice GPA of ${Float.toString(gpa)} you got there!`\n| Student({\n    reportCard: {gpa: 0.0},\n    status: Vacations(daysLeft) | Sabbatical(daysLeft)\n  }) =>\n  `Come back in ${Int.toString(daysLeft)} days!`\n| Student({status: Sick}) =>\n  `How are you feeling?`\n| Student({name}) =>\n  `Good luck next semester ${name}!`\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nif (person1.TAG) {\n  var match$1 = person1.status;\n  var name = person1.name;\n  var match$2 = person1.reportCard;\n  if (match$2.passing) {\n    \"Congrats \" + name + \", nice GPA of \" + match$2.gpa.toString() + \" you got there!\";\n  } else if (typeof match$1 === \"number\") {\n    if (match$1 !== 0) {\n      \"Good luck next semester \" + name + \"!\";\n    } else {\n      \"How are you feeling?\";\n    }\n  } else if (person1.reportCard.gpa !== 0.0) {\n    \"Good luck next semester \" + name + \"!\";\n  } else {\n    \"Come back in \" + match$1._0.toString() + \" days!\";\n  }\n} else {\n  switch (person1.name) {\n    case \"Joe\":\n    case \"Mary\":\n      break;\n    default:\n      throw {\n        RE_EXN_ID: \"Match_failure\",\n        _1: [\n          \"playground.res\",\n          13,\n          0\n        ],\n        Error: new Error()\n      };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Combined Exception Handling in ReScript\nDESCRIPTION: Shows how to catch both ReScript and JavaScript exceptions in the same catch clause using pattern matching.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/exception.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\ntry {\n  someOtherJSFunctionThatThrows()\n} catch {\n| Not_found => ... // catch a ReScript exception\n| Invalid_argument(_) => ... // catch a second ReScript exception\n| Js.Exn.Error(obj) => ... // catch the JS exception\n}\n```\n\n----------------------------------------\n\nTITLE: Binding to JS Objects Using ReScript Records\nDESCRIPTION: Demonstrates how to bind to record-like JavaScript objects using ReScript's record type system. This approach works well for JavaScript objects with fixed fields and creates a clean mapping between the two languages.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/bind-to-js-object.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype person = {\n  name: string,\n  friends: array<string>,\n  age: int,\n}\n\n@module(\"MySchool\") external john: person = \"john\"\n\nlet johnName = john.name\n```\n\nLANGUAGE: js\nCODE:\n```\nvar MySchool = require(\"MySchool\");\n\nvar johnName = MySchool.john.name;\n```\n\n----------------------------------------\n\nTITLE: Partial Application with Explicit Syntax\nDESCRIPTION: Using the explicit '...' syntax for partial application introduced in ReScript 11.0. This creates a new function by fixing some arguments of an existing function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/function.mdx#2025-04-18_snippet_17\n\nLANGUAGE: res\nCODE:\n```\nlet add = (a, b) => a + b\nlet addFive = add(5, ...)\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction add(a, b) {\n  return a + b | 0;\n}\n\nfunction addFive(extra) {\n  return 5 + extra | 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Component with Children Props in ReScript\nDESCRIPTION: Shows how to create a component that accepts children elements and renders them inside a container element.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/components-and-props.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nmodule MyList = {\n  @react.component\n  let make = (~children: React.element) => {\n    <ul>\n      children\n    </ul>\n  }\n}\n\n<MyList>\n  <li> {React.string(\"Item 1\")} </li>\n  <li> {React.string(\"Item 2\")} </li>\n</MyList>\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction MyList(props) {\n  return React.createElement(\"ul\", undefined, props.children);\n}\n\nvar MyList = {\n  make: MyList\n};\n\nReact.createElement(MyList, {\n    children: null\n  }, React.createElement(\"li\", undefined, \"Item 1\"),\n    React.createElement(\"li\", undefined, \"Item 2\"));\n```\n\n----------------------------------------\n\nTITLE: Creating Submodule Components in ReScript\nDESCRIPTION: Shows how to define nested components as submodules within a single file, which helps organize complex UIs without creating multiple files for each component.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/components-and-props.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rescript\nCODE:\n```\n// src/Button.res\nmodule Label = {\n  @react.component\n  let make = (~title: string) => {\n    <div className=\"myLabel\"> {React.string(title)} </div>\n  }\n}\n\n@react.component\nlet make = (~children) => {\n  <div>\n    <Label title=\"Getting Started\" />\n    children\n  </div>\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing Re-renders with useEffect Dependencies in ReScript React\nDESCRIPTION: Demonstrates using dependency arrays in React.useEffect to control when effects are applied. In this example, the document title is only updated when the count value changes, preventing unnecessary effect executions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/hooks-effect.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\n// from a previous example above\nReact.useEffect(() => {\n  open! Document\n  document->setTitle(`You clicked ${Belt.Int.toString(count)} times!`)\n  None\n}, [count])\n```\n\n----------------------------------------\n\nTITLE: Text Input State Management in ReScript\nDESCRIPTION: Example of managing text input state using useState hook in a ReScript React component.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/hooks-state.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\n@react.component\nlet make = () => {\n  let (text, setText) = React.useState(_ => \"\");\n\n  let onChange = evt => {\n    ReactEvent.Form.preventDefault(evt)\n    let value = ReactEvent.Form.target(evt)[\"value\"]\n    setText(_prev => value);\n  }\n\n  <div>\n    <input onChange value=text />\n  </div>\n};\n```\n\n----------------------------------------\n\nTITLE: Piping Await Results in ReScript\nDESCRIPTION: Example of how to pipe the result of an await call directly into another function by wrapping the await expression in curly braces.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/async-await.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\n@val external fetchUserMail: string => promise<string> = \"GlobalAPI.fetchUserMail\"\n\nlet fetchData = async () => {\n  let mail = {await fetchUserMail(\"1234\")}->Js.String2.toUpperCase\n  Js.log(`All upper-cased mail: ${mail}`)\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nasync function fetchData(param) {\n  var mail = (await GlobalAPI.fetchUserMail(\"1234\")).toUpperCase();\n  console.log(\"All upper-cased mail: \" + mail + \"\");\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Record Types in ReScript\nDESCRIPTION: Demonstrates how to declare a record type in ReScript with fixed fields. Records require mandatory type declarations that define their structure.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/record.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype person = {\n  age: int,\n  name: string,\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Using Abstract Types for Safe Global Function Bindings in ReScript\nDESCRIPTION: Shows how to use abstract types to create safer bindings for global functions like setTimeout and clearTimeout, ensuring type safety when using the returned timer ID.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/bind-to-global-js-values.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\ntype timerId\n@val external setTimeout: (unit => unit, int) => timerId = \"setTimeout\"\n@val external clearTimeout: timerId => unit = \"clearTimeout\"\n\nlet id = setTimeout(() => Js.log(\"hello\"), 100)\nclearTimeout(id)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar id = setTimeout(function (param) {\n  console.log(\"hello\");\n}, 100);\n\nclearTimeout(id);\n```\n\n----------------------------------------\n\nTITLE: Basic Function Declaration in ReScript\nDESCRIPTION: Demonstrates basic function declaration with a single argument that concatenates strings.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/function.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nlet greet = (name) => \"Hello \" ++ name\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction greet(name) {\n  return \"Hello \" + name;\n}\n```\n\n----------------------------------------\n\nTITLE: Switch-based Pattern Matching on Variants in ReScript\nDESCRIPTION: Demonstrates using pattern matching with switch to handle different variant cases. This example processes a 'payload' variant with three possible cases, executing different code for each case.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nlet data = GoodResult(\"Product shipped!\")\nswitch data {\n| GoodResult(theMessage) =>\n  Js.log(\"Success! \" ++ theMessage)\n| BadResult(errorCode) =>\n  Js.log(\"Something's wrong. The error code is: \" ++ Js.Int.toString(errorCode))\n| NoResult =>\n  Js.log(\"Bah.\")\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar data = {\n  TAG: /* GoodResult */1,\n  _0: \"Product shipped!\"\n};\n\nif (typeof data === \"number\") {\n  console.log(\"Bah.\");\n} else if (data.TAG === /* BadResult */ 0) {\n  console.log(\"Something's wrong. The error code is: \" + \"Product shipped!\".toString());\n} else {\n  console.log(\"Success! Product shipped!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Using Pipe Operator for Sequential Data Transformation in ReScript\nDESCRIPTION: Shows how to use the pipe operator to create a sequential data flow that's easier to read than nested function calls. Each operation is applied in order from top to bottom.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/pipe.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\nperson\n  ->parseData\n  ->getAge\n  ->validateAge\n```\n\nLANGUAGE: js\nCODE:\n```\nvalidateAge(getAge(parseData(person)));\n```\n\n----------------------------------------\n\nTITLE: Todo List App with Complex Actions in ReScript\nDESCRIPTION: A more complex example of useReducer implementing a todo list with multiple action types that include data payloads. Demonstrates ReScript's variant types for expressing action types with parameters.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/hooks-reducer.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\n// TodoApp.res\n\ntype todo = {\n  id: int,\n  content: string,\n  completed: bool,\n}\n\ntype action =\n  | AddTodo(string)\n  | RemoveTodo(int)\n  | ToggleTodo(int)\n\ntype state = {\n  todos: array<todo>,\n  nextId: int,\n}\n\nlet reducer = (state, action) =>\n  switch action {\n  | AddTodo(content) =>\n    let todos = Js.Array2.concat(\n      state.todos,\n      [{id: state.nextId, content: content, completed: false}],\n    )\n    {todos: todos, nextId: state.nextId + 1}\n  | RemoveTodo(id) =>\n    let todos = Js.Array2.filter(state.todos, todo => todo.id !== id)\n    {...state, todos: todos}\n  | ToggleTodo(id) =>\n    let todos = Belt.Array.map(state.todos, todo =>\n      if todo.id === id {\n        {\n          ...todo,\n          completed: !todo.completed,\n        }\n      } else {\n        todo\n      }\n    )\n    {...state, todos: todos}\n  }\n\nlet initialTodos = [{id: 1, content: \"Try ReScript & React\", completed: false}]\n\n@react.component\nlet make = () => {\n  let (state, dispatch) = React.useReducer(\n    reducer,\n    {todos: initialTodos, nextId: 2},\n  )\n\n  let todos = Belt.Array.map(state.todos, todo =>\n    <li>\n      {React.string(todo.content)}\n      <button onClick={_ => dispatch(RemoveTodo(todo.id))}>\n        {React.string(\"Remove\")}\n      </button>\n      <input\n        type_=\"checkbox\"\n        checked=todo.completed\n        onChange={_ => dispatch(ToggleTodo(todo.id))}\n      />\n    </li>\n  )\n\n  <> <h1> {React.string(\"Todo List:\")} </h1> <ul> {React.array(todos)} </ul> </>\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction reducer(state, action) {\n  switch (action.TAG | 0) {\n    case /* AddTodo */0 :\n        var todos = state.todos.concat([{\n                id: state.nextId,\n                content: action._0,\n                completed: false\n              }]);\n        return {\n                todos: todos,\n                nextId: state.nextId + 1 | 0\n              };\n    case /* RemoveTodo */1 :\n        var id = action._0;\n        var todos$1 = state.todos.filter(function (todo) {\n              return todo.id !== id;\n            });\n        return {\n                todos: todos$1,\n                nextId: state.nextId\n              };\n    case /* ToggleTodo */2 :\n        var id$1 = action._0;\n        var todos$2 = Belt_Array.map(state.todos, (function (todo) {\n                if (todo.id === id$1) {\n                  return {\n                          id: todo.id,\n                          content: todo.content,\n                          completed: !todo.completed\n                        };\n                } else {\n                  return todo;\n                }\n              }));\n        return {\n                todos: todos$2,\n                nextId: state.nextId\n              };\n    \n  }\n}\n\nvar initialTodos = [{\n    id: 1,\n    content: \"Try ReScript & React\",\n    completed: false\n  }];\n\nfunction TodoApp(Props) {\n  var match = React.useReducer(reducer, {\n        todos: initialTodos,\n        nextId: 2\n      });\n  var dispatch = match[1];\n  var todos = Belt_Array.map(match[0].todos, (function (todo) {\n          return React.createElement(\"li\", undefined, todo.content, React.createElement(\"button\", {\n                          onClick: (function (param) {\n                              return Curry._1(dispatch, {\n                                          TAG: /* RemoveTodo */1,\n                                          _0: todo.id\n                                        });\n                            })\n                        }, \"Remove\"), React.createElement(\"input\", {\n                          checked: todo.completed,\n                          type: \"checkbox\",\n                          onChange: (function (param) {\n                              return Curry._1(dispatch, {\n                                          TAG: /* ToggleTodo */2,\n                                          _0: todo.id\n                                        });\n                            })\n                        }));\n        }));\n  return React.createElement(React.Fragment, undefined, React.createElement(\"h1\", undefined, \"Todo List:\"), React.createElement(\"ul\", undefined, todos));\n}\n```\n\n----------------------------------------\n\nTITLE: Using React.forwardRef in ReScript (Discouraged Method)\nDESCRIPTION: Implementation of ref forwarding using React.forwardRef API, which is discouraged in ReScript. The example shows how to wrap a component with forwardRef to allow passing refs directly to inner DOM elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/forwarding-refs.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\n// App.res\n\nmodule FancyInput = {\n  @react.component\n  let make = React.forwardRef((~className=?, ~children, ref) =>\n    <div>\n      <input\n        type_=\"text\"\n        ?className\n        ref=?{Nullable.toOption(ref)->Option.map(ReactDOM.Ref.domRef)}\n      />\n      children\n    </div>\n  )\n}\n\n@send external focus: Dom.element => unit = \"focus\"\n\n@react.component\nlet make = () => {\n  let input = React.useRef(Nullable.null)\n\n  let focusInput = () =>\n    input.current->Nullable.forEach(input => input->focus)\n\n  let onClick = _ => focusInput()\n\n  <div>\n    <FancyInput className=\"fancy\" ref=input>\n      <button onClick> {React.string(\"Click to focus\")} </button>\n    </FancyInput>\n  </div>\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from \"react\";\nimport * as Belt_Option from \"rescript/lib/es6/belt_Option.js\";\nimport * as Caml_option from \"rescript/lib/es6/caml_option.js\";\n\nvar make = React.forwardRef(function (props, ref) {\n  return React.createElement(\n    \"div\",\n    undefined,\n    React.createElement(\"input\", {\n      ref: Belt_Option.map(\n        ref == null ? undefined : Caml_option.some(ref),\n        function (prim) {\n          return prim;\n        }\n      ),\n      className: props.className,\n      type: \"text\",\n    }),\n    props.children\n  );\n});\n\nvar FancyInput = {\n  make: make,\n};\n\nfunction App(props) {\n  var input = React.useRef(null);\n  var onClick = function (param) {\n    Belt_Option.forEach(\n      Caml_option.nullable_to_opt(input.current),\n      function (input) {\n        input.focus();\n      }\n    );\n  };\n  return React.createElement(\n    \"div\",\n    undefined,\n    React.createElement(make, {\n      className: \"fancy\",\n      children: React.createElement(\n        \"button\",\n        {\n          onClick: onClick,\n        },\n        \"Click to focus\"\n      ),\n      ref: input,\n    })\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic ReScript Module\nDESCRIPTION: Demonstrates creating a basic module School with a custom type, value binding and function definition. Shows how modules act as namespaces.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/module.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nmodule School = {\n  type profession = Teacher | Director\n\n  let person1 = Teacher\n  let getProfession = (person) =>\n    switch person {\n    | Teacher => \"A teacher\"\n    | Director => \"A director\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Option Type for Nullable Values in ReScript\nDESCRIPTION: Demonstrates how to use ReScript's option type to handle potentially null values. The example shows creating None and Some values, and pattern matching with a switch statement to safely handle both cases.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/newcomer-examples.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\nlet possiblyNullValue1 = None\nlet possiblyNullValue2 = Some(\"Hello\")\n\nswitch possiblyNullValue2 {\n| None => Js.log(\"Nothing to see here.\")\n| Some(message) => Js.log(message)\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar possiblyNullValue1;\nvar possiblyNullValue2 = \"Hello\";\n\nif (possiblyNullValue2 !== undefined) {\n  console.log(possiblyNullValue2);\n} else {\n  console.log(\"Nothing to see here.\");\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Ref to a DOM Element in ReScript React\nDESCRIPTION: This example demonstrates how to create a ref and attach it to a DOM input element to focus it programmatically. The component uses React.useRef and ReactDOM.Ref.domRef to access the DOM node and call the focus method.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/refs-and-the-dom.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\n// CustomTextInput.res\n\n@send external focus: Dom.element => unit = \"focus\"\n\n@react.component\nlet make = () => {\n  let textInput = React.useRef(Js.Nullable.null)\n\n  let focusInput = () =>\n    switch textInput.current->Js.Nullable.toOption {\n    | Some(dom) => dom->focus\n    | None => ()\n    }\n\n  let onClick = _ => focusInput()\n\n  <div>\n    <input type_=\"text\" ref={ReactDOM.Ref.domRef(textInput)} />\n    <input type_=\"button\" value=\"Focus the text input\" onClick />\n  </div>\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction CustomTextInput(Props) {\n  var textInput = React.useRef(null);\n  var onClick = function (param) {\n    var dom = textInput.current;\n    if (!(dom == null)) {\n      dom.focus();\n      return ;\n    }\n\n  };\n  return React.createElement(\"div\", undefined, React.createElement(\"input\", {\n                  ref: textInput,\n                  type: \"text\"\n                }), React.createElement(\"input\", {\n                  type: \"button\",\n                  value: \"Focus the text input\",\n                  onClick: onClick\n                }));\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Children Prop with React Components in ReScript\nDESCRIPTION: Demonstrates how to create a component that accepts children elements, and how children are handled in the ReScript React binding. This example shows a MyList component that wraps children in a <ul> tag.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/components-and-props.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nmodule MyList = {\n  @react.component\n  let make = (~children: React.element) => {\n    <ul>\n      children\n    </ul>\n  }\n}\n\n<MyList>\n  <li> {React.string(\"Item 1\")} </li>\n  <li> {React.string(\"Item 2\")} </li>\n</MyList>\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction MyList(Props) {\n  var children = Props.children;\n  return React.createElement(\"ul\", undefined, children);\n}\n\nvar MyList = {\n  make: MyList\n};\n\nReact.createElement(MyList, {\n      children: null\n    }, React.createElement(\"li\", undefined, \"Item 1\"),\n        React.createElement(\"li\", undefined, \"Item 2\"));\n```\n\n----------------------------------------\n\nTITLE: Type Parameters (Generics) in ReScript\nDESCRIPTION: Demonstrates how to use type parameters (generics) to create flexible, reusable type definitions that work with multiple data types.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/type.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\ntype coordinates<'a> = ('a, 'a, 'a)\n\nlet a: coordinates<int> = (10, 20, 20)\nlet b: coordinates<float> = (10.5, 20.5, 20.5)\n```\n\nLANGUAGE: js\nCODE:\n```\nvar a = [10, 20, 20];\nvar b = [10.5, 20.5, 20.5];\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with React.null in ReScript\nDESCRIPTION: Demonstrates how to use React.null for conditional rendering in ReScript React applications.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/elements-and-jsx.mdx#2025-04-18_snippet_4\n\nLANGUAGE: ReScript\nCODE:\n```\nlet name = Some(\"Andrea\")\n\nlet element = switch name {\n  | Some(name) => <div> {React.string(\"Hello \" ++ name)} </div>\n  | None => React.null\n}\n\n<div> element </div>\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar name = \"Andrea\";\n\nvar element = name !== undefined ? React.createElement(\"div\", undefined, \"Hello \" + name) : null;\n\nReact.createElement(\"div\", undefined, element);\n```\n\n----------------------------------------\n\nTITLE: Defining Recursive Types in ReScript\nDESCRIPTION: Shows how to create recursive types that reference themselves within their own definition.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/type.mdx#2025-04-18_snippet_4\n\nLANGUAGE: ReScript\nCODE:\n```\ntype rec person = {\n  name: string,\n  friends: array<person>\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Error Handling with Async/Await\nDESCRIPTION: Shows error handling patterns using try/catch and pattern matching with async/await\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/async-await.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet authenticate = async () => {\n  raise(Exn.raiseRangeError(\"Authentication failed.\"))\n}\n\nlet checkAuth = async () => {\n  try {\n    await authenticate()\n  } catch {\n  | Exn.Error(e) =>\n    switch Exn.message(e) {\n    | Some(msg) => Console.log(\"JS error thrown: \" ++ msg)\n    | None => Console.log(\"Some other exception has been thrown\")\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Binding a JS Function in ReScript\nDESCRIPTION: Demonstrates how to import and bind a JavaScript function (path.dirname) in ReScript. The example shows the ReScript code and its corresponding JavaScript output.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/bind-to-js-function.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\n// Import nodejs' path.dirname\n@module(\"path\") external dirname: string => string = \"dirname\"\nlet root = dirname(\"/User/github\") // returns \"User\"\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar Path = require(\"path\");\nvar root = Path.dirname(\"/User/github\");\n```\n\n----------------------------------------\n\nTITLE: Creating Records with Optional Fields\nDESCRIPTION: Demonstrates how to create records with optional fields, showing both the complete form and one where an optional field is omitted. Omitted optional fields default to None.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/record.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\ntype person = {\n  age: int,\n  name?: string\n}\n\nlet me = {\n  age: 5,\n  name: \"Big ReScript\"\n}\n\nlet friend = {\n  age: 7\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar me = {\n  age: 5,\n  name: \"Big ReScript\"\n};\n\nvar friend = {\n  age: 7\n};\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON in ReScript\nDESCRIPTION: This snippet shows how to bind to JavaScript's JSON.parse method and type the return value. It declares the expected shape of the JSON data and uses external binding to create a type-safe parsing function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/json.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\n// declare the shape of the json you're binding to\ntype data = {names: array<string>}\n\n// bind to JS' JSON.parse\n@scope(\"JSON\") @val\nexternal parseIntoMyData: string => data = \"parse\"\n\nlet result = parseIntoMyData(`{\"names\": [\"Luke\", \"Christine\"]}`)\nlet name1 = result.names[0]\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar result = JSON.parse(\"{\\\"names\\\": [\\\"Luke\\\", \\\"Christine\\\"]}\");\nvar name1 = result.names[0];\n```\n\n----------------------------------------\n\nTITLE: Adding a DOM Ref to Focus an Input Element\nDESCRIPTION: Demonstrates how to use a ref to access a DOM element and perform imperative operations like focusing an input field when a button is clicked.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/refs-and-the-dom.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\n// CustomTextInput.res\n\n@send external focus: Dom.element => unit = \"focus\"\n\n@react.component\nlet make = () => {\n  let textInput = React.useRef(Nullable.null)\n\n  let focusInput = () =>\n    switch textInput.current {\n    | Value(dom) => dom->focus\n    | Null | Undefined => ()\n    }\n\n  let onClick = _ => focusInput()\n\n  <div>\n    <input type_=\"text\" ref={ReactDOM.Ref.domRef(textInput)} />\n    <input type_=\"button\" value=\"Focus the text input\" onClick />\n  </div>\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction CustomTextInput(Props) {\n  var textInput = React.useRef(null);\n  var focusInput = function () {\n    var dom = textInput.current;\n    if (dom === null || dom === undefined) {\n      return ;\n    }\n    dom.focus();\n  };\n  var onClick = function (param) {\n    focusInput();\n  };\n  return JsxRuntime.jsxs(\"div\", {\n              children: [\n                JsxRuntime.jsx(\"input\", {\n                      ref: Caml_option.some(textInput),\n                      type: \"text\"\n                    }),\n                JsxRuntime.jsx(\"input\", {\n                      type: \"button\",\n                      value: \"Focus the text input\",\n                      onClick: onClick\n                    })\n              ]\n            });\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming Promises with then in ReScript\nDESCRIPTION: Shows how to access and transform promise contents using the Promise.then method. This example demonstrates chaining promise operations and the need to explicitly resolve values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/promise.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nlet logAsyncMessage = () => {\n  open Promise\n  Promise.resolve(\"hello world\")\n  ->then(msg => {\n    // then callbacks require the result to be resolved explicitly\n    resolve(\"Message: \" ++ msg)\n  })\n  ->then(msg => {\n    Console.log(msg)\n\n    // Even if there is no result, we need to use resolve() to return a promise\n    resolve()\n  })\n  ->ignore // Requires ignoring due to unhandled return value\n}\n```\n\n----------------------------------------\n\nTITLE: Importing JSON Files in ReScript\nDESCRIPTION: Demonstrates how to import JSON files directly using the @module attribute. This approach allows importing JSON content as typed data that can be used within ReScript code.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/json.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\n@module external studentNames: JSON.t = \"./students.json\"\nConsole.log(studentNames)\n```\n\nLANGUAGE: js\nCODE:\n```\nimport * as StudentsJson from \"./students.json\";\n\nvar studentNames = StudentsJson;\n\nconsole.log(studentNames);\n```\n\nLANGUAGE: js\nCODE:\n```\nvar StudentsJson = require(\"./students.json\");\n\nvar studentNames = StudentsJson;\n\nconsole.log(studentNames);\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic React Component in ReScript\nDESCRIPTION: A simple greeting component that demonstrates the basic structure of a ReScript React component without any props, returning a div with a greeting message.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/components-and-props.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\n// src/Greeting.res\n@react.component\nlet make = () => {\n  <div>\n    {React.string(\"Hello ReScripters!\")}\n  </div>\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from \"react\";\n\nfunction Greeting(props) {\n  return JsxRuntime.jsx(\"div\", {\n    children: \"Hello ReScripters!\"\n  });\n}\n\nvar make = Greeting;\n```\n\n----------------------------------------\n\nTITLE: Rendering React Element to DOM in ReScript\nDESCRIPTION: Complete example showing how to safely query for the root DOM element and render a React element into it using ReactDOM.Client API in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/rendering-elements.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\n// Dom access can actually fail. ReScript\n// is really explicit about handling edge cases!\nswitch ReactDOM.querySelector(\"#root\") {\n| Some(rootElement) => {\n    let root = ReactDOM.Client.createRoot(rootElement)\n    ReactDOM.Client.Root.render(root, <div />)\n  }\n| None => ()\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar root = document.querySelector(\"#root\");\n\nif (!(root == null)) {\n  ReactDom.render(React.createElement(\"div\", undefined, \"Hello Andrea\"), root);\n}\n```\n\n----------------------------------------\n\nTITLE: JSX Transformation for Components with Children\nDESCRIPTION: Shows how JSX for components with children is transformed into React.createElementVariadic calls in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/beyond-jsx.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\n<Container width=200>\n  {React.string(\"Hello\")}\n  {React.string(\"World\")}\n</Container>\n```\n\nLANGUAGE: rescript\nCODE:\n```\n// classic\nReact.createElementVariadic(\n  Container.make,\n  {width: 200, children: React.null},\n  [{React.string(\"Hello\")}, {React.string(\"World\")}],\n)\n\n// automatic\nReact.jsxs(\n  Container.make,\n  {width: 200, children: React.array([{React.string(\"Hello\")}, {React.string(\"World\")}])},\n)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nReact.createElement(Container, { width: 200, children: null }, \"Hello\", \"World\");\n```\n\n----------------------------------------\n\nTITLE: Importing a JavaScript Default Export in ReScript\nDESCRIPTION: Shows how to import a default export from a JavaScript module by using the value 'default' on the right hand side of the external declaration.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/import-from-export-to-js.mdx#2025-04-18_snippet_2\n\nLANGUAGE: ReScript\nCODE:\n```\n@module(\"./student\") external studentName: string = \"default\"\nConsole.log(studentName)\n```\n\nLANGUAGE: JavaScript (Module)\nCODE:\n```\nimport Student from \"./student\";\nvar studentName = Student;\n```\n\n----------------------------------------\n\nTITLE: Binding JS Object Method in ReScript\nDESCRIPTION: Demonstrates how to bind a method of a JavaScript object in ReScript using the @send attribute. The example shows binding to document.getElementById.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/bind-to-js-function.mdx#2025-04-18_snippet_2\n\nLANGUAGE: ReScript\nCODE:\n```\ntype document // abstract type for a document object\n@send external getElementById: (document, string) => Dom.element = \"getElementById\"\n@val external doc: document = \"document\"\n\nlet el = getElementById(doc, \"myId\")\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar el = document.getElementById(\"myId\");\n```\n\n----------------------------------------\n\nTITLE: Using Async/Await in ReScript\nDESCRIPTION: Shows how to use async/await syntax in ReScript (available from v10.1). The async keyword is added before function definitions, and await can be used within async functions, resulting in idiomatic JavaScript output.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/function.mdx#2025-04-18_snippet_18\n\nLANGUAGE: res\nCODE:\n```\nlet getUserName = async (userId) => userId\n\nlet greetUser = async (userId) => {\n  let name = await getUserName(userId)  \n  \"Hello \" ++ name ++ \"!\"\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nasync function greetUser(userId) {\n  var name = await getUserName(userId);\n  return \"Hello \" + name + \"!\";\n}\n```\n\n----------------------------------------\n\nTITLE: Handling JavaScript Nullable Types with ReScript's option Type\nDESCRIPTION: Demonstrates how to safely handle JavaScript's nullable types by converting them to ReScript's option type using Js.Nullable.toOption. The example shows a function that gracefully handles both null/undefined and valid string values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/newcomer-examples.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nlet greetByName = (possiblyNullName) => {\n  let optionName = Js.Nullable.toOption(possiblyNullName)\n  switch optionName {\n  | None => \"Hi\"\n  | Some(name) => \"Hello \" ++ name\n  }\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction greetByName(possiblyNullName) {\n  if (possiblyNullName == null) {\n    return \"Hi\";\n  } else {\n    return \"Hello \" + possiblyNullName;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Pattern Matching with Nested Patterns in ReScript\nDESCRIPTION: Shows an advanced example of pattern matching with nested patterns and deep destructuring. This example processes a complex 'person' type, extracting nested values and using OR patterns to combine cases.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\nlet person1 = Teacher({name: \"Jane\", age: 35})\n\nlet message = switch person1 {\n| Teacher({name: \"Mary\" | \"Joe\"}) =>\n  `Hey, still going to the party on Saturday?`\n| Teacher({name}) =>\n  // this is matched only if `name` isn't \"Mary\" or \"Joe\"\n  `Hello ${name}.`\n| Student({name, reportCard: {passing: true, gpa}}) =>\n  `Congrats ${name}, nice GPA of ${Js.Float.toString(gpa)} you got there!`\n| Student({\n    reportCard: {gpa: 0.0},\n    status: Vacations(daysLeft) | Sabbatical(daysLeft)\n  }) =>\n  `Come back in ${Js.Int.toString(daysLeft)} days!`\n| Student({status: Sick}) =>\n  `How are you feeling?`\n| Student({name}) =>\n  `Good luck next semester ${name}!`\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar person1 = {\n  TAG: /* Teacher */0,\n  name: \"Jane\",\n  age: 35\n};\n\nvar message;\n\nif (person1.TAG) {\n  var match$1 = person1.status;\n  var name = person1.name;\n  var match$2 = person1.reportCard;\n  message = match$2.passing\n    ? \"Congrats \" +\n      name +\n      \", nice GPA of \" +\n      match$2.gpa.toString() +\n      \" you got there!\"\n    : typeof match$1 === \"number\"\n    ? match$1 !== 0\n      ? \"Good luck next semester \" + name + \"!\"\n      : \"How are you feeling?\"\n    : person1.reportCard.gpa !== 0.0\n    ? \"Good luck next semester \" + name + \"!\"\n    : \"Come back in \" + match$1._0.toString() + \" days!\";\n} else {\n  var name$1 = person1.name;\n  switch (name$1) {\n    case \"Joe\":\n    case \"Mary\":\n      message = \"Hey, still going to the party on Saturday?\";\n      break;\n    default:\n      message = \"Hello \" + name$1 + \".\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Callback Ref with useRef in ReScript\nDESCRIPTION: Example of using a callback ref with useRef for more control over when refs are set and unset. This pattern is useful when you need to perform actions when a ref is attached or detached from the DOM.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/hooks-ref.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\n// CustomTextInput.res\n\n@send external focus: Dom.element => unit = \"focus\"\n\n@react.component\nlet make = () => {\n  let textInput = React.useRef(Js.Nullable.null)\n  let setTextInputRef = element => {\n    textInput.current = element;\n  }\n\n  let focusTextInput = _ => {\n    textInput.current\n    ->Js.Nullable.toOption\n    ->Belt.Option.forEach(input => input->focus)\n  }\n\n  <div>\n    <input type_=\"text\" ref={ReactDOM.Ref.callbackDomRef(setTextInputRef)} />\n    <input\n      type_=\"button\" value=\"Focus the text input\" onClick={focusTextInput}\n    />\n  </div>\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction CustomTextInput(Props) {\n  var textInput = React.useRef(null);\n  var setTextInputRef = function (element) {\n    textInput.current = element;\n\n  };\n  var focusTextInput = function (param) {\n    return Belt_Option.forEach(Caml_option.nullable_to_opt(textInput.current), (function (input) {\n                  input.focus();\n\n                }));\n  };\n  return React.createElement(\"div\", undefined, React.createElement(\"input\", {\n                  ref: setTextInputRef,\n                  type: \"text\"\n                }), React.createElement(\"input\", {\n                  type: \"button\",\n                  value: \"Focus the text input\",\n                  onClick: focusTextInput\n                }));\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic ReScript React Component\nDESCRIPTION: Example of a simple ReScript React component that renders 'Hello World'.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/installation.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\n// src/Test.res\n@react.component\nlet make = () => {\n  <div> {React.string(\"Hello World\")} </div>\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning React Elements in ReScript\nDESCRIPTION: Demonstrates how to clone existing React elements and modify their props using React.cloneElement in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/elements-and-jsx.mdx#2025-04-18_snippet_9\n\nLANGUAGE: ReScript\nCODE:\n```\nlet original = <div className=\"hello\"/>\n\n// Will return a new React.element with className set to \"world\"\nReact.cloneElement(original, {\"className\": \"world\", \"data-name\": \"some name\"})\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar original = React.createElement(\"div\", {\n      className: \"hello\"\n    });\n\nReact.cloneElement(original, {\n      className: \"world\",\n      \"data-name\": \"some name\"\n    });\n```\n\n----------------------------------------\n\nTITLE: Using If-Else as an Expression in ReScript\nDESCRIPTION: Demonstrates how if-else statements in ReScript are expressions that evaluate to their body's content, unlike JavaScript where they are statements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/control-flow.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\nlet message = if isMorning {\n  \"Good morning!\"\n} else {\n  \"Hello!\"\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar message = isMorning ? \"Good morning!\" : \"Hello!\";\n```\n\n----------------------------------------\n\nTITLE: Binding to JavaScript Classes\nDESCRIPTION: Demonstrates how to bind to JavaScript classes using the @new attribute. This allows for instantiating JavaScript classes from ReScript code.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/bind-to-js-object.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\ntype t\n@new external createDate: unit => t = \"Date\"\n\nlet date = createDate()\n```\n\nLANGUAGE: js\nCODE:\n```\nvar date = new Date();\n```\n\n----------------------------------------\n\nTITLE: Importing JSON Files in ReScript\nDESCRIPTION: This snippet illustrates how to use the @module attribute to import JSON files directly in ReScript. It shows the ReScript code and its JavaScript output for both module and CommonJS formats.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/json.mdx#2025-04-18_snippet_2\n\nLANGUAGE: ReScript\nCODE:\n```\n@module external studentNames: JSON.t = \"./students.json\"\nConsole.log(studentNames)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as StudentsJson from \"./students.json\";\n\nvar studentNames = StudentsJson;\n\nconsole.log(studentNames);\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar StudentsJson = require(\"./students.json\");\n\nvar studentNames = StudentsJson;\n\nconsole.log(studentNames);\n```\n\n----------------------------------------\n\nTITLE: Array Method Chaining Example\nDESCRIPTION: Demonstrates how to chain array operations using pipe operator in ReScript compared to JavaScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/pipe.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet result = [1, 2, 3]\n  ->Array.map(a => a + 1)\n  ->Array.filter(a => mod(a, 2) == 0)\n\nasyncRequest()->setWaitDuration(4000)->send\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useEffect in ReScript React\nDESCRIPTION: Demonstrates various ways to use the useEffect hook in ReScript, including running effects on every render, once after mounting, and based on specific prop changes.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/hooks-effect.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\n// Runs after every completed render\nReact.useEffectOnEveryRender(() => {\n  // Run effects\n  None // or Some(() => {})\n})\n\n\n// Runs only once right after mounting the component\nReact.useEffect(() => {\n  // Run effects\n  None // or Some(() => {})\n}, [])\n\n// Dummy props\nlet prop1 = 1 and prop2 = 2 and prop3 = 3\n\n// Runs everytime `prop1` has changed\nReact.useEffect(() => {\n  // Run effects based on prop1\n  None\n}, [prop1])\n\n// Runs everytime `prop1` or `prop2` has changed\nReact.useEffect(() => {\n  // Run effects based on prop1 / prop2\n  None\n}, (prop1, prop2))\n\nReact.useEffect(() => {\n  None\n}, (prop1, prop2, prop3))\n```\n\nLANGUAGE: javascript\nCODE:\n```\nReact.useEffect(function () { });\nReact.useEffect((function () { }), []);\nReact.useEffect((function () { }), [prop1]);\nReact.useEffect((function () { }), [ prop1, prop2 ]);\nReact.useEffect((function () { }), [ prop1, prop2, prop3 ]);\n```\n\n----------------------------------------\n\nTITLE: Binding to Global setTimeout and clearTimeout in ReScript\nDESCRIPTION: This snippet demonstrates how to bind to the global JavaScript setTimeout and clearTimeout functions using ReScript's @val external syntax.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/bind-to-global-js-values.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\n@val external setTimeout: (unit => unit, int) => float = \"setTimeout\"\n@val external clearTimeout: float => unit = \"clearTimeout\"\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Binding to JS Functions with Fixed Arguments in ReScript\nDESCRIPTION: Demonstrates how to bind to a JavaScript function while passing predetermined argument values using @as annotation. This example binds to process.on('exit') with a fixed first argument.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/bind-to-js-function.mdx#2025-04-18_snippet_12\n\nLANGUAGE: rescript\nCODE:\n```\n@val\nexternal processOnExit: (\n  @as(\"exit\") _,\n  int => unit\n) => unit = \"process.on\"\n\nprocessOnExit(exitCode =>\n  Console.log(\"error code: \" ++ Int.toString(exitCode))\n);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nprocess.on(\"exit\", function (exitCode) {\n  console.log(\"error code: \" + exitCode.toString());\n});\n```\n\n----------------------------------------\n\nTITLE: Defining and Extending Extensible Variants in ReScript\nDESCRIPTION: Demonstrates how to define an extensible variant type using the '..' syntax and how to add new constructors using the '+=' operator. Shows both simple and complex constructor additions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/extensible-variant.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\ntype t = ..\n\ntype t += Other\n\ntype t +=\n  | Point(float, float)\n  | Line(float, float, float, float)\n```\n\nLANGUAGE: js\nCODE:\n```\nvar Caml_exceptions = require(\"./stdlib/caml_exceptions.js\");\n\nvar Other = Caml_exceptions.create(\"Playground.Other\");\n\nvar Point = Caml_exceptions.create(\"Playground.Point\");\n\nvar Line = Caml_exceptions.create(\"Playground.Line\");\n```\n\n----------------------------------------\n\nTITLE: Function Definition in ReScript\nDESCRIPTION: Demonstrates various ways to define functions in ReScript, including arrow functions and named functions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/overview.mdx#2025-04-18_snippet_4\n\nLANGUAGE: ReScript\nCODE:\n```\narg => retVal\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet named = (arg) => {...}\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet f = (arg) => {...}\n```\n\n----------------------------------------\n\nTITLE: Quick Prototyping with External and ReScript Objects\nDESCRIPTION: Shows how to use external declarations with polymorphic types for rapid prototyping. The example demonstrates accessing and manipulating the DOM without needing detailed type bindings.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/external.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\n// The type of document is just some random type 'a\n// that we won't bother to specify\n@val external document: 'a = \"document\"\n\n// call a method\ndocument[\"addEventListener\"](\"mouseup\", _event => {\n  Console.log(\"clicked!\")\n})\n\n// get a property\nlet loc = document[\"location\"]\n\n// set a property\ndocument[\"location\"][\"href\"] = \"rescript-lang.org\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.addEventListener(\"mouseup\", function(_event) {\n  console.log(\"clicked!\");\n});\n\nvar loc = document.location;\n\ndocument.location.href = \"rescript-lang.org\";\n```\n\n----------------------------------------\n\nTITLE: Standalone Function Type Signatures in ReScript\nDESCRIPTION: Shows how to define standalone function type signatures in ReScript, including for labeled and optional parameters, which is useful for type aliases and interface definitions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/function.mdx#2025-04-18_snippet_12\n\nLANGUAGE: rescript\nCODE:\n```\n// first arg type, second arg type, return type\ntype add = (int, int) => int\n\n// labeled\ntype add = (~first: int, ~second: int) => int\n\n// labeled\ntype add = (~first: int=?, ~second: int=?, unit) => int\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching with Exceptions in ReScript\nDESCRIPTION: Shows how to combine pattern matching with exception handling using the switch statement. Demonstrates handling the Not_found exception while processing list operations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/exception.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nswitch List.find(i => i === theItem, myItems) {\n| item => Js.log(item)\n| exception Not_found => Js.log(\"No such item found!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Using Illegal Identifier Names with Escape Syntax in ReScript\nDESCRIPTION: Demonstrates how to use ReScript's escape hatch syntax (\\\" \\\") to create identifiers with special characters, reserved keywords, or capitalized names. Examples include creating variables with emojis, hyphenated record fields, and capitalized function parameters.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/use-illegal-identifier-names.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\nlet \\\"my-🍎\\\" = 10\n\ntype element = {\n  \\\"aria-label\\\": string\n}\n\nlet myElement = {\n  \\\"aria-label\\\": \\\"close\\\"\n}\n\nlet label = myElement.\\\"aria-label\\\"\n\nlet calculate = (~\\\"Props\\\") => {\n  \\\"Props\\\" + 1\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar my$$unknown$unknown$unknown$unknown = 10;\n\nvar myElement = {\n  \"aria-label\": \"close\"\n};\n\nvar label = myElement[\"aria-label\"];\n\nfunction calculate(Props) {\n  return Props + 1 | 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON into Typed Data Structure in ReScript\nDESCRIPTION: Demonstrates how to bind to JavaScript's JSON.parse and type the return value as a specific ReScript type. This approach allows for parsing JSON strings directly into typed data structures with a simple external binding.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/json.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\n// declare the shape of the json you're binding to\ntype data = {names: array<string>}\n\n// bind to JS' JSON.parse\n@scope(\"JSON\") @val\nexternal parseIntoMyData: string => data = \"parse\"\n\nlet result = parseIntoMyData(`{\"names\": [\"Luke\", \"Christine\"]}`)\nlet name1 = result.names[0]\n```\n\nLANGUAGE: js\nCODE:\n```\nvar result = JSON.parse(\"{\\\"names\\\": [\\\"Luke\\\", \\\"Christine\\\"]}\");\nvar name1 = result.names[0];\n```\n\n----------------------------------------\n\nTITLE: Fall-Through Patterns in ReScript\nDESCRIPTION: Shows how to use fall-through patterns where multiple variant cases are handled by the same code block. This technique simplifies code by grouping logically similar patterns together.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_7\n\nLANGUAGE: res\nCODE:\n```\nlet myStatus = Vacations(10)\n\nswitch myStatus {\n| Vacations(days)\n| Sabbatical(days) => Console.log(`Come back in ${Int.toString(days)} days!`)\n| Sick\n| Present => Console.log(\"Hey! How are you?\")\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar myStatus = {\n  TAG: /* Vacations */0,\n  _0: 10\n};\n\nif (typeof myStatus === \"number\") {\n  console.log(\"Hey! How are you?\");\n} else {\n  console.log(\"Come back in \" + (10).toString() + \" days!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Promise Usage Example in ReScript (ML Syntax)\nDESCRIPTION: Demonstrates how to create and chain promises in ReScript using the ML syntax. It includes creating a promise, chaining then operations, and handling errors with catch.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/promise.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ml\nCODE:\n```\nlet myPromise = Js.Promise.make (fun ~resolve ~reject -> ((resolve 2) [@bs]))\n\nlet () = myPromise\n|> Js.Promise.then_(fun value ->\n     Js.log value;\n     Js.Promise.resolve (value + 2)\n   )\n|> Js.Promise.then_(fun value ->\n     Js.log value;\n     Js.Promise.resolve (value + 3)\n   )\n|> Js.Promise.catch(fun err ->\n     Js.log2 \"Failure!!\", err;\n     Js.Promise.resolve -2\n   )\n```\n\n----------------------------------------\n\nTITLE: Rendering React Element to DOM in ReScript\nDESCRIPTION: Illustrates how to find the root DOM element and render a React element into it using ReactDOM in ReScript. It handles the case where the DOM element might not be found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/rendering-elements.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nswitch ReactDOM.querySelector(\"#root\") {\n| Some(rootElement) => {\n    let root = ReactDOM.Client.createRoot(rootElement)\n    ReactDOM.Client.Root.render(root, <div />)\n  }\n| None => ()\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-argument Function in ReScript\nDESCRIPTION: Demonstrates how to define and use a function with multiple arguments separated by commas. The function adds three numbers together and returns their sum.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/function.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet add = (x, y, z) => x + y + z\nadd(1, 2, 3) // 6\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction add(x, y, z) {\n  return (x + y | 0) + z | 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sources with Basic Directories in ReScript\nDESCRIPTION: Specifies source files using an array of directory names. This configuration tells the ReScript build system to include files from both 'src' and 'examples' directories.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/build-configuration.mdx#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sources\": [\"src\", \"examples\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with React.null in ReScript\nDESCRIPTION: Shows how to handle conditional rendering in ReScript React using pattern matching and React.null. Demonstrates the idiomatic way to express that nothing should be rendered in certain conditions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/elements-and-jsx.mdx#2025-04-18_snippet_5\n\nLANGUAGE: ReScript\nCODE:\n```\nlet name = Some(\"Andrea\")\n\nlet element = switch name {\n  | Some(name) => <div> {React.string(\"Hello \" ++ name)} </div>\n  | None => React.null\n}\n\n<div> element </div>\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar name = \"Andrea\";\n\nvar element = name !== undefined ? React.createElement(\"div\", undefined, \"Hello \" + name) : null;\n\nReact.createElement(\"div\", undefined, element);\n```\n\n----------------------------------------\n\nTITLE: Piping with Async/Await\nDESCRIPTION: Demonstrates how to use pipe operator with await expressions\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/async-await.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet fetchData = async () => {\n  let mail = {await fetchUserMail(\"1234\")}->String.toUpperCase\n  Console.log(`All upper-cased mail: ${mail}`)\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nasync function fetchData(param) {\n  var mail = (await GlobalAPI.fetchUserMail(\"1234\")).toUpperCase();\n  console.log(\"All upper-cased mail: \" + mail + \"\");\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Async Functions with Full Type Signatures in ReScript\nDESCRIPTION: Example of defining async functions with both type signatures and inline type annotations, showing the difference between the two approaches.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/async-await.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\n// Note how the inline return type uses `string`, while the type definition uses `promise<string>`\nlet fetchData: string => promise<string> = async (userId: string): string {\n  await fetchUserMail(userId)\n}\n```\n\n----------------------------------------\n\nTITLE: Component Migration Example\nDESCRIPTION: Example of migrating a component from v3 to v4 style\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/migrate-react.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\n// V4\nmodule M = {\n  type props<'msg> = {msg: 'msg}\n  let make = props => <div> {React.string(props.msg)} </div>\n}\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching with Polymorphic Variant Types in ReScript\nDESCRIPTION: Demonstrates special pattern matching syntax to match on constructors defined in specific polymorphic variant types using the #... spread syntax.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/polymorphic-variant.mdx#2025-04-18_snippet_6\n\nLANGUAGE: ReScript\nCODE:\n```\n// Continuing the previous example above...\n\nswitch myColor {\n| #...blue => Console.log(\"This blue-ish\")\n| #...red => Console.log(\"This red-ish\")\n| other => Console.log2(\"Other color than red and blue: \", other)\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar other = myColor;\n\nif (other === \"Neon\" || other === \"Navy\" || other === \"Sapphire\") {\n  console.log(\"This is blue-ish\");\n} else if (other === \"Rust\" || other === \"Ruby\" || other === \"Redwood\") {\n  console.log(\"This is red-ish\");\n} else {\n  console.log(\"Other color than red and blue: \", other);\n}\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching on Optional Values in ReScript\nDESCRIPTION: Shows how to pattern match on nullable (optional) values in ReScript using the Some/None variants, demonstrating how ReScript's exhaustiveness checking prevents null/undefined bugs.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_16\n\nLANGUAGE: res\nCODE:\n```\nlet myNullableValue = Some(5)\n\nswitch myNullableValue {\n| Some(_v) => Console.log(\"value is present\")\n| None => Console.log(\"value is absent\")\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar myNullableValue = 5;\n\nif (myNullableValue !== undefined) {\n  console.log(\"value is present\");\n} else {\n  console.log(\"value is absent\");\n}\n```\n\n----------------------------------------\n\nTITLE: Simple React Component with Type Inference in ReScript\nDESCRIPTION: A basic Button component demonstrating how ReScript can infer prop types from usage. The onClick prop is inferred as ReactEvent.Mouse.t => unit, msg as string, and children as React.element.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/components-and-props.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\n@react.component\nlet make = (~onClick, ~msg, ~children) => {\n  <div onClick>\n    {React.string(msg)}\n    children\n  </div>\n}\n```\n\n----------------------------------------\n\nTITLE: Using Pipe Placeholders in ReScript\nDESCRIPTION: Demonstrates how to use placeholders with the pipe operator to direct the piped value to a specific argument position rather than the first position. This enables more flexible use of the pipe operator.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/pipe.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nmakePerson(~age=47, ())\n  ->namePerson(\"Jane\")\n```\n\nLANGUAGE: javascript\nCODE:\n```\nnamePerson(makePerson(47), \"Jane\");\n```\n\nLANGUAGE: rescript\nCODE:\n```\ngetName(input)\n  ->namePerson(personDetails, _)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar __x = getName(input);\nnamePerson(personDetails, __x);\n```\n\nLANGUAGE: rescript\nCODE:\n```\ngetName(input)\n  ->namePerson(~person=personDetails, ~name=_)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar __x = getName(input);\nnamePerson(personDetails, __x);\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching on Exceptions (ReScript)\nDESCRIPTION: Shows how to handle exceptions within a pattern match using the 'exception' keyword, allowing for normal value returns and exception handling in a single switch statement.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_15\n\nLANGUAGE: res\nCODE:\n```\nswitch List.find(i => i === theItem, myItems) {\n| item => Js.log(item)\n| exception Not_found => Js.log(\"No such item found!\")\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar exit = 0;\n\nvar item;\n\ntry {\n  item = List.find(function(i) {\n    return i === theItem;\n  }, myItems);\n  exit = 1;\n}\ncatch (raw_exn){\n  var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);\n  if (exn.RE_EXN_ID === \"Not_found\") {\n    console.log(\"No such item found!\");\n  } else {\n    throw exn;\n  }\n}\n\nif (exit === 1) {\n  console.log(item);\n}\n```\n\n----------------------------------------\n\nTITLE: Handling JS Nullable Types with ReScript's option Type\nDESCRIPTION: Demonstrates how to use ReScript's Nullable module to convert potentially null JavaScript values to the option type for safe handling.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/newcomer-examples.mdx#2025-04-18_snippet_4\n\nLANGUAGE: ReScript\nCODE:\n```\nlet greetByName = (possiblyNullName) => {\n  let optionName = Nullable.toOption(possiblyNullName)\n  switch optionName {\n  | None => \"Hi\"\n  | Some(name) => \"Hello \" ++ name\n  }\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction greetByName(possiblyNullName) {\n  if (possiblyNullName == null) {\n    return \"Hi\";\n  } else {\n    return \"Hello \" + possiblyNullName;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing React Components with Basic Props in ReScript\nDESCRIPTION: Demonstrates how to import a React component from a package and define its required props. The example shows creating a module for the Confetti component and using it in an application component.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/import-export-reactjs.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\nmodule Confetti = {\n  @module(\"react-confetti\") @react.component\n  external make: (~width: int, ~height: int) => React.element = \"default\"\n}\n\n// Assuming we are in App.res\n@react.component\nlet make = () => {\n  <Confetti width={300} height={300} />\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nimport ReactConfetti from \"react-confetti\";\nimport * as JsxRuntime from \"react/jsx-runtime\";\n\nvar Confetti = {};\n\nfunction Playground(props) {\n  return JsxRuntime.jsx(ReactConfetti, {\n              width: 300,\n              height: 300\n            });\n}\n```\n\n----------------------------------------\n\nTITLE: Using Labeled Arguments with JS Function Bindings\nDESCRIPTION: Shows how to use ReScript's labeled arguments to add clarity to JavaScript function bindings. This allows for named parameters in ReScript while maintaining the correct call signature in JavaScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/bind-to-js-function.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\n@module(\"MyGame\")\nexternal draw: (~x: int, ~y: int, ~border: bool=?) => unit = \"draw\"\n\ndraw(~x=10, ~y=20, ~border=true)\ndraw(~x=10, ~y=20)\n```\n\nLANGUAGE: js\nCODE:\n```\nvar MyGame = require(\"MyGame\");\n\nMyGame.draw(10, 20, true);\nMyGame.draw(10, 20, undefined);\n```\n\n----------------------------------------\n\nTITLE: ReScript Function Declaration Patterns\nDESCRIPTION: Comprehensive examples of different function declaration syntaxes including anonymous, labeled, and optional parameters.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/function.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\n// anonymous function\n(x, y) => 1\n// bind to a name\nlet add = (x, y) => 1\n\n// labeled\nlet add = (~first as x, ~second as y) => x + y\n// with punning sugar\nlet add = (~first, ~second) => first + second\n\n// labeled with default value\nlet add = (~first as x=1, ~second as y=2) => x + y\n// with punning\nlet add = (~first=1, ~second=2) => first + second\n\n// optional\nlet add = (~first as x=?, ~second as y=?) => switch x {...}\n// with punning\nlet add = (~first=?, ~second=?) => switch first {...}\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching on Exceptions in ReScript\nDESCRIPTION: Demonstrates how to use pattern matching to handle exceptions while getting a return value from a function. The example uses the 'List.getExn' function and handles the 'Not_found' exception.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/exception.mdx#2025-04-18_snippet_2\n\nLANGUAGE: ReScript\nCODE:\n```\nswitch list{1, 2, 3}->List.getExn(4) {\n| item => Console.log(item)\n| exception Not_found => Console.log(\"No such item found!\")\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as Core__List from \"./stdlib/core__List.js\";\nimport * as Caml_js_exceptions from \"./stdlib/caml_js_exceptions.js\";\n\nvar exit = 0;\n\nvar item;\n\ntry {\n  item = Core__List.getExn({\n        hd: 1,\n        tl: {\n          hd: 2,\n          tl: {\n            hd: 3,\n            tl: /* [] */0\n          }\n        }\n      }, 4);\n  exit = 1;\n}\ncatch (raw_exn){\n  var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);\n  if (exn.RE_EXN_ID === \"Not_found\") {\n    console.log(\"No such item found!\");\n  } else {\n    throw exn;\n  }\n}\n\nif (exit === 1) {\n  console.log(item);\n}\n```\n\n----------------------------------------\n\nTITLE: Using @uncurry Annotation for Function Arguments\nDESCRIPTION: Shows how to use the @uncurry annotation on function arguments to simplify call sites by not requiring the dot annotation. This example uses it with the map function on arrays.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/bind-to-js-function.mdx#2025-04-18_snippet_15\n\nLANGUAGE: res\nCODE:\n```\n@send external map: (array<'a>, @uncurry ('a => 'b)) => array<'b> = \"map\"\nmap([1, 2, 3], x => x + 1)\n```\n\nLANGUAGE: js\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Destructuring Various Data Structures in ReScript\nDESCRIPTION: Shows how to destructure different ReScript data structures including records and variants. The example demonstrates extracting the name field from a record and a message from a Success variant.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\n// Record\ntype student = {name: string, age: int}\nlet student1 = {name: \"John\", age: 10}\nlet {name} = student1 // \"John\" assigned to `name`\n\n// Variant\ntype result =\n  | Success(string)\nlet myResult = Success(\"You did it!\")\nlet Success(message) = myResult // \"You did it!\" assigned to `message`\n```\n\nLANGUAGE: js\nCODE:\n```\nvar student1 = {\n  name: \"John\",\n  age: 10\n};\nvar name = \"John\";\n\nvar myResult = /* Success */{\n  _0: \"You did it!\"\n};\nvar message = \"You did it!\"\n\nvar myArray = [1, 2, 3];\nif (myArray.length !== 2) {\n  throw {\n    RE_EXN_ID: \"Match_failure\",\n    _1: [\n      \"playground.res\",\n      14,\n      4\n    ],\n    Error: new Error()\n  };\n}\nvar item1 = myArray[0];\nvar item2 = myArray[1];\n\nvar myList = {\n  hd: 1,\n  tl: {\n    hd: 2,\n    tl: {\n      hd: 3,\n      tl: /* [] */0\n    }\n  }\n};\n// ...\n```\n\n----------------------------------------\n\nTITLE: JSX Component Transformation Examples\nDESCRIPTION: Examples showing how JSX is transformed into React.createElement calls for both components without children and with children.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/beyond-jsx.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet _ = <Friend name=\"Fred\" age=20 />\n```\n\nLANGUAGE: javascript\nCODE:\n```\nJsxRuntime.jsx(Playground$Friend, { name: \"Fred\", age: 20 });\n```\n\n----------------------------------------\n\nTITLE: Binding to JS Object Methods with @send\nDESCRIPTION: Shows how to bind to methods on JavaScript objects using the @send annotation, which automatically places the object as the first argument for method calls.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/bind-to-js-function.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\ntype document // abstract type for a document object\n@send external getElementById: (document, string) => Dom.element = \"getElementById\"\n@val external doc: document = \"document\"\n\nlet el = getElementById(doc, \"myId\")\n```\n\nLANGUAGE: js\nCODE:\n```\nvar el = document.getElementById(\"myId\");\n```\n\n----------------------------------------\n\nTITLE: Using Tuple Types in ReScript\nDESCRIPTION: Shows how to use tuple types in type annotations and create type aliases for tuples in ReScript. This example demonstrates type safety for tuple values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/tuple.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reason\nCODE:\n```\nlet ageAndName: (int, string) = (24, \"Lil' ReScript\");\n// a tuple type alias\ntype coord3d = (float, float, float);\nlet my3dCoordinates: coord3d = (20.0, 30.5, 100.0);\n```\n\nLANGUAGE: ml\nCODE:\n```\nlet ageAndName: (int * string) = (24, \"Lil' ReScript\")\n(* a tuple type alias *)\ntype coord3d = (float * float * float)\nlet my3dCoordinates: coord3d = (20.0, 30.5, 100.0)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar ageAndName = [24, \"Lil' ReScript\"];\nvar my3dCoordinates = [20.0, 30.5, 100.0];\n```\n\n----------------------------------------\n\nTITLE: Module Interface Signature File in ReScript\nDESCRIPTION: This demonstrates the syntax for a `.resi` interface file which defines the public API of a module. The interface limits what is accessible from outside the module.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/module.mdx#2025-04-18_snippet_7\n\nLANGUAGE: res\nCODE:\n```\n/* file React.resi (interface. Compiles to the signature of React.res) */\ntype state = int\nlet render: string => string\n```\n\n----------------------------------------\n\nTITLE: Basic useState Hook Usage in ReScript\nDESCRIPTION: Basic implementation of React's useState hook showing state and setState initialization with initial state value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/hooks-state.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nlet (state, setState) = React.useState(_ => initialState)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar match = React.useState(function () {\n      return initialState;\n    });\n\nvar state = match[0];\n\nvar setState = match[1];\n```\n\n----------------------------------------\n\nTITLE: Optimal pattern matching solution in ReScript\nDESCRIPTION: The most elegant and maintainable implementation, using succinct pattern matching that directly returns the boolean value from Some or false for None, while maintaining exhaustiveness checking.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_18\n\nLANGUAGE: res\nCODE:\n```\nlet optionBoolToBool = opt => {\n  switch opt {\n  | Some(trueOrFalse) => trueOrFalse\n  | None => false\n  }\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction optionBoolToBool(opt) {\n  if (opt !== undefined) {\n    return opt;\n  } else {\n    return false;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Binding to TypeScript Enum with Customizable Variants (New Approach)\nDESCRIPTION: New approach in ReScript v11 for binding to TypeScript enums using customizable variants with @as annotations, preserving documentation and allowing better naming.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2023-04-17-improving-interop.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\n/** Direction of the action. */\ntype direction =\n  | /** The direction is up. */\n  @as(\"UP\")\n  Up\n\n  | /** The direction is down. */\n  @as(\"DOWN\")\n  Down\n\n  | /** The direction is left. */\n  @as(\"LEFT\")\n  Left\n\n  | /** The direction is right. */\n  @as(\"RIGHT\")\n  Right\n\n@module(\"./direction.js\") external myDirection: direction = \"myDirection\"\n```\n\n----------------------------------------\n\nTITLE: Array Iteration with forEach\nDESCRIPTION: Array iteration function that calls a given function for each element, used for side effects. Includes both uncurried (forEachU) and curried (forEach) versions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/array.mdx#2025-04-18_snippet_34\n\nLANGUAGE: rescript\nCODE:\n```\nBelt.Array.forEach([\"a\", \"b\", \"c\"], x => Js.log(\"Item: \" ++ x))\n\nlet total = ref(0)\nBelt.Array.forEach([1, 2, 3, 4], x => total := total.contents + x)\n```\n\n----------------------------------------\n\nTITLE: Using await in ReScript async function\nDESCRIPTION: This snippet demonstrates the usage of 'await' keyword in a ReScript async function. It defines an external function 'queryMessagesApi' that returns a promise, and then uses 'await' to unwrap the promise value within the 'fetchMessages' async function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/language_await.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\n@val external queryMessagesApi: string => promise<string> = \"global.queryMessagesApi\"\n\nlet fetchMessages = async () => {\n  let message = await queryMessagesApi(\"message-id-1\")\n\n  Console.log(message)\n}\n```\n\n----------------------------------------\n\nTITLE: Catching JavaScript Exceptions in ReScript\nDESCRIPTION: Shows how to catch and handle JavaScript exceptions using Js.Exn.Error pattern matching.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/exception.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reason\nCODE:\n```\ntry (someJSFunctionThatThrows()) {\n| Js.Exn.Error(obj) =>\n  switch (Js.Exn.message(obj)) {\n  | Some(m) => Js.log(\"Caught a JS exception! Message: \" ++ m)\n  | None => ()\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Binding to JS Objects Using ReScript Objects\nDESCRIPTION: Shows an alternative approach to binding JavaScript objects using ReScript's object type system. This provides a different syntax for accessing object properties compared to records.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/bind-to-js-object.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\ntype person = {\n  \"name\": string,\n  \"friends\": array<string>,\n  \"age\": int,\n}\n\n@module(\"MySchool\") external john: person = \"john\"\n\nlet johnName = john[\"name\"]\n```\n\nLANGUAGE: js\nCODE:\n```\nvar MySchool = require(\"MySchool\");\n\nvar johnName = MySchool.john.name;\n```\n\n----------------------------------------\n\nTITLE: Creating Submodule Components in ReScript\nDESCRIPTION: Shows how to define nested components as submodules within a single file, making it convenient to build complex UI components without creating multiple files. The example defines a Button component with a nested Label component.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/components-and-props.mdx#2025-04-18_snippet_11\n\nLANGUAGE: res\nCODE:\n```\n// src/Button.res\nmodule Label = {\n  @react.component\n  let make = (~title: string) => {\n    <div className=\"myLabel\"> {React.string(title)} </div>\n  }\n}\n\n@react.component\nlet make = (~children) => {\n  <div>\n    <Label title=\"Getting Started\" />\n    children\n  </div>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating React Elements from Primitive Types in ReScript\nDESCRIPTION: Demonstrates how to create React elements from primitive data types like string, int, float, and array using React module functions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/elements-and-jsx.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ReScript\nCODE:\n```\nReact.string(\"Hello\") // new element representing \"Hello\"\n\nReact.int(1) // new element representing \"1\"\n\nReact.float(1.0) // new element representing \"1.0\"\n\nlet element = React.array([\n  React.string(\"element 1\"),\n  React.string(\"element 2\"),\n  React.string(\"element 3\")\n])\n```\n\n----------------------------------------\n\nTITLE: Immutable Record Updates in ReScript\nDESCRIPTION: Shows how to create new records based on existing ones using the spread operator. The original record remains unchanged as records are immutable by default.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/record.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\nlet meNextYear = {...me, age: me.age + 1}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar meNextYear = {\n  age: 21,\n  name: \"Big ReScript\"\n};\n```\n\n----------------------------------------\n\nTITLE: Using External Declarations for DOM Manipulation in ReScript\nDESCRIPTION: This example shows how to use external declarations to interact with the DOM in ReScript. It demonstrates binding to the global 'document' object, adding an event listener, getting a property, and setting a property. The type of 'document' is left as a generic type 'a for flexibility.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/external.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\n// The type of document is just some random type 'a\n// that we won't bother to specify\n@val external document: 'a = \"document\"\n\n// call a method\ndocument[\"addEventListener\"](. \"mouseup\", _event => {\n  Js.log(\"clicked!\")\n})\n\n// get a property\nlet loc = document[\"location\"]\n\n// set a property\ndocument[\"location\"][\"href\"] = \"rescript-lang.org\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.addEventListener(\"mouseup\", function(_event) {\n  console.log(\"clicked!\");\n});\n\nvar loc = document.location;\n\ndocument.location.href = \"rescript-lang.org\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Shared Props in ReScript React Components\nDESCRIPTION: Demonstrates how to define and use shared props across multiple ReScript React components using the @react.component decorator and type definitions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/extensions-of-props.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\ntype sharedprops<'x, 'y> = {x: 'x, y: 'y, z:string}\n\nmodule C1 = {\n  @react.component(:sharedProps<'a, 'b>)\n  let make = (~x, ~y) => React.string(x ++ y ++ z)\n}\n\nmodule C2 = {\n  @react.component(:sharedProps<string, 'b>)\n  let make = (~x, ~y) => React.string(x ++ y ++ z)\n}\n\nmodule C3 = {\n  type myProps = sharedProps<int, int>\n  @react.component(:myProps)\n  let make = (~x, ~y) => React.int(x + y)\n}\n```\n\nLANGUAGE: rescript\nCODE:\n```\ntype sharedprops<'x, 'y> = {x: 'x, y: 'y, z: string}\n\nmodule C1 = {\n  type props<'a, 'b> = sharedProps<'a, 'b>\n  let make = ({x, y, _}: props<_>) => React.string(x ++ y ++ z)\n}\n\nmodule C2 = {\n  type props<'b> = sharedProps<string, 'b>\n  let make = ({x, y, _}: props<_>) => React.string(x ++ y ++ z)\n}\n\nmodule C3 = {\n  type myProps = sharedProps<int, int>\n  type props = myProps\n  let make = ({x, y, _}: props) => React.int(x + y)\n}\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Promises in Parallel with Promise.all\nDESCRIPTION: Shows how to use Promise.all to execute multiple promises concurrently and wait for all of them to complete. The example includes both ReScript code and its JavaScript output.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/promise.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\n@val\nexternal fetchMessage: string => promise<string> = \"global.fetchMessage\"\n\nlet logAsyncMessage = async () => {\n  let messages = await Promise.all([fetchMessage(\"message1\"), fetchMessage(\"message2\")])\n\n  Console.log(messages->Array.joinWith(\", \"))\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nasync function logAsyncMessage(param) {\n  var messages = await Promise.all([\n        global.fetchMessage(\"message1\"),\n        global.fetchMessage(\"message2\")\n      ]);\n  console.log(messages.join(\", \"));\n}\n\nexport {\n  logAsyncMessage ,\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Components with Optional Props in ReScript\nDESCRIPTION: Demonstrates how to define and use optional props in ReScript React components. The example shows a Greeting component that accepts an optional name parameter and handles both cases.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/components-and-props.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\n// Greeting.res\n@react.component\nlet make = (~name: option<string>=?) => {\n  let greeting = switch name {\n    | Some(name) => \"Hello \" ++ name ++ \"!\"\n    | None => \"Hello stranger!\"\n  }\n  <div> {React.string(greeting)} </div>\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction Greeting(Props) {\n  var name = Props.name;\n  var greeting = name !== undefined ? \"Hello \" + name + \"!\" : \"Hello stranger!\";\n  return React.createElement(\"div\", undefined, greeting);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ThemeProvider with useContext in ReScript\nDESCRIPTION: A comprehensive example showing how to implement a ThemeProvider using React context and the useContext hook in ReScript. It includes creating a context, a provider component, and a themed button component that consumes the context.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/hooks-context.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\n// App.res\nmodule ThemeContext = {\n  let context = React.createContext(\"light\")\n\n  module Provider = {\n    let provider = React.Context.provider(context)\n\n    @react.component\n    let make = (~value, ~children) => {\n      React.createElement(provider, {\"value\": value, \"children\": children})\n    }\n  }\n}\n\nmodule ThemedButton = {\n  @react.component\n  let make = () => {\n    let theme = React.useContext(ThemeContext.context)\n    let (color, backgroundColor) = switch theme {\n    | \"dark\" => (\"#ffffff\", \"#222222\")\n    | \"light\" | _ => (\"#000000\", \"#eeeeee\")\n    }\n\n    let style = ReactDOMStyle.make(~color, ~backgroundColor, ())\n\n    <button style> {React.string(\"I am a styled button!\")} </button>\n  }\n}\n\nmodule Toolbar = {\n  @react.component\n  let make = () => {\n    <div> <ThemedButton /> </div>\n  }\n}\n\n@react.component\nlet make = () => {\n  <ThemeContext.Provider value=\"dark\">\n    <div> <Toolbar /> </div>\n  </ThemeContext.Provider>\n}\n```\n\n----------------------------------------\n\nTITLE: Basic ReScript React Component Example (FancyButton)\nDESCRIPTION: A simple ReScript React component that renders a button with custom styling. This example demonstrates a component where ref forwarding might be useful.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/forwarding-refs.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\n// FancyButton.res\n\n@react.component\nlet make = (~children) => {\n  <button className=\"FancyButton\">\n    children\n  </button>\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Numbers to List Items with Keys\nDESCRIPTION: Shows how to map an array of numbers to React list items, using string conversion for key values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/arrays-and-keys.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet numbers = [1, 2, 3, 4, 5]\n\nlet items = Array.map(numbers, (number) => {\n  <li key={Int.toString(number)}> {React.int(number)} </li>\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar numbers = [\n  1,\n  2,\n  3,\n  4,\n  5\n];\n\nvar items = numbers.map(function (number) {\n      return JsxRuntime.jsx(\"li\", {\n                  children: number\n                }, number.toString());\n    });\n```\n\n----------------------------------------\n\nTITLE: Type Alias in ReScript\nDESCRIPTION: Shows how to create type aliases, which allow referring to types by different names while maintaining type equivalence.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/type.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\ntype scoreType = int\nlet x: scoreType = 10\n```\n\nLANGUAGE: js\nCODE:\n```\nvar x = 10;\n```\n\n----------------------------------------\n\nTITLE: JSON Type Definition\nDESCRIPTION: Basic type definition for JSON data structure\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/json.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype t\n```\n\n----------------------------------------\n\nTITLE: Importing a JavaScript Module as a Single Value in ReScript\nDESCRIPTION: Shows how to import an entire JavaScript module as a single value by omitting the string argument to @module. The output depends on whether you're targeting JavaScript module or CommonJS format.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/import-from-export-to-js.mdx#2025-04-18_snippet_1\n\nLANGUAGE: ReScript\nCODE:\n```\n@module external leftPad: (string, int) => string = \"./leftPad\"\nlet paddedResult = leftPad(\"hi\", 5)\n```\n\nLANGUAGE: JavaScript (Module)\nCODE:\n```\nimport * as LeftPad from \"./leftPad\";\nvar paddedResult = LeftPad(\"hi\", 5);\n```\n\nLANGUAGE: JavaScript (CommonJS)\nCODE:\n```\nvar LeftPad = require(\"./leftPad\");\nvar paddedResult = LeftPad(\"hi\", 5);\n```\n\n----------------------------------------\n\nTITLE: Basic Type Inference in ReScript\nDESCRIPTION: Demonstrates ReScript's type inference capability where the compiler automatically deduces types from values without explicit annotations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/type.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\nlet score = 10\nlet add = (a, b) => a + b\n```\n\nLANGUAGE: js\nCODE:\n```\nvar score = 10;\nfunction add(a, b) {\n  return a + b | 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Variant Constructors with Arguments\nDESCRIPTION: Demonstrates how to create variants with constructor arguments. The example shows creating Facebook and Instagram account variants with their appropriate data.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/variant.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reason\nCODE:\n```\nlet myAccount = Facebook(\"Josh\", 26);\nlet friendAccount = Instagram(\"Jenny\");\n```\n\nLANGUAGE: ml\nCODE:\n```\nlet myAccount =\n  Facebook (\"Josh\", 26)\nlet friendAccount =\n  Instagram \"Jenny\"\n```\n\nLANGUAGE: js\nCODE:\n```\nvar myAccount = {\n  TAG: /* Facebook */1,\n  _0: \"Josh\",\n  _1: 26\n};\nvar friendAccount = {\n  TAG: /* Instagram */0,\n  _0: \"Jenny\"\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing React Context for Theme in ReScript\nDESCRIPTION: This example shows how to use React Context in ReScript to avoid prop drilling. It creates a ThemeContext module with a provider, then uses React.useContext to access the theme value directly in components without passing it through intermediate elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/context.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\n// src/App.res\n\nmodule ThemeContext = {\n  type theme = Light | Dark\n  let context = React.createContext(Light)\n\n  module Provider = {\n    let make = React.Context.provider(context)\n  }\n}\n\nmodule Button = {\n  @react.component\n  let make = (~theme) => {\n    let className = switch theme {\n    | ThemeContext.Light => \"theme-light\"\n    | Dark => \"theme-black\"\n    }\n    <button className> {React.string(\"Click me\")} </button>\n  }\n}\n\nmodule ThemedButton = {\n  @react.component\n  let make = () => {\n    let theme = React.useContext(ThemeContext.context)\n\n    <Button theme />\n  }\n}\n\nmodule Toolbar = {\n  @react.component\n  let make = () => {\n    <div>\n      <ThemedButton />\n    </div>\n  }\n}\n\n@react.component\nlet make = () => {\n  <ThemeContext.Provider value=ThemeContext.Dark>\n    <div>\n      <Toolbar />\n    </div>\n  </ThemeContext.Provider>\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar context = React.createContext(/* Light */0);\n\nvar make = context.Provider;\n\nvar Provider = {\n  make: make\n};\n\nvar ThemeContext = {\n  context: context,\n  Provider: Provider\n};\n\nfunction App$Button(props) {\n  var className = props.theme ? \"theme-black\" : \"theme-light\";\n  return React.createElement(\"button\", {\n              className: className\n            }, \"Click me\");\n}\n\nvar Button = {\n  make: App$Button\n};\n\nfunction App$ThemedButton(props) {\n  var theme = React.useContext(context);\n  return React.createElement(App$Button, {\n              theme: theme\n            });\n}\n\nvar ThemedButton = {\n  make: App$ThemedButton\n};\n\nfunction App$Toolbar(props) {\n  return React.createElement(\"div\", undefined, React.createElement(App$ThemedButton, {}));\n}\n\nvar Toolbar = {\n  make: App$Toolbar\n};\n\nfunction App(props) {\n  return React.createElement(make, {\n              value: /* Dark */1,\n              children: React.createElement(\"div\", undefined, React.createElement(App$Toolbar, {}))\n            });\n}\n```\n\n----------------------------------------\n\nTITLE: Untagged Variants for Heterogeneous Arrays\nDESCRIPTION: Example of using untagged variants to represent heterogeneous arrays in ReScript. The @unboxed attribute causes the variant constructors to be stripped out, leaving only the payload values in the compiled JavaScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/variant.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rescript\nCODE:\n```\n@unboxed type listItemValue = String(string) | Boolean(bool) | Number(float)\n\nlet myArray = [String(\"Hello\"), Boolean(true), Boolean(false), Number(13.37)]\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar myArray = [\"hello\", true, false, 13.37];\n```\n\n----------------------------------------\n\nTITLE: Accessing Global Module Values in ReScript\nDESCRIPTION: Demonstrates binding to global module values like Math.random() and nested object properties using @val and @scope decorators.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/interop-cheatsheet.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\n@val @scope(\"Math\")\nexternal random: unit => float = \"random\"\n\nlet someNumber = random()\n\n@val @scope((\"window\", \"location\", \"ancestorOrigins\"))\nexternal length: int = \"length\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar someNumber = Math.random();\n```\n\n----------------------------------------\n\nTITLE: Promise Resolution\nDESCRIPTION: Function to create a resolved promise with a value\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/promise.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet resolve: 'a => t<'a>\n```\n\n----------------------------------------\n\nTITLE: Function Application Syntax in ReScript\nDESCRIPTION: Demonstrates different ways to apply functions in ReScript, including with labeled arguments, punning syntax, default values, and optional arguments.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/function.mdx#2025-04-18_snippet_23\n\nLANGUAGE: res\nCODE:\n```\nadd(x, y)\n\n// labeled\nadd(~first=1, ~second=2)\n// with punning sugar\nadd(~first, ~second)\n\n// application with default value. Same as normal application\nadd(~first=1, ~second=2)\n\n// explicit optional application\nadd(~first=?Some(1), ~second=?Some(2))\n// with punning\nadd(~first?, ~second?)\n```\n\n----------------------------------------\n\nTITLE: Stringifying JSON in ReScript\nDESCRIPTION: This example demonstrates how to use JSON.stringifyAny to convert ReScript data to a JSON string. It shows the ReScript code and its JavaScript output.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/json.mdx#2025-04-18_snippet_1\n\nLANGUAGE: ReScript\nCODE:\n```\nConsole.log(JSON.stringifyAny([\"Amy\", \"Joe\"]))\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nconsole.log(JSON.stringify([\n  \"Amy\",\n  \"Joe\"\n]));\n```\n\n----------------------------------------\n\nTITLE: Defining ReScript Variant Type for TypeScript Export\nDESCRIPTION: Example of using @genType annotation to export a ReScript variant type to TypeScript, showing how the variant is transformed into a union type with TAG properties.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/typescript-integration.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\n@genType\ntype t = | A(int) | B(string)\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype t = { TAG: \"A\"; _0: number } | { TAG: \"B\"; _0: string };\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Promises in Parallel with Js.Promise2.all\nDESCRIPTION: Example of using Js.Promise2.all to execute multiple promises in parallel and wait for all of them to complete.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/promise.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\n@val\nexternal fetchMessage: string => promise<string> = \"global.fetchMessage\"\n\nlet logAsyncMessage = async () => {\n  let messages = await Js.Promise2.all([fetchMessage(\"message1\"), fetchMessage(\"message2\")])\n\n  Js.log(Js.Array2.joinWith(messages, \", \"))\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nasync function logAsyncMessage(param) {\n  var messages = await Promise.all([\n        global.fetchMessage(\"message1\"),\n        global.fetchMessage(\"message2\")\n      ]);\n  console.log(messages.join(\", \"));\n}\n\nexport {\n  logAsyncMessage ,\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON in ReScript\nDESCRIPTION: Demonstrates binding to JavaScript's JSON.parse method and typing the return value. This approach allows for converting JSON strings to typed ReScript objects, though without runtime type checking.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/json.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\n// declare the shape of the json you're binding to\ntype data = {names: array<string>}\n\n// bind to JS' JSON.parse\n@scope(\"JSON\") @val\nexternal parseIntoMyData: string => data = \"parse\"\n\nlet result = parseIntoMyData(`{\"names\": [\"Luke\", \"Christine\"]}`)\nlet name1 = result.names[0]\n```\n\nLANGUAGE: js\nCODE:\n```\nvar result = JSON.parse(\"{\\\"names\\\": [\\\"Luke\\\", \\\"Christine\\\"]}\");\nvar name1 = result.names[0];\n```\n\n----------------------------------------\n\nTITLE: Big Integers in ReScript\nDESCRIPTION: Demonstrates using BigInt values in ReScript with basic arithmetic operations. BigInt values are denoted with a trailing 'n' and require opening the BigInt module to use operators.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/primitive-types.mdx#2025-04-18_snippet_6\n\nLANGUAGE: res\nCODE:\n```\nopen! BigInt\n\nlet a = 9007199254740991n + 9007199254740991n\nlet b = 2n ** 2n\n```\n\nLANGUAGE: js\nCODE:\n```\nvar a = 9007199254740991n + 9007199254740991n;\n\nvar p = 2n ** 2n;\n```\n\n----------------------------------------\n\nTITLE: Binding to JavaScript Object Methods with @send\nDESCRIPTION: Shows how to bind to methods on JavaScript objects using the @send annotation, where the object is always the first parameter.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/bind-to-js-function.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\ntype document // abstract type for a document object\n@send external getElementById: (document, string) => Dom.element = \"getElementById\"\n@val external doc: document = \"document\"\n\nlet el = getElementById(doc, \"myId\")\n```\n\nLANGUAGE: js\nCODE:\n```\nvar el = document.getElementById(\"myId\");\n```\n\n----------------------------------------\n\nTITLE: Creating and using a React ref with the useRef hook\nDESCRIPTION: Example of creating a ref with React.useRef hook to maintain a click counter without causing re-renders when the value changes.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/refs-and-the-dom.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\n@react.component\nlet make = () => {\n  let clicks = React.useRef(0);\n\n  let onClick = (_) => {\n    clicks.current = clicks.current + 1;\n  };\n\n  <div onClick>\n    {Belt.Int.toString(clicks.current)->React.string}\n  </div>\n}\n```\n\n----------------------------------------\n\nTITLE: Using the option type in ReScript\nDESCRIPTION: Demonstrates how to use the option type to handle potentially null values in ReScript. It shows declaring option values and pattern matching on them.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/newcomer-examples.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\nlet possiblyNullValue1 = None;\nlet possiblyNullValue2 = Some(\"Hello\");\n\nswitch (possiblyNullValue2) {\n| None => Js.log(\"Nothing to see here.\")\n| Some(message) => Js.log(message)\n};\n```\n\nLANGUAGE: ml\nCODE:\n```\nlet possiblyNullValue1 = None\nlet possiblyNullValue2 = Some \"Hello\"\n\nlet () = match possiblyNullValue2 with\n| None -> Js.log \"Nothing to see here.\"\n| Some(message) -> Js.log message\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar possiblyNullValue1;\nvar possiblyNullValue2 = \"Hello\";\n\nif (possiblyNullValue2 !== undefined) {\n  console.log(possiblyNullValue2);\n} else {\n  console.log(\"Nothing to see here.\");\n}\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching with Optional Values (ReScript)\nDESCRIPTION: Shows how to handle nullable/optional values using pattern matching with Some and None variants, preventing undefined errors at compile time through exhaustiveness checking.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_20\n\nLANGUAGE: res\nCODE:\n```\nlet myNullableValue = Some(5)\n\nswitch myNullableValue {\n| Some(v) => Js.log(\"value is present\")\n| None => Js.log(\"value is absent\")\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar myNullableValue = 5;\n\nif (myNullableValue !== undefined) {\n  console.log(\"value is present\");\n} else {\n  console.log(\"value is absent\");\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling with Try/Catch in Async Functions\nDESCRIPTION: Example of error handling in async functions using try/catch blocks to catch JavaScript exceptions and handle them appropriately.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/async-await.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\n// For simulation purposes\nlet authenticate = async () => {\n  raise(Js.Exn.raiseRangeError(\"Authentication failed.\"))\n}\n\nlet checkAuth = async () => {\n  try {\n    await authenticate()\n  } catch {\n  | Js.Exn.Error(e) =>\n    switch Js.Exn.message(e) {\n    | Some(msg) => Js.log(\"JS error thrown: \" ++ msg)\n    | None => Js.log(\"Some other exception has been thrown\")\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Focus for Text Input using useRef in ReScript\nDESCRIPTION: Example component that demonstrates how to create a button that focuses a text input using useRef. It shows how to access DOM elements and call their methods.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/hooks-ref.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\n// TextInputWithFocusButton.res\n\n@send external focus: Dom.element => unit = \"focus\"\n\n@react.component\nlet make = () => {\n  let inputEl = React.useRef(Nullable.null)\n\n  let onClick = _ => {\n    inputEl.current->Nullable.forEach(input => input->focus)\n  }\n\n  <>\n    <input ref={ReactDOM.Ref.domRef(inputEl)} type_=\"text\" />\n    <button onClick> {React.string(\"Focus the input\")} </button>\n  </>\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction TextInputWithFocusButton(Props) {\n  var inputEl = React.useRef(null);\n  var onClick = function (param) {\n    Core__Nullable.forEach(inputEl.current, (function (input) {\n            input.focus();\n          }));\n  };\n  return React.createElement(React.Fragment, {}, React.createElement(\"input\", {\n                  ref: Caml_option.some(inputEl),\n                  type: \"text\"\n                }), React.createElement(\"button\", {\n                  onClick: onClick\n                }, \"Focus the input\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Theme Context with useContext in ReScript React\nDESCRIPTION: Example showing how to create and use a theme context in ReScript React. Demonstrates context creation, provider setup, and context consumption in a nested component structure with theme-based styling.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/hooks-context.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\n// App.res\nmodule ThemeContext = {\n  let context = React.createContext(\"light\")\n\n  module Provider = {\n    let make = React.Context.provider(context)\n  }\n}\n\nmodule ThemedButton = {\n  @react.component\n  let make = () => {\n    let theme = React.useContext(ThemeContext.context)\n    let (color, backgroundColor) = switch theme {\n    | \"dark\" => (\"#ffffff\", \"#222222\")\n    | \"light\" | _ => (\"#000000\", \"#eeeeee\")\n    }\n\n    let style = ReactDOMStyle.make(~color, ~backgroundColor, ())\n\n    <button style> {React.string(\"I am a styled button!\")} </button>\n  }\n}\n\nmodule Toolbar = {\n  @react.component\n  let make = () => {\n    <div> <ThemedButton /> </div>\n  }\n}\n\n@react.component\nlet make = () => {\n  <ThemeContext.Provider value=\"dark\">\n    <div> <Toolbar /> </div>\n  </ThemeContext.Provider>\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar context = React.createContext(\"light\");\n\nvar make = context.Provider;\n\nvar Provider = {\n  make: make\n};\n\nvar ThemeContext = {\n  context: context,\n  Provider: Provider\n};\n\nfunction App$ThemedButton(props) {\n  var theme = React.useContext(context);\n  var match;\n  switch (theme) {\n    case \"dark\" :\n        match = [\n          \"#ffffff\",\n          \"#222222\"\n        ];\n        break;\n    case \"light\" :\n        match = [\n          \"#000000\",\n          \"#eeeeee\"\n        ];\n        break;\n    default:\n      match = [\n        \"#000000\",\n        \"#eeeeee\"\n      ];\n  }\n  var style = {\n    backgroundColor: match[1],\n    color: match[0]\n  };\n  return React.createElement(\"button\", {\n              style: style\n            }, \"I am a styled button!\");\n}\n\nvar ThemedButton = {\n  make: App$ThemedButton\n};\n\nfunction App$Toolbar(props) {\n  return React.createElement(\"div\", undefined, React.createElement(App$ThemedButton, {}));\n}\n\nvar Toolbar = {\n  make: App$Toolbar\n};\n\nfunction App(props) {\n  return React.createElement(make, {\n              value: \"dark\",\n              children: React.createElement(\"div\", undefined, React.createElement(App$Toolbar, {}))\n            });\n}\n```\n\n----------------------------------------\n\nTITLE: Binding JS Functions with Labeled Arguments\nDESCRIPTION: Shows how to use ReScript's labeled arguments feature to improve the clarity of JavaScript function calls while preserving the original JS implementation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/bind-to-js-function.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\n@module(\"MyGame\")\nexternal draw: (~x: int, ~y: int, ~border: bool=?, unit) => unit = \"draw\"\n\ndraw(~x=10, ~y=20, ~border=true, ())\ndraw(~x=10, ~y=20, ())\n```\n\nLANGUAGE: js\nCODE:\n```\nvar MyGame = require(\"MyGame\");\n\nMyGame.draw(10, 20, true);\nMyGame.draw(10, 20, undefined);\n```\n\n----------------------------------------\n\nTITLE: ReScript Scoped Polymorphic Type Definition for Logger\nDESCRIPTION: Definition of a ReScript type for binding to a JavaScript logger API using scoped polymorphic types, enabling type-safe handling of diverse data types.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/scoped-polymorphic-types.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\ntype logger = { log: 'a. 'a => unit }\n\n@module(\"jsAPI\") external getLogger: unit => logger = \"getLogger\"\n```\n\n----------------------------------------\n\nTITLE: Converting Option Bool using Optimal Pattern Matching\nDESCRIPTION: Final optimized implementation using pattern matching. Most concise and maintainable version that preserves exhaustiveness checking.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_25\n\nLANGUAGE: rescript\nCODE:\n```\nlet optionBoolToBool = opt => {\n  switch opt {\n  | Some(trueOrFalse) => trueOrFalse\n  | None => false\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction optionBoolToBool(opt) {\n  if (opt !== undefined) {\n    return opt;\n  } else {\n    return false;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Object Types in ReScript\nDESCRIPTION: Using the spread operator (...) to combine object type definitions. This allows extending existing object types with additional properties.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/object.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\ntype point2d = {\n  \"x\": float,\n  \"y\": float,\n}\ntype point3d = {\n  ...point2d,\n  \"z\": float,\n}\n\nlet myPoint: point3d = {\n  \"x\": 1.0,\n  \"y\": 2.0,\n  \"z\": 3.0,\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar myPoint = {\n  x: 1.0,\n  y: 2.0,\n  z: 3.0\n};\n```\n\n----------------------------------------\n\nTITLE: Console Logging Functions in ReScript\nDESCRIPTION: A collection of functions for basic console logging with different arities. These functions print values to the console with standard log level.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/console.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reasonml\nCODE:\n```\nlet log: 'a => unit;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet log2: ('a, 'b) => unit;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet log3: ('a, 'b, 'c) => unit;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet log4: ('a, 'b, 'c, 'd) => unit;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet logMany: array('a) => unit;\n```\n\n----------------------------------------\n\nTITLE: Binding to JavaScript function with labeled arguments in ReScript\nDESCRIPTION: Demonstrates how to use ReScript's labeled arguments feature to improve clarity when binding to JavaScript functions, while maintaining the same compiled output.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/bind-to-js-function.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\n@module(\"MyGame\")\nexternal draw: (~x: int, ~y: int, ~border: bool=?, unit) => unit = \"draw\"\n\ndraw(~x=10, ~y=20, ~border=true, ())\ndraw(~x=10, ~y=20, ())\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar MyGame = require(\"MyGame\");\n\nMyGame.draw(10, 20, true);\nMyGame.draw(10, 20, undefined);\n```\n\n----------------------------------------\n\nTITLE: Function Definition in JavaScript vs ReScript\nDESCRIPTION: Shows how functions are defined in both languages. ReScript uses arrow function syntax consistently while JavaScript has multiple function definition styles.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/overview.mdx#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst myFun = (x, y) => {\n  const doubleX = x + x;\n  const doubleY = y + y;\n  return doubleX + doubleY;\n};\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet myFun = (x, y) => {\n  let doubleX = x + x\n  let doubleY = y + y\n  doubleX + doubleY\n}\n```\n\n----------------------------------------\n\nTITLE: List Pattern Matching with Recursion (ReScript)\nDESCRIPTION: Shows pattern matching on lists with list{} syntax, demonstrating how to extract the head and tail of a list and process them recursively.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_17\n\nLANGUAGE: res\nCODE:\n```\nlet rec printStudents = (students) => {\n  switch students {\n  | list{} => () // done\n  | list{student} => Js.log(\"Last student: \" ++ student)\n  | list{student1, ...otherStudents} =>\n    Js.log(student1)\n    printStudents(otherStudents)\n  }\n}\nprintStudents(list{\"Jane\", \"Harvey\", \"Patrick\"})\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction printStudents(_students) {\n  while(true) {\n    var students = _students;\n    if (!students) {\n      return;\n    }\n    var otherStudents = students.tl;\n    var student = students.hd;\n    if (otherStudents) {\n      console.log(student);\n      _students = otherStudents;\n      continue;\n    }\n    console.log(\"Last student: \" + student);\n    return;\n  };\n}\n\nprintStudents({\n  hd: \"Jane\",\n  tl: {\n    hd: \"Harvey\",\n    tl: {\n      hd: \"Patrick\",\n      tl: /* [] */0\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Method Chaining in ReScript\nDESCRIPTION: Demonstrates how to bind to and chain JavaScript array methods using bs.send. Shows mapping and filtering operations with proper type annotations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/interop-cheatsheet.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reason\nCODE:\n```\n[@bs.send] external map: (array('a), 'a => 'b) => array('b) = \"map\";\n[@bs.send] external filter: (array('a), 'a => 'b) => array('b) = \"filter\";\n[|1, 2, 3|]\n  ->map(a => a + 1)\n  ->filter(a => a mod 2 == 0)\n  ->Js.log;\n```\n\nLANGUAGE: ml\nCODE:\n```\nexternal map: 'a array -> ('a -> 'b) -> 'b array = \"map\" [@@bs.send]\nexternal filter: 'a array -> ('a -> 'b) -> 'b array = \"filter\" [@@bs.send]\n[|1; 2; 3|]\n  |. map(fun a -> a + 1)\n  |. filter(fun a -> a mod 2 = 0)\n  |. Js.log\n```\n\n----------------------------------------\n\nTITLE: Fall-Through Pattern Matching in ReScript\nDESCRIPTION: Shows how to use fall-through patterns in a switch statement, allowing multiple cases to be handled by the same code. This example handles different status types with shared logic.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_7\n\nLANGUAGE: res\nCODE:\n```\nlet myStatus = Vacations(10)\n\nswitch myStatus {\n| Vacations(days)\n| Sabbatical(days) => Js.log(`Come back in ${Js.Int.toString(days)} days!`)\n| Sick\n| Present => Js.log(\"Hey! How are you?\")\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar myStatus = {\n  TAG: /* Vacations */0,\n  _0: 10\n};\n\nif (typeof myStatus === \"number\") {\n  console.log(\"Hey! How are you?\");\n} else {\n  console.log(\"Come back in \" + (10).toString() + \" days!\");\n}\n```\n\n----------------------------------------\n\nTITLE: React Component Definition with Decorator\nDESCRIPTION: Example of a Friend component defined using the @react.component decorator, showing the decorated syntax, expanded form, and resulting JavaScript output.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/beyond-jsx.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nmodule Friend = {\n  @react.component\n  let make = (~name: string, ~children) => {\n    <div>\n      {React.string(name)}\n      children\n    </div>\n  }\n}\n```\n\nLANGUAGE: rescript\nCODE:\n```\nmodule Friend = {\n  type props<'name, 'children> = {\n    name: 'name,\n    children: 'children,\n  }\n\n  let make = ({name, children, _}: props<string, 'children>) => {\n    ReactDOM.createDOMElementVariadic(\"div\", [{React.string(name)}, children])\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Playground$Friend(props) {\n  return JsxRuntime.jsxs(\"div\", {\n              children: [\n                props.name,\n                props.children\n              ]\n            });\n}\n\nvar Friend = {\n  make: Playground$Friend\n};\n```\n\n----------------------------------------\n\nTITLE: Dynamically Importing a Specific Function in ReScript\nDESCRIPTION: Example of using the new Js.import function to dynamically import just the add function from MathUtils module. The function returns a promise that resolves to the imported value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2023-06-05-first-class-dynamic-import-support.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\n// App.res\nlet main = async () => {\n  let add = await Js.import(MathUtils.add)\n  let onePlusOne = add(1, 1)\n\n  RescriptCore.Console.log(onePlusOne)\n}\n```\n\n----------------------------------------\n\nTITLE: Using @return Decorator with getElementById in ReScript\nDESCRIPTION: This example demonstrates how to use the @return(nullable) decorator to convert null/undefined values from JavaScript's getElementById method into ReScript's option type. The code defines external bindings and shows how to handle the option result with pattern matching.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/decorator_return.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\ntype element\ntype dom\n\n@send @return(nullable)\nexternal getElementById: (dom, string) => option<element> = \"getElementById\"\n\nlet test = dom => {\n  let elem = dom->getElementById(\"haha\")\n  switch elem {\n  | None => 1\n  | Some(_) => 2\n  }\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction test(dom) {\n  var elem = dom.getElementById(\"haha\");\n  if (elem == null) {\n    return 1;\n  } else {\n    return 2;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a React Component with Props Using @react.componentWithProps in ReScript\nDESCRIPTION: Example of defining a React component using the @react.componentWithProps decorator. The component takes a record with a 'name' property and renders a button with a greeting message. The decorator ensures proper uppercased naming and React JSX transformations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/decorator_react_component_with_props.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nmodule Hey = {\n  type props = {\n    name: string,\n  }\n\n  @react.componentWithProps\n  let make = (props: props) => {\n    <button> {React.string(\"Hello \" ++ props.name ++ \"!\")} </button>\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as JsxRuntime from \"react/jsx-runtime\";\n\nfunction Playground$Hey(props) {\n  return JsxRuntime.jsx(\"button\", {\n    children: \"Hello \" + props.name + \"!\"\n  });\n}\n\nlet Hey = {\n  make: Playground$Hey\n};\n```\n\n----------------------------------------\n\nTITLE: Component with Optional Children in ReScript\nDESCRIPTION: Demonstrates a component that makes children props optional and provides a fallback message when no children are provided.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/components-and-props.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\nmodule OptionalChildren = {\n  @react.component\n  let make = (~children: option<React.element>=?) => {\n    <div>\n      {switch children {\n      | Some(element) => element\n      | None => React.string(\"No children provided\")\n      }}\n    </div>\n  }\n}\n\n<div>\n  <OptionalChildren />\n  <OptionalChildren> <div /> </OptionalChildren>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Async/Await in ReScript\nDESCRIPTION: Demonstrates basic async/await usage in ReScript with a simple user greeting function. Shows how promises are handled and the corresponding JavaScript output.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/function.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet getUserName = async (userId) => userId\n\nlet greetUser = async (userId) => {\n  let name = await getUserName(userId)  \n  \"Hello \" ++ name ++ \"!\"\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nasync function greetUser(userId) {\n  var name = await getUserName(userId);\n  return \"Hello \" + name + \"!\";\n}\n```\n\n----------------------------------------\n\nTITLE: Document Title Counter with useEffect in ReScript\nDESCRIPTION: Implements a counter component that updates the document title on every render using React.useEffect. Demonstrates a side effect without cleanup by modifying the DOM directly after state changes.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/hooks-effect.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\n// Counter.res\nmodule Document = {\n  type t;\n  @val external document: t = \"document\";\n  @set external setTitle: (t, string) => unit = \"title\"\n}\n\n@react.component\nlet make = () => {\n  let (count, setCount) = React.useState(_ => 0);\n\n  React.useEffect(() => {\n    open Document\n    document->setTitle(`You clicked ${Belt.Int.toString(count)} times!`)\n    None\n  }, );\n\n  let onClick = (_evt) => {\n    setCount(prev => prev + 1)\n  };\n\n  let msg = \"You clicked\" ++ Belt.Int.toString(count) ++  \"times\"\n\n  <div>\n    <p>{React.string(msg)}</p>\n    <button onClick> {React.string(\"Click me\")} </button>\n  </div>\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction Counter(Props) {\n  var match = React.useState(function () {\n        return 0;\n      });\n  var setCount = match[1];\n  var count = match[0];\n  React.useEffect(function () {\n        document.title = \"You clicked \" + String(count) + \" times!\";\n\n      });\n  var onClick = function (_evt) {\n    return Curry._1(setCount, (function (prev) {\n                  return prev + 1 | 0;\n                }));\n  };\n  var msg = \"You clicked\" + String(count) + \"times\";\n  return React.createElement(\"div\", undefined,\n    React.createElement(\"p\", undefined, msg),\n      React.createElement(\"button\", {\n                  onClick: onClick\n                }, \"Click me\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Creating React Elements from Primitive Types in ReScript\nDESCRIPTION: Shows how to create React elements from primitive data types using the React module's conversion functions. Includes examples for string, int, float, and array conversions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/elements-and-jsx.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ReScript\nCODE:\n```\nReact.string(\"Hello\") // new element representing \"Hello\"\n\nReact.int(1) // new element representing \"1\"\n\nReact.float(1.0) // new element representing \"1.0\"\n```\n\n----------------------------------------\n\nTITLE: Running ReScript Build with Watch Mode\nDESCRIPTION: Command to keep a build watcher running that will automatically detect file changes and rebuild the project, enabling a more efficient development workflow.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/build-overview.mdx#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nrescript build -w\n```\n\n----------------------------------------\n\nTITLE: Array Updates in ReScript\nDESCRIPTION: Demonstrates different ways to update array values using index assignment, push and set methods.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/array-and-list.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet myArray = [\"hello\", \"world\", \"how are you\"]\n\nmyArray[0] = \"hey\" // now [\"hey\", \"world\", \"how are you\"]\n\nmyArray->Array.push(\"?\") //  [\"hey\", \"world\", \"how are you\", \"?\"]\n\nmyArray->Array.set(0, \"bye\") //  [\"bye\", \"world\", \"how are you\", \"?\"]\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar myArray = [\"hello\", \"world\", \"how are you\"];\n\nmyArray[0] = \"hey\";\n\nmyArray.push(\"?\");\n\nmyArray[0] = \"bye\";\n```\n\n----------------------------------------\n\nTITLE: Prop Spreading in ReScript JSX\nDESCRIPTION: Demonstrates prop spreading in ReScript JSX, which allows passing multiple props at once. In ReScript, the spread must be at the first position, followed by other individual props.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/jsx.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\n<Comp {...props} a=\"a\" />\n```\n\nLANGUAGE: javascript\nCODE:\n```\nReact.createElement(Comp, {\n  a: \"a\",\n  b: \"b\"\n});\n```\n\nLANGUAGE: rescript\nCODE:\n```\n<NotAllowed {...props1} {...props2} />\n```\n\nLANGUAGE: rescript\nCODE:\n```\n<NotAllowed a=\"a\" {...props} />\n```\n\n----------------------------------------\n\nTITLE: Labeled Arguments in ReScript\nDESCRIPTION: Using labeled arguments with the ~ prefix to make function calls more readable and explicit. This allows arguments to be clearly identified by their names when calling the function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/function.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\nlet addCoordinates = (~x, ~y) => {\n  // use x and y here\n}\n// ...\naddCoordinates(~x=5, ~y=6)\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction addCoordinates(x, y) {\n  // use x and y here\n}\n\naddCoordinates(5, 6);\n```\n\n----------------------------------------\n\nTITLE: Binding to JS Objects using ReScript Object\nDESCRIPTION: Shows an alternative way to model a JavaScript object using ReScript's object type instead of a record.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/bind-to-js-object.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ReScript\nCODE:\n```\ntype person = {\n  \"name\": string,\n  \"friends\": array<string>,\n  \"age\": int,\n}\n\n@module(\"MySchool\") external john: person = \"john\"\n\nlet johnName = john[\"name\"]\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar MySchool = require(\"MySchool\");\n\nvar johnName = MySchool.john.name;\n```\n\n----------------------------------------\n\nTITLE: Binding to JS Module Class with new and module\nDESCRIPTION: Shows how to chain @new and @module attributes when binding to a JavaScript module that is itself a class.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/bind-to-js-object.mdx#2025-04-18_snippet_7\n\nLANGUAGE: ReScript\nCODE:\n```\ntype t\n@new @module external book: unit => t = \"Book\"\nlet myBook = book()\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar Book = require(\"Book\");\nvar myBook = new Book();\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching with Option Type in ReScript\nDESCRIPTION: Demonstrates how to handle both cases of an Option type using pattern matching, ensuring null-safety.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/null-undefined-option.mdx#2025-04-18_snippet_2\n\nLANGUAGE: ReScript\nCODE:\n```\nswitch licenseNumber {\n| None =>\n  Js.log(\"The person doesn't have a car\")\n| Some(number) =>\n  Js.log(\"The person's license number is \" ++ Js.Int.toString(number))\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar number = licenseNumber;\n\nif (number !== undefined) {\n  console.log(\"The person's license number is \" + number.toString());\n} else {\n  console.log(\"The person doesn't have a car\");\n}\n```\n\n----------------------------------------\n\nTITLE: Function Application Syntax in ReScript\nDESCRIPTION: Shows different ways to call functions in ReScript, including with labeled arguments, punning syntax, and optional parameters.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/function.mdx#2025-04-18_snippet_23\n\nLANGUAGE: res\nCODE:\n```\nadd(x, y)\n\n// labeled\nadd(~first=1, ~second=2)\n// with punning sugar\nadd(~first, ~second)\n\n// application with default value. Same as normal application\nadd(~first=1, ~second=2)\n\n// explicit optional application\nadd(~first=?Some(1), ~second=?Some(2))\n// with punning\nadd(~first?, ~second?)\n```\n\n----------------------------------------\n\nTITLE: Immutably Updating Records with Spread Operator\nDESCRIPTION: Shows how to create a new record by copying an existing one and updating specific fields using the spread operator. The original record remains unchanged.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/record.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet meNextYear = {...me, age: me.age + 1}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar meNextYear = {\n  age: 21,\n  name: \"Big ReScript\"\n};\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching with If Clause (ReScript)\nDESCRIPTION: Demonstrates the use of 'if' clauses in pattern matching to add additional conditions to a pattern, creating a more linear and readable structure.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_14\n\nLANGUAGE: res\nCODE:\n```\nswitch person1 {\n| Teacher(_) => () // do nothing\n| Student({reportCard: {gpa}}) if gpa < 0.5 =>\n  Js.log(\"What's happening\")\n| Student(_) =>\n  // fall-through, catch-all case\n  Js.log(\"Heyo\")\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nif (person1.TAG) {\n  if (person1.reportCard.gpa < 0.5) {\n    console.log(\"What's happening\");\n  } else {\n    console.log(\"Heyo\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Variadic JS Function in ReScript\nDESCRIPTION: Shows how to bind a JavaScript function that takes a variable number of arguments using the @variadic attribute in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/bind-to-js-function.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ReScript\nCODE:\n```\n@module(\"path\") @variadic\nexternal join: array<string> => string = \"join\"\n\nlet v = join([\"a\", \"b\"])\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar Path = require(\"path\");\nvar v = Path.join(\"a\", \"b\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Module Signatures in ReScript\nDESCRIPTION: Demonstrates how to implement a module that satisfies a module signature. This example shows a Company module that implements the EstablishmentType signature, providing concrete implementations for the required components.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/module.mdx#2025-04-18_snippet_10\n\nLANGUAGE: res\nCODE:\n```\nmodule Company: EstablishmentType = {\n  type profession = CEO | Designer | Engineer | ...\n\n  let getProfession = (person) => ...\n  let person1 = ...\n  let person2 = ...\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction getProfession(person) {\n  ...\n}\n\nvar person1 = ...\n\nvar person2 = ...\n\nvar Company = {\n  getProfession: getProfession,\n  person1: person1,\n  person2: person2\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing React Context in ReScript\nDESCRIPTION: This code demonstrates how to use React Context in ReScript to avoid prop drilling. It creates a ThemeContext with a provider, then uses useContext in components to access the theme value without passing it through intermediate components.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/context.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\n// src/App.res\n\nmodule ThemeContext = {\n  type theme = Light | Dark;\n  let context = React.createContext(Light)\n\n  module Provider = {\n    let provider = React.Context.provider(context)\n\n    @react.component\n    let make = (~value, ~children) => {\n      React.createElement(provider, {\"value\": value, \"children\": children})\n    }\n  }\n}\n\nmodule Button = {\n  @react.component\n  let make = (~theme) => {\n    let className = switch theme {\n      | ThemeContext.Light => \"theme-light\"\n      | Dark => \"theme-black\"\n    };\n    <button className> {React.string(\"Click me\")} </button>\n  }\n}\n\nmodule ThemedButton = {\n  @react.component\n  let make = () => {\n    let theme = React.useContext(ThemeContext.context)\n\n    <Button theme/>\n  }\n}\n\nmodule Toolbar = {\n  @react.component\n  let make = () => {\n    <div> <ThemedButton /> </div>\n  }\n}\n\n@react.component\nlet make = () => {\n  <ThemeContext.Provider value=ThemeContext.Dark>\n    <div> <Toolbar /> </div>\n  </ThemeContext.Provider>\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar context = React.createContext(/* Light */0);\n\nvar provider = context.Provider;\n\nfunction ThemeContext$Provider(Props) {\n  var value = Props.value;\n  var children = Props.children;\n  return React.createElement(provider, {\n              value: value,\n              children: children\n            });\n}\n\nfunction Button(Props) {\n  var theme = Props.theme;\n  var className = theme ? \"theme-black\" : \"theme-light\";\n  return React.createElement(\"button\", {\n              className: className\n            }, \"Click me\");\n}\n\nvar Button = {\n  make: Button\n};\n\nfunction ThemedButton(Props) {\n  var theme = React.useContext(context);\n  return React.createElement(Button, {\n              theme: theme\n            });\n}\n\nvar ThemedButton = {\n  make: ThemedButton\n};\n\nfunction Toolbar(Props) {\n  return React.createElement(\"div\", undefined, React.createElement(ThemedButton, {}));\n}\n\nvar Toolbar = {\n  make: Toolbar\n};\n\nfunction Playground(Props) {\n  return React.createElement(ThemeContext$Provider, {\n              value: /* Dark */1,\n              children: React.createElement(\"div\", undefined, React.createElement(Toolbar, {}))\n            });\n}\n```\n\n----------------------------------------\n\nTITLE: React.forwardRef Component Example\nDESCRIPTION: Demonstration of using @react.component decorator with React.forwardRef, showing both decorated and expanded forms.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/beyond-jsx.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nmodule FancyInput = {\n  @react.component\n  let make = React.forwardRef((~className=?, ~children, ref) =>\n    <div>\n      // use ref here\n    </div>\n  )\n}\n```\n\nLANGUAGE: rescript\nCODE:\n```\n// Simplified Output\ntype props<'className, 'children, 'ref> = {\n  className?: 'className,\n  children: 'children,\n  ref?: 'ref,\n}\n\nlet make = (\n  {?className, children, _}: props<'className, 'children, ReactDOM.Ref.currentDomRef>,\n  ref: Nullable.t<ReactDOM.Ref.currentDomRef>,\n) => make(~className, ~children, ~ref, ())\n```\n\n----------------------------------------\n\nTITLE: Implementing Friend Status Component in ReScript\nDESCRIPTION: A React component that displays a friend's online status using useEffect and useState hooks. It subscribes to a chat API to monitor status changes.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/hooks-custom.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\n// FriendStatus.res\n\nmodule ChatAPI = {\n  // Imaginary globally available ChatAPI for demo purposes\n  type status = { isOnline: bool };\n  @val external subscribeToFriendStatus: (string, status => unit) => unit = \"subscribeToFriendStatus\";\n  @val external unsubscribeFromFriendStatus: (string, status => unit) => unit = \"unsubscribeFromFriendStatus\";\n}\n\ntype state = Offline | Loading | Online;\n\n@react.component\nlet make = (~friendId: string) => {\n  let (state, setState) = React.useState(_ => Offline)\n\n  React.useEffect(() => {\n    let handleStatusChange = (status) => {\n      setState(_ => {\n        status.ChatAPI.isOnline ? Online : Offline\n      })\n    }\n\n    ChatAPI.subscribeToFriendStatus(friendId, handleStatusChange);\n    setState(_ => Loading);\n\n    let cleanup = () => {\n      ChatAPI.unsubscribeFromFriendStatus(friendId, handleStatusChange)\n    }\n\n    Some(cleanup)\n  })\n\n  let text = switch(state) {\n    | Offline => friendId ++ \" is offline\"\n    | Online => friendId ++ \" is online\"\n    | Loading => \"loading...\"\n  }\n\n  <div>\n  \t{React.string(text)}\n  </div>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Color Function with ReScript for TypeScript Use\nDESCRIPTION: Complete example of defining a color type and function in ReScript with @genType annotations, which will be exported to TypeScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/typescript-integration.mdx#2025-04-18_snippet_1\n\nLANGUAGE: ReScript\nCODE:\n```\n// src/Color.res\n\n@genType\ntype color =\n  | Red\n  | Blue\n\n@genType\nlet printColorMessage = (~color, ~message) => {\n  let prefix = switch color {\n  | Red => \"\\x1b[91m\"\n  | Blue => \"\\x1b[94m\"\n  }\n  let reset = \"\\x1b[0m\"\n\n  Console.log(prefix ++ message ++ reset)\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Object Types in ReScript\nDESCRIPTION: Demonstrates how to declare an optional type for a ReScript object. Unlike records, object types are inferred and don't require explicit declarations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/object.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\ntype person = {\n  \"age\": int,\n  \"name\": string\n};\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Complete JSX Component Example with Multiple Props\nDESCRIPTION: Shows a comprehensive example of a JSX component with various prop types including boolean, string, integer, optional, and event handler props, along with child elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/jsx.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\n<MyComponent\n  booleanAttribute={true}\n  stringAttribute=\"string\"\n  intAttribute=1\n  forcedOptional=?{Some(\"hello\")}\n  onClick={handleClick}>\n  <div> {React.string(\"hello\")} </div>\n</MyComponent>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nReact.createElement(MyComponent, {\n  children: React.createElement(\"div\", undefined, \"hello\"),\n  booleanAttribute: true,\n  stringAttribute: \"string\",\n  intAttribute: 1,\n  forcedOptional: \"hello\",\n  onClick: handleClick\n});\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Mutable Record Fields\nDESCRIPTION: Demonstrates how to declare mutable fields in a record type and update them in-place using the assignment operator. Only fields marked as mutable can be modified directly.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/record.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\ntype person = {\n  name: string,\n  mutable age: int\n}\n\nlet baby = {name: \"Baby ReScript\", age: 5}\nbaby.age = baby.age + 1 // `baby.age` is now 6. Happy birthday!\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar baby = {\n  name: \"Baby ReScript\",\n  age: 5\n};\n\nbaby.age = baby.age + 1 | 0;\n```\n\n----------------------------------------\n\nTITLE: Constraining Polymorphic Variant Types in ReScript\nDESCRIPTION: Shows how to apply constraints to polymorphic variant types using closed, lower bound (open), and upper bound notation, providing different levels of type flexibility.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/polymorphic-variant.mdx#2025-04-18_snippet_11\n\nLANGUAGE: res\nCODE:\n```\n// Only #Red allowed. Closed.\nlet basic: [#Red] = #Red\n\n// May contain #Red, or any other value. Open\n// here, foreground will actually be inferred as [> #Red | #Green]\nlet foreground: [> #Red] = #Green\n\n// The value must be, at most, one of #Red or #Blue\n// Only #Red and #Blue are valid values\nlet background: [< #Red | #Blue] = #Red\n```\n\n----------------------------------------\n\nTITLE: Defining Mutually Recursive Types in ReScript\nDESCRIPTION: Demonstrates how to define mutually recursive types in ReScript using the 'and' keyword.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/type.mdx#2025-04-18_snippet_9\n\nLANGUAGE: ReScript\nCODE:\n```\ntype rec student = {taughtBy: teacher}\nand teacher = {students: array<student>}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Using Top-Level Wildcard as Catch-All Condition in ReScript\nDESCRIPTION: Shows how to use the underscore (_) as a top-level catch-all pattern in a switch statement, which matches any value not covered by other patterns.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_8\n\nLANGUAGE: res\nCODE:\n```\nswitch myStatus {\n| Vacations(_) => Console.log(\"Have fun!\")\n| _ => Console.log(\"Ok.\")\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nif (typeof myStatus !== \"object\" || myStatus.TAG !== \"Vacations\") {\n  console.log(\"Ok.\");\n} else {\n  console.log(\"Have fun!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Optional Record Fields in ReScript\nDESCRIPTION: Shows how to define optional fields in a record type using the ? suffix.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/record.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\ntype person = {\n  age: int,\n  name?: string\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Binding to Global JavaScript Values\nDESCRIPTION: Shows how to bind to global JavaScript functions using the @val external decorator.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/interop-cheatsheet.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\n@val external setTimeout: (unit => unit, int) => float = \"setTimeout\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Special Pattern Matching Syntax for Polymorphic Variants in ReScript\nDESCRIPTION: Demonstrates the special pattern matching syntax (#...) for matching on constructors defined in a specific polymorphic variant type, providing a more concise way to match multiple constructors.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/polymorphic-variant.mdx#2025-04-18_snippet_6\n\nLANGUAGE: res\nCODE:\n```\n// Continuing the previous example above...\n\nswitch myColor {\n| #...blue => Console.log(\"This blue-ish\")\n| #...red => Console.log(\"This red-ish\")\n| other => Console.log2(\"Other color than red and blue: \", other)\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar other = myColor;\n\nif (other === \"Neon\" || other === \"Navy\" || other === \"Sapphire\") {\n  console.log(\"This is blue-ish\");\n} else if (other === \"Rust\" || other === \"Ruby\" || other === \"Redwood\") {\n  console.log(\"This is red-ish\");\n} else {\n  console.log(\"Other color than red and blue: \", other);\n}\n```\n\n----------------------------------------\n\nTITLE: Catching Both ReScript and JS Exceptions\nDESCRIPTION: Demonstrates how to catch both ReScript-specific exceptions and JavaScript exceptions within the same try-catch block using pattern matching in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/exception.mdx#2025-04-18_snippet_6\n\nLANGUAGE: res\nCODE:\n```\ntry {\n  someOtherJSFunctionThatThrows()\n} catch {\n| Not_found => ... // catch a ReScript exception\n| Invalid_argument(_) => ... // catch a second ReScript exception\n| Exn.Error(obj) => ... // catch the JS exception\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Functor (Module Function) in ReScript\nDESCRIPTION: This snippet demonstrates the creation of a functor called MakeSet, which takes a Comparable module and returns a new set module. It includes the implementation of the Comparable module type and the MakeSet functor.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/module.mdx#2025-04-18_snippet_15\n\nLANGUAGE: res\nCODE:\n```\nmodule type Comparable = {\n  type t\n  let equal: (t, t) => bool\n}\n\nmodule MakeSet = (Item: Comparable) => {\n  // let's use a list as our naive backing data structure\n  type backingType = list<Item.t>\n  let empty = list{}\n  let add = (currentSet: backingType, newItem: Item.t): backingType =>\n    // if item exists\n    if List.exists(x => Item.equal(x, newItem), currentSet) {\n      currentSet // return the same (immutable) set (a list really)\n    } else {\n      list{\n        newItem,\n        ...currentSet // prepend to the set and return it\n      }\n    }\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar List = require(\"./stdlib/list.js\");\n\nfunction MakeSet(Item) {\n  var add = function(currentSet, newItem) {\n    if (\n      List.exists(function(x) {\n        return Item.equal(x, newItem);\n      }, currentSet)\n    ) {\n      return currentSet;\n    } else {\n      return {\n        hd: newItem,\n        tl: currentSet,\n      };\n    }\n  };\n  return {\n    empty: /* [] */ 0,\n    add: add,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Exception Handling in ReScript\nDESCRIPTION: Demonstrates a basic exception handling pattern using try/catch to provide a default value when an exception occurs. The example shows a function that either returns a value or raises Not_found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/exception.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nlet getItem = (item: int) =>\n  if (item === 3) {\n    // return the found item here\n    1\n  } else {\n    raise(Not_found)\n  }\n\nlet result =\n  try {\n    getItem(2)\n  } catch {\n  | Not_found => 0 // Default value if getItem throws\n  }\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar Caml_js_exceptions = require(\"./stdlib/caml_js_exceptions.js\");\n\nfunction getItem(item) {\n  if (item === 3) {\n    return 1;\n  }\n  throw {\n    RE_EXN_ID: \"Not_found\",\n    Error: new Error()\n  };\n}\n\nvar result;\n\ntry {\n  result = getItem(2);\n}\ncatch (raw_exn){\n  var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);\n  if (exn.RE_EXN_ID === \"Not_found\") {\n    result = 0;\n  } else {\n    throw exn;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Cleanup Function with Dependencies in ReScript React\nDESCRIPTION: Shows how to subscribe to friend status changes using React.useEffect with proper cleanup. The effect only re-runs when friendId changes, optimizing performance by preventing unnecessary subscriptions and unsubscriptions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/hooks-effect.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\n@react.component\nlet make = (~friendId: string) => {\n  let (state, setState) = React.useState(_ => Offline)\n  // from a previous example above\n  React.useEffect(() => {\n    let handleStatusChange = (status) => {\n      setState(_ => {\n        status.ChatAPI.isOnline ? Online : Offline\n      })\n    }\n\n    ChatAPI.subscribeToFriendStatus(friendId, handleStatusChange)\n    setState(_ => Loading)\n\n    let cleanup = () => {\n      ChatAPI.unsubscribeFromFriendStatus(friendId, handleStatusChange)\n    }\n\n    Some(cleanup)\n  }, [friendId]) // Only re-subscribe if friendId changes\n}\n```\n\n----------------------------------------\n\nTITLE: Component Naming Conventions in ReScript\nDESCRIPTION: Explains how components are named in React DevTools when using ReScript, showing naming patterns for different component definitions and module structures.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/components-and-props.mdx#2025-04-18_snippet_13\n\nLANGUAGE: res\nCODE:\n```\n// File.res\n\n// will be named `File` in dev tools\n@react.component\nlet make = ...\n\n// will be named `File$component` in dev tools\n@react.component\nlet component = ...\n\nmodule Nested = {\n  // will be named `File$Nested` in dev tools\n  @react.component\n  let make = ...\n};\n```\n\n----------------------------------------\n\nTITLE: Using Index Getters and Setters for Dynamic JS Object Properties\nDESCRIPTION: Shows how to use @get_index and @set_index attributes to access dynamic properties or array indices in JavaScript objects, illustrated with an Int32Array example.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/bind-to-js-object.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\ntype t\n@new external create: int => t = \"Int32Array\"\n@get_index external get: (t, int) => int = \"\"\n@set_index external set: (t, int, int) => unit = \"\"\n\nlet i32arr = create(3)\ni32arr->set(0, 42)\nJs.log(i32arr->get(0))\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar i32arr = new Int32Array(3);\ni32arr[0] = 42;\nconsole.log(i32arr[0]);\n```\n\n----------------------------------------\n\nTITLE: Comparing Async Functions and Await in JavaScript and ReScript\nDESCRIPTION: Demonstrates the syntax for async functions and await in both JavaScript and ReScript, including return type differences.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/overview.mdx#2025-04-18_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nasync function named(arg) {...}\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet named = async (arg) => {...}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nasync (arg): Promise<string> => {...}\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nasync (arg): string => {...}\n```\n\n----------------------------------------\n\nTITLE: Basic JS Function Binding in ReScript\nDESCRIPTION: Demonstrates how to import and bind a NodeJS function (path.dirname) using the @module annotation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/bind-to-js-function.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\n// Import nodejs' path.dirname\n@module(\"path\") external dirname: string => string = \"dirname\"\nlet root = dirname(\"/User/github\") // returns \"User\"\n```\n\nLANGUAGE: js\nCODE:\n```\nvar Path = require(\"path\");\nvar root = Path.dirname(\"/User/github\");\n```\n\n----------------------------------------\n\nTITLE: Binding to Variadic JS Functions\nDESCRIPTION: Shows how to bind to JavaScript functions that accept a variable number of arguments using the @variadic annotation, which transforms an array into multiple arguments.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/bind-to-js-function.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\n@module(\"path\") @variadic\nexternal join: array<string> => string = \"join\"\n\nlet v = join([\"a\", \"b\"])\n```\n\nLANGUAGE: js\nCODE:\n```\nvar Path = require(\"path\");\nvar v = Path.join(\"a\", \"b\");\n```\n\n----------------------------------------\n\nTITLE: Declaring Record Types in ReScript\nDESCRIPTION: Shows how to declare a record type with fixed fields. Records require mandatory type declarations that define their structure.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/record.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\ntype person = {\n  age: int,\n  name: string\n};\n```\n\nLANGUAGE: ml\nCODE:\n```\ntype person = {\n  age: int;\n  name: string;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Importing Variants from Another Module\nDESCRIPTION: Shows how to import and use a variant defined in another module. The example demonstrates two approaches: using a type annotation, or directly referencing the constructor with the module name.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/variant.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\n// Example.res\nlet pet: Zoo.animal = Dog // preferred\n// or\nlet pet2 = Zoo.Dog\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar pet = \"Dog\";\nvar pet2 = \"Dog\";\n```\n\n----------------------------------------\n\nTITLE: Creating Type-Safe setTimeout Bindings with Abstract Types\nDESCRIPTION: This improved example creates type-safe bindings for setTimeout and clearTimeout by using an abstract type 'timerId'. This ensures that only valid timer IDs created by setTimeout can be passed to clearTimeout.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/bind-to-global-js-values.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\ntype timerId\n@val external setTimeout: (unit => unit, int) => timerId = \"setTimeout\"\n@val external clearTimeout: timerId => unit = \"clearTimeout\"\n\nlet id = setTimeout(() => Console.log(\"hello\"), 100)\nclearTimeout(id)\n```\n\nLANGUAGE: js\nCODE:\n```\nvar id = setTimeout(function (param) {\n  console.log(\"hello\");\n}, 100);\n\nclearTimeout(id);\n```\n\n----------------------------------------\n\nTITLE: Using Uncurried Function Annotation with External Bindings in ReScript\nDESCRIPTION: Demonstrates how to use uncurried function annotation with external bindings to safely interface with JavaScript functions like setTimeout. This approach guarantees proper function application without intermediate currying steps.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/bind-to-js-function.mdx#2025-04-18_snippet_11\n\nLANGUAGE: rescript\nCODE:\n```\ntype timerId\n@val external setTimeout: ((. unit) => unit, int) => timerId = \"setTimeout\"\n\nlet id = setTimeout((.) => Js.log(\"hello\"), 1000)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar id = setTimeout(function () {\n  console.log(\"hello\");\n}, 1000);\n```\n\n----------------------------------------\n\nTITLE: Opening Modules in ReScript\nDESCRIPTION: Demonstrates the use of the 'open' keyword to bring a module's contents into the current scope, eliminating the need to prefix identifiers with the module name.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/module.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nopen School\nlet p = getProfession(person1)\n```\n\nLANGUAGE: js\nCODE:\n```\nvar p = School.getProfession(School.person1);\n```\n\n----------------------------------------\n\nTITLE: Array Spread Operations\nDESCRIPTION: Demonstrates array spread syntax in ReScript for combining arrays of the same type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/array-and-list.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet y = [1, 2]\nlet x = [4, 5, ...y]\nlet x2 = [4, 5, ...y, 7, ...y]\nlet x3 = [...y]\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar Belt_Array = require(\"rescript/lib/js/belt_Array.js\");\n\nvar y = [\n  1,\n  2\n];\n\nvar x = Belt_Array.concatMany([\n      [\n        4,\n        5\n      ],\n      y\n    ]);\n\nvar x2 = Belt_Array.concatMany([\n      [\n        4,\n        5\n      ],\n      y,\n      [7],\n      y\n    ]);\n\nvar x3 = Belt_Array.concatMany([y]);\n```\n\n----------------------------------------\n\nTITLE: Binding JS Method Chaining in ReScript\nDESCRIPTION: Demonstrates how to bind to JavaScript's chainable methods using ReScript's binding API and pipe operator.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/pipe.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\ntype request\n@val external asyncRequest: unit => request = \"asyncRequest\"\n@send external setWaitDuration: (request, int) => request = \"setWaitDuration\"\n@send external send: request => unit = \"send\"\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet result = Array.filter(\n  Array.map([1, 2, 3], a => a + 1),\n  a => mod(a, 2) == 0\n)\n\nsend(setWaitDuration(asyncRequest(), 4000))\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet result = [1, 2, 3]\n  ->Array.map(a => a + 1)\n  ->Array.filter(a => mod(a, 2) == 0)\n\nasyncRequest()->setWaitDuration(4000)->send\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = [1, 2, 3].map(function(a) {\n  return a + 1 | 0;\n}).filter(function(a) {\n  return a % 2 === 0;\n});\n\nasyncRequest().setWaitDuration(4000).send();\n```\n\n----------------------------------------\n\nTITLE: Importing a JavaScript Module as a Single Value in ReScript\nDESCRIPTION: Shows how to import an entire JavaScript module as a single value by omitting the string argument to @module. The example imports a leftPad function from a local module.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/import-from-export-to-js.mdx#2025-04-18_snippet_1\n\nLANGUAGE: ReScript\nCODE:\n```\n@module external leftPad: string => int => string = \"./leftPad\"\nlet paddedResult = leftPad(\"hi\", 5)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar LeftPad = require(\"./leftPad\");\nvar paddedResult = LeftPad(\"hi\", 5);\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as LeftPad from \"./leftPad\";\nvar paddedResult = LeftPad(\"hi\", 5);\n```\n\n----------------------------------------\n\nTITLE: Using @deriving(abstract) with Record Types in ReScript\nDESCRIPTION: This example demonstrates how to use the @deriving(abstract) decorator to convert a regular record type into an abstract type with generated factory function and getter methods. The decorator creates a constructor function and corresponding accessor methods for each field.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/decorator_deriving.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\n@deriving(abstract)\ntype person = {\n  name: string,\n  age: int,\n  job: string,\n}\n\nlet joe = person(~name=\"Joe\", ~age=20, ~job=\"teacher\")\n\nlet joeName = nameGet(joe)\nlet joeAge = ageGet(joe)\nlet joeJob = jobGet(joe)\n```\n\nLANGUAGE: js\nCODE:\n```\nvar joe = {\n  name: \"Joe\",\n  age: 20,\n  job: \"teacher\"\n};\n\nvar joeName = joe.name;\nvar joeAge = joe.age;\nvar joeJob = joe.job;\n```\n\n----------------------------------------\n\nTITLE: Standalone Function Type Signatures in ReScript\nDESCRIPTION: Shows how to define standalone type signatures for functions in ReScript, including for functions with labeled and optional arguments.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/function.mdx#2025-04-18_snippet_25\n\nLANGUAGE: res\nCODE:\n```\n// first arg type, second arg type, return type\ntype add = (int, int) => int\n\n// labeled\ntype add = (~first: int, ~second: int) => int\n\n// labeled\ntype add = (~first: int=?, ~second: int=?, unit) => int\n```\n\n----------------------------------------\n\nTITLE: Checking if Optional Fields are Set in Pattern Matching\nDESCRIPTION: Demonstrates checking whether an optional field is set or not using the question mark prefix in pattern matching. This allows distinguishing between fields that are set and those that aren't.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/record.mdx#2025-04-18_snippet_13\n\nLANGUAGE: rescript\nCODE:\n```\ntype person = {\n  age: int,\n  name?: string,\n}\n\nlet me = {\n  age: 123,\n  name: \"Hello\",\n}\n\nlet nameWasSet = switch me {\n| {name: ?None} => false\n| {name: ?Some(_)} => true\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar nameWasSet = true;\n\nvar me = {\n  age: 123,\n  name: \"Hello\"\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring ReScript React in bsconfig.json\nDESCRIPTION: Configuration settings required in bsconfig.json to enable React JSX v3 support and add ReScript React dependency.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/installation.mdx#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"reason\": { \"react-jsx\": 3 },\n  \"bs-dependencies\": [\"@rescript/react\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Promise.all2 Implementation\nDESCRIPTION: Combines two promises into a single promise that resolves with a tuple of results\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/promise.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet all2: ((t<'a0>, t<'a1>)) => t<('a0, 'a1)>\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching with Await in ReScript\nDESCRIPTION: Demonstrates how to use pattern matching with await calls in ReScript for more complex logic.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/async-await.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet fetchData = async () => {\n  switch (await fetchUserMail(\"user1\"), await fetchUserMail(\"user2\")) {\n  | (user1Mail, user2Mail) => {\n      Console.log(\"user 1 mail: \" ++ user1Mail)\n      Console.log(\"user 2 mail: \" ++ user2Mail)\n    }\n\n  | exception JsError(err) => Console.log2(\"Some error occurred\", err)\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nasync function fetchData(param) {\n  var val;\n  var val$1;\n  try {\n    val = await GlobalAPI.fetchUserMail(\"user1\");\n    val$1 = await GlobalAPI.fetchUserMail(\"user2\");\n  }\n  catch (raw_err){\n    var err = Caml_js_exceptions.internalToOCamlException(raw_err);\n    if (err.RE_EXN_ID === \"JsError\") {\n      console.log(\"Some error occurred\", err._1);\n      return ;\n    }\n    throw err;\n  }\n  console.log(\"user 1 mail: \" + val);\n  console.log(\"user 2 mail: \" + val$1);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Legacy Js.Promise Module in ReScript\nDESCRIPTION: Demonstrates the usage of the legacy Js.Promise module with the pipe operator. This example shows creating a promise and chaining operations using then and catch methods.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/promise.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\nlet myPromise = Js.Promise.make((~resolve, ~reject) => resolve(. 2))\n\nmyPromise->Js.Promise.then_(value => {\n  Console.log(value)\n  Js.Promise.resolve(value + 2)\n}, _)->Js.Promise.then_(value => {\n  Console.log(value)\n  Js.Promise.resolve(value + 3)\n}, _)->Js.Promise.catch(err => {\n  Console.log2(\"Failure!!\", err)\n  Js.Promise.resolve(-2)\n}, _)\n```\n\nLANGUAGE: js\nCODE:\n```\nvar myPromise = new Promise(function (resolve, reject) {\n  return resolve(2);\n});\n\nmyPromise\n  .then(function (value) {\n    console.log(value);\n    return Promise.resolve((value + 2) | 0);\n  })\n  .then(function (value) {\n    console.log(value);\n    return Promise.resolve((value + 3) | 0);\n  })\n  .catch(function (err) {\n    console.log(\"Failure!!\", err);\n    return Promise.resolve(-2);\n  });\n```\n\n----------------------------------------\n\nTITLE: Shuffling Array Elements In Place in ReScript\nDESCRIPTION: The shuffleInPlace function randomly reorders the items in an array, modifying the original array rather than creating a new one.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/array.mdx#2025-04-18_snippet_9\n\nLANGUAGE: ReScript\nCODE:\n```\nlet shuffleInPlace: array<'a> => unit\n```\n\n----------------------------------------\n\nTITLE: Using Components in JSX with ReScript and JS Output\nDESCRIPTION: Shows how to use a React component (Greeting) within another component (App) in ReScript, along with the corresponding JavaScript output after compilation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/components-and-props.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\n// src/App.res\n\n@react.component\nlet make = () => {\n  <div>\n    <Greeting/>\n  </div>\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar React = require(\"react\");\nvar Greeting = require(\"./Greeting.js\")\n\nfunction App(Props) {\n  return React.createElement(\"div\", undefined, React.createElement(Greeting.make, {}));\n}\n\nvar make = App;\n```\n\n----------------------------------------\n\nTITLE: Creating Promises in ReScript\nDESCRIPTION: Demonstrates three ways to create promises in ReScript: using Promise.make with resolve/reject callbacks, Promise.resolve for direct value wrapping, and Promise.reject for error handling.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/promise.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\nlet p1 = Promise.make((resolve, reject) => {\n  // We use uncurried functions for resolve / reject\n  // for cleaner JS output without unintended curry calls\n  resolve(\"hello world\")\n})\n\nlet p2 = Promise.resolve(\"some value\")\n\n// You can only reject `exn` values for streamlined catch handling\nexception MyOwnError(string)\nlet p3 = Promise.reject(MyOwnError(\"some rejection\"))\n```\n\n----------------------------------------\n\nTITLE: Complex Pattern Matching with Nested Data in ReScript\nDESCRIPTION: Shows an advanced pattern matching example that handles a complex person data structure with nested variants and records. Demonstrates pattern guards, nested pattern checks, and deep data extraction.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\nlet person1 = Teacher({name: \"Jane\", age: 35})\n\nlet message = switch person1 {\n| Teacher({name: \"Mary\" | \"Joe\"}) =>\n  `Hey, still going to the party on Saturday?`\n| Teacher({name}) =>\n  // this is matched only if `name` isn't \"Mary\" or \"Joe\"\n  `Hello ${name}.`\n| Student({name, reportCard: {passing: true, gpa}}) =>\n  `Congrats ${name}, nice GPA of ${Float.toString(gpa)} you got there!`\n| Student({\n    reportCard: {gpa: 0.0},\n    status: Vacations(daysLeft) | Sabbatical(daysLeft)\n  }) =>\n  `Come back in ${Int.toString(daysLeft)} days!`\n| Student({status: Sick}) =>\n  `How are you feeling?`\n| Student({name}) =>\n  `Good luck next semester ${name}!`\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar person1 = {\n  TAG: \"Teacher\",\n  name: \"Jane\",\n  age: 35\n};\n\nvar message;\n\nif (person1.TAG === \"Teacher\") {\n  message = \"Hello Jane.\";\n} else {\n  var match = \"Jane\";\n  var match$1 = match.status;\n  var name = match.name;\n  var match$2 = match.reportCard;\n  if (match$2.passing) {\n    message = \"Congrats \" + name + \", nice GPA of \" + match$2.gpa.toString() + \" you got there!\";\n  } else {\n    var exit = 0;\n    if (typeof match$1 !== \"object\") {\n      message = match$1 === \"Sick\" ? \"How are you feeling?\" : \"Good luck next semester \" + name + \"!\";\n    } else {\n      exit = 1;\n    }\n    if (exit === 1) {\n      message = match.reportCard.gpa !== 0.0 ? \"Good luck next semester \" + name + \"!\" : \"Come back in \" + match$1._0.toString() + \" days!\";\n    }\n    \n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Promise Creation\nDESCRIPTION: Constructor function for creating new promises with resolve and reject callbacks\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/promise.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet make: ((~resolve: (. 'a) => unit, ~reject: (. exn) => unit) => unit) => t<'a>\n```\n\n----------------------------------------\n\nTITLE: Advanced Typing in ReScript for JavaScript Conversion\nDESCRIPTION: This snippet demonstrates more advanced typing in ReScript, including type definitions and method bindings, for a cleaner and more type-safe conversion from JavaScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/converting-from-js.mdx#2025-04-18_snippet_4\n\nLANGUAGE: ReScript\nCODE:\n```\ntype school\ntype student\ntype payload = {\n  student: student\n}\n\n@module external school: school = \"school\"\n@send external getStudentById: (school, int) => student = \"getStudentById\"\n\nlet defaultId = 10\n\nlet queryResult = (usePayload, payload) => {\n  if usePayload {\n    payload.student\n  } else {\n    school->getStudentById(defaultId)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Option Type in ReScript\nDESCRIPTION: Demonstrates the definition of the Option type in ReScript, which represents the existence or nonexistence of a value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/null-undefined-option.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\ntype option<'a> = None | Some('a)\n```\n\n----------------------------------------\n\nTITLE: Module Implementation and Interface Files in ReScript\nDESCRIPTION: This example shows the relationship between a `.res` implementation file and its corresponding `.resi` interface file. The interface file defines the public API of the module.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/module.mdx#2025-04-18_snippet_6\n\nLANGUAGE: res\nCODE:\n```\n/* file React.res (implementation. Compiles to module React) */\ntype state = int\nlet render = (str) => str\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction render(str) {\n  return str;\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Library Interop with Variants\nDESCRIPTION: Example of binding JavaScript library functions that accept multiple types using variants, with both naive and optimized approaches using @unboxed.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/variant.mdx#2025-04-18_snippet_23\n\nLANGUAGE: rescript\nCODE:\n```\n// reserved for internal usage\n@module(\"myLibrary\") external draw : 'a => unit = \"draw\"\n\n@unboxed\ntype animal =\n  | MyFloat(float)\n  | MyString(string)\n\nlet betterDraw = (animal) =>\n  switch animal {\n  | MyFloat(f) => draw(f)\n  | MyString(s) => draw(s)\n  }\n\nbetterDraw(MyFloat(1.5))\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar MyLibrary = require(\"myLibrary\");\n\nfunction betterDraw(animal) {\n  MyLibrary.draw(animal);\n}\n\nMyLibrary.draw(1.5);\n```\n\n----------------------------------------\n\nTITLE: Promise Usage Example in ReScript (Reason Syntax)\nDESCRIPTION: Demonstrates how to create and chain promises in ReScript using the Reason syntax. It includes creating a promise, chaining then operations, and handling errors with catch.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/promise.mdx#2025-04-18_snippet_2\n\nLANGUAGE: re\nCODE:\n```\nlet myPromise = Js.Promise.make((~resolve, ~reject) => resolve(. 2));\n\nmyPromise\n|> Js.Promise.then_(value => {\n     Js.log(value);\n     Js.Promise.resolve(value + 2);\n   })\n|> Js.Promise.then_(value => {\n     Js.log(value);\n     Js.Promise.resolve(value + 3);\n   })\n|> Js.Promise.catch(err => {\n     Js.log2(\"Failure!!\", err);\n     Js.Promise.resolve(-2);\n   });\n```\n\n----------------------------------------\n\nTITLE: Binding to Polymorphic JavaScript Functions in ReScript\nDESCRIPTION: Shows how to bind to JavaScript functions with the same name but different signatures, and demonstrates using polymorphic variants for type-safe bindings.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/interop-cheatsheet.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\n@module(\"Drawing\") external drawCat: unit => unit = \"draw\"\n@module(\"Drawing\") external drawDog: (~giveName: string) => unit = \"draw\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Empty output\n```\n\nLANGUAGE: rescript\nCODE:\n```\n@val\nexternal padLeft: (\n  string,\n  @unwrap [\n    | #Str(string)\n    | #Int(int)\n  ])\n  => string = \"padLeft\"\n\npadLeft(\"Hello World\", #Int(4))\npadLeft(\"Hello World\", #Str(\"Message from ReScript: \"))\n```\n\nLANGUAGE: javascript\nCODE:\n```\npadLeft(\"Hello World\", 4);\npadLeft(\"Hello World\", \"Message from ReScript: \");\n```\n\n----------------------------------------\n\nTITLE: Constraining string arguments with polymorphic variants in ReScript\nDESCRIPTION: Shows how to use polymorphic variants with @string annotation to ensure that only valid string values are passed to JavaScript functions, improving type safety.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/bind-to-js-function.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\n@module(\"fs\")\nexternal readFileSync: (\n  ~name: string,\n  @string [\n    | #utf8\n    | @as(\"ascii\") #useAscii\n  ],\n) => string = \"readFileSync\"\n\nreadFileSync(~name=\"xx.txt\", #useAscii)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar Fs = require(\"fs\");\nFs.readFileSync(\"xx.txt\", \"ascii\");\n```\n\n----------------------------------------\n\nTITLE: Type Annotations for Labeled Arguments in ReScript\nDESCRIPTION: Demonstrates how to add type annotations to labeled arguments. This provides type safety and helps with documentation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/function.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\nlet drawCircle = (~radius as r: int, ~color as c: string) => {\n  // code here\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction drawCircle(r, c) {\n  // code here\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Parametrized Types in ReScript\nDESCRIPTION: Shows how to define a parametrized (generic) type in ReScript. The example defines a university student type and a response type that can work with different student types via type parameters.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/newcomer-examples.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\ntype universityStudent = {gpa: float}\n\ntype response<'studentType> = {\n  status: int,\n  student: 'studentType,\n}\n```\n\nLANGUAGE: js\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Creating a Chat Recipient Picker with Custom Hook in ReScript\nDESCRIPTION: A React component that allows users to select a friend from a dropdown list and displays their online status with a colored circle. It demonstrates how to pass information between hooks by using the recipientId state with the useFriendStatus hook.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/hooks-custom.mdx#2025-04-18_snippet_5\n\nLANGUAGE: ReScript\nCODE:\n```\ntype friend = {id: string, name: string}\n\nlet friendList = [\n  {id: \"1\", name: \"Phoebe\"},\n  {id: \"2\", name: \"Rachel\"},\n  {id: \"3\", name: \"Ross\"},\n]\n\n@react.component\nlet make = () => {\n  let (recipientId, setRecipientId) = React.useState(_ => \"1\")\n  let recipientOnlineState = FriendStatusHook.useFriendStatus(recipientId)\n\n  let color = switch recipientOnlineState {\n  | FriendStatusHook.Offline => Circle.Red\n  | Online => Green\n  | Loading => Grey\n  }\n\n  let onChange = evt => {\n    let value = ReactEvent.Form.target(evt)[\"value\"]\n    setRecipientId(value)\n  }\n\n  let friends = Belt.Array.map(friendList, friend => {\n    <option key={friend.id} value={friend.id}>\n      {React.string(friend.name)}\n    </option>\n  })\n\n  <>\n    <Circle color />\n    <select value={recipientId} onChange>\n      {React.array(friends)}\n    </select>\n  </>\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar friendList = [\n  {\n    id: \"1\",\n    name: \"Phoebe\"\n  },\n  {\n    id: \"2\",\n    name: \"Rachel\"\n  },\n  {\n    id: \"3\",\n    name: \"Ross\"\n  }\n];\n\nfunction Playground(Props) {\n  var match = React.useState(function () {\n        return \"1\";\n      });\n  var setRecipientId = match[1];\n  var recipientId = match[0];\n  var recipientOnlineState = useFriendStatus(recipientId);\n  var color;\n  switch (recipientOnlineState) {\n    case /* Offline */0 :\n        color = /* Red */0;\n        break;\n    case /* Loading */1 :\n        color = /* Grey */2;\n        break;\n    case /* Online */2 :\n        color = /* Green */1;\n        break;\n\n  }\n  var onChange = function (evt) {\n    return Curry._1(setRecipientId, evt.target.value);\n  };\n  var friends = Belt_Array.map(friendList, (function (friend) {\n          return React.createElement(\"option\", {\n                      key: friend.id,\n                      value: friend.id\n                    }, friend.name);\n        }));\n  return React.createElement(React.Fragment, undefined, React.createElement(Playground$Circle, {\n                  color: color\n                }), React.createElement(\"select\", {\n                  value: recipientId,\n                  onChange: onChange\n                }, friends));\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Modules with Include in ReScript\nDESCRIPTION: Demonstrates how to use 'include' to extend modules by statically copying the content of one module into another. This allows for module composition and overriding specific values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/module.mdx#2025-04-18_snippet_8\n\nLANGUAGE: res\nCODE:\n```\nmodule BaseComponent = {\n  let defaultGreeting = \"Hello\"\n  let getAudience = (~excited) => excited ? \"world!\" : \"world\"\n}\n\nmodule ActualComponent = {\n  /* the content is copied over */\n  include BaseComponent\n  /* overrides BaseComponent.defaultGreeting */\n  let defaultGreeting = \"Hey\"\n  let render = () => defaultGreeting ++ \" \" ++ getAudience(~excited=true)\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction getAudience(excited) {\n  if (excited) {\n    return \"world!\";\n  } else {\n    return \"world\";\n  }\n}\n\nvar BaseComponent = {\n  defaultGreeting: \"Hello\",\n  getAudience: getAudience\n};\n\nvar defaultGreeting = \"Hey\";\n\nfunction render(param) {\n  return \"Hey world!\";\n}\n\nvar ActualComponent = {\n  getAudience: getAudience,\n  defaultGreeting: defaultGreeting,\n  render: render\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering ReScript List Values to React Elements\nDESCRIPTION: Shows how to render a ReScript list of todo items by first converting it to an array with Belt.List.toArray, then mapping to React elements with appropriate keys.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/arrays-and-keys.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\ntype todo = {id: string, text: string}\n\n@react.component\nlet make = () => {\n  let todoList = list{\n    {id: \"todo1\", text: \"Todo 1\"},\n    {id: \"todo2\", text: \"Todo 2\"},\n  }\n\n  let items =\n    todoList\n    ->Belt.List.toArray\n    ->Belt.Array.map(todo => {\n      <li key={todo.id}> {React.string(todo.text)} </li>\n    })\n\n  <div> {React.array(items)} </div>\n}\n\n```\n\n----------------------------------------\n\nTITLE: Limitations of Normal Polymorphic Types in ReScript\nDESCRIPTION: Example demonstrating the limitations of normal polymorphic types when trying to use them with different data types.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/scoped-polymorphic-types.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nlet myLogger = getLogger()\n\nmyLogger.log(\"Hello, ReScript!\")\nmyLogger.log(42) // Type error!\n```\n\n----------------------------------------\n\nTITLE: Importing a JavaScript Module's Named Export in ReScript\nDESCRIPTION: Demonstrates how to import a named export from a JavaScript module using the @module external syntax. This example shows importing the dirname function from Node.js path module.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/import-from-export-to-js.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\n// Import nodejs' path.dirname\n@module(\"path\") external dirname: string => string = \"dirname\"\nlet root = dirname(\"/User/github\") // returns \"User\"\n```\n\nLANGUAGE: JavaScript (Module)\nCODE:\n```\nimport * as Path from \"path\";\nvar root = Path.dirname(\"/User/github\");\n```\n\nLANGUAGE: JavaScript (CommonJS)\nCODE:\n```\nvar Path = require(\"path\");\nvar root = Path.dirname(\"/User/github\");\n```\n\n----------------------------------------\n\nTITLE: Basic Let Binding in ReScript\nDESCRIPTION: Demonstrates basic let binding syntax for declaring variables and performing calculations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/let-binding.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\nlet greeting = \"hello!\"\nlet score = 10\nlet newScore = 10 + score\n```\n\nLANGUAGE: js\nCODE:\n```\nvar greeting = \"hello!\";\nvar score = 10;\nvar newScore = 20;\n```\n\n----------------------------------------\n\nTITLE: Using Pipe with Multiple Arguments in ReScript\nDESCRIPTION: Demonstrates how the pipe operator works with functions that take multiple arguments. The piped value becomes the first argument, while additional arguments are provided in parentheses.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/pipe.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\na(one, two, three)\n```\n\nLANGUAGE: js\nCODE:\n```\na(one, two, three);\n```\n\n----------------------------------------\n\nTITLE: Optional Arguments with Default Values in ReScript\nDESCRIPTION: Shows how to provide default values for optional arguments. When a default value is specified, the argument isn't wrapped in an option type inside the function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/function.mdx#2025-04-18_snippet_13\n\nLANGUAGE: rescript\nCODE:\n```\nlet drawCircle = (~radius=1, ~color, ()) => {\n  setColor(color)\n  startAt(radius, radius)\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction drawCircle(radiusOpt, color, param) {\n  var radius = radiusOpt !== undefined ? radiusOpt : 1;\n  setColor(color);\n  return startAt(radius, radius);\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Multiple Values with Tuples\nDESCRIPTION: Shows how tuples can be used to return multiple values from a function without needing to define a custom type or record.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/tuple.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nlet getCenterCoordinates = () => {\n  let x = doSomeOperationsHere()\n  let y = doSomeMoreOperationsHere()\n  (x, y)\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction getCenterCoordinates(param) {\n  var x = doSomeOperationsHere(undefined);\n  var y = doSomeMoreOperationsHere(undefined);\n  return [x, y];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating DOM Elements in ReScript React\nDESCRIPTION: Shows how to create DOM elements using ReactDOM.createDOMElementVariadic in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/elements-and-jsx.mdx#2025-04-18_snippet_8\n\nLANGUAGE: ReScript\nCODE:\n```\nReactDOM.createDOMElementVariadic(\"div\", ~props={className: \"card\"}, [])\n```\n\n----------------------------------------\n\nTITLE: Using Callback Refs with useRef in ReScript\nDESCRIPTION: Example of implementing a callback ref pattern with useRef. The component creates a text input that can be focused programmatically using a callback function to set the ref.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/hooks-ref.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\n// CustomTextInput.res\n\n@send external focus: Dom.element => unit = \"focus\"\n\n@react.component\nlet make = () => {\n  let textInput = React.useRef(Nullable.null)\n  let setTextInputRef = element => {\n    textInput.current = element;\n  }\n\n  let focusTextInput = _ => {\n    textInput.current->Nullable.forEach(input => input->focus)\n  }\n\n  <div>\n    <input type_=\"text\" ref={ReactDOM.Ref.callbackDomRef(setTextInputRef)} />\n    <input\n      type_=\"button\" value=\"Focus the text input\" onClick={focusTextInput}\n    />\n  </div>\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction CustomTextInput(Props) {\n  var textInput = React.useRef(null);\n  var setTextInputRef = function (element) {\n    textInput.current = element;\n  };\n  var focusTextInput = function (param) {\n    Core__Nullable.forEach(textInput.current, (function (input) {\n            input.focus();\n          }));\n  };\n  return React.createElement(\"div\", undefined, React.createElement(\"input\", {\n                  ref: Caml_option.some(setTextInputRef),\n                  type: \"text\"\n                }), React.createElement(\"input\", {\n                  type: \"button\",\n                  value: \"Focus the text input\",\n                  onClick: focusTextInput\n                }));\n}\n```\n\n----------------------------------------\n\nTITLE: Binding to Module Class Constructor\nDESCRIPTION: Demonstrates how to bind to a JavaScript module that is itself a class using both @new and @module attributes.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/bind-to-js-object.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\ntype t\n@new @module external book: unit => t = \"Book\"\nlet myBook = book()\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar Book = require(\"Book\");\nvar myBook = new Book();\n```\n\n----------------------------------------\n\nTITLE: Transforming and Chaining Promises in ReScript\nDESCRIPTION: Shows how to access and transform promise contents using Promise.then, including proper handling of promise chains and values with explicit resolve calls.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/promise.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nlet logAsyncMessage = () => {\n  open Promise\n  Promise.resolve(\"hello world\")\n  ->then(msg => {\n    // then callbacks require the result to be resolved explicitly\n    resolve(\"Message: \" ++ msg)\n  })\n  ->then(msg => {\n    Console.log(msg)\n\n    // Even if there is no result, we need to use resolve() to return a promise\n    resolve()\n  })\n  ->ignore // Requires ignoring due to unhandled return value\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Result Type for HTTP Query in ReScript\nDESCRIPTION: Demonstrates how to create a custom Result type for an HTTP-like query operation, defining possible error states and a function that returns an error result.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/result.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\ntype responseError = NotAvailable | NotFound;\ntype queryResult = Belt.Result.t(string, responseError);\n\nlet failQueryUser = (username: string): queryResult => {\n  Error(NotAvailable)\n};\n```\n\n----------------------------------------\n\nTITLE: Binding to JS Class Objects with new\nDESCRIPTION: Demonstrates how to use the @new attribute to bind to JavaScript class objects, emulating the 'new' keyword in JavaScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/bind-to-js-object.mdx#2025-04-18_snippet_6\n\nLANGUAGE: ReScript\nCODE:\n```\ntype t\n@new external createDate: unit => t = \"Date\"\n\nlet date = createDate()\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar date = new Date();\n```\n\n----------------------------------------\n\nTITLE: Defining Variant Types Across Files in ReScript\nDESCRIPTION: Shows how to define a variant type in one file (Zoo.res) to be used in another file, demonstrating module scoping for variants.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/variant.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\n// Zoo.res\ntype animal = Dog | Cat | Bird\n```\n\nLANGUAGE: js\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Using Components in JSX in ReScript React\nDESCRIPTION: Demonstrates how to use a custom component within another component using JSX. The App component renders the Greeting component within its JSX structure, showing component composition in ReScript React.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/components-and-props.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\n// src/App.res\n\n@react.component\nlet make = () => {\n  <div>\n    <Greeting/>\n  </div>\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar React = require(\"react\");\nvar Greeting = require(\"./Greeting.js\")\n\nfunction App(Props) {\n  return React.createElement(\"div\", undefined, React.createElement(Greeting.make, {}));\n}\n\nvar make = App;\n```\n\n----------------------------------------\n\nTITLE: Theme Container Component with State Management\nDESCRIPTION: Complex example showing state management between parent and child components using useState for theme toggling.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/hooks-state.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\n// ThemeContainer.res\nmodule ControlPanel = {\n  @react.component\n  let make = (~setDarkmode, ~darkmode) => {\n    let onClick = evt => {\n      ReactEvent.Mouse.preventDefault(evt)\n      setDarkmode(prev => !prev)\n    }\n\n    let toggleText = \"Switch to \" ++ ((darkmode ? \"light\" : \"dark\") ++ \" theme\")\n\n    <div> <button onClick> {React.string(toggleText)} </button> </div>\n  }\n}\n\n@react.component\nlet make = (~content) => {\n  let (darkmode, setDarkmode) = React.useState(_ => false)\n\n  let className = darkmode ? \"theme-dark\" : \"theme-light\"\n\n  <div className>\n    <section>\n      <h1> {React.string(\"More Infos about ReScript\")} </h1> content\n    </section>\n    <ControlPanel darkmode setDarkmode />\n  </div>\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction ControlPanel(Props) {\n  var setDarkmode = Props.setDarkmode;\n  var darkmode = Props.darkmode;\n  var onClick = function (evt) {\n    evt.preventDefault();\n    return Curry._1(setDarkmode, (function (prev) {\n                  return !prev;\n                }));\n  };\n  var toggleText = \"Switch to \" + ((\n      darkmode ? \"light\" : \"dark\"\n    ) + \" theme\");\n  return React.createElement(\"div\", undefined, React.createElement(\"button\", {\n                  onClick: onClick\n                }, toggleText));\n}\n\nfunction ThemeContainer(Props) {\n  var content = Props.content;\n  var match = React.useState(function () {\n        return false;\n      });\n  var darkmode = match[0];\n  var className = darkmode ? \"theme-dark\" : \"theme-light\";\n  return React.createElement(\"div\", {\n              className: className\n            }, React.createElement(\"section\", undefined, React.createElement(\"h1\", undefined, \"More Infos about ReScript\"), content), React.createElement(Playground$ControlPanel, {\n                  setDarkmode: match[1],\n                  darkmode: darkmode\n                }));\n}\n```\n\n----------------------------------------\n\nTITLE: Using Submodule Components with Module Aliases\nDESCRIPTION: Demonstrates how to use submodule components either directly with the fully qualified name or by creating a module alias for shorter syntax.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/components-and-props.mdx#2025-04-18_snippet_11\n\nLANGUAGE: rescript\nCODE:\n```\nmodule Label = Button.Label\n\nlet content = <Label title=\"Test\"/>\n```\n\n----------------------------------------\n\nTITLE: Basic useReducer Hook Usage in ReScript\nDESCRIPTION: Basic syntax for using the useReducer hook in ReScript React. It returns a tuple containing the current state and a dispatch function for actions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/hooks-reducer.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\nlet (state, dispatch) = React.useReducer(reducer, initialState)\n```\n\nLANGUAGE: js\nCODE:\n```\nvar match = React.useReducer(reducer, initialState);\n```\n\n----------------------------------------\n\nTITLE: Recursive Types in ReScript\nDESCRIPTION: Demonstrates how to define self-referential types using the 'rec' keyword, allowing types to contain instances of themselves.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/type.mdx#2025-04-18_snippet_9\n\nLANGUAGE: res\nCODE:\n```\ntype rec person = {\n  name: string,\n  friends: array<person>\n}\n```\n\nLANGUAGE: js\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Extracting Variables in ReScript\nDESCRIPTION: This snippet shows how to extract a JavaScript variable into a ReScript let-binding, demonstrating the gradual conversion process.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/converting-from-js.mdx#2025-04-18_snippet_1\n\nLANGUAGE: ReScript\nCODE:\n```\nlet defaultId = 10\n\n%%raw(`\nconst school = require('school');\n\nfunction queryResult(usePayload, payload) {\n  if (usePayload) {\n    return payload.student;\n  } else {\n    return school.getStudentById(defaultId);\n  }\n}\n`)\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching on Multiple Await Calls\nDESCRIPTION: Demonstrates how to use switch pattern matching with multiple await calls, including error handling in a single switch statement.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/async-await.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rescript\nCODE:\n```\n@val external fetchUserMail: string => promise<string> = \"GlobalAPI.fetchUserMail\"\n\nlet fetchData = async () => {\n  switch (await fetchUserMail(\"user1\"), await fetchUserMail(\"user2\")) {\n  | (user1Mail, user2Mail) => {\n      Js.log(\"user 1 mail: \" ++ user1Mail)\n      Js.log(\"user 2 mail: \" ++ user2Mail)\n    }\n\n  | exception JsError(err) => Js.log2(\"Some error occurred\", err)\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nasync function fetchData(param) {\n  var val;\n  var val$1;\n  try {\n    val = await GlobalAPI.fetchUserMail(\"user1\");\n    val$1 = await GlobalAPI.fetchUserMail(\"user2\");\n  }\n  catch (raw_err){\n    var err = Caml_js_exceptions.internalToOCamlException(raw_err);\n    if (err.RE_EXN_ID === \"JsError\") {\n      console.log(\"Some error occurred\", err._1);\n      return ;\n    }\n    throw err;\n  }\n  console.log(\"user 1 mail: \" + val);\n  console.log(\"user 2 mail: \" + val$1);\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Object/Record Syntax in ReScript and JavaScript\nDESCRIPTION: Illustrates the differences in object/record syntax between ReScript and JavaScript, including type definitions and immutability.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/overview.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ReScript\nCODE:\n```\ntype point = {x: int, mutable y: int}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n{x: 30, y: 20}\n```\n\nLANGUAGE: ReScript\nCODE:\n```\n{x: 30, y: 20}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n{...point, x: 30}\n```\n\nLANGUAGE: ReScript\nCODE:\n```\n{...point, x: 30}\n```\n\n----------------------------------------\n\nTITLE: Basic Async/Await Usage in ReScript\nDESCRIPTION: Demonstrates basic async/await syntax with Promise handling and string interpolation\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/async-await.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet logUserDetails = async (userId: string) => {\n  let email = await fetchUserMail(userId)\n\n  await sendAnalytics(`User details have been logged for ${userId}`)\n\n  Console.log(`Email address for user ${userId}: ${email}`)\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nasync function logUserDetails(userId) {\n  var email = await GlobalAPI.fetchUserMail(userId);\n  await GlobalAPI.sendAnalytics(\"User details have been logged for \" + userId + \"\");\n  console.log(\"Email address for user \" + userId + \": \" + email + \"\");\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Record Types in ReScript\nDESCRIPTION: Basic record type declaration showing the required type definition with fixed fields.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/record.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype person = {\n  age: int,\n  name: string,\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Switch Pattern Matching on Variants in ReScript\nDESCRIPTION: Demonstrates pattern matching on a variant using switch, executing different code based on the shape of the data while extracting values from the variants.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\ntype payload =\n  | BadResult(int)\n  | GoodResult(string)\n  | NoResult\n```\n\nLANGUAGE: js\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON into Typed Data in ReScript\nDESCRIPTION: Demonstrates how to bind to JavaScript's JSON.parse function with a type annotation to safely parse JSON strings into typed ReScript data structures. This approach uses external binding to create a typed parser function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/json.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\n// declare the shape of the json you're binding to\ntype data = {names: array<string>}\n\n// bind to JS' JSON.parse\n@scope(\"JSON\") @val\nexternal parseIntoMyData: string => data = \"parse\"\n\nlet result = parseIntoMyData(`{\"names\": [\"Luke\", \"Christine\"]}`)\nlet name1 = result.names[0]\n```\n\nLANGUAGE: js\nCODE:\n```\nvar result = JSON.parse(\"{\\\"names\\\": [\\\"Luke\\\", \\\"Christine\\\"]}\");\nvar name1 = result.names[0];\n```\n\n----------------------------------------\n\nTITLE: Math Function Signatures and Examples\nDESCRIPTION: Collection of ReScript type signatures and usage examples for mathematical operations from JavaScript's Math object. Each function is documented with its type signature and example usage where applicable.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/math.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\nlet fround: float => float\n\nJs.Math.fround(5.5) == 5.5\nJs.Math.fround(5.05) == 5.050000190734863\n```\n\nLANGUAGE: res\nCODE:\n```\nlet hypot: (float, float) => float\n```\n\nLANGUAGE: res\nCODE:\n```\nlet hypotMany: array<float> => float\n\nJs.Math.hypotMany([3.0, 4.0, 12.0]) == 13.0\n```\n\nLANGUAGE: res\nCODE:\n```\nlet imul: (int, int) => int\n```\n\nLANGUAGE: res\nCODE:\n```\nlet log: float => float\n\nJs.Math.log(Js.Math._E) == 1.0\nJs.Math.log(100.0) == 4.605170185988092\n```\n\nLANGUAGE: res\nCODE:\n```\nlet log1p: float => float\n\nJs.Math.log1p(Js.Math._E -. 1.0) == 1.0\nJs.Math.log1p(99.0) == 4.605170185988092\n```\n\nLANGUAGE: res\nCODE:\n```\nlet log10: float => float\n\nJs.Math.log10(1000.0) == 3.0\nJs.Math.log10(0.01) == -2.0\nJs.Math.log10(Js.Math.sqrt(10.0)) == 0.5\n```\n\nLANGUAGE: res\nCODE:\n```\nlet log2: float => float\n\nJs.Math.log2(512.0) == 9.0\nJs.Math.log2(0.125) == -3.0\nJs.Math.log2(Js.Math._SQRT2) == 0.5000000000000001\n```\n\nLANGUAGE: res\nCODE:\n```\nlet max_int: (int, int) => int\n```\n\nLANGUAGE: res\nCODE:\n```\nlet maxMany_int: array<int> => int\n```\n\nLANGUAGE: res\nCODE:\n```\nlet max_float: (float, float) => float\n```\n\nLANGUAGE: res\nCODE:\n```\nlet maxMany_float: array<float> => float\n```\n\nLANGUAGE: res\nCODE:\n```\nlet min_int: (int, int) => int\n```\n\nLANGUAGE: res\nCODE:\n```\nlet minMany_int: array<int> => int\n```\n\nLANGUAGE: res\nCODE:\n```\nlet min_float: (float, float) => float\n```\n\nLANGUAGE: res\nCODE:\n```\nlet minMany_float: array<float> => float\n```\n\nLANGUAGE: res\nCODE:\n```\nlet pow_int: (~base: int, ~exp: int) => int\n\nJs.Math.pow_int(~base=3, ~exp=4) == 81\n```\n\nLANGUAGE: res\nCODE:\n```\nlet pow_float: (~base: float, ~exp: float) => float\n\nJs.Math.pow_float(~base=3.0, ~exp=4.0) == 81.0\nJs.Math.pow_float(~base=4.0, ~exp=-2.0) == 0.0625\nJs.Math.pow_float(~base=625.0, ~exp=0.5) == 25.0\nJs.Math.pow_float(~base=625.0, ~exp=-0.5) == 0.04\nJs.Float.isNaN(Js.Math.pow_float(~base=-2.0, ~exp=0.5)) == true\n```\n\nLANGUAGE: res\nCODE:\n```\nlet random: unit => float\n```\n\nLANGUAGE: res\nCODE:\n```\nlet random_int: (int, int) => int\n```\n\nLANGUAGE: res\nCODE:\n```\nlet unsafe_round: float => int\n\nJs.Math.unsafe_round(3.7) == 4\nJs.Math.unsafe_round(-3.5) == -3\nJs.Math.unsafe_round(2_150_000_000_000.3)\n```\n\nLANGUAGE: res\nCODE:\n```\nlet round: float => float\n```\n\nLANGUAGE: res\nCODE:\n```\nlet sign_int: int => int\n```\n\nLANGUAGE: res\nCODE:\n```\nlet sign_float: float => float\n```\n\nLANGUAGE: res\nCODE:\n```\nlet sin: float => float\n```\n\nLANGUAGE: res\nCODE:\n```\nlet sinh: float => float\n```\n\nLANGUAGE: res\nCODE:\n```\nlet sqrt: float => float\n```\n\nLANGUAGE: res\nCODE:\n```\nlet tan: float => float\n```\n\nLANGUAGE: res\nCODE:\n```\nlet tanh: float => float\n```\n\nLANGUAGE: res\nCODE:\n```\nlet unsafe_trunc: float => int\n```\n\nLANGUAGE: res\nCODE:\n```\nlet trunc: float => float\n```\n\n----------------------------------------\n\nTITLE: Prop Punning in ReScript JSX\nDESCRIPTION: Demonstrates prop punning, where a shorthand syntax can be used when a prop name and its value variable have the same name.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/jsx.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\n<MyComponent isLoading text onClick />\n```\n\nLANGUAGE: javascript\nCODE:\n```\nReact.createElement(MyComponent, {\n  isLoading: true,\n  text: text,\n  onClick: onClick\n});\n```\n\n----------------------------------------\n\nTITLE: Closed Polymorphic Variant Types in ReScript\nDESCRIPTION: Shows the simplest and most practical form of polymorphic variant definition, using the closed form to define an exact set of constructors.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/polymorphic-variant.mdx#2025-04-18_snippet_12\n\nLANGUAGE: ReScript\nCODE:\n```\ntype rgb = [ #Red | #Green | #Blue ]\n\nlet color: rgb = #Green\n```\n\n----------------------------------------\n\nTITLE: Comparing Variable Declaration in ReScript and JavaScript\nDESCRIPTION: Demonstrates the differences in variable declaration between ReScript and JavaScript, including the absence of 'var' in ReScript and the use of 'ref' for mutable variables.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/overview.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\nlet x = 5\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet x = ref(5); x := x.contents + 1\n```\n\n----------------------------------------\n\nTITLE: Lazy Initialization with useReducerWithMapState in ReScript\nDESCRIPTION: Shows how to use useReducerWithMapState for lazy initialization of state. This approach allows extracting the logic for calculating initial state outside the reducer and enables resetting state in response to actions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/hooks-reducer.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\nlet (state, dispatch) =\n  React.useReducerWithMapState(reducer, initialState, initial)\n```\n\nLANGUAGE: js\nCODE:\n```\nvar match = React.useReducer(reducer, initialState, init);\n```\n\n----------------------------------------\n\nTITLE: Handling Nested Option Types in ReScript\nDESCRIPTION: Demonstrates the compilation of nested Option types and the use of Caml_option for proper JavaScript interop.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/null-undefined-option.mdx#2025-04-18_snippet_4\n\nLANGUAGE: ReScript\nCODE:\n```\nlet x = Some(None)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar Caml_option = require(\"./stdlib/caml_option.js\");\n\nvar x = Caml_option.some(undefined);\n```\n\n----------------------------------------\n\nTITLE: Polymorphic Function Binding in ReScript\nDESCRIPTION: Demonstrates binding to polymorphic JavaScript functions with different signatures.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/interop-cheatsheet.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\n@module(\"Drawing\") external drawCat: unit => unit = \"draw\"\n@module(\"Drawing\") external drawDog: (~giveName: string) => unit = \"draw\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Empty output\n```\n\nLANGUAGE: rescript\nCODE:\n```\n@val\nexternal padLeft: (\n  string,\n  @unwrap [\n    | #Str(string)\n    | #Int(int)\n  ])\n  => string = \"padLeft\"\n\npadLeft(\"Hello World\", #Int(4))\npadLeft(\"Hello World\", #Str(\"Message from ReScript: \"))\n```\n\nLANGUAGE: javascript\nCODE:\n```\npadLeft(\"Hello World\", 4);\npadLeft(\"Hello World\", \"Message from ReScript: \");\n```\n\n----------------------------------------\n\nTITLE: Ignore Pattern Matching in ReScript\nDESCRIPTION: Demonstrates using the _ wildcard to ignore parts of a value during pattern matching.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\nswitch person1 {\n| Teacher(_) => Js.log(\"Hi teacher\")\n| Student(_) => Js.log(\"Hey student\")\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nif (person1.TAG) {\n  console.log(\"Hey student\");\n} else {\n  console.log(\"Hi teacher\");\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Expression-Level JavaScript in ReScript using %raw\nDESCRIPTION: Shows how to embed JavaScript at the expression level using %raw, allowing JavaScript functions to be assigned to ReScript variables and called from ReScript code.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/embed-raw-javascript.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\nlet add = %raw(`\n  function(a, b) {\n    console.log(\"hello from raw JavaScript!\");\n    return a + b\n  }\n`)\n\nConsole.log(add(1, 2))\n```\n\nLANGUAGE: js\nCODE:\n```\nvar add = function(a, b) {\n  console.log(\"hello from raw JavaScript!\");\n  return a + b\n};\n\nconsole.log(add(1, 2));\n```\n\n----------------------------------------\n\nTITLE: Working with Strings in ReScript\nDESCRIPTION: Demonstrates string declaration, multiline strings, and string concatenation in ReScript with corresponding JavaScript output.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/primitive-types.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\nlet greeting = \"Hello world!\"\nlet multilineGreeting = \"Hello\n world!\"\n```\n\nLANGUAGE: js\nCODE:\n```\nvar greeting = \"Hello world!\";\nvar multilineGreeting = \"Hello\\n world!\";\n```\n\n----------------------------------------\n\nTITLE: Basic Router Implementation in a ReScript React Component\nDESCRIPTION: Shows a simple router implementation using pattern matching to render different components based on URL paths. This example demonstrates the core pattern for route handling in ReScript applications.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/router.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\n// App.res\n@react.component\nlet make = () => {\n  let url = RescriptReactRouter.useUrl()\n  \n  switch url.path {\n    | list{\"user\", id} => <User id />\n    | list{} => <Home/>\n    | _ => <PageNotFound/>\n  }\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from \"react\";\nimport * as User from \"./User.bs.js\";\nimport * as RescriptReactRouter from \"@rescript/react/src/RescriptReactRouter.bs.js\";\nimport * as Home from \"./Home.bs.js\";\nimport * as NotFound from \"./NotFound.bs.js\";\n\nfunction App(Props) {\n  var url = RescriptReactRouter.useUrl(undefined, undefined);\n  var match = url.path;\n  if (!match) {\n    return React.createElement(Home.make, {});\n  }\n  if (match.hd === \"user\") {\n    var match$1 = match.tl;\n    if (match$1 && !match$1.tl) {\n      return React.createElement(User.make, {\n                  id: match$1.hd\n                });\n    }\n    \n  }\n  return React.createElement(NotFound.make, {});\n}\n\nvar make = App;\n\nexport {\n  make ,\n  \n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Destructuring Syntax in ReScript and JavaScript\nDESCRIPTION: Demonstrates object and array destructuring in ReScript and JavaScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/overview.mdx#2025-04-18_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {a, b} = data\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet {a, b} = data\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst [a, b] = data\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet [a, b] = data\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {a: aa, b: bb} = data\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet {a: aa, b: bb} = data\n```\n\n----------------------------------------\n\nTITLE: Importing and Instantiating JavaScript Module Classes\nDESCRIPTION: Shows how to combine @new and @module to import and instantiate JavaScript modules that are themselves classes. This is useful for working with class-based JavaScript libraries.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/bind-to-js-object.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\ntype t\n@new @module external book: unit => t = \"Book\"\nlet myBook = book()\n```\n\nLANGUAGE: js\nCODE:\n```\nvar Book = require(\"Book\");\nvar myBook = new Book();\n```\n\n----------------------------------------\n\nTITLE: Forwarding Refs via Props in ReScript React\nDESCRIPTION: Implementation of a FancyInput component that accepts an inputRef prop to forward to its underlying input element, along with usage example that demonstrates focusing the input on button click.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/forwarding-refs.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\n// App.res\n\nmodule FancyInput = {\n  @react.component\n  let make = (~children, ~inputRef: ReactDOM.domRef) =>\n    <div> <input type_=\"text\" ref=inputRef /> children </div>\n}\n\n@send external focus: Dom.element => unit = \"focus\"\n\n@react.component\nlet make = () => {\n  let input = React.useRef(Js.Nullable.null)\n\n  let focusInput = () =>\n    input.current\n    ->Js.Nullable.toOption\n    ->Belt.Option.forEach(input => input->focus)\n\n  let onClick = _ => focusInput()\n\n  <div>\n    <FancyInput inputRef={ReactDOM.Ref.domRef(input)}>\n      <button onClick> {React.string(\"Click to focus\")} </button>\n    </FancyInput>\n  </div>\n}\n```\n\n----------------------------------------\n\nTITLE: Using Callback Refs for DOM Element Access\nDESCRIPTION: Demonstrates how to use callback refs with React.Ref.callbackDomRef to get fine-grained control over when refs are set and unset. This example shows storing a reference to a DOM node and focusing it.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/refs-and-the-dom.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\n// CustomTextInput.res\n\n@send external focus: Dom.element => unit = \"focus\"\n\n@react.component\nlet make = () => {\n  let textInput = React.useRef(Nullable.null)\n  let setTextInputRef = element => {\n    textInput.current = element\n  }\n\n  let focusTextInput = _ => {\n    textInput.current->Nullable.forEach(input => input->focus)\n  }\n\n  <div>\n    <input type_=\"text\" ref={ReactDOM.Ref.callbackDomRef(setTextInputRef)} />\n    <input\n      type_=\"button\" value=\"Focus the text input\" onClick={focusTextInput}\n    />\n  </div>\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction CustomTextInput(Props) {\n  var textInput = React.useRef(null);\n  var setTextInputRef = function (element) {\n    textInput.current = element;\n  };\n  var focusTextInput = function (param) {\n    Core__Nullable.forEach(textInput.current, (function (input) {\n            input.focus();\n          }));\n  };\n  return React.createElement(\"div\", undefined, React.createElement(\"input\", {\n                  ref: Caml_option.some(setTextInputRef),\n                  type: \"text\"\n                }), React.createElement(\"input\", {\n                  type: \"button\",\n                  value: \"Focus the text input\",\n                  onClick: focusTextInput\n                }));\n}\n```\n\n----------------------------------------\n\nTITLE: Using Belt.Option.flatMap in ReScript\nDESCRIPTION: Demonstrates the usage of flatMap function to chain option-returning operations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/option.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet addIfAboveOne = value =>\n  if (value > 1) {\n    Some(value + 1)\n  } else {\n    None\n  }\n\nBelt.Option.flatMap(Some(2), addIfAboveOne) /* Some(3) */\n\nBelt.Option.flatMap(Some(-4), addIfAboveOne) /* None */\n\nBelt.Option.flatMap(None, addIfAboveOne) /* None */\n```\n\n----------------------------------------\n\nTITLE: Displaying ReScript CLI Help in Shell\nDESCRIPTION: Shows the output of the 'rescript help' command, listing available subcommands and options for the ReScript build system.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/build-overview.mdx#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n❯ rescript help\nUsage: rescript <options> <subcommand>\n\n`rescript` is equivalent to `rescript build`\n\nOptions:\n  -v, -version  display version number\n  -h, -help     display help\n\nSubcommands:\n  build\n  clean\n  format\n  convert\n  dump\n  help\n\nRun `rescript <subcommand> -h` for subcommand help. Examples:\n  rescript build -h\n  rescript format -h\n```\n\n----------------------------------------\n\nTITLE: List Pattern Matching in ReScript\nDESCRIPTION: Shows recursive pattern matching on lists with head and tail extraction.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_13\n\nLANGUAGE: rescript\nCODE:\n```\nlet rec printStudents = (students) => {\n  switch students {\n  | list{} => ()\n  | list{student} => Js.log(\"Last student: \" ++ student)\n  | list{student1, ...otherStudents} =>\n    Js.log(student1)\n    printStudents(otherStudents)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: String Interpolation in ReScript\nDESCRIPTION: Demonstrates modern string interpolation with backticks, supporting multiline strings and variable interpolation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/primitive-types.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet name = \"Joe\"\n\nlet greeting = `Hello\nWorld\n👋\n${name}\n`\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar name = \"Joe\";\n\nvar greeting = \"Hello\\nWorld\\n👋\\n\" + name + \"\\n\";\n```\n\n----------------------------------------\n\nTITLE: Using Tagged Template Functions in ReScript\nDESCRIPTION: Demonstrates how to bind to and use a JavaScript tagged template function, specifically the Bun shell command function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/interop-cheatsheet.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\ntype result = {exitCode: int}\n@module(\"bun\") @taggedTemplate\nexternal sh: (array<string>, array<string>) => promise<result> = \"$\"\n\nlet filename = \"index.res\"\nlet result = await sh`ls ${filename}`\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as $$Bun from \"bun\";\nvar filename = \"index.res\";\nvar result = await $$Bun.$`ls ${filename}`;\n```\n\n----------------------------------------\n\nTITLE: Cloning React Elements in ReScript\nDESCRIPTION: Shows how to clone existing React elements and modify their props using React.cloneElement in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/elements-and-jsx.mdx#2025-04-18_snippet_8\n\nLANGUAGE: ReScript\nCODE:\n```\nlet original = <div className=\"hello\"/>\n\n// Will return a new React.element with className set to \"world\"\nReact.cloneElement(original, {\"className\": \"world\", \"data-name\": \"some name\"});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar original = React.createElement(\"div\", {\n      className: \"hello\"\n    });\n\nReact.cloneElement(original, {\n      className: \"world\",\n      \"data-name\": \"some name\"\n    });\n```\n\n----------------------------------------\n\nTITLE: Improving Type Safety with Abstract Types in ReScript\nDESCRIPTION: This example shows how to use abstract types to improve type safety when binding to setTimeout and clearTimeout, ensuring that only valid timer IDs are used.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/bind-to-global-js-values.mdx#2025-04-18_snippet_1\n\nLANGUAGE: ReScript\nCODE:\n```\ntype timerId\n@val external setTimeout: (unit => unit, int) => timerId = \"setTimeout\"\n@val external clearTimeout: timerId => unit = \"clearTimeout\"\n\nlet id = setTimeout(() => Console.log(\"hello\"), 100)\nclearTimeout(id)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar id = setTimeout(function (param) {\n  console.log(\"hello\");\n}, 100);\n\nclearTimeout(id);\n```\n\n----------------------------------------\n\nTITLE: Implementing Optional Props in ReScript React\nDESCRIPTION: A greeting component that showcases how to define and handle optional props in ReScript React using the option type and pattern matching.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/components-and-props.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\n// Greeting.res\n@react.component\nlet make = (~name: option<string>=?) => {\n  let greeting = switch name {\n  | Some(name) => \"Hello \" ++ name ++ \"!\"\n  | None => \"Hello stranger!\"\n  }\n  <div> {React.string(greeting)} </div>\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction Greeting(props) {\n  var name = props.name;\n  var greeting = name !== undefined ? \"Hello \" + name + \"!\" : \"Hello stranger!\";\n  return React.createElement(\"div\", undefined, greeting);\n}\n```\n\n----------------------------------------\n\nTITLE: Array Operations in ReScript\nDESCRIPTION: Shows common array operations including accessing elements, updating values, and pushing new items using the Js.Array2 API.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/array-and-list.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet myArray = [\"hello\", \"world\", \"how are you\"]\n\nlet firstItem = myArray[0] // \"hello\"\n\nmyArray[0] = \"hey\" // now [\"hey\", \"world\", \"how are you\"]\n\nlet pushedValue = Js.Array2.push(myArray, \"bye\")\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar myArray = [\"hello\", \"world\", \"how are you\"];\n\nvar firstItem = myArray[0];\n\nmyArray[0] = \"hey\";\n\nvar pushedValue = myArray.push(\"bye\");\n```\n\n----------------------------------------\n\nTITLE: Basic Array Operations with Pipe-Last Example\nDESCRIPTION: Demonstrates the difference between traditional function calls and pipe-last operations for array manipulation, showing how to calculate sum of squares of even numbers.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/array.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nlet isEven = x => mod(x, 2) == 0\nlet square = x => x * x\nlet result = {\n  open Js.Array\n  reduce(\"+\", 0, map(square, filter(isEven, [5, 2, 3, 4, 1])))\n}\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet isEven = x => mod(x, 2) == 0\nlet square = x => x * x\nlet result = {\n  open Js.Array\n  [5, 2, 3, 4, 1] |> filter(isEven) |> map(square) |> reduce(\"+\", 0)\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Object Types in ReScript\nDESCRIPTION: Optional type declaration for ReScript objects, using quoted field names. Unlike records, object types are inferred from values and don't need explicit declarations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/object.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\ntype person = {\n  \"age\": int,\n  \"name\": string\n};\n```\n\nLANGUAGE: js\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Using Built-in Not_found Exception in ReScript\nDESCRIPTION: Shows how to use the built-in 'Not_found' exception in a function and catch it in a try-catch block. The example demonstrates error handling for a 'getItem' function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/exception.mdx#2025-04-18_snippet_1\n\nLANGUAGE: ReScript\nCODE:\n```\nlet getItem = (item: int) =>\n  if (item === 3) {\n    // return the found item here\n    1\n  } else {\n    raise(Not_found)\n  }\n\nlet result =\n  try {\n    getItem(2)\n  } catch {\n  | Not_found => 0 // Default value if getItem throws\n  }\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as Caml_js_exceptions from \"./stdlib/caml_js_exceptions.js\";\n\nfunction getItem(item) {\n  if (item === 3) {\n    return 1;\n  }\n  throw {\n        RE_EXN_ID: \"Not_found\",\n        Error: new Error()\n      };\n}\n\nvar result;\n\ntry {\n  result = getItem(2);\n}\ncatch (raw_exn){\n  var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);\n  if (exn.RE_EXN_ID === \"Not_found\") {\n    result = 0;\n  } else {\n    throw exn;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Function Declaration with Type Annotations in ReScript\nDESCRIPTION: Shows examples of function declarations with type annotations in ReScript, covering anonymous functions, labeled arguments, default values, and optional parameters with their type specifications.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/function.mdx#2025-04-18_snippet_22\n\nLANGUAGE: res\nCODE:\n```\n// anonymous function\n(x: int, y: int): int => 1\n// bind to a name\nlet add = (x: int, y: int): int => 1\n\n// labeled\nlet add = (~first as x: int, ~second as y: int) : int => x + y\n// with punning sugar\nlet add = (~first: int, ~second: int) : int => first + second\n\n// labeled with default value\nlet add = (~first as x: int=1, ~second as y: int=2) : int => x + y\n// with punning sugar\nlet add = (~first: int=1, ~second: int=2) : int => first + second\n\n// optional\nlet add = (~first as x: option<int>=?, ~second as y: option<int>=?) : int => switch x {...}\n// with punning sugar\n// note that the caller would pass an `int`, not `option<int>`\n// Inside the function, `first` and `second` are `option<int>`.\nlet add = (~first: option<int>=?, ~second: option<int>=?) : int => switch first {...}\n```\n\n----------------------------------------\n\nTITLE: Implementing FriendListItem Component with Custom Hook in ReScript\nDESCRIPTION: A React component that renders a list item for a friend with color-coded status. It uses the same FriendStatusHook to retrieve the friend's online status and applies different colors based on their status.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/hooks-custom.mdx#2025-04-18_snippet_4\n\nLANGUAGE: ReScript\nCODE:\n```\n// FriendListItem.res\n@react.component\nlet make = (~friend: friend) => {\n  let onlineState = FriendStatusHook.useFriendStatus(friend.id);\n\n  let color = switch(onlineState) {\n    | Offline => \"red\"\n    | Online => \"green\"\n    | Loading => \"grey\"\n  }\n\n  <li style={ReactDOMStyle.make(~color,())}>\n      {React.string(friend.name)}\n  </li>\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction FriendListItem(Props) {\n  var friend = Props.friend;\n  var onlineState = useFriendStatus(friend.id);\n  var color;\n  switch (onlineState) {\n    case /* Offline */0 :\n        color = \"red\";\n        break;\n    case /* Loading */1 :\n        color = \"grey\";\n        break;\n    case /* Online */2 :\n        color = \"green\";\n        break;\n\n  }\n  return React.createElement(\"li\", {\n              style: {\n                color: color\n              }\n            }, friend.name);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Handwritten React Components in ReScript\nDESCRIPTION: This snippet demonstrates how to create a React component without using the @react.component decorator. It defines a Link component with makeProps and make functions, showing how to handle props and render elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/components-and-props.mdx#2025-04-18_snippet_10\n\nLANGUAGE: ReScript\nCODE:\n```\nmodule Link = {\n  type props = {\"href\": string, \"children\": React.element};\n  @obj external makeProps:(\n    ~href: string,\n    ~children: React.element,\n    unit) => props = \"\"\n\n  let make = (props: props) => { \n    <a href={props[\"href\"]}>\n     {props[\"children\"]}\n    </a>\n  }\n}\n\n<Link href=\"/docs\"> {React.string(\"Docs\")} </Link>\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction Link(props) {\n  return React.createElement(\"a\", {\n              href: props.href\n            }, props.children);\n}\n\nReact.createElement(Link, {\n      href: \"/docs\",\n      children: \"Docs\"\n    });\n```\n\n----------------------------------------\n\nTITLE: Defining Basic React Component in ReScript\nDESCRIPTION: Example of creating a simple React component called Title that renders text in a div with a 'title' class.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/lazy-components.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\n@react.component\nlet make = (~text) => {\n  <div className=\"title\">{text->React.string}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Record Instances in ReScript\nDESCRIPTION: Shows how to create an instance of a record type. The compiler infers the type based on the shape of the value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/record.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet me = {\n  age: 5,\n  name: \"Big ReScript\"\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar me = {\n  age: 5,\n  name: \"Big ReScript\"\n};\n```\n\n----------------------------------------\n\nTITLE: Module Implementation and Interface Files in ReScript\nDESCRIPTION: Shows how .res files contain module implementations while .resi files define their interfaces, controlling what's exposed from the module.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/module.mdx#2025-04-18_snippet_11\n\nLANGUAGE: res\nCODE:\n```\n/* file React.res (implementation. Compiles to module React) */\ntype state = int\nlet render = (str) => str\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction render(str) {\n  return str;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Record Type Spread for Type Composition\nDESCRIPTION: Demonstrates ReScript v11's record type spread feature, allowing the creation of new record types by combining fields from existing record types along with new fields.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/record.mdx#2025-04-18_snippet_14\n\nLANGUAGE: rescript\nCODE:\n```\ntype a = {\n  id: string,\n  name: string,\n}\n\ntype b = {\n  age: int\n}\n\ntype c = {\n  ...a,\n  ...b,\n  active: bool\n}\n```\n\n----------------------------------------\n\nTITLE: Using Inline Polymorphic Variant Types in ReScript\nDESCRIPTION: Demonstrates how to define and use inline polymorphic variant types for function parameters, along with pattern matching syntax.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/polymorphic-variant.mdx#2025-04-18_snippet_2\n\nLANGUAGE: ReScript\nCODE:\n```\nlet render = (myColor: [#red | #green | #blue]) => {\n  switch myColor {\n  | #blue => Console.log(\"Hello blue!\")\n  | #red\n  | #green => Console.log(\"Hello other colors\")\n  }\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction render(myColor) {\n  if (myColor === \"green\" || myColor === \"red\") {\n    console.log(\"Hello other colors\");\n  } else {\n    console.log(\"Hello blue!\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Immutable Record Updates in ReScript\nDESCRIPTION: Shows how to create a new record from an existing one using the spread operator. The original record is not mutated.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/record.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet meNextYear = {...me, age: me.age + 1}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar meNextYear = {\n  age: 21,\n  name: \"Big ReScript\"\n};\n```\n\n----------------------------------------\n\nTITLE: Optional Labeled Arguments Function\nDESCRIPTION: Shows how to declare and use optional labeled arguments with pattern matching on the option type. Includes default values and explicit passing of optional arguments.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/function.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reason\nCODE:\n```\nlet drawCircle = (~color, ~radius=?, ()) => {\n  setColor(color);\n  switch (radius) {\n  | None => startAt(1, 1)\n  | Some(r_) => startAt(r_, r_)\n  };\n};\n```\n\nLANGUAGE: ml\nCODE:\n```\nlet drawCircle ~color ?radius () =\n  setColor color;\n  let () = match radius with\n  | None -> startAt 1 1\n  | Some r_ -> startAt r_ r_\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction drawCircle(color, radius, param) {\n  setColor(color);\n  if (radius === undefined) {\n    return startAt(1, 1);\n  }\n  var r_ = Caml_option.valFromOption(radius);\n  return startAt(r_, r_);\n}\n```\n\n----------------------------------------\n\nTITLE: Using JS Object Converters in ReScript\nDESCRIPTION: Demonstrates exporting a JavaScript object converted from a ReScript record, and binding to a JavaScript object converted to a ReScript record.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/generate-converters-accessors.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\nlet jsCoordinates = coordinatesToJs({x: 1, y: 2});\n```\n\nLANGUAGE: res\nCODE:\n```\n@module(\"myGame\")\nexternal jsCoordinates : coordinates = \"jsCoordinates\";\n```\n\n----------------------------------------\n\nTITLE: Generating Variant Accessors with @deriving(accessors)\nDESCRIPTION: Use @deriving(accessors) on a variant type to create accessor functions for its constructors. Variants with payloads generate functions, while payload-less constructors generate plain integers.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/generate-converters-accessors.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\n@deriving(accessors)\ntype action =\n  | Click\n  | Submit(string)\n  | Cancel;\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction submit(param_0) {\n  return /* Submit */[param_0];\n}\n\nvar click = /* Click */0;\n\nvar cancel = /* Cancel */1;\n\nexports.click  = click;\nexports.submit = submit;\nexports.cancel = cancel;\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Promises in ReScript\nDESCRIPTION: This snippet demonstrates how to create a promise using Js.Promise.make and chain multiple promise operations using then_ and catch. It showcases the usage of the pipe operator for improved readability.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/promise.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\nlet myPromise = Js.Promise.make((~resolve, ~reject) => resolve(. 2))\n\nmyPromise->Js.Promise.then_(value => {\n  Js.log(value)\n  Js.Promise.resolve(value + 2)\n}, _)->Js.Promise.then_(value => {\n  Js.log(value)\n  Js.Promise.resolve(value + 3)\n}, _)->Js.Promise.catch(err => {\n  Js.log2(\"Failure!!\", err)\n  Js.Promise.resolve(-2)\n}, _)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar myPromise = new Promise(function (resolve, reject) {\n  return resolve(2);\n});\n\nmyPromise\n  .then(function (value) {\n    console.log(value);\n    return Promise.resolve((value + 2) | 0);\n  })\n  .then(function (value) {\n    console.log(value);\n    return Promise.resolve((value + 3) | 0);\n  })\n  .catch(function (err) {\n    console.log(\"Failure!!\", err);\n    return Promise.resolve(-2);\n  });\n```\n\n----------------------------------------\n\nTITLE: Defining Option Type in ReScript\nDESCRIPTION: Defines the Option type in ReScript, which represents the existence or nonexistence of a value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/null-undefined-option.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\ntype option<'a> = None | Some('a)\n```\n\n----------------------------------------\n\nTITLE: Type Annotations for Labeled Arguments\nDESCRIPTION: Adding type annotations to labeled arguments to specify their expected types. This shows how to properly type arguments that have been renamed internally.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/function.mdx#2025-04-18_snippet_8\n\nLANGUAGE: res\nCODE:\n```\nlet drawCircle = (~radius as r: int, ~color as c: string) => {\n  // code here\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction drawCircle(r, c) {\n  // code here\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping Children Elements in ReScript React\nDESCRIPTION: Shows how to create a function that wraps children elements in a div with a header. The function takes a React.element as input and returns a new React.element.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/elements-and-jsx.mdx#2025-04-18_snippet_1\n\nLANGUAGE: ReScript\nCODE:\n```\nlet wrapChildren = (children: React.element) => {\n  <div>\n    <h1> {React.string(\"Overview\")} </h1>\n    children\n  </div>\n}\n\nwrapChildren(<div> {React.string(\"Let's use React with ReScript\")} </div>)\n```\n\n----------------------------------------\n\nTITLE: Variant Coercion Between Different Variant Types in ReScript\nDESCRIPTION: Demonstrates how to coerce variants to other variant types when their runtime representations are compatible. This example uses variant type spreads to show how a variant can be safely coerced to another variant type that can represent all its values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/variant.mdx#2025-04-18_snippet_18\n\nLANGUAGE: rescript\nCODE:\n```\ntype a = One | Two | Three\ntype b = | ...a | Four | Five\n\nlet one: a = One\nlet four: b = Four\n\n// This works because type `b` can always represent type `a` since all of type `a`'s constructors are spread into type `b` \nlet oneAsTypeB = (one :> b)\n```\n\n----------------------------------------\n\nTITLE: JavaScript Interop with External Objects\nDESCRIPTION: Shows how to quickly bind to JavaScript APIs using objects without specifying detailed type declarations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/object.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\n@val external document: 'a = \"document\"\n\n// call a method\ndocument[\"addEventListener\"](\"mouseup\", _event => {\n  Console.log(\"clicked!\")\n})\n\n// get a property\nlet loc = document[\"location\"]\n\n// set a property\ndocument[\"location\"][\"href\"] = \"rescript-lang.org\"\n```\n\n----------------------------------------\n\nTITLE: Organizing Emotion Styles with ReScript Modules\nDESCRIPTION: Shows how to organize Emotion styles using ReScript modules for better code organization and maintainability in CSS-in-JS workflows.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/styling.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rescript\nCODE:\n```\nmodule Styles = {\n  open Emotion\n  let container = css({\n    \"color\": \"#fff\",\n    \"backgroundColor\": \"red\"\n  })\n  // your other declarations\n}\n\nlet app = <div className={Styles.container} />\n```\n\n----------------------------------------\n\nTITLE: Accessing Dynamic Properties with get_index and set_index\nDESCRIPTION: Shows how to use @get_index and @set_index to access dynamic properties or indices of a JavaScript object or array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/bind-to-js-object.mdx#2025-04-18_snippet_5\n\nLANGUAGE: ReScript\nCODE:\n```\ntype t\n@new external create: int => t = \"Int32Array\"\n@get_index external get: (t, int) => int = \"\"\n@set_index external set: (t, int, int) => unit = \"\"\n\nlet i32arr = create(3)\ni32arr->set(0, 42)\nConsole.log(i32arr->get(0))\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar i32arr = new Int32Array(3);\ni32arr[0] = 42;\nconsole.log(i32arr[0]);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Different JavaScript Outputs for ReScript Variants\nDESCRIPTION: Shows how different variant declarations and their usage compile to different JavaScript representations, illustrating the runtime encoding of variants.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/variant.mdx#2025-04-18_snippet_7\n\nLANGUAGE: res\nCODE:\n```\ntype greeting = Hello | Goodbye\nlet g1 = Hello\nlet g2 = Goodbye\n\ntype outcome = Good | Error(string)\nlet o1 = Good\nlet o2 = Error(\"oops!\")\n\ntype family = Child | Mom(int, string) | Dad (int)\nlet f1 = Child\nlet f2 = Mom(30, \"Jane\")\nlet f3 = Dad(32)\n\ntype person = Teacher | Student({gpa: float})\nlet p1 = Teacher\nlet p2 = Student({gpa: 99.5})\n\ntype s = {score: float}\ntype adventurer = Warrior(s) | Wizard(string)\nlet a1 = Warrior({score: 10.5})\nlet a2 = Wizard(\"Joe\")\n```\n\nLANGUAGE: js\nCODE:\n```\nvar g1 = /* Hello */0;\nvar g2 = /* Goodbye */1;\n\nvar o1 = /* Good */0;\nvar o2 = /* Error */{\n  _0: \"oops!\"\n};\n\nvar f1 = /* Child */0;\nvar f2 = {\n  TAG: /* Mom */0,\n  _0: 30,\n  _1: \"Jane\"\n};\nvar f3 = {\n  TAG: /* Dad */1,\n  _0: 32\n};\n\nvar p1 = /* Teacher */0;\nvar p2 = /* Student */{\n  gpa: 99.5\n};\n\nvar a1 = {\n  TAG: /* Warrior */0,\n  _0: {\n    score: 10.5\n  }\n};\nvar a2 = {\n  TAG: /* Wizard */1,\n  _0: \"Joe\"\n};\n```\n\n----------------------------------------\n\nTITLE: Creating React Elements from Component Functions in ReScript\nDESCRIPTION: Demonstrates how to create React elements from component functions using React.createElement when JSX syntax is not suitable.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/elements-and-jsx.mdx#2025-04-18_snippet_5\n\nLANGUAGE: ReScript\nCODE:\n```\ntype props = {\"name\": string};\n\nlet render = (myComp: props => React.element) => {\n  <div>\n    {React.createElement(myComp, {\"name\": \"Franz\"})}\n  </div>\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Object Types in ReScript\nDESCRIPTION: Shows how to declare optional type definitions for ReScript objects with quoted field names.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/object.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype person = {\n  \"age\": int,\n  \"name\": string\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Using async/await with Promises in ReScript\nDESCRIPTION: Equivalent code using async/await syntax which offers better ergonomics when working with promises in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/promise.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet logAsyncMessage = async () => {\n  let msg = await Js.Promise2.resolve(\"hello world\")\n  Js.log(`Message: ${msg}`)\n}\n```\n\n----------------------------------------\n\nTITLE: Variants with Constructor Arguments in ReScript\nDESCRIPTION: Illustrates how to define and use variants with constructor arguments, including multiple arguments and labeled payloads.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/variant.mdx#2025-04-18_snippet_2\n\nLANGUAGE: ReScript\nCODE:\n```\ntype account =\n  | None\n  | Instagram(string)\n  | Facebook(string, int)\n\nlet myAccount = Facebook(\"Josh\", 26)\nlet friendAccount = Instagram(\"Jenny\")\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar myAccount = {\n  TAG: /* Facebook */1,\n  _0: \"Josh\",\n  _1: 26\n};\nvar friendAccount = {\n  TAG: /* Instagram */0,\n  _0: \"Jenny\"\n};\n```\n\n----------------------------------------\n\nTITLE: Comparing Object/Record Usage in JavaScript and ReScript\nDESCRIPTION: Illustrates the differences in object/record declaration and usage between JavaScript and ReScript, including type definitions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/overview.mdx#2025-04-18_snippet_2\n\nLANGUAGE: ReScript\nCODE:\n```\ntype point = {x: int, mutable y: int}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n{x: 30, y: 20}\n```\n\nLANGUAGE: ReScript\nCODE:\n```\n{x: 30, y: 20}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n{...point, x: 30}\n```\n\nLANGUAGE: ReScript\nCODE:\n```\n{...point, x: 30}\n```\n\n----------------------------------------\n\nTITLE: Type Escape Hatch Declaration in ReScript\nDESCRIPTION: Demonstrates the escape hatch mechanism to bypass the type system when necessary, using the external declaration with %identity.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/type.mdx#2025-04-18_snippet_11\n\nLANGUAGE: res\nCODE:\n```\nexternal myShadyConversion: myType1 => myType2 = \"%identity\"\n```\n\nLANGUAGE: js\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Importing JS Module Functions in ReScript\nDESCRIPTION: Demonstrates basic binding to a JavaScript function from a module, using path.dirname as an example. The @module annotation specifies the JS module to import from.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/bind-to-js-function.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\n// Import nodejs' path.dirname\n@module(\"path\") external dirname: string => string = \"dirname\"\nlet root = dirname(\"/User/github\") // returns \"User\"\n```\n\nLANGUAGE: js\nCODE:\n```\nvar Path = require(\"path\");\nvar root = Path.dirname(\"/User/github\");\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Promises in Parallel with Promise.all\nDESCRIPTION: Shows how to execute multiple promises concurrently using Promise.all and await the combined results, with both ReScript code and its JavaScript output.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/promise.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\n@val\nexternal fetchMessage: string => promise<string> = \"global.fetchMessage\"\n\nlet logAsyncMessage = async () => {\n  let messages = await Promise.all([fetchMessage(\"message1\"), fetchMessage(\"message2\")])\n\n  Console.log(messages->Array.joinWith(\", \"))\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nasync function logAsyncMessage(param) {\n  var messages = await Promise.all([\n        global.fetchMessage(\"message1\"),\n        global.fetchMessage(\"message2\")\n      ]);\n  console.log(messages.join(\", \"));\n}\n\nexport {\n  logAsyncMessage ,\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Functor in ReScript\nDESCRIPTION: Demonstrates creating a module function (functor) named MakeSet that takes a Comparable module and returns a new set module. Shows both the ReScript code and its JavaScript output.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/module.mdx#2025-04-18_snippet_12\n\nLANGUAGE: res\nCODE:\n```\nmodule type Comparable = {\n  type t\n  let equal: (t, t) => bool\n}\n\nmodule MakeSet = (Item: Comparable) => {\n  // let's use a list as our naive backing data structure\n  type backingType = list<Item.t>\n  let empty = list{}\n  let add = (currentSet: backingType, newItem: Item.t): backingType =>\n    // if item exists\n    if List.exists(x => Item.equal(x, newItem), currentSet) {\n      currentSet // return the same (immutable) set (a list really)\n    } else {\n      list{\n        newItem,\n        ...currentSet // prepend to the set and return it\n      }\n    }\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar List = require(\"./stdlib/list.js\");\n\nfunction MakeSet(Item) {\n  var add = function(currentSet, newItem) {\n    if (\n      List.exists(function(x) {\n        return Item.equal(x, newItem);\n      }, currentSet)\n    ) {\n      return currentSet;\n    } else {\n      return {\n        hd: newItem,\n        tl: currentSet,\n      };\n    }\n  };\n  return {\n    empty: /* [] */ 0,\n    add: add,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Optimized Friend Status Subscription with Dependencies\nDESCRIPTION: Demonstrates how to optimize the friend status subscription component to only re-subscribe when the friendId changes, preventing unnecessary subscription/unsubscription cycles.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/hooks-effect.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nReact.useEffect1(() => {\n  let handleStatusChange = (status) => {\n    setState(_ => {\n      status.ChatAPI.isOnline ? Online : Offline\n    })\n  }\n\n  ChatAPI.subscribeToFriendStatus(friendId, handleStatusChange);\n  setState(_ => Loading);\n\n  let cleanup = () => {\n    ChatAPI.unsubscribeFromFriendStatus(friendId, handleStatusChange)\n  }\n\n  Some(cleanup)\n}, [friendId]) // Only re-subscribe if friendId changes\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching with Polymorphic Variant Spread Syntax\nDESCRIPTION: Demonstrates special pattern matching syntax for matching on constructors defined in specific polymorphic variant types using the spread syntax (#...).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/polymorphic-variant.mdx#2025-04-18_snippet_7\n\nLANGUAGE: res\nCODE:\n```\n// Continuing the previous example above...\n\nswitch #Papayawhip {\n| #...blue => Js.log(\"This is a blue color\")\n| #...red => Js.log(\"This is a red color\")\n| other => Js.log2(\"Other color than red and blue: \", other)\n}\n```\n\nLANGUAGE: js\nCODE:\n```\n// This code got heavily optimized due to the usage of\n// constant values in a switch expression\nconsole.log(\"Other color than red and blue: \", \"Papayawhip\");\n\nvar c = \"Ruby\";\n```\n\n----------------------------------------\n\nTITLE: Optional Children in ReScript React Components\nDESCRIPTION: An example of a component with optional children elements. The OptionalChildren component handles both cases when children are provided or not, with appropriate fallback content.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/components-and-props.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nmodule OptionalChildren = {\n  @react.component\n  let make = (~children: option<React.element>=?) => {\n    <div>\n      {switch children {\n      | Some(element) => element\n      | None => React.string(\"No children provided\")\n      }}\n    </div>\n  }\n}\n\n<div>\n  <OptionalChildren />\n  <OptionalChildren> <div /> </OptionalChildren>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Standalone Function Type Signatures in ReScript\nDESCRIPTION: Shows how to define standalone function type signatures in ReScript for regular functions, labeled functions, and functions with optional parameters.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/function.mdx#2025-04-18_snippet_25\n\nLANGUAGE: res\nCODE:\n```\n// first arg type, second arg type, return type\ntype add = (int, int) => int\n\n// labeled\ntype add = (~first: int, ~second: int) => int\n\n// labeled\ntype add = (~first: int=?, ~second: int=?, unit) => int\n```\n\n----------------------------------------\n\nTITLE: Practical Recursive Function Example\nDESCRIPTION: A practical example of a recursive function that checks if a list contains an item. This demonstrates pattern matching on lists combined with recursion.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/function.mdx#2025-04-18_snippet_15\n\nLANGUAGE: res\nCODE:\n```\n// Recursively check every item on the list until one equals the `item`\n// argument. If a match is found, return `true`, otherwise return `false`\nlet rec listHas = (list, item) =>\n  switch list {\n  | list{} => false\n  | list{a, ...rest} => a === item || listHas(rest, item)\n  }\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction listHas(_list, item) {\n  while(true) {\n    var list = _list;\n    if (!list) {\n      return false;\n    }\n    if (list.hd === item) {\n      return true;\n    }\n    _list = list.tl;\n    continue ;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Importing JavaScript Module Content with bs.module in ReScript\nDESCRIPTION: Shows how to import a specific function from a JavaScript module using the bs.module external declaration. This example imports the dirname function from Node.js path module.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/import-from-export-to-js.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\n// Import nodejs' path.dirname\n[@bs.module \"path\"] external dirname: string => string = \"dirname\";\nlet root = dirname(\"/User/github\"); // returns \"User\"\n```\n\nLANGUAGE: ocaml\nCODE:\n```\n(* Import nodejs' path.dirname *)\nexternal dirname: string -> string = \"dirname\" [@@bs.module \"path\"]\nlet root = dirname \"/User/github\" (* returns \"User\" *)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar Path = require(\"path\");\nvar root = Path.dirname(\"/User/github\");\n```\n\n----------------------------------------\n\nTITLE: Basic useReducer Hook Usage in ReScript\nDESCRIPTION: Shows the basic syntax for using React.useReducer hook in ReScript. The hook accepts a reducer function and an initial state, returning the current state paired with a dispatch function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/hooks-reducer.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\nlet (state, dispatch) = React.useReducer(reducer, initialState)\n```\n\nLANGUAGE: js\nCODE:\n```\nvar match = React.useReducer(reducer, initialState);\n```\n\n----------------------------------------\n\nTITLE: Implementing and Exposing a React Module in ReScript\nDESCRIPTION: Demonstrates a basic ReScript implementation file (`React.res`) with its JavaScript output. The file defines a state type and render function in a module named React.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/module.mdx#2025-04-18_snippet_10\n\nLANGUAGE: res\nCODE:\n```\n/* file React.res (implementation. Compiles to module React) */\ntype state = int\nlet render = (str) => str\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction render(str) {\n  return str;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Records with Optional Fields\nDESCRIPTION: Shows how to define record types with optional fields using the question mark suffix. Optional fields can be omitted when creating record values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/record.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\ntype person = {\n  age: int,\n  name?: string\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Creating a useRef Container in ReScript\nDESCRIPTION: Basic usage example of React.useRef hook in ReScript to create a mutable container. The hook returns a ref object that persists for the component's lifetime.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/hooks-ref.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\nlet refContainer = React.useRef(initialValue);\n```\n\nLANGUAGE: js\nCODE:\n```\n  var button = React.useRef(null);\n  React.useRef(0);\n```\n\n----------------------------------------\n\nTITLE: Using Uncapitalized JSX Tags in ReScript\nDESCRIPTION: Shows how an uncapitalized JSX tag (for DOM elements) is transformed into a function call in ReScript. The element includes an onClick handler and two children.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/jsx.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reason\nCODE:\n```\n<div onClick={handler}> child1 child2 </div>;\n```\n\nLANGUAGE: reason\nCODE:\n```\n[@JSX] div(~onClick=handler, ~children=[child1, child2], ());\n```\n\nLANGUAGE: ml\nCODE:\n```\ndiv ~onClick:handler ~children:[child1; child2] () [@@JSX]\n```\n\nLANGUAGE: js\nCODE:\n```\nReact.createElement(\"div\", {\n  onClick: handler\n}, child1, child2);\n```\n\n----------------------------------------\n\nTITLE: Type-Safe Coordinate System with Unboxed Types\nDESCRIPTION: Demonstrates using unboxed types to create a type-safe coordinate system that prevents mixing local and world coordinates.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/unboxed.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\ntype coordinates = {x: float, y: float}\n@unboxed type localCoordinates = Local(coordinates)\n@unboxed type worldCoordinates = World(coordinates)\n\nlet renderDot = (World(coordinates)) => {\n  Js.log3(\"Pretend to draw at:\", coordinates.x, coordinates.y)\n}\n\nlet toWorldCoordinates = (Local(coordinates)) => {\n  World({\n    x: coordinates.x +. 10.,\n    y: coordinates.x +. 20.,\n  })\n}\n\nlet playerLocalCoordinates = Local({x: 20.5, y: 30.5})\n\nrenderDot(playerLocalCoordinates->toWorldCoordinates)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction renderDot(coordinates) {\n  console.log(\"Pretend to draw at:\", coordinates.x, coordinates.y);\n}\n\nfunction toWorldCoordinates(coordinates) {\n  return {\n    x: coordinates.x + 10,\n    y: coordinates.x + 20\n  };\n}\n\nvar playerLocalCoordinates = {\n  x: 20.5,\n  y: 30.5\n};\n\nrenderDot(toWorldCoordinates(playerLocalCoordinates));\n```\n\n----------------------------------------\n\nTITLE: Todo List Implementation with Complex Actions in ReScript\nDESCRIPTION: A more advanced example showing a todo list application that leverages ReScript's variants to express complex actions with data payloads. Demonstrates adding, removing, and toggling todo items using the reducer pattern.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/hooks-reducer.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\n// TodoApp.res\n\ntype todo = {\n  id: int,\n  content: string,\n  completed: bool,\n}\n\ntype action =\n  | AddTodo(string)\n  | RemoveTodo(int)\n  | ToggleTodo(int)\n\ntype state = {\n  todos: array<todo>,\n  nextId: int,\n}\n\nlet reducer = (state, action) =>\n  switch action {\n  | AddTodo(content) =>\n    let todos = Array.concat(\n      state.todos,\n      [{id: state.nextId, content: content, completed: false}],\n    )\n    {todos: todos, nextId: state.nextId + 1}\n  | RemoveTodo(id) =>\n    let todos = Array.filter(state.todos, todo => todo.id !== id)\n    {...state, todos: todos}\n  | ToggleTodo(id) =>\n    let todos = Belt.Array.map(state.todos, todo =>\n      if todo.id === id {\n        {\n          ...todo,\n          completed: !todo.completed,\n        }\n      } else {\n        todo\n      }\n    )\n    {...state, todos: todos}\n  }\n\nlet initialTodos = [{id: 1, content: \"Try ReScript & React\", completed: false}]\n\n@react.component\nlet make = () => {\n  let (state, dispatch) = React.useReducer(\n    reducer,\n    {todos: initialTodos, nextId: 2},\n  )\n\n  let todos = Belt.Array.map(state.todos, todo =>\n    <li>\n      {React.string(todo.content)}\n      <button onClick={_ => dispatch(RemoveTodo(todo.id))}>\n        {React.string(\"Remove\")}\n      </button>\n      <input\n        type_=\"checkbox\"\n        checked=todo.completed\n        onChange={_ => dispatch(ToggleTodo(todo.id))}\n      />\n    </li>\n  )\n\n  <> <h1> {React.string(\"Todo List:\")} </h1> <ul> {React.array(todos)} </ul> </>\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction reducer(state, action) {\n  switch (action.TAG | 0) {\n    case /* AddTodo */0 :\n        var todos = state.todos.concat([{\n                id: state.nextId,\n                content: action._0,\n                completed: false\n              }]);\n        return {\n                todos: todos,\n                nextId: state.nextId + 1 | 0\n              };\n    case /* RemoveTodo */1 :\n        var id = action._0;\n        var todos$1 = state.todos.filter(function (todo) {\n              return todo.id !== id;\n            });\n        return {\n                todos: todos$1,\n                nextId: state.nextId\n              };\n    case /* ToggleTodo */2 :\n        var id$1 = action._0;\n        var todos$2 = Belt_Array.map(state.todos, (function (todo) {\n                if (todo.id === id$1) {\n                  return {\n                          id: todo.id,\n                          content: todo.content,\n                          completed: !todo.completed\n                        };\n                } else {\n                  return todo;\n                }\n              }));\n        return {\n                todos: todos$2,\n                nextId: state.nextId\n              };\n    \n  }\n}\n\nvar initialTodos = [{\n    id: 1,\n    content: \"Try ReScript & React\",\n    completed: false\n  }];\n\nfunction TodoApp(Props) {\n  var match = React.useReducer(reducer, {\n        todos: initialTodos,\n        nextId: 2\n      });\n  var dispatch = match[1];\n  var todos = Belt_Array.map(match[0].todos, (function (todo) {\n          return React.createElement(\"li\", undefined, todo.content, React.createElement(\"button\", {\n                          onClick: (function (param) {\n                              return Curry._1(dispatch, {\n                                          TAG: /* RemoveTodo */1,\n                                          _0: todo.id\n                                        });\n                            })\n                        }, \"Remove\"), React.createElement(\"input\", {\n                          checked: todo.completed,\n                          type: \"checkbox\",\n                          onChange: (function (param) {\n                              return Curry._1(dispatch, {\n                                          TAG: /* ToggleTodo */2,\n                                          _0: todo.id\n                                        });\n                            })\n                        }));\n        }));\n  return React.createElement(React.Fragment, undefined, React.createElement(\"h1\", undefined, \"Todo List:\"), React.createElement(\"ul\", undefined, todos));\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Importing an Entire Module in ReScript\nDESCRIPTION: Demonstrates how to dynamically import an entire module by awaiting the module itself. This approach is used when you need to import multiple bindings from a module lazily.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/import-from-export-to-js.mdx#2025-04-18_snippet_5\n\nLANGUAGE: ReScript\nCODE:\n```\n// App.res\nlet main = async () => {\n  module Utils = await MathUtils\n\n  let twoPlusTwo = Utils.add(2, 2)\n  Console.log(twoPlusTwo)\n}\n```\n\nLANGUAGE: JavaScript (Module)\nCODE:\n```\nasync function main() {\n  var Utils = await import(\"./MathUtils.mjs\");\n\n  var twoPlusTwo = Utils.add(2, 2);\n  console.log(twoPlusTwo);\n}\n```\n\n----------------------------------------\n\nTITLE: Control Structures in ReScript\nDESCRIPTION: Illustrates control structures in ReScript, including if-else statements and loops.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/overview.mdx#2025-04-18_snippet_6\n\nLANGUAGE: ReScript\nCODE:\n```\nif a {b} else {c}\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nfor i in 0 to 10 {...}\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nwhile true {...}\n```\n\n----------------------------------------\n\nTITLE: Creating a List in ReScript\nDESCRIPTION: Demonstrates how to create an immutable list in ReScript and shows its JavaScript representation. Lists in ReScript are singly linked lists and require homogeneous elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/array-and-list.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nlet myList = list{1, 2, 3}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar myList = {\n  hd: 1,\n  tl: {\n    hd: 2,\n    tl: {\n      hd: 3,\n      tl: 0\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching with Switch in ReScript\nDESCRIPTION: Demonstrates comprehensive pattern matching using switch to handle different variant cases. Each case handles a different shape of data, extracting values when needed and executing specific code for each case.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_5\n\nLANGUAGE: reason\nCODE:\n```\nlet data = GoodResult(\"Product shipped!\");\nswitch (data) {\n| GoodResult(theMessage) =>\n  Js.log(\"Success! \" ++ theMessage)\n| BadResult(errorCode) =>\n  Js.log(\"Something's wrong. The error code is: \" ++ Js.Int.toString(errorCode))\n| NoResult =>\n  Js.log(\"Bah.\")\n};\n```\n\nLANGUAGE: ml\nCODE:\n```\nlet data = GoodResult (\"Product shipped!\")\nlet () = match data with\n| GoodResult theMessage ->\n  Js.log (\"Success! \" ^ theMessage)\n| BadResult errorCode ->\n  Js.log (\"Something's wrong. The error code is: \" ^ (Js.Int.toString errorCode))\n| NoResult -> Js.log \"Bah.\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar data = {\n  TAG: /* GoodResult */1,\n  _0: \"Product shipped!\"\n};\n\nif (typeof data === \"number\") {\n  console.log(\"Bah.\");\n} else if (data.TAG) {\n  console.log(\"Success! Product shipped!\");\n} else {\n  console.log(\"Something's wrong. The error code is: \" + \"Product shipped!\".toString());\n}\n```\n\n----------------------------------------\n\nTITLE: For Loop with Ascending Range in ReScript\nDESCRIPTION: Demonstrates the syntax for a for loop that iterates from a starting value up to and including an ending value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/control-flow.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nfor i in startValueInclusive to endValueInclusive {\n  Js.log(i)\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nfor(var i = startValueInclusive; i <= endValueInclusive; ++i){\n  console.log(i);\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Callback Refs Between Components\nDESCRIPTION: Shows how to pass callback refs between parent and child components to allow a parent component to access a DOM element in a child component, maintaining component encapsulation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/refs-and-the-dom.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\n// Parent.res\n\n@send external focus: Dom.element => unit = \"focus\"\n\nmodule CustomTextInput = {\n  @react.component\n  let make = (~setInputRef) => {\n    <div>\n      <input type_=\"text\" ref={ReactDOM.Ref.callbackDomRef(setInputRef)} />\n    </div>\n  }\n}\n\n@react.component\nlet make = () => {\n  let textInput = React.useRef(Nullable.null)\n  let setInputRef = element => { textInput.current = element}\n\n  <CustomTextInput setInputRef/>\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction CustomTextInput(Props) {\n  var setInputRef = Props.setInputRef;\n  return React.createElement(\"div\", undefined, React.createElement(\"input\", {\n                  ref: setInputRef,\n                  type: \"text\"\n                }));\n}\n\nvar CustomTextInput = {\n  make: CustomTextInput\n};\n\nfunction Parent(Props) {\n  var textInput = React.useRef(null);\n  var setInputRef = function (element) {\n    textInput.current = element;\n\n  };\n  return React.createElement(CustomTextInput, {\n              setInputRef: setInputRef\n            });\n}\n```\n\n----------------------------------------\n\nTITLE: ReScript Function Application Syntax Examples\nDESCRIPTION: Shows different ways to call functions in ReScript, including with labeled arguments, punning, default values, and optional arguments.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/function.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rescript\nCODE:\n```\nadd(x, y)\n\n// labeled\nadd(~first=1, ~second=2)\n// with punning sugar\nadd(~first, ~second)\n\n// application with default value. Same as normal application\nadd(~first=1, ~second=2)\n\n// explicit optional application\nadd(~first=?Some(1), ~second=?Some(2))\n// with punning\nadd(~first?, ~second?)\n```\n\n----------------------------------------\n\nTITLE: Creating Record Instances in ReScript\nDESCRIPTION: Example of creating a record instance based on the previously declared type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/record.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet me = {\n  age: 5,\n  name: \"Big ReScript\"\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar me = {\n  age: 5,\n  name: \"Big ReScript\"\n};\n```\n\n----------------------------------------\n\nTITLE: Handling JS nullable types with option in ReScript\nDESCRIPTION: Shows how to convert potentially null or undefined JavaScript values to ReScript's option type using the Nullable.toOption helper function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/newcomer-examples.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet greetByName = (possiblyNullName) => {\n  let optionName = Nullable.toOption(possiblyNullName)\n  switch optionName {\n  | None => \"Hi\"\n  | Some(name) => \"Hello \" ++ name\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction greetByName(possiblyNullName) {\n  if (possiblyNullName == null) {\n    return \"Hi\";\n  } else {\n    return \"Hello \" + possiblyNullName;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Raising ReScript Exceptions and Their JS Output\nDESCRIPTION: Demonstrates how a ReScript exception with an inline record type is defined and raised, and shows the corresponding JavaScript output with the exception structure that includes RE_EXN_ID, custom fields, and an Error object for stack traces.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/exception.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\nexception BadArgument({myMessage: string})\n\nlet myTest = () => {\n  raise(BadArgument({myMessage: \"Oops!\"}))\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar Caml_exceptions = require(\"./stdlib/caml_exceptions.js\");\n\nvar BadArgument = Caml_exceptions.create(\"Playground.BadArgument\");\n\nfunction myTest() {\n  throw {\n    RE_EXN_ID: BadArgument,\n    myMessage: \"Oops!\",\n    Error: new Error()\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Asynchronous Functions with 'async' in ReScript\nDESCRIPTION: This example demonstrates how to use the 'async' keyword to create an asynchronous function in ReScript. It shows the usage of 'await' to handle promises for network operations like fetching user email and sending analytics.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/language_async.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\n// Some fictive functionality that offers asynchronous network actions\n@val external fetchUserMail: string => promise<string> = \"GlobalAPI.fetchUserMail\"\n@val external sendAnalytics: string => promise<unit> = \"GlobalAPI.sendAnalytics\"\n\n// We use the `async` keyword to allow the use of `await` in the function body\nlet logUserDetails = async (userId: string) => {\n  // We use `await` to fetch the user email from our fictive user endpoint\n  let email = await fetchUserMail(userId)\n\n  await sendAnalytics(`User details have been logged for ${userId}`)\n\n  Console.log(`Email address for user ${userId}: ${email}`)\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nasync function logUserDetails(userId) {\n  var email = await GlobalAPI.fetchUserMail(userId);\n  await GlobalAPI.sendAnalytics(\"User details have been logged for \" + userId + \"\");\n  console.log(\"Email address for user \" + userId + \": \" + email + \"\");\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-Argument Function Pipe Usage\nDESCRIPTION: Shows how pipe operator works with functions taking multiple arguments.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/pipe.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reason\nCODE:\n```\none->a(two, three);\n```\n\nLANGUAGE: ml\nCODE:\n```\none |. a two three\n```\n\nLANGUAGE: javascript\nCODE:\n```\na(one, two, three);\n```\n\n----------------------------------------\n\nTITLE: Variant Constructors with Arguments\nDESCRIPTION: Defines a variant type where constructors can hold additional data. Shows how constructors can take different numbers and types of arguments.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/variant.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reason\nCODE:\n```\ntype account =\n  | None\n  | Instagram(string)\n  | Facebook(string, int);\n```\n\nLANGUAGE: ml\nCODE:\n```\ntype account =\n  | None\n  | Instagram of string\n  | Facebook of string * int\n```\n\nLANGUAGE: js\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: String Interpolation in ReScript\nDESCRIPTION: Using backtick syntax for string interpolation in ReScript, which allows for multiline strings, interpolation with ${}, and proper Unicode handling without character escaping.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/primitive-types.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nlet name = \"Joe\"\n\nlet greeting = `Hello\nWorld\n👋\n${name}\n`\n```\n\nLANGUAGE: js\nCODE:\n```\nvar name = \"Joe\";\n\nvar greeting = \"Hello\\nWorld\\n👋\\n\" + name + \"\\n\";\n```\n\n----------------------------------------\n\nTITLE: Destructuring Various Data Structures in ReScript\nDESCRIPTION: Shows destructuring for records, variants, arrays, and lists in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_1\n\nLANGUAGE: ReScript\nCODE:\n```\n// Record\ntype student = {name: string, age: int}\nlet student1 = {name: \"John\", age: 10}\nlet {name} = student1 // \"John\" assigned to `name`\n\n// Variant\ntype result =\n  | Success(string)\nlet myResult = Success(\"You did it!\")\nlet Success(message) = myResult // \"You did it!\" assigned to `message`\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar student1 = {\n  name: \"John\",\n  age: 10\n};\nvar name = \"John\";\n\nvar myResult = /* Success */{\n  _0: \"You did it!\"\n};\nvar message = \"You did it!\"\n\nvar myArray = [1, 2, 3];\nif (myArray.length !== 2) {\n  throw {\n    RE_EXN_ID: \"Match_failure\",\n    _1: [\n      \"playground.res\",\n      14,\n      4\n    ],\n    Error: new Error()\n  };\n}\nvar item1 = myArray[0];\nvar item2 = myArray[1];\n\nvar myList = {\n  hd: 1,\n  tl: {\n    hd: 2,\n    tl: {\n      hd: 3,\n      tl: /* [] */0\n    }\n  }\n};\n// ...\n```\n\n----------------------------------------\n\nTITLE: Adding Module Function Types in ReScript\nDESCRIPTION: Demonstrates how to constrain module functions with type signatures, hiding implementation details and ensuring proper interfaces.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/module.mdx#2025-04-18_snippet_14\n\nLANGUAGE: res\nCODE:\n```\nmodule type Comparable = ...\n\nmodule type MakeSetType = (Item: Comparable) => {\n  type backingType\n  let empty: backingType\n  let add: (backingType, Item.t) => backingType\n}\n\nmodule MakeSet: MakeSetType = (Item: Comparable) => {\n  ...\n}\n```\n\nLANGUAGE: js\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Renaming Fields During Record Destructuring in ReScript\nDESCRIPTION: Demonstrates how to rename a field while destructuring a record in ReScript. This technique allows extracting a field value into a variable with a different name than the field itself.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reason\nCODE:\n```\nlet {name: n} = student1; // \"John\" assigned to `n`\n```\n\nLANGUAGE: ml\nCODE:\n```\nlet {name = n} = student1 (* \"John\" assigned to `n` *)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar n = \"John\";\n```\n\n----------------------------------------\n\nTITLE: Creating Handwritten React Components in ReScript\nDESCRIPTION: Demonstrates how to create a React component in ReScript without using the @react.component decorator, by defining a module with a make function that accepts props. This example creates a Link component that renders an anchor tag.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/components-and-props.mdx#2025-04-18_snippet_10\n\nLANGUAGE: res\nCODE:\n```\nmodule Link = {\n  type props = {href: string, children: React.element};\n  \n  let make = (props: props) => { \n    <a href={props.href}>\n     {props.children}\n    </a>\n  }\n}\n\n<Link href=\"/docs\"> {React.string(\"Docs\")} </Link>\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction make(props) {\n  return React.createElement(\n    \"a\",\n    { href: props.href },\n    props.children\n  );\n}\n\nvar Link = {\n  make: make,\n};\n\nReact.createElement(make, {\n  href: \"/docs\",\n  children: \"Docs\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Parametrized Type in ReScript\nDESCRIPTION: Shows how to define a parametrized type in ReScript, using a university student example with a GPA and a generic response type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/newcomer-examples.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reason\nCODE:\n```\ntype universityStudent = {gpa: float};\n\ntype response('studentType) = {\n  status: int,\n  student: 'studentType,\n};\n```\n\nLANGUAGE: ml\nCODE:\n```\ntype universityStudent = {gpa: float}\n\ntype 'studentType response = {\n  status: int;\n  student: 'studentType;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Recursive Pattern Matching on Lists in ReScript\nDESCRIPTION: Demonstrates recursive pattern matching on lists in ReScript, using the list spread syntax to extract the head and tail of a list, which is useful for list traversal and processing.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_13\n\nLANGUAGE: res\nCODE:\n```\nlet rec printStudents = (students) => {\n  switch students {\n  | list{} => () // done\n  | list{student} => Console.log(\"Last student: \" ++ student)\n  | list{student1, ...otherStudents} =>\n    Console.log(student1)\n    printStudents(otherStudents)\n  }\n}\nprintStudents(list{\"Jane\", \"Harvey\", \"Patrick\"})\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction printStudents(_students) {\n  while(true) {\n    var students = _students;\n    if (!students) {\n      return;\n    }\n    var otherStudents = students.tl;\n    var student = students.hd;\n    if (otherStudents) {\n      console.log(student);\n      _students = otherStudents;\n      continue;\n    }\n    console.log(\"Last student: \" + student);\n    return;\n  };\n}\n\nprintStudents({\n  hd: \"Jane\",\n  tl: {\n    hd: \"Harvey\",\n    tl: {\n      hd: \"Patrick\",\n      tl: /* [] */0\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Exceptions in ReScript\nDESCRIPTION: Shows how to create and raise a custom exception in ReScript with a string parameter. The example creates an InputClosed exception.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/exception.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nexception InputClosed(string)\n// later on\nraise(InputClosed(\"The stream has closed!\"))\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Caml_exceptions from \"./stdlib/caml_exceptions.js\";\n\nvar InputClosed = /* @__PURE__ */Caml_exceptions.create(\"Playground.InputClosed\");\n\nthrow {\n      RE_EXN_ID: InputClosed,\n      _1: \"The stream has closed!\",\n      Error: new Error()\n    };\n```\n\n----------------------------------------\n\nTITLE: Implementing JSON Decoder in ReScript\nDESCRIPTION: Shows how to implement a JSON decoder using pattern matching. Defines a user type and recursive functions to decode JSON into user objects, handling nested structures and optional fields.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2023-04-17-improving-interop.mdx#2025-04-18_snippet_11\n\nLANGUAGE: rescript\nCODE:\n```\n@unboxed\ntype rec json =\n  | @as(false) False\n  | @as(true) True\n  | @as(null) Null\n  | String(string)\n  | Number(float)\n  | Object(Js.Dict.t<json>)\n  | Array(array<json>)\n\ntype rec user = {\n  name: string,\n  age: int,\n  bestFriend: option<user>,\n}\n\nlet rec decodeUser = json =>\n  switch json {\n  | Object(userDict) =>\n    switch (\n      userDict->Dict.get(\"name\"),\n      userDict->Dict.get(\"age\"),\n      userDict->Dict.get(\"bestFriend\"),\n    ) {\n    | (Some(String(name)), Some(Number(age)), Some(maybeBestFriend)) =>\n      Some({\n        name,\n        age: age->Float.toInt,\n        bestFriend: maybeBestFriend->decodeUser,\n      })\n    | _ => None\n    }\n  | _ => None\n  }\n\nlet decodeUsers = json =>\n  switch json {\n  | Array(array) => array->Array.map(decodeUser)->Array.keepSome\n  | _ => []\n  }\n```\n\n----------------------------------------\n\nTITLE: Basic Exception Handling in ReScript\nDESCRIPTION: Demonstrates basic exception throwing and catching in ReScript using the Not_found exception. Shows how to use try-catch blocks and handle exceptions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/exception.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nlet getItem = (items) =>\n  if callSomeFunctionThatThrows() {\n    // return the found item here\n    1\n  } else {\n    raise(Not_found)\n  }\n\nlet result =\n  try {\n    getItem([1, 2, 3])\n  } catch {\n  | Not_found => 0 // Default value if getItem throws\n  }\n```\n\n----------------------------------------\n\nTITLE: Binding to JavaScript event listeners with polymorphic variants\nDESCRIPTION: Shows how to use polymorphic variants to create type-safe bindings for JavaScript event listeners, ensuring correct event names and callback types.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/bind-to-js-function.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\ntype readline\n\n@send\nexternal on: (\n    readline,\n    @string [\n      | #close(unit => unit)\n      | #line(string => unit)\n    ]\n  )\n  => readline = \"on\"\n\nlet register = rl =>\n  rl\n  ->on(#close(event => ()))\n  ->on(#line(line => Js.log(line)));\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction register(rl) {\n  return rl\n    .on(\"close\", function($$event) {})\n    .on(\"line\", function(line) {\n      console.log(line);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Using Raw JavaScript Requires in ReScript\nDESCRIPTION: Example of using ReScript's raw JavaScript functionality to require non-JavaScript assets like CSS files in ReScript code.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/interop-with-js-build-systems.mdx#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n%raw(\"require('./myStyles.css')\")\n```\n\n----------------------------------------\n\nTITLE: Using JavaScript Method Bindings Without Pipe in ReScript\nDESCRIPTION: Demonstrates how to use JavaScript method bindings without the pipe operator. This approach uses nested function calls which can be harder to read as complexity increases.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/pipe.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\nlet result = Js.Array2.filter(\n  Js.Array2.map([1, 2, 3], a => a + 1),\n  a => mod(a, 2) == 0\n)\n\nsend(setWaitDuration(asyncRequest(), 4000))\n```\n\nLANGUAGE: js\nCODE:\n```\nvar result = [1, 2, 3].map(function(a) {\n  return a + 1 | 0;\n}).filter(function(a) {\n  return a % 2 === 0;\n});\n\nasyncRequest().setWaitDuration(4000).send();\n```\n\n----------------------------------------\n\nTITLE: Defining a Module in ReScript with Point3D Example\nDESCRIPTION: Example of defining a module named Point3D in ReScript that contains a type definition and a make function to create a point. The example demonstrates module definition, type declaration, and function implementation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/language_module.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\nmodule Point3D = {\n  type point = (float, float, float)\n  let make = (x, y, z) => (x, y, z)\n}\n\nlet origin = Point3D.make(0.0, 0.0, 0.0)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction make(x, y, z) {\n  return [x, y, z];\n}\n\nvar Point3D = {\n  make: make,\n};\n\nvar origin = [0.0, 0.0, 0.0];\n```\n\n----------------------------------------\n\nTITLE: Extending Modules with include in ReScript\nDESCRIPTION: Shows how to use 'include' to extend a module by copying its content into a new module, similar to inheritance or mixins.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/module.mdx#2025-04-18_snippet_6\n\nLANGUAGE: ReScript\nCODE:\n```\nmodule BaseComponent = {\n  let defaultGreeting = \"Hello\"\n  let getAudience = (~excited) => excited ? \"world!\" : \"world\"\n}\n\nmodule ActualComponent = {\n  /* the content is copied over */\n  include BaseComponent\n  /* overrides BaseComponent.defaultGreeting */\n  let defaultGreeting = \"Hey\"\n  let render = () => defaultGreeting ++ \" \" ++ getAudience(~excited=true)\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction getAudience(excited) {\n  if (excited) {\n    return \"world!\";\n  } else {\n    return \"world\";\n  }\n}\n\nvar BaseComponent = {\n  defaultGreeting: \"Hello\",\n  getAudience: getAudience\n};\n\nvar defaultGreeting = \"Hey\";\n\nfunction render(param) {\n  return \"Hey world!\";\n}\n\nvar ActualComponent = {\n  getAudience: getAudience,\n  defaultGreeting: defaultGreeting,\n  render: render\n};\n```\n\n----------------------------------------\n\nTITLE: Importing ES6 Default Export in ReScript\nDESCRIPTION: Shows how to import a default export from an ES6 module. Since Babel exports default values under the name 'default', this example binds to that specific export name.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/import-from-export-to-js.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\n[@bs.module \"./student\"] external studentName: string = \"default\";\nJs.log(studentName);\n```\n\nLANGUAGE: ocaml\nCODE:\n```\nexternal studentName: string = \"default\" [@@bs.module \"./student\"]\nlet () = Js.log studentName\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar Student = require(\"./student\");\nconsole.log(Student.default);\n```\n\n----------------------------------------\n\nTITLE: For Loop Syntax in ReScript\nDESCRIPTION: Demonstrates the basic syntax of for loops in ReScript, which iterate from a starting value up to and including the ending value. The syntax is more concise than JavaScript's traditional for loop.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/control-flow.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nfor i in startValueInclusive to endValueInclusive {\n  Console.log(i)\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nfor(var i = startValueInclusive; i <= endValueInclusive; ++i){\n  console.log(i);\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Functions in ReScript\nDESCRIPTION: Example of calling the previously defined greeting function with a string argument. Shows how function invocation works in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/function.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\ngreet(\"world!\") // \"Hello world!\"\n```\n\nLANGUAGE: js\nCODE:\n```\ngreet(\"world!\");\n```\n\n----------------------------------------\n\nTITLE: Calling @obj External Functions to Create JavaScript Objects\nDESCRIPTION: Demonstrates how to call functions created with @obj external binding to create JavaScript objects with specific fields. Optional fields can be omitted.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/generate-converters-accessors.mdx#2025-04-18_snippet_24\n\nLANGUAGE: ReScript\nCODE:\n```\nlet homeRoute = route(\n  ~\\\"type\"=\"GET\",\n  ~path=\"/\",\n  ~action=_ => Js.log(\"Home\"),\n  (),\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Let Binding Examples in ReScript\nDESCRIPTION: Demonstrates basic let binding usage in ReScript including string assignment, number assignment, and arithmetic operations with bound values. Shows how ReScript code gets compiled to JavaScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/language_let.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\nlet greeting = \"hello!\"\nlet score = 10\nlet newScore = 10 + score\n```\n\nLANGUAGE: js\nCODE:\n```\nvar newScore = 20;\nvar greeting = \"hello!\";\nvar score = 10;\n```\n\n----------------------------------------\n\nTITLE: ReScript Build Configuration\nDESCRIPTION: JSON configuration for rescript.json that defines how ReScript should build your project. It specifies source directories, output module format, and dependencies.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/installation.mdx#2025-04-18_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"your-project-name\",\n  \"sources\": [\n    {\n      \"dir\": \"src\", // update this to wherever you're putting ReScript files\n      \"subdirs\": true\n    }\n  ],\n  \"package-specs\": [\n    {\n      \"module\": \"esmodule\",\n      \"in-source\": true\n    }\n  ],\n  \"suffix\": \".res.js\",\n  \"bs-dependencies\": [\n    \"@rescript/core\"\n  ],\n  \"bsc-flags\": [\n    \"-open RescriptCore\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching with Conditional Checks Using If Clause in ReScript\nDESCRIPTION: Shows how to use the 'if' clause in pattern matching to add additional conditions beyond just the structure of the matched value, providing a cleaner alternative to nested if statements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_10\n\nLANGUAGE: res\nCODE:\n```\nswitch person1 {\n| Teacher(_) => () // do nothing\n| Student({reportCard: {gpa}}) if gpa < 0.5 =>\n  Console.log(\"What's happening\")\n| Student(_) =>\n  // fall-through, catch-all case\n  Console.log(\"Heyo\")\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nif (person1.TAG) {\n  if (person1.reportCard.gpa < 0.5) {\n    console.log(\"What's happening\");\n  } else {\n    console.log(\"Heyo\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Component with Children in ReScript React\nDESCRIPTION: Shows how to create a function that accepts and wraps children elements. This pattern is fundamental for creating container components that manage layout around other content.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/elements-and-jsx.mdx#2025-04-18_snippet_1\n\nLANGUAGE: ReScript\nCODE:\n```\nlet wrapChildren = (children: React.element) => {\n  <div>\n    <h1> {React.string(\"Overview\")} </h1>\n    children\n  </div>\n}\n\nwrapChildren(<div> {React.string(\"Let's use React with ReScript\")} </div>)\n```\n\n----------------------------------------\n\nTITLE: Type Checking Objects in ReScript\nDESCRIPTION: Illustrates how type checking works with objects, showing that object values don't automatically match with type declarations unless explicitly annotated.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/object.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\ntype person = {\n  \"age\": int\n};\n\nlet me = {\n  \"age\": \"hello!\" // age is a string. No error.\n}\n```\n\n----------------------------------------\n\nTITLE: Destructuring in Function Parameters in ReScript\nDESCRIPTION: Shows how to use destructuring directly in function parameters, extracting the string value from a Success variant. This allows directly accessing the inner value without additional extraction inside the function body.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\ntype result =\n  | Success(string);\nlet displayMessage = (Success(m)) => {\n  // we've directly extracted the success message\n  // string by destructuring the parameter\n  Js.log(m);\n}\ndisplayMessage(Success(\"You did it!\"));\n```\n\nLANGUAGE: ml\nCODE:\n```\ntype result =\n  | Success of string\nlet displayMessage (Success m) =\n  (* we've directly extracted the success message *)\n  (* string by destructuring the parameter *)\n  Js.log m\n\nlet () = displayMessage (Success \"You did it!\")\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction displayMessage(m) {\n  console.log(m._0);\n}\n\ndisplayMessage(/* Success */{\n  _0: \"You did it!\"\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Type-Safe Bindings for JavaScript Code\nDESCRIPTION: Demonstrates how to create more robust type definitions for JavaScript code using opaque types and proper method bindings.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/converting-from-js.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\ntype school\ntype student\ntype payload = {\n  student: student\n}\n\n@bs.module external school: school = \"school\"\n@bs.send external getStudentById: (school, int) => student = \"getStudentById\"\n\nlet defaultId = 10\n\nlet queryResult = (usePayload, payload) => {\n  if usePayload {\n    payload.student\n  } else {\n    school->getStudentById(defaultId)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Async/Await Usage in ReScript\nDESCRIPTION: Demonstrates the new async/await syntax in ReScript with external function declarations and asynchronous function implementation. Shows how to handle promises using the await operator.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2023-02-02-release-10-1.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\n// Some fictive functionality that offers asynchronous network actions\n@val external fetchUserMail: string => promise<string> = \"GlobalAPI.fetchUserMail\"\n@val external sendAnalytics: string => promise<unit> = \"GlobalAPI.sendAnalytics\"\n\n// We use the `async` keyword to allow the use of `await` in the function body\nlet logUserDetails = async (userId: string) => {\n  // We use `await` to fetch the user email from our fictive user endpoint\n  let email = await fetchUserMail(userId)\n\n  await sendAnalytics(`User details have been logged for ${userId}`)\n\n  Js.log(`Email address for user ${userId}: ${email}`)\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Nullable Return Values with @return in ReScript\nDESCRIPTION: Shows how to use the @return(nullable) attribute to automatically convert JavaScript's null or undefined return values into ReScript's option type, providing type-safe handling of potentially missing values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/bind-to-js-function.mdx#2025-04-18_snippet_14\n\nLANGUAGE: rescript\nCODE:\n```\ntype element\ntype dom\n\n@send @return(nullable)\nexternal getElementById: (dom, string) => option<element> = \"getElementById\"\n\nlet test = dom => {\n  let elem = dom->(getElementById(\"haha\"))\n  switch (elem) {\n  | None => 1\n  | Some(_ui) => 2\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction test(dom) {\n  var elem = dom.getElementById(\"haha\");\n  if (elem == null) {\n    return 1;\n  } else {\n    console.log(elem);\n    return 2;\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Binding JS Object Using ReScript Record\nDESCRIPTION: Shows how to bind a JavaScript object with fixed fields using a ReScript record type. Demonstrates type definition and external binding with module import.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/bind-to-js-object.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype person = {\n  name: string,\n  friends: array<string>,\n  age: int,\n}\n\n@module(\"MySchool\") external john: person = \"john\"\n\nlet johnName = john.name\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar MySchool = require(\"MySchool\");\n\nvar johnName = MySchool.john.name;\n```\n\n----------------------------------------\n\nTITLE: Using useFriendStatus Hook in FriendListItem Component\nDESCRIPTION: Implementation of a FriendListItem component that uses the same custom useFriendStatus hook to display a friend's status with different colors. This demonstrates how the same hook can be reused across components.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/hooks-custom.mdx#2025-04-18_snippet_4\n\nLANGUAGE: ReScript\nCODE:\n```\n// FriendListItem.res\n@react.component\nlet make = (~friend: friend) => {\n  let onlineState = FriendStatusHook.useFriendStatus(friend.id);\n\n  let color = switch(onlineState) {\n    | Offline => \"red\"\n    | Online => \"green\"\n    | Loading => \"grey\"\n  }\n\n  <li style={ReactDOMStyle.make(~color,())}>\n      {React.string(friend.name)}\n  </li>\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction FriendListItem(Props) {\n  var friend = Props.friend;\n  var onlineState = useFriendStatus(friend.id);\n  var color;\n  switch (onlineState) {\n    case /* Offline */0 :\n        color = \"red\";\n        break;\n    case /* Loading */1 :\n        color = \"grey\";\n        break;\n    case /* Online */2 :\n        color = \"green\";\n        break;\n\n  }\n  return React.createElement(\"li\", {\n              style: {\n                color: color\n              }\n            }, friend.name);\n}\n```\n\n----------------------------------------\n\nTITLE: Matching on Exceptions in ReScript\nDESCRIPTION: Demonstrates how to use pattern matching to handle exceptions, allowing for graceful error handling and recovery from exceptional cases.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_11\n\nLANGUAGE: reason\nCODE:\n```\nswitch (List.find(i => i === theItem, myItems)) {\n| item => Js.log(item)\n| exception Not_found => Js.log(\"No such item found!\")\n};\n```\n\nLANGUAGE: ml\nCODE:\n```\nlet () = match List.find (fun i -> i == theItem) myItems with\n| item -> Js.log item\n| exception Not_found -> Js.log \"No such item found!\"\n```\n\nLANGUAGE: js\nCODE:\n```\nvar exit = 0;\n\nvar item;\n\ntry {\n  item = List.find(function(i) {\n    return i === theItem;\n  }, myItems);\n  exit = 1;\n}\ncatch (raw_exn){\n  var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);\n  if (exn.RE_EXN_ID === \"Not_found\") {\n    console.log(\"No such item found!\");\n  } else {\n    throw exn;\n  }\n}\n\nif (exit === 1) {\n  console.log(item);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dependency Injection with Module Functions\nDESCRIPTION: Demonstrates how to use module functions for dependency injection by creating a database connection module with injected configuration.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/module-functions.mdx#2025-04-18_snippet_9\n\nLANGUAGE: res\nCODE:\n```\nmodule type DbConfig = {\n  let host: string\n  let database: string\n  let username: string\n  let password: string\n}\n\nmodule MakeDbConnection = (Config: DbConfig) => {\n  type client = {\n    write: string => unit,\n    read: string => string,\n  }\n  @module(\"database.js\")\n  external makeClient: (string, string, string, string) => client = \"makeClient\"\n\n  let client = makeClient(Config.host, Config.database, Config.username, Config.password)\n}\n\nmodule Db = MakeDbConnection({\n  let host = \"localhost\"\n  let database = \"mydb\"\n  let username = \"root\"\n  let password = \"password\"\n})\n\nlet updateDb = Db.client.write(\"new value\")\n```\n\nLANGUAGE: js\nCODE:\n```\n// Generated by ReScript, PLEASE EDIT WITH CARE\n\nimport * as DatabaseJs from \"database.js\";\n\nfunction MakeDbConnection(Config) {\n  var client = DatabaseJs.makeClient(Config.host, Config.database, Config.username, Config.password);\n  return {\n          client: client\n        };\n}\n\nvar client = DatabaseJs.makeClient(\"localhost\", \"mydb\", \"root\", \"password\");\n\nvar Db = {\n  client: client\n};\n\nvar updateDb = client.write(\"new value\");\n\nexport {\n  MakeDbConnection ,\n  Db ,\n  updateDb ,\n}\n/* client Not a pure module */\n```\n\n----------------------------------------\n\nTITLE: Ignoring Arguments in External JavaScript Function Bindings\nDESCRIPTION: Shows how to hide external function parameters in JavaScript output using the @ignore annotation. This is useful for adding type constraints in ReScript without affecting JavaScript code.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/bind-to-js-function.mdx#2025-04-18_snippet_8\n\nLANGUAGE: res\nCODE:\n```\n@val external doSomething: (@ignore 'a, 'a) => unit = \"doSomething\"\n\ndoSomething(\"this only shows up in ReScript code\", \"test\")\n```\n\nLANGUAGE: js\nCODE:\n```\ndoSomething(\"test\");\n```\n\n----------------------------------------\n\nTITLE: Array Type with Generic Parameters in ReScript\nDESCRIPTION: Demonstrates how array types in ReScript use type parameters to create arrays of different element types.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/type.mdx#2025-04-18_snippet_7\n\nLANGUAGE: res\nCODE:\n```\n// inferred as `array<string>`\nlet greetings = [\"hello\", \"world\", \"how are you\"]\n```\n\nLANGUAGE: js\nCODE:\n```\n// inferred as `array<string>`\nvar greetings = [\"hello\", \"world\", \"how are you\"];\n```\n\n----------------------------------------\n\nTITLE: Using the PersonData Module in a React Component\nDESCRIPTION: Demonstrates using the generated PersonData module's log function and Render component within a React component.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/module-functions.mdx#2025-04-18_snippet_8\n\nLANGUAGE: res\nCODE:\n```\n@react.component\nlet make = (~person) => {\n  let handleClick = _ => PersonData.log(person)\n  <div>\n    {React.string(\"Hello \")}\n    <PersonData.Render value=person />\n    <button onClick=handleClick>\n      {React.string(\"Log value to console\")}\n    </button>\n  </div>\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction Person$1(props) {\n  var person = props.person;\n  var handleClick = function (param) {\n    log(person);\n  };\n  return JsxRuntime.jsxs(\"div\", {\n              children: [\n                \"Hello \",\n                JsxRuntime.jsx(Person$MakeDataModule$Render, {\n                      value: person\n                    }),\n                JsxRuntime.jsx(\"button\", {\n                      children: \"Log value to console\",\n                      onClick: handleClick\n                    })\n              ]\n            });\n}\n```\n\n----------------------------------------\n\nTITLE: Exhaustiveness Checking in Pattern Matching (ReScript)\nDESCRIPTION: Demonstrates ReScript's compile-time exhaustiveness checking feature which ensures all possible cases are handled, preventing common runtime errors.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_19\n\nLANGUAGE: res\nCODE:\n```\nlet message = switch person1 {\n| Teacher({name: \"Mary\" | \"Joe\"}) =>\n  `Hey, still going to the party on Saturday?`\n| Student({name, reportCard: {passing: true, gpa}}) =>\n  `Congrats ${name}, nice GPA of ${Js.Float.toString(gpa)} you got there!`\n| Student({\n    reportCard: {gpa: 0.0},\n    status: Vacations(daysLeft) | Sabbatical(daysLeft)\n  }) =>\n  `Come back in ${Js.Int.toString(daysLeft)} days!`\n| Student({status: Sick}) =>\n  `How are you feeling?`\n| Student({name}) =>\n  `Good luck next semester ${name}!`\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nif (person1.TAG) {\n  var match$1 = person1.status;\n  var name = person1.name;\n  var match$2 = person1.reportCard;\n  if (match$2.passing) {\n    \"Congrats \" + name + \", nice GPA of \" + match$2.gpa.toString() + \" you got there!\";\n  } else if (typeof match$1 === \"number\") {\n    if (match$1 !== 0) {\n      \"Good luck next semester \" + name + \"!\";\n    } else {\n      \"How are you feeling?\";\n    }\n  } else if (person1.reportCard.gpa !== 0.0) {\n    \"Good luck next semester \" + name + \"!\";\n  } else {\n    \"Come back in \" + match$1._0.toString() + \" days!\";\n  }\n} else {\n  switch (person1.name) {\n    case \"Joe\":\n    case \"Mary\":\n      break;\n    default:\n      throw {\n        RE_EXN_ID: \"Match_failure\",\n        _1: [\n          \"playground.res\",\n          13,\n          0\n        ],\n        Error: new Error()\n      };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Deep Equality in ReScript\nDESCRIPTION: Shows the usage of deep equality operator (==) in ReScript and its compilation to JavaScript. Demonstrates how it handles complex comparisons using the Caml_obj library.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/equality-comparison.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet t1 = 1 == 1 // true\nlet t2 = \"foo\" == \"foo\" // true\nlet t3 = { \"foo\": \"bar\" } == { \"foo\": \"bar\"} // true\n\nlet doStringsMatch = (s1: string, s2: string) => s1 == s2\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Caml_obj from \"./stdlib/caml_obj.js\";\n\nvar t1 = true;\nvar t2 = true;\nvar t3 = Caml_obj.equal({ foo: \"bar\" }, { foo: \"bar\" });\n\nfunction doStringsMatch(s1, s2) {\n  return s1 === s2;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing List Items with Pattern Matching in ReScript\nDESCRIPTION: Demonstrates how to access list items using pattern matching with switch. This example shows handling both empty lists and extracting the head and rest of a list.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/array-and-list.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nlet message =\n  switch myList {\n  | list{} => \"This list is empty\"\n  | list{a, ...rest} => \"The head of the list is the string \" ++ Js.Int.toString(a)\n  }\n```\n\nLANGUAGE: js\nCODE:\n```\nvar message = myList\n  ? \"The head of the list is the string \" + (1).toString()\n  : \"This list is empty\";\n```\n\n----------------------------------------\n\nTITLE: Destructuring in Function Parameters in ReScript\nDESCRIPTION: Demonstrates using destructuring directly in function parameters to extract data.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_2\n\nLANGUAGE: ReScript\nCODE:\n```\ntype result =\n  | Success(string)\nlet displayMessage = (Success(m)) => {\n  // we've directly extracted the success message\n  // string by destructuring the parameter\n  Console.log(m)\n}\ndisplayMessage(Success(\"You did it!\"))\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction displayMessage(m) {\n  console.log(m._0);\n}\n\ndisplayMessage(/* Success */{\n  _0: \"You did it!\"\n});\n```\n\n----------------------------------------\n\nTITLE: Implicit Type Conversion in String Interpolation\nDESCRIPTION: Using the j-prefixed string interpolation to implicitly convert non-string values to strings without explicit conversion.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/primitive-types.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\nlet age = 10\nlet message = j`Today I am $age years old.`\n```\n\nLANGUAGE: js\nCODE:\n```\nvar message = \"Today I am \" + 10 + \" years old.\";\n```\n\n----------------------------------------\n\nTITLE: Creating Mutable Reference in ReScript\nDESCRIPTION: Shows how to create a mutable reference (ref) in ReScript with its JavaScript output. The ref wraps a value in a record with a mutable contents field.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/mutation.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nlet myValue = ref(5)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar myValue = {\n  contents: 5\n};\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Records in ReScript\nDESCRIPTION: Shows how to define and use records (similar to objects) in ReScript, including type definition and object spread syntax.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/overview.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ReScript\nCODE:\n```\ntype point = {x: int, mutable y: int}\n```\n\nLANGUAGE: ReScript\nCODE:\n```\n{...point, x: 30}\n```\n\n----------------------------------------\n\nTITLE: Binding to JavaScript Module Function with External in ReScript\nDESCRIPTION: This snippet demonstrates how to use the `external` keyword with the `@module` decorator to bind to a JavaScript module function. It binds to the 'dirname' function from the 'path' module and then uses it to process a file path.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/language_external.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\n@module(\"path\")\nexternal dirname: string => string = \"dirname\"\n\nlet root = dirname(\"/User/github\")\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar Path = require(\"path\");\nvar root = Path.dirname(\"/User/github\");\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching on Nullable Values with Unboxed Variants in ReScript\nDESCRIPTION: Demonstrates how to define and use an unboxed nullable type in ReScript. The example shows the definition of a Null module with unboxed variants and how to safely pattern match on nested nullable values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/variant.mdx#2025-04-18_snippet_11\n\nLANGUAGE: rescript\nCODE:\n```\nmodule Null = {\n  @unboxed type t<'a> = Present('a) | @as(null) Null\n}\n\ntype userAge = {ageNum: Null.t<int>}\n\ntype rec user = {\n  name: string,\n  age: Null.t<userAge>,\n  bestFriend: Null.t<user>,\n}\n\nlet getBestFriendsAge = user =>\n  switch user.bestFriend {\n  | Present({age: Present({ageNum: Present(ageNum)})}) => Some(ageNum)\n  | _ => None\n  }\n```\n\n----------------------------------------\n\nTITLE: Using Pipe with External Bindings in ReScript\nDESCRIPTION: Demonstrates how the pipe operator creates a cleaner, more readable approach to JavaScript method chaining in ReScript, making the code flow visually similar to the original JavaScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/pipe.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet result = [1, 2, 3]\n  ->map(a => a + 1)\n  ->filter(a => mod(a, 2) == 0)\n\nasyncRequest()->setWaitDuration(4000)->send\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = [1, 2, 3].map(function(a) {\n  return a + 1 | 0;\n}).filter(function(a) {\n  return a % 2 === 0;\n});\n\nasyncRequest().setWaitDuration(4000).send();\n```\n\n----------------------------------------\n\nTITLE: Binding to JavaScript String Enums with Polymorphic Variants in ReScript\nDESCRIPTION: Demonstrates how to create type-safe bindings to JavaScript string enums using polymorphic variants, enabling zero-cost interoperability with TypeScript enums.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/polymorphic-variant.mdx#2025-04-18_snippet_10\n\nLANGUAGE: res\nCODE:\n```\ntype direction = [ #UP | #DOWN | #LEFT | #RIGHT ]\n@module(\"./direction.js\") external myDirection: direction = \"myDirection\"\n```\n\nLANGUAGE: js\nCODE:\n```\nvar DirectionJs = require(\"./direction.js\");\n\nvar myDirection = DirectionJs.myDirection;\n```\n\n----------------------------------------\n\nTITLE: Binding to JavaScript Module That's a Class\nDESCRIPTION: Shows how to chain @new and @module attributes when the JavaScript module being imported is itself a class, allowing direct instantiation of imported module classes.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/bind-to-js-object.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\ntype t\n@new @module external book: unit => t = \"Book\"\nlet myBook = book()\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar Book = require(\"Book\");\nvar myBook = new Book();\n```\n\n----------------------------------------\n\nTITLE: Creating a JS Object in ReScript\nDESCRIPTION: Demonstrates two ways to create a JavaScript object in ReScript: using object literal syntax and using a record type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/newcomer-examples.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\nlet student1 = {\n  \"name\": \"John\",\n  \"age\": 30,\n};\n```\n\nLANGUAGE: ml\nCODE:\n```\nlet student1 = [%bs.obj {\n  name = \"John\";\n  age = 30\n}]\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar student1 = {\n  name: \"John\",\n  age: 30,\n};\n```\n\nLANGUAGE: reason\nCODE:\n```\ntype payload = {\n  name: string,\n  age: int,\n};\n\nlet student1 = {\n  name: \"John\",\n  age: 30,\n};\n```\n\nLANGUAGE: ml\nCODE:\n```\ntype payload = {\n  name: string;\n  age: int;\n}\n\nlet student1 = {\n  name = \"John\";\n  age = 30;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar student1 = {\n  name: \"John\",\n  age: 30,\n};\n```\n\n----------------------------------------\n\nTITLE: Error Handling with Async/Await in ReScript\nDESCRIPTION: Demonstrates error handling in async functions using try/catch or switch with exception cases. Both JavaScript exceptions and ReScript-defined exceptions can be caught, with JS exceptions automatically packaged into the JsError exception.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/function.mdx#2025-04-18_snippet_19\n\nLANGUAGE: res\nCODE:\n```\nexception SomeReScriptException\n\nlet somethingThatMightThrow = async () => raise(SomeReScriptException)\n\nlet someAsyncFn = async () => {\n  switch await somethingThatMightThrow() {\n  | data => Some(data)\n  | exception JsError(_) => None\n  | exception SomeReScriptException => None\n  }\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar SomeReScriptException = /* @__PURE__ */Caml_exceptions.create(\"Example.SomeReScriptException\");\n\nasync function someAsyncFn(param) {\n  var data;\n  try {\n    data = await somethingThatMightThrow(undefined);\n  }\n  catch (raw_exn){\n    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);\n    if (exn.RE_EXN_ID === \"JsError\") {\n      return ;\n    }\n    if (exn.RE_EXN_ID === SomeReScriptException) {\n      return ;\n    }\n    throw exn;\n  }\n  return data;\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Module Types from Existing Modules in ReScript\nDESCRIPTION: Demonstrates how to extract and extend module types from existing modules using the 'module type of' syntax, useful when working with modules that don't explicitly define their types.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/module.mdx#2025-04-18_snippet_10\n\nLANGUAGE: res\nCODE:\n```\nmodule type MyList = {\n  include (module type of List)\n  let myListFun: list<'a> => list<'a>\n}\n```\n\nLANGUAGE: js\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Using Inline Records for Labeled Variant Payloads in ReScript\nDESCRIPTION: Shows how to use an inline record syntax to label the fields of variant constructors with multiple arguments, improving code readability.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/variant.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\ntype user =\n  | Number(int)\n  | Id({name: string, password: string})\n\nlet me = Id({name: \"Joe\", password: \"123\"})\n```\n\nLANGUAGE: js\nCODE:\n```\nvar me = {\n  TAG: /* Id */1,\n  name: \"Joe\",\n  password: \"123\"\n};\n```\n\n----------------------------------------\n\nTITLE: Applying Inline Styles with ReactDOM.Style.make in ReScript React\nDESCRIPTION: Creates inline styles for a div element using ReactDOM.Style.make, which provides type-safe CSS properties as labeled arguments and returns an opaque style object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/styling.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\n<div style={ReactDOM.Style.make(~color=\"#444444\", ~fontSize=\"68px\", ())} />\n```\n\n----------------------------------------\n\nTITLE: String Interpolation in ReScript\nDESCRIPTION: Demonstrates ReScript's string interpolation syntax which supports multiline strings, no special character escaping, and variable interpolation using ${}.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/primitive-types.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nlet name = \"Joe\"\n\nlet greeting = `Hello\nWorld\n👋\n${name}\n`\n```\n\nLANGUAGE: js\nCODE:\n```\nvar name = \"Joe\";\n\nvar greeting = \"Hello\\nWorld\\n👋\\n\" + name + \"\\n\";\n```\n\n----------------------------------------\n\nTITLE: Using React Context for Theme Sharing in ReScript\nDESCRIPTION: Implements the same theming functionality using React Context. This approach creates a ThemeContext module with a provider component, allowing the theme value to be accessed directly by components without explicit prop passing through intermediate elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/context.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\n// src/App.res\n\nmodule ThemeContext = {\n  type theme = Light | Dark\n  let context = React.createContext(Light)\n\n  module Provider = {\n    let make = React.Context.provider(context)\n  }\n}\n\nmodule Button = {\n  @react.component\n  let make = (~theme) => {\n    let className = switch theme {\n    | ThemeContext.Light => \"theme-light\"\n    | Dark => \"theme-black\"\n    }\n    <button className> {React.string(\"Click me\")} </button>\n  }\n}\n\nmodule ThemedButton = {\n  @react.component\n  let make = () => {\n    let theme = React.useContext(ThemeContext.context)\n\n    <Button theme />\n  }\n}\n\nmodule Toolbar = {\n  @react.component\n  let make = () => {\n    <div>\n      <ThemedButton />\n    </div>\n  }\n}\n\n@react.component\nlet make = () => {\n  <ThemeContext.Provider value=ThemeContext.Dark>\n    <div>\n      <Toolbar />\n    </div>\n  </ThemeContext.Provider>\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar context = React.createContext(/* Light */0);\n\nvar make = context.Provider;\n\nvar Provider = {\n  make: make\n};\n\nvar ThemeContext = {\n  context: context,\n  Provider: Provider\n};\n\nfunction App$Button(props) {\n  var className = props.theme ? \"theme-black\" : \"theme-light\";\n  return React.createElement(\"button\", {\n              className: className\n            }, \"Click me\");\n}\n\nvar Button = {\n  make: App$Button\n};\n\nfunction App$ThemedButton(props) {\n  var theme = React.useContext(context);\n  return React.createElement(App$Button, {\n              theme: theme\n            });\n}\n\nvar ThemedButton = {\n  make: App$ThemedButton\n};\n\nfunction App$Toolbar(props) {\n  return React.createElement(\"div\", undefined, React.createElement(App$ThemedButton, {}));\n}\n\nvar Toolbar = {\n  make: App$Toolbar\n};\n\nfunction App(props) {\n  return React.createElement(make, {\n              value: /* Dark */1,\n              children: React.createElement(\"div\", undefined, React.createElement(App$Toolbar, {}))\n            });\n}\n```\n\n----------------------------------------\n\nTITLE: Interoperating with JavaScript APIs using ReScript Objects\nDESCRIPTION: Demonstrates how to quickly bind to JavaScript APIs using ReScript objects without explicit type declarations, leveraging type inference.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/object.mdx#2025-04-18_snippet_5\n\nLANGUAGE: ReScript\nCODE:\n```\n// The type of document is just some random type 'a\n// that we won't bother to specify\n@val external document: 'a = \"document\"\n\n// call a method\ndocument[\"addEventListener\"](\"mouseup\", _event => {\n  Js.log(\"clicked!\")\n})\n\n// get a property\nlet loc = document[\"location\"]\n\n// set a property\ndocument[\"location\"][\"href\"] = \"rescript-lang.org\"\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ndocument.addEventListener(\"mouseup\", function(_event) {\n  console.log(\"clicked!\");\n});\nvar loc = document.location;\ndocument.location.href = \"rescript-lang.org\";\n```\n\n----------------------------------------\n\nTITLE: CSS Modules Example in ReScript\nDESCRIPTION: Demonstrates importing CSS modules in ReScript using external bindings. This approach maps CSS class names to properties in a JavaScript object that can be accessed in React components.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/styling.mdx#2025-04-18_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n/* styles.module.css */\n\n.root {\n  color: red;\n}\n```\n\n----------------------------------------\n\nTITLE: Optional Arguments with Default Values\nDESCRIPTION: Defining optional arguments with default values that apply when the argument is not provided. Optional arguments with defaults aren't wrapped in the option type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/function.mdx#2025-04-18_snippet_13\n\nLANGUAGE: res\nCODE:\n```\nlet drawCircle = (~radius=1, ~color) => {\n  setColor(color)\n  startAt(radius, radius)\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction drawCircle(radiusOpt, color) {\n  var radius = radiusOpt !== undefined ? radiusOpt : 1;\n  setColor(color);\n  return startAt(radius, radius);\n}\n```\n\n----------------------------------------\n\nTITLE: Friend Status Component with Cleanup in ReScript\nDESCRIPTION: Implements a component that subscribes to a friend's online status and cleans up the subscription when unmounting. Shows how to use useEffect with a cleanup function to prevent memory leaks.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/hooks-effect.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\n// FriendStatus.res\n\nmodule ChatAPI = {\n  // Imaginary globally available ChatAPI for demo purposes\n  type status = { isOnline: bool };\n  @val external subscribeToFriendStatus: (string, status => unit) => unit = \"subscribeToFriendStatus\";\n  @val external unsubscribeFromFriendStatus: (string, status => unit) => unit = \"unsubscribeFromFriendStatus\";\n}\n\ntype state = Offline | Loading | Online;\n\n@react.component\nlet make = (~friendId: string) => {\n  let (state, setState) = React.useState(_ => Offline)\n\n  React.useEffect(() => {\n    let handleStatusChange = (status) => {\n      setState(_ => {\n        status.ChatAPI.isOnline ? Online : Offline\n      })\n    }\n\n    ChatAPI.subscribeToFriendStatus(friendId, handleStatusChange);\n    setState(_ => Loading);\n\n    let cleanup = () => {\n      ChatAPI.unsubscribeFromFriendStatus(friendId, handleStatusChange)\n    }\n\n    Some(cleanup)\n  })\n\n  let text = switch(state) {\n    | Offline => friendId ++ \" is offline\"\n    | Online => friendId ++ \" is online\"\n    | Loading => \"loading...\"\n  }\n\n  <div>\n  \t{React.string(text)}\n  </div>\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction FriendStatus(Props) {\n  var friendId = Props.friendId;\n  var match = React.useState(function () {\n        return /* Offline */0;\n      });\n  var setState = match[1];\n  React.useEffect(function () {\n        var handleStatusChange = function (status) {\n          return Curry._1(setState, (function (param) {\n                        if (status.isOnline) {\n                          return /* Online */2;\n                        } else {\n                          return /* Offline */0;\n                        }\n                      }));\n        };\n        subscribeToFriendStatus(friendId, handleStatusChange);\n        Curry._1(setState, (function (param) {\n                return /* Loading */1;\n              }));\n        return (function (param) {\n                  unsubscribeFromFriendStatus(friendId, handleStatusChange);\n\n                });\n      });\n  var text;\n  switch (match[0]) {\n    case /* Offline */0 :\n        text = friendId + \" is offline\";\n        break;\n    case /* Loading */1 :\n        text = \"loading...\";\n        break;\n    case /* Online */2 :\n        text = friendId + \" is online\";\n        break;\n\n  }\n  return React.createElement(\"div\", undefined, text);\n}\n```\n\n----------------------------------------\n\nTITLE: Record and Variant Destructuring in ReScript\nDESCRIPTION: Shows how to destructure records and variants in ReScript, extracting specific fields or variant payload values into local variables.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\n// Record\ntype student = {name: string, age: int}\nlet student1 = {name: \"John\", age: 10}\nlet {name} = student1 // \"John\" assigned to `name`\n\n// Variant\ntype result =\n  | Success(string)\nlet myResult = Success(\"You did it!\")\nlet Success(message) = myResult // \"You did it!\" assigned to `message`\n```\n\nLANGUAGE: js\nCODE:\n```\nvar student1 = {\n  name: \"John\",\n  age: 10\n};\nvar name = \"John\";\n\nvar myResult = /* Success */{\n  _0: \"You did it!\"\n};\nvar message = \"You did it!\"\n\nvar myArray = [1, 2, 3];\nif (myArray.length !== 2) {\n  throw {\n    RE_EXN_ID: \"Match_failure\",\n    _1: [\n      \"playground.res\",\n      14,\n      4\n    ],\n    Error: new Error()\n  };\n}\nvar item1 = myArray[0];\nvar item2 = myArray[1];\n\nvar myList = {\n  hd: 1,\n  tl: {\n    hd: 2,\n    tl: {\n      hd: 3,\n      tl: /* [] */0\n    }\n  }\n};\n// ...\n```\n\n----------------------------------------\n\nTITLE: Type-Safe Timer Binding with Abstract Types\nDESCRIPTION: Improved version of setTimeout binding using abstract types to ensure type safety when clearing timeouts. Uses a custom timerId type to prevent invalid timer ID usage.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/bind-to-global-js-values.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\ntype timerId\n@val external setTimeout: (unit => unit, int) => timerId = \"setTimeout\"\n@val external clearTimeout: timerId => unit = \"clearTimeout\"\n\nlet id = setTimeout(() => Js.log(\"hello\"), 100)\nclearTimeout(id)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar id = setTimeout(function (param) {\n  console.log(\"hello\");\n}, 100);\n\nclearTimeout(id);\n```\n\n----------------------------------------\n\nTITLE: Pipe Placeholders in ReScript\nDESCRIPTION: Demonstrates the use of placeholders with the pipe operator to fill in arguments later.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/pipe.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet addTo7 = (x) => add3(3, x, 4)\nlet addTo7 = add3(3, _, 4)\n```\n\nLANGUAGE: rescript\nCODE:\n```\nmakePerson(~age=47)\n  ->namePerson(\"Jane\")\n```\n\nLANGUAGE: rescript\nCODE:\n```\ngetName(input)\n  ->namePerson(personDetails, _)\n```\n\nLANGUAGE: rescript\nCODE:\n```\ngetName(input)\n  ->namePerson(~person=personDetails, ~name=_)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nnamePerson(makePerson(47), \"Jane\");\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar __x = getName(input);\nnamePerson(personDetails, __x);\n```\n\n----------------------------------------\n\nTITLE: Mutually Recursive Functions\nDESCRIPTION: Defining mutually recursive functions using the 'rec' and 'and' keywords. This allows two or more functions to call each other recursively.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/function.mdx#2025-04-18_snippet_16\n\nLANGUAGE: res\nCODE:\n```\nlet rec callSecond = () => callFirst()\nand callFirst = () => callSecond()\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction callSecond(_param) {\n  while(true) {\n    _param = undefined;\n    continue ;\n  };\n}\n\nfunction callFirst(_param) {\n  while(true) {\n    _param = undefined;\n    continue ;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Using External Binding to Create JS Object\nDESCRIPTION: Shows how to use the external binding function to create a JavaScript object with the specified fields.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/generate-converters-accessors.mdx#2025-04-18_snippet_24\n\nLANGUAGE: rescript\nCODE:\n```\nlet homeRoute = route(\n  ~\\\"type\"=\"GET\",\n  ~path=\"/\",\n  ~action=_ => Js.log(\"Home\"),\n  (),\n)\n```\n\n----------------------------------------\n\nTITLE: Using useFriendStatus Hook in FriendStatus Component\nDESCRIPTION: Implementation of a FriendStatus component that uses the custom useFriendStatus hook to display a friend's online status. The component receives a friend object as a prop and renders text based on the online state returned by the hook.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/hooks-custom.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ReScript\nCODE:\n```\n// FriendStatus.res\ntype friend = { id: string };\n\n@react.component\nlet make = (~friend: friend) => {\n  let onlineState = FriendStatusHook.useFriendStatus(friend.id);\n\n  let status = switch(onlineState) {\n    | FriendStatusHook.Online => \"Online\"\n    | Loading => \"Loading\"\n    | Offline => \"Offline\"\n  }\n\n  React.string(status);\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction FriendStatus(Props) {\n  var friend = Props.friend;\n  var onlineState = useFriendStatus(friend.id);\n  var color;\n  switch (onlineState) {\n    case /* Offline */0 :\n        color = \"red\";\n        break;\n    case /* Loading */1 :\n        color = \"grey\";\n        break;\n    case /* Online */2 :\n        color = \"green\";\n        break;\n\n  }\n  return React.createElement(\"li\", {\n              style: {\n                color: color\n              }\n            }, friend.name);\n}\n```\n\n----------------------------------------\n\nTITLE: Type-Safe Array Access with Undefined Return in ReScript\nDESCRIPTION: The getUndefined function provides type-safe array access, returning Js.undefined if the index is out of range. It has the same runtime behavior as getUnsafe but with better type safety.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/array.mdx#2025-04-18_snippet_5\n\nLANGUAGE: ReScript\nCODE:\n```\nlet getUndefined: (array<'a>, int) => Js.undefined<'a>\n```\n\n----------------------------------------\n\nTITLE: Promise Type Definition\nDESCRIPTION: Generic type definition for Promise with covariant type parameter\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/promise.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype t<+'a>\n```\n\n----------------------------------------\n\nTITLE: Declaring Polymorphic Variant Types in ReScript\nDESCRIPTION: Shows how to pre-declare a polymorphic variant type in ReScript. Unlike regular variants, type declaration is optional but can be useful for documentation and type checking.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/polymorphic-variant.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\n// Note the surrounding square brackets, and # for constructors\ntype color = [#red | #green | #blue]\n```\n\n----------------------------------------\n\nTITLE: Optional Labeled Arguments With Default Value\nDESCRIPTION: Shows how to implement optional labeled arguments with default values in ReScript. The print function includes a default logLevel of #info and handles different logging levels.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/language_optional_labeled_argument.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\nlet print = (text, ~logLevel=#info) => {\n  switch logLevel {\n  | #error => Console.error(text)\n  | #warn => Console.warn(text)\n  | #info => Console.log(text)\n  }\n}\n\nprint(\"An info\")\nprint(\"A warning\", ~logLevel=#warn)\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction print(text, logLevelOpt) {\n  var logLevel = logLevelOpt !== undefined ? logLevelOpt : \"info\";\n  if (logLevel === \"warn\") {\n    console.warn(text);\n  } else if (logLevel === \"error\") {\n    console.error(text);\n  } else {\n    console.log(text);\n  }\n}\n\nprint(\"An info\", undefined);\n\nprint(\"A warning\", \"warn\");\n```\n\n----------------------------------------\n\nTITLE: ReScript Logger Usage Example\nDESCRIPTION: Demonstration of using the scoped polymorphic logger with different data types in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/scoped-polymorphic-types.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet myLogger = getLogger()\n\nmyLogger.log(\"Hello, ReScript!\")\nmyLogger.log(42)\n```\n\n----------------------------------------\n\nTITLE: Handling Nullable Values\nDESCRIPTION: Shows how to work with nullable values in ReScript using option types and Js.Nullable.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/interop-cheatsheet.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet a = Some(5) // compiles to 5\nlet b = None // compiles to undefined\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar a = 5;\nvar b;\n```\n\n----------------------------------------\n\nTITLE: Customizing ReScript Variants with @tag and @as Attributes\nDESCRIPTION: Demonstration of the new customizable variant representation in ReScript v11 using @tag to specify a discriminator property and @as to customize variant case values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2023-04-17-improving-interop.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\n@tag(\"state\")\ntype loadingState = | @as(\"loading\") Loading({ready: bool}) | @as(\"error\") Error({message: string}) | @as(\"done\") Done({data: data})\n\nlet state = Error({message: \"Something went wrong!\"})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar state = {\n  state: \"error\",\n  message: \"Something went wrong!\",\n};\n```\n\n----------------------------------------\n\nTITLE: Using Type Escape Hatch in ReScript\nDESCRIPTION: Shows a practical example of using the type escape hatch to convert between types, useful when working with dynamic JavaScript code.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/type.mdx#2025-04-18_snippet_12\n\nLANGUAGE: res\nCODE:\n```\nexternal convertToFloat : int => float = \"%identity\"\nlet age = 10\nlet gpa = 2.1 +. convertToFloat(age)\n```\n\nLANGUAGE: js\nCODE:\n```\nvar age = 10;\nvar gpa = 2.1 + 10;\n```\n\n----------------------------------------\n\nTITLE: Promise Then Implementation\nDESCRIPTION: Chains a transformation function to a promise that returns a new promise\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/promise.mdx#2025-04-18_snippet_12\n\nLANGUAGE: rescript\nCODE:\n```\nlet then_: ('a => t<'b>, t<'a>) => t<'b>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Counter with useEffect in ReScript React\nDESCRIPTION: Creates a counter component that updates the document title on every render using useEffectOnEveryRender. It demonstrates how to use state and effects together in a ReScript React component.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/hooks-effect.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\n@react.component\nlet make = () => {\n  let (count, setCount) = React.useState(_ => 0)\n\n  React.useEffectOnEveryRender(() => {\n    open! Document\n    document->setTitle(`You clicked ${Belt.Int.toString(count)} times!`)\n    None\n  })\n\n  let onClick = (_evt) => {\n    setCount(prev => prev + 1)\n  }\n\n  let msg = \"You clicked\" ++ Belt.Int.toString(count) ++  \"times\"\n\n  <div>\n    <p>{React.string(msg)}</p>\n    <button onClick> {React.string(\"Click me\")} </button>\n  </div>\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Counter(Props) {\n  var match = React.useState(function () {\n        return 0;\n      });\n  var setCount = match[1];\n  var count = match[0];\n  React.useEffect(function () {\n        document.title = \"You clicked \" + String(count) + \" times!\";\n\n      });\n  var onClick = function (_evt) {\n    return Curry._1(setCount, (function (prev) {\n                  return prev + 1 | 0;\n                }));\n  };\n  var msg = \"You clicked\" + String(count) + \"times\";\n  return React.createElement(\"div\", undefined,\n    React.createElement(\"p\", undefined, msg),\n      React.createElement(\"button\", {\n                  onClick: onClick\n                }, \"Click me\"));\n}\n```\n\n----------------------------------------\n\nTITLE: JSX Transformation for Custom Components\nDESCRIPTION: Demonstrates how JSX for custom components is transformed into React.createElement calls in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/beyond-jsx.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\n<Friend name=\"Fred\" age=20 />\n```\n\nLANGUAGE: rescript\nCODE:\n```\n// classic\nReact.createElement(Friend.make, {name: \"Fred\", age:20})\n\n// automatic\nReact.jsx(Friend.make, {name: \"Fred\", age: 20})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nReact.createElement(Playground$Friend, { name: \"Fred\", age: 20 });\n```\n\n----------------------------------------\n\nTITLE: Creating a JavaScript Object using ReScript Records\nDESCRIPTION: Shows how to create a JavaScript object using ReScript's typed record syntax, which provides additional type safety compared to the direct object literal approach.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/newcomer-examples.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\ntype payload = {\n  name: string,\n  age: int,\n}\n\nlet student1 = {\n  name: \"John\",\n  age: 30,\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar student1 = {\n  name: \"John\",\n  age: 30,\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Upper Bound Polymorphic Variants in ReScript\nDESCRIPTION: This example shows how to use an upper bound constraint for polymorphic variants, which restricts the possible constructors to only those explicitly listed. The validRed type only allows Fire, Crimson, and Ash constructors.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/polymorphic-variant.mdx#2025-04-18_snippet_14\n\nLANGUAGE: res\nCODE:\n```\ntype validRed<'a> = [< #Fire | #Crimson | #Ash] as 'a\ntype myReds = validRed<[#Ash]>\n\n// This will fail due to unlisted constructor not defined by the lower bound\ntype notWorking = validRed<[#Purple]>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Import Example in ReScript\nDESCRIPTION: Demonstrates dynamic importing of specific module parts and entire modules using async/await syntax.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/import-from-export-to-js.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet main = async () => {\n  let add = await import(MathUtils.add)\n  let onePlusOne = add(1, 1)\n\n  Console.log(onePlusOne)\n}\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet main = async () => {\n  module Utils = await MathUtils\n\n  let twoPlusTwo = Utils.add(2, 2)\n  Console.log(twoPlusTwo)\n}\n```\n\n----------------------------------------\n\nTITLE: Prop Punning in ReScript JSX\nDESCRIPTION: Demonstrates the prop punning syntax shorthand in ReScript JSX, where attributes with the same name as their value can be written in shortened form. This makes code more concise when passing many props.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/jsx.mdx#2025-04-18_snippet_7\n\nLANGUAGE: reason\nCODE:\n```\n<MyComponent isLoading text onClick />;\n```\n\nLANGUAGE: js\nCODE:\n```\nReact.createElement(\n  MyComponent.make,\n  MyComponent.makeProps(isLoading, text, onClick, undefined)\n);\n```\n\n----------------------------------------\n\nTITLE: Exporting an ES6 Default Value from ReScript\nDESCRIPTION: Demonstrates how to export a default value from ReScript that can be imported as a default export in JavaScript. The example shows both CommonJS and ES6 module output.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/import-from-export-to-js.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ReScript\nCODE:\n```\nlet default = \"Bob\"\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar $$default = \"Bob\";\n\nexports.$$default = $$default;\nexports.default = $$default;\n// informal transpiler-compatible marker of a default export compiled from ES6\nexports.__esModule = true;\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar $$default = \"Bob\";\n\nexport {\n  $$default,\n  $$default as default,\n}\n```\n\n----------------------------------------\n\nTITLE: Array Mutation Operations\nDESCRIPTION: Examples of operations that modify the original array including copyWithin, fill, push, pop, and sort.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array-2.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet arr = [100, 101, 102, 103, 104]\nJs.Array2.copyWithin(arr, ~to_=2) == [100, 101, 100, 101, 102]\narr == [100, 101, 100, 101, 102]\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet arr = [100, 101, 102, 103, 104]\nJs.Array2.fillInPlace(arr, 99) == [99, 99, 99, 99, 99]\narr == [99, 99, 99, 99, 99]\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet arr = [\"ant\", \"bee\", \"cat\"]\nJs.Array2.push(arr, \"dog\") == 4\narr == [\"ant\", \"bee\", \"cat\", \"dog\"]\n```\n\n----------------------------------------\n\nTITLE: ReScript Promise Then Implementation\nDESCRIPTION: Function signature for chaining Promise operations using then\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/promise.mdx#2025-04-18_snippet_12\n\nLANGUAGE: res\nCODE:\n```\nlet then_: ('a => t<'b>, t<'a>) => t<'b>\n```\n\n----------------------------------------\n\nTITLE: Mutable JS Object Updates in ReScript\nDESCRIPTION: Demonstrates how to update JavaScript objects using the @set attribute and external binding.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/object.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\ntype student = {\n  @set \"age\": int,\n  @set \"name\": string,\n}\n@module(\"MyJSFile\") external student1: student = \"student1\"\n\nstudent1[\"name\"] = \"Mary\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar MyJSFile = require(\"MyJSFile\");\nMyJSFile.student1.name = \"Mary\";\n```\n\n----------------------------------------\n\nTITLE: Generating JS String Enum Converters for Polymorphic Variants in ReScript\nDESCRIPTION: Uses @deriving(jsConverter) with polymorphic variants to create conversion functions between JavaScript string enums and ReScript polymorphic variants, with customizable string values via @as.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/generate-converters-accessors.mdx#2025-04-18_snippet_12\n\nLANGUAGE: res\nCODE:\n```\n@deriving(jsConverter)\ntype fruit = [\n  | #Apple\n  | @as(\"miniCoconut\") #Kiwi\n  | #Watermelon\n]\n\nlet appleString = fruitToJs(#Apple); /* \"Apple\" */\nlet kiwiString = fruitToJs(#Kiwi); /* \"miniCoconut\" */\n```\n\n----------------------------------------\n\nTITLE: Using Render Props Pattern in ReScript React\nDESCRIPTION: Shows the idiomatic ReScript approach to component composition using a render prop function. This pattern is preferred over createElement in pure ReScript React applications.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/elements-and-jsx.mdx#2025-04-18_snippet_7\n\nLANGUAGE: ReScript\nCODE:\n```\nlet render = (renderMyComp: (~name: string) => React.element) => {\n  <div> {renderMyComp(~name=\"Franz\")} </div>\n}\n```\n\n----------------------------------------\n\nTITLE: Using Import Attributes in ReScript (Since 11.1)\nDESCRIPTION: Demonstrates how to use import attributes in ReScript by passing configuration to the @module attribute. This allows importing JSON files with type annotations when targeting JavaScript module format.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/import-from-export-to-js.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ReScript\nCODE:\n```\n@module({from: \"./myJson.json\", with: {type_: \"json\", \\\"some-exotic-identifier\\\": \"someValue\"}})\nexternal myJson: JSON.t = \"default\"\n\nConsole.log(myJson)\n```\n\nLANGUAGE: JavaScript (Module)\nCODE:\n```\nimport MyJsonJson from \"./myJson.json\" with {\"type\": \"json\", \"some-exotic-identifier\": \"someValue\"};\n\nvar myJson = MyJsonJson;\n\nconsole.log(myJson);\n```\n\n----------------------------------------\n\nTITLE: Manual Promise Flattening in ReScript\nDESCRIPTION: Shows how nested promises must be explicitly flattened in ReScript using await, unlike JavaScript where they auto-collapse.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/async-await.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet fetchData = async (userId: string): string => {\n  // We can't just return the result of `fetchUserMail`, otherwise we'd get a\n  // type error due to our function return type of type `string`\n  await fetchUserMail(userId)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Friend Status Hook in ReScript\nDESCRIPTION: A custom hook that extracts the friend status subscription logic into a reusable function. This hook encapsulates the state management and effect logic, returning the current online state that can be used by multiple components.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/hooks-custom.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\n// FriendStatusHook.res\n\n// module ChatAPI {...}\n\ntype state = Offline | Loading | Online\n\nlet useFriendStatus = (friendId: string): state => {\n  let (state, setState) = React.useState(_ => Offline)\n\n  React.useEffect(() => {\n    let handleStatusChange = status => {\n      setState(_ => {\n        status.ChatAPI.isOnline ? Online : Offline\n      })\n    }\n\n    ChatAPI.subscribeToFriendStatus(friendId, handleStatusChange)\n    setState(_ => Loading)\n\n    let cleanup = () => {\n      ChatAPI.unsubscribeFromFriendStatus(friendId, handleStatusChange)\n    }\n\n    Some(cleanup)\n  })\n\n  state\n}\n```\n\n----------------------------------------\n\nTITLE: Labeled Arguments Order in ReScript\nDESCRIPTION: Demonstrates that labeled arguments can be provided in any order. This is one of the advantages of using labeled arguments in function calls.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/function.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\naddCoordinates(~y=6, ~x=5)\n```\n\nLANGUAGE: javascript\nCODE:\n```\naddCoordinates(5, 6);\n```\n\n----------------------------------------\n\nTITLE: Complete JSX Example with Multiple Features\nDESCRIPTION: A comprehensive example showing multiple JSX features including attributes of different types, children, and the resulting JavaScript output.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/jsx.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\n<MyComponent\n  booleanAttribute={true}\n  stringAttribute=\"string\"\n  intAttribute=1\n  forcedOptional=?{Some(\"hello\")}\n  onClick={handleClick}>\n  <div> {React.string(\"hello\")} </div>\n</MyComponent>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nReact.createElement(MyComponent, {\n  children: React.createElement(\"div\", undefined, \"hello\"),\n  booleanAttribute: true,\n  stringAttribute: \"string\",\n  intAttribute: 1,\n  forcedOptional: \"hello\",\n  onClick: handleClick\n});\n```\n\n----------------------------------------\n\nTITLE: Block Scope in ReScript\nDESCRIPTION: Shows how bindings can be scoped within blocks using curly braces, making variables accessible only within that scope. The value of the last line is implicitly returned.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/let-binding.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\nlet message = {\n  let part1 = \"hello\"\n  let part2 = \"world\"\n  part1 ++ \" \" ++ part2\n}\n// `part1` and `part2` not accessible here!\n```\n\nLANGUAGE: js\nCODE:\n```\nvar message = \"hello world\";\n```\n\n----------------------------------------\n\nTITLE: Function Application with Type Annotations in ReScript\nDESCRIPTION: Demonstrates how to add type annotations when calling functions in ReScript, including with labeled arguments and optional parameters.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/function.mdx#2025-04-18_snippet_24\n\nLANGUAGE: res\nCODE:\n```\n// labeled\nadd(~first=1: int, ~second=2: int)\n// with punning sugar\nadd(~first: int, ~second: int)\n\n// application with default value. Same as normal application\nadd(~first=1: int, ~second=2: int)\n\n// explicit optional application\nadd(~first=?Some(1): option<int>, ~second=?Some(2): option<int>)\n// no punning sugar when you want to type annotate\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching with Extensible Variants in ReScript\nDESCRIPTION: Shows how to handle pattern matching with extensible variants, including the requirement for a default case due to their open-ended nature.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/extensible-variant.mdx#2025-04-18_snippet_1\n\nLANGUAGE: ReScript\nCODE:\n```\nlet print = v =>\n  switch v {\n  | Point(x, y) => Console.log2(\"Point\", (x, y))\n  | Line(ax, ay, bx, by) => Console.log2(\"Line\", (ax, ay, bx, by))\n  | Other\n  | _ => Console.log(\"Other\")\n  }\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction print(v) {\n  if (v.RE_EXN_ID === Point) {\n    console.log(\"Point\", [v._1, v._2]);\n  } else if (v.RE_EXN_ID === Line) {\n    console.log(\"Line\", [v._1, v._2, v._3, v._4]);\n  } else {\n    console.log(\"Other\");\n  } \n}\n```\n\n----------------------------------------\n\nTITLE: Importing from a Module in ReScript\nDESCRIPTION: Demonstrates how to import a binding from another module in ReScript, showing both the ReScript code and its JavaScript output. Unlike JavaScript, ReScript doesn't require explicit import statements as every file is a module.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/import-export.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\n// Inside School.res\nlet studentMessage = Student.message\n```\n\nLANGUAGE: js\nCODE:\n```\nvar Student = require(\"./Student.res.js\");\nvar studentMessage = Student.message\n```\n\n----------------------------------------\n\nTITLE: Binding to overloaded JavaScript functions using multiple externals\nDESCRIPTION: Demonstrates how to handle JavaScript's function overloading by creating multiple external bindings to the same JavaScript function with different type signatures.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/bind-to-js-function.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\n@module(\"MyGame\") external drawCat: unit => unit = \"draw\"\n@module(\"MyGame\") external drawDog: (~giveName: string) => unit = \"draw\"\n@module(\"MyGame\") external draw: (string, ~useRandomAnimal: bool) => unit = \"draw\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Array Filtering in ReScript\nDESCRIPTION: keep and keepU functions filter array elements based on a predicate function. Returns new array with elements that satisfy the predicate.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/array.mdx#2025-04-18_snippet_15\n\nLANGUAGE: rescript\nCODE:\n```\nBelt.Array.keep([1, 2, 3], (x) => mod(x, 2) == 0) == [2]\n```\n\n----------------------------------------\n\nTITLE: Error Handling with Async/Await in ReScript\nDESCRIPTION: Illustrates error handling in async functions using try/catch and pattern matching on exceptions. Shows how to handle both ReScript exceptions and JS exceptions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/function.mdx#2025-04-18_snippet_19\n\nLANGUAGE: res\nCODE:\n```\nexception SomeReScriptException\n\nlet somethingThatMightThrow = async () => raise(SomeReScriptException)\n\nlet someAsyncFn = async () => {\n  switch await somethingThatMightThrow() {\n  | data => Some(data)\n  | exception JsError(_) => None\n  | exception SomeReScriptException => None\n  }\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar SomeReScriptException = /* @__PURE__ */Caml_exceptions.create(\"Example.SomeReScriptException\");\n\nasync function someAsyncFn(param) {\n  var data;\n  try {\n    data = await somethingThatMightThrow(undefined);\n  }\n  catch (raw_exn){\n    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);\n    if (exn.RE_EXN_ID === \"JsError\") {\n      return ;\n    }\n    if (exn.RE_EXN_ID === SomeReScriptException) {\n      return ;\n    }\n    throw exn;\n  }\n  return data;\n}\n```\n\n----------------------------------------\n\nTITLE: Composing React Elements in ReScript\nDESCRIPTION: Illustrates how to compose multiple React elements into a more complex structure using JSX syntax in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/elements-and-jsx.mdx#2025-04-18_snippet_2\n\nLANGUAGE: ReScript\nCODE:\n```\nlet greeting = React.string(\"Hello \")\nlet name = React.string(\"Stranger\");\n\n\n// element is also of type React.element\nlet element = <div className=\"myElement\"> greeting name </div>\n```\n\n----------------------------------------\n\nTITLE: Handling Nullable Return Values from JavaScript Functions\nDESCRIPTION: Shows how to use @return(nullable) to automatically convert JavaScript null/undefined values to ReScript option types. This example binds to the DOM getElementById method which may return null.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/bind-to-js-function.mdx#2025-04-18_snippet_10\n\nLANGUAGE: res\nCODE:\n```\ntype element\ntype dom\n\n@send @return(nullable)\nexternal getElementById: (dom, string) => option<element> = \"getElementById\"\n\nlet test = dom => {\n  let elem = dom->(getElementById(\"haha\"))\n  switch (elem) {\n  | None => 1\n  | Some(_ui) => 2\n  }\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction test(dom) {\n  var elem = dom.getElementById(\"haha\");\n  if (elem == null) {\n    return 1;\n  } else {\n    console.log(elem);\n    return 2;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing Effects with Dependencies in ReScript\nDESCRIPTION: Shows how to optimize performance by using effect dependencies to only run effects when specific values change. Includes examples for both document title updates and subscription management.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/hooks-effect.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\nReact.useEffect1(() => {\n  open Document\n  document->setTitle(`You clicked ${Belt.Int.toString(count)} times!`)\n  None;\n}, [count])\n```\n\n----------------------------------------\n\nTITLE: Creating Record Values in ReScript\nDESCRIPTION: Shows how to create a record value based on a previously declared type. The created value is automatically inferred as the appropriate record type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/record.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet me = {\n  age: 5,\n  name: \"Big ReScript\"\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar me = {\n  age: 5,\n  name: \"Big ReScript\"\n};\n```\n\n----------------------------------------\n\nTITLE: Binding to Record-like JS Objects using ReScript Record\nDESCRIPTION: Demonstrates how to bind a JavaScript object with fixed fields as a ReScript record. This approach compiles to a clean JavaScript object and allows type-safe access to fields.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/bind-to-js-object.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype person = {\n  name: string,\n  friends: array<string>,\n  age: int,\n}\n\n@module(\"MySchool\") external john: person = \"john\"\n\nlet johnName = john.name\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar MySchool = require(\"MySchool\");\n\nvar johnName = MySchool.john.name;\n```\n\n----------------------------------------\n\nTITLE: Importing a JavaScript module function in ReScript\nDESCRIPTION: Example of binding to the Node.js path.dirname function, showing how to import and use a basic JavaScript function within ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/bind-to-js-function.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\n// Import nodejs' path.dirname\n@module(\"path\") external dirname: string => string = \"dirname\"\nlet root = dirname(\"/User/github\") // returns \"User\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar Path = require(\"path\");\nvar root = Path.dirname(\"/User/github\");\n```\n\n----------------------------------------\n\nTITLE: Using the option type in ReScript\nDESCRIPTION: Demonstrates how to use the option type to handle potentially null values and pattern match on them.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/newcomer-examples.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nlet possiblyNullValue1 = None\nlet possiblyNullValue2 = Some(\"Hello\")\n\nswitch possiblyNullValue2 {\n| None => Console.log(\"Nothing to see here.\")\n| Some(message) => Console.log(message)\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar possiblyNullValue1;\nvar possiblyNullValue2 = \"Hello\";\n\nif (possiblyNullValue2 !== undefined) {\n  console.log(possiblyNullValue2);\n} else {\n  console.log(\"Nothing to see here.\");\n}\n```\n\n----------------------------------------\n\nTITLE: Binding to CSS Modules in ReScript\nDESCRIPTION: Shows how to create bindings to CSS modules in ReScript and use the imported class names in React components. Uses the @module external binding and JavaScript object access notation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/styling.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\n// {..} means we are handling a JS object with an unknown\n// set of attributes\n@module external styles: {..} = \"./styles.module.css\"\n\n// Use the obj[\"key\"] syntax to access any classname within our object\nlet app = <div className={styles[\"root\"]} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Array somei Method in ReScript\nDESCRIPTION: Function that tests whether at least one element in the array passes the provided test with index access. Returns boolean based on predicate function result.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/array.mdx#2025-04-18_snippet_27\n\nLANGUAGE: rescript\nCODE:\n```\nlet somei: (('a, int) => bool, t<'a>) => bool\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet sameLength = (str, index) => Js.String.length(str) == index\n\nJs.Array.somei(sameLength, [\"ab\", \"cd\", \"ef\", \"gh\"]) == true\nJs.Array.somei(sameLength, [\"a\", \"bc\", \"def\", \"gh\"]) == false\n```\n\n----------------------------------------\n\nTITLE: Managing Focus for Text Input with useRef in ReScript\nDESCRIPTION: Implementation of a component that uses useRef to manage focus on a text input element. The example demonstrates how to create a ref, attach it to a DOM element, and programmatically focus the input when a button is clicked.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/hooks-ref.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\n// TextInputWithFocusButton.res\n\n@send external focus: Dom.element => unit = \"focus\"\n\n@react.component\nlet make = () => {\n  let inputEl = React.useRef(Js.Nullable.null)\n\n  let onClick = _ => {\n    inputEl.current\n    ->Js.Nullable.toOption\n    ->Belt.Option.forEach(input => input->focus)\n  }\n\n  <>\n    <input ref={ReactDOM.Ref.domRef(inputEl)} type_=\"text\" />\n    <button onClick> {React.string(\"Focus the input\")} </button>\n  </>\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction TextInputWithFocusButton(Props) {\n  var inputEl = React.useRef(null);\n  var onClick = function (param) {\n    return Belt_Option.forEach(Caml_option.nullable_to_opt(inputEl.current), (function (input) {\n                  input.focus();\n\n                }));\n  };\n  return React.createElement(React.Fragment, undefined, React.createElement(\"input\", {\n                  ref: inputEl,\n                  type: \"text\"\n                }), React.createElement(\"button\", {\n                  onClick: onClick\n                }, \"Focus the input\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Function Declaration with Type Annotations in ReScript\nDESCRIPTION: Shows how to add type annotations to various function declarations in ReScript, including for labeled parameters, default values, and optional parameters.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/function.mdx#2025-04-18_snippet_22\n\nLANGUAGE: res\nCODE:\n```\n// anonymous function\n(x: int, y: int): int => 1\n// bind to a name\nlet add = (x: int, y: int): int => 1\n\n// labeled\nlet add = (~first as x: int, ~second as y: int) : int => x + y\n// with punning sugar\nlet add = (~first: int, ~second: int) : int => first + second\n\n// labeled with default value\nlet add = (~first as x: int=1, ~second as y: int=2) : int => x + y\n// with punning sugar\nlet add = (~first: int=1, ~second: int=2) : int => first + second\n\n// optional\nlet add = (~first as x: option<int>=?, ~second as y: option<int>=?) : int => switch x {...}\n// with punning sugar\n// note that the caller would pass an `int`, not `option<int>`\n// Inside the function, `first` and `second` are `option<int>`.\nlet add = (~first: option<int>=?, ~second: option<int>=?) : int => switch first {...}\n```\n\n----------------------------------------\n\nTITLE: Composing React Elements with JSX in ReScript\nDESCRIPTION: Illustrates how to compose multiple React elements using JSX syntax in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/elements-and-jsx.mdx#2025-04-18_snippet_2\n\nLANGUAGE: ReScript\nCODE:\n```\nlet greeting = React.string(\"Hello \")\nlet name = React.string(\"Stranger\")\n\n\n// element is also of type React.element\nlet element = <div className=\"myElement\"> greeting name </div>\n```\n\n----------------------------------------\n\nTITLE: Flattened pattern matching in ReScript\nDESCRIPTION: Further improved implementation using fully flattened pattern matching, with separate cases for Some(true) and Some(false). This eliminates the nested conditional completely.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_16\n\nLANGUAGE: res\nCODE:\n```\nlet optionBoolToBool = opt => {\n  switch opt {\n  | None => false\n  | Some(true) => true\n  | Some(false) => false\n  }\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction optionBoolToBool(opt) {\n  if (opt !== undefined && opt) {\n    return true;\n  } else {\n    return false;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Raw JavaScript Integration in ReScript\nDESCRIPTION: Demonstrates how to embed raw JavaScript code in ReScript using the %raw directive and how it compiles to plain JavaScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/interop-cheatsheet.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nlet add = %raw(\"(a, b) => a + b\")\n%%raw(\"const a = 1\")\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar add = ((a, b) => a + b);\nconst a = 1\n```\n\n----------------------------------------\n\nTITLE: Binding to JS Object Fields with Getter and Setter Attributes\nDESCRIPTION: Demonstrates how to use @get and @set attributes to bind to individual fields of a JavaScript object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/bind-to-js-object.mdx#2025-04-18_snippet_4\n\nLANGUAGE: ReScript\nCODE:\n```\ntype textarea\n@set external setName: (textarea, string) => unit = \"name\"\n@get external getName: textarea => string = \"name\"\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Promise.all Array Implementation\nDESCRIPTION: Combines an array of promises into a single promise that resolves with an array of results\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/promise.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet all: array<t<'a>> => t<array<'a>>\n```\n\n----------------------------------------\n\nTITLE: Creating and using React refs in ReScript\nDESCRIPTION: A basic example showing how to create a ref with React.useRef to track click counts without triggering re-renders. The ref is initialized with 0 and incremented in an onClick handler.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/refs-and-the-dom.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\n@react.component\nlet make = () => {\n  let clicks = React.useRef(0);\n\n  let onClick = (_) => {\n    clicks.current = clicks.current + 1;\n  };\n\n  <div onClick>\n    {Belt.Int.toString(clicks.current)->React.string}\n  </div>\n}\n```\n\n----------------------------------------\n\nTITLE: Using Option Type for Conditional Values in ReScript\nDESCRIPTION: Shows how to use the Option type to represent a value that may or may not exist based on a condition.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/null-undefined-option.mdx#2025-04-18_snippet_1\n\nLANGUAGE: ReScript\nCODE:\n```\nlet licenseNumber =\n  if personHasACar {\n    Some(5)\n  } else {\n    None\n  }\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar licenseNumber = personHasACar ? 5 : undefined;\n```\n\n----------------------------------------\n\nTITLE: Creating React Elements from Primitive Types in ReScript\nDESCRIPTION: Shows how to create React elements from string, int, float, and array types using React module functions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/elements-and-jsx.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ReScript\nCODE:\n```\nReact.string(\"Hello\") // new element representing \"Hello\"\n\nReact.int(1) // new element representing \"1\"\n\nReact.float(1.0) // new element representing \"1.0\"\n\nlet element = React.array([\n  React.string(\"element 1\"),\n  React.string(\"element 2\"),\n  React.string(\"element 3\")\n])\n```\n\n----------------------------------------\n\nTITLE: Using Assert_failure Exception in ReScript\nDESCRIPTION: Shows how to use the 'Assert_failure' exception, which is raised when an assertion fails. The example demonstrates its use in a JSON decoding function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/exception.mdx#2025-04-18_snippet_4\n\nLANGUAGE: ReScript\nCODE:\n```\nlet decodeUser = (json: JSON.t) =>\n  switch json {\n  | Object(userDict) =>\n    switch (userDict->Dict.get(\"name\"), userDict->Dict.get(\"age\")) {\n    | (Some(String(name)), Some(Number(age))) => (name, age->Float.toInt)\n    | _ => assert(false)\n    }\n  | _ => assert(false)\n  }\n\n\ntry decodeUser(%raw(\"{}\"))->Console.log catch {\n| Assert_failure(loc) => Console.log(loc) // (\"filename\", line, col)\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as Caml_js_exceptions from \"./stdlib/caml_js_exceptions.js\";\n\nfunction decodeUser(json) {\n  if (!Array.isArray(json) && (json === null || typeof json !== \"object\") && typeof json !== \"number\" && typeof json !== \"string\" && typeof json !== \"boolean\") {\n    throw {\n          RE_EXN_ID: \"Assert_failure\",\n          _1: [\n            \"playground.res\",\n            8,\n            9\n          ],\n          Error: new Error()\n        };\n  }\n  if (typeof json === \"object\" && !Array.isArray(json)) {\n    var match = json[\"name\"];\n    var match$1 = json[\"age\"];\n    if (match !== undefined && !(!Array.isArray(match) && (match === null || typeof match !== \"object\") && typeof match !== \"number\" && typeof match !== \"string\" && typeof match !== \"boolean\") && typeof match === \"string\" && match$1 !== undefined && !(!Array.isArray(match$1) && (match$1 === null || typeof match$1 !== \"object\") && typeof match$1 !== \"number\" && typeof match$1 !== \"string\" && typeof match$1 !== \"boolean\") && typeof match$1 === \"number\") {\n      return [\n              match,\n              match$1 | 0\n            ];\n    }\n    throw {\n          RE_EXN_ID: \"Assert_failure\",\n          _1: [\n            \"playground.res\",\n            6,\n            11\n          ],\n          Error: new Error()\n        };\n  }\n  throw {\n        RE_EXN_ID: \"Assert_failure\",\n        _1: [\n          \"playground.res\",\n          8,\n          9\n        ],\n        Error: new Error()\n      };\n}\n\ntry {\n  console.log(decodeUser({}));\n}\ncatch (raw_loc){\n  var loc = Caml_js_exceptions.internalToOCamlException(raw_loc);\n  if (loc.RE_EXN_ID === \"Assert_failure\") {\n    console.log(loc._1);\n  } else {\n    throw loc;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Array Elements in ReScript\nDESCRIPTION: Creates a new array containing only the elements that pass the test implemented by the provided function. The predicate function takes an array element as its argument and returns a boolean.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/array.mdx#2025-04-18_snippet_12\n\nLANGUAGE: rescript\nCODE:\n```\nlet filter: ('a => bool, t<'a>) => t<'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet nonEmpty = s => s != \"\"\nJs.Array.filter(nonEmpty, [\"abc\", \"\", \"\", \"def\", \"ghi\"]) == [\"abc\", \"def\", \"ghi\"]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Shallow Equality in ReScript\nDESCRIPTION: Shows how the shallow equality operator (===) works in ReScript, comparing primitive values and objects. The operator compiles to JavaScript's strict equality or a boolean value when the compiler can determine the result at compile time.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/equality-comparison.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nlet t1 = 1 === 1 // true\nlet t2 = \"foo\" === \"foo\" // true\nlet t3 = { \"foo\": \"bar\" } === { \"foo\": \"bar\"} // false\n\nlet doStringsMatch = (s1: string, s2: string) => s1 === s2\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar t1 = true;\nvar t2 = \"foo\" === \"foo\";\nvar t3 = ({ foo: \"bar\" }) === ({ foo: \"bar\" });\n\nfunction doStringsMatch(s1, s2) {\n  return s1 === s2;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Nullable for JavaScript Interop in ReScript\nDESCRIPTION: Demonstrates how to use the Nullable module for more sophisticated null and undefined interop in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/null-undefined-option.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\n@module(\"MyConstant\") external myId: Nullable.t<string> = \"myId\"\n```\n\nLANGUAGE: js\nCODE:\n```\n// Empty output\n```\n\nLANGUAGE: res\nCODE:\n```\n@module(\"MyIdValidator\") external validate: Nullable.t<string> => bool = \"validate\"\nlet personId: Nullable.t<string> = Nullable.make(\"abc123\")\n\nlet result = validate(personId)\n```\n\nLANGUAGE: js\nCODE:\n```\nvar MyIdValidator = require(\"MyIdValidator\");\nvar personId = \"abc123\";\nvar result = MyIdValidator.validate(personId);\n```\n\n----------------------------------------\n\nTITLE: Creating and Validating Nullable Values\nDESCRIPTION: Example demonstrating how to create and validate nullable values for JavaScript interop.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/null-undefined-option.mdx#2025-04-18_snippet_5\n\nLANGUAGE: reason\nCODE:\n```\n[@bs.module \"MyIdValidator\"] external validate: Js.Nullable.t(string) => bool = \"validate\";\nlet personId: Js.Nullable.t(string) = Js.Nullable.return(\"abc123\");\n\nlet result = validate(personId);\n```\n\nLANGUAGE: ml\nCODE:\n```\nexternal validate: string Js.Nullable.t -> bool = \"validate\" [@@bs.module \"MyIdValidator\"]\nlet personId: string Js.Nullable.t = Js.Nullable.return \"abc123\"\n\nlet result = validate personId\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar MyIdValidator = require(\"MyIdValidator\");\nvar personId = \"abc123\";\nvar result = MyIdValidator.validate(personId);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Complete Preact JSX Transform in ReScript\nDESCRIPTION: A comprehensive implementation of a Preact JSX transform module that includes all the necessary components: element type definitions, component types, JSX function bindings, fragment support, and DOM element bindings. This serves as a template that can be adapted for other frameworks by changing the module references.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/jsx.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rescript\nCODE:\n```\n// Preact.res\n/* Below is a number of aliases to the common `Jsx` module */\ntype element = Jsx.element\n\ntype component<'props> = Jsx.component<'props>\n\ntype componentLike<'props, 'return> = Jsx.componentLike<'props, 'return>\n\n@module(\"preact\")\nexternal jsx: (component<'props>, 'props) => element = \"jsx\"\n\n@module(\"preact\")\nexternal jsxKeyed: (component<'props>, 'props, ~key: string=?, @ignore unit) => element = \"jsx\"\n\n@module(\"preact\")\nexternal jsxs: (component<'props>, 'props) => element = \"jsxs\"\n\n@module(\"preact\")\nexternal jsxsKeyed: (component<'props>, 'props, ~key: string=?, @ignore unit) => element = \"jsxs\"\n\n/* These identity functions and static values below are optional, but lets \nyou move things easily to the `element` type. The only required thing to \ndefine though is `array`, which the JSX transform will output. */\nexternal array: array<element> => element = \"%identity\"\n@val external null: element = \"null\"\n\nexternal float: float => element = \"%identity\"\nexternal int: int => element = \"%identity\"\nexternal string: string => element = \"%identity\"\n\n/* These are needed for Fragment (<> </>) support */\ntype fragmentProps = {children?: element}\n\n@module(\"preact\") external jsxFragment: component<fragmentProps> = \"Fragment\"\n\n/* The Elements module is the equivalent to the ReactDOM module in React. This holds things relevant to _lowercase_ JSX elements. */\nmodule Elements = {\n  /* Here you can control what props lowercase JSX elements should have. \n  A base that the React JSX transform uses is provided via JsxDOM.domProps, \n  but you can make this anything. The editor tooling will support \n  autocompletion etc for your specific type. */\n  type props = JsxDOM.domProps\n\n  @module(\"preact\")\n  external jsx: (string, props) => Jsx.element = \"jsx\"\n\n  @module(\"preact\")\n  external div: (string, props) => Jsx.element = \"jsx\"\n\n  @module(\"preact\")\n  external jsxKeyed: (string, props, ~key: string=?, @ignore unit) => Jsx.element = \"jsx\"\n\n  @module(\"preact\")\n  external jsxs: (string, props) => Jsx.element = \"jsxs\"\n\n  @module(\"preact\")\n  external jsxsKeyed: (string, props, ~key: string=?, @ignore unit) => Jsx.element = \"jsxs\"\n\n  external someElement: element => option<element> = \"%identity\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Result Type in ReScript\nDESCRIPTION: Defines the Result type as a variant with two states: Ok for successful operations and Error for erroneous operations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/result.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype t('a, 'b) =\n  | Ok('a)\n  | Error('b);\n```\n\n----------------------------------------\n\nTITLE: Using Getter and Setter Attributes for JS Object Properties\nDESCRIPTION: Demonstrates how to use @get and @set attributes to bind to individual fields of a JavaScript object. This approach provides fine-grained control over property access.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/bind-to-js-object.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\ntype textarea\n@set external setName: (textarea, string) => unit = \"name\"\n@get external getName: textarea => string = \"name\"\n```\n\nLANGUAGE: js\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Modeling this-based Callbacks in ReScript\nDESCRIPTION: Demonstrates how to handle JavaScript callbacks that rely on the 'this' context using the @this annotation. This example binds to an onload property that references 'this' in its callback.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/bind-to-js-function.mdx#2025-04-18_snippet_16\n\nLANGUAGE: res\nCODE:\n```\ntype x\n@val external x: x = \"x\"\n@set external setOnload: (x, @this ((x, int) => unit)) => unit = \"onload\"\n@get external resp: x => int = \"response\"\nsetOnload(x, @this ((o, v) => Js.log(resp(o) + v)))\n```\n\nLANGUAGE: js\nCODE:\n```\nx.onload = function (v) {\n  var o = this;\n  console.log((o.response + v) | 0);\n};\n```\n\n----------------------------------------\n\nTITLE: Complex Pattern Matching Example in ReScript\nDESCRIPTION: Demonstrates a complex pattern matching scenario with nested patterns and multiple conditions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_4\n\nLANGUAGE: ReScript\nCODE:\n```\ntype status = Vacations(int) | Sabbatical(int) | Sick | Present\ntype reportCard = {passing: bool, gpa: float}\ntype student = {name: string, status: status, reportCard: reportCard}\ntype person =\n  | Teacher({name: string, age: int})\n  | Student(student)\n\nlet person1 = Teacher({name: \"Jane\", age: 35})\n\nlet message = switch person1 {\n| Teacher({name: \"Mary\" | \"Joe\"}) =>\n  `Hey, still going to the party on Saturday?`\n| Teacher({name}) =>\n  // this is matched only if `name` isn't \"Mary\" or \"Joe\"\n  `Hello ${name}.`\n| Student({name, reportCard: {passing: true, gpa}}) =>\n  `Congrats ${name}, nice GPA of ${Float.toString(gpa)} you got there!`\n| Student({\n    reportCard: {gpa: 0.0},\n    status: Vacations(daysLeft) | Sabbatical(daysLeft)\n  }) =>\n  `Come back in ${Int.toString(daysLeft)} days!`\n| Student({status: Sick}) =>\n  `How are you feeling?`\n| Student({name}) =>\n  `Good luck next semester ${name}!`\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar person1 = {\n  TAG: \"Teacher\",\n  name: \"Jane\",\n  age: 35\n};\n\nvar message;\n\nif (person1.TAG === \"Teacher\") {\n  message = \"Hello Jane.\";\n} else {\n  var match = \"Jane\";\n  var match$1 = match.status;\n  var name = match.name;\n  var match$2 = match.reportCard;\n  if (match$2.passing) {\n    message = \"Congrats \" + name + \", nice GPA of \" + match$2.gpa.toString() + \" you got there!\";\n  } else {\n    var exit = 0;\n    if (typeof match$1 !== \"object\") {\n      message = match$1 === \"Sick\" ? \"How are you feeling?\" : \"Good luck next semester \" + name + \"!\";\n    } else {\n      exit = 1;\n    }\n    if (exit === 1) {\n      message = match.reportCard.gpa !== 0.0 ? \"Good luck next semester \" + name + \"!\" : \"Come back in \" + match$1._0.toString() + \" days!\";\n    }\n    \n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Function Declarations in JavaScript and ReScript\nDESCRIPTION: Shows the differences in function declaration syntax between JavaScript and ReScript, including arrow functions and named functions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/overview.mdx#2025-04-18_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction named(arg) {...}\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet named = (arg) => {...}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst f = function(arg) {...}\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet f = (arg) => {...}\n```\n\n----------------------------------------\n\nTITLE: Multiple Promise Handling\nDESCRIPTION: Shows how to handle multiple promises using Promise.all with async/await\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/async-await.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet pauseReturn = (value, timeout) => {\n  Promise.make((resolve, _reject) => {\n    setTimeout(() => {\n      resolve(value)\n    }, timeout)->ignore\n  })\n}\n\nlet logMultipleValues = async () => {\n  let promise1 = pauseReturn(\"value1\", 2000)\n  let promise2 = pauseReturn(\"value2\", 1200)\n  let promise3 = pauseReturn(\"value3\", 500)\n\n  let all = await Promise.all([promise1, promise2, promise3])\n\n  switch all {\n  | [v1, v2, v3] => Console.log(`All values: ${v1}, ${v2}, ${v3}`)\n  | _ => Console.log(\"this should never happen\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Catching Both ReScript and JS Exceptions in Same Try-Catch Block\nDESCRIPTION: Demonstrates how to handle both ReScript native exceptions and JavaScript exceptions within the same try-catch construct in ReScript code. This pattern allows unified error handling across language boundaries.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/exception.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rescript\nCODE:\n```\ntry {\n  someOtherJSFunctionThatThrows()\n} catch {\n| Not_found => ... // catch a ReScript exception\n| Invalid_argument(_) => ... // catch a second ReScript exception\n| Exn.Error(obj) => ... // catch the JS exception\n}\n```\n\n----------------------------------------\n\nTITLE: For Loop with Ascending Range Example\nDESCRIPTION: A concrete example of a for loop that counts from 1 to 3, printing each number.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/control-flow.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\n// prints: 1 2 3, one per line\nfor x in 1 to 3 {\n  Js.log(x)\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nfor(var x = 1; x <= 3; ++x){\n  console.log(x);\n}\n```\n\n----------------------------------------\n\nTITLE: Comprehensive JSX Example in ReScript\nDESCRIPTION: A comprehensive example showing various JSX features in ReScript, including attributes, children, and optional values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/jsx.mdx#2025-04-18_snippet_6\n\nLANGUAGE: ReScript\nCODE:\n```\n<MyComponent\n  booleanAttribute={true}\n  stringAttribute=\"string\"\n  intAttribute=1\n  forcedOptional=?{Some(\"hello\")}\n  onClick={handleClick}>\n  <div> {React.string(\"hello\")} </div>\n</MyComponent>\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nReact.createElement(\n  MyComponent.make,\n  MyComponent.makeProps(\n    true,\n    \"string\",\n    1,\n    \"hello\",\n    handleClick,\n    React.createElement(\"div\", undefined, \"hello\"),\n    undefined\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: JavaScript Object Type Example in ReScript\nDESCRIPTION: Shows the definition of JavaScript object type and an example of object creation using the %obj syntax.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reason\nCODE:\n```\ntype t(+'a);\n\nlet x: {\n  .\n  \"x\": int,\n  \"y\": int,\n} = [%obj {x: 1, y: 2}];\n```\n\n----------------------------------------\n\nTITLE: Exception Handling in ReScript\nDESCRIPTION: Demonstrates exception handling in ReScript using the 'raise' keyword and pattern matching in catch blocks.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/overview.mdx#2025-04-18_snippet_8\n\nLANGUAGE: ReScript\nCODE:\n```\nraise(SomeError(...))\n```\n\nLANGUAGE: ReScript\nCODE:\n```\ntry a catch { | Err => ...}\n```\n\n----------------------------------------\n\nTITLE: Basic useReducer Hook Usage in ReScript and JavaScript Output\nDESCRIPTION: Demonstrates the basic syntax for using the useReducer hook in ReScript. Returns the current state and a dispatch function for triggering actions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/hooks-reducer.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nlet (state, dispatch) = React.useReducer(reducer, initialState)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar match = React.useReducer(reducer, initialState);\n```\n\n----------------------------------------\n\nTITLE: Array Reduction Operations in ReScript\nDESCRIPTION: reduce, reduceReverse and their variants combine array elements using an accumulator function. Process elements either forward or backward.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/array.mdx#2025-04-18_snippet_16\n\nLANGUAGE: rescript\nCODE:\n```\nBelt.Array.reduce([2, 3, 4], 1, (acc, value) => acc + value) == 10\nBelt.Array.reduce([\"a\", \"b\", \"c\", \"d\"], \"\", (a, b) => a ++ b) == \"abcd\"\n```\n\n----------------------------------------\n\nTITLE: JavaScript Interop with Nullable Types\nDESCRIPTION: Example showing how to handle JavaScript interop with nullable types using external bindings.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/null-undefined-option.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reason\nCODE:\n```\n[@bs.module \"MyConstant\"] external myId: Js.Nullable.t(string) = \"myId\";\n```\n\nLANGUAGE: ml\nCODE:\n```\nexternal myId: string Js.Nullable.t = \"myId\" [@@bs.module \"MyConstant\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Modules in ReScript\nDESCRIPTION: Demonstrates how to create and use nested modules in ReScript. This example defines a module with another module nested inside it and shows how to access the inner module's contents.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/module.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nmodule MyModule = {\n  module NestedModule = {\n    let message = \"hello\"\n  }\n}\n\nlet message = MyModule.NestedModule.message\n```\n\nLANGUAGE: js\nCODE:\n```\nvar NestedModule = {\n  message: message\n};\n\nvar MyModule = {\n  NestedModule: NestedModule\n};\n\nvar message = MyModule.NestedModule.message;\n```\n\n----------------------------------------\n\nTITLE: Creating Objects in ReScript\nDESCRIPTION: Creating a new object in ReScript with age and name properties. The type is inferred from the value structure rather than matching a predeclared type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/object.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\nlet me = {\n  \"age\": 5,\n  \"name\": \"Big ReScript\"\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar me = {\n  \"age\": 5,\n  \"name\": \"Big ReScript\"\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Nullable Return Values with @return\nDESCRIPTION: Shows how to use the @return(nullable) annotation to automatically convert JavaScript null or undefined return values into ReScript's option type, providing more type safety.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/bind-to-js-function.mdx#2025-04-18_snippet_15\n\nLANGUAGE: rescript\nCODE:\n```\ntype element\ntype dom\n\n@send @return(nullable)\nexternal getElementById: (dom, string) => option<element> = \"getElementById\"\n\nlet test = dom => {\n  let elem = dom->(getElementById(\"haha\"))\n  switch (elem) {\n  | None => 1\n  | Some(_ui) => 2\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction test(dom) {\n  var elem = dom.getElementById(\"haha\");\n  if (elem == null) {\n    return 1;\n  } else {\n    console.log(elem);\n    return 2;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Nullable Types in ReScript\nDESCRIPTION: Demonstrates creating a nullable string and using it with a JavaScript function, showcasing ReScript's interop capabilities.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/null-undefined-option.mdx#2025-04-18_snippet_6\n\nLANGUAGE: ReScript\nCODE:\n```\n@module(\"MyIdValidator\") external validate: Nullable.t<string> => bool = \"validate\"\nlet personId: Nullable.t<string> = Nullable.make(\"abc123\")\n\nlet result = validate(personId)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar MyIdValidator = require(\"MyIdValidator\");\nvar personId = \"abc123\";\nvar result = MyIdValidator.validate(personId);\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic React Element in ReScript\nDESCRIPTION: Demonstrates how to create a simple React element using JSX syntax in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/elements-and-jsx.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\nlet element = <h1> {React.string(\"Hello World\")} </h1>\n```\n\n----------------------------------------\n\nTITLE: Using Failure Exception in ReScript\nDESCRIPTION: Demonstrates the use of the 'Failure' exception to signal invalid arguments. The example implements an email validation function that raises a 'Failure' exception for invalid email addresses.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/exception.mdx#2025-04-18_snippet_5\n\nLANGUAGE: ReScript\nCODE:\n```\nlet isValidEmail = email => {\n  let hasAtSign = String.includes(email, \"@\")\n  let hasDot = String.includes(email, \".\")\n  if !(hasAtSign && hasDot) {\n    raise(Failure(\"Invalid email address\"))\n  } else {\n    true\n  }\n}\n\n\nlet isValid = try isValidEmail(\"rescript.org\") catch {\n| Failure(msg) => {\n    Console.error(msg)\n    false\n  }\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as Caml_js_exceptions from \"./stdlib/caml_js_exceptions.js\";\n\nfunction isValidEmail(email) {\n  var hasAtSign = email.includes(\"@\");\n  var hasDot = email.includes(\".\");\n  if (hasAtSign && hasDot) {\n    return true;\n  }\n  throw {\n        RE_EXN_ID: \"Failure\",\n        _1: \"Invalid email address\",\n        Error: new Error()\n      };\n}\n\nvar isValid;\n\ntry {\n  isValid = isValidEmail(\"rescript.org\");\n}\ncatch (raw_msg){\n  var msg = Caml_js_exceptions.internalToOCamlException(raw_msg);\n  if (msg.RE_EXN_ID === \"Failure\") {\n    console.error(msg._1);\n    isValid = false;\n  } else {\n    throw msg;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating React Component with @react.component Decorator in ReScript\nDESCRIPTION: Demonstrates how to create a simple React button component using the @react.component decorator in ReScript. The component accepts a name prop and renders a button with a greeting message. Shows both ReScript source and compiled JavaScript output.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/decorator_react_component.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\n@react.component\nlet make = (~name) => {\n  <button> {React.string(\"Hello \" ++ name ++ \"!\")} </button>\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as JsxRuntime from \"react/jsx-runtime\";\n\nfunction Playground(props) {\n  return JsxRuntime.jsx(\"button\", {\n              children: \"Hello \" + props.name + \"!\"\n            });\n}\n\nvar make = Playground;\n```\n\n----------------------------------------\n\nTITLE: Creating JavaScript Objects in ReScript\nDESCRIPTION: Demonstrates how to create a JavaScript object directly in ReScript using object literal syntax with quoted field names. This approach creates runtime JavaScript objects without static type checking.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/newcomer-examples.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nlet student1 = {\n  \"name\": \"John\",\n  \"age\": 30,\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar student1 = {\n  name: \"John\",\n  age: 30,\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring External Function with setTimeout Example in ReScript\nDESCRIPTION: Example of declaring an external binding to JavaScript's setTimeout function using the @val attribute. The external declaration requires a mandatory type annotation and binds to the native JavaScript setTimeout function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/external.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\n@val external setTimeout: (unit => unit, int) => float = \"setTimeout\"\n```\n\n----------------------------------------\n\nTITLE: Basic Global Value Binding in ReScript\nDESCRIPTION: Basic example of binding to global setTimeout and clearTimeout functions using @val external declarations. Shows how to type the function parameters and return values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/bind-to-global-js-values.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\n@val external setTimeout: (unit => unit, int) => float = \"setTimeout\"\n@val external clearTimeout: float => unit = \"clearTimeout\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Basic Tuple Destructuring in ReScript\nDESCRIPTION: Demonstrates how to extract values from a tuple using destructuring. This example creates a coordinates tuple with three values and extracts only the first value while ignoring the others.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\nlet coordinates = (10, 20, 30)\nlet (x, _, _) = coordinates\nJs.log(x) // 10\n```\n\nLANGUAGE: js\nCODE:\n```\nvar coordinates = [10, 20, 30];\nvar x = 10;\nconsole.log(10);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Module with a Signature in ReScript\nDESCRIPTION: Shows how to implement a module that matches a given signature, demonstrating type abstraction and interface constraints.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/module.mdx#2025-04-18_snippet_8\n\nLANGUAGE: ReScript\nCODE:\n```\nmodule Company: EstablishmentType = {\n  type profession = CEO | Designer | Engineer | ...\n\n  let getProfession = (person) => ...\n  let person1 = ...\n  let person2 = ...\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction getProfession(person) {\n  ...\n}\n\nvar person1 = ...\n\nvar person2 = ...\n\nvar Company = {\n  getProfession: getProfession,\n  person1: person1,\n  person2: person2\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Mutually Recursive Types in ReScript\nDESCRIPTION: Demonstrates how to define types that are mutually recursive using the 'and' keyword.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/type.mdx#2025-04-18_snippet_5\n\nLANGUAGE: ReScript\nCODE:\n```\ntype rec student = {taughtBy: teacher}\nand teacher = {students: array<student>}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Matching on Exceptions in ReScript\nDESCRIPTION: Shows how to directly match on exceptions within a switch statement while also getting a return value from a function. The example demonstrates searching for an item in a list and handling the Not_found exception.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/exception.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nswitch List.find(i => i === 4, list{1, 2, 3}) {\n| item => Js.log(item)\n| exception Not_found => Js.log(\"No such item found!\")\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar List = require(\"./stdlib/list.js\");\nvar Caml_js_exceptions = require(\"./stdlib/caml_js_exceptions.js\");\n\nvar exit = 0;\n\nvar item;\n\ntry {\n  item = List.find((function (i) {\n          return i === 4;\n        }), {\n        hd: 1,\n        tl: {\n          hd: 2,\n          tl: {\n            hd: 3,\n            tl: /* [] */0\n          }\n        }\n      });\n  exit = 1;\n}\ncatch (raw_exn){\n  var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);\n  if (exn.RE_EXN_ID === \"Not_found\") {\n    console.log(\"No such item found!\");\n  } else {\n    throw exn;\n  }\n}\n\nif (exit === 1) {\n  console.log(item);\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Variables from JavaScript to ReScript\nDESCRIPTION: This shows how to start extracting parts of the embedded JavaScript into idiomatic ReScript by converting the defaultId variable to a ReScript let-binding while keeping the rest as raw JS.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/converting-from-js.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nlet defaultId = 10\n\n%%raw(`\nconst school = require('school');\n\nfunction queryResult(usePayload, payload) {\n  if (usePayload) {\n    return payload.student;\n  } else {\n    return school.getStudentById(defaultId);\n  }\n}\n`)\n```\n\n----------------------------------------\n\nTITLE: Using Custom Integer Mapping with @as for Variant Converters\nDESCRIPTION: Customize the integer values for variant constructors by using @as(number) annotations. This allows mapping specific variants to specific integer values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/generate-converters-accessors.mdx#2025-04-18_snippet_4\n\nLANGUAGE: ReScript\nCODE:\n```\n@deriving(jsConverter)\ntype fruit =\n  | Apple\n  | @as(10) Orange\n  | @as(100) Kiwi\n  | Watermelon\n\nlet zero = fruitToJs(Apple) /* 0 */\n\nswitch fruitFromJs(100) {\n| Some(Kiwi) => Js.log(\"this is Kiwi\")\n| _ => Js.log(\"received something wrong from the JS side\")\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic External Bindings for Global setTimeout and clearTimeout Functions\nDESCRIPTION: This example demonstrates creating basic external bindings to the global setTimeout and clearTimeout JavaScript functions. The type annotations specify the function signatures, with setTimeout taking a function and duration, and returning a float identifier.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/bind-to-global-js-values.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\n@val external setTimeout: (unit => unit, int) => float = \"setTimeout\"\n@val external clearTimeout: float => unit = \"clearTimeout\"\n```\n\nLANGUAGE: js\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Customizing JS Integer Enum Values with @as in ReScript\nDESCRIPTION: Shows how to customize the integer values associated with variant constructors using the @as decorator, and how to handle conversion back from JavaScript values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/generate-converters-accessors.mdx#2025-04-18_snippet_9\n\nLANGUAGE: res\nCODE:\n```\n@deriving(jsConverter)\ntype fruit =\n  | Apple\n  | @as(10) Orange\n  | @as(100) Kiwi\n  | Watermelon\n\nlet zero = fruitToJs(Apple) /* 0 */\n\nswitch fruitFromJs(100) {\n| Some(Kiwi) => Js.log(\"this is Kiwi\")\n| _ => Js.log(\"received something wrong from the JS side\")\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Exceptions in ReScript\nDESCRIPTION: Demonstrates how to create and raise custom exceptions in ReScript. The example shows creating an InputClosed exception type that takes a string parameter.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/exception.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nexception InputClosed(string)\n// later on\nraise(InputClosed(\"The stream has closed!\"))\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar Caml_exceptions = require(\"./stdlib/caml_exceptions.js\");\n\nvar InputClosed = Caml_exceptions.create(\"MyFile.InputClosed\");\n\nthrow {\n  RE_EXN_ID: InputClosed,\n  _1: \"The stream has closed!\",\n  Error: new Error()\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Module Interface in ReScript\nDESCRIPTION: Shows how to write a signature file (`React.resi`) that defines the public interface for a React module, exposing only selected types and functions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/module.mdx#2025-04-18_snippet_11\n\nLANGUAGE: res\nCODE:\n```\n/* file React.resi (interface. Compiles to the signature of React.res) */\ntype state = int\nlet render: string => string\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic ReScript Module\nDESCRIPTION: Demonstrates how to create a module named School with a custom type, value, and function. The module contents can be accessed using dot notation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/module.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\nmodule School = {\n  type profession = Teacher | Director\n\n  let person1 = Teacher\n  let getProfession = (person) =>\n    switch person {\n    | Teacher => \"A teacher\"\n    | Director => \"A director\"\n    }\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction getProfession(person) {\n  if (person) {\n    return \"A director\";\n  } else {\n    return \"A teacher\";\n  }\n}\n\nvar School = {\n  person1: /* Teacher */0,\n  getProfession: getProfession\n};\n```\n\n----------------------------------------\n\nTITLE: Mapping Numbers to List Items with Keys in ReScript React\nDESCRIPTION: Demonstrates how to transform an array of numbers into React list items, using string-converted numbers as keys to give elements a stable identity.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/arrays-and-keys.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nlet numbers = [1, 2, 3, 4, 5];\n\nlet items = Belt.Array.map(numbers, (number) => {\n  <li key={Belt.Int.toString(number)}> {React.int(number)} </li>\n})\n```\n\n----------------------------------------\n\nTITLE: Using createElementVariadic for Children Arrays in ReScript\nDESCRIPTION: Demonstrates how to use React.createElementVariadic to pass an array of children to a component. This is a lower-level API that's useful when working with existing JS/React code.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/elements-and-jsx.mdx#2025-04-18_snippet_8\n\nLANGUAGE: ReScript\nCODE:\n```\ntype props = {title: string, children: React.element}\n\nlet render = (article: props => React.element) => {\n  let children = [React.string(\"Introduction\"), React.string(\"Body\")]\n\n  let props = {title: \"Article #1\", children: React.null}\n\n  {React.createElementVariadic(article, props, children)}\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction render(article) {\n  var children = [\n    \"Introduction\",\n    \"Body\"\n  ];\n  var props = {\n    title: \"Article #1\",\n    children: null\n  };\n  return Caml_splice_call.spliceApply(React.createElement, [\n              article,\n              props,\n              children\n            ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Module Signatures in ReScript\nDESCRIPTION: This example shows how to extend an existing module signature by using the `include` keyword. This creates a new module type that inherits all fields from the base module type and adds additional fields.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/module.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nmodule type BaseComponent = {\n  let defaultGreeting: string\n  let getAudience: (~excited: bool) => string\n}\n\nmodule type ActualComponent = {\n  /* the BaseComponent signature is copied over */\n  include BaseComponent\n  let render: unit => string\n}\n```\n\nLANGUAGE: js\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Binding to Event Listeners with Polymorphic Variants\nDESCRIPTION: Shows how to bind to JavaScript event-based APIs using polymorphic variants to model different event types and their handler functions, making event handling more type-safe.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/bind-to-js-function.mdx#2025-04-18_snippet_11\n\nLANGUAGE: res\nCODE:\n```\ntype readline\n\n@send\nexternal on: (\n    readline,\n    @string [\n      | #close(unit => unit)\n      | #line(string => unit)\n    ]\n  )\n  => readline = \"on\"\n\nlet register = rl =>\n  rl\n  ->on(#close(event => ()))\n  ->on(#line(line => Console.log(line)));\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction register(rl) {\n  return rl\n    .on(\"close\", function($$event) {})\n    .on(\"line\", function(line) {\n      console.log(line);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Variable Declaration in JavaScript and ReScript\nDESCRIPTION: Demonstrates the differences in variable declaration between JavaScript and ReScript, including const, var, and mutable variables.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/overview.mdx#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst x = 5;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet x = 5\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet x = 5; x = x + 1;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet x = ref(5); x := x.contents + 1\n```\n\n----------------------------------------\n\nTITLE: Extending ReScript Bindings with Custom Types for date-fns Options\nDESCRIPTION: Shows how to define custom types for options in ReScript bindings, using a variant type to represent specific numeric values in the JavaScript API.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2025-03-05-what-can-i-do-with-rescript.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\n@unboxed\ntype firstWeekContainsDate =\n  | @as(1) One\n  | @as(4) Four\n\ntype formatDateOptions = {firstWeekContainsDate: firstWeekContainsDate}\n```\n\n----------------------------------------\n\nTITLE: FriendStatus Component with Cleanup in ReScript React\nDESCRIPTION: Implements a FriendStatus component that subscribes to a friend's online status and cleans up the subscription when unmounting. Demonstrates useEffect with cleanup functionality.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/hooks-effect.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\n// FriendStatus.res\n\nmodule ChatAPI = {\n  // Imaginary globally available ChatAPI for demo purposes\n  type status = { isOnline: bool };\n  @val external subscribeToFriendStatus: (string, status => unit) => unit = \"subscribeToFriendStatus\";\n  @val external unsubscribeFromFriendStatus: (string, status => unit) => unit = \"unsubscribeFromFriendStatus\";\n}\n\ntype state = Offline | Loading | Online;\n\n@react.component\nlet make = (~friendId: string) => {\n  let (state, setState) = React.useState(_ => Offline)\n\n  React.useEffect(() => {\n    let handleStatusChange = (status) => {\n      setState(_ => {\n        status.ChatAPI.isOnline ? Online : Offline\n      })\n    }\n\n    ChatAPI.subscribeToFriendStatus(friendId, handleStatusChange);\n    setState(_ => Loading);\n\n    let cleanup = () => {\n      ChatAPI.unsubscribeFromFriendStatus(friendId, handleStatusChange)\n    }\n\n    Some(cleanup)\n  })\n\n  let text = switch(state) {\n    | Offline => friendId ++ \" is offline\"\n    | Online => friendId ++ \" is online\"\n    | Loading => \"loading...\"\n  }\n\n  <div>\n  \t{React.string(text)}\n  </div>\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction FriendStatus(Props) {\n  var friendId = Props.friendId;\n  var match = React.useState(function () {\n        return /* Offline */0;\n      });\n  var setState = match[1];\n  React.useEffect(function () {\n        var handleStatusChange = function (status) {\n          return Curry._1(setState, (function (param) {\n                        if (status.isOnline) {\n                          return /* Online */2;\n                        } else {\n                          return /* Offline */0;\n                        }\n                      }));\n        };\n        subscribeToFriendStatus(friendId, handleStatusChange);\n        Curry._1(setState, (function (param) {\n                return /* Loading */1;\n              }));\n        return (function (param) {\n                  unsubscribeFromFriendStatus(friendId, handleStatusChange);\n\n                });\n      });\n  var text;\n  switch (match[0]) {\n    case /* Offline */0 :\n        text = friendId + \" is offline\";\n        break;\n    case /* Loading */1 :\n        text = \"loading...\";\n        break;\n    case /* Online */2 :\n        text = friendId + \" is online\";\n        break;\n\n  }\n  return React.createElement(\"div\", undefined, text);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Variants in ReScript\nDESCRIPTION: Example of defining a basic variant type with three constructors (Yes, No, PrettyMuch) and initializing a value with one of them. The variant compiles to a simple string in JavaScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/variant.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype myResponse =\n  | Yes\n  | No\n  | PrettyMuch\n\nlet areYouCrushingIt = Yes\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar areYouCrushingIt = \"Yes\";\n```\n\n----------------------------------------\n\nTITLE: Optional Record Fields in ReScript\nDESCRIPTION: Shows how to define and use optional fields in records, introduced in ReScript v10.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/record.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\ntype person = {\n  age: int,\n  name?: string\n}\n\nlet me = {\n  age: 5,\n  name: \"Big ReScript\"\n}\n\nlet friend = {\n  age: 7\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar me = {\n  age: 5,\n  name: \"Big ReScript\"\n};\n\nvar friend = {\n  age: 7\n};\n```\n\n----------------------------------------\n\nTITLE: Counter with Reset using useReducerWithMapState in ReScript\nDESCRIPTION: A counter example that demonstrates lazy initialization and state resetting with useReducerWithMapState. Shows how to implement a Reset action and an initialization function that creates the initial state from a count value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/hooks-reducer.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\n// Counter.res\n\ntype action = Inc | Dec | Reset(int)\ntype state = {count: int}\n\nlet init = initialCount => {\n  {count: initialCount}\n}\n\nlet reducer = (state, action) => {\n  switch action {\n  | Inc => {count: state.count + 1}\n  | Dec => {count: state.count - 1}\n  | Reset(count) => init(count)\n  }\n}\n\n@react.component\nlet make = (~initialCount: int) => {\n  let (state, dispatch) = React.useReducerWithMapState(\n    reducer,\n    initialCount,\n    init,\n  )\n\n  <>\n    {React.string(\"Count:\" ++ Belt.Int.toString(state.count))}\n    <button onClick={_ => dispatch(Dec)}> {React.string(\"-\")} </button>\n    <button onClick={_ => dispatch(Inc)}> {React.string(\"+\")} </button>\n  </>\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction init(initialCount) {\n  return {\n          count: initialCount\n        };\n}\n\nfunction reducer(state, action) {\n  if (typeof action === \"number\") {\n    if (action !== 0) {\n      return {\n              count: state.count - 1 | 0\n            };\n    } else {\n      return {\n              count: state.count + 1 | 0\n            };\n    }\n  } else {\n    return {\n            count: action._0\n          };\n  }\n}\n\nfunction Counter(Props) {\n  var initialCount = Props.initialCount;\n  var match = React.useReducer(reducer, initialCount, init);\n  var dispatch = match[1];\n  return React.createElement(React.Fragment, undefined, \"Count:\" + String(match[0].count), React.createElement(\"button\", {\n                  onClick: (function (param) {\n                      return Curry._1(dispatch, /* Dec */1);\n                    })\n                }, \"-\"), React.createElement(\"button\", {\n                  onClick: (function (param) {\n                      return Curry._1(dispatch, /* Inc */0);\n                    })\n                }, \"+\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring External Function in ReScript\nDESCRIPTION: This snippet demonstrates how to declare an external function 'setTimeout' in ReScript, binding it to the JavaScript global function of the same name. The type annotation specifies that it takes a unit to unit function and an integer as arguments, and returns a float.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/external.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\n@val external setTimeout: (unit => unit, int) => float = \"setTimeout\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching on Tuples in ReScript\nDESCRIPTION: Shows how to use pattern matching on tuples, demonstrating the concise syntax for matching multiple values simultaneously.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_8\n\nLANGUAGE: reason\nCODE:\n```\ntype animal = Dog | Cat | Bird;\nlet categoryId = switch (isBig, myAnimal) {\n| (true, Dog) => 1\n| (true, Cat) => 2\n| (true, Bird) => 3\n| (false, Dog | Cat) => 4\n| (false, Bird) => 5\n};\n```\n\nLANGUAGE: ml\nCODE:\n```\ntype animal = Dog | Cat | Bird\nlet categoryId = match (isBig, myAnimal) with\n| (true, Dog) -> 1\n| (true, Cat) -> 2\n| (true, Bird) -> 3\n| (false, (Dog | Cat)) -> 4\n| (false, Bird) -> 5\n```\n\nLANGUAGE: js\nCODE:\n```\nvar categoryId = isBig ? (myAnimal + 1) | 0 : myAnimal >= 2 ? 5 : 4;\n```\n\n----------------------------------------\n\nTITLE: JavaScript Exception Interop in ReScript\nDESCRIPTION: Shows how to raise and catch JavaScript exceptions in ReScript code using Exn module.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/exception.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet myTest = () => {\n  Exn.raiseError(\"Hello!\")\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntry {\n  myTest()\n} catch (e) {\n  console.log(e.message) // \"Hello!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Lower Bound Polymorphic Variant in ReScript\nDESCRIPTION: This snippet demonstrates how to define a lower bound polymorphic variant type for basic blue tones, which can be extended with additional colors. It shows the minimum set of constructors and how to extend them.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/polymorphic-variant.mdx#2025-04-18_snippet_13\n\nLANGUAGE: res\nCODE:\n```\ntype basicBlueTone<'a> = [> #Blue | #DeepBlue | #LightBlue ] as 'a\ntype color = basicBlueTone<[#Blue | #DeepBlue | #LightBlue | #Purple]>\n\nlet color: color = #Purple\n\n// This will fail due to missing minimum constructors:\ntype notWorking = basicBlueTone<[#Purple]>\n```\n\n----------------------------------------\n\nTITLE: Embedding Raw JavaScript in ReScript with %%raw\nDESCRIPTION: Demonstrates how to copy an entire JavaScript file into a ReScript file using the %%raw embedding technique as the first step in conversion.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/converting-from-js.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\n%%raw(`\nconst school = require('school');\n\nconst defaultId = 10;\n\nfunction queryResult(usePayload, payload) {\n  if (usePayload) {\n    return payload.student;\n  } else {\n    return school.getStudentById(defaultId);\n  }\n}\n`)\n```\n\n----------------------------------------\n\nTITLE: Managing Focus for Text Input with useRef in ReScript\nDESCRIPTION: Example component that uses useRef to manage focus for a text input element. It creates a ref attached to the input and provides a button that focuses the input when clicked.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/hooks-ref.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\n// TextInputWithFocusButton.res\n\n@send external focus: Dom.element => unit = \"focus\"\n\n@react.component\nlet make = () => {\n  let inputEl = React.useRef(Js.Nullable.null)\n\n  let onClick = _ => {\n    inputEl.current\n    ->Js.Nullable.toOption\n    ->Belt.Option.forEach(input => input->focus)\n  }\n\n  <>\n    <input ref={ReactDOM.Ref.domRef(inputEl)} type_=\"text\" />\n    <button onClick> {React.string(\"Focus the input\")} </button>\n  </>\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction TextInputWithFocusButton(Props) {\n  var inputEl = React.useRef(null);\n  var onClick = function (param) {\n    return Belt_Option.forEach(Caml_option.nullable_to_opt(inputEl.current), (function (input) {\n                  input.focus();\n\n                }));\n  };\n  return React.createElement(React.Fragment, undefined, React.createElement(\"input\", {\n                  ref: inputEl,\n                  type: \"text\"\n                }), React.createElement(\"button\", {\n                  onClick: onClick\n                }, \"Focus the input\"));\n}\n```\n\n----------------------------------------\n\nTITLE: For Loop Example in ReScript\nDESCRIPTION: A simple for loop example in ReScript that iterates from 1 to 3 and logs each value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/control-flow.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\n// prints: 1 2 3, one per line\nfor x in 1 to 3 {\n  Console.log(x)\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nfor(var x = 1; x <= 3; ++x){\n  console.log(x);\n}\n```\n\n----------------------------------------\n\nTITLE: Binding TypeScript String Enum to ReScript Polymorphic Variant\nDESCRIPTION: Shows how to bind a TypeScript string enum to a ReScript polymorphic variant type and import a value of that type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/polymorphic-variant.mdx#2025-04-18_snippet_17\n\nLANGUAGE: res\nCODE:\n```\ntype direction = [ #UP | #DOWN | #LEFT | #RIGHT ]\n@bs.module(\"./direction.js\") external myDirection: direction = \"myDirection\"\n```\n\nLANGUAGE: js\nCODE:\n```\nvar DirectionJs = require(\"./direction.js\");\n\nvar myDirection = DirectionJs.myDirection;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Pattern Matching with Polymorphic Variants in ReScript\nDESCRIPTION: This example shows pattern matching with polymorphic variants. It highlights the difficulty in determining whether cases can be safely removed due to the lack of a defined poly variant type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/polymorphic-variant.mdx#2025-04-18_snippet_16\n\nLANGUAGE: res\nCODE:\n```\nlet myColor = #red\n\nswitch myColor {\n| #red => Console.log(\"Hello red!\")\n| #blue => Console.log(\"Hello blue!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Function Returning Multiple Values Using Tuples\nDESCRIPTION: Demonstrates using tuples to return multiple values from a function in a concise way.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/tuple.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet getCenterCoordinates = () => {\n  let x = doSomeOperationsHere()\n  let y = doSomeMoreOperationsHere()\n  (x, y)\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getCenterCoordinates(param) {\n  var x = doSomeOperationsHere(undefined);\n  var y = doSomeMoreOperationsHere(undefined);\n  return [x, y];\n}\n```\n\n----------------------------------------\n\nTITLE: List Prepend Operations in ReScript\nDESCRIPTION: Shows how to prepend items to a list using spread syntax while maintaining immutability.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/array-and-list.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet myList = list{1, 2, 3}\nlet anotherList = list{0, ...myList}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar myList = {\n  hd: 1,\n  tl: {\n    hd: 2,\n    tl: {\n      hd: 3,\n      tl: 0\n    }\n  }\n};\n\nvar anotherList = {\n  hd: 0,\n  tl: myList\n};\n```\n\n----------------------------------------\n\nTITLE: Optimized React Component with Custom Equality Check\nDESCRIPTION: Demonstrates how to optimize React component rendering using derived shallow equality implementation with React.memo.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2025-04-11-introducing-unified-operators.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nmodule MyComponent = {\n  type payload = {\n    // ...\n  }\n\n  type state =\n    | Idle(payload)\n    | InProgress(payload)\n    | Done(payload)\n\n  @deriving([shallowEquals])\n  type props = {\n    state: state,\n  }\n\n  let make = React.memoCustomCompareProps(\n    ({ state }) => <></>,\n\n    // It checks tag equality first.\n    // If the tags are the same, it checks shallow equality of their payload.\n    \"props$shallowEquals\",\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using callback refs in ReScript React\nDESCRIPTION: This example shows how to use callback refs with ReactDOM.Ref.callbackDomRef for more fine-grained control over when refs are set and unset. The component passes a callback function that stores the DOM element reference.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/refs-and-the-dom.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\n// CustomTextInput.res\n\n@send external focus: Dom.element => unit = \"focus\"\n\n@react.component\nlet make = () => {\n  let textInput = React.useRef(Js.Nullable.null)\n  let setTextInputRef = element => {\n    textInput.current = element;\n  }\n\n  let focusTextInput = _ => {\n    textInput.current\n    ->Js.Nullable.toOption\n    ->Belt.Option.forEach(input => input->focus)\n  }\n\n  <div>\n    <input type_=\"text\" ref={ReactDOM.Ref.callbackDomRef(setTextInputRef)} />\n    <input\n      type_=\"button\" value=\"Focus the text input\" onClick={focusTextInput}\n    />\n  </div>\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction CustomTextInput(Props) {\n  var textInput = React.useRef(null);\n  var setTextInputRef = function (element) {\n    textInput.current = element;\n\n  };\n  var focusTextInput = function (param) {\n    return Belt_Option.forEach(Caml_option.nullable_to_opt(textInput.current), (function (input) {\n                  input.focus();\n\n                }));\n  };\n  return React.createElement(\"div\", undefined, React.createElement(\"input\", {\n                  ref: setTextInputRef,\n                  type: \"text\"\n                }), React.createElement(\"input\", {\n                  type: \"button\",\n                  value: \"Focus the text input\",\n                  onClick: focusTextInput\n                }));\n}\n```\n\n----------------------------------------\n\nTITLE: Using Catch-All Condition in ReScript Pattern Matching\nDESCRIPTION: Shows how to use '_' as a catch-all condition at the top level of a switch statement in ReScript. It also advises against overusing this feature.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_9\n\nLANGUAGE: ReScript\nCODE:\n```\nswitch myStatus {\n| Vacations(_) => Console.log(\"Have fun!\")\n| _ => Console.log(\"Ok.\")\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (typeof myStatus !== \"object\" || myStatus.TAG !== \"Vacations\") {\n  console.log(\"Ok.\");\n} else {\n  console.log(\"Have fun!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Binding to JavaScript String Enums with Polymorphic Variants in ReScript\nDESCRIPTION: Demonstrates how to create type-safe bindings to JavaScript string enums using polymorphic variants, providing zero-cost abstraction.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/polymorphic-variant.mdx#2025-04-18_snippet_10\n\nLANGUAGE: ReScript\nCODE:\n```\ntype direction = [ #UP | #DOWN | #LEFT | #RIGHT ]\n@module(\"./direction.js\") external myDirection: direction = \"myDirection\"\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar DirectionJs = require(\"./direction.js\");\n\nvar myDirection = DirectionJs.myDirection;\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Polymorphic Variant in ReScript\nDESCRIPTION: Shows how to create a simple polymorphic variant value that starts with a hashtag. Unlike regular variants, polymorphic variants don't need explicit type definitions and compile to simple strings in JavaScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/polymorphic-variant.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\n// Note how a poly variant starts with a hashtag (#)\n// We also don't need any explicit type definition\nlet myColor = #Red\n```\n\nLANGUAGE: js\nCODE:\n```\nvar myColor = \"Red\";\n```\n\n----------------------------------------\n\nTITLE: Using External to Bind to JavaScript Module\nDESCRIPTION: Demonstrates how to use ReScript's external binding to interface with a JavaScript module, typing it as a polymorphic value to allow for quick conversion while maintaining type safety.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/converting-from-js.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\n@module external school: 'whatever = \"school\"\n\nlet defaultId = 10\n\nlet queryResult = (usePayload, payload) => {\n  if usePayload {\n    payload[\"student\"]\n  } else {\n    school[\"getStudentById\"](. defaultId)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Component with Optional Children in ReScript\nDESCRIPTION: Shows how to create a component that has an optional children prop. The component handles both cases - when children are provided and when they are not.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/components-and-props.mdx#2025-04-18_snippet_7\n\nLANGUAGE: res\nCODE:\n```\nmodule OptionalChildren = {\n  @react.component\n  let make = (~children: option<React.element>=?) => {\n    <div>\n      {switch children {\n      | Some(element) => element\n      | None => React.string(\"No children provided\")\n      }}\n    </div>\n  }\n}\n\n<div>\n  <OptionalChildren />\n  <OptionalChildren> <div /> </OptionalChildren>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Binding Event Listeners with Polymorphic Variants in ReScript\nDESCRIPTION: Demonstrates how to use polymorphic variants to bind event listeners in ReScript, specifically for 'close' and 'line' events on a readline object. The code shows how to create an external binding and use it to register event handlers.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/bind-to-js-function.mdx#2025-04-18_snippet_7\n\nLANGUAGE: reason\nCODE:\n```\ntype readline;\n\n[@bs.send]\nexternal on: (\n    readline,\n    [@bs.string] [\n      | `close(unit => unit)\n      | `line(string => unit)\n    ]\n  )\n  => readline = \"on\";\n\nlet register = rl =>\n  rl\n  ->on(`close(event => ()))\n  ->on(`line(line => Js.log(line)));\n```\n\nLANGUAGE: ocaml\nCODE:\n```\ntype readline\n\nexternal on:\n  readline ->\n  (([`close of unit -> unit\n    | `line of string -> unit\n  ]) [@bs.string]) ->\n  readline = \"on\" [@@bs.send]\n\nlet register rl =\n  rl\n  |. on (`close (fun event -> ()))\n  |. on (`line (fun line -> Js.log line))\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction register(rl) {\n  return rl\n    .on(\"close\", function($$event) {})\n    .on(\"line\", function(line) {\n      console.log(line);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Combining multiple Promises with Promise.all in ReScript\nDESCRIPTION: Creates a promise that resolves when all promises in the array resolve, or rejects if any promise rejects.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/promise.mdx#2025-04-18_snippet_5\n\nLANGUAGE: reason\nCODE:\n```\nlet all: array(t('a)) => t(array('a));\n```\n\n----------------------------------------\n\nTITLE: Creating an Uncurried Function in ReScript\nDESCRIPTION: Shows how to define and use an uncurried function in ReScript using the dot notation in the parameter list.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/function.mdx#2025-04-18_snippet_8\n\nLANGUAGE: reason\nCODE:\n```\nlet add = (. x, y) => x + y;\n\nadd(. 1, 2);\n```\n\nLANGUAGE: ml\nCODE:\n```\nlet add = (fun x y -> x + y) [@bs]\nlet () = add 1 2 [@bs]\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction add(x, y) {\n  return x + y | 0;\n}\n\nadd(1, 2);\n```\n\n----------------------------------------\n\nTITLE: Creating a React Element in ReScript\nDESCRIPTION: Example showing how to create a simple React element in ReScript that represents an h1 heading with text content.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/rendering-elements.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\nlet element = <h1> {React.string(\"Hello World\")} </h1>\n```\n\n----------------------------------------\n\nTITLE: Reducing Array to Single Value with reduce in ReScript\nDESCRIPTION: Applies a function against an accumulator and each element in the array to reduce it to a single value. The function takes an accumulated value and an array element, processing the array from left to right.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/array-2.mdx#2025-04-18_snippet_23\n\nLANGUAGE: ReScript\nCODE:\n```\nlet reduce: (t<'a>, ('b, 'a) => 'b, 'b) => 'b\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet sumOfSquares = (accumulator, item) => accumulator + item * item\n\nJs.Array2.reduce([10, 2, 4], sumOfSquares, 0) == 120\nJs.Array2.reduce([10, 2, 4], \\\"*\\\", 1) == 80\nJs.Array2.reduce(\n  [\"animal\", \"vegetable\", \"mineral\"],\n  (acc, item) => acc + Js.String.length(item),\n  0,\n) == 22 // 6 + 9 + 7\nJs.Array2.reduce([2.0, 4.0], (acc, item) => item /. acc, 1.0) == 2.0 // 4.0 / (2.0 / 1.0)\n```\n\n----------------------------------------\n\nTITLE: Function with Unlabeled Arguments in ReScript\nDESCRIPTION: Demonstrates the problem with unlabeled arguments when arguments are of the same type. The function usage can be confusing as it's not clear which parameter is which.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/function.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet addCoordinates = (x, y) => {\n  // use x and y here\n}\n// ...\naddCoordinates(5, 6) // which is x, which is y?\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction addCoordinates(x, y) {\n  // use x and y here\n}\n\naddCoordinates(5, 6);\n```\n\n----------------------------------------\n\nTITLE: Using 'unknown' Type for Type Safety in JS Interop\nDESCRIPTION: Demonstrates using the 'unknown' type for safer JavaScript interoperation, requiring explicit type checking before using values from external functions and preventing runtime errors.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/bind-to-js-function.mdx#2025-04-18_snippet_10\n\nLANGUAGE: res\nCODE:\n```\n@get_index external getPropertyUnsafe: ({..}, string) => 'a = \"\"\n@get_index external getPropertySafe: ({..}, string) => unknown = \"\"\n\nlet person = {\"name\": \"Bob\", \"age\": 12}\n\nlet greeting1 = \"Hello, \" ++ getPropertyUnsafe(person, \"name\") // works (this time!)\n// let greeting2 = \"Hello, \" ++ getPropertySafe(person, \"name\") // syntax error\n```\n\n----------------------------------------\n\nTITLE: Pipe with Multiple Arguments in ReScript\nDESCRIPTION: Shows how the pipe operator works with functions that take multiple arguments.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/pipe.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\na(one, two, three)\n```\n\nLANGUAGE: rescript\nCODE:\n```\none->a(two, three)\n```\n\nLANGUAGE: javascript\nCODE:\n```\na(one, two, three);\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Type with Unboxed Variants in ReScript\nDESCRIPTION: Defines a recursive JSON type using unboxed variants to represent different JSON value types including boolean, null, string, number, object and array. Includes an example of creating a valid JSON value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2023-04-17-improving-interop.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rescript\nCODE:\n```\n@unboxed\ntype rec json =\n  | @as(false) False\n  | @as(true) True\n  | @as(null) Null\n  | String(string)\n  | Number(float)\n  | Object(Js.Dict.t<json>)\n  | Array(array<json>)\n\nlet myValidJsonValue = Array([String(\"Hi\"), Number(123.)])\n```\n\n----------------------------------------\n\nTITLE: JSX Syntax in ReScript\nDESCRIPTION: Shows JSX syntax in ReScript, which is similar to JavaScript but with some differences like argument punning.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/overview.mdx#2025-04-18_snippet_7\n\nLANGUAGE: ReScript\nCODE:\n```\n<Comp message=\"hi\" onClick={handler} />\n```\n\nLANGUAGE: ReScript\nCODE:\n```\n<Comp message />\n```\n\nLANGUAGE: ReScript\nCODE:\n```\n<Comp>...children</Comp>\n```\n\n----------------------------------------\n\nTITLE: Lazy Initialization with useReducerWithMapState in ReScript\nDESCRIPTION: Shows how to use React.useReducerWithMapState to lazily initialize state. This approach allows extracting initialization logic and enables state resetting in response to actions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/hooks-reducer.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet (state, dispatch) =\n  React.useReducerWithMapState(reducer, initialState, initial)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar match = React.useReducer(reducer, initialState, init);\n```\n\n----------------------------------------\n\nTITLE: JSON StringifyAny Example\nDESCRIPTION: Example showing how to stringify an arbitrary value to JSON\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/json.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nJs.log(Js.Json.stringifyAny([\"hello\", \"world\"]))\n```\n\n----------------------------------------\n\nTITLE: Using external in ReScript for JavaScript Interop\nDESCRIPTION: This snippet shows how to use the external keyword in ReScript to bind to a JavaScript module, allowing for smooth interoperability.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/converting-from-js.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ReScript\nCODE:\n```\n@module external school: 'whatever = \"school\"\n\nlet defaultId = 10\n\nlet queryResult = (usePayload, payload) => {\n  if usePayload {\n    payload[\"student\"]\n  } else {\n    school[\"getStudentById\"](defaultId)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Binding to TypeScript Enums with Tagged Variants\nDESCRIPTION: Example showing how to bind to TypeScript enums using ReScript's tagged variants. The @as attribute is used to specify the exact string representation for each variant case, matching the TypeScript enum values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/variant.mdx#2025-04-18_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// direction.ts\n/** Direction of the action. */\nenum Direction {\n  /** The direction is up. */\n  Up = \"UP\",\n\n  /** The direction is down. */\n  Down = \"DOWN\",\n\n  /** The direction is left. */\n  Left = \"LEFT\",\n\n  /** The direction is right. */\n  Right = \"RIGHT\",\n}\n\nexport const myDirection = Direction.Up;\n```\n\nLANGUAGE: rescript\nCODE:\n```\n/** Direction of the action. */\ntype direction =\n  | /** The direction is up. */\n  @as(\"UP\")\n  Up\n\n  | /** The direction is down. */\n  @as(\"DOWN\")\n  Down\n\n  | /** The direction is left. */\n  @as(\"LEFT\")\n  Left\n\n  | /** The direction is right. */\n  @as(\"RIGHT\")\n  Right\n\n@module(\"./direction.js\") external myDirection: direction = \"myDirection\"\n```\n\n----------------------------------------\n\nTITLE: Importing Global CSS Files in ReScript\nDESCRIPTION: Shows how to import CSS files directly into ReScript components using raw JavaScript expressions with the %%raw syntax, supporting both ES modules and CommonJS imports.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/styling.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\n// in a JS module setup\n%%raw(\"import './styles/main.css'\")\n\n// or with CommonJS\n%%raw(\"require('./styles/main.css')\")\n```\n\n----------------------------------------\n\nTITLE: Using @react.componentWithProps for Custom Props Types\nDESCRIPTION: Shows how to use the @react.componentWithProps decorator to define a component with a custom props record type while maintaining proper React component formatting.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/components-and-props.mdx#2025-04-18_snippet_6\n\nLANGUAGE: res\nCODE:\n```\n// Counter.res\ntype props = {title: string, count: int}\n\n@react.componentWithProps\nlet make = (props: props) => {\n  <h1>\n    {React.string(props.title)}\n    {React.int(props.count)}\n  </h1>\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nimport * as JsxRuntime from \"react/jsx-runtime\";\n\nfunction Counter(props) {\n  return JsxRuntime.jsxs(\"h1\", {\n    children: [\n      props.title,\n      props.count\n    ]\n  });\n}\n\nlet make = Counter;\n```\n\n----------------------------------------\n\nTITLE: Using External Bindings with JavaScript DOM APIs\nDESCRIPTION: Practical example of using external bindings to interact with JavaScript DOM APIs. This demonstrates binding to the document object and using methods, getting properties, and setting properties with ReScript's interop features.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/external.mdx#2025-04-18_snippet_1\n\nLANGUAGE: ReScript\nCODE:\n```\n// The type of document is just some random type 'a\n// that we won't bother to specify\n[@bs.val] external document: 'a = \"document\";\n\n// call a method\ndocument##addEventListener(\"mouseup\", _event => {\n  Js.log(\"clicked!\");\n});\n\n// get a property\nlet loc = document##location;\n\n// set a property\ndocument##location##href = \"rescript-lang.org\";\n```\n\nLANGUAGE: OCaml\nCODE:\n```\n(* The type of document is just some random type 'a *)\n(* that we won't bother to specify *)\nexternal document: 'a = \"document\" [@@bs.val]\n\n(* call a method *)\ndocument##addEventListener \"mouseup\" (fun _event ->\n  Js.log \"clicked!\"\n)\n\n(* get a property *)\nlet loc = document##location\n\n(* set a property *)\ndocument##location##href = \"rescript-lang.org\"\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ndocument.addEventListener(\"mouseup\", function(_event) {\n  console.log(\"clicked!\");\n});\n\nvar loc = document.location;\n\ndocument.location.href = \"rescript-lang.org\";\n```\n\n----------------------------------------\n\nTITLE: Defining a React Component with @genType in ReScript\nDESCRIPTION: This snippet demonstrates how to use the @genType decorator to define a color type and a React component in ReScript. The @genType decorator is applied to both the type definition and the component, enabling TypeScript integration.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/decorator_gentype.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\n@genType\nexport type color =\n  | Red\n  | Blue\n\n@genType @react.component\nexport make = (~name: string, ~color: color) => {\n  let colorStr = switch color {\n  | Red => \"red\"\n  | Blue => \"blue\"\n  }\n  <div className={\"color-\" ++ colorStr}> {React.string(name)} </div>\n}\n```\n\n----------------------------------------\n\nTITLE: Function Declaration Syntax in ReScript\nDESCRIPTION: Comprehensive guide showing various function declaration syntaxes in ReScript including anonymous functions, labeled functions, default values, and optional parameters.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/function.mdx#2025-04-18_snippet_21\n\nLANGUAGE: res\nCODE:\n```\n// anonymous function\n(x, y) => 1\n// bind to a name\nlet add = (x, y) => 1\n\n// labeled\nlet add = (~first as x, ~second as y) => x + y\n// with punning sugar\nlet add = (~first, ~second) => first + second\n\n// labeled with default value\nlet add = (~first as x=1, ~second as y=2) => x + y\n// with punning\nlet add = (~first=1, ~second=2) => first + second\n\n// optional\nlet add = (~first as x=?, ~second as y=?) => switch x {...}\n// with punning\nlet add = (~first=?, ~second=?) => switch first {...}\n```\n\n----------------------------------------\n\nTITLE: Creating a Typed Environment Variables Module Function\nDESCRIPTION: Implementation of a module function that allows consumers to create typed environment variable access without runtime overhead.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/module-functions.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nmodule MakeEnv = (\n  E: {\n    type t\n  },\n) => {\n  @val external env: E.t = \"import.meta.env\"\n\n  let getEnv = () => {\n    env\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Js.Nullable for JavaScript Interop in ReScript\nDESCRIPTION: Shows how to use Js.Nullable for more sophisticated handling of null and undefined in JavaScript interop scenarios.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/null-undefined-option.mdx#2025-04-18_snippet_5\n\nLANGUAGE: ReScript\nCODE:\n```\n@module(\"MyConstant\") external myId: Js.Nullable.t<string> = \"myId\"\n\n@module(\"MyIdValidator\") external validate: Js.Nullable.t<string> => bool = \"validate\"\nlet personId: Js.Nullable.t<string> = Js.Nullable.return(\"abc123\")\n\nlet result = validate(personId)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Empty output\n\nvar MyIdValidator = require(\"MyIdValidator\");\nvar personId = \"abc123\";\nvar result = MyIdValidator.validate(personId);\n```\n\n----------------------------------------\n\nTITLE: Using Raw JavaScript in ReScript\nDESCRIPTION: Demonstrates how to embed raw JavaScript code directly in ReScript using the %raw decorator.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/interop-cheatsheet.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nlet add = %raw(\"(a, b) => a + b\")\n%%raw(\"const a = 1\")\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar add = ((a, b) => a + b);\nconst a = 1\n```\n\n----------------------------------------\n\nTITLE: Array Processing with Belt in ReScript\nDESCRIPTION: Illustrates the usage of Belt functions for array processing, including filtering, set conversion, and sorting.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet someNumbers = [1, 1, 4, 2, 3, 6, 3, 4, 2]\n\nlet greaterThan2UniqueAndSorted =\n  someNumbers\n  ->Belt.Array.keep(x => x > 2)\n  // convert to and from set to make values unique\n  ->Belt.Set.Int.fromArray\n  ->Belt.Set.Int.toArray // output is already sorted\n\nJs.log2(\"result\", greaterThan2UniqueAndSorted)\n```\n\n----------------------------------------\n\nTITLE: Implementing Friend List Item Component in ReScript\nDESCRIPTION: A React component that renders a friend's name with color-coded online status using similar status monitoring logic as FriendStatus component.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/hooks-custom.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\n// FriendListItem.res\ntype state = Offline | Loading | Online;\n\ntype friend = {\n  id: string,\n  name: string\n};\n\n@react.component\nlet make = (~friend: friend) => {\n  let (state, setState) = React.useState(_ => Offline)\n\n  React.useEffect(() => {\n    let handleStatusChange = (status) => {\n      setState(_ => {\n        status.ChatAPI.isOnline ? Online : Offline\n      })\n    }\n\n    ChatAPI.subscribeToFriendStatus(friend.id, handleStatusChange);\n    setState(_ => Loading);\n\n    let cleanup = () => {\n      ChatAPI.unsubscribeFromFriendStatus(friend.id, handleStatusChange)\n    }\n\n    Some(cleanup)\n  })\n\n  let color = switch(state) {\n    | Offline => \"red\"\n    | Online => \"green\"\n    | Loading => \"grey\"\n  }\n\n  <li style={ReactDOMStyle.make(~color,())}>\n      {React.string(friend.name)}\n  </li>\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript DOM Interop Example in ReScript\nDESCRIPTION: Demonstrates quick JavaScript API binding using object types and external declarations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/object.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\n@val external document: 'a = \"document\"\n\n// call a method\ndocument[\"addEventListener\"](. \"mouseup\", _event => {\n  Js.log(\"clicked!\")\n})\n\n// get a property\nlet loc = document[\"location\"]\n\n// set a property\ndocument[\"location\"][\"href\"] = \"rescript-lang.org\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.addEventListener(\"mouseup\", function(_event) {\n  console.log(\"clicked!\");\n});\nvar loc = document.location;\ndocument.location.href = \"rescript-lang.org\";\n```\n\n----------------------------------------\n\nTITLE: Type-Safe Emotion CSS Bindings with ReactDOM.Style.t\nDESCRIPTION: Creates type-safe bindings to Emotion's css function using ReactDOM.Style.t to ensure only valid CSS properties are used, with usage examples.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/styling.mdx#2025-04-18_snippet_11\n\nLANGUAGE: rescript\nCODE:\n```\n@module(\"@emotion/css\") external css: ReactDOM.Style.t => string = \"css\"\n\n// Usage is slightly different (and probably less ergonomic)\nlet container = ReactDOM.Style.make(~padding=\"20px\", ())->css;\n\nlet app = <div\n  className={container}\n/>\n```\n\n----------------------------------------\n\nTITLE: Constructor Arguments with Polymorphic Variants\nDESCRIPTION: Demonstrates how to use constructor arguments with polymorphic variants, similar to regular variants\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/polymorphic-variant.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\ntype account = [\n  | #Anonymous\n  | #Instagram(string)\n  | #Facebook(string, int)\n]\n\nlet me: account = #Instagram(\"Jenny\")\nlet him: account = #Facebook(\"Josh\", 26)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar me = {\n  NAME: \"Instagram\",\n  VAL: \"Jenny\"\n};\n\nvar him = {\n  NAME: \"Facebook\",\n  VAL: [\n    \"Josh\",\n    26\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Shuffled Copy of an Array in ReScript\nDESCRIPTION: The shuffle function returns a fresh array with the items from the original array randomly shuffled, preserving the original array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/array.mdx#2025-04-18_snippet_10\n\nLANGUAGE: ReScript\nCODE:\n```\nlet shuffle: array<'a> => array<'a>\n```\n\n----------------------------------------\n\nTITLE: Friend List Item Component with Duplicated Logic\nDESCRIPTION: A ReScript component for displaying a friend in a contact list with color coding for online status. This component duplicates the subscription logic seen in the FriendStatus component, demonstrating the need for a custom hook.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/hooks-custom.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\n// FriendListItem.res\ntype state = Offline | Loading | Online\n\n// module ChatAPI = {...}\n\ntype friend = {\n  id: string,\n  name: string\n}\n\n@react.component\nlet make = (~friend: friend) => {\n  let (state, setState) = React.useState(_ => Offline)\n\n  React.useEffect(() => {\n    let handleStatusChange = (status) => {\n      setState(_ => {\n        status.ChatAPI.isOnline ? Online : Offline\n      })\n    }\n\n    ChatAPI.subscribeToFriendStatus(friend.id, handleStatusChange)\n    setState(_ => Loading)\n\n    let cleanup = () => {\n      ChatAPI.unsubscribeFromFriendStatus(friend.id, handleStatusChange)\n    }\n\n    Some(cleanup)\n  })\n\n  let color = switch(state) {\n    | Offline => \"red\"\n    | Online => \"green\"\n    | Loading => \"grey\"\n  }\n\n  <li style={ReactDOMStyle.make(~color,())}>\n      {React.string(friend.name)}\n  </li>\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling with Pattern Matching in Async Functions\nDESCRIPTION: Demonstrates how to unify error and value handling in a single switch statement with pattern matching on the await call.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/async-await.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\nlet authenticate = async () => {\n  raise(Js.Exn.raiseRangeError(\"Authentication failed.\"))\n}\n\nlet checkAuth = async () => {\n  switch await authenticate() {\n  | _ => Js.log(\"ok\")\n  | exception Js.Exn.Error(e) => \n    switch Js.Exn.message(e) {\n    | Some(msg) => Js.log(\"JS error thrown: \" ++ msg)\n    | None => Js.log(\"Some other exception has been thrown\")\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ReScript Exceptions for JavaScript Consumption\nDESCRIPTION: Demonstrates how to create ReScript exceptions that can be caught and used by JavaScript code. The example shows an exception with an inline record containing custom fields.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/exception.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nexception BadArgument({myMessage: string})\n\nlet myTest = () => {\n  raise(BadArgument({myMessage: \"Oops!\"}))\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar Caml_exceptions = require(\"./stdlib/caml_exceptions.js\");\n\nvar BadArgument = Caml_exceptions.create(\"Playground.BadArgument\");\n\nfunction myTest() {\n  throw {\n    RE_EXN_ID: BadArgument,\n    myMessage: \"Oops!\",\n    Error: new Error()\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Pipe Usage in ReScript\nDESCRIPTION: Demonstrates how the pipe operator can improve readability by flipping function calls inside-out.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/pipe.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nvalidateAge(getAge(parseData(person)))\n```\n\nLANGUAGE: rescript\nCODE:\n```\nperson\n  ->parseData\n  ->getAge\n  ->validateAge\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvalidateAge(getAge(parseData(person)));\n```\n\n----------------------------------------\n\nTITLE: Binding to JavaScript Classes with the new Keyword\nDESCRIPTION: Demonstrates how to use the @new attribute to create instances of JavaScript classes like Date, emulating the new Date() constructor call in JavaScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/bind-to-js-object.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\ntype t\n@new external createDate: unit => t = \"Date\"\n\nlet date = createDate()\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar date = new Date();\n```\n\n----------------------------------------\n\nTITLE: Creating a Typed useParams Hook with Module Functions in ReScript\nDESCRIPTION: Demonstrates how to create a module function for Next.js's useParams hook that returns typed parameters. Shows the implementation and usage in a React component.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/module-functions.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\nmodule Next = {\n  // define our module function\n  module MakeParams = (Params: { type t }) => {\n    @module(\"next/navigation\")\n    external useParams: unit => Params.t = \"useParams\"\n    /* You can use values from the function parameter, such as Params.t */\n  }\n}\n\nmodule Component: {\n  @react.component\n  let make: unit => Jsx.element\n} = {\n  // Create a module that matches the module type expected by Next.MakeParams\n  module P = {\n    type t = {\n      tag: string,\n      item: string,\n    }\n  }\n\n  // Create a new module using the Params module we created and the Next.MakeParams module function\n  module Params = Next.MakeParams(P)\n\n  @react.component\n  let make = () => {\n    // Use the functions, values, or types created by the module function\n    let params = Params.useParams()\n    <div>\n      <p>\n        {React.string(\"Tag: \" ++ params.tag /* params is fully typed! */)}\n      </p>\n      <p> {React.string(\"Item: \" ++ params.item)} </p>\n    </div>\n  }\n}\n```\n\nLANGUAGE: js\nCODE:\n```\n// Generated by ReScript, PLEASE EDIT WITH CARE\n\nimport * as $$Navigation from \"next/navigation\";\nimport * as JsxRuntime from \"react/jsx-runtime\";\n\nfunction MakeParams(Params) {\n  return {};\n}\n\nvar Next = {\n  MakeParams: MakeParams\n};\n\nfunction Playground$Component(props) {\n  var params = $$Navigation.useParams();\n  return JsxRuntime.jsxs(\"div\", {\n              children: [\n                JsxRuntime.jsx(\"p\", {\n                      children: \"Tag: \" + params.tag\n                    }),\n                JsxRuntime.jsx(\"p\", {\n                      children: \"Item: \" + params.item\n                    })\n              ]\n            });\n}\n\nvar Component = {\n  make: Playground$Component\n};\n\nexport {\n  Next ,\n  Component ,\n}\n/* next/navigation Not a pure module */\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Record Type Spread in ReScript\nDESCRIPTION: Shows how to spread fields from multiple record types into a new record type, allowing better composition of record structures.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2023-05-17-enhanced-ergonomics-for-record-types.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype a = {\n  id: string,\n  name: string,\n}\n\ntype b = {\n  age: int\n}\n\ntype c = {\n  ...a,\n  ...b,\n  active: bool\n}\n```\n\n----------------------------------------\n\nTITLE: Zipping Arrays in ReScript\nDESCRIPTION: Creates an array of pairs from corresponding elements of two arrays. Stops with the shorter array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/array.mdx#2025-04-18_snippet_7\n\nLANGUAGE: ReScript\nCODE:\n```\nlet zip: (array<'a>, array<'b>) => array<('a, 'b)>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nBelt.Array.zip([1, 2], [3, 4, 5]) == [(1, 3), (2, 4)]\n```\n\n----------------------------------------\n\nTITLE: Constraining JavaScript Function Arguments Using Polymorphic Variants in ReScript\nDESCRIPTION: Shows how to use polymorphic variants with bs.string to constrain the possible values of a string argument in a JavaScript function binding. This example binds to the fs.readFileSync function, limiting its second argument to specific string values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/bind-to-js-function.mdx#2025-04-18_snippet_5\n\nLANGUAGE: reason\nCODE:\n```\n[@bs.module \"fs\"]\nexternal readFileSync: (\n  ~name: string,\n  [@bs.string] [\n    | `utf8\n    | [@bs.as \"ascii\"] `useAscii\n  ],\n) => string = \"fs\";\n\nreadFileSync(~name=\"xx.txt\", `useAscii);\n```\n\nLANGUAGE: ocaml\nCODE:\n```\nexternal readFileSync:\n  name:string ->\n  (([`utf8 | `useAscii [@bs.as \"ascii\"]]) [@bs.string]) ->\n  string = \"fs\"\n[@@bs.module \"fs\"]\n\nlet _ = readFileSync ~name:\"xx.txt\" `useAscii\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar Fs = require(\"fs\");\nFs.readFileSync(\"xx.txt\", \"ascii\");\n```\n\n----------------------------------------\n\nTITLE: Binding to JavaScript APIs with ReScript Objects\nDESCRIPTION: Using objects for quick JavaScript interoperation without creating detailed bindings. This example demonstrates accessing DOM methods and properties through the external keyword.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/object.mdx#2025-04-18_snippet_6\n\nLANGUAGE: res\nCODE:\n```\n// The type of document is just some random type 'a\n// that we won't bother to specify\n@val external document: 'a = \"document\"\n\n// call a method\ndocument[\"addEventListener\"](\"mouseup\", _event => {\n  Console.log(\"clicked!\")\n})\n\n// get a property\nlet loc = document[\"location\"]\n\n// set a property\ndocument[\"location\"][\"href\"] = \"rescript-lang.org\"\n```\n\nLANGUAGE: js\nCODE:\n```\ndocument.addEventListener(\"mouseup\", function(_event) {\n  console.log(\"clicked!\");\n});\nvar loc = document.location;\ndocument.location.href = \"rescript-lang.org\";\n```\n\n----------------------------------------\n\nTITLE: Handling Nullable Types with option in ReScript\nDESCRIPTION: Illustrates how to handle potentially null or undefined JavaScript values using the option type and Js.Nullable.toOption in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/newcomer-examples.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reason\nCODE:\n```\nlet greetByName = (possiblyNullName) => {\n  let optionName = Js.Nullable.toOption(possiblyNullName);\n  switch (optionName) {\n  | None => \"Hi\"\n  | Some(name) => \"Hello \" ++ name\n  }\n};\n```\n\nLANGUAGE: ml\nCODE:\n```\nlet greetByName possiblyNullName =\n  let optionName = Js.Nullable.toOption possiblyNullName in\n  match optionName with\n  | None -> \"Hi\"\n  | Some name -> \"Hello \" ^ name\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction greetByName(possiblyNullName) {\n  if (possiblyNullName == null) {\n    return \"Hi\";\n  } else {\n    return \"Hello \" + possiblyNullName;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting a Default Value for ES6 Modules in ReScript\nDESCRIPTION: Shows how to create an ES6 default export from ReScript by defining a binding named 'default'. The output includes considerations for both ES6 and CommonJS module formats.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/import-from-export-to-js.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\n// ReScriptStudent.res\nlet default = \"Bob\"\n```\n\nLANGUAGE: js\nCODE:\n```\nvar $$default = \"Bob\";\n\nexports.$$default = $$default;\nexports.default = $$default;\n// informal transpiler-compatible marker of a default export compiled from ES6\nexports.__esModule = true;\n```\n\nLANGUAGE: js\nCODE:\n```\nvar $$default = \"Bob\";\n\nexport {\n  $$default,\n  $$default as default,\n}\n```\n\n----------------------------------------\n\nTITLE: Binding to Variadic JavaScript Functions\nDESCRIPTION: Demonstrates how to bind to JavaScript functions that accept a variable number of arguments using the @variadic annotation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/bind-to-js-function.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\n@module(\"path\") @variadic\nexternal join: array<string> => string = \"join\"\n\nlet v = join([\"a\", \"b\"])\n```\n\nLANGUAGE: js\nCODE:\n```\nvar Path = require(\"path\");\nvar v = Path.join(\"a\", \"b\");\n```\n\n----------------------------------------\n\nTITLE: Array Spread Operations in ReScript\nDESCRIPTION: Shows how to use array spread operator to combine arrays in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/array-and-list.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet y = [1, 2]\nlet x = [4, 5, ...y]\nlet x2 = [4, 5, ...y, 7, ...y]\nlet x3 = [...y]\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar Belt_Array = require(\"rescript/lib/js/belt_Array.js\");\n\nvar y = [\n  1,\n  2\n];\n\nvar x = Belt_Array.concatMany([\n      [\n        4,\n        5\n      ],\n      y\n    ]);\n\nvar x2 = Belt_Array.concatMany([\n      [\n        4,\n        5\n      ],\n      y,\n      [7],\n      y\n    ]);\n\nvar x3 = Belt_Array.concatMany([y]);\n```\n\n----------------------------------------\n\nTITLE: Importing from another module in ReScript\nDESCRIPTION: Demonstrates how to import content from another ReScript file (Student.re) without needing an import statement. Every ReScript file is automatically a module.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/import-export.mdx#2025-04-18_snippet_0\n\nLANGUAGE: re\nCODE:\n```\n// Inside School.re\nlet studentMessage = Student.message;\n```\n\nLANGUAGE: ml\nCODE:\n```\n(* Inside School.re *)\nlet studentMessage = Student.message\n```\n\nLANGUAGE: js\nCODE:\n```\nvar Student = require(\"./Student.bs\");\nvar studentMessage = Student.message\n```\n\n----------------------------------------\n\nTITLE: Basic If/Else Expression in ReScript with JavaScript Output\nDESCRIPTION: Demonstrates how to use if/else expressions in ReScript to create a conditional greeting message. Shows both ReScript syntax and the resulting JavaScript ternary expression output.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/language_if_else.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nlet user = \"Anna\"\n\nlet greeting = if user === \"Anna\" {\n  \"Hi Anna!\"\n} else {\n  \"Hi unknown!\"\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar user = \"Anna\";\n\nvar greeting = user === \"Anna\" ? \"Hi Anna!\" : \"Hi unknown!\";\n```\n\n----------------------------------------\n\nTITLE: Destructuring in Function Parameters in ReScript\nDESCRIPTION: Demonstrates how to destructure data directly in function parameters. This example shows a function that extracts the string message from a Success variant through pattern matching in the parameter.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\ntype result =\n  | Success(string)\nlet displayMessage = (Success(m)) => {\n  // we've directly extracted the success message\n  // string by destructuring the parameter\n  Js.log(m)\n}\ndisplayMessage(Success(\"You did it!\"))\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction displayMessage(m) {\n  console.log(m._0);\n}\n\ndisplayMessage(/* Success */{\n  _0: \"You did it!\"\n});\n```\n\n----------------------------------------\n\nTITLE: Declaring Nullable Types for JavaScript Interop in ReScript\nDESCRIPTION: Shows how to declare a nullable string type for JavaScript interoperability using the Nullable module.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/null-undefined-option.mdx#2025-04-18_snippet_5\n\nLANGUAGE: ReScript\nCODE:\n```\n@module(\"MyConstant\") external myId: Nullable.t<string> = \"myId\"\n```\n\n----------------------------------------\n\nTITLE: Binding JavaScript Function with Labeled Arguments in ReScript\nDESCRIPTION: Shows how to bind a JavaScript function with labeled arguments in ReScript. This example binds a 'draw' function from 'MyGame.js' with optional parameters, demonstrating how ReScript can improve clarity in function calls.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/bind-to-js-function.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reason\nCODE:\n```\n[@bs.module \"MyGame\"]\nexternal draw: (~x: int, ~y: int, ~border: bool=?, unit) => unit = \"draw\";\n\ndraw(~x=10, ~y=20, ~border=true, ());\ndraw(~x=10, ~y=20, ());\n```\n\nLANGUAGE: ocaml\nCODE:\n```\nexternal draw: x:int -> y:int -> ?border:bool -> unit -> unit = \"draw\"\n[@@bs.module \"MyGame\"]\n\nlet () = draw ~x:10 ~y:20 ~border:true ()\nlet () = draw ~x:10 ~y:20 ()\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar MyGame = require(\"MyGame\");\n\nMyGame.draw(10, 20, true);\nMyGame.draw(10, 20, undefined);\n```\n\n----------------------------------------\n\nTITLE: Basic Pipe Usage with Function Composition\nDESCRIPTION: Demonstrates how pipe operator transforms nested function calls into a more readable linear flow.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/pipe.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\nvalidateAge(getAge(parseData(person)));\n```\n\nLANGUAGE: ml\nCODE:\n```\nvalidateAge (getAge (parseData person))\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvalidateAge(getAge(parseData(person)));\n```\n\n----------------------------------------\n\nTITLE: Basic Unboxed Type Example in ReScript\nDESCRIPTION: Demonstrates the basic usage of variants and records with and without the @unboxed attribute, showing the difference in JavaScript output.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/unboxed.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype name = Name(string)\nlet studentName = Name(\"Joe\")\n\ntype greeting = {message: string}\nlet hi = {message: \"hello!\"}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar studentName = /* Name */{\n  _0: \"Joe\"\n};\n\nvar hi = {\n  message: \"hello!\"\n};\n```\n\n----------------------------------------\n\nTITLE: Conditional Block Scoping in ReScript\nDESCRIPTION: Demonstrates how block scoping works with conditional statements. The let binding inside the if block is only accessible within that scope.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/let-binding.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nif displayGreeting {\n  let message = \"Enjoying the docs so far?\"\n  Js.log(message)\n}\n// `message` not accessible here!\n```\n\nLANGUAGE: js\nCODE:\n```\nif (displayGreeting) {\n  console.log(\"Enjoying the docs so far?\");\n}\n```\n\n----------------------------------------\n\nTITLE: Fall-Through Patterns in ReScript\nDESCRIPTION: Demonstrates using fall-through patterns in a switch statement to handle multiple cases with the same logic.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_6\n\nLANGUAGE: ReScript\nCODE:\n```\nlet myStatus = Vacations(10)\n\nswitch myStatus {\n| Vacations(days)\n| Sabbatical(days) => Console.log(`Come back in ${Int.toString(days)} days!`)\n| Sick\n| Present => Console.log(\"Hey! How are you?\")\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar myStatus = {\n  TAG: /* Vacations */0,\n  _0: 10\n};\n\nif (typeof myStatus === \"number\") {\n  console.log(\"Hey! How are you?\");\n} else {\n  console.log(\"Come back in \" + (10).toString() + \" days!\");\n}\n```\n\n----------------------------------------\n\nTITLE: List Prepending in ReScript\nDESCRIPTION: Demonstrates immutable list prepending using the spread syntax to create a new list.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/array-and-list.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet myList = list{1, 2, 3}\nlet anotherList = list{0, ...myList}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar myList = {\n  hd: 1,\n  tl: {\n    hd: 2,\n    tl: {\n      hd: 3,\n      tl: 0\n    }\n  }\n};\n\nvar anotherList = {\n  hd: 0,\n  tl: myList\n};\n```\n\n----------------------------------------\n\nTITLE: Binding to Nested Global Object Properties in ReScript\nDESCRIPTION: Demonstrates how to bind to deeply nested properties of global objects using a tuple with the @scope attribute.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/bind-to-global-js-values.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\n@val @scope((\"window\", \"location\", \"ancestorOrigins\"))\nexternal length: int = \"length\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Descending For Loop Example in ReScript\nDESCRIPTION: A practical example of a descending for loop in ReScript that counts down from 3 to 1 and logs each value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/control-flow.mdx#2025-04-18_snippet_7\n\nLANGUAGE: re\nCODE:\n```\n// prints: 3 2 1, one per line\nfor (x in 3 downto 1) {\n  Js.log(x);\n};\n```\n\nLANGUAGE: ml\nCODE:\n```\n(* prints: 3 2 1, one per line)\nfor x = 3 downto 1 do\n  Js.log x;\ndone\n```\n\nLANGUAGE: js\nCODE:\n```\nfor(var x = 3; x >= 1; --x){\n  console.log(x);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Wildcard for Ignoring Parts of Values in ReScript Pattern Matching\nDESCRIPTION: Demonstrates how to use the underscore (_) wildcard to ignore parts of a value when pattern matching in ReScript, focusing only on the variant name and ignoring the payload.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_7\n\nLANGUAGE: res\nCODE:\n```\nswitch person1 {\n| Teacher(_) => Console.log(\"Hi teacher\")\n| Student(_) => Console.log(\"Hey student\")\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nif (person1.TAG === \"Teacher\") {\n  console.log(\"Hi teacher\");\n} else {\n  console.log(\"Hey student\");\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping ReScript Record to JavaScript Array\nDESCRIPTION: Demonstrates how to map a ReScript record to a JavaScript array by using indices with the @as decorator.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/bind-to-js-object.mdx#2025-04-18_snippet_2\n\nLANGUAGE: ReScript\nCODE:\n```\ntype t = {\n  @as(\"0\") foo: int,\n  @as(\"1\") bar: string,\n}\n\nlet value = {foo: 7, bar: \"baz\"}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar value = [\n  7,\n  \"baz\"\n];\n```\n\n----------------------------------------\n\nTITLE: Mutable Record Updates in ReScript\nDESCRIPTION: Demonstrates how to declare mutable fields in a record and update them in-place using the assignment operator.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/record.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\ntype person = {\n  name: string,\n  mutable age: int\n}\n\nlet baby = {name: \"Baby ReScript\", age: 5}\nbaby.age = baby.age + 1 // `baby.age` is now 6. Happy birthday!\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar baby = {\n  name: \"Baby ReScript\",\n  age: 5\n};\n\nbaby.age = baby.age + 1 | 0;\n```\n\n----------------------------------------\n\nTITLE: Nested Conditional Logic in Pattern Matching (ReScript)\nDESCRIPTION: Shows how to implement conditional logic within pattern matching branches using if statements to check additional conditions on matched values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_13\n\nLANGUAGE: res\nCODE:\n```\nswitch person1 {\n| Teacher(_) => () // do nothing\n| Student({reportCard: {gpa}}) =>\n  if gpa < 0.5 {\n    Js.log(\"What's happening\")\n  } else {\n    Js.log(\"Heyo\")\n  }\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nif (person1.TAG) {\n  if (person1.reportCard.gpa < 0.5) {\n    console.log(\"What's happening\");\n  } else {\n    console.log(\"Heyo\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Guaranteed Uncurrying with External Bindings\nDESCRIPTION: Demonstrates using the uncurried function annotation with external bindings to ensure functions are fully applied without intermediate currying steps. This example binds to setTimeout with an uncurried callback function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/bind-to-js-function.mdx#2025-04-18_snippet_14\n\nLANGUAGE: res\nCODE:\n```\ntype timerId\n@val external setTimeout: ((. unit) => unit, int) => timerId = \"setTimeout\"\n\nlet id = setTimeout((.) => Js.log(\"hello\"), 1000)\n```\n\nLANGUAGE: js\nCODE:\n```\nvar id = setTimeout(function () {\n  console.log(\"hello\");\n}, 1000);\n```\n\n----------------------------------------\n\nTITLE: Importing Modules in ReScript with JavaScript Output\nDESCRIPTION: Demonstrates how ReScript handles module imports automatically without explicit import statements, showing both ReScript source and compiled JavaScript output.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/import-export.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\n// Inside School.res\nlet studentMessage = Student.message\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar Student = require(\"./Student.bs\");\nvar studentMessage = Student.message\n```\n\n----------------------------------------\n\nTITLE: Setting up a new ReScript project from template\nDESCRIPTION: Series of commands to clone the ReScript project template, install dependencies, build the project, and run the compiled JavaScript output. This creates a basic ReScript project with the new syntax.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/installation.mdx#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/rescript-lang/rescript-project-template\ncd rescript-project-template\nnpm install\nnpm run build\nnode src/Demo.bs.js\n```\n\n----------------------------------------\n\nTITLE: Using Option Type in ReScript\nDESCRIPTION: Demonstrates how to use the Option type to represent a potentially nonexistent value in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/null-undefined-option.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\nlet licenseNumber =\n  if personHasACar {\n    Some(5)\n  } else {\n    None\n  }\n```\n\nLANGUAGE: js\nCODE:\n```\nvar licenseNumber = personHasACar ? 5 : undefined;\n```\n\n----------------------------------------\n\nTITLE: Basic Pattern Matching with Switch in ReScript\nDESCRIPTION: Demonstrates a simple pattern matching example using switch to handle different variant cases. The code shows how to execute different code paths based on the structure of a variant value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nlet data = GoodResult(\"Product shipped!\")\nswitch data {\n| GoodResult(theMessage) =>\n  Console.log(\"Success! \" ++ theMessage)\n| BadResult(errorCode) =>\n  Console.log(\"Something's wrong. The error code is: \" ++ Int.toString(errorCode))\n| NoResult =>\n  Console.log(\"Bah.\")\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar data = {\n  TAG: \"GoodResult\",\n  _0: \"Product shipped!\"\n};\n\nif (typeof data !== \"object\") {\n  console.log(\"Bah.\");\n} else if (data.TAG === \"BadResult\") {\n  console.log(\"Something's wrong. The error code is: \" + \"Product shipped!\".toString());\n} else {\n  console.log(\"Success! Product shipped!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Variadic Function Binding in ReScript\nDESCRIPTION: Shows how to bind to JavaScript variadic functions using the @variadic decorator.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/interop-cheatsheet.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\n@module(\"path\") @variadic\nexternal join: array<string> => string = \"join\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Dynamically Importing Parts of a Module in ReScript\nDESCRIPTION: Shows how to dynamically import a specific part of a module using the import function, which returns a promise resolving to the specific binding. This enables code-splitting and lazy loading.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/import-from-export-to-js.mdx#2025-04-18_snippet_4\n\nLANGUAGE: ReScript\nCODE:\n```\n// App.res\nlet main = async () => {\n  let add = await import(MathUtils.add)\n  let onePlusOne = add(1, 1)\n\n  Console.log(onePlusOne)\n}\n```\n\nLANGUAGE: JavaScript (Module)\nCODE:\n```\nasync function main() {\n  var add = await import(\"./MathUtils.mjs\").then(function(m) {\n    return m.add;\n  });\n\n  var onePlusOne = add(1, 1);\n  console.log(onePlusOne);\n}\n```\n\n----------------------------------------\n\nTITLE: Forwarding Refs via Props in ReScript React\nDESCRIPTION: Example of passing a ref as a regular prop in a FancyInput component. This approach is recommended for forwarding refs in ReScript React applications, as it uses standard prop passing without additional APIs.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/forwarding-refs.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\n// App.res\n\nmodule FancyInput = {\n  @react.component\n  let make = (~children, ~inputRef: ReactDOM.domRef) =>\n    <div> <input type_=\"text\" ref=inputRef /> children </div>\n}\n\n@send external focus: Dom.element => unit = \"focus\"\n\n@react.component\nlet make = () => {\n  let input = React.useRef(Js.Nullable.null)\n\n  let focusInput = () =>\n    input.current\n    ->Js.Nullable.toOption\n    ->Belt.Option.forEach(input => input->focus)\n\n  let onClick = _ => focusInput()\n\n  <div>\n    <FancyInput inputRef={ReactDOM.Ref.domRef(input)}>\n      <button onClick> {React.string(\"Click to focus\")} </button>\n    </FancyInput>\n  </div>\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Array Elements with Keys in ReScript React\nDESCRIPTION: Demonstrates how to map an array of numbers to list items, using the number itself as the key for each element.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/arrays-and-keys.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nlet numbers = [1, 2, 3, 4, 5];\n\nlet items = Belt.Array.map(numbers, (number) => {\n  <li key={Belt.Int.toString(number)}> {React.int(number)} </li>\n})\n```\n\n----------------------------------------\n\nTITLE: Using If Clause in ReScript Pattern Matching\nDESCRIPTION: Demonstrates how to use an 'if' clause in ReScript pattern matching for additional checks on matched values. This allows for more complex conditions within the pattern.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_10\n\nLANGUAGE: ReScript\nCODE:\n```\nswitch person1 {\n| Teacher(_) => () // do nothing\n| Student({reportCard: {gpa}}) if gpa < 0.5 =>\n  Console.log(\"What's happening\")\n| Student(_) =>\n  // fall-through, catch-all case\n  Console.log(\"Heyo\")\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (person1.TAG) {\n  if (person1.reportCard.gpa < 0.5) {\n    console.log(\"What's happening\");\n  } else {\n    console.log(\"Heyo\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Recursive Types in ReScript\nDESCRIPTION: Shows how to define recursive types that reference themselves within their own definition.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/type.mdx#2025-04-18_snippet_4\n\nLANGUAGE: ReScript\nCODE:\n```\ntype rec person = {\n  name: string,\n  friends: array<person>\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: String Concatenation in ReScript vs JavaScript\nDESCRIPTION: Shows string concatenation in ReScript, which uses a specialized operator (++), and its corresponding JavaScript output using the plus operator.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/overview.mdx#2025-04-18_snippet_12\n\nLANGUAGE: rescript\nCODE:\n```\n\"Hello \" ++ \"World\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\n\"Hello \" + \"World\"\n```\n\n----------------------------------------\n\nTITLE: Reducing Belt.Set in ReScript\nDESCRIPTION: Demonstrates how to reduce a Belt.Set to a single value using the reduce function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/set.mdx#2025-04-18_snippet_11\n\nLANGUAGE: rescript\nCODE:\n```\nlet s0 = Belt.Set.fromArray([5,2,3,5,6], ~id=module(IntCmp))\ns0->Belt.Set.reduce(list{}, (acc, element) =>\n  acc->Belt.List.add(element)\n) /* [6,5,3,2] */\n```\n\n----------------------------------------\n\nTITLE: Importing Named Export from JavaScript Module in ReScript\nDESCRIPTION: Example showing how to import a named export (dirname) from Node.js path module using ReScript's external binding.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/import-from-export-to-js.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\n@module(\"path\") external dirname: string => string = \"dirname\"\nlet root = dirname(\"/User/github\")\n```\n\n----------------------------------------\n\nTITLE: Importing an Entire JavaScript Module in ReScript\nDESCRIPTION: Shows how to import a JavaScript module as a single value by omitting the string argument to @module. The output varies depending on whether you're targeting CommonJS or ES6 modules.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/import-from-export-to-js.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\n@module external leftPad: string => int => string = \"./leftPad\"\nlet paddedResult = leftPad(\"hi\", 5)\n```\n\nLANGUAGE: js\nCODE:\n```\nvar LeftPad = require(\"./leftPad\");\nvar paddedResult = LeftPad(\"hi\", 5);\n```\n\nLANGUAGE: js\nCODE:\n```\nimport * as LeftPad from \"./leftPad\";\nvar paddedResult = LeftPad(\"hi\", 5);\n```\n\n----------------------------------------\n\nTITLE: Defining Recursive Polymorphic Variant Types\nDESCRIPTION: Shows how to define recursive polymorphic variant types using the rec keyword. This enables creating complex data structures like trees or nested content.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/polymorphic-variant.mdx#2025-04-18_snippet_9\n\nLANGUAGE: res\nCODE:\n```\ntype rec markdown = [\n  | #Text(string)\n  | #Paragraph(markdown)\n  | #Ul(array<markdown>)\n]\n\nlet content: markdown = #Paragraph(#Text(\"hello world\"))\n```\n\nLANGUAGE: js\nCODE:\n```\nvar content = {\n  NAME: \"Paragraph\",\n  VAL: {\n    NAME: \"Text\",\n    VAL: \"hello world\"\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Arrays in ReScript\nDESCRIPTION: Demonstrates how to create an array in ReScript using different syntaxes. Arrays are mutable, homogeneous data structures that can be dynamically sized.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/array-and-list.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\nlet myArray = [|\"hello\", \"world\", \"how are you\"|];\n```\n\nLANGUAGE: ml\nCODE:\n```\nlet myArray = [|\"hello\"; \"world\"; \"how are you\"|]\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar myArray = [\"hello\", \"world\", \"how are you\"];\n```\n\n----------------------------------------\n\nTITLE: Children Props in ReScript React Components\nDESCRIPTION: Demonstrates how to create a component that accepts children elements. The MyList component wraps its children in an unordered list element, showing how React.element children work in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/components-and-props.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nmodule MyList = {\n  @react.component\n  let make = (~children: React.element) => {\n    <ul>\n      children\n    </ul>\n  }\n}\n\n<MyList>\n  <li> {React.string(\"Item 1\")} </li>\n  <li> {React.string(\"Item 2\")} </li>\n</MyList>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction MyList(props) {\n  return React.createElement(\"ul\", undefined, props.children);\n}\n\nvar MyList = {\n  make: MyList\n};\n\nReact.createElement(MyList, {\n    children: null\n  }, React.createElement(\"li\", undefined, \"Item 1\"),\n    React.createElement(\"li\", undefined, \"Item 2\"));\n```\n\n----------------------------------------\n\nTITLE: Constraining String Arguments with Polymorphic Variants\nDESCRIPTION: Demonstrates using polymorphic variants with @string annotation to constrain string arguments to a specific set of allowed values, providing better type safety for JavaScript functions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/bind-to-js-function.mdx#2025-04-18_snippet_8\n\nLANGUAGE: res\nCODE:\n```\n@module(\"fs\")\nexternal readFileSync: (\n  ~name: string,\n  @string [\n    | #utf8\n    | @as(\"ascii\") #useAscii\n  ],\n) => string = \"readFileSync\"\n\nreadFileSync(~name=\"xx.txt\", #useAscii)\n```\n\nLANGUAGE: js\nCODE:\n```\nvar Fs = require(\"fs\");\nFs.readFileSync(\"xx.txt\", \"ascii\");\n```\n\n----------------------------------------\n\nTITLE: Binding to Event Listeners with Polymorphic Variants\nDESCRIPTION: Shows a pattern for binding to JavaScript event listeners using polymorphic variants to provide type-safe event handling.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/bind-to-js-function.mdx#2025-04-18_snippet_10\n\nLANGUAGE: res\nCODE:\n```\ntype readline\n\n@send\nexternal on: (\n    readline,\n    @string [\n      | #close(unit => unit)\n      | #line(string => unit)\n    ]\n  )\n  => readline = \"on\"\n\nlet register = rl =>\n  rl\n  ->on(#close(event => ()))\n  ->on(#line(line => Js.log(line)));\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction register(rl) {\n  return rl\n    .on(\"close\", function($$event) {})\n    .on(\"line\", function(line) {\n      console.log(line);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming Promises with then() in ReScript\nDESCRIPTION: Example of accessing and transforming promise contents using the then method from Js.Promise2 module with the ReScript pipe operator.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/promise.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet logAsyncMessage = () => {\n  open Js.Promise2\n  Js.Promise2.resolve(\"hello world\")\n  ->then(msg => {\n    // then callbacks require the result to be resolved explicitly\n    resolve(\"Message: \" ++ msg)\n  })\n  ->then(msg => {\n    Js.log(msg)\n\n    // Even if there is no result, we need to use resolve() to return a promise\n    resolve()\n  })\n  ->ignore // Requires ignoring due to unhandled return value\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Exceptions in Lazy Computations\nDESCRIPTION: This snippet shows how to handle exceptions that might occur when forcing a lazy computation. The example uses a try-catch block to handle the Not_found exception and return an empty array as a fallback.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/lazy-values.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nlet result = try {\n  Lazy.force(expensiveFilesRead)\n} catch {\n| Not_found => [] // empty array of files\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar result;\n\ntry {\n  result = CamlinternalLazy.force(expensiveFilesRead);\n} catch (raw_exn) {\n  var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);\n  if (exn.RE_EXN_ID === \"Not_found\") {\n    result = [];\n  } else {\n    throw exn;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Module Type from Actual Module in ReScript\nDESCRIPTION: This example shows how to extract a module type from an actual module using 'include (module type of ModuleName)'. It extends the List module from the standard library.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/module.mdx#2025-04-18_snippet_12\n\nLANGUAGE: res\nCODE:\n```\nmodule type MyList = {\n  include (module type of List)\n  let myListFun: list<'a> => list<'a>\n}\n```\n\nLANGUAGE: js\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Explicitly Passing Optional Arguments in ReScript (Shorthand)\nDESCRIPTION: Demonstrates the shorthand syntax for forwarding an optional value using the ?= operator. This is a concise way to pass the entire option wrapper.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/function.mdx#2025-04-18_snippet_12\n\nLANGUAGE: rescript\nCODE:\n```\nlet result = drawCircle(~color, ~radius=?payloadRadius, ())\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = drawCircle(1, undefined, undefined);\n```\n\n----------------------------------------\n\nTITLE: ReScript React.forwardRef Component Implementation\nDESCRIPTION: Shows how to use the @react.component decorator with React.forwardRef and its expanded form with proper type definitions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/beyond-jsx.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nmodule FancyInput = {\n  @react.component\n  let make = React.forwardRef((~className=?, ~children, ref_) =>\n    <div>\n      // use ref_ here\n    </div>\n  )\n}\n```\n\nLANGUAGE: rescript\nCODE:\n```\nmodule FancyInput = {\n  @obj\n  external makeProps: (\n    ~className: 'className=?,\n    ~children: 'children,\n    ~key: string=?,\n    ~ref: 'ref=?,\n    unit,\n  ) => {\"className\": option<'className>, \"children\": 'children} = \"\"\n\n  let make =\n    (~className=?, ~children) => ref_ => ReactDOMRe.createDOMElementVariadic(\"div\", [])\n\n  let make = React.forwardRef(\n    (props: {\"className\": option<'className>, \"children\": 'children}, ref_,) => {\n      make(\n        ~className=props[\"className\"],\n        ~children=props[\"children\"],\n        ref_)\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Array Mapping in ReScript\nDESCRIPTION: map and mapU functions transform array elements using a provided function. Returns a new array with transformed values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/array.mdx#2025-04-18_snippet_12\n\nLANGUAGE: rescript\nCODE:\n```\nBelt.Array.map([1, 2], (x) => x + 2) == [3, 4]\n```\n\n----------------------------------------\n\nTITLE: Accessing Ref Values in ReScript\nDESCRIPTION: Shows how to access the current value of a ref, which is stored in the current attribute of the ref object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/refs-and-the-dom.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet value = myRef.current\n```\n\n----------------------------------------\n\nTITLE: Using Not_found Exception in ReScript\nDESCRIPTION: Demonstrates use of the built-in Not_found exception with a try-catch block. Shows error handling for item lookup operations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/exception.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet getItem = (item: int) =>\n  if (item === 3) {\n    // return the found item here\n    1\n  } else {\n    raise(Not_found)\n  }\n\nlet result =\n  try {\n    getItem(2)\n  } catch {\n  | Not_found => 0 // Default value if getItem throws\n  }\n```\n\n----------------------------------------\n\nTITLE: Using Fragment Syntax in ReScript JSX\nDESCRIPTION: Demonstrates Fragment syntax in ReScript JSX for rendering multiple children without a container element. Fragments compile to a list of children in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/jsx.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\n<> child1 child2 </>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nReact.createElement(React.Fragment, undefined, child1, child2);\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlist{child1, child2}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nReact.createElement(React.Fragment, undefined, child1, child2);\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching on Inline Tuples\nDESCRIPTION: Demonstrates pattern matching on a tuple of values, using OR patterns to handle multiple cases that should result in the same outcome.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_8\n\nLANGUAGE: res\nCODE:\n```\ntype animal = Dog | Cat | Bird\nlet categoryId = switch (isBig, myAnimal) {\n| (true, Dog) => 1\n| (true, Cat) => 2\n| (true, Bird) => 3\n| (false, Dog | Cat) => 4\n| (false, Bird) => 5\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar categoryId = isBig ? (myAnimal + 1) | 0 : myAnimal >= 2 ? 5 : 4;\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Modules in ReScript\nDESCRIPTION: Illustrates how to create and use nested modules in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/module.mdx#2025-04-18_snippet_2\n\nLANGUAGE: ReScript\nCODE:\n```\nmodule MyModule = {\n  module NestedModule = {\n    let message = \"hello\"\n  }\n}\n\nlet message = MyModule.NestedModule.message\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar NestedModule = {\n  message: message\n};\n\nvar MyModule = {\n  NestedModule: NestedModule\n};\n\nvar message = MyModule.NestedModule.message;\n```\n\n----------------------------------------\n\nTITLE: Binding to Record-like JS Objects using ReScript Record\nDESCRIPTION: Demonstrates how to bind a JavaScript object with fixed fields to a ReScript record type. It includes an external declaration to import a person object from a module.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/bind-to-js-object.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\ntype person = {\n  name: string,\n  friends: array(string),\n  age: int,\n};\n\n[@bs.module \"MySchool\"] external john: person = \"john\";\n\nlet johnName = john.name;\n```\n\nLANGUAGE: ocaml\nCODE:\n```\ntype person = {\n  name: string;\n  friends: string array;\n  age: int;\n}\n\nexternal john: person = \"john\" [@@bs.module \"MySchool\"]\n\nlet johnName = john.name\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar MySchool = require(\"MySchool\");\n\nvar johnName = MySchool.john.name;\n```\n\n----------------------------------------\n\nTITLE: JSON Parsing Example - Simple String\nDESCRIPTION: Example demonstrating how to parse a simple JSON string and handle potential errors.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/json.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\nlet json = try Js.Json.parseExn(` \"hello\" `) catch {\n| _ => failwith(\"Error parsing JSON string\")\n}\n\nswitch Js.Json.classify(json) {\n| Js.Json.JSONString(value) => Js.log(value)\n| _ => failwith(\"Expected a string\")\n}\n```\n\n----------------------------------------\n\nTITLE: Component with Type Inference in ReScript\nDESCRIPTION: Shows how ReScript's type system can infer component prop types based on their usage. This example demonstrates a Button component where prop types are inferred rather than explicitly annotated.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/components-and-props.mdx#2025-04-18_snippet_9\n\nLANGUAGE: res\nCODE:\n```\n// Button.res\n\n@react.component\nlet make = (~onClick, ~msg, ~children) => {\n  <div onClick>\n    {React.string(msg)}\n    children\n  </div>\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Polymorphic JavaScript Function Using Polymorphic Variants in ReScript\nDESCRIPTION: Demonstrates how to bind a JavaScript function that accepts different types of arguments using polymorphic variants and the bs.unwrap attribute. This example binds to a padLeft function that can take either a string or a number as its second argument.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/bind-to-js-function.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reason\nCODE:\n```\n[@bs.val]\nexternal padLeft: (\n  string,\n  [@bs.unwrap] [\n    | `Str(string)\n    | `Int(int)\n  ]\n) => string = \"padLeft\";\n\npadLeft(\"Hello World\", `Int(4));\npadLeft(\"Hello World\", `Str(\"Message from ReScript: \"));\n```\n\nLANGUAGE: ocaml\nCODE:\n```\nexternal padLeft:\n  string ->\n  (([`Str of string | `Int of int]) [@bs.unwrap]) ->\n  string = \"padLeft\" [@@bs.val]\n\nlet _ = padLeft \"Hello World\" (`Int 4)\nlet _ = padLeft \"Hello World\" (`Str \"Message from ReScript: \")\n```\n\nLANGUAGE: javascript\nCODE:\n```\npadLeft(\"Hello World\", 4);\npadLeft(\"Hello World\", \"Message from ReScript: \");\n```\n\n----------------------------------------\n\nTITLE: Configuring Public Modules in ReScript\nDESCRIPTION: Shows how to explicitly allow specific modules to be seen from outside in rescript.json. Useful for library authors to control the public API.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/build-configuration.mdx#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sources\": {\n    \"dir\": \"src\",\n    \"public\": [\"MyMainModule\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Promise Function Signature in ReScript\nDESCRIPTION: A type definition and function signature example showing how to declare a function that returns a promise in a ReScript interface file.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/promise.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\n// User.resi file\n\ntype user = {name: string}\n\nlet fetchUser: string => promise<user>\n```\n\n----------------------------------------\n\nTITLE: Declaring External JavaScript Bindings in ReScript\nDESCRIPTION: Examples of declaring external bindings to JavaScript functions using ReScript syntax. This shows the basic structure with the mandatory type annotation and the @bs.val decorator for binding to global JavaScript values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/external.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\n[@bs.val] external setTimeout: (unit => unit, int) => float = \"setTimeout\";\n```\n\nLANGUAGE: OCaml\nCODE:\n```\nexternal setTimeout: (unit -> unit) -> int -> float = \"setTimeout\" [@@bs.val]\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Block Scope in ReScript\nDESCRIPTION: Shows how to use block scope with curly braces to limit binding accessibility.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/let-binding.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\nlet message = {\n  let part1 = \"hello\"\n  let part2 = \"world\"\n  part1 ++ \" \" ++ part2\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar message = \"hello world\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Sources in ReScript Build\nDESCRIPTION: Examples of specifying source directories in rescript.json. Shows different ways to include source files and subdirectories in the build process.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/build-configuration.mdx#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sources\": [\"src\", \"examples\"]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sources\": {\n    \"dir\": \"src\",\n    \"subdirs\": [\"page\"]\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sources\": [\n    \"examples\",\n    {\n      \"dir\": \"src\",\n      \"subdirs\": true // recursively builds every subdirectory\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Record Type Coercion with Optional Fields\nDESCRIPTION: Shows advanced record type coercion with optional fields, demonstrating how mandatory option fields can be coerced to optional fields.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2023-05-17-enhanced-ergonomics-for-record-types.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\ntype a = {\n  name: string,\n\n  // mandatory, but explicitly typed as option<int>\n  age: option<int>,\n}\n\ntype b = {\n  name: string,\n  // optional field\n  age?: int,\n}\n\nlet nameFromB = (b: b) => b.name\n\nlet a: a = {\n  name: \"Name\",\n  age: Some(35),\n}\n\nlet name = nameFromB(a :> b)\n```\n\n----------------------------------------\n\nTITLE: Reordering labeled arguments in ReScript function bindings\nDESCRIPTION: Shows how labeled arguments in ReScript can be freely reordered when calling a function, while still generating the correct parameter order in JavaScript output.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/bind-to-js-function.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\n@module(\"MyGame\")\nexternal draw: (~x: int, ~y: int, ~border: bool=?, unit) => unit = \"draw\"\n\ndraw(~x=10, ~y=20, ())\ndraw(~y=20, ~x=10, ())\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar MyGame = require(\"MyGame\");\n\nMyGame.draw(10, 20, undefined);\nMyGame.draw(10, 20, undefined);\n```\n\n----------------------------------------\n\nTITLE: ReScript Exception Interop with JavaScript\nDESCRIPTION: Shows how to create ReScript exceptions that can be caught and handled by JavaScript code.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/exception.mdx#2025-04-18_snippet_5\n\nLANGUAGE: reason\nCODE:\n```\nexception BadArgument({myMessage: string});\n\nlet myTest = () => {\n  raise(BadArgument({myMessage: \"Oops!\"}));\n};\n```\n\n----------------------------------------\n\nTITLE: Immutable Record Updates with Spread Operator\nDESCRIPTION: Demonstrates how to create new records from existing ones using the spread operator. This creates a new record without modifying the original, preserving immutability.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/record.mdx#2025-04-18_snippet_5\n\nLANGUAGE: reason\nCODE:\n```\nlet meNextYear = {...me, age: me.age + 1};\n```\n\nLANGUAGE: ml\nCODE:\n```\nlet meNextYear = {me with age = me.age + 1}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar meNextYear = {\n  age: 21,\n  name: \"Big ReScript\"\n};\n```\n\n----------------------------------------\n\nTITLE: Prop Punning in ReScript JSX\nDESCRIPTION: Shows prop punning in ReScript JSX, a syntax shorthand where a label and value with the same name can be written once. This makes passing multiple props more concise.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/jsx.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\n<MyComponent isLoading text onClick />\n```\n\nLANGUAGE: javascript\nCODE:\n```\nReact.createElement(MyComponent, {\n  isLoading: true,\n  text: text,\n  onClick: onClick\n});\n```\n\n----------------------------------------\n\nTITLE: Record Type Field Resolution Example in ReScript\nDESCRIPTION: Demonstrates how ReScript handles record types with similar field names, showing that functions cannot accept any record type with a specific field name. The type system will infer the closest matching record type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/record.mdx#2025-04-18_snippet_18\n\nLANGUAGE: res\nCODE:\n```\ntype person = {age: int, name: string}\ntype monster = {age: int, hasTentacles: bool}\n\nlet getAge = (entity) => entity.age\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction getAge(entity) {\n  return entity.age;\n}\n```\n\n----------------------------------------\n\nTITLE: Raw JavaScript Extension Point in ReScript\nDESCRIPTION: Demonstrates the %raw extension point which allows embedding raw JavaScript code directly in ReScript files.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/attribute.mdx#2025-04-18_snippet_2\n\nLANGUAGE: ReScript\nCODE:\n```\n%raw(\"var a = 1\")\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar a = 1\n```\n\n----------------------------------------\n\nTITLE: Mutating @deriving(abstract) Objects with Setter Functions\nDESCRIPTION: Shows how to make fields of abstract objects mutable and use the generated setter functions to modify their values, with both direct and Pipe syntax.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/generate-converters-accessors.mdx#2025-04-18_snippet_19\n\nLANGUAGE: ReScript\nCODE:\n```\n@deriving(abstract)\ntype person = {\n  name: string,\n  mutable age: int,\n  job: string,\n}\n\nlet joe = person(~name=\"Joe\", ~age=20, ~job=\"teacher\");\nageSet(joe, 21);\n\n// Alternative using Pipe syntax\njoe->ageSet(21)\n```\n\n----------------------------------------\n\nTITLE: Coercing Polymorphic Variants to Strings in ReScript\nDESCRIPTION: This example demonstrates how to coerce a polymorphic variant to a string at zero runtime cost. The example shows a company type with Apple and Facebook constructors being coerced to a string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/polymorphic-variant.mdx#2025-04-18_snippet_15\n\nLANGUAGE: res\nCODE:\n```\ntype company = [#Apple | #Facebook]\nlet theCompany: company = #Apple\n\nlet message = \"Hello \" ++ (theCompany :> string)\n```\n\nLANGUAGE: js\nCODE:\n```\nvar theCompany = \"Apple\";\nvar message = \"Hello \" + theCompany;\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Types in ReScript\nDESCRIPTION: Demonstrates the use of type parameters (generics) to create reusable, parameterized types.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/type.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ReScript\nCODE:\n```\ntype coordinates<'a> = ('a, 'a, 'a)\n\nlet a: coordinates<int> = (10, 20, 20)\nlet b: coordinates<float> = (10.5, 20.5, 20.5)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar a = [10, 20, 20];\nvar b = [10.5, 20.5, 20.5];\n```\n\n----------------------------------------\n\nTITLE: Scoped Polymorphic Type Constraints in ReScript\nDESCRIPTION: Examples showing where scoped polymorphic types work in ReScript (let-bindings) and where they encounter syntax errors (function bodies, separate type definitions).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/scoped-polymorphic-types.mdx#2025-04-18_snippet_6\n\nLANGUAGE: res\nCODE:\n```\nexception Abort\n\nlet testExn: 'a. unit => 'a = () => raise(Abort) // Works!\n\nlet testExn2 = (): 'a. 'a = raise(Abort) // Syntax error!\ntype fn = 'a. 'a => unit // Syntax error!\n```\n\n----------------------------------------\n\nTITLE: Using Belt.Option.map in ReScript\nDESCRIPTION: Shows how to use the map function to transform the value inside an option.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/option.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nBelt.Option.map(Some(3), x => x * x) /* Some(9) */\n\nBelt.Option.map(None, x => x * x) /* None */\n```\n\n----------------------------------------\n\nTITLE: Using Type Aliases in ReScript\nDESCRIPTION: Shows how to create and use type aliases to refer to existing types by different names.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/type.mdx#2025-04-18_snippet_2\n\nLANGUAGE: ReScript\nCODE:\n```\ntype scoreType = int\nlet x: scoreType = 10\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar x = 10;\n```\n\n----------------------------------------\n\nTITLE: Using wildcards in pattern matching (not recommended)\nDESCRIPTION: A concise but potentially problematic implementation using the wildcard pattern (_), which bypasses exhaustiveness checks and could lead to bugs if the variant type changes.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_17\n\nLANGUAGE: res\nCODE:\n```\nlet optionBoolToBool = opt => {\n  switch opt {\n  | Some(true) => true\n  | _ => false\n  }\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction optionBoolToBool(opt) {\n  if (opt !== undefined && opt) {\n    return true;\n  } else {\n    return false;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Polymorphic Variants in ReScript\nDESCRIPTION: Demonstrates how to define a closed polymorphic variant type 'status' with multiple constructors and create values using those constructors. Shows type definition with waiting, running, and error states, where error includes a string payload.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/language_polyvar.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype status = [#Waiting | #Running | #Error(string)]\n\nlet status1: status = #Waiting\nlet status2: status = #Error(\"Network error\")\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar status1 = \"Waiting\";\n\nvar status2 = {\n  NAME: \"Error\",\n  VAL: \"Network error\",\n};\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Spread Props in ReScript React\nDESCRIPTION: Shows how to use spread props in ReScript React components. The spread must be at the first position, followed by other props. Multiple spreads are not allowed.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/extensions-of-props.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\n<Comp {...props} a=\"a\" />\n```\n\nLANGUAGE: javascript\nCODE:\n```\nReact.createElement(Comp, {\n  a: \"a\",\n  b: \"b\"\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Single Value JavaScript Module in ReScript\nDESCRIPTION: Demonstrates importing an entire JavaScript module as a single value using ReScript's module external binding.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/import-from-export-to-js.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\n@module external leftPad: (string, int) => string = \"./leftPad\"\nlet paddedResult = leftPad(\"hi\", 5)\n```\n\n----------------------------------------\n\nTITLE: String Manipulation in ReScript\nDESCRIPTION: Shows string concatenation and interpolation in ReScript, which is similar to JavaScript but uses '++' for concatenation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/overview.mdx#2025-04-18_snippet_1\n\nLANGUAGE: ReScript\nCODE:\n```\n\"hello \" ++ \"world\"\n```\n\nLANGUAGE: ReScript\nCODE:\n```\n`hello ${message}`\n```\n\n----------------------------------------\n\nTITLE: Generating Field Accessors for Records in ReScript\nDESCRIPTION: This snippet demonstrates how to use @deriving(accessors) on a record type to create accessors for its record field names. It shows both the ReScript code and the corresponding JavaScript output.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/generate-converters-accessors.mdx#2025-04-18_snippet_2\n\nLANGUAGE: ReScript\nCODE:\n```\n@deriving(accessors)\ntype pet = {name: string}\n\nlet pets = [{name: \"bob\"}, {name: \"bob2\"}]\n\npets\n ->Array.map(name)\n ->Array.joinWith(\"&\")\n ->Console.log\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction name(param) {\n  return param.name;\n}\n\nvar pets = [\n  {\n    name: \"bob\"\n  },\n  {\n    name: \"bob2\"\n  }\n];\n\nconsole.log(Belt_Array.map(pets, name).join(\"&\"));\n```\n\n----------------------------------------\n\nTITLE: Using useContext Hook in ReScript\nDESCRIPTION: Demonstrates the basic usage of the useContext hook in ReScript. It accepts a React.Context.t and returns the current context value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/hooks-context.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nlet value = React.useContext(myContext)\n```\n\n----------------------------------------\n\nTITLE: Exception Handling with Lazy Values in ReScript\nDESCRIPTION: Demonstrates how to handle exceptions that may be raised when executing a lazy computation. The example uses a try-catch block to handle a potential Not_found exception.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/lazy-values.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet result = try {\n  Lazy.force(expensiveFilesRead)\n} catch {\n| Not_found => [] // empty array of files\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar result;\n\ntry {\n  result = CamlinternalLazy.force(expensiveFilesRead);\n} catch (raw_exn) {\n  var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);\n  if (exn.RE_EXN_ID === \"Not_found\") {\n    result = [];\n  } else {\n    throw exn;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Todo List with Complex Actions using useReducer in ReScript\nDESCRIPTION: A more complex Todo List implementation using useReducer with parameterized action variants. Shows how to handle actions with data payloads to manage state transitions in a more sophisticated application.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/hooks-reducer.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\n// TodoApp.res\n\ntype todo = {\n  id: int,\n  content: string,\n  completed: bool,\n}\n\ntype action =\n  | AddTodo(string)\n  | RemoveTodo(int)\n  | ToggleTodo(int)\n\ntype state = {\n  todos: array<todo>,\n  nextId: int,\n}\n\nlet reducer = (state, action) =>\n  switch action {\n  | AddTodo(content) =>\n    let todos = Js.Array2.concat(\n      state.todos,\n      [{id: state.nextId, content: content, completed: false}],\n    )\n    {todos: todos, nextId: state.nextId + 1}\n  | RemoveTodo(id) =>\n    let todos = Js.Array2.filter(state.todos, todo => todo.id !== id)\n    {...state, todos: todos}\n  | ToggleTodo(id) =>\n    let todos = Belt.Array.map(state.todos, todo =>\n      if todo.id === id {\n        {\n          ...todo,\n          completed: !todo.completed,\n        }\n      } else {\n        todo\n      }\n    )\n    {...state, todos: todos}\n  }\n\nlet initialTodos = [{id: 1, content: \"Try ReScript & React\", completed: false}]\n\n@react.component\nlet make = () => {\n  let (state, dispatch) = React.useReducer(\n    reducer,\n    {todos: initialTodos, nextId: 2},\n  )\n\n  let todos = Belt.Array.map(state.todos, todo =>\n    <li>\n      {React.string(todo.content)}\n      <button onClick={_ => dispatch(RemoveTodo(todo.id))}>\n        {React.string(\"Remove\")}\n      </button>\n      <input\n        type_=\"checkbox\"\n        checked=todo.completed\n        onChange={_ => dispatch(ToggleTodo(todo.id))}\n      />\n    </li>\n  )\n\n  <> <h1> {React.string(\"Todo List:\")} </h1> <ul> {React.array(todos)} </ul> </>\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction reducer(state, action) {\n  switch (action.TAG | 0) {\n    case /* AddTodo */0 :\n        var todos = state.todos.concat([{\n                id: state.nextId,\n                content: action._0,\n                completed: false\n              }]);\n        return {\n                todos: todos,\n                nextId: state.nextId + 1 | 0\n              };\n    case /* RemoveTodo */1 :\n        var id = action._0;\n        var todos$1 = state.todos.filter(function (todo) {\n              return todo.id !== id;\n            });\n        return {\n                todos: todos$1,\n                nextId: state.nextId\n              };\n    case /* ToggleTodo */2 :\n        var id$1 = action._0;\n        var todos$2 = Belt_Array.map(state.todos, (function (todo) {\n                if (todo.id === id$1) {\n                  return {\n                          id: todo.id,\n                          content: todo.content,\n                          completed: !todo.completed\n                        };\n                } else {\n                  return todo;\n                }\n              }));\n        return {\n                todos: todos$2,\n                nextId: state.nextId\n              };\n    \n  }\n}\n\nvar initialTodos = [{\n    id: 1,\n    content: \"Try ReScript & React\",\n    completed: false\n  }];\n\nfunction TodoApp(Props) {\n  var match = React.useReducer(reducer, {\n        todos: initialTodos,\n        nextId: 2\n      });\n  var dispatch = match[1];\n  var todos = Belt_Array.map(match[0].todos, (function (todo) {\n          return React.createElement(\"li\", undefined, todo.content, React.createElement(\"button\", {\n                          onClick: (function (param) {\n                              return Curry._1(dispatch, {\n                                          TAG: /* RemoveTodo */1,\n                                          _0: todo.id\n                                        });\n                            })\n                        }, \"Remove\"), React.createElement(\"input\", {\n                          checked: todo.completed,\n                          type: \"checkbox\",\n                          onChange: (function (param) {\n                              return Curry._1(dispatch, {\n                                          TAG: /* ToggleTodo */2,\n                                          _0: todo.id\n                                        });\n                            })\n                        }));\n        }));\n  return React.createElement(React.Fragment, undefined, React.createElement(\"h1\", undefined, \"Todo List:\"), React.createElement(\"ul\", undefined, todos));\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Object Properties in ReScript\nDESCRIPTION: Demonstrates how to access properties of an object in ReScript using bracket notation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/object.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ReScript\nCODE:\n```\nlet age = me[\"age\"]\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar age = me[\"age\"];\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Type Inference in ReScript\nDESCRIPTION: Shows how ReScript can infer types without explicit annotations for variables and functions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/type.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\nlet score = 10\nlet add = (a, b) => a + b\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar score = 10;\nfunction add(a, b) {\n  return a + b | 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Modules with open Keyword\nDESCRIPTION: Demonstrates using the open keyword to bring module contents into scope, both globally and locally.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/module.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nopen School\nlet p = getProfession(person1)\n\n// Local scope example\nlet p = {\n  open School\n  getProfession(person1)\n}\n```\n\n----------------------------------------\n\nTITLE: Using External Bindings with the document Object in ReScript\nDESCRIPTION: Example demonstrating how to use external declarations with ReScript objects for quick prototyping. Shows binding to the global document object with a polymorphic type and accessing its methods and properties.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/external.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\n// The type of document is just some random type 'a\n// that we won't bother to specify\n@val external document: 'a = \"document\"\n\n// call a method\ndocument[\"addEventListener\"](\"mouseup\", _event => {\n  Console.log(\"clicked!\")\n})\n\n// get a property\nlet loc = document[\"location\"]\n\n// set a property\ndocument[\"location\"][\"href\"] = \"rescript-lang.org\"\n```\n\nLANGUAGE: js\nCODE:\n```\ndocument.addEventListener(\"mouseup\", function(_event) {\n  console.log(\"clicked!\");\n});\n\nvar loc = document.location;\n\ndocument.location.href = \"rescript-lang.org\";\n```\n\n----------------------------------------\n\nTITLE: Uncurried useState for Cleaner JS Output in ReScript React\nDESCRIPTION: Demonstrates the uncurried version of useState which produces cleaner JavaScript output. Shows the special dot notation for calling uncurried functions in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/hooks-state.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet (state, setState) = React.Uncurried.useState(_ => 0)\n\nsetState(. prev => prev + 1)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar match = React.useState(function () {\n      return 0;\n  });\n\nvar setState = match[1];\n\nsetState(function (prev) {\n      return prev + 1 | 0;\n    });\n```\n\n----------------------------------------\n\nTITLE: Array Update Operations\nDESCRIPTION: Shows different ways to update array elements using index assignment, push, and set operations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/array-and-list.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet myArray = [\"hello\", \"world\", \"how are you\"]\n\nmyArray[0] = \"hey\" // now [\"hey\", \"world\", \"how are you\"]\n\nmyArray->Array.push(\"?\") //  [\"hey\", \"world\", \"how are you\", \"?\"]\n\nmyArray->Array.set(0, \"bye\") //  [\"bye\", \"world\", \"how are you\", \"?\"]\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar myArray = [\"hello\", \"world\", \"how are you\"];\n\nmyArray[0] = \"hey\";\n\nmyArray.push(\"?\");\n\nmyArray[0] = \"bye\";\n```\n\n----------------------------------------\n\nTITLE: Using ReactDOM.Style.make for Inline Styles in ReScript\nDESCRIPTION: Creates inline styles for a React component using ReactDOM.Style.make. This approach allows for type-checked CSS properties through ReScript's labeled function arguments.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/styling.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\n<div style={ReactDOM.Style.make(~color=\"#444444\", ~fontSize=\"68px\", ())} />\n```\n\n----------------------------------------\n\nTITLE: Creating New Tuples from Existing Ones in ReScript\nDESCRIPTION: Demonstrates how to create new tuples by destructuring and modifying existing ones, as tuples are not meant to be updated mutatively.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/tuple.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\nlet coordinates1 = (10, 20, 30)\nlet (c1x, _, _) = coordinates1\nlet coordinates2 = (c1x + 50, 20, 30)\n```\n\nLANGUAGE: js\nCODE:\n```\nvar coordinates1 = [10, 20, 30];\nvar c1x = 10;\nvar coordinates2 = [60, 20, 30];\n```\n\n----------------------------------------\n\nTITLE: Binding to JavaScript object methods with @send in ReScript\nDESCRIPTION: Demonstrates how to bind to methods of JavaScript objects using the @send annotation, which automatically places the object as the first argument.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/bind-to-js-function.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\ntype document // abstract type for a document object\n@send external getElementById: (document, string) => Dom.element = \"getElementById\"\n@val external doc: document = \"document\"\n\nlet el = getElementById(doc, \"myId\")\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar el = document.getElementById(\"myId\");\n```\n\n----------------------------------------\n\nTITLE: Rendering Capitalized Components in ReScript JSX\nDESCRIPTION: Demonstrates how capitalized JSX components are transformed in ReScript. Capitalized tags represent custom components and are compiled to createElement function calls.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/jsx.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\n<MyComponent name={\"ReScript\"} />\n```\n\nLANGUAGE: javascript\nCODE:\n```\nReact.createElement(MyComponent, {\n  name: \"ReScript\",\n});\n```\n\nLANGUAGE: rescript\nCODE:\n```\nMyComponent.createElement(~name=\"ReScript\", ~children=list{}, ())\n```\n\nLANGUAGE: javascript\nCODE:\n```\nReact.createElement(MyComponent, {\n  name: \"ReScript\",\n});\n```\n\n----------------------------------------\n\nTITLE: ReScript Promise Type Definition\nDESCRIPTION: Generic type definition for Promise with covariant type parameter\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/promise.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\ntype t<+'a>\n```\n\n----------------------------------------\n\nTITLE: Handling Node.js-specific Global Values in ReScript\nDESCRIPTION: This example shows how to safely handle Node.js-specific global values like __filename that may not exist in all environments using ReScript's %external syntax.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/bind-to-global-js-values.mdx#2025-04-18_snippet_5\n\nLANGUAGE: ReScript\nCODE:\n```\nswitch %external(__filename) {\n| Some(f) => Console.log(f)\n| None => Console.log(\"non-node environment\")\n};\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar match = typeof (__filename) === \"undefined\" ? undefined : (__filename);\n\nif (match !== undefined) {\n  console.log(match);\n} else {\n  console.log(\"non-node environment\");\n}\n```\n\n----------------------------------------\n\nTITLE: Type Casting in ReScript\nDESCRIPTION: Shows how to perform dangerous type casting using the %identity external binding.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/interop-cheatsheet.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nexternal convertToFloat: int => float = \"%identity\"\nlet age = 10\nlet gpa = 2.1 +. convertToFloat(age)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar age = 10;\nvar gpa = 2.1 + 10;\n```\n\n----------------------------------------\n\nTITLE: Defining Prop Types for React Components in ReScript\nDESCRIPTION: Demonstrates creating a separate type definition for component props within a module. This approach allows for cleaner type definitions and better organization of component interfaces.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/import-export-reactjs.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nmodule Confetti = {\n  type confettiProps = {\n    width: int,\n    height: int,\n  }\n\n  @module(\"react-confetti\") @react.component(: confettiProps)\n  external make: confettiProps => React.element = \"default\"\n}\n\n@react.component\nlet make = () => {\n  <Confetti width={300} height={300} />\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nimport ReactConfetti from \"react-confetti\";\nimport * as JsxRuntime from \"react/jsx-runtime\";\n\nvar Confetti = {};\n\nfunction Playground(props) {\n  return JsxRuntime.jsx(ReactConfetti, {\n              width: 300,\n              height: 300\n            });\n}\n```\n\n----------------------------------------\n\nTITLE: Using External Bindings for JavaScript Modules\nDESCRIPTION: Shows how to bind to a JavaScript module using ReScript's external keyword with polymorphic typing for quick conversion.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/converting-from-js.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\n@bs.module external school: 'whatever = \"school\"\n\nlet defaultId = 10\n\nlet queryResult = (usePayload, payload) => {\n  if usePayload {\n    payload[\"student\"]\n  } else {\n    school[\"getStudentById\"](defaultId)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Safely Accessing Array Elements in ReScript\nDESCRIPTION: Safely retrieves an array element by index, returning Some(value) if the index is valid or None if out of range.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/array.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\nlet get: (array('a), int) => option('a);\n```\n\n----------------------------------------\n\nTITLE: Piping Into Variant Constructors in ReScript\nDESCRIPTION: Demonstrates how to pipe a value into a variant constructor. The pipe treats the variant constructor as if it were a function, which is a special case syntax in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/pipe.mdx#2025-04-18_snippet_7\n\nLANGUAGE: res\nCODE:\n```\nlet result = name->preprocess->Some\n```\n\nLANGUAGE: js\nCODE:\n```\nvar result = preprocess(name);\n```\n\n----------------------------------------\n\nTITLE: Using Submodule Components in ReScript\nDESCRIPTION: This snippet demonstrates how to use submodule components in ReScript, either by using the fully qualified module name or by creating a module alias for easier access.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/components-and-props.mdx#2025-04-18_snippet_12\n\nLANGUAGE: ReScript\nCODE:\n```\nmodule Label = Button.Label\n\nlet content = <Label title=\"Test\"/>\n```\n\n----------------------------------------\n\nTITLE: List Pattern Matching in ReScript\nDESCRIPTION: Demonstrates how to access list items using pattern matching and switch expressions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/array-and-list.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet message =\n  switch myList {\n  | list{} => \"This list is empty\"\n  | list{a, ...rest} => \"The head of the list is the string \" ++ Int.toString(a)\n  }\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar message = myList\n  ? \"The head of the list is the string \" + (1).toString()\n  : \"This list is empty\";\n```\n\n----------------------------------------\n\nTITLE: Initializing useRef in ReScript with JavaScript Output\nDESCRIPTION: Basic syntax for creating a ref using React.useRef hook in ReScript. The hook returns a mutable ref object that persists for the component's lifetime.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/hooks-ref.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nlet refContainer = React.useRef(initialValue)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar button = React.useRef(null);\nReact.useRef(0);\n```\n\n----------------------------------------\n\nTITLE: Using JSX Fragments in ReScript\nDESCRIPTION: Demonstrates how a JSX fragment is transformed in ReScript. This allows returning multiple children without a parent wrapper element.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/jsx.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\n<> child1 child2 </>;\n```\n\nLANGUAGE: reason\nCODE:\n```\n[@JSX] [child1, child2];\n```\n\nLANGUAGE: ml\nCODE:\n```\n[child1; child2] [@@JSX]\n```\n\nLANGUAGE: js\nCODE:\n```\nReact.createElement(React.Fragment, undefined, child1, child2);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Recursive List Search Function in ReScript\nDESCRIPTION: Shows a practical example of a recursive function that searches for an item in a list. The function returns true if the item is found, false otherwise.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/function.mdx#2025-04-18_snippet_6\n\nLANGUAGE: reason\nCODE:\n```\nlet rec listHas = (list, item) =>\n  switch (list) {\n  | [] => false\n  | [a, ...rest] => a === item || listHas(rest, item)\n  };\n```\n\nLANGUAGE: ml\nCODE:\n```\nlet rec listHas list item =\n  match list with\n  | [] -> false\n  | a::rest -> (a == item) || (listHas rest item)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction listHas(_list, item) {\n  while(true) {\n    var list = _list;\n    if (!list) {\n      return false;\n    }\n    if (list.hd === item) {\n      return true;\n    }\n    _list = list.tl;\n    continue ;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Creating JavaScript Objects with @obj Decorator in ReScript\nDESCRIPTION: This example demonstrates how to use the @obj decorator to create a function that returns a JavaScript object with properties matching the function's parameter labels. The resulting JavaScript output shows the created object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/decorator_obj.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\n@obj\nexternal action: (~name: string, unit) => _ = \"\"\n\nlet helloAction = action(~name=\"Hello\", ())\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar helloAction = {\n  name: \"Hello\"\n};\n```\n\n----------------------------------------\n\nTITLE: Defining and Raising ReScript Exceptions\nDESCRIPTION: Demonstrates how to create and raise a ReScript exception with an inline record, which is then compiled to a JS-compatible format. The exception includes a custom message field that can be accessed from JavaScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/exception.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nexception BadArgument({myMessage: string})\n\nlet myTest = () => {\n  raise(BadArgument({myMessage: \"Oops!\"}))\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar Caml_exceptions = require(\"./stdlib/caml_exceptions.js\");\n\nvar BadArgument = Caml_exceptions.create(\"Playground.BadArgument\");\n\nfunction myTest() {\n  throw {\n    RE_EXN_ID: BadArgument,\n    myMessage: \"Oops!\",\n    Error: new Error()\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching on Arrays in ReScript\nDESCRIPTION: Shows how to pattern match on arrays in ReScript, handling different array structures like empty arrays, single-element arrays, and arrays with multiple elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_12\n\nLANGUAGE: res\nCODE:\n```\nlet students = [\"Jane\", \"Harvey\", \"Patrick\"]\nswitch students {\n| [] => Console.log(\"There are no students\")\n| [student1] =>\n  Console.log(\"There's a single student here: \" ++ student1)\n| manyStudents =>\n  // display the array of names\n  Console.log2(\"The students are: \", manyStudents)\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar students = [\"Jane\", \"Harvey\", \"Patrick\"];\n\nvar len = students.length;\n\nif (len !== 1) {\n  if (len !== 0) {\n    console.log(\"The students are: \", students);\n  } else {\n    console.log(\"There are no students\");\n  }\n} else {\n  var student1 = students[0];\n  console.log(\"There's a single student here: \" + student1);\n}\n```\n\n----------------------------------------\n\nTITLE: Opening a Module in ReScript\nDESCRIPTION: Demonstrates how to use the 'open' keyword to bring a module's contents into scope, reducing the need for dot notation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/module.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ReScript\nCODE:\n```\nopen School\nlet p = getProfession(person1)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar p = School.getProfession(School.person1);\n```\n\n----------------------------------------\n\nTITLE: Binding JS Object Using ReScript Object Syntax\nDESCRIPTION: Demonstrates binding to a JavaScript object using ReScript's object type syntax with string keys.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/bind-to-js-object.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\ntype person = {\n  \"name\": string,\n  \"friends\": array<string>,\n  \"age\": int,\n}\n\n@module(\"MySchool\") external john: person = \"john\"\n\nlet johnName = john[\"name\"]\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar MySchool = require(\"MySchool\");\n\nvar johnName = MySchool.john.name;\n```\n\n----------------------------------------\n\nTITLE: Configuring ReScript Build Settings\nDESCRIPTION: JSON configuration for ReScript build settings (bsconfig.json). This file specifies source directories, output module format, and other build-related options for a ReScript project.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/installation.mdx#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"your-project-name\",\n  \"sources\": [\n    {\n      \"dir\": \"src\",\n      \"subdirs\": true\n    }\n  ],\n  \"package-specs\": [\n    {\n      \"module\": \"es6\",\n      \"in-source\": true\n    }\n  ],\n  \"suffix\": \".bs.js\",\n  \"bs-dependencies\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Using Polymorphic Variants with @unwrap for JS Function Binding\nDESCRIPTION: Shows how to use polymorphic variants with @unwrap annotation to model a JavaScript function that accepts different types of arguments, providing better type safety in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/bind-to-js-function.mdx#2025-04-18_snippet_7\n\nLANGUAGE: res\nCODE:\n```\n@val\nexternal padLeft: (\n  string,\n  @unwrap [\n    | #Str(string)\n    | #Int(int)\n  ])\n  => string = \"padLeft\"\npadLeft(\"Hello World\", #Int(4))\npadLeft(\"Hello World\", #Str(\"Message from ReScript: \"))\n```\n\nLANGUAGE: js\nCODE:\n```\npadLeft(\"Hello World\", 4);\npadLeft(\"Hello World\", \"Message from ReScript: \");\n```\n\n----------------------------------------\n\nTITLE: Racing Promises with Promise.race in ReScript\nDESCRIPTION: Creates a promise that resolves or rejects with the value of the first promise that settles.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/promise.mdx#2025-04-18_snippet_11\n\nLANGUAGE: reason\nCODE:\n```\nlet race: array(t('a)) => t('a);\n```\n\n----------------------------------------\n\nTITLE: Binding JavaScript Object Method in ReScript\nDESCRIPTION: Demonstrates how to bind to a JavaScript object method using the bs.send attribute. This example binds to the getElementById method of the document object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/bind-to-js-function.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\ntype document; // abstract type for a document object\n[@bs.send] external getElementById: (document, string) => Dom.element = \"getElementById\";\n[@bs.val] external doc: document = \"document\";\n\nlet el = getElementById(doc, \"myId\");\n```\n\nLANGUAGE: ocaml\nCODE:\n```\ntype document (* abstract type for a document object *)\nexternal getElementById: document -> string -> Dom.element = \"getElementById\" [@@bs.send]\nexternal doc: document = \"document\" [@@bs.val ]\n\nlet el = getElementById doc \"myId\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar el = document.getElementById(\"myId\");\n```\n\n----------------------------------------\n\nTITLE: Binding to Record-like JS Objects using ReScript Object\nDESCRIPTION: Shows an alternative approach to binding a JavaScript object using ReScript's object type. It defines a person object type and demonstrates how to access its properties.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/bind-to-js-object.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reason\nCODE:\n```\ntype person = {\n  .\n  \"name\": string,\n  \"friends\": array(string),\n  \"age\": int,\n};\n\n[@bs.module \"MySchool\"] external john: person = \"john\";\n\nlet johnName = john##name;\n```\n\nLANGUAGE: ocaml\nCODE:\n```\ntype person = <\n  name: string;\n  friends: string array;\n  age: int\n> Js.t\n\nexternal john: person = \"john\" [@@bs.module \"MySchool\"]\n\nlet johnName = ## john name\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar MySchool = require(\"MySchool\");\n\nvar johnName = MySchool.john.name;\n```\n\n----------------------------------------\n\nTITLE: Optimized Pattern Matching with Variants\nDESCRIPTION: Demonstrates how ReScript's compiler optimizes variant pattern matching into efficient jump tables, providing O(1) performance compared to linear O(n) checks in JavaScript conditionals.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/variant.mdx#2025-04-18_snippet_10\n\nLANGUAGE: reason\nCODE:\n```\ntype animal = Dog | Cat | Bird;\nlet data = Dog\nswitch (data) {\n| Dog => Js.log(\"Wof\")\n| Cat => Js.log(\"Meow\")\n| Bird => Js.log(\"Kashiiin\")\n}\n```\n\nLANGUAGE: ml\nCODE:\n```\ntype animal = Dog | Cat | Bird\nlet data = Dog\nlet () =\n  match data with\n  | Dog -> Js.log \"Wof\"\n  | Cat -> Js.log \"Meow\"\n  | Bird -> Js.log \"Kashiiin\"\n```\n\nLANGUAGE: js\nCODE:\n```\nconsole.log(\"Wof\");\n\nvar data = /* Dog */0;\n```\n\n----------------------------------------\n\nTITLE: Compiling Option to JavaScript\nDESCRIPTION: Demonstrates how ReScript compiles Option types to JavaScript values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/null-undefined-option.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\nlet x = Some(5)\n```\n\nLANGUAGE: js\nCODE:\n```\nvar x = 5;\n```\n\nLANGUAGE: res\nCODE:\n```\nlet x = None\n```\n\nLANGUAGE: js\nCODE:\n```\nvar x;\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Tuples in ReScript\nDESCRIPTION: Demonstrates how to create two tuples in ReScript - one containing an integer and string, and another containing three floats. Shows how tuples are compiled to JavaScript arrays.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/tuple.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\nlet ageAndName = (24, \"Lil' ReScript\")\nlet my3dCoordinates = (20.0, 30.5, 100.0)\n```\n\nLANGUAGE: js\nCODE:\n```\nvar ageAndName = [24, \"Lil' ReScript\"];\nvar my3dCoordinates = [20.0, 30.5, 100.0];\n```\n\n----------------------------------------\n\nTITLE: Basic Let Binding in ReScript\nDESCRIPTION: Demonstrates the basic syntax for declaring variables in ReScript using let binding. This shows how to bind simple values to names for later reference.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/let-binding.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\nlet greeting = \"hello!\"\nlet score = 10\nlet newScore = 10 + score\n```\n\nLANGUAGE: js\nCODE:\n```\nvar greeting = \"hello!\";\nvar score = 10;\nvar newScore = 20;\n```\n\n----------------------------------------\n\nTITLE: Dynamically Importing an Entire Module in ReScript\nDESCRIPTION: Example of importing a whole module dynamically using the await keyword directly with the module name. This approach is useful when multiple functions from the same module will be used together.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2023-06-05-first-class-dynamic-import-support.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\n// App.res\nlet main = async () => {\n  module Utils = await MathUtils\n\n  let twoPlusTwo = Utils.add(2, 2)\n  RescriptCore.Console.log(twoPlusTwo)\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring External Function in ReScript\nDESCRIPTION: Demonstrates how to declare an external binding to JavaScript's setTimeout function. The external declaration includes the function type signature and the JavaScript name it binds to.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/external.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\n@val external setTimeout: (unit => unit, int) => float = \"setTimeout\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Piping Await Calls in ReScript\nDESCRIPTION: Shows how to pipe the result of an await call into another function in ReScript using a closure.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/async-await.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet fetchData = async () => {\n  let mail = {await fetchUserMail(\"1234\")}->String.toUpperCase\n  Console.log(`All upper-cased mail: ${mail}`)\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nasync function fetchData(param) {\n  var mail = (await GlobalAPI.fetchUserMail(\"1234\")).toUpperCase();\n  console.log(\"All upper-cased mail: \" + mail + \"\");\n}\n```\n\n----------------------------------------\n\nTITLE: List Declaration and Usage\nDESCRIPTION: Shows list creation and pattern matching in ReScript, demonstrating immutable list operations and JavaScript representation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/array-and-list.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet myList = list{1, 2, 3}\n\nlet message =\n  switch myList {\n  | list{} => \"This list is empty\"\n  | list{a, ...rest} => \"The head of the list is the string \" ++ Int.toString(a)\n  }\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar myList = {\n  hd: 1,\n  tl: {\n    hd: 2,\n    tl: {\n      hd: 3,\n      tl: 0\n    }\n  }\n};\n\nvar message = myList\n  ? \"The head of the list is the string \" + (1).toString()\n  : \"This list is empty\";\n```\n\n----------------------------------------\n\nTITLE: Using @jsx.component Decorator with Preact in ReScript\nDESCRIPTION: Example of using the @jsx.component decorator to create a Preact component in ReScript. The decorator allows the function to be recognized as a JSX component when using generic JSX transforms configured for Preact.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/decorator_jsx_component.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\n// Assuming `Preact` is set up and configured as a generic JSX transform.\n@jsx.component\nlet make = (~name) => {\n  <button> {Preact.string(\"Hello \" ++ name ++ \"!\")} </button>\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Preact from \"preact\";\n\nfunction Playground(props) {\n  return Preact.jsx(\"button\", {\n              children: \"Hello \" + props.name + \"!\"\n            });\n}\n\nvar make = Playground;\n```\n\n----------------------------------------\n\nTITLE: Implementing Snooze Alarm with clearInterval in ReScript\nDESCRIPTION: Example showing how to use setInterval and clearInterval to implement a snooze alarm system.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/global.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet punchSleepyGuy = () => Js.log(\"Punch\")\n\nlet interval = ref(Js.Nullable.null)\n\nlet remind = () => {\n  Js.log(\"Wake Up!\")\n  punchSleepyGuy()\n}\n\nlet snooze = mins =>\n  interval := Js.Nullable.return(Js.Global.setInterval(remind, mins * 60 * 1000))\n\nlet cancel = () =>\n  Js.Nullable.iter(interval.contents, (. intervalId) => Js.Global.clearInterval(intervalId))\n```\n\n----------------------------------------\n\nTITLE: String Interpolation in ReScript\nDESCRIPTION: Illustrates ReScript's string interpolation syntax using {j|...|}. This allows for multiline strings and variable interpolation similar to JavaScript's template literals.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/primitive-types.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\nlet greeting = {j|Hello\nWorld\n$(name)\n|j}\n```\n\nLANGUAGE: ml\nCODE:\n```\nlet greeting = {j|Hello\nWorld\n$(name)\n|j}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar greeting = \"Hello\\nWorld\\n\" + name + \"\\n\";\n```\n\n----------------------------------------\n\nTITLE: Descending For Loop Example in ReScript\nDESCRIPTION: A concrete example of a descending for loop that counts from 3 down to 1, demonstrating how the 'downto' keyword works in practice.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/control-flow.mdx#2025-04-18_snippet_7\n\nLANGUAGE: res\nCODE:\n```\n// prints: 3 2 1, one per line\nfor x in 3 downto 1 {\n  Console.log(x)\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nfor(var x = 3; x >= 1; --x){\n  console.log(x);\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Uncapitalized JSX Elements in ReScript\nDESCRIPTION: Demonstrates how uncapitalized JSX elements (HTML tags) are transformed into function calls. Uncapitalized tags are treated as DOM elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/jsx.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\n<div onClick={handler}> child1 child2 </div>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nReact.createElement(\"div\", {\n  onClick: handler\n}, child1, child2);\n```\n\nLANGUAGE: rescript\nCODE:\n```\ndiv(~onClick=handler, ~children=list{child1, child2}, ())\n```\n\nLANGUAGE: javascript\nCODE:\n```\nReact.createElement(\"div\", {\n  onClick: handler\n}, child1, child2);\n```\n\n----------------------------------------\n\nTITLE: Defining Type Aliases in ReScript\nDESCRIPTION: Demonstrates how to create type aliases in ReScript, which are equivalent to the original type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/type.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ReScript\nCODE:\n```\ntype scoreType = int\nlet x: scoreType = 10\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar x = 10;\n```\n\n----------------------------------------\n\nTITLE: Converting Option<bool> to bool in ReScript (Optimal Implementation)\nDESCRIPTION: This snippet presents the optimal implementation for converting an Option<bool> to a bool. It uses pattern matching to handle all cases explicitly while remaining concise and leveraging the option's inherent boolean nature.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_19\n\nLANGUAGE: rescript\nCODE:\n```\nlet optionBoolToBool = opt => {\n  switch opt {\n  | Some(trueOrFalse) => trueOrFalse\n  | None => false\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction optionBoolToBool(opt) {\n  if (opt !== undefined) {\n    return opt;\n  } else {\n    return false;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Async Function and Await Syntax in ReScript and JavaScript\nDESCRIPTION: Shows how async functions and await are used in ReScript compared to JavaScript, including return type annotations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/overview.mdx#2025-04-18_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nasync (arg) => {...}\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nasync (arg) => {...}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nasync function named(arg) {...}\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet named = async (arg) => {...}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nasync (arg): Promise<string> => {...}\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nasync (arg): string => {...}\n```\n\n----------------------------------------\n\nTITLE: Basic Function Declaration in ReScript\nDESCRIPTION: Shows basic function declaration with a single argument that concatenates strings. Demonstrates the core function syntax with arrow notation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/function.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\nlet greet = (name) => \"Hello \" ++ name;\n```\n\nLANGUAGE: ml\nCODE:\n```\nlet greet name = \"Hello \" ^ name\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction greet(name) {\n  return \"Hello \" + name;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Debugger in ReScript\nDESCRIPTION: Demonstrates how to insert JavaScript debugger statements in ReScript code using the %debugger syntax.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/embed-raw-javascript.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet f = (x, y) => {\n  %debugger\n  x + y\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction f(x, y) {\n  debugger;\n  return x + y | 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Exception Creation in ReScript\nDESCRIPTION: Demonstrates how to create and raise custom exceptions in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/exception.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\nexception InputClosed(string);\n// later on\nraise(InputClosed(\"The stream has closed!\"));\n```\n\n----------------------------------------\n\nTITLE: Labeled Arguments in ReScript\nDESCRIPTION: Shows how to use labeled arguments with the ~ prefix to make function calls more explicit. Labeled arguments clarify which value corresponds to which parameter.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/function.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet addCoordinates = (~x, ~y) => {\n  // use x and y here\n}\n// ...\naddCoordinates(~x=5, ~y=6)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction addCoordinates(x, y) {\n  // use x and y here\n}\n\naddCoordinates(5, 6);\n```\n\n----------------------------------------\n\nTITLE: Using Generated Accessors for Variants in ReScript\nDESCRIPTION: Demonstrates how to use the generated accessor functions, which is useful when passing accessor functions as higher-order functions or when JavaScript needs to opaquely use these values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/generate-converters-accessors.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\nlet s = submit(\"hello\"); /* gives Submit(\"hello\") */\n```\n\n----------------------------------------\n\nTITLE: Using When Clauses in Pattern Matching\nDESCRIPTION: Shows how to use 'when' clauses to add additional conditions to pattern matching cases, allowing for more specific matching criteria.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_10\n\nLANGUAGE: reason\nCODE:\n```\nswitch (person) {\n| Teacher(_) => () // do nothing\n| Student({reportCard: {gpa}}) when gpa < 0.5 =>\n  Js.log(\"What's happening\");\n| Student(_) =>\n  // fall-through, catch-all case\n  Js.log(\"Heyo\");\n}\n```\n\nLANGUAGE: ml\nCODE:\n```\nlet () = match person with\n| Teacher _ -> () (* do nothing *)\n| Student {reportCard = {gpa}} when gpa < 0.5 ->\n  Js.log \"What's happening\"\n| Student _ ->\n  (* fall-through, catch-all case *)\n  Js.log \"Heyo\"\n```\n\nLANGUAGE: js\nCODE:\n```\nif (person.TAG) {\n  if (person.reportCard.gpa < 0.5) {\n    console.log(\"What's happening\");\n  } else {\n    console.log(\"Heyo\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Mutable Record Updates in ReScript\nDESCRIPTION: Demonstrates how to declare mutable fields in record types and update them in-place. Only fields explicitly marked with 'mutable' can be modified after creation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/record.mdx#2025-04-18_snippet_6\n\nLANGUAGE: res\nCODE:\n```\ntype person = {\n  name: string,\n  mutable age: int\n}\n\nlet baby = {name: \"Baby ReScript\", age: 5}\nbaby.age = baby.age + 1 // `baby.age` is now 6. Happy birthday!\n```\n\nLANGUAGE: js\nCODE:\n```\nvar baby = {\n  name: \"Baby ReScript\",\n  age: 5\n};\n\nbaby.age = baby.age + 1 | 0;\n```\n\n----------------------------------------\n\nTITLE: Handling Node.js Specific Global Values with %external\nDESCRIPTION: This example demonstrates checking for Node.js-specific global values like __filename using the %external syntax, allowing code to work in both Node.js and browser environments without reference errors.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/bind-to-global-js-values.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\nswitch %external(__filename) {\n| Some(f) => Console.log(f)\n| None => Console.log(\"non-node environment\")\n};\n```\n\nLANGUAGE: js\nCODE:\n```\nvar match = typeof (__filename) === \"undefined\" ? undefined : (__filename);\n\nif (match !== undefined) {\n  console.log(match);\n} else {\n  console.log(\"non-node environment\");\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Exception Handling in ReScript\nDESCRIPTION: Demonstrates how to catch and handle JavaScript exceptions in ReScript code using Js.Exn.Error variant and message extraction.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/exception.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\ntry {\n  someJSFunctionThatThrows()\n} catch {\n| Js.Exn.Error(obj) =>\n  switch Js.Exn.message(obj) {\n  | Some(m) => Js.log(\"Caught a JS exception! Message: \" ++ m)\n  | None => ()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ReScript Promise Creation\nDESCRIPTION: Function signature for creating a new Promise with resolve and reject callbacks\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/promise.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nlet make: ((~resolve: (. 'a) => unit, ~reject: (. exn) => unit) => unit) => t<'a>\n```\n\n----------------------------------------\n\nTITLE: Multiple Variant Examples with JavaScript Output\nDESCRIPTION: Comprehensive example showing various variant types and their JavaScript output. Demonstrates how different variant structures (simple, with payload, with labeled payload, and with nested types) compile to JavaScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/variant.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\ntype greeting = Hello | Goodbye\nlet g1 = Hello\nlet g2 = Goodbye\n\ntype outcome = Good | Error(string)\nlet o1 = Good\nlet o2 = Error(\"oops!\")\n\ntype family = Child | Mom(int, string) | Dad (int)\nlet f1 = Child\nlet f2 = Mom(30, \"Jane\")\nlet f3 = Dad(32)\n\ntype person = Teacher | Student({gpa: float})\nlet p1 = Teacher\nlet p2 = Student({gpa: 99.5})\n\ntype s = {score: float}\ntype adventurer = Warrior(s) | Wizard(string)\nlet a1 = Warrior({score: 10.5})\nlet a2 = Wizard(\"Joe\")\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar g1 = \"Hello\";\n\nvar g2 = \"Goodbye\";\n\nvar o1 = \"Good\";\n\nvar o2 = {\n  TAG: \"Error\",\n  _0: \"oops!\"\n};\n\nvar f1 = \"Child\";\n\nvar f2 = {\n  TAG: \"Mom\",\n  _0: 30,\n  _1: \"Jane\"\n};\n\nvar f3 = {\n  TAG: \"Dad\",\n  _0: 32\n};\n\nvar p1 = \"Teacher\";\n\nvar p2 = {\n  TAG: \"Student\",\n  gpa: 99.5\n};\n\nvar a1 = {\n  TAG: \"Warrior\",\n  _0: {\n    score: 10.5\n  }\n};\n\nvar a2 = {\n  TAG: \"Wizard\",\n  _0: \"Joe\"\n};\n```\n\n----------------------------------------\n\nTITLE: Using If-Else Expression in ReScript\nDESCRIPTION: Demonstrates how ReScript's if-else is an expression that evaluates to its body's content, unlike JavaScript's if statement.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/control-flow.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\nlet message = if isMorning {\n  \"Good morning!\"\n} else {\n  \"Hello!\"\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar message = isMorning ? \"Good morning!\" : \"Hello!\";\n```\n\n----------------------------------------\n\nTITLE: Basic Module Import in ReScript\nDESCRIPTION: Demonstrates how to import and use content from another ReScript module/file. Unlike JavaScript, ReScript doesn't require explicit import statements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/import-export.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\n// Inside School.res\nlet studentMessage = Student.message\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar Student = require(\"./Student.res.js\");\nvar studentMessage = Student.message\n```\n\n----------------------------------------\n\nTITLE: Binding to JS Object Fields with Getter and Setter Attributes\nDESCRIPTION: Demonstrates how to use the @get and @set attributes to bind to individual fields of a JavaScript object, providing fine-grained control over property access.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/bind-to-js-object.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\ntype textarea\n@set external setName: (textarea, string) => unit = \"name\"\n@get external getName: textarea => string = \"name\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Using Raw JavaScript in ReScript\nDESCRIPTION: Demonstrates how to embed raw JavaScript code in ReScript using the %raw decorator and how it compiles to JavaScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/interop-cheatsheet.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nlet add = %raw(\"(a, b) => a + b\")\n%%raw(\"const a = 1\")\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar add = ((a, b) => a + b);\nconst a = 1\n```\n\n----------------------------------------\n\nTITLE: Array Operations in ReScript\nDESCRIPTION: Shows common array operations including accessing elements, updating values, and pushing new items. Demonstrates array mutability and index-based operations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/array-and-list.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reason\nCODE:\n```\nlet myArray = [|\"hello\", \"world\", \"how are you\"|];\n\nlet firstItem = myArray[0]; // \"hello\"\n\nmyArray[0] = \"hey\"; // now [|\"hey\", \"world\", \"how are you\"|]\n\nlet pushedValue = Js.Array2.push(myArray, \"bye\");\n```\n\nLANGUAGE: ml\nCODE:\n```\nlet myArray = [|\"hello\"; \"world\"; \"how are you\"|]\n\nlet firstItem = myArray(0)  (* \"hello\" *)\n\nlet () = myArray.(0) <- \"hey\" (* now [|\"hey\"; \"world\"; \"how are you\"|] *)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar myArray = [\"hello\", \"world\", \"how are you\"];\n\nvar firstItem = myArray[0];\n\nmyArray[0] = \"hey\";\n\nvar pushedValue = myArray.push(\"bye\");\n```\n\n----------------------------------------\n\nTITLE: Creating and Using MutableSet with Custom Comparator\nDESCRIPTION: Example showing how to create a MutableSet with a custom comparator for comparing pairs of integers\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nmodule PairComparator = Belt.Id.MakeComparable({\n  type t = (int, int)\n  let cmp = ((a0, a1), (b0, b1)) =>\n    switch Pervasives.compare(a0, b0) {\n    | 0 => Pervasives.compare(a1, b1)\n    | c => c\n    }\n})\n\nlet mySet = Belt.MutableSet.make(~id=module(PairComparator))\nmySet->Belt.MutableSet.add((1, 2))\n```\n\n----------------------------------------\n\nTITLE: Accessing Nested JS Object Methods with @scope\nDESCRIPTION: Demonstrates using @scope annotation with @send to access functions on nested properties of JavaScript objects, useful for APIs with deep object structures.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/bind-to-js-function.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\ntype stripe\n\n@module(\"stripe\") @new\nexternal make: string => stripe = \"default\"\n\ntype createSession = {}\n\ntype sessionResult\n\n@send\n@scope((\"checkout\", \"sessions\"))\nexternal createCheckoutSession: (stripe, createSession) => \n  Promise.t<sessionResult> = \"create\"\n\nlet stripe = make(\"sk_...\")\nlet session = stripe->createCheckoutSession({})\n```\n\nLANGUAGE: js\nCODE:\n```\nimport Stripe from \"stripe\";\n\nvar stripe = new Stripe(\"sk_...\");\nvar session = stripe.checkout.sessions.create({});\n```\n\n----------------------------------------\n\nTITLE: Raising JavaScript Exceptions from ReScript\nDESCRIPTION: Shows how to raise a JavaScript exception from ReScript code using the Js.Exn.raiseError function. This allows ReScript code to throw exceptions that can be caught by JavaScript code.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/exception.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet myTest = () => {\n  Js.Exn.raiseError(\"Hello!\")\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar Js_exn = require(\"./stdlib/js_exn.js\");\n\nfunction myTest() {\n  return Js_exn.raiseError(\"Hello!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Window Name Using @set Decorator in ReScript\nDESCRIPTION: Demonstrates how to use the @set decorator to bind to and set a JavaScript object property. The example shows setting the window.name property using ReScript's external binding system.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/decorator_set.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\ntype window\n@val external window: window = \"window\"\n@set external setName: (window, string) => unit = \"name\"\n\nsetName(window, \"MyWindow\")\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nwindow.name = \"MyWindow\";\n```\n\n----------------------------------------\n\nTITLE: Array Manipulation with Belt in ReScript\nDESCRIPTION: Demonstrates using Belt functions to filter, make unique, and sort an array of numbers in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet someNumbers = [1, 1, 4, 2, 3, 6, 3, 4, 2]\n\nlet greaterThan2UniqueAndSorted =\n  someNumbers\n  ->Belt.Array.keep(x => x > 2)\n  // convert to and from set to make values unique\n  ->Belt.Set.Int.fromArray\n  ->Belt.Set.Int.toArray // output is already sorted\n\nJs.log2(\"result\", greaterThan2UniqueAndSorted)\n```\n\n----------------------------------------\n\nTITLE: ReScript List Definition and JavaScript Representation\nDESCRIPTION: Shows how ReScript lists are represented as linked list structures in JavaScript output.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/overview.mdx#2025-04-18_snippet_12\n\nLANGUAGE: rescript\nCODE:\n```\nlist{1, 2, 3}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{hd: 1, tl: {hd: 2, tl: {hd: 3, tl: 0}}}\n```\n\n----------------------------------------\n\nTITLE: Creating React Elements with Variadic Children in ReScript\nDESCRIPTION: Demonstrates how to use React.createElementVariadic to create elements with an array of children in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/elements-and-jsx.mdx#2025-04-18_snippet_7\n\nLANGUAGE: ReScript\nCODE:\n```\ntype props = {title: string, children: React.element}\n\nlet render = (article: props => React.element) => {\n  let children = [React.string(\"Introduction\"), React.string(\"Body\")]\n\n  let props = {title: \"Article #1\", children: React.null}\n\n  {React.createElementVariadic(article, props, children)}\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction render(article) {\n  var children = [\n    \"Introduction\",\n    \"Body\"\n  ];\n  var props = {\n    title: \"Article #1\",\n    children: null\n  };\n  return Caml_splice_call.spliceApply(React.createElement, [\n              article,\n              props,\n              children\n            ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Option<bool> to bool in ReScript (Basic Pattern Matching)\nDESCRIPTION: This snippet demonstrates a basic pattern matching approach to convert an Option<bool> to a bool. It improves upon the initial implementation by using a switch statement, but still contains nested logic.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_16\n\nLANGUAGE: rescript\nCODE:\n```\nlet optionBoolToBool = opt => {\n  switch opt {\n  | None => false\n  | Some(a) => a ? true : false\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction optionBoolToBool(opt) {\n  if (opt !== undefined && opt) {\n    return true;\n  } else {\n    return false;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ReScript Function Type Annotations\nDESCRIPTION: Examples of function declarations with type annotations for parameters and return values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/function.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rescript\nCODE:\n```\n// anonymous function\n(x: int, y: int): int => 1\n// bind to a name\nlet add = (x: int, y: int): int => 1\n\n// labeled\nlet add = (~first as x: int, ~second as y: int) : int => x + y\n// with punning sugar\nlet add = (~first: int, ~second: int) : int => first + second\n\n// labeled with default value\nlet add = (~first as x: int=1, ~second as y: int=2) : int => x + y\n// with punning sugar\nlet add = (~first: int=1, ~second: int=2) : int => first + second\n\n// optional\nlet add = (~first as x: option<int>=?, ~second as y: option<int>=?) : int => switch x {...}\n// with punning sugar\nlet add = (~first: option<int>=?, ~second: option<int>=?) : int => switch first {...}\n```\n\n----------------------------------------\n\nTITLE: Defining Functor Types in ReScript\nDESCRIPTION: This snippet demonstrates how to define functor types to constrain and hide implementation details. It shows the MakeSetType functor type and its application to the MakeSet functor.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/module.mdx#2025-04-18_snippet_17\n\nLANGUAGE: res\nCODE:\n```\nmodule type Comparable = ...\n\nmodule type MakeSetType = (Item: Comparable) => {\n  type backingType\n  let empty: backingType\n  let add: (backingType, Item.t) => backingType\n}\n\nmodule MakeSet: MakeSetType = (Item: Comparable) => {\n  ...\n}\n```\n\nLANGUAGE: js\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Various Attribute Examples in ReScript\nDESCRIPTION: Shows different ways attributes can be used in ReScript, including file-level annotations, type annotations, external bindings, record field annotations, and deprecated function markings.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/attribute.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\n@@warning(\"-27\")\n\n\n@unboxed\ntype a = Name(string)\n\n@val external message: string = \"message\"\n\ntype student = {\n  age: int,\n  @as(\"aria-label\") ariaLabel: string,\n}\n\n@deprecated\nlet customDouble = foo => foo * 2\n\n@deprecated(\"Use SomeOther.customTriple instead\")\nlet customTriple = foo => foo * 3 \n```\n\nLANGUAGE: js\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Binding to Tagged Template Functions in ReScript\nDESCRIPTION: Demonstrates how to bind to JavaScript tagged template functions using the @taggedTemplate annotation, which allows for proper compilation to JS template literals. Requires ReScript version 11.1+.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/bind-to-js-function.mdx#2025-04-18_snippet_16\n\nLANGUAGE: rescript\nCODE:\n```\n// see https://bun.sh/docs/runtime/shell\ntype result = {exitCode: int}\n@module(\"bun\") @taggedTemplate\nexternal sh: (array<string>, array<string>) => promise<result> = \"$\"\n\nlet filename = \"index.res\"\nlet result = await sh`ls ${filename}`\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as $$Bun from \"bun\";\nvar filename = \"index.res\";\nvar result = await $$Bun.$`ls ${filename}`;\n```\n\n----------------------------------------\n\nTITLE: Binding Basic JavaScript Function in ReScript\nDESCRIPTION: Demonstrates how to bind a simple JavaScript function (path.dirname) in ReScript. The example shows the syntax for both Reason and OCaml, along with the resulting JavaScript output.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/bind-to-js-function.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\n[@bs.module \"path\"] external dirname: string => string = \"dirname\";\nlet root = dirname(\"/User/github\"); // returns \"User\"\n```\n\nLANGUAGE: ocaml\nCODE:\n```\nexternal dirname: string -> string = \"dirname\" [@@bs.module \"path\"]\nlet root = dirname \"/User/github\" (* returns \"User\" *)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar Path = require(\"path\");\nvar root = Path.dirname(\"/User/github\");\n```\n\n----------------------------------------\n\nTITLE: JSON Stringify Example\nDESCRIPTION: Example showing how to create and stringify a JSON object with multiple value types.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/json.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\n{\n  let dict = Js.Dict.empty()\n  Js.Dict.set(dict, \"name\", Js.Json.string(\"John Doe\"))\n  Js.Dict.set(dict, \"age\", Js.Json.number(30.0))\n  Js.Dict.set(dict, \"likes\", Js.Json.stringArray([\"bucklescript\", \"ocaml\", \"js\"]))\n\n  Js.log(Js.Json.stringify(Js.Json.object_(dict)))\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Module Contents in ReScript\nDESCRIPTION: Shows how to access a module's contents using dot notation, demonstrating modules' utility for namespacing.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/module.mdx#2025-04-18_snippet_1\n\nLANGUAGE: ReScript\nCODE:\n```\nlet anotherPerson: School.profession = School.Teacher\nConsole.log(School.getProfession(anotherPerson)) /* \"A teacher\" */\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar anotherPerson = /* Teacher */0;\nconsole.log(\"A teacher\");\n```\n\n----------------------------------------\n\nTITLE: Type Inference for Tuples in ReScript\nDESCRIPTION: Shows how ReScript's type inference automatically determines the type of tuple expressions without explicit annotations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/type.mdx#2025-04-18_snippet_6\n\nLANGUAGE: res\nCODE:\n```\nlet buddy = (10, 20, 20)\n```\n\nLANGUAGE: js\nCODE:\n```\nvar buddy = [10, 20, 20];\n```\n\n----------------------------------------\n\nTITLE: Labeled Arguments Function\nDESCRIPTION: Demonstrates the use of labeled arguments with the ~ symbol for better argument identification and flexible ordering of arguments.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/function.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reason\nCODE:\n```\nlet drawCircle = (~radius as r, ~color as c) => {\n  setColor(c);\n  startAt(r, r);\n};\n\ndrawCircle(~radius=10, ~color=\"red\");\n```\n\nLANGUAGE: ml\nCODE:\n```\nlet drawCircle ~radius:r ~color:c =\n  setColor c;\n  startAt r r;\n\nlet () = drawCircle ~radius:10 ~color:\"red\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction drawCircle(r, c) {\n  setColor(c);\n  return startAt(r, r);\n}\n\ndrawCircle(10, \"red\");\n```\n\n----------------------------------------\n\nTITLE: Legacy Promise Handling with Js.Promise Module\nDESCRIPTION: Demonstrates usage of the legacy Js.Promise module for backward compatibility, showing promise creation, chaining with then_, and error handling with catch.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/promise.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\nlet myPromise = Js.Promise.make((~resolve, ~reject) => resolve(. 2))\n\nmyPromise->Js.Promise.then_(value => {\n  Console.log(value)\n  Js.Promise.resolve(value + 2)\n}, _)->Js.Promise.then_(value => {\n  Console.log(value)\n  Js.Promise.resolve(value + 3)\n}, _)->Js.Promise.catch(err => {\n  Console.log2(\"Failure!!\", err)\n  Js.Promise.resolve(-2)\n}, _)\n```\n\nLANGUAGE: js\nCODE:\n```\nvar myPromise = new Promise(function (resolve, reject) {\n  return resolve(2);\n});\n\nmyPromise\n  .then(function (value) {\n    console.log(value);\n    return Promise.resolve((value + 2) | 0);\n  })\n  .then(function (value) {\n    console.log(value);\n    return Promise.resolve((value + 3) | 0);\n  })\n  .catch(function (err) {\n    console.log(\"Failure!!\", err);\n    return Promise.resolve(-2);\n  });\n```\n\n----------------------------------------\n\nTITLE: ReScript JavaScript Object Type Definition\nDESCRIPTION: Demonstrates the type definition for JavaScript objects in ReScript and shows example usage.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\ntype t<+'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet x: {\"x\": int, \"y\": int} = {\"x\": 1, \"y\": 2}\n```\n\n----------------------------------------\n\nTITLE: JS Method Chaining with ReScript Bindings\nDESCRIPTION: Example of binding to JavaScript chainable methods using ReScript's @send decorator.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/pipe.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\ntype request\n@val external asyncRequest: unit => request = \"asyncRequest\"\n@send external setWaitDuration: (request, int) => request = \"setWaitDuration\"\n@send external send: request => unit = \"send\"\n```\n\n----------------------------------------\n\nTITLE: Pipe Placeholders Usage\nDESCRIPTION: Demonstrates the use of placeholders with pipe operator for flexible argument positioning.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/pipe.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nmakePerson(~age=47)\n  ->namePerson(\"Jane\")\n```\n\nLANGUAGE: rescript\nCODE:\n```\ngetName(input)\n  ->namePerson(personDetails, _)\n```\n\nLANGUAGE: rescript\nCODE:\n```\ngetName(input)\n  ->namePerson(~person=personDetails, ~name=_)\n```\n\n----------------------------------------\n\nTITLE: Component Naming Conventions in ReScript\nDESCRIPTION: Shows how component naming works with the @react.component decorator, which automatically assigns names based on module structure for React DevTools identification.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/components-and-props.mdx#2025-04-18_snippet_12\n\nLANGUAGE: rescript\nCODE:\n```\n// File.res\n\n// will be named `File` in dev tools\n@react.component\nlet make = ...\n\n// will be named `File$component` in dev tools\n@react.component\nlet component = ...\n\nmodule Nested = {\n  // will be named `File$Nested` in dev tools\n  @react.component\n  let make = ...\n}\n```\n\n----------------------------------------\n\nTITLE: Array Access Operations\nDESCRIPTION: Demonstrates array access in ReScript which returns an option type. Shows safe access methods and array bounds handling.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/array-and-list.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet myArray = [\"hello\", \"world\", \"how are you\"]\n\nlet firstItem = myArray[0] // Some(\"hello\")\n\nlet tenthItem = myArray->Array.get(10) // None\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar myArray = [\"hello\", \"world\", \"how are you\"];\n\nvar firstItem = myArray[0];\n\nvar tenthItem = myArray[10];\n```\n\n----------------------------------------\n\nTITLE: List Creation in ReScript\nDESCRIPTION: Shows how to create an immutable singly linked list in ReScript and its JavaScript representation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/array-and-list.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet myList = list{1, 2, 3}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar myList = {\n  hd: 1,\n  tl: {\n    hd: 2,\n    tl: {\n      hd: 3,\n      tl: 0\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Array in ReScript\nDESCRIPTION: Demonstrates creating a basic string array in ReScript with equivalent JavaScript output.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/array-and-list.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nlet myArray = [\"hello\", \"world\", \"how are you\"]\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar myArray = [\"hello\", \"world\", \"how are you\"];\n```\n\n----------------------------------------\n\nTITLE: Creating Tuples in ReScript\nDESCRIPTION: Demonstrates how to create tuples in ReScript and shows their JavaScript output. Tuples are immutable, ordered, fixed-size, and can contain different types of values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/tuple.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\nlet ageAndName = (24, \"Lil' ReScript\")\nlet my3dCoordinates = (20.0, 30.5, 100.0)\n```\n\nLANGUAGE: js\nCODE:\n```\nvar ageAndName = [24, \"Lil' ReScript\"];\nvar my3dCoordinates = [20.0, 30.5, 100.0];\n```\n\n----------------------------------------\n\nTITLE: Basic Function Declaration in ReScript\nDESCRIPTION: Shows how to declare a simple greeting function in ReScript that concatenates strings.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/function.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nlet greet = (name) => \"Hello \" ++ name\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction greet(name) {\n  return \"Hello \" + name;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Ref Contents in ReScript\nDESCRIPTION: Shows how to access the contents of a ref value in ReScript and the equivalent JavaScript code. The example retrieves the value 5 from myValue.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/mutation.mdx#2025-04-18_snippet_1\n\nLANGUAGE: ReScript\nCODE:\n```\nlet five = myValue.contents // 5\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar five = myValue.contents;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Tag Function for React Components\nDESCRIPTION: Demonstrates implementation of a tag function that handles multiple parameter types and converts them to React string elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/tagged-templates.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\ntype params =\n  | I(int)\n  | F(float)\n  | S(string)\n  | Bool(bool)\n\nlet s = (strings, parameters) => {\n  let text = Array.reduceWithIndex(parameters, Array.getUnsafe(strings, 0), (\n    acc,\n    param,\n    i,\n  ) => {\n    let s = Array.getUnsafe(strings, i + 1)\n    let p = switch param {\n    | I(i) => Int.toString(i)\n    | F(f) => Float.toString(f)\n    | S(s) => s\n    | Bool(true) => \"true\"\n    | Bool(false) => \"false\"\n    }\n    acc ++ p ++ s\n  })\n  React.string(text)\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Core__Array from \"./stdlib/core__Array.js\";\n\nfunction s(strings, parameters) {\n  return Core__Array.reduceWithIndex(parameters, strings[0], (function (acc, param, i) {\n                var s = strings[i + 1 | 0];\n                var p;\n                switch (param.TAG) {\n                  case \"I\" :\n                  case \"F\" :\n                      p = param._0.toString();\n                      break;\n                  case \"S\" :\n                      p = param._0;\n                      break;\n                  case \"Bool\" :\n                      p = param._0 ? \"true\" : \"false\";\n                      break;\n                  \n                }\n                return acc + p + s;\n              }));\n}\n```\n\n----------------------------------------\n\nTITLE: Using Comparison Operators in ReScript\nDESCRIPTION: Shows how comparison operators (>, >=, <, <=) work in ReScript with different data types. These operators may compile to JavaScript comparison operators or runtime checks depending on the types being compared.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/equality-comparison.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet compareInt = (a: int, b: int) => a > b\nlet t1 = 1 > 10\nlet compareArray = (a: array<int>, b: array<int>) => a > b\nlet compareOptions = (a: option<float>, b: option<float>) => a < b\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Caml_obj from \"./stdlib/caml_obj.js\";\n\nfunction compareInt(a, b) {\n  return a > b;\n}\n\nvar t1 = false;\n\nvar compareArray = Caml_obj.greaterthan;\n\nvar compareOptions = Caml_obj.lessthan;\n```\n\n----------------------------------------\n\nTITLE: Complex Parameterized Types in ReScript\nDESCRIPTION: Shows how to create and compose complex types with multiple type parameters, building custom type hierarchies.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/type.mdx#2025-04-18_snippet_8\n\nLANGUAGE: res\nCODE:\n```\ntype result<'a, 'b> =\n  | Ok('a)\n  | Error('b)\n\ntype myPayload = {data: string}\n\ntype myPayloadResults<'errorType> = array<result<myPayload, 'errorType>>\n\nlet payloadResults: myPayloadResults<string> = [\n  Ok({data: \"hi\"}),\n  Ok({data: \"bye\"}),\n  Error(\"Something wrong happened!\")\n]\n```\n\nLANGUAGE: js\nCODE:\n```\nvar payloadResults = [\n  {\n    TAG: /* Ok */0,\n    _0: {data: \"hi\"}\n  },\n  {\n    TAG: /* Ok */0,\n    _0: {data: \"bye\"}\n  },\n  {\n    TAG: /* Error */1,\n    _0: \"Something wrong happened!\"\n  }\n];\n```\n\n----------------------------------------\n\nTITLE: Tagged Template Function Binding in ReScript\nDESCRIPTION: Shows how to bind to JavaScript tagged template functions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/interop-cheatsheet.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\ntype result = {exitCode: int}\n@module(\"bun\") @taggedTemplate\nexternal sh: (array<string>, array<string>) => promise<result> = \"$\"\n\nlet filename = \"index.res\"\nlet result = await sh`ls ${filename}`\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as $$Bun from \"bun\";\nvar filename = \"index.res\";\nvar result = await $$Bun.$`ls ${filename}`;\n```\n\n----------------------------------------\n\nTITLE: Ref Update Syntax Sugar in ReScript\nDESCRIPTION: Demonstrates the := syntax sugar for updating ref values, which is equivalent to assigning to .contents.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/mutation.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nmyValue := 6\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmyValue.contents = 6;\n```\n\n----------------------------------------\n\nTITLE: Emotion CSS-in-JS Bindings\nDESCRIPTION: Example of creating bindings for the Emotion CSS-in-JS library and using them in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/styling.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\n@module(\"@emotion/css\") external css: {..} => string = \"css\"\n@module(\"@emotion/css\") external rawCss: string => string = \"css\"\n@module(\"@emotion/css\") external keyframes: {..} => string = \"css\"\n@module(\"@emotion/css\") external cx: array<string> => string = \"cx\"\n\n@module(\"@emotion/css\") external injectGlobal: string => unit = \"injectGlobal\"\n```\n\n----------------------------------------\n\nTITLE: Combining Polymorphic Variant Types in ReScript\nDESCRIPTION: Shows how to combine polymorphic variant types to create a sum of all constructors, and create a more flexible type system.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/polymorphic-variant.mdx#2025-04-18_snippet_5\n\nLANGUAGE: ReScript\nCODE:\n```\ntype red = [#Ruby | #Redwood | #Rust]\ntype blue = [#Sapphire | #Neon | #Navy]\n\n// Contains all constructors of red and blue.\n// Also adds #Papayawhip\ntype color = [red | blue | #Papayawhip]\n\nlet myColor: color = #Ruby\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar myColor = \"Ruby\";\n```\n\n----------------------------------------\n\nTITLE: Lazy Initialization with useReducerWithMapState in ReScript\nDESCRIPTION: Using React.useReducerWithMapState to implement lazy initialization of state. This is useful for extracting initialization logic and also for resetting state in response to actions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/hooks-reducer.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\nlet (state, dispatch) =\n  React.useReducerWithMapState(reducer, initialState, initial)\n```\n\nLANGUAGE: js\nCODE:\n```\nvar match = React.useReducer(reducer, initialState, init);\n```\n\n----------------------------------------\n\nTITLE: Basic Let Binding in ReScript\nDESCRIPTION: Demonstrates the basic syntax for creating let bindings (variable declarations) in ReScript and shows the resulting JavaScript output.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/let-binding.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\nlet greeting = \"hello!\"\nlet score = 10\nlet newScore = 10 + score\n```\n\nLANGUAGE: js\nCODE:\n```\nvar greeting = \"hello!\";\nvar score = 10;\nvar newScore = 20;\n```\n\n----------------------------------------\n\nTITLE: Comparing Block Syntax in JavaScript and ReScript\nDESCRIPTION: Demonstrates how blocks and function declarations differ between JavaScript and ReScript, showing implicit return values in ReScript blocks.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/overview.mdx#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst myFun = (x, y) => {\n  const doubleX = x + x;\n  const doubleY = y + y;\n  return doubleX + doubleY;\n};\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet myFun = (x, y) => {\n  let doubleX = x + x\n  let doubleY = y + y\n  doubleX + doubleY\n}\n```\n\n----------------------------------------\n\nTITLE: Equivalent Code Without Piping Into Variant in ReScript\nDESCRIPTION: Shows the equivalent code without using the pipe operator to pass a value into a variant constructor. This clarifies how the pipe syntax transforms into regular function calls.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/pipe.mdx#2025-04-18_snippet_8\n\nLANGUAGE: res\nCODE:\n```\nlet result = Some(preprocess(name))\n```\n\nLANGUAGE: js\nCODE:\n```\nvar result = preprocess(name);\n```\n\n----------------------------------------\n\nTITLE: Defining ReScript List Type\nDESCRIPTION: Type definition for the generic list data structure in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/list.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\ntype t<'a> = list<'a>\n```\n\n----------------------------------------\n\nTITLE: Accessing Fields of @deriving(abstract) Objects with Getter Functions\nDESCRIPTION: Shows two approaches for accessing fields of abstract objects: using the generated getter functions directly, or using the Pipe operator for a cleaner syntax.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/generate-converters-accessors.mdx#2025-04-18_snippet_17\n\nLANGUAGE: ReScript\nCODE:\n```\nlet twenty = ageGet(joe)\n\n// Alternative using Pipe operator\nlet twenty = joe->ageGet\n```\n\n----------------------------------------\n\nTITLE: TailwindCSS Integration Example\nDESCRIPTION: Shows how to use TailwindCSS with ReScript including dynamic class name generation based on props.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/styling.mdx#2025-04-18_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n/* main.css */\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\nLANGUAGE: rescript\nCODE:\n```\n%%raw(\"import './main.css'\")\n\n@react.component\nlet make = (~active: bool) => {\n  let activeClass = if active {\n    \"text-green-600\"\n  }\n  else {\n    \"text-red-600\"\n  }\n\n  <div className={`border-1 border-black ${activeClass}`}>\n    {React.string(\"Hello World\")}\n  </div>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Parametrized Type in ReScript\nDESCRIPTION: Shows how to define a parametrized type in ReScript, which is useful for creating flexible and reusable type definitions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/newcomer-examples.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\ntype universityStudent = {gpa: float}\n\ntype response<'studentType> = {\n  status: int,\n  student: 'studentType,\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Array Mapping Operation\nDESCRIPTION: Maps array elements through a transformation function, returning a new array. Includes both uncurried (mapU) and curried (map) versions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/array.mdx#2025-04-18_snippet_35\n\nLANGUAGE: rescript\nCODE:\n```\nBelt.Array.map([1, 2], (x) => x + 1) == [3, 4]\n```\n\n----------------------------------------\n\nTITLE: Importing a Module in ReScript\nDESCRIPTION: Demonstrates how to import a module in ReScript without using explicit import statements. The example shows accessing the 'message' binding from the Student module.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/import-export.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\n// Inside School.res\nlet studentMessage = Student.message\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar Student = require(\"./Student.bs\");\nvar studentMessage = Student.message\n```\n\n----------------------------------------\n\nTITLE: Filtering Array Elements with Index in ReScript\nDESCRIPTION: Creates a new array containing only the elements that pass the test implemented by the provided function. The predicate function takes both the array element and its index as parameters and returns a boolean.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/array.mdx#2025-04-18_snippet_13\n\nLANGUAGE: rescript\nCODE:\n```\nlet filteri: (('a, int) => bool, t<'a>) => t<'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\n// keep only positive elements at odd indices\nlet positiveOddElement = (item, index) => mod(index, 2) == 1 && item > 0\n\nJs.Array.filteri(positiveOddElement, [6, 3, 5, 8, 7, -4, 1]) == [3, 8]\n```\n\n----------------------------------------\n\nTITLE: Binding to JavaScript Functions with Polymorphic Variants in ReScript\nDESCRIPTION: Shows how to create bindings to JavaScript functions using polymorphic variants to constrain acceptable arguments, providing type safety while maintaining clean JavaScript output.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/polymorphic-variant.mdx#2025-04-18_snippet_9\n\nLANGUAGE: res\nCODE:\n```\ntype t\n\n@scope(\"Intl\") @val\nexternal makeNumberFormat: ([#\"de-DE\" | #\"en-GB\" | #\"en-US\"]) => t = \"NumberFormat\"\n\nlet intl = makeNumberFormat(#\"de-DE\")\n```\n\nLANGUAGE: js\nCODE:\n```\nvar intl = Intl.NumberFormat(\"de-DE\");\n```\n\n----------------------------------------\n\nTITLE: Creating a Mutable Ref in ReScript\nDESCRIPTION: Demonstrates how to create a mutable ref value in ReScript and shows the corresponding JavaScript output. The ref is created with an initial value of 5.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/mutation.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\nlet myValue = ref(5)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar myValue = {\n  contents: 5\n};\n```\n\n----------------------------------------\n\nTITLE: List Unzip Operation - ReScript\nDESCRIPTION: Function that takes a list of tuples and separates it into two lists, one containing all first elements and another containing all second elements of the tuples.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/list.mdx#2025-04-18_snippet_60\n\nLANGUAGE: rescript\nCODE:\n```\nBelt.List.unzip(list{(1, 2), (3, 4)})\n\nBelt.List.unzip(list{(\"H\", \"W\"), (\"e\", \"o\"), (\"l\", \"r\"), (\"l\", \"l\"), (\"o\", \"d\"), (\" \", \"!\")})\n```\n\n----------------------------------------\n\nTITLE: Uncurried useState Implementation\nDESCRIPTION: Example of using React.Uncurried.useState for optimized JavaScript output with state updates.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/hooks-state.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet (state, setState) = React.Uncurried.useState(_ => 0)\n\nsetState(. prev => prev + 1)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar match = React.useState(function () {\n      return 0;\n  });\n\nvar setState = match[1];\n\nsetState(function (prev) {\n      return prev + 1 | 0;\n    });\n```\n\n----------------------------------------\n\nTITLE: Implementing Deep Equality in ReScript\nDESCRIPTION: Demonstrates deep equality operator (==) usage in ReScript, which performs structural comparison of values. The operator may compile to JavaScript's strict equality, a runtime deep comparison function, or a boolean value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/equality-comparison.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet t1 = 1 == 1 // true\nlet t2 = \"foo\" == \"foo\" // true\nlet t3 = { \"foo\": \"bar\" } == { \"foo\": \"bar\"} // true\n\nlet doStringsMatch = (s1: string, s2: string) => s1 == s2\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Caml_obj from \"./stdlib/caml_obj.js\";\n\nvar t1 = true;\nvar t2 = true;\nvar t3 = Caml_obj.equal({ foo: \"bar\" }, { foo: \"bar\" });\n\nfunction doStringsMatch(s1, s2) {\n  return s1 === s2;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Module Functions in ReScript\nDESCRIPTION: Demonstrates how to create module functions that take module arguments and return new modules, enabling powerful parametric abstractions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/module.mdx#2025-04-18_snippet_12\n\nLANGUAGE: res\nCODE:\n```\nmodule type Comparable = {\n  type t\n  let equal: (t, t) => bool\n}\n\nmodule MakeSet = (Item: Comparable) => {\n  // let's use a list as our naive backing data structure\n  type backingType = list<Item.t>\n  let empty = list{}\n  let add = (currentSet: backingType, newItem: Item.t): backingType =>\n    // if item exists\n    if currentSet->List.some(x => Item.equal(x, newItem)) {\n      currentSet // return the same (immutable) set (a list really)\n    } else {\n      list{\n        newItem,\n        ...currentSet // prepend to the set and return it\n      }\n    }\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar List = require(\"./stdlib/list.js\");\n\nfunction MakeSet(Item) {\n  var add = function(currentSet, newItem) {\n    if (\n      List.exists(function(x) {\n        return Item.equal(x, newItem);\n      }, currentSet)\n    ) {\n      return currentSet;\n    } else {\n      return {\n        hd: newItem,\n        tl: currentSet,\n      };\n    }\n  };\n  return {\n    empty: /* [] */ 0,\n    add: add,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Polymorphic Variants in ReScript\nDESCRIPTION: Demonstrates the three syntaxes for creating polymorphic variant constructors in ReScript. The first is the common syntax, while the second and third syntaxes support string and number representations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/polymorphic-variant.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\nlet myColor = #red\nlet myLabel = #\"aria-hidden\"\nlet myNumber = #7\n```\n\nLANGUAGE: js\nCODE:\n```\nvar myColor = \"red\";\nvar myLabel = \"aria-hidden\";\nvar myNumber = 7;\n```\n\n----------------------------------------\n\nTITLE: Using If-Else as an Expression in ReScript\nDESCRIPTION: Demonstrates how if-else statements in ReScript are expressions that return values. Unlike JavaScript, ReScript's if statements evaluate to their body's content.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/control-flow.mdx#2025-04-18_snippet_0\n\nLANGUAGE: re\nCODE:\n```\nlet message = if (isMorning) {\n  \"Good morning!\"\n} else {\n  \"Hello!\"\n};\n```\n\nLANGUAGE: ml\nCODE:\n```\nlet message =\n  if isMorning then\n    \"Good morning!\"\n  else\n    \"Hello!\"\n```\n\nLANGUAGE: js\nCODE:\n```\nvar message = isMorning ? \"Good morning!\" : \"Hello!\";\n```\n\n----------------------------------------\n\nTITLE: Using Type Parameters (Generics) in ReScript\nDESCRIPTION: Shows how to use type parameters to create generic types, reducing code duplication for similar structures.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/type.mdx#2025-04-18_snippet_4\n\nLANGUAGE: ReScript\nCODE:\n```\ntype coordinates<'a> = ('a, 'a, 'a)\n\nlet a: coordinates<int> = (10, 20, 20)\nlet b: coordinates<float> = (10.5, 20.5, 20.5)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar a = [10, 20, 20];\nvar b = [10.5, 20.5, 20.5];\n```\n\n----------------------------------------\n\nTITLE: Creating a new ReScript project with npx\nDESCRIPTION: Command to create a new ReScript project using the create-rescript-app generator with npx.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/installation.mdx#2025-04-18_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnpx create-rescript-app\n```\n\n----------------------------------------\n\nTITLE: Block-bodied Functions in ReScript\nDESCRIPTION: Example of a function with a multi-line block body. This demonstrates how to write longer functions that require multiple expressions by enclosing the body in curly braces.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/function.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\nlet greetMore = (name) => {\n  let part1 = \"Hello\"\n  part1 ++ \" \" ++ name\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction greetMore(name) {\n  return \"Hello \" + name;\n}\n```\n\n----------------------------------------\n\nTITLE: Using the ignore() Function in ReScript\nDESCRIPTION: Shows how to use the ignore() function to discard the return value of functions. Useful for side effects where the return value is not needed.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/function.mdx#2025-04-18_snippet_20\n\nLANGUAGE: res\nCODE:\n```\nmySideEffect()->Promise.catch(handleError)->ignore\n\nsetTimeout(myFunc, 1000)->ignore\n```\n\nLANGUAGE: js\nCODE:\n```\n$$Promise.$$catch(mySideEffect(), function (prim) {\n  return handleError(prim);\n});\n\nsetTimeout(function (prim) {\n  myFunc();\n}, 1000);\n```\n\n----------------------------------------\n\nTITLE: Defining Mutually Recursive Types in ReScript\nDESCRIPTION: Demonstrates how to create types that are mutually recursive, referencing each other in their definitions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/type.mdx#2025-04-18_snippet_5\n\nLANGUAGE: ReScript\nCODE:\n```\ntype rec student = {taughtBy: teacher}\nand teacher = {students: array<student>}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Binding to Global JavaScript Values in ReScript\nDESCRIPTION: Shows how to bind to global JavaScript functions like setTimeout using the @val external syntax.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/interop-cheatsheet.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\n@val external setTimeout: (unit => unit, int) => float = \"setTimeout\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Passing callback refs between ReScript components\nDESCRIPTION: This example demonstrates how to pass callback refs between components. The parent component creates a ref and passes its setter function to a child component, allowing the parent to access a DOM element rendered by the child.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/refs-and-the-dom.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\n// Parent.res\n\n@send external focus: Dom.element => unit = \"focus\"\n\nmodule CustomTextInput = {\n  @react.component\n  let make = (~setInputRef) => {\n    <div>\n      <input type_=\"text\" ref={ReactDOM.Ref.callbackDomRef(setInputRef)} />\n    </div>\n  }\n}\n\n@react.component\nlet make = () => {\n  let textInput = React.useRef(Js.Nullable.null)\n  let setInputRef = element => { textInput.current = element}\n\n  <CustomTextInput setInputRef/>\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction CustomTextInput(Props) {\n  var setInputRef = Props.setInputRef;\n  return React.createElement(\"div\", undefined, React.createElement(\"input\", {\n                  ref: setInputRef,\n                  type: \"text\"\n                }));\n}\n\nvar CustomTextInput = {\n  make: CustomTextInput\n};\n\nfunction Parent(Props) {\n  var textInput = React.useRef(null);\n  var setInputRef = function (element) {\n    textInput.current = element;\n\n  };\n  return React.createElement(CustomTextInput, {\n              setInputRef: setInputRef\n            });\n}\n```\n\n----------------------------------------\n\nTITLE: Splitting String by Regular Expression with Limit in ReScript\nDESCRIPTION: The splitByReAtMost function splits a string into an array of substrings based on a regular expression pattern, with a specified limit on the number of splits.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/string-2.mdx#2025-04-18_snippet_24\n\nLANGUAGE: rescript\nCODE:\n```\nlet splitByReAtMost: (t, Js_re.t, ~limit: int) => array<option<t>>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.String2.splitByReAtMost(\"one: two: three: four\", %re(\"/\\s*:\\s*/\"), ~limit=3) == [\n    Some(\"one\"),\n    Some(\"two\"),\n    Some(\"three\"),\n  ]\n\nJs.String2.splitByReAtMost(\"one: two: three: four\", %re(\"/\\s*:\\s*/\"), ~limit=0) == []\n\nJs.String2.splitByReAtMost(\"one: two: three: four\", %re(\"/\\s*:\\s*/\"), ~limit=8) == [\n    Some(\"one\"),\n    Some(\"two\"),\n    Some(\"three\"),\n    Some(\"four\"),\n  ]\n```\n\n----------------------------------------\n\nTITLE: Working with JavaScript Objects and Functions\nDESCRIPTION: Shows method chaining and array manipulation using JavaScript methods in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/interop-cheatsheet.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\n@send external map: (array<'a>, 'a => 'b) => array<'b> = \"map\"\n@send external filter: (array<'a>, 'a => 'b) => array<'b> = \"filter\"\n[1, 2, 3]\n  ->map(a => a + 1)\n  ->filter(a => mod(a, 2) == 0)\n  ->Js.log\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(\n  [1, 2, 3]\n    .map(function (a) {\n      return (a + 1) | 0;\n    })\n    .filter(function (a) {\n      return a % 2 === 0;\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Component Naming Conventions in ReScript\nDESCRIPTION: This example illustrates the naming conventions for React components in ReScript. It shows how components are automatically named based on their module and how to set custom names for higher-order components.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/components-and-props.mdx#2025-04-18_snippet_13\n\nLANGUAGE: ReScript\nCODE:\n```\n// File.res\n\n// will be named `File` in dev tools\n@react.component\nlet make = ...\n\n// will be named `File$component` in dev tools\n@react.component\nlet component = ...\n\nmodule Nested = {\n  // will be named `File$Nested` in dev tools\n  @react.component\n  let make = ...\n};\n```\n\n----------------------------------------\n\nTITLE: Renaming Fields with @as in Abstract Records\nDESCRIPTION: Use @as to rename fields in abstract records, allowing you to work with JS objects that have field names that would be invalid in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/generate-converters-accessors.mdx#2025-04-18_snippet_9\n\nLANGUAGE: ReScript\nCODE:\n```\n@deriving(abstract)\ntype data = {\n  @as(\"type\") type_: string,\n  @as(\"aria-label\") ariaLabel: string,\n};\n\nlet d = data(~type_=\"message\", ~ariaLabel=\"hello\");\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar d = {\n  type: \"message\",\n  \"aria-label\": \"hello\"\n};\n```\n\n----------------------------------------\n\nTITLE: Polymorphic Variant Constructor Arguments in ReScript\nDESCRIPTION: Demonstrates how to use constructor arguments with polymorphic variants, similar to regular variants but with different JavaScript output.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/polymorphic-variant.mdx#2025-04-18_snippet_4\n\nLANGUAGE: ReScript\nCODE:\n```\ntype account = [\n  | #Anonymous\n  | #Instagram(string)\n  | #Facebook(string, int)\n]\n\nlet me: account = #Instagram(\"Jenny\")\nlet him: account = #Facebook(\"Josh\", 26)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar me = {\n  NAME: \"Instagram\",\n  VAL: \"Jenny\"\n};\n\nvar him = {\n  NAME: \"Facebook\",\n  VAL: [\n    \"Josh\",\n    26\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic ReScript Module\nDESCRIPTION: Demonstrates creating a module named School with a custom type, value, and function. Shows how module contents can be accessed using dot notation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/module.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\nmodule School = {\n  type profession = Teacher | Director\n\n  let person1 = Teacher\n  let getProfession = (person) =>\n    switch person {\n    | Teacher => \"A teacher\"\n    | Director => \"A director\"\n    }\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction getProfession(person) {\n  if (person) {\n    return \"A director\";\n  } else {\n    return \"A teacher\";\n  }\n}\n\nvar School = {\n  person1: /* Teacher */0,\n  getProfession: getProfession\n};\n```\n\n----------------------------------------\n\nTITLE: Defining and Extending Extensible Variants in ReScript\nDESCRIPTION: Demonstrates how to define an extensible variant type with '..' syntax and extend it with new constructors using the '+=' operator. Shows how the constructors are implemented as exceptions in the JavaScript output.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/extensible-variant.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\ntype t = ..\n\ntype t += Other\n\ntype t +=\n  | Point(float, float)\n  | Line(float, float, float, float)\n```\n\nLANGUAGE: js\nCODE:\n```\nvar Caml_exceptions = require(\"./stdlib/caml_exceptions.js\");\n\nvar Other = Caml_exceptions.create(\"Playground.Other\");\n\nvar Point = Caml_exceptions.create(\"Playground.Point\");\n\nvar Line = Caml_exceptions.create(\"Playground.Line\");\n```\n\n----------------------------------------\n\nTITLE: Declaring Record Types in ReScript\nDESCRIPTION: Records require a mandatory type declaration defining their structure. This snippet shows how to declare a record type 'person' with age and name fields.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/record.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\ntype person = {\n  age: int,\n  name: string\n}\n```\n\nLANGUAGE: js\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: List Pattern Matching in ReScript\nDESCRIPTION: Shows how to access list elements using pattern matching and switch statements. Demonstrates handling empty and non-empty lists.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/array-and-list.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reason\nCODE:\n```\nlet message =\n  switch myList {\n  | [] => \"This list is empty\"\n  | [a, ...rest] => \"The head of the list is the string \" ++ Js.Int.toString(a)\n  };\n```\n\nLANGUAGE: ml\nCODE:\n```\nlet message =\n  match myList with\n  | [] -> \"This list is empty\"\n  | a::rest -> \"The head of the list is the string \" ^ (Js.Int.toString a)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar message = myList\n  ? \"The head of the list is the string \" + (1).toString()\n  : \"This list is empty\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Rigorous Type Safety in Converted ReScript Code\nDESCRIPTION: An optional cleanup step that introduces proper typing for the school module, student data, and payload structure, demonstrating how to add more rigid type safety to converted JavaScript code.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/converting-from-js.mdx#2025-04-18_snippet_6\n\nLANGUAGE: res\nCODE:\n```\ntype school\ntype student\ntype payload = {\n  student: student\n}\n\n@module external school: school = \"school\"\n@send external getStudentById: (school, int) => student = \"getStudentById\"\n\nlet defaultId = 10\n\nlet queryResult = (usePayload, payload) => {\n  if usePayload {\n    payload.student\n  } else {\n    school->getStudentById(defaultId)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Promises with Async/Await in ReScript\nDESCRIPTION: Shows how to use Promise.all to wait for multiple promises in an async function in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/async-await.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet pauseReturn = (value, timeout) => {\n  Promise.make((resolve, _reject) => {\n    setTimeout(() => {\n      resolve(value)\n    }, timeout)->ignore\n  })\n}\n\nlet logMultipleValues = async () => {\n  let promise1 = pauseReturn(\"value1\", 2000)\n  let promise2 = pauseReturn(\"value2\", 1200)\n  let promise3 = pauseReturn(\"value3\", 500)\n\n  let all = await Promise.all([promise1, promise2, promise3])\n\n  switch all {\n  | [v1, v2, v3] => Console.log(`All values: ${v1}, ${v2}, ${v3}`)\n  | _ => Console.log(\"this should never happen\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Array Declaration in ReScript\nDESCRIPTION: Basic array initialization showing ReScript syntax and its JavaScript output. Arrays in ReScript must have homogeneous types (all elements of same type).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/array-and-list.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nlet myArray = [\"hello\", \"world\", \"how are you\"]\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar myArray = [\"hello\", \"world\", \"how are you\"];\n```\n\n----------------------------------------\n\nTITLE: Binding Variadic JavaScript Function in ReScript\nDESCRIPTION: Shows how to bind a JavaScript function that takes a variable number of arguments using the bs.variadic attribute. This example binds to the path.join function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/bind-to-js-function.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reason\nCODE:\n```\n[@bs.module \"path\"] [@bs.variadic]\nexternal join: array(string) => string = \"join\";\n\nlet v = join([|\"a\", \"b\"|]);\n```\n\nLANGUAGE: ocaml\nCODE:\n```\nexternal join : string array -> string = \"join\"\n[@@bs.module \"path\"][@@bs.variadic]\n\nlet v = join [|\"a\"; \"b\"|]\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar Path = require(\"path\");\nvar v = Path.join(\"a\", \"b\");\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Module in ReScript\nDESCRIPTION: Demonstrates how to create a module in ReScript with type definitions and functions. The module contains a variant type for professions and a function to get the string representation of a profession.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/module.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\nmodule School = {\n  type profession = Teacher | Director\n\n  let person1 = Teacher\n  let getProfession = (person) =>\n    switch person {\n    | Teacher => \"A teacher\"\n    | Director => \"A director\"\n    }\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction getProfession(person) {\n  if (person) {\n    return \"A director\";\n  } else {\n    return \"A teacher\";\n  }\n}\n\nvar School = {\n  person1: /* Teacher */0,\n  getProfession: getProfession\n};\n```\n\n----------------------------------------\n\nTITLE: Optional Props Binding Migration\nDESCRIPTION: Example of migrating JS component bindings with optional props from v3 to v4\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/migrate-react.mdx#2025-04-18_snippet_9\n\nLANGUAGE: res\nCODE:\n```\nmodule Button = {\n  @module(\"./Button\") @react.component\n  external make: (~text: string=?) => React.element = \"default\"\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Storage Item in ReScript\nDESCRIPTION: External binding to retrieve an item from storage by key, returning an optional string value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/dom/storage2.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nexternal getItem: (t, string) => option<string> = \"getItem\"\n```\n\n----------------------------------------\n\nTITLE: Sorting Arrays with Custom Comparator in ReScript\nDESCRIPTION: Demonstrates the use of sortInPlaceWith to sort arrays in-place using a custom comparison function. The function modifies the original array and returns the sorted array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array.mdx#2025-04-18_snippet_4\n\nLANGUAGE: ReScript\nCODE:\n```\nlet words = [\"horse\", \"aardvark\", \"dog\", \"camel\"]\nlet byLength = (s1, s2) => Js.String.length(s1) - Js.String.length(s2)\n\nJs.Array.sortInPlaceWith(byLength, words) == [\"dog\", \"horse\", \"camel\", \"aardvark\"]\n\nlet numbers = [3, 30, 10, 1, 20, 2]\nlet reverseNumeric = (n1, n2) => n2 - n1\nJs.Array.sortInPlaceWith(reverseNumeric, numbers) == [30, 20, 10, 3, 2, 1]\n```\n\n----------------------------------------\n\nTITLE: Using Emotion CSS-in-JS with JavaScript Objects in ReScript\nDESCRIPTION: Demonstrates using Emotion's css function with JavaScript objects to define styles in ReScript and apply them to React components via className.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/styling.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\nlet container = Emotion.css({\n  \"color\": \"#fff\",\n  \"backgroundColor\": \"red\"\n})\n\nlet app = <div className={container} />\n```\n\n----------------------------------------\n\nTITLE: Defining External Bindings for JavaScript Method Chaining in ReScript\nDESCRIPTION: Sets up external bindings for JavaScript's chainable methods using ReScript's binding system. These definitions allow ReScript code to interface with JavaScript's object method pattern.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/pipe.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\ntype request\n@val external asyncRequest: unit => request = \"asyncRequest\"\n@send external setWaitDuration: (request, int) => request = \"setWaitDuration\"\n@send external send: request => unit = \"send\"\n```\n\nLANGUAGE: js\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: ReScript React Props Spread Example\nDESCRIPTION: Demonstrates how to use prop spreading in ReScript React components, showing proper usage with props spread at first position followed by other props.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/extensions-of-props.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nlet props = {Comp.b: \"b\"}\n<Comp {...props} a=\"a\" />\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar props = {b: \"b\"};\nvar newrecord = Caml_obj.obj_dup(props);\nreturn JsxRuntime.jsx(default, (newrecord.a = \"a\", newrecord));\n```\n\n----------------------------------------\n\nTITLE: Descending For Loop Example in ReScript\nDESCRIPTION: A simple example of a descending for loop that counts from 3 down to 1 and logs each number.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/control-flow.mdx#2025-04-18_snippet_7\n\nLANGUAGE: res\nCODE:\n```\n// prints: 3 2 1, one per line\nfor x in 3 downto 1 {\n  Js.log(x)\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nfor(var x = 3; x >= 1; --x){\n  console.log(x);\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Polymorphic JS Function with Unwrap in ReScript\nDESCRIPTION: Demonstrates how to bind a polymorphic JavaScript function using polymorphic variants and the @unwrap attribute in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/bind-to-js-function.mdx#2025-04-18_snippet_4\n\nLANGUAGE: ReScript\nCODE:\n```\n@val\nexternal padLeft: (\n  string,\n  @unwrap [\n    | #Str(string)\n    | #Int(int)\n  ])\n  => string = \"padLeft\"\npadLeft(\"Hello World\", #Int(4))\npadLeft(\"Hello World\", #Str(\"Message from ReScript: \"))\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\npadLeft(\"Hello World\", 4);\npadLeft(\"Hello World\", \"Message from ReScript: \");\n```\n\n----------------------------------------\n\nTITLE: Implementing Shallow Equality in ReScript\nDESCRIPTION: Demonstrates the usage of shallow equality operator (===) in ReScript and how it compiles to JavaScript. Shows comparisons between primitives and objects.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/equality-comparison.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nlet t1 = 1 === 1 // true\nlet t2 = \"foo\" === \"foo\" // true\nlet t3 = { \"foo\": \"bar\" } === { \"foo\": \"bar\"} // false\n\nlet doStringsMatch = (s1: string, s2: string) => s1 === s2\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar t1 = true;\nvar t2 = \"foo\" === \"foo\";\nvar t3 = ({ foo: \"bar\" }) === ({ foo: \"bar\" });\n\nfunction doStringsMatch(s1, s2) {\n  return s1 === s2;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Variants with Constructor Arguments in ReScript\nDESCRIPTION: Shows how to define a variant type with constructors that hold additional data as arguments, creating more complex data structures.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/variant.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\ntype account =\n  | None\n  | Instagram(string)\n  | Facebook(string, int)\n```\n\nLANGUAGE: js\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Destructuring Modules in ReScript\nDESCRIPTION: Demonstrates how to destructure a module's functions and values into separate let bindings.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/module.mdx#2025-04-18_snippet_5\n\nLANGUAGE: ReScript\nCODE:\n```\nmodule User = {\n  let user1 = \"Anna\"\n  let user2 = \"Franz\"\n}\n\n// Destructure by name\nlet {user1, user2} = module(User)\n\n// Destructure with different alias\nlet {user1: anna, user2: franz} = module(User)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar user1 = \"Anna\";\n\nvar user2 = \"Franz\";\n\nvar User = {\n  user1: user1,\n  user2: user2\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Post-Build Hook in ReScript\nDESCRIPTION: Example of setting up a post-build hook in rescript.json. This hook is invoked every time a file is recompiled, useful for JS build system interop.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/build-configuration.mdx#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"js-post-build\": {\n    \"cmd\": \"/path/to/node ../../postProcessTheFile.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: String Interpolation Example in ReScript\nDESCRIPTION: Shows how to create a string interpolation using backticks with embedded variables, Unicode characters, and multiline text. Demonstrates the ${} syntax for variable interpolation and preserves line breaks.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/language_string_interpolation.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nlet language = \"ReScript\"\n\nlet exclamation = `${language} is pretty cool.\nRight?\n🎉\n`\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar language = \"ReScript\";\n\nvar exclamation = language + \" is pretty cool.\\nRight?\\n🎉\\n\";\n```\n\n----------------------------------------\n\nTITLE: Combining two Promises with Promise.all2 in ReScript\nDESCRIPTION: Creates a promise that resolves when both promises resolve, returning a tuple of results.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/promise.mdx#2025-04-18_snippet_6\n\nLANGUAGE: reason\nCODE:\n```\nlet all2: ((t('a0), t('a1))) => t(('a0, 'a1));\n```\n\n----------------------------------------\n\nTITLE: Reordering Labeled Arguments in ReScript\nDESCRIPTION: Demonstrates how ReScript labeled arguments can be reordered in function calls while still producing correctly ordered arguments in the JavaScript output.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/bind-to-js-function.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\n@module(\"MyGame\")\nexternal draw: (~x: int, ~y: int, ~border: bool=?) => unit = \"draw\"\n\ndraw(~x=10, ~y=20)\ndraw(~y=20, ~x=10)\n```\n\nLANGUAGE: js\nCODE:\n```\nvar MyGame = require(\"MyGame\");\n\nMyGame.draw(10, 20, undefined);\nMyGame.draw(10, 20, undefined);\n```\n\n----------------------------------------\n\nTITLE: Defining JavaScript Object Type in ReScript\nDESCRIPTION: Shows the type signature for JavaScript objects in ReScript and demonstrates creating an object with typed properties. The 't<+'a>' type represents a JavaScript object with a generic type parameter.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\ntype t<+'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet x: {\"x\": int, \"y\": int} = {\"x\": 1, \"y\": 2}\n```\n\n----------------------------------------\n\nTITLE: Using pipe-first vs traditional approach with Array functions in ReScript\nDESCRIPTION: Example demonstrating the difference between traditional function calling and pipe-first syntax when finding the sum of squares of all even numbers in an array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/array-2.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\nlet isEven = (x) => {x mod 2 == 0};\nlet square = (x) => {x * x};\nlet result = Js.Array2.(\n  reduce(map(filter([|5, 2, 3, 4, 1|], isEven), square), (+), 0)\n  );\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet isEven = (x) => {x mod 2 == 0};\nlet square = (x) => {x * x};\nlet result = Js.Array2.(\n    [|5, 2, 3, 4, 1|] ->\n  \tfilter(isEven) ->\n    map(square) ->\n    reduce((+), 0)\n  );\n```\n\n----------------------------------------\n\nTITLE: Recursive Function in ReScript\nDESCRIPTION: Demonstrates how to create recursive functions using the rec keyword.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/function.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet rec listHas = (list, item) =>\n  switch list {\n  | list{} => false\n  | list{a, ...rest} => a === item || listHas(rest, item)\n  }\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction listHas(_list, item) {\n  while(true) {\n    var list = _list;\n    if (!list) {\n      return false;\n    }\n    if (list.hd === item) {\n      return true;\n    }\n    _list = list.tl;\n    continue ;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Using Tagged Templates in React Components\nDESCRIPTION: Shows how to use the custom tag function in a React component to create templated strings with type-safe interpolation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/tagged-templates.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nmodule Greetings = {\n  @react.component\n  let make = (~name, ~age) => {\n    <div> {s`hello ${S(name)} you're ${I(age)} year old!`} </div>\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Greetings(props) {\n  return React.createElement(\"div\", undefined, s([\n                  \"hello \",\n                  \" you're \",\n                  \" year old!\"\n                ], [\n                  {\n                    TAG: \"S\",\n                    _0: props.name\n                  },\n                  {\n                    TAG: \"I\",\n                    _0: props.age\n                  }\n                ]));\n}\n```\n\n----------------------------------------\n\nTITLE: Destructuring Modules in ReScript\nDESCRIPTION: Shows how to destructure a module's functions and values into separate let bindings. This provides an alternative to opening a module and can be used with or without aliasing the extracted values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/module.mdx#2025-04-18_snippet_7\n\nLANGUAGE: res\nCODE:\n```\nmodule User = {\n  let user1 = \"Anna\"\n  let user2 = \"Franz\"\n}\n\n// Destructure by name\nlet {user1, user2} = module(User)\n\n// Destructure with different alias\nlet {user1: anna, user2: franz} = module(User)\n```\n\nLANGUAGE: js\nCODE:\n```\nvar user1 = \"Anna\";\n\nvar user2 = \"Franz\";\n\nvar User = {\n  user1: user1,\n  user2: user2\n};\n```\n\n----------------------------------------\n\nTITLE: Modeling This-Based Callbacks in ReScript\nDESCRIPTION: Demonstrates how to handle JavaScript callbacks that rely on 'this' context using the @this annotation, which reserves the first parameter for the this value in the compiled output.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/bind-to-js-function.mdx#2025-04-18_snippet_14\n\nLANGUAGE: rescript\nCODE:\n```\ntype x\n@val external x: x = \"x\"\n@set external setOnload: (x, @this ((x, int) => unit)) => unit = \"onload\"\n@get external resp: x => int = \"response\"\nsetOnload(x, @this (o, v) => Console.log(resp(o) + v))\n```\n\nLANGUAGE: javascript\nCODE:\n```\nx.onload = function (v) {\n  var o = this;\n  console.log((o.response + v) | 0);\n};\n```\n\n----------------------------------------\n\nTITLE: Using fixed arguments with @as in ReScript external bindings\nDESCRIPTION: Demonstrates how to use the @as annotation to pass predetermined argument values to JavaScript functions, simplifying the binding interface.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/bind-to-js-function.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rescript\nCODE:\n```\n@val\nexternal processOnExit: (\n  @as(\"exit\") _,\n  int => unit\n) => unit = \"process.on\"\n\nprocessOnExit(exitCode =>\n  Js.log(\"error code: \" ++ Js.Int.toString(exitCode))\n);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nprocess.on(\"exit\", function (exitCode) {\n  console.log(\"error code: \" + exitCode.toString());\n});\n```\n\n----------------------------------------\n\nTITLE: Polymorphic Variant Function Binding in ReScript\nDESCRIPTION: Shows binding to JavaScript functions with polymorphic variant arguments.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/interop-cheatsheet.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\n@val\nexternal padLeft: (\n  string,\n  @unwrap [\n    | #Str(string)\n    | #Int(int)\n  ])\n  => string = \"padLeft\"\n\npadLeft(\"Hello World\", #Int(4))\npadLeft(\"Hello World\", #Str(\"Message from ReScript: \"))\n```\n\nLANGUAGE: javascript\nCODE:\n```\npadLeft(\"Hello World\", 4);\npadLeft(\"Hello World\", \"Message from ReScript: \");\n```\n\n----------------------------------------\n\nTITLE: If-Else Expression in ReScript\nDESCRIPTION: Demonstrates how if-else is an expression in ReScript that evaluates to a value, unlike JavaScript where it's a statement. The compiler outputs a ternary expression in JavaScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/control-flow.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\nlet message = if isMorning {\n  \"Good morning!\"\n} else {\n  \"Hello!\"\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar message = isMorning ? \"Good morning!\" : \"Hello!\";\n```\n\n----------------------------------------\n\nTITLE: Concatenating Arrays in ReScript\nDESCRIPTION: Returns a fresh array containing the concatenation of the given arrays.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/array.mdx#2025-04-18_snippet_8\n\nLANGUAGE: ReScript\nCODE:\n```\nlet concat: (array<'a>, array<'a>) => array<'a>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nBelt.Array.concat([1, 2, 3], [4, 5]) == [1, 2, 3, 4, 5]\n\nBelt.Array.concat([], [\"a\", \"b\", \"c\"]) == [\"a\", \"b\", \"c\"]\n```\n\n----------------------------------------\n\nTITLE: Using TailwindCSS with Conditional Classes in ReScript\nDESCRIPTION: Shows how to conditionally apply TailwindCSS classes in a ReScript React component using pattern matching and string interpolation to create dynamic class names.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/styling.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\n@react.component\nlet make = (~active: bool) => {\n  let activeClass = if active {\n    \"text-green-600\"\n  }\n  else {\n    \"text-red-600\"\n  }\n\n  <div className={`border-1 border-black ${activeClass}`}>\n    {React.string(\"Hello World\")}\n  </div>\n}\n```\n\n----------------------------------------\n\nTITLE: Slicing an Array with Offset and Length in ReScript\nDESCRIPTION: The slice function creates a new array with a specified number of elements from the original array, starting at a given offset. Handles negative offsets and adjusts for array bounds.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/array.mdx#2025-04-18_snippet_28\n\nLANGUAGE: ReScript\nCODE:\n```\nlet slice: (array<'a>, ~offset: int, ~len: int) => array<'a>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nBelt.Array.slice([10, 11, 12, 13, 14, 15, 16], ~offset=2, ~len=3) == [12, 13, 14]\n\nBelt.Array.slice([10, 11, 12, 13, 14, 15, 16], ~offset=-4, ~len=3) == [13, 14, 15]\n\nBelt.Array.slice([10, 11, 12, 13, 14, 15, 16], ~offset=4, ~len=9) == [14, 15, 16]\n```\n\n----------------------------------------\n\nTITLE: Basic @module Usage in ReScript\nDESCRIPTION: This example demonstrates how to use the @module decorator to import a function from a JavaScript module. It imports the 'dirname' function from Node.js 'path' module and applies it to a file path.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/decorator_module.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\n@module(\"path\")\nexternal dirname: string => string = \"dirname\"\n\nlet root = dirname(\"/User/github\")\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar Path = require(\"path\");\n\nvar root = Path.dirname(\"/User/github\");\n```\n\n----------------------------------------\n\nTITLE: Creating Mutable References in ReScript\nDESCRIPTION: Creating a mutable reference using the ref constructor. This wraps a value in a record with a single mutable field called 'contents'.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/mutation.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\nlet myValue = ref(5)\n```\n\nLANGUAGE: js\nCODE:\n```\nvar myValue = {\n  contents: 5\n};\n```\n\n----------------------------------------\n\nTITLE: Advanced Children Spread Examples in ReScript JSX\nDESCRIPTION: Shows more complex uses of children spread in ReScript JSX, including passing functions and tuples as children. This demonstrates the flexibility of the syntax.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/jsx.mdx#2025-04-18_snippet_5\n\nLANGUAGE: reason\nCODE:\n```\n<MyComponent> ...((theClassName) => <div className=theClassName />) </MyComponent>;\n\n<MyForm> ...(\"Hello\", \"Submit\") </MyForm>;\n```\n\nLANGUAGE: js\nCODE:\n```\nReact.createElement(\n  make,\n  makeProps(function (theClassName) {\n    return React.createElement(\"div\", {\n      className: theClassName,\n    });\n  }, undefined)\n);\n\nReact.createElement(MyForm.make, MyForm.makeProps([\"Hello\", \"Submit\"], undefined));\n```\n\n----------------------------------------\n\nTITLE: Binding to variadic JavaScript functions in ReScript\nDESCRIPTION: Shows how to use the @variadic annotation to bind to JavaScript functions that accept a variable number of arguments of the same type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/bind-to-js-function.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\n@module(\"path\") @variadic\nexternal join: array<string> => string = \"join\"\n\nlet v = join([\"a\", \"b\"])\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar Path = require(\"path\");\nvar v = Path.join(\"a\", \"b\");\n```\n\n----------------------------------------\n\nTITLE: Creating Lazy Values with File System Operations in ReScript\nDESCRIPTION: Demonstrates creating a lazy value that reads directory contents and memoizes the result. Shows how the computation only occurs on first access via Lazy.force.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/lazy-values.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\nlet getFiles =\n  lazy({\n    Js.log(\"Reading dir\");\n    Node.Fs.readdirSync(\"./pages\");\n  });\n\n// On the first call, the computation takes place\nLazy.force(getFiles)->Js.log;\n\n// The second call will just return the already calculated files\nLazy.force(getFiles)->Js.log;\n```\n\nLANGUAGE: ml\nCODE:\n```\nlet getFiles = lazy (\n  Js.log \"Reading dir\";\n  Node.Fs.readdirSync \"./pages\"\n)\n\nlet () = (Lazy.force getFiles) |. Js.log\n\nlet () = (Lazy.force getFiles) |. Js.log\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar Fs = require(\"fs\");\nvar CamlinternalLazy = require(\"./stdlib/camlinternalLazy.js\");\n\nvar getFiles = {\n  LAZY_DONE: false,\n  VAL: function () {\n    console.log(\"Reading dir\");\n    return Fs.readdirSync(\"./pages\");\n  },\n};\n\nconsole.log(CamlinternalLazy.force(getFiles));\nconsole.log(CamlinternalLazy.force(getFiles));\n```\n\n----------------------------------------\n\nTITLE: Defining Arrow Functions in ReScript with JavaScript Output\nDESCRIPTION: Shows how to define a function in ReScript with typed parameters and its JavaScript transpiled output. The example demonstrates a simple greeting function that takes a string parameter and returns a concatenated string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/language_function.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\nlet greet = (name: string) => {\n  \"Hello \" ++ name\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction greet(name) {\n  return \"Hello \" + name;\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple External Bindings for Overloaded Functions\nDESCRIPTION: Shows how to handle overloaded JavaScript functions by creating multiple external bindings that target the same JS function name.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/bind-to-js-function.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\n@module(\"MyGame\") external drawCat: unit => unit = \"draw\"\n@module(\"MyGame\") external drawDog: (~giveName: string) => unit = \"draw\"\n@module(\"MyGame\") external draw: (string, ~useRandomAnimal: bool) => unit = \"draw\"\n```\n\nLANGUAGE: js\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Type Signatures for Functions with Optional Arguments\nDESCRIPTION: Demonstrating the different type annotations needed for optional arguments in function signatures versus parameter annotations. This shows how types differ between external usage and internal function body.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/function.mdx#2025-04-18_snippet_10\n\nLANGUAGE: res\nCODE:\n```\nlet drawCircle: (~color: color, ~radius: int=?) => unit =\n  (~color: color, ~radius: option<int>=?) => {\n    setColor(color)\n    switch radius {\n    | None => startAt(1, 1)\n    | Some(r_) => startAt(r_, r_)\n    }\n  }\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction drawCircle(color, radius) {\n  setColor(color);\n  if (radius !== undefined) {\n    return startAt(radius, radius);\n  } else {\n    return startAt(1, 1);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a React Element in ReScript\nDESCRIPTION: Demonstrates how to create a simple React element representing an h1 heading with text content.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/rendering-elements.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nlet element = <h1> {React.string(\"Hello World\")} </h1>\n```\n\n----------------------------------------\n\nTITLE: ReScript Function Application with Type Annotations\nDESCRIPTION: Demonstrates how to type-annotate function calls in ReScript, including labeled parameters, punning, and optional parameters with explicit types.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/function.mdx#2025-04-18_snippet_11\n\nLANGUAGE: rescript\nCODE:\n```\n// labeled\nadd(~first=1: int, ~second=2: int)\n// with punning sugar\nadd(~first: int, ~second: int)\n\n// application with default value. Same as normal application\nadd(~first=1: int, ~second=2: int)\n\n// explicit optional application\nadd(~first=?Some(1): option<int>, ~second=?Some(2): option<int>)\n// no punning sugar when you want to type annotate\n```\n\n----------------------------------------\n\nTITLE: Binding Event Listeners with Poly Variants in ReScript\nDESCRIPTION: Demonstrates a special case of binding event listeners using polymorphic variants in ReScript, showing how to handle different event types.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/bind-to-js-function.mdx#2025-04-18_snippet_6\n\nLANGUAGE: ReScript\nCODE:\n```\ntype readline\n\n@send\nexternal on: (\n    readline,\n    @string [\n      | #close(unit => unit)\n      | #line(string => unit)\n    ]\n  )\n  => readline = \"on\"\n\nlet register = rl =>\n  rl\n  ->on(#close(event => ()))\n  ->on(#line(line => Console.log(line)));\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction register(rl) {\n  return rl\n    .on(\"close\", function($$event) {})\n    .on(\"line\", function(line) {\n      console.log(line);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating DOM Elements Directly in ReScript\nDESCRIPTION: Shows how to create DOM elements directly using ReactDOM.createDOMElementVariadic without JSX. This is useful for dynamic element creation or when working with non-standard DOM elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/elements-and-jsx.mdx#2025-04-18_snippet_9\n\nLANGUAGE: ReScript\nCODE:\n```\nReactDOM.createDOMElementVariadic(\"div\", ~props={className: \"card\"}, [])\n```\n\n----------------------------------------\n\nTITLE: Defining Option Type in ReScript\nDESCRIPTION: Demonstrates the definition of the Option type in ReScript, which represents the existence or nonexistence of a value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/null-undefined-option.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\ntype option<'a> = None | Some('a)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Regular Expressions in ReScript\nDESCRIPTION: Example of creating a regular expression in ReScript using the %re syntax, which compiles directly to JavaScript regular expressions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/primitive-types.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nlet r = %re(\"/b/g\")\n```\n\nLANGUAGE: js\nCODE:\n```\nvar r = /b/g;\n```\n\n----------------------------------------\n\nTITLE: Using Labeled Variant Payloads (Inline Records)\nDESCRIPTION: Example of using record-like syntax to label variant constructor fields for better readability. Instead of positional arguments, named fields are used, which compile to a JavaScript object with named properties instead of numbered ones.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/variant.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\ntype user =\n  | Number(int)\n  | Id({name: string, password: string})\n\nlet me = Id({name: \"Joe\", password: \"123\"})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar me = {\n  TAG: \"Id\",\n  name: \"Joe\",\n  password: \"123\"\n};\n```\n\n----------------------------------------\n\nTITLE: Capitalized Component JSX Transformation\nDESCRIPTION: Shows how a capitalized JSX component gets transformed from ReScript to JavaScript output.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/jsx.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\n<MyComponent name={\"ReScript\"} />\n```\n\nLANGUAGE: javascript\nCODE:\n```\nReact.createElement(MyComponent, {\n  name: \"ReScript\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using Optional Props in JSX in ReScript\nDESCRIPTION: Demonstrates how to apply optional props when using a component in JSX with the special '?' syntax for optional props.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/components-and-props.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\nlet name = Some(\"Andrea\")\n\n<Greeting ?name />\n```\n\nLANGUAGE: js\nCODE:\n```\nvar name = \"Andrea\";\n\nReact.createElement(Greeting, {\n  name: name\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Lists in ReScript\nDESCRIPTION: Shows how to create immutable singly linked lists in ReScript. Lists are optimized for prepending items and getting the tail.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/array-and-list.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\nlet myList = [1, 2, 3];\n```\n\nLANGUAGE: ml\nCODE:\n```\nlet myList = [1; 2; 3]\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar myList = {\n  hd: 1,\n  tl: {\n    hd: 2,\n    tl: {\n      hd: 3,\n      tl: 0\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Using @as Decorator for Field Name Mapping\nDESCRIPTION: Demonstrates how to use the @as decorator to map different field names between ReScript and JavaScript, useful for handling JavaScript keywords.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/bind-to-js-object.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\ntype action = {\n  @as(\"type\") type_: string\n}\n\nlet action = {type_: \"ADD_USER\"}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar action = {\n  type: \"ADD_USER\"\n};\n```\n\n----------------------------------------\n\nTITLE: Safely Getting Array Elements with Option Return in ReScript\nDESCRIPTION: The get function safely retrieves an element at a specified index, returning an option type that is Some(value) if the index is valid, or None if the index is out of range.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/array.mdx#2025-04-18_snippet_2\n\nLANGUAGE: ReScript\nCODE:\n```\nlet get: (array<'a>, int) => option<'a>\n```\n\n----------------------------------------\n\nTITLE: Creating a MutableSet with Custom Comparator in ReScript\nDESCRIPTION: This example demonstrates how to create a custom comparator for pairs of integers and use it to initialize a MutableSet. It then adds a pair to the set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\nmodule PairComparator = Belt.Id.MakeComparable({\n  type t = (int, int)\n  let cmp = ((a0, a1), (b0, b1)) =>\n    switch Pervasives.compare(a0, b0) {\n    | 0 => Pervasives.compare(a1, b1)\n    | c => c\n    }\n})\n\nlet mySet = Belt.MutableSet.make(~id=module(PairComparator))\nmySet->Belt.MutableSet.add((1, 2))\n```\n\n----------------------------------------\n\nTITLE: Configuring GenType Settings in ReScript\nDESCRIPTION: Enables and configures GenType for TypeScript integration. This configuration specifies ES modules, node module resolution, and sets the generated file extension to '.gen.tsx'.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/build-configuration.mdx#2025-04-18_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"gentypeconfig\": {\n    \"module\": \"esmodule\",\n    \"moduleResolution\": \"node\",\n    \"generatedFileExtension\": \".gen.tsx\",\n    \"debug\": {\n      \"all\": false,\n      \"basic\": false\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating ReScript's Minimal JavaScript Output\nDESCRIPTION: This snippet illustrates how compact ReScript's compiled JavaScript output can be. A 'Hello world' program in ReScript generates only 20 bytes of JavaScript code, showcasing the language's efficiency in code generation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/introduction.mdx#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"Hello world\"\n```\n\n----------------------------------------\n\nTITLE: Defining Option Type in ReScript\nDESCRIPTION: Basic definition of the option type in ReScript which represents potentially nonexistent values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/null-undefined-option.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\ntype option('a) = None | Some('a);\n```\n\nLANGUAGE: ml\nCODE:\n```\ntype 'a option = | None | Some of 'a\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Methods with @meth Decorator in ReScript\nDESCRIPTION: This example demonstrates how to define a type with a method using the @meth decorator and calling that method on a JavaScript object. The decorator ensures proper method invocation without currying issues.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/decorator_meth.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\ntype person = {@meth \"say\": (string, string) => unit}\n\n@val external john: person = \"john\"\n\njohn[\"say\"](\"hey\", \"jude\")\n```\n\nLANGUAGE: js\nCODE:\n```\njohn.say(\"hey\", \"jude\");\n```\n\n----------------------------------------\n\nTITLE: Passing Information Between Hooks in ReScript\nDESCRIPTION: A code snippet that demonstrates how to pass information between hooks by using the state from one hook as an argument to another. It shows updating recipientId state and using it with the useFriendStatus hook.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/hooks-custom.mdx#2025-04-18_snippet_6\n\nLANGUAGE: ReScript\nCODE:\n```\nlet (recipientId, setRecipientId) = React.useState(_ => \"1\")\nlet recipientOnlineState = FriendStatusHook.useFriendStatus(recipientId)\n```\n\n----------------------------------------\n\nTITLE: Using Tuple Types in Type Annotations\nDESCRIPTION: Demonstrates how to use tuple types in type annotations and create type aliases for tuples. Shows that tuple types visually resemble tuple values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/tuple.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\nlet ageAndName: (int, string) = (24, \"Lil' ReScript\")\n// a tuple type alias\ntype coord3d = (float, float, float)\nlet my3dCoordinates: coord3d = (20.0, 30.5, 100.0)\n```\n\nLANGUAGE: js\nCODE:\n```\nvar ageAndName = [24, \"Lil' ReScript\"];\nvar my3dCoordinates = [20.0, 30.5, 100.0];\n```\n\n----------------------------------------\n\nTITLE: Embedding JavaScript in ReScript using %%raw\nDESCRIPTION: This snippet demonstrates how to embed raw JavaScript code in a ReScript file using the %%raw syntax. It's the first step in converting a JavaScript file to ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/converting-from-js.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\n%%raw(`\nconst school = require('school');\n\nconst defaultId = 10;\n\nfunction queryResult(usePayload, payload) {\n  if (usePayload) {\n    return payload.student;\n  } else {\n    return school.getStudentById(defaultId);\n  }\n}\n`)\n```\n\n----------------------------------------\n\nTITLE: Using Let Binding with Lazy Pattern in ReScript\nDESCRIPTION: Shows how to use pattern matching with let binding to trigger a lazy computation. This approach extracts the result directly into a variable when the computation is executed.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/lazy-values.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\nlet lazy(result) = expensiveFilesRead\nJs.log(result)\n```\n\nLANGUAGE: js\nCODE:\n```\nvar result = CamlinternalLazy.force(expensiveFilesRead);\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Basic Tuple Destructuring in ReScript\nDESCRIPTION: Demonstrates how to destructure a tuple in ReScript to extract specific elements while ignoring others using underscore placeholder.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\nlet coordinates = (10, 20, 30)\nlet (x, _, _) = coordinates\nJs.log(x) // 10\n```\n\nLANGUAGE: js\nCODE:\n```\nvar coordinates = [10, 20, 30];\nvar x = 10;\nconsole.log(10);\n```\n\n----------------------------------------\n\nTITLE: Implementing Lazy Loading with React.lazy_ in ReScript\nDESCRIPTION: Demonstrates how to dynamically import and lazy load the Title component using React.lazy_ and ReScript's import functionality.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/lazy-components.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nmodule LazyTitle = {\n  let make = React.lazy_(() => import(Title.make))\n}\n\nlet titleJsx = <LazyTitle text=\"Hello!\" />\n```\n\n----------------------------------------\n\nTITLE: Declaring Record Types in ReScript\nDESCRIPTION: Demonstrates how to declare a record type with fixed fields. Records are immutable by default and require a type declaration.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/record.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype person = {\n  age: int,\n  name: string,\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Binding to JS Objects using ReScript Object Syntax\nDESCRIPTION: Shows an alternative approach to modeling JavaScript objects using ReScript's object type. This method uses bracket notation to access object properties.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/bind-to-js-object.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\ntype person = {\n  \"name\": string,\n  \"friends\": array<string>,\n  \"age\": int,\n}\n\n@module(\"MySchool\") external john: person = \"john\"\n\nlet johnName = john[\"name\"]\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar MySchool = require(\"MySchool\");\n\nvar johnName = MySchool.john.name;\n```\n\n----------------------------------------\n\nTITLE: Safe Array Access with Belt in ReScript\nDESCRIPTION: Demonstrates the difference between standard array access and Belt's safe array access, which returns options instead of raising exceptions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nopen Belt\nlet letters = [\"a\", \"b\", \"c\"]\nlet a = letters[0]\n\n// Use a switch statement:\nlet capitalA =\n  switch a {\n  | Some(a) => Some(Js.String.toUpperCase(a))\n  | None => None\n  }\n\nlet k = letters[10] // k == None\n```\n\n----------------------------------------\n\nTITLE: JavaScript Interop with Multiple External Bindings\nDESCRIPTION: Shows a more efficient approach to binding a JavaScript function that accepts multiple argument types. Defines multiple external bindings that compile to the same JavaScript call.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/variant.mdx#2025-04-18_snippet_9\n\nLANGUAGE: reason\nCODE:\n```\n[@bs.module \"myLibrary\"] external drawFloat: float => unit = \"draw\";\n[@bs.module \"myLibrary\"] external drawString: string => unit = \"draw\";\n```\n\nLANGUAGE: ml\nCODE:\n```\nexternal drawFloat: float -> unit = \"draw\" [@@bs.module \"myLibrary\"]\nexternal drawString: string -> unit = \"draw\" [@@bs.module \"myLibrary\"]\n```\n\nLANGUAGE: js\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Executing ReScript Code with Node.js\nDESCRIPTION: Shows how to pipe the output of bsc to Node.js for immediate execution. The example defines an add function, logs the result of adding 1 and 2, and outputs 3.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/try.mdx#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n❯ bsc -e 'let add = (x, y) => x + y; Js.log(add(1, 2))' | node\n3\n```\n\n----------------------------------------\n\nTITLE: Creating New ReScript Project\nDESCRIPTION: Shell commands to clone the ReScript project template, install dependencies, build ReScript code, and run the compiled JavaScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/installation.mdx#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/rescript-lang/rescript-project-template\ncd rescript-project-template\nnpm install\nnpm run res:build\nnode src/Demo.bs.js\n```\n\n----------------------------------------\n\nTITLE: Testing if All Array Elements Pass a Condition in ReScript\nDESCRIPTION: Returns true if the provided predicate function returns true for all items in the array. When given an empty array, returns true. The predicate function takes each array element as its argument.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/array.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rescript\nCODE:\n```\nlet every: ('a => bool, t<'a>) => bool\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet isEven = x => mod(x, 2) == 0\nJs.Array.every(isEven, [6, 22, 8, 4]) == true\nJs.Array.every(isEven, [6, 22, 7, 4]) == false\n```\n\n----------------------------------------\n\nTITLE: Passing Optional Props in JSX in ReScript React\nDESCRIPTION: Shows the special syntax for passing optional props to components in ReScript JSX using the ? prefix. This example passes an optional name prop to the Greeting component.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/components-and-props.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet name = Some(\"Andrea\")\n\n<Greeting ?name />\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar name = \"Andrea\";\n\nReact.createElement(Greeting, {\n  name: name\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Optional Fields to Maybe Values\nDESCRIPTION: Demonstrates how to update an optional field with a value of type option using the question mark prefix. This allows setting the field conditionally based on an option value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/record.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rescript\nCODE:\n```\ntype person = {\n  age: int,\n  name?: string\n}\n\nlet me = {\n  age: 123,\n  name: \"Hello\"\n}\n\nlet maybeName = Some(\"My Name\")\n\nlet withoutName = {\n  ...me,\n  name: ?maybeName\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Caml_obj from \"./stdlib/caml_obj.js\";\n\nvar me = {\n  age: 123,\n  name: \"Hello\"\n};\n\nvar maybeName = \"My Name\";\n\nvar newrecord = Caml_obj.obj_dup(me);\n\nnewrecord.name = maybeName;\n\nvar withoutName = newrecord;\n```\n\n----------------------------------------\n\nTITLE: Finding Array Elements in ReScript\nDESCRIPTION: Returns the first element in the array that satisfies the provided testing function. Returns Some(value) for the first matching element, or None if no element satisfies the predicate.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/array-2.mdx#2025-04-18_snippet_15\n\nLANGUAGE: ReScript\nCODE:\n```\nlet find: (t<'a>, 'a => bool) => option<'a>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\n// find first negative element\nJs.Array2.find([33, 22, -55, 77, -44], x => x < 0) == Some(-55)\nJs.Array2.find([33, 22, 55, 77, 44], x => x < 0) == None\n```\n\n----------------------------------------\n\nTITLE: Flat Mapping Result Values in ReScript\nDESCRIPTION: Shows how to use the flatMap function to chain operations that return Result types, handling both success and error cases.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/result.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet recip = (x) =>\n  if (x !== 0.0) {\n    Belt.Result.Ok(1.0 /. x);\n  } else {\n    Belt.Result.Error(\"Divide by zero\");\n  };\n\nBelt.Result.flatMap(Ok(2.0), recip) == Ok(0.5);\n\nBelt.Result.flatMap(Ok(0.0), recip) == Error(\"Divide by zero\");\n\nBelt.Result.flatMap(Error(\"Already bad\"), recip) == Error(\"Already bad\");\n```\n\n----------------------------------------\n\nTITLE: ReScript Build Configuration\nDESCRIPTION: Basic ReScript build configuration (bsconfig.json) specifying project settings, source directories, and build specifications.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/installation.mdx#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"your-project-name\",\n  \"sources\": [\n    {\n      \"dir\": \"src\",\n      \"subdirs\": true\n    }\n  ],\n  \"package-specs\": [\n    {\n      \"module\": \"es6\",\n      \"in-source\": true\n    }\n  ],\n  \"suffix\": \".bs.js\",\n  \"bs-dependencies\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Property Access with get_index and set_index\nDESCRIPTION: Shows how to access dynamic properties or indices of a JavaScript object using @get_index and @set_index. This is useful for array-like objects or objects with computed property names.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/bind-to-js-object.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\ntype t\n@new external create: int => t = \"Int32Array\"\n@get_index external get: (t, int) => int = \"\"\n@set_index external set: (t, int, int) => unit = \"\"\n\nlet i32arr = create(3)\ni32arr->set(0, 42)\nJs.log(i32arr->get(0))\n```\n\nLANGUAGE: js\nCODE:\n```\nvar i32arr = new Int32Array(3);\ni32arr[0] = 42;\nconsole.log(i32arr[0]);\n```\n\n----------------------------------------\n\nTITLE: JavaScript Interop with Nullable Types\nDESCRIPTION: Examples of using Js.Nullable for JavaScript interop with null/undefined values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/null-undefined-option.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\n@module(\"MyConstant\") external myId: Js.Nullable.t<string> = \"myId\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Function Method Chaining in ReScript\nDESCRIPTION: Demonstrates method chaining with JavaScript arrays using @send external bindings.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/interop-cheatsheet.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\n@send external map: (array<'a>, 'a => 'b) => array<'b> = \"map\"\n@send external filter: (array<'a>, 'a => 'b) => array<'b> = \"filter\"\n[1, 2, 3]\n  ->map(a => a + 1)\n  ->filter(a => mod(a, 2) == 0)\n  ->Js.log\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(\n  [1, 2, 3]\n    .map(function (a) {\n      return (a + 1) | 0;\n    })\n    .filter(function (a) {\n      return a % 2 === 0;\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Block-body Function in ReScript\nDESCRIPTION: Shows how to define a function with a multi-line block body enclosed in curly braces. This style is used for longer functions with multiple expressions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/function.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet greetMore = (name) => {\n  let part1 = \"Hello\"\n  part1 ++ \" \" ++ name\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction greetMore(name) {\n  return \"Hello \" + name;\n}\n```\n\n----------------------------------------\n\nTITLE: Distinguishing Multiple Arguments from Tuple Arguments in ReScript Variants\nDESCRIPTION: Shows the difference between a variant constructor with multiple separate arguments versus one with a single tuple argument.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/variant.mdx#2025-04-18_snippet_8\n\nLANGUAGE: res\nCODE:\n```\ntype account =\n  | Facebook(string, int) // 2 arguments\ntype account2 =\n  | Instagram((string, int)) // 1 argument - happens to be a 2-tuple\n```\n\nLANGUAGE: js\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Creating a Lazy Value in ReScript\nDESCRIPTION: Demonstrates how to create a lazy value that defers expensive directory reading operation until it's needed. The computation is wrapped with the lazy keyword but not executed until explicitly forced.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/lazy-values.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\n// Read the directory, only once\nlet expensiveFilesRead = lazy({\n  Js.log(\"Reading dir\")\n  Node.Fs.readdirSync(\"./pages\")\n})\n```\n\nLANGUAGE: js\nCODE:\n```\nvar Fs = require(\"fs\");\n\nvar expensiveFilesRead = {\n  LAZY_DONE: false,\n  VAL: (function () {\n    console.log(\"Reading dir\");\n    return Fs.readdirSync(\"./pages\");\n  })\n};\n```\n\n----------------------------------------\n\nTITLE: JSX Transformation for DOM Elements with Children\nDESCRIPTION: Shows how JSX for DOM elements with children is transformed in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/beyond-jsx.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\n<div title=\"test\">\n  <span/>\n</div>\n```\n\nLANGUAGE: rescript\nCODE:\n```\n// classic\nReactDOM.createDOMElementVariadic(\n  \"div\",\n  ~props={title: \"test\"},\n  [ReactDOM.createDOMElementVariadic(\"span\", [])],\n)\n\n// automatic\nReactDOM.jsx(\"div\", {title: \"test\", children: ?ReactDOM.someElement(ReactDOM.jsx(\"span\", {}))})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nReact.createElement(\"div\", { title: \"test\" }, React.createElement(\"span\", undefined));\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Unicode and Interpolation in ReScript Backtick Strings\nDESCRIPTION: This code snippet shows how ReScript's backtick strings support Unicode characters and string interpolation, which is not available in regular ReScript strings.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/shared-data-types.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\n``hello 👋 ${personName}``\n```\n\n----------------------------------------\n\nTITLE: Creating Objects in ReScript\nDESCRIPTION: Demonstrates object creation syntax in ReScript. Objects can be created without prior type declaration, with types being inferred from the value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/object.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reason\nCODE:\n```\nlet me = {\n  \"age\": 5,\n  \"name\": \"Big ReScript\"\n};\n```\n\nLANGUAGE: ml\nCODE:\n```\nlet me = [%bs.obj {\n  age = 5;\n  name = \"Big ReScript\";\n}]\n```\n\n----------------------------------------\n\nTITLE: ReScript Promise.all Array Implementation\nDESCRIPTION: Function signature for combining an array of Promises into a single Promise of array\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/promise.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\nlet all: array<t<'a>> => t<array<'a>>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Comparator for Belt.Set in ReScript\nDESCRIPTION: Demonstrates how to create a custom comparator for pairs of integers and use it to create a Belt.Set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/set.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nmodule PairComparator =\n  Belt.Id.MakeComparable({\n    type t = (int, int)\n    let cmp = ((a0, a1), (b0, b1)) =>\n      switch (Pervasives.compare(a0, b0)) {\n      | 0 => Pervasives.compare(a1, b1)\n      | c => c\n      }\n  })\n\nlet mySet = Belt.Set.make(~id=module(PairComparator))\nlet mySet2 = Belt.Set.add(mySet, (1, 2))\n```\n\n----------------------------------------\n\nTITLE: Emotion CSS-in-JS Usage Examples\nDESCRIPTION: Demonstrates different ways to use Emotion CSS-in-JS bindings in ReScript components.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/styling.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet container = Emotion.css({\n  \"color\": \"#fff\",\n  \"backgroundColor\": \"red\"\n})\n\nlet app = <div className={container} />\n```\n\nLANGUAGE: rescript\nCODE:\n```\nmodule Styles = {\n  open Emotion\n  let container = css({\n    \"color\": \"#fff\",\n    \"backgroundColor\": \"red\"\n  })\n  // your other declarations\n}\n\nlet app = <div className={Styles.container} />\n```\n\nLANGUAGE: rescript\nCODE:\n```\n@module(\"@emotion/css\") external css: ReactDOM.Style.t => string = \"css\"\n\n// Usage is slightly different (and probably less ergonomic)\nlet container = ReactDOM.Style.make(~padding=\"20px\", ())->css;\n\nlet app = <div\n  className={container}\n/>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet container = Emotion.rawCss(`\n  color: #fff;\n  background-color: red;\n`)\n\nlet app = <div className={container} />\n```\n\n----------------------------------------\n\nTITLE: Converting to basic pattern matching in ReScript\nDESCRIPTION: Improved implementation using pattern matching with a switch statement, but still using a nested ternary inside one of the branches.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_15\n\nLANGUAGE: res\nCODE:\n```\nlet optionBoolToBool = opt => {\n  switch opt {\n  | None => false\n  | Some(a) => a ? true : false\n  }\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction optionBoolToBool(opt) {\n  if (opt !== undefined && opt) {\n    return true;\n  } else {\n    return false;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: NPM Scripts for ReScript\nDESCRIPTION: Package.json script configurations for building ReScript code and running the development watcher.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/installation.mdx#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  \"res:build\": \"rescript\",\n  \"res:dev\": \"rescript build -w\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Constructor Arguments with Polymorphic Variants\nDESCRIPTION: Demonstrates adding payloads to polymorphic variant constructors. Constructors with payloads compile to JavaScript objects with NAME and VAL attributes.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/polymorphic-variant.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\ntype account = [\n  | #Anonymous\n  | #Instagram(string)\n  | #Facebook(string, int)\n]\n\nlet acc: account = #Instagram(\"test\")\n```\n\nLANGUAGE: js\nCODE:\n```\nvar acc = {\n  NAME: \"Instagram\",\n  VAL: \"test\"\n};\n```\n\n----------------------------------------\n\nTITLE: Comparing Variable Declaration in ReScript and JavaScript\nDESCRIPTION: Shows how variables are declared in ReScript compared to JavaScript, including immutable and mutable variables.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/overview.mdx#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst x = 5;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet x = 5\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet x = 5; x = x + 1;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet x = ref(5); x := x.contents + 1\n```\n\n----------------------------------------\n\nTITLE: Using Generated TypeScript Functions\nDESCRIPTION: Example of how to import and use the functions generated by genType in a TypeScript application.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/typescript-integration.mdx#2025-04-18_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n// src/app.ts\n\nimport { printColorMessage } from \"./Color.gen.tsx\";\n\nprintColorMessage(\"Red\", \"Hello, genType!\");\n```\n\n----------------------------------------\n\nTITLE: Creating Initialized Arrays in ReScript\nDESCRIPTION: Creates an array of specified size filled with a given value. Returns an empty array when the size is negative.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/array.mdx#2025-04-18_snippet_15\n\nLANGUAGE: reason\nCODE:\n```\nlet make: (int, 'a) => array('a);\n```\n\n----------------------------------------\n\nTITLE: Using Abstract Types with JS Integer Enum Converters in ReScript\nDESCRIPTION: Demonstrates using the newType option with @deriving(jsConverter) for variants to create abstract types that provide more safety when converting between JavaScript and ReScript values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/generate-converters-accessors.mdx#2025-04-18_snippet_10\n\nLANGUAGE: res\nCODE:\n```\n@deriving({jsConverter: newType})\ntype fruit =\n  | Apple\n  | @as(100) Kiwi\n  | Watermelon;\n```\n\nLANGUAGE: res\nCODE:\n```\nlet fruitToJs: fruit => abs_fruit;\n\nlet fruitFromJs: abs_fruit => fruit;\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching with Person Types in ReScript\nDESCRIPTION: Example of pattern matching on complex person types (Teacher and Student) with nested pattern matching. The compiler warns about non-exhaustive patterns when cases are missing.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_12\n\nLANGUAGE: reason\nCODE:\n```\nlet message = switch (person) {\n| Teacher({name: \"Mary\" | \"Joe\"}) =>\n  \"Hey, still going to the party on Saturday?\"\n| Student({name, reportCard: {passing: true, gpa}}) =>\n  \"Congrats \" ++ name ++ \", nice GPA of \" ++ Js.Float.toString(gpa) ++ \" you got there!\"\n| Student({\n    reportCard: {gpa: 0.0},\n    status: Vacations(daysLeft) | Sabbatical(daysLeft)\n  }) =>\n  \"Come back in \" ++ Js.Int.toString(daysLeft) ++ \" days!\"\n| Student({status: Sick}) =>\n  \"How are you feeling?\"\n| Student({name}) =>\n  \"Good luck next semester \" ++ name ++ \"!\"\n}\n```\n\nLANGUAGE: ml\nCODE:\n```\nlet message = match person with\n| Teacher {name = \"Mary\" | \"Joe\"} ->\n  \"Hey, still going to the party on Saturday?\"\n| Student {name; reportCard = {passing = true; gpa}} ->\n  \"Congrats \" ^ name ^ \", nice GPA of \" ^ (Js.Float.toString gpa) ^ \" you got there!\"\n| Student {\n    reportCard = {gpa = 0.0};\n    status = (Vacations daysLeft) | (Sabbatical daysLeft)\n  } ->\n  \"Come back in \" ^ (Js.Int.toString daysLeft) ^ \" days!\"\n| Student {status = Sick} ->\n    \"How are you feeling?\"\n| Student {name} ->\n  \"Good luck next semester \"^ name ^ \"!\"\n```\n\nLANGUAGE: js\nCODE:\n```\nif (person.TAG) {\n  var match$1 = person.status;\n  var name = person.name;\n  var match$2 = person.reportCard;\n  if (match$2.passing) {\n    \"Congrats \" + name + \", nice GPA of \" + match$2.gpa.toString() + \" you got there!\";\n  } else if (typeof match$1 === \"number\") {\n    if (match$1 !== 0) {\n      \"Good luck next semester \" + name + \"!\";\n    } else {\n      \"How are you feeling?\";\n    }\n  } else if (person.reportCard.gpa !== 0.0) {\n    \"Good luck next semester \" + name + \"!\";\n  } else {\n    \"Come back in \" + match$1._0.toString() + \" days!\";\n  }\n} else {\n  switch (person.name) {\n    case \"Joe\":\n    case \"Mary\":\n      break;\n    default:\n      throw {\n        RE_EXN_ID: \"Match_failure\",\n        _1: [\n          \"playground.res\",\n          13,\n          0\n        ],\n        Error: new Error()\n      };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Module Signatures in ReScript\nDESCRIPTION: This snippet demonstrates how to extend module signatures using the 'include' keyword. It shows the creation of a BaseComponent module type and its extension into an ActualComponent module type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/module.mdx#2025-04-18_snippet_11\n\nLANGUAGE: res\nCODE:\n```\nmodule type BaseComponent = {\n  let defaultGreeting: string\n  let getAudience: (~excited: bool) => string\n}\n\nmodule type ActualComponent = {\n  /* the BaseComponent signature is copied over */\n  include BaseComponent\n  let render: unit => string\n}\n```\n\nLANGUAGE: js\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: JSON Parsing Example\nDESCRIPTION: Example showing how to parse a simple JSON string and handle potential errors\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/json.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet json = try Js.Json.parseExn(` \"hello\" `) catch {\n| _ => failwith(\"Error parsing JSON string\")\n}\n\nswitch Js.Json.classify(json) {\n| Js.Json.JSONString(value) => Js.log(value)\n| _ => failwith(\"Expected a string\")\n}\n```\n\n----------------------------------------\n\nTITLE: Optional Labeled Arguments in ReScript\nDESCRIPTION: Shows how to define optional labeled arguments using the ? symbol. Optional arguments are wrapped in the option type inside the function body.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/function.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\n// radius can be omitted\nlet drawCircle = (~color, ~radius=?, ()) => {\n  setColor(color)\n  switch radius {\n  | None => startAt(1, 1)\n  | Some(r_) => startAt(r_, r_)\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar Caml_option = require(\"./stdlib/caml_option.js\");\n\nfunction drawCircle(color, radius, param) {\n  setColor(color);\n  if (radius === undefined) {\n    return startAt(1, 1);\n  }\n  var r_ = Caml_option.valFromOption(radius);\n  return startAt(r_, r_);\n}\n```\n\n----------------------------------------\n\nTITLE: Array Sorting with Custom Comparator in ReScript\nDESCRIPTION: Demonstrates in-place array sorting using a custom comparison function. The comparator should return negative for less than, zero for equal, and positive for greater than relationships.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/array.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\n// sort by word length\nlet words = [\"horse\", \"aardvark\", \"dog\", \"camel\"]\nlet byLength = (s1, s2) => Js.String.length(s1) - Js.String.length(s2)\n\nJs.Array.sortInPlaceWith(byLength, words) == [\"dog\", \"horse\", \"camel\", \"aardvark\"]\n\n// sort in reverse numeric order\nlet numbers = [3, 30, 10, 1, 20, 2]\nlet reverseNumeric = (n1, n2) => n2 - n1\nJs.Array.sortInPlaceWith(reverseNumeric, numbers) == [30, 20, 10, 3, 2, 1]\n```\n\n----------------------------------------\n\nTITLE: ReScript Basic Logging Functions\nDESCRIPTION: Basic logging functions supporting 1-4 arguments and array logging. These functions print output to the console with standard log level.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/console.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nlet log: 'a => unit\nlet log2: ('a, 'b) => unit\nlet log3: ('a, 'b, 'c) => unit\nlet log4: ('a, 'b, 'c, 'd) => unit\nlet logMany: array<'a> => unit\n```\n\n----------------------------------------\n\nTITLE: Various ReScript Attributes Example\nDESCRIPTION: Shows multiple attribute examples including file-level warnings, type annotations, external bindings, record field renaming, and deprecation notices.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/attribute.mdx#2025-04-18_snippet_1\n\nLANGUAGE: ReScript\nCODE:\n```\n@@warning(\"-27\")\n\n\n@unboxed\ntype a = Name(string)\n\n@val external message: string = \"message\"\n\ntype student = {\n  age: int,\n  @as(\"aria-label\") ariaLabel: string,\n}\n\n@deprecated\nlet customDouble = foo => foo * 2\n\n@deprecated(\"Use SomeOther.customTriple instead\")\nlet customTriple = foo => foo * 3 \n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Computing the intersection of two string sets in ReScript\nDESCRIPTION: Returns a new set containing elements that exist in both input sets.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set-string.mdx#2025-04-18_snippet_12\n\nLANGUAGE: rescript\nCODE:\n```\nlet intersect: (t, t) => t\n```\n\n----------------------------------------\n\nTITLE: Raising JavaScript Exceptions from ReScript\nDESCRIPTION: Demonstrates how to raise JavaScript exceptions from ReScript code using Js.Exn.raiseError.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/exception.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reason\nCODE:\n```\nlet myTest = () => {\n  Js.Exn.raiseError(\"Hello!\");\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Variants in Separate Files in ReScript\nDESCRIPTION: Shows how to define a variant type in one file and use it in another file by bringing it into scope.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/variant.mdx#2025-04-18_snippet_1\n\nLANGUAGE: ReScript\nCODE:\n```\n// Zoo.res\ntype animal = Dog | Cat | Bird\n```\n\nLANGUAGE: ReScript\nCODE:\n```\n// Example.res\nlet pet: Zoo.animal = Dog // preferred\n// or\nlet pet2 = Zoo.Dog\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar pet = /* Dog */0;\nvar pet2 = /* Dog */0;\n```\n\n----------------------------------------\n\nTITLE: Module Type Signatures\nDESCRIPTION: Shows how to define module type signatures to specify module interfaces and abstract types.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/module.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nmodule type EstablishmentType = {\n  type profession\n  let getProfession: profession => string\n}\n```\n\n----------------------------------------\n\nTITLE: Binding to JavaScript Class Constructor\nDESCRIPTION: Shows how to bind to a JavaScript class constructor using the @new attribute.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/bind-to-js-object.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\ntype t\n@new external createDate: unit => t = \"Date\"\n\nlet date = createDate()\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar date = new Date();\n```\n\n----------------------------------------\n\nTITLE: Creating a new Promise in ReScript\nDESCRIPTION: Function to create a new promise with resolve and reject callbacks.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/promise.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\nlet make: ((~resolve: (. 'a) => unit, ~reject: (. exn) => unit) => unit) => t('a);\n```\n\n----------------------------------------\n\nTITLE: Destructuring Various Data Structures in ReScript\nDESCRIPTION: Shows how destructuring works across multiple ReScript data types including records, variants, arrays, and lists. Each example demonstrates extracting specific values from the respective data structure.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reason\nCODE:\n```\n// Record\ntype student = {name: string, age: int};\nlet student1 = {name: \"John\", age: 10};\nlet {name} = student1; // \"John\" assigned to `name`\n\n// Variant\ntype result =\n  | Success(string);\nlet myResult = Success(\"You did it!\");\nlet Success(message) = myResult; // \"You did it!\" assigned to `message`\n\n// Array\nlet myArray = [|1, 2, 3|];\nlet [|item1, item2, _|] = myArray; // 1 assigned to `item1`, 2 assigned to `item2`, 3rd item ignored\n\n// List\nlet myList = [1, 2, 3];\nlet [head, ...tail] = myList; // 1 assigned to `head`, `[2, 3]` assigned to tail\n```\n\nLANGUAGE: ml\nCODE:\n```\n// Record\ntype student = {name: string; age: int}\nlet student1 = {name = \"John\"; age = 10}\nlet {name} = student1; (* \"John\" assigned to `name` *)\n\n(* Variant *)\ntype result =\n  | Success of string\nlet myResult = Success \"You did it!\"\nlet Success message = myResult (* \"You did it!\" assigned to `message` *)\n\n(* Array *)\nlet myArray = [|1; 2; 3|]\nlet [|item1; item2; _|] = myArray (* 1 assigned to `item1`, 2 assigned to `item2`, 3rd item ignored *)\n\n(* List *)\nlet myList = [1; 2; 3]\nlet head::tail = myList (* 1 assigned to `head`, `[2, 3]` assigned to tail *)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar student1 = {\n  name: \"John\",\n  age: 10\n};\nvar name = \"John\";\n\nvar myResult = /* Success */{\n  _0: \"You did it!\"\n};\nvar message = \"You did it!\"\n\nvar myArray = [1, 2, 3];\nif (myArray.length !== 2) {\n  throw {\n    RE_EXN_ID: \"Match_failure\",\n    _1: [\n      \"playground.res\",\n      14,\n      4\n    ],\n    Error: new Error()\n  };\n}\nvar item1 = myArray[0];\nvar item2 = myArray[1];\n\nvar myList = {\n  hd: 1,\n  tl: {\n    hd: 2,\n    tl: {\n      hd: 3,\n      tl: /* [] */0\n    }\n  }\n};\n// ...\n```\n\n----------------------------------------\n\nTITLE: Creating a new ReScript project with yarn\nDESCRIPTION: Command to create a new ReScript project using the create-rescript-app generator with yarn.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/installation.mdx#2025-04-18_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nyarn create rescript-app\n```\n\n----------------------------------------\n\nTITLE: Using Abstract Type Converters for Safer Interop\nDESCRIPTION: Example usage of abstract type converters with external JS values, showing how they provide type safety when working with external JS code.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/generate-converters-accessors.mdx#2025-04-18_snippet_6\n\nLANGUAGE: ReScript\nCODE:\n```\n@deriving({jsConverter: newType})\ntype fruit =\n  | Apple\n  | @as(100) Kiwi\n  | Watermelon\n\nlet opaqueValue = fruitToJs(Apple)\n\n@module(\"myJSFruits\") external jsKiwi: abs_fruit = \"iSwearThisIsAKiwi\"\nlet kiwi = fruitFromJs(jsKiwi)\n\nlet error = fruitFromJs(100) /* nope, can't take a random int */\n```\n\n----------------------------------------\n\nTITLE: For Loop Structure in ReScript\nDESCRIPTION: Shows the basic structure of a for loop in ReScript, which iterates from a starting value up to and including the ending value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/control-flow.mdx#2025-04-18_snippet_4\n\nLANGUAGE: re\nCODE:\n```\nfor (i in startValueInclusive to endValueInclusive) {\n  Js.log(i);\n};\n```\n\nLANGUAGE: ml\nCODE:\n```\nfor i = startValueInclusive to endValueInclusive do\n  Js.log i\ndone\n```\n\nLANGUAGE: js\nCODE:\n```\nfor(var i = startValueInclusive; i <= endValueInclusive; ++i){\n  console.log(i);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing ReScript Project\nDESCRIPTION: Command to initialize a new ReScript project with default template.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/build-overview.mdx#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nbsb -init my-directory-name\n```\n\n----------------------------------------\n\nTITLE: Declaring a Promise Type in ReScript Interface\nDESCRIPTION: Example of declaring a function that returns a Promise in a ReScript interface file (.resi). The example shows a function that fetches a user by ID and returns a promise containing a user object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/promise.mdx#2025-04-18_snippet_0\n\nLANGUAGE: resi\nCODE:\n```\n// User.resi file\n\ntype user = {name: string}\n\nlet fetchUser: string => promise<user>\n```\n\n----------------------------------------\n\nTITLE: Using @uncurry Attribute for Simplified Function Arguments in ReScript\nDESCRIPTION: Shows how to use the @uncurry attribute with external bindings to allow users to write normal function expressions without the uncurrying dot syntax at call sites, while still properly interfacing with JavaScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/bind-to-js-function.mdx#2025-04-18_snippet_12\n\nLANGUAGE: rescript\nCODE:\n```\n@send external map: (array<'a>, @uncurry ('a => 'b)) => array<'b> = \"map\"\nmap([1, 2, 3], x => x + 1)\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Array Pattern Matching in ReScript\nDESCRIPTION: Demonstrates pattern matching on arrays with different cases for empty, single element, and multiple elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_12\n\nLANGUAGE: rescript\nCODE:\n```\nlet students = [\"Jane\", \"Harvey\", \"Patrick\"]\nswitch students {\n| [] => Js.log(\"There are no students\")\n| [student1] =>\n  Js.log(\"There's a single student here: \" ++ student1)\n| manyStudents =>\n  Js.log2(\"The students are: \", manyStudents)\n}\n```\n\n----------------------------------------\n\nTITLE: Type Inference with Polymorphic Variants in ReScript\nDESCRIPTION: Shows how polymorphic variant values have their types inferred rather than being constrained by scope. This allows using constructors that weren't defined in a type without errors.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/polymorphic-variant.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\ntype color = [#red | #green | #blue]\n\nlet render = myColor => {\n  switch myColor {\n  | #blue => Console.log(\"Hello blue!\")\n  | #green => Console.log(\"Hello green!\")\n  // works!\n  | #yellow => Console.log(\"Hello yellow!\")\n  }\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction render(myColor) {\n  if (myColor === \"yellow\") {\n    console.log(\"Hello yellow!\");\n  } else if (myColor === \"green\") {\n    console.log(\"Hello green!\");\n  } else {\n    console.log(\"Hello blue!\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Counter Example with Lazy Initialization in ReScript\nDESCRIPTION: A counter component implementation that uses React.useReducerWithMapState for lazy initialization. This example includes a Reset action to demonstrate resetting state to initial values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/hooks-reducer.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\n// Counter.res\n\ntype action = Inc | Dec | Reset(int)\ntype state = {count: int}\n\nlet init = initialCount => {\n  {count: initialCount}\n}\n\nlet reducer = (state, action) => {\n  switch action {\n  | Inc => {count: state.count + 1}\n  | Dec => {count: state.count - 1}\n  | Reset(count) => init(count)\n  }\n}\n\n@react.component\nlet make = (~initialCount: int) => {\n  let (state, dispatch) = React.useReducerWithMapState(\n    reducer,\n    initialCount,\n    init,\n  )\n\n  <>\n    {React.string(\"Count:\" ++ Belt.Int.toString(state.count))}\n    <button onClick={_ => dispatch(Dec)}> {React.string(\"-\")} </button>\n    <button onClick={_ => dispatch(Inc)}> {React.string(\"+\")} </button>\n  </>\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction init(initialCount) {\n  return {\n          count: initialCount\n        };\n}\n\nfunction reducer(state, action) {\n  if (typeof action === \"number\") {\n    if (action !== 0) {\n      return {\n              count: state.count - 1 | 0\n            };\n    } else {\n      return {\n              count: state.count + 1 | 0\n            };\n    }\n  } else {\n    return {\n            count: action._0\n          };\n  }\n}\n\nfunction Counter(Props) {\n  var initialCount = Props.initialCount;\n  var match = React.useReducer(reducer, initialCount, init);\n  var dispatch = match[1];\n  return React.createElement(React.Fragment, undefined, \"Count:\" + String(match[0].count), React.createElement(\"button\", {\n                  onClick: (function (param) {\n                      return Curry._1(dispatch, /* Dec */1);\n                    })\n                }, \"-\"), React.createElement(\"button\", {\n                  onClick: (function (param) {\n                      return Curry._1(dispatch, /* Inc */0);\n                    })\n                }, \"+\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Children in ReScript JSX Components\nDESCRIPTION: Explains how child elements are passed to components in ReScript JSX. Children are automatically wrapped in a list when passed to the children prop.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/jsx.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\n<MyComponent> child1 child2 </MyComponent>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nReact.createElement(MyComponent, { children: null }, child1, child2);\n```\n\nLANGUAGE: rescript\nCODE:\n```\nMyComponent.createElement(~children=list{child1, child2}, ())\n```\n\nLANGUAGE: javascript\nCODE:\n```\nReact.createElement(MyComponent.make, MyComponent.makeProps(null, undefined), child1, child2);\n```\n\n----------------------------------------\n\nTITLE: Defining a Scoped Polymorphic Type in ReScript\nDESCRIPTION: Example of defining a logger type with a scoped polymorphic function and binding to a JavaScript API that returns such a logger.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/scoped-polymorphic-types.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\ntype logger = { log: 'a. 'a => unit }\n\n@module(\"jsAPI\") external getLogger: unit => logger = \"getLogger\"\n```\n\n----------------------------------------\n\nTITLE: Creating Submodule Components in ReScript\nDESCRIPTION: This example shows how to create submodule components in ReScript. It defines a Button component with a nested Label component, demonstrating how to build complex UIs within a single file.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/components-and-props.mdx#2025-04-18_snippet_11\n\nLANGUAGE: ReScript\nCODE:\n```\n// src/Button.res\nmodule Label = {\n  @react.component\n  let make = (~title: string) => {\n    <div className=\"myLabel\"> {React.string(title)} </div>\n  }\n}\n\n@react.component\nlet make = (~children) => {\n  <div>\n    <Label title=\"Getting Started\" />\n    children\n  </div>\n}\n```\n\n----------------------------------------\n\nTITLE: ReScript URL Type Definition\nDESCRIPTION: Type definition for the URL record used by the ReScript React Router, specifying the structure for path, hash, and search parameters.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/router.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype url = {\n  path: list<string>,\n  hash: string,\n  search: string\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Basic Variants in ReScript\nDESCRIPTION: Demonstrates how to define a simple variant type 'myResponse' with three constructors and use it to create a value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/variant.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\ntype myResponse =\n  | Yes\n  | No\n  | PrettyMuch\n\nlet areYouCrushingIt = Yes\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar areYouCrushingIt = /* Yes */0;\n```\n\n----------------------------------------\n\nTITLE: Recursive Functions in ReScript\nDESCRIPTION: Demonstrates how to define a recursive function using the rec keyword. The example shows a non-terminating function that calls itself indefinitely.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/function.mdx#2025-04-18_snippet_14\n\nLANGUAGE: rescript\nCODE:\n```\nlet rec neverTerminate = () => neverTerminate()\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction neverTerminate(_param) {\n  while(true) {\n    _param = undefined;\n    continue ;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Field Accessors for Records in ReScript\nDESCRIPTION: Uses @deriving(accessors) on a record type to create accessor functions for its record field names, which can be used for functional operations like mapping over an array of records.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/generate-converters-accessors.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\n@deriving(accessors)\ntype pet = {name: string}\n\nlet pets = [{name: \"bob\"}, {name: \"bob2\"}]\n\npets\n ->Array.map(name)\n ->Array.joinWith(\"&\")\n ->Console.log\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction name(param) {\n  return param.name;\n}\n\nvar pets = [\n  {\n    name: \"bob\"\n  },\n  {\n    name: \"bob2\"\n  }\n];\n\nconsole.log(Belt_Array.map(pets, name).join(\"&\"));\n```\n\n----------------------------------------\n\nTITLE: Pipe Syntax with Multiple Arguments in ReScript\nDESCRIPTION: Shows equivalent syntax using the pipe operator for a function with multiple arguments. The first argument is piped, and the remaining arguments are passed normally.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/pipe.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\none->a(two, three)\n```\n\nLANGUAGE: js\nCODE:\n```\na(one, two, three);\n```\n\n----------------------------------------\n\nTITLE: If-Else Expression in ReScript\nDESCRIPTION: An example of using if-else as an expression in ReScript. Unlike JavaScript, ReScript's if-else returns a value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/control-flow.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\nlet message = if isMorning {\n  \"Good morning!\"\n} else {\n  \"Hello!\"\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar message = isMorning ? \"Good morning!\" : \"Hello!\";\n```\n\n----------------------------------------\n\nTITLE: Filtering Map Entries in ReScript\nDESCRIPTION: Filters a map by keeping only the bindings that satisfy a given predicate function. This is the curried version of keepU.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map.mdx#2025-04-18_snippet_5\n\nLANGUAGE: reasonml\nCODE:\n```\nlet keep: (t('k, 'v, 'id), ('k, 'v) => bool) => t('k, 'v, 'id);\n```\n\n----------------------------------------\n\nTITLE: Accessing and Updating Array Elements in ReScript\nDESCRIPTION: Shows how to access array elements by index, update elements, and push new values to an array in ReScript. Demonstrates the JavaScript output for each operation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/array-and-list.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\nlet myArray = [\"hello\", \"world\", \"how are you\"]\n\nlet firstItem = myArray[0] // \"hello\"\n\nmyArray[0] = \"hey\" // now [\"hey\", \"world\", \"how are you\"]\n\nlet pushedValue = Js.Array2.push(myArray, \"bye\")\n```\n\nLANGUAGE: js\nCODE:\n```\nvar myArray = [\"hello\", \"world\", \"how are you\"];\n\nvar firstItem = myArray[0];\n\nmyArray[0] = \"hey\";\n\nvar pushedValue = myArray.push(\"bye\");\n```\n\n----------------------------------------\n\nTITLE: Labeled Arguments with Aliases in ReScript\nDESCRIPTION: Shows how to rename labeled arguments within the function body using the 'as' keyword. This allows for concise internal parameter names while maintaining clear external labels.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/function.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nlet drawCircle = (~radius as r, ~color as c) => {\n  setColor(c)\n  startAt(r, r)\n  // ...\n}\n\ndrawCircle(~radius=10, ~color=\"red\")\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction drawCircle(r, c) {\n  setColor(c);\n  return startAt(r, r);\n}\n\ndrawCircle(10, \"red\");\n```\n\n----------------------------------------\n\nTITLE: Removing Storage Item in ReScript\nDESCRIPTION: External binding to remove an item from storage by key.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/dom/storage2.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nexternal removeItem: (t, string) => unit = \"removeItem\"\n```\n\n----------------------------------------\n\nTITLE: Exception Pattern Matching in ReScript\nDESCRIPTION: Shows how to pattern match on exceptions in addition to normal values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_11\n\nLANGUAGE: rescript\nCODE:\n```\nswitch List.find(i => i === theItem, myItems) {\n| item => Js.log(item)\n| exception Not_found => Js.log(\"No such item found!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Constraining String Arguments with Polymorphic Variants\nDESCRIPTION: Demonstrates how to use polymorphic variants with @string annotation to constrain string arguments to a predefined set of values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/bind-to-js-function.mdx#2025-04-18_snippet_7\n\nLANGUAGE: res\nCODE:\n```\n@module(\"fs\")\nexternal readFileSync: (\n  ~name: string,\n  @string [\n    | #utf8\n    | @as(\"ascii\") #useAscii\n  ],\n) => string = \"readFileSync\"\n\nreadFileSync(~name=\"xx.txt\", #useAscii)\n```\n\nLANGUAGE: js\nCODE:\n```\nvar Fs = require(\"fs\");\nFs.readFileSync(\"xx.txt\", \"ascii\");\n```\n\n----------------------------------------\n\nTITLE: ReScript Promise.all4 Implementation\nDESCRIPTION: Function signature for combining four Promises into a tuple Promise\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/promise.mdx#2025-04-18_snippet_8\n\nLANGUAGE: res\nCODE:\n```\nlet all4: ((t<'a0>, t<'a1>, t<'a2>, t<'a3>)) => t<('a0, 'a1, 'a2, 'a3)>\n```\n\n----------------------------------------\n\nTITLE: Breaking Out of a While Loop Using Mutable Binding\nDESCRIPTION: Shows how to break out of a while loop in ReScript using a mutable reference since there's no built-in break keyword.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/control-flow.mdx#2025-04-18_snippet_9\n\nLANGUAGE: res\nCODE:\n```\nlet break = ref(false)\n\nwhile !break.contents {\n  if Js.Math.random() > 0.3 {\n    break := true\n  } else {\n    Js.log(\"Still running\")\n  }\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar $$break = {\n  contents: false\n};\n\nwhile(!$$break.contents) {\n  if (Math.random() > 0.3) {\n    $$break.contents = true;\n  } else {\n    console.log(\"Still running\");\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Function Type Annotations in Interface Files (.resi)\nDESCRIPTION: Shows how to annotate functions in ReScript interface files. Includes guidance on the difference between let and type declarations in interfaces.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/function.mdx#2025-04-18_snippet_26\n\nLANGUAGE: res\nCODE:\n```\nlet add: (int, int) => int\n```\n\n----------------------------------------\n\nTITLE: Using Pipe with First Argument in ReScript\nDESCRIPTION: Demonstrates using the pipe operator when the value should be passed as the first argument. This is the default behavior of the pipe operator in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/pipe.mdx#2025-04-18_snippet_9\n\nLANGUAGE: res\nCODE:\n```\nmakePerson(~age=47, ())\n  ->namePerson(\"Jane\")\n```\n\nLANGUAGE: js\nCODE:\n```\nnamePerson(makePerson(47), \"Jane\");\n```\n\n----------------------------------------\n\nTITLE: Handling Nullable Return Values with @return\nDESCRIPTION: Shows how to use the @return(nullable) annotation to automatically convert JavaScript null/undefined return values to ReScript option types. This example binds to the getElementById method which may return null.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/bind-to-js-function.mdx#2025-04-18_snippet_17\n\nLANGUAGE: res\nCODE:\n```\ntype element\ntype dom\n\n@send @return(nullable)\nexternal getElementById: (dom, string) => option<element> = \"getElementById\"\n\nlet test = dom => {\n  let elem = dom->(getElementById(\"haha\"))\n  switch (elem) {\n  | None => 1\n  | Some(_ui) => 2\n  }\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction test(dom) {\n  var elem = dom.getElementById(\"haha\");\n  if (elem == null) {\n    return 1;\n  } else {\n    console.log(elem);\n    return 2;\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Mapping Result Values in ReScript\nDESCRIPTION: Demonstrates the use of the map function to transform the value inside an Ok variant of a Result, leaving Error variants unchanged.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/result.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet f = (x) => sqrt(float_of_int(x));\n\nBelt.Result.map(Ok(64), f) == Ok(8.0);\n\nBelt.Result.map(Error(\"Invalid data\"), f) == Error(\"Invalid data\");\n```\n\n----------------------------------------\n\nTITLE: Creating JavaScript Objects with @obj External Binding\nDESCRIPTION: Shows how to use @obj annotation on external bindings to create functions that generate JavaScript objects with fields corresponding to function parameter labels. Supports optional fields.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/generate-converters-accessors.mdx#2025-04-18_snippet_23\n\nLANGUAGE: ReScript\nCODE:\n```\n@obj\nexternal route: (\n  ~\\\"type\": string,\n  ~path: string,\n  ~action: list<string> => unit,\n  ~options: {..}=?,\n  unit,\n) => _ = \"\"\n```\n\n----------------------------------------\n\nTITLE: Defining Uncurried Functions in ReScript\nDESCRIPTION: Shows how to define an uncurried function using the dot notation in the parameter list. The uncurried function compiles to a more efficient JavaScript function without currying overhead.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/function.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet add = (. x, y) => x + y\n\nadd(. 1, 2)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction add(x, y) {\n  return x + y | 0;\n}\n\nadd(1, 2);\n```\n\n----------------------------------------\n\nTITLE: Chaining Option Operations in ReScript\nDESCRIPTION: Function to chain option operations using a transformation function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/option.mdx#2025-04-18_snippet_7\n\nLANGUAGE: reason\nCODE:\n```\nlet andThen: ((. 'a) => option('b), option('a)) => option('b);\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet reciprocal = (. x) => (x == 0) ? None : Some(1.0 /. (float_of_int(x)));\nJs.Option.andThen(reciprocal, Some(5)) == Some(0.2);\nJs.Option.andThen(reciprocal, Some(0)) == None;\nJs.Option.andThen(reciprocal, None) == None;\n```\n\n----------------------------------------\n\nTITLE: Using Option Type with Conditional Logic in ReScript\nDESCRIPTION: Shows how to use the Option type to represent a potentially null value based on a condition.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/null-undefined-option.mdx#2025-04-18_snippet_1\n\nLANGUAGE: ReScript\nCODE:\n```\nlet licenseNumber =\n  if personHasACar {\n    Some(5)\n  } else {\n    None\n  }\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar licenseNumber = personHasACar ? 5 : undefined;\n```\n\n----------------------------------------\n\nTITLE: Implementing Array reduceRighti Method in ReScript\nDESCRIPTION: Function that reduces an array from right to left with access to index. Takes a reducer function, initial value, and array as parameters. The reducer receives accumulator, current value, and index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/array.mdx#2025-04-18_snippet_25\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduceRighti: (('b, 'a, int) => 'b, 'b, t<'a>) => 'b\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet sumOfEvens = (accumulator, item, index) =>\n  if mod(index, 2) == 0 {\n    accumulator + item\n  } else {\n    accumulator\n  }\n\nJs.Array.reduceRighti(sumOfEvens, 0, [2, 5, 1, 4, 3]) == 6\n```\n\n----------------------------------------\n\nTITLE: Scoped Polymorphic Type in ReScript\nDESCRIPTION: Implementation of a scoped polymorphic type in ReScript, allowing the logger to handle multiple types safely. The 'a. syntax enables true polymorphism within the scope of the log function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/language_scoped_polymorphic_type.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\ntype logger = { log: 'a. 'a => unit}\n\n@module(\"jsAPI\") external getLogger: unit => logger = \"getLogger\"\n\nlet myLogger = getLogger()\n\nmyLogger.log(\"Hello, ReScript!\")\nmyLogger.log(42) // Ok!\n```\n\n----------------------------------------\n\nTITLE: Creating Lazy Values in ReScript\nDESCRIPTION: This snippet demonstrates how to create a lazy value in ReScript by wrapping an expensive computation (reading a directory) with the lazy keyword. The computation is deferred until explicitly forced.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/lazy-values.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\n@module(\"node:fs\")\nexternal readdirSync: string => array<string> = \"readdirSync\"\n\n// Read the directory, only once\nlet expensiveFilesRead = lazy({\n  Console.log(\"Reading dir\")\n  readdirSync(\"./pages\")\n})\n```\n\nLANGUAGE: js\nCODE:\n```\nvar Fs = require(\"fs\");\n\nvar expensiveFilesRead = {\n  LAZY_DONE: false,\n  VAL: (function () {\n    console.log(\"Reading dir\");\n    return Fs.readdirSync(\"./pages\");\n  })\n};\n```\n\n----------------------------------------\n\nTITLE: Zipping Two Arrays with a Combining Function in ReScript\nDESCRIPTION: The zipBy function creates an array by applying a function to corresponding elements of two input arrays, stopping with the shorter array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/array.mdx#2025-04-18_snippet_24\n\nLANGUAGE: ReScript\nCODE:\n```\nlet zipBy: (array<'a>, array<'b>, ('a, 'b) => 'c) => array<'c>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nBelt.Array.zipBy([1, 2, 3], [4, 5], (a, b) => 2 * a + b) == [6, 9]\n```\n\n----------------------------------------\n\nTITLE: Applying a Functor in ReScript\nDESCRIPTION: Shows how to apply a functor to create a specific module implementation. In this example, a module for sets of integer pairs is created using the MakeSet functor.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/module.mdx#2025-04-18_snippet_13\n\nLANGUAGE: res\nCODE:\n```\nmodule IntPair = {\n  type t = (int, int)\n  let equal = ((x1: int, y1: int), (x2, y2)) => x1 == x2 && y1 == y2\n  let create = (x, y) => (x, y)\n}\n\n/* IntPair abides by the Comparable signature required by MakeSet */\nmodule SetOfIntPairs = MakeSet(IntPair)\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction equal(param, param$1) {\n  if (param[0] === param$1[0]) {\n    return param[1] === param$1[1];\n  } else {\n    return false;\n  }\n}\n\nfunction create(x, y) {\n  return [x, y];\n}\n\nvar IntPair = {\n  equal: equal,\n  create: create,\n};\n\nvar SetOfIntPairs = {\n  empty: /* [] */ 0,\n  add: add,\n};\n```\n\n----------------------------------------\n\nTITLE: Generating Accessor Functions for Variants in ReScript\nDESCRIPTION: This snippet demonstrates how to use @deriving(accessors) on a variant type to create accessor functions for its constructors. It shows the ReScript code and the corresponding JavaScript output.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/generate-converters-accessors.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\n@deriving(accessors)\ntype action =\n  | Click\n  | Submit(string)\n  | Cancel;\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction submit(param_0) {\n  return /* Submit */[param_0];\n}\n\nvar click = /* Click */0;\n\nvar cancel = /* Cancel */1;\n\nexports.click  = click;\nexports.submit = submit;\nexports.cancel = cancel;\n```\n\n----------------------------------------\n\nTITLE: Promise Catch Implementation\nDESCRIPTION: Handles errors in the promise chain by providing an error handler function\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/promise.mdx#2025-04-18_snippet_13\n\nLANGUAGE: rescript\nCODE:\n```\nlet catch: (error => t<'a>, t<'a>) => t<'a>\n```\n\n----------------------------------------\n\nTITLE: Polymorphic Function Binding in ReScript\nDESCRIPTION: Examples of binding to polymorphic JavaScript functions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/interop-cheatsheet.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\n@module(\"Drawing\") external drawCat: unit => unit = \"draw\"\n@module(\"Drawing\") external drawDog: (~giveName: string) => unit = \"draw\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Converting Option<bool> to bool Using Fully Flattened Pattern Matching\nDESCRIPTION: Further improving the optionBoolToBool function with fully flattened pattern matching, handling each specific case explicitly.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_16\n\nLANGUAGE: reason\nCODE:\n```\nlet optionBoolToBool = opt => {\n  switch (opt) {\n  | None => false\n  | Some(true) => true\n  | Some(false) => false\n  }\n};\n```\n\nLANGUAGE: ml\nCODE:\n```\nlet optionBoolToBool opt =\n  match opt with\n  | None -> false\n  | Some true -> true\n  | Some false -> false\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction optionBoolToBool(opt) {\n  if (opt !== undefined && opt) {\n    return true;\n  } else {\n    return false;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Slicing Arrays in ReScript\nDESCRIPTION: Creates a new array with a portion of the original array, specified by offset and length.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/array.mdx#2025-04-18_snippet_9\n\nLANGUAGE: ReScript\nCODE:\n```\nlet slice: (array<'a>, ~offset: int, ~len: int) => array<'a>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nBelt.Array.slice([10, 11, 12, 13, 14, 15, 16], ~offset=2, ~len=3) == [12, 13, 14]\n\nBelt.Array.slice([10, 11, 12, 13, 14, 15, 16], ~offset=-4, ~len=3) == [13, 14, 15]\n\nBelt.Array.slice([10, 11, 12, 13, 14, 15, 16], ~offset=4, ~len=9) == [14, 15, 16]\n```\n\n----------------------------------------\n\nTITLE: Converting Capitalized JSX Components in ReScript\nDESCRIPTION: Shows how capitalized JSX components are transformed into createElement function calls. Capitalized tags are assumed to be custom components.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/jsx.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\n<MyComponent name={\"ReScript\"} />\n```\n\nLANGUAGE: javascript\nCODE:\n```\nReact.createElement(MyComponent, {\n  name: \"ReScript\",\n});\n```\n\nLANGUAGE: rescript\nCODE:\n```\nMyComponent.createElement(~name=\"ReScript\", ~children=list{}, ())\n```\n\nLANGUAGE: javascript\nCODE:\n```\nReact.createElement(MyComponent, {\n  name: \"ReScript\",\n});\n```\n\n----------------------------------------\n\nTITLE: Importing JavaScript Modules in ReScript\nDESCRIPTION: Prototype syntax for a new lightweight JavaScript interop feature using @js decorator to import from Node.js modules. This syntax sugar aims to simplify the existing @bs.module syntax while maintaining zero-cost interop capabilities.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2020-11-17-editor-support-custom-operators-and-more.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\n@js\nimport {\n  dirname: string => string,\n  relative: (~from: string, ~to: string) => string\n} from \"path\"\n```\n\n----------------------------------------\n\nTITLE: Extension Point Example in ReScript\nDESCRIPTION: Demonstrates the use of extension points (starting with %) for raw JavaScript insertion.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/attribute.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\n%raw(\"var a = 1\")\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar a = 1\n```\n\n----------------------------------------\n\nTITLE: Accessing Object Properties in ReScript\nDESCRIPTION: Accessing an object property using bracket notation. This code retrieves the age property from the me object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/object.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\nlet age = me[\"age\"]\n```\n\nLANGUAGE: js\nCODE:\n```\nvar age = me[\"age\"];\n```\n\n----------------------------------------\n\nTITLE: Creating a Stateful Component with useEffect in ReScript\nDESCRIPTION: A ReScript component for a chat application that displays a friend's online status by subscribing to status changes via an API. The component uses React.useState and React.useEffect to manage state and handle subscriptions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/hooks-custom.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\n// FriendStatus.res\n\nmodule ChatAPI = {\n  // Imaginary globally available ChatAPI for demo purposes\n  type status = { isOnline: bool }\n  @val external subscribeToFriendStatus: (string, status => unit) => unit = \"subscribeToFriendStatus\"\n  @val external unsubscribeFromFriendStatus: (string, status => unit) => unit = \"unsubscribeFromFriendStatus\"\n}\n\ntype state = Offline | Loading | Online\n\n@react.component\nlet make = (~friendId: string) => {\n  let (state, setState) = React.useState(_ => Offline)\n\n  React.useEffect(() => {\n    let handleStatusChange = (status) => {\n      setState(_ => {\n        status.ChatAPI.isOnline ? Online : Offline\n      })\n    }\n\n    ChatAPI.subscribeToFriendStatus(friendId, handleStatusChange)\n    setState(_ => Loading)\n\n    let cleanup = () => {\n      ChatAPI.unsubscribeFromFriendStatus(friendId, handleStatusChange)\n    }\n\n    Some(cleanup)\n  }, [friendId])\n\n  let text = switch(state) {\n    | Offline => friendId ++ \" is offline\"\n    | Online => friendId ++ \" is online\"\n    | Loading => \"loading...\"\n  }\n\n  <div>\n  \t{React.string(text)}\n  </div>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Chat Recipient Picker with Custom Hook in ReScript\nDESCRIPTION: A more complex example that demonstrates passing information between hooks. This component allows selecting a friend from a dropdown and displays their online status using a colored circle, utilizing the FriendStatusHook to track status changes.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/hooks-custom.mdx#2025-04-18_snippet_5\n\nLANGUAGE: ReScript\nCODE:\n```\ntype friend = {id: string, name: string}\n\nlet friendList = [\n  {id: \"1\", name: \"Phoebe\"},\n  {id: \"2\", name: \"Rachel\"},\n  {id: \"3\", name: \"Ross\"},\n]\n\n@react.component\nlet make = () => {\n  let (recipientId, setRecipientId) = React.useState(_ => \"1\")\n  let recipientOnlineState = FriendStatusHook.useFriendStatus(recipientId)\n\n  let color = switch recipientOnlineState {\n  | FriendStatusHook.Offline => Circle.Red\n  | Online => Green\n  | Loading => Grey\n  }\n\n  let onChange = evt => {\n    let value = ReactEvent.Form.target(evt)[\"value\"]\n    setRecipientId(value)\n  }\n\n  let friends = Belt.Array.map(friendList, friend => {\n    <option key={friend.id} value={friend.id}>\n      {React.string(friend.name)}\n    </option>\n  })\n\n  <>\n    <Circle color />\n    <select value={recipientId} onChange>\n      {React.array(friends)}\n    </select>\n  </>\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar friendList = [\n  {\n    id: \"1\",\n    name: \"Phoebe\"\n  },\n  {\n    id: \"2\",\n    name: \"Rachel\"\n  },\n  {\n    id: \"3\",\n    name: \"Ross\"\n  }\n];\n\nfunction Playground(Props) {\n  var match = React.useState(function () {\n        return \"1\";\n      });\n  var setRecipientId = match[1];\n  var recipientId = match[0];\n  var recipientOnlineState = useFriendStatus(recipientId);\n  var color;\n  switch (recipientOnlineState) {\n    case /* Offline */0 :\n        color = /* Red */0;\n        break;\n    case /* Loading */1 :\n        color = /* Grey */2;\n        break;\n    case /* Online */2 :\n        color = /* Green */1;\n        break;\n\n  }\n  var onChange = function (evt) {\n    return Curry._1(setRecipientId, evt.target.value);\n  };\n  var friends = Belt_Array.map(friendList, (function (friend) {\n          return React.createElement(\"option\", {\n                      key: friend.id,\n                      value: friend.id\n                    }, friend.name);\n        }));\n  return React.createElement(React.Fragment, undefined, React.createElement(Playground$Circle, {\n                  color: color\n                }), React.createElement(\"select\", {\n                  value: recipientId,\n                  onChange: onChange\n                }, friends));\n}\n```\n\n----------------------------------------\n\nTITLE: Using open! to Ignore Shadow Warnings in ReScript\nDESCRIPTION: Shows how to use 'open!' to explicitly ignore shadowing warnings when opening a module.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/module.mdx#2025-04-18_snippet_4\n\nLANGUAGE: ReScript\nCODE:\n```\nlet map = (arr, value) => {\n  value\n}\n\n// opening Array would shadow our previously defined `map`\n// `open!` will explicitly turn off the automatic warning\nopen! Array\nlet arr = map([1,2,3], (a) => { a + 1})\n```\n\n----------------------------------------\n\nTITLE: Updating JavaScript Objects in ReScript\nDESCRIPTION: Shows how to update properties of JavaScript objects using @set attribute and external bindings.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/object.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\ntype student = {\n  @set \"age\": int,\n  @set \"name\": string,\n}\n@module(\"MyJSFile\") external student1: student = \"student1\"\n\nstudent1[\"name\"] = \"Mary\"\n```\n\n----------------------------------------\n\nTITLE: JavaScript Interop with NumberFormat\nDESCRIPTION: Shows how to bind to JavaScript's Intl.NumberFormat using polymorphic variants for type-safe locale selection\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/polymorphic-variant.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\ntype t\n\n@scope(\"Intl\") @val\nexternal makeNumberFormat: ([#\"de-DE\" | #\"en-GB\" | #\"en-US\"]) => t = \"NumberFormat\"\n\nlet intl = makeNumberFormat(#\"de-DE\")\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar intl = Intl.NumberFormat(\"de-DE\");\n```\n\n----------------------------------------\n\nTITLE: Tuple Type Annotations in ReScript\nDESCRIPTION: Shows how to use tuple types in type annotations and create type aliases for tuples. This example demonstrates the syntax for tuple type annotations and their JavaScript output.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/tuple.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\nlet ageAndName: (int, string) = (24, \"Lil' ReScript\")\n// a tuple type alias\ntype coord3d = (float, float, float)\nlet my3dCoordinates: coord3d = (20.0, 30.5, 100.0)\n```\n\nLANGUAGE: js\nCODE:\n```\nvar ageAndName = [24, \"Lil' ReScript\"];\nvar my3dCoordinates = [20.0, 30.5, 100.0];\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Type Inference with Tuples in ReScript\nDESCRIPTION: Shows how ReScript can infer types for tuples without explicit annotations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/type.mdx#2025-04-18_snippet_5\n\nLANGUAGE: ReScript\nCODE:\n```\nlet buddy = (10, 20, 20)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar buddy = [10, 20, 20];\n```\n\n----------------------------------------\n\nTITLE: Executing Function on Array Elements with Index using forEachi in ReScript\nDESCRIPTION: Executes a provided function once for each array element, providing both the element and its index. Used for side effects like logging or DOM manipulation where the array index is needed.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/array-2.mdx#2025-04-18_snippet_20\n\nLANGUAGE: ReScript\nCODE:\n```\nlet forEachi: (t<'a>, ('a, int) => unit) => unit\n```\n\nLANGUAGE: ReScript\nCODE:\n```\n// display all elements in an array as a numbered list\nJs.Array2.forEachi([\"a\", \"b\", \"c\"], (item, index) => Js.log2(index + 1, item)) == ()\n```\n\n----------------------------------------\n\nTITLE: Rendering Uncapitalized DOM Elements in ReScript JSX\nDESCRIPTION: Shows how uncapitalized JSX tags (representing DOM elements) are transformed in ReScript. Uncapitalized tags are compiled to function calls with props and children.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/jsx.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\n<div onClick={handler}> child1 child2 </div>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nReact.createElement(\"div\", {\n  onClick: handler\n}, child1, child2);\n```\n\nLANGUAGE: rescript\nCODE:\n```\ndiv(~onClick=handler, ~children=list{child1, child2}, ())\n```\n\nLANGUAGE: javascript\nCODE:\n```\nReact.createElement(\"div\", {\n  onClick: handler\n}, child1, child2);\n```\n\n----------------------------------------\n\nTITLE: Using External Declarations with JavaScript DOM APIs\nDESCRIPTION: Demonstrates how to use external declarations for quick prototyping with browser DOM APIs. The example shows accessing methods, getting properties, and setting properties on the document object using a polymorphic type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/external.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\n// The type of document is just some random type 'a\n// that we won't bother to specify\n@val external document: 'a = \"document\"\n\n// call a method\ndocument[\"addEventListener\"](\"mouseup\", _event => {\n  Js.log(\"clicked!\")\n})\n\n// get a property\nlet loc = document[\"location\"]\n\n// set a property\ndocument[\"location\"][\"href\"] = \"rescript-lang.org\"\n```\n\nLANGUAGE: js\nCODE:\n```\ndocument.addEventListener(\"mouseup\", function(_event) {\n  console.log(\"clicked!\");\n});\n\nvar loc = document.location;\n\ndocument.location.href = \"rescript-lang.org\";\n```\n\n----------------------------------------\n\nTITLE: Binding to Polymorphic Functions with @unwrap\nDESCRIPTION: Shows how to bind to JavaScript functions with polymorphic arguments using polymorphic variants and the @unwrap annotation to handle different parameter types.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/bind-to-js-function.mdx#2025-04-18_snippet_6\n\nLANGUAGE: res\nCODE:\n```\n@val\nexternal padLeft: (\n  string,\n  @unwrap [\n    | #Str(string)\n    | #Int(int)\n  ])\n  => string = \"padLeft\"\npadLeft(\"Hello World\", #Int(4))\npadLeft(\"Hello World\", #Str(\"Message from ReScript: \"))\n```\n\nLANGUAGE: js\nCODE:\n```\npadLeft(\"Hello World\", 4);\npadLeft(\"Hello World\", \"Message from ReScript: \");\n```\n\n----------------------------------------\n\nTITLE: Extending DOM Node Types with Record Type Spread\nDESCRIPTION: Demonstrates how to use record type spread to extend built-in DOM types for integration with Framer Motion animation library.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2023-05-17-enhanced-ergonomics-for-record-types.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\ntype animate = {} // definition omitted for brevity\n\ntype divProps = {\n  // Note: JsxDOM.domProps is a built-in record type with all valid DOM node attributes\n  ...JsxDOM.domProps,\n  initial?: animate,\n  animate?: animate,\n  whileHover?: animate,\n  whileTap?: animate,\n}\n\nmodule Div = {\n  @module(\"framer-motion\") external make: divProps => Jsx.element = \"div\"\n}\n```\n\n----------------------------------------\n\nTITLE: Explicit Pattern Matching Instead of Catch-All (ReScript)\nDESCRIPTION: Demonstrates the preferred approach of listing all cases explicitly instead of using catch-all patterns, which improves code maintenance when adding new variants.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_12\n\nLANGUAGE: res\nCODE:\n```\nswitch myStatus {\n| Vacations(_) => Js.log(\"Have fun!\")\n| Sabbatical(_) | Sick | Present => Js.log(\"Ok.\")\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nif (typeof myStatus === \"number\" || myStatus.TAG) {\n  console.log(\"Ok.\");\n} else {\n  console.log(\"Have fun!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Using Belt.Option.getWithDefault in ReScript\nDESCRIPTION: Shows how to use getWithDefault to extract a value from an option or return a default value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/option.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nBelt.Option.getWithDefault(None, \"Banana\") /* Banana */\n\nBelt.Option.getWithDefault(Some(\"Apple\"), \"Banana\") /* Apple */\n```\n\n----------------------------------------\n\nTITLE: Nullable Type Utilities in ReScript\nDESCRIPTION: Demonstrates usage of Nullable module for handling null and undefined values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/interop-cheatsheet.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet jsNull = Nullable.null\nlet jsUndefined = Nullable.undefined\nlet result1: Nullable.t<string> = Nullable.make(\"hello\")\nlet result2: Nullable.t<int> = Nullable.fromOption(Some(10))\nlet result3: option<int> = Nullable.toOption(Nullable.make(10))\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Caml_option from \"./stdlib/caml_option.js\";\nimport * as Core__Nullable from \"./stdlib/core__Nullable.js\";\n\nvar result2 = Core__Nullable.fromOption(10);\n\nvar jsNull = null;\n\nvar jsUndefined;\n\nvar result1 = \"hello\";\n\nvar result3 = Caml_option.nullable_to_opt(10);\n```\n\n----------------------------------------\n\nTITLE: Stringifying ReScript values to JSON\nDESCRIPTION: Demonstrates how to convert ReScript values to JSON strings using Js.Json.stringifyAny. The example shows stringifying an array of strings.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/json.mdx#2025-04-18_snippet_1\n\nLANGUAGE: re\nCODE:\n```\nJs.log(Js.Json.stringifyAny([|\"Amy\", \"Joe\"|]));\n```\n\nLANGUAGE: ml\nCODE:\n```\nJs.log (Js.Json.stringifyAny [|\"Amy\"; \"Joe\"|])\n```\n\nLANGUAGE: js\nCODE:\n```\nconsole.log(JSON.stringify([\n  \"Amy\",\n  \"Joe\"\n]));\n```\n\n----------------------------------------\n\nTITLE: Destructuring Various Data Structures in ReScript\nDESCRIPTION: Shows how to destructure different data types including records, variants, arrays, and lists. This demonstrates ReScript's ability to extract specific parts from complex data structures.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\n// Record\ntype student = {name: string, age: int}\nlet student1 = {name: \"John\", age: 10}\nlet {name} = student1 // \"John\" assigned to `name`\n\n// Variant\ntype result =\n  | Success(string)\nlet myResult = Success(\"You did it!\")\nlet Success(message) = myResult // \"You did it!\" assigned to `message`\n```\n\nLANGUAGE: js\nCODE:\n```\nvar student1 = {\n  name: \"John\",\n  age: 10\n};\nvar name = \"John\";\n\nvar myResult = /* Success */{\n  _0: \"You did it!\"\n};\nvar message = \"You did it!\"\n\nvar myArray = [1, 2, 3];\nif (myArray.length !== 2) {\n  throw {\n    RE_EXN_ID: \"Match_failure\",\n    _1: [\n      \"playground.res\",\n      14,\n      4\n    ],\n    Error: new Error()\n  };\n}\nvar item1 = myArray[0];\nvar item2 = myArray[1];\n\nvar myList = {\n  hd: 1,\n  tl: {\n    hd: 2,\n    tl: {\n      hd: 3,\n      tl: /* [] */0\n    }\n  }\n};\n// ...\n```\n\n----------------------------------------\n\nTITLE: Generating Accessor Functions for Variants with @deriving in ReScript\nDESCRIPTION: Creates accessor functions for variant constructors. Variants with payloads generate functions, while payload-less constructors generate plain integers. The generated accessors are lowercase versions of the constructor names.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/generate-converters-accessors.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\n@deriving(accessors)\ntype action =\n  | Click\n  | Submit(string)\n  | Cancel;\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction submit(param_0) {\n  return /* Submit */[param_0];\n}\n\nvar click = /* Click */0;\n\nvar cancel = /* Cancel */1;\n\nexports.click  = click;\nexports.submit = submit;\nexports.cancel = cancel;\n```\n\n----------------------------------------\n\nTITLE: Iterating MutableQueue in ReScript\nDESCRIPTION: The 'forEach' function applies a function to each element of the queue in order, from least recently entered to most recently entered.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-queue.mdx#2025-04-18_snippet_17\n\nLANGUAGE: rescript\nCODE:\n```\nlet forEach: (t<'a>, 'a => unit) => unit\n```\n\n----------------------------------------\n\nTITLE: Enabling Uncurried Mode with @@uncurried Decorator in ReScript\nDESCRIPTION: Demonstrates how to enable uncurried mode for a single .res file by placing the @@uncurried decorator at the top of the file. This feature is available since ReScript version 11.0.0.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/decorator_uncurried.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\n@@uncurried\n```\n\n----------------------------------------\n\nTITLE: JavaScript Method Chaining External Bindings in ReScript\nDESCRIPTION: Defines external bindings to JavaScript array methods and a chainable request API using bs.send. These bindings enable ReScript to interact with JavaScript's method chaining pattern.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/pipe.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\n@bs.send external map: (array<'a>, 'a => 'b) => array<'b> = \"map\"\n@bs.send external filter: (array<'a>, 'a => bool) => array<'a> = \"filter\"\n\ntype request\n@bs.val external asyncRequest: unit => request = \"asyncRequest\"\n@bs.send external setWaitDuration: (request, int) => request = \"setWaitDuration\"\n@bs.send external send: request => unit = \"send\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: String Basics in ReScript\nDESCRIPTION: Demonstrates basic string declaration and multiline strings in ReScript with JavaScript output.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/primitive-types.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nlet greeting = \"Hello world!\"\nlet multilineGreeting = \"Hello\n world!\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar greeting = \"Hello world!\";\nvar multilineGreeting = \"Hello\\n world!\";\n```\n\n----------------------------------------\n\nTITLE: Mapping ReScript Record to JavaScript Array using @as Decorator\nDESCRIPTION: This example shows how to use the @as decorator with indices to map a ReScript record to a JavaScript array. The 'foo' and 'bar' fields are mapped to array indices 0 and 1 respectively.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/decorator_as.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\ntype t = {\n  @as(\"0\") foo: int,\n  @as(\"1\") bar: string,\n}\n\nlet value = {foo: 7, bar: \"baz\"}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar value = [\n  7,\n  \"baz\"\n];\n```\n\n----------------------------------------\n\nTITLE: Accessing Global Module Values\nDESCRIPTION: Demonstrates accessing values from global JavaScript modules using @val and @scope decorators.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/interop-cheatsheet.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\n@val @scope(\"Math\")\nexternal random: unit => float = \"random\"\n\nlet someNumber = random()\n\n@val @scope((\"window\", \"location\", \"ancestorOrigins\"))\nexternal length: int = \"length\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar someNumber = Math.random();\n```\n\n----------------------------------------\n\nTITLE: Record Type Inference Constraints\nDESCRIPTION: Shows the limitations of record type resolution in ReScript. The compiler infers one specific record type based on field names, which can lead to type errors when using records with similar structures.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/record.mdx#2025-04-18_snippet_8\n\nLANGUAGE: reason\nCODE:\n```\nlet kraken = {age: 9999, hasTentacles: true};\nlet me = {age: 5, name: \"Baby ReScript\"};\n\ngetAge(kraken);\ngetAge(me); // type error!\n```\n\nLANGUAGE: ml\nCODE:\n```\nlet kraken = {age = 9999; hasTentacles = true}\nlet me = {age = 5; name = \"Baby ReScript\"}\n\nlet () = getAge kraken\nlet () = getAge me (* type error! *)\n```\n\n----------------------------------------\n\nTITLE: Opening ReScript Core Globally\nDESCRIPTION: JSON configuration diff showing how to make ReScript Core available in the global scope\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/migrate-to-v11.mdx#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n {\n   \"bsc-flags\": [\n    \"-open RescriptCore\",\n   ]\n }\n```\n\n----------------------------------------\n\nTITLE: Basic Tuple Destructuring in ReScript\nDESCRIPTION: Demonstrates how to destructure a tuple to extract specific elements while ignoring others using underscore placeholders. The example extracts the first element of a 3-element tuple.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\nlet coordinates = (10, 20, 30)\nlet (x, _, _) = coordinates\nConsole.log(x) // 10\n```\n\nLANGUAGE: js\nCODE:\n```\nvar coordinates = [10, 20, 30];\nvar x = 10;\nconsole.log(10);\n```\n\n----------------------------------------\n\nTITLE: Creating a Lazy Value for Directory Reading in ReScript\nDESCRIPTION: Demonstrates how to create a lazy value that defers reading a directory until it's needed. The computation is wrapped in a lazy block and uses the readdirSync function from the node:fs module.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/lazy-values.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\n@module(\"node:fs\")\nexternal readdirSync: string => array<string> = \"readdirSync\"\n\n// Read the directory, only once\nlet expensiveFilesRead = lazy({\n  Console.log(\"Reading dir\")\n  readdirSync(\"./pages\")\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar Fs = require(\"fs\");\n\nvar expensiveFilesRead = {\n  LAZY_DONE: false,\n  VAL: (function () {\n    console.log(\"Reading dir\");\n    return Fs.readdirSync(\"./pages\");\n  })\n};\n```\n\n----------------------------------------\n\nTITLE: Multi-argument Function in ReScript\nDESCRIPTION: Shows how to declare and use a function with multiple arguments separated by commas.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/function.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet add = (x, y, z) => x + y + z\nadd(1, 2, 3) // 6\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction add(x, y, z) {\n  return (x + y | 0) + z | 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Final Typed ReScript Conversion\nDESCRIPTION: Complete ReScript conversion with proper type definitions and method bindings using external declarations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/converting-from-js.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\ntype school;\ntype student;\ntype payload = {\n  student: student\n};\n\n[@bs.module] external school: school = \"school\";\n[@bs.send] external getStudentById: (school, int) => student = \"getStudentById\";\n\nlet defaultId = 10;\n\nlet queryResult = (usePayload, payload) => {\n  if (usePayload) {\n    payload.student;\n  } else {\n    school->getStudentById(defaultId);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Variants in Separate Files\nDESCRIPTION: Example showing how to define a variant type in one file (Zoo.res) and use it in another file (Example.res) by either using a type annotation or explicitly referencing the constructor.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/variant.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\n// Zoo.res\ntype animal = Dog | Cat | Bird\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Using Tuples for Multiple Return Values in ReScript\nDESCRIPTION: Shows how tuples can be used to return multiple values from a function without much ceremony. This example demonstrates a function returning a tuple of coordinates.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/tuple.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nlet getCenterCoordinates = () => {\n  let x = doSomeOperationsHere()\n  let y = doSomeMoreOperationsHere()\n  (x, y)\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction getCenterCoordinates(param) {\n  var x = doSomeOperationsHere(undefined);\n  var y = doSomeMoreOperationsHere(undefined);\n  return [x, y];\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Belt.Set in ReScript\nDESCRIPTION: Shows how to iterate over a Belt.Set using the forEach function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/set.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rescript\nCODE:\n```\nlet s0 = Belt.Set.fromArray([5,2,3,5,6], ~id=module(IntCmp))\nlet acc = ref(list{})\ns0->Belt.Set.forEach(x => {\n  acc := Belt.List.add(acc.contents, x)\n})\nacc /* [6,5,3,2] */\n```\n\n----------------------------------------\n\nTITLE: React Context Migration\nDESCRIPTION: Example of migrating React Context implementation from v3 to v4\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/migrate-react.mdx#2025-04-18_snippet_6\n\nLANGUAGE: res\nCODE:\n```\nmodule Context = {\n  let context = React.createContext(() => ())\n\n  module Provider = {\n    let make = React.Context.provider(context)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Index of an Element in Array in ReasonML\nDESCRIPTION: The findIndex function returns the index of the first element in the array that satisfies the provided testing function. It returns -1 if no elements satisfy the function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array.mdx#2025-04-18_snippet_20\n\nLANGUAGE: ReasonML\nCODE:\n```\nlet findIndex: ('a => bool, t<'a>) => int\n```\n\nLANGUAGE: ReasonML\nCODE:\n```\nJs.Array.findIndex(x => x < 0, [33, 22, -55, 77, -44]) == 2\nJs.Array.findIndex(x => x < 0, [33, 22, 55, 77, 44]) == -1\n```\n\n----------------------------------------\n\nTITLE: Referencing Submodule Components in ReScript\nDESCRIPTION: Demonstrates how to use components defined as submodules, either by using the fully qualified module name or by creating a module alias to simplify access.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/components-and-props.mdx#2025-04-18_snippet_12\n\nLANGUAGE: res\nCODE:\n```\nmodule Label = Button.Label\n\nlet content = <Label title=\"Test\"/>\n```\n\n----------------------------------------\n\nTITLE: Listing Reserved Keywords in ReScript\nDESCRIPTION: This code block lists all the reserved keywords in ReScript, including those that are commented out. Some keywords are reserved purely for backward compatibility.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/reserved-keywords.mdx#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `and`\n- `as`\n- `assert`\n\n\n<!-- - `begin` -->\n\n\n<!-- - `class` -->\n- `constraint`\n\n\n<!-- - `do` -->\n<!-- - `done` -->\n\n\n- `else`\n<!-- - `end` -->\n<!-- - `esfun` -->\n- `exception`\n- `external`\n\n\n- `false`\n- `for`\n<!-- - `fun` -->\n<!-- - `function` -->\n<!-- - `functor` -->\n\n\n- `if`\n- `in`\n- `include`\n<!-- - `inherit` -->\n<!-- - `initializer` -->\n\n\n- `lazy`\n- `let`\n\n\n- `module`\n- `mutable`\n\n\n<!-- - `new` -->\n<!-- - `nonrec` -->\n\n\n<!-- - `object` -->\n- `of`\n- `open`\n<!-- - `or` -->\n\n\n<!-- - `pri` -->\n<!-- - `pub` -->\n\n\n- `rec`\n\n\n<!-- - `sig` -->\n<!-- - `struct` -->\n- `switch`\n\n\n<!-- - `then` -->\n- `true`\n- `try`\n- `type`\n\n\n<!-- - `val` -->\n<!-- - `virtual` -->\n\n\n- `when`\n- `while`\n- `with`\n```\n\n----------------------------------------\n\nTITLE: Defining External Promise Functions in ReScript\nDESCRIPTION: External bindings for JavaScript promise-based functions that will be used in the examples. These are fictional API functions used to demonstrate async/await usage.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/async-await.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\n@val external fetchUserMail: string => promise<string> = \"GlobalAPI.fetchUserMail\"\n@val external sendAnalytics: string => promise<unit> = \"GlobalAPI.sendAnalytics\"\n```\n\n----------------------------------------\n\nTITLE: Private Let Bindings with %%private Annotation in ReScript\nDESCRIPTION: Shows how to use the %%private annotation to mark fields as private directly within module definitions. This feature was introduced in ReScript 7.2 and provides a more convenient way to hide values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/let-binding.mdx#2025-04-18_snippet_7\n\nLANGUAGE: res\nCODE:\n```\nmodule A = {\n  %%private(let a = 3)\n  let b = 4\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Patterns for Sequential Calculations in ReScript\nDESCRIPTION: Shows a pattern for performing sequential calculations by creating new bindings for each step, rather than mutating a single variable.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/let-binding.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\nlet result1 = 0\nlet result2 = calculate(result1)\nlet result3 = calculateSomeMore(result2)\n```\n\nLANGUAGE: js\nCODE:\n```\nvar result1 = 0;\nvar result2 = calculate(0);\nvar result3 = calculateSomeMore(result2);\n```\n\n----------------------------------------\n\nTITLE: Uncurrying Functions in ReScript External Bindings\nDESCRIPTION: Demonstrates how to use the uncurrying annotation (@bs) to guarantee full application of a function without intermediate currying steps. This is useful when interfacing with JavaScript APIs that may mess with context or use function binding.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/bind-to-js-function.mdx#2025-04-18_snippet_9\n\nLANGUAGE: reason\nCODE:\n```\ntype timerId;\n[@bs.val] external setTimeout: ((. unit) => unit, int) => timerId = \"setTimeout\";\n\nlet id = setTimeout((.) => Js.log(\"hello\"), 1000);\n```\n\nLANGUAGE: ocaml\nCODE:\n```\ntype timerId\nexternal setTimeout: ((unit -> unit) [@bs]) -> int -> timerId = \"setTimeout\" [@@bs.val]\n\nlet id = setTimeout ((fun () -> Js.log \"hello\") [@bs]) 1000\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar id = setTimeout(function () {\n  console.log(\"hello\");\n}, 1000);\n```\n\n----------------------------------------\n\nTITLE: Using Import Attributes in ReScript\nDESCRIPTION: Example of using import attributes in ReScript to import JSON files with specific configurations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/import-from-export-to-js.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\n@module({from: \"./myJson.json\", with: {type_: \"json\", \\\"some-exotic-identifier\": \"someValue\"}})\nexternal myJson: JSON.t = \"default\"\n\nConsole.log(myJson)\n```\n\n----------------------------------------\n\nTITLE: Invalid_argument Exception Usage in ReScript\nDESCRIPTION: Shows how to use the Invalid_argument exception for argument validation. Example demonstrates division validation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/exception.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet divide = (a, b) =>\n  if b == 0 {\n    raise(Invalid_argument(\"Denominator is zero\"))\n  } else {\n    a / b\n  }\n\n// catch error\ntry divide(2, 0)->Console.log catch {\n| Invalid_argument(msg) => Console.log(msg) // Denominator is zero\n}\n```\n\n----------------------------------------\n\nTITLE: Using Tuples for Multiple Return Values in ReScript\nDESCRIPTION: Demonstrates how to use tuples to return multiple values from a function in ReScript. This is a common use case for tuples in functional programming.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/tuple.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reason\nCODE:\n```\nlet getCenterCoordinates = () => {\n  let x = doSomeOperationsHere();\n  let y = doSomeMoreOperationsHere();\n  (x, y)\n};\n```\n\nLANGUAGE: ml\nCODE:\n```\nlet getCenterCoordinates () =\n  let x = doSomeOperationsHere () in\n  let y = doSomeMoreOperationsHere () in\n  (x, y)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getCenterCoordinates(param) {\n  var x = doSomeOperationsHere(undefined);\n  var y = doSomeMoreOperationsHere(undefined);\n  return [x, y];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Objects in ReScript\nDESCRIPTION: Demonstrates object creation syntax in ReScript with type inference. The example creates an object with age and name properties.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/object.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet me = {\n  \"age\": 5,\n  \"name\": \"Big ReScript\"\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Variables from JavaScript to ReScript\nDESCRIPTION: Shows how to convert a JavaScript variable into a ReScript let-binding while maintaining the rest of the code as raw JavaScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/converting-from-js.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet defaultId = 10\n\n%%raw(`\nconst school = require('school');\n\nfunction queryResult(usePayload, payload) {\n  if (usePayload) {\n    return payload.student;\n  } else {\n    return school.getStudentById(defaultId);\n  }\n}\n`)\n```\n\n----------------------------------------\n\nTITLE: Composing Elements in ReScript JSX\nDESCRIPTION: Demonstrates how to compose multiple React elements into a more complex structure using JSX. Shows how to combine variable references within JSX expressions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/elements-and-jsx.mdx#2025-04-18_snippet_2\n\nLANGUAGE: ReScript\nCODE:\n```\nlet greeting = React.string(\"Hello \")\nlet name = React.string(\"Stranger\");\n\n\n// element is also of type React.element\nlet element = <div className=\"myElement\"> greeting name </div>\n```\n\n----------------------------------------\n\nTITLE: Configuring bsconfig.json for ReScript React\nDESCRIPTION: Configuration settings needed in bsconfig.json to enable React JSX support in ReScript. Specifies JSX version 4 in classic mode and adds @rescript/react as a dependency.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/installation.mdx#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsx\": { \"version\": 4, \"mode\": \"classic\" },\n  \"bs-dependencies\": [\"@rescript/react\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Binding to Global Module Methods in ReScript\nDESCRIPTION: Illustrates how to create bindings for methods in global modules like Math.random using the @scope attribute with @val external.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/bind-to-global-js-values.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\n@scope(\"Math\") @val external random: unit => float = \"random\"\nlet someNumber = random()\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar someNumber = Math.random();\n```\n\n----------------------------------------\n\nTITLE: Constraining JavaScript Function Arguments to Integers Using Polymorphic Variants in ReScript\nDESCRIPTION: Demonstrates how to use polymorphic variants with bs.int to constrain argument values to specific integers in a JavaScript function binding. This example binds to a testIntType function, mapping variant constructors to integer values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/bind-to-js-function.mdx#2025-04-18_snippet_6\n\nLANGUAGE: reason\nCODE:\n```\n[@bs.val]\nexternal testIntType: (\n  [@bs.int] [\n    | `onClosed\n    | [@bs.as 20] `onOpen\n    | `inBinary\n  ]\n) => int = \"testIntType\";\ntestIntType(`inBinary);\n```\n\nLANGUAGE: ocaml\nCODE:\n```\nexternal testIntType: (([`onClosed | `onOpen [@bs.as 20] | `inBinary]) [@bs.int]) ->\n  int = \"testIntType\" [@@bs.val]\n\nlet _ = testIntType `inBinary\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntestIntType(21);\n```\n\n----------------------------------------\n\nTITLE: Binary Search Usage Examples\nDESCRIPTION: Examples demonstrating the use of binarySearchBy function with different array inputs.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/sort-array.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\nBelt.SortArray.binarySearchBy([1, 2, 3, 4, 33, 35, 36], 33, Pervasives.compare) == 4\n\nlnot(Belt.SortArray.binarySearchBy([1, 3, 5, 7], 4, Pervasives.compare)) == 2\n```\n\n----------------------------------------\n\nTITLE: Enabling Uncurried Mode on a Per-File Basis\nDESCRIPTION: Shows how to enable uncurried mode for a specific file using a compiler directive.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2023-09-18-uncurried-mode.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\n@@uncurried\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching on Optional Record Fields in ReScript\nDESCRIPTION: Demonstrates pattern matching on optional record fields, including matching on the field directly and as part of the record structure.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/record.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\ntype person = {\n  age: int,\n  name?: string,\n}\n\nlet me = {\n  age: 123,\n  name: \"Hello\",\n}\n\nlet isRescript = switch me.name {\n| Some(\"ReScript\") => true\n| Some(_) | None => false\n}\n\nlet isRescript = switch me {\n| {name: \"ReScript\"} => true\n| _ => false\n}\n\nlet nameWasSet = switch me {\n| {name: ?None} => false\n| {name: ?Some(_)} => true\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar isRescript;\n\nisRescript = \"Hello\" === \"ReScript\" ? true : false;\n\nvar me = {\n  age: 123,\n  name: \"Hello\"\n};\n\nvar nameWasSet = true;\n\nvar me = {\n  age: 123,\n  name: \"Hello\"\n};\n```\n\n----------------------------------------\n\nTITLE: Record Type Coercion with Identical Fields\nDESCRIPTION: Demonstrates record type coercion between two types with identical fields. This allows treating a record of one type as another compatible type at the type level without runtime conversion.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/record.mdx#2025-04-18_snippet_15\n\nLANGUAGE: rescript\nCODE:\n```\ntype a = {\n  name: string,\n  age: int,\n}\n\ntype b = {\n  name: string,\n  age: int,\n}\n\nlet nameFromB = (b: b) => b.name\n\nlet a: a = {\n  name: \"Name\",\n  age: 35,\n}\n\nlet name = nameFromB(a :> b)\n```\n\n----------------------------------------\n\nTITLE: Inline Styling with ReactDOM.Style.make in ReScript\nDESCRIPTION: Example of using inline styles with ReactDOM.Style.make to apply CSS properties directly to DOM elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/styling.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\n<div style={ReactDOM.Style.make(~color=\"#444444\", ~fontSize=\"68px\", ())} />\n```\n\n----------------------------------------\n\nTITLE: Accessing Record Fields in ReScript\nDESCRIPTION: Record fields are accessed using standard dot notation, similar to JavaScript objects.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/record.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nlet name = me.name\n```\n\nLANGUAGE: js\nCODE:\n```\nvar name = \"Big ReScript\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Multiple Arrays with Same Keys in ReScript React\nDESCRIPTION: Illustrates that keys only need to be unique among siblings, showing how to render a sidebar and content using the same keys in different contexts.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/arrays-and-keys.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\ntype post = {id: string, title: string, content: string}\n\nmodule Blog = {\n  @react.component\n  let make = (~posts: array<post>) => {\n    let sidebar =\n      <ul>\n        {\n          Belt.Array.map(posts, (post) => {\n            <li key={post.id}>\n              {React.string(post.title)}\n            </li>\n          })->React.array\n        }\n      </ul>\n\n    let content = Belt.Array.map(posts, (post) => {\n        <div key={post.id}>\n          <h3>{React.string(post.title)}</h3>\n          <p>{React.string(post.content)}</p>\n        </div>\n    });\n      \n      <div>\n      {sidebar}\n      <hr />\n      {React.array(content)}\n    </div>\n  }\n}\n\nlet posts = [\n  {id: \"1\", title: \"Hello World\", content: \"Welcome to learning ReScript & React!\"},\n  {id: \"2\", title: \"Installation\", content: \"You can install reason-react from npm.\"}\n]\n\nlet blog = <Blog posts/>\n```\n\n----------------------------------------\n\nTITLE: Mapping Values in a Map in ReScript\nDESCRIPTION: Applies a function to all values in a map, creating a new map with the same keys and transformed values. This is the curried version of mapU.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map.mdx#2025-04-18_snippet_10\n\nLANGUAGE: reasonml\nCODE:\n```\nlet map: (t('k, 'v, 'id), 'v => 'v2) => t('k, 'v2, 'id);\n```\n\n----------------------------------------\n\nTITLE: Binding to JS Classes using @bs.new\nDESCRIPTION: Shows how to use the @bs.new annotation to create instances of JavaScript classes. It provides an example of creating a Date object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/bind-to-js-object.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reason\nCODE:\n```\ntype t;\n[@bs.new] external createDate: unit => t = \"Date\";\n\nlet date = createDate();\n```\n\nLANGUAGE: ocaml\nCODE:\n```\ntype t\nexternal createDate: unit -> t = \"Date\" [@@bs.new]\n\nlet date = createDate ()\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar date = new Date();\n```\n\n----------------------------------------\n\nTITLE: Joining Array Elements in ReScript\nDESCRIPTION: Demonstrates the use of joinWith to concatenate array elements into a string with a specified separator.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array.mdx#2025-04-18_snippet_10\n\nLANGUAGE: ReScript\nCODE:\n```\nJs.Array.joinWith(\"--\", [\"ant\", \"bee\", \"cat\"]) == \"ant--bee--cat\"\nJs.Array.joinWith(\"\", [\"door\", \"bell\"]) == \"doorbell\"\nJs.Array.joinWith(\"/\", [2020, 9, 4]) == \"2020/9/4\"\nJs.Array.joinWith(\";\", [2.5, 3.6, 3e-2]) == \"2.5;3.6;0.03\"\n```\n\n----------------------------------------\n\nTITLE: Assigning Object Properties in ReScript\nDESCRIPTION: The assign() function copies properties from a source object to a target object. It overwrites properties in the target if they have the same key as in the source. The function returns the modified target object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/obj.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet assign: ({..}, {..}) => {..}\n```\n\n----------------------------------------\n\nTITLE: Creating an Array in ReScript\nDESCRIPTION: Demonstrates how to create a simple array in ReScript, showing its JavaScript output. Arrays in ReScript must be homogeneous, meaning all items must have the same type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/array-and-list.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\nlet myArray = [\"hello\", \"world\", \"how are you\"]\n```\n\nLANGUAGE: js\nCODE:\n```\nvar myArray = [\"hello\", \"world\", \"how are you\"];\n```\n\n----------------------------------------\n\nTITLE: Variant Type Spreads in ReScript\nDESCRIPTION: Example of using type spreads to create new variant types based on existing ones. Type b includes all constructors from type a plus two additional ones (Four and Five).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/variant.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\ntype a = One | Two | Three\ntype b = | ...a | Four | Five\n```\n\n----------------------------------------\n\nTITLE: Array Modification Operations\nDESCRIPTION: Functions that modify arrays in-place, including copying, filling, and element manipulation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet arr = [100, 101, 102, 103, 104]\nJs.Array.copyWithin(~to_=2, arr) == [100, 101, 100, 101, 102]\narr == [100, 101, 100, 101, 102]\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet arr = [100, 101, 102, 103, 104]\nJs.Array.fillInPlace(99, arr) == [99, 99, 99, 99, 99]\narr == [99, 99, 99, 99, 99]\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet arr = [\"ant\", \"bee\", \"cat\"]\nJs.Array.reverseInPlace(arr) == [\"cat\", \"bee\", \"ant\"]\narr == [\"cat\", \"bee\", \"ant\"]\n```\n\n----------------------------------------\n\nTITLE: String Concatenation in ReScript\nDESCRIPTION: Shows string concatenation using the ++ operator in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/primitive-types.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet greetings = \"Hello \" ++ \"world!\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar greetings = \"Hello world!\";\n```\n\n----------------------------------------\n\nTITLE: Defining Recursive Types in ReScript\nDESCRIPTION: Shows how to define a recursive type in ReScript using the 'rec' keyword.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/type.mdx#2025-04-18_snippet_8\n\nLANGUAGE: ReScript\nCODE:\n```\ntype rec person = {\n  name: string,\n  friends: array<person>\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Alternative Pattern Matching with Explicit Polymorphic Variant Constructors\nDESCRIPTION: Shows the more verbose alternative to the spread syntax in pattern matching, where each constructor is listed explicitly in the match cases.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/polymorphic-variant.mdx#2025-04-18_snippet_8\n\nLANGUAGE: res\nCODE:\n```\nswitch #Papayawhip {\n  | #Sapphire | #Neon | #Navy => Js.log(\"This is a blue color\")\n  | #Ruby | #Redwood | #Rust => Js.log(\"This is a red color\")\n  | other => Js.log2(\"Other color than red and blue: \", other)\n}\n```\n\n----------------------------------------\n\nTITLE: Blog Component with Nested Arrays\nDESCRIPTION: Demonstrates using the same keys in different arrays within a component. Shows how keys only need to be unique among siblings.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/arrays-and-keys.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\ntype post = {id: string, title: string, content: string}\n\nmodule Blog = {\n  @react.component\n  let make = (~posts: array<post>) => {\n    let sidebar =\n      <ul>\n        {Array.map(posts, post => {\n          <li key={post.id}> {React.string(post.title)} </li>\n        })->React.array}\n      </ul>\n\n    let content = Array.map(posts, post => {\n      <div key={post.id}>\n        <h3> {React.string(post.title)} </h3>\n        <p> {React.string(post.content)} </p>\n      </div>\n    })\n\n    <div>\n      {sidebar}\n      <hr />\n      {React.array(content)}\n    </div>\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding expression-level JavaScript in ReScript with %raw\nDESCRIPTION: This snippet shows how to embed raw JavaScript at the expression level using the [%raw] syntax. It creates a ReScript variable 'add' that holds a JavaScript function, which can then be called from ReScript code.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/embed-raw-javascript.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reason\nCODE:\n```\nlet add = [%raw {|\n  function(a, b) {\n    console.log(\"hello from raw JavaScript!\");\n    return a + b\n  }\n|}];\n\nJs.log(add(1, 2));\n```\n\nLANGUAGE: ml\nCODE:\n```\nlet add = [%raw {|\n  function(a, b) {\n    console.log(\"hello from raw JavaScript!\");\n    return a + b\n  }\n|}]\n\nlet () = Js.log (add 1 2)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar add = function(a, b) {\n  console.log(\"hello from raw JavaScript!\");\n  return a + b\n};\n\nconsole.log(add(1, 2));\n```\n\n----------------------------------------\n\nTITLE: ReScript With @inline Attribute\nDESCRIPTION: A ReScript example demonstrating how to use the @inline attribute to force a value to be inlined in the JavaScript output, which allows bundlers to perform dead code elimination.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/inlining-constants.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\n@val external process: 'a = \"process\"\n\n@inline\nlet mode = \"development\"\n\nif (process[\"env\"][\"mode\"] === mode) {\n  Js.log(\"Dev-only code here!\")\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nif (process.env.mode === \"development\") {\n  console.log(\"Dev-only code here!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Function Invocation in ReScript\nDESCRIPTION: Shows how to call a previously defined function in ReScript by passing an argument. The example calls the greet function with a string argument.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/function.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\ngreet(\"world!\") // \"Hello world!\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngreet(\"world!\");\n```\n\n----------------------------------------\n\nTITLE: Basic Array Operations with Pipe-Last Example\nDESCRIPTION: Demonstrates the difference between traditional function calling and pipe-last operator for array operations, showing how to calculate sum of squares of even numbers.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nlet isEven = x => mod(x, 2) == 0\nlet square = x => x * x\nlet result = {\n  open Js.Array\n  reduce(\"+\", 0, map(square, filter(isEven, [5, 2, 3, 4, 1])))\n}\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet isEven = x => mod(x, 2) == 0\nlet square = x => x * x\nlet result = {\n  open Js.Array\n  [5, 2, 3, 4, 1] |> filter(isEven) |> map(square) |> reduce(\"+\", 0)\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping List Elements in ReScript\nDESCRIPTION: The map function transforms each element in a list by applying a function to it, returning a new list with the results.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/list.mdx#2025-04-18_snippet_21\n\nLANGUAGE: rescript\nCODE:\n```\nlet map: (t<'a>, 'a => 'b) => t<'b>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlist{1, 2}->Belt.List.map(x => x + 1) // list{3, 4}\n```\n\n----------------------------------------\n\nTITLE: Combining Polymorphic Variant Types in ReScript\nDESCRIPTION: Shows how to combine polymorphic variant types to create a sum of all constructors. This allows for building more complex types from simpler ones.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/polymorphic-variant.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\ntype red = [#Ruby | #Redwood | #Rust]\ntype blue = [#Sapphire | #Neon | #Navy]\n\n// Contains all constructors of red and blue.\n// Also adds #Papayawhip\ntype color = [red | blue | #Papayawhip]\n\nlet myColor: color = #Ruby\n```\n\nLANGUAGE: js\nCODE:\n```\nvar myColor = \"Ruby\";\n```\n\n----------------------------------------\n\nTITLE: Importing TailwindCSS in ReScript React Application\nDESCRIPTION: Demonstrates how to import the main TailwindCSS stylesheet into a ReScript React application using raw JavaScript import syntax.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/styling.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\n// src/App.res\n\n%%raw(\"import './main.css'\")\n```\n\n----------------------------------------\n\nTITLE: Converting Option<bool> to bool in ReScript (Flattened Pattern Matching)\nDESCRIPTION: This snippet shows a flattened pattern matching approach for converting an Option<bool> to a bool. It eliminates nested logic and improves readability by handling all cases explicitly.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_17\n\nLANGUAGE: rescript\nCODE:\n```\nlet optionBoolToBool = opt => {\n  switch opt {\n  | None => false\n  | Some(true) => true\n  | Some(false) => false\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction optionBoolToBool(opt) {\n  if (opt !== undefined && opt) {\n    return true;\n  } else {\n    return false;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Binding to Values in Global Modules with @scope\nDESCRIPTION: This example shows how to bind to values inside global JavaScript modules using the @scope annotation. Here, we bind to Math.random() which returns a float value between 0 and 1.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/bind-to-global-js-values.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\n@scope(\"Math\") @val external random: unit => float = \"random\"\nlet someNumber = random()\n```\n\nLANGUAGE: js\nCODE:\n```\nvar someNumber = Math.random();\n```\n\n----------------------------------------\n\nTITLE: Binding to Global setTimeout and clearTimeout in ReScript\nDESCRIPTION: Demonstrates how to create external bindings for global JavaScript functions setTimeout and clearTimeout. It shows the basic syntax and type annotations for these bindings.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/bind-to-global-js-values.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\n[@bs.val] external setTimeout: (unit => unit, int) => float = \"setTimeout\";\n[@bs.val] external clearTimeout: float => unit = \"clearTimeout\";\n```\n\nLANGUAGE: ocaml\nCODE:\n```\nexternal setTimeout: (unit -> unit) -> int -> float = \"setTimeout\" [@@bs.val]\nexternal clearTimeout: float -> unit = \"clearTimeout\" [@@bs.val]\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Record Type and Creation in ReScript vs JavaScript\nDESCRIPTION: Demonstrates how ReScript records are defined and created, and their corresponding JavaScript output as objects.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/overview.mdx#2025-04-18_snippet_19\n\nLANGUAGE: rescript\nCODE:\n```\ntype t = {b: int}; let a = {b: 10}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar a = {b: 10}\n```\n\n----------------------------------------\n\nTITLE: Binding to CSS Modules in ReScript React\nDESCRIPTION: Creates bindings to import a CSS module as a JavaScript object, allowing access to class names defined in the module using object notation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/styling.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\n// {..} means we are handling a JS object with an unknown\n// set of attributes\n@module external styles: {..} = \"./styles.module.css\"\n\n// Use the obj[\"key\"] syntax to access any classname within our object\nlet app = <div className={styles[\"root\"]} />\n```\n\n----------------------------------------\n\nTITLE: Opening a Module in ReScript\nDESCRIPTION: Demonstrates how to use the 'open' keyword to bring a module's contents into scope, reducing the need for dot notation. This should be used sparingly to maintain clarity.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/module.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ReScript\nCODE:\n```\nopen School\nlet p = getProfession(person1)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar p = School.getProfession(School.person1);\n```\n\n----------------------------------------\n\nTITLE: Module Access and Nested Modules\nDESCRIPTION: Shows how to access module contents using dot notation and demonstrates nested module creation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/module.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nmodule MyModule = {\n  module NestedModule = {\n    let message = \"hello\"\n  }\n}\n\nlet message = MyModule.NestedModule.message\n```\n\n----------------------------------------\n\nTITLE: Array Representation in ReScript vs JavaScript\nDESCRIPTION: Shows how arrays in ReScript are represented in JavaScript. The output is identical.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/overview.mdx#2025-04-18_snippet_18\n\nLANGUAGE: rescript\nCODE:\n```\n[1, 2, 3]\n```\n\nLANGUAGE: javascript\nCODE:\n```\n[1, 2, 3]\n```\n\n----------------------------------------\n\nTITLE: Defining Option Type in ReScript\nDESCRIPTION: Basic definition of the option type in ReScript, which represents potentially nonexistent values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/null-undefined-option.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype option<'a> = None | Some('a)\n```\n\n----------------------------------------\n\nTITLE: Matching on Lists in ReScript\nDESCRIPTION: Shows pattern matching on lists in ReScript, including extracting the tail of a list. It demonstrates recursive processing of list elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_13\n\nLANGUAGE: ReScript\nCODE:\n```\nlet rec printStudents = (students) => {\n  switch students {\n  | list{} => () // done\n  | list{student} => Console.log(\"Last student: \" ++ student)\n  | list{student1, ...otherStudents} =>\n    Console.log(student1)\n    printStudents(otherStudents)\n  }\n}\nprintStudents(list{\"Jane\", \"Harvey\", \"Patrick\"})\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction printStudents(_students) {\n  while(true) {\n    var students = _students;\n    if (!students) {\n      return;\n    }\n    var otherStudents = students.tl;\n    var student = students.hd;\n    if (otherStudents) {\n      console.log(student);\n      _students = otherStudents;\n      continue;\n    }\n    console.log(\"Last student: \" + student);\n    return;\n  };\n}\n\nprintStudents({\n  hd: \"Jane\",\n  tl: {\n    hd: \"Harvey\",\n    tl: {\n      hd: \"Patrick\",\n      tl: /* [] */0\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Function Declaration in ReScript\nDESCRIPTION: Demonstrates the basic syntax for declaring a function in ReScript using the arrow notation. The function takes a name parameter and returns a greeting string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/function.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nlet greet = (name) => \"Hello \" ++ name\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction greet(name) {\n  return \"Hello \" + name;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Types in ReScript\nDESCRIPTION: Defines custom types for status, reportCard, and person, showcasing ReScript's type system and variant types.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_6\n\nLANGUAGE: reason\nCODE:\n```\ntype status = Vacations(int) | Sabbatical(int) | Sick | Present;\ntype reportCard = {passing: bool, gpa: float};\ntype person =\n  | Teacher({\n    name: string,\n    age: int,\n  })\n  | Student({\n    name: string,\n    status: status,\n    reportCard: reportCard,\n  });\n```\n\nLANGUAGE: ml\nCODE:\n```\ntype status = Vacations of int | Sabbatical of int | Sick | Present\ntype reportCard = {passing: bool; gpa: float}\ntype person =\n  | Teacher of {\n    name: string;\n    age: int;\n  }\n  | Student of {\n    name: string;\n    status: status;\n    reportCard: reportCard;\n  }\n```\n\n----------------------------------------\n\nTITLE: Defining Default Import in ES6 Module Format in ReScript\nDESCRIPTION: Example of defining a default import from an ES6 module in ReScript, Reason, and OCaml syntax, along with the resulting JavaScript output.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2020-09-25-release-8-3.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\n@module(\"hello\") external input: string => string = \"default\"\n\nlet a = input(\"hello\")\n```\n\nLANGUAGE: reason\nCODE:\n```\n[@module \"hello\"] external input: string => string = \"default\";\n\nlet a = input(\"hello\");\n```\n\nLANGUAGE: ocaml\nCODE:\n```\nexternal input : string -> string = \"default\" [@@module \"hello\"]\n\nlet a = input \"hello\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport Hello from \"hello\";\nvar a = Hello(\"hello\");\n```\n\n----------------------------------------\n\nTITLE: Array Modification Functions\nDESCRIPTION: Collection of functions that modify arrays in place, including copying, filling, and element manipulation operations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/array.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet arr = [100, 101, 102, 103, 104]\nJs.Array.copyWithin(~to_=2, arr) == [100, 101, 100, 101, 102]\narr == [100, 101, 100, 101, 102]\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet arr = [100, 101, 102, 103, 104]\nJs.Array.fillInPlace(99, arr) == [99, 99, 99, 99, 99]\narr == [99, 99, 99, 99, 99]\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet arr = [\"ant\", \"bee\", \"cat\"]\nJs.Array.push(\"dog\", arr) == 4\narr == [\"ant\", \"bee\", \"cat\", \"dog\"]\n```\n\n----------------------------------------\n\nTITLE: JavaScript Output of ThemeProvider Implementation\nDESCRIPTION: The compiled JavaScript output of the ReScript ThemeProvider implementation. It shows how the ReScript code is translated into JavaScript, including the context creation, provider component, and the use of useContext hook.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/hooks-context.mdx#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar context = React.createContext(\"light\");\n\nvar provider = context.Provider;\n\nfunction ThemeContext$Provider(Props) {\n  var value = Props.value;\n  var children = Props.children;\n  return React.createElement(provider, {\n              value: value,\n              children: children\n            });\n}\n\nvar Provider = {\n  provider: provider,\n  make: ThemeContext$Provider\n};\n\nvar ThemeContext = {\n  context: context,\n  Provider: Provider\n};\n\nfunction ThemedButton(Props) {\n  var theme = React.useContext(context);\n  var match;\n  switch (theme) {\n    case \"dark\" :\n        match = [\n          \"#ffffff\",\n          \"#222222\"\n        ];\n        break;\n    case \"light\" :\n        match = [\n          \"#000000\",\n          \"#eeeeee\"\n        ];\n        break;\n    default:\n      match = [\n        \"#000000\",\n        \"#eeeeee\"\n      ];\n  }\n  var style = {\n    backgroundColor: match[1],\n    color: match[0]\n  };\n  return React.createElement(\"button\", {\n              style: style\n            }, \"I am a styled button!\");\n}\n\nvar ThemedButton = {\n  make: ThemedButton\n};\n\nfunction Toolbar(Props) {\n  return React.createElement(\"div\", undefined, React.createElement(ThemedButton, {}));\n}\n\nvar Toolbar = {\n  make: Toolbar\n};\n\nfunction App(Props) {\n  return React.createElement(ThemeContext$Provider, {\n              value: \"dark\",\n              children: React.createElement(\"div\", undefined, React.createElement(Toolbar, {}))\n            });\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering List Elements with Index in ReScript\nDESCRIPTION: Returns a list of elements that satisfy a predicate function which takes both the element and its index as parameters.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/list.mdx#2025-04-18_snippet_10\n\nLANGUAGE: res\nCODE:\n```\nlet isEven = x => mod(x, 2) == 0\n\nBelt.List.filterWithIndex(list{1, 2, 3, 4}, (_x, index) => isEven(index))\n```\n\n----------------------------------------\n\nTITLE: Defining Mutable Abstract Types in ReScript\nDESCRIPTION: Demonstrates how to create an abstract type with a mutable field using @deriving(abstract). The age field is marked as mutable allowing for value updates after creation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/generate-converters-accessors.mdx#2025-04-18_snippet_14\n\nLANGUAGE: rescript\nCODE:\n```\n@deriving(abstract)\ntype person = {\n  name: string,\n  mutable age: int,\n  job: string,\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Array Elements with every in ReScript\nDESCRIPTION: Tests whether all elements in the array pass the test implemented by the provided function. Returns true if the predicate function is true for all items in the array or if the array is empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/array-2.mdx#2025-04-18_snippet_11\n\nLANGUAGE: ReScript\nCODE:\n```\nlet every: (t<'a>, 'a => bool) => bool\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet isEven = x => mod(x, 2) == 0\nJs.Array2.every([6, 22, 8, 4], isEven) == true\nJs.Array2.every([6, 22, 7, 4], isEven) == false\n```\n\n----------------------------------------\n\nTITLE: Using reducei Function in ReScript\nDESCRIPTION: The reducei function reduces an array from left to right by applying a function to each element with its index and an accumulator value. This example demonstrates calculating the sum of elements at even indices.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array-2.mdx#2025-04-18_snippet_36\n\nLANGUAGE: res\nCODE:\n```\nlet sumOfEvens = (accumulator, item, index) =>\n  if mod(index, 2) == 0 {\n    accumulator + item\n  } else {\n    accumulator\n  }\n\nJs.Array2.reducei([2, 5, 1, 4, 3], sumOfEvens, 0) == 6\n```\n\n----------------------------------------\n\nTITLE: Handling Children in JSX with ReScript\nDESCRIPTION: Demonstrates how children are handled in JSX with ReScript. Children are wrapped in a list by default.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/jsx.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ReScript\nCODE:\n```\n<MyComponent> child1 child2 </MyComponent>\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nReact.createElement(MyComponent.make, MyComponent.makeProps(null, undefined), child1, child2);\n```\n\nLANGUAGE: ReScript\nCODE:\n```\n@JSX MyComponent.createElement(~children=list{child1, child2}, ())\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nReact.createElement(MyComponent.make, MyComponent.makeProps(null, undefined), child1, child2);\n```\n\n----------------------------------------\n\nTITLE: Closed Polymorphic Variant Type Definition in ReScript\nDESCRIPTION: Demonstrates the simplest and most practical polymorphic variant definition using closed notation, which defines an exact set of allowed constructors similar to common variant types.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/polymorphic-variant.mdx#2025-04-18_snippet_12\n\nLANGUAGE: res\nCODE:\n```\ntype rgb = [ #Red | #Green | #Blue ]\n\nlet color: rgb = #Green\n```\n\n----------------------------------------\n\nTITLE: Using Data IDs as Keys in ReScript React\nDESCRIPTION: Shows how to use unique IDs from data objects as keys when rendering an array of todo items.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/arrays-and-keys.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\ntype todo = {id: string, text: string}\n\nlet todos = [\n  {id: \"todo1\", text: \"Todo 1\"},\n  {id: \"todo2\", text: \"Todo 2\"}\n]\n\nlet items = Belt.Array.map(todos, todo => {\n  <li key={todo.id}> {React.string(todo.text)} </li>\n})\n```\n\n----------------------------------------\n\nTITLE: Trimming Whitespace from String in ReScript\nDESCRIPTION: The trim function removes whitespace from both ends of a string, leaving internal whitespace intact.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/string-2.mdx#2025-04-18_snippet_33\n\nLANGUAGE: rescript\nCODE:\n```\nlet trim: t => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.String2.trim(\"   abc def   \") == \"abc def\"\nJs.String2.trim(\"\\n\\r\\t abc def \\n\\n\\t\\r \") == \"abc def\"\n```\n\n----------------------------------------\n\nTITLE: Ignoring Parts of a Value in Pattern Matching (ReScript)\nDESCRIPTION: Demonstrates how to use the wildcard pattern (_) to ignore parts of a matched value, focusing only on the variant type while ignoring the payload.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_10\n\nLANGUAGE: res\nCODE:\n```\nswitch person1 {\n| Teacher(_) => Js.log(\"Hi teacher\")\n| Student(_) => Js.log(\"Hey student\")\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nif (person1.TAG) {\n  console.log(\"Hey student\");\n} else {\n  console.log(\"Hi teacher\");\n}\n```\n\n----------------------------------------\n\nTITLE: Generating JS Integer Enum Converters for Variants in ReScript\nDESCRIPTION: Uses @deriving(jsConverter) on a variant type to create conversion functions between JavaScript integer enums and ReScript variants, mapping each variant constructor to an integer.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/generate-converters-accessors.mdx#2025-04-18_snippet_8\n\nLANGUAGE: res\nCODE:\n```\n@deriving(jsConverter)\ntype fruit =\n  | Apple\n  | Orange\n  | Kiwi\n  | Watermelon;\n```\n\nLANGUAGE: res\nCODE:\n```\nlet fruitToJs: fruit => int;\n\nlet fruitFromJs: int => option(fruit);\n```\n\n----------------------------------------\n\nTITLE: Custom Exception with Record in ReScript\nDESCRIPTION: Demonstrates creating a custom exception with an inline record type that can be caught from JavaScript code.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/exception.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nexception BadArgument({myMessage: string})\n\nlet myTest = () => {\n  raise(BadArgument({myMessage: \"Oops!\"}))\n}\n```\n\n----------------------------------------\n\nTITLE: String Declaration in ReScript\nDESCRIPTION: Examples of string declaration in ReScript using double quotes, including multiline strings. Shows syntax in Reason, ML, and resulting JavaScript output.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/primitive-types.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\nlet greeting = \"Hello world!\";\nlet multilineGreeting = \"Hello\n world!\";\n```\n\nLANGUAGE: ml\nCODE:\n```\nlet greeting = \"Hello world!\"\nlet multilineGreeting = \"Hello\n world!\";\n```\n\nLANGUAGE: js\nCODE:\n```\nvar greeting = \"Hello world!\";\nvar multilineGreeting = \"Hello\\n world!\";\n```\n\n----------------------------------------\n\nTITLE: Mapping Array Elements in ReasonML\nDESCRIPTION: The map function creates a new array with the results of calling a provided function on every element in the array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array.mdx#2025-04-18_snippet_24\n\nLANGUAGE: ReasonML\nCODE:\n```\nlet map: ('a => 'b, t<'a>) => t<'b>\n```\n\nLANGUAGE: ReasonML\nCODE:\n```\nJs.Array.map(x => x * x, [12, 4, 8]) == [144, 16, 64]\nJs.Array.map(Js.String.length, [\"animal\", \"vegetable\", \"mineral\"]) == [6, 9, 7]\n```\n\n----------------------------------------\n\nTITLE: Advanced Children Spread Examples in ReScript JSX\nDESCRIPTION: Demonstrates advanced usage of children spread in ReScript JSX, including passing functions and tuples as children.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/jsx.mdx#2025-04-18_snippet_5\n\nLANGUAGE: ReScript\nCODE:\n```\n<MyComponent> ...((theClassName) => <div className=theClassName />) </MyComponent>\n\n<MyForm> ...(\"Hello\", \"Submit\") </MyForm>\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nReact.createElement(\n  make,\n  makeProps(function (theClassName) {\n    return React.createElement(\"div\", {\n      className: theClassName,\n    });\n  }, undefined)\n);\n\nReact.createElement(MyForm.make, MyForm.makeProps([\"Hello\", \"Submit\"], undefined));\n```\n\n----------------------------------------\n\nTITLE: Nullable and Undefined Type Definitions in ReScript\nDESCRIPTION: Defines types for handling JavaScript's null, undefined, and nullable values in ReScript. These types allow for safe interoperation with JavaScript APIs that may return null or undefined values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\ntype null<+'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\ntype undefined<+'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\ntype nullable<+'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\ntype null_undefined<'a> = Js.nullable<'a>\n```\n\n----------------------------------------\n\nTITLE: Using @@directive Decorator in ReScript\nDESCRIPTION: This example demonstrates how to use the @@directive decorator to output 'use client' at the top of the generated JavaScript file. This is useful for React Server Components which require this directive.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/decorator_directive.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\n@@directive(\"'use client'\")\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Generated by ReScript, PLEASE EDIT WITH CARE\n'use client'\n```\n\n----------------------------------------\n\nTITLE: Converting JavaScript Function to ReScript with Raw Module Import\nDESCRIPTION: This snippet shows how to convert a JavaScript function to ReScript syntax while still maintaining the raw JavaScript module import, demonstrating the incremental conversion approach.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/converting-from-js.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\n%%raw(`\nconst school = require('school');\n`)\n\nlet defaultId = 10\n\nlet queryResult = (usePayload, payload) => {\n  if usePayload {\n    payload.student\n  } else {\n    school.getStudentById(defaultId)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating JavaScript Objects in ReScript\nDESCRIPTION: Object updates are only allowed for bindings from JavaScript. This example shows how to update a property using the @set attribute and assignment operator.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/object.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\ntype student = {\n  @set \"age\": int,\n  @set \"name\": string,\n}\n@module(\"MyJSFile\") external student1: student = \"student1\"\n\nstudent1[\"name\"] = \"Mary\"\n```\n\nLANGUAGE: js\nCODE:\n```\nvar MyJSFile = require(\"MyJSFile\");\nMyJSFile.student1.name = \"Mary\";\n```\n\n----------------------------------------\n\nTITLE: Defining and Using a Type with Multiple Type Parameters in ReScript\nDESCRIPTION: This example shows how to create a generic 'either' type with two type parameters and use it with concrete types.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/language_type_parameter.mdx#2025-04-18_snippet_1\n\nLANGUAGE: ReScript\nCODE:\n```\ntype either<'a, 'b> = This('a) | That('b)\n\nlet value1: either<int, string> = This(123)\nlet value2: either<int, string> = That(\"Hello\")\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar value1 = {\n  TAG: /* This */ 0,\n  _0: 123,\n};\n\nvar value2 = {\n  TAG: /* That */ 1,\n  _0: \"Hello\",\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Optional Fields in ReScript Records\nDESCRIPTION: Shows how to update optional fields in records, including setting to an optional value and unsetting.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/record.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\ntype person = {\n  age: int,\n  name?: string\n}\n\nlet me = {\n  age: 123,\n  name: \"Hello\"\n}\n\nlet maybeName = Some(\"My Name\")\n\nlet withoutName = {\n  ...me,\n  name: ?maybeName\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Caml_obj from \"./stdlib/caml_obj.js\";\n\nvar me = {\n  age: 123,\n  name: \"Hello\"\n};\n\nvar maybeName = \"My Name\";\n\nvar newrecord = Caml_obj.obj_dup(me);\n\nnewrecord.name = maybeName;\n\nvar withoutName = newrecord;\n```\n\n----------------------------------------\n\nTITLE: While Loop in ReScript\nDESCRIPTION: Demonstrates the syntax for a while loop that executes its body code block while its condition is true.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/control-flow.mdx#2025-04-18_snippet_8\n\nLANGUAGE: res\nCODE:\n```\nwhile testCondition {\n  // body here\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nwhile (testCondition) {\n  // body here\n}\n```\n\n----------------------------------------\n\nTITLE: Using @uncurry Decorator with Array Map Function in ReScript\nDESCRIPTION: This example shows how to bind to a JavaScript map function using the @uncurry decorator to treat the callback as an uncurried function. It demonstrates creating an external binding to array.map() where the callback function is marked with @uncurry, allowing the use of a regular function syntax while ensuring uncurried behavior in the compiled JavaScript output.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/decorator_uncurry.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\n@send\nexternal map: (array<'a>, @uncurry ('a => 'b)) => array<'b> = \"map\"\n\nlet result = map([1, 2, 3], x => x + 1)\n```\n\nLANGUAGE: js\nCODE:\n```\nvar result = [1, 2, 3].map(function (x) {\n  return (x + 1) | 0\n})\n```\n\n----------------------------------------\n\nTITLE: Performing Set Operations in ReScript\nDESCRIPTION: Demonstrates set operations like union, intersection, and difference using Belt.Set.String functions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/set-string.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet union: (t, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet s0 = Belt.Set.String.fromArray([\"apple\", \"banana\", \"orange\", \"carrot\"])\nlet s1 = Belt.Set.String.fromArray([\"apple\", \"banana\", \"orange\", \"strawberry\"])\nlet union = Belt.Set.String.union(s0, s1)\nunion->Belt.Set.String.toArray /* [\"apple\", \"banana\", \"carrot\", \"orange\", \"strawberry\"] */\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet intersect: (t, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet s0 = Belt.Set.String.fromArray([\"apple\", \"banana\", \"orange\", \"carrot\"])\nlet s1 = Belt.Set.String.fromArray([\"apple\", \"banana\", \"orange\", \"strawberry\"])\nlet intersect = Belt.Set.String.intersect(s0, s1)\nintersect->Belt.Set.String.toArray /* [\"apple\", \"banana\", \"orange\"] */\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet diff: (t, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet s0 = Belt.Set.String.fromArray([\"apple\", \"banana\", \"orange\", \"carrot\"])\nlet s1 = Belt.Set.String.fromArray([\"apple\", \"banana\", \"orange\", \"strawberry\"])\nBelt.Set.String.toArray(Belt.Set.String.diff(s0, s1)) /* [\"carrot\"] */\nBelt.Set.String.toArray(Belt.Set.String.diff(s1, s0)) /* [\"strawberry\"] */\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Comparable Modules for Belt Collections\nDESCRIPTION: Illustrates how to create custom comparable modules for Belt collections, using phantom types to ensure type safety when working with multiple collections.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nmodule Comparable1 =\n  Belt.Id.MakeComparable(\n    {\n      type t = (int, int)\n      let cmp = ((a0, a1), (b0, b1)) =>\n        switch Pervasives.compare(a0, b0) {\n        | 0 => Pervasives.compare(a1, b1)\n        | c => c\n        }\n    }\n  )\n\nlet mySet1 = Belt.Set.make(~id=module(Comparable1))\n\nmodule Comparable2 =\n  Belt.Id.MakeComparable(\n    {\n      type t = (int, int)\n      let cmp = ((a0, a1), (b0, b1)) =>\n        switch Pervasives.compare(a0, b0) {\n        | 0 => Pervasives.compare(a1, b1)\n        | c => c\n        }\n    }\n  )\n\nlet mySet2 = Belt.Set.make(~id=module(Comparable2))\n```\n\n----------------------------------------\n\nTITLE: Coercing Variants to Numeric Primitives in ReScript\nDESCRIPTION: Demonstrates how to coerce variants to numeric primitive values when constructors are represented as integers or floats at runtime. This example shows how to define variants with numeric representations using @as annotations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/variant.mdx#2025-04-18_snippet_20\n\nLANGUAGE: rescript\nCODE:\n```\ntype asInt = | @as(1) One | @as(2) Two | @as(3) Three\n\nlet oneInt: asInt = One\nlet toInt = (oneInt :> int)\n```\n\n----------------------------------------\n\nTITLE: Using Invalid Identifiers as Polymorphic Variant Constructors\nDESCRIPTION: Shows how to use invalid identifiers (like numbers or special characters) as polymorphic variant constructors by wrapping them in quotes. This is useful for JavaScript interoperability.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/polymorphic-variant.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\ntype numbers = [#\"1\" | #\"2\"]\nlet one = #\"1\"\nlet oneA = #\"1a\"\n```\n\nLANGUAGE: js\nCODE:\n```\nvar one = \"1\";\nvar oneA = \"1a\";\n```\n\n----------------------------------------\n\nTITLE: Labeled Arguments Function in ReScript\nDESCRIPTION: Shows how to use labeled arguments with the ~ symbol for better argument identification.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/function.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet drawCircle = (~radius as r, ~color as c) => {\n  setColor(c)\n  startAt(r, r)\n  // ...\n}\n\ndrawCircle(~radius=10, ~color=\"red\")\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction drawCircle(r, c) {\n  setColor(c);\n  return startAt(r, r);\n}\n\ndrawCircle(10, \"red\");\n```\n\n----------------------------------------\n\nTITLE: Binding to Global JavaScript Functions in ReScript\nDESCRIPTION: Demonstrates how to create bindings for global JavaScript functions like setTimeout and clearTimeout using the @val external syntax.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/bind-to-global-js-values.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\n@val external setTimeout: (unit => unit, int) => float = \"setTimeout\"\n@val external clearTimeout: float => unit = \"clearTimeout\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Executing Function on Array Elements with forEach in ReScript\nDESCRIPTION: Executes a provided function once for each array element. Used when you need to process each element in the array but don't need to return any value. The function and forEach both return unit.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/array-2.mdx#2025-04-18_snippet_19\n\nLANGUAGE: ReScript\nCODE:\n```\nlet forEach: (t<'a>, 'a => unit) => unit\n```\n\nLANGUAGE: ReScript\nCODE:\n```\n// display all elements in an array\nJs.Array2.forEach([\"a\", \"b\", \"c\"], x => Js.log(x)) == ()\n```\n\n----------------------------------------\n\nTITLE: Catching ReScript Exceptions in JavaScript Code\nDESCRIPTION: Shows how to catch exceptions thrown by ReScript functions in JavaScript code, demonstrating how to access custom exception fields and the stack trace from the Error object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/exception.mdx#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// after importing `myTest`...\ntry {\n  myTest()\n} catch (e) {\n  console.log(e.myMessage) // \"Oops!\"\n  console.log(e.Error.stack) // the stack trace\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Regular Expressions with %re Extension Point in ReScript\nDESCRIPTION: This example demonstrates how to create a JavaScript regular expression using the %re extension point in ReScript and then test it against a string. The pattern checks if a string starts with 'hello'.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/extension_regular_expression.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\nlet regex = %re(\"/^hello/\")\nlet result = regex->Re.test(\"hello world\")\n```\n\nLANGUAGE: js\nCODE:\n```\nvar regex = /^hello/;\nvar result = regex.test(\"hello world\");\n```\n\n----------------------------------------\n\nTITLE: Bitwise Operations with BigInt in ReScript\nDESCRIPTION: Shows how to use bitwise operations with BigInt values in ReScript, which compiles to native JavaScript BigInt operations where possible.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/primitive-types.mdx#2025-04-18_snippet_7\n\nLANGUAGE: res\nCODE:\n```\nopen! BigInt\n\nlet a = land(1n, 1n)\nlet b = lor(1n, 1n)\nlet c = lxor(1n, 1n)\nlet d = lnot(1n)\nlet e = lsl(1n, 1n)\nlet f = asr(1n, 1n)\n```\n\nLANGUAGE: js\nCODE:\n```\nvar Js_bigint = require(\"./stdlib/js_bigint.js\");\n\nvar a = 1n & 1n;\n\nvar b = 1n | 1n;\n\nvar c = 1n ^ 1n;\n\nvar d = Js_bigint.lnot(1n);\n\nvar e = (1n << 1n);\n\nvar f = (1n >> 1n);\n```\n\n----------------------------------------\n\nTITLE: Inlining Polymorphic Variant Types in ReScript Function Signatures\nDESCRIPTION: Demonstrates how polymorphic variant types can be inlined in function signatures without requiring a separate type definition. The example shows pattern matching on the inline type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/polymorphic-variant.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nlet render = (myColor: [#red | #green | #blue]) => {\n  switch myColor {\n  | #blue => Console.log(\"Hello blue!\")\n  | #red\n  | #green => Console.log(\"Hello other colors\")\n  }\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction render(myColor) {\n  if (myColor === \"green\" || myColor === \"red\") {\n    console.log(\"Hello other colors\");\n  } else {\n    console.log(\"Hello blue!\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Lazy Computations with Lazy.force in ReScript\nDESCRIPTION: Shows how to trigger a lazy computation using Lazy.force. The first call executes the computation and caches the result, while subsequent calls return the cached value without re-executing the computation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/lazy-values.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\n// First call. The computation happens\nJs.log(Lazy.force(expensiveFilesRead)) // logs \"Reading dir\" and the directory content\n\n// Second call. Will just return the already calculated result\nJs.log(Lazy.force(expensiveFilesRead)) // logs the directory content\n```\n\nLANGUAGE: js\nCODE:\n```\nconsole.log(CamlinternalLazy.force(expensiveFilesRead));\n\nconsole.log(CamlinternalLazy.force(expensiveFilesRead));\n```\n\n----------------------------------------\n\nTITLE: Combining three Promises with Promise.all3 in ReScript\nDESCRIPTION: Creates a promise that resolves when all three promises resolve, returning a tuple of results.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/promise.mdx#2025-04-18_snippet_7\n\nLANGUAGE: reason\nCODE:\n```\nlet all3: ((t('a0), t('a1), t('a2))) => t(('a0, 'a1, 'a2));\n```\n\n----------------------------------------\n\nTITLE: Using Local Open Scope in ReScript\nDESCRIPTION: Shows how to open a module in a local scope, making the module's contents visible only within that scope. This is a safer way to use 'open' as it limits the potential for naming conflicts.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/module.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\nlet p = {\n  open School\n  getProfession(person1)\n}\n/* School's content isn't visible here anymore */\n```\n\nLANGUAGE: js\nCODE:\n```\nvar p = School.getProfession(School.person1);\n```\n\n----------------------------------------\n\nTITLE: Transforming Uncapitalized JSX Tag in ReScript\nDESCRIPTION: Shows how an uncapitalized JSX tag (representing HTML elements) is transformed in ReScript. The JSX syntax is converted to a function call with props and children.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/jsx.mdx#2025-04-18_snippet_1\n\nLANGUAGE: ReScript\nCODE:\n```\n<div onClick={handler}> child1 child2 </div>\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nReact.createElement(\"div\", {\n  onClick: handler\n}, child1, child2);\n```\n\nLANGUAGE: ReScript\nCODE:\n```\n@JSX div(~onClick=handler, ~children=list{child1, child2}, ())\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nReact.createElement(\"div\", {\n  onClick: handler\n}, child1, child2);\n```\n\n----------------------------------------\n\nTITLE: ReScript String Interpolation\nDESCRIPTION: Demonstrates how ReScript string interpolation is converted to JavaScript string concatenation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/overview.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\n`Hello ${message}`\n```\n\nLANGUAGE: javascript\nCODE:\n```\n\"Hello \" + message\n```\n\n----------------------------------------\n\nTITLE: Combining Object Types in ReScript\nDESCRIPTION: Demonstrates how to spread one object type definition into another using the spread operator (...). This only works with object types, not object values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/object.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\ntype point2d = {\n  \"x\": float,\n  \"y\": float,\n}\ntype point3d = {\n  ...point2d,\n  \"z\": float,\n}\n\nlet myPoint: point3d = {\n  \"x\": 1.0,\n  \"y\": 2.0,\n  \"z\": 3.0,\n}\n```\n\n----------------------------------------\n\nTITLE: Using Pipe with Multiple Arguments in ReScript\nDESCRIPTION: Shows how the pipe operator works with functions that take multiple arguments. The first argument is piped while subsequent arguments are passed normally.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/pipe.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\na(one, two, three)\n```\n\nLANGUAGE: javascript\nCODE:\n```\na(one, two, three);\n```\n\nLANGUAGE: rescript\nCODE:\n```\none->a(two, three)\n```\n\nLANGUAGE: javascript\nCODE:\n```\na(one, two, three);\n```\n\n----------------------------------------\n\nTITLE: Adding ReScript Build Scripts to package.json\nDESCRIPTION: JSON snippet to add ReScript build and watch scripts to package.json. These scripts provide convenient commands for building and watching ReScript files in your project.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/installation.mdx#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  \"re:build\": \"bsb -make-world -clean-world\",\n  \"re:start\": \"bsb -make-world -clean-world -w\"\n}\n```\n\n----------------------------------------\n\nTITLE: Component with String Children in ReScript\nDESCRIPTION: Demonstrates how to create a component that specifically requires a string as its children prop. The type annotation enforces that only string content can be passed as children.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/components-and-props.mdx#2025-04-18_snippet_6\n\nLANGUAGE: res\nCODE:\n```\nmodule StringChildren = {\n  @react.component\n  let make = (~children: string) => {\n    <div>\n      {React.string(children)}\n    </div>\n  }\n}\n\n<StringChildren> \"My Child\" </StringChildren>\n\n// This will cause a type check error\n<StringChildren/>\n```\n\n----------------------------------------\n\nTITLE: Cloning React Elements in ReScript\nDESCRIPTION: Demonstrates how to clone an existing React element to modify its properties using React.cloneElement. This is useful for setting data attributes or working with existing JS libraries.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/elements-and-jsx.mdx#2025-04-18_snippet_10\n\nLANGUAGE: ReScript\nCODE:\n```\nlet original = <div className=\"hello\"/>\n\n// Will return a new React.element with className set to \"world\"\nReact.cloneElement(original, {\"className\": \"world\", \"data-name\": \"some name\"});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar original = React.createElement(\"div\", {\n      className: \"hello\"\n    });\n\nReact.cloneElement(original, {\n      className: \"world\",\n      \"data-name\": \"some name\"\n    });\n```\n\n----------------------------------------\n\nTITLE: Demonstrating @inline Attribute Usage in ReScript\nDESCRIPTION: This snippet shows how to use the @inline attribute to inline a value into its usage sites. It defines a 'mode' variable and demonstrates its inlining in the JavaScript output.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/attribute.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\n@inline\nlet mode = \"dev\"\n\nlet mode2 = mode\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar mode2 = \"dev\";\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Polymorphic Variants in ReScript\nDESCRIPTION: Demonstrates three different syntaxes for creating polymorphic variant constructors, including basic symbols, strings with special characters, and numbers\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/polymorphic-variant.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nlet myColor = #red\nlet myLabel = #\"aria-hidden\"\nlet myNumber = #7\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar myColor = \"red\";\nvar myLabel = \"aria-hidden\";\nvar myNumber = 7;\n```\n\n----------------------------------------\n\nTITLE: Concatenating Multiple Lists in ReScript\nDESCRIPTION: The concatMany function joins multiple lists together, returning a single list with all elements in order.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/list.mdx#2025-04-18_snippet_18\n\nLANGUAGE: rescript\nCODE:\n```\nlet concatMany: array<t<'a>> => t<'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nBelt.List.concatMany([list{1, 2, 3}, list{}, list{3}]) // list{1, 2, 3, 3}\n```\n\n----------------------------------------\n\nTITLE: Raising JavaScript Exceptions in ReScript\nDESCRIPTION: Demonstrates how to raise a JavaScript exception from ReScript code using the 'Exn.raiseError' function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/exception.mdx#2025-04-18_snippet_7\n\nLANGUAGE: ReScript\nCODE:\n```\nlet myTest = () => {\n  Exn.raiseError(\"Hello!\")\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar Js_exn = require(\"./stdlib/js_exn.js\");\n\nfunction myTest() {\n  return Js_exn.raiseError(\"Hello!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Catching ReScript Exceptions in JavaScript\nDESCRIPTION: Shows how to catch and handle a ReScript exception in JavaScript code. The example demonstrates accessing the exception's custom fields and the stack trace information.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/exception.mdx#2025-04-18_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n// after importing `myTest`...\ntry {\n  myTest()\n} catch (e) {\n  console.log(e.myMessage) // \"Oops!\"\n  console.log(e.Error.stack) // the stack trace\n}\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching with Lazy Values in ReScript\nDESCRIPTION: Examples of destructuring lazy values using pattern matching and tuple destructuring.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/lazy-values.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reason\nCODE:\n```\nlet lazy(word) = lazy(\"hello\");\n\n// Output: \"hello\"\nJs.log(word);\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet lazyValues = (lazy(\"hello\"), lazy(\"world\"));\nlet (lazy(word1), lazy(word2)) = lazyValues;\n\n// Output: \"hello world\"\nJs.log2(word1, word2);\nlet lazy(word) = lazy(\"hello\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Counter Object with @this Decorator in ReScript\nDESCRIPTION: Creates a counter object with value property and increment/decrement methods using the @this decorator to handle JavaScript this context. The example demonstrates external bindings and property access using ReScript's FFI system.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/decorator_this.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype counter\n\n// Function to create an empty object\n@new external create: unit => counter = \"Object\"\n\n// Functions that set and get a \"value\" property\n@set external setValue: (counter, int) => unit = \"value\"\n@get external getValue: counter => int = \"value\"\n\n// Functions that create \"increment\" and \"decrement\" function properties which have access to \"this\"\n@set external setIncrement: (counter, @this (counter, int) => unit) => unit = \"increment\"\n@set external setDecrement: (counter, @this (counter, int) => unit) => unit = \"decrement\"\n\n// Use the functions above to create a counter instance\nlet counter = create()\nsetValue(counter, 0)\nsetIncrement(counter, @this (me, amount) => me->setValue(me->getValue + amount))\nsetDecrement(counter, @this (me, amount) => me->setValue(me->getValue - amount))\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar counter = new Object()\n\ncounter.value = 0\n\ncounter.increment = function (amount) {\n  var me = this\n  me.value = (me.value + amount) | 0\n}\n\ncounter.decrement = function (amount) {\n  var me = this\n  me.value = (me.value - amount) | 0\n}\n```\n\n----------------------------------------\n\nTITLE: Importing a Complete JavaScript Module in ReScript (CommonJS)\nDESCRIPTION: Demonstrates how to import an entire JavaScript module by omitting the string argument to bs.module. This binds to the whole module rather than a specific export.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/import-from-export-to-js.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reason\nCODE:\n```\n[@bs.module] external leftPad: string => int => string = \"./leftPad\";\nlet paddedResult = leftPad(\"hi\", 5);\n```\n\nLANGUAGE: ocaml\nCODE:\n```\nexternal leftPad: string -> int -> string = \"./leftPad\" [@@bs.module]\nlet paddedResult = leftPad \"hi\" 5\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar LeftPad = require(\"./leftPad\");\nvar paddedResult = LeftPad(\"hi\", 5);\n```\n\n----------------------------------------\n\nTITLE: Type Duplication Without Parameters in ReScript\nDESCRIPTION: Illustrates the problem of type duplication that occurs when not using parameterized types, showing separate definitions for similar structures.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/type.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\n// this is a tuple of 3 items, explained next\ntype intCoordinates = (int, int, int)\ntype floatCoordinates = (float, float, float)\n\nlet a: intCoordinates = (10, 20, 20)\nlet b: floatCoordinates = (10.5, 20.5, 20.5)\n```\n\nLANGUAGE: js\nCODE:\n```\nvar a = [10, 20, 20];\nvar b = [10.5, 20.5, 20.5];\n```\n\n----------------------------------------\n\nTITLE: Using ReScript Array and Console Functions\nDESCRIPTION: ReScript code example demonstrating the use of Array.forEach and Console.log functions. This snippet shows how ReScript code looks before compilation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/build-external-stdlib.mdx#2025-04-18_snippet_2\n\nLANGUAGE: ReScript\nCODE:\n```\nArray.forEach([1, 2, 3], num => Console.log(num))\n```\n\n----------------------------------------\n\nTITLE: Array Initialization in ReScript\nDESCRIPTION: Demonstrates how to create a basic array in ReScript and its JavaScript output. Arrays in ReScript must be homogeneous (all items of same type).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/array-and-list.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nlet myArray = [\"hello\", \"world\", \"how are you\"]\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar myArray = [\"hello\", \"world\", \"how are you\"];\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Structural Type Checking with Polymorphic Variants\nDESCRIPTION: Shows how structural typing allows for interchangeable use of polymorphic variant values from different types as long as the constructors match structurally.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/polymorphic-variant.mdx#2025-04-18_snippet_12\n\nLANGUAGE: res\nCODE:\n```\ntype rgb = [#Red | #Green | #Blue]\n\nlet colors: array<rgb> = [#Red]\n\n// `other` is inferred as a type of array<[> #Green]>\nlet other = [#Green]\n\n// Because `other` is of type `array<[> Green]>`,\n// this will type check even though we didn't define\n// `other`to be of type rgb\nlet all = Belt.Array.concat(colors, other)\n```\n\n----------------------------------------\n\nTITLE: Basic Emotion CSS-in-JS Bindings for ReScript\nDESCRIPTION: Creates simple bindings to the Emotion CSS-in-JS library's core functions, allowing for use of the css, rawCss, keyframes, cx, and injectGlobal APIs.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/styling.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\n// src/Emotion.res\n\n@module(\"@emotion/css\") external css: {..} => string = \"css\"\n@module(\"@emotion/css\") external rawCss: string => string = \"css\"\n@module(\"@emotion/css\") external keyframes: {..} => string = \"css\"\n@module(\"@emotion/css\") external cx: array<string> => string = \"cx\"\n\n@module(\"@emotion/css\") external injectGlobal: string => unit = \"injectGlobal\"\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching with Extensible Variants in ReScript\nDESCRIPTION: Illustrates pattern matching on extensible variants using a switch expression. Shows how to handle specific constructors and the required default case for exhaustive matching.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/extensible-variant.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\nlet print = v =>\n  switch v {\n  | Point(x, y) => Console.log2(\"Point\", (x, y))\n  | Line(ax, ay, bx, by) => Console.log2(\"Line\", (ax, ay, bx, by))\n  | Other\n  | _ => Console.log(\"Other\")\n  }\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction print(v) {\n  if (v.RE_EXN_ID === Point) {\n    console.log(\"Point\", [v._1, v._2]);\n  } else if (v.RE_EXN_ID === Line) {\n    console.log(\"Line\", [v._1, v._2, v._3, v._4]);\n  } else {\n    console.log(\"Other\");\n  } \n}\n```\n\n----------------------------------------\n\nTITLE: Function Returning Multiple Values Using Tuples\nDESCRIPTION: Demonstrates using tuples to return multiple values from a function in a concise way.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/tuple.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet getCenterCoordinates = () => {\n  let x = doSomeOperationsHere()\n  let y = doSomeMoreOperationsHere()\n  (x, y)\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getCenterCoordinates(param) {\n  var x = doSomeOperationsHere(undefined);\n  var y = doSomeMoreOperationsHere(undefined);\n  return [x, y];\n}\n```\n\n----------------------------------------\n\nTITLE: React Component with Complex State Types\nDESCRIPTION: Shows a React component implementation with complex ADT state types that can cause performance issues with React's memoization.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2025-04-11-introducing-unified-operators.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nmodule MyComponent = {\n  type payload = {\n    // ...\n  }\n\n  type state =\n    | Idle(payload)\n    | InProgress(payload)\n    | Done(payload)\n\n  @react.component\n  let make = (~state: state) => <></>\n}\n\nlet myElement = <MyComponent state=Idle(payload) />\n```\n\n----------------------------------------\n\nTITLE: Destructuring Tuples in ReScript\nDESCRIPTION: Demonstrates tuple destructuring to access specific elements while ignoring others using underscore pattern.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/tuple.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet (_, y, _) = my3dCoordinates // now you've retrieved y\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar y = 30.5;\n```\n\n----------------------------------------\n\nTITLE: Implementing cmpU and cmp Functions in ReScript\nDESCRIPTION: The cmpU and cmp functions compare two arrays using a custom comparison function. They return an integer indicating the relationship between the arrays.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/array.mdx#2025-04-18_snippet_39\n\nLANGUAGE: ReScript\nCODE:\n```\nlet cmpU: (array('a), array('a), [@bs] (('a, 'a) => int)) => int;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet cmp: (array('a), array('a), ('a, 'a) => int) => int;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nBelt.Array.cmp([|1, 3, 5|], [|1, 4, 2|], (a, b) => compare(a, b)) == (-1);\n\nBelt.Array.cmp([|1, 3, 5|], [|1, 2, 3|], (a, b) => compare(a, b)) == 1;\n\nBelt.Array.cmp([|1, 3, 5|], [|1, 3, 5|], (a, b) => compare(a, b)) == 0;\n```\n\n----------------------------------------\n\nTITLE: Pipe with Variant Constructors\nDESCRIPTION: Demonstrates piping into variant constructors as functions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/pipe.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reason\nCODE:\n```\nlet result = name->preprocess->Some;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = preprocess(name);\n```\n\n----------------------------------------\n\nTITLE: Unzipping Paired List Elements in ReScript\nDESCRIPTION: Transforms a list of pairs into a pair of lists, separating first and second elements of each pair.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/list.mdx#2025-04-18_snippet_13\n\nLANGUAGE: res\nCODE:\n```\nBelt.List.unzip(list{(1, 2), (3, 4)})\n\nBelt.List.unzip(list{(\"H\", \"W\"), (\"e\", \"o\"), (\"l\", \"r\"), (\"l\", \"l\"), (\"o\", \"d\"), (\" \", \"!\")})\n```\n\n----------------------------------------\n\nTITLE: Exporting a Default Value in ReScript\nDESCRIPTION: Shows how to export a default value from ReScript to be used in JavaScript code. This approach works for both JavaScript module and CommonJS formats.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/import-from-export-to-js.mdx#2025-04-18_snippet_6\n\nLANGUAGE: ReScript\nCODE:\n```\n// ReScriptStudent.res\nlet default = \"Bob\"\n```\n\nLANGUAGE: JavaScript (Module)\nCODE:\n```\nvar $$default = \"Bob\";\n\nexports.$$default = $$default;\nexports.default = $$default;\n// informal transpiler-compatible marker of a default export compiled from JavaScript module\nexports.__esModule = true;\n```\n\nLANGUAGE: JavaScript (CommonJS)\nCODE:\n```\nvar $$default = \"Bob\";\n\nexport {\n  $$default,\n  $$default as default,\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Tag Function for React Components\nDESCRIPTION: Demonstrates implementation of a tag function that handles multiple parameter types and converts them to React string elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/tagged-templates.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\ntype params =\n  | I(int)\n  | F(float)\n  | S(string)\n  | Bool(bool)\n\nlet s = (strings, parameters) => {\n  let text = Array.reduceWithIndex(parameters, Array.getUnsafe(strings, 0), (\n    acc,\n    param,\n    i,\n  ) => {\n    let s = Array.getUnsafe(strings, i + 1)\n    let p = switch param {\n    | I(i) => Int.toString(i)\n    | F(f) => Float.toString(f)\n    | S(s) => s\n    | Bool(true) => \"true\"\n    | Bool(false) => \"false\"\n    }\n    acc ++ p ++ s\n  })\n  React.string(text)\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Core__Array from \"./stdlib/core__Array.js\";\n\nfunction s(strings, parameters) {\n  return Core__Array.reduceWithIndex(parameters, strings[0], (function (acc, param, i) {\n                var s = strings[i + 1 | 0];\n                var p;\n                switch (param.TAG) {\n                  case \"I\" :\n                  case \"F\" :\n                      p = param._0.toString();\n                      break;\n                  case \"S\" :\n                      p = param._0;\n                      break;\n                  case \"Bool\" :\n                      p = param._0 ? \"true\" : \"false\";\n                      break;\n                  \n                }\n                return acc + p + s;\n              }));\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Closed Polymorphic Variant Type in ReScript\nDESCRIPTION: Demonstrates how to define a closed polymorphic variant type with a specific set of constructors. Note the square brackets syntax and the # prefix for constructors.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/polymorphic-variant.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\n// Note the surrounding square brackets, and # for constructors\ntype color = [ #Red | #Green | #Blue ]\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using HashSet in ReScript\nDESCRIPTION: This example demonstrates how to create and use HashSets with custom hash functions. It shows the creation of two different HashSets with unique identities and how to add elements to them.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-set.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\ntype t = int;\n\nmodule I0 = (\n  val Belt.Id.hashableU(\n        ~hash=(. a: t) => a land 65535,\n        ~eq=(. a, b) => a == b,\n      )\n);\n\nlet s0 = Belt.HashSet.make(~id=(module I0), ~hintSize=40);\n\nmodule I1 = (\n  val Belt.Id.hashableU(\n        ~hash=(. a: t) => a land 255,\n        ~eq=(. a, b) => a == b,\n      )\n);\n\nlet s1 = Belt.HashSet.make(~id=(module I1), ~hintSize=40);\n\nBelt.HashSet.add(s1, 0);\nBelt.HashSet.add(s1, 1);\n```\n\n----------------------------------------\n\nTITLE: Big Integer Bitwise Operations in ReScript\nDESCRIPTION: Demonstration of bitwise operations with Big Integers in ReScript, including AND, OR, XOR, NOT, left shift, and arithmetic right shift.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/primitive-types.mdx#2025-04-18_snippet_7\n\nLANGUAGE: res\nCODE:\n```\nopen! BigInt\n\nlet a = land(1n, 1n)\nlet b = lor(1n, 1n)\nlet c = lxor(1n, 1n)\nlet d = lnot(1n)\nlet e = lsl(1n, 1n)\nlet f = asr(1n, 1n)\n```\n\nLANGUAGE: js\nCODE:\n```\nvar Js_bigint = require(\"./stdlib/js_bigint.js\");\n\nvar a = 1n & 1n;\n\nvar b = 1n | 1n;\n\nvar c = 1n ^ 1n;\n\nvar d = Js_bigint.lnot(1n);\n\nvar e = (1n << 1n);\n\nvar f = (1n >> 1n);\n```\n\n----------------------------------------\n\nTITLE: Concatenating Multiple Arrays in ReScript\nDESCRIPTION: The concatMany function returns a fresh array as the concatenation of an array of arrays, flattening them into a single array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/array.mdx#2025-04-18_snippet_27\n\nLANGUAGE: ReScript\nCODE:\n```\nlet concatMany: array<array<'a>> => array<'a>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nBelt.Array.concatMany([[1, 2, 3], [4, 5, 6], [7, 8]]) == [1, 2, 3, 4, 5, 6, 7, 8]\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Uncurried Functions in ReScript\nDESCRIPTION: Demonstrates how to define and use uncurried functions in ReScript by placing a dot in the parameter list. This removes currying overhead in the compiled JavaScript output, which can improve performance in certain cases.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/function.mdx#2025-04-18_snippet_17\n\nLANGUAGE: res\nCODE:\n```\nlet add = (. x, y) => x + y\n\nadd(. 1, 2)\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction add(x, y) {\n  return x + y | 0;\n}\n\nadd(1, 2);\n```\n\n----------------------------------------\n\nTITLE: Embedding Top-Level JavaScript Code with %%raw in ReScript\nDESCRIPTION: This example demonstrates how to embed a block of JavaScript code at the top level of a ReScript file. The embedded code defines a message variable, a greet function, and calls the function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/extension_raw_top_level_expression.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\n%%raw(`\n  const message = \"hello\";\n\n  function greet(m) {\n    console.log(m)\n  }\n\n  greet(message)\n`)\n```\n\nLANGUAGE: js\nCODE:\n```\nconst message = \"hello\";\n\nfunction greet(m) {\n  console.log(m);\n}\n\ngreet(message);\n```\n\n----------------------------------------\n\nTITLE: While Loop Syntax in ReScript\nDESCRIPTION: Shows the basic syntax for while loops in ReScript, which continue executing while a condition is true.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/control-flow.mdx#2025-04-18_snippet_8\n\nLANGUAGE: res\nCODE:\n```\nwhile testCondition {\n  // body here\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nwhile (testCondition) {\n  // body here\n}\n```\n\n----------------------------------------\n\nTITLE: JSX v4 Classic Mode Configuration\nDESCRIPTION: Configuration for using JSX v4 with legacy React.createElement API\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/migrate-react.mdx#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsx\": { \"version\": 4, \"mode\": \"classic\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Ternary Operator in ReScript\nDESCRIPTION: Shows the ternary operator syntax in ReScript, which is similar to JavaScript. The documentation recommends using if-else expressions over ternary when possible.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/control-flow.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\nlet message = isMorning ? \"Good morning!\" : \"Hello!\"\n```\n\nLANGUAGE: js\nCODE:\n```\nvar message = isMorning ? \"Good morning!\" : \"Hello!\";\n```\n\n----------------------------------------\n\nTITLE: Practical Recursive Function in ReScript\nDESCRIPTION: Shows a practical example of a recursive function that checks if an item exists in a list. ReScript compiles tail-recursive functions into efficient JavaScript loops.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/function.mdx#2025-04-18_snippet_15\n\nLANGUAGE: rescript\nCODE:\n```\n// Recursively check every item on the list until one equals the `item`\n// argument. If a match is found, return `true`, otherwise return `false`\nlet rec listHas = (list, item) =>\n  switch list {\n  | list{} => false\n  | list{a, ...rest} => a === item || listHas(rest, item)\n  }\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction listHas(_list, item) {\n  while(true) {\n    var list = _list;\n    if (!list) {\n      return false;\n    }\n    if (list.hd === item) {\n      return true;\n    }\n    _list = list.tl;\n    continue ;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: ReScript configuration file\nDESCRIPTION: Basic rescript.json configuration file needed to set up a ReScript project, defining source directories, module format, and dependencies.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/installation.mdx#2025-04-18_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"your-project-name\",\n  \"sources\": [\n    {\n      \"dir\": \"src\", // update this to wherever you're putting ReScript files\n      \"subdirs\": true\n    }\n  ],\n  \"package-specs\": [\n    {\n      \"module\": \"esmodule\",\n      \"in-source\": true\n    }\n  ],\n  \"suffix\": \".res.js\",\n  \"bs-dependencies\": [\n    \"@rescript/core\"\n  ],\n  \"bsc-flags\": [\n    \"-open RescriptCore\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Arrays in ReScript\nDESCRIPTION: The keep function creates a new array containing only the elements that satisfy a given predicate.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/array.mdx#2025-04-18_snippet_35\n\nLANGUAGE: reason\nCODE:\n```\nlet keep: (array('a), 'a => bool) => array('a);\n```\n\nLANGUAGE: reason\nCODE:\n```\nBelt.Array.keep([|1, 2, 3|], (x) => x mod 2 == 0) == [|2|];\n```\n\n----------------------------------------\n\nTITLE: External Binding for JS Object Creation\nDESCRIPTION: Demonstrates creating an external binding with @obj to generate JavaScript objects with optional fields.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/generate-converters-accessors.mdx#2025-04-18_snippet_23\n\nLANGUAGE: rescript\nCODE:\n```\n@obj\nexternal route: (\n  ~\\\"type\": string,\n  ~path: string,\n  ~action: list<string> => unit,\n  ~options: {..}=?,\n  unit,\n) => _ = \"\"\n```\n\n----------------------------------------\n\nTITLE: Adding an Element to a HashSet in ReScript\nDESCRIPTION: This function signature shows how to add an element to a HashSet.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-set.mdx#2025-04-18_snippet_7\n\nLANGUAGE: reason\nCODE:\n```\nlet add: (t('a, 'id), 'a) => unit;\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching on Lazy Values\nDESCRIPTION: Demonstrates how to use pattern matching to execute lazy computations as an alternative to Lazy.force.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/lazy-values.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nswitch expensiveFilesRead {\n| lazy(result) => Js.log(result)\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = CamlinternalLazy.force(expensiveFilesRead);\n```\n\n----------------------------------------\n\nTITLE: String Children in ReScript React Components\nDESCRIPTION: Shows how to create a component that requires a string as its children prop. The StringChildren component expects a string child and renders it inside a div element.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/components-and-props.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nmodule StringChildren = {\n  @react.component\n  let make = (~children: string) => {\n    <div>\n      {React.string(children)}\n    </div>\n  }\n}\n\n<StringChildren> \"My Child\" </StringChildren>\n\n// This will cause a type check error\n<StringChildren/>\n```\n\n----------------------------------------\n\nTITLE: Creating an Array of Sequential Integers in ReScript\nDESCRIPTION: The range function creates an array containing all integers from start to finish, inclusive. Returns an empty array if start is greater than finish.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/array.mdx#2025-04-18_snippet_16\n\nLANGUAGE: ReScript\nCODE:\n```\nlet range: (int, int) => array<int>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nBelt.Array.range(0, 3) == [0, 1, 2, 3]\n\nBelt.Array.range(3, 0) == []\n\nBelt.Array.range(3, 3) == [3]\n```\n\n----------------------------------------\n\nTITLE: Comparing Old and New Syntax in ReScript\nDESCRIPTION: This snippet demonstrates the differences between old Reason syntax and new ReScript syntax for various language constructs such as string interpolation, arrays, lists, and object access.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/migrate-from-bucklescript-reason.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\n// Old: {j|hello ${name}|j}\n// New: j`hello ${name}`\n\n// Old: [|1,2,3|]\n// New: [1,2,3]\n\n// Old: [1,2,3]\n// New: list{1, 2, 3}\n\n// Old: settings##visible #= true\n// New: settings[\"visible\"] = true\n```\n\n----------------------------------------\n\nTITLE: Advanced Pipe Operator Usage with Placeholder in ReScript\nDESCRIPTION: Shows how to use the pipe operator with a placeholder (_) to explicitly define the argument position of a piped value. This example pipes a string to the last argument of the logMsg function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/operators_pipe.mdx#2025-04-18_snippet_1\n\nLANGUAGE: ReScript\nCODE:\n```\nlet logMsg = (user: string, datestr: string, msg: string): unit => {\n  Console.log(`${user}|${datestr}|${msg}`)\n}\n\nlet datestr = \"01-01-2021\"\nlet user = \"admin\"\n\n// Here, we put the result of toUpperCase into the last position\n// denoted with an _\nString.toUpperCase(\"example message\")->logMsg(user, datestr, _)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction logMsg(user, datestr, msg) {\n  console.log(user + \"|\" + datestr + \"|\" + msg);\n}\n\nvar datestr = \"01-01-2021\";\n\nvar user = \"admin\";\n\n((function (__x) {\n        logMsg(user, datestr, __x);\n      })(\"example message\".toUpperCase()));\n```\n\n----------------------------------------\n\nTITLE: Setting Array Elements with Exception Handling in ReScript\nDESCRIPTION: The setExn function modifies an array in place by replacing the element at the specified index, raising an exception if the index is out of range.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/array.mdx#2025-04-18_snippet_7\n\nLANGUAGE: ReScript\nCODE:\n```\nlet setExn: (array<'a>, int, 'a) => unit\n```\n\n----------------------------------------\n\nTITLE: List Keep Map Operation - ReScript\nDESCRIPTION: Function that transforms list elements using a mapping function that returns Option type. Only elements that map to Some() are kept in the resulting list.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/list.mdx#2025-04-18_snippet_58\n\nLANGUAGE: rescript\nCODE:\n```\nlet isEven = x => mod(x, 2) == 0\n\nlist{1, 2, 3, 4}\n->Belt.List.keepMap(x =>\n    if (isEven(x)) {\n      Some(x)\n    } else {\n      None\n    }\n  )\n\nlist{Some(1), Some(2), None}->Belt.List.keepMap(x => x)\n```\n\n----------------------------------------\n\nTITLE: Binding to JavaScript Date Constructor with @new Decorator in ReScript\nDESCRIPTION: This snippet demonstrates how to use the @new decorator to bind to the JavaScript Date constructor. It creates a type t and a create function that instantiates a new Date object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/decorator_new.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\ntype t\n\n@new external create: unit => t = \"Date\"\n\nlet now = create()\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar now = new Date();\n```\n\n----------------------------------------\n\nTITLE: Filtering Elements in a List with Belt.List in ReScript\nDESCRIPTION: The keep and filter functions return a new list containing only the elements that satisfy a given predicate function. They are identical in functionality.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/list.mdx#2025-04-18_snippet_55\n\nLANGUAGE: rescript\nCODE:\n```\nlet isEven = x => mod(x, 2) == 0\n\nBelt.List.keep(list{1, 2, 3, 4}, isEven) /* list{2, 4} */\n\nBelt.List.keep(list{None, Some(2), Some(3), None}, Belt.Option.isSome) /* list{Some(2), Some(3)} */\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet isEven = x => mod(x, 2) == 0\n\nBelt.List.filter(list{1, 2, 3, 4}, isEven) /* list{2, 4} */\n\nBelt.List.filter(list{None, Some(2), Some(3), None}, Belt.Option.isSome) /* list{Some(2), Some(3)} */\n```\n\n----------------------------------------\n\nTITLE: Multi-argument Function in ReScript\nDESCRIPTION: Demonstrates how to create and use a function with multiple arguments for addition.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/function.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet add = (x, y, z) => x + y + z\nadd(1, 2, 3) // 6\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction add(x, y, z) {\n  return (x + y | 0) + z | 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Elements Based on Index in ReScript\nDESCRIPTION: The keepWithIndex function returns a new list containing only the elements whose index satisfies a given predicate function. The function receives both the element and its index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/list.mdx#2025-04-18_snippet_56\n\nLANGUAGE: rescript\nCODE:\n```\nlet isEven = x => mod(x, 2) == 0\n\nBelt.List.keepWithIndex(list{1, 2, 3, 4}, (_x, index) => isEven(index)) /* list{1, 3} */\n```\n\n----------------------------------------\n\nTITLE: Embedding Expression-Level JavaScript with %raw\nDESCRIPTION: Shows how to embed JavaScript code at the expression level using %raw syntax, allowing JavaScript functions to be assigned to ReScript variables.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/embed-raw-javascript.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet add = %raw(`\n  function(a, b) {\n    console.log(\"hello from raw JavaScript!\");\n    return a + b\n  }\n`)\n\nConsole.log(add(1, 2))\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar add = function(a, b) {\n  console.log(\"hello from raw JavaScript!\");\n  return a + b\n};\n\nconsole.log(add(1, 2));\n```\n\n----------------------------------------\n\nTITLE: Adding Unsafe CSS Properties with ReactDOM.Style.unsafeAddProp in ReScript\nDESCRIPTION: Demonstrates how to use the escape hatch ReactDOM.Style.unsafeAddProp to add CSS properties that aren't included in the type-safe API, such as vendor-prefixed properties.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/styling.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet style =\n  ReactDOM.Style.make(\n    ~color=\"red\",\n    ~padding=\"10px\",\n    (),\n  )->ReactDOM.Style.unsafeAddProp(\"-webkit-animation-name\", \"moveit\")\n```\n\n----------------------------------------\n\nTITLE: Organizing Emotion Styles with Submodules in ReScript\nDESCRIPTION: Demonstrates how to organize Emotion styles using ReScript modules for better code organization and maintainability.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/styling.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rescript\nCODE:\n```\nmodule Styles = {\n  open Emotion\n  let container = css({\n    \"color\": \"#fff\",\n    \"backgroundColor\": \"red\"\n  })\n  // your other declarations\n}\n\nlet app = <div className={Styles.container} />\n```\n\n----------------------------------------\n\nTITLE: Inline Record Definition in Variants\nDESCRIPTION: Demonstrates how to define records directly within variant constructors when the record is only used in that context, making the code more concise.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/variant.mdx#2025-04-18_snippet_6\n\nLANGUAGE: reason\nCODE:\n```\ntype user =\n  | Number(int)\n  | Id({name: string, password: string});\n```\n\nLANGUAGE: ml\nCODE:\n```\ntype user =\n  | Number of int\n  | Id of {name: string; password: string}\n```\n\nLANGUAGE: js\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Exporting an Entire Module with @genType\nDESCRIPTION: Example of annotating a complete module with @genType to convert all its types and values to TypeScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/typescript-integration.mdx#2025-04-18_snippet_4\n\nLANGUAGE: ReScript\nCODE:\n```\n@genType\nmodule Size = {\n  type t =\n    | Small\n    | Medium\n    | Large\n\n  let getNum = (size: t) =>\n    switch size {\n    | Small => 1.\n    | Medium => 5.\n    | Large => 10.\n    }\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as MyCompBS__Es6Import from './MyComp.res';\nconst MyCompBS: any = MyCompBS__Es6Import;\n\nexport type Size_t = \"Small\" | \"Medium\" | \"Large\";\n\nexport const Size_getNum: (size:Size_t) => number = MyCompBS.Size.getNum;\n\nexport const Size: { getNum: (size:Size_t) => number } = MyCompBS.Size\n```\n\n----------------------------------------\n\nTITLE: Component with Children JSX Transformation\nDESCRIPTION: Demonstrates how components with children get transformed in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/jsx.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\n<MyComponent> child1 child2 </MyComponent>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nReact.createElement(MyComponent, { children: null }, child1, child2);\n```\n\n----------------------------------------\n\nTITLE: Example: Creating and Stringifying JSON Object in ReScript\nDESCRIPTION: Example showing how to create a JSON object with string, number, and array properties, and then convert it to a string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/json.mdx#2025-04-18_snippet_25\n\nLANGUAGE: reason\nCODE:\n```\n/* Creates and stringifies a simple JS object */\n\n{\n  let dict = Js.Dict.empty();\n  Js.Dict.set(dict, \"name\", Js.Json.string(\"John Doe\"));\n  Js.Dict.set(dict, \"age\", Js.Json.number(30.0));\n  Js.Dict.set(\n    dict,\n    \"likes\",\n    Js.Json.stringArray([|\"bucklescript\", \"ocaml\", \"js\"|]),\n  );\n\n  Js.log(Js.Json.stringify(Js.Json.object_(dict)));\n};\n```\n\n----------------------------------------\n\nTITLE: Using Object Access for Quick JavaScript Conversion\nDESCRIPTION: Demonstrates using ReScript's object notation to access JavaScript object properties without needing type declarations, useful for rapid conversion.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/converting-from-js.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\n%%raw(`\nconst school = require('school');\n`)\n\nlet defaultId = 10\n\nlet queryResult = (usePayload, payload) => {\n  if usePayload {\n    payload[\"student\"]\n  } else {\n    school[\"getStudentById\"](defaultId)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ReScript Navigation Screen Props Example\nDESCRIPTION: Demonstrates how to use shared props with React Navigation components to ensure type compatibility across different screens.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/extensions-of-props.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nmodule A = {\n  @react.component(:screenProps)\n  let make = (\n    ~navigation: navigation,\n    ~route: route\n  ) => ...\n}\n\nmodule B = {\n  @react.component(:screenProps)\n  let make = (\n    ~navigation: navigation,\n    ~route: route\n  ) => ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Tuples in ReScript\nDESCRIPTION: Demonstrates creating basic tuples with different value types. Shows how tuples are compiled to JavaScript arrays.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/tuple.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nlet ageAndName = (24, \"Lil' ReScript\")\nlet my3dCoordinates = (20.0, 30.5, 100.0)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar ageAndName = [24, \"Lil' ReScript\"];\nvar my3dCoordinates = [20.0, 30.5, 100.0];\n```\n\n----------------------------------------\n\nTITLE: Using some with Arrays in ReScript\nDESCRIPTION: Demonstrates the some function that tests whether at least one element in the array passes the provided predicate function. It returns true if any element satisfies the condition, false otherwise.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/array-2.mdx#2025-04-18_snippet_27\n\nLANGUAGE: res\nCODE:\n```\nlet some: (t<'a>, 'a => bool) => bool\n```\n\nLANGUAGE: res\nCODE:\n```\nlet isEven = x => mod(x, 2) == 0\n\nJs.Array2.some([3, 7, 5, 2, 9], isEven) == true\nJs.Array2.some([3, 7, 5, 1, 9], isEven) == false\n```\n\n----------------------------------------\n\nTITLE: Exception Handling with Lazy Values in ReScript\nDESCRIPTION: Demonstrates how to handle exceptions that might occur when forcing a lazy computation. Uses try-catch syntax to provide fallback values when specific exceptions are thrown.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/lazy-values.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nlet result = try {\n  Lazy.force(expensiveFilesRead)\n} catch {\n| Not_found => [] // empty array of files\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar result;\n\ntry {\n  result = CamlinternalLazy.force(expensiveFilesRead);\n} catch (raw_exn) {\n  var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);\n  if (exn.RE_EXN_ID === \"Not_found\") {\n    result = [];\n  } else {\n    throw exn;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Public Module Visibility in bsconfig.json\nDESCRIPTION: Shows how to explicitly control which modules are visible to external consumers. In this example, only 'MyMainModule' is exposed while all other files in the 'src' directory remain private.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/build-configuration.mdx#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sources\": {\n    \"dir\": \"src\",\n    \"public\": [\"MyMainModule\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Descending For Loop Structure in ReScript\nDESCRIPTION: Demonstrates the downto keyword for creating a for loop that counts in the reverse direction from a higher to lower value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/control-flow.mdx#2025-04-18_snippet_6\n\nLANGUAGE: re\nCODE:\n```\nfor (i in startValueInclusive downto endValueInclusive) {\n  Js.log(i);\n};\n```\n\nLANGUAGE: ml\nCODE:\n```\nfor i = startValueInclusive downto endValueInclusive do\n  Js.log i\ndone\n```\n\nLANGUAGE: js\nCODE:\n```\nfor(var i = startValueInclusive; i >= endValueInclusive; --i){\n  console.log(i);\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Optional Fields in Records\nDESCRIPTION: Shows how to perform an immutable update on a record with an optional field, setting it to a specific string value without needing to handle the optional nature directly.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/record.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\ntype person = {\n  age: int,\n  name?: string\n}\n\nlet me = {\n  age: 123,\n  name: \"Hello\"\n}\n\nlet withoutName = {\n  ...me,\n  name: \"New Name\"\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Caml_obj from \"./stdlib/caml_obj.js\";\n\nvar me = {\n  age: 123,\n  name: \"Hello\"\n};\n\nvar newrecord = Caml_obj.obj_dup(me);\n\nnewrecord.name = \"New Name\";\n\nvar withoutName = newrecord;\n```\n\n----------------------------------------\n\nTITLE: Various Attribute Usage Examples in ReScript\nDESCRIPTION: This snippet demonstrates the use of multiple attributes including file-level warnings, type annotations, external bindings, record field renaming, and deprecation notices.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/attribute.mdx#2025-04-18_snippet_1\n\nLANGUAGE: ReScript\nCODE:\n```\n@@warning(\"-27\")\n\n\n@unboxed\ntype a = Name(string)\n\n@val external message: string = \"message\"\n\ntype student = {\n  age: int,\n  @as(\"aria-label\") ariaLabel: string,\n}\n\n@deprecated\nlet customDouble = foo => foo * 2\n\n@deprecated(\"Use SomeOther.customTriple instead\")\nlet customTriple = foo => foo * 3 \n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Friend List Item Component with Duplicate Status Logic\nDESCRIPTION: A FriendListItem component that displays a friend's name with color coding based on online status. The component demonstrates the same status tracking logic as FriendStatus, showing the need for extraction.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/hooks-custom.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\n// FriendListItem.res\ntype state = Offline | Loading | Online;\n\n// module ChatAPI = {...}\n\ntype friend = {\n  id: string,\n  name: string\n};\n\n@react.component\nlet make = (~friend: friend) => {\n  let (state, setState) = React.useState(_ => Offline)\n\n  React.useEffect(() => {\n    let handleStatusChange = (status) => {\n      setState(_ => {\n        status.ChatAPI.isOnline ? Online : Offline\n      })\n    }\n\n    ChatAPI.subscribeToFriendStatus(friend.id, handleStatusChange);\n    setState(_ => Loading);\n\n    let cleanup = () => {\n      ChatAPI.unsubscribeFromFriendStatus(friend.id, handleStatusChange)\n    }\n\n    Some(cleanup)\n  })\n\n  let color = switch(state) {\n    | Offline => \"red\"\n    | Online => \"green\"\n    | Loading => \"grey\"\n  }\n\n  <li style={ReactDOMStyle.make(~color,())}>\n      {React.string(friend.name)}\n  </li>\n}\n```\n\n----------------------------------------\n\nTITLE: Reducing MutableQueue in ReScript\nDESCRIPTION: The 'reduce' function applies a reducing function to the queue, accumulating a result. It's equivalent to reducing a list of the queue's elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-queue.mdx#2025-04-18_snippet_19\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduce: (t<'a>, 'b, ('b, 'a) => 'b) => 'b\n```\n\n----------------------------------------\n\nTITLE: Implementing callback refs for DOM element access\nDESCRIPTION: Example of using callback refs which provide more fine-grained control over when refs are set and unset. This pattern uses ReactDOM.Ref.callbackDomRef instead of domRef.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/refs-and-the-dom.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\n// CustomTextInput.res\n\n@send external focus: Dom.element => unit = \"focus\"\n\n@react.component\nlet make = () => {\n  let textInput = React.useRef(Js.Nullable.null)\n  let setTextInputRef = element => {\n    textInput.current = element;\n  }\n\n  let focusTextInput = _ => {\n    textInput.current\n    ->Js.Nullable.toOption\n    ->Belt.Option.forEach(input => input->focus)\n  }\n\n  <div>\n    <input type_=\"text\" ref={ReactDOM.Ref.callbackDomRef(setTextInputRef)} />\n    <input\n      type_=\"button\" value=\"Focus the text input\" onClick={focusTextInput}\n    />\n  </div>\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction CustomTextInput(Props) {\n  var textInput = React.useRef(null);\n  var setTextInputRef = function (element) {\n    textInput.current = element;\n\n  };\n  var focusTextInput = function (param) {\n    return Belt_Option.forEach(Caml_option.nullable_to_opt(textInput.current), (function (input) {\n                  input.focus();\n\n                }));\n  };\n  return React.createElement(\"div\", undefined, React.createElement(\"input\", {\n                  ref: setTextInputRef,\n                  type: \"text\"\n                }), React.createElement(\"input\", {\n                  type: \"button\",\n                  value: \"Focus the text input\",\n                  onClick: focusTextInput\n                }));\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Module Function (Functor) in ReScript\nDESCRIPTION: This example demonstrates creating a functor called `MakeSet` that takes a module conforming to the `Comparable` signature and returns a new module implementing a set data structure for that type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/module.mdx#2025-04-18_snippet_8\n\nLANGUAGE: res\nCODE:\n```\nmodule type Comparable = {\n  type t\n  let equal: (t, t) => bool\n}\n\nmodule MakeSet = (Item: Comparable) => {\n  // let's use a list as our naive backing data structure\n  type backingType = list<Item.t>\n  let empty = list{}\n  let add = (currentSet: backingType, newItem: Item.t): backingType =>\n    // if item exists\n    if currentSet->List.some(x => Item.equal(x, newItem)) {\n      currentSet // return the same (immutable) set (a list really)\n    } else {\n      list{\n        newItem,\n        ...currentSet // prepend to the set and return it\n      }\n    }\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar List = require(\"./stdlib/list.js\");\n\nfunction MakeSet(Item) {\n  var add = function(currentSet, newItem) {\n    if (\n      List.exists(function(x) {\n        return Item.equal(x, newItem);\n      }, currentSet)\n    ) {\n      return currentSet;\n    } else {\n      return {\n        hd: newItem,\n        tl: currentSet,\n      };\n    }\n  };\n  return {\n    empty: /* [] */ 0,\n    add: add,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Using Tagged Templates in React Components\nDESCRIPTION: Shows how to use the custom tag function in a React component with type-safe interpolation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/tagged-templates.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nmodule Greetings = {\n  @react.component\n  let make = (~name, ~age) => {\n    <div> {s`hello ${S(name)} you're ${I(age)} year old!`} </div>\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Greetings(props) {\n  return React.createElement(\"div\", undefined, s([\n                  \"hello \",\n                  \" you're \",\n                  \" year old!\"\n                ], [\n                  {\n                    TAG: \"S\",\n                    _0: props.name\n                  },\n                  {\n                    TAG: \"I\",\n                    _0: props.age\n                  }\n                ]));\n}\n```\n\n----------------------------------------\n\nTITLE: Syntactic Sugar for Ref Mutation in ReScript\nDESCRIPTION: Demonstrates the := operator as syntactic sugar for mutating ref values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/mutation.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nmyValue := 6\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmyValue.contents = 6;\n```\n\n----------------------------------------\n\nTITLE: Function Application with Type Annotations in ReScript\nDESCRIPTION: Shows how to apply functions with type annotations in ReScript, including labeled arguments, punning, default values, and optional parameters.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/function.mdx#2025-04-18_snippet_24\n\nLANGUAGE: res\nCODE:\n```\n// labeled\nadd(~first=1: int, ~second=2: int)\n// with punning sugar\nadd(~first: int, ~second: int)\n\n// application with default value. Same as normal application\nadd(~first=1: int, ~second=2: int)\n\n// explicit optional application\nadd(~first=?Some(1): option<int>, ~second=?Some(2): option<int>)\n// no punning sugar when you want to type annotate\n```\n\n----------------------------------------\n\nTITLE: Implementing optionBoolToBool with if-else in ReScript\nDESCRIPTION: Initial implementation of a function to convert an optional boolean to a boolean using nested if-else statements. This approach is verbose and error-prone.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_14\n\nLANGUAGE: res\nCODE:\n```\nlet optionBoolToBool = opt => {\n  if opt == None {\n    false\n  } else if opt === Some(true) {\n    true\n  } else {\n    false\n  }\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction optionBoolToBool(opt) {\n  if (opt === undefined) {\n    return false;\n  } else {\n    return opt === true;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Searching Arrays in ReScript\nDESCRIPTION: Shows how to use includes, indexOf, and lastIndexOf to search for elements in arrays. These functions return boolean or integer values indicating the presence or position of elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array.mdx#2025-04-18_snippet_9\n\nLANGUAGE: ReScript\nCODE:\n```\nJs.Array.includes(\"b\", [\"a\", \"b\", \"c\"]) == true\nJs.Array.includes(\"x\", [\"a\", \"b\", \"c\"]) == false\n\nJs.Array.indexOf(102, [100, 101, 102, 103]) == 2\nJs.Array.indexOf(999, [100, 101, 102, 103]) == -1\n\nJs.Array.indexOfFrom(\"a\", ~from=2, [\"a\", \"b\", \"a\", \"c\", \"a\"]) == 2\nJs.Array.indexOfFrom(\"a\", ~from=3, [\"a\", \"b\", \"a\", \"c\", \"a\"]) == 4\nJs.Array.indexOfFrom(\"b\", ~from=2, [\"a\", \"b\", \"a\", \"c\", \"a\"]) == -1\n\nJs.Array.lastIndexOf(\"a\", [\"a\", \"b\", \"a\", \"c\"]) == 2\nJs.Array.lastIndexOf(\"x\", [\"a\", \"b\", \"a\", \"c\"]) == -1\n\nJs.Array.lastIndexOfFrom(\"a\", ~from=3, [\"a\", \"b\", \"a\", \"c\", \"a\", \"d\"]) == 2\nJs.Array.lastIndexOfFrom(\"c\", ~from=2, [\"a\", \"b\", \"a\", \"c\", \"a\", \"d\"]) == -1\n```\n\n----------------------------------------\n\nTITLE: Creating Record Values in ReScript\nDESCRIPTION: Demonstrates creation of a record value based on a previously declared type. ReScript infers the value's type by finding a record type declaration that matches its shape.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/record.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reason\nCODE:\n```\nlet me = {\n  age: 5,\n  name: \"Big ReScript\"\n};\n```\n\nLANGUAGE: ml\nCODE:\n```\nlet me = {\n  age = 5;\n  name = \"Big ReScript\";\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar me = {\n  age: 5,\n  name: \"Big ReScript\"\n};\n```\n\n----------------------------------------\n\nTITLE: Sequential Calculations with Multiple Bindings\nDESCRIPTION: Shows how to handle sequential calculations by creating multiple bindings rather than mutating a single value, following functional programming principles.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/let-binding.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\nlet result1 = 0\nlet result2 = calculate(result1)\nlet result3 = calculateSomeMore(result2)\n```\n\nLANGUAGE: js\nCODE:\n```\nvar result1 = 0;\nvar result2 = calculate(0);\nvar result3 = calculateSomeMore(result2);\n```\n\n----------------------------------------\n\nTITLE: Creating New Tuples from Existing Ones\nDESCRIPTION: Shows how to create new tuples by destructuring and modifying values from existing tuples.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/tuple.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet coordinates1 = (10, 20, 30)\nlet (c1x, _, _) = coordinates1\nlet coordinates2 = (c1x + 50, 20, 30)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar coordinates1 = [10, 20, 30];\nvar c1x = 10;\nvar coordinates2 = [60, 20, 30];\n```\n\n----------------------------------------\n\nTITLE: Referencing Record Types from External Modules\nDESCRIPTION: Demonstrates how to use record types that are defined in other modules. This can be done by either annotating the value with the module-qualified type or by prefixing a field with the module name.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/record.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reason\nCODE:\n```\n// Example.re\n\nlet me: School.person = {age: 20, name: \"Big ReScript\"};\n/* or */\nlet me2 = {School.age: 20, name: \"Big ReScript\"};\n```\n\nLANGUAGE: ml\nCODE:\n```\n(* Example.re *)\n\nlet me: School.person = {age = 20; name = \"Big ReScript\"}\n(* or *)\nlet me2 = {School.age = 20; name = \"Big ReScript\"}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar me = {\n  age: 20,\n  name: \"Big ReScript\"\n};\nvar me2 = {\n  age: 20,\n  name: \"Big ReScript\"\n};\n```\n\n----------------------------------------\n\nTITLE: Using Hyphenated Tag Names in ReScript JSX\nDESCRIPTION: Shows support for lowercase tags with hyphens in their names, allowing binding to web components. Available since ReScript 11.1.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/jsx.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\n<model-viewer src touchActions=\"pan-y\"></model-viewer>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nReact.createElement(\"model-viewer\", {\n  \"touch-actions\": \"pan-y\",\n  src: src\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an Array Using an Index Function in ReScript\nDESCRIPTION: The makeBy function creates an array of size n populated by applying a function to each index from 0 to n-1. Returns an empty array when n is negative.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/array.mdx#2025-04-18_snippet_19\n\nLANGUAGE: ReScript\nCODE:\n```\nlet makeBy: (int, int => 'a) => array<'a>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nBelt.Array.makeBy(5, (i) => i) == [0, 1, 2, 3, 4]\n\nBelt.Array.makeBy(5, (i) => i * i) == [0, 1, 4, 9, 16]\n```\n\n----------------------------------------\n\nTITLE: Type-Safe Emotion CSS with ReactDOM.Style in ReScript\nDESCRIPTION: A more type-safe approach to using Emotion by leveraging ReScript's built-in ReactDOM.Style.t type to ensure only valid CSS properties are used.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/styling.mdx#2025-04-18_snippet_11\n\nLANGUAGE: rescript\nCODE:\n```\n@module(\"@emotion/css\") external css: ReactDOM.Style.t => string = \"css\"\n\n// Usage is slightly different (and probably less ergonomic)\nlet container = ReactDOM.Style.make(~padding=\"20px\", ())->css;\n\nlet app = <div\n  className={container}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using %debugger Expression in ReScript\nDESCRIPTION: Demonstrates how to insert a JavaScript debugger statement in ReScript code using the %debugger expression, which helps with debugging by creating breakpoints.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/embed-raw-javascript.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nlet f = (x, y) => {\n  %debugger\n  x + y\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction f(x, y) {\n  debugger;\n  return x + y | 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying a Module Function (Functor) in ReScript\nDESCRIPTION: This example shows how to apply a functor by creating a module that satisfies its input requirements and then applying the functor to create a new module. Here, a set of integer pairs is created.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/module.mdx#2025-04-18_snippet_9\n\nLANGUAGE: res\nCODE:\n```\nmodule IntPair = {\n  type t = (int, int)\n  let equal = ((x1: int, y1: int), (x2, y2)) => x1 == x2 && y1 == y2\n  let create = (x, y) => (x, y)\n}\n\n/* IntPair abides by the Comparable signature required by MakeSet */\nmodule SetOfIntPairs = MakeSet(IntPair)\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction equal(param, param$1) {\n  if (param[0] === param$1[0]) {\n    return param[1] === param$1[1];\n  } else {\n    return false;\n  }\n}\n\nfunction create(x, y) {\n  return [x, y];\n}\n\nvar IntPair = {\n  equal: equal,\n  create: create,\n};\n\nvar SetOfIntPairs = {\n  empty: /* [] */ 0,\n  add: add,\n};\n```\n\n----------------------------------------\n\nTITLE: Using Generated Variant Accessors in ReScript\nDESCRIPTION: Shows how to use the generated accessor functions for variants, which is helpful when passing accessors as higher-order functions or when working with JavaScript interoperability.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/generate-converters-accessors.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet s = submit(\"hello\"); /* gives Submit(\"hello\") */\n```\n\n----------------------------------------\n\nTITLE: Retrieving Array Length in ReScript\nDESCRIPTION: The length function returns the size of the array. It provides a way to determine how many elements are in an array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/array.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\nlet length: array<'a> => int\n```\n\nLANGUAGE: ReScript\nCODE:\n```\n// Returns 1\nBelt.Array.length([\"test\"])\n```\n\n----------------------------------------\n\nTITLE: Creating Mutable Reference in ReScript\nDESCRIPTION: Creates a mutable reference using ref that wraps a value in a record with a mutable contents field.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/mutation.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nlet myValue = ref(5)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar myValue = {\n  contents: 5\n};\n```\n\n----------------------------------------\n\nTITLE: Finding an Element in Array in ReasonML\nDESCRIPTION: The find function returns the value of the first element in the array that satisfies the provided testing function. It returns None if no elements satisfy the function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array.mdx#2025-04-18_snippet_18\n\nLANGUAGE: ReasonML\nCODE:\n```\nlet find: ('a => bool, t<'a>) => option<'a>\n```\n\nLANGUAGE: ReasonML\nCODE:\n```\nJs.Array.find(x => x < 0, [33, 22, -55, 77, -44]) == Some(-55)\nJs.Array.find(x => x < 0, [33, 22, 55, 77, 44]) == None\n```\n\n----------------------------------------\n\nTITLE: Implementing @deprecated Decorator Usage in ReScript\nDESCRIPTION: Demonstrates various ways to use the @deprecated decorator in ReScript to mark types, functions, and modules as deprecated. Shows how to add optional deprecation messages to guide users to alternative implementations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/decorator_expression_deprecated.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\n@deprecated\ntype person = {id: int, name: string}\n\n@deprecated\nlet customDouble = n => n * 2\n\n@deprecated(\"Use OtherModule.customTriple instead\")\nlet customTriple = n => n * 3\n\n@deprecated(\"Use OtherModule instead\")\nmodule MyModule = {\n  type t\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction customDouble(n) {\n  return n << 1;\n}\n\nfunction customTriple(n) {\n  return Math.imul(n, 3);\n}\n\nvar MyModule = {};\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching on Variants with Switch\nDESCRIPTION: Shows pattern matching on a variant with switch, executing different code for each variant case while extracting and using the payload values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\nlet data = GoodResult(\"Product shipped!\")\nswitch data {\n| GoodResult(theMessage) =>\n  Js.log(\"Success! \" ++ theMessage)\n| BadResult(errorCode) =>\n  Js.log(\"Something's wrong. The error code is: \" ++ Js.Int.toString(errorCode))\n| NoResult =>\n  Js.log(\"Bah.\")\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar data = {\n  TAG: /* GoodResult */1,\n  _0: \"Product shipped!\"\n};\n\nif (typeof data === \"number\") {\n  console.log(\"Bah.\");\n} else if (data.TAG === /* BadResult */ 0) {\n  console.log(\"Something's wrong. The error code is: \" + \"Product shipped!\".toString());\n} else {\n  console.log(\"Success! Product shipped!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Object Assignment Examples in ReScript\nDESCRIPTION: Demonstrates object copying and property merging using Js.Obj.assign(). Shows how to create object copies and merge objects with overlapping properties.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/obj.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\n/* Copy an object */\n\nlet obj = {\"a\": 1}\n\nlet copy = Js.Obj.assign(Js.Obj.empty(), obj)\n\n/* prints \"{ a: 1 }\" */\nJs.log(copy)\n\n/* Merge objects with same properties */\n\nlet target = {\"a\": 1, \"b\": 1}\nlet source = {\"b\": 2}\n\nlet obj = Js.Obj.assign(target, source)\n\n/* prints \"{ a: 1, b: 2 }\" */\nJs.log(obj)\n\n/* prints \"{ a: 1, b: 2 }\", target is modified */\nJs.log(target)\n```\n\n----------------------------------------\n\nTITLE: Creating Type Aliases in ReScript\nDESCRIPTION: Shows how to create and use type aliases to refer to existing types by different names.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/type.mdx#2025-04-18_snippet_2\n\nLANGUAGE: ReScript\nCODE:\n```\ntype scoreType = int\nlet x: scoreType = 10\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar x = 10;\n```\n\n----------------------------------------\n\nTITLE: Using Module Functions in ReScript\nDESCRIPTION: Shows how to apply module functions to create specialized modules based on required interfaces, in this case creating a set of integer pairs.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/module.mdx#2025-04-18_snippet_13\n\nLANGUAGE: res\nCODE:\n```\nmodule IntPair = {\n  type t = (int, int)\n  let equal = ((x1: int, y1: int), (x2, y2)) => x1 == x2 && y1 == y2\n  let create = (x, y) => (x, y)\n}\n\n/* IntPair abides by the Comparable signature required by MakeSet */\nmodule SetOfIntPairs = MakeSet(IntPair)\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction equal(param, param$1) {\n  if (param[0] === param$1[0]) {\n    return param[1] === param$1[1];\n  } else {\n    return false;\n  }\n}\n\nfunction create(x, y) {\n  return [x, y];\n}\n\nvar IntPair = {\n  equal: equal,\n  create: create,\n};\n\nvar SetOfIntPairs = {\n  empty: /* [] */ 0,\n  add: add,\n};\n```\n\n----------------------------------------\n\nTITLE: Binding Shadowing in ReScript\nDESCRIPTION: Demonstrates binding shadowing, where reusing the same binding name creates a new binding that overshadows the previous one. This provides an alternative to mutation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/let-binding.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nlet result = 0\nlet result = calculate(result)\nlet result = calculateSomeMore(result)\n```\n\nLANGUAGE: js\nCODE:\n```\nvar result = calculate(0);\nvar result$1 = calculateSomeMore(result);\n```\n\n----------------------------------------\n\nTITLE: Wrapping Functions as Lazy Values in ReScript\nDESCRIPTION: Shows how to wrap both parameterless and parameterized functions as lazy values using Lazy.from_fun and the lazy keyword.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/lazy-values.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reason\nCODE:\n```\nlet getFiles = () => {\n  Node.Fs.readdirSync(\"./pages\");\n};\n\nlet lazyGetFiles = Lazy.from_fun(getFiles);\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet doesFileExist = name => {\n  Node.Fs.readdirSync(\"./pages\")->Js.Array2.find(s => name === s);\n};\n\nlet lazyDoesFileExist = lazy(doesFileExist(\"blog.re\"));\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Result Type for HTTP Query in ReScript\nDESCRIPTION: Demonstrates how to create a custom Result type for an HTTP-like query operation, defining possible error states and a query result type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/result.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\ntype responseError = NotAvailable | NotFound\ntype queryResult = t<string, responseError>\n\nlet failQueryUser = (username: string): queryResult => {\n  Error(NotAvailable)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Arrays with Range in ReScript\nDESCRIPTION: Creates an inclusive array of integers within the specified range.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/array.mdx#2025-04-18_snippet_6\n\nLANGUAGE: ReScript\nCODE:\n```\nlet range: (int, int) => array<int>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nBelt.Array.range(0, 3) == [0, 1, 2, 3]\n\nBelt.Array.range(3, 0) == []\n\nBelt.Array.range(3, 3) == [3]\n```\n\n----------------------------------------\n\nTITLE: Converting JavaScript Module to Raw ReScript Embedding\nDESCRIPTION: The first conversion step involves copying the entire JavaScript file content into a ReScript file using the %%raw embedding feature, which preserves the exact JavaScript code in the output.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/converting-from-js.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\n%%raw(`\nconst school = require('school');\n\nconst defaultId = 10;\n\nfunction queryResult(usePayload, payload) {\n  if (usePayload) {\n    return payload.student;\n  } else {\n    return school.getStudentById(defaultId);\n  }\n}\n`)\n```\n\n----------------------------------------\n\nTITLE: Binding to JavaScript Functions with Polymorphic Variants in ReScript\nDESCRIPTION: Shows how to create type-safe bindings to JavaScript functions using polymorphic variants to ensure valid parameter values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/polymorphic-variant.mdx#2025-04-18_snippet_9\n\nLANGUAGE: ReScript\nCODE:\n```\ntype t\n\n@scope(\"Intl\") @val\nexternal makeNumberFormat: ([#\"de-DE\" | #\"en-GB\" | #\"en-US\"]) => t = \"NumberFormat\"\n\nlet intl = makeNumberFormat(#\"de-DE\")\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar intl = Intl.NumberFormat(\"de-DE\");\n```\n\n----------------------------------------\n\nTITLE: Nullable Type Validation Example\nDESCRIPTION: Example of creating and validating nullable types for JavaScript interop.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/null-undefined-option.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\n@module(\"MyIdValidator\") external validate: Js.Nullable.t<string> => bool = \"validate\"\nlet personId: Js.Nullable.t<string> = Js.Nullable.return(\"abc123\")\n\nlet result = validate(personId)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar MyIdValidator = require(\"MyIdValidator\");\nvar personId = \"abc123\";\nvar result = MyIdValidator.validate(personId);\n```\n\n----------------------------------------\n\nTITLE: Configuring Sources in bsconfig.json for ReScript\nDESCRIPTION: Examples of how to specify source directories in the bsconfig.json file. This includes simple directory lists, nested structures, and recursive subdirectory builds.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/build-configuration.mdx#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sources\": [\"src\", \"examples\"]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sources\": {\n    \"dir\": \"src\",\n    \"subdirs\": [\"page\"]\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sources\": [\n    \"examples\",\n    {\n      \"dir\": \"src\",\n      \"subdirs\": true // recursively builds every subdirectory\n    }\n  ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sources\": {\n    \"dir\": \"test\",\n    \"type\": \"dev\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript output of ReScript await usage\nDESCRIPTION: This snippet shows the JavaScript output generated from the ReScript code using 'await'. It demonstrates how ReScript's async/await syntax is transpiled to equivalent JavaScript code.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/language_await.mdx#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nasync function fetchMessages(param) {\n  var message = await global.queryMessagesApi(\"message-id-1\");\n  console.log(message);\n}\n```\n\n----------------------------------------\n\nTITLE: Destructuring Tuples in ReScript\nDESCRIPTION: Demonstrates basic tuple destructuring in ReScript, extracting specific values while ignoring others using the underscore placeholder. The example creates a tuple of coordinates and extracts only the x-coordinate.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\nlet coordinates = (10, 20, 30);\nlet (x, _, _) = coordinates;\nJs.log(x); // 10\n```\n\nLANGUAGE: ml\nCODE:\n```\nlet coordinates = (10, 20, 30)\nlet (x, _, _) = coordinates\nJs.log x (* 10 *)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar coordinates = [10, 20, 30];\nvar x = 10;\nconsole.log(10);\n```\n\n----------------------------------------\n\nTITLE: Using Scoped Polymorphic Types in ReScript\nDESCRIPTION: Demonstration of using a scoped polymorphic logger to log different data types without type errors.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/scoped-polymorphic-types.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nlet myLogger = getLogger()\n\nmyLogger.log(\"Hello, ReScript!\")\nmyLogger.log(42)\n```\n\nLANGUAGE: js\nCODE:\n```\nvar myLogger = JsAPI.getLogger();\n\nmyLogger.log(\"Hello, ReScript!\");\nmyLogger.log(42);\n```\n\n----------------------------------------\n\nTITLE: Extending Modules with include in ReScript\nDESCRIPTION: Demonstrates how to use 'include' to extend a module by copying its content into a new module. This is discouraged and should be used as a last resort.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/module.mdx#2025-04-18_snippet_5\n\nLANGUAGE: ReScript\nCODE:\n```\nmodule BaseComponent = {\n  let defaultGreeting = \"Hello\"\n  let getAudience = (~excited) => excited ? \"world!\" : \"world\"\n}\n\nmodule ActualComponent = {\n  /* the content is copied over */\n  include BaseComponent\n  /* overrides BaseComponent.defaultGreeting */\n  let defaultGreeting = \"Hey\"\n  let render = () => defaultGreeting ++ \" \" ++ getAudience(~excited=true)\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction getAudience(excited) {\n  if (excited) {\n    return \"world!\";\n  } else {\n    return \"world\";\n  }\n}\n\nvar BaseComponent = {\n  defaultGreeting: \"Hello\",\n  getAudience: getAudience\n};\n\nvar defaultGreeting = \"Hey\";\n\nfunction render(param) {\n  return \"Hey world!\";\n}\n\nvar ActualComponent = {\n  getAudience: getAudience,\n  defaultGreeting: defaultGreeting,\n  render: render\n};\n```\n\n----------------------------------------\n\nTITLE: Binding to JavaScript Tag Functions with @taggedTemplate in ReScript\nDESCRIPTION: This example demonstrates how to use the @taggedTemplate decorator to bind to JavaScript tagged template functions. It specifically shows integration with Bun's shell command functionality, allowing template literals to be used for shell commands with variable interpolation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/decorator_taggedTemplate.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\n// see https://bun.sh/docs/runtime/shell\ntype result = {exitCode: int}\n@module(\"bun\") @taggedTemplate\nexternal sh: (array<string>, array<string>) => promise<result> = \"$\"\n\nlet filename = \"index.res\"\nlet result = await sh`ls ${filename}`\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as $$Bun from \"bun\";\nvar filename = \"index.res\";\nvar result = await $$Bun.$`ls ${filename}`;\n```\n\n----------------------------------------\n\nTITLE: List Utility Functions\nDESCRIPTION: Additional utility functions for list initialization, conversion, and comparison\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/list.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet init: (int, (. int) => 'a) => t<'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet toVector: t<'a> => Js_vector.t<'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet equal: ((. 'a, 'a) => bool, list<'a>, list<'a>) => bool\n```\n\n----------------------------------------\n\nTITLE: Array Element Search in ReScript\nDESCRIPTION: getBy and getByU functions find the first element matching a predicate function. Returns Some(value) if found, None if not found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/array.mdx#2025-04-18_snippet_13\n\nLANGUAGE: rescript\nCODE:\n```\nBelt.Array.getBy([1, 4, 3, 2], (x) => mod(x, 2) == 0) == Some(4)\nBelt.Array.getBy([15, 13, 11], (x) => mod(x, 2) == 0) == None\n```\n\n----------------------------------------\n\nTITLE: Combining Object Types in ReScript\nDESCRIPTION: Shows how to spread one object type definition into another using the spread operator.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/object.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\ntype point2d = {\n  \"x\": float,\n  \"y\": float,\n}\ntype point3d = {\n  ...point2d,\n  \"z\": float,\n}\n\nlet myPoint: point3d = {\n  \"x\": 1.0,\n  \"y\": 2.0,\n  \"z\": 3.0,\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar myPoint = {\n  x: 1.0,\n  y: 2.0,\n  z: 3.0\n};\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Range with forEach in ReScript\nDESCRIPTION: Demonstrates the use of Belt.Range.forEach to iterate over a range of integers from 0 to 4, inclusive. The function logs each number to the console.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/range.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\nBelt.Range.forEach(0, 4, (i) => Js.log(i))\n\n/*\n * prints:\n *   0\n *   1\n *   2\n *   3\n *   4\n */\n```\n\n----------------------------------------\n\nTITLE: Piping into Variant Constructors\nDESCRIPTION: Shows how to pipe values directly into variant constructors.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/pipe.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet result = name->preprocess->Some\n```\n\n----------------------------------------\n\nTITLE: Defining a Variant Type for Pattern Matching in ReScript\nDESCRIPTION: Defines a three-case variant type called 'payload' to be used for pattern matching demonstrations. The type includes cases for success, failure with an error code, and no result.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reason\nCODE:\n```\ntype payload =\n  | BadResult(int)\n  | GoodResult(string)\n  | NoResult;\n```\n\nLANGUAGE: ml\nCODE:\n```\ntype payload =\n  | BadResult of int\n  | GoodResult of string\n  | NoResult\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Nullable Conversion Function Signatures in ReScript\nDESCRIPTION: Function signatures for converting between nullable types and ReScript's option type. These functions provide a bridge between JavaScript's null/undefined handling and ReScript's type-safe option approach.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet toOption: Js.nullable<'a> => option<'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet undefinedToOption: Js.undefined<'a> => option<'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet nullToOption: Js.null<'a> => option<'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet test: Js.nullable<'a> => bool\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet isNullable: Js.nullable<'a> => bool\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet testAny: 'a => bool\n```\n\n----------------------------------------\n\nTITLE: Using Emotion CSS-in-JS in ReScript React Components\nDESCRIPTION: Shows how to use the Emotion bindings to create and apply styled elements in a React component using JavaScript object syntax.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/styling.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\nlet container = Emotion.css({\n  \"color\": \"#fff\",\n  \"backgroundColor\": \"red\"\n})\n\nlet app = <div className={container} />\n```\n\n----------------------------------------\n\nTITLE: Defining Async Functions with Explicit Types in ReScript\nDESCRIPTION: Shows how to type async functions in implementation files where the promise<'a> type is implicitly added by the compiler for the return type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/async-await.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\n// This function is compiled into a `string => promise<string>` type.\n// The promise<...> part is implicitly added by the compiler.\nlet fetchData = async (userId: string): string => {\n  await fetchUserMail(\"test\")\n}\n```\n\n----------------------------------------\n\nTITLE: Destructuring in Function Parameters\nDESCRIPTION: Demonstrates how to use destructuring directly in function parameters to extract data from complex structures. The example extracts a string from a Success variant without additional steps.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\ntype result =\n  | Success(string)\nlet displayMessage = (Success(m)) => {\n  // we've directly extracted the success message\n  // string by destructuring the parameter\n  Console.log(m)\n}\ndisplayMessage(Success(\"You did it!\"))\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction displayMessage(m) {\n  console.log(m._0);\n}\n\ndisplayMessage(/* Success */{\n  _0: \"You did it!\"\n});\n```\n\n----------------------------------------\n\nTITLE: Import Attributes Example\nDESCRIPTION: Shows how to use import attributes for JSON and CSS modules in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2024-02-01-release-11-1-0.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\n@module({from: \"./myJson.json\", with: {type_: \"json\", \\\"some-identifier\": \"yep\"}})\nexternal myJson: Js.Json.t = \"default\"\nConsole.log(myJson)\n\n@module({from: \"./myCss.css\", with: {type_: \"css\", \\\"some-identifier\": \"yep\"}})\nexternal buttonCss: string = \"button\"\nConsole.log(buttonCss)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as MyCssCss from \"./myCss.css\" with {\"type\": \"css\", \"some-identifier\": \"yep\"};\nimport MyJsonJson from \"./myJson.json\" with {\"type\": \"json\", \"some-identifier\": \"yep\"};\n\nvar myJson = MyJsonJson;\nconsole.log(myJson);\n\nvar buttonCss = MyCssCss.button;\nconsole.log(buttonCss);\n```\n\n----------------------------------------\n\nTITLE: Better JavaScript Interop with Multiple External Bindings in ReScript\nDESCRIPTION: Shows the preferred approach for binding to polymorphic JavaScript functions by creating separate external bindings for each type, producing cleaner output.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/variant.mdx#2025-04-18_snippet_10\n\nLANGUAGE: res\nCODE:\n```\n@module(\"myLibrary\") external drawFloat: float => unit = \"draw\"\n@module(\"myLibrary\") external drawString: string => unit = \"draw\"\n```\n\nLANGUAGE: js\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Creating New Tuples from Existing Ones\nDESCRIPTION: Demonstrates how to create new tuples by destructuring old ones and using their values. This shows the immutable update pattern for tuples.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/tuple.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\nlet coordinates1 = (10, 20, 30)\nlet (c1x, _, _) = coordinates1\nlet coordinates2 = (c1x + 50, 20, 30)\n```\n\nLANGUAGE: js\nCODE:\n```\nvar coordinates1 = [10, 20, 30];\nvar c1x = 10;\nvar coordinates2 = [60, 20, 30];\n```\n\n----------------------------------------\n\nTITLE: Matching Strings with Regular Expressions in ReScript\nDESCRIPTION: The match function matches a string against a given regular expression. It returns None if there's no match, or Some(array) containing the matched substrings and capture groups if there's a match. The behavior differs for regular expressions with and without the global modifier.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string-2.mdx#2025-04-18_snippet_7\n\nLANGUAGE: ReScript\nCODE:\n```\nlet match: (t, Js_re.t) => option(array(t));\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nJs.String2.match(\"The better bats\", [%re \"/b[aeiou]t/\"]) == Some([|\"bet\"|]);\nJs.String2.match(\"The better bats\", [%re \"/b[aeiou]t/g\"]) == Some([|\"bet\", \"bat\"|]);\nJs.String2.match(\"Today is 2018-04-05.\", [%re \"/(\\\\d+)-(\\\\d+)-(\\\\d+)/\"]) == Some([|\"2018-04-05\", \"2018\", \"04\", \"05\"|]);\nJs.String2.match(\"The large container.\", [%re \"/b[aeiou]g/\"]) == None;\n```\n\n----------------------------------------\n\nTITLE: JSON Encoding with Unboxed Variants in ReScript\nDESCRIPTION: Shows how to encode data structures back to JSON using unboxed variants. This example handles user objects with nested structures and optional fields, converting them to a properly structured JSON representation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/variant.mdx#2025-04-18_snippet_14\n\nLANGUAGE: rescript\nCODE:\n```\nlet rec userToJson = user => Object(\n  Dict.fromArray([\n    (\"name\", String(user.name)),\n    (\"age\", Number(user.age->Int.toFloat)),\n    (\n      \"bestFriend\",\n      switch user.bestFriend {\n      | None => Null\n      | Some(friend) => userToJson(friend)\n      },\n    ),\n  ]),\n)\n\nlet usersToJson = users => Array(users->Array.map(userToJson))\n```\n\n----------------------------------------\n\nTITLE: Optional Arguments Function in ReScript\nDESCRIPTION: Shows how to create functions with optional labeled arguments using the option type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/function.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet drawCircle = (~color, ~radius=?) => {\n  setColor(color)\n  switch radius {\n  | None => startAt(1, 1)\n  | Some(r_) => startAt(r_, r_)\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction drawCircle(color, radius) {\n  setColor(color);\n  if (radius === undefined) {\n    return startAt(1, 1);\n  }\n  var r_ = Caml_option.valFromOption(radius);\n  return startAt(r_, r_);\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Interop with Variants - Internal Approach\nDESCRIPTION: Demonstrates how to wrap a JavaScript function that accepts multiple argument types using a variant. This approach creates a wrapper function that handles the variant cases.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/variant.mdx#2025-04-18_snippet_8\n\nLANGUAGE: reason\nCODE:\n```\n// reserved for internal usage\n[@bs.module \"myLibrary\"] external draw: 'a => unit = \"draw\";\n\ntype animal =\n  | MyFloat(float)\n  | MyString(string);\n\nlet betterDraw = (animal) =>\n  switch (animal) {\n  | MyFloat(f) => draw(f)\n  | MyString(s) => draw(s)\n  };\n\nbetterDraw(MyFloat(1.5));\n```\n\nLANGUAGE: ml\nCODE:\n```\n(* reserved for internal usage *)\nexternal draw: 'a => unit = \"draw\" [@@bs.module \"myLibrary\"]\n\ntype animal =\n  | MyFloat of float\n  | MyString of string\n\nlet betterDraw animal =\n  match animal with\n  | MyFloat f -> draw f\n  | MyString s -> draw s\n\nlet () = betterDraw (MyFloat 1.5)\n```\n\nLANGUAGE: js\nCODE:\n```\nvar MyLibrary = require(\"myLibrary\");\n\nfunction betterDraw(animal) {\n  MyLibrary.draw(animal._0);\n}\n\nbetterDraw({\n  TAG: /* MyFloat */0,\n  _0: 1.5\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Tuples in ReScript\nDESCRIPTION: Demonstrates how to create tuples with different types of values in ReScript. Tuples are immutable, ordered, fixed-size, and can contain heterogeneous data types.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/tuple.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\nlet ageAndName = (24, \"Lil' ReScript\");\nlet my3dCoordinates = (20.0, 30.5, 100.0);\n```\n\nLANGUAGE: ml\nCODE:\n```\nlet ageAndName = (24, \"Lil' ReScript\")\nlet my3dCoordinates = (20.0, 30.5, 100.0)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar ageAndName = [24, \"Lil' ReScript\"];\nvar my3dCoordinates = [20.0, 30.5, 100.0];\n```\n\n----------------------------------------\n\nTITLE: Installing ReScript Dependencies with yarn\nDESCRIPTION: yarn command to install ReScript and its core library as dependencies in an existing project. This is used when manually integrating ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/installation.mdx#2025-04-18_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nyarn add rescript @rescript/core\n```\n\n----------------------------------------\n\nTITLE: Using Invalid_argument Exception in ReScript\nDESCRIPTION: Illustrates the use of the 'Invalid_argument' exception for argument validation. The example implements a division function that raises an exception for zero denominators.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/exception.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ReScript\nCODE:\n```\nlet divide = (a, b) =>\n  if b == 0 {\n    raise(Invalid_argument(\"Denominator is zero\"))\n  } else {\n    a / b\n  }\n\n// catch error\ntry divide(2, 0)->Console.log catch {\n| Invalid_argument(msg) => Console.log(msg) // Denominator is zero\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as Caml_int32 from \"./stdlib/caml_int32.js\";\nimport * as Caml_js_exceptions from \"./stdlib/caml_js_exceptions.js\";\n\nfunction divide(a, b) {\n  if (b === 0) {\n    throw {\n          RE_EXN_ID: \"Invalid_argument\",\n          _1: \"Denominator is zero\",\n          Error: new Error()\n        };\n  }\n  return Caml_int32.div(a, b);\n}\n\ntry {\n  console.log(divide(2, 0));\n}\ncatch (raw_msg){\n  var msg = Caml_js_exceptions.internalToOCamlException(raw_msg);\n  if (msg.RE_EXN_ID === \"Invalid_argument\") {\n    console.log(msg._1);\n  } else {\n    throw msg;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Render Props in ReScript React\nDESCRIPTION: Shows how to use render props as an alternative to passing component functions in ReScript React applications.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/elements-and-jsx.mdx#2025-04-18_snippet_6\n\nLANGUAGE: ReScript\nCODE:\n```\nlet render = (renderMyComp: (~name: string) => React.element) => {\n  <div> {renderMyComp(~name=\"Franz\")} </div>\n}\n```\n\n----------------------------------------\n\nTITLE: Array Element Search\nDESCRIPTION: Functions to find elements or their indices based on a predicate function. Includes getBy for finding elements and getIndexBy for finding indices.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/array.mdx#2025-04-18_snippet_36\n\nLANGUAGE: rescript\nCODE:\n```\nBelt.Array.getBy([1, 4, 3, 2], (x) => mod(x, 2) == 0) == Some(4)\nBelt.Array.getIndexBy([1, 4, 3, 2], (x) => mod(x, 2) == 0) == Some(1)\n```\n\n----------------------------------------\n\nTITLE: Using Pipe with Placeholder for Non-First Arguments in ReScript\nDESCRIPTION: Shows how to use the pipe operator with a placeholder when the value should be passed to a position other than the first argument. The underscore indicates where the piped value should be inserted.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/pipe.mdx#2025-04-18_snippet_10\n\nLANGUAGE: res\nCODE:\n```\ngetName(input)\n  ->namePerson(personDetails, _)\n```\n\nLANGUAGE: js\nCODE:\n```\nvar __x = getName(input);\nnamePerson(personDetails, __x);\n```\n\n----------------------------------------\n\nTITLE: Converting string to int with option type in ReScript\nDESCRIPTION: Parses a string to obtain an integer value, returning an option type. Returns Some(int) when the input is a valid number, None otherwise.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/int.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromString: string => option<int>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.log(Belt.Int.fromString(\"1\") === Some(1)) /* true */\n```\n\n----------------------------------------\n\nTITLE: Map MapWithKey Function Signature\nDESCRIPTION: Transforms values in a map using both key and value in the mapping function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map.mdx#2025-04-18_snippet_16\n\nLANGUAGE: rescript\nCODE:\n```\nlet mapWithKey: (t<'k, 'v, 'id>, ('k, 'v) => 'v2) => t<'k, 'v2, 'id>\n```\n\n----------------------------------------\n\nTITLE: Configuring ReScript Color Output with NINJA_ANSI_FORCED\nDESCRIPTION: Environment variable settings to control whether ReScript produces colored output in its error messages and build output. When set to 1, forces color output; when set to 0, disables color output; when unset, uses smart detection based on output context. Note that the compiler always receives the -color always flag regardless of this setting.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/build-configuration.mdx#2025-04-18_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nNINJA_ANSI_FORCED=1 # Forces color output\nNINJA_ANSI_FORCED=0 # Disables color output\n```\n\n----------------------------------------\n\nTITLE: Tuple Type Annotations in ReScript\nDESCRIPTION: Shows how to use tuple types in type annotations and create type aliases for tuples.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/tuple.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet ageAndName: (int, string) = (24, \"Lil' ReScript\")\n// a tuple type alias\ntype coord3d = (float, float, float)\nlet my3dCoordinates: coord3d = (20.0, 30.5, 100.0)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar ageAndName = [24, \"Lil' ReScript\"];\nvar my3dCoordinates = [20.0, 30.5, 100.0];\n```\n\n----------------------------------------\n\nTITLE: JavaScript DOM Interaction Example\nDESCRIPTION: Shows practical usage of objects for JavaScript DOM interaction without explicit type declarations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/object.mdx#2025-04-18_snippet_5\n\nLANGUAGE: reason\nCODE:\n```\n[@bs.val] external document: 'a = \"document\";\n\ndocument##addEventListener(\"mouseup\", _event => {\n  Js.log(\"clicked!\");\n});\n\nlet loc = document##location;\n\ndocument##location##href = \"rescript-lang.org\";\n```\n\nLANGUAGE: ml\nCODE:\n```\nexternal document: 'a = \"document\" [@@bs.val]\n\nlet () = document##addEventListener \"mouseup\" (fun _event ->\n  Js.log \"clicked!\"\n)\n\nlet loc = document##location\n\ndocument##location##href = \"rescript-lang.org\"\n```\n\n----------------------------------------\n\nTITLE: Adding Elements to Belt.Set in ReScript\nDESCRIPTION: Shows how to add elements to a Belt.Set and demonstrates that adding an existing element doesn't change the set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet s0 = Belt.Set.make(~id=module(IntCmp))\nlet s1 = s0->Belt.Set.add(1)\nlet s2 = s1->Belt.Set.add(2)\nlet s3 = s2->Belt.Set.add(2)\ns0->Belt.Set.toArray /* [] */\ns1->Belt.Set.toArray /* [1] */\ns2->Belt.Set.toArray /* [1, 2] */\ns3->Belt.Set.toArray /* [1,2 ] */\ns2 == s3 /* true */\n```\n\n----------------------------------------\n\nTITLE: Using ignore() with Uncurried Functions\nDESCRIPTION: Demonstrates how to call an uncurried function with a single unit argument using the ignore() function to handle the unit value properly in the compiled JavaScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/function.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nlet echo = (. a) => a\n\necho(. ignore())\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction echo(a) {\n  return a;\n}\n\necho(undefined);\n```\n\n----------------------------------------\n\nTITLE: Handling Optional Props in ReScript React Components\nDESCRIPTION: Shows how to define optional props for a component using the '?' symbol in the type definition. This allows components to accept props that might not always be provided by the parent component.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/import-export-reactjs.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\nmodule Confetti = {\n  type confettiProps = {\n    width: int,\n    height: int,\n    initialVelocityX?: int,\n    initialVelocityY?: int,\n  }\n\n  @module(\"react-confetti\") @react.component(: confettiProps)\n  external make: confettiProps => React.element = \"default\"\n}\n\n@react.component\nlet make = () => {\n  <Confetti width={300} height={300} />\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nimport ReactConfetti from \"react-confetti\";\nimport * as JsxRuntime from \"react/jsx-runtime\";\n\nvar Confetti = {};\n\nfunction Playground(props) {\n  return JsxRuntime.jsx(ReactConfetti, {\n              width: 300,\n              height: 300\n            });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dev-Only Sources in ReScript\nDESCRIPTION: Demonstrates how to mark directories as dev-only in rescript.json. These directories won't be built or exposed to third-parties.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/build-configuration.mdx#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sources\": {\n    \"dir\": \"test\",\n    \"type\": \"dev\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Stringifying JSON in ReScript\nDESCRIPTION: Shows how to use JSON.stringifyAny to convert ReScript values to JSON strings. This example demonstrates converting an array of strings to its JSON representation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/json.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\nConsole.log(JSON.stringifyAny([\"Amy\", \"Joe\"]))\n```\n\nLANGUAGE: js\nCODE:\n```\nconsole.log(JSON.stringify([\n  \"Amy\",\n  \"Joe\"\n]));\n```\n\n----------------------------------------\n\nTITLE: Array Element Testing in ReScript\nDESCRIPTION: some and every functions test array elements against predicates. some checks if any element matches, every checks if all elements match.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/array.mdx#2025-04-18_snippet_17\n\nLANGUAGE: rescript\nCODE:\n```\nBelt.Array.some([2, 3, 4], (x) => mod(x, 2) == 1) == true\nBelt.Array.every([1, 3, 5], (x) => mod(x, 2) == 1) == true\n```\n\n----------------------------------------\n\nTITLE: Declaring and Using Strings in ReScript\nDESCRIPTION: Examples of string declaration and multiline strings in ReScript. Strings are delimited using double quotes and can span multiple lines.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/primitive-types.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\nlet greeting = \"Hello world!\"\nlet multilineGreeting = \"Hello\n world!\"\n```\n\nLANGUAGE: js\nCODE:\n```\nvar greeting = \"Hello world!\";\nvar multilineGreeting = \"Hello\\n world!\";\n```\n\n----------------------------------------\n\nTITLE: Handling Conditional Rendering with React.null in ReScript\nDESCRIPTION: Shows how to handle conditional rendering in ReScript React using React.null for cases where nothing should be rendered.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/elements-and-jsx.mdx#2025-04-18_snippet_4\n\nLANGUAGE: ReScript\nCODE:\n```\nlet name = Some(\"Andrea\")\n\nlet element = switch name {\n  | Some(name) => <div> {React.string(\"Hello \" ++ name)} </div>\n  | None => React.null\n}\n\n<div> element </div>\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar name = \"Andrea\";\n\nvar element = name !== undefined ? React.createElement(\"div\", undefined, \"Hello \" + name) : null;\n\nReact.createElement(\"div\", undefined, element);\n```\n\n----------------------------------------\n\nTITLE: Binding Shadowing with Different Types in ReScript\nDESCRIPTION: Shows how binding shadowing allows reusing the same variable name for different types. Each new declaration creates a new binding rather than mutating the existing one.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/let-binding.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\nlet result = \"hello\"\nConsole.log(result) // prints \"hello\"\nlet result = 1\nConsole.log(result) // prints 1\n```\n\nLANGUAGE: js\nCODE:\n```\nvar result = 1;\nconsole.log(\"hello\");\nconsole.log(1);\n```\n\n----------------------------------------\n\nTITLE: Binding to Object and Array Methods with @bs.send.pipe in ReScript\nDESCRIPTION: Demonstrates how to use the @bs.send.pipe decorator to bind to a document.getElementById method and an array.fill method. The decorator allows piping the object as the last argument to the method call, providing a more natural syntax for method chaining.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/decorator_send_pipe.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\n// Bind to a method on an object\ntype document\n@bs.send.pipe(: document)\nexternal getElementById: string => Dom.element = \"getElementById\"\n@val external doc: document = \"document\"\nlet el = getElementById(\"myId\", doc)\n\n// Bind to a method on an array\n@bs.send.pipe(: array<'a>)\nexternal fillInPlace: 'a => array<'a> = \"fill\"\nlet a = fillInPlace(99, [1, 2, 3])\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar el = document.getElementById(\"myId\");\n\nvar a = [1, 2, 3].fill(99);\n```\n\n----------------------------------------\n\nTITLE: Concatenating Lists in ReScript\nDESCRIPTION: The concat function joins two lists together, returning a new list with all elements from both lists in order.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/list.mdx#2025-04-18_snippet_17\n\nLANGUAGE: rescript\nCODE:\n```\nlet concat: (t<'a>, t<'a>) => t<'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nBelt.List.concat(list{1, 2, 3}, list{4, 5}) // list{1, 2, 3, 4, 5}\n```\n\n----------------------------------------\n\nTITLE: Creating a HashMap in ReScript\nDESCRIPTION: Creates a new hash map by taking a comparator and hint size. Demonstrates usage with an example of creating an integer-based hash map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-map.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet make: (~hintSize: int, ~id: id('key, 'id)) => t('key, 'value, 'id);\n```\n\nLANGUAGE: rescript\nCODE:\n```\nmodule IntHash =\n  Belt.Id.MakeHashable({\n    type t = int;\n    let hash = a => a;\n    let eq = (a, b) => a == b;\n  });\n\nlet hMap = Belt.HashMap.make(~hintSize=10, ~id=(module IntHash));\n\nBelt.HashMap.set(hMap, 0, \"a\");\n```\n\n----------------------------------------\n\nTITLE: List Creation in ReScript\nDESCRIPTION: Demonstrates creation of immutable singly linked list in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/array-and-list.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet myList = list{1, 2, 3}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar myList = {\n  hd: 1,\n  tl: {\n    hd: 2,\n    tl: {\n      hd: 3,\n      tl: 0\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Checking List Equality with Custom Comparator in ReScript\nDESCRIPTION: The eq function checks if two lists are equal using a provided equality function for elements. It returns false if the lists have different lengths and true only if all corresponding elements satisfy the equality function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/list.mdx#2025-04-18_snippet_52\n\nLANGUAGE: rescript\nCODE:\n```\nBelt.List.eq(list{1, 2, 3}, list{1, 2}, (a, b) => a == b) /* false */\n\nBelt.List.eq(list{1, 2}, list{1, 2}, (a, b) => a == b) /* true */\n\nBelt.List.eq(list{1, 2, 3}, list{(-1), (-2), (-3)}, (a, b) => abs(a) == abs(b)) /* true */\n```\n\n----------------------------------------\n\nTITLE: Creating New Tuples from Existing Ones\nDESCRIPTION: Shows how to create new tuples by destructuring and modifying values from existing tuples.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/tuple.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet coordinates1 = (10, 20, 30)\nlet (c1x, _, _) = coordinates1\nlet coordinates2 = (c1x + 50, 20, 30)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar coordinates1 = [10, 20, 30];\nvar c1x = 10;\nvar coordinates2 = [60, 20, 30];\n```\n\n----------------------------------------\n\nTITLE: Reducing Array Elements in ReasonML\nDESCRIPTION: The reduce function executes a reducer function on each element of the array, resulting in a single output value. It takes an initial value for the accumulator.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array.mdx#2025-04-18_snippet_26\n\nLANGUAGE: ReasonML\nCODE:\n```\nlet reduce: (('b, 'a) => 'b, 'b, t<'a>) => 'b\n```\n\nLANGUAGE: ReasonML\nCODE:\n```\nlet sumOfSquares = (accumulator, item) => accumulator + item * item\n\nJs.Array.reduce(sumOfSquares, 0, [10, 2, 4]) == 120\nJs.Array.reduce(\"*\", 1, [10, 2, 4]) == 80\nJs.Array.reduce(\n  (acc, item) => acc + Js.String.length(item),\n  0,\n  [\"animal\", \"vegetable\", \"mineral\"],\n) == 22 // 6 + 9 + 7\nJs.Array.reduce((acc, item) => item /. acc, 1.0, [2.0, 4.0]) == 2.0 // 4.0 / (2.0 / 1.0)\n```\n\n----------------------------------------\n\nTITLE: Executing Lazy Computations with Pattern Matching\nDESCRIPTION: This snippet demonstrates an alternative way to execute lazy computations using pattern matching with the lazy pattern. This approach also triggers the computation and extracts the result.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/lazy-values.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nswitch expensiveFilesRead {\n| lazy(result) => Console.log(result)\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar result = CamlinternalLazy.force(expensiveFilesRead);\n```\n\n----------------------------------------\n\nTITLE: Initializing HashSet with Custom Hash Functions in ReScript\nDESCRIPTION: This snippet demonstrates how to create HashSets with custom hash functions. It defines two modules with different hash functions and creates two HashSets with these custom behaviors.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-set.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nmodule I0 = unpack(\n  Belt.Id.hashableU(\n    ~hash=(. a: int) => land(a, 65535),\n    ~eq=(. a, b) => a == b,\n  )\n)\n\nlet s0 = Belt.HashSet.make(~id=module(I0), ~hintSize=40)\n\nmodule I1 = unpack(\n  Belt.Id.hashableU(\n    ~hash=(. a: int) => land(a, 255),\n    ~eq=(. a, b) => a == b,\n  )\n)\n\nlet s1 = Belt.HashSet.make(~id=module(I1), ~hintSize=40)\n\nBelt.HashSet.add(s1, 0)\nBelt.HashSet.add(s1, 1)\n```\n\n----------------------------------------\n\nTITLE: Creating New Tuples from Existing Ones in ReScript\nDESCRIPTION: Shows how to create new tuples by destructuring and modifying values from existing tuples in ReScript. This approach is used instead of mutating tuples directly.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/tuple.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reason\nCODE:\n```\nlet coordinates1 = (10, 20, 30);\nlet (c1x, _, _) = coordinates1;\nlet coordinates2 = (c1x + 50, 20, 30);\n```\n\nLANGUAGE: ml\nCODE:\n```\nlet coordinates1 = (10, 20, 30)\nlet (c1x, _, _) = coordinates1\nlet coordinates2 = (c1x + 50, 20, 30)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar coordinates1 = [10, 20, 30];\nvar c1x = 10;\nvar coordinates2 = [60, 20, 30];\n```\n\n----------------------------------------\n\nTITLE: Understanding the React.ref type in ReScript\nDESCRIPTION: The basic structure of a React.ref type in ReScript, which is a container with a mutable current value. This is different from ReScript's built-in ref type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/refs-and-the-dom.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype t<'value> = { mutable current: 'value }\n```\n\n----------------------------------------\n\nTITLE: Creating Arrays Using Function (Uncurried) in ReScript\nDESCRIPTION: Uncurried version of makeBy that creates an array by applying a function to each index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/array.mdx#2025-04-18_snippet_18\n\nLANGUAGE: reason\nCODE:\n```\nlet makeByU: (int, [@bs] (int => 'a)) => array('a);\n```\n\n----------------------------------------\n\nTITLE: Using Hyphenated Tag Names in ReScript JSX\nDESCRIPTION: Demonstrates support for lowercase tags with hyphens in their name, enabling binding to web components. Note that prop names still cannot contain hyphens.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/jsx.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\n<model-viewer src touchActions=\"pan-y\"></model-viewer>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nReact.createElement(\"model-viewer\", {\n  \"touch-actions\": \"pan-y\",\n  src: src\n});\n```\n\n----------------------------------------\n\nTITLE: Complex Component with Multiple Props\nDESCRIPTION: Shows a complex JSX component with various prop types including boolean, string, integer, and optional values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/jsx.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\n<MyComponent\n  booleanAttribute={true}\n  stringAttribute=\"string\"\n  intAttribute=1\n  forcedOptional=?{Some(\"hello\")}\n  onClick={handleClick}>\n  <div> {React.string(\"hello\")} </div>\n</MyComponent>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nReact.createElement(MyComponent, {\n  children: React.createElement(\"div\", undefined, \"hello\"),\n  booleanAttribute: true,\n  stringAttribute: \"string\",\n  intAttribute: 1,\n  forcedOptional: \"hello\",\n  onClick: handleClick\n});\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching with Switch in ReScript\nDESCRIPTION: Shows how to use pattern matching with switch statements to handle different variants of a type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ReScript\nCODE:\n```\ntype payload =\n  | BadResult(int)\n  | GoodResult(string)\n  | NoResult\n\nlet data = GoodResult(\"Product shipped!\")\nswitch data {\n| GoodResult(theMessage) =>\n  Console.log(\"Success! \" ++ theMessage)\n| BadResult(errorCode) =>\n  Console.log(\"Something's wrong. The error code is: \" ++ Int.toString(errorCode))\n| NoResult =>\n  Console.log(\"Bah.\")\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar data = {\n  TAG: \"GoodResult\",\n  _0: \"Product shipped!\"\n};\n\nif (typeof data !== \"object\") {\n  console.log(\"Bah.\");\n} else if (data.TAG === \"BadResult\") {\n  console.log(\"Something's wrong. The error code is: \" + \"Product shipped!\".toString());\n} else {\n  console.log(\"Success! Product shipped!\");\n}\n```\n\n----------------------------------------\n\nTITLE: For Loop Syntax in ReScript\nDESCRIPTION: Demonstrates the basic syntax of for loops in ReScript, which iterate from a starting value up to and including the ending value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/control-flow.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nfor i in startValueInclusive to endValueInclusive {\n  Js.log(i)\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nfor(var i = startValueInclusive; i <= endValueInclusive; ++i){\n  console.log(i);\n}\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching Optimization in ReScript 9.0\nDESCRIPTION: Demonstrates improved code generation for pattern matching in ReScript 9.0 compared to 8.4.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2021-02-09-release-9-0.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\ntype test =\n  | NoArg\n  | AnotherNoArg\n  | OtherArg(int)\n\nlet test = x =>\n  switch x {\n  | NoArg => true\n  | _ => false\n  }\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction test(x){\n  return x === 0\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction test(x) {\n  if (typeof x === \"number\") {\n    return x === 0;\n  } else {\n    return false;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Compiled ReScript Code\nDESCRIPTION: Command to run the compiled JavaScript using Node.js after building ReScript code. This example is for the basic template.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/installation.mdx#2025-04-18_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nnode src/Demo.res.js\n```\n\n----------------------------------------\n\nTITLE: Checking if All Elements Satisfy a Condition in ReasonML\nDESCRIPTION: The every function tests whether all elements in the array pass the test implemented by the provided function. It returns true for empty arrays.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array.mdx#2025-04-18_snippet_14\n\nLANGUAGE: ReasonML\nCODE:\n```\nlet every: ('a => bool, t<'a>) => bool\n```\n\nLANGUAGE: ReasonML\nCODE:\n```\nlet isEven = x => mod(x, 2) == 0\nJs.Array.every(isEven, [6, 22, 8, 4]) == true\nJs.Array.every(isEven, [6, 22, 7, 4]) == false\n```\n\n----------------------------------------\n\nTITLE: Defining Tag Function Type Signature in ReScript\nDESCRIPTION: Shows the basic type signature for tag functions in ReScript that process template literals.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/tagged-templates.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nlet myTagFunction : (array<string>, array<'param>) => 'output\n```\n\n----------------------------------------\n\nTITLE: Accessing RegExp Result Data in ReScript\nDESCRIPTION: Functions to extract data from a RegExp result, including captures, matches, index, and input string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/re.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet captures: result => array<Js.nullable<string>>\n\nlet matches: result => array<string>\n\nlet index: result => int\n\nlet input: result => string\n```\n\n----------------------------------------\n\nTITLE: Iterating Array Elements in ReScript\nDESCRIPTION: Executes provided function once for each array element. Returns unit.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array-2.mdx#2025-04-18_snippet_31\n\nLANGUAGE: res\nCODE:\n```\nJs.Array2.forEach([\"a\", \"b\", \"c\"], x => Js.log(x)) == ()\n```\n\n----------------------------------------\n\nTITLE: For Loop Example in ReScript\nDESCRIPTION: A simple example of a for loop that counts from 1 to 3 and logs each number.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/control-flow.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\n// prints: 1 2 3, one per line\nfor x in 1 to 3 {\n  Js.log(x)\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nfor(var x = 1; x <= 3; ++x){\n  console.log(x);\n}\n```\n\n----------------------------------------\n\nTITLE: Example of using someBy in Belt.Range\nDESCRIPTION: Example demonstrating how to use someBy to check if any element in a range with a step satisfies a condition.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/range.mdx#2025-04-18_snippet_14\n\nLANGUAGE: reason\nCODE:\n```\nBelt.Range.someBy(1, 5, ~step=2, (i) => i mod 2 === 0); /* false */\n\nBelt.Range.someBy(0, 4, ~step=2, (i) => i mod 2 === 0); /* true */\n```\n\n----------------------------------------\n\nTITLE: Concatenating Arrays in ReScript\nDESCRIPTION: Returns a fresh array containing the concatenation of two arrays. Creates a new array even if one input is empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/array.mdx#2025-04-18_snippet_26\n\nLANGUAGE: reason\nCODE:\n```\nlet concat: (array('a), array('a)) => array('a);\n```\n\nLANGUAGE: reason\nCODE:\n```\nBelt.Array.concat([|1, 2, 3|], [|4, 5|]) == [|1, 2, 3, 4, 5|];\n\nBelt.Array.concat([||], [|\"a\", \"b\", \"c\"|]) == [|\"a\", \"b\", \"c\"|];\n```\n\n----------------------------------------\n\nTITLE: Using Pipe with Named Argument Placeholder in ReScript\nDESCRIPTION: Demonstrates using the pipe operator with a placeholder for a named argument. This allows piping a value into a specific named parameter position in the function call.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/pipe.mdx#2025-04-18_snippet_11\n\nLANGUAGE: res\nCODE:\n```\ngetName(input)\n  ->namePerson(~person=personDetails, ~name=_)\n```\n\nLANGUAGE: js\nCODE:\n```\nvar __x = getName(input);\nnamePerson(personDetails, __x);\n```\n\n----------------------------------------\n\nTITLE: Using setTimeout for Delayed Execution in ReScript\nDESCRIPTION: Example demonstrating setTimeout usage for delayed message logging.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/global.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet message = \"Timed out!\"\n\nJs.Global.setTimeout(() => Js.log(message), 1000)\n```\n\n----------------------------------------\n\nTITLE: ReScript Console Utility Functions\nDESCRIPTION: Utility functions for stack trace and performance timing. Includes trace for stack traces and timeStart/timeEnd for performance measurements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/console.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet trace: unit => unit\nlet timeStart: string => unit\nlet timeEnd: string => unit\n```\n\n----------------------------------------\n\nTITLE: Creating Emotion CSS-in-JS Bindings in ReScript\nDESCRIPTION: Defines simple bindings to the Emotion CSS-in-JS library, exposing functions for creating styles with JavaScript objects, raw CSS strings, keyframes, and class name composition.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/styling.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\n// src/Emotion.res\n\n@module(\"@emotion/css\") external css: {..} => string = \"css\"\n@module(\"@emotion/css\") external rawCss: string => string = \"css\"\n@module(\"@emotion/css\") external keyframes: {..} => string = \"css\"\n@module(\"@emotion/css\") external cx: array<string> => string = \"cx\"\n\n@module(\"@emotion/css\") external injectGlobal: string => unit = \"injectGlobal\"\n```\n\n----------------------------------------\n\nTITLE: Creating Reversed Array Copy in ReScript\nDESCRIPTION: Returns a fresh array with items from the original array in reverse order, preserving the original array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/array.mdx#2025-04-18_snippet_12\n\nLANGUAGE: reason\nCODE:\n```\nlet reverse: array('a) => array('a);\n```\n\nLANGUAGE: reason\nCODE:\n```\nBelt.Array.reverse([|10, 11, 12, 13, 14|]) == [|14, 13, 12, 11, 10|];\n```\n\n----------------------------------------\n\nTITLE: If Clause Pattern Matching in ReScript\nDESCRIPTION: Demonstrates using if clauses for additional condition checking in pattern matching.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rescript\nCODE:\n```\nswitch person1 {\n| Teacher(_) => () // do nothing\n| Student({reportCard: {gpa}}) if gpa < 0.5 =>\n  Js.log(\"What's happening\")\n| Student(_) =>\n  // fall-through, catch-all case\n  Js.log(\"Heyo\")\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nif (person1.TAG) {\n  if (person1.reportCard.gpa < 0.5) {\n    console.log(\"What's happening\");\n  } else {\n    console.log(\"Heyo\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Map Creation and Basic Operations - ReScript\nDESCRIPTION: Core functions for creating and manipulating mutable maps including make, clear, isEmpty and has operations\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-map.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reason\nCODE:\n```\nlet make: (~id: id('k, 'id)) => t('k, 'a, 'id);\nlet clear: t('a, 'b, 'c) => unit;\nlet isEmpty: t('a, 'b, 'c) => bool;\nlet has: (t('k, 'a, 'b), 'k) => bool;\n```\n\n----------------------------------------\n\nTITLE: Logging Functions in ReScript\nDESCRIPTION: Convenience functions for logging in ReScript, providing variants that accept different numbers of arguments. These are wrappers around JavaScript's console.log function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet log: 'a => unit\nlet log2: ('a, 'b) => unit\nlet log3: ('a, 'b, 'c) => unit\nlet log4: ('a, 'b, 'c, 'd) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet logMany: array<'a> => unit\n```\n\n----------------------------------------\n\nTITLE: Creating React Elements from Component Functions in ReScript\nDESCRIPTION: Explains how to create React elements from component functions using React.createElement in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/elements-and-jsx.mdx#2025-04-18_snippet_5\n\nLANGUAGE: ReScript\nCODE:\n```\ntype props = {name: string}\n\nlet render = (myComp: props => React.element) => {\n  <div> {React.createElement(myComp, {name: \"Franz\"})} </div>\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Array Elements with Index in ReScript\nDESCRIPTION: Creates a new array with all elements that pass the test implemented by the provided function, which receives both the element and its index. Returns an array of elements for which the predicate function returned true.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/array-2.mdx#2025-04-18_snippet_14\n\nLANGUAGE: ReScript\nCODE:\n```\nlet filteri: (t<'a>, ('a, int) => bool) => t<'a>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\n// keep only positive elements at odd indices\nlet positiveOddElement = (item, index) => mod(index, 2) == 1 && item > 0\n\nJs.Array2.filteri([6, 3, 5, 8, 7, -4, 1], positiveOddElement) == [3, 8]\n```\n\n----------------------------------------\n\nTITLE: Pipe with Array Operations\nDESCRIPTION: Shows how to use pipe operator with array operations like map and filter.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/pipe.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reason\nCODE:\n```\nlet result = [|1, 2, 3|]\n  ->map(a => a + 1)\n  ->filter(a => a mod 2 == 0)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = [1, 2, 3].map(function(a) {\n  return a + 1 | 0;\n}).filter(function(a) {\n  return a % 2 === 0;\n});\n```\n\n----------------------------------------\n\nTITLE: Direct Mutation of Ref Contents in ReScript\nDESCRIPTION: Shows how to directly mutate a ref value by assigning to its contents field.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/mutation.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nmyValue.contents = 6\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmyValue.contents = 6;\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching with Switch Expression in ReScript\nDESCRIPTION: Demonstrates pattern matching using switch expression with custom type shape having Circle and Square variants. The example shows how to destructure variants and perform conditional logic based on the matched pattern, returning appropriate string messages.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/language_switch.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype shape = Circle(float) | Square(float)\n\nlet shape = Square(3.0)\n\nlet message = switch shape {\n| Circle(radius) => \"Circle with radius \" ++ Float.toString(radius)\n| Square(length) => \"Square with sides of length \" ++ Float.toString(length)\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar shape = {\n  TAG: \"Square\",\n  _0: 3.0\n};\n\nvar message;\n\nmessage = shape.TAG === \"Circle\" ? \"Circle with radius \" + (3.0).toString() : \"Square with sides of length \" + (3.0).toString();\n```\n\n----------------------------------------\n\nTITLE: Using splitByReAtMost function in ReScript\nDESCRIPTION: Splits a string at every occurrence of a regular expression pattern with a limit on the number of resulting substrings. Combines regex splitting with a maximum count parameter.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/string-2.mdx#2025-04-18_snippet_23\n\nLANGUAGE: rescript\nCODE:\n```\nlet splitByReAtMost: (t, Js_re.t, ~limit: int) => array<option<t>>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.String2.splitByReAtMost(\"one: two: three: four\", %re(\"/\\s*:\\s*/\"), ~limit=3) == [\n    Some(\"one\"),\n    Some(\"two\"),\n    Some(\"three\"),\n  ]\n\nJs.String2.splitByReAtMost(\"one: two: three: four\", %re(\"/\\s*:\\s*/\"), ~limit=0) == []\n\nJs.String2.splitByReAtMost(\"one: two: three: four\", %re(\"/\\s*:\\s*/\"), ~limit=8) == [\n    Some(\"one\"),\n    Some(\"two\"),\n    Some(\"three\"),\n    Some(\"four\"),\n  ]\n```\n\n----------------------------------------\n\nTITLE: Global Value Binding in ReScript\nDESCRIPTION: Shows how to bind to global JavaScript values using @val external.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/interop-cheatsheet.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\n@val external setTimeout: (unit => unit, int) => float = \"setTimeout\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Converting Record Types to Abstract Records in ReScript\nDESCRIPTION: Uses @deriving(abstract) on a record type to expand it into creation, getter, and setter functions. This is useful for handling optional fields that shouldn't appear in JavaScript output when undefined.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/generate-converters-accessors.mdx#2025-04-18_snippet_13\n\nLANGUAGE: res\nCODE:\n```\n@deriving(abstract)\ntype person = {\n  name: string,\n  age: int,\n  job: string,\n};\n\n@val external john : person = \"john\";\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Variant Types in ReScript\nDESCRIPTION: Creates a simple variant type with three cases and demonstrates variable declaration using one of the variant constructors.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/variant.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\ntype myResponse =\n  | Yes\n  | No\n  | PrettyMuch\n\nlet areYouCrushingIt = Yes\n```\n\nLANGUAGE: js\nCODE:\n```\nvar areYouCrushingIt = /* Yes */0;\n```\n\n----------------------------------------\n\nTITLE: Array Splicing Operations in ReScript\nDESCRIPTION: Demonstrates various array splicing operations including removing elements and adding new ones at specific positions. All operations modify the original array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/array-2.mdx#2025-04-18_snippet_7\n\nLANGUAGE: res\nCODE:\n```\nlet arr = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\nJs.Array2.spliceInPlace(arr, ~pos=2, ~remove=2, ~add=[\"x\", \"y\", \"z\"]) == [\"c\", \"d\"]\narr == [\"a\", \"b\", \"x\", \"y\", \"z\", \"e\", \"f\"]\n\nlet arr2 = [\"a\", \"b\", \"c\", \"d\"]\nJs.Array2.spliceInPlace(arr2, ~pos=3, ~remove=0, ~add=[\"x\", \"y\"]) == []\narr2 == [\"a\", \"b\", \"c\", \"x\", \"y\", \"d\"]\n\nlet arr3 = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\nJs.Array2.spliceInPlace(arr3, ~pos=9, ~remove=2, ~add=[\"x\", \"y\", \"z\"]) == []\narr3 == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"x\", \"y\", \"z\"]\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Array Elements with Index in ReasonML\nDESCRIPTION: The forEachi function executes a provided function once for each array element, passing both the element and its index. It returns unit and is used for side effects.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array.mdx#2025-04-18_snippet_23\n\nLANGUAGE: ReasonML\nCODE:\n```\nlet forEachi: (('a, int) => unit, t<'a>) => unit\n```\n\nLANGUAGE: ReasonML\nCODE:\n```\nJs.Array.forEachi((item, index) => Js.log2(index + 1, item), [\"a\", \"b\", \"c\"]) == ()\n```\n\n----------------------------------------\n\nTITLE: Flattening Nested Lists in ReScript\nDESCRIPTION: The flatten function converts a list of lists into a single list by concatenating all the inner lists in order.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/list.mdx#2025-04-18_snippet_20\n\nLANGUAGE: rescript\nCODE:\n```\nlet flatten: t<t<'a>> => t<'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nBelt.List.flatten(list{list{1, 2, 3}, list{}, list{3}}) // list{1, 2, 3, 3}\n```\n\n----------------------------------------\n\nTITLE: Embedding top-level JavaScript code in ReScript with %%raw\nDESCRIPTION: This snippet demonstrates how to embed raw JavaScript code at the top level of a ReScript file using the [%%raw] syntax. This allows directly pasting JavaScript code that will be included as-is in the output.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/embed-raw-javascript.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\n[%%raw {|\n// look ma, regular JavaScript!\nvar message = \"hello\";\nfunction greet(m) {\n  console.log(m)\n}\n|}];\n```\n\nLANGUAGE: ml\nCODE:\n```\n[%%raw {|\n// look ma, regular JavaScript!\nvar message = \"hello\";\nfunction greet(m) {\n  console.log(m)\n}\n|}]\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// look ma, regular JavaScript!\nvar message = \"hello\";\nfunction greet(m) {\n  console.log(m)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SortArrayString Module\nDESCRIPTION: Specialized module for sorting arrays when key type is string, providing more efficient implementation than generic type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/sort-array.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reason\nCODE:\n```\nmodule String: Belt_SortArrayString\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Comparable Modules for Belt Collections\nDESCRIPTION: Demonstrates how to create custom comparable modules for Belt collections, using phantom types to ensure type safety when working with custom data types.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nmodule Comparable1 =\n  Belt.Id.MakeComparable(\n    {\n      type t = (int, int)\n      let cmp = ((a0, a1), (b0, b1)) =>\n        switch Pervasives.compare(a0, b0) {\n        | 0 => Pervasives.compare(a1, b1)\n        | c => c\n        }\n    }\n  )\n\nlet mySet1 = Belt.Set.make(~id=module(Comparable1))\n\nmodule Comparable2 =\n  Belt.Id.MakeComparable(\n    {\n      type t = (int, int)\n      let cmp = ((a0, a1), (b0, b1)) =>\n        switch Pervasives.compare(a0, b0) {\n        | 0 => Pervasives.compare(a1, b1)\n        | c => c\n        }\n    }\n  )\n\nlet mySet2 = Belt.Set.make(~id=module(Comparable2))\n\nlet mySet1: t<(int, int), Comparable1.identity>\nlet mySet2: t<(int, int), Comparable2.identity>\n```\n\n----------------------------------------\n\nTITLE: Type Annotation in ReScript\nDESCRIPTION: Shows how to explicitly annotate variables with types in ReScript, and how the compiler verifies these annotations against inferred types.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/type.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\nlet score: int = 10\n```\n\nLANGUAGE: js\nCODE:\n```\nvar score = 10;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Person Data Module with Shared Functions\nDESCRIPTION: Shows how to create a specific implementation of the MakeDataModule for a Person type with a toString function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/module-functions.mdx#2025-04-18_snippet_7\n\nLANGUAGE: res\nCODE:\n```\nmodule Person = {\n  type t = { firstName: string, lastName: string } \n  let toString = person => person.firstName ++ person.lastName\n}\n\nmodule PersonData = MakeDataModule(Person)\n```\n\nLANGUAGE: js\nCODE:\n```\n// Notice that none of the JS output references the MakeDataModule function\n\nfunction toString(person) {\n  return person.firstName + person.lastName;\n}\n\nvar Person = {\n  toString: toString\n};\n\nfunction log(a) {\n  console.log(\"The value is \" + toString(a));\n}\n\nfunction Person$MakeDataModule$Render(props) {\n  return toString(props.value);\n}\n\nvar Render = {\n  make: Person$MakeDataModule$Render\n};\n\nvar PersonData = {\n  log: log,\n  Render: Render\n};\n```\n\n----------------------------------------\n\nTITLE: Constraining Integer Arguments with Polymorphic Variants\nDESCRIPTION: Shows how to use polymorphic variants with @int annotation to constrain integer arguments to specific values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/bind-to-js-function.mdx#2025-04-18_snippet_8\n\nLANGUAGE: res\nCODE:\n```\n@val\nexternal testIntType: (\n  @int [\n    | #onClosed\n    | @as(20) #onOpen\n    | #inBinary\n  ])\n  => int = \"testIntType\"\ntestIntType(#inBinary)\n```\n\nLANGUAGE: js\nCODE:\n```\ntestIntType(21);\n```\n\n----------------------------------------\n\nTITLE: Setting Array Elements with Boolean Status Return in ReScript\nDESCRIPTION: The set function modifies an array in place by replacing the element at the specified index, returning a boolean indicating whether the update was successful (false means out of range).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/array.mdx#2025-04-18_snippet_6\n\nLANGUAGE: ReScript\nCODE:\n```\nlet set: (array<'a>, int, 'a) => bool\n```\n\n----------------------------------------\n\nTITLE: Using %%private Extension Point for Private Let Bindings in ReScript\nDESCRIPTION: Demonstrates how to make let bindings private within a module using the %%private extension point. The example shows a Calc module with a private mult function that is used internally by double and triple functions but is not accessible outside the module.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/extension_private_let.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\nmodule Calc = {\n  %%private(let mult = (x, y) => x * y)\n\n  let double = x => mult(x, 2)\n  let triple = x => mult(x, 3)\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction $$double(x) {\n  return x << 1;\n}\n\nfunction triple(x) {\n  return Math.imul(x, 3);\n}\n\nvar Calc = {\n  $$double: $$double,\n  triple: triple,\n};\n```\n\n----------------------------------------\n\nTITLE: Generating Accessors for Variants in ReScript\nDESCRIPTION: Uses @deriving(accessors) to automatically generate accessor functions for variant constructors. Payload variants create functions, while payload-less variants generate plain integers representing their internal structure.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/generate-converters-accessors.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\n@deriving(accessors)\ntype action =\n  | Click\n  | Submit(string)\n  | Cancel;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction submit(param_0) {\n  return /* Submit */[param_0];\n}\n\nvar click = /* Click */0;\n\nvar cancel = /* Cancel */1;\n\nexports.click  = click;\nexports.submit = submit;\nexports.cancel = cancel;\n```\n\n----------------------------------------\n\nTITLE: Checking Element Existence in Belt.Set in ReScript\nDESCRIPTION: Demonstrates how to check if an element exists in a Belt.Set using the has function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/set.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet set = Belt.Set.fromArray([1, 4, 2, 5], ~id=module(IntCmp))\n\nset->Belt.Set.has(3) /* false */\nset->Belt.Set.has(1) /* true */\n```\n\n----------------------------------------\n\nTITLE: Extracting Module Type from Existing Module in ReScript\nDESCRIPTION: This snippet demonstrates how to extract a module type from an existing module when no explicit module type is defined, using `module type of`. The example extends the `List` module from the standard library.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/module.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\nmodule type MyList = {\n  include (module type of List)\n  let myListFun: list<'a> => list<'a>\n}\n```\n\nLANGUAGE: js\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Executing Lazy Computation with Lazy.force\nDESCRIPTION: Shows how to execute a lazy computation using Lazy.force. The first call performs the computation and caches the result, while subsequent calls return the cached value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/lazy-values.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\n// First call. The computation happens\nJs.log(Lazy.force(expensiveFilesRead)) // logs \"Reading dir\" and the directory content\n\n// Second call. Will just return the already calculated result\nJs.log(Lazy.force(expensiveFilesRead)) // logs the directory content\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(CamlinternalLazy.force(expensiveFilesRead));\n\nconsole.log(CamlinternalLazy.force(expensiveFilesRead));\n```\n\n----------------------------------------\n\nTITLE: ReScript Scoped Polymorphic Logger Type Definition\nDESCRIPTION: Definition of a ReScript logger type with a scoped polymorphic function that can handle any type of input.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/scoped-polymorphic-types.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\ntype logger = { log: 'a. 'a => unit }\n\n@module(\"jsAPI\") external getLogger: unit => logger = \"getLogger\"\n```\n\n----------------------------------------\n\nTITLE: Binding Shadowing in ReScript\nDESCRIPTION: Demonstrates binding shadowing, where reusing the same binding name creates a new binding that shadows the previous one, without mutation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/let-binding.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nlet result = 0\nlet result = calculate(result)\nlet result = calculateSomeMore(result)\n```\n\nLANGUAGE: js\nCODE:\n```\nvar result = calculate(0);\nvar result$1 = calculateSomeMore(result);\n```\n\n----------------------------------------\n\nTITLE: Binding Shadowing in ReScript\nDESCRIPTION: Demonstrates binding shadowing where reusing the same binding name overshadows previous bindings with the same name. This provides a way to reuse variable names without mutation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/let-binding.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nlet result = 0\nlet result = calculate(result)\nlet result = calculateSomeMore(result)\n```\n\nLANGUAGE: js\nCODE:\n```\nvar result = calculate(0);\nvar result$1 = calculateSomeMore(result);\n```\n\n----------------------------------------\n\nTITLE: Float toPrecisionWithPrecision Function\nDESCRIPTION: Function to format a float with specified total number of significant digits. Takes digits parameter to control total precision.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/float.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\nlet toPrecisionWithPrecision: (float, ~digits: int) => string\n```\n\n----------------------------------------\n\nTITLE: Mutually Recursive Functions in ReScript\nDESCRIPTION: Shows how to define mutually recursive functions using the rec keyword and the and keyword to chain them together. The example shows two functions that call each other in a cycle.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/function.mdx#2025-04-18_snippet_16\n\nLANGUAGE: rescript\nCODE:\n```\nlet rec callSecond = () => callFirst()\nand callFirst = () => callSecond()\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction callSecond(_param) {\n  while(true) {\n    _param = undefined;\n    continue ;\n  };\n}\n\nfunction callFirst(_param) {\n  while(true) {\n    _param = undefined;\n    continue ;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Using the ignore() Function in ReScript\nDESCRIPTION: Shows how to use the ignore() function to discard the return value of a function call. This is useful when you need to call a function for its side effects but don't need its return value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/function.mdx#2025-04-18_snippet_20\n\nLANGUAGE: res\nCODE:\n```\nmySideEffect()->Promise.catch(handleError)->ignore\n\nJs.Global.setTimeout(myFunc, 1000)->ignore\n```\n\nLANGUAGE: js\nCODE:\n```\n$$Promise.$$catch(mySideEffect(), function (prim) {\n  return handleError(prim);\n});\n\nsetTimeout(function (prim) {\n  myFunc();\n}, 1000);\n```\n\n----------------------------------------\n\nTITLE: Creating a HashMap from an Array in ReScript\nDESCRIPTION: Creates a new hash map from an array of key-value pairs.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-map.mdx#2025-04-18_snippet_16\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromArray: (array(('key, 'value)), ~id: id('key, 'id)) => t('key, 'value, 'id);\n```\n\nLANGUAGE: rescript\nCODE:\n```\nmodule IntHash =\n  Belt.Id.MakeHashable({\n    type t = int;\n    let hash = a => a;\n    let eq = (a, b) => a == b;\n  });\n  \nlet s0 = Belt.HashMap.fromArray([|(1, \"value1\"), (2, \"value2\")|], ~id=(module IntHash));\nBelt.HashMap.toArray(s0) == [|(1, \"value1\"), (2, \"value2\")|];\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Modules in ReScript\nDESCRIPTION: Illustrates how to create nested modules in ReScript. Nested modules can be accessed using multiple dot notations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/module.mdx#2025-04-18_snippet_2\n\nLANGUAGE: ReScript\nCODE:\n```\nmodule MyModule = {\n  module NestedModule = {\n    let message = \"hello\"\n  }\n}\n\nlet message = MyModule.NestedModule.message\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar NestedModule = {\n  message: message\n};\n\nvar MyModule = {\n  NestedModule: NestedModule\n};\n\nvar message = MyModule.NestedModule.message;\n```\n\n----------------------------------------\n\nTITLE: Using substring function in ReScript\nDESCRIPTION: Extracts characters between two indices from a string. Returns characters from the starting index up to but not including the ending index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/string-2.mdx#2025-04-18_snippet_28\n\nLANGUAGE: rescript\nCODE:\n```\nlet substring: (t, ~from: int, ~to_: int) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.String2.substring(\"playground\", ~from=3, ~to_=6) == \"ygr\"\nJs.String2.substring(\"playground\", ~from=6, ~to_=3) == \"ygr\"\nJs.String2.substring(\"playground\", ~from=4, ~to_=12) == \"ground\"\n```\n\n----------------------------------------\n\nTITLE: Example: Implementing startsWith Using RegExp in ReScript\nDESCRIPTION: Demonstrates how to implement a simple startsWith function using RegExp in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/re.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nlet str = \"hello world!\"\n\nlet startsWith = (target, substring) => Js.Re.fromString(\"^\" ++ substring)->Js.Re.test_(target)\n\nJs.log(str->startsWith(\"hello\")) /* prints \"true\" */\n```\n\n----------------------------------------\n\nTITLE: Using Generated Variant Accessors\nDESCRIPTION: Example showing how to use the accessors generated from a variant type. This is useful when passing accessor functions as higher-order functions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/generate-converters-accessors.mdx#2025-04-18_snippet_1\n\nLANGUAGE: ReScript\nCODE:\n```\nlet s = submit(\"hello\"); /* gives Submit(\"hello\") */\n```\n\n----------------------------------------\n\nTITLE: Polymorphic Variant Constructor Arguments in ReScript\nDESCRIPTION: Demonstrates how to define and use polymorphic variants with constructor arguments. Similar to regular variants, constructors can take one or more arguments.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/polymorphic-variant.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\ntype account = [\n  | #Anonymous\n  | #Instagram(string)\n  | #Facebook(string, int)\n]\n\nlet me: account = #Instagram(\"Jenny\")\nlet him: account = #Facebook(\"Josh\", 26)\n```\n\nLANGUAGE: js\nCODE:\n```\nvar me = {\n  NAME: \"Instagram\",\n  VAL: \"Jenny\"\n};\n\nvar him = {\n  NAME: \"Facebook\",\n  VAL: [\n    \"Josh\",\n    26\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Using Variants with Constructor Arguments\nDESCRIPTION: Example of creating values using variant constructors that take arguments. Shows how to pass the required data to each constructor, which compiles to JavaScript objects with TAG and numbered fields.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/variant.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet myAccount = Facebook(\"Josh\", 26)\nlet friendAccount = Instagram(\"Jenny\")\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar myAccount = {\n  TAG: \"Facebook\",\n  _0: \"Josh\",\n  _1: 26\n};\nvar friendAccount = {\n  TAG: \"Instagram\",\n  _0: \"Jenny\"\n};\n```\n\n----------------------------------------\n\nTITLE: Executing a Function on Array Elements with Index in ReScript\nDESCRIPTION: Executes the provided function once for each array element. The function takes both the array element and its index as parameters and returns unit. Used for processing array elements with access to their positions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/array.mdx#2025-04-18_snippet_19\n\nLANGUAGE: rescript\nCODE:\n```\nlet forEachi: (('a, int) => unit, t<'a>) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\n// display all elements in an array as a numbered list\nJs.Array.forEachi((item, index) => Js.log2(index + 1, item), [\"a\", \"b\", \"c\"]) == ()\n```\n\n----------------------------------------\n\nTITLE: Zipping Arrays with Function (Uncurried) in ReScript\nDESCRIPTION: Uncurried version of zipBy that combines elements from two arrays using a function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/array.mdx#2025-04-18_snippet_23\n\nLANGUAGE: reason\nCODE:\n```\nlet zipByU: (array('a), array('b), [@bs] (('a, 'b) => 'c)) => array('c);\n```\n\n----------------------------------------\n\nTITLE: Applying a Functor in ReScript\nDESCRIPTION: This example shows how to apply a functor (MakeSet) to create a new module (SetOfIntPairs). It includes the definition of the IntPair module and the application of the MakeSet functor.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/module.mdx#2025-04-18_snippet_16\n\nLANGUAGE: res\nCODE:\n```\nmodule IntPair = {\n  type t = (int, int)\n  let equal = ((x1: int, y1: int), (x2, y2)) => x1 == x2 && y1 == y2\n  let create = (x, y) => (x, y)\n}\n\n/* IntPair abides by the Comparable signature required by MakeSet */\nmodule SetOfIntPairs = MakeSet(IntPair)\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction equal(param, param$1) {\n  if (param[0] === param$1[0]) {\n    return param[1] === param$1[1];\n  } else {\n    return false;\n  }\n}\n\nfunction create(x, y) {\n  return [x, y];\n}\n\nvar IntPair = {\n  equal: equal,\n  create: create,\n};\n\nvar SetOfIntPairs = {\n  empty: /* [] */ 0,\n  add: add,\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Copy of an Array in ReScript\nDESCRIPTION: The copy function returns a fresh array containing the same elements as the original array, creating a new array even if the original is empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/array.mdx#2025-04-18_snippet_30\n\nLANGUAGE: ReScript\nCODE:\n```\nlet copy: array<'a> => array<'a>\n```\n\n----------------------------------------\n\nTITLE: Forcing Lazy Computations in ReScript\nDESCRIPTION: Demonstrates different ways to force lazy value computation including direct force calls and pattern matching.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/lazy-values.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\nlet computation = lazy(1);\n\n// Returns 1\nLazy.force(computation);\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet computation = lazy(\"computed\");\n\nswitch computation {\n| lazy(\"computed\") => Js.log(\"ok\")\n| _ => Js.log(\"not ok\")\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Module Signatures in ReScript\nDESCRIPTION: Shows how to create a module signature using 'module type'. The signature defines requirements that a module must satisfy to match the signature.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/module.mdx#2025-04-18_snippet_6\n\nLANGUAGE: ReScript\nCODE:\n```\nmodule type EstablishmentType = {\n  type profession\n  let getProfession: profession => string\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Elements to Belt.Set in ReScript\nDESCRIPTION: Demonstrates how to add multiple elements to a Belt.Set using the mergeMany function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet set = Belt.Set.make(~id=module(IntCmp))\n\nlet newSet = set->Belt.Set.mergeMany([5, 4, 3, 2, 1])\nnewSet->Belt.Set.toArray /* [1, 2, 3, 4, 5] */\n```\n\n----------------------------------------\n\nTITLE: Using JavaScript Bindings with Polymorphic Variants\nDESCRIPTION: Demonstrates how to use the polymorphic variant bindings to JavaScript functions. The code compiles to clean JavaScript while maintaining type safety.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/polymorphic-variant.mdx#2025-04-18_snippet_15\n\nLANGUAGE: res\nCODE:\n```\n// MyApp.res\n\nlet intl = IntlNumberFormat.make(#\\\"de-DE\")\n```\n\nLANGUAGE: js\nCODE:\n```\nvar intl = Intl.NumberFormat(\"de-DE\");\n```\n\n----------------------------------------\n\nTITLE: Constraining JS Function Arguments with Poly Variants in ReScript\nDESCRIPTION: Shows how to use polymorphic variants to constrain arguments of a JavaScript function binding in ReScript, ensuring more correct usage.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/bind-to-js-function.mdx#2025-04-18_snippet_5\n\nLANGUAGE: ReScript\nCODE:\n```\n@module(\"fs\")\nexternal readFileSync: (\n  ~name: string,\n  @string [\n    | #utf8\n    | @as(\"ascii\") #useAscii\n  ],\n) => string = \"readFileSync\"\n\nreadFileSync(~name=\"xx.txt\", #useAscii)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar Fs = require(\"fs\");\nFs.readFileSync(\"xx.txt\", \"ascii\");\n```\n\n----------------------------------------\n\nTITLE: Installing ReScript Dependencies with bun\nDESCRIPTION: bun command to install ReScript and its core library as dependencies in an existing project. This is used when manually integrating ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/installation.mdx#2025-04-18_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nbun install rescript @rescript/core\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Math Utility Module in ReScript\nDESCRIPTION: A basic ReScript module with two math utility functions that will be used for dynamic import examples.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2023-06-05-first-class-dynamic-import-support.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\n// MathUtils.res\nlet add = (a, b) => a + b\nlet sub = (a, b) => a - b\n```\n\n----------------------------------------\n\nTITLE: Accessing Dynamic Properties or Indices in JS Objects\nDESCRIPTION: Demonstrates the use of @bs.get_index and @bs.set_index to access dynamic properties or indices of a JavaScript object. It creates an Int32Array and shows how to set and get values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/bind-to-js-object.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reason\nCODE:\n```\ntype t;\n[@bs.new] external create: int => t = \"Int32Array\";\n[@bs.get_index] external get: (t, int) => int = \"\";\n[@bs.set_index] external set: (t, int, int) => unit = \"\";\n\nlet i32arr = create(3);\ni32arr->set(0, 42);\nJs.log(i32arr->get(0));\n```\n\nLANGUAGE: ocaml\nCODE:\n```\ntype t\nexternal create: int -> t = \"Int32Array\" [@@bs.new]\nexternal get: t -> int -> int = \"\" [@@bs.get_index]\nexternal set: t -> int -> int -> unit = \"\" [@@bs.set_index]\n\nlet i32arr = create 3\nlet () = i32arr |. (set 0 42)\nlet () = Js.log (i32arr |. (get 0))\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar i32arr = new Int32Array(3);\ni32arr[0] = 42;\nconsole.log(i32arr[0]);\n```\n\n----------------------------------------\n\nTITLE: Concatenating Multiple Arrays in ReScript\nDESCRIPTION: The concatMany function concatenates multiple arrays to the end of the first array, returning a new array. The original arrays are not modified.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array-2.mdx#2025-04-18_snippet_11\n\nLANGUAGE: rescript\nCODE:\n```\nlet concatMany: (t<'a>, array<t<'a>>) => t<'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.Array2.concatMany([\"a\", \"b\", \"c\"], [[\"d\", \"e\"], [\"f\", \"g\", \"h\"]]) == [\n    \"a\",\n    \"b\",\n    \"c\",\n    \"d\",\n    \"e\",\n    \"f\",\n    \"g\",\n    \"h\",\n  ]\n```\n\n----------------------------------------\n\nTITLE: Compiling ReScript to JavaScript using bsc\nDESCRIPTION: Shows the command to compile a ReScript file (MyFile.re) using the bsc compiler. The output is the generated JavaScript code, which includes the compiled Fibonacci function and its usage.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/try.mdx#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n❯ bsc MyFile.re\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE\n'use strict';\nfunction fib(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  } else {\n    return fib(n - 1 | 0) + fib(n - 2 | 0) | 0;\n  }\n}\nconsole.log(fib(0));\nexports.fib = fib;\n/*  Not a pure module */\n```\n\n----------------------------------------\n\nTITLE: Optional Labeled Arguments Without Default Value\nDESCRIPTION: Demonstrates how to create and use optional labeled arguments in ReScript functions. The example shows a print function that accepts an optional logLevel parameter to determine the logging behavior.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/language_optional_labeled_argument.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\nlet print = (text, ~logLevel=?) => {\n  switch logLevel {\n  | Some(#error) => Console.error(text)\n  | _ => Console.log(text)\n  }\n}\n\nprint(\"An info\")\nprint(\"An error\", ~logLevel=#error)\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction print(text, logLevel) {\n  if (logLevel === \"error\") {\n    console.error(text);\n  } else {\n    console.log(text);\n  }\n}\n\nprint(\"An info\", undefined);\n\nprint(\"An error\", \"error\");\n```\n\n----------------------------------------\n\nTITLE: Testing Array Elements with Every in ReScript\nDESCRIPTION: Tests if all elements in array satisfy a predicate function. Returns true if predicate is true for all items.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array-2.mdx#2025-04-18_snippet_23\n\nLANGUAGE: res\nCODE:\n```\nlet isEven = x => mod(x, 2) == 0\nJs.Array2.every([6, 22, 8, 4], isEven) == true\nJs.Array2.every([6, 22, 7, 4], isEven) == false\n```\n\n----------------------------------------\n\nTITLE: Basic List Operations Example\nDESCRIPTION: Examples of basic list operations including length calculation and element access.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/list.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\nBelt.List.length(list{1, 2, 3}) // 3\n```\n\n----------------------------------------\n\nTITLE: Preventing Invalid Access with Abstract Types in ReScript\nDESCRIPTION: Shows how using newType with @deriving(jsConverter) prevents consumers from directly accessing object properties, enforcing the use of provided accessors.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/generate-converters-accessors.mdx#2025-04-18_snippet_7\n\nLANGUAGE: res\nCODE:\n```\nlet myCoordinates = {\n  x: 10,\n  y: 20\n};\nlet jsCoords = coordinatesToJs(myCoordinates);\n\nlet x = jsCoords[\"x\"]; /* disallowed! Don't access the object's internal details */\n```\n\n----------------------------------------\n\nTITLE: Creating a MutableSet from Integer Array Example in ReasonML\nDESCRIPTION: Example demonstrating how to create a MutableSet from an array of integers using a custom integer comparator.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_5\n\nLANGUAGE: reasonml\nCODE:\n```\nmodule IntCmp =\n  Belt.Id.MakeComparable({\n    type t = int;\n    let cmp = Pervasives.compare;\n  });\n\nlet s0 = Belt.MutableSet.fromArray([|1, 3, 2, 4|], ~id=(module IntCmp))\n\ns0->Belt.MutableSet.toArray; /* [|1, 2, 3, 4|] */\n```\n\n----------------------------------------\n\nTITLE: Extension Point Example in ReScript\nDESCRIPTION: Demonstrates the use of extension points in ReScript, which are attributes that don't annotate an item but serve as placeholders for the compiler to substitute with another item.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/attribute.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\n%raw(\"var a = 1\")\n```\n\nLANGUAGE: js\nCODE:\n```\nvar a = 1\n```\n\n----------------------------------------\n\nTITLE: Implementing JSX v4 Features in ReScript\nDESCRIPTION: Demonstrates various JSX v4 features including automatic/classic mode components, prop type injection, React interfaces, and prop spreading. Shows both the ReScript implementation and corresponding JavaScript output.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2023-02-02-release-10-1.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\n// Set the jsx configuration per module\n@@jsxConfig({version: 4, mode: \"automatic\"})\n\nmodule AutomaticModeExample = {\n  // \"automatic\" mode will compile jsx to the React 18 compatible\n  // jsx-runtime calls\n  @@jsxConfig({version: 4, mode: \"automatic\"})\n\n  @react.component\n  let make = (~name) => {\n    <div> {React.string(`Hello ${name}`)} </div>\n  }\n}\n\nmodule ClassicModeExample = {\n  // \"classic\" mode will compile jsx to React.createElement calls\n  @@jsxConfig({version: 4, mode: \"classic\"})\n\n  @react.component\n  let make = (~name) => {\n    <div> {React.string(`Hello ${name}`)} </div>\n  }\n}\n\nmodule NoAttributeExample = {\n  // No need for `makeProps` anymore\n  type props = {name: string}\n\n  let make = (props: props) => {\n    <div> {React.string(`Hello ${props.name}`)} </div>\n  }\n}\n\nmodule ReactInterfaceExample: {\n  @react.component\n  let make: (~name: string, ~age: int=?) => React.element\n} = {\n  @react.component\n  let make = (~name, ~age=0) => {\n    <div>\n      {React.string(\n        `Hello ${name}, you are ${Belt.Int.toString(age)} years old.`,\n      )}\n    </div>\n  }\n}\n\nmodule PropTypeInjectionExample = {\n  // Let's assume we have a prop type that we wanna enforce\n  // as our labeled arguments\n  type someoneElsesProps = {isHuman: bool}\n\n  // Here we tell the `react.component` decorator what props to infer.\n  // Useful for e.g. NextJS usage, or to create components that should\n  // comply to certain library component interfaces\n  @react.component(: someoneElsesProps)\n  let make = (~isHuman) => {\n    let msg = switch isHuman {\n    | true => \"hello human\"\n    | false => \"hello fellow computer\"\n    }\n    <div> {React.string(msg)} </div>\n  }\n}\n\nmodule PropSpreadExample = {\n  // Note: This will require @rescript/react 0.11 or later\n  @@jsxConfig({version: 4, mode: \"automatic\"})\n\n  @react.component\n  let make = () => {\n    let props = {NoAttributeExample.name: \"World\"}\n\n    <NoAttributeExample {...props} />\n  }\n}\n\nlet root =\n  <div>\n    <AutomaticModeExample name=\"Automatic\" />\n    <ClassicModeExample name=\"Classic\" />\n    <NoAttributeExample name=\"NoAttribute\" />\n    <ReactInterfaceExample name=\"Interface\" />\n    <PropTypeInjectionExample isHuman=true />\n    <PropSpreadExample />\n  </div>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from \"react\";\nimport * as JsxRuntime from \"react/jsx-runtime\";\n\nfunction Playground$AutomaticModeExample(props) {\n  return JsxRuntime.jsx(\"div\", {\n              children: \"Hello \" + props.name + \"\"\n            });\n}\n\nvar AutomaticModeExample = {\n  make: Playground$AutomaticModeExample\n};\n\nfunction Playground$ClassicModeExample(props) {\n  return React.createElement(\"div\", undefined, \"Hello \" + props.name + \"\");\n}\n\nvar ClassicModeExample = {\n  make: Playground$ClassicModeExample\n};\n\nfunction make(props) {\n  return JsxRuntime.jsx(\"div\", {\n              children: \"Hello \" + props.name + \"\"\n            });\n}\n\nvar NoAttributeExample = {\n  make: make\n};\n\nfunction Playground$ReactInterfaceExample(props) {\n  var age = props.age;\n  var age$1 = age !== undefined ? age : 0;\n  return JsxRuntime.jsx(\"div\", {\n              children: \"Hello \" + props.name + \", you are \" + String(age$1) + \" years old.\"\n            });\n}\n\nvar ReactInterfaceExample = {\n  make: Playground$ReactInterfaceExample\n};\n\nfunction Playground$PropTypeInjectionExample(props) {\n  var msg = props.isHuman ? \"hello human\" : \"hello fellow computer\";\n  return JsxRuntime.jsx(\"div\", {\n              children: msg\n            });\n}\n\nvar PropTypeInjectionExample = {\n  make: Playground$PropTypeInjectionExample\n};\n\nfunction Playground$PropSpreadExample(props) {\n  return JsxRuntime.jsx(make, {\n              name: \"World\"\n            });\n}\n\nvar PropSpreadExample = {\n  make: Playground$PropSpreadExample\n};\n\nvar root = JsxRuntime.jsxs(\"div\", {\n      children: [\n        JsxRuntime.jsx(Playground$AutomaticModeExample, {\n              name: \"Automatic\"\n            }),\n        JsxRuntime.jsx(Playground$ClassicModeExample, {\n              name: \"Classic\"\n            }),\n        JsxRuntime.jsx(make, {\n              name: \"NoAttribute\"\n            }),\n        JsxRuntime.jsx(Playground$ReactInterfaceExample, {\n              name: \"Interface\"\n            }),\n        JsxRuntime.jsx(Playground$PropTypeInjectionExample, {\n              isHuman: true\n            }),\n        JsxRuntime.jsx(Playground$PropSpreadExample, {})\n      ]\n    });\n\nexport {\n  AutomaticModeExample ,\n  ClassicModeExample ,\n  NoAttributeExample ,\n  ReactInterfaceExample ,\n  PropTypeInjectionExample ,\n  PropSpreadExample ,\n  root ,\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Elements to Arrays in ReScript\nDESCRIPTION: Shows how to use unshift and unshiftMany to add elements to the beginning of an array. These functions modify the original array and return the new length of the array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array.mdx#2025-04-18_snippet_7\n\nLANGUAGE: ReScript\nCODE:\n```\nlet arr = [\"b\", \"c\", \"d\"]\nJs.Array.unshift(\"a\", arr) == 4\narr == [\"a\", \"b\", \"c\", \"d\"]\n\nlet arr2 = [\"d\", \"e\"]\nJs.Array.unshiftMany([\"a\", \"b\", \"c\"], arr2) == 5\narr2 == [\"a\", \"b\", \"c\", \"d\", \"e\"]\n```\n\n----------------------------------------\n\nTITLE: Type Inference Example in ReScript\nDESCRIPTION: Shows how object types are inferred without strict type checking against declarations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/object.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\ntype person = {\n  \"age\": int\n};\n\nlet me = {\n  \"age\": \"hello!\" // age is a string. No error.\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar me = {\n  \"age\": \"hello!\"\n};\n```\n\n----------------------------------------\n\nTITLE: Nullable Types in ReScript\nDESCRIPTION: Shows how to work with nullable values in ReScript using both the option type and Js.Nullable module. Includes examples of null, undefined, and conversion functions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/interop-cheatsheet.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reason\nCODE:\n```\nlet jsNull = Js.Nullable.null;\nlet jsUndefined = Js.Nullable.undefined;\nlet result1: Js.Nullable.t(string) = Js.Nullable.return(\"hello\");\nlet result2: Js.Nullable.t(int) = Js.Nullable.fromOption(Some(10));\nlet result3: option(int) = Js.Nullable.toOption(Js.Nullable.return(10));\n```\n\nLANGUAGE: ml\nCODE:\n```\nlet jsNull = Js.Nullable.null\nlet jsUndefined = Js.Nullable.undefined\nlet result1: string Js.Nullable.t = Js.Nullable.return \"hello\"\nlet result2: int Js.Nullable.t = Js.Nullable.fromOption (Some 10)\nlet result3: int option = Js.Nullable.toOption (Js.Nullable.return 10)\n```\n\n----------------------------------------\n\nTITLE: Using Division_by_zero Exception in ReScript\nDESCRIPTION: Shows how to handle the 'Division_by_zero' exception, which is raised by integer division when the denominator is zero. The example demonstrates safe division with exception handling.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/exception.mdx#2025-04-18_snippet_6\n\nLANGUAGE: ReScript\nCODE:\n```\n// ReScript raise `Division_by_zero` if the denominator is zero\nlet result = try Some(10 / 0) catch {\n| Division_by_zero => None\n}\n\nConsole.log(result) // None\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as Caml_int32 from \"./stdlib/caml_int32.js\";\nimport * as Caml_js_exceptions from \"./stdlib/caml_js_exceptions.js\";\n\nvar result;\n\ntry {\n  result = Caml_int32.div(10, 0);\n}\ncatch (raw_exn){\n  var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);\n  if (exn.RE_EXN_ID === \"Division_by_zero\") {\n    result = undefined;\n  } else {\n    throw exn;\n  }\n}\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Converting Date to Locale String in ReScript\nDESCRIPTION: Returns the time and date for the given Date in the current locale format. The output includes both date and time, formatted according to the user's locale settings.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_67\n\nLANGUAGE: ReScript\nCODE:\n```\nlet toLocaleString: t => string\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nJs.Date.toLocaleString(exampleDate) == \"11/29/1973, 10:30:54 PM\" // for en_US.utf8\nJs.Date.toLocaleString(exampleDate) == \"29.11.1973, 22:30:54\" // for de_DE.utf8\n```\n\n----------------------------------------\n\nTITLE: Initial ReScript Conversion with Raw JS\nDESCRIPTION: First step of conversion using ReScript's raw JavaScript embedding functionality to maintain the original code.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/converting-from-js.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\n%%raw(`\nconst school = require('school');\n\nconst defaultId = 10;\n\nfunction queryResult(usePayload, payload) {\n  if (usePayload) {\n    return payload.student;\n  } else {\n    return school.getStudentById(defaultId);\n  }\n}\n`)\n```\n\n----------------------------------------\n\nTITLE: Slicing Array in ReScript\nDESCRIPTION: The slice function returns a shallow copy of a portion of an array, specified by start and end indices. Negative indices indicate an offset from the end of the array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array-2.mdx#2025-04-18_snippet_18\n\nLANGUAGE: rescript\nCODE:\n```\nlet slice: (t<'a>, ~start: int, ~end_: int) => t<'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet arr = [100, 101, 102, 103, 104, 105, 106]\nJs.Array2.slice(arr, ~start=2, ~end_=5) == [102, 103, 104]\nJs.Array2.slice(arr, ~start=-3, ~end_=-1) == [104, 105]\nJs.Array2.slice(arr, ~start=9, ~end_=10) == []\n```\n\n----------------------------------------\n\nTITLE: Function Type Signatures for Currying Example\nDESCRIPTION: Type signatures demonstrating how currying works in ReScript, showing add as a function taking three integers, addFive as a partially applied function taking two integers, and twelve as the final integer result.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/bind-to-js-function.mdx#2025-04-18_snippet_13\n\nLANGUAGE: res\nCODE:\n```\nlet add: (int, int, int) => int\nlet addFive: (int, int) => int\nlet twelve: int\n```\n\n----------------------------------------\n\nTITLE: URL Record Example in ReScript\nDESCRIPTION: Demonstrates how a URL is parsed and represented as a record in ReScript, showing the structure for a sample URL.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/router.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\n{\n  path: list{\"book\", \"10\", \"edit\"},\n  hash: \"author\",\n  search: \"name=Jane\"\n}\n```\n\n----------------------------------------\n\nTITLE: Signature for flatMap Function in ReScript Result Module\nDESCRIPTION: Function signature for flatMap, which applies a function returning a Result to the Ok value of a Result.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/result.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\nlet flatMap: (t<'a, 'c>, 'a => t<'b, 'c>) => t<'b, 'c>\n```\n\n----------------------------------------\n\nTITLE: Labeled Arguments Function in ReScript\nDESCRIPTION: Demonstrates how to use labeled arguments with the ~ symbol for better argument clarity.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/function.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet drawCircle = (~radius as r, ~color as c) => {\n  setColor(c)\n  startAt(r, r)\n  // ...\n}\n\ndrawCircle(~radius=10, ~color=\"red\")\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction drawCircle(r, c) {\n  setColor(c);\n  return startAt(r, r);\n}\n\ndrawCircle(10, \"red\");\n```\n\n----------------------------------------\n\nTITLE: For Loop with Descending Range Example\nDESCRIPTION: A concrete example of a for loop that counts down from 3 to 1, printing each number.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/control-flow.mdx#2025-04-18_snippet_7\n\nLANGUAGE: res\nCODE:\n```\n// prints: 3 2 1, one per line\nfor x in 3 downto 1 {\n  Js.log(x)\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nfor(var x = 3; x >= 1; --x){\n  console.log(x);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Module Signature in ReScript\nDESCRIPTION: This example shows how to define a module signature in a .resi file, which serves as the interface for the corresponding .res file.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/module.mdx#2025-04-18_snippet_14\n\nLANGUAGE: res\nCODE:\n```\n/* file React.resi (interface. Compiles to the signature of React.res) */\ntype state = int\nlet render: string => string\n```\n\n----------------------------------------\n\nTITLE: Using @react.component with React.forwardRef\nDESCRIPTION: Shows how to use the @react.component decorator with React.forwardRef and demonstrates the expanded output.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/beyond-jsx.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nmodule FancyInput = {\n  @react.component\n  let make = React.forwardRef((~className=?, ~children, ref) =>\n    <div>\n      // use ref here\n    </div>\n  )\n}\n```\n\nLANGUAGE: rescript\nCODE:\n```\n// Simplified Output\ntype props<'className, 'children, 'ref> = {\n  className?: 'className,\n  children: 'children,\n  ref?: 'ref,\n}\n\nlet make = (\n  {?className, children, _}: props<'className, 'children, ReactRef.currentDomRef>,\n  ref: Js.Nullable.t<ReactRef.currentDomRef>,\n) =>\n  make(~className, ~children, ~ref, ())\n```\n\n----------------------------------------\n\nTITLE: Using Illegal Identifier Names in ReScript\nDESCRIPTION: This snippet demonstrates how to use illegal identifier names in ReScript, including names with special characters, reserved keywords, and capitalized names. It shows the escape hatch syntax using backslashes and double quotes.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/use-illegal-identifier-names.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\nlet \\\"my-🍎\\\" = 10\n\ntype element = {\n  \\\"aria-label\\\": string\n}\n\nlet myElement = {\n  \\\"aria-label\\\": \\\"close\\\"\n}\n\nlet label = myElement.\\\"aria-label\\\"\n\nlet calculate = (~\\\"Props\\\") => {\n  \\\"Props\\\" + 1\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar my$$unknown$unknown$unknown$unknown = 10;\n\nvar myElement = {\n  \\\"aria-label\\\": \\\"close\\\"\n};\n\nvar label = myElement[\\\"aria-label\\\"];\n\nfunction calculate(Props) {\n  return Props + 1 | 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Waiting for Multiple Promises with Promise.all\nDESCRIPTION: Example of how to wait for multiple promises using Js.Promise2.all and then process all the results together using pattern matching.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/async-await.mdx#2025-04-18_snippet_11\n\nLANGUAGE: rescript\nCODE:\n```\nlet pauseReturn = (value, timeout) => {\n  Js.Promise2.make((~resolve, ~reject) => {\n    Js.Global.setTimeout(() => {\n      resolve(. value)\n    }, timeout)->ignore\n  })\n}\n\nlet logMultipleValues = async () => {\n  let promise1 = pauseReturn(\"value1\", 2000)\n  let promise2 = pauseReturn(\"value2\", 1200)\n  let promise3 = pauseReturn(\"value3\", 500)\n\n  let all = await Js.Promise2.all([promise1, promise2, promise3])\n\n  switch all {\n  | [v1, v2, v3] => Js.log(`All values: ${v1}, ${v2}, ${v3}`)\n  | _ => Js.log(\"this should never happen\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting JavaScript Function to ReScript\nDESCRIPTION: This snippet demonstrates the conversion of a JavaScript function to ReScript syntax, including the use of object access for compatibility.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/converting-from-js.mdx#2025-04-18_snippet_2\n\nLANGUAGE: ReScript\nCODE:\n```\n%%raw(`\nconst school = require('school');\n`)\n\nlet defaultId = 10\n\nlet queryResult = (usePayload, payload) => {\n  if usePayload {\n    payload[\"student\"]\n  } else {\n    school[\"getStudentById\"](defaultId)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Splitting String Set by Value in ReScript\nDESCRIPTION: Divides a set into two parts based on a provided value and indicates if the value was present. Returns smaller elements in the first set, larger elements in the second set, and a boolean indicating if the split value was present.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/set-string.mdx#2025-04-18_snippet_11\n\nLANGUAGE: res\nCODE:\n```\nlet split: (t, value) => ((t, t), bool)\n```\n\nLANGUAGE: res\nCODE:\n```\nlet s0 = Belt.Set.String.fromArray([\"apple\", \"banana\", \"orange\"])\n\nlet ((smaller, larger), present) = s0->Belt.Set.String.split(\"banana\")\n\npresent /* true */\nsmaller->Belt.Set.String.toArray /* [\"apple\"] */\nlarger->Belt.Set.String.toArray /* [\"orange\"] */\n```\n\n----------------------------------------\n\nTITLE: For Loop Example in ReScript\nDESCRIPTION: A concrete example of a for loop that iterates from 1 to 3, printing each number. Shows how ReScript's for loop translates to JavaScript's traditional for loop with incrementing counter.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/control-flow.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\n// prints: 1 2 3, one per line\nfor x in 1 to 3 {\n  Console.log(x)\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nfor(var x = 1; x <= 3; ++x){\n  console.log(x);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating JavaScript Objects with Optional Fields in ReScript\nDESCRIPTION: Shows how to create JavaScript objects with optional fields using @optional annotation. Fields marked as optional that are not provided will not appear in the resulting JS object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/generate-converters-accessors.mdx#2025-04-18_snippet_16\n\nLANGUAGE: ReScript\nCODE:\n```\n@deriving(abstract)\ntype person = {\n  @optional name: string,\n  age: int,\n  job: string,\n};\n\nlet joe = person(~age=20, ~job=\"teacher\", ());\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar joe = {\n  age: 20,\n  job: \"teacher\"\n};\n```\n\n----------------------------------------\n\nTITLE: Array Type Definitions\nDESCRIPTION: Type definitions for JavaScript arrays and array-like objects in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array-2.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\ntype t<'a> = array<'a>\ntype array_like<'a>\n```\n\n----------------------------------------\n\nTITLE: Computing Set Intersection in ReasonML\nDESCRIPTION: Shows how to compute the intersection of two sets, returning a new set containing only elements that exist in both input sets.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set.mdx#2025-04-18_snippet_14\n\nLANGUAGE: reasonml\nCODE:\n```\nlet intersect: (t('value, 'id), t('value, 'id)) => t('value, 'id);\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet s0 = Belt.Set.fromArray([|5,2,3,5,6|], ~id=(module IntCmp));\nlet s1 = Belt.Set.fromArray([|5,2,3,1,5,4|], ~id=(module IntCmp));\nlet intersect = Belt.Set.intersect(s0, s1);\nintersect->Belt.Set.toArray; /* [|2,3,5|] */\n```\n\n----------------------------------------\n\nTITLE: Example of ReScript Code Using External Stdlib\nDESCRIPTION: A simple ReScript example that uses Array.forEach and Console.log, demonstrating how the code will be transformed when using an external stdlib configuration.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/build-external-stdlib.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nArray.forEach([1, 2, 3], num => Console.log(num))\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Type in ReScript\nDESCRIPTION: Defines the base JSON data structure type for ReScript's Json module.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/json.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\ntype t;\n```\n\n----------------------------------------\n\nTITLE: Multiple Attribute Examples in ReScript\nDESCRIPTION: Shows various attribute use cases including file-level warnings, type annotations, externals, record field renaming, and deprecation notices.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/attribute.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\n@@warning(\"-27\")\n\n\n@unboxed\ntype a = Name(string)\n\n@val external message: string = \"message\"\n\ntype student = {\n  age: int,\n  @as(\"aria-label\") ariaLabel: string,\n}\n\n@deprecated\nlet customDouble = foo => foo * 2\n\n@deprecated(\"Use SomeOther.customTriple instead\")\nlet customTriple = foo => foo * 3 \n```\n\nLANGUAGE: javascript\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Using the option Type in ReScript\nDESCRIPTION: Demonstrates how to use ReScript's option type to handle potentially null values. The example shows declaring None and Some values, and using pattern matching to safely handle both cases.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/newcomer-examples.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\nlet possiblyNullValue1 = None\nlet possiblyNullValue2 = Some(\"Hello\")\n\nswitch possiblyNullValue2 {\n| None => Js.log(\"Nothing to see here.\")\n| Some(message) => Js.log(message)\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar possiblyNullValue1;\nvar possiblyNullValue2 = \"Hello\";\n\nif (possiblyNullValue2 !== undefined) {\n  console.log(possiblyNullValue2);\n} else {\n  console.log(\"Nothing to see here.\");\n}\n```\n\n----------------------------------------\n\nTITLE: Finding First Element that Satisfies a Predicate in ReScript\nDESCRIPTION: The getBy function returns Some(value) for the first element in a list that satisfies a predicate function. It returns None if no element satisfies the function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/list.mdx#2025-04-18_snippet_54\n\nLANGUAGE: rescript\nCODE:\n```\nBelt.List.getBy(list{1, 4, 3, 2}, x => x > 3) /* Some(4) */\n\nBelt.List.getBy(list{1, 4, 3, 2}, x => x > 4) /* None */\n```\n\n----------------------------------------\n\nTITLE: Tuple Type Annotations in ReScript\nDESCRIPTION: Shows how to use tuple types in type annotations and create type aliases for tuples.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/tuple.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet ageAndName: (int, string) = (24, \"Lil' ReScript\")\n// a tuple type alias\ntype coord3d = (float, float, float)\nlet my3dCoordinates: coord3d = (20.0, 30.5, 100.0)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar ageAndName = [24, \"Lil' ReScript\"];\nvar my3dCoordinates = [20.0, 30.5, 100.0];\n```\n\n----------------------------------------\n\nTITLE: Using Index Getter and Setter\nDESCRIPTION: Demonstrates how to use get_index and set_index for accessing dynamic properties or indices in JavaScript objects.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/bind-to-js-object.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\ntype t\n@new external create: int => t = \"Int32Array\"\n@get_index external get: (t, int) => int = \"\"\n@set_index external set: (t, int, int) => unit = \"\"\n\nlet i32arr = create(3)\ni32arr->set(0, 42)\nConsole.log(i32arr->get(0))\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar i32arr = new Int32Array(3);\ni32arr[0] = 42;\nconsole.log(i32arr[0]);\n```\n\n----------------------------------------\n\nTITLE: Array Element Manipulation in ReScript\nDESCRIPTION: Collection of array manipulation functions including unshift, concat, and includes operations for adding elements and checking array contents.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/array.mdx#2025-04-18_snippet_6\n\nLANGUAGE: res\nCODE:\n```\nlet arr = [\"b\", \"c\", \"d\"]\nJs.Array.unshift(\"a\", arr) == 4\narr == [\"a\", \"b\", \"c\", \"d\"]\n\nJs.Array.concat([\"c\", \"d\", \"e\"], [\"a\", \"b\"]) == [\"a\", \"b\", \"c\", \"d\", \"e\"]\n\nJs.Array.includes(\"b\", [\"a\", \"b\", \"c\"]) == true\nJs.Array.includes(\"x\", [\"a\", \"b\", \"c\"]) == false\n```\n\n----------------------------------------\n\nTITLE: Chaining Promises with then_ in ReScript\nDESCRIPTION: Chains a promise transformation function that returns a new promise, equivalent to JavaScript's Promise.then().\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/promise.mdx#2025-04-18_snippet_12\n\nLANGUAGE: reason\nCODE:\n```\nlet then_: ('a => t('b), t('a)) => t('b);\n```\n\n----------------------------------------\n\nTITLE: Example: Creating and Pretty Printing JSON Object in ReScript\nDESCRIPTION: Example showing how to create a JSON object and convert it to a string with 2-space indentation for better readability.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/json.mdx#2025-04-18_snippet_27\n\nLANGUAGE: reason\nCODE:\n```\n/* Creates and stringifies a simple JS object with spacing */\n\n{\n  let dict = Js.Dict.empty();\n  Js.Dict.set(dict, \"name\", Js.Json.string(\"John Doe\"));\n  Js.Dict.set(dict, \"age\", Js.Json.number(30.0));\n  Js.Dict.set(\n    dict,\n    \"likes\",\n    Js.Json.stringArray([|\"bucklescript\", \"ocaml\", \"js\"|]),\n  );\n\n  Js.log(Js.Json.stringifyWithSpace(Js.Json.object_(dict), 2));\n};\n```\n\n----------------------------------------\n\nTITLE: Converting Set to Array in ReasonML\nDESCRIPTION: Demonstrates how to convert a set to an array of ordered elements using toArray.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set.mdx#2025-04-18_snippet_32\n\nLANGUAGE: reasonml\nCODE:\n```\nlet toArray: t('value, 'id) => array('value);\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet s0 = Belt.Set.fromArray([|3,2,1,5|], ~id=(module IntCmp));\n\ns0->Belt.Set.toArray; /* [|1,2,3,5|] */\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON in ReScript\nDESCRIPTION: Shows how to bind to JavaScript's JSON.parse and type the return value according to an expected shape. The example defines a type for the expected data structure and parses a JSON string containing an array of names.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/json.mdx#2025-04-18_snippet_0\n\nLANGUAGE: re\nCODE:\n```\n// declare the shape of the json you're binding to\ntype data = {names: array(string)};\n\n// bind to JS' JSON.parse\n[@bs.scope \"JSON\"] [@bs.val]\nexternal parseIntoMyData: string => data = \"parse\";\n\nlet result = parseIntoMyData({|{\"names\": [\"Luke\", \"Christine\"]}|});\nlet name1 = result.names[0];\n```\n\nLANGUAGE: ml\nCODE:\n```\n(* declare the shape of the json you're binding to *)\ntype data = {names: string array}\n\n(* bind to JS' JSON.parse *)\nexternal parseIntoMyData: string -> data = \"parse\"\n[@@bs.scope \"JSON\"] [@@bs.val]\n\nlet result = parseIntoMyData {|{\"names\": [\"Luke\", \"Christine\"]}|}\nlet name1 = (result.names).(0)\n```\n\nLANGUAGE: js\nCODE:\n```\nvar result = JSON.parse(\"{\\\"names\\\": [\\\"Luke\\\", \\\"Christine\\\"]}\");\nvar name1 = result.names[0];\n```\n\n----------------------------------------\n\nTITLE: String substrAtMost Function in ReScript\nDESCRIPTION: The substrAtMost function extracts a substring of a specified length from a starting position. Negative start positions count from the end, and if length is negative or start exceeds the string length, an empty string is returned.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/string.mdx#2025-04-18_snippet_15\n\nLANGUAGE: res\nCODE:\n```\nlet substrAtMost: (~from: int, ~length: int, t) => t\n```\n\nLANGUAGE: res\nCODE:\n```\nJs.String.substrAtMost(~from=3, ~length=4, \"abcdefghij\") == \"defg\"\nJs.String.substrAtMost(~from=-3, ~length=4, \"abcdefghij\") == \"hij\"\nJs.String.substrAtMost(~from=12, ~length=2, \"abcdefghij\") == \"\"\n```\n\n----------------------------------------\n\nTITLE: Using Raw CSS Strings with Emotion in ReScript\nDESCRIPTION: Demonstrates using Emotion's rawCss function to apply styles defined as template strings, allowing for traditional CSS syntax within ReScript components.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/styling.mdx#2025-04-18_snippet_12\n\nLANGUAGE: rescript\nCODE:\n```\nlet container = Emotion.rawCss(`\n  color: #fff;\n  background-color: red;\n`)\n\nlet app = <div className={container} />\n```\n\n----------------------------------------\n\nTITLE: Using Children Spread in ReScript JSX\nDESCRIPTION: Demonstrates the children spread syntax in ReScript JSX. This allows passing a value to the children prop without wrapping it in a list, useful for passing data structures or pre-existing lists.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/jsx.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reason\nCODE:\n```\n<MyComponent> ...myChild </MyComponent>;\n```\n\nLANGUAGE: reason\nCODE:\n```\n[@JSX] MyComponent.createElement(~children=myChild, ());\n```\n\nLANGUAGE: ml\nCODE:\n```\nMyComponent.createElement ~children:myChild () [@@JSX]\n```\n\nLANGUAGE: js\nCODE:\n```\nReact.createElement(MyComponent.make, MyComponent.makeProps(myChild, undefined));\n```\n\n----------------------------------------\n\nTITLE: Expanded Pattern Matching for Polymorphic Variants in ReScript\nDESCRIPTION: Shows the expanded form of pattern matching for polymorphic variants, equivalent to the shortened #... syntax shown in the previous example.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/polymorphic-variant.mdx#2025-04-18_snippet_7\n\nLANGUAGE: res\nCODE:\n```\nswitch myColor {\n| #Sapphire | #Neon | #Navy => Console.log(\"This is blue-ish\")\n| #Ruby | #Redwood | #Rust => Console.log(\"This is red-ish\")\n| other => Console.log2(\"Other color than red and blue: \", other)\n}\n```\n\n----------------------------------------\n\nTITLE: Potential Pattern Matching Pitfall with Binding Names (ReScript)\nDESCRIPTION: Illustrates a common pitfall in pattern matching where variable names in patterns are treated as bindings rather than value comparisons, which can lead to unexpected behavior.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_18\n\nLANGUAGE: res\nCODE:\n```\nlet coordinates = (10, 20, 30)\nlet centerY = 20\nswitch coordinates {\n| (x, centerY, _) => Js.log(x)\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar coordinates = [10, 20, 30];\nvar centerY = 20;\n\nconsole.log(10);\n```\n\n----------------------------------------\n\nTITLE: Defining ReScript React Component Types\nDESCRIPTION: Examples of defining component types using plain function type and React.component shorthand for interop with JS code.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/beyond-jsx.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\n// Plain function type\ntype friendComp =\n  ({\"name\": string, \"online\": bool}) => React.element;\n\n// Equivalent to\n// ({\"padding\": string, \"children\": React.element}) => React.element\ntype containerComp =\n  React.component<{\n    \"padding\": string,\n    \"children\": React.element\n  }>;\n```\n\n----------------------------------------\n\nTITLE: Binding to Nested Global Objects in ReScript\nDESCRIPTION: Shows how to bind to deeply nested properties of global objects using a tuple with @bs.scope. This example binds to window.location.ancestorOrigins.length.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/bind-to-global-js-values.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reason\nCODE:\n```\n[@bs.val] [@bs.scope (\"window\", \"location\", \"ancestorOrigins\")]\nexternal length: int = \"length\";\n```\n\nLANGUAGE: ocaml\nCODE:\n```\nexternal length: int = \"length\"\n[@@bs.val][@@bs.scope (\"window\", \"location\", \"ancestorOrigins\")]\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Creating an Array of Integers with Custom Step in ReScript\nDESCRIPTION: The rangeBy function creates an array of integers from start to finish with the specified step size. Returns an empty array for invalid parameters (step <= 0 or start > finish).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/array.mdx#2025-04-18_snippet_17\n\nLANGUAGE: ReScript\nCODE:\n```\nlet rangeBy: (int, int, ~step: int) => array<int>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nBelt.Array.rangeBy(0, 10, ~step=3) == [0, 3, 6, 9]\n\nBelt.Array.rangeBy(0, 12, ~step=3) == [0, 3, 6, 9, 12]\n\nBelt.Array.rangeBy(33, 0, ~step=1) == []\n\nBelt.Array.rangeBy(33, 0, ~step=-1) == []\n\nBelt.Array.rangeBy(3, 12, ~step=-1) == []\n\nBelt.Array.rangeBy(3, 3, ~step=0) == []\n\nBelt.Array.rangeBy(3, 3, ~step=1) == [3]\n```\n\n----------------------------------------\n\nTITLE: Creating Integer Range Arrays with Step in ReScript\nDESCRIPTION: Creates an array with integers from start to finish using the specified step increment. Returns an empty array when step is non-positive or start > finish.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/array.mdx#2025-04-18_snippet_17\n\nLANGUAGE: reason\nCODE:\n```\nlet rangeBy: (int, int, ~step: int) => array(int);\n```\n\nLANGUAGE: reason\nCODE:\n```\nBelt.Array.rangeBy(0, 10, ~step=3) == [|0, 3, 6, 9|];\n\nBelt.Array.rangeBy(0, 12, ~step=3) == [|0, 3, 6, 9, 12|];\n\nBelt.Array.rangeBy(33, 0, ~step=1) == [||];\n\nBelt.Array.rangeBy(33, 0, ~step=-1) == [||];\n\nBelt.Array.rangeBy(3, 12, ~step=-1) == [||];\n\nBelt.Array.rangeBy(3, 3, ~step=0) == [||];\n\nBelt.Array.rangeBy(3, 3, ~step=1) == [|3|];\n```\n\n----------------------------------------\n\nTITLE: Using TailwindCSS with Conditional Classes in ReScript React\nDESCRIPTION: Demonstrates how to combine TailwindCSS classes conditionally using pattern matching and string interpolation in a React component.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/styling.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\n@react.component\nlet make = (~active: bool) => {\n  let activeClass = if active {\n    \"text-green-600\"\n  }\n  else {\n    \"text-red-600\"\n  }\n\n  <div className={`border-1 border-black ${activeClass}`}>\n    {React.string(\"Hello World\")}\n  </div>\n}\n```\n\n----------------------------------------\n\nTITLE: Equivalent If-Else with Explicit Unit Return\nDESCRIPTION: This snippet shows the equivalent code with an explicit else branch returning the unit value, demonstrating how ReScript treats if statements without else branches.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/control-flow.mdx#2025-04-18_snippet_2\n\nLANGUAGE: re\nCODE:\n```\nif (showMenu) {\n  displayMenu();\n} else {\n  ();\n};\n```\n\nLANGUAGE: ml\nCODE:\n```\nif showMenu then\n  displayMenu ()\nelse\n  ()\n```\n\nLANGUAGE: js\nCODE:\n```\nif (showMenu) {\n  displayMenu()\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Type Signatures from ReScript Code\nDESCRIPTION: Shows how to use the bsc -i flag to display inferred type signatures from a ReScript file without compiling it to JavaScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/try.mdx#2025-04-18_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n❯ bsc -i MyFile.res\nlet fib: int => int\n```\n\n----------------------------------------\n\nTITLE: Setting Array Elements in ReScript\nDESCRIPTION: Sets the value at a specific index in an array, returning a boolean indicating success. Returns false if the index is out of range.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/array.mdx#2025-04-18_snippet_6\n\nLANGUAGE: reason\nCODE:\n```\nlet set: (array('a), int, 'a) => bool;\n```\n\n----------------------------------------\n\nTITLE: Using somei Function in ReSript\nDESCRIPTION: The somei function tests whether at least one element in the array passes the provided predicate function which can use both the element and its index. This example checks if any string has a length equal to its index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array.mdx#2025-04-18_snippet_31\n\nLANGUAGE: rescript\nCODE:\n```\n// Does any string in the array\n// have the same length as its index?\n\nlet sameLength = (str, index) => Js.String.length(str) == index\n\n// \"ef\" has length 2 and is it at index 2\nJs.Array.somei(sameLength, [\"ab\", \"cd\", \"ef\", \"gh\"]) == true\n// no item has the same length as its index\nJs.Array.somei(sameLength, [\"a\", \"bc\", \"def\", \"gh\"]) == false\n```\n\n----------------------------------------\n\nTITLE: Defining Closed Polymorphic Variant in ReScript\nDESCRIPTION: Demonstrates how to define a closed polymorphic variant type for RGB colors in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/polymorphic-variant.mdx#2025-04-18_snippet_18\n\nLANGUAGE: res\nCODE:\n```\ntype rgb = [ #Red | #Green | #Blue ]\n\nlet color: rgb = #Green\n```\n\n----------------------------------------\n\nTITLE: Checking String Prefixes in ReScript\nDESCRIPTION: Functions to check if a string starts with a specific substring, with an option to specify the starting position.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string.mdx#2025-04-18_snippet_36\n\nLANGUAGE: ReScript\nCODE:\n```\nlet startsWith: (t, t) => bool;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet startsWithFrom: (t, int, t) => bool;\n```\n\n----------------------------------------\n\nTITLE: Splicing Arrays In-Place in ReScript\nDESCRIPTION: The spliceInPlace function modifies an array by removing elements and adding new ones at a specified position. It returns an array of the removed elements. This function modifies the original array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array-2.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet spliceInPlace: (t<'a>, ~pos: int, ~remove: int, ~add: array<'a>) => t<'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet arr = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\nJs.Array2.spliceInPlace(arr, ~pos=2, ~remove=2, ~add=[\"x\", \"y\", \"z\"]) == [\"c\", \"d\"]\narr == [\"a\", \"b\", \"x\", \"y\", \"z\", \"e\", \"f\"]\n\nlet arr2 = [\"a\", \"b\", \"c\", \"d\"]\nJs.Array2.spliceInPlace(arr2, ~pos=3, ~remove=0, ~add=[\"x\", \"y\"]) == []\narr2 == [\"a\", \"b\", \"c\", \"x\", \"y\", \"d\"]\n\nlet arr3 = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\nJs.Array2.spliceInPlace(arr3, ~pos=9, ~remove=2, ~add=[\"x\", \"y\", \"z\"]) == []\narr3 == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"x\", \"y\", \"z\"]\n```\n\n----------------------------------------\n\nTITLE: Dictionary Type Definition\nDESCRIPTION: Type definition for the dictionary data structure that can hold values of a single type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/dict.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\ntype t<'a>\n```\n\n----------------------------------------\n\nTITLE: Creating a set from a pre-sorted array in ReScript\nDESCRIPTION: Creates a set from an already sorted array without verifying the sorting order. This is faster than fromArray but unsafe if the array isn't properly sorted.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-int.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reason\nCODE:\n```\nlet fromSortedArrayUnsafe: array(value) => t;\n```\n\n----------------------------------------\n\nTITLE: Array Reduction Operations\nDESCRIPTION: Functions for reducing arrays to single values, including standard reduction, reverse reduction, and indexed reduction variants.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/array.mdx#2025-04-18_snippet_38\n\nLANGUAGE: rescript\nCODE:\n```\nBelt.Array.reduce([2, 3, 4], 1, (a, b) => a + b) == 10\nBelt.Array.reduceReverse([\"a\", \"b\", \"c\", \"d\"], \"\", (a, b) => a ++ b) == \"dcba\"\n```\n\n----------------------------------------\n\nTITLE: Example: Parsing Simple JSON String in ReScript\nDESCRIPTION: Example showing how to parse a simple JSON string containing a single string value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/json.mdx#2025-04-18_snippet_22\n\nLANGUAGE: reason\nCODE:\n```\n/* parse a simple JSON string */\n\nlet json =\n  try (Js.Json.parseExn({| \"foo\" |})) {\n  | _ => failwith(\"Error parsing JSON string\")\n  };\n\nswitch (Js.Json.classify(json)) {\n| Js.Json.JSONString(value) => Js.log(value)\n| _ => failwith(\"Expected a string\")\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Record Types in Separate Modules\nDESCRIPTION: Demonstrates how to define a record type in a separate file or module. This shows the type declaration in a School module.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/record.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\n// School.res\ntype person = {age: int, name: string}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: ReScript Console Warning Methods\nDESCRIPTION: Warning-level logging methods supporting 1-4 arguments and array logging. These functions print warning messages to the console.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/console.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet warn: 'a => unit\nlet warn2: ('a, 'b) => unit\nlet warn3: ('a, 'b, 'c) => unit\nlet warn4: ('a, 'b, 'c, 'd) => unit\nlet warnMany: array<'a> => unit\n```\n\n----------------------------------------\n\nTITLE: Stringifying ReScript Values to JSON\nDESCRIPTION: Shows how to use the Js.Json.stringifyAny function to convert ReScript values into JSON strings. This example demonstrates converting an array of strings to its JSON representation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/json.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\nJs.log(Js.Json.stringifyAny([\"Amy\", \"Joe\"]))\n```\n\nLANGUAGE: js\nCODE:\n```\nconsole.log(JSON.stringify([\n  \"Amy\",\n  \"Joe\"\n]));\n```\n\n----------------------------------------\n\nTITLE: List FilterMap Function Signature\nDESCRIPTION: Function to map and filter a list in one operation, keeping only the Some results.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/list.mdx#2025-04-18_snippet_17\n\nLANGUAGE: ReScript\nCODE:\n```\nlet filterMap: ((. 'a) => option('b), t('a)) => t('b);\n```\n\n----------------------------------------\n\nTITLE: Mutable Record Fields in ReScript\nDESCRIPTION: Shows how to define and update mutable fields in records. While records are immutable by default, individual fields can be marked as mutable to allow in-place updates.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/record.mdx#2025-04-18_snippet_6\n\nLANGUAGE: reason\nCODE:\n```\ntype person = {\n  name: string,\n  mutable age: int\n};\n\nlet baby = {name: \"Baby ReScript\", age: 5};\nbaby.age = baby.age + 1; // `baby.age` is now 6. Happy birthday!\n```\n\nLANGUAGE: ml\nCODE:\n```\ntype person = {\n  name: string;\n  mutable age: int;\n}\n\nlet baby = {name = \"Baby ReScript\"; age = 5}\nlet () = baby.age <- baby.age + 1 (* `baby.age` is now 6. Happy birthday! *)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar baby = {\n  name: \"Baby ReScript\",\n  age: 5\n};\n\nbaby.age = baby.age + 1 | 0;\n```\n\n----------------------------------------\n\nTITLE: Dictionary Entries Example\nDESCRIPTION: Example showing how to get all entries from a dictionary.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/dict.mdx#2025-04-18_snippet_14\n\nLANGUAGE: rescript\nCODE:\n```\nJs.Dict.entries(ages) == [(\"Maria\", 30), (\"Vinh\", 22), (\"Fred\", 49)]\n```\n\n----------------------------------------\n\nTITLE: Complex Data Structures in ReScript\nDESCRIPTION: Defines complex nested data structures including a status variant, a record type for report cards, and a person variant with different cases for Teacher and Student.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_6\n\nLANGUAGE: res\nCODE:\n```\ntype status = Vacations(int) | Sabbatical(int) | Sick | Present\ntype reportCard = {passing: bool, gpa: float}\ntype person =\n  | Teacher({\n    name: string,\n    age: int,\n  })\n  | Student({\n    name: string,\n    status: status,\n    reportCard: reportCard,\n  })\n```\n\nLANGUAGE: js\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: ReScript Console Error Methods\nDESCRIPTION: Error-level logging methods supporting 1-4 arguments and array logging. These functions print error messages to the console.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/console.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet error: 'a => unit\nlet error2: ('a, 'b) => unit\nlet error3: ('a, 'b, 'c) => unit\nlet error4: ('a, 'b, 'c, 'd) => unit\nlet errorMany: array<'a> => unit\n```\n\n----------------------------------------\n\nTITLE: Curried and Uncurried Callbacks in Belt\nDESCRIPTION: Illustrates the difference between curried and uncurried callback functions in Belt, using the forEach function as an example.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet forEach: (t<'a>, 'a => unit) => unit\n\nlet forEachU: (t<'a>, (. 'a) => unit) => unit\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Value Kind Types in ReScript\nDESCRIPTION: Defines a GADT (Generalized Algebraic Data Type) that represents the possible types a JSON value can have, with type-level information about the corresponding JavaScript type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/json.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reason\nCODE:\n```\ntype kind('a) =\n  | String: kind(Js_string.t)\n  | Number: kind(float)\n  | Object: kind(Js_dict.t(t))\n  | Array: kind(array(t))\n  | Boolean: kind(bool)\n  | Null: kind(Js_types.null_val);\n```\n\n----------------------------------------\n\nTITLE: Using everyBy with Custom Step in ReScript\nDESCRIPTION: Demonstrates the use of Belt.Range.everyBy to check conditions on a range with a custom step. Two examples are shown: one with step 1 and another with step 2.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/range.mdx#2025-04-18_snippet_2\n\nLANGUAGE: ReScript\nCODE:\n```\nBelt.Range.everyBy(0, 4, ~step=1, (i) => mod(i, 2) === 0) /* false */\n\nBelt.Range.everyBy(0, 4, ~step=2, (i) => mod(i, 2) === 0) /* true */\n```\n\n----------------------------------------\n\nTITLE: Using Block Scope with Conditional Logic in ReScript\nDESCRIPTION: Demonstrates how ReScript's block scoping mechanism works with conditional statements. Variables defined within an if block are not accessible outside that block.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/let-binding.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nif displayGreeting {\n  let message = \"Enjoying the docs so far?\"\n  Console.log(message)\n}\n// `message` not accessible here!\n```\n\nLANGUAGE: js\nCODE:\n```\nif (displayGreeting) {\n  console.log(\"Enjoying the docs so far?\");\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing capitalized JavaScript object attributes in ReScript\nDESCRIPTION: Shows how to access JavaScript object properties that start with capital letters using the @bs.as annotation to specify the exact JavaScript attribute name in the compiled output.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/reason-compiler/latest/handling-js-naming-collisions.mdx#2025-04-18_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst payload = {\n  PostTitle: \"Welcome to Reason\",\n};\n\n/* this won't work in Reason since `PostTitle` is capitalized, so `paylod.PostTitle` would break */\nconst title = payload.PostTitle;\n```\n\nLANGUAGE: reason\nCODE:\n```\ntype payload {\n  [@bs.as \"PostTitle\"]\n  postTitle: string\n}\n\nlet payload = {\n  postTitle: \"Welcome to Reason\"\n}\n\n/* Reason is happy since we're using the valid `postTitle` field name */\nlet title = payload.postTitle;\n```\n\nLANGUAGE: js\nCODE:\n```\n/* The correct capitalized field name is output in the JavaScript! */\nvar title = payload.PostTitle;\n```\n\n----------------------------------------\n\nTITLE: Destructuring Tuples to Access Members\nDESCRIPTION: Shows how to extract specific members from a tuple using destructuring. The underscore (_) is used to ignore specific members that aren't needed.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/tuple.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nlet (_, y, _) = my3dCoordinates // now you've retrieved y\n```\n\nLANGUAGE: js\nCODE:\n```\nvar y = 30.5;\n```\n\n----------------------------------------\n\nTITLE: String Interpolation in ReScript vs JavaScript\nDESCRIPTION: Demonstrates how template string interpolation in ReScript gets converted to string concatenation in JavaScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/overview.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\n`Hello ${message}`\n```\n\nLANGUAGE: javascript\nCODE:\n```\n\"Hello \" + message\n```\n\n----------------------------------------\n\nTITLE: Matching Strings with Regular Expressions in ReScript\nDESCRIPTION: The match function matches a string against a given regular expression. It returns None if there's no match, or Some(array) containing the matched substrings and capture groups if there is a match.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string.mdx#2025-04-18_snippet_22\n\nLANGUAGE: rescript\nCODE:\n```\nlet match: (Js_re.t, t) => option(array(t));\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.String.match([%re \"/b[aeiou]t/\"], \"The better bats\") == Some([|\"bet\"|]);\nJs.String.match([%re \"/b[aeiou]t/g\"], \"The better bats\") == Some([|\"bet\", \"bat\"|]);\nJs.String.match([%re \"/(\\\\d+)-(\\\\d+)-(\\\\d+)/\"], \"Today is 2018-04-05.\") == Some([|\"2018-04-05\", \"2018\", \"04\", \"05\"|]);\nJs.String.match([%re \"/b[aeiou]g/\"], \"The large container.\") == None;\n```\n\n----------------------------------------\n\nTITLE: Creating Polymorphic Variants in ReScript\nDESCRIPTION: Demonstrates three different syntaxes for creating polymorphic variants in ReScript. Shows basic constructor, string literal with special characters, and number literal.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/polymorphic-variant.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\nlet myColor = #red\nlet myLabel = #\"aria-hidden\"\nlet myNumber = #7\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar myColor = \"red\";\nvar myLabel = \"aria-hidden\";\nvar myNumber = 7;\n```\n\n----------------------------------------\n\nTITLE: Exception Pattern Matching in ReScript\nDESCRIPTION: Shows how to match on exceptions while getting a return value from a function using List.find.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/exception.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reason\nCODE:\n```\nswitch (List.find(i => i === theItem, myItems)) {\n| item => Js.log(item)\n| exception Not_found => Js.log(\"No such item found!\")\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Fibonacci Function in ReScript\nDESCRIPTION: Example of a ReScript file (MyFile.res) with a recursive Fibonacci number implementation using pattern matching with the switch expression and logging the result of fib(0).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/try.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\n// MyFile.res\nlet rec fib = n => {\n  switch n {\n  | 0 | 1 => n\n  | n => fib(n - 1) + fib(n - 2)\n  }\n}\nJs.log(fib(0))\n```\n\n----------------------------------------\n\nTITLE: Installing ReScript with External Stdlib via NPM\nDESCRIPTION: Commands to install ReScript compiler as a development dependency and the standard library as a regular dependency. These commands ensure the runtime is available while keeping the compiler as a development-only tool.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/build-external-stdlib.mdx#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install bs-platform@9.0.0 --save-dev\nnpm install @rescript/std@9.0.0\n```\n\n----------------------------------------\n\nTITLE: Global Module Value Access in ReScript\nDESCRIPTION: Demonstrates accessing values from global JavaScript modules using @val and @scope decorators.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/interop-cheatsheet.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\n@val @scope(\"Math\")\nexternal random: unit => float = \"random\"\n\nlet someNumber = random()\n\n@val @scope((\"window\", \"location\", \"ancestorOrigins\"))\nexternal length: int = \"length\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar someNumber = Math.random();\n```\n\n----------------------------------------\n\nTITLE: Wrapping Children Elements in ReScript React\nDESCRIPTION: Shows how to create a function that wraps children elements in a div with a header.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/elements-and-jsx.mdx#2025-04-18_snippet_1\n\nLANGUAGE: ReScript\nCODE:\n```\nlet wrapChildren = (children: React.element) => {\n  <div>\n    <h1> {React.string(\"Overview\")} </h1>\n    children\n  </div>\n}\n\nwrapChildren(<div> {React.string(\"Let's use React with ReScript\")} </div>)\n```\n\n----------------------------------------\n\nTITLE: Extending Module Signatures in ReScript\nDESCRIPTION: Shows how to extend module signatures using 'include'. This is similar to extending modules but applies to module types.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/module.mdx#2025-04-18_snippet_8\n\nLANGUAGE: ReScript\nCODE:\n```\nmodule type BaseComponent = {\n  let defaultGreeting: string\n  let getAudience: (~excited: bool) => string\n}\n\nmodule type ActualComponent = {\n  /* the BaseComponent signature is copied over */\n  include BaseComponent\n  let render: unit => string\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Defining Variants with Constructor Arguments\nDESCRIPTION: Example of defining a variant type with constructors that hold additional data. The 'account' type has three constructors: None (with no arguments), Instagram (with a string), and Facebook (with a string and an int).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/variant.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\ntype account =\n  | None\n  | Instagram(string)\n  | Facebook(string, int)\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Checking Subset Relationship in ReScript\nDESCRIPTION: Determines whether the second set is a subset of the first set (all elements in second set exist in first).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-string.mdx#2025-04-18_snippet_25\n\nLANGUAGE: reasonml\nCODE:\n```\nlet subset: (t, t) => bool;\n```\n\n----------------------------------------\n\nTITLE: Executing Lazy Computations with Lazy.force in ReScript\nDESCRIPTION: Shows how to execute a lazy computation using Lazy.force. The first call performs the computation and caches the result, while subsequent calls return the cached value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/lazy-values.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\n// First call. The computation happens\nConsole.log(Lazy.force(expensiveFilesRead)) // logs \"Reading dir\" and the directory content\n\n// Second call. Will just return the already calculated result\nConsole.log(Lazy.force(expensiveFilesRead)) // logs the directory content\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(CamlinternalLazy.force(expensiveFilesRead));\n\nconsole.log(CamlinternalLazy.force(expensiveFilesRead));\n```\n\n----------------------------------------\n\nTITLE: Promise.all4 Implementation\nDESCRIPTION: Combines four promises into a single promise that resolves with a tuple of results\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/promise.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\nlet all4: ((t<'a0>, t<'a1>, t<'a2>, t<'a3>)) => t<('a0, 'a1, 'a2, 'a3)>\n```\n\n----------------------------------------\n\nTITLE: Nullable Types in ReScript\nDESCRIPTION: Shows how to work with nullable values in ReScript using Option types and Js.Nullable.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/interop-cheatsheet.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet a = Some(5) // compiles to 5\nlet b = None // compiles to undefined\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar a = 5;\nvar b;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet jsNull = Js.Nullable.null\nlet jsUndefined = Js.Nullable.undefined\nlet result1: Js.Nullable.t<string> = Js.Nullable.return(\"hello\")\nlet result2: Js.Nullable.t<int> = Js.Nullable.fromOption(Some(10))\nlet result3: option<int> = Js.Nullable.toOption(Js.Nullable.return(10))\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar Caml_option = require(\"./stdlib/caml_option.js\");\nvar Js_null_undefined = require(\"./stdlib/js_null_undefined.js\");\n\nvar jsNull = null;\nvar jsUndefined;\nvar result1 = \"hello\";\nvar result2 = Js_null_undefined.fromOption(10);\nvar result3 = Caml_option.nullable_to_opt(10);\n```\n\n----------------------------------------\n\nTITLE: Combining five Promises with Promise.all5 in ReScript\nDESCRIPTION: Creates a promise that resolves when all five promises resolve, returning a tuple of results.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/promise.mdx#2025-04-18_snippet_9\n\nLANGUAGE: reason\nCODE:\n```\nlet all5: ((t('a0), t('a1), t('a2), t('a3), t('a4))) => t(('a0, 'a1, 'a2, 'a3, 'a4));\n```\n\n----------------------------------------\n\nTITLE: Filtering Array Elements in ReasonML\nDESCRIPTION: The filter function creates a new array with all elements that pass the test implemented by the provided function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array.mdx#2025-04-18_snippet_16\n\nLANGUAGE: ReasonML\nCODE:\n```\nlet filter: ('a => bool, t<'a>) => t<'a>\n```\n\nLANGUAGE: ReasonML\nCODE:\n```\nlet nonEmpty = s => s != \"\"\nJs.Array.filter(nonEmpty, [\"abc\", \"\", \"\", \"def\", \"ghi\"]) == [\"abc\", \"def\", \"ghi\"]\n```\n\n----------------------------------------\n\nTITLE: Modifying String Sets in ReScript\nDESCRIPTION: Shows how to add and remove elements from string sets using various Belt.Set.String functions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/set-string.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet add: (t, value) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet s0 = Belt.Set.String.empty\nlet s1 = s0->Belt.Set.String.add(\"apple\")\nlet s2 = s1->Belt.Set.String.add(\"banana\")\nlet s3 = s2->Belt.Set.String.add(\"banana\")\ns0->Belt.Set.String.toArray /* [] */\ns1->Belt.Set.String.toArray /* [\"apple\"] */\ns2->Belt.Set.String.toArray /* [\"apple\", \"banana\"] */\ns3->Belt.Set.String.toArray /* [\"apple\", \"banana\"] */\ns2 == s3 /* true */\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet mergeMany: (t, array<value>) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet set = Belt.Set.String.empty\n\nlet newSet = set->Belt.Set.String.mergeMany([\"apple\", \"banana\", \"orange\", \"strawberry\"])\n\nnewSet->Belt.Set.String.toArray /* [\"apple\", \"banana\", \"orange\", \"strawberry\"] */\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet remove: (t, value) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet s0 = Belt.Set.String.fromArray([\"orange\", \"banana\", \"apple\"])\nlet s1 = s0->Belt.Set.String.remove(\"apple\")\nlet s2 = s1->Belt.Set.String.remove(\"banana\")\nlet s3 = s2->Belt.Set.String.remove(\"banana\")\n\ns1->Belt.Set.String.toArray /* [\"orange\", \"banana\"] */\ns2->Belt.Set.String.toArray /* [\"orange\"] */\ns2 == s3 /* true */\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet removeMany: (t, array<value>) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet set = Belt.Set.String.fromArray([\"apple\", \"banana\", \"orange\"])\n\nlet newSet = set->Belt.Set.String.removeMany([\"strawberry\", \"apple\", \"banana\", \"orange\"])\nnewSet->Belt.Set.String.toArray /* [] */\n```\n\n----------------------------------------\n\nTITLE: Reducing Arrays in ReScript\nDESCRIPTION: The reduce function applies a function to each element of an array, accumulating a single result.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/array.mdx#2025-04-18_snippet_36\n\nLANGUAGE: reason\nCODE:\n```\nlet reduce: (array('b), 'a, ('a, 'b) => 'a) => 'a;\n```\n\nLANGUAGE: reason\nCODE:\n```\nBelt.Array.reduce([|2, 3, 4|], 1, (+)) == 10;\n\nBelt.Array.reduce([|\"a\", \"b\", \"c\", \"d\"|], \"\", (++)) == \"abcd\";\n```\n\n----------------------------------------\n\nTITLE: Block Scope in ReScript\nDESCRIPTION: Shows how bindings can be scoped through curly braces in ReScript. Variables defined within a block scope are not accessible outside that scope, and the value of the last line is implicitly returned.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/let-binding.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\nlet message = {\n  let part1 = \"hello\"\n  let part2 = \"world\"\n  part1 ++ \" \" ++ part2\n}\n// `part1` and `part2` not accessible here!\n```\n\nLANGUAGE: js\nCODE:\n```\nvar message = \"hello world\";\n```\n\n----------------------------------------\n\nTITLE: Array Method Chaining in ReScript\nDESCRIPTION: Shows how to bind to and chain JavaScript array methods.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/interop-cheatsheet.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\n@send external map: (array<'a>, 'a => 'b) => array<'b> = \"map\"\n@send external filter: (array<'a>, 'a => 'b) => array<'b> = \"filter\"\n[1, 2, 3]\n  ->map(a => a + 1)\n  ->filter(a => mod(a, 2) == 0)\n  ->Console.log\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(\n  [1, 2, 3]\n    .map(function (a) {\n      return (a + 1) | 0;\n    })\n    .filter(function (a) {\n      return a % 2 === 0;\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Safely Accessing Array Elements in ReScript\nDESCRIPTION: Returns Some(value) if the index is within bounds, otherwise None. Useful for safe array access.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/array.mdx#2025-04-18_snippet_1\n\nLANGUAGE: ReScript\nCODE:\n```\nlet get: (array<'a>, int) => option<'a>\n```\n\n----------------------------------------\n\nTITLE: Normal Polymorphic Types Definition in ReScript\nDESCRIPTION: An example showing how to define a logger with normal polymorphic types, which has limitations when used with different data types.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/scoped-polymorphic-types.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\ntype logger<'a> = { log: 'a => unit}\n\n@module(\"jsAPI\") external getLogger: unit => logger<'a> = \"getLogger\"\n```\n\n----------------------------------------\n\nTITLE: List Transformation Functions\nDESCRIPTION: Functions for reversing, appending, and mapping over lists\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/list.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet revAppend: (t<'a>, t<'a>) => t<'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet rev: t<'a> => t<'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet mapRev: ((. 'a) => 'b, t<'a>) => t<'b>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet map: ((. 'a) => 'b, t<'a>) => t<'b>\n```\n\n----------------------------------------\n\nTITLE: Pipe First Array Operations with Belt\nDESCRIPTION: Demonstrates using Belt's Array functions with the pipe-first operator to filter, deduplicate and sort numbers\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reason\nCODE:\n```\nlet someNumbers = [|1, 1, 4, 2, 3, 6, 3, 4, 2|];\n\nlet greaterThan2UniqueAndSorted =\n  someNumbers\n  ->Belt.Array.keep(x => x > 2)\n  /* convert to and from set to make values unique */\n  ->Belt.Set.Int.fromArray\n  ->Belt.Set.Int.toArray; /* output is already sorted */\n\nJs.log2(\"result\", greaterThan2UniqueAndSorted);\n```\n\n----------------------------------------\n\nTITLE: Comparing Result Values with Custom Comparison Function in ReScript\nDESCRIPTION: Demonstrates the use of the cmp function to compare Result values using a custom comparison function, handling various combinations of Ok and Error variants.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/result.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet good1 = Belt.Result.Ok(59);\n\nlet good2 = Belt.Result.Ok(37);\n\nlet bad1 = Belt.Result.Error(\"invalid\");\n\nlet bad2 = Belt.Result.Error(\"really invalid\");\n\nlet mod10cmp = (a, b) => Pervasives.compare(a mod 10, b mod 10);\n\nBelt.Result.cmp(Ok(39), Ok(57), mod10cmp) == 1;\n\nBelt.Result.cmp(Ok(57), Ok(39), mod10cmp) == (-1);\n\nBelt.Result.cmp(Ok(39), Error(\"y\"), mod10cmp) == 1;\n\nBelt.Result.cmp(Error(\"x\"), Ok(57), mod10cmp) == (-1);\n\nBelt.Result.cmp(Error(\"x\"), Error(\"y\"), mod10cmp) == 0;\n```\n\n----------------------------------------\n\nTITLE: Getting a Value from a HashMap in ReScript\nDESCRIPTION: Retrieves the value associated with a specific key in the hash map. Returns None if the key doesn't exist.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-map.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet get: (t('key, 'value, 'id), 'key) => option('value);\n```\n\nLANGUAGE: rescript\nCODE:\n```\nmodule IntHash =\n  Belt.Id.MakeHashable({\n    type t = int;\n    let hash = a => a;\n    let eq = (a, b) => a == b;\n  });\n  \nlet s0 = Belt.HashMap.make(~hintSize=10, ~id=(module IntHash));\nBelt.HashMap.set(s0, 1, \"value1\");\n\nBelt.HashMap.get(s0, 1) == Some(\"value1\");\nBelt.HashMap.get(s0, 2) == None;\n```\n\n----------------------------------------\n\nTITLE: Importing Named Exports from Modules in ReScript\nDESCRIPTION: Shows how to import a named export from a module rather than the default export. This pattern is equivalent to the JavaScript 'import { Foo } from \"bar\"' syntax.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/import-export-reactjs.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\n// Equivalent of import { Foo } from \"bar\"\nmodule Foo = {\n  @module(\"bar\") @react.component\n  external make: unit => React.element = \"Foo\"\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering List Values in ReScript React\nDESCRIPTION: Shows how to render a list of items by converting it to an array first, noting the performance impact of using lists instead of arrays.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/arrays-and-keys.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\ntype todo = {id: string, text: string}\n\n@react.component\nlet make = () => {\n  let todoList = list{\n    {id: \"todo1\", text: \"Todo 1\"},\n    {id: \"todo2\", text: \"Todo 2\"},\n  }\n\n  let items =\n    todoList\n    ->Belt.List.toArray\n    ->Belt.Array.map(todo => {\n      <li key={todo.id}> {React.string(todo.text)} </li>\n    })\n\n  <div> {React.array(items)} </div>\n}\n```\n\n----------------------------------------\n\nTITLE: Checking String Ending in ReScript\nDESCRIPTION: The 'endsWith' function checks if a string ends with a specified substring. It takes two strings and returns a boolean indicating whether the first string ends with the second.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/string-2.mdx#2025-04-18_snippet_13\n\nLANGUAGE: rescript\nCODE:\n```\nlet endsWith: (t, t) => bool\n```\n\n----------------------------------------\n\nTITLE: Using mapWithDefault Function with Result Type in ReScript\nDESCRIPTION: Shows how to use the mapWithDefault function to handle both Ok and Error cases of a Result, providing a default value for the Error case.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/result.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet ok = Belt.Result.Ok(42)\nBelt.Result.mapWithDefault(ok, 0, (x) => x / 2) == 21;\n\nlet error = Belt.Result.Error(\"Invalid data\")\nBelt.Result.mapWithDefault(error, 0, (x) => x / 2) == 0;\n```\n\n----------------------------------------\n\nTITLE: Accessing NodeJS Special Variables with ReScript\nDESCRIPTION: Shows how to access NodeJS special variables (__dirname, __filename, _module, require) using the bs.node annotation in ReScript. Each variable is wrapped in an option type for type safety.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/reason-compiler/latest/nodejs-special-variables.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\nlet dirname: option(string) = [%bs.node __dirname];\nlet filename: option(string) = [%bs.node __filename];\nlet _module: option(Node.node_module) = [%bs.node _module];\nlet require: option(Node.node_require) = [%bs.node require];\n```\n\n----------------------------------------\n\nTITLE: Using make Function in ReScript\nDESCRIPTION: Demonstrates the use of the make function to create a Date object representing the current time.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet now = Js.Date.make()\n```\n\n----------------------------------------\n\nTITLE: Checking if String Contains Substring in ReScript\nDESCRIPTION: The includes function determines whether a string contains the specified substring, returning a boolean result.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string.mdx#2025-04-18_snippet_15\n\nLANGUAGE: reason\nCODE:\n```\nlet includes: (t, t) => bool;\n```\n\nLANGUAGE: reason\nCODE:\n```\nJs.String.includes(\"gram\", \"programmer\") == true;\nJs.String.includes(\"er\", \"programmer\") == true;\nJs.String.includes(\"pro\", \"programmer\") == true;\nJs.String.includes(\"xyz\", \"programmer.dat\") == false;\n```\n\n----------------------------------------\n\nTITLE: List Partition Operation - ReScript\nDESCRIPTION: Function that splits a list into two lists based on a predicate function. The first list contains elements that satisfy the predicate, the second contains elements that don't.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/list.mdx#2025-04-18_snippet_59\n\nLANGUAGE: rescript\nCODE:\n```\nBelt.List.partition(list{1, 2, 3, 4}, x => x > 2)\n```\n\n----------------------------------------\n\nTITLE: Iterating Array Elements with Index in ReScript\nDESCRIPTION: Executes provided function once for each array element with index. Returns unit.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array-2.mdx#2025-04-18_snippet_32\n\nLANGUAGE: res\nCODE:\n```\nJs.Array2.forEachi([\"a\", \"b\", \"c\"], (item, index) => Js.log2(index + 1, item)) == ()\n```\n\n----------------------------------------\n\nTITLE: Transforming Capitalized JSX Tag in ReScript\nDESCRIPTION: Demonstrates how a capitalized JSX tag is transformed in ReScript. The JSX syntax is converted to a function call with props.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/jsx.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\n<MyComponent name={\"ReScript\"} />\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nReact.createElement(\n  MyComponent.make,\n  MyComponent.makeProps(\"ReScript\", undefined)\n);\n```\n\nLANGUAGE: ReScript\nCODE:\n```\n@JSX MyComponent.createElement(~name=\"ReScript\", ~children=list{}, ())\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nReact.createElement(\n  MyComponent.make,\n  MyComponent.makeProps(\"ReScript\", undefined)\n);\n```\n\n----------------------------------------\n\nTITLE: Generated Converter Function Types for JS Objects in ReScript\nDESCRIPTION: Shows the types of the functions generated by @deriving(jsConverter). The converters are shallow and don't recursively convert nested fields, which preserves performance.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/generate-converters-accessors.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nlet coordinatesToJs: coordinates => {\"x\": int, \"y\": int};\n\nlet coordinatesFromJs: {.. \"x\": int, \"y\": int} => coordinates;\n```\n\n----------------------------------------\n\nTITLE: Using assign() to Copy and Merge JavaScript Objects\nDESCRIPTION: Examples demonstrating how to use assign() to create copies of objects and merge objects with overlapping properties. The target object is modified in the process.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/obj.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reasonml\nCODE:\n```\n/* Copy an object */\n\nlet obj = [%obj {a: 1}];\n\nlet copy = Js.Obj.assign(Js.Obj.empty(), obj);\n\n/* prints \"{ a: 1 }\" */\nJs.log(copy);\n\n/* Merge objects with same properties */\n\nlet target = [%obj {a: 1, b: 1}];\nlet source = [%obj {b: 2}];\n\nlet obj = Js.Obj.assign(target, source);\n\n/* prints \"{ a: 1, b: 2 }\" */\nJs.log(obj);\n\n/* prints \"{ a: 1, b: 2 }\", target is modified */\nJs.log(target);\n```\n\n----------------------------------------\n\nTITLE: Implementing Lower Bound Polymorphic Variants in ReScript\nDESCRIPTION: This example demonstrates lower bound ([>]) polymorphic variants in ReScript, where a minimum set of constructors is defined that must be included when extending the type. The basicBlueTone type enforces that Blue, DeepBlue, and LightBlue must be included in any extension.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/polymorphic-variant.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\ntype basicBlueTone<'a> = [> #Blue | #DeepBlue | #LightBlue ] as 'a\ntype color = basicBlueTone<[#Blue | #DeepBlue | #LightBlue | #Purple]>\n\nlet color: color = #Purple\n\n// This will fail due to missing minimum constructors:\ntype notWorking = basicBlueTone<[#Purple]>\n```\n\n----------------------------------------\n\nTITLE: Defining HashSet and Id Types in ReScript\nDESCRIPTION: This snippet defines the basic types used in the HashSet module. It includes the definition of the HashSet type and the id type used for customizable hash behavior.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/hash-set.mdx#2025-04-18_snippet_2\n\nLANGUAGE: ReScript\nCODE:\n```\ntype t<'a, 'id>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\ntype id<'a, 'id> = Belt.Id.hashable<'a, 'id>\n```\n\n----------------------------------------\n\nTITLE: Sorting Arrays In-Place with Custom Comparator in ReScript\nDESCRIPTION: The sortInPlaceWith function sorts an array in place using a custom comparison function. It modifies the original array and returns the sorted array. The comparison function should return a negative integer, zero, or a positive integer based on the comparison result.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array-2.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet sortInPlaceWith: (t<'a>, ('a, 'a) => int) => t<'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\n// sort by word length\nlet words = [\"horse\", \"aardvark\", \"dog\", \"camel\"]\nlet byLength = (s1, s2) => Js.String.length(s1) - Js.String.length(s2)\n\nJs.Array2.sortInPlaceWith(words, byLength) == [\"dog\", \"horse\", \"camel\", \"aardvark\"]\n\n// sort in reverse numeric order\nlet numbers = [3, 30, 10, 1, 20, 2]\nlet reverseNumeric = (n1, n2) => n2 - n1\nJs.Array2.sortInPlaceWith(numbers, reverseNumeric) == [30, 20, 10, 3, 2, 1]\n```\n\n----------------------------------------\n\nTITLE: Transforming Array Elements with map in ReScript\nDESCRIPTION: Creates a new array with the results of calling a provided function on every element in the array. The result array can have elements of a different type than the input array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/array-2.mdx#2025-04-18_snippet_21\n\nLANGUAGE: ReScript\nCODE:\n```\nlet map: (t<'a>, 'a => 'b) => t<'b>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nJs.Array2.map([12, 4, 8], x => x * x) == [144, 16, 64]\nJs.Array2.map([\"animal\", \"vegetable\", \"mineral\"], Js.String.length) == [6, 9, 7]\n```\n\n----------------------------------------\n\nTITLE: Building ReScript Project in Shell\nDESCRIPTION: Demonstrates the command to build a ReScript project, including its dependencies and pinned-dependencies.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/build-overview.mdx#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nrescript\n```\n\n----------------------------------------\n\nTITLE: Checking Conditions with every in ReScript\nDESCRIPTION: Shows how to use Belt.Range.every to check if all numbers in a range satisfy a condition. Two examples are provided: one that returns true and another that returns false.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/range.mdx#2025-04-18_snippet_1\n\nLANGUAGE: ReScript\nCODE:\n```\nBelt.Range.every(0, 4, (i) => i < 5) /* true */\n\nBelt.Range.every(0, 4, (i) => i < 4) /* false */\n```\n\n----------------------------------------\n\nTITLE: Creating Records with Optional Fields in ReScript\nDESCRIPTION: Demonstrates how to create records with optional fields, showing that omitted fields default to None.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/record.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\ntype person = {\n  age: int,\n  name?: string\n}\n\nlet me = {\n  age: 5,\n  name: \"Big ReScript\"\n}\n\nlet friend = {\n  age: 7\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar me = {\n  age: 5,\n  name: \"Big ReScript\"\n};\n\nvar friend = {\n  age: 7\n};\n```\n\n----------------------------------------\n\nTITLE: Block-body Function in ReScript\nDESCRIPTION: Demonstrates a function with a multi-line block body using curly braces.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/function.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet greetMore = (name) => {\n  let part1 = \"Hello\"\n  part1 ++ \" \" ++ name\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction greetMore(name) {\n  return \"Hello \" + name;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating JavaScript Objects\nDESCRIPTION: Demonstrates how to update properties of JavaScript objects using BS annotations and external bindings.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/object.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reason\nCODE:\n```\ntype student = {\n  [@bs.set] \"age\": int,\n  [@bs.set] \"name\": string,\n};\n[@bs.module \"MyJSFile\"] external student1: student = \"student1\";\n\nstudent1##name = \"Mary\";\n```\n\nLANGUAGE: ml\nCODE:\n```\ntype student = <\n  age: int [@bs.set];\n  name: string [@bs.set];\n> Js.t\nexternal student1: student = \"student1\" [@@bs.module \"MyJSFile\"]\n\nstudent1##name = \"Mary\"\n```\n\n----------------------------------------\n\nTITLE: Exception Handling with Lazy Values in ReScript\nDESCRIPTION: Shows how exceptions in lazy computations are handled and propagated when forced.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/lazy-values.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reason\nCODE:\n```\nlet readFile =\n  lazy({\n    raise(Not_found)\n  });\n\ntry (Lazy.force(readFile)) {\n| Not_found => Js.log(\"No file\")\n};\n```\n\n----------------------------------------\n\nTITLE: Finding Element Index from Specific Position in Array in ReScript\nDESCRIPTION: The indexOfFrom function returns the index of the first occurrence of a given value in the array, starting the search from a specified position. If the value is not found, it returns -1.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array-2.mdx#2025-04-18_snippet_14\n\nLANGUAGE: rescript\nCODE:\n```\nlet indexOfFrom: (t<'a>, 'a, ~from: int) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.Array2.indexOfFrom([\"a\", \"b\", \"a\", \"c\", \"a\"], \"a\", ~from=2) == 2\nJs.Array2.indexOfFrom([\"a\", \"b\", \"a\", \"c\", \"a\"], \"a\", ~from=3) == 4\nJs.Array2.indexOfFrom([\"a\", \"b\", \"a\", \"c\", \"a\"], \"b\", ~from=2) == -1\n```\n\n----------------------------------------\n\nTITLE: Mapping Array Elements with Index in ReScript\nDESCRIPTION: Creates new array with results of calling provided function on every element with index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array-2.mdx#2025-04-18_snippet_34\n\nLANGUAGE: res\nCODE:\n```\nlet product = (item, index) => item * index\nJs.Array2.mapi([10, 11, 12], product) == [0, 11, 24]\n```\n\n----------------------------------------\n\nTITLE: Global Module Value Access in ReScript\nDESCRIPTION: Demonstrates accessing values from global JavaScript modules using bs.scope. Examples show accessing Math.random() and nested window properties.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/interop-cheatsheet.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\n[@bs.val] [@bs.scope \"Math\"]\nexternal random: unit => float = \"random\";\n\nlet someNumber = random();\n\n[@bs.val] [@bs.scope (\"window\", \"location\", \"ancestorOrigins\")]\nexternal length: int = \"length\";\n```\n\nLANGUAGE: ml\nCODE:\n```\nexternal random: unit -> float = \"random\"\n[@@bs.val][@@bs.scope \"Math\"]\n\nlet someNumber = random ()\n\nexternal length: int = \"length\"\n[@@bs.val][@@bs.scope (\"window\", \"location\", \"ancestorOrigins\")]\n```\n\n----------------------------------------\n\nTITLE: Finding Intersection of Belt.Sets in ReScript\nDESCRIPTION: Demonstrates how to find the intersection of two Belt.Sets using the intersect function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rescript\nCODE:\n```\nlet s0 = Belt.Set.fromArray([5,2,3,5,6], ~id=module(IntCmp))\nlet s1 = Belt.Set.fromArray([5,2,3,1,5,4], ~id=module(IntCmp))\nlet intersect = Belt.Set.intersect(s0, s1)\nintersect->Belt.Set.toArray /* [2,3,5] */\n```\n\n----------------------------------------\n\nTITLE: Constraining integer arguments with polymorphic variants in ReScript\nDESCRIPTION: Demonstrates using polymorphic variants with @int annotation to map variant constructors to specific integer values when interfacing with JavaScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/bind-to-js-function.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\n@val\nexternal testIntType: (\n  @int [\n    | #onClosed\n    | @as(20) #onOpen\n    | #inBinary\n  ])\n  => int = \"testIntType\"\ntestIntType(#inBinary)\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntestIntType(21);\n```\n\n----------------------------------------\n\nTITLE: Abstract Types with Naming Collisions\nDESCRIPTION: Example showing how naming collisions can occur with multiple abstract types having similar attributes.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/generate-converters-accessors.mdx#2025-04-18_snippet_20\n\nLANGUAGE: rescript\nCODE:\n```\n@deriving(abstract)\ntype person = {name: string}\n\n@deriving(abstract)\ntype cat = {\n  name: string,\n  isLazy: bool,\n};\n\nlet person = person(~name=\"Alice\")\n\n/* Error: This expression has type person but an expression was expected\n   of type cat */\nperson->nameGet()\n```\n\n----------------------------------------\n\nTITLE: Block Body Function in ReScript\nDESCRIPTION: Shows how to write a function with a multi-line block body using curly braces.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/function.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet greetMore = (name) => {\n  let part1 = \"Hello\"\n  part1 ++ \" \" ++ name\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction greetMore(name) {\n  return \"Hello \" + name;\n}\n```\n\n----------------------------------------\n\nTITLE: Improving Type Safety for setTimeout and clearTimeout Bindings in ReScript\nDESCRIPTION: Shows how to use abstract types to improve type safety when binding to setTimeout and clearTimeout. This approach ensures that only valid timer IDs can be passed to clearTimeout.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/bind-to-global-js-values.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reason\nCODE:\n```\ntype timerId;\n[@bs.val] external setTimeout: (unit => unit, int) => timerId = \"setTimeout\";\n[@bs.val] external clearTimeout: timerId => unit = \"clearTimeout\";\n\nlet id = setTimeout(() => Js.log(\"hello\"), 100);\nclearTimeout(id);\n```\n\nLANGUAGE: ocaml\nCODE:\n```\ntype timerId\nexternal setTimeout: (unit -> unit) -> int -> timerId = \"setTimeout\" [@@bs.val]\nexternal clearTimeout: timerId -> unit = \"clearTimeout\" [@@bs.val]\n\nlet id = setTimeout (fun () -> Js.log \"hello\") 100\nlet () = clearTimeout id\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar id = setTimeout(function (param) {\n  console.log(\"hello\");\n}, 100);\n\nclearTimeout(id);\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching on Tuples in ReScript\nDESCRIPTION: Demonstrates pattern matching on an inline tuple combining multiple variables for 2D table-like conditional logic. This approach provides a concise way to handle combinations of values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_6\n\nLANGUAGE: res\nCODE:\n```\ntype animal = Dog | Cat | Bird\nlet categoryId = switch (isBig, myAnimal) {\n| (true, Dog) => 1\n| (true, Cat) => 2\n| (true, Bird) => 3\n| (false, Dog | Cat) => 4\n| (false, Bird) => 5\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar categoryId = isBig ? (myAnimal + 1) | 0 : myAnimal >= 2 ? 5 : 4;\n```\n\n----------------------------------------\n\nTITLE: Descending For Loop in ReScript\nDESCRIPTION: Shows how to create a descending for loop using the 'downto' keyword, which counts from a higher value down to a lower value inclusively.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/control-flow.mdx#2025-04-18_snippet_6\n\nLANGUAGE: res\nCODE:\n```\nfor i in startValueInclusive downto endValueInclusive {\n  Console.log(i)\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nfor(var i = startValueInclusive; i >= endValueInclusive; --i){\n  console.log(i);\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Specified Count of Elements In-Place in ReScript\nDESCRIPTION: The removeCountInPlace function removes a specified number of elements from the given array starting at a specified position. It returns the removed elements and modifies the original array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array-2.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nlet removeCountInPlace: (t<'a>, ~pos: int, ~count: int) => t<'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet arr = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\nJs.Array2.removeCountInPlace(arr, ~pos=2, ~count=3) == [\"c\", \"d\", \"e\"]\narr == [\"a\", \"b\", \"f\"]\n```\n\n----------------------------------------\n\nTITLE: Handling Nested Option Types in ReScript\nDESCRIPTION: Demonstrates the compilation of nested Option types and the potential issues with JavaScript interop.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/null-undefined-option.mdx#2025-04-18_snippet_4\n\nLANGUAGE: ReScript\nCODE:\n```\nlet x = Some(Some(Some(5)))\nlet x = Some(None)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar x = 5;\n\nvar Caml_option = require(\"./stdlib/caml_option.js\");\n\nvar x = Caml_option.some(undefined);\n```\n\n----------------------------------------\n\nTITLE: Creating a set from an array in ReScript\nDESCRIPTION: Converts an array of integers into a set. Elements are automatically sorted and deduplicated during conversion.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-int.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reason\nCODE:\n```\nlet fromArray: array(value) => t;\n```\n\n----------------------------------------\n\nTITLE: String Concatenation in ReScript\nDESCRIPTION: Shows how to concatenate strings in ReScript using the ++ operator, which compiles to efficient JavaScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/primitive-types.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\nlet greetings = \"Hello \" ++ \"world!\"\n```\n\nLANGUAGE: js\nCODE:\n```\nvar greetings = \"Hello world!\";\n```\n\n----------------------------------------\n\nTITLE: Replacing Substrings with Regular Expressions in ReScript\nDESCRIPTION: The replaceByRe function returns a new string where occurrences matching a regular expression have been replaced by a specified replacement string. This allows for more complex replacement patterns than the simple replace function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string.mdx#2025-04-18_snippet_27\n\nLANGUAGE: rescript\nCODE:\n```\nlet replaceByRe: (Js_re.t, t, t) => t;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.String.replaceByRe([%re \"/[aeiou]/g\"], \"x\", \"vowels be gone\") == \"vxwxls bx gxnx\";\nJs.String.replaceByRe([%re \"/(\\\\w+) (\\\\w+)/\"], \"$2, $1\", \"Juan Fulano\") == \"Fulano, Juan\";\n```\n\n----------------------------------------\n\nTITLE: Breaking Out of a While Loop in ReScript\nDESCRIPTION: Since ReScript doesn't have a 'break' keyword, this example shows how to break out of a while loop using a mutable reference. This is a common pattern when early termination is needed.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/control-flow.mdx#2025-04-18_snippet_9\n\nLANGUAGE: res\nCODE:\n```\nlet break = ref(false)\n\nwhile !break.contents {\n  if Math.random() > 0.3 {\n    break := true\n  } else {\n    Console.log(\"Still running\")\n  }\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar $$break = {\n  contents: false\n};\n\nwhile(!$$break.contents) {\n  if (Math.random() > 0.3) {\n    $$break.contents = true;\n  } else {\n    console.log(\"Still running\");\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Optional Labeled Arguments in ReScript\nDESCRIPTION: Demonstrates optional labeled arguments with pattern matching on the option type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/function.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet drawCircle = (~color, ~radius=?, ()) => {\n  setColor(color)\n  switch radius {\n  | None => startAt(1, 1)\n  | Some(r_) => startAt(r_, r_)\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar Caml_option = require(\"./stdlib/caml_option.js\");\n\nfunction drawCircle(color, radius, param) {\n  setColor(color);\n  if (radius === undefined) {\n    return startAt(1, 1);\n  }\n  var r_ = Caml_option.valFromOption(radius);\n  return startAt(r_, r_);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing ReScript in an existing JavaScript project\nDESCRIPTION: Command to install ReScript as a development dependency in an existing JavaScript project. This allows you to integrate ReScript code into your JavaScript codebase.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/installation.mdx#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev bs-platform\n```\n\n----------------------------------------\n\nTITLE: Comparing Loop Syntax in ReScript and JavaScript\nDESCRIPTION: Shows the differences in loop syntax between ReScript and JavaScript, including for and while loops.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/overview.mdx#2025-04-18_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nfor (let i = 0; i <= 10; i++) {...}\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nfor i in 0 to 10 {...}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nfor (let i = 10; i >= 0; i--) {...}\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nfor i in 10 downto 0 {...}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nwhile (true) {...}\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nwhile true {...}\n```\n\n----------------------------------------\n\nTITLE: Executing a Function on Array Elements in ReScript\nDESCRIPTION: Executes the provided function once for each array element. The function takes an array element as its argument and returns unit. Used for processing array elements without returning a new array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/array.mdx#2025-04-18_snippet_18\n\nLANGUAGE: rescript\nCODE:\n```\nlet forEach: ('a => unit, t<'a>) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\n// display all elements in an array\nJs.Array.forEach(x => Js.log(x), [\"a\", \"b\", \"c\"]) == ()\n```\n\n----------------------------------------\n\nTITLE: Declaring Object Types in ReScript\nDESCRIPTION: Shows how to declare optional type definitions for ReScript objects. Unlike records, type declarations for objects are not required.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/object.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype person = {\n  \"age\": int,\n  \"name\": string\n};\n```\n\n----------------------------------------\n\nTITLE: Unzipping Arrays in ReScript\nDESCRIPTION: Splits an array of pairs into a pair of arrays. Each array in the resulting pair contains respective elements from the original pairs.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/array.mdx#2025-04-18_snippet_25\n\nLANGUAGE: reason\nCODE:\n```\nlet unzip: array(('a, 'b)) => (array('a), array('b));\n```\n\nLANGUAGE: reason\nCODE:\n```\nBelt.Array.unzip([|(1, 2), (3, 4)|]) == ([|1, 3|], [|2, 4|]);\n\nBelt.Array.unzip([|(1, 2), (3, 4), (5, 6), (7, 8)|]) == ([|1, 3, 5, 7|], [|2, 4, 6, 8|]);\n```\n\n----------------------------------------\n\nTITLE: Regular Expressions in ReScript\nDESCRIPTION: Demonstrates how to create regular expressions in ReScript using the %re syntax, which compiles cleanly to JavaScript RegExp objects.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/primitive-types.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nlet r = %re(\"/b/g\")\n```\n\nLANGUAGE: js\nCODE:\n```\nvar r = /b/g;\n```\n\n----------------------------------------\n\nTITLE: Defining Result Type in ReScript\nDESCRIPTION: Defines a generic Result type that can contain either a successful value of type 'good or an error value of type 'bad. This is a fundamental type for handling operations that can fail in a type-safe way.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/result.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype t<'good, 'bad> =\n  | Ok('good)\n  | Error('bad)\n```\n\n----------------------------------------\n\nTITLE: Merging multiple elements into SetDict in ReScript\nDESCRIPTION: Shows how to use the 'mergeMany' function to add multiple elements to a SetDict at once.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-dict.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet mergeMany: (t('value, 'id), array('value), ~cmp: cmp('value, 'id)) => t('value, 'id);\n\nmodule IntCmp =\n  Belt.Id.MakeComparable({\n    type t = int;\n    let cmp = Pervasives.compare;\n  });\n\nlet set = Belt.Set.Dict.empty;\n\nlet newSet = set->Belt.Set.Dict.mergeMany([|5, 4, 3, 2, 1|], ~cmp=IntCmp.cmp);\nnewSet->Belt.Set.Dict.toArray; /* [|1, 2, 3, 4, 5|] */\n```\n\n----------------------------------------\n\nTITLE: Using Pipe with JavaScript Method Bindings in ReScript\nDESCRIPTION: Shows how to use the pipe operator to create more readable code when working with JavaScript method bindings. This approach mimics JavaScript's chainable method syntax for better readability.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/pipe.mdx#2025-04-18_snippet_6\n\nLANGUAGE: res\nCODE:\n```\nlet result = [1, 2, 3]\n  ->Js.Array2.map(a => a + 1)\n  ->Js.Array2.filter(a => mod(a, 2) == 0)\n\nasyncRequest()->setWaitDuration(4000)->send\n```\n\nLANGUAGE: js\nCODE:\n```\nvar result = [1, 2, 3].map(function(a) {\n  return a + 1 | 0;\n}).filter(function(a) {\n  return a % 2 === 0;\n});\n\nasyncRequest().setWaitDuration(4000).send();\n```\n\n----------------------------------------\n\nTITLE: Accessing Fields from Abstract Records\nDESCRIPTION: Use the generated accessor functions to read values from abstract record objects. Each field gets a corresponding getter function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/generate-converters-accessors.mdx#2025-04-18_snippet_11\n\nLANGUAGE: ReScript\nCODE:\n```\nlet twenty = ageGet(joe)\n```\n\n----------------------------------------\n\nTITLE: Explicit Uncurrying Annotation in ReScript\nDESCRIPTION: Shows the syntax for explicitly uncurrying a function in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2023-09-18-uncurried-mode.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\n(. param) => ()\n```\n\n----------------------------------------\n\nTITLE: Block Function with Multiple Statements\nDESCRIPTION: Shows how to write a function with multiple statements using a block syntax. Demonstrates variable declaration within function scope.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/function.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\nlet greetMore = (name) => {\n  let part1 = \"Hello\";\n  part1 ++ \" \" ++ name;\n};\n```\n\nLANGUAGE: ml\nCODE:\n```\nlet greetMore name =\n  let part1 = \"Hello\" in\n  part1 ^ \" \" ^ name\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction greetMore(name) {\n  return \"Hello \" + name;\n}\n```\n\n----------------------------------------\n\nTITLE: Destructuring Coordinates in ReScript\nDESCRIPTION: Demonstrates basic destructuring of a tuple containing coordinates, extracting only the x value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\nlet coordinates = (10, 20, 30)\nlet (x, _, _) = coordinates\nConsole.log(x) // 10\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar coordinates = [10, 20, 30];\nvar x = 10;\nconsole.log(10);\n```\n\n----------------------------------------\n\nTITLE: BigInt Operations in ReScript\nDESCRIPTION: Example of using BigInt operations in ReScript with the new native support.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2024-02-01-release-11-1-0.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nopen! Js.BigInt \n\nlet a = 9007199254740991n + 9007199254740991n\nlet b = 2n ** 2n\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar a = 9007199254740991n + 9007199254740991n;\n\nvar p = 2n ** 2n;\n```\n\n----------------------------------------\n\nTITLE: Binding to TypeScript Enum Using Polymorphic Variants (Old Approach)\nDESCRIPTION: Traditional approach to binding to TypeScript enums using polymorphic variants, which has limitations in preserving documentation and naming conventions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2023-04-17-improving-interop.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\ntype direction = [#UP | #DOWN | #LEFT | #RIGHT]\n@module(\"./direction.js\") external myDirection: direction = \"myDirection\"\n```\n\n----------------------------------------\n\nTITLE: Using %raw Extension Point in ReScript\nDESCRIPTION: This snippet demonstrates the use of the %raw extension point to directly inject JavaScript code into the ReScript codebase.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/attribute.mdx#2025-04-18_snippet_2\n\nLANGUAGE: ReScript\nCODE:\n```\n%raw(\"var a = 1\")\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar a = 1\n```\n\n----------------------------------------\n\nTITLE: Record Type Spread in ReScript\nDESCRIPTION: Shows how to spread one or more record types into a new record type, effectively copying fields from existing types.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/record.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\ntype a = {\n  id: string,\n  name: string,\n}\n\ntype b = {\n  age: int\n}\n\ntype c = {\n  ...a,\n  ...b,\n  active: bool\n}\n```\n\n----------------------------------------\n\nTITLE: Composing Polymorphic Variant Types\nDESCRIPTION: Shows how to compose polymorphic variant types to create a sum of all constructors. This allows for building more complex types from simpler ones.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/polymorphic-variant.mdx#2025-04-18_snippet_6\n\nLANGUAGE: res\nCODE:\n```\ntype red = [#Ruby | #Redwood | #Rust]\ntype blue = [#Sapphire | #Neon | #Navy]\n\n// Contains all constructors of red and blue.\n// Also adds #Papayawhip\ntype color = [red | blue | #Papayawhip]\n\nlet c: color = #Ruby\n```\n\nLANGUAGE: js\nCODE:\n```\nvar c = \"Ruby\";\n```\n\n----------------------------------------\n\nTITLE: Using Capitalized JSX Tags in ReScript\nDESCRIPTION: Demonstrates how a capitalized JSX tag (for components) is transformed into a function call in ReScript. The component takes a name prop with the value 'ReScript'.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/jsx.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\n<MyComponent name={\"ReScript\"} />;\n```\n\nLANGUAGE: reason\nCODE:\n```\n[@JSX] MyComponent.createElement(~name=\"ReScript\", ~children=[], ());\n```\n\nLANGUAGE: ml\nCODE:\n```\nMyComponent.createElement ~name:\"ReScript\" ~children:[] [@JSX]\n```\n\nLANGUAGE: js\nCODE:\n```\nReact.createElement(\n  MyComponent.make,\n  MyComponent.makeProps(\"ReScript\", undefined)\n);\n```\n\n----------------------------------------\n\nTITLE: Array Splicing Operations in ReScript\nDESCRIPTION: Shows how to splice arrays by removing elements and inserting new ones at a specified position. The function modifies the original array and returns removed elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/array.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\nlet arr = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\nJs.Array.spliceInPlace(~pos=2, ~remove=2, ~add=[\"x\", \"y\", \"z\"], arr) == [\"c\", \"d\"]\narr == [\"a\", \"b\", \"x\", \"y\", \"z\", \"e\", \"f\"]\n\nlet arr2 = [\"a\", \"b\", \"c\", \"d\"]\nJs.Array.spliceInPlace(~pos=3, ~remove=0, ~add=[\"x\", \"y\"], arr2) == []\narr2 == [\"a\", \"b\", \"c\", \"x\", \"y\", \"d\"]\n\nlet arr3 = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\nJs.Array.spliceInPlace(~pos=9, ~remove=2, ~add=[\"x\", \"y\", \"z\"], arr3) == []\narr3 == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"x\", \"y\", \"z\"]\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Uncurried Functions in ReScript\nDESCRIPTION: This example demonstrates how to define and use uncurried functions in ReScript. It includes an uncurried addition function and a function that takes an uncurried callback as an argument.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/language_uncurried_function.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\nlet add = (. x, y) => {\n  x + y\n}\n\nlet withCallback = (cb: (. int) => unit) => {\n  cb(. 1)\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction add(x, y) {\n  return (x + y) | 0;\n}\n\nfunction withCallback(cb) {\n  return cb(1);\n}\n```\n\n----------------------------------------\n\nTITLE: Using %debugger Expression in ReScript\nDESCRIPTION: Demonstrates how to use the %debugger expression in ReScript to insert a debugger statement in the output JavaScript code.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/embed-raw-javascript.mdx#2025-04-18_snippet_2\n\nLANGUAGE: ReScript\nCODE:\n```\nlet f = (x, y) => {\n  %debugger\n  x + y\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction f(x, y) {\n  debugger;\n  return x + y | 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dev-Only Sources in bsconfig.json\nDESCRIPTION: Demonstrates how to mark a directory ('test') as development-only. These sources won't be exposed to third-parties or other dev directories in the same project.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/build-configuration.mdx#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sources\": {\n    \"dir\": \"test\",\n    \"type\": \"dev\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a React Element in ReScript\nDESCRIPTION: This snippet demonstrates how to create a simple React element in ReScript using JSX syntax. It creates an h1 element with the text 'Hello World' inside it.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/rendering-elements.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\nlet element = <h1> {React.string(\"Hello World\")} </h1>\n```\n\n----------------------------------------\n\nTITLE: Mapping Vector with Index in ReScript\nDESCRIPTION: Applies a function to each element of a vector and its index, creating a new vector with the results.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/vector.mdx#2025-04-18_snippet_10\n\nLANGUAGE: ReScript\nCODE:\n```\nlet mapi: ((. int, 'a) => 'b, t('a)) => t('b);\n```\n\n----------------------------------------\n\nTITLE: Async Function Type Signatures in ReScript\nDESCRIPTION: Shows how to define type signatures for async functions in ReScript, both in signature files and implementation files.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/async-await.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\ntype someAsyncFn = int => promise<int>\n\nlet fetchData: string => promise<string> = async (userId) => {\n  await fetchUserMail(userId)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Array Filled with a Value in ReScript\nDESCRIPTION: The make function creates an array of the specified size filled with the provided value. It returns an empty array if the size is negative.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/array.mdx#2025-04-18_snippet_15\n\nLANGUAGE: ReScript\nCODE:\n```\nlet make: (int, 'a) => array<'a>\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Extensible Variants in ReScript\nDESCRIPTION: Demonstrates how to define an extensible variant type and add constructors to it using the += operator.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/extensible-variant.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\ntype t = ..\n\ntype t += Other\n\ntype t +=\n  | Point(float, float)\n  | Line(float, float, float, float)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar Caml_exceptions = require(\"./stdlib/caml_exceptions.js\");\n\nvar Other = Caml_exceptions.create(\"Playground.Other\");\n\nvar Point = Caml_exceptions.create(\"Playground.Point\");\n\nvar Line = Caml_exceptions.create(\"Playground.Line\");\n```\n\n----------------------------------------\n\nTITLE: JavaScript Example of Inline Constants for Conditional Compilation\nDESCRIPTION: Demonstrates the original JavaScript pattern of using process.env for conditional code that can be optimized away by bundlers.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/inlining-constants.mdx#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (process.env.mode === 'development') {\n  console.log(\"Dev-only code here!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Functor Types in ReScript\nDESCRIPTION: Demonstrates how to define types for functors, allowing you to hide implementation details. This shows how to constrain a MakeSet functor with a type signature.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/module.mdx#2025-04-18_snippet_14\n\nLANGUAGE: res\nCODE:\n```\nmodule type Comparable = ...\n\nmodule type MakeSetType = (Item: Comparable) => {\n  type backingType\n  let empty: backingType\n  let add: (backingType, Item.t) => backingType\n}\n\nmodule MakeSet: MakeSetType = (Item: Comparable) => {\n  ...\n}\n```\n\nLANGUAGE: js\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: CSS Module Integration Example\nDESCRIPTION: Example of importing and using CSS modules in ReScript with external module bindings.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/styling.mdx#2025-04-18_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n/* styles.module.css */\n\n.root {\n  color: red;\n}\n```\n\nLANGUAGE: rescript\nCODE:\n```\n@module external styles: {..} = \"./styles.module.css\"\n\nlet app = <div className={styles[\"root\"]} />\n```\n\n----------------------------------------\n\nTITLE: Checking if List Contains Element with Custom Equality in ReScript\nDESCRIPTION: The has function checks if a list contains at least one element that satisfies an equality condition with a provided value. It returns true if such an element exists.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/list.mdx#2025-04-18_snippet_53\n\nLANGUAGE: rescript\nCODE:\n```\nlist{1, 2, 3}->Belt.List.has(2, (a, b) => a == b) /* true */\n\nlist{1, 2, 3}->Belt.List.has(4, (a, b) => a == b) /* false */\n\nlist{(-1), (-2), (-3)}->Belt.List.has(2, (a, b) => abs(a) == abs(b)) /* true */\n```\n\n----------------------------------------\n\nTITLE: Checking Key Existence in a HashMap in ReScript\nDESCRIPTION: Checks if a key exists in the hash map. Returns a boolean indicating presence of the key.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-map.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nlet has: (t('key, 'value, 'id), 'key) => bool;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nmodule IntHash =\n  Belt.Id.MakeHashable({\n    type t = int;\n    let hash = a => a;\n    let eq = (a, b) => a == b;\n  });\n  \nlet s0 = Belt.HashMap.make(~hintSize=10, ~id=(module IntHash));\nBelt.HashMap.set(s0, 1, \"value1\");\n\nBelt.HashMap.has(s0, 1) == true;\nBelt.HashMap.has(s0, 2) == false;\n```\n\n----------------------------------------\n\nTITLE: Binding Shadowing with Different Types in ReScript\nDESCRIPTION: Shows how binding shadowing allows reusing the same name for values of different types. Each new binding completely replaces the previous one.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/let-binding.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\nlet result = \"hello\"\nJs.log(result) // prints \"hello\"\nlet result = 1\nJs.log(result) // prints 1\n```\n\nLANGUAGE: js\nCODE:\n```\nvar result = 1;\nconsole.log(\"hello\");\nconsole.log(1);\n```\n\n----------------------------------------\n\nTITLE: Matching on Exceptions in ReScript\nDESCRIPTION: Shows how to match on exceptions in ReScript, allowing for handling of both normal returns and exceptions in a single switch statement.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_11\n\nLANGUAGE: ReScript\nCODE:\n```\nswitch List.find(i => i === theItem, myItems) {\n| item => Console.log(item)\n| exception Not_found => Console.log(\"No such item found!\")\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar exit = 0;\n\nvar item;\n\ntry {\n  item = List.find(function(i) {\n    return i === theItem;\n  }, myItems);\n  exit = 1;\n}\ncatch (raw_exn){\n  var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);\n  if (exn.RE_EXN_ID === \"Not_found\") {\n    console.log(\"No such item found!\");\n  } else {\n    throw exn;\n  }\n}\n\nif (exit === 1) {\n  console.log(item);\n}\n```\n\n----------------------------------------\n\nTITLE: Using @int Decorator with Polymorphic Variants in ReScript\nDESCRIPTION: Demonstrates how to use the @int decorator with polymorphic variants and @as decorator on externals to compile to integer values in JavaScript instead of strings. The example shows defining a setStatus external function with three status variants mapped to integers 0, 1, and 2.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/decorator_int.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\n@val external setStatus: @int[\n  @as(0) #NotStarted |\n  @as(1) #Started |\n  @as(2) #Done \n] => unit = \"setStatus\"\n\nsetStatus(#Done)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsetStatus(2);\n```\n\n----------------------------------------\n\nTITLE: Using __LOC__ for Location Tracking in ReScript\nDESCRIPTION: Demonstrates how to use the __LOC__ special value to get the current file location information including filename, line number, and character positions. The value is evaluated at compile time and returns a formatted string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/specialvalues_loc.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\n__LOC__->Console.log\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(\"File \\\"testmodule.res\\\", line 1, characters 0-7\");\n```\n\n----------------------------------------\n\nTITLE: ReScript Promise.all6 Implementation\nDESCRIPTION: Function signature for combining six Promises into a tuple Promise\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/promise.mdx#2025-04-18_snippet_10\n\nLANGUAGE: res\nCODE:\n```\nlet all6: ((t<'a0>, t<'a1>, t<'a2>, t<'a3>, t<'a4>, t<'a5>)) => t<('a0, 'a1, 'a2, 'a3, 'a4, 'a5)>\n```\n\n----------------------------------------\n\nTITLE: JSON Tagged Type Definition\nDESCRIPTION: Tagged union type representing different JSON value types with their associated data.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/json.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\ntype tagged_t =\n  | JSONFalse\n  | JSONTrue\n  | JSONNull\n  | JSONString(string)\n  | JSONNumber(float)\n  | JSONObject(Js_dict.t<t>)\n  | JSONArray(array<t>)\n```\n\n----------------------------------------\n\nTITLE: Array Sorting with Custom Comparator in ReScript\nDESCRIPTION: Sorts array in place using a custom comparison function that returns negative, zero, or positive integers to determine ordering. Modifies and returns the original array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/array-2.mdx#2025-04-18_snippet_6\n\nLANGUAGE: res\nCODE:\n```\nlet words = [\"horse\", \"aardvark\", \"dog\", \"camel\"]\nlet byLength = (s1, s2) => Js.String.length(s1) - Js.String.length(s2)\n\nJs.Array2.sortInPlaceWith(words, byLength) == [\"dog\", \"horse\", \"camel\", \"aardvark\"]\n\nlet numbers = [3, 30, 10, 1, 20, 2]\nlet reverseNumeric = (n1, n2) => n2 - n1\nJs.Array2.sortInPlaceWith(numbers, reverseNumeric) == [30, 20, 10, 3, 2, 1]\n```\n\n----------------------------------------\n\nTITLE: Using startsWith function in ReScript\nDESCRIPTION: Determines whether a string begins with the characters of a specified string. Returns a boolean value indicating the result.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/string-2.mdx#2025-04-18_snippet_24\n\nLANGUAGE: rescript\nCODE:\n```\nlet startsWith: (t, t) => bool\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.String2.startsWith(\"BuckleScript\", \"Buckle\") == true\nJs.String2.startsWith(\"BuckleScript\", \"\") == true\nJs.String2.startsWith(\"JavaScript\", \"Buckle\") == false\n```\n\n----------------------------------------\n\nTITLE: Reducing List Elements with Uncurried Function in ReScript\nDESCRIPTION: The reduceU function is the uncurried version of reduce for performance optimization.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/list.mdx#2025-04-18_snippet_38\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduceU: (t<'a>, 'b, (. 'b, 'a) => 'b) => 'b\n```\n\n----------------------------------------\n\nTITLE: Transforming Array Elements with Index using mapi in ReScript\nDESCRIPTION: Creates a new array with the results of calling a provided function on every element in the array. The function receives both the element and its index, allowing for index-dependent transformations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/array-2.mdx#2025-04-18_snippet_22\n\nLANGUAGE: ReScript\nCODE:\n```\nlet mapi: (t<'a>, ('a, int) => 'b) => t<'b>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\n// multiply each item in array by its position\nlet product = (item, index) => item * index\nJs.Array2.mapi([10, 11, 12], product) == [0, 11, 24]\n```\n\n----------------------------------------\n\nTITLE: Vector Append Operation\nDESCRIPTION: Creates a new vector with an element appended to the original vector.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/vector.mdx#2025-04-18_snippet_18\n\nLANGUAGE: res\nCODE:\n```\nlet append: ('a, t<'a>) => t<'a>\n```\n\n----------------------------------------\n\nTITLE: Reducing List Elements in ReScript\nDESCRIPTION: The reduce function combines all elements in a list using an accumulator function, returning the final accumulated value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/list.mdx#2025-04-18_snippet_37\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduce: (t<'a>, 'b, ('b, 'a) => 'b) => 'b\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlist{1, 2, 3, 4}->Belt.List.reduce(0, (a, b) => a + b) /* 10 */\n\n/* same as */\n\nlist{1, 2, 3, 4}->Belt.List.reduce(0, (acc, item) => acc + item) /* 10 */\n```\n\n----------------------------------------\n\nTITLE: For Loop Example in ReScript\nDESCRIPTION: A practical example of a for loop in ReScript that counts from 1 to 3 and logs each value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/control-flow.mdx#2025-04-18_snippet_5\n\nLANGUAGE: re\nCODE:\n```\n// prints: 1 2 3, one per line\nfor (x in 1 to 3) {\n  Js.log(x);\n};\n```\n\nLANGUAGE: ml\nCODE:\n```\n(* prints: 1 2 3, one per line *)\nfor x = 1 to 3 do\n  Js.log x;\ndone\n```\n\nLANGUAGE: js\nCODE:\n```\nfor(var x = 1; x <= 3; ++x){\n  console.log(x);\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping values with keys in MapDict (ReScript)\nDESCRIPTION: Functions to map values in a MapDict using both the key and value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_25\n\nLANGUAGE: ReScript\nCODE:\n```\nlet mapWithKeyU: (t<'k, 'a, 'id>, (. 'k, 'a) => 'b) => t<'k, 'b, 'id>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet mapWithKey: (t<'k, 'a, 'id>, ('k, 'a) => 'b) => t<'k, 'b, 'id>\n```\n\n----------------------------------------\n\nTITLE: Slicing String from Index to End in ReScript\nDESCRIPTION: The sliceToEnd function returns a substring from a given index to the end of the string. It handles negative indices and out-of-range cases.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/string-2.mdx#2025-04-18_snippet_20\n\nLANGUAGE: rescript\nCODE:\n```\nlet sliceToEnd: (t, ~from: int) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.String2.sliceToEnd(\"abcdefg\", ~from=4) == \"efg\"\nJs.String2.sliceToEnd(\"abcdefg\", ~from=-2) == \"fg\"\nJs.String2.sliceToEnd(\"abcdefg\", ~from=7) == \"\"\n```\n\n----------------------------------------\n\nTITLE: JavaScript Output of React.forwardRef Implementation\nDESCRIPTION: The JavaScript output generated from the ReScript code using React.forwardRef, showing how the ReScript compiler transforms the code to work with React's JavaScript API.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/forwarding-refs.mdx#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar React = require(\"react\");\nvar Belt_Option = require(\"./stdlib/belt_Option.js\");\nvar Caml_option = require(\"./stdlib/caml_option.js\");\n\nvar make = React.forwardRef(function (Props, ref_) {\n      var className = Props.className;\n      var children = Props.children;\n      var tmp = {\n        type: \"text\"\n      };\n      var tmp$1 = Belt_Option.map((ref_ == null) ? undefined : Caml_option.some(ref_), (function (prim) {\n              return prim;\n            }));\n      if (tmp$1 !== undefined) {\n        tmp.ref = Caml_option.valFromOption(tmp$1);\n      }\n      if (className !== undefined) {\n        tmp.className = Caml_option.valFromOption(className);\n      }\n      return React.createElement(\"div\", undefined, React.createElement(\"input\", tmp), children);\n    });\n\nvar FancyInput = {\n  make: make\n};\n\nfunction App(Props) {\n  var input = React.useRef(null);\n  var onClick = function (param) {\n    return Belt_Option.forEach(Caml_option.nullable_to_opt(input.current), (function (input) {\n                  input.focus();\n\n                }));\n  };\n  return React.createElement(\"div\", undefined, React.createElement(make, {\n                  className: \"fancy\",\n                  children: React.createElement(\"button\", {\n                        onClick: onClick\n                      }, \"Click to focus\"),\n                  ref: input\n                }));\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Values in a Map in ReScript (Uncurried)\nDESCRIPTION: Applies a function to all values in a map, creating a new map with the same keys and transformed values. This is the uncurried version.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map.mdx#2025-04-18_snippet_9\n\nLANGUAGE: reasonml\nCODE:\n```\nlet mapU: (t('k, 'v, 'id), [@bs] ('v => 'v2)) => t('k, 'v2, 'id);\n```\n\n----------------------------------------\n\nTITLE: Filtering Array Elements with Index in ReScript\nDESCRIPTION: Creates new array with elements that pass predicate function test, with access to element index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array-2.mdx#2025-04-18_snippet_26\n\nLANGUAGE: res\nCODE:\n```\nlet positiveOddElement = (item, index) => mod(index, 2) == 1 && item > 0\n\nJs.Array2.filteri([6, 3, 5, 8, 7, -4, 1], positiveOddElement) == [3, 8]\n```\n\n----------------------------------------\n\nTITLE: Regular Expressions in ReScript\nDESCRIPTION: Shows how to create regular expressions in ReScript using the %re syntax.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/primitive-types.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet r = %re(\"/b/g\")\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar r = /b/g;\n```\n\n----------------------------------------\n\nTITLE: Using the Typed Environment Variables Module Function\nDESCRIPTION: Demonstrates how to use the MakeEnv module function to create a typed environment variables module and access the values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/module-functions.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\nmodule Env = MakeEnv({\n\ttype t = {\"LOG_LEVEL\": string}\n})\n\nlet values = Env.getEnv()\n```\n\nLANGUAGE: js\nCODE:\n```\nvar Env = {\n  getEnv: getEnv\n};\n\nvar values = import.meta.env;\n```\n\n----------------------------------------\n\nTITLE: Dictionary Keys Example\nDESCRIPTION: Example showing how to get all keys from a dictionary.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/dict.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rescript\nCODE:\n```\nJs.Dict.keys(ages) == [\"Maria\", \"Vinh\", \"Fred\"]\n```\n\n----------------------------------------\n\nTITLE: Updating Map Values in ReScript\nDESCRIPTION: Updates a map by applying a function to the value associated with a given key. The function can modify, add, or remove the binding.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reasonml\nCODE:\n```\nlet update: (t('k, 'v, 'id), 'k, option('v) => option('v)) => t('k, 'v, 'id);\n```\n\n----------------------------------------\n\nTITLE: Finding an Element with Index in Array in ReasonML\nDESCRIPTION: The findi function returns the value of the first element in the array that satisfies the provided testing function, which takes both the element and its index as arguments. It returns None if no elements satisfy the function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array.mdx#2025-04-18_snippet_19\n\nLANGUAGE: ReasonML\nCODE:\n```\nlet findi: (('a, int) => bool, t<'a>) => option<'a>\n```\n\nLANGUAGE: ReasonML\nCODE:\n```\nlet positiveOddElement = (item, index) => mod(index, 2) == 1 && item > 0\n\nJs.Array.findi(positiveOddElement, [66, -33, 55, 88, 22]) == Some(88)\nJs.Array.findi(positiveOddElement, [66, -33, 55, -88, 22]) == None\n```\n\n----------------------------------------\n\nTITLE: Converting Array to String in ReScript\nDESCRIPTION: The toString function converts the array to a string, with each element converted to a string using JavaScript. All elements in a ReScript array must have the same type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array-2.mdx#2025-04-18_snippet_21\n\nLANGUAGE: rescript\nCODE:\n```\nlet toString: t<'a> => string\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.Array2.toString([3.5, 4.6, 7.8]) == \"3.5,4.6,7.8\"\nJs.Array2.toString([\"a\", \"b\", \"c\"]) == \"a,b,c\"\n```\n\n----------------------------------------\n\nTITLE: Extracting Module Type from Existing Module in ReScript\nDESCRIPTION: Demonstrates how to extract a module type from an existing module using 'include (module type of ModuleName)'. This is useful for extending modules without defined types.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/module.mdx#2025-04-18_snippet_9\n\nLANGUAGE: ReScript\nCODE:\n```\nmodule type MyList = {\n  include (module type of List)\n  let myListFun: list<'a> => list<'a>\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Declaring Object Types in ReScript\nDESCRIPTION: Shows the syntax for declaring object types in ReScript. Object type declarations are optional and include field names with their types.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/object.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\ntype person = {\n  .\n  \"age\": int,\n  \"name\": string\n};\n```\n\nLANGUAGE: ml\nCODE:\n```\ntype person = <\n  age :int;\n  name :string> Js.t\n```\n\n----------------------------------------\n\nTITLE: Building a ReScript Project in Shell\nDESCRIPTION: Demonstrates how to build a ReScript project using the 'rescript' command, which is an alias for 'rescript build'. It also shows how to keep a build watcher running.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/build-overview.mdx#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nrescript\n```\n\nLANGUAGE: sh\nCODE:\n```\nrescript -w\n```\n\n----------------------------------------\n\nTITLE: Importing a JavaScript Module's Named Export in ReScript\nDESCRIPTION: Demonstrates how to import a named export from a JavaScript module using the @module external syntax. The example imports the dirname function from Node.js path module.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/import-from-export-to-js.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\n@module(\"path\") external dirname: string => string = \"dirname\"\nlet root = dirname(\"/User/github\") // returns \"User\"\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar Path = require(\"path\");\nvar root = Path.dirname(\"/User/github\");\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as Path from \"path\";\nvar root = Path.dirname(\"/User/github\");\n```\n\n----------------------------------------\n\nTITLE: Initializing Dictionary Example\nDESCRIPTION: Example initialization of a dictionary with age values mapped to names.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/dict.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nlet ages = Js.Dict.fromList(list{(\"Maria\", 30), (\"Vinh\", 22), (\"Fred\", 49)})\n```\n\n----------------------------------------\n\nTITLE: JSX Punning in ReScript\nDESCRIPTION: Demonstrates the punning syntax in ReScript JSX, where prop names can be shortened when the label and value are the same.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/jsx.mdx#2025-04-18_snippet_7\n\nLANGUAGE: ReScript\nCODE:\n```\n<MyComponent isLoading text onClick />\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nReact.createElement(\n  MyComponent.make,\n  MyComponent.makeProps(isLoading, text, onClick, undefined)\n);\n```\n\n----------------------------------------\n\nTITLE: Mapping MutableQueue in ReScript\nDESCRIPTION: The 'map' function applies a function to each element of the queue, creating a new queue with the results.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-queue.mdx#2025-04-18_snippet_15\n\nLANGUAGE: rescript\nCODE:\n```\nlet map: (t<'a>, 'a => 'b) => t<'b>\n```\n\n----------------------------------------\n\nTITLE: Defining Fibonacci Function in ReScript (OCaml Syntax)\nDESCRIPTION: Implements the same recursive Fibonacci function using pattern matching, but in ReScript's OCaml syntax. The function is called with 0 and logged to the console.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/try.mdx#2025-04-18_snippet_1\n\nLANGUAGE: ocaml\nCODE:\n```\n// MyFile.ml\nlet rec fib n =\n  match n with\n  | 0 | 1 -> n\n  | n -> (fib (n - 1)) + (fib (n - 2))\nlet _ = Js.log (fib 0)\n```\n\n----------------------------------------\n\nTITLE: JSX v3 Compatibility Configuration\nDESCRIPTION: Configuration for maintaining v3 compatibility with specific dependencies\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/migrate-react.mdx#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsx\": { \"version\": 3, \"v3-dependencies\": [\"rescript-relay\"] },\n  \"bsc-flags\": [\"-open ReactV3\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Polymorphic Functions with @unwrap in ReScript\nDESCRIPTION: Demonstrates how to use the @unwrap decorator to bind to a JavaScript function 'padLeft' that accepts either an integer or string as its first argument. The example shows both integer and string usage patterns.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/decorator_unwrap.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\n@val external padLeft: (\n  @unwrap [#Int(int) | #Str(string)],\n  string\n) => string = \"padLeft\";\n\nlet result1 = padLeft(#Int(7), \"eleven\");\nlet result2 = padLeft(#Str(\"7\"), \"eleven\");\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar result1 = padLeft(7, \"eleven\");\nvar result2 = padLeft(\"7\", \"eleven\");\n```\n\n----------------------------------------\n\nTITLE: Binding Object and Array Methods with @send in ReScript\nDESCRIPTION: Demonstrates using the @send decorator to bind JavaScript methods on objects and arrays. Shows binding to document.getElementById for DOM manipulation and array.fill for array operations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/decorator_send.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\n// Bind to a method on an object\ntype document\n@send external getElementById: (document, string) => Dom.element = \"getElementById\"\n@val external doc: document = \"document\"\nlet el = getElementById(doc, \"myId\")\n\n// Bind to a method on an array\n@send external fillInPlace: (array<'a>, 'a) => array<'a> = \"fill\"\nlet a = fillInPlace([1, 2, 3], 99)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar el = document.getElementById(\"myId\");\n\nvar a = [1, 2, 3].fill(99);\n```\n\n----------------------------------------\n\nTITLE: Promise.all3 Implementation\nDESCRIPTION: Combines three promises into a single promise that resolves with a tuple of results\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/promise.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nlet all3: ((t<'a0>, t<'a1>, t<'a2>)) => t<('a0, 'a1, 'a2)>\n```\n\n----------------------------------------\n\nTITLE: Finding maximum key in MapString module (ReScript)\nDESCRIPTION: Function to find the maximum key in a map, returning an option type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-string.mdx#2025-04-18_snippet_27\n\nLANGUAGE: reason\nCODE:\n```\nlet maxKey: t('a) => option(key);\n```\n\n----------------------------------------\n\nTITLE: Creating an Array Using an Uncurried Function in ReScript\nDESCRIPTION: The makeByU function creates an array populated by applying an uncurried function to each index from 0 to n-1.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/array.mdx#2025-04-18_snippet_18\n\nLANGUAGE: ReScript\nCODE:\n```\nlet makeByU: (int, (. int) => 'a) => array<'a>\n```\n\n----------------------------------------\n\nTITLE: Array Access with Belt in ReScript\nDESCRIPTION: Shows how Belt handles array access differently from the default standard library, returning options instead of raising exceptions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nopen Belt\nlet letters = [\"a\", \"b\", \"c\"]\nlet a = letters[0]\n\n// Use a switch statement:\nlet capitalA =\n  switch a {\n  | Some(a) => Some(Js.String.toUpperCase(a))\n  | None => None\n  }\n\nlet k = letters[10] // k == None\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching on Optional Record Fields\nDESCRIPTION: Demonstrates direct pattern matching on an optional field value, which is treated as an option. This shows checking if a person's name is a specific value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/record.mdx#2025-04-18_snippet_11\n\nLANGUAGE: rescript\nCODE:\n```\ntype person = {\n  age: int,\n  name?: string,\n}\n\nlet me = {\n  age: 123,\n  name: \"Hello\",\n}\n\nlet isRescript = switch me.name {\n| Some(\"ReScript\") => true\n| Some(_) | None => false\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar isRescript;\n\nisRescript = \"Hello\" === \"ReScript\" ? true : false;\n\nvar me = {\n  age: 123,\n  name: \"Hello\"\n};\n```\n\n----------------------------------------\n\nTITLE: Reducing an Array to a Single Value in ReScript\nDESCRIPTION: Applies a reducer function against an accumulator and each element in the array to reduce it to a single value. Takes the reducer function, an initial value, and the array to process.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/array.mdx#2025-04-18_snippet_22\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduce: (('b, 'a) => 'b, 'b, t<'a>) => 'b\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet sumOfSquares = (accumulator, item) => accumulator + item * item\n\nJs.Array.reduce(sumOfSquares, 0, [10, 2, 4]) == 120\nJs.Array.reduce(\"*\", 1, [10, 2, 4]) == 80\nJs.Array.reduce(\n  (acc, item) => acc + Js.String.length(item),\n  0,\n  [\"animal\", \"vegetable\", \"mineral\"],\n) == 22 // 6 + 9 + 7\nJs.Array.reduce((acc, item) => item /. acc, 1.0, [2.0, 4.0]) == 2.0 // 4.0 / (2.0 / 1.0)\n```\n\n----------------------------------------\n\nTITLE: Using reduceRight Function in ReSript\nDESCRIPTION: The reduceRight function reduces an array from right to left using an accumulator and element value. This example shows how to calculate the sum of squares and division operations where order matters.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array.mdx#2025-04-18_snippet_28\n\nLANGUAGE: rescript\nCODE:\n```\nlet sumOfSquares = (accumulator, item) => accumulator + item * item\n\nJs.Array.reduceRight(sumOfSquares, 0, [10, 2, 4]) == 120\nJs.Array.reduceRight((acc, item) => item /. acc, 1.0, [2.0, 4.0]) == 0.5 // 2.0 / (4.0 / 1.0)\n```\n\n----------------------------------------\n\nTITLE: Mapping List Elements with Index and Uncurried Function in ReScript\nDESCRIPTION: The mapWithIndexU function is the uncurried version of mapWithIndex for performance optimization.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/list.mdx#2025-04-18_snippet_27\n\nLANGUAGE: rescript\nCODE:\n```\nlet mapWithIndexU: (t<'a>, (. int, 'a) => 'b) => t<'b>\n```\n\n----------------------------------------\n\nTITLE: Dictionary Get Operation Signature\nDESCRIPTION: Type signature for safely retrieving values from the dictionary with Option type return.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/dict.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet get: (t<'a>, key) => option<'a>\n```\n\n----------------------------------------\n\nTITLE: Using If Without Else in ReScript\nDESCRIPTION: Shows that an if-expression without an else branch implicitly returns unit () when the condition is false.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/control-flow.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\nif showMenu {\n  displayMenu()\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nif (showMenu) {\n  displayMenu();\n}\n```\n\n----------------------------------------\n\nTITLE: Labeled Variant Payloads (Inline Records) in ReScript\nDESCRIPTION: Demonstrates how to use labeled payloads (inline records) in variant constructors for better readability.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/variant.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ReScript\nCODE:\n```\ntype user =\n  | Number(int)\n  | Id({name: string, password: string})\n\nlet me = Id({name: \"Joe\", password: \"123\"})\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar me = {\n  TAG: /* Id */1,\n  name: \"Joe\",\n  password: \"123\"\n};\n```\n\n----------------------------------------\n\nTITLE: Multi-Argument Function in ReScript\nDESCRIPTION: Demonstrates a function taking multiple arguments separated by commas, performing basic arithmetic addition.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/function.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reason\nCODE:\n```\nlet add = (x, y, z) => x + y + z;\nadd(1, 2, 3); // 6\n```\n\nLANGUAGE: ml\nCODE:\n```\nlet add x y z = (x + y) + z\nlet () = add 1 2 3\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction add(x, y, z) {\n  return (x + y | 0) + z | 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Character Type in ReScript\nDESCRIPTION: Shows ReScript's char type for single-letter values. Note that char doesn't support Unicode or UTF-8 and is compiled to ASCII number values in JavaScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/primitive-types.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\nlet firstLetterOfAlphabet = 'a'\n```\n\nLANGUAGE: js\nCODE:\n```\nvar firstLetterOfAlphabet = /* \"a\" */97;\n```\n\n----------------------------------------\n\nTITLE: Concatenating Multiple Strings in ReScript\nDESCRIPTION: The 'concatMany' function combines a string with an array of strings. It takes a string and an array of strings, returning a new string that is the concatenation of all input strings.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/string-2.mdx#2025-04-18_snippet_12\n\nLANGUAGE: rescript\nCODE:\n```\nlet concatMany: (t, array<t>) => t\n```\n\n----------------------------------------\n\nTITLE: Using Js.String with Different Pipe Operators in ReScript\nDESCRIPTION: Demonstrates different ways to use the data-last APIs in Js.String module with pipe last operator, pipe first operator, and without piping. This helps users understand how to work with the inconsistent argument orders in the Js namespace.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\n/* Js.String (data-last API used with pipe last operator) */\nJs.log(\"2019-11-10\" |> Js.String.split(\"-\"))\nJs.log(\"ReScript\" |> Js.String.startsWith(\"Re\"))\n\n/* Js.String (data-last API used with pipe first operator) */\nJs.log(\"2019-11-10\"->Js.String.split(\"-\", _))\nJs.log(\"ReScript\"->Js.String.startsWith(\"Re\", _))\n\n/* Js.String (data-last API used without any piping) */\nJs.log(Js.String.split(\"-\", \"2019-11-10\"))\nJs.log(Js.String.startsWith(\"Re\", \"ReScript\"))\n```\n\n----------------------------------------\n\nTITLE: Defining URL Record Type in ReScript\nDESCRIPTION: Defines the URL record type used by the ReScript React Router. This type represents the decomposed parts of a URL including path, hash, and search parameters.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/router.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\ntype url = {\n  /* path takes window.location.pathname, like \"/book/title/edit\" and turns it into `list{\"book\", \"title\", \"edit\"}` */\n  path: list<string>,\n  /* the url's hash, if any. The # symbol is stripped out for you */\n  hash: string,\n  /* the url's query params, if any. The ? symbol is stripped out for you */\n  search: string\n}\n```\n\n----------------------------------------\n\nTITLE: Merging MapDicts in ReScript\nDESCRIPTION: Functions to merge two MapDicts or add multiple key-value pairs to a MapDict.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_20\n\nLANGUAGE: ReScript\nCODE:\n```\nlet mergeU: (t<'a, 'b, 'id>, t<'a, 'c, 'id>, (. 'a, option<'b>, option<'c>) => option<'d>, ~cmp: cmp<'a, 'id>) => t<'a, 'd, 'id>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet merge: (t<'a, 'b, 'id>, t<'a, 'c, 'id>, ('a, option<'b>, option<'c>) => option<'d>, ~cmp: cmp<'a, 'id>) => t<'a, 'd, 'id>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet mergeMany: (t<'a, 'b, 'id>, array<('a, 'b)>, ~cmp: cmp<'a, 'id>) => t<'a, 'b, 'id>\n```\n\n----------------------------------------\n\nTITLE: Building a ReScript Project\nDESCRIPTION: Commands to build a ReScript project, including its dependencies. The first command is a standard build, while the second runs in watch mode to automatically rebuild on file changes.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/build-overview.mdx#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nrescript\n```\n\n----------------------------------------\n\nTITLE: List Filtering with Index - ReScript\nDESCRIPTION: Function that filters list elements based on their index and value using a predicate function. Returns a new list containing only elements that satisfy the predicate.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/list.mdx#2025-04-18_snippet_57\n\nLANGUAGE: rescript\nCODE:\n```\nlet isEven = x => mod(x, 2) == 0\n\nBelt.List.filterWithIndex(list{1, 2, 3, 4}, (_x, index) => isEven(index))\n```\n\n----------------------------------------\n\nTITLE: Conditional Option Value Assignment\nDESCRIPTION: Example of conditional assignment using option type based on a condition.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/null-undefined-option.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet licenseNumber =\n  if personHasACar {\n    Some(5)\n  } else {\n    None\n  }\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar licenseNumber = personHasACar ? 5 : undefined;\n```\n\n----------------------------------------\n\nTITLE: ReScript With @inline Attribute for Constants\nDESCRIPTION: Demonstrates how to properly inline a constant value in ReScript using the @inline attribute, allowing bundlers to optimize conditional code blocks.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/inlining-constants.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ReScript\nCODE:\n```\n@val external process: 'a = \"process\"\n\n@inline\nlet mode = \"development\"\n\nif (process[\"env\"][\"mode\"] === mode) {\n  Console.log(\"Dev-only code here!\")\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (process.env.mode === \"development\") {\n  console.log(\"Dev-only code here!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Using hypot function to calculate the hypotenuse in ReScript\nDESCRIPTION: The hypot function returns the square root of the sum of squares of its two arguments, implementing the Pythagorean formula. It takes two floats as input and returns a float.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/math.mdx#2025-04-18_snippet_7\n\nLANGUAGE: res\nCODE:\n```\nlet hypot: (float, float) => float\n```\n\n----------------------------------------\n\nTITLE: For Loop Structure in ReScript\nDESCRIPTION: The structure of a for loop in ReScript, which iterates from a starting value up to and including the ending value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/control-flow.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nfor i in startValueInclusive to endValueInclusive {\n  Console.log(i)\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nfor(var i = startValueInclusive; i <= endValueInclusive; ++i){\n  console.log(i);\n}\n```\n\n----------------------------------------\n\nTITLE: Converting String to Float in ReScript\nDESCRIPTION: Converts a given string to a float using Belt.Float.fromString function. Returns Some(float) when the input is a number, None otherwise.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/float.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\nlet fromString: string => option(float);\n```\n\nLANGUAGE: reason\nCODE:\n```\nJs.log(Belt.Float.fromString(\"1.0\") === Some(1.0)); /* true */\n```\n\n----------------------------------------\n\nTITLE: Creating a MutableSet from an Array in ReScript\nDESCRIPTION: This example shows how to create a MutableSet from an array of integers using a custom comparator. It then demonstrates converting the set back to an array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_2\n\nLANGUAGE: ReScript\nCODE:\n```\nmodule IntCmp = Belt.Id.MakeComparable({\n  type t = int\n  let cmp = Pervasives.compare\n})\n\nlet s0 = Belt.MutableSet.fromArray([1, 3, 2, 4], ~id=module(IntCmp))\n\ns0->Belt.MutableSet.toArray /* [1, 2, 3, 4] */\n```\n\n----------------------------------------\n\nTITLE: Finding Union of Belt.Sets in ReScript\nDESCRIPTION: Shows how to find the union of two Belt.Sets using the union function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\nlet s0 = Belt.Set.fromArray([5,2,3,5,6], ~id=module(IntCmp))\nlet s1 = Belt.Set.fromArray([5,2,3,1,5,4], ~id=module(IntCmp))\nlet union = Belt.Set.union(s0, s1)\nunion->Belt.Set.toArray /* [1,2,3,4,5,6] */\n```\n\n----------------------------------------\n\nTITLE: Implementing Procrastination Timer with clearTimeout in ReScript\nDESCRIPTION: Example demonstrating setTimeout and clearTimeout usage for a timer implementation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/global.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet closeHackerNewsTab = () => Js.log(\"close\")\n\nlet timer = ref(Js.Nullable.null)\n\nlet work = () => closeHackerNewsTab()\n\nlet procrastinate = mins => {\n  Js.Nullable.iter(timer.contents, (. timer) => Js.Global.clearTimeout(timer))\n  timer := Js.Nullable.return(Js.Global.setTimeout(work, mins * 60 * 1000))\n}\n```\n\n----------------------------------------\n\nTITLE: Creating RegExp with Flags from String in ReScript\nDESCRIPTION: Function that constructs a RegExp object from a string pattern with specified flags like global, case-insensitive, etc.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/re.mdx#2025-04-18_snippet_7\n\nLANGUAGE: reason\nCODE:\n```\nlet fromStringWithFlags: (string, ~flags: string) => t;\n```\n\n----------------------------------------\n\nTITLE: JavaScript Output Examples for Different Polymorphic Variant Structures\nDESCRIPTION: Shows how different types of polymorphic variants compile to JavaScript. Simple constructors become strings, while variants with payloads become objects with NAME and VAL properties.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/polymorphic-variant.mdx#2025-04-18_snippet_13\n\nLANGUAGE: res\nCODE:\n```\nlet capitalized = #Hello\nlet lowercased = #goodbye\n\nlet err = #error(\"oops!\")\n\nlet num = #\\\"1\"\n```\n\nLANGUAGE: js\nCODE:\n```\nvar capitalized = \"Hello\";\n\nvar lowercased = \"goodbye\";\n\nvar err = {\n  NAME: \"error\",\n  VAL: \"oops!\"\n};\n\nvar num = \"1\";\n```\n\n----------------------------------------\n\nTITLE: Converting Array to Locale-Specific String in ReScript\nDESCRIPTION: Converts the array to a string using the conventions of the current locale. Each element is converted using locale-specific rules. All elements in a ReasonML array must have the same type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/array.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\nlet toLocaleString: t<'a> => string\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.Array.toLocaleString([Js.Date.make()])\n// returns \"3/19/2020, 10:52:11 AM\" for locale en_US.utf8\n// returns \"2020-3-19 10:52:11\" for locale de_DE.utf8\n```\n\n----------------------------------------\n\nTITLE: Basic Pipe Operator Usage in ReScript\nDESCRIPTION: Demonstrates the use of the pipe operator to chain function calls for a die roll and message creation. The pipe operator passes the result of dieRoll as the first argument to dieRollMessage.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/operators_pipe.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\nlet dieRoll = size => {\n  Math.Int.random(1, size)\n}\n\nlet dieRollMessage = (value, name) => {\n  \"Hi \" ++ name ++ \", you rolled a \" ++ Int.toString(value)\n}\n\nlet message = dieRoll(6)->dieRollMessage(\"Marshall\")\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction dieRoll(size) {\n  return Core__Math.Int.random(1, size);\n}\n\nfunction dieRollMessage(value, name) {\n  return \"Hi \" + name + \", you rolled a \" + value.toString();\n}\n\nvar message = dieRollMessage(dieRoll(6), \"Marshall\");\n```\n\n----------------------------------------\n\nTITLE: Copying Properties Between Objects with assign()\nDESCRIPTION: The assign() function copies properties from a source object to a target object, overwriting properties in the target if they have the same key. It returns the modified target object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/obj.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reasonml\nCODE:\n```\nlet assign: (Js.t({..}), Js.t({..})) => Js.t({..});\n```\n\n----------------------------------------\n\nTITLE: Removing a Key-Value Pair from a HashMap in ReScript\nDESCRIPTION: Removes a key-value pair from the hash map if it exists. Demonstrates removal and subsequent checking of key existence.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-map.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\nlet remove: (t('key, 'value, 'id), 'key) => unit;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nmodule IntHash =\n  Belt.Id.MakeHashable({\n    type t = int;\n    let hash = a => a;\n    let eq = (a, b) => a == b;\n  });\n  \nlet s0 = Belt.HashMap.make(~hintSize=10, ~id=(module IntHash));\nBelt.HashMap.set(s0, 1, \"value1\");\nBelt.HashMap.remove(s0, 1);\nBelt.HashMap.has(s0, 1) == false;\n```\n\n----------------------------------------\n\nTITLE: Transforming Array Elements in ReScript\nDESCRIPTION: Creates a new array with the results of calling the provided function on every element in the array. The result array can have elements of a different type than the input array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/array.mdx#2025-04-18_snippet_20\n\nLANGUAGE: rescript\nCODE:\n```\nlet map: ('a => 'b, t<'a>) => t<'b>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.Array.map(x => x * x, [12, 4, 8]) == [144, 16, 64]\nJs.Array.map(Js.String.length, [\"animal\", \"vegetable\", \"mineral\"]) == [6, 9, 7]\n```\n\n----------------------------------------\n\nTITLE: Mapping Values with Keys in a Map in ReScript\nDESCRIPTION: Applies a function to all key-value pairs in a map, creating a new map with the same keys and transformed values. This is the curried version of mapWithKeyU.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map.mdx#2025-04-18_snippet_12\n\nLANGUAGE: reasonml\nCODE:\n```\nlet mapWithKey: (t('k, 'v, 'id), ('k, 'v) => 'v2) => t('k, 'v2, 'id);\n```\n\n----------------------------------------\n\nTITLE: ReScript Error Level Logging Functions\nDESCRIPTION: Error level logging functions supporting 1-4 arguments and array logging. These functions print error messages to the console.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/console.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet error: 'a => unit\nlet error2: ('a, 'b) => unit\nlet error3: ('a, 'b, 'c) => unit\nlet error4: ('a, 'b, 'c, 'd) => unit\nlet errorMany: array<'a> => unit\n```\n\n----------------------------------------\n\nTITLE: Comparing Result Values with Custom Function in ReScript\nDESCRIPTION: Illustrates how to use the eq function to compare Result values using a custom equality function, handling both Ok and Error variants.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/result.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet good1 = Belt.Result.Ok(42);\n\nlet good2 = Belt.Result.Ok(32);\n\nlet bad1 = Belt.Result.Error(\"invalid\");\n\nlet bad2 = Belt.Result.Error(\"really invalid\");\n\nlet mod10equal = (a, b) => a mod 10 === b mod 10;\n\nBelt.Result.eq(good1, good2, mod10equal) == true;\n\nBelt.Result.eq(good1, bad1, mod10equal) == false;\n\nBelt.Result.eq(bad2, good2, mod10equal) == false;\n\nBelt.Result.eq(bad1, bad2, mod10equal) == true;\n```\n\n----------------------------------------\n\nTITLE: Configuring ReasonReact JSX Support in bsconfig.json\nDESCRIPTION: Configuration for enabling ReasonReact JSX syntax (version 3) in ReScript. This setup is necessary for ReasonReact projects and explicitly specifies the refmt version as 3.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/build-configuration.mdx#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"reason\": { \"react-jsx\": 3 },\n  \"refmt\": 3\n}\n```\n\n----------------------------------------\n\nTITLE: Binding to JS Module Classes using @bs.new and @bs.module\nDESCRIPTION: Demonstrates how to combine @bs.new and @bs.module annotations to bind to a JavaScript module that is itself a class. It shows an example of creating a Book instance.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/bind-to-js-object.mdx#2025-04-18_snippet_5\n\nLANGUAGE: reason\nCODE:\n```\ntype t;\n[@bs.new] [@bs.module] external book: unit => t = \"Book\";\nlet myBook = book();\n```\n\nLANGUAGE: ocaml\nCODE:\n```\ntype t\nexternal book: unit -> t = \"Book\" [@@bs.new][@@bs.module]\nlet myBook = book ()\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar Book = require(\"Book\");\nvar myBook = new Book();\n```\n\n----------------------------------------\n\nTITLE: List Filter Function Signature in ReScript\nDESCRIPTION: Defines the signature for the 'filter' function, which creates a new list with elements that satisfy a predicate.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/list.mdx#2025-04-18_snippet_16\n\nLANGUAGE: rescript\nCODE:\n```\nlet filter: ((. 'a) => bool, t<'a>) => t<'a>\n```\n\n----------------------------------------\n\nTITLE: Reversing Arrays in ReScript\nDESCRIPTION: Reverses the order of items in the array in place.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/array.mdx#2025-04-18_snippet_4\n\nLANGUAGE: ReScript\nCODE:\n```\nlet reverseInPlace: array<'a> => unit\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet arr = [10, 11, 12, 13, 14]\n\nlet () = Belt.Array.reverseInPlace(arr)\n\narr == [14, 13, 12, 11, 10]\n```\n\n----------------------------------------\n\nTITLE: URL Structure Example in ReScript\nDESCRIPTION: Demonstrates how a URL is represented as a ReScript record after being processed by the router. Shows the decomposition of a URL into path segments, hash, and search components.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/router.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\n{\n  path: list{\"book\", \"10\", \"edit\"},\n  hash: \"author\",\n  search: \"name=Jane\"\n}\n```\n\n----------------------------------------\n\nTITLE: Slicing an Array from Offset to End in ReScript\nDESCRIPTION: The sliceToEnd function creates a new array with the elements of the original array starting at a given offset and continuing to the end. Handles negative offsets.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/array.mdx#2025-04-18_snippet_29\n\nLANGUAGE: ReScript\nCODE:\n```\nlet sliceToEnd: (array<'a>, int) => array<'a>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nBelt.Array.sliceToEnd([10, 11, 12, 13, 14, 15, 16], 2) == [12, 13, 14, 15, 16]\n\nBelt.Array.sliceToEnd([10, 11, 12, 13, 14, 15, 16], -4) == [13, 14, 15, 16]\n```\n\n----------------------------------------\n\nTITLE: Function with Ambiguous Arguments\nDESCRIPTION: Example showing how functions with multiple arguments of the same type can be confusing to call without labels, as it's not clear which argument is which.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/function.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nlet addCoordinates = (x, y) => {\n  // use x and y here\n}\n// ...\naddCoordinates(5, 6) // which is x, which is y?\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction addCoordinates(x, y) {\n  // use x and y here\n}\n\naddCoordinates(5, 6);\n```\n\n----------------------------------------\n\nTITLE: Deep Object Path Binding\nDESCRIPTION: Demonstrates binding to deeply nested global object properties using tuple scope.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/bind-to-global-js-values.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\n@val @scope((\"window\", \"location\", \"ancestorOrigins\"))\nexternal length: int = \"length\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Passing setState to Child Components in ReScript React\nDESCRIPTION: Creates a ThemeContainer component that manages dark mode state and passes the state setter to a child ControlPanel component. Shows pattern for parent-child state management and conditional rendering based on state.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/hooks-state.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\n// ThemeContainer.res\nmodule ControlPanel = {\n  @react.component\n  let make = (~setDarkmode, ~darkmode) => {\n    let onClick = evt => {\n      ReactEvent.Mouse.preventDefault(evt)\n      setDarkmode(prev => !prev)\n    }\n\n    let toggleText = \"Switch to \" ++ ((darkmode ? \"light\" : \"dark\") ++ \" theme\")\n\n    <div> <button onClick> {React.string(toggleText)} </button> </div>\n  }\n}\n\n@react.component\nlet make = (~content) => {\n  let (darkmode, setDarkmode) = React.useState(_ => false)\n\n  let className = darkmode ? \"theme-dark\" : \"theme-light\"\n\n  <div className>\n    <section>\n      <h1> {React.string(\"More Infos about ReScript\")} </h1> content\n    </section>\n    <ControlPanel darkmode setDarkmode />\n  </div>\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction ControlPanel(Props) {\n  var setDarkmode = Props.setDarkmode;\n  var darkmode = Props.darkmode;\n  var onClick = function (evt) {\n    evt.preventDefault();\n    return Curry._1(setDarkmode, (function (prev) {\n                  return !prev;\n                }));\n  };\n  var toggleText = \"Switch to \" + ((\n      darkmode ? \"light\" : \"dark\"\n    ) + \" theme\");\n  return React.createElement(\"div\", undefined, React.createElement(\"button\", {\n                  onClick: onClick\n                }, toggleText));\n}\n\nfunction ThemeContainer(Props) {\n  var content = Props.content;\n  var match = React.useState(function () {\n        return false;\n      });\n  var darkmode = match[0];\n  var className = darkmode ? \"theme-dark\" : \"theme-light\";\n  return React.createElement(\"div\", {\n              className: className\n            }, React.createElement(\"section\", undefined, React.createElement(\"h1\", undefined, \"More Infos about ReScript\"), content), React.createElement(Playground$ControlPanel, {\n                  setDarkmode: match[1],\n                  darkmode: darkmode\n                }));\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Record Type Coercion with Identical Fields\nDESCRIPTION: Shows how to coerce a record of one type to another when both types have the same field structure, using the :> operator.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2023-05-17-enhanced-ergonomics-for-record-types.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\ntype a = {\n  name: string,\n  age: int,\n}\n\ntype b = {\n  name: string,\n  age: int,\n}\n\nlet nameFromB = (b: b) => b.name\n\nlet a: a = {\n  name: \"Name\",\n  age: 35,\n}\n\nlet name = nameFromB(a :> b)\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching with Option Type\nDESCRIPTION: Example showing how to handle option types using pattern matching in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/null-undefined-option.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reason\nCODE:\n```\nswitch (licenseNumber) {\n| None =>\n  Js.log(\"The person doesn't have a car\");\n| Some(number) =>\n  Js.log(\"The person's license number is \" ++ Js.Int.toString(number));\n};\n```\n\nLANGUAGE: ml\nCODE:\n```\nlet () = match licenseNumber with\n| None ->\n  Js.log \"The person doesn't have a car\"\n| Some number ->\n  Js.log (\"The person's license number is \" ^ (Js.Int.toString number))\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar number = licenseNumber;\n\nif (number !== undefined) {\n  console.log(\"The person's license number is \" + number.toString());\n} else {\n  console.log(\"The person doesn't have a car\");\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Comparison Operators in ReScript\nDESCRIPTION: Demonstrates the usage of comparison operators (>, >=, <, <=) in ReScript and their compilation to JavaScript, showing both direct comparisons and runtime checks.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/equality-comparison.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet compareInt = (a: int, b: int) => a > b\nlet t1 = 1 > 10\nlet compareArray = (a: array<int>, b: array<int>) => a > b\nlet compareOptions = (a: option<float>, b: option<float>) => a < b\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Caml_obj from \"./stdlib/caml_obj.js\";\n\nfunction compareInt(a, b) {\n  return a > b;\n}\n\nvar t1 = false;\n\nvar compareArray = Caml_obj.greaterthan;\n\nvar compareOptions = Caml_obj.lessthan;\n```\n\n----------------------------------------\n\nTITLE: Creating Integer Range Arrays in ReScript\nDESCRIPTION: Creates an array containing an inclusive range of integers from start to finish. Returns an empty array when start > finish.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/array.mdx#2025-04-18_snippet_16\n\nLANGUAGE: reason\nCODE:\n```\nlet range: (int, int) => array(int);\n```\n\nLANGUAGE: reason\nCODE:\n```\nBelt.Array.range(0, 3) == [|0, 1, 2, 3|];\n\nBelt.Array.range(3, 0) == [||];\n\nBelt.Array.range(3, 3) == [|3|];\n```\n\n----------------------------------------\n\nTITLE: Mutating References by Accessing Contents in ReScript\nDESCRIPTION: Updating a mutable reference by directly assigning to its 'contents' field. This changes the stored value within the reference.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/mutation.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nmyValue.contents = 6\n```\n\nLANGUAGE: js\nCODE:\n```\nmyValue.contents = 6;\n```\n\n----------------------------------------\n\nTITLE: Limited String Splitting in ReScript\nDESCRIPTION: Methods for splitting strings with a limit on the number of splits.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/string.mdx#2025-04-18_snippet_10\n\nLANGUAGE: res\nCODE:\n```\nlet splitAtMost: (t, ~limit: int, t) => array<t>\n```\n\nLANGUAGE: res\nCODE:\n```\nJs.String.splitAtMost(\"/\", ~limit=3, \"ant/bee/cat/dog/elk\") == [\"ant\", \"bee\", \"cat\"]\nJs.String.splitAtMost(\"/\", ~limit=0, \"ant/bee/cat/dog/elk\") == []\nJs.String.splitAtMost(\"/\", ~limit=9, \"ant/bee/cat/dog/elk\") == [\"ant\", \"bee\", \"cat\", \"dog\", \"elk\"]\n```\n\n----------------------------------------\n\nTITLE: Executing RegExp Search on String\nDESCRIPTION: Function that executes a search on a given string using a RegExp object. Returns Some(result) if a match is found, None otherwise.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/re.mdx#2025-04-18_snippet_17\n\nLANGUAGE: reason\nCODE:\n```\nlet exec_: (t, string) => option(result);\n```\n\nLANGUAGE: reason\nCODE:\n```\n/* Match \"quick brown\" followed by \"jumps\", ignoring characters in between\n * Remember \"brown\" and \"jumps\"\n * Ignore case\n */\n\nlet re = [%re \"/quick\\s(brown).+?(jumps)/ig\"];\nlet result = (Js.Re.exec_(re, \"The Quick Brown Fox Jumps Over The Lazy Dog\"));\n```\n\n----------------------------------------\n\nTITLE: Structural Sharing with Polymorphic Variants in ReScript\nDESCRIPTION: Demonstrates how polymorphic variants support structural typing, allowing values of different types to share constructors they have in common.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/polymorphic-variant.mdx#2025-04-18_snippet_8\n\nLANGUAGE: ReScript\nCODE:\n```\ntype preferredColors = [#white | #blue]\n\nlet myColor: preferredColors = #blue\n\nlet displayColor = v => {\n  switch v {\n  | #red => \"Hello red\"\n  | #green => \"Hello green\"\n  | #white => \"Hey white!\"\n  | #blue => \"Hey blue!\"\n  }\n}\n\nConsole.log(displayColor(myColor))\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar myColor = \"blue\";\n\nfunction displayColor(v) {\n  if (v === \"white\") {\n    return \"Hey white!\";\n  } else if (v === \"red\") {\n    return \"Hello red\";\n  } else if (v === \"green\") {\n    return \"Hello green\";\n  } else {\n    return \"Hey blue!\";\n  }\n}\n\nconsole.log(displayColor(\"blue\"));\n```\n\n----------------------------------------\n\nTITLE: Parameter Destructuring in Function Definition\nDESCRIPTION: Demonstrates destructuring a variant parameter directly in a function definition, extracting the payload value without additional steps.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\ntype result =\n  | Success(string)\nlet displayMessage = (Success(m)) => {\n  // we've directly extracted the success message\n  // string by destructuring the parameter\n  Js.log(m)\n}\ndisplayMessage(Success(\"You did it!\"))\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction displayMessage(m) {\n  console.log(m._0);\n}\n\ndisplayMessage(/* Success */{\n  _0: \"You did it!\"\n});\n```\n\n----------------------------------------\n\nTITLE: Breaking Out of While Loops in ReScript\nDESCRIPTION: Demonstrates a technique to break out of a while loop using a mutable binding, since ReScript doesn't have a break keyword like JavaScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/control-flow.mdx#2025-04-18_snippet_9\n\nLANGUAGE: re\nCODE:\n```\nlet break = ref(false);\n\nwhile (!break.contents) {\n  if (Js.Math.random() > 0.3) {\n    break := true;\n  } else {\n    Js.log(\"Still running\");\n  };\n};\n```\n\nLANGUAGE: ml\nCODE:\n```\nlet () = break <- ref false\nlet () = while not break.contents do\n  if (Js.Math.random ()) > 0.3 then\n    break := true\n  else\n    Js.log \"Still running\"\ndone\n```\n\nLANGUAGE: js\nCODE:\n```\nvar $$break = {\n  contents: false\n};\n\nwhile(!$$break.contents) {\n  if (Math.random() > 0.3) {\n    $$break.contents = true;\n  } else {\n    console.log(\"Still running\");\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Component Types in ReScript\nDESCRIPTION: Examples of defining component types using plain function type and React.component shorthand for friend and container components.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/beyond-jsx.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\n// Plain function type\ntype friend = {name: string, online: bool}\ntype friendComp = friend => React.element\n\n// Equivalent to\n// ({padding: string, children: React.element}) => React.element\ntype props = {padding: string, children: React.element}\ntype containerComp = React.component<props>\n```\n\n----------------------------------------\n\nTITLE: Immutable List Prepend in ReScript\nDESCRIPTION: Shows how to prepend elements to a list using the spread syntax. This operation creates a new list without modifying the original one, demonstrating the immutable nature of lists in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/array-and-list.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\nlet myList = list{1, 2, 3}\nlet anotherList = list{0, ...myList}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar myList = {\n  hd: 1,\n  tl: {\n    hd: 2,\n    tl: {\n      hd: 3,\n      tl: 0\n    }\n  }\n};\n\nvar anotherList = {\n  hd: 0,\n  tl: myList\n};\n```\n\n----------------------------------------\n\nTITLE: Conditional Option Value Assignment\nDESCRIPTION: Example demonstrating how to conditionally assign an option value based on a condition.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/null-undefined-option.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\nlet licenseNumber =\n  if (personHasACar) {\n    Some(5);\n  } else {\n    None;\n  };\n```\n\nLANGUAGE: ml\nCODE:\n```\nlet licenseNumber =\n  if personHasACar then\n    Some 5\n  else\n    None\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar licenseNumber = personHasACar ? 5 : undefined;\n```\n\n----------------------------------------\n\nTITLE: Using Labeled Arguments in Any Order\nDESCRIPTION: Demonstration of how labeled arguments can be provided in any order when calling a function, which is a key benefit of using labeled arguments.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/function.mdx#2025-04-18_snippet_6\n\nLANGUAGE: res\nCODE:\n```\naddCoordinates(~y=6, ~x=5)\n```\n\nLANGUAGE: js\nCODE:\n```\naddCoordinates(5, 6);\n```\n\n----------------------------------------\n\nTITLE: Extracting Substring to End in ReScript\nDESCRIPTION: The sliceToEnd function extracts a portion of a string from a given start index to the end of the string. It supports negative indices and returns an empty string if the start index is greater than the string length.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string.mdx#2025-04-18_snippet_34\n\nLANGUAGE: rescript\nCODE:\n```\nlet sliceToEnd: (~from: int, t) => t;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.String.sliceToEnd(~from=4, \"abcdefg\") == \"efg\";\nJs.String.sliceToEnd(~from=(-2), \"abcdefg\") == \"fg\";\nJs.String.sliceToEnd(~from=7, \"abcdefg\") == \"\";\n```\n\n----------------------------------------\n\nTITLE: Using ReScript Scoped Polymorphic Logger with Multiple Types\nDESCRIPTION: Demonstration of using a scoped polymorphic logger function with different data types in ReScript, showcasing how it maintains type safety across multiple invocations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/scoped-polymorphic-types.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nlet myLogger = getLogger()\n\nmyLogger.log(\"Hello, ReScript!\")\nmyLogger.log(42)\n```\n\n----------------------------------------\n\nTITLE: Destructuring Tuples in ReScript\nDESCRIPTION: Illustrates how to destructure tuples to retrieve specific members. The underscore is used to ignore certain tuple elements during destructuring.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/tuple.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nlet (_, y, _) = my3dCoordinates // now you've retrieved y\n```\n\nLANGUAGE: js\nCODE:\n```\nvar y = 30.5;\n```\n\n----------------------------------------\n\nTITLE: Ternary Expression in ReScript\nDESCRIPTION: Shows the ternary expression syntax in ReScript, which is similar to JavaScript but less commonly used in idiomatic ReScript code.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/control-flow.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\nlet message = isMorning ? \"Good morning!\" : \"Hello!\"\n```\n\nLANGUAGE: js\nCODE:\n```\nvar message = isMorning ? \"Good morning!\" : \"Hello!\";\n```\n\n----------------------------------------\n\nTITLE: Creating a JS Object in ReScript\nDESCRIPTION: Demonstrates how to create a JavaScript object directly in ReScript syntax.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/newcomer-examples.mdx#2025-04-18_snippet_2\n\nLANGUAGE: ReScript\nCODE:\n```\nlet student1 = {\n  \"name\": \"John\",\n  \"age\": 30,\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar student1 = {\n  name: \"John\",\n  age: 30,\n};\n```\n\n----------------------------------------\n\nTITLE: Using Pipe Operator with Abstract Record Accessors\nDESCRIPTION: The pipe operator can be used for a cleaner syntax when accessing fields of abstract records through accessor functions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/generate-converters-accessors.mdx#2025-04-18_snippet_12\n\nLANGUAGE: ReScript\nCODE:\n```\nlet twenty = joe->ageGet\n```\n\n----------------------------------------\n\nTITLE: Creating Mutable Ref in ReScript\nDESCRIPTION: Demonstrates how to create a mutable reference using ref in ReScript. The ref wrapper creates a record with a single mutable field.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/mutation.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\nlet myValue = ref(5);\n```\n\nLANGUAGE: ml\nCODE:\n```\nlet myValue = ref 5\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar myValue = {\n  contents: 5\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Untyped Environment Variables\nDESCRIPTION: Shows how consumers would typically use the untyped environment variables access, requiring manual type annotation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/module-functions.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\ntype t = {\"LOG_LEVEL\": string}\n\nlet values: t = getEnv()\n```\n\n----------------------------------------\n\nTITLE: Comparing Block Return Syntax in ReScript and JavaScript\nDESCRIPTION: Demonstrates how ReScript implicitly returns the last expression of a block, compared to JavaScript's explicit return statements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/overview.mdx#2025-04-18_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet result = (function() {\n  const x = 23;\n  const y = 34;\n  return x + y;\n})();\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet result = {\n  let x = 23\n  let y = 34\n  x + y\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Belt Module in ReScript/Reason\nDESCRIPTION: Shows how to import the Belt module at the file level to access its functions directly\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\nopen Belt;\n```\n\n----------------------------------------\n\nTITLE: Basic Pipe Usage in ReScript\nDESCRIPTION: Demonstrates how the pipe operator transforms nested function calls into a more readable, sequential chain of operations. The example compares traditional nested function calls with the pipe approach.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/pipe.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nvalidateAge(getAge(parseData(person)))\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvalidateAge(getAge(parseData(person)));\n```\n\nLANGUAGE: rescript\nCODE:\n```\nperson\n  ->parseData\n  ->getAge\n  ->validateAge\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvalidateAge(getAge(parseData(person)));\n```\n\n----------------------------------------\n\nTITLE: Defining Hashable Function in ReScript\nDESCRIPTION: Function for creating curried hashable modules with custom hash and equality functions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/id.mdx#2025-04-18_snippet_13\n\nLANGUAGE: rescript\nCODE:\n```\nlet hashable: (~hash: 'a => int, ~eq: ('a, 'a) => bool) =>\n  module(Belt.Id.Hashable with type t = 'a)\n```\n\n----------------------------------------\n\nTITLE: Explicitly Passing Optional Arguments\nDESCRIPTION: Using the shorthand syntax with ?payloadRadius to pass an optional value directly. This is a concise way to forward optional values without unwrapping them manually.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/function.mdx#2025-04-18_snippet_12\n\nLANGUAGE: res\nCODE:\n```\nlet result = drawCircle(~color, ~radius=?payloadRadius)\n```\n\nLANGUAGE: js\nCODE:\n```\nvar result = drawCircle(1, undefined);\n```\n\n----------------------------------------\n\nTITLE: Destructuring Tuples in ReScript\nDESCRIPTION: Demonstrates how to destructure tuples to access specific elements using pattern matching.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/tuple.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet (_, y, _) = my3dCoordinates // now you've retrieved y\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar y = 30.5;\n```\n\n----------------------------------------\n\nTITLE: Executing Lazy Computations with Lazy.force\nDESCRIPTION: This snippet shows how to execute a lazy computation using Lazy.force. The first call performs the computation and caches the result, while subsequent calls return the cached value without recomputing.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/lazy-values.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\n// First call. The computation happens\nConsole.log(Lazy.force(expensiveFilesRead)) // logs \"Reading dir\" and the directory content\n\n// Second call. Will just return the already calculated result\nConsole.log(Lazy.force(expensiveFilesRead)) // logs the directory content\n```\n\nLANGUAGE: js\nCODE:\n```\nconsole.log(CamlinternalLazy.force(expensiveFilesRead));\n\nconsole.log(CamlinternalLazy.force(expensiveFilesRead));\n```\n\n----------------------------------------\n\nTITLE: Map Creation Example - ReScript\nDESCRIPTION: Example showing how to create a new map using a custom integer comparator module.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nmodule IntCmp = Belt.Id.MakeComparable({\n  type t = int\n  let cmp = (a, b) => Pervasives.compare(a, b)\n})\n\nlet m = Belt.Map.make(~id=module(IntCmp))\n\nBelt.Map.set(m, 0, \"a\")\n```\n\n----------------------------------------\n\nTITLE: Dictionary Key Type Definition\nDESCRIPTION: Type definition specifying that dictionary keys must be strings\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/dict.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\ntype key = string;\n```\n\n----------------------------------------\n\nTITLE: Configuring ReScript JSON for Classic JSX Mode\nDESCRIPTION: JSON configuration to set JSX version 4 with classic mode, using the legacy React.createElement API.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/installation.mdx#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsx\": { \"version\": 4, \"mode\": \"classic\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Elements with Index\nDESCRIPTION: Creates a new array with all elements that pass the provided function test, which includes the element index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_35\n\nLANGUAGE: rescript\nCODE:\n```\nlet filteri: ((. elt, int) => bool, t) => t\n```\n\n----------------------------------------\n\nTITLE: Defining Props in ReScript React Components\nDESCRIPTION: An article component that demonstrates how to define multiple props in a ReScript React component, including a title string, visitor count integer, and children elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/components-and-props.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\n// src/Article.res\n@react.component\nlet make = (~title: string, ~visitorCount: int, ~children: React.element) => {\n  let visitorCountMsg = \"You are visitor number: \" ++ Belt.Int.toString(visitorCount);\n  <div>\n    <div> {React.string(title)} </div>\n    <div> {React.string(visitorCountMsg)} </div>\n    children\n  </div>\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from \"react\";\n\nfunction Article(props) {\n  var visitorCountMsg = \"You are visitor number: \" + String(props.visitorCount);\n  return React.createElement(\"div\", undefined, React.createElement(\"div\", undefined, props.title), React.createElement(\"div\", undefined, visitorCountMsg), props.children);\n}\n\nvar make = Article;\n```\n\n----------------------------------------\n\nTITLE: Testing Array Elements with Index using everyi in ReScript\nDESCRIPTION: Tests whether all elements in the array pass the test implemented by the provided function which receives both the element and its index. Returns true if the predicate function is true for all items or if the array is empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/array-2.mdx#2025-04-18_snippet_12\n\nLANGUAGE: ReScript\nCODE:\n```\nlet everyi: (t<'a>, ('a, int) => bool) => bool\n```\n\nLANGUAGE: ReScript\nCODE:\n```\n// determine if all even-index items are positive\nlet evenIndexPositive = (item, index) => mod(index, 2) == 0 ? item > 0 : true\n\nJs.Array2.everyi([6, -3, 5, 8], evenIndexPositive) == true\nJs.Array2.everyi([6, 3, -5, 8], evenIndexPositive) == false\n```\n\n----------------------------------------\n\nTITLE: Removing Multiple Elements from Belt.Set in ReScript\nDESCRIPTION: Demonstrates how to remove multiple elements from a Belt.Set using the removeMany function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\nlet set = Belt.Set.fromArray([1, 2, 3, 4],~id=module(IntCmp))\n\nlet newSet = set->Belt.Set.removeMany([5, 4, 3, 2, 1])\nnewSet->Belt.Set.toArray /* [] */\n```\n\n----------------------------------------\n\nTITLE: Configuring Warnings in bsconfig.json for ReScript\nDESCRIPTION: Example of how to selectively turn on/off certain warnings or turn them into hard errors in bsconfig.json. This configuration turns off warnings 44 and 102, and turns warning 5 into a hard error.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/build-configuration.mdx#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"warnings\": {\n    \"number\": \"-44-102\",\n    \"error\": \"+5\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Output After Webpack Processing\nDESCRIPTION: Example showing how JavaScript bundlers like Webpack replace environment variables with their actual values, enabling dead code elimination in production builds.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/inlining-constants.mdx#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif ('production' === 'development') {\n  console.log(\"Dev-only code here!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Regular Expression Splitting in ReScript\nDESCRIPTION: Methods for splitting strings using regular expressions with optional limits.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/string.mdx#2025-04-18_snippet_11\n\nLANGUAGE: res\nCODE:\n```\nlet splitByRe: (Js_re.t, t) => array<option<t>>\n```\n\nLANGUAGE: res\nCODE:\n```\nJs.String.splitByRe(%re(\"/\\s*[,;]\\s*/\"), \"art; bed , cog ;dad\") == [\n    Some(\"art\"),\n    Some(\"bed\"),\n    Some(\"cog\"),\n    Some(\"dad\"),\n  ]\n```\n\n----------------------------------------\n\nTITLE: Renaming Fields in JavaScript Objects with @as Annotation\nDESCRIPTION: Demonstrates how to handle JavaScript objects with field names that are invalid in ReScript, such as reserved keywords or special characters, by using the @as annotation to specify the actual JS field name.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/generate-converters-accessors.mdx#2025-04-18_snippet_15\n\nLANGUAGE: ReScript\nCODE:\n```\n@deriving(abstract)\ntype data = {\n  @as(\"type\") type_: string,\n  @as(\"aria-label\") ariaLabel: string,\n};\n\nlet d = data(~type_=\"message\", ~ariaLabel=\"hello\");\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar d = {\n  type: \"message\",\n  \"aria-label\": \"hello\"\n};\n```\n\n----------------------------------------\n\nTITLE: Reducing Two Lists in Reverse with Belt.List in ReScript\nDESCRIPTION: The reduceReverse2 function applies a function to corresponding elements from two lists along with an accumulator, starting from the end. It stops with the shorter list.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/list.mdx#2025-04-18_snippet_45\n\nLANGUAGE: rescript\nCODE:\n```\nBelt.List.reduceReverse2(list{1, 2, 3}, list{4, 5}, 0, (acc, x, y) => acc + x * x + y) /*  + (1 * 1 + 4) + (2 * 2 + 5) */\n```\n\n----------------------------------------\n\nTITLE: Computing the union of two string sets in ReScript\nDESCRIPTION: Returns a new set containing all elements from both input sets.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set-string.mdx#2025-04-18_snippet_11\n\nLANGUAGE: rescript\nCODE:\n```\nlet union: (t, t) => t\n```\n\n----------------------------------------\n\nTITLE: Defining Fibonacci Function in ReScript (Reason Syntax)\nDESCRIPTION: Implements a recursive Fibonacci function using pattern matching in ReScript's Reason syntax. The function is then called with an argument of 0 and logged to the console.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/try.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\n// MyFile.re\nlet rec fib = n => {\n  switch (n) {\n  | 0 | 1 => n\n  | n => fib(n - 1) + fib(n - 2)\n  }\n};\nJs.log(fib(0));\n```\n\n----------------------------------------\n\nTITLE: List Creation and Transformation\nDESCRIPTION: Examples of creating and transforming lists using make, makeBy, and map functions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/list.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nBelt.List.make(3, 1) // list{1, 1, 1}\n```\n\nLANGUAGE: res\nCODE:\n```\nBelt.List.makeBy(5, i => i) // list{0, 1, 2, 3, 4}\n\nBelt.List.makeBy(5, i => i * i) // list{0, 1, 4, 9, 16}\n```\n\n----------------------------------------\n\nTITLE: Destructuring Tuples in ReScript\nDESCRIPTION: Demonstrates how to extract specific values from a tuple using destructuring in ReScript. This technique allows accessing individual elements of a tuple.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/tuple.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\nlet (_, y, _) = my3dCoordinates; // now you've retrieved y\n```\n\nLANGUAGE: ml\nCODE:\n```\nlet (_, y, _) = my3dCoordinates; (* now you've retrieved y *)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar y = 30.5;\n```\n\n----------------------------------------\n\nTITLE: String Character Access\nDESCRIPTION: Function signature for accessing a character at a specific index in a string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/string-2.mdx#2025-04-18_snippet_7\n\nLANGUAGE: res\nCODE:\n```\nlet get: (t, int) => t\n```\n\n----------------------------------------\n\nTITLE: Modifying MutableMaps in ReScript\nDESCRIPTION: Functions for modifying map contents, including removing, setting, and updating key-value pairs.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-map.mdx#2025-04-18_snippet_8\n\nLANGUAGE: ReScript\nCODE:\n```\nlet checkInvariantInternal: t<'a, 'b, 'c> => unit\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet remove: (t<'k, 'a, 'id>, 'k) => unit\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet removeMany: (t<'k, 'a, 'id>, array<'k>) => unit\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet set: (t<'k, 'a, 'id>, 'k, 'a) => unit\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet updateU: (t<'k, 'a, 'id>, 'k, (. option<'a>) => option<'a>) => unit\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet update: (t<'k, 'a, 'id>, 'k, option<'a> => option<'a>) => unit\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet mergeMany: (t<'k, 'a, 'id>, array<('k, 'a)>) => unit\n```\n\n----------------------------------------\n\nTITLE: String Make Usage Examples\nDESCRIPTION: Examples showing conversion of different types to strings.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string-2.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\nJs.String2.make(3.5) == \"3.5\";\nJs.String2.make([|1,2,3|]) == \"1,2,3\";\n```\n\n----------------------------------------\n\nTITLE: Retrieving Elements from ReScript Belt.MutableSet\nDESCRIPTION: The 'get', 'getUndefined', and 'getExn' functions retrieve elements from a MutableSet. 'get' returns an option, 'getUndefined' returns undefined for missing elements, and 'getExn' raises an exception for missing elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_53\n\nLANGUAGE: reason\nCODE:\n```\nlet get: (t('value, 'id), 'value) => option('value);\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet getUndefined: (t('value, 'id), 'value) => Js.undefined('value);\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet getExn: (t('value, 'id), 'value) => 'value;\n```\n\nLANGUAGE: reason\nCODE:\n```\nmodule IntCmp =\n  Belt.Id.MakeComparable({\n    type t = int;\n    let cmp = Pervasives.compare;\n  });\n\nlet s0 = Belt.MutableSet.fromArray([|1,2,3,4,5|], ~id=(module IntCmp));\n\ns0->Belt.MutableSet.get(3); /* Some(3) */\ns0->Belt.MutableSet.get(20); /* None */\n```\n\n----------------------------------------\n\nTITLE: Keep Elements in MutableSet - ReScript\nDESCRIPTION: Keeps elements in the set that satisfy a given predicate function. Returns a new set containing only the elements that match the condition.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet keep: (t<'value, 'id>, 'value => bool) => t<'value, 'id>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nmodule IntCmp = Belt.Id.MakeComparable({\n  type t = int\n  let cmp = Pervasives.compare\n})\n\nlet isEven = x => mod(x, 2) == 0\n\nlet s0 = Belt.MutableSet.fromArray([1, 2, 3, 4, 5], ~id=module(IntCmp))\nlet s1 = s0->Belt.MutableSet.keep(isEven)\n\ns1->Belt.MutableSet.toArray /* [2, 4] */\n```\n\n----------------------------------------\n\nTITLE: Console Utility Functions in ReScript\nDESCRIPTION: Additional utility functions for console operations including trace for stack tracing and time measurement functions. These provide debugging capabilities beyond standard logging.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/console.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reasonml\nCODE:\n```\nlet trace: unit => unit;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet timeStart: string => unit;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet timeEnd: string => unit;\n```\n\n----------------------------------------\n\nTITLE: Vector Iteration\nDESCRIPTION: Iterates over vector elements executing a callback function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/vector.mdx#2025-04-18_snippet_6\n\nLANGUAGE: res\nCODE:\n```\nlet iter: ((. 'a) => unit, t<'a>) => unit\n```\n\n----------------------------------------\n\nTITLE: Using reduceRight with Arrays in ReScript\nDESCRIPTION: Demonstrates the reduceRight function that reduces an array from right to left. It takes an array, a reducer function, and an initial accumulator value, applying the reducer to each element starting from the end of the array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/array-2.mdx#2025-04-18_snippet_25\n\nLANGUAGE: res\nCODE:\n```\nlet reduceRight: (t<'a>, ('b, 'a) => 'b, 'b) => 'b\n```\n\nLANGUAGE: res\nCODE:\n```\nlet sumOfSquares = (accumulator, item) => accumulator + item * item\n\nJs.Array2.reduceRight([10, 2, 4], sumOfSquares, 0) == 120\nJs.Array2.reduceRight([2.0, 4.0], (acc, item) => item /. acc, 1.0) == 0.5 // 2.0 / (4.0 / 1.0)\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching with Big Integers in ReScript\nDESCRIPTION: Example of pattern matching with Big Integer values in ReScript using the switch statement.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/primitive-types.mdx#2025-04-18_snippet_8\n\nLANGUAGE: res\nCODE:\n```\nlet bigintValue = 1n\n\nswitch bigintValue {\n| 1n => Console.log(\"Small bigint\")\n| 100n => Console.log(\"Larger bigint\")\n| _ => Console.log(\"Other bigint\")\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nif (1n !== 1n) {\n  if (1n !== 100n) {\n    console.log(\"Other bigint\");\n  } else {\n    console.log(\"Larger bigint\");\n  }\n} else {\n  console.log(\"Small bigint\");\n}\n\nvar bigintValue = 1n;\n```\n\n----------------------------------------\n\nTITLE: Iterating Over HashMap in ReScript\nDESCRIPTION: Functions to iterate over all key-value pairs in the hash map, applying a given function to each pair.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-map-int.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\nlet forEachU: (t<'b>, (. key, 'b) => unit) => unit\n\nlet forEach: (t<'b>, (key, 'b) => unit) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet hMap = Belt.HashMap.Int.make(~hintSize=10)\nBelt.HashMap.Int.set(hMap, 1, \"value1\")\nBelt.HashMap.Int.forEach(hMap, (key, value) => Js.log2(key, value))\n// prints (\"1\", \"value1\")\n```\n\n----------------------------------------\n\nTITLE: Stable Sort In-Place Function Signatures\nDESCRIPTION: Function signatures for stable in-place array sorting, with both uncurried and curried versions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/sort-array.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet stableSortInPlaceByU: (array<'a>, (. 'a, 'a) => int) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet stableSortInPlaceBy: (array<'a>, ('a, 'a) => int) => unit\n```\n\n----------------------------------------\n\nTITLE: Implementing JSON Encoder in ReScript\nDESCRIPTION: Demonstrates how to encode user objects back into JSON format. Includes recursive handling of nested user objects and null handling for optional fields.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2023-04-17-improving-interop.mdx#2025-04-18_snippet_12\n\nLANGUAGE: rescript\nCODE:\n```\nlet rec userToJson = user => Object(\n  Dict.fromArray([\n    (\"name\", String(user.name)),\n    (\"age\", Number(user.age->Int.toFloat)),\n    (\n      \"bestFriend\",\n      switch user.bestFriend {\n      | None => Null\n      | Some(friend) => userToJson(friend)\n      },\n    ),\n  ]),\n)\n\nlet usersToJson = users => Array(users->Array.map(userToJson))\n```\n\n----------------------------------------\n\nTITLE: Example of Binding Null Values in ReScript\nDESCRIPTION: Demonstrates how to use bind to transform a nullable string by appending text to it if it exists.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/null.mdx#2025-04-18_snippet_7\n\nLANGUAGE: reason\nCODE:\n```\nlet maybeGreetWorld = (maybeGreeting: Js.null(string)) =>\n  Js.Null.bind(maybeGreeting, [@bs] greeting => greeting ++ \" world!\");\n```\n\n----------------------------------------\n\nTITLE: Using reducei Function in ReSript\nDESCRIPTION: The reducei function reduces an array from left to right using an accumulator, element value, and element index. This example demonstrates how to calculate the sum of elements at even indices.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array.mdx#2025-04-18_snippet_27\n\nLANGUAGE: rescript\nCODE:\n```\n// find sum of even-index elements in array\nlet sumOfEvens = (accumulator, item, index) =>\n  if mod(index, 2) == 0 {\n    accumulator + item\n  } else {\n    accumulator\n  }\n\nJs.Array.reducei(sumOfEvens, 0, [2, 5, 1, 4, 3]) == 6\n```\n\n----------------------------------------\n\nTITLE: Nullable Types in ReScript\nDESCRIPTION: Shows handling of nullable values and conversion between ReScript option type and JavaScript null/undefined.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/interop-cheatsheet.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet a = Some(5) // compiles to 5\nlet b = None // compiles to undefined\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar a = 5;\nvar b;\n```\n\n----------------------------------------\n\nTITLE: Using Generated Accessor Functions in ReScript\nDESCRIPTION: This snippet shows how to use the generated accessor functions for variants in ReScript code.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/generate-converters-accessors.mdx#2025-04-18_snippet_1\n\nLANGUAGE: ReScript\nCODE:\n```\nlet s = submit(\"hello\"); /* gives Submit(\"hello\") */\n```\n\n----------------------------------------\n\nTITLE: Dictionary Entries Operation\nDESCRIPTION: Type signature and example for getting key-value pairs as array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/dict.mdx#2025-04-18_snippet_9\n\nLANGUAGE: res\nCODE:\n```\nlet entries: t<'a> => array<(key, 'a)>\n```\n\nLANGUAGE: res\nCODE:\n```\nJs.Dict.entries(ages) == [(\"Maria\", 30), (\"Vinh\", 22), (\"Fred\", 49)]\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Two Lists with Belt.List in ReScript\nDESCRIPTION: The forEach2 function applies a function to each pair of corresponding elements from two lists. It stops at the length of the shorter list and returns unit.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/list.mdx#2025-04-18_snippet_43\n\nLANGUAGE: rescript\nCODE:\n```\nBelt.List.forEach2(list{\"Z\", \"Y\"}, list{\"A\", \"B\", \"C\"}, (x, y) => Js.log2(x, y))\n\n/*\n  prints:\n  \"Z\" \"A\"\n  \"Y\" \"B\"\n*/\n```\n\n----------------------------------------\n\nTITLE: Example of Mapping Null_undefined String in ReScript\nDESCRIPTION: Demonstrates the use of 'bind' function to map a nullable string, appending \" world!\" if the string is present.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/null-undefined.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nlet maybeGreetWorld = (maybeGreeting: Js.null_undefined<string>) =>\n  Js.Null_undefined.bind(maybeGreeting, (. greeting) => greeting ++ \" world!\")\n```\n\n----------------------------------------\n\nTITLE: Converting String to Lowercase in ReScript\nDESCRIPTION: The toLowerCase function converts a string to lowercase using Unicode character mappings. It handles special cases like the Greek letter sigma.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string-2.mdx#2025-04-18_snippet_25\n\nLANGUAGE: reason\nCODE:\n```\nlet toLowerCase: t => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nJs.String2.toLowerCase(\"ABC\") == \"abc\";\nJs.String2.toLowerCase({js|ΣΠ|js}) == {js|σπ|js};\nJs.String2.toLowerCase({js|ΠΣ|js}) == {js|πς|js};\n```\n\n----------------------------------------\n\nTITLE: Inlining Constants with @inline Decorator in ReScript\nDESCRIPTION: Demonstrates how to use the @inline decorator to inline string constants in a Colors module. The decorator tells the compiler to replace references to these values with their literal values at compile time, resulting in more optimized JavaScript output.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/decorator_inline.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nmodule Colors = {\n  @inline\n  let green = \"green\"\n\n  @inline\n  let red = \"red\"\n}\n\nlet allowedColors = [Colors.green, Colors.red]\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar allowedColors = [\n  \"green\",\n  \"red\"\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring ReScript Build Settings\nDESCRIPTION: JSON configuration for ReScript build settings to generate more idiomatic JS files. Sets module system to commonjs and enables in-source generation with .res.js suffix.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/interop-with-js-build-systems.mdx#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"package-specs\": {\n    \"module\": \"commonjs\",\n    \"in-source\": true\n  },\n  \"suffix\": \".res.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying ReScript CLI Help Options\nDESCRIPTION: Shows the available flags and subcommands for the ReScript CLI tool, including build, clean, format, convert, and help options.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/build-overview.mdx#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n❯ rescript -help\nAvailable flags\n-v, -version  display version number\n-h, -help     display help\nSubcommands:\n    build\n    clean\n    format\n    convert\n    help\nRun rescript subcommand -h for more details,\nFor example:\n    rescript build -h\n    rescript format -h\nThe default `rescript` is equivalent to `rescript build` subcommand\n```\n\n----------------------------------------\n\nTITLE: Variadic Function Binding in ReScript\nDESCRIPTION: Demonstrates binding to JavaScript variadic functions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/interop-cheatsheet.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\n@module(\"path\") @variadic\nexternal join: array<string> => string = \"join\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: JSON Stringify Example\nDESCRIPTION: Example showing how to create and stringify a JSON object\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/json.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\n{\n  let dict = Js.Dict.empty()\n  Js.Dict.set(dict, \"name\", Js.Json.string(\"John Doe\"))\n  Js.Dict.set(dict, \"age\", Js.Json.number(30.0))\n  Js.Dict.set(dict, \"likes\", Js.Json.stringArray([\"bucklescript\", \"ocaml\", \"js\"]))\n\n  Js.log(Js.Json.stringify(Js.Json.object_(dict)))\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HTML Element Types in ReScript\nDESCRIPTION: Type definitions for HTML-specific elements like divs, forms, inputs etc. These types represent specific HTML DOM elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/dom.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\ntype htmlElement\ntype htmlDivElement\ntype htmlFormElement\ntype htmlInputElement\ntype htmlButtonElement\ntype htmlAnchorElement\ntype htmlImageElement\ntype htmlTableElement\n```\n\n----------------------------------------\n\nTITLE: Transforming Nullable values in ReScript\nDESCRIPTION: The 'bind' function maps contained values using a provided function. If the Nullable contains a value, it's unwrapped, transformed, and wrapped back as a Nullable.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/nullable.mdx#2025-04-18_snippet_6\n\nLANGUAGE: reason\nCODE:\n```\nlet bind: (t('a), (. 'a) => 'b) => t('b);\n```\n\n----------------------------------------\n\nTITLE: Using Record Types in Variants\nDESCRIPTION: Shows how to incorporate record types within variant constructors. Defines a user variant with a Number and Id constructor, where Id contains a record type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/variant.mdx#2025-04-18_snippet_5\n\nLANGUAGE: reason\nCODE:\n```\ntype idType = {name: string, password: string};\n\ntype user =\n  | Number(int)\n  | Id(idType);\n```\n\nLANGUAGE: ml\nCODE:\n```\ntype idType = {name: string; password: string}\n\ntype user =\n  | Number of int\n  | Id of idType\n```\n\nLANGUAGE: js\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to Array-like Objects in ReScript\nDESCRIPTION: Converts a string into an array-like structure that can be processed by array functions like Js.Array2.fromMap(). Enables character-by-character string manipulation through array operations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string.mdx#2025-04-18_snippet_42\n\nLANGUAGE: reasonml\nCODE:\n```\nlet castToArrayLike: t => Js_array2.array_like(t);\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet s = \"abcde\";\nlet arr = Js.Array2.fromMap(Js.String.castToArrayLike(s), (x)=>{x});\narr == [|\"a\", \"b\", \"c\", \"d\", \"e\"|];\n```\n\n----------------------------------------\n\nTITLE: Breaking out of While Loops in ReScript\nDESCRIPTION: Demonstrates how to break out of a while loop using a mutable reference since ReScript lacks a break keyword.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/control-flow.mdx#2025-04-18_snippet_9\n\nLANGUAGE: res\nCODE:\n```\nlet break = ref(false)\n\nwhile !break.contents {\n  if Js.Math.random() > 0.3 {\n    break := true\n  } else {\n    Js.log(\"Still running\")\n  }\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar $$break = {\n  contents: false\n};\n\nwhile(!$$break.contents) {\n  if (Math.random() > 0.3) {\n    $$break.contents = true;\n  } else {\n    console.log(\"Still running\");\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Concatenating Arrays in ReScript\nDESCRIPTION: Demonstrates the use of concat and concatMany to combine arrays. These functions return new arrays without modifying the original ones.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array.mdx#2025-04-18_snippet_8\n\nLANGUAGE: ReScript\nCODE:\n```\nJs.Array.concat([\"c\", \"d\", \"e\"], [\"a\", \"b\"]) == [\"a\", \"b\", \"c\", \"d\", \"e\"]\n\nJs.Array.concatMany([[\"d\", \"e\"], [\"f\", \"g\", \"h\"]], [\"a\", \"b\", \"c\"]) == [\n    \"a\",\n    \"b\",\n    \"c\",\n    \"d\",\n    \"e\",\n    \"f\",\n    \"g\",\n    \"h\",\n  ]\n```\n\n----------------------------------------\n\nTITLE: Creating ES6 Default Export in ReScript\nDESCRIPTION: Demonstrates how to create a default export for ES6 modules from ReScript. By naming a value 'default', ReScript will generate the appropriate ES6 module with a default export.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/import-from-export-to-js.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reason\nCODE:\n```\n/* FavoriteStudent.re */\nlet default = \"Bob\";\n```\n\nLANGUAGE: ocaml\nCODE:\n```\n(* FavoriteStudent.re *)\nlet default = \"Bob\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar $$default = \"Bob\";\n\nexports.$$default = $$default;\nexports.default = $$default;\nexports.__esModule = true;\n```\n\n----------------------------------------\n\nTITLE: Fixing Partial Application in Uncurried Mode\nDESCRIPTION: Demonstrates two ways to fix partial application in uncurried mode: explicit parameters and new partial application syntax.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2023-09-18-uncurried-mode.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet add = (a, b) => a + b\nlet addFive = (b) => add(5, b)\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet add = (a, b) => a + b\nlet addFive = add(5, ...)\n```\n\n----------------------------------------\n\nTITLE: Creating a Reversed Copy of an Array in ReScript\nDESCRIPTION: The reverse function returns a fresh array with the items from the original array in reverse order, preserving the original array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/array.mdx#2025-04-18_snippet_12\n\nLANGUAGE: ReScript\nCODE:\n```\nlet reverse: array<'a> => array<'a>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nBelt.Array.reverse([10, 11, 12, 13, 14]) == [14, 13, 12, 11, 10]\n```\n\n----------------------------------------\n\nTITLE: Transforming JSX Fragment in ReScript\nDESCRIPTION: Illustrates how a JSX fragment is transformed in ReScript. The fragment syntax is converted to a list of children.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/jsx.mdx#2025-04-18_snippet_2\n\nLANGUAGE: ReScript\nCODE:\n```\n<> child1 child2 </>\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nReact.createElement(React.Fragment, undefined, child1, child2);\n```\n\nLANGUAGE: ReScript\nCODE:\n```\n@JSX list{child1, child2}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nReact.createElement(React.Fragment, undefined, child1, child2);\n```\n\n----------------------------------------\n\nTITLE: Regular Expressions in ReScript\nDESCRIPTION: Demonstrates how to define regular expressions in ReScript using the %re syntax extension. These compile directly to JavaScript regular expressions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/primitive-types.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reason\nCODE:\n```\nlet r = [%re \"/b/g\"];\n```\n\nLANGUAGE: ml\nCODE:\n```\nlet r = [%re \"/b/g\"]\n```\n\nLANGUAGE: js\nCODE:\n```\nvar r = /b/g;\n```\n\n----------------------------------------\n\nTITLE: Using reducei with Arrays in ReScript\nDESCRIPTION: Demonstrates the reducei function that reduces an array from left to right, passing the index to the reducer function. It's similar to Array.reduce but includes the element's index in the callback.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/array-2.mdx#2025-04-18_snippet_24\n\nLANGUAGE: res\nCODE:\n```\nlet reducei: (t<'a>, ('b, 'a, int) => 'b, 'b) => 'b\n```\n\nLANGUAGE: res\nCODE:\n```\n// find sum of even-index elements in array\nlet sumOfEvens = (accumulator, item, index) =>\n  if mod(index, 2) == 0 {\n    accumulator + item\n  } else {\n    accumulator\n  }\n\nJs.Array2.reducei([2, 5, 1, 4, 3], sumOfEvens, 0) == 6\n```\n\n----------------------------------------\n\nTITLE: Converting Record Type to Abstract Record with @deriving(abstract)\nDESCRIPTION: Use @deriving(abstract) on a record type to expand the type into a creation function, and a set of getter/setter functions for fields and methods.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/generate-converters-accessors.mdx#2025-04-18_snippet_7\n\nLANGUAGE: ReScript\nCODE:\n```\n@deriving(abstract)\ntype person = {\n  name: string,\n  age: int,\n  job: string,\n};\n\n@val external john : person = \"john\";\n```\n\n----------------------------------------\n\nTITLE: Iterating Through List Elements with Index in ReScript\nDESCRIPTION: The forEachWithIndex function applies a side-effect function to each element and its index without creating a new list.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/list.mdx#2025-04-18_snippet_35\n\nLANGUAGE: rescript\nCODE:\n```\nlet forEachWithIndex: (t<'a>, (int, 'a) => 'b) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nBelt.List.forEachWithIndex(list{\"a\", \"b\", \"c\"}, (index, x) => {\n  Js.log(\"Item \" ++ Belt.Int.toString(index) ++ \" is \" ++ x)\n})\n/*\n  prints:\n  Item 0 is a\n  Item 1 is b\n  Item 2 is cc\n*/\n```\n\n----------------------------------------\n\nTITLE: Nested Option Types\nDESCRIPTION: Examples of nested option types and their JavaScript compilation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/null-undefined-option.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet x = Some(Some(Some(5)))\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar x = 5;\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching with Extensible Variants in ReScript\nDESCRIPTION: Shows how to pattern match on extensible variants, highlighting the requirement for a default case since the compiler cannot exhaustively match all possible constructors. The JavaScript output demonstrates how pattern matching is compiled to conditional statements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/extensible-variant.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\nlet print = v =>\n  switch v {\n  | Point(x, y) => Js.log2(\"Point\", (x, y))\n  | Line(ax, ay, bx, by) => Js.log2(\"Line\", (ax, ay, bx, by))\n  | Other\n  | _ => Js.log(\"Other\")\n  }\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction print(v) {\n  if (v.RE_EXN_ID === Point) {\n    console.log(\"Point\", [v._1, v._2]);\n  } else if (v.RE_EXN_ID === Line) {\n    console.log(\"Line\", [v._1, v._2, v._3, v._4]);\n  } else {\n    console.log(\"Other\");\n  } \n}\n```\n\n----------------------------------------\n\nTITLE: Using Regular Record Types in Variants in ReScript\nDESCRIPTION: Demonstrates how to use a regular record type as a payload in a variant constructor, which produces a different JavaScript output than inline records.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/variant.mdx#2025-04-18_snippet_6\n\nLANGUAGE: res\nCODE:\n```\ntype u = {name: string, password: string}\ntype user =\n  | Number(int)\n  | Id(u)\n\nlet me = Id({name: \"Joe\", password: \"123\"})\n```\n\nLANGUAGE: js\nCODE:\n```\nvar me = {\n  TAG: /* Id */1,\n  _0: {\n    name: \"Joe\",\n    password: \"123\"\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Parametrized Type in ReScript\nDESCRIPTION: Shows how to define a parametrized (generic) type in ReScript. The example defines a university student type and a response type that can contain any student type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/newcomer-examples.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\ntype universityStudent = {gpa: float}\n\ntype response<'studentType> = {\n  status: int,\n  student: 'studentType,\n}\n```\n\nLANGUAGE: js\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Replacing Substrings in ReScript\nDESCRIPTION: The replace and replaceByRe functions replace substrings in a string. replace uses a verbatim string to match, while replaceByRe uses a regular expression. Both return a new string with the replacements made.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string-2.mdx#2025-04-18_snippet_10\n\nLANGUAGE: ReScript\nCODE:\n```\nlet replace: (t, t, t) => t;\nlet replaceByRe: (t, Js_re.t, t) => t;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nJs.String2.replace(\"old string\", \"old\", \"new\") == \"new string\";\nJs.String2.replace(\"the cat and the dog\", \"the\", \"this\") == \"this cat and the dog\";\n\nJs.String2.replaceByRe(\"vowels be gone\", [%re \"/[aeiou]/g\"], \"x\") == \"vxwxls bx gxnx\";\nJs.String2.replaceByRe(\"Juan Fulano\", [%re \"/(\\\\w+) (\\\\w+)/\"], \"$2, $1\") == \"Fulano, Juan\";\n```\n\n----------------------------------------\n\nTITLE: Converting JSX Fragments in ReScript\nDESCRIPTION: Shows how JSX fragments are transformed into lists in ReScript, which React then renders as React fragments.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/jsx.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\n<> child1 child2 </>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nReact.createElement(React.Fragment, undefined, child1, child2);\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlist{child1, child2}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nReact.createElement(React.Fragment, undefined, child1, child2);\n```\n\n----------------------------------------\n\nTITLE: Adding Type Annotations in ReScript\nDESCRIPTION: Demonstrates how to explicitly annotate types for variables and expressions in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/type.mdx#2025-04-18_snippet_1\n\nLANGUAGE: ReScript\nCODE:\n```\nlet score: int = 10\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar score = 10;\n```\n\n----------------------------------------\n\nTITLE: Testing if All Element Pairs Satisfy a Condition with Belt.List in ReScript\nDESCRIPTION: The every2 function checks if a predicate returns true for all corresponding pairs of elements from two lists. It stops at the length of the shorter list.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/list.mdx#2025-04-18_snippet_48\n\nLANGUAGE: rescript\nCODE:\n```\nBelt.List.every2(list{1, 2, 3}, list{0, 1}, (a, b) => a > b) /* true */\n\nBelt.List.every2(list{}, list{1}, (a, b) => a > b) /* true */\n\nBelt.List.every2(list{2, 3}, list{1}, (a, b) => a > b) /* true */\n\nBelt.List.every2(list{0, 1}, list{5, 0}, (a, b) => a > b) /* false */\n```\n\n----------------------------------------\n\nTITLE: Creating Lazy Value in ReScript\nDESCRIPTION: Demonstrates how to create a lazy value that defers reading a directory until explicitly forced. The computation is wrapped in the lazy keyword and will not execute immediately.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/lazy-values.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nlet expensiveFilesRead = lazy({\n  Js.log(\"Reading dir\")\n  Node.Fs.readdirSync(\"./pages\")\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar Fs = require(\"fs\");\n\nvar expensiveFilesRead = {\n  LAZY_DONE: false,\n  VAL: (function () {\n    console.log(\"Reading dir\");\n    return Fs.readdirSync(\"./pages\");\n  })\n};\n```\n\n----------------------------------------\n\nTITLE: Using Illegal Identifier Names in ReScript\nDESCRIPTION: Demonstrates ReScript's escape hatch syntax for using illegal identifiers such as names with special characters, hyphenated names, and reserved keywords. This feature is primarily intended for JavaScript interoperability but should be used sparingly.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/use-illegal-identifier-names.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\nlet \\\"my-🍎\" = 10\n\ntype element = {\n  \\\"aria-label\": string\n}\n\nlet myElement = {\n  \\\"aria-label\": \"close\"\n}\n\nlet label = myElement.\\\"aria-label\"\n\nlet calculate = (~\\\"Props\") => {\n  \\\"Props\" + 1\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar my$$unknown$unknown$unknown$unknown = 10;\n\nvar myElement = {\n  \"aria-label\": \"close\"\n};\n\nvar label = myElement[\"aria-label\"];\n\nfunction calculate(Props) {\n  return Props + 1 | 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Block-Scoped Let Binding in ReScript\nDESCRIPTION: Shows how let bindings can be scoped using curly braces. Variables declared inside a block are only accessible within that block, and the value of the last expression is implicitly returned.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/let-binding.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\nlet message = {\n  let part1 = \"hello\"\n  let part2 = \"world\"\n  part1 ++ \" \" ++ part2\n}\n// `part1` and `part2` not accessible here!\n```\n\nLANGUAGE: js\nCODE:\n```\nvar message = \"hello world\";\n```\n\n----------------------------------------\n\nTITLE: Type Definition for RegExp Result\nDESCRIPTION: Type definition for the result of executing a RegExp on a string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/re.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\ntype result\n```\n\n----------------------------------------\n\nTITLE: Using Module Contents with Direct References\nDESCRIPTION: Shows how to access module contents by directly referencing the module name. This approach requires prefixing each identifier with the module name.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/module.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\nlet p = School.getProfession(School.person1)\n```\n\nLANGUAGE: js\nCODE:\n```\nvar p = School.getProfession(School.person1);\n```\n\n----------------------------------------\n\nTITLE: Array Splicing Operations in ReScript\nDESCRIPTION: Collection of array splicing operations including spliceInPlace, removeFromInPlace, and removeCountInPlace for modifying arrays in place.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/array-2.mdx#2025-04-18_snippet_8\n\nLANGUAGE: reason\nCODE:\n```\nlet spliceInPlace: (t('a), ~pos: int, ~remove: int, ~add: array('a)) => t('a);\n\nlet arr = [|\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"|];\nJs.Array2.spliceInPlace(arr, ~pos=2, ~remove=2, ~add=[|\"x\", \"y\", \"z\"|]) == [|\"c\", \"d\"|];\narr == [|\"a\", \"b\", \"x\", \"y\", \"z\", \"e\", \"f\"|];\n```\n\n----------------------------------------\n\nTITLE: Profiling ReScript Build Performance with bstracing\nDESCRIPTION: Command to generate a JSON file with build performance information that can be visualized in Chrome's tracing tool. Run this at your ReScript project's root to analyze build bottlenecks.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/build-performance.mdx#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n./node_modules/.bin/bstracing\n```\n\n----------------------------------------\n\nTITLE: Reducing a HashMap in ReScript\nDESCRIPTION: Reduces the hash map to a single value by applying a function to each key-value pair. The function takes an accumulator, key, and value as arguments.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-map.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduceU: (t('key, 'value, 'id), 'c, [@bs] (('c, 'key, 'value) => 'c)) => 'c;\n\nlet reduce: (t('key, 'value, 'id), 'c, ('c, 'key, 'value) => 'c) => 'c;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nmodule IntHash =\n  Belt.Id.MakeHashable({\n    type t = int;\n    let hash = a => a;\n    let eq = (a, b) => a == b;\n  });\n  \nlet s0 = Belt.HashMap.make(~hintSize=10, ~id=(module IntHash));\nBelt.HashMap.set(s0, 1, \"value1\");\nBelt.HashMap.set(s0, 2, \"value2\");\n\nBelt.HashMap.reduce(s0, \"\", (acc, key, value) => {\n  acc ++ \", \" ++ value\n}) == \"value1, value2\";\n```\n\n----------------------------------------\n\nTITLE: ReScript Console Info Methods\nDESCRIPTION: Info-level logging methods supporting 1-4 arguments and array logging. These functions print informational messages to the console.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/console.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet info: 'a => unit\nlet info2: ('a, 'b) => unit\nlet info3: ('a, 'b, 'c) => unit\nlet info4: ('a, 'b, 'c, 'd) => unit\nlet infoMany: array<'a> => unit\n```\n\n----------------------------------------\n\nTITLE: Converting Float to Int in ReScript\nDESCRIPTION: Converts a float value to an integer. The function truncates the decimal portion of the float.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/float.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nlet toInt: float => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.log(Belt.Float.toInt(1.0) === 1) /* true */\n```\n\n----------------------------------------\n\nTITLE: Comparing Block Syntax in ReScript and JavaScript\nDESCRIPTION: Illustrates the differences in block syntax and implicit returns between ReScript and JavaScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/overview.mdx#2025-04-18_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst myFun = (x, y) => {\n  const doubleX = x + x;\n  const doubleY = y + y;\n  return doubleX + doubleY;\n};\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet myFun = (x, y) => {\n  let doubleX = x + x\n  let doubleY = y + y\n  doubleX + doubleY\n}\n```\n\n----------------------------------------\n\nTITLE: Slicing Array from Specific Index in ReScript\nDESCRIPTION: The sliceFrom function returns a shallow copy of the given array from the specified index to the end.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array-2.mdx#2025-04-18_snippet_20\n\nLANGUAGE: rescript\nCODE:\n```\nlet sliceFrom: (t<'a>, int) => t<'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.Array2.sliceFrom([100, 101, 102, 103, 104], 2) == [102, 103, 104]\n```\n\n----------------------------------------\n\nTITLE: Creating an option value in ReScript\nDESCRIPTION: Demonstrates how to create an option value of type string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/option.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet someString: option<string> = Some(\"hello\")\n```\n\n----------------------------------------\n\nTITLE: Removing Elements from Belt.Set in ReScript\nDESCRIPTION: Shows how to remove elements from a Belt.Set and demonstrates that removing a non-existent element doesn't change the set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nlet s0 = Belt.Set.fromArray([2,3,1,4,5], ~id=module(IntCmp))\nlet s1 = s0->Belt.Set.remove(1)\nlet s2 = s1->Belt.Set.remove(3)\nlet s3 = s2->Belt.Set.remove(3)\n\ns1->Belt.Set.toArray /* [2,3,4,5] */\ns2->Belt.Set.toArray /* [2,4,5] */\ns2 == s3 /* true */\n```\n\n----------------------------------------\n\nTITLE: Example of bind Usage in ReScript\nDESCRIPTION: Demonstrates how to use the bind function to transform a potential greeting string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/undefined.mdx#2025-04-18_snippet_8\n\nLANGUAGE: res\nCODE:\n```\nlet maybeGreetWorld = (maybeGreeting: Js.undefined<string>) =>\n  Js.Undefined.bind(maybeGreeting, (. greeting) => greeting ++ \" world!\")\n```\n\n----------------------------------------\n\nTITLE: Creating Set from Array in ReScript\nDESCRIPTION: Converts an array of strings into a set. Duplicates are removed and elements are automatically sorted.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-string.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reasonml\nCODE:\n```\nlet fromArray: array(value) => t;\n```\n\n----------------------------------------\n\nTITLE: Using @raises Decorator in ReScript\nDESCRIPTION: Examples of how to use the @raises decorator to annotate functions that can raise exceptions. The decorator can specify a single exception type or multiple exception types to suppress warnings from reanalyze's exception analysis.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/decorator_raises.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\n@raises(Exn)\n```\n\nLANGUAGE: rescript\nCODE:\n```\n@raises([E1, E2, E3])\n```\n\n----------------------------------------\n\nTITLE: Testing for NaN Values in ReScript\nDESCRIPTION: Provides a function to test if a given value is NaN. This is necessary because NaN doesn't equal itself in comparisons.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/float.mdx#2025-04-18_snippet_1\n\nLANGUAGE: re\nCODE:\n```\nlet isNaN: float => bool;\n```\n\n----------------------------------------\n\nTITLE: Configuring Yarn Workspaces for ReScript Multi-Package Project\nDESCRIPTION: Shows the package.json configuration for setting up Yarn workspaces to manage multiple ReScript packages within a single project.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/build-pinned-dependencies.mdx#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"myproject\",\n  \"private\": true,\n  \"workspaces\": {\n    \"packages\": [\n      \"app\",\n      \"common\",\n      \"myplugin\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Type Casting in ReScript\nDESCRIPTION: Shows how to perform unsafe type casting between types using the %identity external. Demonstrates converting between int and float types.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/interop-cheatsheet.mdx#2025-04-18_snippet_5\n\nLANGUAGE: reason\nCODE:\n```\nexternal convertToFloat: int => float = \"%identity\";\nlet age = 10;\nlet gpa = 2.1 +. convertToFloat(age);\n```\n\nLANGUAGE: ml\nCODE:\n```\nexternal convertToFloat: int => float = \"%identity\"\nlet age = 10\nlet gpa = 2.1 +. (convertToFloat age)\n```\n\n----------------------------------------\n\nTITLE: Declaring Recursive Functions\nDESCRIPTION: Using the 'rec' keyword to create a recursive function that can call itself. This example shows an infinite recursion pattern.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/function.mdx#2025-04-18_snippet_14\n\nLANGUAGE: res\nCODE:\n```\nlet rec neverTerminate = () => neverTerminate()\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction neverTerminate(_param) {\n  while(true) {\n    _param = undefined;\n    continue ;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Using unsafe_set Function in ReSript\nDESCRIPTION: The unsafe_set function modifies an array by setting a value at a specified index. It works for in-bounds indices and can also extend the array or create sparse arrays when used with out-of-bounds indices.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array.mdx#2025-04-18_snippet_33\n\nLANGUAGE: rescript\nCODE:\n```\nlet arr = [100, 101, 102, 103]\nJs.Array.unsafe_set(arr, 3, 99)\n// result is [100, 101, 102, 99]\n\nJs.Array.unsafe_set(arr, 4, 88)\n// result is [100, 101, 102, 99, 88]\n\nJs.Array.unsafe_set(arr, 6, 77)\n// result is [100, 101, 102, 99, 88, <1 empty item>, 77]\n\nJs.Array.unsafe_set(arr, -1, 66)\n// you don't want to know.\n```\n\n----------------------------------------\n\nTITLE: Passing State Between Hooks Example in ReScript\nDESCRIPTION: A code snippet showing how to pass information between hooks by using the state from one hook as an argument to another. This example demonstrates using the recipientId state with the useFriendStatus custom hook.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/hooks-custom.mdx#2025-04-18_snippet_6\n\nLANGUAGE: ReScript\nCODE:\n```\nlet (recipientId, setRecipientId) = React.useState(_ => \"1\")\nlet recipientOnlineState = FriendStatusHook.useFriendStatus(recipientId)\n```\n\n----------------------------------------\n\nTITLE: Reducing MapDict in ReScript\nDESCRIPTION: Functions for reducing a MapDict to a single value using an accumulator function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_7\n\nLANGUAGE: ReScript\nCODE:\n```\nlet reduceU: (t<'k, 'a, 'id>, 'b, (. 'b, 'k, 'a) => 'b) => 'b\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet reduce: (t<'k, 'a, 'id>, 'b, ('b, 'k, 'a) => 'b) => 'b\n```\n\n----------------------------------------\n\nTITLE: Array Element Testing with Index (somei) in ReScript\nDESCRIPTION: Function that tests if any element in an array satisfies a predicate function that receives both the element and its index. Returns true if predicate returns true for any element.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/array-2.mdx#2025-04-18_snippet_20\n\nLANGUAGE: reasonml\nCODE:\n```\nlet somei: (t('a), ('a, int) => bool) => bool;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet sameLength = (str, index) => {\n  Js.String.length(str) == index;\n}\n\nJs.Array2.somei([|\"ab\", \"cd\", \"ef\", \"gh\"|], sameLength) == true;\nJs.Array2.somei([|\"a\", \"bc\", \"def\", \"gh\"|], sameLength) == false;\n```\n\n----------------------------------------\n\nTITLE: Executing Lazy Computations with Pattern Matching in ReScript\nDESCRIPTION: Demonstrates an alternative method to execute lazy computations using pattern matching with the lazy pattern. This approach triggers the computation and extracts the result in one step.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/lazy-values.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nswitch expensiveFilesRead {\n| lazy(result) => Js.log(result)\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar result = CamlinternalLazy.force(expensiveFilesRead);\n```\n\n----------------------------------------\n\nTITLE: Direct Mutation of Ref Contents in ReScript\nDESCRIPTION: Shows how to directly mutate a ref's contents by assigning to the .contents field.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/mutation.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nmyValue.contents = 6\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmyValue.contents = 6;\n```\n\n----------------------------------------\n\nTITLE: Record Type Coercion in ReScript\nDESCRIPTION: Illustrates coercing a record type with multiple fields to a record type with fewer fields using the :> operator.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/operators_type_coercion.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\ntype person = {\"id\": int, \"name\": string}\ntype name = {\"name\": string}\nlet person = {\"id\": 10, \"name\": \"Gideon\"}\nlet name = (person :> name)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar person = {\n  id: 10,\n  name: \"Gideon\",\n};\n\nvar name = person;\n```\n\n----------------------------------------\n\nTITLE: Binding to Global setTimeout Function with @val Decorator in ReScript\nDESCRIPTION: This example demonstrates how to use the @val decorator to bind to the global setTimeout function in JavaScript. It creates a type for the timeout ID, binds to the native setTimeout function, and then calls it with a callback that logs 'Hello' after 1000 milliseconds.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/decorator_val.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\ntype timeoutID\n\n@val\nexternal setTimeout: (unit => unit, int) => timeoutID = \"setTimeout\"\n\nlet timeoutID = setTimeout(() => Console.log(\"Hello\"), 1000)\n```\n\nLANGUAGE: js\nCODE:\n```\nvar timeoutID = setTimeout(function (param) {\n  console.log(\"Hello\")\n}, 1000)\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Variant Types from Other Files in ReScript\nDESCRIPTION: Demonstrates how to use a variant type that was defined in another file, showing both recommended and alternative syntax.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/variant.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\n// Example.res\nlet pet: Zoo.animal = Dog // preferred\n// or\nlet pet2 = Zoo.Dog\n```\n\nLANGUAGE: js\nCODE:\n```\nvar pet = /* Dog */0;\nvar pet2 = /* Dog */0;\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to Array-Like Objects in ReScript\nDESCRIPTION: The castToArrayLike function converts a string to an array-like structure that can be processed by JavaScript array functions. This enables character-by-character string manipulation with array methods.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/string.mdx#2025-04-18_snippet_15\n\nLANGUAGE: rescript\nCODE:\n```\nlet castToArrayLike: t => Js_array2.array_like<t>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet s = \"abcde\"\nlet arr = Js.Array2.fromMap(Js.String.castToArrayLike(s), x => x)\narr == [\"a\", \"b\", \"c\", \"d\", \"e\"]\n```\n\n----------------------------------------\n\nTITLE: Piping into Variant Constructors in ReScript\nDESCRIPTION: Shows how the pipe operator can be used to pipe a value directly into a variant constructor. This is a special case where variant constructors can be used as functions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/pipe.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet result = name->preprocess->Some\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = preprocess(name);\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet result = Some(preprocess(name))\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = preprocess(name);\n```\n\n----------------------------------------\n\nTITLE: String Manipulation Functions in ReScript\nDESCRIPTION: Collection of string manipulation functions including length, get, charAt, and character code operations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/string.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet length: t => int\nlet get: (t, int) => t\nlet charAt: (int, t) => t\nlet charCodeAt: (int, t) => float\nlet codePointAt: (int, t) => option<int>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.String2.length(\"abcd\") == 4\nJs.String2.get(\"Reason\", 0) == \"R\"\nJs.String.charAt(0, \"Reason\") == \"R\"\n```\n\n----------------------------------------\n\nTITLE: Using @as Decorator for Field Name Mapping\nDESCRIPTION: Shows how to use the @as decorator to map between different field names in ReScript and JavaScript. This is particularly useful for handling JavaScript keywords or properties that cannot be expressed directly in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/bind-to-js-object.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\ntype action = {\n  @as(\"type\") type_: string\n}\n\nlet action = {type_: \"ADD_USER\"}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar action = {\n  type: \"ADD_USER\"\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Full Year, Month, and Date in ReScript\nDESCRIPTION: The setFullYearMD function sets a Date object's year, month, and day of month in the current time zone. It returns the timestamp of the updated Date and modifies the original Date object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_43\n\nLANGUAGE: res\nCODE:\n```\nlet setFullYearMD: (t, ~year: float, ~month: float, ~date: float, unit) => float\n```\n\nLANGUAGE: res\nCODE:\n```\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet future = Js.Date.setFullYearMD(date1, ~year=1974.0, ~month=0.0, ~date=7.0, ())\ndate1 == Js.Date.fromString(\"1974-01-07T21:30:54.321Z00:00\")\nfuture == Js.Date.getTime(date1)\n```\n\n----------------------------------------\n\nTITLE: Unicode Pattern Matching in ReScript\nDESCRIPTION: Demonstration of pattern matching with Unicode characters in ReScript\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2022-08-25-release-10-0-0.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nswitch someCharacter {\n  | 'Σ' => \"what a fine Unicode char\"\n  | _ => \"Unicode is fun\"\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Type Composition in ReScript\nDESCRIPTION: Illustrates how to compose complex types using type parameters and variants in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/type.mdx#2025-04-18_snippet_7\n\nLANGUAGE: ReScript\nCODE:\n```\ntype result<'a, 'b> =\n  | Ok('a)\n  | Error('b)\n\ntype myPayload = {data: string}\n\ntype myPayloadResults<'errorType> = array<result<myPayload, 'errorType>>\n\nlet payloadResults: myPayloadResults<string> = [\n  Ok({data: \"hi\"}),\n  Ok({data: \"bye\"}),\n  Error(\"Something wrong happened!\")\n]\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar payloadResults = [\n  {\n    TAG: /* Ok */0,\n    _0: {data: \"hi\"}\n  },\n  {\n    TAG: /* Ok */0,\n    _0: {data: \"bye\"}\n  },\n  {\n    TAG: /* Error */1,\n    _0: \"Something wrong happened!\"\n  }\n];\n```\n\n----------------------------------------\n\nTITLE: Converting Option<bool> to bool Using Nested Conditionals\nDESCRIPTION: An example of converting Option<bool> to bool using nested conditional statements, shown as an anti-pattern that pattern matching can improve.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_14\n\nLANGUAGE: reason\nCODE:\n```\nlet optionBoolToBool = opt => {\n  if (opt == None) {\n    false\n  } else if (opt === Some(true)) {\n    true\n  } else {\n    false\n  }\n}\n```\n\nLANGUAGE: ml\nCODE:\n```\nlet optionBoolToBool opt =\n  if opt = None\n    then false\n  else if opt == Some true then\n    true\n  else false\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction optionBoolToBool(opt) {\n  if (opt === undefined) {\n    return false;\n  } else {\n    return opt === true;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using %debugger in ReScript Functions\nDESCRIPTION: Demonstrates how to insert JavaScript debugger statements in ReScript code using the %debugger expression, which generates breakpoints for JavaScript developer tools.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/embed-raw-javascript.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nlet f = (x, y) => {\n  %debugger\n  x + y\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction f(x, y) {\n  debugger;\n  return x + y | 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating JavaScript Objects with @deriving(abstract) in ReScript\nDESCRIPTION: Uses the person creation function generated by @deriving(abstract) to create a JavaScript object with name, age and job properties. This approach has no runtime overhead.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/generate-converters-accessors.mdx#2025-04-18_snippet_14\n\nLANGUAGE: ReScript\nCODE:\n```\nlet joe = person(~name=\"Joe\", ~age=20, ~job=\"teacher\")\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar joe = {\n  name: \"Joe\",\n  age: 20,\n  job: \"teacher\"\n};\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching on Exceptions in ReScript\nDESCRIPTION: Demonstrates how to pattern match on exceptions in ReScript, allowing handling of both successful results and exceptions in a single switch statement.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_11\n\nLANGUAGE: res\nCODE:\n```\nswitch List.find(i => i === theItem, myItems) {\n| item => Console.log(item)\n| exception Not_found => Console.log(\"No such item found!\")\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar exit = 0;\n\nvar item;\n\ntry {\n  item = List.find(function(i) {\n    return i === theItem;\n  }, myItems);\n  exit = 1;\n}\ncatch (raw_exn){\n  var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);\n  if (exn.RE_EXN_ID === \"Not_found\") {\n    console.log(\"No such item found!\");\n  } else {\n    throw exn;\n  }\n}\n\nif (exit === 1) {\n  console.log(item);\n}\n```\n\n----------------------------------------\n\nTITLE: Record Type Coercion with Optional Fields\nDESCRIPTION: Demonstrates coercing a record with a mandatory option field to a record with an optional field. This showcases the flexibility of ReScript's type system with optional record fields.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/record.mdx#2025-04-18_snippet_17\n\nLANGUAGE: rescript\nCODE:\n```\ntype a = {\n  name: string,\n\n  // mandatory, but explicitly typed as option<int>\n  age: option<int>,\n}\n\ntype b = {\n  name: string,\n  // optional field\n  age?: int,\n}\n\nlet nameFromB = (b: b) => b.name\n\nlet a: a = {\n  name: \"Name\",\n  age: Some(35),\n}\n\nlet name = nameFromB(a :> b)\n```\n\n----------------------------------------\n\nTITLE: Constructor Pattern Examples in ReScript\nDESCRIPTION: Shows the difference between variants with multiple arguments versus a single tuple argument in constructors.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/variant.mdx#2025-04-18_snippet_22\n\nLANGUAGE: rescript\nCODE:\n```\ntype account =\n  | Facebook(string, int) // 2 arguments\ntype account2 =\n  | Instagram((string, int)) // 1 argument - happens to be a 2-tuple\n```\n\n----------------------------------------\n\nTITLE: Dictionary Unsafe Delete Operation\nDESCRIPTION: Type signature for experimental internal function to delete keys.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/dict.mdx#2025-04-18_snippet_8\n\nLANGUAGE: res\nCODE:\n```\nlet unsafeDeleteKey: (. t<string>, string) => unit\n```\n\n----------------------------------------\n\nTITLE: Using Children Spread in ReScript JSX\nDESCRIPTION: Shows how to use children spread in ReScript JSX to pass children without wrapping them in a list.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/jsx.mdx#2025-04-18_snippet_4\n\nLANGUAGE: ReScript\nCODE:\n```\n<MyComponent> ...myChild </MyComponent>\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nReact.createElement(MyComponent.make, MyComponent.makeProps(myChild, undefined));\n```\n\nLANGUAGE: ReScript\nCODE:\n```\n@JSX MyComponent.createElement(~children=myChild, ())\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nReact.createElement(MyComponent.make, MyComponent.makeProps(myChild, undefined));\n```\n\n----------------------------------------\n\nTITLE: If Statement with Implicit Else in ReScript\nDESCRIPTION: The explicit version of the previous example, showing the implicit unit value in the else branch.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/control-flow.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nif showMenu {\n  displayMenu()\n} else {\n  ()\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nif (showMenu) {\n  displayMenu()\n}\n```\n\n----------------------------------------\n\nTITLE: Using Type Escape Hatch in ReScript\nDESCRIPTION: Shows how to use the type escape hatch to perform unsafe type conversions when necessary.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/type.mdx#2025-04-18_snippet_6\n\nLANGUAGE: ReScript\nCODE:\n```\nexternal convertToFloat : int => float = \"%identity\"\nlet age = 10\nlet gpa = 2.1 +. convertToFloat(age)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar age = 10;\nvar gpa = 2.1 + 10;\n```\n\n----------------------------------------\n\nTITLE: Using pow_float function to calculate floating-point power in ReScript\nDESCRIPTION: The pow_float function raises the given base to the given exponent with float arguments and result. It takes a base float and exponent float as input and returns a float, returning NaN if the result would be imaginary.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/math.mdx#2025-04-18_snippet_23\n\nLANGUAGE: res\nCODE:\n```\nlet pow_float: (~base: float, ~exp: float) => float\n```\n\nLANGUAGE: res\nCODE:\n```\nJs.Math.pow_float(~base=3.0, ~exp=4.0) == 81.0\nJs.Math.pow_float(~base=4.0, ~exp=-2.0) == 0.0625\nJs.Math.pow_float(~base=625.0, ~exp=0.5) == 25.0\nJs.Math.pow_float(~base=625.0, ~exp=-0.5) == 0.04\nJs.Float.isNaN(Js.Math.pow_float(~base=-2.0, ~exp=0.5)) == true\n```\n\n----------------------------------------\n\nTITLE: Ternary Operator in ReScript\nDESCRIPTION: Shows the ternary operator syntax in ReScript, which is similar to JavaScript. The documentation notes that if-else is generally preferred over ternary when possible.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/control-flow.mdx#2025-04-18_snippet_3\n\nLANGUAGE: re\nCODE:\n```\nlet message = isMorning ? \"Good morning!\" : \"Hello!\"\n```\n\nLANGUAGE: ml\nCODE:\n```\n(* Doesn't exist in older ML syntax *)\n```\n\nLANGUAGE: js\nCODE:\n```\nvar message = isMorning ? \"Good morning!\" : \"Hello!\";\n```\n\n----------------------------------------\n\nTITLE: Replacing ReasonReact Methods with ReactDOM Equivalents\nDESCRIPTION: Example showing how to replace the deprecated ReactDOMRe.renderToElementWithClassName and ReactDOMRe.renderToElementWithId methods with ReactDOM.querySelector and ReactDOM.render.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/migrate-react.mdx#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nReactDOM.querySelector + ReactDOM.render\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Array Elements in ReasonML\nDESCRIPTION: The forEach function executes a provided function once for each array element. It returns unit and is used for side effects.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array.mdx#2025-04-18_snippet_22\n\nLANGUAGE: ReasonML\nCODE:\n```\nlet forEach: ('a => unit, t<'a>) => unit\n```\n\nLANGUAGE: ReasonML\nCODE:\n```\nJs.Array.forEach(x => Js.log(x), [\"a\", \"b\", \"c\"]) == ()\n```\n\n----------------------------------------\n\nTITLE: Getting First Element with Exception in ReScript\nDESCRIPTION: The headExn function returns the first element of a list directly, raising an exception if the list is empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/list.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet headExn: t<'a> => 'a\n```\n\nLANGUAGE: rescript\nCODE:\n```\nBelt.List.headExn(list{1, 2, 3}) // 1\n\nBelt.List.headExn(list{}) // Raises an Error\n```\n\n----------------------------------------\n\nTITLE: ReScript Record Type and Initialization\nDESCRIPTION: Shows how ReScript record types and initialization are converted to JavaScript objects.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/overview.mdx#2025-04-18_snippet_14\n\nLANGUAGE: rescript\nCODE:\n```\ntype t = {b: int}; let a = {b: 10}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar a = {b: 10}\n```\n\n----------------------------------------\n\nTITLE: ReScript Function Declaration with Type Annotations\nDESCRIPTION: Examples of ReScript function declarations with explicit type annotations for parameters and return values, including labeled parameters, default values, and optional parameters.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/function.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\n// anonymous function\n(x: int, y: int): int => 1\n// bind to a name\nlet add = (x: int, y: int): int => 1\n\n// labeled\nlet add = (~first as x: int, ~second as y: int) : int => x + y\n// with punning sugar\nlet add = (~first: int, ~second: int) : int => first + second\n\n// labeled with default value\nlet add = (~first as x: int=1, ~second as y: int=2) : int => x + y\n// with punning sugar\nlet add = (~first: int=1, ~second: int=2) : int => first + second\n\n// optional\nlet add = (~first as x: option<int>=?, ~second as y: option<int>=?) : int => switch x {...}\n// with punning sugar\n// note that the caller would pass an `int`, not `option<int>`\n// Inside the function, `first` and `second` are `option<int>`.\nlet add = (~first: option<int>=?, ~second: option<int>=?) : int => switch first {...}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sources in bsconfig.json - Mixed Configuration with Recursive Subdirectories\nDESCRIPTION: Shows how to configure multiple source directories with different settings. The 'examples' directory is included directly, while 'src' is configured to recursively build all subdirectories.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/build-configuration.mdx#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sources\": [\n    \"examples\",\n    {\n      \"dir\": \"src\",\n      \"subdirs\": true // recursively builds every subdirectory\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Concatenating Multiple Arrays in ReScript\nDESCRIPTION: Returns a fresh array by concatenating all arrays in the input array of arrays. Flattens one level of nesting.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/array.mdx#2025-04-18_snippet_27\n\nLANGUAGE: reason\nCODE:\n```\nlet concatMany: array(array('a)) => array('a);\n```\n\nLANGUAGE: reason\nCODE:\n```\nBelt.Array.concatMany([|[|1, 2, 3|], [|4, 5, 6|], [|7, 8|]|]) == [|1, 2, 3, 4, 5, 6, 7, 8|];\n```\n\n----------------------------------------\n\nTITLE: Using split function in ReScript\nDESCRIPTION: Splits a string at every occurrence of a delimiter and returns an array of the resulting substrings. Uses JavaScript's String.split method.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/string-2.mdx#2025-04-18_snippet_20\n\nLANGUAGE: rescript\nCODE:\n```\nlet split: (t, t) => array<t>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.String2.split(\"2018-01-02\", \"-\") == [\"2018\", \"01\", \"02\"]\nJs.String2.split(\"a,b,,c\", \",\") == [\"a\", \"b\", \"\", \"c\"]\nJs.String2.split(\"good::bad as great::awful\", \"::\") == [\"good\", \"bad as great\", \"awful\"]\nJs.String2.split(\"has-no-delimiter\", \";\") == [\"has-no-delimiter\"]\n```\n\n----------------------------------------\n\nTITLE: Using Imported Variant Types\nDESCRIPTION: Shows how to use a variant type defined in another file. Demonstrates two approaches: using type annotation or dot notation to access the variant constructors.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/variant.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\n// Example.re\nlet pet: Zoo.animal = Dog; // preferred\n// or\nlet pet2 = Zoo.Dog;\n```\n\nLANGUAGE: ml\nCODE:\n```\n(* Example.re *)\nlet pet: Zoo.animal = Dog (* preferred *)\n(* or *)\nlet pet2 = Zoo.Dog\n```\n\nLANGUAGE: js\nCODE:\n```\nvar pet = /* Dog */0;\nvar pet2 = /* Dog */0;\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using HashSet with Custom Hash Functions in ReScript\nDESCRIPTION: This snippet demonstrates how to create and use HashSet instances with custom hash functions. It shows the creation of two different HashSets with unique hash functions and how to add elements to them.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/hash-set.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\nmodule I0 = unpack(\n  Belt.Id.hashableU(\n    ~hash=(. a: int) => land(a, 65535),\n    ~eq=(. a, b) => a == b,\n  )\n)\n\nlet s0 = Belt.HashSet.make(~id=module(I0), ~hintSize=40)\n\nmodule I1 = unpack(\n  Belt.Id.hashableU(\n    ~hash=(. a: int) => land(a, 255),\n    ~eq=(. a, b) => a == b,\n  )\n)\n\nlet s1 = Belt.HashSet.make(~id=module(I1), ~hintSize=40)\n\nBelt.HashSet.add(s1, 0)\nBelt.HashSet.add(s1, 1)\n```\n\n----------------------------------------\n\nTITLE: Dictionary Set Function Signature\nDESCRIPTION: Function signature for setting key-value pairs in a dictionary\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/dict.mdx#2025-04-18_snippet_7\n\nLANGUAGE: reason\nCODE:\n```\nlet set: (t('a), key, 'a) => unit;\n```\n\n----------------------------------------\n\nTITLE: Unzipping an Array of Pairs in ReScript\nDESCRIPTION: The unzip function takes an array of pairs and creates a pair of arrays. The first array contains all first items of pairs, and the second contains all second items.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/array.mdx#2025-04-18_snippet_25\n\nLANGUAGE: ReScript\nCODE:\n```\nlet unzip: array<('a, 'b)> => (array<'a>, array<'b>)\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nBelt.Array.unzip([(1, 2), (3, 4)]) == ([1, 3], [2, 4])\n\nBelt.Array.unzip([(1, 2), (3, 4), (5, 6), (7, 8)]) == ([1, 3, 5, 7], [2, 4, 6, 8])\n```\n\n----------------------------------------\n\nTITLE: HashSet Bulk Merge Operation\nDESCRIPTION: Adds multiple keys from an array to the HashSet.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-set-string.mdx#2025-04-18_snippet_17\n\nLANGUAGE: rescript\nCODE:\n```\nlet mergeMany: (t, array<key>) => unit\n```\n\n----------------------------------------\n\nTITLE: Adding a DOM ref to access an input element\nDESCRIPTION: Complete example of using a ref to store a reference to an input DOM element to programmatically set focus when a button is clicked.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/refs-and-the-dom.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\n// CustomTextInput.res\n\n@send external focus: Dom.element => unit = \"focus\"\n\n@react.component\nlet make = () => {\n  let textInput = React.useRef(Js.Nullable.null)\n\n  let focusInput = () =>\n    switch textInput.current->Js.Nullable.toOption {\n    | Some(dom) => dom->focus\n    | None => ()\n    }\n\n  let onClick = _ => focusInput()\n\n  <div>\n    <input type_=\"text\" ref={ReactDOM.Ref.domRef(textInput)} />\n    <input type_=\"button\" value=\"Focus the text input\" onClick />\n  </div>\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction CustomTextInput(Props) {\n  var textInput = React.useRef(null);\n  var onClick = function (param) {\n    var dom = textInput.current;\n    if (!(dom == null)) {\n      dom.focus();\n      return ;\n    }\n\n  };\n  return React.createElement(\"div\", undefined, React.createElement(\"input\", {\n                  ref: textInput,\n                  type: \"text\"\n                }), React.createElement(\"input\", {\n                  type: \"button\",\n                  value: \"Focus the text input\",\n                  onClick: onClick\n                }));\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Elements in Belt.MutableSet using keep in ReScript\nDESCRIPTION: The keep function returns a new set containing all elements that satisfy the given predicate. It takes a set and a predicate function as arguments.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_6\n\nLANGUAGE: ReScript\nCODE:\n```\nlet keep: (t<'value, 'id>, 'value => bool) => t<'value, 'id>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nmodule IntCmp = Belt.Id.MakeComparable({\n  type t = int\n  let cmp = Pervasives.compare\n})\n\nlet isEven = x => mod(x, 2) == 0\n\nlet s0 = Belt.MutableSet.fromArray([1, 2, 3, 4, 5], ~id=module(IntCmp))\nlet s1 = s0->Belt.MutableSet.keep(isEven)\n\ns1->Belt.MutableSet.toArray /* [2, 4] */\n```\n\n----------------------------------------\n\nTITLE: Slicing Arrays in ReScript\nDESCRIPTION: Shows how to use slice, copy, and sliceFrom to create shallow copies of arrays or portions of arrays. These functions return new arrays without modifying the original ones.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array.mdx#2025-04-18_snippet_11\n\nLANGUAGE: ReScript\nCODE:\n```\nlet arr = [100, 101, 102, 103, 104, 105, 106]\nJs.Array.slice(~start=2, ~end_=5, arr) == [102, 103, 104]\nJs.Array.slice(~start=-3, ~end_=-1, arr) == [104, 105]\nJs.Array.slice(~start=9, ~end_=10, arr) == []\n\nJs.Array.sliceFrom(2, [100, 101, 102, 103, 104]) == [102, 103, 104]\n```\n\n----------------------------------------\n\nTITLE: Exception Handling with Lazy Values\nDESCRIPTION: Demonstrates how to handle exceptions that might occur during lazy computation execution using try-catch.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/lazy-values.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet result = try {\n  Lazy.force(expensiveFilesRead)\n} catch {\n| Not_found => [] // empty array of files\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar result;\n\ntry {\n  result = CamlinternalLazy.force(expensiveFilesRead);\n} catch (raw_exn) {\n  var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);\n  if (exn.RE_EXN_ID === \"Not_found\") {\n    result = [];\n  } else {\n    throw exn;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Let Binding with Lazy Pattern\nDESCRIPTION: Shows how to use let binding with pattern matching to execute lazy computations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/lazy-values.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet lazy(result) = expensiveFilesRead\nJs.log(result)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = CamlinternalLazy.force(expensiveFilesRead);\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Configuring Public Modules in ReScript\nDESCRIPTION: Explicitly allows specific modules to be visible from outside using the 'public' property. This configuration exposes only 'MyMainModule.res' while keeping all other files private.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/build-configuration.mdx#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sources\": {\n    \"dir\": \"src\",\n    \"public\": [\"MyMainModule\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing some2 Function in ReScript\nDESCRIPTION: The some2 function checks if a predicate is true for any pair of elements from two arrays up to the shorter length. It takes two arrays and a predicate function as arguments.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/array.mdx#2025-04-18_snippet_38\n\nLANGUAGE: ReScript\nCODE:\n```\nlet some2: (array('a), array('b), ('a, 'b) => bool) => bool;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nBelt.Array.some2([|0, 2|], [|1, 0, 3|], (>)) == true;\n\nBelt.Array.some2([||], [|1|], (x, y) => x > y) == false;\n\nBelt.Array.some2([|2, 3|], [|1, 4|], (x, y) => x > y) == true;\n```\n\n----------------------------------------\n\nTITLE: Declaring Polymorphic Variant Types in ReScript\nDESCRIPTION: Shows how to pre-declare a polymorphic variant type with square brackets syntax and inline type definitions for function parameters.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/polymorphic-variant.mdx#2025-04-18_snippet_1\n\nLANGUAGE: ReScript\nCODE:\n```\n// Note the surrounding square brackets, and # for constructors\ntype color = [#red | #green | #blue]\n```\n\n----------------------------------------\n\nTITLE: Basic ReScript Router Implementation\nDESCRIPTION: Complete example of a basic router implementation in ReScript React, showing route matching and component rendering based on URL paths.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/router.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\n@react.component\nlet make = () => {\n  let url = RescriptReactRouter.useUrl()\n  \n  switch url.path {\n    | list{\"user\", id} => <User id />\n    | list{} => <Home/>\n    | _ => <PageNotFound/>\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from \"react\";\nimport * as User from \"./User.bs.js\";\nimport * as RescriptReactRouter from \"@rescript/react/src/RescriptReactRouter.bs.js\";\nimport * as Home from \"./Home.bs.js\";\nimport * as NotFound from \"./NotFound.bs.js\";\n\nfunction App(Props) {\n  var url = RescriptReactRouter.useUrl(undefined, undefined);\n  var match = url.path;\n  if (!match) {\n    return React.createElement(Home.make, {});\n  }\n  if (match.hd === \"user\") {\n    var match$1 = match.tl;\n    if (match$1 && !match$1.tl) {\n      return React.createElement(User.make, {\n                  id: match$1.hd\n                });\n    }\n    \n  }\n  return React.createElement(NotFound.make, {});\n}\n\nvar make = App;\n\nexport {\n  make ,\n  \n}\n```\n\n----------------------------------------\n\nTITLE: String trim Function in ReScript\nDESCRIPTION: The trim function removes whitespace from both ends of a string, including spaces, tabs, and newlines. Internal whitespace between words is preserved.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/string.mdx#2025-04-18_snippet_22\n\nLANGUAGE: res\nCODE:\n```\nlet trim: t => t\n```\n\nLANGUAGE: res\nCODE:\n```\nJs.String.trim(\"   abc def   \") == \"abc def\"\nJs.String.trim(\"\\n\\r\\t abc def \\n\\n\\t\\r \") == \"abc def\"\n```\n\n----------------------------------------\n\nTITLE: Alternative Pattern Matching for Polymorphic Variants in ReScript\nDESCRIPTION: Shows the verbose alternative to using the #... spread syntax for pattern matching polymorphic variants.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/polymorphic-variant.mdx#2025-04-18_snippet_7\n\nLANGUAGE: ReScript\nCODE:\n```\nswitch myColor {\n| #Sapphire | #Neon | #Navy => Console.log(\"This is blue-ish\")\n| #Ruby | #Redwood | #Rust => Console.log(\"This is red-ish\")\n| other => Console.log2(\"Other color than red and blue: \", other)\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping MutableMaps in ReScript\nDESCRIPTION: Functions for creating new maps by applying functions to existing map values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-map.mdx#2025-04-18_snippet_9\n\nLANGUAGE: ReScript\nCODE:\n```\nlet mapU: (t<'k, 'a, 'id>, (. 'a) => 'b) => t<'k, 'b, 'id>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet map: (t<'k, 'a, 'id>, 'a => 'b) => t<'k, 'b, 'id>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet mapWithKeyU: (t<'k, 'a, 'id>, (. 'k, 'a) => 'b) => t<'k, 'b, 'id>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet mapWithKey: (t<'k, 'a, 'id>, ('k, 'a) => 'b) => t<'k, 'b, 'id>\n```\n\n----------------------------------------\n\nTITLE: Converting maps to other data structures in ReScript\nDESCRIPTION: Functions for converting maps to lists, arrays, and extracting keys or values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-string.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\nlet size: t<'v> => int\n```\n\nLANGUAGE: res\nCODE:\n```\nlet toList: t<'v> => list<(key, 'v)>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet toArray: t<'v> => array<(key, 'v)>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet fromArray: array<(key, 'v)> => t<'v>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet keysToArray: t<'v> => array<key>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet valuesToArray: t<'v> => array<'v>\n```\n\n----------------------------------------\n\nTITLE: Finding extremum elements in ReScript maps\nDESCRIPTION: Functions for finding minimum and maximum keys and entries in the map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-string.mdx#2025-04-18_snippet_6\n\nLANGUAGE: res\nCODE:\n```\nlet minKey: t<'a> => option<key>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet minKeyUndefined: t<'a> => Js.undefined<key>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet maxKey: t<'a> => option<key>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet maxKeyUndefined: t<'a> => Js.undefined<key>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet minimum: t<'v> => option<(key, 'v)>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet minUndefined: t<'v> => Js.undefined<(key, 'v)>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet maximum: t<'v> => option<(key, 'v)>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet maxUndefined: t<'v> => Js.undefined<(key, 'v)>\n```\n\n----------------------------------------\n\nTITLE: Reducing HashMap in ReScript\nDESCRIPTION: Functions to reduce the hash map to a single value by applying a function to each key-value pair.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-map-int.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduceU: (t<'b>, 'c, (. 'c, key, 'b) => 'c) => 'c\n\nlet reduce: (t<'b>, 'c, ('c, key, 'b) => 'c) => 'c\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet hMap = Belt.HashMap.Int.make(~hintSize=10)\nBelt.HashMap.Int.set(hMap, 1, \"value1\")\nBelt.HashMap.Int.set(hMap, 2, \"value2\")\n\nBelt.HashMap.Int.reduce(hMap, \"\", (acc, key, value) => acc ++ (\", \" ++ value)) == \"value1, value2\"\n```\n\n----------------------------------------\n\nTITLE: Example of using some in Belt.Range\nDESCRIPTION: Example demonstrating how to use some to check if any element in a range satisfies a condition.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/range.mdx#2025-04-18_snippet_11\n\nLANGUAGE: reason\nCODE:\n```\nBelt.Range.some(0, 4, (i) => i > 5); /* false */\n\nBelt.Range.some(0, 4, (i) => i > 2); /* true */\n```\n\n----------------------------------------\n\nTITLE: Using trim function in ReScript\nDESCRIPTION: Removes whitespace from both ends of a string. Internal whitespace is not affected by this operation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/string-2.mdx#2025-04-18_snippet_34\n\nLANGUAGE: rescript\nCODE:\n```\nlet trim: t => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.String2.trim(\"   abc def   \") == \"abc def\"\nJs.String2.trim(\"\\n\\r\\t abc def \\n\\n\\t\\r \") == \"abc def\"\n```\n\n----------------------------------------\n\nTITLE: Vector Copy Operation\nDESCRIPTION: Creates a shallow copy of a vector.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/vector.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nlet copy: t<'a> => t<'a>\n```\n\n----------------------------------------\n\nTITLE: Adding Elements to a Set in ReasonML\nDESCRIPTION: Demonstrates how to add a single element to a set using the add function. If the element already exists, the set remains unchanged.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set.mdx#2025-04-18_snippet_9\n\nLANGUAGE: reasonml\nCODE:\n```\nlet add: (t('value, 'id), 'value) => t('value, 'id);\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet s0 = Belt.Set.make(~id=(module IntCmp));\nlet s1 = s0->Belt.Set.add(1);\nlet s2 = s1->Belt.Set.add(2);\nlet s3 = s2->Belt.Set.add(2);\ns0->Belt.Set.toArray; /* [||] */\ns1->Belt.Set.toArray; /* [|1|] */\ns2->Belt.Set.toArray; /* [|1, 2|] */\ns3->Belt.Set.toArray; /* [|1,2 |] */\ns2 == s3; /* true */\n```\n\n----------------------------------------\n\nTITLE: Splitting String by Delimiter in ReScript\nDESCRIPTION: The split function divides a string into an array of substrings based on a specified delimiter.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/string-2.mdx#2025-04-18_snippet_21\n\nLANGUAGE: rescript\nCODE:\n```\nlet split: (t, t) => array<t>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.String2.split(\"2018-01-02\", \"-\") == [\"2018\", \"01\", \"02\"]\nJs.String2.split(\"a,b,,c\", \",\") == [\"a\", \"b\", \"\", \"c\"]\nJs.String2.split(\"good::bad as great::awful\", \"::\") == [\"good\", \"bad as great\", \"awful\"]\nJs.String2.split(\"has-no-delimiter\", \";\") == [\"has-no-delimiter\"]\n```\n\n----------------------------------------\n\nTITLE: Reversing List in ReScript\nDESCRIPTION: The reverse function returns a new list with all elements in reverse order.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/list.mdx#2025-04-18_snippet_30\n\nLANGUAGE: rescript\nCODE:\n```\nlet reverse: t<'a> => t<'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nBelt.List.reverse(list{1, 2, 3}) /* list{3, 2, 1} */\n```\n\n----------------------------------------\n\nTITLE: Sorting an integer array with a new copy\nDESCRIPTION: Creates and returns a new sorted array without modifying the original. This is equivalent to Belt.SortArray.stableSortBy but with a fixed comparator for integers.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/sort-array-int.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet stableSort: array(element) => array(element);\n```\n\n----------------------------------------\n\nTITLE: Generated TypeScript Interface\nDESCRIPTION: The TypeScript interface generated by genType from the ReScript Color module.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/typescript-integration.mdx#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/* TypeScript file generated from Color.res by genType. */\n\n/* eslint-disable */\n/* tslint:disable */\n\nimport * as ColorJS from \"./Color.res.js\";\n\nexport type color = \"Red\" | \"Blue\";\n\nexport const printColorMessage: (\n  color: color\n) => void = ColorJS.printColorMessage as any;\n```\n\n----------------------------------------\n\nTITLE: Partitioning Belt.Set Elements in ReScript\nDESCRIPTION: Shows how to partition elements of a Belt.Set into two sets based on a predicate using the partition function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set.mdx#2025-04-18_snippet_19\n\nLANGUAGE: rescript\nCODE:\n```\nlet isOdd = x => mod(x, 2) != 0\n\nlet s0 = Belt.Set.fromArray([1,2,3,4,5], ~id=module(IntCmp))\nlet (s1, s2) = s0->Belt.Set.partition(isOdd)\n\ns1->Belt.Set.toArray /* [1,3,5] */\ns2->Belt.Set.toArray /* [2,4] */\n```\n\n----------------------------------------\n\nTITLE: Practical example of Belt.Option.getWithDefault in ReScript\nDESCRIPTION: Demonstrates a practical use case of getWithDefault in a greeting function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/option.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nlet greet = (firstName: option<string>) =>\n  \"Greetings \" ++ firstName->Belt.Option.getWithDefault(\"Anonymous\")\n\nSome(\"Jane\")->greet /* \"Greetings Jane\" */\n\nNone->greet /* \"Greetings Anonymous\" */\n```\n\n----------------------------------------\n\nTITLE: Importing a JavaScript Module's Named Export in ReScript\nDESCRIPTION: Demonstrates how to import a named export from a JavaScript module using the @module external syntax. This example imports the 'dirname' function from Node.js 'path' module.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/import-from-export-to-js.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\n// Import nodejs' path.dirname\n@module(\"path\") external dirname: string => string = \"dirname\"\nlet root = dirname(\"/User/github\") // returns \"User\"\n```\n\nLANGUAGE: js\nCODE:\n```\nvar Path = require(\"path\");\nvar root = Path.dirname(\"/User/github\");\n```\n\nLANGUAGE: js\nCODE:\n```\nimport * as Path from \"path\";\nvar root = Path.dirname(\"/User/github\");\n```\n\n----------------------------------------\n\nTITLE: Checking if any entry satisfies a predicate in MapString module (ReScript)\nDESCRIPTION: Function to check if at least one key-value pair in a map satisfies a given predicate.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-string.mdx#2025-04-18_snippet_18\n\nLANGUAGE: reason\nCODE:\n```\nlet some: (t('v), (key, 'v) => bool) => bool;\n```\n\n----------------------------------------\n\nTITLE: Merging Multiple Key-Value Pairs into a HashMap in ReScript\nDESCRIPTION: Adds multiple key-value pairs to an existing hash map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-map.mdx#2025-04-18_snippet_17\n\nLANGUAGE: rescript\nCODE:\n```\nlet mergeMany: (t('key, 'value, 'id), array(('key, 'value))) => unit;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nmodule IntHash =\n  Belt.Id.MakeHashable({\n    type t = int;\n    let hash = a => a;\n    let eq = (a, b) => a == b;\n  });\n  \nlet hMap = Belt.HashMap.make(~hintSize=10, ~id=(module IntHash));\nBelt.HashMap.mergeMany(hMap, [|(1, \"1\"), (2, \"2\")|])\n```\n\n----------------------------------------\n\nTITLE: Renaming Fields During Record Destructuring\nDESCRIPTION: Shows how to rename fields when destructuring a record to avoid naming conflicts or provide more context in the current scope.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\nlet {name: n} = student1 // \"John\" assigned to `n`\n```\n\nLANGUAGE: js\nCODE:\n```\nvar n = \"John\";\n```\n\n----------------------------------------\n\nTITLE: Array Iteration Methods\nDESCRIPTION: Higher-order methods for iterating and transforming arrays including map, reduce, filter and forEach\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_5\n\nLANGUAGE: reason\nCODE:\n```\nlet forEach: ((. elt) => unit, t) => unit;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet map: ((. elt) => 'b, t) => typed_array('b);\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet reduce: ((. 'b, elt) => 'b, 'b, t) => 'b;\n```\n\n----------------------------------------\n\nTITLE: Getting Code Point at Index in ReScript\nDESCRIPTION: The 'codePointAt' function returns the Unicode code point at a specified index in a string. It takes a string and an integer index, returning an option of int representing the code point.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/string-2.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rescript\nCODE:\n```\nlet codePointAt: (t, int) => option<int>\n```\n\n----------------------------------------\n\nTITLE: Defining React Ref Type in ReScript\nDESCRIPTION: Shows the type definition of a React ref, which is a mutable container with a current field that can hold a value of any type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/refs-and-the-dom.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype t<'value> = { mutable current: 'value }\n```\n\n----------------------------------------\n\nTITLE: Getting and Working with RegExp LastIndex\nDESCRIPTION: Function that returns the index where the next match will start its search when using the global flag. This example shows how to use lastIndex with global search.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/re.mdx#2025-04-18_snippet_11\n\nLANGUAGE: reason\nCODE:\n```\nlet lastIndex: t => int;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet re = [%re \"/ab*/g\"];\nlet str = \"abbcdefabh\";\n\nlet break = ref(false);\nwhile (! break^) {\n  switch (Js.Re.exec_(re, str)) {\n  | Some(result) =>\n    Js.Nullable.iter(\n      Js.Re.captures(result)[0],\n      [@bs] match => {\n        let next = Belt.Int.toString(Js.Re.lastIndex(re));\n        Js.log(\"Found \" ++ match ++ \". Next match starts at \" ++ next);\n      },\n    )\n  | None => break := true\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Running bstracing for Build Performance Visualization in ReScript\nDESCRIPTION: This command runs the bstracing tool which profiles your ReScript build and generates a JSON file that can be visualized in Chrome's tracing tool. It helps identify bottlenecks in your build process.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/build-performance.mdx#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n./node_modules/.bin/bstracing\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Tuples in ReScript\nDESCRIPTION: Demonstrates creating basic tuples with different types and their JavaScript output. Shows examples of 2-element and 3-element tuples.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/tuple.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nlet ageAndName = (24, \"Lil' ReScript\")\nlet my3dCoordinates = (20.0, 30.5, 100.0)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar ageAndName = [24, \"Lil' ReScript\"];\nvar my3dCoordinates = [20.0, 30.5, 100.0];\n```\n\n----------------------------------------\n\nTITLE: Finding an Array Element with Index in ReScript\nDESCRIPTION: Returns Some(value) for the first element that satisfies the provided testing function, or None if no elements satisfy the test. The predicate function takes both the array element and its index as parameters.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/array.mdx#2025-04-18_snippet_15\n\nLANGUAGE: rescript\nCODE:\n```\nlet findi: (('a, int) => bool, t<'a>) => option<'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\n// find first positive item at an odd index\nlet positiveOddElement = (item, index) => mod(index, 2) == 1 && item > 0\n\nJs.Array.findi(positiveOddElement, [66, -33, 55, 88, 22]) == Some(88)\nJs.Array.findi(positiveOddElement, [66, -33, 55, -88, 22]) == None\n```\n\n----------------------------------------\n\nTITLE: Global Value Binding in ReScript\nDESCRIPTION: Shows how to bind to global JavaScript values using bs.val external declarations. Example demonstrates binding to the setTimeout function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/interop-cheatsheet.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reason\nCODE:\n```\n[@bs.val] external setTimeout: (unit => unit, int) => float = \"setTimeout\";\n```\n\nLANGUAGE: ml\nCODE:\n```\nexternal setTimeout: (unit -> unit) -> int -> float = \"setTimeout\" [@@bs.val]\n```\n\n----------------------------------------\n\nTITLE: Using Array with Type Parameters in ReScript\nDESCRIPTION: Demonstrates the use of the array type with a type parameter in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/type.mdx#2025-04-18_snippet_6\n\nLANGUAGE: ReScript\nCODE:\n```\n// inferred as `array<string>`\nlet greetings = [\"hello\", \"world\", \"how are you\"]\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// inferred as `array<string>`\nvar greetings = [\"hello\", \"world\", \"how are you\"];\n```\n\n----------------------------------------\n\nTITLE: Using Abstract Types for Safer JS Enum Conversion\nDESCRIPTION: Use the newType option with @deriving(jsConverter) to create a safer abstraction that prevents invalid conversions. This generates functions with more type safety.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/generate-converters-accessors.mdx#2025-04-18_snippet_5\n\nLANGUAGE: ReScript\nCODE:\n```\n@deriving({jsConverter: newType})\ntype fruit =\n  | Apple\n  | @as(100) Kiwi\n  | Watermelon;\n```\n\n----------------------------------------\n\nTITLE: Setting a Value in a HashMap in ReScript\nDESCRIPTION: Sets or updates a key-value pair in the hash map. If the key doesn't exist, it adds the binding; otherwise, it updates the existing value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-map.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet set: (t('key, 'value, 'id), 'key, 'value) => unit;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nmodule IntHash =\n  Belt.Id.MakeHashable({\n    type t = int;\n    let hash = a => a;\n    let eq = (a, b) => a == b;\n  });\n  \nlet s0 = Belt.HashMap.fromArray([|(2, \"2\"), (1, \"1\"), (3, \"3\")|], ~id=(module IntHash));\n\nBelt.HashMap.set(s0, 2, \"3\");\n\nBelt.HashMap.valuesToArray(s0) == [|\"1\", \"3\", \"3\"|];\n```\n\n----------------------------------------\n\nTITLE: Slicing Strings from a Starting Index in ReScript\nDESCRIPTION: The sliceToEnd function returns a substring from a specified index to the end of the string. It handles negative indices and out-of-bounds cases.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string-2.mdx#2025-04-18_snippet_14\n\nLANGUAGE: reason\nCODE:\n```\nlet sliceToEnd: (t, ~from: int) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nJs.String2.sliceToEnd(\"abcdefg\", ~from=4) == \"efg\";\nJs.String2.sliceToEnd(\"abcdefg\", ~from=(-2)) == \"fg\";\nJs.String2.sliceToEnd(\"abcdefg\", ~from=7) == \"\";\n```\n\n----------------------------------------\n\nTITLE: Private Let Bindings in ReScript Modules\nDESCRIPTION: Demonstrates how to use the %private annotation to mark certain bindings as private within a module, preventing them from being accessible outside the module.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/let-binding.mdx#2025-04-18_snippet_6\n\nLANGUAGE: res\nCODE:\n```\nmodule A: {\n  let b: int\n} = {\n  let a = 3\n  let b = 4\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Record Types in External Modules\nDESCRIPTION: Shows how to define record types in separate files or modules. This pattern helps with organizing code and maintaining type definitions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/record.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\n// School.re\ntype person = {age: int, name: string};\n```\n\nLANGUAGE: ml\nCODE:\n```\n(* School.ml *)\ntype person = {age: int; name: string}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Manipulating Uint16Array Data in ReScript\nDESCRIPTION: Functions for in-place operations on Uint16Array, such as copying, filling, reversing, and sorting.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reason\nCODE:\n```\nlet copyWithin: (~to_: int, t) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet copyWithinFrom: (~to_: int, ~from: int, t) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet copyWithinFromRange: (~to_: int, ~start: int, ~end_: int, t) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet fillInPlace: (elt, t) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet fillFromInPlace: (elt, ~from: int, t) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet fillRangeInPlace: (elt, ~start: int, ~end_: int, t) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet reverseInPlace: t => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet sortInPlace: t => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet sortInPlaceWith: ((. elt, elt) => int, t) => t;\n```\n\n----------------------------------------\n\nTITLE: Working with Optional Fields in Abstract Records\nDESCRIPTION: Use the @optional annotation to mark fields as optional in abstract records. Optional fields that aren't provided during object creation won't appear in the resulting JS object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/generate-converters-accessors.mdx#2025-04-18_snippet_10\n\nLANGUAGE: ReScript\nCODE:\n```\n@deriving(abstract)\ntype person = {\n  @optional name: string,\n  age: int,\n  job: string,\n};\n\nlet joe = person(~age=20, ~job=\"teacher\", ());\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar joe = {\n  age: 20,\n  job: \"teacher\"\n};\n```\n\n----------------------------------------\n\nTITLE: Function Type Annotations in Interface Files\nDESCRIPTION: Demonstrates how to annotate functions in ReScript interface files (.resi), explaining the difference between type annotations and type definitions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/function.mdx#2025-04-18_snippet_26\n\nLANGUAGE: res\nCODE:\n```\nlet add: (int, int) => int\n```\n\n----------------------------------------\n\nTITLE: Binding to JavaScript Tagged Template Functions\nDESCRIPTION: Demonstrates how to use @taggedTemplate to bind to JavaScript tagged template literals. The example binds to Bun's shell command function that uses template literals for command execution.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/bind-to-js-function.mdx#2025-04-18_snippet_11\n\nLANGUAGE: res\nCODE:\n```\n// see https://bun.sh/docs/runtime/shell\ntype result = {exitCode: int}\n@module(\"bun\") @taggedTemplate\nexternal sh: (array<string>, array<string>) => promise<result> = \"$\"\n\nlet filename = \"index.res\"\nlet result = await sh`ls ${filename}`\n```\n\nLANGUAGE: js\nCODE:\n```\nimport * as $$Bun from \"bun\";\nvar filename = \"index.res\";\nvar result = await $$Bun.$`ls ${filename}`;\n```\n\n----------------------------------------\n\nTITLE: Float Addition in ReScript\nDESCRIPTION: The + operator performs addition of two float values. It can be opened in a module to avoid dot-notation, but this may yield a shadow warning.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/float.mdx#2025-04-18_snippet_4\n\nLANGUAGE: ReScript\nCODE:\n```\nopen Belt.Float\nJs.log(2.0 + 2.0 === 4.0) /* true */\n```\n\n----------------------------------------\n\nTITLE: Generating Record Field Accessors with @deriving(accessors)\nDESCRIPTION: Use @deriving(accessors) on a record type to create accessors for its record field names. This makes it easier to use record fields in higher-order functions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/generate-converters-accessors.mdx#2025-04-18_snippet_2\n\nLANGUAGE: ReScript\nCODE:\n```\n@deriving(accessors)\ntype pet = {name: string}\n\nlet pets = [{name: \"bob\"}, {name: \"bob2\"}]\n\npets\n ->Belt.Array.map(name)\n ->Js.Array2.joinWith(\"&\")\n ->Js.log\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction name(param) {\n  return param.name;\n}\n\nvar pets = [\n  {\n    name: \"bob\"\n  },\n  {\n    name: \"bob2\"\n  }\n];\n\nconsole.log(Belt_Array.map(pets, name).join(\"&\"));\n```\n\n----------------------------------------\n\nTITLE: Zipping Lists in ReScript\nDESCRIPTION: The zip function combines two lists into a list of pairs, with length equal to the shorter of the two input lists.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/list.mdx#2025-04-18_snippet_23\n\nLANGUAGE: rescript\nCODE:\n```\nlet zip: (t<'a>, t<'b>) => t<('a, 'b)>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nBelt.List.zip(list{1, 2}, list{3, 4, 5}) // list{(1, 3), (2, 4)}\n```\n\n----------------------------------------\n\nTITLE: Splitting Strings by Regular Expression with Limit in ReScript\nDESCRIPTION: The splitByReAtMost function splits a string using a regular expression and limits the number of resulting substrings. It handles cases where the limit exceeds possible splits.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string-2.mdx#2025-04-18_snippet_18\n\nLANGUAGE: reason\nCODE:\n```\nlet splitByReAtMost: (t, Js_re.t, ~limit: int) => array(option(t));\n```\n\nLANGUAGE: reason\nCODE:\n```\nJs.String2.splitByReAtMost(\"one: two: three: four\", [%re \"/\\\\s*:\\\\s*/\"], ~limit=3)\n  == [|Some(\"one\"), Some(\"two\"), Some(\"three\")|];\n\nJs.String2.splitByReAtMost(\"one: two: three: four\", [%re \"/\\\\s*:\\\\s*/\"], ~limit=0)\n  == [||];\n\nJs.String2.splitByReAtMost(\"one: two: three: four\", [%re \"/\\\\s*:\\\\s*/\"], ~limit=8)\n  == [|Some(\"one\"), Some(\"two\"), Some(\"three\"), Some(\"four\")|];\n```\n\n----------------------------------------\n\nTITLE: Creating Promises in ReScript with Js.Promise2\nDESCRIPTION: Examples of creating promises in ReScript using Js.Promise2.make, Js.Promise2.resolve, and Js.Promise2.reject methods.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/promise.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet p1 = Js.Promise2.make((~resolve, ~reject) => {\n  // We use uncurried functions for resolve / reject\n  // for cleaner JS output without unintended curry calls\n  resolve(. \"hello world\")\n})\n\nlet p2 = Js.Promise2.resolve(\"some value\")\n\n// You can only reject `exn` values for streamlined catch handling\nexception MyOwnError(string)\nlet p3 = Js.Promise2.reject(MyOwnError(\"some rejection\"))\n```\n\n----------------------------------------\n\nTITLE: Adding ReScript npm scripts to package.json\nDESCRIPTION: JSON fragment to add convenient build and development scripts for ReScript to package.json.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/installation.mdx#2025-04-18_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  \"res:build\": \"rescript\",\n  \"res:dev\": \"rescript -w\"\n}\n```\n\n----------------------------------------\n\nTITLE: Binding to Global Module Methods in ReScript\nDESCRIPTION: This snippet demonstrates how to bind to methods within global modules, such as Math.random, using the @scope attribute in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/bind-to-global-js-values.mdx#2025-04-18_snippet_2\n\nLANGUAGE: ReScript\nCODE:\n```\n@scope(\"Math\") @val external random: unit => float = \"random\"\nlet someNumber = random()\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar someNumber = Math.random();\n```\n\n----------------------------------------\n\nTITLE: Clearing a HashMap in ReScript\nDESCRIPTION: Clears all elements from a hash map. Includes an example of creating a hash map, clearing it, and checking if it's empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-map.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet clear: t('key, 'value, 'id) => unit;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nmodule IntHash =\n  Belt.Id.MakeHashable({\n    type t = int;\n    let hash = a => a;\n    let eq = (a, b) => a == b;\n  });\n  \nlet hMap = Belt.HashMap.fromArray([|(1, \"1\")|], ~id=(module IntHash))  \nBelt.HashMap.clear(hMap)\nBelt.HashMap.isEmpty(hMap) == true;\n```\n\n----------------------------------------\n\nTITLE: Getting Array Elements with Exception Handling in ReScript\nDESCRIPTION: The getExn function retrieves an element at a specified index but raises an exception if the index is out of range.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/array.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ReScript\nCODE:\n```\nlet getExn: (array<'a>, int) => 'a\n```\n\n----------------------------------------\n\nTITLE: Different Types in Binding Shadowing\nDESCRIPTION: Shows how binding shadowing allows the same name to be used for values of different types, with each new binding creating a fresh variable.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/let-binding.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\nlet result = \"hello\"\nConsole.log(result) // prints \"hello\"\nlet result = 1\nConsole.log(result) // prints 1\n```\n\nLANGUAGE: js\nCODE:\n```\nvar result = 1;\nconsole.log(\"hello\");\nconsole.log(1);\n```\n\n----------------------------------------\n\nTITLE: Installing ReScript and Converting a Single File\nDESCRIPTION: Commands to install ReScript v9 and convert an individual Reason file to ReScript syntax. This approach allows for gradual, file-by-file migration.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/migrate-from-bucklescript-reason.mdx#2025-04-18_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpm install rescript@9\n\n# Also works with .rei / .ml / .mli / etc\nnpx rescript convert src/MyFile.re\n```\n\n----------------------------------------\n\nTITLE: Association List Operations - ReScript\nDESCRIPTION: Collection of functions for working with association lists (lists of key-value pairs), including get, has, remove, and set operations with custom equality predicates.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/list.mdx#2025-04-18_snippet_61\n\nLANGUAGE: rescript\nCODE:\n```\nlist{(1, \"a\"), (2, \"b\"), (3, \"c\")}->Belt.List.getAssoc(3, (a, b) => a == b)\n\nlist{(9, \"morning\"), (15, \"afternoon\"), (22, \"night\")}\n->Belt.List.setAssoc(15, \"afternoon\", (a, b) => mod(a, 12) == mod(b, 12))\n```\n\n----------------------------------------\n\nTITLE: Initializing Belt.SortArray.Int Module\nDESCRIPTION: Specialized module for efficient integer array sorting operations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/sort-array.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nmodule Int = Belt.SortArray.Int\n```\n\n----------------------------------------\n\nTITLE: Using the := Operator for Ref Assignment in ReScript\nDESCRIPTION: Demonstrates how to create a ref using the `ref()` function and assign a new value to it using the `:=` operator, which is compiled to a direct property assignment in JavaScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/operator_ref_value_assignment.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\nlet total = ref(0)\ntotal := 1\n```\n\nLANGUAGE: js\nCODE:\n```\nvar total = {\n  contents: 0\n};\n\ntotal.contents = 1;\n```\n\n----------------------------------------\n\nTITLE: Retrieving values from MapDict in ReScript\nDESCRIPTION: Functions to retrieve values from a MapDict using different return types.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_16\n\nLANGUAGE: ReScript\nCODE:\n```\nlet get: (t<'k, 'a, 'id>, 'k, ~cmp: cmp<'k, 'id>) => option<'a>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet getUndefined: (t<'k, 'a, 'id>, 'k, ~cmp: cmp<'k, 'id>) => Js.undefined<'a>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet getWithDefault: (t<'k, 'a, 'id>, 'k, 'a, ~cmp: cmp<'k, 'id>) => 'a\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet getExn: (t<'k, 'a, 'id>, 'k, ~cmp: cmp<'k, 'id>) => 'a\n```\n\n----------------------------------------\n\nTITLE: Extracting Substring to End in ReScript\nDESCRIPTION: The substringToEnd function returns a substring from a specified index to the end of the string. It handles cases where the start index is out of bounds.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string-2.mdx#2025-04-18_snippet_24\n\nLANGUAGE: reason\nCODE:\n```\nlet substringToEnd: (t, ~from: int) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nJs.String2.substringToEnd(\"playground\", ~from=4) == \"ground\";\nJs.String2.substringToEnd(\"playground\", ~from=(-3)) == \"playground\";\nJs.String2.substringToEnd(\"playground\", ~from=12) == \"\";\n```\n\n----------------------------------------\n\nTITLE: Dictionary Creation from List\nDESCRIPTION: Type signature and example for creating dictionary from list of pairs.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/dict.mdx#2025-04-18_snippet_11\n\nLANGUAGE: res\nCODE:\n```\nlet fromList: list<(key, 'a)> => t<'a>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet capitals = Js.Dict.fromList(list{(\"Japan\", \"Tokyo\"), (\"France\", \"Paris\"), (\"Egypt\", \"Cairo\")})\n```\n\n----------------------------------------\n\nTITLE: Checking if a Value is Null or Undefined in ReScript\nDESCRIPTION: Defines the 'isNullable' function that returns true if the given value is null or undefined, false otherwise.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/null-undefined.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reason\nCODE:\n```\nlet isNullable: t('a) => bool;\n```\n\n----------------------------------------\n\nTITLE: Using open! to Ignore Shadow Warnings in ReScript\nDESCRIPTION: Demonstrates how to use 'open!' to explicitly ignore warnings about identifier shadowing. This is useful when you intentionally want to override existing bindings with ones from an opened module.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/module.mdx#2025-04-18_snippet_6\n\nLANGUAGE: res\nCODE:\n```\nlet map = (arr, value) => {\n  value\n}\n\n// opening Js.Array2 would shadow our previously defined `map`\n// `open!` will explicitly turn off the automatic warning\nopen! Js.Array2\nlet arr = map([1,2,3], (a) => { a + 1})\n```\n\n----------------------------------------\n\nTITLE: Extracting Keys from a HashMap in ReScript\nDESCRIPTION: Returns an array containing all the keys in the hash map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-map.mdx#2025-04-18_snippet_14\n\nLANGUAGE: rescript\nCODE:\n```\nlet keysToArray: t('key, 'a, 'b) => array('key);\n```\n\nLANGUAGE: rescript\nCODE:\n```\nmodule IntHash =\n  Belt.Id.MakeHashable({\n    type t = int;\n    let hash = a => a;\n    let eq = (a, b) => a == b;\n  });\n  \nlet s0 = Belt.HashMap.make(~hintSize=10, ~id=(module IntHash));\nBelt.HashMap.set(s0, 1, \"value1\");\nBelt.HashMap.set(s0, 2, \"value2\");\n\nBelt.HashMap.keysToArray(s0) == [|1, 2|];\n```\n\n----------------------------------------\n\nTITLE: Custom Exception Creation in ReScript\nDESCRIPTION: Example of creating and raising a custom exception in ReScript. Shows how to define an exception with a string payload.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/exception.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nexception InputClosed(string)\n// later on\nraise(InputClosed(\"The stream has closed!\"))\n```\n\n----------------------------------------\n\nTITLE: Comparing Old Reason and New ReScript Syntax\nDESCRIPTION: Examples of syntax differences between old Reason and new ReScript, including type arguments, string interpolation, polymorphic variants, arrays, lists, exceptions, and more.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/migrate-from-bucklescript-reason.mdx#2025-04-18_snippet_1\n\nLANGUAGE: ReScript\nCODE:\n```\n// Type arguments\noption<int> // New ReScript\noption(int) // Old Reason\n\n// String interpolation\nj`hello ${name}` // New ReScript\n{j|hello ${name}|j} // Old Reason\n\n// Polymorphic variants\n#red // New ReScript\n`red // Old Reason\n\n// Arrays\n[1,2,3] // New ReScript\n[|1,2,3|] // Old Reason\n\n// Lists\nlist{1, 2, 3} // New ReScript\n[1,2,3] // Old Reason\n\n// Exceptions\ntry compute() catch { | Not_found => Js.log(\"oops\")} // New ReScript\ntry (compute()) { | Not_found => Js.log(\"oops\")} // Old Reason\n\n// First class module\nmodule(S: Student) // New ReScript\n(module S: Student) // Old Reason\n\n// Object access\nsettings[\"visible\"] = true // New ReScript\nsettings##visible #= true // Old Reason\n\n// Object type\n{\"age\": int} // New ReScript\nJs.t({\"age\": int}) // Old Reason\n\n// Attributes\n@bs.deriving(accessors) // New ReScript\n[@bs.deriving accessors] // Old Reason\n\n// Recursive type declaration\ntype rec myList<'a> = Nil | Cons('a, myList<'a>) // New ReScript\n\n// Using reserved keywords as identifiers\nlet \"try\" = true // New ReScript\n```\n\n----------------------------------------\n\nTITLE: String startsWith Function in ReScript\nDESCRIPTION: The startsWith function checks if a string begins with the specified substring. It returns true if the string starts with the substring, false otherwise. Part of ES2015 standard.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/string.mdx#2025-04-18_snippet_12\n\nLANGUAGE: res\nCODE:\n```\nlet startsWith: (t, t) => bool\n```\n\nLANGUAGE: res\nCODE:\n```\nJs.String.startsWith(\"Buckle\", \"BuckleScript\") == true\nJs.String.startsWith(\"\", \"BuckleScript\") == true\nJs.String.startsWith(\"Buckle\", \"JavaScript\") == false\n```\n\n----------------------------------------\n\nTITLE: Type Inference with Polymorphic Variants in ReScript\nDESCRIPTION: Shows how polymorphic variant values' types are inferred rather than searched in scope, allowing for constructors not defined in the type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/polymorphic-variant.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ReScript\nCODE:\n```\ntype color = [#red | #green | #blue]\n\nlet render = myColor => {\n  switch myColor {\n  | #blue => Console.log(\"Hello blue!\")\n  | #green => Console.log(\"Hello green!\")\n  // works!\n  | #yellow => Console.log(\"Hello yellow!\")\n  }\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction render(myColor) {\n  if (myColor === \"yellow\") {\n    console.log(\"Hello yellow!\");\n  } else if (myColor === \"green\") {\n    console.log(\"Hello green!\");\n  } else {\n    console.log(\"Hello blue!\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Set Operations on Belt.Set in ReScript\nDESCRIPTION: Demonstrates set operations like union, intersect, and diff on Belt.Set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/set.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\nlet s0 = Belt.Set.fromArray([5,2,3,5,6], ~id=module(IntCmp))\nlet s1 = Belt.Set.fromArray([5,2,3,1,5,4], ~id=module(IntCmp))\nlet union = Belt.Set.union(s0, s1)\nunion->Belt.Set.toArray /* [1,2,3,4,5,6] */\n\nlet intersect = Belt.Set.intersect(s0, s1)\nintersect->Belt.Set.toArray /* [2,3,5] */\n\nBelt.Set.toArray(Belt.Set.diff(s0, s1)) /* [6] */\nBelt.Set.toArray(Belt.Set.diff(s1,s0)) /* [1,4] */\n```\n\n----------------------------------------\n\nTITLE: Embedding Raw JavaScript Blocks in ReScript using %%raw\nDESCRIPTION: Demonstrates how to embed blocks of raw JavaScript code at the top level of a ReScript file using the %%raw syntax with backtick multiline strings.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/embed-raw-javascript.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\n%%raw(`\n// look ma, regular JavaScript!\nvar message = \"hello\";\nfunction greet(m) {\n  console.log(m)\n}\n`)\n```\n\nLANGUAGE: js\nCODE:\n```\n// look ma, regular JavaScript!\nvar message = \"hello\";\nfunction greet(m) {\n  console.log(m)\n}\n```\n\n----------------------------------------\n\nTITLE: Getting value by key in MapString module (ReScript)\nDESCRIPTION: Function to retrieve a value for a given key, returning an option type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-string.mdx#2025-04-18_snippet_33\n\nLANGUAGE: reason\nCODE:\n```\nlet get: (t('v), key) => option('v);\n```\n\n----------------------------------------\n\nTITLE: Converting String to Float in ReScript\nDESCRIPTION: The fromString function converts a given string to a float. It returns Some(float) when the input is a number, None otherwise.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/float.mdx#2025-04-18_snippet_2\n\nLANGUAGE: ReScript\nCODE:\n```\nJs.log(Belt.Float.fromString(\"1.0\") === Some(1.0)) /* true */\n```\n\n----------------------------------------\n\nTITLE: Opening Math Module with ReScript open Keyword\nDESCRIPTION: Demonstrates using the `open` keyword to expose Math module functionality, allowing direct access to Constants.pi and pow functions without fully qualifying the module name.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/language_open.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nopen Math\n\n// Use _PI and pow_float from the Math module\nlet area = radius => Constants.pi *. pow(radius, ~exp=2.0)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction area(radius) {\n  return Math.PI * Math.pow(radius, 2.0);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a new Belt.HashMap.String instance in ReScript\nDESCRIPTION: Creates a new hash map using the make function with an optional hint size parameter.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/hash-map-string.mdx#2025-04-18_snippet_1\n\nLANGUAGE: ReScript\nCODE:\n```\nlet make: (~hintSize: int) => t<'b>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet hMap = Belt.HashMap.String.make(~hintSize=10)\n\nBelt.HashMap.String.set(hMap, \"key1\", \"a\")\n```\n\n----------------------------------------\n\nTITLE: Using unsafe_get Function in ReSript\nDESCRIPTION: The unsafe_get function retrieves a value from an array at a specified index. It returns the value if the index is in bounds, otherwise it returns JavaScript's undefined value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array.mdx#2025-04-18_snippet_32\n\nLANGUAGE: rescript\nCODE:\n```\nlet arr = [100, 101, 102, 103]\nJs.Array.unsafe_get(arr, 3) == 103\nJs.Array.unsafe_get(arr, 4) // returns undefined\n```\n\n----------------------------------------\n\nTITLE: Defining DOM Observer Types in ReScript\nDESCRIPTION: Type definitions for DOM observers that monitor changes to elements and performance. These types enable reactive DOM programming.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/dom.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\ntype intersectionObserver\ntype mutationObserver\ntype performanceObserver\ntype resizeObserver\n```\n\n----------------------------------------\n\nTITLE: Vector Indexed Map Operation\nDESCRIPTION: Maps vector elements with index access.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/vector.mdx#2025-04-18_snippet_10\n\nLANGUAGE: res\nCODE:\n```\nlet mapi: ((. int, 'a) => 'b, t<'a>) => t<'b>\n```\n\n----------------------------------------\n\nTITLE: Array Filtering with Index in ReasonML\nDESCRIPTION: Creates new array with elements that pass a predicate function test that considers both element and index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/array-2.mdx#2025-04-18_snippet_15\n\nLANGUAGE: reasonml\nCODE:\n```\nlet filteri: (t('a), ('a, int) => bool) => t('a);\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet positiveOddElement = (item, index) => \n  {(index mod 2 == 1) && (item > 0)};\n\nJs.Array2.filteri([|6, 3, 5, 8, 7, -4, 1|],\n  positiveOddElement) == [|3, 8|];\n```\n\n----------------------------------------\n\nTITLE: Creating a Belt.Set from an Array in ReScript\nDESCRIPTION: Demonstrates how to create a Belt.Set from an array of integers using a custom comparator.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/set.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet s0 = Belt.Set.fromArray([1, 3, 2, 4], ~id=module(IntCmp))\n\ns0->Belt.Set.toArray /* [1, 2, 3, 4] */\n```\n\n----------------------------------------\n\nTITLE: Filtering TypedArray Elements with Index in ReScript\nDESCRIPTION: Function signature for creating a new Uint8ClampedArray with all elements that pass a test implemented by a function that receives both the element and its index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_35\n\nLANGUAGE: res\nCODE:\n```\nlet filteri: ((. elt, int) => bool, t) => t\n```\n\n----------------------------------------\n\nTITLE: New Optional Record Fields Syntax\nDESCRIPTION: Demonstration of the new experimental optional record fields syntax in ReScript 10\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2022-08-25-release-10-0-0.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\ntype user = {\n  name: string,\n  age?: int\n}\n\n// No need to set `age` unless it should have a value\nlet userWithoutAge = {\n  name: \"Name\",\n}\n\nlet userWithAge = {\n  name: \"Name\",\n  age: 34\n}\n```\n\n----------------------------------------\n\nTITLE: Modeling 'this'-based Callbacks in ReScript\nDESCRIPTION: Shows how to use the @bs.this attribute to correctly type and bind to JavaScript functions that rely on 'this' context. This example models an 'onload' callback where 'this' refers to the object on which the callback is set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/bind-to-js-function.mdx#2025-04-18_snippet_10\n\nLANGUAGE: reason\nCODE:\n```\ntype x;\n[@bs.val] external x: x = \"x\";\n[@bs.set] external setOnload: (x, [@bs.this] ((x, int) => unit)) => unit = \"onload\";\n[@bs.get] external resp: x => int = \"response\";\nsetOnload(x, [@bs.this] ((o, v) => Js.log(resp(o) + v)));\n```\n\nLANGUAGE: ocaml\nCODE:\n```\ntype x\nexternal x: x = \"x\" [@@bs.val]\nexternal setOnload: x -> ((x -> int -> unit) [@bs.this]) -> unit = \"onload\" [@@bs.set]\nexternal resp: x -> int = \"response\" [@@bs.get]\nlet _ = setOnload x ((fun o v -> Js.log ((resp o) + v)) [@bs.this])\n```\n\nLANGUAGE: javascript\nCODE:\n```\nx.onload = function (v) {\n  var o = this;\n  console.log((o.response + v) | 0);\n};\n```\n\n----------------------------------------\n\nTITLE: Using the mod Operator in ReScript\nDESCRIPTION: This example demonstrates how to use the mod operator to calculate the remainder after division of two integers. In this case, it calculates 7 modulo 4, which equals 3.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/operators_mod.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\nlet result = mod(7, 4)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar result = 3;\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Belt Opening in bsconfig.json\nDESCRIPTION: Shows how to configure the bsconfig.json file to open the Belt module globally for all files in a ReScript project.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt.mdx#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n  \"bsc-flags\": [\"-open Belt\"],\n```\n\n----------------------------------------\n\nTITLE: Defining Mutually Recursive Functions in ReScript\nDESCRIPTION: Demonstrates how to create mutually recursive functions using the 'rec' keyword and 'and' to chain them together.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/function.mdx#2025-04-18_snippet_7\n\nLANGUAGE: reason\nCODE:\n```\nlet rec callSecond = () => callFirst()\nand callFirst = () => callSecond();\n```\n\nLANGUAGE: ml\nCODE:\n```\nlet rec callSecond () = callFirst ()\nand callFirst () = callSecond ()\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction callSecond(_param) {\n  while(true) {\n    _param = undefined;\n    continue ;\n  };\n}\n\nfunction callFirst(_param) {\n  while(true) {\n    _param = undefined;\n    continue ;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Belt.HashMap.String from an array in ReScript\nDESCRIPTION: Initializes a new hash map from an array of key-value pairs using the fromArray function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/hash-map-string.mdx#2025-04-18_snippet_16\n\nLANGUAGE: ReScript\nCODE:\n```\nlet fromArray: array<(key, 'a)> => t<'a>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet hMap = Belt.HashMap.String.fromArray([(\"1\", \"value1\"), (\"2\", \"value2\")])\nBelt.HashMap.String.toArray(hMap) == [(\"1\", \"value1\"), (\"2\", \"value2\")]\n```\n\n----------------------------------------\n\nTITLE: Direct Mutation of Ref Contents in ReScript\nDESCRIPTION: Demonstrates direct mutation of a ref's contents field to update its value. This shows the explicit way to modify a mutable reference.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/mutation.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\nmyValue.contents = 6;\n```\n\nLANGUAGE: ml\nCODE:\n```\nmyValue.contents = 6\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmyValue.contents = 6;\n```\n\n----------------------------------------\n\nTITLE: Converting Belt.HashMap.String to an array in ReScript\nDESCRIPTION: Creates an array of key-value pairs from the hash map using the toArray function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/hash-map-string.mdx#2025-04-18_snippet_13\n\nLANGUAGE: ReScript\nCODE:\n```\nlet toArray: t<'a> => array<(key, 'a)>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet hMap = Belt.HashMap.String.make(~hintSize=10)\nBelt.HashMap.String.set(hMap, \"1\", \"value1\")\nBelt.HashMap.String.set(hMap, \"2\", \"value2\")\n\nBelt.HashMap.String.toArray(hMap) == [(\"1\", \"value1\"), (\"2\", \"value2\")]\n```\n\n----------------------------------------\n\nTITLE: Extending Module Signatures in ReScript\nDESCRIPTION: Shows how to extend module signatures using the include keyword, allowing one module type to inherit fields from another module type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/module.mdx#2025-04-18_snippet_9\n\nLANGUAGE: res\nCODE:\n```\nmodule type BaseComponent = {\n  let defaultGreeting: string\n  let getAudience: (~excited: bool) => string\n}\n\nmodule type ActualComponent = {\n  /* the BaseComponent signature is copied over */\n  include BaseComponent\n  let render: unit => string\n}\n```\n\nLANGUAGE: js\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: MutableMap Core Operations\nDESCRIPTION: Basic operations for creating and manipulating mutable maps\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/mutable-map.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet make: (~id: id<'k, 'id>) => t<'k, 'a, 'id>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet clear: t<'a, 'b, 'c> => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet isEmpty: t<'a, 'b, 'c> => bool\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet has: (t<'k, 'a, 'b>, 'k) => bool\n```\n\n----------------------------------------\n\nTITLE: Incorrect Coordinate System Example without Type Safety\nDESCRIPTION: Demonstrates a game coordinate system with a potential type error where local coordinates could be incorrectly passed to a function expecting world coordinates.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/unboxed.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\ntype coordinates = {x: float, y: float}\n\nlet renderDot = (coordinates) => {\n  Js.log3(\"Pretend to draw at:\", coordinates.x, coordinates.y)\n}\n\nlet toWorldCoordinates = (localCoordinates) => {\n  {\n    x: localCoordinates.x +. 10.,\n    y: localCoordinates.x +. 20.,\n  }\n}\n\nlet playerLocalCoordinates = {x: 20.5, y: 30.5}\n\nrenderDot(playerLocalCoordinates)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction renderDot(coordinates) {\n  console.log(\"Pretend to draw at:\", coordinates.x, coordinates.y);\n}\n\nfunction toWorldCoordinates(localCoordinates) {\n  return {\n    x: localCoordinates.x + 10,\n    y: localCoordinates.x + 20\n  };\n}\n\nvar playerLocalCoordinates = {\n  x: 20.5,\n  y: 30.5\n};\n\nrenderDot(playerLocalCoordinates);\n```\n\n----------------------------------------\n\nTITLE: Handling Nullable Return Values in ReScript\nDESCRIPTION: Demonstrates the use of @bs.return nullable to automatically convert JavaScript nullable return values (null or undefined) to ReScript's option type. This is useful when interfacing with JavaScript functions that may return null or undefined.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/bind-to-js-function.mdx#2025-04-18_snippet_11\n\nLANGUAGE: reason\nCODE:\n```\ntype element;\ntype dom;\n\n[@bs.send] [@bs.return nullable]\nexternal getElementById: (dom, string) => option(element) = \"getElementById\";\n\nlet test = dom => {\n  let elem = dom->(getElementById(\"haha\"))\n  switch (elem) {\n  | None => 1\n  | Some(_ui) => 2\n  }\n};\n```\n\nLANGUAGE: ocaml\nCODE:\n```\ntype element\ntype dom\nexternal getElementById : dom -> string -> element option = \"getElementById\"\n[@@bs.send][@@bs.return nullable]\n\nlet test dom =\n  let elem = dom |. (getElementById \"haha\") in\n  match elem with\n  | None -> 1\n  | Some _ui -> 2\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction test(dom) {\n  var elem = dom.getElementById(\"haha\");\n  if (elem == null) {\n    return 1;\n  } else {\n    console.log(elem);\n    return 2;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Regular and Unboxed Types in ReScript\nDESCRIPTION: Shows the difference between regular variants/records and their unboxed versions in terms of JavaScript output. The unboxed versions remove the wrapper object, resulting in cleaner JavaScript code.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/unboxed.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype name = Name(string)\nlet studentName = Name(\"Joe\")\n\ntype greeting = {message: string}\nlet hi = {message: \"hello!\"}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar studentName = /* Name */{\n  _0: \"Joe\"\n};\n\nvar hi = {\n  message: \"hello!\"\n};\n```\n\nLANGUAGE: rescript\nCODE:\n```\n@unboxed\ntype name = Name(string)\nlet studentName = Name(\"Joe\")\n\n@unboxed\ntype greeting = {message: string}\nlet hi = {message: \"hello!\"}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar studentName = \"Joe\";\n\nvar hi = \"hello!\";\n```\n\n----------------------------------------\n\nTITLE: Array Access in ReScript\nDESCRIPTION: Shows how to access array items in ReScript using indexing and Array.get(), returning option types for safety.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/array-and-list.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet myArray = [\"hello\", \"world\", \"how are you\"]\n\nlet firstItem = myArray[0] // Some(\"hello\")\n\nlet tenthItem = myArray->Array.get(10) // None\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar myArray = [\"hello\", \"world\", \"how are you\"];\n\nvar firstItem = myArray[0];\n\nvar tenthItem = myArray[10];\n```\n\n----------------------------------------\n\nTITLE: Extracting Substring with Length in ReScript\nDESCRIPTION: The substrAtMost function extracts a substring of a specified length from a string starting at a given index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/string-2.mdx#2025-04-18_snippet_28\n\nLANGUAGE: rescript\nCODE:\n```\nlet substrAtMost: (t, ~from: int, ~length: int) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.String2.substrAtMost(\"abcdefghij\", ~from=3, ~length=4) == \"defg\"\nJs.String2.substrAtMost(\"abcdefghij\", ~from=-3, ~length=4) == \"hij\"\nJs.String2.substrAtMost(\"abcdefghij\", ~from=12, ~length=2) == \"\"\n```\n\n----------------------------------------\n\nTITLE: Converting Option<bool> to bool Using Optimal Pattern Matching\nDESCRIPTION: The most elegant and effective implementation of optionBoolToBool using pattern matching, which is both concise and maintains type safety.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_18\n\nLANGUAGE: ml\nCODE:\n```\nlet optionBoolToBool opt =\n  match opt with\n  | Some trueOrFalse -> trueOrFalse\n  | None -> false\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction optionBoolToBool(opt) {\n  if (opt !== undefined) {\n    return opt;\n  } else {\n    return false;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building ReScript Project with Dependencies\nDESCRIPTION: This command builds a ReScript project including its dependencies and pinned-dependencies. The -w flag can be added to keep the built-in watcher running for automatic rebuilds on file changes.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/build-overview.mdx#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nbsb -make-world\n```\n\n----------------------------------------\n\nTITLE: Installing ReScript Dependencies with npm\nDESCRIPTION: npm command to install ReScript and its core library as dependencies in an existing project. This is used when manually integrating ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/installation.mdx#2025-04-18_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nnpm install rescript @rescript/core\n```\n\n----------------------------------------\n\nTITLE: Defining MutableMap Types in ReScript\nDESCRIPTION: Defines the core types for the MutableMap module, including the map type 't' and the id type for customizable comparison.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-map.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\ntype t<'k, 'v, 'id>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\ntype id<'key, 'id> = Belt_Id.comparable<'key, 'id>\n```\n\n----------------------------------------\n\nTITLE: Using Belt.Option.eq in ReScript\nDESCRIPTION: Demonstrates how to use the eq function to compare two option values using a custom predicate.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/option.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\nlet clockEqual = (a, b) => mod(a, 12) == mod(b, 12)\n\nopen Belt.Option\n\neq(Some(3), Some(15), clockEqual) /* true */\n\neq(Some(3), None, clockEqual) /* false */\n\neq(None, Some(3), clockEqual) /* false */\n\neq(None, None, clockEqual) /* true */\n```\n\n----------------------------------------\n\nTITLE: Finding Array Element Index in ReScript\nDESCRIPTION: Returns the index of the first element in the array that satisfies the provided testing function, or -1 if no element satisfies the predicate. Useful for determining the position of an element in an array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/array-2.mdx#2025-04-18_snippet_17\n\nLANGUAGE: ReScript\nCODE:\n```\nlet findIndex: (t<'a>, 'a => bool) => int\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nJs.Array2.findIndex([33, 22, -55, 77, -44], x => x < 0) == 2\nJs.Array2.findIndex([33, 22, 55, 77, 44], x => x < 0) == -1\n```\n\n----------------------------------------\n\nTITLE: Converting Float to Integer in ReScript\nDESCRIPTION: Converts a given float to an int using the fromFloat function from Belt.Int module.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/int.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromFloat: float => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.log(Belt.Int.fromFloat(1.0) === 1) /* true */\n```\n\n----------------------------------------\n\nTITLE: Curried vs Uncurried Callbacks in Belt\nDESCRIPTION: Shows the difference between using curried and uncurried callback functions with Belt's List.forEach\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\n[\"a\", \"b\", \"c\"]->Belt.List.forEach(x => Js.log(x));\n\n[\"a\", \"b\", \"c\"]->Belt.List.forEachU((. x) => Js.log(x));\n```\n\n----------------------------------------\n\nTITLE: In-place Array Reversal in ReScript\nDESCRIPTION: Reverses items in an array in place, modifying the original array rather than creating a new one.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/array.mdx#2025-04-18_snippet_11\n\nLANGUAGE: reason\nCODE:\n```\nlet reverseInPlace: array('a) => unit;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet arr = [|10, 11, 12, 13, 14|];\n\nlet () = Belt.Array.reverseInPlace(arr);\n\narr == [|14, 13, 12, 11, 10|];\n```\n\n----------------------------------------\n\nTITLE: Vector Filter Operation\nDESCRIPTION: In-place filtering of vector elements based on a predicate function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/vector.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\nlet filterInPlace: ((. 'a) => bool, t<'a>) => unit\n```\n\n----------------------------------------\n\nTITLE: Creating and Raising Custom Exceptions in ReScript\nDESCRIPTION: Demonstrates how to create a custom exception and raise it in ReScript. The example creates an 'InputClosed' exception and raises it with a message.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/exception.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\nexception InputClosed(string)\n// later on\nraise(InputClosed(\"The stream has closed!\"))\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as Caml_exceptions from \"./stdlib/caml_exceptions.js\";\n\nvar InputClosed = /* @__PURE__ */Caml_exceptions.create(\"Playground.InputClosed\");\n\nthrow {\n      RE_EXN_ID: InputClosed,\n      _1: \"The stream has closed!\",\n      Error: new Error()\n    };\n```\n\n----------------------------------------\n\nTITLE: Accessing Referenced Values in ReScript\nDESCRIPTION: Accessing the value stored in a ref by retrieving its 'contents' field. This gives you the actual value that was stored in the reference.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/mutation.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\nlet five = myValue.contents // 5\n```\n\nLANGUAGE: js\nCODE:\n```\nvar five = myValue.contents;\n```\n\n----------------------------------------\n\nTITLE: Modeling this-based Callbacks in ReScript\nDESCRIPTION: Demonstrates how to properly type JavaScript callbacks that rely on the 'this' context. The @this attribute allows for proper typing of functions where 'this' refers to the source object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/bind-to-js-function.mdx#2025-04-18_snippet_13\n\nLANGUAGE: rescript\nCODE:\n```\ntype x\n@val external x: x = \"x\"\n@set external setOnload: (x, @this ((x, int) => unit)) => unit = \"onload\"\n@get external resp: x => int = \"response\"\nsetOnload(x, @this ((o, v) => Js.log(resp(o) + v)))\n```\n\nLANGUAGE: javascript\nCODE:\n```\nx.onload = function (v) {\n  var o = this;\n  console.log((o.response + v) | 0);\n};\n```\n\n----------------------------------------\n\nTITLE: Raw JavaScript Integration in ReScript\nDESCRIPTION: Demonstrates how to embed raw JavaScript code in ReScript using the %raw annotation. Shows both direct function definition and statement execution.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/interop-cheatsheet.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\nlet add = [%raw \"(a, b) => a + b\"];\n[%%raw \"const a = 1\"];\n```\n\nLANGUAGE: ml\nCODE:\n```\nlet add = [%raw \"(a, b) => a + b\"]\n[%%raw \"const a = 1\"]\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar add = ((a, b) => a + b);\nconst a = 1\n```\n\n----------------------------------------\n\nTITLE: Defining Result Type in ReScript\nDESCRIPTION: This code snippet defines the Result type, which is a variant type with two constructors: Ok for successful results and Error for failures. It uses generic types 'good and 'bad to allow for flexible typing of success and error values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/result.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\ntype t<'good, 'bad> =\n  | Ok('good)\n  | Error('bad)\n```\n\n----------------------------------------\n\nTITLE: Using Polymorphic Variant Types in Annotations Without Explicit Definition\nDESCRIPTION: Shows how to use polymorphic variant types in type annotations without needing to define them separately. The types are inferred based on the structure being used.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/polymorphic-variant.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nlet render = (color: [#Red | #Green | #Blue]) => {\n  switch(color) {\n    | _ => Js.log(\"...\")\n  }\n}\n\nlet color: [#Red] = #Red\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction render(color) {\n  console.log(\"...\");\n}\n\nvar color = \"Red\";\n```\n\n----------------------------------------\n\nTITLE: Getting List Tail with Exception in ReScript\nDESCRIPTION: The tailExn function returns all elements except the first directly, raising an exception if the list is empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/list.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet tailExn: t<'a> => t<'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nBelt.List.tailExn(list{1, 2, 3}) // list{2, 3}\n\nBelt.List.tailExn(list{}) // Raises an Error\n```\n\n----------------------------------------\n\nTITLE: Removing Elements from Array End In-Place in ReScript\nDESCRIPTION: The removeFromInPlace function removes elements from the given array starting at a specified position to the end of the array. It returns the removed elements and modifies the original array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array-2.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet removeFromInPlace: (t<'a>, ~pos: int) => t<'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet arr = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\nJs.Array2.removeFromInPlace(arr, ~pos=4) == [\"e\", \"f\"]\narr == [\"a\", \"b\", \"c\", \"d\"]\n```\n\n----------------------------------------\n\nTITLE: setInterval Example in ReScript\nDESCRIPTION: Example of using setInterval to create a counter that increments and logs its value every second.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/global.mdx#2025-04-18_snippet_7\n\nLANGUAGE: reasonml\nCODE:\n```\n/* Will count up and print the count to the console every second */\n\nlet count = ref(0);\n\nlet tick = () => {\n  count := count^ + 1;\n  Js.log(Belt.Int.toString(count^));\n};\n\nJs.Global.setInterval(tick, 1000);\n```\n\n----------------------------------------\n\nTITLE: Defining Comparable module type in ReScript\nDESCRIPTION: Defines a module type 'Comparable' with an identity type, a value type 't', and a comparison function 'cmp'. This module type is used to create comparable modules with unique identities.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/id.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ReScript\nCODE:\n```\nmodule type Comparable {\n  type identity;\n\n  type t;\n\n  let cmp: BeltId.cmp(t, identity);\n}\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading a React Component with Dynamic Import\nDESCRIPTION: Example of using React.lazy_ with Js.import to create a lazy-loaded version of a React component. This approach enables code splitting in React applications with minimal code.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2023-06-05-first-class-dynamic-import-support.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nmodule LazyTitle = {\n  let make = React.lazy_(() => Js.import(Title.make))\n}\n\nlet titleJsx = <LazyTitle text=\"Hello!\" />\n```\n\n----------------------------------------\n\nTITLE: String sliceToEnd Function in ReScript\nDESCRIPTION: The sliceToEnd function extracts a substring from a specified position to the end of the string. Negative indices count from the end of the string, and if the start index exceeds the string length, an empty string is returned.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/string.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\nlet sliceToEnd: (~from: int, t) => t\n```\n\nLANGUAGE: res\nCODE:\n```\nJs.String.sliceToEnd(~from=4, \"abcdefg\") == \"efg\"\nJs.String.sliceToEnd(~from=-2, \"abcdefg\") == \"fg\"\nJs.String.sliceToEnd(~from=7, \"abcdefg\") == \"\"\n```\n\n----------------------------------------\n\nTITLE: Dictionary Map Example\nDESCRIPTION: Example showing how to transform dictionary values using map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/dict.mdx#2025-04-18_snippet_22\n\nLANGUAGE: rescript\nCODE:\n```\nlet prices = Js.Dict.fromList(list{(\"pen\", 1.00), (\"book\", 5.00), (\"stapler\", 7.00)})\n\nlet discount = (. price) => price *. 0.90\nlet salePrices = Js.Dict.map(discount, prices)\n\nsalePrices == Js.Dict.fromList(list{(\"pen\", 0.90), (\"book\", 4.50), (\"stapler\", 6.30)})\n```\n\n----------------------------------------\n\nTITLE: Partially Converted ReScript Code\nDESCRIPTION: Intermediate conversion step with mixed ReScript and raw JavaScript, extracting the defaultId variable.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/converting-from-js.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet defaultId = 10\n\n%%raw(`\nconst school = require('school');\n\nfunction queryResult(usePayload, payload) {\n  if (usePayload) {\n    return payload.student;\n  } else {\n    return school.getStudentById(defaultId);\n  }\n}\n`)\n```\n\n----------------------------------------\n\nTITLE: Checking String Inclusion in ReScript\nDESCRIPTION: The 'includes' function checks if a string contains a specified substring. It takes two strings and returns a boolean indicating whether the first string includes the second.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/string-2.mdx#2025-04-18_snippet_15\n\nLANGUAGE: rescript\nCODE:\n```\nlet includes: (t, t) => bool\n```\n\n----------------------------------------\n\nTITLE: Concatenating Two Arrays in ReScript\nDESCRIPTION: The concat function returns a fresh array containing the concatenation of two arrays. Even if one array is empty, a new array is always created.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/array.mdx#2025-04-18_snippet_26\n\nLANGUAGE: ReScript\nCODE:\n```\nlet concat: (array<'a>, array<'a>) => array<'a>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nBelt.Array.concat([1, 2, 3], [4, 5]) == [1, 2, 3, 4, 5]\n\nBelt.Array.concat([], [\"a\", \"b\", \"c\"]) == [\"a\", \"b\", \"c\"]\n```\n\n----------------------------------------\n\nTITLE: Defining hashable type in ReScript\nDESCRIPTION: Defines a type 'hashable' as a module of the Hashable type. It includes hash and equality functions and comes with a unique identity guaranteed by the type system.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/id.mdx#2025-04-18_snippet_9\n\nLANGUAGE: ReScript\nCODE:\n```\ntype hashable('key, 'id) = (module BeltId.Hashable with type identity = 'id and type t = 'key);\n```\n\n----------------------------------------\n\nTITLE: Fall-Through Patterns in ReScript\nDESCRIPTION: Shows how to use fall-through patterns in a switch statement, allowing multiple variant cases to be handled by the same code block while extracting common values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_9\n\nLANGUAGE: res\nCODE:\n```\nlet myStatus = Vacations(10)\n\nswitch myStatus {\n| Vacations(days)\n| Sabbatical(days) => Js.log(`Come back in ${Js.Int.toString(days)} days!`)\n| Sick\n| Present => Js.log(\"Hey! How are you?\")\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar myStatus = {\n  TAG: /* Vacations */0,\n  _0: 10\n};\n\nif (typeof myStatus === \"number\") {\n  console.log(\"Hey! How are you?\");\n} else {\n  console.log(\"Come back in \" + (10).toString() + \" days!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Elements to Belt.Set in ReScript\nDESCRIPTION: Demonstrates how to add multiple elements to a Belt.Set using the mergeMany function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/set.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet set = Belt.Set.make(~id=module(IntCmp))\n\nlet newSet = set->Belt.Set.mergeMany([5, 4, 3, 2, 1])\nnewSet->Belt.Set.toArray /* [1, 2, 3, 4, 5] */\n```\n\n----------------------------------------\n\nTITLE: String startsWithFrom Function in ReScript\nDESCRIPTION: The startsWithFrom function checks if a string begins with a specified substring starting from a given position. It returns true if the string contains the substring at that position, false otherwise.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/string.mdx#2025-04-18_snippet_13\n\nLANGUAGE: res\nCODE:\n```\nlet startsWithFrom: (t, int, t) => bool\n```\n\nLANGUAGE: res\nCODE:\n```\nJs.String.startsWithFrom(\"kle\", 3, \"BuckleScript\") == true\nJs.String.startsWithFrom(\"\", 3, \"BuckleScript\") == true\nJs.String.startsWithFrom(\"Buckle\", 2, \"JavaScript\") == false\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Two Lists with forEach2\nDESCRIPTION: Function that iterates over two lists simultaneously, applying a function to each pair of elements. Stops at the length of the shorter list.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/list.mdx#2025-04-18_snippet_7\n\nLANGUAGE: res\nCODE:\n```\nBelt.List.forEach2(list{\"Z\", \"Y\"}, list{\"A\", \"B\", \"C\"}, (x, y) => Js.log2(x, y))\n```\n\n----------------------------------------\n\nTITLE: Filtering Map Entries in ReScript (Uncurried)\nDESCRIPTION: Filters a map by keeping only the bindings that satisfy a given predicate function. This is the uncurried version.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reasonml\nCODE:\n```\nlet keepU: (t('k, 'v, 'id), [@bs] (('k, 'v) => bool)) => t('k, 'v, 'id);\n```\n\n----------------------------------------\n\nTITLE: Creating DataView from ArrayBuffer in ReScript\nDESCRIPTION: Provides functions to create a DataView from an ArrayBuffer, with options for specifying offset and length.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_data-view.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet make: Js_typed_array.array_buffer => t;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromBuffer: Js_typed_array.array_buffer => t;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromBufferOffset: (Js_typed_array.array_buffer, int) => t;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromBufferRange: (Js_typed_array.array_buffer, ~offset: int, ~length: int) => t;\n```\n\n----------------------------------------\n\nTITLE: Reducing and checking map properties in ReScript\nDESCRIPTION: Functions for reducing the map and checking if all or some entries satisfy a condition.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-string.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nlet reduceU: (t<'v>, 'v2, (. 'v2, key, 'v) => 'v2) => 'v2\n```\n\nLANGUAGE: res\nCODE:\n```\nlet reduce: (t<'v>, 'v2, ('v2, key, 'v) => 'v2) => 'v2\n```\n\nLANGUAGE: res\nCODE:\n```\nlet everyU: (t<'v>, (. key, 'v) => bool) => bool\n```\n\nLANGUAGE: res\nCODE:\n```\nlet every: (t<'v>, (key, 'v) => bool) => bool\n```\n\nLANGUAGE: res\nCODE:\n```\nlet someU: (t<'v>, (. key, 'v) => bool) => bool\n```\n\nLANGUAGE: res\nCODE:\n```\nlet some: (t<'v>, (key, 'v) => bool) => bool\n```\n\n----------------------------------------\n\nTITLE: Float Division in ReScript\nDESCRIPTION: Divides the first float value by the second. Can be used with module opening to avoid dot notation, though this may cause shadow warnings in default configuration.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/float.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nlet (/): (float, float) => float\n```\n\nLANGUAGE: rescript\nCODE:\n```\nopen Belt.Float\nJs.log(4.0 / 2.0 === 2.0) /* true */\n```\n\n----------------------------------------\n\nTITLE: Zipping Two Arrays with Uncurried Combining Function in ReScript\nDESCRIPTION: The zipByU function combines corresponding elements of two arrays using an uncurried function, stopping with the shorter array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/array.mdx#2025-04-18_snippet_23\n\nLANGUAGE: ReScript\nCODE:\n```\nlet zipByU: (array<'a>, array<'b>, (. 'a, 'b) => 'c) => array<'c>\n```\n\n----------------------------------------\n\nTITLE: Installing ReScript with pnpm\nDESCRIPTION: Command to install ReScript and ReScript Core using pnpm package manager.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/installation.mdx#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm install rescript @rescript/core\n```\n\n----------------------------------------\n\nTITLE: Bind Function Implementation in ReScript\nDESCRIPTION: Function signature and example for mapping contained values in nullable types using a transformation function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/nullable.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet bind: (t<'a>, (. 'a) => 'b) => t<'b>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet maybeGreetWorld = (maybeGreeting: Js.null_undefined<string>) =>\n  Js.Nullable.bind(maybeGreeting, (. greeting) => greeting ++ \" world!\")\n```\n\n----------------------------------------\n\nTITLE: Using random_int function to generate random integer in a range in ReScript\nDESCRIPTION: The random_int function returns a random number in the half-closed interval [minVal, maxVal). It takes minimum and maximum integer values as input and returns an integer within that range.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/math.mdx#2025-04-18_snippet_25\n\nLANGUAGE: res\nCODE:\n```\nlet random_int: (int, int) => int\n```\n\n----------------------------------------\n\nTITLE: String toLowerCase Function in ReScript\nDESCRIPTION: The toLowerCase function converts a string to lowercase using locale-insensitive case mappings. The conversion can give different results depending on context, especially with characters like Greek sigma which has different forms based on position.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/string.mdx#2025-04-18_snippet_18\n\nLANGUAGE: res\nCODE:\n```\nlet toLowerCase: t => t\n```\n\nLANGUAGE: res\nCODE:\n```\nJs.String.toLowerCase(\"ABC\") == \"abc\"\nJs.String.toLowerCase(`ΣΠ`) == `σπ`\nJs.String.toLowerCase(`ΠΣ`) == `πς`\n```\n\n----------------------------------------\n\nTITLE: Promise Race Implementation\nDESCRIPTION: Returns a promise that resolves or rejects as soon as one of the promises in the array resolves or rejects\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/promise.mdx#2025-04-18_snippet_11\n\nLANGUAGE: rescript\nCODE:\n```\nlet race: array<t<'a>> => t<'a>\n```\n\n----------------------------------------\n\nTITLE: Array Iteration Methods\nDESCRIPTION: Higher-order functions for array iteration including map, reduce, filter, and search operations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_int-32-array.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet every: ((. elt) => bool, t) => bool\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet map: ((. elt) => 'b, t) => typed_array<'b>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet filter: ((. elt) => bool, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet find: ((. elt) => bool, t) => Js.undefined<elt>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduce: ((. 'b, elt) => 'b, 'b, t) => 'b\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet forEach: ((. elt) => unit, t) => unit\n```\n\n----------------------------------------\n\nTITLE: JSX Transformation for DOM Elements\nDESCRIPTION: Illustrates how JSX for DOM elements is transformed into ReactDOM.createDOMElementVariadic calls in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/beyond-jsx.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\n<div title=\"test\"/>\n```\n\nLANGUAGE: rescript\nCODE:\n```\n// classic\nReactDOM.createDOMElementVariadic(\"div\", ~props={title: \"test\"}, [])\n\n// automatic\nReactDOM.jsx(\"div\", {title: \"test\"})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nReact.createElement(\"div\", { title: \"test\" });\n```\n\n----------------------------------------\n\nTITLE: Basic Math Operations in ReScript\nDESCRIPTION: Implementation of basic mathematical operations including absolute value for integers and floats.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/math.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\nlet abs_int: int => int\nlet abs_float: float => float\n```\n\n----------------------------------------\n\nTITLE: Splitting Strings by Delimiter in ReScript\nDESCRIPTION: The split function divides a string into an array of substrings based on a specified delimiter. It returns all resulting substrings.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string-2.mdx#2025-04-18_snippet_15\n\nLANGUAGE: reason\nCODE:\n```\nlet split: (t, t) => array(t);\n```\n\nLANGUAGE: reason\nCODE:\n```\nJs.String2.split(\"2018-01-02\", \"-\") == [|\"2018\", \"01\", \"02\"|];\nJs.String2.split(\"a,b,,c\", \",\") == [|\"a\", \"b\", \"\", \"c\"|];\nJs.String2.split(\"good::bad as great::awful\", \"::\") == [|\"good\", \"bad as great\", \"awful\"|];\nJs.String2.split(\"has-no-delimiter\", \";\") == [|\"has-no-delimiter\"|];\n```\n\n----------------------------------------\n\nTITLE: Splitting List at Index in ReScript\nDESCRIPTION: The splitAt function divides a list into two parts at the specified index, returning None if the index is out of bounds.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/list.mdx#2025-04-18_snippet_16\n\nLANGUAGE: rescript\nCODE:\n```\nlet splitAt: (t<'a>, int) => option<(list<'a>, list<'a>)>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlist{\"Hello\", \"World\"}->Belt.List.splitAt(1) // Some((list{\"Hello\"}, list{\"World\"}))\n\nlist{0, 1, 2, 3, 4}->Belt.List.splitAt(2) // Some((list{0, 1}, list{2, 3, 4}))\n```\n\n----------------------------------------\n\nTITLE: Getting Default Value in ReScript\nDESCRIPTION: Function to get the value from an option or return a default value if None.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/option.mdx#2025-04-18_snippet_9\n\nLANGUAGE: reason\nCODE:\n```\nlet getWithDefault: ('a, option('a)) => 'a;\n```\n\nLANGUAGE: reason\nCODE:\n```\nJs.Option.getWithDefault(1066, Some(15)) == 15;\nJs.Option.getWithDefault(1066, None) == 1066;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Maximum Value from Belt.Set in ReScript\nDESCRIPTION: The 'maximum' function returns the maximum value of the collection. It returns 'None' if the collection is empty. A usage example is provided.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/set.mdx#2025-04-18_snippet_16\n\nLANGUAGE: rescript\nCODE:\n```\nlet s0 = Belt.Set.make(~id=module(IntCmp))\nlet s1 = Belt.Set.fromArray([3,2,1,5], ~id=module(IntCmp))\n\ns0->Belt.Set.maximum /* None */\ns1->Belt.Set.maximum /* Some(5) */\n```\n\n----------------------------------------\n\nTITLE: Complex JSON Parsing Example\nDESCRIPTION: Example demonstrating parsing of a complex JSON object with nested arrays\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/json.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet getIds = s => {\n  let json = try Js.Json.parseExn(s) catch {\n  | _ => failwith(\"Error parsing JSON string\")\n  }\n\n  switch Js.Json.classify(json) {\n  | Js.Json.JSONObject(value) =>\n    switch Js.Dict.get(value, \"ids\") {\n    | Some(ids) =>\n      switch Js.Json.classify(ids) {\n      | Js.Json.JSONArray(ids) =>\n        ids\n      | _ => failwith(\"Expected an array\")\n      }\n    | None => failwith(\"Expected an `ids` property\")\n    }\n  | _ => failwith(\"Expected an object\")\n  }\n}\n\nJs.log(getIds(` { \"ids\" : [1, 2, 3 ] } `))\n```\n\n----------------------------------------\n\nTITLE: Array Iteration Operations\nDESCRIPTION: Higher-order functions for iterating, mapping, filtering and reducing arrays\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_float-64-array.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet forEach: ((. elt) => unit, t) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet map: ((. elt) => 'b, t) => typed_array<'b>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet filter: ((. elt) => bool, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduce: ((. 'b, elt) => 'b, 'b, t) => 'b\n```\n\n----------------------------------------\n\nTITLE: Adding Elements to a MutableSet in ReScript\nDESCRIPTION: This example shows how to add elements to a MutableSet using the add function. It demonstrates that adding duplicate elements does not change the set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_4\n\nLANGUAGE: ReScript\nCODE:\n```\nmodule IntCmp = Belt.Id.MakeComparable({\n  type t = int\n  let cmp = Pervasives.compare\n})\n\nlet s0 = Belt.MutableSet.make(~id=module(IntCmp))\ns0->Belt.MutableSet.add(1)\ns0->Belt.MutableSet.add(2)\ns0->Belt.MutableSet.add(2)\n\ns0->Belt.MutableSet.toArray /* [1, 2] */\n```\n\n----------------------------------------\n\nTITLE: Let Binding Shadowing in ReScript\nDESCRIPTION: Shows how to use binding shadowing for sequential calculations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/let-binding.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\nlet result = \"hello\"\nJs.log(result) // prints \"hello\"\nlet result = 1\nJs.log(result) // prints 1\n```\n\nLANGUAGE: js\nCODE:\n```\nvar result = 1;\nconsole.log(\"hello\");\nconsole.log(1);\n```\n\n----------------------------------------\n\nTITLE: Declaring String Literals in ReScript\nDESCRIPTION: Demonstrates how to declare single-line and multi-line string literals in ReScript. It shows string concatenation using the '++' operator and the syntax for multi-line strings.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/language_string_literal.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\nlet myString = \"Single line \" ++ \"string!\"\nlet myMultiLineString = \"Multi\n line\n string!\"\n```\n\n----------------------------------------\n\nTITLE: Creating Arrays Using Function in ReScript\nDESCRIPTION: Creates an array of specified size populated by applying a function to each index. Returns an empty array when size is negative.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/array.mdx#2025-04-18_snippet_19\n\nLANGUAGE: reason\nCODE:\n```\nlet makeBy: (int, int => 'a) => array('a);\n```\n\nLANGUAGE: reason\nCODE:\n```\nBelt.Array.makeBy(5, (i) => i) == [|0, 1, 2, 3, 4|];\n\nBelt.Array.makeBy(5, (i) => i * i) == [|0, 1, 4, 9, 16|];\n```\n\n----------------------------------------\n\nTITLE: Creating a JavaScript Object in ReScript\nDESCRIPTION: Demonstrates how to create a JavaScript object directly in ReScript using object literal syntax with quoted field names.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/newcomer-examples.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nlet student1 = {\n  \"name\": \"John\",\n  \"age\": 30,\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar student1 = {\n  name: \"John\",\n  age: 30,\n};\n```\n\n----------------------------------------\n\nTITLE: Copying Arrays in ReScript\nDESCRIPTION: Returns a fresh copy of an array containing the same elements as the original array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/array.mdx#2025-04-18_snippet_30\n\nLANGUAGE: reason\nCODE:\n```\nlet copy: array('a) => array('a);\n```\n\n----------------------------------------\n\nTITLE: Concatenating Strings with ++ Operator in ReScript\nDESCRIPTION: Shows how to join two strings together using ReScript's ++ operator. The example demonstrates concatenating \"Hello \" with \"world!\" to create a greeting message. The JavaScript output shows the equivalent concatenated string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/operators_string_concatenation.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nlet greetings = \"Hello \" ++ \"world!\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar greetings = \"Hello world!\";\n```\n\n----------------------------------------\n\nTITLE: Converting map to list in MapString module (ReScript)\nDESCRIPTION: Function to convert a map to a list of key-value pairs in increasing key order.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-string.mdx#2025-04-18_snippet_20\n\nLANGUAGE: reason\nCODE:\n```\nlet toList: t('v) => list((key, 'v));\n```\n\n----------------------------------------\n\nTITLE: Using Placeholder for Ignoring Values in Pattern Matching (ReScript)\nDESCRIPTION: Demonstrates how the placeholder (_) can be used in switch statements to ignore specific parts of matched values. In this example, it's used to match Teacher and Student variants without binding their contained values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/language_placeholder.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\nswitch person1 {\n| Teacher(_) => Console.log(\"Hi teacher\")\n| Student(_) => Console.log(\"Hey student\")\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nif (person1.TAG === \"Teacher\") {\n  console.log(\"Hi teacher\");\n} else {\n  console.log(\"Hey student\");\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Uninitialized Array in ReScript\nDESCRIPTION: The makeUninitialized function creates an array of the specified length filled with the undefined value, requiring explicit type annotation for the eventual content type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/array.mdx#2025-04-18_snippet_13\n\nLANGUAGE: ReScript\nCODE:\n```\nlet makeUninitialized: int => array<Js.undefined<'a>>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet arr: array<Js.undefined<string>> = Belt.Array.makeUninitialized(5)\n\nBelt.Array.getExn(arr, 0) == Js.undefined\n```\n\n----------------------------------------\n\nTITLE: Creating Record Instances in ReScript\nDESCRIPTION: Creates a record value that matches the previously defined 'person' type. When creating a record, ReScript infers its type by matching its shape with declared record types.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/record.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\nlet me = {\n  age: 5,\n  name: \"Big ReScript\"\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar me = {\n  age: 5,\n  name: \"Big ReScript\"\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Objects in ReScript\nDESCRIPTION: Shows how to create a new object in ReScript. The type is inferred from the value, allowing for more flexibility compared to records.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/object.mdx#2025-04-18_snippet_1\n\nLANGUAGE: ReScript\nCODE:\n```\nlet me = {\n  \"age\": 5,\n  \"name\": \"Big ReScript\"\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar me = {\n  \"age\": 5,\n  \"name\": \"Big ReScript\"\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Component Types in ReScript\nDESCRIPTION: Examples of defining custom component types in ReScript, including plain function types and the React.component shorthand.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/beyond-jsx.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\n// Plain function type\ntype friend = {name: string, online: bool}\ntype friendComp = friend => React.element\n\n// Equivalent to\n// ({padding: string, children: React.element}) => React.element\ntype props = {padding: string, children: React.element}\ntype containerComp = React.component<props>\n```\n\n----------------------------------------\n\nTITLE: Array Access Operations\nDESCRIPTION: Basic array access operations including unsafe get/set operations and buffer access functions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_uint-32-array.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reason\nCODE:\n```\nlet unsafe_get: (t, int) => elt;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet unsafe_set: (t, int, elt) => unit;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet buffer: t => Js_typed_array2.array_buffer;\n```\n\n----------------------------------------\n\nTITLE: ReScript Promise Resolution\nDESCRIPTION: Function signature for creating a resolved Promise with a value\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/promise.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\nlet resolve: 'a => t<'a>\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Access to ReScript Core\nDESCRIPTION: JSON diff showing how to make ReScript Core available in the global scope by adding the -open RescriptCore flag to the bsc-flags configuration in rescript.json.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/migrate-to-v11.mdx#2025-04-18_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n {\n   \"bsc-flags\": [\n+    \"-open RescriptCore\",\n   ]\n }\n```\n\n----------------------------------------\n\nTITLE: Using Unboxed Variants for Heterogeneous Arrays\nDESCRIPTION: Demonstration of unboxed variants using the @unboxed attribute to represent heterogeneous arrays without boxing overhead, mapping each variant case directly to its payload value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2023-04-17-improving-interop.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\n@unboxed type listItemValue = String(string) | Boolean(bool) | Number(float)\n\nlet myArray = [String(\"Hello\"), Boolean(true), Boolean(false), Number(13.37)]\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar myArray = [\"hello\", true, false, 13.37];\n```\n\n----------------------------------------\n\nTITLE: Converting Int to Float in ReScript\nDESCRIPTION: Converts an integer value to a float. This provides type safety when working with numeric operations that require floats.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/float.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromInt: int => float\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.log(Belt.Float.fromInt(1) === 1.0) /* true */\n```\n\n----------------------------------------\n\nTITLE: Updating JavaScript Objects in ReScript\nDESCRIPTION: Shows how to update properties of a JavaScript object binding in ReScript using the @set attribute and bracket notation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/object.mdx#2025-04-18_snippet_4\n\nLANGUAGE: ReScript\nCODE:\n```\ntype student = {\n  @set \"age\": int,\n  @set \"name\": string,\n}\n@module(\"MyJSFile\") external student1: student = \"student1\"\n\nstudent1[\"name\"] = \"Mary\"\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar MyJSFile = require(\"MyJSFile\");\nMyJSFile.student1.name = \"Mary\";\n```\n\n----------------------------------------\n\nTITLE: Map Array Elements\nDESCRIPTION: Creates a new typed array with the results of calling a provided function on every element in the array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_type-s.mdx#2025-04-18_snippet_42\n\nLANGUAGE: res\nCODE:\n```\nlet map: ((. elt) => 'b, t) => typed_array<'b>\n```\n\n----------------------------------------\n\nTITLE: Example: Using Global Flag in ReScript RegExp\nDESCRIPTION: Shows how to use the global flag and lastIndex property to find multiple matches in a string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/re.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet re = %re(\"/ab*/g\")\nlet str = \"abbcdefabh\"\n\nlet break = ref(false)\nwhile !break.contents {\n  switch Js.Re.exec_(re, str) {\n  | Some(result) => Js.Nullable.iter(Js.Re.captures(result)[0], (. match_) => {\n      let next = Belt.Int.toString(Js.Re.lastIndex(re))\n      Js.log(\"Found \" ++ (match_ ++ (\". Next match starts at \" ++ next)))\n    })\n  | None => break := true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Prop Passing for Theming in ReScript React\nDESCRIPTION: Demonstrates a traditional approach where a theme prop is passed down through multiple component levels. This example shows the verbose nature of prop drilling from the App component through Toolbar and ThemedButton to Button.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/context.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\n// src/App.res\ntype theme = Light | Dark;\n\nmodule Button = {\n  @react.component\n  let make = (~theme) => {\n    let className = switch theme {\n      | Light => \"theme-light\"\n      | Dark => \"theme-black\"\n    };\n    <button className> {React.string(\"Click me\")} </button>\n  }\n}\n\nmodule ThemedButton = {\n  @react.component\n  let make = (~theme) => {\n    <Button theme />\n  }\n}\n\nmodule Toolbar = {\n  @react.component\n  let make = (~theme) => {\n    <div>\n      <ThemedButton theme/>\n    </div>\n  }\n}\n\n@react.component\nlet make = () => {\n  // We define the theme in the\n  // toplevel App component and\n  // pass it down\n  <Toolbar theme=Dark/>\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Button(props) {\n  var className = props.theme ? \"theme-black\" : \"theme-light\";\n  return React.createElement(\"button\", {\n              className: className\n            }, \"Click me\");\n}\n\nfunction ThemedButton(props) {\n  return React.createElement(App$Button, {\n              theme: props.theme\n            });\n}\n\nfunction Toolbar(props) {\n  return React.createElement(\"div\", undefined, React.createElement(App$ThemedButton, {\n                  theme: props.theme\n                }));\n}\n\nfunction App(props) {\n  return React.createElement(App$Toolbar, {\n              theme: /* Dark */1\n            });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ReScript Build Output with bsconfig.json\nDESCRIPTION: Configuration example showing how to set up ReScript to generate JavaScript files alongside source files using CommonJS modules and a .bs.js suffix. This makes the generated files more compatible with existing JS tooling.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/interop-with-js-build-systems.mdx#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"package-specs\": {\n    \"module\": \"commonjs\",\n    \"in-source\": true\n  },\n  \"suffix\": \".bs.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Imported date-fns Function in ReScript\nDESCRIPTION: Demonstrates how to use the imported formatString function from date-fns in ReScript code and shows the corresponding JavaScript output after compilation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2025-03-05-what-can-i-do-with-rescript.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet formattedDate = DateFns.formatString(~date=\"2021-09-01\", ~formatStr=\"MMMM dd, yyyy\")\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as DateFns from \"date-fns\";\n\nvar formattedDate = DateFns.format(\"2021-09-01\", \"MMMM dd, yyyy\");\n```\n\n----------------------------------------\n\nTITLE: Converting Option to Undefined in ReScript\nDESCRIPTION: Maps option('a) to Js.undefined('a). Some(a) becomes a, and None becomes empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/undefined.mdx#2025-04-18_snippet_9\n\nLANGUAGE: reasonml\nCODE:\n```\nlet fromOption: option('a) => t('a);\n```\n\n----------------------------------------\n\nTITLE: Converting HashMap to Array in ReScript\nDESCRIPTION: Functions to convert the hash map to arrays of key-value pairs, keys, or values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-map-int.mdx#2025-04-18_snippet_12\n\nLANGUAGE: rescript\nCODE:\n```\nlet toArray: t<'a> => array<(key, 'a)>\n\nlet keysToArray: t<'a> => array<key>\n\nlet valuesToArray: t<'a> => array<'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet hMap = Belt.HashMap.Int.make(~hintSize=10)\nBelt.HashMap.Int.set(hMap, 1, \"value1\")\nBelt.HashMap.Int.set(hMap, 2, \"value2\")\n\nBelt.HashMap.Int.toArray(hMap) == [(1, \"value1\"), (2, \"value2\")]\nBelt.HashMap.Int.keysToArray(hMap) == [1, 2]\nBelt.HashMap.Int.valuesToArray(hMap) == [\"value1\", \"value2\"]\n```\n\n----------------------------------------\n\nTITLE: Advanced Type Annotations in ReScript\nDESCRIPTION: Shows various ways to annotate types for expressions, functions, and labeled arguments in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/type.mdx#2025-04-18_snippet_2\n\nLANGUAGE: ReScript\nCODE:\n```\nlet myInt = 5\nlet myInt: int = 5\nlet myInt = (5: int) + (4: int)\nlet add = (x: int, y: int) : int => x + y\nlet drawCircle = (~radius as r: int): circleType => /* code here */\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar myInt = 9;\nfunction add(x, y) {\n  return x + y | 0;\n}\nfunction drawCircle(r) {\n  /* code here */\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TypedArray Types in ReScript\nDESCRIPTION: Core type definitions for the TypedArray module, establishing the element type, generic typed array type, and concrete instance type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_type-s.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\ntype elt\ntype typed_array<'a>\ntype t = typed_array<elt>\n```\n\n----------------------------------------\n\nTITLE: Implementing FriendListItem Component Using Custom Hook in ReScript\nDESCRIPTION: A React component that displays a friend's name with a color indicating their online status. It uses the FriendStatusHook.useFriendStatus custom hook to determine the appropriate color based on the friend's online state.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/hooks-custom.mdx#2025-04-18_snippet_4\n\nLANGUAGE: ReScript\nCODE:\n```\n// FriendListItem.res\n@react.component\nlet make = (~friend: friend) => {\n  let onlineState = FriendStatusHook.useFriendStatus(friend.id)\n\n  let color = switch(onlineState) {\n    | Offline => \"red\"\n    | Online => \"green\"\n    | Loading => \"grey\"\n  }\n\n  <li style={ReactDOMStyle.make(~color,())}>\n      {React.string(friend.name)}\n  </li>\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction FriendListItem(Props) {\n  var friend = Props.friend;\n  var onlineState = useFriendStatus(friend.id);\n  var color;\n  switch (onlineState) {\n    case /* Offline */0 :\n        color = \"red\";\n        break;\n    case /* Loading */1 :\n        color = \"grey\";\n        break;\n    case /* Online */2 :\n        color = \"green\";\n        break;\n\n  }\n  return React.createElement(\"li\", {\n              style: {\n                color: color\n              }\n            }, friend.name);\n}\n```\n\n----------------------------------------\n\nTITLE: Private Let Bindings with Module Signature in ReScript\nDESCRIPTION: Demonstrates how to create private bindings by providing a separate signature to list public fields and their types. This traditional approach requires explicitly defining the module interface.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/let-binding.mdx#2025-04-18_snippet_6\n\nLANGUAGE: res\nCODE:\n```\nmodule A: {\n  let b: int\n} = {\n  let a = 3\n  let b = 4\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Type Escape Hatch in ReScript\nDESCRIPTION: Demonstrates the application of a type escape hatch to convert between types in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/type.mdx#2025-04-18_snippet_11\n\nLANGUAGE: ReScript\nCODE:\n```\nexternal convertToFloat : int => float = \"%identity\"\nlet age = 10\nlet gpa = 2.1 +. convertToFloat(age)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar age = 10;\nvar gpa = 2.1 + 10;\n```\n\n----------------------------------------\n\nTITLE: Vector Push Back Operation\nDESCRIPTION: Adds an element to the end of a vector.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/vector.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\nlet pushBack: ('a, t<'a>) => unit\n```\n\n----------------------------------------\n\nTITLE: Mapping Array Elements in ReScript\nDESCRIPTION: Creates new array with results of calling provided function on every element.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array-2.mdx#2025-04-18_snippet_33\n\nLANGUAGE: res\nCODE:\n```\nJs.Array2.map([12, 4, 8], x => x * x) == [144, 16, 64]\nJs.Array2.map([\"animal\", \"vegetable\", \"mineral\"], Js.String.length) == [6, 9, 7]\n```\n\n----------------------------------------\n\nTITLE: Accessing RegExp Properties in ReScript\nDESCRIPTION: Functions to access various properties of a RegExp object, such as flags, global setting, case sensitivity, and more.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/re.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet flags: t => string\n\nlet global: t => bool\n\nlet ignoreCase: t => bool\n\nlet lastIndex: t => int\n\nlet setLastIndex: (t, int) => unit\n\nlet multiline: t => bool\n\nlet source: t => string\n\nlet sticky: t => bool\n\nlet unicode: t => bool\n```\n\n----------------------------------------\n\nTITLE: Checking if HashMap is Empty in ReScript\nDESCRIPTION: Checks if a hash map is empty using Belt.HashMap.String.isEmpty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-map-string.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet isEmpty: t<'a> => bool\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet hMap = Belt.HashMap.String.fromArray([(\"1\", \"1\")])\nBelt.HashMap.String.isEmpty(hMap) == false\n```\n\n----------------------------------------\n\nTITLE: Getting Array Length in ReScript\nDESCRIPTION: Returns the size of the array. Equivalent to Belt_Array.length.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/array.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\nlet length: array<'a> => int\n```\n\nLANGUAGE: ReScript\nCODE:\n```\n// Returns 1\nBelt.Array.length([\"test\"])\n```\n\n----------------------------------------\n\nTITLE: Comparing Option Values in ReScript\nDESCRIPTION: Function signature and examples for comparing two Option values using a custom equality function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/option.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet equal: ((. 'a, 'b) => bool, option<'a>, option<'b>) => bool\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet clockEqual = (. a, b) => mod(a, 12) == mod(b, 12)\nJs.Option.equal(clockEqual, Some(3), Some(15)) == true\nJs.Option.equal(clockEqual, Some(3), Some(16)) == false\nJs.Option.equal(clockEqual, Some(3), None) == false\nJs.Option.equal(clockEqual, None, Some(15)) == false\nJs.Option.equal(clockEqual, None, None) == true\n```\n\n----------------------------------------\n\nTITLE: Extending DOM Props for Custom Components in ReScript\nDESCRIPTION: Demonstrates how to extend the built-in DOM properties using the spread operator with JsxDOM.domProps. This allows components to accept all standard DOM properties in addition to custom props.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/import-export-reactjs.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nmodule Foo = {\n  type fooProps = {\n    ...JsxDOM.domProps,\n    customProp: string,\n  }\n\n  @module(\"foo\") @react.component(: fooProps)\n  external make: fooProps => React.element = \"default\"\n}\n\n@react.component\nlet make = () => {\n  <Foo width={\"300px\"} height={\"300px\"} customProp=\"bar\" />\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nimport Foo from \"foo\";\nimport * as JsxRuntime from \"react/jsx-runtime\";\n\nvar Foo$1 = {};\n\nfunction Playground(props) {\n  return JsxRuntime.jsx(Foo, {\n              height: \"300px\",\n              width: \"300px\",\n              customProp: \"bar\"\n            });\n}\n```\n\n----------------------------------------\n\nTITLE: Using somei with Arrays in ReScript\nDESCRIPTION: Demonstrates the somei function that tests whether at least one element in the array passes the provided predicate function, which also receives the element's index. Returns true if any element satisfies the condition.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/array-2.mdx#2025-04-18_snippet_28\n\nLANGUAGE: res\nCODE:\n```\nlet somei: (t<'a>, ('a, int) => bool) => bool\n```\n\nLANGUAGE: res\nCODE:\n```\n// Does any string in the array\n// have the same length as its index?\n\nlet sameLength = (str, index) => Js.String.length(str) == index\n\n// \"ef\" has length 2 and is it at index 2\nJs.Array2.somei([\"ab\", \"cd\", \"ef\", \"gh\"], sameLength) == true\n// no item has the same length as its index\nJs.Array2.somei([\"a\", \"bc\", \"def\", \"gh\"], sameLength) == false\n```\n\n----------------------------------------\n\nTITLE: Importing an ES6 Default Export in ReScript\nDESCRIPTION: Demonstrates how to import a JavaScript module's default export by using \"default\" as the binding name in the external declaration.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/import-from-export-to-js.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\n@module(\"./student\") external studentName: string = \"default\"\nJs.log(studentName)\n```\n\nLANGUAGE: js\nCODE:\n```\nimport Student from \"./student\";\nvar studentName = Student;\n```\n\n----------------------------------------\n\nTITLE: Using Pipe First Syntax with Abstract Types\nDESCRIPTION: Demonstrates the alternative pipe-first syntax for updating mutable fields in abstract types.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/generate-converters-accessors.mdx#2025-04-18_snippet_16\n\nLANGUAGE: rescript\nCODE:\n```\njoe->ageSet(21)\n```\n\n----------------------------------------\n\nTITLE: Disabling Object Creation with private Annotation\nDESCRIPTION: Shows how to use the private annotation to disable the creation function while keeping accessors available, useful for binding to existing JS objects.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/generate-converters-accessors.mdx#2025-04-18_snippet_21\n\nLANGUAGE: ReScript\nCODE:\n```\n@deriving(abstract)\ntype cord = private {\n  @optional x: int,\n  y: int,\n}\n```\n\n----------------------------------------\n\nTITLE: Right Fold on Vector in ReScript\nDESCRIPTION: Applies a function to each element of a vector from right to left, accumulating a result.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/vector.mdx#2025-04-18_snippet_12\n\nLANGUAGE: ReScript\nCODE:\n```\nlet foldRight: ((. 'b, 'a) => 'a, t('b), 'a) => 'a;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Captured Groups from RegExp Match\nDESCRIPTION: Function that returns an array of the match and captures from a RegExp result. The first element is the full match, and remaining elements are captured groups.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/re.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\nlet captures: result => array(Js.nullable(string));\n```\n\n----------------------------------------\n\nTITLE: Partitioning Elements in Belt.MutableSet using partition in ReScript\nDESCRIPTION: The partition function splits the set into two sets based on a predicate function. It returns a tuple of two sets: one containing elements that satisfy the predicate, and another with elements that don't.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_7\n\nLANGUAGE: ReScript\nCODE:\n```\nlet partitionU: (t<'value, 'id>, (. 'value) => bool) => (t<'value, 'id>, t<'value, 'id>)\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet partition: (t<'value, 'id>, 'value => bool) => (t<'value, 'id>, t<'value, 'id>)\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nmodule IntCmp = Belt.Id.MakeComparable({\n  type t = int\n  let cmp = Pervasives.compare\n})\n\nlet isOdd = x => mod(x, 2) != 0\n\nlet s0 = Belt.MutableSet.fromArray([1, 2, 3, 4, 5], ~id=module(IntCmp))\nlet (s1, s2) = s0->Belt.MutableSet.partition(isOdd)\n\ns1->Belt.MutableSet.toArray /* [1,3,5] */\ns2->Belt.MutableSet.toArray /* [2,4] */\n```\n\n----------------------------------------\n\nTITLE: Setting Storage Item in ReScript\nDESCRIPTION: External binding to set a storage item with given key and value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/dom/storage2.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nexternal setItem: (t, string, string) => unit = \"setItem\"\n```\n\n----------------------------------------\n\nTITLE: Declaring and Using Labeled Arguments in ReScript\nDESCRIPTION: This snippet demonstrates how to declare a function with labeled arguments in ReScript and how to call it. The function calculates the distance between two points using labeled arguments for x and y coordinates.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/language_labeled_argument.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nlet calculateDistance = (~x1, ~y1, ~x2, ~y2) => {\n  Math.sqrt((x1 -. x2) ** 2. +. (y1 -. y2) ** 2.)\n}\n\ncalculateDistance(~x1=6., ~y1=8., ~x2=3., ~y2=4.)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction calculateDistance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));\n}\n\ncalculateDistance(6, 8, 3, 4);\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Elements to MutableSet Example in ReasonML\nDESCRIPTION: Example showing how to add multiple elements to a MutableSet using the mergeMany function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_17\n\nLANGUAGE: reasonml\nCODE:\n```\nmodule IntCmp =\n  Belt.Id.MakeComparable({\n    type t = int;\n    let cmp = Pervasives.compare;\n  });\n\nlet set = Belt.MutableSet.make(~id=(module IntCmp));\n\nset->Belt.MutableSet.mergeMany([|5, 4, 3, 2, 1|]);\nset->Belt.MutableSet.toArray; /* [|1, 2, 3, 4, 5|] */\n```\n\n----------------------------------------\n\nTITLE: String Case Conversion in ReScript\nDESCRIPTION: Methods for converting string case (upper/lower) with locale support.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/string.mdx#2025-04-18_snippet_12\n\nLANGUAGE: res\nCODE:\n```\nlet toLowerCase: t => t\nlet toUpperCase: t => t\n```\n\nLANGUAGE: res\nCODE:\n```\nJs.String.toLowerCase(\"ABC\") == \"abc\"\nJs.String.toLowerCase(`ΣΠ`) == `σπ`\nJs.String.toLowerCase(`ΠΣ`) == `πς`\n\nJs.String.toUpperCase(\"abc\") == \"ABC\"\nJs.String.toUpperCase(`Straße`) == `STRASSE`\nJs.String.toUpperCase(`πς`) == `ΠΣ`\n```\n\n----------------------------------------\n\nTITLE: Comparison Functions for Nullable Types in ReScript\nDESCRIPTION: Functions for comparing values with null, undefined, or nullable values in ReScript. These provide type-safe comparisons for JavaScript's special values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nlet eqNull: ('a, null<'a>) => bool\nlet eqUndefined: ('a, undefined<'a>) => bool\nlet eqNullable: ('a, nullable<'a>) => bool\n```\n\n----------------------------------------\n\nTITLE: Using makeWithYMDHMS Function in ReScript\nDESCRIPTION: Demonstrates the use of the makeWithYMDHMS function to create a Date object matching the example date.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_13\n\nLANGUAGE: rescript\nCODE:\n```\nJs.Date.makeWithYMDHMS(\n  ~year=1973.0,\n  ~month=11.0,\n  ~date=29.0,\n  ~hours=21.0,\n  ~minutes=30.0,\n  ~seconds=54.321,\n  (),\n) == exampleDate\n```\n\n----------------------------------------\n\nTITLE: Extract Slice from Position\nDESCRIPTION: Returns a new typed array containing all elements from the starting position to the end.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_type-s.mdx#2025-04-18_snippet_27\n\nLANGUAGE: res\nCODE:\n```\nlet sliceFrom: (int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Compiling Nested Option to JavaScript\nDESCRIPTION: Shows how ReScript handles nested Option types when compiling to JavaScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/null-undefined-option.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nlet x = Some(Some(Some(5)))\n```\n\nLANGUAGE: js\nCODE:\n```\nvar x = 5;\n```\n\nLANGUAGE: res\nCODE:\n```\nlet x = Some(None)\n```\n\nLANGUAGE: js\nCODE:\n```\nvar Caml_option = require(\"./stdlib/caml_option.js\");\n\nvar x = Caml_option.some(undefined);\n```\n\n----------------------------------------\n\nTITLE: Setting Seconds in ReScript\nDESCRIPTION: Sets a Date's seconds according to current time zone. Returns milliseconds since epoch for the updated Date. Modifies the original Date.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_52\n\nLANGUAGE: rescript\nCODE:\n```\nlet setSeconds: (t, float) => float\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet futureTime = Js.Date.setSeconds(date1, 56.0)\ndate1 == Js.Date.fromString(\"1973-12-29T21:30:56.321Z00:00\")\nfutureTime == Js.Date.getTime(date1)\n```\n\n----------------------------------------\n\nTITLE: Finding an Element's Index with Position-Based Predicate in ReScript\nDESCRIPTION: Returns the index of the first element that satisfies the provided testing function, or -1 if no elements satisfy the test. The predicate function takes both the array element and its index as parameters.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/array.mdx#2025-04-18_snippet_17\n\nLANGUAGE: rescript\nCODE:\n```\nlet findIndexi: (('a, int) => bool, t<'a>) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\n// find index of first positive item at an odd index\nlet positiveOddElement = (item, index) => mod(index, 2) == 1 && item > 0\n\nJs.Array.findIndexi(positiveOddElement, [66, -33, 55, 88, 22]) == 3\nJs.Array.findIndexi(positiveOddElement, [66, -33, 55, -88, 22]) == -1\n```\n\n----------------------------------------\n\nTITLE: Creating Set from Array in ReScript MutableSetString\nDESCRIPTION: Creates a new set from an array of string elements, automatically sorting them in the process.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reason\nCODE:\n```\nlet fromArray: array(value) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet s0 = Belt.MutableSet.String.fromArray([|\"apple\", \"orange\", \"banana\"|])\n\ns0->Belt.MutableSet.String.toArray; /* [|\"apple\", \"banana\", \"orange\"|] */\n```\n\n----------------------------------------\n\nTITLE: Iterate Over Elements with Index\nDESCRIPTION: Executes a provided function once for each element in the typed array, with the element index as an additional parameter.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_type-s.mdx#2025-04-18_snippet_41\n\nLANGUAGE: res\nCODE:\n```\nlet forEachi: ((. elt, int) => unit, t) => unit\n```\n\n----------------------------------------\n\nTITLE: JavaScript Output for Catch-all Constructor Pattern\nDESCRIPTION: Shows the compiled JavaScript output for the catch-all constructor pattern using unboxed variants. This demonstrates how ReScript efficiently compiles pattern matching on unboxed variants to optimized JavaScript code.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/variant.mdx#2025-04-18_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nfunction greetAnimal(animal) {\n  if (!(animal === \"Cat\" || animal === \"Dog\" || animal === \"Bird\")) {\n    return \"I don't know how to greet animal \" + animal;\n  }\n  switch (animal) {\n    case \"Dog\" :\n        return \"Wof\";\n    case \"Cat\" :\n        return \"Meow\";\n    case \"Bird\" :\n        return \"Kashiiin\";\n    \n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modeling Polymorphic Functions with Multiple Bindings\nDESCRIPTION: Demonstrates how to handle overloaded JavaScript functions by creating multiple external bindings with different type signatures that all map to the same JavaScript function name.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/bind-to-js-function.mdx#2025-04-18_snippet_6\n\nLANGUAGE: res\nCODE:\n```\n@module(\"MyGame\") external drawCat: unit => unit = \"draw\"\n@module(\"MyGame\") external drawDog: (~giveName: string) => unit = \"draw\"\n@module(\"MyGame\") external draw: (string, ~useRandomAnimal: bool) => unit = \"draw\"\n```\n\nLANGUAGE: js\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Using Intermediate Variables in ReScript\nDESCRIPTION: Shows how to use intermediate variables for calculations instead of mutating the same variable. This approach is more aligned with ReScript's immutability principle.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/let-binding.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\nlet result1 = 0\nlet result2 = calculate(result1)\nlet result3 = calculateSomeMore(result2)\n```\n\nLANGUAGE: js\nCODE:\n```\nvar result1 = 0;\nvar result2 = calculate(0);\nvar result3 = calculateSomeMore(result2);\n```\n\n----------------------------------------\n\nTITLE: Implementing Ceiling Functions in ReScript\nDESCRIPTION: Defines various ceiling functions with different return types and safety levels, corresponding to JavaScript's Math.ceil function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/math.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ReScript\nCODE:\n```\nlet unsafe_ceil_int: float => int\nlet unsafe_ceil: float => int\nlet ceil_int: float => int\nlet ceil: float => int\nlet ceil_float: float => float\n```\n\n----------------------------------------\n\nTITLE: Defining a Recursive Function in ReScript\nDESCRIPTION: Demonstrates how to create a recursive function using the 'rec' keyword. The example shows a simple function that never terminates.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/function.mdx#2025-04-18_snippet_5\n\nLANGUAGE: reason\nCODE:\n```\nlet rec neverTerminate = () => neverTerminate()\n```\n\nLANGUAGE: ml\nCODE:\n```\nlet rec neverTerminate () = neverTerminate ()\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction neverTerminate(_param) {\n  while(true) {\n    _param = undefined;\n    continue ;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Using minMany_float function to find minimum in array of floats in ReScript\nDESCRIPTION: The minMany_float function returns the minimum of the floating point values in the given array. It takes an array of floats as input and returns a float.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/math.mdx#2025-04-18_snippet_21\n\nLANGUAGE: res\nCODE:\n```\nlet minMany_float: array<float> => float\n```\n\n----------------------------------------\n\nTITLE: Shorthand Ref Assignment in ReScript\nDESCRIPTION: Shows the syntax sugar for ref assignment using the := operator. This is the preferred way to update ref values in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/mutation.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reason\nCODE:\n```\nmyValue := 6;\n```\n\nLANGUAGE: ml\nCODE:\n```\nmyValue := 6\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmyValue.contents = 6;\n```\n\n----------------------------------------\n\nTITLE: Converting MapDict to list in ReScript\nDESCRIPTION: Function to convert a MapDict to a list of key-value pairs in increasing order.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_11\n\nLANGUAGE: ReScript\nCODE:\n```\nlet toList: t<'k, 'a, 'id> => list<('k, 'a)>\n```\n\n----------------------------------------\n\nTITLE: Vector Map Operation\nDESCRIPTION: Maps vector elements using a transformation function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/vector.mdx#2025-04-18_snippet_9\n\nLANGUAGE: res\nCODE:\n```\nlet map: ((. 'a) => 'b, t<'a>) => t<'b>\n```\n\n----------------------------------------\n\nTITLE: Partitioning List Elements in ReScript\nDESCRIPTION: Splits a list into two lists based on a predicate function, separating elements that satisfy the condition from those that don't.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/list.mdx#2025-04-18_snippet_12\n\nLANGUAGE: res\nCODE:\n```\nBelt.List.partition(list{1, 2, 3, 4}, x => x > 2)\n```\n\n----------------------------------------\n\nTITLE: Array Predicates in ReScript\nDESCRIPTION: The some and every functions check if some or all elements of an array satisfy a given predicate.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/array.mdx#2025-04-18_snippet_37\n\nLANGUAGE: reason\nCODE:\n```\nlet some: (array('a), 'a => bool) => bool;\nlet every: (array('a), 'a => bool) => bool;\n```\n\nLANGUAGE: reason\nCODE:\n```\nBelt.Array.some([|2, 3, 4|], (x) => x mod 2 == 1) == true;\n\nBelt.Array.some([|(-1), (-3), (-5)|], (x) => x > 0) == false;\n\nBelt.Array.every([|1, 3, 5|], (x) => x mod 2 == 1) == true;\n\nBelt.Array.every([|1, (-3), 5|], (x) => x > 0) == false;\n```\n\n----------------------------------------\n\nTITLE: Improved Coordinate System using Unboxed Variants for Type Safety\nDESCRIPTION: Shows how to use unboxed variants to create distinct local and world coordinate types, preventing type errors while maintaining optimal JavaScript output without wrapper objects.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/unboxed.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\ntype coordinates = {x: float, y: float}\n@unboxed type localCoordinates = Local(coordinates)\n@unboxed type worldCoordinates = World(coordinates)\n\nlet renderDot = (World(coordinates)) => {\n  Js.log3(\"Pretend to draw at:\", coordinates.x, coordinates.y)\n}\n\nlet toWorldCoordinates = (Local(coordinates)) => {\n  World({\n    x: coordinates.x +. 10.,\n    y: coordinates.x +. 20.,\n  })\n}\n\nlet playerLocalCoordinates = Local({x: 20.5, y: 30.5})\n\n// This now errors!\n// renderDot(playerLocalCoordinates)\n// We're forced to do this instead:\nrenderDot(playerLocalCoordinates->toWorldCoordinates)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction renderDot(coordinates) {\n  console.log(\"Pretend to draw at:\", coordinates.x, coordinates.y);\n}\n\nfunction toWorldCoordinates(coordinates) {\n  return {\n    x: coordinates.x + 10,\n    y: coordinates.x + 20\n  };\n}\n\nvar playerLocalCoordinates = {\n  x: 20.5,\n  y: 30.5\n};\n\nrenderDot(toWorldCoordinates(playerLocalCoordinates));\n```\n\n----------------------------------------\n\nTITLE: Mutating References with Syntactic Sugar in ReScript\nDESCRIPTION: Using the := operator as syntactic sugar for updating the contents of a ref. This is a more concise way to mutate a reference value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/mutation.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\nmyValue := 6\n```\n\nLANGUAGE: js\nCODE:\n```\nmyValue.contents = 6;\n```\n\n----------------------------------------\n\nTITLE: Explicit Pattern Matching in ReScript\nDESCRIPTION: More explicit pattern matching approach that handles all cases separately. Provides better readability and maintainability.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_19\n\nLANGUAGE: rescript\nCODE:\n```\nlet optionBoolToBool = opt => {\n  switch opt {\n  | None => false\n  | Some(true) => true\n  | Some(false) => false\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction optionBoolToBool(opt) {\n  if (opt !== undefined && opt) {\n    return true;\n  } else {\n    return false;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Regular Records in Variants\nDESCRIPTION: Example of using a regular record type as a variant constructor payload, which is less efficient than inline records. The compiled JavaScript shows that the record becomes a nested object under the _0 field.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/variant.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\ntype u = {name: string, password: string}\ntype user =\n  | Number(int)\n  | Id(u)\n\nlet me = Id({name: \"Joe\", password: \"123\"})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar me = {\n  TAG: \"Id\",\n  _0: {\n    name: \"Joe\",\n    password: \"123\"\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Ignoring Parts of a Value in Pattern Matching\nDESCRIPTION: Demonstrates how to use the wildcard '_' to ignore parts of a value when pattern matching, useful for focusing on specific parts of complex data structures.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_9\n\nLANGUAGE: reason\nCODE:\n```\nswitch (person) {\n| Teacher(_) => Js.log(\"Hi teacher\")\n| Student(_) => Js.log(\"Hey student\")\n};\n```\n\nLANGUAGE: ml\nCODE:\n```\nlet () = match person with\n| Teacher _ -> Js.log \"Hi teacher\"\n| Student _ -> Js.log \"Hey student\"\n```\n\nLANGUAGE: js\nCODE:\n```\nif (person.TAG) {\n  console.log(\"Hey student\");\n} else {\n  console.log(\"Hi teacher\");\n}\n```\n\n----------------------------------------\n\nTITLE: While Loop Structure in ReScript\nDESCRIPTION: The structure of a while loop in ReScript, which executes its body as long as the condition remains true.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/control-flow.mdx#2025-04-18_snippet_8\n\nLANGUAGE: res\nCODE:\n```\nwhile testCondition {\n  // body here\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nwhile (testCondition) {\n  // body here\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Uncurried Mode in ReScript\nDESCRIPTION: Controls whether to use uncurried mode (default since v11.0). Setting 'uncurried' to false reverts to the old curried behavior.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/build-configuration.mdx#2025-04-18_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"uncurried\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Set to List in ReScript\nDESCRIPTION: Function that converts an ordered set to a list of values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set.mdx#2025-04-18_snippet_33\n\nLANGUAGE: reason\nCODE:\n```\nlet toList: t('value, 'id) => list('value);\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet s0 = Belt.Set.fromArray([|3,2,1,5|], ~id=(module IntCmp));\n\ns0->Belt.Set.toList; /* [1,2,3,5] */\n```\n\n----------------------------------------\n\nTITLE: Converting Undefined to Option in ReScript\nDESCRIPTION: Maps JavaScript's Js.undefined('a) to ReScript's option('a), with a becoming Some(a) and empty becoming None.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/undefined.mdx#2025-04-18_snippet_13\n\nLANGUAGE: res\nCODE:\n```\nlet toOption: t<'a> => option<'a>\n```\n\n----------------------------------------\n\nTITLE: Unsafe Array Access Without Bounds Checking in ReScript\nDESCRIPTION: The getUnsafe function retrieves an element at a specified index without bounds checking, which could lead to runtime errors if the index is out of range.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/array.mdx#2025-04-18_snippet_4\n\nLANGUAGE: ReScript\nCODE:\n```\nlet getUnsafe: (array<'a>, int) => 'a\n```\n\n----------------------------------------\n\nTITLE: Fround Function in ReScript\nDESCRIPTION: Rounds to nearest single precision float.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/math.mdx#2025-04-18_snippet_40\n\nLANGUAGE: rescript\nCODE:\n```\nlet fround: float => float;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.Math.fround(5.5) == 5.5;\nJs.Math.fround(5.05) == 5.050000190734863;\n```\n\n----------------------------------------\n\nTITLE: Extracting Substring in ReScript\nDESCRIPTION: The slice function extracts a portion of a string and returns it as a new string. It takes start and end indices, which can be negative to count from the end of the string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string-2.mdx#2025-04-18_snippet_13\n\nLANGUAGE: ReScript\nCODE:\n```\nlet slice: (t, ~from: int, ~to_: int) => t;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nJs.String2.slice(\"abcdefg\", ~from=2, ~to_=5) == \"cde\";\nJs.String2.slice(\"abcdefg\", ~from=2, ~to_=9) == \"cdefg\";\nJs.String2.slice(\"abcdefg\", ~from=(-4), ~to_=(-2)) == \"de\";\nJs.String2.slice(\"abcdefg\", ~from=5, ~to_=1) == \"\";\n```\n\n----------------------------------------\n\nTITLE: Finding an Array Element in ReScript\nDESCRIPTION: Returns Some(value) for the first element that satisfies the provided testing function, or None if no elements satisfy the test. The predicate function takes an array element as its argument.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/array.mdx#2025-04-18_snippet_14\n\nLANGUAGE: rescript\nCODE:\n```\nlet find: ('a => bool, t<'a>) => option<'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\n// find first negative element\nJs.Array.find(x => x < 0, [33, 22, -55, 77, -44]) == Some(-55)\nJs.Array.find(x => x < 0, [33, 22, 55, 77, 44]) == None\n```\n\n----------------------------------------\n\nTITLE: Converting integers to strings in ReScript\nDESCRIPTION: The toString function converts an integer to its string representation. It uses JavaScript's String constructor internally.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/int.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reason\nCODE:\n```\nlet toString: int => string;\n```\n\nLANGUAGE: reason\nCODE:\n```\nJs.log(Belt.Int.toString(1) === \"1\"); /* true */\n```\n\n----------------------------------------\n\nTITLE: Using __FILE__ Special Value in ReScript\nDESCRIPTION: This example demonstrates how to use the __FILE__ special value in ReScript to retrieve the current file name and log it to the console. When compiled, this value is replaced with a string literal of the file name.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/specialvalues_file.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\n// testmodule.res\n__FILE__->Console.log\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nconsole.log(\"testmodule.res\");\n```\n\n----------------------------------------\n\nTITLE: Mapping Undefined Values with bind\nDESCRIPTION: Maps a contained value using a function. If the undefined contains a value, it's unwrapped, mapped, and rewrapped.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/undefined.mdx#2025-04-18_snippet_7\n\nLANGUAGE: res\nCODE:\n```\nlet bind: (t<'a>, (. 'a) => 'b) => t<'b>\n```\n\n----------------------------------------\n\nTITLE: ReScript With Inlining Constants\nDESCRIPTION: This example demonstrates using the @inline annotation in ReScript to force the value to be inlined in the JavaScript output, enabling conditional compilation to work properly.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/inlining-constants.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\n@val external process: 'a = \"process\"\n\n@inline\nlet mode = \"development\"\n\nif (process[\"env\"][\"mode\"] === mode) {\n  Console.log(\"Dev-only code here!\")\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nif (process.env.mode === \"development\") {\n  console.log(\"Dev-only code here!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Using Abstract Types for JS Integer Enum Conversion in ReScript\nDESCRIPTION: Shows how to use abstract types for safer conversion between ReScript variants and JavaScript integer enums, preventing direct use of integers as variant values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/generate-converters-accessors.mdx#2025-04-18_snippet_11\n\nLANGUAGE: res\nCODE:\n```\n@deriving({jsConverter: newType})\ntype fruit =\n  | Apple\n  | @as(100) Kiwi\n  | Watermelon\n\nlet opaqueValue = fruitToJs(Apple)\n\n@module(\"myJSFruits\") external jsKiwi: abs_fruit = \"iSwearThisIsAKiwi\"\nlet kiwi = fruitFromJs(jsKiwi)\n\nlet error = fruitFromJs(100) /* nope, can't take a random int */\n```\n\n----------------------------------------\n\nTITLE: Equality Operators in ReScript vs JavaScript\nDESCRIPTION: Demonstrates equality operators in ReScript and their JavaScript output. These operators are identical in both languages.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/overview.mdx#2025-04-18_snippet_15\n\nLANGUAGE: rescript\nCODE:\n```\n===, ==\n```\n\nLANGUAGE: javascript\nCODE:\n```\n===, ==\n```\n\n----------------------------------------\n\nTITLE: Record Type Coercion in ReScript\nDESCRIPTION: Demonstrates record type coercion, allowing a record of one type to be treated as another type if they have matching fields.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/record.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rescript\nCODE:\n```\ntype a = {\n  name: string,\n  age: int,\n}\n\ntype b = {\n  name: string,\n  age: int,\n}\n\nlet nameFromB = (b: b) => b.name\n\nlet a: a = {\n  name: \"Name\",\n  age: 35,\n}\n\nlet name = nameFromB(a :> b)\n```\n\n----------------------------------------\n\nTITLE: Right to Left Array Reduction with Index (reduceRighti) in ReScript\nDESCRIPTION: Function that reduces an array from right to left while providing access to element indices. Takes an array, reducer function with accumulator/element/index parameters, and initial value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/array-2.mdx#2025-04-18_snippet_18\n\nLANGUAGE: reasonml\nCODE:\n```\nlet reduceRighti: (t('a), ('b, 'a, int) => 'b, 'b) => 'b;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet sumOfEvens = (accumulator, item, index) => {\n  if (index mod 2 == 0) {\n    accumulator + item;\n  } else {\n    accumulator;\n  }\n};\n\nJs.Array2.reduceRighti([|2, 5, 1, 4, 3|], sumOfEvens, 0) == 6;\n```\n\n----------------------------------------\n\nTITLE: Using getFullYear Function in ReScript\nDESCRIPTION: Demonstrates the use of the getFullYear function to retrieve the full year from the example date.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_21\n\nLANGUAGE: rescript\nCODE:\n```\nJs.Date.getFullYear(exampleDate) == 1973.0\n```\n\n----------------------------------------\n\nTITLE: Type Casting in ReScript\nDESCRIPTION: Demonstrates unsafe type casting using %identity.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/interop-cheatsheet.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rescript\nCODE:\n```\nexternal convertToFloat: int => float = \"%identity\"\nlet age = 10\nlet gpa = 2.1 +. convertToFloat(age)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar age = 10;\nvar gpa = 2.1 + 10;\n```\n\n----------------------------------------\n\nTITLE: Finding Minimum Value in Belt.MutableSet using minimum in ReScript\nDESCRIPTION: The minimum function returns the minimum value of the collection. It returns None if the collection is empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_11\n\nLANGUAGE: ReScript\nCODE:\n```\nlet minimum: t<'value, 'id> => option<'value>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nmodule IntCmp = Belt.Id.MakeComparable({\n  type t = int\n  let cmp = Pervasives.compare\n})\n\nlet s0 = Belt.MutableSet.make(~id=module(IntCmp))\nlet s1 = Belt.MutableSet.fromArray([3, 2, 1, 5], ~id=module(IntCmp))\n\ns0->Belt.MutableSet.minimum /* None */\ns1->Belt.MutableSet.minimum /* Some(1) */\n```\n\n----------------------------------------\n\nTITLE: Embedding Top-Level JavaScript Code in ReScript using %%raw\nDESCRIPTION: Demonstrates how to paste raw JavaScript code at the top level of a ReScript file using the %%raw syntax with multiline backtick strings. The code is passed through to the output unchanged.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/embed-raw-javascript.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\n%%raw(`\n// look ma, regular JavaScript!\nvar message = \"hello\";\nfunction greet(m) {\n  console.log(m)\n}\n`)\n```\n\nLANGUAGE: js\nCODE:\n```\n// look ma, regular JavaScript!\nvar message = \"hello\";\nfunction greet(m) {\n  console.log(m)\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring fromString Function for Date in ReScript\nDESCRIPTION: Declares the fromString function, which creates a Date object from a string representation of a date.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromString: string => t\n```\n\n----------------------------------------\n\nTITLE: Renaming Labeled Arguments Internally\nDESCRIPTION: Example showing how to use labeled arguments with different names internally using the 'as' keyword. This allows for descriptive external labels while using concise names in the function body.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/function.mdx#2025-04-18_snippet_7\n\nLANGUAGE: res\nCODE:\n```\nlet drawCircle = (~radius as r, ~color as c) => {\n  setColor(c)\n  startAt(r, r)\n  // ...\n}\n\ndrawCircle(~radius=10, ~color=\"red\")\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction drawCircle(r, c) {\n  setColor(c);\n  return startAt(r, r);\n}\n\ndrawCircle(10, \"red\");\n```\n\n----------------------------------------\n\nTITLE: Viewing Inferred Signature in ReScript (Reason Syntax)\nDESCRIPTION: Demonstrates how to view the inferred signature of a ReScript file using the bsc compiler with the -i flag. The output shows the type signature of the fib function in Reason syntax.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/try.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reason\nCODE:\n```\nlet fib: int => int;\n```\n\n----------------------------------------\n\nTITLE: Curried and Uncurried Callbacks in Belt\nDESCRIPTION: Demonstrates the difference between curried and uncurried callback functions in Belt, showing their type signatures and usage.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet forEach: (t<'a>, 'a => unit) => unit\n\nlet forEachU: (t<'a>, (. 'a) => unit) => unit\n\n[\"a\", \"b\", \"c\"]->Belt.Array.forEach(x => Js.log(x))\n\n[\"a\", \"b\", \"c\"]->Belt.Array.forEachU((. x) => Js.log(x))\n```\n\n----------------------------------------\n\nTITLE: Slicing Arrays in ReScript\nDESCRIPTION: Creates a new array with a subset of elements from the original array. Supports negative offsets and handles edge cases gracefully.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/array.mdx#2025-04-18_snippet_28\n\nLANGUAGE: reason\nCODE:\n```\nlet slice: (array('a), ~offset: int, ~len: int) => array('a);\n```\n\nLANGUAGE: reason\nCODE:\n```\nBelt.Array.slice([|10, 11, 12, 13, 14, 15, 16|], ~offset=2, ~len=3) == [|12, 13, 14|];\n\nBelt.Array.slice([|10, 11, 12, 13, 14, 15, 16|], ~offset=-4, ~len=3) == [|13, 14, 15|];\n\nBelt.Array.slice([|10, 11, 12, 13, 14, 15, 16|], ~offset=4, ~len=9) == [|14, 15, 16|];\n```\n\n----------------------------------------\n\nTITLE: Creating a HashMap with integer keys from an array of pairs in ReScript\nDESCRIPTION: Creates a new hash map from an array of key-value pairs.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-map-int.mdx#2025-04-18_snippet_20\n\nLANGUAGE: reason\nCODE:\n```\nlet fromArray: array((key, 'a)) => t('a);\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet hMap = Belt.HashMap.Int.fromArray([|(1, \"value1\"), (1, \"value2\")|]);\nBelt.HashMap.Int.toArray(hMap) == [|(1, \"value1\"), (2, \"value2\")|];\n```\n\n----------------------------------------\n\nTITLE: Defining String Type in ReScript\nDESCRIPTION: Defines the basic string type as an alias to the JavaScript string type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\ntype t = string;\n```\n\n----------------------------------------\n\nTITLE: Using isFinite with Infinite Values - Example 1\nDESCRIPTION: Example showing that isFinite returns false when checking positive infinity.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/float.mdx#2025-04-18_snippet_3\n\nLANGUAGE: re\nCODE:\n```\n/* returns [false] */\nJs.Float.isFinite(infinity);\n```\n\n----------------------------------------\n\nTITLE: Object Method Chaining in ReScript\nDESCRIPTION: Demonstrates how to bind to and use JavaScript array methods like map and filter, showcasing method chaining syntax in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/interop-cheatsheet.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\n@send external map: (array<'a>, 'a => 'b) => array<'b> = \"map\"\n@send external filter: (array<'a>, 'a => bool) => array<'a> = \"filter\"\n[1, 2, 3]\n  ->map(a => a + 1)\n  ->filter(a => mod(a, 2) == 0)\n  ->Console.log\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(\n  [1, 2, 3]\n    .map(function (a) {\n      return (a + 1) | 0;\n    })\n    .filter(function (a) {\n      return a % 2 === 0;\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a New HashMap in ReScript\nDESCRIPTION: Creates a new hash map with a specified hint size. The hint size is used for initial memory allocation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-map-int.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet make: (~hintSize: int) => t<'b>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet hMap = Belt.HashMap.Int.make(~hintSize=10)\n\nBelt.HashMap.Int.set(hMap, 1, \"a\")\n```\n\n----------------------------------------\n\nTITLE: Testing if Any Element Satisfies a Condition with Belt.List in ReScript\nDESCRIPTION: The some function checks if at least one element in a list satisfies a given predicate function. It returns true if the predicate returns true for any element.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/list.mdx#2025-04-18_snippet_47\n\nLANGUAGE: rescript\nCODE:\n```\nlet isAbove100 = value => value > 100\n\nlist{101, 1, 2, 3}->Belt.List.some(isAbove100) /* true */\n\nlist{1, 2, 3, 4}->Belt.List.some(isAbove100) /* false */\n```\n\n----------------------------------------\n\nTITLE: Iterating over SetDict elements in ReScript\nDESCRIPTION: Demonstrates how to use functions like 'forEach', 'reduce', 'every', and 'some' to iterate over SetDict elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-dict.mdx#2025-04-18_snippet_11\n\nLANGUAGE: rescript\nCODE:\n```\nlet forEachU: (t('value, 'id), [@bs] ('value => unit)) => unit;\nlet forEach: (t('value, 'id), 'value => unit) => unit;\nlet reduceU: (t('value, 'id), 'a, [@bs] (('a, 'value) => 'a)) => 'a;\nlet reduce: (t('value, 'id), 'a, ('a, 'value) => 'a) => 'a;\nlet everyU: (t('value, 'id), [@bs] ('value => bool)) => bool;\nlet every: (t('value, 'id), 'value => bool) => bool;\nlet someU: (t('value, 'id), [@bs] ('value => bool)) => bool;\nlet some: (t('value, 'id), 'value => bool) => bool;\n\nmodule IntCmp =\n  Belt.Id.MakeComparable({\n    type t = int;\n    let cmp = Pervasives.compare;\n  });\n\nlet s0 = Belt.Set.Dict.fromArray([|5,2,3,5,6|], ~cmp=IntCmp.cmp);\nlet acc = ref([]);\ns0->Belt.Set.Dict.forEach(x => {\n  acc := Belt.List.add(acc^, x)\n});\nacc; /* [6,5,3,2] */\n\nlet result = s0->Belt.Set.Dict.reduce([], (acc, element) =>\n  acc->Belt.List.add(element)\n); /* [6,5,3,2] */\n\nlet isEven = x => x mod 2 == 0;\nlet allEven = s0->Belt.Set.Dict.every(isEven); /* false */\n\nlet hasOdd = s0->Belt.Set.Dict.some(x => x mod 2 != 0); /* true */\n```\n\n----------------------------------------\n\nTITLE: Element Access Functions for Uint8Array\nDESCRIPTION: Functions for getting and setting elements in a Uint8Array without bounds checking.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\nlet unsafe_get: (t, int) => elt\n```\n\nLANGUAGE: res\nCODE:\n```\nlet unsafe_set: (t, int, elt) => unit\n```\n\n----------------------------------------\n\nTITLE: HashSet Function Signatures in ReScript\nDESCRIPTION: This section provides type signatures for various HashSet functions including creation, manipulation, and querying operations. It covers functions like make, clear, isEmpty, add, copy, has, remove, forEach, reduce, size, and more.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/hash-set.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ReScript\nCODE:\n```\nlet make: (~hintSize: int, ~id: id<'a, 'id>) => t<'a, 'id>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet clear: t<'a, 'id> => unit\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet isEmpty: t<'a, 'b> => bool\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet add: (t<'a, 'id>, 'a) => unit\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet copy: t<'a, 'id> => t<'a, 'id>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet has: (t<'a, 'id>, 'a) => bool\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet remove: (t<'a, 'id>, 'a) => unit\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet forEachU: (t<'a, 'id>, (. 'a) => unit) => unit\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet forEach: (t<'a, 'id>, 'a => unit) => unit\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet reduceU: (t<'a, 'id>, 'c, (. 'c, 'a) => 'c) => 'c\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet reduce: (t<'a, 'id>, 'c, ('c, 'a) => 'c) => 'c\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet size: t<'a, 'id> => int\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet logStats: t<'a, 'b> => unit\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet toArray: t<'a, 'id> => array<'a>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet fromArray: (array<'a>, ~id: id<'a, 'id>) => t<'a, 'id>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet mergeMany: (t<'a, 'id>, array<'a>) => unit\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet getBucketHistogram: t<'a, 'b> => array<int>\n```\n\n----------------------------------------\n\nTITLE: setInterval Function Signature in ReScript\nDESCRIPTION: Function signature for setInterval which repeatedly executes a callback at specified intervals in milliseconds.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/global.mdx#2025-04-18_snippet_6\n\nLANGUAGE: reasonml\nCODE:\n```\nlet setInterval: (unit => unit, int) => intervalId;\n```\n\n----------------------------------------\n\nTITLE: Test Some Elements\nDESCRIPTION: Tests whether at least one element in the typed array passes the test implemented by the provided function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_type-s.mdx#2025-04-18_snippet_48\n\nLANGUAGE: res\nCODE:\n```\nlet some: ((. elt) => bool, t) => bool\n```\n\n----------------------------------------\n\nTITLE: Sorting an integer array in-place\nDESCRIPTION: Performs a stable sort on an array in-place (modifying the original array). This is equivalent to Belt.SortArray.stableSortInPlaceBy but with a fixed comparator for integers.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/sort-array-int.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet stableSortInPlace: array(element) => unit;\n```\n\n----------------------------------------\n\nTITLE: Mapping Null_undefined Value in ReScript\nDESCRIPTION: Function signature for 'bind', which maps the contained value using the given function. It unwraps the value if present, applies the function, and rewraps the result.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/null-undefined.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet bind: (t<'a>, (. 'a) => 'b) => t<'b>\n```\n\n----------------------------------------\n\nTITLE: Ignoring Arguments in External Bindings\nDESCRIPTION: This code shows how to explicitly hide external function parameters in the JavaScript output using @ignore. This feature is useful for adding type constraints to parameters without affecting the JavaScript side.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/bind-to-js-function.mdx#2025-04-18_snippet_12\n\nLANGUAGE: res\nCODE:\n```\n@val external doSomething: (@ignore 'a, 'a) => unit = \"doSomething\"\n\ndoSomething(\"this only shows up in ReScript code\", \"test\")\n```\n\nLANGUAGE: js\nCODE:\n```\ndoSomething(\"test\");\n```\n\n----------------------------------------\n\nTITLE: Filtering Array Elements with Index in ReasonML\nDESCRIPTION: The filteri function creates a new array with all elements that pass the test implemented by the provided function, which takes both the element and its index as arguments.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array.mdx#2025-04-18_snippet_17\n\nLANGUAGE: ReasonML\nCODE:\n```\nlet filteri: (('a, int) => bool, t<'a>) => t<'a>\n```\n\nLANGUAGE: ReasonML\nCODE:\n```\nlet positiveOddElement = (item, index) => mod(index, 2) == 1 && item > 0\n\nJs.Array.filteri(positiveOddElement, [6, 3, 5, 8, 7, -4, 1]) == [3, 8]\n```\n\n----------------------------------------\n\nTITLE: Some Testing Operations for Float64Array\nDESCRIPTION: Functions to test if at least one element in a Float64Array passes a predicate function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-64-array.mdx#2025-04-18_snippet_23\n\nLANGUAGE: rescript\nCODE:\n```\nlet some: ((. elt) => bool, t) => bool\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet somei: ((. elt, int) => bool, t) => bool\n```\n\n----------------------------------------\n\nTITLE: Reverse Concatenating Lists in ReScript\nDESCRIPTION: The reverseConcat function reverses the first list and then concatenates it with the second list.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/list.mdx#2025-04-18_snippet_19\n\nLANGUAGE: rescript\nCODE:\n```\nlet reverseConcat: (t<'a>, t<'a>) => t<'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nBelt.List.reverseConcat(list{1, 2}, list{3, 4}) // list{2, 1, 3, 4}\n```\n\n----------------------------------------\n\nTITLE: Iterating Through List Elements with Uncurried Function in ReScript\nDESCRIPTION: The forEachU function is the uncurried version of forEach for performance optimization.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/list.mdx#2025-04-18_snippet_34\n\nLANGUAGE: rescript\nCODE:\n```\nlet forEachU: (t<'a>, (. 'a) => 'b) => unit\n```\n\n----------------------------------------\n\nTITLE: Set Operations on MutableSets in ReScript\nDESCRIPTION: This snippet demonstrates various set operations including union, intersect, and diff on MutableSets. It shows how to create sets and perform these operations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_5\n\nLANGUAGE: ReScript\nCODE:\n```\nmodule IntCmp = Belt.Id.MakeComparable({\n  type t = int\n  let cmp = Pervasives.compare\n})\n\nlet s0 = Belt.MutableSet.fromArray([5, 2, 3, 5, 6], ~id=module(IntCmp))\nlet s1 = Belt.MutableSet.fromArray([5, 2, 3, 1, 5, 4], ~id=module(IntCmp))\nlet union = Belt.MutableSet.union(s0, s1)\nunion->Belt.MutableSet.toArray /* [1,2,3,4,5,6] */\n\nlet intersect = Belt.MutableSet.intersect(s0, s1)\nintersect->Belt.MutableSet.toArray /* [2,3,5] */\n\nBelt.MutableSet.toArray(Belt.MutableSet.diff(s0, s1)) /* [6] */\nBelt.MutableSet.toArray(Belt.MutableSet.diff(s1, s0)) /* [1,4] */\n```\n\n----------------------------------------\n\nTITLE: Copying Elements Between Arrays in ReScript (blit)\nDESCRIPTION: The blit function copies elements from one array to another, handling overlapping arrays correctly. It supports negative offsets and bounds checking for safe operation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/array.mdx#2025-04-18_snippet_32\n\nLANGUAGE: ReScript\nCODE:\n```\nlet blit:\n  (\n    ~src: array<'a>,\n    ~srcOffset: int,\n    ~dst: array<'a>,\n    ~dstOffset: int,\n    ~len: int\n  ) =>\n  unit\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet v1 = [10, 11, 12, 13, 14, 15, 16, 17]\nlet v2 = [20, 21, 22, 23, 24, 25, 26, 27]\n\nBelt.Array.blit(~src=v1, ~srcOffset=4, ~dst=v2, ~dstOffset=2, ~len=3)\nv2 == [20, 21, 14, 15, 16, 25, 26, 27]\n\nBelt.Array.blit(~src=v1, ~srcOffset=4, ~dst=v1, ~dstOffset=2, ~len=3)\nv1 == [10, 11, 14, 15, 16, 15, 16, 17]\n```\n\n----------------------------------------\n\nTITLE: Checking None Value in ReScript\nDESCRIPTION: Function to check if an option value is None.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/option.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reason\nCODE:\n```\nlet isNone: option('a) => bool;\n```\n\n----------------------------------------\n\nTITLE: Reducing Belt.Set Elements in ReScript\nDESCRIPTION: Shows how to reduce elements of a Belt.Set to a single value using the reduce function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set.mdx#2025-04-18_snippet_15\n\nLANGUAGE: rescript\nCODE:\n```\nlet s0 = Belt.Set.fromArray([5,2,3,5,6], ~id=module(IntCmp))\ns0->Belt.Set.reduce(list{}, (acc, element) =>\n  acc->Belt.List.add(element)\n) /* [6,5,3,2] */\n```\n\n----------------------------------------\n\nTITLE: Mapping List Elements with Uncurried Function in ReScript\nDESCRIPTION: The mapU function is the uncurried version of map for performance optimization.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/list.mdx#2025-04-18_snippet_22\n\nLANGUAGE: rescript\nCODE:\n```\nlet mapU: (t<'a>, (. 'a) => 'b) => t<'b>\n```\n\n----------------------------------------\n\nTITLE: Creating Promise Type Signature in ReScript (ML Syntax)\nDESCRIPTION: Type signature for creating a promise in ReScript using the ML syntax. It defines the Js.Promise.make function with resolve and reject arguments.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/promise.mdx#2025-04-18_snippet_1\n\nLANGUAGE: mli\nCODE:\n```\nJs.Promise.make: (\n  resolve:(('a -> unit) [@bs]) ->\n  reject:((exn -> unit) [@bs]) ->\n  unit\n) -> 'a Js.Promise.t\n```\n\n----------------------------------------\n\nTITLE: Getting a Value from HashMap in ReScript\nDESCRIPTION: Retrieves a value for a given key from the hash map using Belt.HashMap.String.get.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-map-string.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet get: (t<'a>, key) => option<'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet hMap = Belt.HashMap.String.make(~hintSize=10)\nBelt.HashMap.String.set(hMap, \"1\", \"value1\")\n\nBelt.HashMap.String.get(hMap, \"1\") == Some(\"value1\")\nBelt.HashMap.String.get(hMap, \"2\") == None\n```\n\n----------------------------------------\n\nTITLE: Defining MapDict types in ReScript\nDESCRIPTION: Defines the main type t and the comparison function type cmp for the MapDict module.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\ntype t<'key, 'value, 'id>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\ntype cmp<'key, 'id> = Belt_Id.cmp<'key, 'id>\n```\n\n----------------------------------------\n\nTITLE: If Statement with Implicit Unit Return\nDESCRIPTION: Demonstrates the equivalence of an if without else to an if with an explicit else returning unit () in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/control-flow.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nif showMenu {\n  displayMenu()\n} else {\n  ()\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nif (showMenu) {\n  displayMenu()\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling Some and None to JavaScript\nDESCRIPTION: Shows how ReScript compiles Some and None to their JavaScript equivalents.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/null-undefined-option.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ReScript\nCODE:\n```\nlet x = Some(5)\nlet x = None\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar x = 5;\nvar x;\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Arrays in ReScript\nDESCRIPTION: The forEach function applies a function to each element of an array, typically used for side effects.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/array.mdx#2025-04-18_snippet_33\n\nLANGUAGE: reason\nCODE:\n```\nlet forEach: (array('a), 'a => unit) => unit;\n```\n\nLANGUAGE: reason\nCODE:\n```\nBelt.Array.forEach([|\"a\", \"b\", \"c\"|], x => Js.log(\"Item: \" ++ x));\n\n/*  prints:\n      Item: a\n      Item: b\n      Item: c\n    */\nlet total = ref(0);\n\nBelt.Array.forEach([|1, 2, 3, 4|], x => total := total^ + x);\n\ntotal^ == 1 + 2 + 3 + 4;\n```\n\n----------------------------------------\n\nTITLE: Creating JavaScript Objects with Records in ReScript\nDESCRIPTION: Shows how to use ReScript's record type to create JavaScript objects. This approach provides type safety while still compiling to standard JavaScript objects with the same structure.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/newcomer-examples.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\ntype payload = {\n  name: string,\n  age: int,\n}\n\nlet student1 = {\n  name: \"John\",\n  age: 30,\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar student1 = {\n  name: \"John\",\n  age: 30,\n};\n```\n\n----------------------------------------\n\nTITLE: Binding to Nested Global Objects in ReScript\nDESCRIPTION: This example shows how to bind to deeply nested properties of global objects using a tuple with the @scope attribute in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/bind-to-global-js-values.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ReScript\nCODE:\n```\n@val @scope((\"window\", \"location\", \"ancestorOrigins\"))\nexternal length: int = \"length\"\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Float Division/Multiplication in ReScript vs JavaScript\nDESCRIPTION: Shows float division and multiplication in ReScript, which use specialized operators (/. and *.), and their corresponding JavaScript output.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/overview.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rescript\nCODE:\n```\n2.0 /. 23.0 *. 1.0\n```\n\nLANGUAGE: javascript\nCODE:\n```\n2.0 / 23.0 * 1.0\n```\n\n----------------------------------------\n\nTITLE: Character Code to String Conversion in ReScript\nDESCRIPTION: Function signatures and examples for converting character codes to strings.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/string.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromCharCode: int => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.String2.fromCharCode(65) == \"A\"\nJs.String2.fromCharCode(0x3c8) == `ψ`\nJs.String2.fromCharCode(0xd55c) == `한`\nJs.String2.fromCharCode(-64568) == `ψ`\n```\n\n----------------------------------------\n\nTITLE: If Statement Without Else in ReScript\nDESCRIPTION: An if statement without an else branch in ReScript. This implicitly returns the unit value () when the condition is false.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/control-flow.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\nif showMenu {\n  displayMenu()\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nif (showMenu) {\n  displayMenu();\n}\n```\n\n----------------------------------------\n\nTITLE: Computing Set Difference in ReasonML\nDESCRIPTION: Demonstrates how to find the difference between two sets, returning elements from the first set that don't exist in the second set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set.mdx#2025-04-18_snippet_15\n\nLANGUAGE: reasonml\nCODE:\n```\nlet diff: (t('value, 'id), t('value, 'id)) => t('value, 'id);\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet s0 = Belt.Set.fromArray([|5,2,3,5,6|], ~id=(module IntCmp));\nlet s1 = Belt.Set.fromArray([|5,2,3,1,5,4|], ~id=(module IntCmp));\nBelt.Set.toArray(Belt.Set.diff(s0, s1)); /* [|6|] */\nBelt.Set.toArray(Belt.Set.diff(s1,s0)); /* [|1,4|] */\n```\n\n----------------------------------------\n\nTITLE: Converting Date to ISO String in ReScript\nDESCRIPTION: Converts a Date object to a simplified ISO 8601 format string. Returns a standardized date-time string in UTC.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_69\n\nLANGUAGE: rescript\nCODE:\n```\nlet toISOString: t => string\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.Date.toISOString(exampleDate) == \"1973-11-29T21:30:54.321Z\"\n```\n\n----------------------------------------\n\nTITLE: Using ignore() with Promise and setTimeout in ReScript\nDESCRIPTION: This snippet demonstrates how to use the ignore() function with Promise.catch() and setTimeout() in ReScript. It shows how ignore() is used to discard the return values of these operations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/builtinfunctions_ignore.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\nmySideEffect()->Promise.catch(handleError)->ignore\n\nsetTimeout(myFunc, 1000)->ignore\n```\n\n----------------------------------------\n\nTITLE: Distinguishing Multiple Arguments vs. Tuple Arguments\nDESCRIPTION: Clarifies the difference between a constructor with multiple separate arguments and a constructor taking a single tuple argument. Important distinction for pattern matching.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/variant.mdx#2025-04-18_snippet_7\n\nLANGUAGE: reason\nCODE:\n```\ntype account =\n  | Facebook(string, int); // 2 arguments\ntype account2 =\n  | Instagram((string, int)); // 1 argument - happens to be a 2-tuple\n```\n\nLANGUAGE: ml\nCODE:\n```\ntype account =\n  | Facebook of string * int (* 2 arguments *)\ntype account2 =\n  | Instagram of (string * int) (* 1 argument - happens to be a 2-tuple *)\n```\n\nLANGUAGE: js\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Iterating Float32Array in ReScript\nDESCRIPTION: Higher-order functions for iterating over Float32Array elements, including every, filter, find, and forEach.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\nlet every: ((. elt) => bool, t) => bool;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet everyi: ((. elt, int) => bool, t) => bool;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet filter: ((. elt) => bool, t) => t;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet filteri: ((. elt, int) => bool, t) => t;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet find: ((. elt) => bool, t) => Js.undefined(elt);\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet findi: ((. elt, int) => bool, t) => Js.undefined(elt);\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet findIndex: ((. elt) => bool, t) => int;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet findIndexi: ((. elt, int) => bool, t) => int;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet forEach: ((. elt) => unit, t) => unit;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet forEachi: ((. elt, int) => unit, t) => unit;\n```\n\n----------------------------------------\n\nTITLE: Component Without Children in ReScript\nDESCRIPTION: Demonstrates how to create a component that doesn't accept children. This example shows how ReScript's type system will raise an error if children are provided to such a component.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/components-and-props.mdx#2025-04-18_snippet_8\n\nLANGUAGE: res\nCODE:\n```\nmodule NoChildren = {\n  @react.component\n  let make = () => {\n    <div>\n      {React.string(\"I don't accept any children params\")}\n    </div>\n  }\n}\n\n// The compiler will raise a type error here\n<NoChildren> <div/> </NoChildren>\n```\n\n----------------------------------------\n\nTITLE: List Filtering Operations\nDESCRIPTION: Functions for filtering lists based on predicates, including keep and filter operations with index support.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/list.mdx#2025-04-18_snippet_9\n\nLANGUAGE: res\nCODE:\n```\nlet isEven = x => mod(x, 2) == 0\n\nBelt.List.keep(list{1, 2, 3, 4}, isEven) /* list{2, 4} */\n\nBelt.List.keepWithIndex(list{1, 2, 3, 4}, (_x, index) => isEven(index)) /* list{1, 3} */\n```\n\n----------------------------------------\n\nTITLE: Using Light Accessors for Shorter Names\nDESCRIPTION: The light option for @deriving(abstract) creates shorter accessor names that match the field names themselves, making them more concise to use.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/generate-converters-accessors.mdx#2025-04-18_snippet_13\n\nLANGUAGE: ReScript\nCODE:\n```\n@deriving({abstract: light})\ntype person = {\n  name: string,\n  age: int,\n}\n\nlet joe = person(~name=\"Joe\", ~age=20)\nlet joeName = name(joe)\n```\n\n----------------------------------------\n\nTITLE: Array Concatenation Operations in ReScript\nDESCRIPTION: Demonstrates array concatenation methods that combine multiple arrays into a new array without modifying the original arrays.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/array-2.mdx#2025-04-18_snippet_9\n\nLANGUAGE: res\nCODE:\n```\nJs.Array2.concat([\"a\", \"b\"], [\"c\", \"d\", \"e\"]) == [\"a\", \"b\", \"c\", \"d\", \"e\"]\n\nJs.Array2.concatMany([\"a\", \"b\", \"c\"], [[\"d\", \"e\"], [\"f\", \"g\", \"h\"]]) == [\n    \"a\",\n    \"b\",\n    \"c\",\n    \"d\",\n    \"e\",\n    \"f\",\n    \"g\",\n    \"h\",\n  ]\n```\n\n----------------------------------------\n\nTITLE: Creating List with Uncurried Function in ReScript\nDESCRIPTION: The makeByU function is the uncurried version of makeBy for performance optimization.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/list.mdx#2025-04-18_snippet_12\n\nLANGUAGE: rescript\nCODE:\n```\nlet makeByU: (int, (. int) => 'a) => t<'a>\n```\n\n----------------------------------------\n\nTITLE: Vector Element Set Operation\nDESCRIPTION: Sets an element at a specified index. Raises Invalid_argument if index is out of bounds.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/vector.mdx#2025-04-18_snippet_15\n\nLANGUAGE: res\nCODE:\n```\nlet set: (t<'a>, int, 'a) => unit\n```\n\n----------------------------------------\n\nTITLE: Accessing Array Length in ReScript\nDESCRIPTION: Returns the size of the array. This function determines how many elements are contained in the array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/array.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\nlet length: array('a) => int;\n```\n\nLANGUAGE: reason\nCODE:\n```\n/* Returns 1 */\nBelt.Array.length([|\"test\"|]);\n```\n\n----------------------------------------\n\nTITLE: Using splitAtMost function in ReScript\nDESCRIPTION: Splits a string at every occurrence of a delimiter and returns an array with a limited number of substrings. The limit parameter controls how many substrings are included.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/string-2.mdx#2025-04-18_snippet_21\n\nLANGUAGE: rescript\nCODE:\n```\nlet splitAtMost: (t, t, ~limit: int) => array<t>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.String2.splitAtMost(\"ant/bee/cat/dog/elk\", \"/\", ~limit=3) == [\"ant\", \"bee\", \"cat\"]\nJs.String2.splitAtMost(\"ant/bee/cat/dog/elk\", \"/\", ~limit=0) == []\nJs.String2.splitAtMost(\"ant/bee/cat/dog/elk\", \"/\", ~limit=9) == [\n    \"ant\",\n    \"bee\",\n    \"cat\",\n    \"dog\",\n    \"elk\",\n  ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Post-Build JavaScript Hook\nDESCRIPTION: Example of setting up a JavaScript post-build hook that executes a custom command after each file is recompiled, useful for JS build system interop.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/build-configuration.mdx#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"js-post-build\": {\n    \"cmd\": \"/path/to/node ../../postProcessTheFile.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using %raw for Expression-Level JavaScript in ReScript\nDESCRIPTION: Shows how to embed JavaScript expressions in ReScript code using %raw syntax, creating a JavaScript function that can be called from ReScript code.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/embed-raw-javascript.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\nlet add = %raw(`\n  function(a, b) {\n    console.log(\"hello from raw JavaScript!\");\n    return a + b\n  }\n`)\n\nJs.log(add(1, 2))\n```\n\nLANGUAGE: js\nCODE:\n```\nvar add = function(a, b) {\n  console.log(\"hello from raw JavaScript!\");\n  return a + b\n};\n\nconsole.log(add(1, 2));\n```\n\n----------------------------------------\n\nTITLE: Example of Using bind with Nullable Strings in ReScript\nDESCRIPTION: Example demonstrating how to use the 'bind' function to concatenate a string with 'world!' if the nullable string is not null or undefined.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/null-undefined.mdx#2025-04-18_snippet_7\n\nLANGUAGE: reason\nCODE:\n```\nlet maybeGreetWorld = (maybeGreeting: Js.null_undefined(string)) =>\n  Js.Null_undefined.bind(maybeGreeting, [@bs] greeting => greeting ++ \" world!\");\n```\n\n----------------------------------------\n\nTITLE: Partitioning map in MapString module (ReScript)\nDESCRIPTION: Function to partition a map into two maps: one with entries that satisfy the predicate and one with entries that don't.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-string.mdx#2025-04-18_snippet_49\n\nLANGUAGE: reason\nCODE:\n```\nlet partition: (t('v), (key, 'v) => bool) => (t('v), t('v));\n```\n\n----------------------------------------\n\nTITLE: Converting Option<bool> to bool in ReScript (Initial Implementation)\nDESCRIPTION: This snippet shows an initial, verbose implementation of converting an Option<bool> to a bool using if-else statements. It's presented as an example of code that can be improved through pattern matching.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_15\n\nLANGUAGE: rescript\nCODE:\n```\nlet optionBoolToBool = opt => {\n  if opt == None {\n    false\n  } else if opt === Some(true) {\n    true\n  } else {\n    false\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction optionBoolToBool(opt) {\n  if (opt === undefined) {\n    return false;\n  } else {\n    return opt === true;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using reduceRighti Function in ReScript\nDESCRIPTION: The reduceRighti function reduces an array from right to left by applying a function to each element with its index and an accumulator value. This example demonstrates calculating the sum of elements at even indices.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array-2.mdx#2025-04-18_snippet_38\n\nLANGUAGE: res\nCODE:\n```\n// find sum of even-index elements in array\nlet sumOfEvens = (accumulator, item, index) =>\n  if mod(index, 2) == 0 {\n    accumulator + item\n  } else {\n    accumulator\n  }\n\nJs.Array2.reduceRighti([2, 5, 1, 4, 3], sumOfEvens, 0) == 6\n```\n\n----------------------------------------\n\nTITLE: Implementing FriendStatus Component with Custom Hook in ReScript\nDESCRIPTION: A React component that uses a custom hook to display a friend's online status. The component takes a friend object with an id property and uses the FriendStatusHook to determine their online status.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/hooks-custom.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ReScript\nCODE:\n```\n// FriendStatus.res\ntype friend = { id: string };\n\n@react.component\nlet make = (~friend: friend) => {\n  let onlineState = FriendStatusHook.useFriendStatus(friend.id);\n\n  let status = switch(onlineState) {\n    | FriendStatusHook.Online => \"Online\"\n    | Loading => \"Loading\"\n    | Offline => \"Offline\"\n  }\n\n  React.string(status);\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction FriendStatus(Props) {\n  var friend = Props.friend;\n  var onlineState = useFriendStatus(friend.id);\n  var color;\n  switch (onlineState) {\n    case /* Offline */0 :\n        color = \"red\";\n        break;\n    case /* Loading */1 :\n        color = \"grey\";\n        break;\n    case /* Online */2 :\n        color = \"green\";\n        break;\n\n  }\n  return React.createElement(\"li\", {\n              style: {\n                color: color\n              }\n            }, friend.name);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up a New ReScript Project\nDESCRIPTION: Series of commands to clone a ReScript project template, install dependencies, build the project, and run the compiled JavaScript. This sets up a basic ReScript development environment.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/installation.mdx#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/rescript-lang/rescript-project-template\ncd rescript-project-template\nnpm install\nnpm run build\nnode src/Demo.bs.js\n```\n\n----------------------------------------\n\nTITLE: Creating Empty Objects in ReScript\nDESCRIPTION: The empty() function returns an empty object {}. It takes a unit argument and returns an object of type {..}.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/obj.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nlet empty: unit => {..}\n```\n\n----------------------------------------\n\nTITLE: Using Same Keys in Different Arrays in ReScript React\nDESCRIPTION: Demonstrates that keys only need to be unique among siblings, not globally. This example shows reusing the same post IDs as keys in different component sections.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/arrays-and-keys.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\ntype post = {id: string, title: string, content: string}\n\nmodule Blog = {\n  @react.component\n  let make = (~posts: array<post>) => {\n    let sidebar =\n      <ul>\n        {\n          Belt.Array.map(posts, (post) => {\n            <li key={post.id}>\n              {React.string(post.title)}\n            </li>\n          })->React.array\n        }\n      </ul>\n\n    let content = Belt.Array.map(posts, (post) => {\n        <div key={post.id}>\n          <h3>{React.string(post.title)}</h3>\n          <p>{React.string(post.content)}</p>\n        </div>\n    });\n      \n      <div>\n      {sidebar}\n      <hr />\n      {React.array(content)}\n    </div>\n  }\n}\n\nlet posts = [\n  {id: \"1\", title: \"Hello World\", content: \"Welcome to learning ReScript & React!\"},\n  {id: \"2\", title: \"Installation\", content: \"You can install reason-react from npm.\"}\n]\n\nlet blog = <Blog posts/>\n```\n\n----------------------------------------\n\nTITLE: Mapping Option Values in ReScript\nDESCRIPTION: Function to transform the value inside an option using a mapping function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/option.mdx#2025-04-18_snippet_8\n\nLANGUAGE: reason\nCODE:\n```\nlet map: ((. 'a) => 'b, option('a)) => option('b);\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet square = (. x) => (x * x);\nJs.Option.map(square, Some(3)) == Some(9);\nJs.Option.map(square, None) == None;\n```\n\n----------------------------------------\n\nTITLE: Retrieving UTC Date from Date Object in ReScript\nDESCRIPTION: The getUTCDate function returns the day of the month of a Date object, evaluated in UTC. It binds to JavaScript's Date.getUTCDate method.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_31\n\nLANGUAGE: res\nCODE:\n```\nlet getUTCDate: t => float\n```\n\nLANGUAGE: res\nCODE:\n```\nJs.Date.getUTCDate(exampleDate) == 29.0\n```\n\n----------------------------------------\n\nTITLE: Adding Element to List in ReScript\nDESCRIPTION: The add function prepends a value to the beginning of a list and returns the new list.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/list.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nlet add: (t<'a>, 'a) => t<'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nBelt.List.add(list{2, 3}, 1) // list{1, 2, 3}\n\nBelt.List.add(list{\"World\", \"!\"}, \"Hello\") // list{\"Hello\", \"World\", \"!\"}\n```\n\n----------------------------------------\n\nTITLE: Various Variant Examples and Their JavaScript Output\nDESCRIPTION: Provides multiple examples of variant definitions and their corresponding JavaScript output, showcasing different compilation strategies.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/variant.mdx#2025-04-18_snippet_4\n\nLANGUAGE: ReScript\nCODE:\n```\ntype greeting = Hello | Goodbye\nlet g1 = Hello\nlet g2 = Goodbye\n\ntype outcome = Good | Error(string)\nlet o1 = Good\nlet o2 = Error(\"oops!\")\n\ntype family = Child | Mom(int, string) | Dad (int)\nlet f1 = Child\nlet f2 = Mom(30, \"Jane\")\nlet f3 = Dad(32)\n\ntype person = Teacher | Student({gpa: float})\nlet p1 = Teacher\nlet p2 = Student({gpa: 99.5})\n\ntype s = {score: float}\ntype adventurer = Warrior(s) | Wizard(string)\nlet a1 = Warrior({score: 10.5})\nlet a2 = Wizard(\"Joe\")\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar g1 = /* Hello */0;\nvar g2 = /* Goodbye */1;\n\nvar o1 = /* Good */0;\nvar o2 = /* Error */{\n  _0: \"oops!\"\n};\n\nvar f1 = /* Child */0;\nvar f2 = {\n  TAG: /* Mom */0,\n  _0: 30,\n  _1: \"Jane\"\n};\nvar f3 = {\n  TAG: /* Dad */1,\n  _0: 32\n};\n\nvar p1 = /* Teacher */0;\nvar p2 = /* Student */{\n  gpa: 99.5\n};\n\nvar a1 = {\n  TAG: /* Warrior */0,\n  _0: {\n    score: 10.5\n  }\n};\nvar a2 = {\n  TAG: /* Wizard */1,\n  _0: \"Joe\"\n};\n```\n\n----------------------------------------\n\nTITLE: Repeating Strings in ReScript\nDESCRIPTION: The repeat function returns a new string consisting of the original string repeated a specified number of times. It raises a RangeError if the repeat count is negative.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string.mdx#2025-04-18_snippet_25\n\nLANGUAGE: rescript\nCODE:\n```\nlet repeat: (t, int) => t;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.String.repeat(3, \"ha\") == \"hahaha\";\nJs.String.repeat(0, \"empty\") == \"\";\n```\n\n----------------------------------------\n\nTITLE: Array Utility Functions in ReScript\nDESCRIPTION: Various utility functions for working with arrays, including type checking and length determination.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/array-2.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet isArray: 'a => bool\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet length: array<'a> => int\n```\n\n----------------------------------------\n\nTITLE: Modeling this-based Callbacks in ReScript\nDESCRIPTION: Demonstrates how to properly type JavaScript functions that use 'this' context by using the @this attribute. This example shows binding to an onload callback that references its source object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/bind-to-js-function.mdx#2025-04-18_snippet_9\n\nLANGUAGE: res\nCODE:\n```\ntype x\n@val external x: x = \"x\"\n@set external setOnload: (x, @this ((x, int) => unit)) => unit = \"onload\"\n@get external resp: x => int = \"response\"\nsetOnload(x, @this (o, v) => Console.log(resp(o) + v))\n```\n\nLANGUAGE: js\nCODE:\n```\nx.onload = function (v) {\n  var o = this;\n  console.log((o.response + v) | 0);\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving value with default in ReScript map\nDESCRIPTION: Returns the value associated with the given key, or the provided default value if the key is not found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_34\n\nLANGUAGE: reasonml\nCODE:\n```\nlet getWithDefault: (t('a), key, 'a) => 'a;\n```\n\n----------------------------------------\n\nTITLE: Using Belt.Option.mapWithDefault in ReScript\nDESCRIPTION: Demonstrates the usage of mapWithDefault function to transform an option value or return a default.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/option.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet someValue = Some(3)\nsomeValue->Belt.Option.mapWithDefault(0, x => x + 5) /* 8 */\n\nlet noneValue = None\nnoneValue->Belt.Option.mapWithDefault(0, x => x + 5) /* 0 */\n```\n\n----------------------------------------\n\nTITLE: Checking Subset Relationship in Belt.Sets in ReScript\nDESCRIPTION: Demonstrates how to check if one Belt.Set is a subset of another using the subset function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set.mdx#2025-04-18_snippet_12\n\nLANGUAGE: rescript\nCODE:\n```\nlet s0 = Belt.Set.fromArray([5,2,3,5,6], ~id=module(IntCmp))\nlet s1 = Belt.Set.fromArray([5,2,3,1,5,4], ~id=module(IntCmp))\nlet s2 = Belt.Set.intersect(s0, s1)\nBelt.Set.subset(s2, s0) /* true */\nBelt.Set.subset(s2, s1) /* true */\nBelt.Set.subset(s1, s0) /* false */\n```\n\n----------------------------------------\n\nTITLE: Checking String Ending in ReScript\nDESCRIPTION: The endsWith function determines whether a string ends with the specified substring, returning a boolean result.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string.mdx#2025-04-18_snippet_13\n\nLANGUAGE: reason\nCODE:\n```\nlet endsWith: (t, t) => bool;\n```\n\nLANGUAGE: reason\nCODE:\n```\nJs.String.endsWith(\"Script\", \"BuckleScript\") == true;\nJs.String.endsWith(\"Script\", \"BuckleShoes\") == false;\n```\n\n----------------------------------------\n\nTITLE: Example of Checking String Set Equality in ReScript\nDESCRIPTION: Demonstrates how to check if two string sets are equal, containing the same elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-string.mdx#2025-04-18_snippet_29\n\nLANGUAGE: reasonml\nCODE:\n```\nlet s0 = Belt.Set.String.fromArray([|\"apple\", \"orange\"|]);\nlet s1 = Belt.Set.String.fromArray([|\"orange\", \"apple\"|]);\n\nBelt.Set.String.eq(s0, s1); /* true */\n```\n\n----------------------------------------\n\nTITLE: RegExp Constructor from String\nDESCRIPTION: Function signature and example for creating a RegExp from a string pattern.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/re.mdx#2025-04-18_snippet_6\n\nLANGUAGE: res\nCODE:\n```\nlet fromString: string => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet firstReScriptFileExtension = (filename, content) => {\n  let result = Js.Re.fromString(filename ++ \"\\.(res|resi)\")->Js.Re.exec_(content)\n  switch result {\n  | Some(r) => Js.Nullable.toOption(Js.Re.captures(r)[1])\n  | None => None\n  }\n}\n\n// outputs \"res\"\nfirstReScriptFileExtension(\"School\", \"School.res School.resi Main.js School.bs.js\")\n```\n\n----------------------------------------\n\nTITLE: Getting the Size of a HashMap in ReScript\nDESCRIPTION: Returns the number of bindings in the hash map. This operation takes constant time.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-map.mdx#2025-04-18_snippet_12\n\nLANGUAGE: rescript\nCODE:\n```\nlet size: t('a, 'b, 'c) => int;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nmodule IntHash =\n  Belt.Id.MakeHashable({\n    type t = int;\n    let hash = a => a;\n    let eq = (a, b) => a == b;\n  });\n  \nlet s0 = Belt.HashMap.make(~hintSize=10, ~id=(module IntHash));\nBelt.HashMap.set(s0, 1, \"value1\");\nBelt.HashMap.set(s0, 2, \"value2\");\n\nBelt.HashMap.size(s0) == 2;\n```\n\n----------------------------------------\n\nTITLE: Mapping ReScript Records to JavaScript Arrays\nDESCRIPTION: Demonstrates how to map a ReScript record to a JavaScript array using indexed @as decorators. This technique allows for positional mapping between record fields and array elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/bind-to-js-object.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\ntype t = {\n  @as(\"0\") foo: int,\n  @as(\"1\") bar: string,\n}\n\nlet value = {foo: 7, bar: \"baz\"}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar value = [\n  7,\n  \"baz\"\n];\n```\n\n----------------------------------------\n\nTITLE: Creating List with Repeated Value in ReScript\nDESCRIPTION: The make function creates a new list of specified length with all elements set to the same value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/list.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rescript\nCODE:\n```\nlet make: (int, 'a) => t<'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nBelt.List.make(3, 1) // list{1, 1, 1}\n```\n\n----------------------------------------\n\nTITLE: String Conversion Function Signature\nDESCRIPTION: Function signature for converting any value to string type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/string.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\nlet make: 'a => t\n```\n\n----------------------------------------\n\nTITLE: Unsafe Comparison Operators in ReScript\nDESCRIPTION: Functions that provide access to JavaScript's comparison operators. They are marked as unsafe because JavaScript's comparison semantics cannot be properly typed in ReScript's type system.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\nlet unsafe_lt: ('a, 'a) => bool\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet unsafe_le: ('a, 'a) => bool\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet unsafe_gt: ('a, 'a) => bool\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet unsafe_ge: ('a, 'a) => bool\n```\n\n----------------------------------------\n\nTITLE: Using random function to generate random float in ReScript\nDESCRIPTION: The random function returns a random number in the half-closed interval [0,1). It takes unit as input and returns a float.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/math.mdx#2025-04-18_snippet_24\n\nLANGUAGE: res\nCODE:\n```\nlet random: unit => float\n```\n\n----------------------------------------\n\nTITLE: Filter Array Elements with Index\nDESCRIPTION: Creates a new typed array with all elements that pass the test implemented by the provided function which also receives the element index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_type-s.mdx#2025-04-18_snippet_35\n\nLANGUAGE: res\nCODE:\n```\nlet filteri: ((. elt, int) => bool, t) => t\n```\n\n----------------------------------------\n\nTITLE: Array Manipulation Functions in ReScript\nDESCRIPTION: Functions for array manipulation including unshift, concat, includes, indexOf operations for adding, combining and searching elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/array-2.mdx#2025-04-18_snippet_9\n\nLANGUAGE: reason\nCODE:\n```\nlet unshift: (t('a), 'a) => int;\nlet concat: (t('a), t('a)) => t('a);\nlet includes: (t('a), 'a) => bool;\nlet indexOf: (t('a), 'a) => int;\n```\n\n----------------------------------------\n\nTITLE: Setting Minutes with setUTCMinutes in ReScript\nDESCRIPTION: Sets a Date's minutes according to UTC time. This function modifies the original Date object and returns the updated timestamp in milliseconds. Binds to JavaScript's Date.setUTCMinutes method.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_58\n\nLANGUAGE: res\nCODE:\n```\nlet setUTCMinutes: (t, float) => float\n```\n\nLANGUAGE: res\nCODE:\n```\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet futureTime = Js.Date.setUTCMinutes(date1, 34.0)\ndate1 == Js.Date.fromString(\"1973-11-29T21:34:54.494Z00:00\")\nfutureTime == Js.Date.getTime(date1)\n```\n\n----------------------------------------\n\nTITLE: Array Iteration Methods in ReScript\nDESCRIPTION: Higher-order functions for iterating over the array elements, including every, filter, find, forEach, etc.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-32-array.mdx#2025-04-18_snippet_11\n\nLANGUAGE: res\nCODE:\n```\nlet every: ((. elt) => bool, t) => bool\n```\n\nLANGUAGE: res\nCODE:\n```\nlet everyi: ((. elt, int) => bool, t) => bool\n```\n\nLANGUAGE: res\nCODE:\n```\nlet filter: ((. elt) => bool, t) => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet filteri: ((. elt, int) => bool, t) => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet find: ((. elt) => bool, t) => Js.undefined<elt>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet findi: ((. elt, int) => bool, t) => Js.undefined<elt>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet findIndex: ((. elt) => bool, t) => int\n```\n\nLANGUAGE: res\nCODE:\n```\nlet findIndexi: ((. elt, int) => bool, t) => int\n```\n\nLANGUAGE: res\nCODE:\n```\nlet forEach: ((. elt) => unit, t) => unit\n```\n\nLANGUAGE: res\nCODE:\n```\nlet forEachi: ((. elt, int) => unit, t) => unit\n```\n\n----------------------------------------\n\nTITLE: Copying a HashMap in ReScript\nDESCRIPTION: Creates a new hash map with the same key-value pairs as the original.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-map-int.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet copy: t<'a> => t<'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet hMap1 = Belt.HashMap.Int.fromArray([(1, \"1\"), (2, \"2\")])\nlet hMap2 = Belt.HashMap.Int.copy(hMap1)\n\nBelt.HashMap.Int.set(hMap2, 2, \"3\")\n\nBelt.HashMap.Int.get(hMap1, 2) != Belt.HashMap.Int.get(hMap2, 2)\n```\n\n----------------------------------------\n\nTITLE: Using reduceRighti with Arrays in ReScript\nDESCRIPTION: Demonstrates the reduceRighti function that reduces an array from right to left while providing the index of each element to the reducer function. It processes elements in reverse order, starting from the last element.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/array-2.mdx#2025-04-18_snippet_26\n\nLANGUAGE: res\nCODE:\n```\nlet reduceRighti: (t<'a>, ('b, 'a, int) => 'b, 'b) => 'b\n```\n\nLANGUAGE: res\nCODE:\n```\n// find sum of even-index elements in array\nlet sumOfEvens = (accumulator, item, index) =>\n  if mod(index, 2) == 0 {\n    accumulator + item\n  } else {\n    accumulator\n  }\n\nJs.Array2.reduceRighti([2, 5, 1, 4, 3], sumOfEvens, 0) == 6\n```\n\n----------------------------------------\n\nTITLE: Flexible Argument Order with Labeled Arguments in ReScript\nDESCRIPTION: This example shows how labeled arguments in ReScript can be provided in any order when calling a function, maintaining code clarity and reducing errors.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/language_labeled_argument.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\ncalculateDistance(~x1=6., ~x2=3., ~y1=8., ~y2=4.)\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncalculateDistance(6, 8, 3, 4);\n```\n\n----------------------------------------\n\nTITLE: Using JSX Spread Props in ReScript\nDESCRIPTION: Shows how spread props work in ReScript JSX. This feature allows passing all properties from an object as individual props.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/jsx.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\n<Comp {...props} a=\"a\" />\n```\n\nLANGUAGE: javascript\nCODE:\n```\nReact.createElement(Comp, {\n  a: \"a\",\n  b: \"b\"\n});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Record Type Resolution in ReScript\nDESCRIPTION: This snippet shows how ReScript infers record types based on field names, which can lead to unexpected type errors when using different record types with the same field name.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/record.mdx#2025-04-18_snippet_11\n\nLANGUAGE: res\nCODE:\n```\ntype person = {age: int, name: string}\ntype monster = {age: int, hasTentacles: bool}\n\nlet getAge = (entity) => entity.age\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction getAge(entity) {\n  return entity.age;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Bucket Histogram of a HashSet in ReScript\nDESCRIPTION: This function signature shows how to get the bucket histogram of a HashSet, which can be useful for performance analysis.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-set.mdx#2025-04-18_snippet_20\n\nLANGUAGE: reason\nCODE:\n```\nlet getBucketHistogram: t('a, 'b) => array(int);\n```\n\n----------------------------------------\n\nTITLE: Recursive Function in ReScript\nDESCRIPTION: Shows how to create a recursive function using the rec keyword with list processing example.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/function.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet rec listHas = (list, item) =>\n  switch list {\n  | list{} => false\n  | list{a, ...rest} => a === item || listHas(rest, item)\n  }\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction listHas(_list, item) {\n  while(true) {\n    var list = _list;\n    if (!list) {\n      return false;\n    }\n    if (list.hd === item) {\n      return true;\n    }\n    _list = list.tl;\n    continue ;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Installing ReScript Dependencies with pnpm\nDESCRIPTION: pnpm command to install ReScript and its core library as dependencies in an existing project. This is used when manually integrating ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/installation.mdx#2025-04-18_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\npnpm install rescript @rescript/core\n```\n\n----------------------------------------\n\nTITLE: List Right Fold Function Signature\nDESCRIPTION: Function to fold a list from right to left, applying a function to each element and an accumulator. Application order is right to left, tail-recursive.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/list.mdx#2025-04-18_snippet_14\n\nLANGUAGE: ReScript\nCODE:\n```\nlet foldRight: ((. 'a, 'b) => 'b, list('a), 'b) => 'b;\n```\n\n----------------------------------------\n\nTITLE: Removing key-value pair in ReScript\nDESCRIPTION: Function signature for removing a key-value pair from a mutable map by key, performing in-place modification.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_37\n\nLANGUAGE: ReScript\nCODE:\n```\nlet remove: (t<'a>, key) => unit\n```\n\n----------------------------------------\n\nTITLE: Function Type Annotations in ReScript Interface Files\nDESCRIPTION: Demonstrates how to annotate function types in ReScript interface files (.resi), showing the difference between exporting a binding with a type and exporting a type itself.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/function.mdx#2025-04-18_snippet_13\n\nLANGUAGE: rescript\nCODE:\n```\nlet add: (int, int) => int\n```\n\n----------------------------------------\n\nTITLE: Copying a HashMap in ReScript\nDESCRIPTION: Creates a copy of a hash map. Demonstrates that modifying the original hash map doesn't affect the copy.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-map.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet copy: t('key, 'value, 'id) => t('key, 'value, 'id);\n```\n\nLANGUAGE: rescript\nCODE:\n```\nmodule IntHash =\n  Belt.Id.MakeHashable({\n    type t = int;\n    let hash = a => a;\n    let eq = (a, b) => a == b;\n  });\n  \nlet s0 = Belt.HashMap.fromArray([|(2, \"2\"), (1, \"1\"), (3, \"3\")|], ~id=(module IntHash));\nlet s1 = Belt.HashMap.copy(s0)\n\nBelt.HashMap.set(s0, 2, \"3\");\n\nBelt.HashMap.get(s0, 2) != Belt.HashMap.get(s1, 2)\n```\n\n----------------------------------------\n\nTITLE: Promise Type Declaration in ReScript\nDESCRIPTION: Example of using the new built-in promise type in a ReScript interface file (.resi). Shows simplified promise type syntax compared to previous versions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2023-02-02-release-10-1.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\n// User.resi\ntype user\n\nlet fetchUser: string => promise<user>\n```\n\n----------------------------------------\n\nTITLE: Coercing Variants to String Primitives in ReScript\nDESCRIPTION: Shows how to coerce variants to primitive string values when all constructors are represented as strings at runtime. This zero-cost coercion allows interoperability with JavaScript string-based APIs.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/variant.mdx#2025-04-18_snippet_19\n\nLANGUAGE: rescript\nCODE:\n```\n// Constructors without payloads are represented as `string` by default\ntype a = One | Two | Three\n\nlet one: a = One\n\n// All constructors are strings at runtime, so you can safely coerce it to a string\nlet oneAsString = (one :> string)\n```\n\n----------------------------------------\n\nTITLE: Polymorphic Variant Constraints in ReScript\nDESCRIPTION: Illustrates the different constraint forms for polymorphic variants: closed (exact set), open (lower bound), and upper bound constraints.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/polymorphic-variant.mdx#2025-04-18_snippet_11\n\nLANGUAGE: ReScript\nCODE:\n```\n// Only #Red allowed. Closed.\nlet basic: [#Red] = #Red\n\n// May contain #Red, or any other value. Open\n// here, foreground will actually be inferred as [> #Red | #Green]\nlet foreground: [> #Red] = #Green\n\n// The value must be, at most, one of #Red or #Blue\n// Only #Red and #Blue are valid values\nlet background: [< #Red | #Blue] = #Red\n```\n\n----------------------------------------\n\nTITLE: Using Catch-All Wildcard Pattern in Switch Statement (ReScript)\nDESCRIPTION: Shows how to use the wildcard (_) as a catch-all condition at the top level of a switch statement to handle all unspecified cases.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_11\n\nLANGUAGE: res\nCODE:\n```\nswitch myStatus {\n| Vacations(_) => Js.log(\"Have fun!\")\n| _ => Js.log(\"Ok.\")\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nif (typeof myStatus === \"number\" || myStatus.TAG) {\n  console.log(\"Ok.\");\n} else {\n  console.log(\"Have fun!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Array Filtering in ReasonML\nDESCRIPTION: Creates new array with elements that pass a predicate function test.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/array-2.mdx#2025-04-18_snippet_14\n\nLANGUAGE: reasonml\nCODE:\n```\nlet filter: (t('a), 'a => bool) => t('a);\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet nonEmpty = (s) => {s != \"\"};\nJs.Array2.filter([|\"abc\", \"\", \"\", \"def\", \"ghi\"|], nonEmpty)\n  == [|\"abc\", \"def\", \"ghi\"|];\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching on Nullable Values in ReScript\nDESCRIPTION: Example showing how to use pattern matching with nullable values (Option type) to safely handle presence or absence of a value with compile-time checks.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_13\n\nLANGUAGE: reason\nCODE:\n```\nswitch (myNullableValue) {\n| Some(v) => Js.log(\"value is present\")\n| None => Js.log(\"value is absent\")\n};\n```\n\nLANGUAGE: ml\nCODE:\n```\nmatch myNullableValue with\n| Some v -> Js.log \"value is present\"\n| None -> Js.log \"value is absent\"\n```\n\nLANGUAGE: js\nCODE:\n```\nif (myNullableValue !== undefined) {\n  console.log(\"value is present\");\n} else {\n  console.log(\"value is absent\");\n}\n```\n\n----------------------------------------\n\nTITLE: List Head Function Signature in ReScript\nDESCRIPTION: Defines the signature for the 'hd' function, which returns the first element of a list as an option.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/list.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet hd: t<'a> => option<'a>\n```\n\n----------------------------------------\n\nTITLE: Adding JSX v4 Configuration\nDESCRIPTION: New configuration to add in rescript.json for JSX v4\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/migrate-react.mdx#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsx\": { \"version\": 4 }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Belt.Set Emptiness in ReScript\nDESCRIPTION: Shows how to check if a Belt.Set is empty using the isEmpty function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/set.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet empty = Belt.Set.fromArray([], ~id=module(IntCmp))\nlet notEmpty = Belt.Set.fromArray([1],~id=module(IntCmp))\n\nBelt.Set.isEmpty(empty) /* true */\nBelt.Set.isEmpty(notEmpty) /* false */\n```\n\n----------------------------------------\n\nTITLE: String splitAtMost Function in ReScript\nDESCRIPTION: The splitAtMost function divides a string into an array of substrings with a maximum limit. It splits at each occurrence of the delimiter but returns at most the specified number of substrings.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/string.mdx#2025-04-18_snippet_7\n\nLANGUAGE: res\nCODE:\n```\nlet splitAtMost: (t, ~limit: int, t) => array<t>\n```\n\nLANGUAGE: res\nCODE:\n```\nJs.String.splitAtMost(\"/\", ~limit=3, \"ant/bee/cat/dog/elk\") == [\"ant\", \"bee\", \"cat\"]\nJs.String.splitAtMost(\"/\", ~limit=0, \"ant/bee/cat/dog/elk\") == []\nJs.String.splitAtMost(\"/\", ~limit=9, \"ant/bee/cat/dog/elk\") == [\"ant\", \"bee\", \"cat\", \"dog\", \"elk\"]\n```\n\n----------------------------------------\n\nTITLE: Using min_float function to find minimum of two floats in ReScript\nDESCRIPTION: The min_float function returns the minimum of its two floating point arguments. It takes two floats as input and returns a float.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/math.mdx#2025-04-18_snippet_20\n\nLANGUAGE: res\nCODE:\n```\nlet min_float: (float, float) => float\n```\n\n----------------------------------------\n\nTITLE: Example of toFixedWithPrecision with Zero Padding\nDESCRIPTION: Shows how toFixedWithPrecision pads zeros after the decimal point when necessary.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/float.mdx#2025-04-18_snippet_17\n\nLANGUAGE: re\nCODE:\n```\n/* prints \"0.00\" (note the added zeroes) */\nJs.log @@ Js.Float.toFixedWithPrecision(0., ~digits=2);\n```\n\n----------------------------------------\n\nTITLE: Integer to String with Radix Conversion in ReScript\nDESCRIPTION: Converts an integer to string using specified radix base (2-36 range). Useful for binary, hex, or custom base conversions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/int.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\n/* prints \"110\" */\nJs.log(Js.Int.toStringWithRadix(6, ~radix=2))\n\n/* prints \"deadbeef\" */\nJs.log(Js.Int.toStringWithRadix(3735928559, ~radix=16))\n\n/* prints \"2n9c\" */\nJs.log(Js.Int.toStringWithRadix(123456, ~radix=36))\n```\n\n----------------------------------------\n\nTITLE: Searching for Regular Expression Match in ReScript\nDESCRIPTION: The search function returns the starting position of the first match of a regular expression in a given string, or -1 if there is no match. This is useful for finding the position of a pattern within a string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string.mdx#2025-04-18_snippet_32\n\nLANGUAGE: rescript\nCODE:\n```\nlet search: (Js_re.t, t) => int;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.String.search([%re \"/\\\\d+/\"], \"testing 1 2 3\") == 8;\nJs.String.search([%re \"/\\\\d+/\"], \"no numbers\") == -1;\n```\n\n----------------------------------------\n\nTITLE: Converting String to Lowercase in ReScript\nDESCRIPTION: The toLowerCase function converts all characters in a string to lowercase using Unicode case mappings.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/string-2.mdx#2025-04-18_snippet_31\n\nLANGUAGE: rescript\nCODE:\n```\nlet toLowerCase: t => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.String2.toLowerCase(\"ABC\") == \"abc\"\nJs.String2.toLowerCase(`ΣΠ`) == `σπ`\nJs.String2.toLowerCase(`ΠΣ`) == `πς`\n```\n\n----------------------------------------\n\nTITLE: Creating a JS Object using ReScript Record\nDESCRIPTION: Shows how to use ReScript's record type to create a JavaScript object with type safety.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/newcomer-examples.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ReScript\nCODE:\n```\ntype payload = {\n  name: string,\n  age: int,\n}\n\nlet student1 = {\n  name: \"John\",\n  age: 30,\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar student1 = {\n  name: \"John\",\n  age: 30,\n};\n```\n\n----------------------------------------\n\nTITLE: Bind Function Signature and Example\nDESCRIPTION: Function signature and example for mapping contained values in nullable types using a transformation function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/null.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet bind: (t<'a>, (. 'a) => 'b) => t<'b>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet maybeGreetWorld = (maybeGreeting: Js.null<string>) =>\n  Js.Null.bind(maybeGreeting, (. greeting) => greeting ++ \" world!\")\n```\n\n----------------------------------------\n\nTITLE: Array Element Iteration in ReScript\nDESCRIPTION: forEach and forEachU methods to iterate over array elements and perform side effects. forEach takes a function that receives each element, while forEachU uses uncurried functions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/array.mdx#2025-04-18_snippet_11\n\nLANGUAGE: rescript\nCODE:\n```\nBelt.Array.forEach([\"a\", \"b\", \"c\"], x => Js.log(\"Item: \" ++ x))\n\nlet total = ref(0)\nBelt.Array.forEach([1, 2, 3, 4], x => total := total.contents + x)\n```\n\n----------------------------------------\n\nTITLE: Implementing Array some Method in ReScript\nDESCRIPTION: Function that tests whether at least one element in the array passes the provided test. Returns boolean based on predicate function result.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/array.mdx#2025-04-18_snippet_26\n\nLANGUAGE: rescript\nCODE:\n```\nlet some: ('a => bool, t<'a>) => bool\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet isEven = x => mod(x, 2) == 0\n\nJs.Array.some(isEven, [3, 7, 5, 2, 9]) == true\nJs.Array.some(isEven, [3, 7, 5, 1, 9]) == false\n```\n\n----------------------------------------\n\nTITLE: Basic Unified Operators Usage in ReScript\nDESCRIPTION: Demonstrates how unified operators work with different types including integers, floats, and strings using the same + operator syntax.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2025-04-11-introducing-unified-operators.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nlet addInt = 1 + 2\nlet addFloat = 1.0 + 2.0\nlet concatString = \"Hello\" + \", World!\"\n```\n\n----------------------------------------\n\nTITLE: Comparing Lists Element by Element with Belt.List in ReScript\nDESCRIPTION: The cmp function compares two lists element by element using a provided comparison function. It returns the first non-zero result from the comparison function, or a value based on list length if all elements are equal.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/list.mdx#2025-04-18_snippet_51\n\nLANGUAGE: rescript\nCODE:\n```\nBelt.List.cmp(list{3}, list{3, 7}, (a, b) => compare(a, b)) /* (-1) */\n\nBelt.List.cmp(list{5, 3}, list{5}, (a, b) => compare(a, b)) /* 1 */\n\nBelt.List.cmp(list{1, 3, 5}, list{1, 4, 2}, (a, b) => compare(a, b)) /* (-1) */\n\nBelt.List.cmp(list{1, 3, 5}, list{1, 2, 3}, (a, b) => compare(a, b)) /* 1 */\n\nBelt.List.cmp(list{1, 3, 5}, list{1, 3, 5}, (a, b) => compare(a, b)) /* 0 */\n```\n\n----------------------------------------\n\nTITLE: Finding Array Element Index with Element and Index in ReScript\nDESCRIPTION: Returns the index of the first element in the array that satisfies the provided testing function which receives both the element and its index. Returns -1 if no element satisfies the predicate.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/array-2.mdx#2025-04-18_snippet_18\n\nLANGUAGE: ReScript\nCODE:\n```\nlet findIndexi: (t<'a>, ('a, int) => bool) => int\n```\n\nLANGUAGE: ReScript\nCODE:\n```\n// find index of first positive item at an odd index\nlet positiveOddElement = (item, index) => mod(index, 2) == 1 && item > 0\n\nJs.Array2.findIndexi([66, -33, 55, 88, 22], positiveOddElement) == 3\nJs.Array2.findIndexi([66, -33, 55, -88, 22], positiveOddElement) == -1\n```\n\n----------------------------------------\n\nTITLE: Retrieving UTC Minutes in ReScript\nDESCRIPTION: The getUTCMinutes function returns the number of minutes for a Date object, evaluated in UTC. It binds to JavaScript's Date.getUTCMinutes method.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_36\n\nLANGUAGE: res\nCODE:\n```\nlet getUTCMinutes: t => float\n```\n\nLANGUAGE: res\nCODE:\n```\nJs.Date.getUTCMinutes(exampleDate) == 30.0\n```\n\n----------------------------------------\n\nTITLE: Using isFinite with Regular Numbers\nDESCRIPTION: Example showing that isFinite returns true when checking regular finite numbers.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/float.mdx#2025-04-18_snippet_6\n\nLANGUAGE: re\nCODE:\n```\n/* returns [true] */\nJs.Float.isFinite(1234.);\n```\n\n----------------------------------------\n\nTITLE: Testing All Elements with Predicate in ReasonML\nDESCRIPTION: Function signature for checking if all elements in a MutableSet satisfy a predicate function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_41\n\nLANGUAGE: reasonml\nCODE:\n```\nlet every: (t('value, 'id), 'value => bool) => bool;\n```\n\n----------------------------------------\n\nTITLE: Setting key-value pair in map in MapString module (ReScript)\nDESCRIPTION: Function to add or update a key-value pair in a map, returning a new map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-string.mdx#2025-04-18_snippet_40\n\nLANGUAGE: reason\nCODE:\n```\nlet set: (t('v), key, 'v) => t('v);\n```\n\n----------------------------------------\n\nTITLE: Creating HashMap with Make Function\nDESCRIPTION: Creates a new hash map with specified hint size and identity module for key comparison.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-map.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\nmodule IntHash = Belt.Id.MakeHashable({\n  type t = int\n  let hash = a => a\n  let eq = (a, b) => a == b\n})\n\nlet hMap = Belt.HashMap.make(~hintSize=10, ~id=module(IntHash))\n\nBelt.HashMap.set(hMap, 0, \"a\")\n```\n\n----------------------------------------\n\nTITLE: Using fromFloat Function in ReScript\nDESCRIPTION: Demonstrates the use of the fromFloat function to create a Date object from a float value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nJs.Date.fromFloat(123456654321.0) == exampleDate\n```\n\n----------------------------------------\n\nTITLE: Accessing Record Fields in ReScript\nDESCRIPTION: Demonstrates how to access fields of a record using dot notation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/record.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet name = me.name\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar name = \"Big ReScript\";\n```\n\n----------------------------------------\n\nTITLE: JSON Object Decoding Function in ReScript\nDESCRIPTION: Function signature for attempting to decode a JSON value as an object. Returns None if the JSON value is not an object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/json.mdx#2025-04-18_snippet_7\n\nLANGUAGE: reason\nCODE:\n```\nlet decodeObject: t => option(Js_dict.t(t));\n```\n\n----------------------------------------\n\nTITLE: Default Value Handling in ReScript\nDESCRIPTION: Function signatures and examples for handling default values with Options.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/option.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\nlet getWithDefault: ('a, option<'a>) => 'a\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.Option.getWithDefault(1066, Some(15)) == 15\nJs.Option.getWithDefault(1066, None) == 1066\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet default: ('a, option<'a>) => 'a\n```\n\n----------------------------------------\n\nTITLE: Sign Functions in ReScript\nDESCRIPTION: Functions to determine the sign of a number for integers and floats.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/math.mdx#2025-04-18_snippet_49\n\nLANGUAGE: rescript\nCODE:\n```\nlet sign_int: int => int;\nlet sign_float: float => float;\n```\n\n----------------------------------------\n\nTITLE: Creating and checking empty maps in ReScript\nDESCRIPTION: Functions for creating an empty map and checking if a map is empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-string.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\nlet empty: t<'v>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet isEmpty: t<'v> => bool\n```\n\n----------------------------------------\n\nTITLE: Defining Array types in ReScript\nDESCRIPTION: Type definitions for JavaScript arrays and array-like objects in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/array-2.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reason\nCODE:\n```\ntype t('a) = array('a);\n```\n\nLANGUAGE: reason\nCODE:\n```\ntype array_like('a);\n```\n\n----------------------------------------\n\nTITLE: Removing key from map in MapString module (ReScript)\nDESCRIPTION: Function to remove a key and its associated value from a map, returning a new map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-string.mdx#2025-04-18_snippet_38\n\nLANGUAGE: reason\nCODE:\n```\nlet remove: (t('v), key) => t('v);\n```\n\n----------------------------------------\n\nTITLE: Get Value from ReScript Belt.Set\nDESCRIPTION: Returns the reference of a value from the collection using a specified comparator. Returns None if the element does not exist.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set.mdx#2025-04-18_snippet_27\n\nLANGUAGE: res\nCODE:\n```\nlet get: (t<'value, 'id>, 'value) => option<'value>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet s0 = Belt.Set.fromArray([1,2,3,4,5], ~id=module(IntCmp))\n\ns0->Belt.Set.get(3) /* Some(3) */\ns0->Belt.Set.get(20) /* None */\n```\n\n----------------------------------------\n\nTITLE: Comparing Lists by Length with Belt.List in ReScript\nDESCRIPTION: The cmpByLength function compares two lists solely by their length, returning -1, 0, or 1 if the first list is shorter than, equal to, or longer than the second list respectively.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/list.mdx#2025-04-18_snippet_50\n\nLANGUAGE: rescript\nCODE:\n```\nBelt.List.cmpByLength(list{1, 2}, list{3, 4, 5, 6}) /* -1 */\n\nBelt.List.cmpByLength(list{1, 2, 3}, list{4, 5, 6}) /* = 0 */\n\nBelt.List.cmpByLength(list{1, 2, 3, 4}, list{5, 6}) /* = 1 */\n```\n\n----------------------------------------\n\nTITLE: Defining ArrayLike Type in ReScript\nDESCRIPTION: Generic type definition for array-like structures in ReScript, allowing for type-safe interaction with JavaScript array-like objects.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\ntype array_like<'a>\n```\n\n----------------------------------------\n\nTITLE: Converting Belt.Set to Array in ReScript\nDESCRIPTION: Shows how to convert a Belt.Set to an array of ordered elements using the toArray function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set.mdx#2025-04-18_snippet_21\n\nLANGUAGE: rescript\nCODE:\n```\nlet s0 = Belt.Set.fromArray([3,2,1,5], ~id=module(IntCmp))\n\ns0->Belt.Set.toArray /* [1,2,3,5] */\n```\n\n----------------------------------------\n\nTITLE: Example of toExponentialWithPrecision\nDESCRIPTION: Demonstrates how to use toExponentialWithPrecision to format a number with a specific number of decimal places.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/float.mdx#2025-04-18_snippet_11\n\nLANGUAGE: re\nCODE:\n```\n/* prints \"7.71e+1\" */\nJs.log @@ Js.Float.toExponentialWithPrecision(77.1234, ~digits=2);\n```\n\n----------------------------------------\n\nTITLE: Defining Array-Like Type in ReScript\nDESCRIPTION: Generic type definition for array-like structures in JavaScript, parameterized with type variable 'a to support different element types.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array-2.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\ntype array_like<'a>\n```\n\n----------------------------------------\n\nTITLE: Reduce Array Elements\nDESCRIPTION: Applies a function against an accumulator and each element in the typed array to reduce it to a single value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_type-s.mdx#2025-04-18_snippet_44\n\nLANGUAGE: res\nCODE:\n```\nlet reduce: ((. 'b, elt) => 'b, 'b, t) => 'b\n```\n\n----------------------------------------\n\nTITLE: Get Set Size and Convert to List/Array\nDESCRIPTION: Functions for getting set size and converting set to list or array formats.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set-dict.mdx#2025-04-18_snippet_6\n\nLANGUAGE: res\nCODE:\n```\nlet size: t<'value, 'id> => int\n```\n\nLANGUAGE: res\nCODE:\n```\nlet toList: t<'value, 'id> => list<'value>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet toArray: t<'value, 'id> => array<'value>\n```\n\n----------------------------------------\n\nTITLE: Defining Nullable Type Alias in ReScript\nDESCRIPTION: Defines a type alias 't' for Js.null_undefined to represent nullable values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/nullable.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype t<'a> = Js.null_undefined<'a>\n```\n\n----------------------------------------\n\nTITLE: Defining MakeComparable module in ReScript\nDESCRIPTION: Defines a module 'MakeComparable' that takes a module with a type 't' and a curried comparison function, and returns a Comparable module with the same type 't'.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/id.mdx#2025-04-18_snippet_6\n\nLANGUAGE: ReScript\nCODE:\n```\nmodule MakeComparable: (M: {type t; let cmp: (t, t) => int;}) => Comparable with type t = M.t;\n```\n\n----------------------------------------\n\nTITLE: Right to Left Array Reduction (reduceRight) in ReScript\nDESCRIPTION: Function that reduces an array from right to left. Takes an array, reducer function with accumulator/element parameters, and initial value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/array-2.mdx#2025-04-18_snippet_17\n\nLANGUAGE: reasonml\nCODE:\n```\nlet reduceRight: (t('a), ('b, 'a) => 'b, 'b) => 'b;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet sumOfSquares = (accumulator, item) => {\n  accumulator + (item * item);\n};\n\nJs.Array2.reduceRight([|10, 2, 4|], sumOfSquares, 0) == 120;\nJs.Array2.reduceRight([|2.0, 4.0|],\n  (acc, item) => {item /. acc}, 1.0) == 0.5;\n```\n\n----------------------------------------\n\nTITLE: Searching Elements in Int32Array\nDESCRIPTION: Functions to check for element presence and find element positions in the array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-32-array.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\nlet includes: (elt, t) => bool\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet indexOf: (elt, t) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet indexOfFrom: (elt, ~from: int, t) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet lastIndexOf: (elt, t) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet lastIndexOfFrom: (elt, ~from: int, t) => int\n```\n\n----------------------------------------\n\nTITLE: Handling Node.js-specific Global Values in ReScript\nDESCRIPTION: Demonstrates how to safely handle Node.js-specific global values like __filename using the %external syntax.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/bind-to-global-js-values.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nswitch %external(__filename) {\n| Some(f) => Js.log(f)\n| None => Js.log(\"non-node environment\")\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar match = typeof (__filename) === \"undefined\" ? undefined : (__filename);\n\nif (match !== undefined) {\n  console.log(match);\n} else {\n  console.log(\"non-node environment\");\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Value by Key in ReScript MapInt Module\nDESCRIPTION: Function signature for getting a value by its key, returning an option.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-int.mdx#2025-04-18_snippet_33\n\nLANGUAGE: rescript\nCODE:\n```\nlet get: (t<'v>, key) => option<'v>\n```\n\n----------------------------------------\n\nTITLE: Finding Difference of Belt.Sets in ReScript\nDESCRIPTION: Shows how to find the difference between two Belt.Sets using the diff function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set.mdx#2025-04-18_snippet_11\n\nLANGUAGE: rescript\nCODE:\n```\nlet s0 = Belt.Set.fromArray([5,2,3,5,6], ~id=module(IntCmp))\nlet s1 = Belt.Set.fromArray([5,2,3,1,5,4], ~id=module(IntCmp))\nBelt.Set.toArray(Belt.Set.diff(s0, s1)) /* [6] */\nBelt.Set.toArray(Belt.Set.diff(s1,s0)) /* [1,4] */\n```\n\n----------------------------------------\n\nTITLE: Filtering Array Elements in ReScript\nDESCRIPTION: Creates new array with elements that pass predicate function test.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array-2.mdx#2025-04-18_snippet_25\n\nLANGUAGE: res\nCODE:\n```\nlet nonEmpty = s => s != \"\"\nJs.Array2.filter([\"abc\", \"\", \"\", \"def\", \"ghi\"], nonEmpty) == [\"abc\", \"def\", \"ghi\"]\n```\n\n----------------------------------------\n\nTITLE: Defining HashSet Types in ReScript\nDESCRIPTION: This snippet shows the type signatures for the HashSet (t) and its associated id type. These types are parameterized to allow for custom hash behavior.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-set.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\ntype t<'a, 'id>\n\ntype id<'a, 'id> = Belt.Id.hashable<'a, 'id>\n```\n\n----------------------------------------\n\nTITLE: Extracting keys as array in MapString module (ReScript)\nDESCRIPTION: Function to extract all keys from a map as an array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-string.mdx#2025-04-18_snippet_23\n\nLANGUAGE: reason\nCODE:\n```\nlet keysToArray: t('v) => array(key);\n```\n\n----------------------------------------\n\nTITLE: Vector Iteration Operation\nDESCRIPTION: Iterates over vector elements applying a function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/vector.mdx#2025-04-18_snippet_6\n\nLANGUAGE: res\nCODE:\n```\nlet iter: ((. 'a) => unit, t<'a>) => unit\n```\n\n----------------------------------------\n\nTITLE: FromOption Function Signature\nDESCRIPTION: Function signature for converting option type to nullable type\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/nullable.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromOption: option<'a> => t<'a>\n```\n\n----------------------------------------\n\nTITLE: Clearing Storage in ReScript\nDESCRIPTION: External binding for clearing all items from storage.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/dom/storage.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reason\nCODE:\n```\nexternal clear: t => unit = \"clear\"\n```\n\n----------------------------------------\n\nTITLE: Defining MakeHashable module in ReScript\nDESCRIPTION: Defines a module 'MakeHashable' that takes a module with a type 't', a curried hash function, and a curried equality function, and returns a Hashable module with the same type 't'.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/id.mdx#2025-04-18_snippet_11\n\nLANGUAGE: ReScript\nCODE:\n```\nmodule MakeHashable: (M: {type t; let hash: t => int; let eq: (t, t) => bool;}) => Hashable with type t = M.t;\n```\n\n----------------------------------------\n\nTITLE: Local Storage Binding - ReScript\nDESCRIPTION: External binding to access the browser's localStorage object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/dom/storage2.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\n@bs.val external localStorage: t = \"localStorage\"\n```\n\n----------------------------------------\n\nTITLE: Basic Exception Handling in ReScript\nDESCRIPTION: Demonstrates basic exception handling with a getItem function that either returns an item or raises Not_found exception.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/exception.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\nlet getItem = (items) =>\n  if (callSomeFunctionThatThrows()) {\n    // return the found item here\n    1;\n  } else {\n    raise(Not_found);\n  };\n\nlet result =\n  try (getItem([|1, 2, 3|])) {\n  | Not_found => 0 /* Default value if getItem throws */\n  };\n```\n\nLANGUAGE: ml\nCODE:\n```\nlet getItem items =\n  if callSomeFunctionThatThrows () then\n    (* return the found item here *)\n    1\n  else\n    raise Not_found\n\nlet result =\n  try getItem [|1; 2; 3|] with\n  | Not_found -> 0 (* Default value if getItem throws *)\n```\n\n----------------------------------------\n\nTITLE: Iterating Through List Elements in ReScript\nDESCRIPTION: The forEach function applies a side-effect function to each element in the list without creating a new list.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/list.mdx#2025-04-18_snippet_33\n\nLANGUAGE: rescript\nCODE:\n```\nlet forEach: (t<'a>, 'a => 'b) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nBelt.List.forEach(list{\"a\", \"b\", \"c\"}, x => Js.log(\"Item: \" ++ x))\n/*\n  prints:\n  Item: a\n  Item: b\n  Item: c\n*/\n```\n\n----------------------------------------\n\nTITLE: Ternary Expressions in ReScript\nDESCRIPTION: Shows ReScript's ternary operator syntax, which is similar to JavaScript but less commonly used than if-else in ReScript code.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/control-flow.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\nlet message = isMorning ? \"Good morning!\" : \"Hello!\"\n```\n\nLANGUAGE: js\nCODE:\n```\nvar message = isMorning ? \"Good morning!\" : \"Hello!\";\n```\n\n----------------------------------------\n\nTITLE: Binding to Global Module Methods in ReScript\nDESCRIPTION: Demonstrates how to bind to methods within global modules, such as Math.random. It uses the @bs.scope attribute to specify the module path.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/bind-to-global-js-values.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\n[@bs.scope \"Math\"] [@bs.val] external random: unit => float = \"random\";\nlet someNumber = random();\n```\n\nLANGUAGE: ocaml\nCODE:\n```\nexternal random : unit -> float = \"random\" [@@bs.scope \"Math\"][@@bs.val]\nlet someNumber = random ()\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar someNumber = Math.random();\n```\n\n----------------------------------------\n\nTITLE: Array Element Addition Operations in ReScript\nDESCRIPTION: Shows methods for adding elements to arrays including unshift operations that add elements to the beginning of arrays. These operations modify the original array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/array-2.mdx#2025-04-18_snippet_8\n\nLANGUAGE: res\nCODE:\n```\nlet arr = [\"b\", \"c\", \"d\"]\nJs.Array2.unshift(arr, \"a\") == 4\narr == [\"a\", \"b\", \"c\", \"d\"]\n\nlet arr2 = [\"d\", \"e\"]\nJs.Array2.unshiftMany(arr2, [\"a\", \"b\", \"c\"]) == 5\narr2 == [\"a\", \"b\", \"c\", \"d\", \"e\"]\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Set with PairComparator in ReasonML\nDESCRIPTION: Demonstrates how to create a custom comparator for pairs of integers and use it to initialize a set. The example shows creating a set and adding an element to it.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reasonml\nCODE:\n```\nmodule PairComparator =\n  Belt.Id.MakeComparable({\n    type t = (int, int);\n    let cmp = ((a0, a1), (b0, b1)) =>\n      switch (Pervasives.compare(a0, b0)) {\n      | 0 => Pervasives.compare(a1, b1)\n      | c => c\n      };\n  });\n\nlet mySet = Belt.Set.make(~id=(module PairComparator));\nlet mySet2 = Belt.Set.add(mySet, (1, 2));\n```\n\n----------------------------------------\n\nTITLE: Combining Option Values in ReScript\nDESCRIPTION: Function signature and examples for combining two Option values, taking the first Some value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/option.mdx#2025-04-18_snippet_11\n\nLANGUAGE: rescript\nCODE:\n```\nlet firstSome: (option<'a>, option<'a>) => option<'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.Option.firstSome(Some(\"one\"), Some(\"two\")) == Some(\"one\")\nJs.Option.firstSome(Some(\"one\"), None) == Some(\"one\")\nJs.Option.firstSome(None, Some(\"two\")) == Some(\"two\")\nJs.Option.firstSome(None, None) == None\n```\n\n----------------------------------------\n\nTITLE: Dictionary Map Operation\nDESCRIPTION: Type signature and example for mapping over dictionary values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/dict.mdx#2025-04-18_snippet_13\n\nLANGUAGE: res\nCODE:\n```\nlet map: ((. 'a) => 'b, t<'a>) => t<'b>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet prices = Js.Dict.fromList(list{(\"pen\", 1.00), (\"book\", 5.00), (\"stapler\", 7.00)})\n\nlet discount = (. price) => price *. 0.90\nlet salePrices = Js.Dict.map(discount, prices)\n\nsalePrices == Js.Dict.fromList(list{(\"pen\", 0.90), (\"book\", 4.50), (\"stapler\", 6.30)})\n```\n\n----------------------------------------\n\nTITLE: Mapping values in MapDict\nDESCRIPTION: Function signature for transforming all values in a map using a curried function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_53\n\nLANGUAGE: reason\nCODE:\n```\nlet map: (t('k, 'a, 'id), 'a => 'b) => t('k, 'b, 'id);\n```\n\n----------------------------------------\n\nTITLE: Testing Array Elements with Index using Everyi in ReScript\nDESCRIPTION: Tests array elements using predicate function that takes both element and index. Returns true if predicate is true for all items.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array-2.mdx#2025-04-18_snippet_24\n\nLANGUAGE: res\nCODE:\n```\nlet evenIndexPositive = (item, index) => mod(index, 2) == 0 ? item > 0 : true\n\nJs.Array2.everyi([6, -3, 5, 8], evenIndexPositive) == true\nJs.Array2.everyi([6, 3, -5, 8], evenIndexPositive) == false\n```\n\n----------------------------------------\n\nTITLE: Defining DOM Event Types in ReScript\nDESCRIPTION: Type definitions for various DOM events including mouse, keyboard, and touch events. These represent different types of user interactions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/dom.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\ntype event\ntype uiEvent\ntype mouseEvent\ntype keyboardEvent\ntype touchEvent\ntype wheelEvent\ntype focusEvent\ntype inputEvent\n```\n\n----------------------------------------\n\nTITLE: Basic Array Operations with Pipe-First Syntax\nDESCRIPTION: Demonstrates array operations using both traditional and pipe-first syntax to calculate sum of squares of even numbers.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array-2.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nlet isEven = x => mod(x, 2) == 0\nlet square = x => x * x\nlet result = {\n  open Js.Array2\n  reduce(map(filter([5, 2, 3, 4, 1], isEven), square), \"+\", 0)\n}\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet isEven = x => mod(x, 2) == 0\nlet square = x => x * x\nlet result = {\n  open Js.Array2\n  [5, 2, 3, 4, 1]->filter(isEven)->map(square)->reduce(\"+\", 0)\n}\n```\n\n----------------------------------------\n\nTITLE: Checking if a MutableSet is Empty in ReasonML\nDESCRIPTION: Function signature for checking if a MutableSet contains no elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_9\n\nLANGUAGE: reasonml\nCODE:\n```\nlet isEmpty: t('a, 'b) => bool;\n```\n\n----------------------------------------\n\nTITLE: Defining a Record Type in a Separate Module\nDESCRIPTION: Demonstrates how to define a record type in a separate file (School.res). This type can then be referenced from other modules.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/record.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\n// School.res\ntype person = {age: int, name: string}\n```\n\nLANGUAGE: js\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Using some Function in ReScript\nDESCRIPTION: The some function tests whether at least one element in the array passes the test implemented by the provided function. Examples show testing for even numbers in arrays.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array-2.mdx#2025-04-18_snippet_39\n\nLANGUAGE: res\nCODE:\n```\nlet isEven = x => mod(x, 2) == 0\n\nJs.Array2.some([3, 7, 5, 2, 9], isEven) == true\nJs.Array2.some([3, 7, 5, 1, 9], isEven) == false\n```\n\n----------------------------------------\n\nTITLE: ReScript Promise.all2 Implementation\nDESCRIPTION: Function signature for combining two Promises into a tuple Promise\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/promise.mdx#2025-04-18_snippet_6\n\nLANGUAGE: res\nCODE:\n```\nlet all2: ((t<'a0>, t<'a1>)) => t<('a0, 'a1)>\n```\n\n----------------------------------------\n\nTITLE: Reducing MutableQueue with Uncurried Function in ReScript\nDESCRIPTION: The 'reduceU' function applies an uncurried reducing function to the queue, accumulating a result.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-queue.mdx#2025-04-18_snippet_18\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduceU: (t<'a>, 'b, (. 'b, 'a) => 'b) => 'b\n```\n\n----------------------------------------\n\nTITLE: Association List Modification in ReScript\nDESCRIPTION: Updates or adds a key-value pair in an association list using a custom equality function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/list.mdx#2025-04-18_snippet_15\n\nLANGUAGE: res\nCODE:\n```\nlist{(1, \"a\"), (2, \"b\"), (3, \"c\")}->Belt.List.setAssoc(2, \"x\", (a, b) => a == b)\n\nlist{(9, \"morning\"), (3, \"morning?!\"), (22, \"night\")}\n->Belt.List.setAssoc(15, \"afternoon\", (a, b) => mod(a, 12) == mod(b, 12))\n```\n\n----------------------------------------\n\nTITLE: Extract Slice from Array\nDESCRIPTION: Returns a new typed array containing elements from the specified range.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_type-s.mdx#2025-04-18_snippet_25\n\nLANGUAGE: res\nCODE:\n```\nlet slice: (~start: int, ~end_: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Conditional Block Scope in ReScript\nDESCRIPTION: Demonstrates how ReScript's block scoping works in conditional statements. Variables declared inside the if block are not accessible outside of it.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/let-binding.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nif displayGreeting {\n  let message = \"Enjoying the docs so far?\"\n  Console.log(message)\n}\n// `message` not accessible here!\n```\n\nLANGUAGE: js\nCODE:\n```\nif (displayGreeting) {\n  console.log(\"Enjoying the docs so far?\");\n}\n```\n\n----------------------------------------\n\nTITLE: Zipping Two Arrays into Pairs in ReScript\nDESCRIPTION: The zip function creates an array of pairs from corresponding elements of two input arrays, stopping with the shorter array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/array.mdx#2025-04-18_snippet_22\n\nLANGUAGE: ReScript\nCODE:\n```\nlet zip: (array<'a>, array<'b>) => array<('a, 'b)>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nBelt.Array.zip([1, 2], [3, 4, 5]) == [(1, 3), (2, 4)]\n```\n\n----------------------------------------\n\nTITLE: Configuring Post-Build JavaScript Processing in bsconfig.json\nDESCRIPTION: Sets up a post-build hook that runs after each file is compiled. This allows integration with JavaScript build systems, but should be used sparingly as it can slow down builds.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/build-configuration.mdx#2025-04-18_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"js-post-build\": {\n    \"cmd\": \"/path/to/node ../../postProcessTheFile.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Zipping Arrays in ReScript\nDESCRIPTION: Creates an array of pairs from corresponding elements of two arrays. Stops with the length of the shorter array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/array.mdx#2025-04-18_snippet_22\n\nLANGUAGE: reason\nCODE:\n```\nlet zip: (array('a), array('b)) => array(('a, 'b));\n```\n\nLANGUAGE: reason\nCODE:\n```\nBelt.Array.zip([|1, 2|], [|3, 4, 5|]) == [|(1, 3), (2, 4)|]\n```\n\n----------------------------------------\n\nTITLE: Zipping Arrays with Function in ReScript\nDESCRIPTION: Creates an array by applying a function to corresponding elements of two arrays. Stops with the shorter array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/array.mdx#2025-04-18_snippet_24\n\nLANGUAGE: reason\nCODE:\n```\nlet zipBy: (array('a), array('b), ('a, 'b) => 'c) => array('c);\n```\n\nLANGUAGE: reason\nCODE:\n```\nBelt.Array.zipBy([|1, 2, 3|], [|4, 5|], (a, b) => 2 * a + b) == [|6, 9|];\n```\n\n----------------------------------------\n\nTITLE: Filtering Elements in ReScript Belt.MutableSet\nDESCRIPTION: The 'keepU' and 'keep' functions filter elements in a MutableSet based on a predicate. They return a new set containing only the elements that satisfy the given condition.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_46\n\nLANGUAGE: reason\nCODE:\n```\nlet keepU: (t('value, 'id), [@bs] ('value => bool)) => t('value, 'id);\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet keep: (t('value, 'id), 'value => bool) => t('value, 'id);\n```\n\nLANGUAGE: reason\nCODE:\n```\nmodule IntCmp =\n  Belt.Id.MakeComparable({\n    type t = int;\n    let cmp = Pervasives.compare;\n  });\n\nlet isEven = x => x mod 2 == 0;\n\nlet s0 = Belt.MutableSet.fromArray([|1,2,3,4,5|], ~id=(module IntCmp));\nlet s1 = s0->Belt.MutableSet.keep(isEven);\n\ns1->Belt.MutableSet.toArray; /* [|2, 4|] */\n```\n\n----------------------------------------\n\nTITLE: Installing ReScript with yarn\nDESCRIPTION: Command to install ReScript and ReScript Core using yarn package manager.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/installation.mdx#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add rescript @rescript/core\n```\n\n----------------------------------------\n\nTITLE: Find Element in Float32Array\nDESCRIPTION: Returns the first element in the Float32Array that satisfies the provided testing function, or undefined if not found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_36\n\nLANGUAGE: rescript\nCODE:\n```\nlet find: ((. elt) => bool, t) => Js.undefined<elt>\n```\n\n----------------------------------------\n\nTITLE: Filling Array Segments in ReScript\nDESCRIPTION: Modifies an array in place, setting a range of elements to a specified value. Supports negative offsets and handles out-of-bounds gracefully.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/array.mdx#2025-04-18_snippet_31\n\nLANGUAGE: reason\nCODE:\n```\nlet fill: (array('a), ~offset: int, ~len: int, 'a) => unit;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet arr = Belt.Array.makeBy(5, (i) => i);\n\nBelt.Array.fill(arr, ~offset=2, ~len=2, 9);\n\narr == [|0, 1, 9, 9, 4|];\n\nBelt.Array.fill(arr, ~offset=7, ~len=2, 8);\n\narr == [|0, 1, 9, 9, 4|];\n```\n\n----------------------------------------\n\nTITLE: Creating a new ReScript project with bun\nDESCRIPTION: Command to create a new ReScript project using the create-rescript-app generator with bun.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/installation.mdx#2025-04-18_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nbun create rescript-app\n```\n\n----------------------------------------\n\nTITLE: Creating a new ReScript project with npm\nDESCRIPTION: Command to create a new ReScript project using the create-rescript-app generator with npm.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/installation.mdx#2025-04-18_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm create rescript-app@latest\n```\n\n----------------------------------------\n\nTITLE: Creating Uninitialized Arrays in ReScript\nDESCRIPTION: Creates an array of specified length filled with undefined values. The type of data must be specified.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/array.mdx#2025-04-18_snippet_5\n\nLANGUAGE: ReScript\nCODE:\n```\nlet makeUninitialized: int => array<Js.undefined<'a>>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet arr: array<Js.undefined<string>> = Belt.Array.makeUninitialized(5)\n\nBelt.Array.getExn(arr, 0) == Js.undefined\n```\n\n----------------------------------------\n\nTITLE: Trigonometric Functions in ReScript\nDESCRIPTION: Implementation of trigonometric functions including arc functions and their hyperbolic variants.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/math.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nlet acos: float => float\nlet acosh: float => float\nlet asin: float => float\nlet asinh: float => float\nlet atan: float => float\nlet atanh: float => float\nlet atan2: (~y: float, ~x: float, unit) => float\n```\n\n----------------------------------------\n\nTITLE: Transferring Elements Between MutableQueues in ReScript\nDESCRIPTION: The 'transfer' function moves all elements from one queue to the end of another queue in constant time, then clears the first queue.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-queue.mdx#2025-04-18_snippet_20\n\nLANGUAGE: rescript\nCODE:\n```\nlet transfer: (t<'a>, t<'a>) => unit\n```\n\n----------------------------------------\n\nTITLE: Setting Item in Storage in ReScript\nDESCRIPTION: External binding for setting an item in storage with a key-value pair.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/dom/storage2.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reasonml\nCODE:\n```\nexternal setItem: (t, string, string) => unit = \"setItem\"\n```\n\n----------------------------------------\n\nTITLE: Converting Float to String in ReScript\nDESCRIPTION: Converts a float value to its string representation. Uses JavaScript's String constructor internally for the conversion.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/float.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet toString: float => string\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.log(Belt.Float.toString(1.0) === \"1.0\") /* true */\n```\n\n----------------------------------------\n\nTITLE: Updating value in MapString module (ReScript)\nDESCRIPTION: Function to update a value for a given key using a function, returning a new map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-string.mdx#2025-04-18_snippet_42\n\nLANGUAGE: reason\nCODE:\n```\nlet update: (t('v), key, option('v) => option('v)) => t('v);\n```\n\n----------------------------------------\n\nTITLE: JSON Type Definition in ReScript\nDESCRIPTION: Core type definition for JSON data structure.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/json.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\ntype t\n```\n\n----------------------------------------\n\nTITLE: Generating Record Field Accessors in ReScript\nDESCRIPTION: Uses @deriving(accessors) on a record type to create accessor functions for its field names. This enables using record field names as functions for operations like mapping.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/generate-converters-accessors.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\n@deriving(accessors)\ntype pet = {name: string}\n\nlet pets = [{name: \"bob\"}, {name: \"bob2\"}]\n\npets\n ->Belt.Array.map(name)\n ->Js.Array2.joinWith(\"&\")\n ->Js.log\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction name(param) {\n  return param.name;\n}\n\nvar pets = [\n  {\n    name: \"bob\"\n  },\n  {\n    name: \"bob2\"\n  }\n];\n\nconsole.log(Belt_Array.map(pets, name).join(\"&\"));\n```\n\n----------------------------------------\n\nTITLE: Setting a key-value pair in ReScript mutable map\nDESCRIPTION: Associates the given value with the given key in the map as an in-place modification.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_39\n\nLANGUAGE: reasonml\nCODE:\n```\nlet set: (t('a), key, 'a) => unit;\n```\n\n----------------------------------------\n\nTITLE: If Statement Without Else in ReScript\nDESCRIPTION: Shows an if statement without the else branch, which implicitly returns the unit value () if the condition is false. This is a common pattern for executing side effects conditionally.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/control-flow.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\nif showMenu {\n  displayMenu()\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nif (showMenu) {\n  displayMenu();\n}\n```\n\n----------------------------------------\n\nTITLE: Converting String to Uppercase in ReScript\nDESCRIPTION: The toUpperCase function converts all characters in a string to uppercase using Unicode case mappings.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/string-2.mdx#2025-04-18_snippet_32\n\nLANGUAGE: rescript\nCODE:\n```\nlet toUpperCase: t => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.String2.toUpperCase(\"abc\") == \"ABC\"\nJs.String2.toUpperCase(`Straße`) == `STRASSE`\nJs.String2.toUpperCase(`πς`) == `ΠΣ`\n```\n\n----------------------------------------\n\nTITLE: Trimming Whitespace from String in ReScript\nDESCRIPTION: The trim function removes whitespace from both ends of a string. It leaves internal whitespace intact.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string-2.mdx#2025-04-18_snippet_27\n\nLANGUAGE: reason\nCODE:\n```\nlet trim: t => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nJs.String2.trim(\"   abc def   \") == \"abc def\";\nJs.String2.trim(\"\\n\\r\\t abc def \\n\\n\\t\\r \") == \"abc def\";\n```\n\n----------------------------------------\n\nTITLE: Checking set equality in ReScript\nDESCRIPTION: Tests whether two sets contain exactly the same elements, returning a boolean result.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-int.mdx#2025-04-18_snippet_16\n\nLANGUAGE: reason\nCODE:\n```\nlet eq: (t, t) => bool;\n```\n\n----------------------------------------\n\nTITLE: List Flatten Function Signature in ReScript\nDESCRIPTION: Defines the signature for the 'flatten' function, which flattens a list of lists into a single list.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/list.mdx#2025-04-18_snippet_15\n\nLANGUAGE: rescript\nCODE:\n```\nlet flatten: t<t<'a>> => t<'a>\n```\n\n----------------------------------------\n\nTITLE: Implementing eqU and eq Functions in ReScript\nDESCRIPTION: The eqU and eq functions check if two arrays are equal using a custom equality function. They return a boolean indicating whether the arrays are equal.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/array.mdx#2025-04-18_snippet_40\n\nLANGUAGE: ReScript\nCODE:\n```\nlet eqU: (array('a), array('a), [@bs] (('a, 'a) => bool)) => bool;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet eq: (array('a), array('a), ('a, 'a) => bool) => bool;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nBelt.Array.eq([|1, 2, 3|], [|(-1), (-2), (-3)|], (a, b) => abs(a) == abs(b)) == true;\n```\n\n----------------------------------------\n\nTITLE: Extracting Substring in ReScript\nDESCRIPTION: The slice function extracts a portion of a string and returns it as a new string. It takes start and end indices, with support for negative indices. If the end index is greater than the string length, it is treated as the string length.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string.mdx#2025-04-18_snippet_33\n\nLANGUAGE: rescript\nCODE:\n```\nlet slice: (~from: int, ~to_: int, t) => t;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.String.slice(~from=2, ~to_=5, \"abcdefg\") == \"cde\";\nJs.String.slice(~from=2, ~to_=9, \"abcdefg\") == \"cdefg\";\nJs.String.slice(~from=(-4), ~to_=(-2), \"abcdefg\") == \"de\";\nJs.String.slice(~from=5, ~to_=1, \"abcdefg\") == \"\";\n```\n\n----------------------------------------\n\nTITLE: Checking Set Equality in ReasonML\nDESCRIPTION: Demonstrates how to check if two sets contain exactly the same elements, regardless of the order in which they were added.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set.mdx#2025-04-18_snippet_18\n\nLANGUAGE: reasonml\nCODE:\n```\nlet eq: (t('value, 'id), t('value, 'id)) => bool;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet s0 = Belt.Set.fromArray([|5,2,3|], ~id=(module IntCmp));\nlet s1 = Belt.Set.fromArray([|3,2,5|], ~id=(module IntCmp));\n\nBelt.Set.eq(s0, s1); /* true */\n```\n\n----------------------------------------\n\nTITLE: Getting List Tail in ReScript\nDESCRIPTION: The tail function returns all elements except the first wrapped in an option, or None if the list is empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/list.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet tail: t<'a> => option<t<'a>>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nBelt.List.tail(list{1, 2, 3}) // Some(list{2, 3})\n\nBelt.List.tail(list{}) // None\n```\n\n----------------------------------------\n\nTITLE: Float NaN Check Function\nDESCRIPTION: Function signature for testing if a given float value is NaN.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/float.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet isNaN: float => bool\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Set Elements in ReasonML\nDESCRIPTION: Shows how to apply a function to each element of a set in increasing order using forEach.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set.mdx#2025-04-18_snippet_20\n\nLANGUAGE: reasonml\nCODE:\n```\nlet forEach: (t('value, 'id), 'value => unit) => unit;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet s0 = Belt.Set.fromArray([|5,2,3,5,6|], ~id=(module IntCmp));\nlet acc = ref([]);\ns0->Belt.Set.forEach(x => {\n  acc := Belt.List.add(acc^, x)\n});\nacc; /* [6,5,3,2] */\n```\n\n----------------------------------------\n\nTITLE: Random Number Generation in ReScript\nDESCRIPTION: Functions for generating random numbers.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/math.mdx#2025-04-18_snippet_47\n\nLANGUAGE: rescript\nCODE:\n```\nlet random: unit => float;\nlet random_int: (int, int) => int;\n```\n\n----------------------------------------\n\nTITLE: Array Subsetting Methods for Uint8Array\nDESCRIPTION: Functions to create new arrays from portions of existing ones, with various parameters for start and end indices.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_10\n\nLANGUAGE: res\nCODE:\n```\nlet slice: (~start: int, ~end_: int, t) => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet copy: t => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet sliceFrom: (int, t) => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet subarray: (~start: int, ~end_: int, t) => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet subarrayFrom: (int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Creating a Belt.Set from an Array in ReScript\nDESCRIPTION: Demonstrates how to create a Belt.Set from an array of integers using the IntCmp comparator.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet s0 = Belt.Set.fromArray([1, 3, 2, 4], ~id=module(IntCmp))\n\ns0->Belt.Set.toArray /* [1, 2, 3, 4] */\n```\n\n----------------------------------------\n\nTITLE: Setting Minutes, Seconds, and Milliseconds with setUTCMinutesSMs in ReScript\nDESCRIPTION: Sets a Date's minutes, seconds, and milliseconds according to UTC time. This function modifies the original Date object and returns the updated timestamp in milliseconds. Binds to JavaScript's Date.setUTCMinutes method.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_60\n\nLANGUAGE: res\nCODE:\n```\nlet setUTCMinutesSMs: (t, ~minutes: float, ~seconds: float, ~milliseconds: float, unit) => float\n```\n\nLANGUAGE: res\nCODE:\n```\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet futureTime = Js.Date.setUTCMinutesSMs(\n  date1,\n  ~minutes=34.0,\n  ~seconds=56.0,\n  ~milliseconds=789.0,\n  (),\n)\ndate1 == Js.Date.fromString(\"1973-11-29T21:34:56.789Z00:00\")\nfutureTime == Js.Date.getTime(date1)\n```\n\n----------------------------------------\n\nTITLE: Filtering UInt32Array with index\nDESCRIPTION: Defines a function that creates a new array with all elements that pass the test implemented by the provided function, with access to the element index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_35\n\nLANGUAGE: rescript\nCODE:\n```\nlet filteri: ((. elt, int) => bool, t) => t\n```\n\n----------------------------------------\n\nTITLE: Creating an intersection of two sets in ReScript with MutableSetInt\nDESCRIPTION: Returns a new set containing elements that exist in both input sets. This operation creates a new set without modifying the originals.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_15\n\nLANGUAGE: rescript\nCODE:\n```\nlet intersect: (t, t) => t;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet s0 = Belt.MutableSet.Int.fromArray([|5,2,3,5,6|]);\nlet s1 = Belt.MutableSet.Int.fromArray([|5,2,3,1,5,4|]);\nlet intersect = Belt.MutableSet.Int.intersect(s0, s1);\nintersect->Belt.MutableSet.Int.toArray; /* [|2,3,5|] */\n```\n\n----------------------------------------\n\nTITLE: Setting and updating values in MapDict (ReScript)\nDESCRIPTION: Functions to set or update values in a MapDict.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_19\n\nLANGUAGE: ReScript\nCODE:\n```\nlet set: (t<'a, 'b, 'id>, 'a, 'b, ~cmp: cmp<'a, 'id>) => t<'a, 'b, 'id>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet updateU: (t<'a, 'b, 'id>, 'a, (. option<'b>) => option<'b>, ~cmp: cmp<'a, 'id>) => t<'a, 'b, 'id>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet update: (t<'a, 'b, 'id>, 'a, option<'b> => option<'b>, ~cmp: cmp<'a, 'id>) => t<'a, 'b, 'id>\n```\n\n----------------------------------------\n\nTITLE: Additional Mathematical Functions in ReScript\nDESCRIPTION: Implementation of various mathematical utility functions including exponential operations and bit counting.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/math.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nlet cbrt: float => float\nlet clz32: int => int\nlet cos: float => float\nlet cosh: float => float\nlet exp: float => float\nlet expm1: float => float\n```\n\n----------------------------------------\n\nTITLE: Handling Children in ReScript JSX\nDESCRIPTION: Explains how children are wrapped in a list when passed to a component through JSX, showing the transformation process.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/jsx.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\n<MyComponent> child1 child2 </MyComponent>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nReact.createElement(MyComponent, { children: null }, child1, child2);\n```\n\nLANGUAGE: rescript\nCODE:\n```\nMyComponent.createElement(~children=list{child1, child2}, ())\n```\n\nLANGUAGE: javascript\nCODE:\n```\nReact.createElement(MyComponent.make, MyComponent.makeProps(null, undefined), child1, child2);\n```\n\n----------------------------------------\n\nTITLE: Filtering HashMap In-Place in ReScript\nDESCRIPTION: Functions to filter and potentially transform values in the hash map in-place.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-map-int.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rescript\nCODE:\n```\nlet keepMapInPlaceU: (t<'a>, (. key, 'a) => option<'a>) => unit\n\nlet keepMapInPlace: (t<'a>, (key, 'a) => option<'a>) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet hMap = Belt.HashMap.Int.make(~hintSize=10)\nBelt.HashMap.Int.set(hMap, 1, \"value1\")\nBelt.HashMap.Int.set(hMap, 2, \"value2\")\n\nBelt.HashMap.Int.keepMapInPlace(hMap, (key, value) => mod(key, 1) == 0 ? None : Some(value))\n```\n\n----------------------------------------\n\nTITLE: Using Style.unsafeAddProp for Custom CSS Properties\nDESCRIPTION: Demonstrates how to add non-standard CSS properties using the unsafeAddProp escape hatch.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/styling.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet style =\n  ReactDOM.Style.make(\n    ~color=\"red\",\n    ~padding=\"10px\",\n    (),\n  )->ReactDOM.Style.unsafeAddProp(\"-webkit-animation-name\", \"moveit\")\n```\n\n----------------------------------------\n\nTITLE: Using @variadic Decorator with Math.max in ReScript\nDESCRIPTION: Demonstrates how to bind to JavaScript's Math.max function using the @variadic decorator. The decorator transforms an array argument in ReScript to multiple arguments in JavaScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/decorator_variadic.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\n@val @variadic @scope(\"Math\")\nexternal max: array<int> => int = \"max\"\n\nlet result = max([5, -2, 6, 1])\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = Math.max(5, -2, 6, 1);\n```\n\n----------------------------------------\n\nTITLE: Removing Multiple Elements from a Set in ReasonML\nDESCRIPTION: Shows how to remove multiple elements at once from a set using removeMany. Unlike remove, this may return a new reference even if not all elements exist in the set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set.mdx#2025-04-18_snippet_12\n\nLANGUAGE: reasonml\nCODE:\n```\nlet removeMany: (t('value, 'id), array('value)) => t('value, 'id);\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet set = Belt.Set.fromArray([|1, 2, 3, 4|],~id=(module IntCmp));\n\nlet newSet = set->Belt.Set.removeMany([|5, 4, 3, 2, 1|]);\nnewSet->Belt.Set.toArray; /* [||] */\n```\n\n----------------------------------------\n\nTITLE: Finding Substring Position from Index in ReScript\nDESCRIPTION: The indexOfFrom function returns the first occurrence index of a substring within a string starting from a specified position, or -1 if not found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string.mdx#2025-04-18_snippet_18\n\nLANGUAGE: reason\nCODE:\n```\nlet indexOfFrom: (t, t, int) => int;\n```\n\nLANGUAGE: reason\nCODE:\n```\nJs.String.indexOfFrom(\"ok\", 1, \"bookseller\") == 2;\nJs.String.indexOfFrom(\"sell\", 2, \"bookseller\") == 4;\nJs.String.indexOfFrom(\"sell\", 5, \"bookseller\") == -1;\n```\n\n----------------------------------------\n\nTITLE: Finding an Element's Index in ReScript\nDESCRIPTION: Returns the index of the first element that satisfies the provided testing function, or -1 if no elements satisfy the test. The predicate function takes an array element as its argument.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/array.mdx#2025-04-18_snippet_16\n\nLANGUAGE: rescript\nCODE:\n```\nlet findIndex: ('a => bool, t<'a>) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.Array.findIndex(x => x < 0, [33, 22, -55, 77, -44]) == 2\nJs.Array.findIndex(x => x < 0, [33, 22, 55, 77, 44]) == -1\n```\n\n----------------------------------------\n\nTITLE: Using setTimeoutFloat for Delayed Execution in ReScript\nDESCRIPTION: Example showing setTimeoutFloat usage for delayed message logging with float delay.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/global.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet message = \"Timed out!\"\n\nJs.Global.setTimeoutFloat(() => Js.log(message), 1000.0)\n```\n\n----------------------------------------\n\nTITLE: Opening Belt Module in ReScript\nDESCRIPTION: Demonstrates how to open the Belt module at the top of a ReScript source file, allowing direct access to Belt functions without qualification.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nopen Belt\n```\n\n----------------------------------------\n\nTITLE: Cross-Module Record Type Usage\nDESCRIPTION: Demonstrates how to use record types defined in other modules.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/record.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet me: School.person = {age: 20, name: \"Big ReScript\"}\n/* or */\nlet me2 = {School.age: 20, name: \"Big ReScript\"}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar me = {\n  age: 20,\n  name: \"Big ReScript\"\n};\nvar me2 = {\n  age: 20,\n  name: \"Big ReScript\"\n};\n```\n\n----------------------------------------\n\nTITLE: ReScript Warning Level Logging Functions\nDESCRIPTION: Warning level logging functions supporting 1-4 arguments and array logging. These functions print warning messages to the console.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/console.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet warn: 'a => unit\nlet warn2: ('a, 'b) => unit\nlet warn3: ('a, 'b, 'c) => unit\nlet warn4: ('a, 'b, 'c, 'd) => unit\nlet warnMany: array<'a> => unit\n```\n\n----------------------------------------\n\nTITLE: ReScript Promise Rejection\nDESCRIPTION: Function signature for creating a rejected Promise with an exception\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/promise.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nlet reject: exn => t<'a>\n```\n\n----------------------------------------\n\nTITLE: Accessing Object Properties\nDESCRIPTION: Shows how to access object properties using the ## operator in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/object.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reason\nCODE:\n```\nlet age = me##age;\n```\n\nLANGUAGE: ml\nCODE:\n```\nlet age = me##age\n```\n\n----------------------------------------\n\nTITLE: Defining DOM Event Types in ReScript\nDESCRIPTION: Type definitions for DOM event interfaces like mouse events, keyboard events etc.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/dom.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reason\nCODE:\n```\ntype event\ntype uiEvent\ntype mouseEvent\ntype keyboardEvent\ntype focusEvent\ntype touchEvent\n```\n\n----------------------------------------\n\nTITLE: Checking any element with uncurried predicate in ReScript\nDESCRIPTION: Function signature for checking if any element in a mutable map satisfies an uncurried predicate.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_16\n\nLANGUAGE: ReScript\nCODE:\n```\nlet someU: (t<'a>, (. key, 'a) => bool) => bool\n```\n\n----------------------------------------\n\nTITLE: Reducing Two Lists with Belt.List in ReScript\nDESCRIPTION: The reduce2 function applies a function to corresponding elements from two lists along with an accumulator. It processes elements from beginning to end and stops with the shorter list.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/list.mdx#2025-04-18_snippet_44\n\nLANGUAGE: rescript\nCODE:\n```\nBelt.List.reduce2(list{1, 2, 3}, list{4, 5}, 0, (acc, x, y) => acc + x * x + y) /* 0 + (1 * 1 + 4) + (2 * 2 + 5) */\n```\n\n----------------------------------------\n\nTITLE: Initializing Vector with Function in ReScript\nDESCRIPTION: Creates a new vector of specified length, initializing elements using a provided function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/vector.mdx#2025-04-18_snippet_17\n\nLANGUAGE: ReScript\nCODE:\n```\nlet init: (int, (. int) => 'a) => t('a);\n```\n\n----------------------------------------\n\nTITLE: Example of toStringWithRadix with Hexadecimal Radix\nDESCRIPTION: Shows how to convert a number to its hexadecimal (base 16) representation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/float.mdx#2025-04-18_snippet_29\n\nLANGUAGE: re\nCODE:\n```\n/* prints \"deadbeef\" */\nJs.log @@ Js.Float.toStringWithRadix(3735928559., ~radix=16);\n```\n\n----------------------------------------\n\nTITLE: Trimming Whitespace in ReScript\nDESCRIPTION: Function to remove whitespace from both ends of a string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string.mdx#2025-04-18_snippet_39\n\nLANGUAGE: ReScript\nCODE:\n```\nlet trim: t => t;\n```\n\n----------------------------------------\n\nTITLE: Signature for isOk Function in ReScript Result Module\nDESCRIPTION: Function signature for isOk, which checks if a Result is Ok.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/result.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rescript\nCODE:\n```\nlet isOk: t<'a, 'b> => bool\n```\n\n----------------------------------------\n\nTITLE: Comparing Strings Locale-Aware in ReScript\nDESCRIPTION: The localeCompare function compares two strings based on the current locale. It returns a negative value if the reference comes before the comparison in sort order, zero if they have the same sort order, and a positive value if the reference comes after the comparison.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string-2.mdx#2025-04-18_snippet_6\n\nLANGUAGE: ReScript\nCODE:\n```\nlet localeCompare: (t, t) => float;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nJs.String2.localeCompare(\"zebra\", \"ant\") > 0.0;\nJs.String2.localeCompare(\"ant\", \"zebra\") < 0.0;\nJs.String2.localeCompare(\"cat\", \"cat\") == 0.0;\nJs.String2.localeCompare(\"CAT\", \"cat\") > 0.0;\n```\n\n----------------------------------------\n\nTITLE: Block Expressions in ReScript\nDESCRIPTION: Shows how block expressions work in ReScript, where the last expression is implicitly returned.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/overview.mdx#2025-04-18_snippet_5\n\nLANGUAGE: ReScript\nCODE:\n```\nlet myFun = (x, y) => {\n  let doubleX = x + x\n  let doubleY = y + y\n  doubleX + doubleY\n}\n```\n\n----------------------------------------\n\nTITLE: getExn Function Definition and Example\nDESCRIPTION: Function to extract a value from an Option type, throwing an error if None is provided.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/option.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\nlet getExn: option('a) => 'a;\n```\n\nLANGUAGE: reason\nCODE:\n```\nBelt.Option.getExn(Some(3)); /* 3 */\n\nBelt.Option.getExn(None); /* Raises an Error */\n```\n\n----------------------------------------\n\nTITLE: Adding Elements to Belt.Set in ReScript\nDESCRIPTION: Shows how to add elements to a Belt.Set using the add function, demonstrating immutability.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/set.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet s0 = Belt.Set.make(~id=module(IntCmp))\nlet s1 = s0->Belt.Set.add(1)\nlet s2 = s1->Belt.Set.add(2)\nlet s3 = s2->Belt.Set.add(2)\ns0->Belt.Set.toArray /* [] */\ns1->Belt.Set.toArray /* [1] */\ns2->Belt.Set.toArray /* [1, 2] */\ns3->Belt.Set.toArray /* [1,2 ] */\ns2 == s3 /* true */\n```\n\n----------------------------------------\n\nTITLE: List Sorting in ReScript\nDESCRIPTION: Sorts a list using a comparison function that determines the relative order of elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/list.mdx#2025-04-18_snippet_16\n\nLANGUAGE: res\nCODE:\n```\nBelt.List.sort(list{5, 4, 9, 3, 7}, (a, b) => a - b)\n```\n\n----------------------------------------\n\nTITLE: Mapping values in MapString module (ReScript)\nDESCRIPTION: Function to transform all values in a map using a function, keeping the keys unchanged and returning a new map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-string.mdx#2025-04-18_snippet_52\n\nLANGUAGE: reason\nCODE:\n```\nlet map: (t('v), 'v => 'v2) => t('v2);\n```\n\n----------------------------------------\n\nTITLE: Record Type Inference Based on Field Names\nDESCRIPTION: Illustrates how ReScript identifies record types based on field names. Functions working with records are tied to specific record types, not just any record with a matching field.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/record.mdx#2025-04-18_snippet_7\n\nLANGUAGE: res\nCODE:\n```\ntype person = {age: int, name: string}\ntype monster = {age: int, hasTentacles: bool}\n\nlet getAge = (entity) => entity.age\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction getAge(entity) {\n  return entity.age;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing truncateToLengthUnsafe Function in ReScript\nDESCRIPTION: The truncateToLengthUnsafe function unsafely sets the length of an array to a specified value. It modifies the array in-place and can potentially lead to null values if the new length is greater than the original length.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/array.mdx#2025-04-18_snippet_41\n\nLANGUAGE: ReScript\nCODE:\n```\nlet truncateToLengthUnsafe: (array('a), int) => unit;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet arr = [|\"ant\", \"bee\", \"cat\", \"dog\", \"elk\"|];\n\nBelt.Array.truncateToLengthUnsafe(arr, 3);\n\narr == [|\"ant\", \"bee\", \"cat\"|];\n```\n\n----------------------------------------\n\nTITLE: Converting Float to String with Custom Radix\nDESCRIPTION: Function that formats a float as a string using a specified base (radix) between 2 and 36.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/float.mdx#2025-04-18_snippet_26\n\nLANGUAGE: re\nCODE:\n```\nlet toStringWithRadix: (float, ~radix: int) => string;\n```\n\n----------------------------------------\n\nTITLE: Float toFixed Function\nDESCRIPTION: Function to format a float using fixed-point notation. Returns a string representation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/float.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet toFixed: float => string\n```\n\n----------------------------------------\n\nTITLE: Bind Function Implementation in ReScript\nDESCRIPTION: Function for mapping over nullable values using a transformation function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/null.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet bind: (t<'a>, (. 'a) => 'b) => t<'b>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet maybeGreetWorld = (maybeGreeting: Js.null<string>) =>\n  Js.Null.bind(maybeGreeting, (. greeting) => greeting ++ \" world!\")\n```\n\n----------------------------------------\n\nTITLE: Filtering Array Elements in ReScript\nDESCRIPTION: Creates a new array with all elements that pass the test implemented by the provided function. The returned array contains elements for which the predicate function returned true.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/array-2.mdx#2025-04-18_snippet_13\n\nLANGUAGE: ReScript\nCODE:\n```\nlet filter: (t<'a>, 'a => bool) => t<'a>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet nonEmpty = s => s != \"\"\nJs.Array2.filter([\"abc\", \"\", \"\", \"def\", \"ghi\"], nonEmpty) == [\"abc\", \"def\", \"ghi\"]\n```\n\n----------------------------------------\n\nTITLE: Checking MutableSet Emptiness in ReScript\nDESCRIPTION: This snippet demonstrates how to check if a MutableSet is empty using the isEmpty function. It creates both an empty and a non-empty set for comparison.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ReScript\nCODE:\n```\nmodule IntCmp = Belt.Id.MakeComparable({\n  type t = int\n  let cmp = Pervasives.compare\n})\n\nlet empty = Belt.MutableSet.fromArray([], ~id=module(IntCmp))\nlet notEmpty = Belt.MutableSet.fromArray([1], ~id=module(IntCmp))\n\nBelt.MutableSet.isEmpty(empty) /* true */\nBelt.MutableSet.isEmpty(notEmpty) /* false */\n```\n\n----------------------------------------\n\nTITLE: Setting a Key-Value Pair in HashMap in ReScript\nDESCRIPTION: Sets a key-value pair in the hash map using Belt.HashMap.String.set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-map-string.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet set: (t<'a>, key, 'a) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet hMap = Belt.HashMap.String.fromArray([(\"2\", \"2\")])\n\nBelt.HashMap.String.set(hMap, \"1\", \"1\")\n\nBelt.HashMap.String.valuesToArray(hMap) == [\"1\", \"2\"]\n```\n\n----------------------------------------\n\nTITLE: Defining RegExp Result Type in ReScript\nDESCRIPTION: Defines the type that represents the result of executing a RegExp on a string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/re.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reason\nCODE:\n```\ntype result\n```\n\n----------------------------------------\n\nTITLE: Comparison Operators in ReScript vs JavaScript\nDESCRIPTION: Demonstrates comparison operators in ReScript and their JavaScript output. These operators are identical in both languages.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/overview.mdx#2025-04-18_snippet_13\n\nLANGUAGE: rescript\nCODE:\n```\n>, <, >=, <=\n```\n\nLANGUAGE: javascript\nCODE:\n```\n>, <, >=, <=\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Value from Belt.Set.String in ReScript\nDESCRIPTION: The get function returns the reference of the value which is equivalent to the given value using the comparator specified by the collection. It returns None if the element does not exist.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-string.mdx#2025-04-18_snippet_60\n\nLANGUAGE: rescript\nCODE:\n```\nlet get: (t, value) => option(value);\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet s0 = Belt.Set.String.fromArray([|\"apple\", \"carrot\"|]);\n\ns0->Belt.Set.String.get(\"carrot\"); /* Some(\"carrot\") */\ns0->Belt.Set.String.get(\"watermelon\"); /* None */\n```\n\n----------------------------------------\n\nTITLE: Checking String Set Operations in ReScript\nDESCRIPTION: Demonstrates how to check if a string set is empty and if it contains a specific element.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/set-string.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet isEmpty: t => bool\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet empty = Belt.Set.String.fromArray([])\nlet notEmpty = Belt.Set.String.fromArray([\"apple\"])\n\nBelt.Set.String.isEmpty(empty) /* true */\nBelt.Set.String.isEmpty(notEmpty) /* false */\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet has: (t, value) => bool\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet set = Belt.Set.String.fromArray([\"apple\", \"orange\", \"banana\"])\n\nset->Belt.Set.String.has(\"strawberry\") /* false */\nset->Belt.Set.String.has(\"apple\") /* true */\n```\n\n----------------------------------------\n\nTITLE: Dictionary Empty Operation\nDESCRIPTION: Function signature for creating an empty dictionary.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/dict.mdx#2025-04-18_snippet_11\n\nLANGUAGE: rescript\nCODE:\n```\nlet empty: unit => t<'a>\n```\n\n----------------------------------------\n\nTITLE: String Type Definition in ReScript\nDESCRIPTION: Defines the basic string type alias.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string-2.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\ntype t = string;\n```\n\n----------------------------------------\n\nTITLE: Importing Default Export from JavaScript in ReScript\nDESCRIPTION: Shows how to import a default export from a JavaScript module using ReScript's external binding with 'default' keyword.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/import-from-export-to-js.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\n@module(\"./student\") external studentName: string = \"default\"\nConsole.log(studentName)\n```\n\n----------------------------------------\n\nTITLE: Zipping Lists with Uncurried Function in ReScript\nDESCRIPTION: The zipByU function is the uncurried version of zipBy for performance optimization.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/list.mdx#2025-04-18_snippet_25\n\nLANGUAGE: rescript\nCODE:\n```\nlet zipByU: (t<'a>, t<'b>, (. 'a, 'b) => 'c) => t<'c>\n```\n\n----------------------------------------\n\nTITLE: Example of String Set Intersection in ReScript\nDESCRIPTION: Demonstrates how to create an intersection of two string sets, containing only common elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-string.mdx#2025-04-18_snippet_22\n\nLANGUAGE: reasonml\nCODE:\n```\nlet s0 = Belt.Set.String.fromArray([|\"apple\", \"banana\", \"orange\", \"carrot\"|]);\nlet s1 = Belt.Set.String.fromArray([|\"apple\", \"banana\", \"orange\", \"strawberry\"|]);\nlet intersect = Belt.Set.String.intersect(s0, s1);\nintersect->Belt.Set.String.toArray; /* [|\"apple\", \"banana\", \"orange\"|] */\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for MapInt\nDESCRIPTION: Core type definitions for the MapInt module, defining the key type as integer and generic value type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-int.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\ntype key = int;\ntype t('value);\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Vector in ReScript\nDESCRIPTION: Applies a function to each element of a vector.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/vector.mdx#2025-04-18_snippet_6\n\nLANGUAGE: ReScript\nCODE:\n```\nlet iter: ((. 'a) => unit, t('a)) => unit;\n```\n\n----------------------------------------\n\nTITLE: clearTimeout Example in ReScript\nDESCRIPTION: Example of using clearTimeout to cancel a scheduled task. Shows a procrastination model where setting a new timer cancels any existing one.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/global.mdx#2025-04-18_snippet_5\n\nLANGUAGE: reasonml\nCODE:\n```\n/* A simple model of a code monkey's brain */\n\nlet closeHackerNewsTab = () => Js.log(\"close\");\n\nlet timer = ref(Js.Nullable.null);\n\nlet work = () => closeHackerNewsTab();\n\nlet procrastinate = mins => {\n  Js.Nullable.iter(timer^, (. timer) => Js.Global.clearTimeout(timer));\n  timer := Js.Nullable.return(Js.Global.setTimeout(work, mins * 60 * 1000));\n};\n```\n\n----------------------------------------\n\nTITLE: Checking Element Existence\nDESCRIPTION: Checks if the array includes a specific element, returning a boolean.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_18\n\nLANGUAGE: rescript\nCODE:\n```\nlet includes: (elt, t) => bool\n```\n\n----------------------------------------\n\nTITLE: Create Subarray with Same Buffer\nDESCRIPTION: Returns a new typed array view of the same buffer with elements from the specified range.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_type-s.mdx#2025-04-18_snippet_28\n\nLANGUAGE: res\nCODE:\n```\nlet subarray: (~start: int, ~end_: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Retrieving Raw Map Data in ReScript\nDESCRIPTION: Advanced usage function that returns the raw data of a map detached from its comparator, while maintaining its type manifestation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map.mdx#2025-04-18_snippet_13\n\nLANGUAGE: reasonml\nCODE:\n```\nlet getData: t('k, 'v, 'id) => Belt_MapDict.t('k, 'v, 'id);\n```\n\n----------------------------------------\n\nTITLE: Creating and checking MapDict in ReScript\nDESCRIPTION: Functions for creating an empty MapDict and checking if a MapDict is empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_1\n\nLANGUAGE: ReScript\nCODE:\n```\nlet empty: t<'k, 'v, 'id>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet isEmpty: t<'k, 'v, 'id> => bool\n```\n\n----------------------------------------\n\nTITLE: Defining MakeHashableU module in ReScript\nDESCRIPTION: Defines a module functor that creates a Hashable module from a given module with a type t and uncurried hash and equality functions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/id.mdx#2025-04-18_snippet_11\n\nLANGUAGE: ReScript\nCODE:\n```\nmodule MakeHashableU: (M: {\n  type t\n  let hash: (. t) => int\n  let eq: (. t, t) => bool\n}) => Hashable with type t = M.t\n```\n\n----------------------------------------\n\nTITLE: Mapping Two Lists in Reverse with mapReverse2\nDESCRIPTION: Function that maps over two lists simultaneously in reverse order, applying a function to pairs of elements. Equivalent to zipBy followed by reverse.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/list.mdx#2025-04-18_snippet_6\n\nLANGUAGE: res\nCODE:\n```\nBelt.List.mapReverse2(list{1, 2, 3}, list{1, 2}, (a, b) => a + b) // list{4, 2}\n```\n\n----------------------------------------\n\nTITLE: Test if All Float32Array Elements Pass Indexed Condition\nDESCRIPTION: Tests whether all elements in the Float32Array pass the provided function test that includes the element index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_33\n\nLANGUAGE: rescript\nCODE:\n```\nlet everyi: ((. elt, int) => bool, t) => bool\n```\n\n----------------------------------------\n\nTITLE: Checking Any Element in Belt.Set in ReScript\nDESCRIPTION: Shows how to check if any element in a Belt.Set satisfies a predicate using the some function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set.mdx#2025-04-18_snippet_17\n\nLANGUAGE: rescript\nCODE:\n```\nlet isOdd = x => mod(x, 2) != 0\n\nlet s0 = Belt.Set.fromArray([1,2,4,6,8], ~id=module(IntCmp))\ns0->Belt.Set.some(isOdd) /* true */\n```\n\n----------------------------------------\n\nTITLE: Creating a new HashSetString\nDESCRIPTION: Creates a new empty HashSetString with an optional hint for the initial size.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-set-string.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet make: (~hintSize: int) => t;\n```\n\n----------------------------------------\n\nTITLE: JSON Boolean Decoding Function in ReScript\nDESCRIPTION: Function signature for attempting to decode a JSON value as a boolean. Returns None if the JSON value is not a boolean.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/json.mdx#2025-04-18_snippet_9\n\nLANGUAGE: reason\nCODE:\n```\nlet decodeBoolean: t => option(bool);\n```\n\n----------------------------------------\n\nTITLE: Ignoring Arguments in External Bindings\nDESCRIPTION: Shows how to use the @ignore annotation to hide specific external function parameters in the JavaScript output, useful for adding type constraints without affecting the compiled JS code.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/bind-to-js-function.mdx#2025-04-18_snippet_13\n\nLANGUAGE: rescript\nCODE:\n```\n@val external doSomething: (@ignore 'a, 'a) => unit = \"doSomething\"\n\ndoSomething(\"this only shows up in ReScript code\", \"test\")\n```\n\nLANGUAGE: javascript\nCODE:\n```\ndoSomething(\"test\");\n```\n\n----------------------------------------\n\nTITLE: Checking if HashMap is Empty in ReScript\nDESCRIPTION: Returns boolean indicating whether HashMap contains any entries.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-map-string.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reasonml\nCODE:\n```\nlet isEmpty: t('a) => bool;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet hMap = Belt.HashMap.String.fromArray([|(\"1\", \"1\")|])  \nBelt.HashMap.String.isEmpty(hMap) == false;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Unexpected Behavior with Curried Functions and Ignore\nDESCRIPTION: Illustrates how curried functions can lead to unexpected behavior when combined with ignore or let _ = ...\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2023-09-18-uncurried-mode.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet myCurriedFn = (~first) => first\nlet _ = myCurriedFn(~first=\"Hello!\")\n//  ^ string\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet myCurriedFn = (~first, ~second) => first ++ \" \" ++ second\nlet _ = myCurriedFn(~first=\"Hello!\")\n//  ^ (~second: string) => string\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet _: string = myCurriedFn(~first=\"Hello!\")\n```\n\nLANGUAGE: rescript\nCODE:\n```\nmyCurriedFn(~first=\"Hello!\")->ignore\n```\n\n----------------------------------------\n\nTITLE: Type Classification Function in ReScript\nDESCRIPTION: Function that examines a value and classifies it into one of the tagged JavaScript types, returning a tagged_t variant that indicates both the type and value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/types.mdx#2025-04-18_snippet_8\n\nLANGUAGE: res\nCODE:\n```\nlet classify: 'a => tagged_t\n```\n\n----------------------------------------\n\nTITLE: ToOption Function Signature\nDESCRIPTION: Function signature for converting nullable type to option type\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/nullable.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rescript\nCODE:\n```\nlet toOption: t<'a> => option<'a>\n```\n\n----------------------------------------\n\nTITLE: Max and Min Functions in ReScript\nDESCRIPTION: Functions to find maximum and minimum values for integers and floats.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/math.mdx#2025-04-18_snippet_45\n\nLANGUAGE: rescript\nCODE:\n```\nlet max_int: (int, int) => int;\nlet maxMany_int: array(int) => int;\nlet max_float: (float, float) => float;\nlet maxMany_float: array(float) => float;\nlet min_int: (int, int) => int;\nlet minMany_int: array(int) => int;\nlet min_float: (float, float) => float;\nlet minMany_float: array(float) => float;\n```\n\n----------------------------------------\n\nTITLE: Map Operations Example\nDESCRIPTION: Example demonstrating how to use findFirstBy to search for key-value pairs in the map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-int.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reason\nCODE:\n```\nlet s0 = Belt.Map.Int.fromArray([|(4, \"4\"), (1, \"1\"), (2, \"2\"), (3, \"3\")|]);\n\nBelt.Map.Int.findFirstBy(s0, (k, v) => k == 4) == Some((4, \"4\"));\n```\n\n----------------------------------------\n\nTITLE: String toUpperCase Function in ReScript\nDESCRIPTION: The toUpperCase function converts a string to uppercase using locale-insensitive case mappings. The conversion can expand the number of characters, as with German ß which capitalizes to SS.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/string.mdx#2025-04-18_snippet_20\n\nLANGUAGE: res\nCODE:\n```\nlet toUpperCase: t => t\n```\n\nLANGUAGE: res\nCODE:\n```\nJs.String.toUpperCase(\"abc\") == \"ABC\"\nJs.String.toUpperCase(`Straße`) == `STRASSE`\nJs.String.toUpperCase(`πς`) == `ΠΣ`\n```\n\n----------------------------------------\n\nTITLE: Example: Parsing Complex JSON String in ReScript\nDESCRIPTION: Example showing how to parse a complex JSON string containing an object with an array property, and extract the array values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/json.mdx#2025-04-18_snippet_23\n\nLANGUAGE: reason\nCODE:\n```\n/* parse a complex JSON string */\n\nlet getIds = s => {\n  let json =\n    try (Js.Json.parseExn(s)) {\n    | _ => failwith(\"Error parsing JSON string\")\n    };\n\n  switch (Js.Json.classify(json)) {\n  | Js.Json.JSONObject(value) =>\n    /* In this branch, compiler infer value : Js.Json.t Js.Dict.t */\n    switch (Js.Dict.get(value, \"ids\")) {\n    | Some(ids) =>\n      switch (Js.Json.classify(ids)) {\n      | Js.Json.JSONArray(ids) =>\n        /* In this branch compiler infer ids : Js.Json.t array */\n        ids\n      | _ => failwith(\"Expected an array\")\n      }\n    | None => failwith(\"Expected an `ids` property\")\n    }\n  | _ => failwith(\"Expected an object\")\n  };\n};\n\n/* prints `1, 2, 3` */\nJs.log(getIds({| { \"ids\" : [1, 2, 3 ] } |}));\n```\n\n----------------------------------------\n\nTITLE: FlatMap Function Definition and Example\nDESCRIPTION: Function to chain Option transformations that return Option values themselves.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/option.mdx#2025-04-18_snippet_5\n\nLANGUAGE: reason\nCODE:\n```\nlet flatMap: (option('a), 'a => option('b)) => option('b);\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet addIfAboveOne = value =>\n  if (value > 1) {\n    Some(value + 1);\n  } else {\n    None;\n  };\n\nBelt.Option.flatMap(Some(2), addIfAboveOne); /* Some(3) */\n\nBelt.Option.flatMap(Some(-4), addIfAboveOne); /* None */\n\nBelt.Option.flatMap(None, addIfAboveOne); /* None */\n```\n\n----------------------------------------\n\nTITLE: HashMap Operations Interface\nDESCRIPTION: Core operations like clear, isEmpty, set, copy, get, has, and remove for hash map manipulation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-map.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nlet clear: t<'key, 'value, 'id> => unit\nlet isEmpty: t<'a, 'b, 'c> => bool\nlet set: (t<'key, 'value, 'id>, 'key, 'value) => unit\nlet copy: t<'key, 'value, 'id> => t<'key, 'value, 'id>\nlet get: (t<'key, 'value, 'id>, 'key) => option<'value>\nlet has: (t<'key, 'value, 'id>, 'key) => bool\nlet remove: (t<'key, 'value, 'id>, 'key) => unit\n```\n\n----------------------------------------\n\nTITLE: Map Merge Function Signature\nDESCRIPTION: Merges two maps using a combining function to determine the presence and value of bindings.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nlet merge: (t<'k, 'v, 'id>, t<'k, 'v2, 'id>, ('k, option<'v>, option<'v2>) => option<'v3>) => t<'k, 'v3, 'id>\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a MutableSet with Custom Comparator in ReasonML\nDESCRIPTION: Example of creating a custom comparator for pairs of integers, then using it to initialize a MutableSet and add an element to it.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reasonml\nCODE:\n```\nmodule PairComparator =\n  Belt.Id.MakeComparable({\n    type t = (int, int);\n    let cmp = ((a0, a1), (b0, b1)) =>\n      switch (Pervasives.compare(a0, b0)) {\n      | 0 => Pervasives.compare(a1, b1)\n      | c => c\n      };\n  });\n\nlet mySet = Belt.MutableSet.make(~id=(module PairComparator));\nmySet->Belt.MutableSet.add((1, 2));\n```\n\n----------------------------------------\n\nTITLE: Getting value by key as undefined in MapString module (ReScript)\nDESCRIPTION: Function to retrieve a value for a given key, returning an undefined type for JavaScript interoperability.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-string.mdx#2025-04-18_snippet_34\n\nLANGUAGE: reason\nCODE:\n```\nlet getUndefined: (t('v), key) => Js.undefined('v);\n```\n\n----------------------------------------\n\nTITLE: Getting Belt.Set Size in ReScript\nDESCRIPTION: Demonstrates how to get the size of a Belt.Set using the size function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set.mdx#2025-04-18_snippet_20\n\nLANGUAGE: rescript\nCODE:\n```\nlet s0 = Belt.Set.fromArray([1,2,3,4], ~id=module(IntCmp))\n\ns0->Belt.Set.size /* 4 */\n```\n\n----------------------------------------\n\nTITLE: Strictly Sorted Length Usage Examples\nDESCRIPTION: Examples demonstrating the use of strictlySortedLength function with different array inputs.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/sort-array.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nBelt.SortArray.strictlySortedLength([1, 2, 3, 4, 3], (x, y) => x < y) == 4\n\nBelt.SortArray.strictlySortedLength([], (x, y) => x < y) == 0\n\nBelt.SortArray.strictlySortedLength([1], (x, y) => x < y) == 1\n\nBelt.SortArray.strictlySortedLength([4, 3, 2, 1], (x, y) => x < y) == -4\n```\n\n----------------------------------------\n\nTITLE: Checking if a key exists in ReScript mutable map\nDESCRIPTION: Tests whether a map contains a binding for a given key.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_5\n\nLANGUAGE: reasonml\nCODE:\n```\nlet has: (t('a), key) => bool;\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Elements to Array Beginning in ReScript\nDESCRIPTION: The unshiftMany function adds elements from a second array to the beginning of the first array. It returns the new number of elements in the array and modifies the original array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array-2.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\nlet unshiftMany: (t<'a>, array<'a>) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet arr = [\"d\", \"e\"]\nJs.Array2.unshiftMany(arr, [\"a\", \"b\", \"c\"]) == 5\narr == [\"a\", \"b\", \"c\", \"d\", \"e\"]\n```\n\n----------------------------------------\n\nTITLE: Accessing localStorage in ReScript\nDESCRIPTION: External binding for accessing the browser's localStorage object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/dom/storage2.mdx#2025-04-18_snippet_7\n\nLANGUAGE: reasonml\nCODE:\n```\n[@bs.val] external localStorage: t = \"localStorage\"\n```\n\n----------------------------------------\n\nTITLE: Mapping Array Elements\nDESCRIPTION: Function signature to create a new typed array with the results of calling a provided function on every element.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_42\n\nLANGUAGE: res\nCODE:\n```\nlet map: ((. elt) => 'b, t) => typed_array<'b>\n```\n\n----------------------------------------\n\nTITLE: Accessing Record Fields in ReScript\nDESCRIPTION: Shows how to access fields in a record using dot notation. This is similar to accessing properties in JavaScript objects.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/record.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reason\nCODE:\n```\nlet name = me.name;\n```\n\nLANGUAGE: ml\nCODE:\n```\nlet name = me.name\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar name = \"Big ReScript\";\n```\n\n----------------------------------------\n\nTITLE: Copying and Merging Objects in ReScript\nDESCRIPTION: This example demonstrates how to use Js.Obj.assign() to copy an object and merge objects with the same properties. It shows how the target object is modified in the process.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/obj.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\n/* Copy an object */\n\nlet obj = {\"a\": 1}\n\nlet copy = Js.Obj.assign(Js.Obj.empty(), obj)\n\n/* prints \"{ a: 1 }\" */\nJs.log(copy)\n\n/* Merge objects with same properties */\n\nlet target = {\"a\": 1, \"b\": 1}\nlet source = {\"b\": 2}\n\nlet obj = Js.Obj.assign(target, source)\n\n/* prints \"{ a: 1, b: 2 }\" */\nJs.log(obj)\n\n/* prints \"{ a: 1, b: 2 }\", target is modified */\nJs.log(target)\n```\n\n----------------------------------------\n\nTITLE: Mapping Option Values in ReScript\nDESCRIPTION: Function signature and examples for mapping Option values with a transformation function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/option.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\nlet map: ((. 'a) => 'b, option<'a>) => option<'b>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet square = (. x) => x * x\nJs.Option.map(square, Some(3)) == Some(9)\nJs.Option.map(square, None) == None\n```\n\n----------------------------------------\n\nTITLE: Iterating MutableQueue in ReScript\nDESCRIPTION: Function to iterate over the queue elements, applying a function to each element without modifying the queue.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-queue.mdx#2025-04-18_snippet_17\n\nLANGUAGE: rescript\nCODE:\n```\nlet forEach: (t('a), 'a => unit) => unit;\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Belt Opening in bsconfig.json\nDESCRIPTION: Shows how to configure the bsconfig.json file to open the Belt module globally for all files in a ReScript project.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt.mdx#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bsc-flags\": [\"-open Belt\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Using unsafe_get with Arrays in ReScript\nDESCRIPTION: Demonstrates the unsafe_get function that retrieves the value at a given position in an array without bounds checking. It returns the value if the position is in bounds, or JavaScript's undefined value otherwise.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/array-2.mdx#2025-04-18_snippet_29\n\nLANGUAGE: res\nCODE:\n```\nlet unsafe_get: (array<'a>, int) => 'a\n```\n\nLANGUAGE: res\nCODE:\n```\nlet arr = [100, 101, 102, 103]\nJs.Array2.unsafe_get(arr, 3) == 103\nJs.Array2.unsafe_get(arr, 4) // returns undefined\n```\n\n----------------------------------------\n\nTITLE: Generating Variant-Integer Converters with @deriving(jsConverter)\nDESCRIPTION: Use @deriving(jsConverter) on a variant type to create converter functions that allow back and forth conversion between JS integer enum and ReScript variant values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/generate-converters-accessors.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ReScript\nCODE:\n```\n@deriving(jsConverter)\ntype fruit =\n  | Apple\n  | Orange\n  | Kiwi\n  | Watermelon;\n```\n\n----------------------------------------\n\nTITLE: List Sorting - ReScript\nDESCRIPTION: Function that sorts a list using a custom comparison function that returns an integer indicating the relative order of elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/list.mdx#2025-04-18_snippet_62\n\nLANGUAGE: rescript\nCODE:\n```\nBelt.List.sort(list{5, 4, 9, 3, 7}, (a, b) => a - b)\n```\n\n----------------------------------------\n\nTITLE: Using Pattern Matching to Execute Lazy Values in ReScript\nDESCRIPTION: Demonstrates how to use pattern matching to trigger a lazy computation. This approach can be used as an alternative to Lazy.force.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/lazy-values.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nswitch expensiveFilesRead {\n| lazy(result) => Console.log(result)\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = CamlinternalLazy.force(expensiveFilesRead);\n```\n\n----------------------------------------\n\nTITLE: Filtering Option Values in ReScript\nDESCRIPTION: Function signature and examples for filtering Option values with a predicate function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/option.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rescript\nCODE:\n```\nlet filter: ((. 'a) => bool, option<'a>) => option<'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet isEven = (. x) => mod(x, 2) == 0\nJs.Option.filter(isEven, Some(2)) == Some(2)\nJs.Option.filter(isEven, Some(3)) == None\nJs.Option.filter(isEven, None) == None\n```\n\n----------------------------------------\n\nTITLE: Signature for isError Function in ReScript Result Module\nDESCRIPTION: Function signature for isError, which checks if a Result is Error.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/result.mdx#2025-04-18_snippet_11\n\nLANGUAGE: rescript\nCODE:\n```\nlet isError: t<'a, 'b> => bool\n```\n\n----------------------------------------\n\nTITLE: Checking if All Elements Satisfy a Condition with Index in ReasonML\nDESCRIPTION: The everyi function tests whether all elements in the array pass the test implemented by the provided function, which takes both the element and its index as arguments.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array.mdx#2025-04-18_snippet_15\n\nLANGUAGE: ReasonML\nCODE:\n```\nlet everyi: (('a, int) => bool, t<'a>) => bool\n```\n\nLANGUAGE: ReasonML\nCODE:\n```\nlet evenIndexPositive = (item, index) => mod(index, 2) == 0 ? item > 0 : true\n\nJs.Array.everyi(evenIndexPositive, [6, -3, 5, 8]) == true\nJs.Array.everyi(evenIndexPositive, [6, 3, -5, 8]) == false\n```\n\n----------------------------------------\n\nTITLE: Array-like Operations on Uint16Array in ReScript\nDESCRIPTION: Higher-order functions for performing operations on Uint16Array elements, similar to array operations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_8\n\nLANGUAGE: reason\nCODE:\n```\nlet every: ((. elt) => bool, t) => bool;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet everyi: ((. elt, int) => bool, t) => bool;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet filter: ((. elt) => bool, t) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet filteri: ((. elt, int) => bool, t) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet find: ((. elt) => bool, t) => Js.undefined(elt);\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet findi: ((. elt, int) => bool, t) => Js.undefined(elt);\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet findIndex: ((. elt) => bool, t) => int;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet findIndexi: ((. elt, int) => bool, t) => int;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet forEach: ((. elt) => unit, t) => unit;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet forEachi: ((. elt, int) => unit, t) => unit;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet map: ((. elt) => 'b, t) => typed_array('b);\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet mapi: ((. elt, int) => 'b, t) => typed_array('b);\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet reduce: ((. 'b, elt) => 'b, 'b, t) => 'b;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet reducei: ((. 'b, elt, int) => 'b, 'b, t) => 'b;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet reduceRight: ((. 'b, elt) => 'b, 'b, t) => 'b;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet reduceRighti: ((. 'b, elt, int) => 'b, 'b, t) => 'b;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet some: ((. elt) => bool, t) => bool;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet somei: ((. elt, int) => bool, t) => bool;\n```\n\n----------------------------------------\n\nTITLE: Association List Search in ReScript\nDESCRIPTION: Searches for a key in an association list using a custom equality function and returns the associated value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/list.mdx#2025-04-18_snippet_14\n\nLANGUAGE: res\nCODE:\n```\nlist{(1, \"a\"), (2, \"b\"), (3, \"c\")}->Belt.List.getAssoc(3, (a, b) => a == b)\n\nlist{(9, \"morning\"), (15, \"afternoon\"), (22, \"night\")}\n->Belt.List.getAssoc(15, (k, item) => k == item)\n```\n\n----------------------------------------\n\nTITLE: Comparing Strings Locale-Aware in ReScript\nDESCRIPTION: The localeCompare function compares two strings based on the current locale. It returns a negative value if the reference comes before the comparison in sort order, zero if they have the same sort order, and a positive value if the reference comes after the comparison.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string.mdx#2025-04-18_snippet_21\n\nLANGUAGE: rescript\nCODE:\n```\nlet localeCompare: (t, t) => float;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.String.localeCompare(\"ant\", \"zebra\") > 0.0;\nJs.String.localeCompare(\"zebra\", \"ant\") < 0.0;\nJs.String.localeCompare(\"cat\", \"cat\") == 0.0;\nJs.String.localeCompare(\"cat\", \"CAT\") > 0.0;\n```\n\n----------------------------------------\n\nTITLE: Private Let Bindings in ReScript\nDESCRIPTION: Demonstrates how to use private let bindings in modules.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/let-binding.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nmodule A: {\n  let b: int\n} = {\n  let a = 3\n  let b = 4\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Maximum Value in Belt.MutableSet using maxUndefined in ReScript\nDESCRIPTION: The maxUndefined function returns the maximum value of the collection. It returns undefined if the collection is empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_14\n\nLANGUAGE: ReScript\nCODE:\n```\nlet maxUndefined: t<'value, 'id> => Js.undefined<'value>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nmodule IntCmp = Belt.Id.MakeComparable({\n  type t = int\n  let cmp = Pervasives.compare\n})\n\nlet s0 = Belt.MutableSet.make(~id=module(IntCmp))\nlet s1 = Belt.MutableSet.fromArray([3, 2, 1, 5], ~id=module(IntCmp))\n\ns0->Belt.MutableSet.maxUndefined /* undefined */\ns1->Belt.MutableSet.maxUndefined /* 5 */\n```\n\n----------------------------------------\n\nTITLE: RegExp Test Functions\nDESCRIPTION: Functions for testing if a RegExp pattern matches a string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/re.mdx#2025-04-18_snippet_14\n\nLANGUAGE: res\nCODE:\n```\nlet test_: (t, string) => bool\n```\n\nLANGUAGE: res\nCODE:\n```\nlet str = \"hello world!\"\n\nlet startsWith = (target, substring) => Js.Re.fromString(\"^\" ++ substring)->Js.Re.test_(target)\n\nJs.log(str->startsWith(\"hello\")) /* prints \"true\" */\n```\n\nLANGUAGE: res\nCODE:\n```\nlet test: (string, t) => bool\n```\n\n----------------------------------------\n\nTITLE: Checking if a value is Nullable in ReScript\nDESCRIPTION: The 'isNullable' function returns true if the given value is null or undefined, false otherwise.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/nullable.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reason\nCODE:\n```\nlet isNullable: t('a) => bool;\n```\n\n----------------------------------------\n\nTITLE: Element Access Operations in MutableSet - ReScript\nDESCRIPTION: Functions to access elements in the set with different return types and behaviors.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\nlet get: (t<'value, 'id>, 'value) => option<'value>\nlet getUndefined: (t<'value, 'id>, 'value) => Js.undefined<'value>\nlet getExn: (t<'value, 'id>, 'value) => 'value\n```\n\nLANGUAGE: rescript\nCODE:\n```\nmodule IntCmp = Belt.Id.MakeComparable({\n  type t = int\n  let cmp = Pervasives.compare\n})\n\nlet s0 = Belt.MutableSet.fromArray([1, 2, 3, 4, 5], ~id=module(IntCmp))\n\ns0->Belt.MutableSet.get(3) /* Some(3) */\ns0->Belt.MutableSet.get(20) /* None */\n```\n\n----------------------------------------\n\nTITLE: Dictionary FromList Function\nDESCRIPTION: Function for creating a dictionary from a list of key-value pairs\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/dict.mdx#2025-04-18_snippet_15\n\nLANGUAGE: reason\nCODE:\n```\nlet fromList: list((key, 'a)) => t('a);\n```\n\n----------------------------------------\n\nTITLE: Dictionary Get Example Usage\nDESCRIPTION: Examples demonstrating safe value retrieval from dictionary.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/dict.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nJs.Dict.get(ages, \"Vinh\") == Some(22)\nJs.Dict.get(ages, \"Paul\") == None\n```\n\n----------------------------------------\n\nTITLE: Using ignore() Function in ReScript\nDESCRIPTION: Demonstrates the usage of ignore() function to discard return values from promises and timeouts.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/function.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\nmySideEffect()->Promise.catch(handleError)->ignore\n\nsetTimeout(myFunc, 1000)->ignore\n```\n\nLANGUAGE: javascript\nCODE:\n```\n$$Promise.$$catch(mySideEffect(), function (prim) {\n  return handleError(prim);\n});\n\nsetTimeout(function (prim) {\n  myFunc();\n}, 1000);\n```\n\n----------------------------------------\n\nTITLE: Defining stableSortInPlaceBy Function\nDESCRIPTION: Function that performs in-place stable sorting of an array using a comparator function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/sort-array.mdx#2025-04-18_snippet_7\n\nLANGUAGE: reason\nCODE:\n```\nlet stableSortInPlaceBy: (array('a), ('a, 'a) => int) => unit;\n```\n\n----------------------------------------\n\nTITLE: Raising SyntaxError exception in ReScript\nDESCRIPTION: Function signature for raising a JavaScript SyntaxError exception with a custom message.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/exn.mdx#2025-04-18_snippet_12\n\nLANGUAGE: rescript\nCODE:\n```\nlet raiseSyntaxError: string => 'a\n```\n\n----------------------------------------\n\nTITLE: Creating Intersection of Sets in ReScript MutableSetString\nDESCRIPTION: Returns a new set containing only the elements that exist in both input sets.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_15\n\nLANGUAGE: reason\nCODE:\n```\nlet intersect: (t, t) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet s0 = Belt.MutableSet.String.fromArray([|\"apple\", \"banana\", \"orange\", \"carrot\"|]);\nlet s1 = Belt.MutableSet.String.fromArray([|\"apple\", \"banana\", \"orange\", \"strawberry\"|]);\nlet intersect = Belt.MutableSet.String.intersect(s0, s1);\nintersect->Belt.MutableSet.String.toArray; /* [|\"apple\", \"banana\", \"orange\"|] */\n```\n\n----------------------------------------\n\nTITLE: Creating Current Date in ReScript\nDESCRIPTION: Function signature for make, which returns a date representing the current time.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet make: unit => t\n```\n\n----------------------------------------\n\nTITLE: Defining array_like Type in ReScript TypedArray\nDESCRIPTION: Defines a generic array_like type that represents JavaScript objects that behave like arrays, parameterized by the type of elements it contains.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\ntype array_like<'a>\n```\n\n----------------------------------------\n\nTITLE: Renaming Fields in Record Destructuring\nDESCRIPTION: Shows how to rename fields when destructuring a record in ReScript, using the 'fieldName: newName' syntax.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\nlet {name: n} = student1 // \"John\" assigned to `n`\n```\n\nLANGUAGE: js\nCODE:\n```\nvar n = \"John\";\n```\n\n----------------------------------------\n\nTITLE: Basic Set Operations Implementation\nDESCRIPTION: Implementation of fundamental set operations including empty set creation, array conversion, and membership testing.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/set-int.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet empty: t\nlet fromArray: array<value> => t\nlet fromSortedArrayUnsafe: array<value> => t\nlet isEmpty: t => bool\nlet has: (t, value) => bool\n```\n\n----------------------------------------\n\nTITLE: Creating a HashSet from an Array in ReScript\nDESCRIPTION: This function signature shows how to create a HashSet from an array, given a custom id module.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-set.mdx#2025-04-18_snippet_18\n\nLANGUAGE: reason\nCODE:\n```\nlet fromArray: (array('a), ~id: id('a, 'id)) => t('a, 'id);\n```\n\n----------------------------------------\n\nTITLE: Creating HashMap from Array in ReScript\nDESCRIPTION: Creates a new hash map from an array of key-value pairs using Belt.HashMap.String.fromArray.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-map-string.mdx#2025-04-18_snippet_16\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromArray: array<(key, 'a)> => t<'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet hMap = Belt.HashMap.String.fromArray([(\"1\", \"value1\"), (\"2\", \"value2\")])\nBelt.HashMap.String.toArray(hMap) == [(\"1\", \"value1\"), (\"2\", \"value2\")]\n```\n\n----------------------------------------\n\nTITLE: JSON Kind Type Definition\nDESCRIPTION: Recursive type definition for different kinds of JSON values including strings, numbers, objects, arrays, booleans, and null values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/json.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\ntype rec kind<'a> =\n  | String: kind<Js_string.t>\n  | Number: kind<float>\n  | Object: kind<Js_dict.t<t>>\n  | Array: kind<array<t>>\n  | Boolean: kind<bool>\n  | Null: kind<Js_types.null_val>\n```\n\n----------------------------------------\n\nTITLE: Using @scope Decorator with Math.floor in ReScript\nDESCRIPTION: Demonstrates how to use the @scope decorator with @val to bind to the Math.floor method in JavaScript. This creates a binding to a method on a global JavaScript object using a parent scope.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/decorator_scope.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\n@scope(\"Math\") @val\nexternal floor: float => int = \"floor\"\n\nlet result = floor(3.4)\n```\n\nLANGUAGE: js\nCODE:\n```\nvar result = Math.floor(3.4);\n```\n\n----------------------------------------\n\nTITLE: ReScript String Concatenation\nDESCRIPTION: Demonstrates ReScript's string concatenation operator and its JavaScript equivalent.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/overview.mdx#2025-04-18_snippet_11\n\nLANGUAGE: rescript\nCODE:\n```\n\"Hello \" ++ \"World\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\n\"Hello \" + \"World\"\n```\n\n----------------------------------------\n\nTITLE: Accessing exception stack in ReScript\nDESCRIPTION: Function signature for retrieving the stack trace of a JavaScript exception as an optional string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/exn.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet stack: t => option<string>\n```\n\n----------------------------------------\n\nTITLE: Checking if Any Element Satisfies Predicate with Uncurried Function in ReasonML\nDESCRIPTION: Provides an uncurried function variant to check if at least one element in a set satisfies a given predicate.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set.mdx#2025-04-18_snippet_25\n\nLANGUAGE: reasonml\nCODE:\n```\nlet someU: (t('value, 'id), [@bs] ('value => bool)) => bool;\n```\n\n----------------------------------------\n\nTITLE: Implementing Counter with setIntervalFloat in ReScript\nDESCRIPTION: Example showing how to use setIntervalFloat for a counting timer with float interval.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/global.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet count = ref(0)\n\nlet tick = () => {\n  count := count.contents + 1\n  Js.log(Belt.Int.toString(count.contents))\n}\n\nJs.Global.setIntervalFloat(tick, 1000.0)\n```\n\n----------------------------------------\n\nTITLE: Reverse Float32Array In-Place\nDESCRIPTION: Reverses the order of elements in the Float32Array in-place and returns the modified array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_15\n\nLANGUAGE: rescript\nCODE:\n```\nlet reverseInPlace: t => t\n```\n\n----------------------------------------\n\nTITLE: Concatenating Arrays in ReScript\nDESCRIPTION: The concat function concatenates two arrays, returning a new array. The original arrays are not modified.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array-2.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rescript\nCODE:\n```\nlet concat: (t<'a>, t<'a>) => t<'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.Array2.concat([\"a\", \"b\"], [\"c\", \"d\", \"e\"]) == [\"a\", \"b\", \"c\", \"d\", \"e\"]\n```\n\n----------------------------------------\n\nTITLE: String toLocaleLowerCase Function in ReScript\nDESCRIPTION: The toLocaleLowerCase function converts a string to lowercase using the current locale. This allows for language-specific case conversions that might differ from the standard Unicode mappings.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/string.mdx#2025-04-18_snippet_19\n\nLANGUAGE: res\nCODE:\n```\nlet toLocaleLowerCase: t => t\n```\n\n----------------------------------------\n\nTITLE: Reduce Array Elements from Right with Index\nDESCRIPTION: Applies a function against an accumulator and each element in the array (from right to left), with access to the element index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-64-array.mdx#2025-04-18_snippet_47\n\nLANGUAGE: reason\nCODE:\n```\nlet reduceRighti: ((. 'b, elt, int) => 'b, 'b, t) => 'b;\n```\n\n----------------------------------------\n\nTITLE: Array Search and Join Operations in ReScript\nDESCRIPTION: Functions for searching array elements and joining array elements into strings with custom separators.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/array.mdx#2025-04-18_snippet_7\n\nLANGUAGE: res\nCODE:\n```\nJs.Array.indexOf(102, [100, 101, 102, 103]) == 2\nJs.Array.indexOf(999, [100, 101, 102, 103]) == -1\n\nJs.Array.joinWith(\"--\", [\"ant\", \"bee\", \"cat\"]) == \"ant--bee--cat\"\nJs.Array.joinWith(\"\", [\"door\", \"bell\"]) == \"doorbell\"\nJs.Array.joinWith(\"/\", [2020, 9, 4]) == \"2020/9/4\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Option-Wrapped Value from ReScript Belt.Set.String\nDESCRIPTION: Gets a reference to a value in the set that is equivalent to the provided value, using the collection's comparator. Returns Some(value) if found, None if not present.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set-string.mdx#2025-04-18_snippet_36\n\nLANGUAGE: rescript\nCODE:\n```\nlet get: (t, value) => option<value>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet s0 = Belt.Set.String.fromArray([\"apple\", \"carrot\"])\n\ns0->Belt.Set.String.get(\"carrot\") /* Some(\"carrot\") */\ns0->Belt.Set.String.get(\"watermelon\") /* None */\n```\n\n----------------------------------------\n\nTITLE: Implementing Array reduceRight Method in ReScript\nDESCRIPTION: Function that reduces an array from right to left. Takes a reducer function, initial value, and array as parameters. The reducer receives accumulator and current value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/array.mdx#2025-04-18_snippet_24\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduceRight: (('b, 'a) => 'b, 'b, t<'a>) => 'b\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet sumOfSquares = (accumulator, item) => accumulator + item * item\n\nJs.Array.reduceRight(sumOfSquares, 0, [10, 2, 4]) == 120\nJs.Array.reduceRight((acc, item) => item /. acc, 1.0, [2.0, 4.0]) == 0.5\n```\n\n----------------------------------------\n\nTITLE: Partial Application with Labeled Arguments in ReScript\nDESCRIPTION: This snippet demonstrates how labeled arguments in ReScript can be used with partial application, allowing for flexible and reusable function calls.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/language_labeled_argument.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet calcY = calculateDistance(~x1=6., ~x2=3., ...)\ncalcY(~y1=8., ~y2=4.)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction calcY(none, extra) {\n  return calculateDistance(6, none, 3, extra);\n}\n\ncalcY(8, 4);\n```\n\n----------------------------------------\n\nTITLE: ReScript Console Timer Methods\nDESCRIPTION: Methods for starting and ending console timers to measure execution time between points in code.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/console.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet timeStart: string => unit\nlet timeEnd: string => unit\n```\n\n----------------------------------------\n\nTITLE: Session Storage Binding - ReScript\nDESCRIPTION: External binding to access the browser's sessionStorage object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/dom/storage2.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\n@bs.val external sessionStorage: t = \"sessionStorage\"\n```\n\n----------------------------------------\n\nTITLE: Defining the option type in ReScript\nDESCRIPTION: Shows the definition of the option type in ReScript/OCaml standard library.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/option.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype option<'a> = None | Some('a)\n```\n\n----------------------------------------\n\nTITLE: Conversion Operations in MutableSet - ReScript\nDESCRIPTION: Functions to convert MutableSet to other data structures like lists and arrays.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nlet toList: t<'value, 'id> => list<'value>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet toArray: t<'value, 'id> => array<'value>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nmodule IntCmp = Belt.Id.MakeComparable({\n  type t = int\n  let cmp = Pervasives.compare\n})\n\nlet s0 = Belt.MutableSet.fromArray([3, 2, 1, 5], ~id=module(IntCmp))\n\ns0->Belt.MutableSet.toList /* [1,2,3,5] */\ns0->Belt.MutableSet.toArray /* [1,2,3,5] */\n```\n\n----------------------------------------\n\nTITLE: Creating the intersection of two sets in ReScript\nDESCRIPTION: Returns a new set containing only the elements that exist in both input sets.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-int.mdx#2025-04-18_snippet_12\n\nLANGUAGE: reason\nCODE:\n```\nlet intersect: (t, t) => t;\n```\n\n----------------------------------------\n\nTITLE: Normalizing Unicode Strings in ReScript\nDESCRIPTION: The normalize and normalizeByForm functions normalize Unicode strings using various normalization forms. This ensures equivalent binary representation for characters that can be represented in multiple ways.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string-2.mdx#2025-04-18_snippet_8\n\nLANGUAGE: ReScript\nCODE:\n```\nlet normalize: t => t;\nlet normalizeByForm: (t, t) => t;\n```\n\n----------------------------------------\n\nTITLE: Using := Operator for Ref Assignment in ReScript\nDESCRIPTION: Shows the syntax sugar for assigning a new value to a ref using the := operator in ReScript. This is equivalent to the previous example.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/mutation.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ReScript\nCODE:\n```\nmyValue := 6\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nmyValue.contents = 6;\n```\n\n----------------------------------------\n\nTITLE: Reducing HashMap in ReScript\nDESCRIPTION: Reduces the hash map to a single value using Belt.HashMap.String.reduce.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-map-string.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduce: (t<'b>, 'c, ('c, key, 'b) => 'c) => 'c\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet hMap = Belt.HashMap.String.make(~hintSize=10)\nBelt.HashMap.String.set(hMap, \"1\", \"value1\")\nBelt.HashMap.String.set(hMap, \"2\", \"value2\")\n\nBelt.HashMap.String.reduce(hMap, \"\", (acc, key, value) =>\n  acc ++ (\", \" ++ value)\n) == \"value1, value2\"\n```\n\n----------------------------------------\n\nTITLE: Conditionally Passing Optional Arguments\nDESCRIPTION: A verbose approach to conditionally passing optional arguments using pattern matching. This demonstrates the problem that's solved by the explicit passing syntax.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/function.mdx#2025-04-18_snippet_11\n\nLANGUAGE: res\nCODE:\n```\nlet result =\n  switch payloadRadius {\n  | None => drawCircle(~color)\n  | Some(r) => drawCircle(~color, ~radius=r)\n  }\n```\n\nLANGUAGE: js\nCODE:\n```\nvar r = payloadRadius;\n\nvar result = r !== undefined\n  ? drawCircle(color, Caml_option.valFromOption(r))\n  : drawCircle(color);\n```\n\n----------------------------------------\n\nTITLE: String Concatenation in ReScript\nDESCRIPTION: Concatenating strings in ReScript using the ++ operator, which combines multiple strings into one.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/primitive-types.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\nlet greetings = \"Hello \" ++ \"world!\"\n```\n\nLANGUAGE: js\nCODE:\n```\nvar greetings = \"Hello world!\";\n```\n\n----------------------------------------\n\nTITLE: Defining Lower Bound Polymorphic Variant in ReScript\nDESCRIPTION: Shows how to define a lower bound (extensible) polymorphic variant type for blue tones in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/polymorphic-variant.mdx#2025-04-18_snippet_19\n\nLANGUAGE: res\nCODE:\n```\ntype basicBlueTone<'a> = [> #Blue | #DeepBlue | #LightBlue ] as 'a\ntype color = basicBlueTone<[#Blue | #DeepBlue | #LightBlue | #Purple]>\n\nlet color:  color = #Purple\n\n// This will fail due to missing minimum constructors:\ntype notWorking = basicBlueTone<[#Purple]>\n```\n\n----------------------------------------\n\nTITLE: Counter with Reset using Lazy Initialization in ReScript\nDESCRIPTION: An extended counter example that uses useReducerWithMapState for lazy initialization. Demonstrates how to implement a reset action that returns to the initial state through the init function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/hooks-reducer.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\n// Counter.res\n\ntype action = Inc | Dec | Reset(int)\ntype state = {count: int}\n\nlet init = initialCount => {\n  {count: initialCount}\n}\n\nlet reducer = (state, action) => {\n  switch action {\n  | Inc => {count: state.count + 1}\n  | Dec => {count: state.count - 1}\n  | Reset(count) => init(count)\n  }\n}\n\n@react.component\nlet make = (~initialCount: int) => {\n  let (state, dispatch) = React.useReducerWithMapState(\n    reducer,\n    initialCount,\n    init,\n  )\n\n  <>\n    {React.string(\"Count:\" ++ Belt.Int.toString(state.count))}\n    <button onClick={_ => dispatch(Dec)}> {React.string(\"-\")} </button>\n    <button onClick={_ => dispatch(Inc)}> {React.string(\"+\")} </button>\n  </>\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction init(initialCount) {\n  return {\n          count: initialCount\n        };\n}\n\nfunction reducer(state, action) {\n  if (typeof action === \"number\") {\n    if (action !== 0) {\n      return {\n              count: state.count - 1 | 0\n            };\n    } else {\n      return {\n              count: state.count + 1 | 0\n            };\n    }\n  } else {\n    return {\n            count: action._0\n          };\n  }\n}\n\nfunction Counter(Props) {\n  var initialCount = Props.initialCount;\n  var match = React.useReducer(reducer, initialCount, init);\n  var dispatch = match[1];\n  return React.createElement(React.Fragment, undefined, \"Count:\" + String(match[0].count), React.createElement(\"button\", {\n                  onClick: (function (param) {\n                      return Curry._1(dispatch, /* Dec */1);\n                    })\n                }, \"-\"), React.createElement(\"button\", {\n                  onClick: (function (param) {\n                      return Curry._1(dispatch, /* Inc */0);\n                    })\n                }, \"+\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Block Return Values in JavaScript and ReScript\nDESCRIPTION: Shows how ReScript's implicit block returns compare to JavaScript's immediately-invoked function expressions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/overview.mdx#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet result = (function() {\n  const x = 23;\n  const y = 34;\n  return x + y;\n})();\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet result = {\n  let x = 23\n  let y = 34\n  x + y\n}\n```\n\n----------------------------------------\n\nTITLE: Dictionary Set Example Usage\nDESCRIPTION: Examples showing how to add and update dictionary entries.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/dict.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\nJs.Dict.set(ages, \"Maria\", 31)\nJs.log(ages == Js.Dict.fromList(list{(\"Maria\", 31), (\"Vinh\", 22), (\"Fred\", 49)}))\n\nJs.Dict.set(ages, \"David\", 66)\nJs.log(ages == Js.Dict.fromList(list{(\"Maria\", 31), (\"Vinh\", 22), (\"Fred\", 49), (\"David\", 66)}))\n```\n\n----------------------------------------\n\nTITLE: Basic Value Assignment in ReScript\nDESCRIPTION: Example of assigning a simple number value in ReScript with JS output.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/null-undefined-option.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet licenseNumber = 5\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar licenseNumber = 5;\n```\n\n----------------------------------------\n\nTITLE: Extracting keys to array in ReScript\nDESCRIPTION: Function signature for extracting all keys from a mutable map into an array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_22\n\nLANGUAGE: ReScript\nCODE:\n```\nlet keysToArray: t<'a> => array<key>\n```\n\n----------------------------------------\n\nTITLE: Checking if all elements satisfy a predicate in ReScript\nDESCRIPTION: Returns a boolean indicating whether all elements of the set satisfy the predicate.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set-string.mdx#2025-04-18_snippet_22\n\nLANGUAGE: rescript\nCODE:\n```\nlet every: (t, value => bool) => bool\n```\n\n----------------------------------------\n\nTITLE: Vector Left Fold Operation\nDESCRIPTION: Performs a left fold operation on vector elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/vector.mdx#2025-04-18_snippet_11\n\nLANGUAGE: res\nCODE:\n```\nlet foldLeft: ((. 'a, 'b) => 'a, 'a, t<'b>) => 'a\n```\n\n----------------------------------------\n\nTITLE: Defining comparable type in ReScript\nDESCRIPTION: Defines a type 'comparable' as a module of the Comparable type. It includes a comparison function and comes with a unique identity guaranteed by the type system.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/id.mdx#2025-04-18_snippet_4\n\nLANGUAGE: ReScript\nCODE:\n```\ntype ('key,'id) comparable = (module BeltId.Comparable with type identity = 'id and type t = 'key)\n```\n\n----------------------------------------\n\nTITLE: Getting a value from a HashMap with integer keys in ReScript\nDESCRIPTION: Retrieves the value associated with a given key. Returns None if the key doesn't exist in the map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-map-int.mdx#2025-04-18_snippet_7\n\nLANGUAGE: reason\nCODE:\n```\nlet get: (t('a), key) => option('a);\n```\n\n----------------------------------------\n\nTITLE: Splitting a Belt.Set in ReScript\nDESCRIPTION: The 'split' function returns a tuple ((smaller, larger), present), where 'present' is true when the element exists in the set. The function signature and usage example are provided.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/set.mdx#2025-04-18_snippet_19\n\nLANGUAGE: rescript\nCODE:\n```\nlet split: (t<'value, 'id>, 'value) => ((t<'value, 'id>, t<'value, 'id>), bool)\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet s0 = Belt.Set.fromArray([1,2,3,4,5], ~id=module(IntCmp))\n\nlet ((smaller, larger), present) = s0->Belt.Set.split(3)\n\npresent /* true */\nsmaller->Belt.Set.toArray /* [1,2] */\nlarger->Belt.Set.toArray /* [4,5] */\n```\n\n----------------------------------------\n\nTITLE: Extracting Substring to End in ReScript\nDESCRIPTION: The substringToEnd function extracts a substring from a specified index to the end of the string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/string-2.mdx#2025-04-18_snippet_30\n\nLANGUAGE: rescript\nCODE:\n```\nlet substringToEnd: (t, ~from: int) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.String2.substringToEnd(\"playground\", ~from=4) == \"ground\"\nJs.String2.substringToEnd(\"playground\", ~from=-3) == \"playground\"\nJs.String2.substringToEnd(\"playground\", ~from=12) == \"\"\n```\n\n----------------------------------------\n\nTITLE: Minimum Value Retrieval in ReScript Belt.Set\nDESCRIPTION: Returns the minimum value from a Belt.Set collection. Returns None if the collection is empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set.mdx#2025-04-18_snippet_23\n\nLANGUAGE: res\nCODE:\n```\nlet minimum: t<'value, 'id> => option<'value>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet s0 = Belt.Set.make(~id=module(IntCmp))\nlet s1 = Belt.Set.fromArray([3,2,1,5], ~id=module(IntCmp))\n\ns0->Belt.Set.minimum /* None */\ns1->Belt.Set.minimum /* Some(1) */\n```\n\n----------------------------------------\n\nTITLE: Converting Date to Locale Time String in ReScript\nDESCRIPTION: Converts a Date object to a string with only the time formatted according to the current locale. Shows time of day in locale-specific format.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_74\n\nLANGUAGE: rescript\nCODE:\n```\nlet toLocaleTimeString: t => string\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.Date.toLocaleString(exampleDate) == \"10:30:54 PM\" // for en_US.utf8\nJs.Date.toLocaleString(exampleDate) == \"22:30:54\" // for de_DE.utf8\n```\n\n----------------------------------------\n\nTITLE: Mapping Nullable Values with bind in ReScript\nDESCRIPTION: Defines the 'bind' function that maps the contained value using the given function if the nullable value is not null or undefined.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/null-undefined.mdx#2025-04-18_snippet_6\n\nLANGUAGE: reason\nCODE:\n```\nlet bind: (t('a), (. 'a) => 'b) => t('b);\n```\n\n----------------------------------------\n\nTITLE: Testing if All Array Elements Pass a Condition with Index in ReScript\nDESCRIPTION: Returns true if the provided predicate function returns true for all items in the array. The predicate function takes both the array element and its index. When given an empty array, returns true.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/array.mdx#2025-04-18_snippet_11\n\nLANGUAGE: rescript\nCODE:\n```\nlet everyi: (('a, int) => bool, t<'a>) => bool\n```\n\nLANGUAGE: rescript\nCODE:\n```\n// determine if all even-index items are positive\nlet evenIndexPositive = (item, index) => mod(index, 2) == 0 ? item > 0 : true\n\nJs.Array.everyi(evenIndexPositive, [6, -3, 5, 8]) == true\nJs.Array.everyi(evenIndexPositive, [6, 3, -5, 8]) == false\n```\n\n----------------------------------------\n\nTITLE: Merging Two Maps with Custom Function in ReScript (Uncurried)\nDESCRIPTION: Merges two maps using a custom function to determine the presence and value of each binding in the resulting map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reasonml\nCODE:\n```\nlet mergeU:\n(t('k, 'v, 'id), t('k, 'v2, 'id), [@bs] (('k, option('v), option('v2)) => option('v3))) =>\nt('k, 'v3, 'id);\n```\n\n----------------------------------------\n\nTITLE: Slicing UInt32Array from position\nDESCRIPTION: Defines a function that returns a new array containing elements from start (inclusive) to the end of the array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_27\n\nLANGUAGE: rescript\nCODE:\n```\nlet sliceFrom: (int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Defining String Type in ReScript\nDESCRIPTION: Type definition for ReScript string type that maps to JavaScript string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/string.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype t = string\n```\n\n----------------------------------------\n\nTITLE: Integer to String Conversion in ReScript\nDESCRIPTION: Basic conversion of an integer to string representation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/int.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reason\nCODE:\n```\nlet toString: int => string;\n```\n\nLANGUAGE: reason\nCODE:\n```\n/* prints \"123456789\" */\nJs.log(Js.Int.toString(123456789));\n```\n\n----------------------------------------\n\nTITLE: Finding element with index in UInt32Array\nDESCRIPTION: Defines a function that returns the first element in the array that satisfies the provided testing function with access to the element index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_37\n\nLANGUAGE: rescript\nCODE:\n```\nlet findi: ((. elt, int) => bool, t) => Js.undefined<elt>\n```\n\n----------------------------------------\n\nTITLE: Creating and Shuffling an Array with Uncurried Function in ReScript\nDESCRIPTION: The makeByAndShuffleU function creates an array using an uncurried function and then shuffles it, combining the makeByU and shuffle operations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/array.mdx#2025-04-18_snippet_20\n\nLANGUAGE: ReScript\nCODE:\n```\nlet makeByAndShuffleU: (int, (. int) => 'a) => array<'a>\n```\n\n----------------------------------------\n\nTITLE: Iterating Over a HashSet in ReScript\nDESCRIPTION: This function signature shows how to iterate over a HashSet. The order of iteration is unspecified.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-set.mdx#2025-04-18_snippet_12\n\nLANGUAGE: reason\nCODE:\n```\nlet forEach: (t('a, 'id), 'a => unit) => unit;\n```\n\n----------------------------------------\n\nTITLE: Multiplying Floats in ReScript\nDESCRIPTION: Multiplication of two float values using the * operator from Belt.Float. Can be opened in a module to avoid dot-notation, but yields a shadow warning.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/float.mdx#2025-04-18_snippet_6\n\nLANGUAGE: reason\nCODE:\n```\nlet ( * ): (float, float) => float;\n```\n\nLANGUAGE: reason\nCODE:\n```\nopen Belt.Float;\nJs.log(2.0 * 2.0 === 4.0); /* true */\n```\n\n----------------------------------------\n\nTITLE: Converting ReScript exception to JavaScript exception\nDESCRIPTION: Function that attempts to convert a ReScript exception to a JavaScript exception object, returning an option type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/exn.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet asJsExn: exn => option(t);\n```\n\n----------------------------------------\n\nTITLE: Finding Element Index in Array in ReScript\nDESCRIPTION: The indexOf function returns the index of the first occurrence of a given value in the array. If the value is not found, it returns -1.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array-2.mdx#2025-04-18_snippet_13\n\nLANGUAGE: rescript\nCODE:\n```\nlet indexOf: (t<'a>, 'a) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.Array2.indexOf([100, 101, 102, 103], 102) == 2\nJs.Array2.indexOf([100, 101, 102, 103], 999) == -1\n```\n\n----------------------------------------\n\nTITLE: Boolean Operations in ReScript vs JavaScript\nDESCRIPTION: Shows boolean operations in ReScript and their JavaScript output. These operators are identical in both languages.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/overview.mdx#2025-04-18_snippet_14\n\nLANGUAGE: rescript\nCODE:\n```\n!, &&, ||\n```\n\nLANGUAGE: javascript\nCODE:\n```\n!, &&, ||\n```\n\n----------------------------------------\n\nTITLE: Finding minimum key-value pair in ReScript map (option return)\nDESCRIPTION: Returns the key-value pair with the minimum key wrapped in an option, or None if the map is empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_28\n\nLANGUAGE: reasonml\nCODE:\n```\nlet minimum: t('a) => option((key, 'a));\n```\n\n----------------------------------------\n\nTITLE: Checking if a HashSet is Empty in ReScript\nDESCRIPTION: This function signature shows how to check if a HashSet is empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-set.mdx#2025-04-18_snippet_6\n\nLANGUAGE: reason\nCODE:\n```\nlet isEmpty: t('a, 'b) => bool;\n```\n\n----------------------------------------\n\nTITLE: Creating TypedArray from ArrayBuffer with Offset in ReScript\nDESCRIPTION: Function signature for creating a new Uint8ClampedArray view on an ArrayBuffer starting at a specified byte offset. Can throw an exception if the offset is invalid.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_53\n\nLANGUAGE: res\nCODE:\n```\nlet fromBufferOffset: (Js_typed_array2.array_buffer, int) => t\n```\n\n----------------------------------------\n\nTITLE: Signature for getExn Function in ReScript Result Module\nDESCRIPTION: Function signature for getExn, which extracts the value from an Ok result or raises an exception for an Error result.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/result.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet getExn: t<'a, 'b> => 'a\n```\n\n----------------------------------------\n\nTITLE: Adding Elements to MutableSet Example in ReasonML\nDESCRIPTION: Example demonstrating how to add elements to a MutableSet and handle duplicates.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_14\n\nLANGUAGE: reasonml\nCODE:\n```\nmodule IntCmp =\n  Belt.Id.MakeComparable({\n    type t = int;\n    let cmp = Pervasives.compare;\n  });\n\nlet s0 = Belt.MutableSet.make(~id=(module IntCmp));\ns0->Belt.MutableSet.add(1);\ns0->Belt.MutableSet.add(2);\ns0->Belt.MutableSet.add(2);\n\ns0->Belt.MutableSet.toArray; /* [|1, 2|] */\n```\n\n----------------------------------------\n\nTITLE: Finding Array Elements in ReScript\nDESCRIPTION: Returns first element that satisfies predicate function as Some(value), or None if no element found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array-2.mdx#2025-04-18_snippet_27\n\nLANGUAGE: res\nCODE:\n```\nJs.Array2.find([33, 22, -55, 77, -44], x => x < 0) == Some(-55)\nJs.Array2.find([33, 22, 55, 77, 44], x => x < 0) == None\n```\n\n----------------------------------------\n\nTITLE: Testing if any element satisfies a predicate in ReScript\nDESCRIPTION: Checks if at least one element in the set satisfies the given predicate function, returning a boolean result.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-int.mdx#2025-04-18_snippet_24\n\nLANGUAGE: reason\nCODE:\n```\nlet some: (t, value => bool) => bool;\n```\n\n----------------------------------------\n\nTITLE: Checking if one string set is a subset of another in ReScript\nDESCRIPTION: Returns a boolean indicating whether the second set is a subset of the first set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set-string.mdx#2025-04-18_snippet_14\n\nLANGUAGE: rescript\nCODE:\n```\nlet subset: (t, t) => bool\n```\n\n----------------------------------------\n\nTITLE: Setting Array Data in Uint8Array\nDESCRIPTION: Functions for setting array data into a Uint8Array, with optional offset specification.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\nlet setArray: (array<elt>, t) => unit\n```\n\nLANGUAGE: res\nCODE:\n```\nlet setArrayOffset: (array<elt>, int, t) => unit\n```\n\n----------------------------------------\n\nTITLE: Finding First Matching Element in TypedArray in ReScript\nDESCRIPTION: Function signature for finding the first element in a Uint8ClampedArray that satisfies the provided testing function, returning an undefined result if no element is found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_36\n\nLANGUAGE: res\nCODE:\n```\nlet find: ((. elt) => bool, t) => Js.undefined<elt>\n```\n\n----------------------------------------\n\nTITLE: Setting Array Elements with Offset\nDESCRIPTION: Copies values from a ReScript array into the typed array starting at the specified offset.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_type-s.mdx#2025-04-18_snippet_7\n\nLANGUAGE: res\nCODE:\n```\nlet setArrayOffset: (array<elt>, int, t) => unit\n```\n\n----------------------------------------\n\nTITLE: Performing set operations on SetDict in ReScript\nDESCRIPTION: Demonstrates how to perform set operations like union, intersect, and diff on SetDict instances.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-dict.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\nlet union: (t('value, 'id), t('value, 'id), ~cmp: cmp('value, 'id)) => t('value, 'id);\nlet intersect: (t('value, 'id), t('value, 'id), ~cmp: cmp('value, 'id)) => t('value, 'id);\nlet diff: (t('value, 'id), t('value, 'id), ~cmp: cmp('value, 'id)) => t('value, 'id);\n\nmodule IntCmp =\n  Belt.Id.MakeComparable({\n    type t = int;\n    let cmp = Pervasives.compare;\n  });\n\nlet s0 = Belt.Set.Dict.fromArray([|5,2,3,5,6|], ~cmp=IntCmp.cmp);\nlet s1 = Belt.Set.Dict.fromArray([|5,2,3,1,5,4|], ~cmp=IntCmp.cmp);\nlet union = Belt.Set.Dict.union(s0, s1, ~cmp=IntCmp.cmp);\nunion->Belt.Set.Dict.toArray; /* [|1,2,3,4,5,6|] */\n\nlet intersect = Belt.Set.Dict.intersect(s0, s1, ~cmp=IntCmp.cmp);\nintersect->Belt.Set.Dict.toArray; /* [|2,3,5|] */\n\nlet diff1 = Belt.Set.Dict.diff(s0, s1, ~cmp=IntCmp.cmp);\nlet diff2 = Belt.Set.Dict.diff(s1,s0, ~cmp=IntCmp.cmp);\n\ndiff1->Belt.Set.Dict.toArray; /* [|6|] */\ndiff2->Belt.Set.Dict.toArray; /* [|1,4|] */\n```\n\n----------------------------------------\n\nTITLE: Concatenating Multiple Strings in ReScript\nDESCRIPTION: The concatMany function combines an array of strings with a base string and returns a new string. All strings in the array are appended to the original string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string.mdx#2025-04-18_snippet_12\n\nLANGUAGE: reason\nCODE:\n```\nlet concatMany: (array(t), t) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nJs.String.concatMany([|\"2nd\", \"3rd\", \"4th\"|], \"1st\") == \"1st2nd3rd4th\";\n```\n\n----------------------------------------\n\nTITLE: Filtering map in MapString module (ReScript)\nDESCRIPTION: Function to filter a map based on a predicate, returning a new map with only key-value pairs that satisfy the predicate.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-string.mdx#2025-04-18_snippet_47\n\nLANGUAGE: reason\nCODE:\n```\nlet keep: (t('v), (key, 'v) => bool) => t('v);\n```\n\n----------------------------------------\n\nTITLE: Blitting Arrays in ReScript\nDESCRIPTION: The blit function copies elements from one array to another. It handles overlapping arrays and supports negative offsets.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/array.mdx#2025-04-18_snippet_32\n\nLANGUAGE: reason\nCODE:\n```\nlet blit:\n  (\n    ~src: array('a),\n    ~srcOffset: int,\n    ~dst: array('a),\n    ~dstOffset: int,\n    ~len: int\n  ) =>\n  unit;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet v1 = [|10, 11, 12, 13, 14, 15, 16, 17|];\nlet v2 = [|20, 21, 22, 23, 24, 25, 26, 27|];\n\nBelt.Array.blit(~src=v1, ~srcOffset=4, ~dst=v2, ~dstOffset=2, ~len=3);\nv2 == [|20, 21, 14, 15, 16, 25, 26, 27|];\n\nBelt.Array.blit(~src=v1, ~srcOffset=4, ~dst=v1, ~dstOffset=2, ~len=3);\nv1 == [|10, 11, 14, 15, 16, 15, 16, 17|];\n```\n\n----------------------------------------\n\nTITLE: Test if Any Array Element Passes with Index\nDESCRIPTION: Tests whether at least one element in the array passes the provided function test, with access to the element index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-64-array.mdx#2025-04-18_snippet_49\n\nLANGUAGE: reason\nCODE:\n```\nlet somei: ((. elt, int) => bool, t) => bool;\n```\n\n----------------------------------------\n\nTITLE: Copying Array in ReScript\nDESCRIPTION: The copy function returns a shallow copy of the entire array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array-2.mdx#2025-04-18_snippet_19\n\nLANGUAGE: rescript\nCODE:\n```\nlet copy: t<'a> => t<'a>\n```\n\n----------------------------------------\n\nTITLE: Map Element Access Operations\nDESCRIPTION: Functions for accessing and modifying map elements\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-map-int.mdx#2025-04-18_snippet_7\n\nLANGUAGE: reasonml\nCODE:\n```\nlet get: (t('a), key) => option('a);\n\nlet getUndefined: (t('a), key) => Js.undefined('a);\n\nlet getWithDefault: (t('a), key, 'a) => 'a;\n\nlet getExn: (t('a), key) => 'a;\n```\n\n----------------------------------------\n\nTITLE: Setting Date in ReScript\nDESCRIPTION: The setDate function sets a Date object's day of month to the specified value in the current time zone. It returns the timestamp of the updated Date and modifies the original Date object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_40\n\nLANGUAGE: res\nCODE:\n```\nlet setDate: (t, float) => float\n```\n\nLANGUAGE: res\nCODE:\n```\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet twoWeeksBefore = Js.Date.setDate(date1, 15.0)\ndate1 == Js.Date.fromString(\"1973-11-15T21:30:54.321Z00:00\")\ntwoWeeksBefore == Js.Date.getTime(date1)\n```\n\n----------------------------------------\n\nTITLE: Accessing and Modifying Js.t Object Fields in ReScript\nDESCRIPTION: Shows how to read and write fields of a Js.t object. Reading uses the '##' operator, while writing requires the [@bs.set] attribute on mutable fields.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/reason-compiler/latest/object-2.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reason\nCODE:\n```\ntype person = {. [@bs.set] \"age\": int};\n[@bs.val] external john : person = \"john\";\n\njohn##age #= 99;\n```\n\n----------------------------------------\n\nTITLE: Adding Element to MutableQueue in ReScript\nDESCRIPTION: Function to add an element to the end of the queue.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-queue.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet add: (t('a), 'a) => unit;\n```\n\n----------------------------------------\n\nTITLE: Float toFixedWithPrecision Function\nDESCRIPTION: Function to format a float using fixed-point notation with specified precision. Takes digits parameter to control decimal places.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/float.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet toFixedWithPrecision: (float, ~digits: int) => string\n```\n\n----------------------------------------\n\nTITLE: Binary Search Function Signature\nDESCRIPTION: Function signature for performing binary search on a sorted integer array. Returns index of found element or bitwise complement for insertion point if not found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/sort-array-int.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet binarySearch: (array<element>, element) => int\n```\n\n----------------------------------------\n\nTITLE: Defining RegExp Types in ReScript\nDESCRIPTION: Defines the core types for working with regular expressions: 't' for the RegExp object and 'result' for the execution result.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/re.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype t\n\ntype result\n```\n\n----------------------------------------\n\nTITLE: Accessing Pi Constant in ReScript\nDESCRIPTION: Constant for Pi (approximately 3.141592653589793), the ratio of a circle's circumference to its diameter, equivalent to JavaScript's Math.PI.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/math.mdx#2025-04-18_snippet_5\n\nLANGUAGE: reasonml\nCODE:\n```\nlet _PI: float;\n```\n\n----------------------------------------\n\nTITLE: Checking if UInt32Array includes value\nDESCRIPTION: Defines a function that determines whether the array includes a certain element, returning a boolean.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_18\n\nLANGUAGE: rescript\nCODE:\n```\nlet includes: (elt, t) => bool\n```\n\n----------------------------------------\n\nTITLE: Checking Key Existence in HashMap in ReScript\nDESCRIPTION: Checks if a key exists in the hash map using Belt.HashMap.String.has.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-map-string.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nlet has: (t<'b>, key) => bool\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet hMap = Belt.HashMap.String.make(~hintSize=10)\nBelt.HashMap.String.set(hMap, \"1\", \"value1\")\n\nBelt.HashMap.String.has(hMap, \"1\") == true\nBelt.HashMap.String.has(hMap, \"2\") == false\n```\n\n----------------------------------------\n\nTITLE: List Prepend in ReScript vs JavaScript\nDESCRIPTION: Demonstrates list prepend operations in ReScript and their corresponding JavaScript output as linked list structures.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/overview.mdx#2025-04-18_snippet_17\n\nLANGUAGE: rescript\nCODE:\n```\nlist{a1, a2, ...oldList}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{hd: a1, tl: {hd: a2, tl: theRest}}\n```\n\n----------------------------------------\n\nTITLE: Taking Elements from List in ReScript\nDESCRIPTION: The take function returns a new list with the first n elements, or None if the list has fewer than n elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/list.mdx#2025-04-18_snippet_15\n\nLANGUAGE: rescript\nCODE:\n```\nlet take: (t<'a>, int) => option<t<'a>>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlist{1, 2, 3}->Belt.List.take(1) // Some(list{1})\n\nlist{1, 2, 3}->Belt.List.take(2) // Some(list{1, 2})\n\nlist{1, 2, 3}->Belt.List.take(4) // None\n```\n\n----------------------------------------\n\nTITLE: Mapping Two Lists in Reverse Order with Belt.List in ReScript\nDESCRIPTION: The mapReverse2 function combines corresponding elements from two lists using a provided function and returns a new list in reverse order. It stops when the shorter list is exhausted.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/list.mdx#2025-04-18_snippet_42\n\nLANGUAGE: rescript\nCODE:\n```\nBelt.List.mapReverse2(list{1, 2, 3}, list{1, 2}, (a, b) => a + b) // list{4, 2}\n```\n\n----------------------------------------\n\nTITLE: Filtering and partitioning ReScript maps\nDESCRIPTION: Functions for keeping entries that satisfy a predicate and partitioning the map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-string.mdx#2025-04-18_snippet_9\n\nLANGUAGE: res\nCODE:\n```\nlet keepU: (t<'v>, (. key, 'v) => bool) => t<'v>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet keep: (t<'v>, (key, 'v) => bool) => t<'v>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet partitionU: (t<'v>, (. key, 'v) => bool) => (t<'v>, t<'v>)\n```\n\nLANGUAGE: res\nCODE:\n```\nlet partition: (t<'v>, (key, 'v) => bool) => (t<'v>, t<'v>)\n```\n\nLANGUAGE: res\nCODE:\n```\nlet split: (key, t<'v>) => (t<'v>, option<'v>, t<'v>)\n```\n\n----------------------------------------\n\nTITLE: Signature for mapWithDefault Function in ReScript Result Module\nDESCRIPTION: Function signature for mapWithDefault, which maps a function over the Ok value or returns a default value for Error.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/result.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet mapWithDefault: (t<'a, 'c>, 'b, 'a => 'b) => 'b\n```\n\n----------------------------------------\n\nTITLE: Merging multiple key-value pairs into map in MapString module (ReScript)\nDESCRIPTION: Function to merge an array of key-value pairs into a map, returning a new map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-string.mdx#2025-04-18_snippet_45\n\nLANGUAGE: reason\nCODE:\n```\nlet mergeMany: (t('v), array((key, 'v))) => t('v);\n```\n\n----------------------------------------\n\nTITLE: Checking if Any Element Satisfies Predicate in ReasonML\nDESCRIPTION: Demonstrates how to check if at least one element in a set satisfies a given predicate function using some.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set.mdx#2025-04-18_snippet_26\n\nLANGUAGE: reasonml\nCODE:\n```\nlet some: (t('value, 'id), 'value => bool) => bool;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet isOdd = x => x mod 2 != 0;\n\nlet s0 = Belt.Set.fromArray([|1,2,4,6,8|], ~id=(module IntCmp));\ns0->Belt.Set.some(isOdd); /* true */\n```\n\n----------------------------------------\n\nTITLE: Iterating over map with curried function in ReScript\nDESCRIPTION: Applies a curried function to each key-value pair in the map in increasing key order.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_11\n\nLANGUAGE: reasonml\nCODE:\n```\nlet forEach: (t('a), (key, 'a) => unit) => unit;\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Elements to a Set in ReasonML\nDESCRIPTION: Shows how to add multiple elements from an array to a set using mergeMany. Unlike add, this function may return a new reference even if all elements already exist.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set.mdx#2025-04-18_snippet_10\n\nLANGUAGE: reasonml\nCODE:\n```\nlet mergeMany: (t('value, 'id), array('value)) => t('value, 'id);\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet set = Belt.Set.make(~id=(module IntCmp));\n\nlet newSet = set->Belt.Set.mergeMany([|5, 4, 3, 2, 1|]);\nnewSet->Belt.Set.toArray; /* [|1, 2, 3, 4, 5|] */\n```\n\n----------------------------------------\n\nTITLE: Array Creation and Type Checking\nDESCRIPTION: Examples of creating arrays from array-like objects and checking if values are arrays.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array-2.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet strArr = Js.String.castToArrayLike(\"abcd\")\nJs.Array2.from(strArr) == [\"a\", \"b\", \"c\", \"d\"]\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet strArr = Js.String.castToArrayLike(\"abcd\")\nlet code = s => Js.String.charCodeAt(0, s)\nJs.Array2.fromMap(strArr, code) == [97.0, 98.0, 99.0, 100.0]\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.Array2.isArray([5, 2, 3, 1, 4]) == true\nJs.Array2.isArray(list{5, 2, 3, 1, 4}) == true\nJs.Array2.isArray(\"abcd\") == false\n```\n\n----------------------------------------\n\nTITLE: Converting Date to String in ReScript\nDESCRIPTION: Converts a Date object to a string representation with date and time in the current locale and time zone. Returns a human-readable date-time string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_75\n\nLANGUAGE: rescript\nCODE:\n```\nlet toString: t => string\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.Date.toString(\n  exampleDate,\n) == \"Thu Nov 29 1973 22:30:54 GMT+0100 (Central European Standard Time)\"\n```\n\n----------------------------------------\n\nTITLE: Writing 32-bit Signed Integer (Little Endian)\nDESCRIPTION: Stores a signed 32-bit integer at the specified byte offset from the start of the DataView using little-endian format.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_data-view.mdx#2025-04-18_snippet_29\n\nLANGUAGE: reasonml\nCODE:\n```\nlet setInt32LittleEndian: (t, int, int) => unit;\n```\n\n----------------------------------------\n\nTITLE: Configuring Sources in bsconfig.json - Basic Directory List\nDESCRIPTION: Specifies source directories for the ReScript compiler to process. This example shows how to include multiple directories ('src' and 'examples') as sources for compilation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/build-configuration.mdx#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sources\": [\"src\", \"examples\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Map Function Definition and Example\nDESCRIPTION: Function to transform an Option value using a mapping function, preserving the Option wrapper.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/option.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reason\nCODE:\n```\nlet map: (option('a), 'a => 'b) => option('b);\n```\n\nLANGUAGE: reason\nCODE:\n```\nBelt.Option.map(Some(3), x => x * x); /* Some(9) */\n\nBelt.Option.map(None, x => x * x); /* None */\n```\n\n----------------------------------------\n\nTITLE: Converting String to Float in ReScript\nDESCRIPTION: Safely converts a string to a float value. Returns an Option type - Some(float) when successful, None when the string cannot be parsed as a valid float.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/float.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromString: string => option<float>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.log(Belt.Float.fromString(\"1.0\") === Some(1.0)) /* true */\n```\n\n----------------------------------------\n\nTITLE: Converting map to list in ReScript\nDESCRIPTION: Function signature for converting a mutable map to a list of key-value pairs in increasing order.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_19\n\nLANGUAGE: ReScript\nCODE:\n```\nlet toList: t<'a> => list<(key, 'a)>\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler Warnings in bsconfig.json\nDESCRIPTION: Controls which compiler warnings are enabled, disabled, or treated as errors. This example disables warnings 44 and 102 (polymorphic comparison) and turns warning 5 (partial application whose result has function type and is ignored) into a hard error.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/build-configuration.mdx#2025-04-18_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"warnings\": {\n    \"number\": \"-44-102\",\n    \"error\": \"+5\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Float Multiplication in ReScript\nDESCRIPTION: The * operator performs multiplication of two float values. It can be opened in a module to avoid dot-notation, but this may yield a shadow warning.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/float.mdx#2025-04-18_snippet_6\n\nLANGUAGE: ReScript\nCODE:\n```\nopen Belt.Float\nJs.log(2.0 * 2.0 === 4.0) /* true */\n```\n\n----------------------------------------\n\nTITLE: Defining Js.t Object Type in ReScript\nDESCRIPTION: Demonstrates how to define a Js.t object type for interoperability with JavaScript objects. This example defines a 'person' type with name, age, and job fields.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/reason-compiler/latest/object-2.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\ntype person = Js.t({\n  .\n  name: string,\n  age: int,\n  job: string\n});\n\n[@bs.val] external john : person = \"john\";\n```\n\n----------------------------------------\n\nTITLE: Searching for Last Index of Substring in ReScript\nDESCRIPTION: The lastIndexOfFrom function returns the position of the last occurrence of a searchValue within a string, searching backwards from a given start position. It returns -1 if the searchValue is not found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string-2.mdx#2025-04-18_snippet_5\n\nLANGUAGE: ReScript\nCODE:\n```\nlet lastIndexOfFrom: (t, t, int) => int;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nJs.String2.lastIndexOfFrom(\"bookseller\", \"ok\", 6) == 2;\nJs.String2.lastIndexOfFrom(\"beekeeper\", \"ee\", 8) == 4;\nJs.String2.lastIndexOfFrom(\"beekeeper\", \"ee\", 3) == 1;\nJs.String2.lastIndexOfFrom(\"abcdefg\", \"xyz\", 4) == -1;\n```\n\n----------------------------------------\n\nTITLE: Creating Js.t Objects Literally in ReScript\nDESCRIPTION: Shows how to create Js.t objects using the %bs.obj syntax and Reason's syntactic sugar for object literals.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/reason-compiler/latest/object-2.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reason\nCODE:\n```\nlet bucklescript = [%bs.obj {\n  info: {author: \"Bob\"}\n}];\n\nlet name = bucklescript##info##author;\n```\n\n----------------------------------------\n\nTITLE: Comprehensive JSX Tag Example in ReScript\nDESCRIPTION: Shows a comprehensive example of a JSX component with various types of props including boolean, string, integer, optional values, and event handlers. This demonstrates most of the JSX features in one example.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/jsx.mdx#2025-04-18_snippet_6\n\nLANGUAGE: reason\nCODE:\n```\n<MyComponent\n  booleanAttribute={true}\n  stringAttribute=\"string\"\n  intAttribute=1\n  forcedOptional=?{Some(\"hello\")}\n  onClick={handleClick}>\n  <div> {React.string(\"hello\")} </div>\n</MyComponent>;\n```\n\nLANGUAGE: js\nCODE:\n```\nReact.createElement(\n  MyComponent.make,\n  MyComponent.makeProps(\n    true,\n    \"string\",\n    1,\n    \"hello\",\n    handleClick,\n    React.createElement(\"div\", undefined, \"hello\"),\n    undefined\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Iterating Over HashMap in ReScript\nDESCRIPTION: Applies a function to all key-value pairs in the hash map using Belt.HashMap.String.forEach.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-map-string.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\nlet forEach: (t<'b>, (key, 'b) => unit) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet hMap = Belt.HashMap.String.make(~hintSize=10)\nBelt.HashMap.String.set(hMap, \"1\", \"value1\")\nBelt.HashMap.String.forEach(hMap, (key, value) => Js.log2(key, value))\n// prints (\"1\", \"value1\")\n```\n\n----------------------------------------\n\nTITLE: Accessing MutableMap Elements in ReScript\nDESCRIPTION: Functions for accessing map elements, including minimum and maximum key-value pairs.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-map.mdx#2025-04-18_snippet_6\n\nLANGUAGE: ReScript\nCODE:\n```\nlet minKey: t<'k, 'a, 'b> => option<'k>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet minKeyUndefined: t<'k, 'a, 'b> => Js.undefined<'k>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet maxKey: t<'k, 'a, 'b> => option<'k>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet maxKeyUndefined: t<'k, 'a, 'b> => Js.undefined<'k>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet minimum: t<'k, 'a, 'b> => option<('k, 'a)>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet minUndefined: t<'k, 'a, 'b> => Js.undefined<('k, 'a)>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet maximum: t<'k, 'a, 'b> => option<('k, 'a)>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet maxUndefined: t<'k, 'a, 'b> => Js.undefined<('k, 'a)>\n```\n\n----------------------------------------\n\nTITLE: Splitting Strings with Limit in ReScript\nDESCRIPTION: The splitAtMost function splits a string by a delimiter, limiting the number of resulting substrings. It handles cases where the limit exceeds the possible splits.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string-2.mdx#2025-04-18_snippet_16\n\nLANGUAGE: reason\nCODE:\n```\nlet splitAtMost: (t, t, ~limit: int) => array(t);\n```\n\nLANGUAGE: reason\nCODE:\n```\nJs.String2.splitAtMost(\"ant/bee/cat/dog/elk\", \"/\", ~limit=3) == [|\"ant\", \"bee\", \"cat\"|];\nJs.String2.splitAtMost(\"ant/bee/cat/dog/elk\", \"/\", ~limit=0) == [||];\nJs.String2.splitAtMost(\"ant/bee/cat/dog/elk\", \"/\", ~limit=9) == [|\"ant\", \"bee\", \"cat\", \"dog\", \"elk\"|];\n```\n\n----------------------------------------\n\nTITLE: Dictionary Keys Operation\nDESCRIPTION: Type signature and example for retrieving all keys from a dictionary.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/dict.mdx#2025-04-18_snippet_6\n\nLANGUAGE: res\nCODE:\n```\nlet keys: t<'a> => array<string>\n```\n\nLANGUAGE: res\nCODE:\n```\nJs.Dict.keys(ages) == [\"Maria\", \"Vinh\", \"Fred\"]\n```\n\n----------------------------------------\n\nTITLE: Converting Integer to String in ReScript\nDESCRIPTION: Converts a given int to a string using the toString function from Belt.Int module. Uses the JavaScript String constructor under the hood.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/int.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet toString: int => string\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.log(Belt.Int.toString(1) === \"1\") /* true */\n```\n\n----------------------------------------\n\nTITLE: Reducing Array Elements with reduce in ReScript\nDESCRIPTION: Function signature for reduce that applies a function against an accumulator and each element in the Uint8Array to reduce it to a single value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_44\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduce: ((. 'b, elt) => 'b, 'b, t) => 'b\n```\n\n----------------------------------------\n\nTITLE: Example of using every in Belt.Range\nDESCRIPTION: Example demonstrating how to use every to check if all elements in a range satisfy a condition.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/range.mdx#2025-04-18_snippet_5\n\nLANGUAGE: reason\nCODE:\n```\nBelt.Range.every(0, 4, (i) => i < 5); /* true */\n\nBelt.Range.every(0, 4, (i) => i < 4); /* false */\n```\n\n----------------------------------------\n\nTITLE: Raising JavaScript UriError\nDESCRIPTION: Function that raises a JavaScript UriError with the provided message.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/exn.mdx#2025-04-18_snippet_14\n\nLANGUAGE: rescript\nCODE:\n```\nlet raiseUriError: string => 'a;\n```\n\n----------------------------------------\n\nTITLE: Declaring getHours Function for Date in ReScript\nDESCRIPTION: Declares the getHours function, which returns the hours for a given Date object in the current time zone.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_22\n\nLANGUAGE: rescript\nCODE:\n```\nlet getHours: t => float\n```\n\n----------------------------------------\n\nTITLE: Using Type Escape Hatch in ReScript\nDESCRIPTION: Shows how to use the external keyword as an escape hatch for type conversions in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/type.mdx#2025-04-18_snippet_6\n\nLANGUAGE: ReScript\nCODE:\n```\nexternal convertToFloat : int => float = \"%identity\"\nlet age = 10\nlet gpa = 2.1 +. convertToFloat(age)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar age = 10;\nvar gpa = 2.1 + 10;\n```\n\n----------------------------------------\n\nTITLE: Mathematical Constants Declaration in ReScript\nDESCRIPTION: Declaration of fundamental mathematical constants like Euler's number, natural logarithms, and PI with float type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/math.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\nlet _E: float\nlet _LN2: float\nlet _LN10: float\nlet _LOG2E: float\nlet _LOG10E: float\nlet _PI: float\nlet _SQRT1_2: float\nlet _SQRT2: float\n```\n\n----------------------------------------\n\nTITLE: Converting exn to JavaScript exception in ReScript\nDESCRIPTION: Function signature for converting a ReScript exception to an optional JavaScript exception.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/exn.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet asJsExn: exn => option<t>\n```\n\n----------------------------------------\n\nTITLE: Handling Special Global Values with %external in ReScript\nDESCRIPTION: This snippet demonstrates how to safely handle special global values like __DEV__ that may not always exist, using ReScript's %external syntax.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/bind-to-global-js-values.mdx#2025-04-18_snippet_4\n\nLANGUAGE: ReScript\nCODE:\n```\nswitch %external(__DEV__) {\n| Some(_) => Console.log(\"dev mode\")\n| None => Console.log(\"production mode\")\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar match = typeof __DEV__ === \"undefined\" ? undefined : __DEV__;\n\nif (match !== undefined) {\n  console.log(\"dev mode\");\n} else {\n  console.log(\"production mode\");\n}\n```\n\n----------------------------------------\n\nTITLE: Checking if a Set Contains an Element in ReasonML\nDESCRIPTION: Shows how to check if a specific element exists in a set using the has function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set.mdx#2025-04-18_snippet_8\n\nLANGUAGE: reasonml\nCODE:\n```\nlet has: (t('value, 'id), 'value) => bool;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet set = Belt.Set.fromArray([|1, 4, 2, 5|], ~id=(module IntCmp));\n\nset->Belt.Set.has(3) /* false */\nset->Belt.Set.has(1) /* true */\n```\n\n----------------------------------------\n\nTITLE: Initializing Example Date in ReScript\nDESCRIPTION: Creates an example date using Js.Date.fromFloat for use in subsequent examples. The date represents Thu, 29 Nov 1973 21:30:54 GMT.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nlet exampleDate = Js.Date.fromFloat(123456654321.0)\n```\n\n----------------------------------------\n\nTITLE: Iterating with Element Index\nDESCRIPTION: Executes the provided function once for each element in the array, providing both the element and its index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_41\n\nLANGUAGE: rescript\nCODE:\n```\nlet forEachi: ((. elt, int) => unit, t) => unit\n```\n\n----------------------------------------\n\nTITLE: Initial Pattern Matching in ReScript\nDESCRIPTION: First attempt at pattern matching with nested ternary operator. Shows improvement over if-else but still maintains unnecessary complexity.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_18\n\nLANGUAGE: rescript\nCODE:\n```\nlet optionBoolToBool = opt => {\n  switch opt {\n  | None => false\n  | Some(a) => a ? true : false\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction optionBoolToBool(opt) {\n  if (opt !== undefined && opt) {\n    return true;\n  } else {\n    return false;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fragment JSX Transformation\nDESCRIPTION: Shows how JSX fragments get transformed in ReScript compared to JavaScript output.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/jsx.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\n<> child1 child2 </>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nReact.createElement(React.Fragment, undefined, child1, child2);\n```\n\n----------------------------------------\n\nTITLE: Defining List Type in ReScript\nDESCRIPTION: The type definition for the list data structure. It's a generic type that can contain elements of any type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/list.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype t<'a> = list<'a>\n```\n\n----------------------------------------\n\nTITLE: Finding Last Index of Element in Array in ReScript\nDESCRIPTION: The lastIndexOf function returns the index of the last occurrence of a given value in the array. If the value is not found, it returns -1.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array-2.mdx#2025-04-18_snippet_16\n\nLANGUAGE: rescript\nCODE:\n```\nlet lastIndexOf: (t<'a>, 'a) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.Array2.lastIndexOf([\"a\", \"b\", \"a\", \"c\"], \"a\") == 2\nJs.Array2.lastIndexOf([\"a\", \"b\", \"a\", \"c\"], \"x\") == -1\n```\n\n----------------------------------------\n\nTITLE: Declaring an Integer Comparator Module in ReScript\nDESCRIPTION: Shows how to declare a module for comparing integers, which is used in subsequent examples.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nmodule IntCmp =\n  Belt.Id.MakeComparable({\n    type t = int\n    let cmp = Pervasives.compare\n  })\n```\n\n----------------------------------------\n\nTITLE: Partitioning Set Elements in ReasonML\nDESCRIPTION: Demonstrates how to split a set into two sets: one with elements that satisfy a predicate and one with elements that don't.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set.mdx#2025-04-18_snippet_30\n\nLANGUAGE: reasonml\nCODE:\n```\nlet partition: (t('value, 'id), 'value => bool) => (t('value, 'id), t('value, 'id));\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet isOdd = x => x mod 2 != 0;\n\nlet s0 = Belt.Set.fromArray([|1,2,3,4,5|], ~id=(module IntCmp));\nlet (s1, s2) = s0->Belt.Set.partition(isOdd);\n\ns1->Belt.Set.toArray; /* [|1,3,5|] */\ns2->Belt.Set.toArray; /* [|2,4|] */\n```\n\n----------------------------------------\n\nTITLE: Variant Performance Example\nDESCRIPTION: Demonstrates the performance benefits of using variants compared to traditional if-else chains in JavaScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/variant.mdx#2025-04-18_snippet_25\n\nLANGUAGE: rescript\nCODE:\n```\ntype animal = Dog | Cat | Bird\nlet data = Dog\nswitch data {\n| Dog => Console.log(\"Wof\")\n| Cat => Console.log(\"Meow\")\n| Bird => Console.log(\"Kashiiin\")\n}\n```\n\n----------------------------------------\n\nTITLE: List Filter Map Function Signature in ReScript\nDESCRIPTION: Defines the signature for the 'filterMap' function, which combines mapping and filtering operations on a list.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/list.mdx#2025-04-18_snippet_17\n\nLANGUAGE: rescript\nCODE:\n```\nlet filterMap: ((. 'a) => option<'b>, t<'a>) => t<'b>\n```\n\n----------------------------------------\n\nTITLE: Map Access and Modification Functions - ReScript\nDESCRIPTION: Functions for accessing and modifying map elements including get, set, update, and remove operations\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-map.mdx#2025-04-18_snippet_5\n\nLANGUAGE: reason\nCODE:\n```\nlet get: (t('k, 'a, 'id), 'k) => option('a);\nlet set: (t('k, 'a, 'id), 'k, 'a) => unit;\nlet remove: (t('k, 'a, 'id), 'k) => unit;\nlet update: (t('k, 'a, 'id), 'k, option('a) => option('a)) => unit;\nlet mergeMany: (t('k, 'a, 'id), array(('k, 'a))) => unit;\n```\n\n----------------------------------------\n\nTITLE: Defining Undefined Value Type in ReScript\nDESCRIPTION: Defines a ReScript type representing JavaScript undefined values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/types.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\ntype undefined_val\n```\n\n----------------------------------------\n\nTITLE: Filling Array Range using fillRangeInPlace in ReScript\nDESCRIPTION: Function signature for fillRangeInPlace that fills a range of elements in a Uint8Array with a specified value, modifying the array in place.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_14\n\nLANGUAGE: rescript\nCODE:\n```\nlet fillRangeInPlace: (elt, ~start: int, ~end_: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Defining Result Type in ReScript\nDESCRIPTION: Defines the basic structure of a Result type, which can be either Ok with a success value or Error with an error value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/result.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype t<'a, 'b> =\n  | Ok('a)\n  | Error('b)\n```\n\n----------------------------------------\n\nTITLE: String Last Index Of\nDESCRIPTION: Function signature for finding the last index of a substring.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/string-2.mdx#2025-04-18_snippet_19\n\nLANGUAGE: res\nCODE:\n```\nlet lastIndexOf: (t, t) => int\n```\n\n----------------------------------------\n\nTITLE: Array Search and Query Methods\nDESCRIPTION: Methods for searching and querying array contents.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_float-64-array.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet includes: (elt, t) => bool\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet indexOf: (elt, t) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet indexOfFrom: (elt, ~from: int, t) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet lastIndexOf: (elt, t) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet lastIndexOfFrom: (elt, ~from: int, t) => int\n```\n\n----------------------------------------\n\nTITLE: Using max_float function to find maximum of two floats in ReScript\nDESCRIPTION: The max_float function returns the maximum of its two floating point arguments. It takes two floats as input and returns a float.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/math.mdx#2025-04-18_snippet_16\n\nLANGUAGE: res\nCODE:\n```\nlet max_float: (float, float) => float\n```\n\n----------------------------------------\n\nTITLE: Filling arrays with values in ReScript\nDESCRIPTION: Functions to fill arrays with a specified value, with options to target specific ranges, modifying the array in place.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/array-2.mdx#2025-04-18_snippet_5\n\nLANGUAGE: reason\nCODE:\n```\nlet fillInPlace: (t('a), 'a) => t('a);\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet arr = [|100, 101, 102, 103, 104|];\nJs.Array2.fillInPlace(arr, 99)\n   == [|99, 99, 99, 99, 99|];\narr == [|99, 99, 99, 99, 99|];\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet fillFromInPlace: (t('a), 'a, ~from: int) => t('a);\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet arr = [|100, 101, 102, 103, 104|];\nJs.Array2.fillFromInPlace(arr, 99, ~from=2)\n   == [|100, 101, 99, 99, 99|];\narr == [|100, 101, 99, 99, 99|];\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet fillRangeInPlace: (t('a), 'a, ~start: int, ~end_: int) => t('a);\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet arr = [|100, 101, 102, 103, 104|];\nJs.Array2.fillRangeInPlace(arr, 99, ~start=1, ~end_=4)\n  == [|100, 99, 99, 99, 104|];\narr == [|100, 99, 99, 99, 104|];\n```\n\n----------------------------------------\n\nTITLE: List Map Function Signature\nDESCRIPTION: Function to apply a function to each element of a list.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/list.mdx#2025-04-18_snippet_10\n\nLANGUAGE: ReScript\nCODE:\n```\nlet map: ((. 'a) => 'b, t('a)) => t('b);\n```\n\n----------------------------------------\n\nTITLE: Complex Pattern Matching in ReScript\nDESCRIPTION: Demonstrates a complex pattern matching scenario using the previously defined types, showcasing ReScript's powerful pattern matching capabilities.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_7\n\nLANGUAGE: reason\nCODE:\n```\nlet message = switch (person1) {\n| Teacher({name: \"Mary\" | \"Joe\"}) =>\n  \"Hey, still going to the party on Saturday?\"\n| Teacher({name}) =>\n  // this is matched only if `name` isn't \"Joe\"\n  {j|Hello $(name).|j}\n| Student({name, reportCard: {passing: true, gpa}}) =>\n  \"Congrats \" ++ name + \", nice GPA of \" ++ Js.Float.toString(gpa) ++ \" you got there!\"\n| Student({\n    reportCard: {gpa: 0.0},\n    status: Vacations(daysLeft) | Sabbatical(daysLeft)\n  }) =>\n  \"Come back in \" ++ Js.Int.toString(daysLeft) ++ \" days!\"\n| Student({status: Sick}) =>\n  \"How are you feeling?\"\n| Student({name}) =>\n  {j|Good luck next semester $(name)!|j}\n};\n```\n\nLANGUAGE: ml\nCODE:\n```\nlet message = match person1 with\n| Teacher {name = \"Mary\" | \"Joe\"} ->\n  \"Hey, still going to the party on Saturday?\"\n| Teacher {name} ->\n  (* this is matched only if `name` isn't \"Joe\" *)\n  {j|Hello $(name).|j}\n| Student {name; reportCard = {passing = true; gpa}} ->\n  \"Congrats \" ++ name + \", nice GPA of \" ++ Js.Float.toString(gpa) ++ \" you got there!\"\n| Student {\n    reportCard = {gpa = 0.0};\n    status = (Vacations daysLeft) | (Sabbatical daysLeft)\n  } ->\n  \"Come back in \" ++ (Js.Int.toString daysLeft) ++ \" days!\"\n| Student {status = Sick} ->\n  \"How are you feeling?\"\n| Student {name} ->\n  {j|Good luck next semester $(name)!|j}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar message;\n\nif (person1.TAG) {\n  var match$1 = person1.status;\n  var name = person1.name;\n  var match$2 = person1.reportCard;\n  message = match$2.passing\n    ? \"Congrats \" +\n      name +\n      \", nice GPA of \" +\n      match$2.gpa.toString() +\n      \" you got there!\"\n    : typeof match$1 === \"number\"\n    ? match$1 !== 0\n      ? \"Good luck next semester \" + name + \"!\"\n      : \"How are you feeling?\"\n    : person1.reportCard.gpa !== 0.0\n    ? \"Good luck next semester \" + name + \"!\"\n    : \"Come back in \" + match$1._0.toString() + \" days!\";\n} else {\n  var name$1 = person1.name;\n  switch (name$1) {\n    case \"Joe\":\n    case \"Mary\":\n      message = \"Hey, still going to the party on Saturday?\";\n      break;\n    default:\n      message = \"Hello \" + name$1 + \".\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using @module with Import Attributes in ReScript\nDESCRIPTION: This example shows how to use @module with import attributes (available since ReScript 11.1). It imports JSON data with type and custom attributes specified in the import statement.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/decorator_module.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\n@module({from: \"./myJson.json\", with: {type_: \"json\", \\\"some-exotic-identifier\\\": \"someValue\"}})\nexternal myJson: JSON.t = \"default\"\n\nConsole.log(myJson)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport MyJsonJson from \"./myJson.json\" with {\"type\": \"json\", \"some-exotic-identifier\": \"someValue\"};\n\nvar myJson = MyJsonJson;\n\nconsole.log(myJson);\n```\n\n----------------------------------------\n\nTITLE: Converting Integer to String with Custom Radix in ReScript\nDESCRIPTION: Converts an integer to string using specified radix base (range 2-36). Useful for binary, hexadecimal, and other base conversions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/int.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\n/* prints \"110\" */\nJs.log(Js.Int.toStringWithRadix(6, ~radix=2))\n\n/* prints \"deadbeef\" */\nJs.log(Js.Int.toStringWithRadix(3735928559, ~radix=16))\n\n/* prints \"2n9c\" */\nJs.log(Js.Int.toStringWithRadix(123456, ~radix=36))\n```\n\n----------------------------------------\n\nTITLE: Scoped Polymorphic Types Limitations\nDESCRIPTION: Examples demonstrating the syntax limitations and restrictions of scoped polymorphic types in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/scoped-polymorphic-types.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nexception Abort\n\nlet testExn: 'a. unit => 'a = () => raise(Abort) // Works!\n\nlet testExn2 = (): 'a. 'a = raise(Abort) // Syntax error!\ntype fn = 'a. 'a => unit // Syntax error!\n```\n\n----------------------------------------\n\nTITLE: Extracting keys and values from MapDict (ReScript)\nDESCRIPTION: Functions to extract all keys or all values from a MapDict as arrays.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_13\n\nLANGUAGE: ReScript\nCODE:\n```\nlet keysToArray: t<'k, 'a, 'id> => array<'k>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet valuesToArray: t<'k, 'a, 'id> => array<'a>\n```\n\n----------------------------------------\n\nTITLE: Example of String Set Union in ReScript\nDESCRIPTION: Demonstrates how to create a union of two string sets, combining all unique elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-string.mdx#2025-04-18_snippet_20\n\nLANGUAGE: reasonml\nCODE:\n```\nlet s0 = Belt.Set.String.fromArray([|\"apple\", \"banana\", \"orange\", \"carrot\"|]);\nlet s1 = Belt.Set.String.fromArray([|\"apple\", \"banana\", \"orange\", \"strawberry\"|]);\nlet union = Belt.Set.String.union(s0, s1);\nunion->Belt.Set.String.toArray; /* [|\"apple\", \"banana\", \"carrot\", \"orange\", \"strawberry\"|] */\n```\n\n----------------------------------------\n\nTITLE: Creating String Sets from Arrays in ReScript\nDESCRIPTION: Shows how to create a string set from an array of strings using Belt.Set.String.fromArray.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/set-string.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromArray: array<value> => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet s0 = Belt.Set.String.fromArray([\"apple\", \"orange\", \"banana\"])\n\ns0->Belt.Set.String.toArray /* [\"apple\", \"banana\", \"orange\"] */\n```\n\n----------------------------------------\n\nTITLE: Replacing Substrings in ReScript\nDESCRIPTION: The replace function returns a new string with the first occurrence of a specified substring replaced by a new substring. The substring to replace is treated as a verbatim string, not a regular expression.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string.mdx#2025-04-18_snippet_26\n\nLANGUAGE: rescript\nCODE:\n```\nlet replace: (t, t, t) => t;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.String.replace(\"old\", \"new\", \"old string\") == \"new string\";\nJs.String.replace(\"the\", \"this\", \"the cat and the dog\") == \"this cat and the dog\";\n```\n\n----------------------------------------\n\nTITLE: Mapping and Filtering List Elements Using Option in ReScript\nDESCRIPTION: Applies a mapping function that returns Option type to filter and transform list elements simultaneously.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/list.mdx#2025-04-18_snippet_11\n\nLANGUAGE: res\nCODE:\n```\nlet isEven = x => mod(x, 2) == 0\n\nlist{1, 2, 3, 4}\n->Belt.List.keepMap(x =>\n    if (isEven(x)) {\n      Some(x)\n    } else {\n      None\n    }\n  )\n```\n\n----------------------------------------\n\nTITLE: Assigning New Value to Ref in ReScript\nDESCRIPTION: Demonstrates how to assign a new value to a ref in ReScript using the .contents property. The example changes the value to 6.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/mutation.mdx#2025-04-18_snippet_2\n\nLANGUAGE: ReScript\nCODE:\n```\nmyValue.contents = 6\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nmyValue.contents = 6;\n```\n\n----------------------------------------\n\nTITLE: Mapping key-value pairs in MapString module (ReScript)\nDESCRIPTION: Function to transform all values in a map using both the key and value, returning a new map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-string.mdx#2025-04-18_snippet_54\n\nLANGUAGE: reason\nCODE:\n```\nlet mapWithKey: (t('v), (key, 'v) => 'v2) => t('v2);\n```\n\n----------------------------------------\n\nTITLE: Configuring Pinned Dependencies in ReScript's bsconfig.json\nDESCRIPTION: Shows how to configure a ReScript project's bsconfig.json to use pinned dependencies, which ensures that local packages are rebuilt whenever the main project is built.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/build-pinned-dependencies.mdx#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"app\",\n  \"version\": \"1.0.0\",\n  \"sources\": {\n    \"dir\" : \"src\",\n    \"subdirs\" : true\n  },\n  /* ... */\n  \"bs-dependencies\": [\n    \"common\",\n    \"myplugin\"\n  ],\n  \"pinned-dependencies\": [\"common\", \"myplugin\"],\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Recursive Type for JavaScript Types in ReScript\nDESCRIPTION: Defines a recursive variant type that represents all possible JavaScript type categories with appropriate type parameters.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/types.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\ntype rec t<'a> =\n  | Undefined: t<undefined_val>\n  | Null: t<null_val>\n  | Boolean: t<bool>\n  | Number: t<float>\n  | String: t<string>\n  | Function: t<function_val>\n  | Object: t<obj_val>\n  | Symbol: t<symbol>\n```\n\n----------------------------------------\n\nTITLE: Defining ReScript Tag Function Type Signature\nDESCRIPTION: Shows the basic type signature for tag functions in ReScript that process template literals.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/tagged-templates.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nlet myTagFunction : (array<string>, array<'param>) => 'output\n```\n\n----------------------------------------\n\nTITLE: Vector Map Operation\nDESCRIPTION: Maps vector elements using a transformation function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/vector.mdx#2025-04-18_snippet_9\n\nLANGUAGE: res\nCODE:\n```\nlet map: ((. 'a) => 'b, t<'a>) => t<'b>\n```\n\n----------------------------------------\n\nTITLE: Converting int to float in ReScript\nDESCRIPTION: Converts an integer value to a floating-point number using the Belt.Int.toFloat function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/int.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nlet toFloat: int => float\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.log(Belt.Int.toFloat(1) === 1.0) /* true */\n```\n\n----------------------------------------\n\nTITLE: Getting Size of MutableQueue in ReScript\nDESCRIPTION: The 'size' function returns the number of elements in the queue.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-queue.mdx#2025-04-18_snippet_13\n\nLANGUAGE: rescript\nCODE:\n```\nlet size: t<'a> => int\n```\n\n----------------------------------------\n\nTITLE: Defining the type signature for MapDict in ReScript\nDESCRIPTION: Defines the main type t with generic parameters for key, value, and identity.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\ntype t('key, 'value, 'id);\n```\n\n----------------------------------------\n\nTITLE: Filtering a string set in ReScript\nDESCRIPTION: Returns a new set containing all elements that satisfy the predicate.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set-string.mdx#2025-04-18_snippet_26\n\nLANGUAGE: rescript\nCODE:\n```\nlet keep: (t, value => bool) => t\n```\n\n----------------------------------------\n\nTITLE: Finding minimum key in ReScript map (option return)\nDESCRIPTION: Returns the minimum key in the map wrapped in an option, or None if the map is empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_24\n\nLANGUAGE: reasonml\nCODE:\n```\nlet minKey: t('a) => option(key);\n```\n\n----------------------------------------\n\nTITLE: Checking if all elements satisfy a predicate with uncurried function in ReScript\nDESCRIPTION: Returns a boolean indicating whether all elements of the set satisfy the uncurried predicate.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set-string.mdx#2025-04-18_snippet_21\n\nLANGUAGE: rescript\nCODE:\n```\nlet everyU: (t, (. value) => bool) => bool\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific Value from Belt.Set in ReScript\nDESCRIPTION: The 'get' function returns the reference of the value which is equivalent to the given value using the comparator specified by the collection. It returns 'None' if the element does not exist. The function signature and usage example are provided.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/set.mdx#2025-04-18_snippet_18\n\nLANGUAGE: rescript\nCODE:\n```\nlet get: (t<'value, 'id>, 'value) => option<'value>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet s0 = Belt.Set.fromArray([1,2,3,4,5], ~id=module(IntCmp))\n\ns0->Belt.Set.get(3) /* Some(3) */\ns0->Belt.Set.get(20) /* None */\n```\n\n----------------------------------------\n\nTITLE: Defining Null Type Alias in ReScript\nDESCRIPTION: Defines a local type alias for Js.null<'a> representing nullable values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/null.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype t<'a> = Js.null<'a>\n```\n\n----------------------------------------\n\nTITLE: ReScript Console Log Methods\nDESCRIPTION: Standard logging methods supporting 1-4 arguments and array logging. These functions print values to the console for debugging purposes.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/console.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nlet log: 'a => unit\nlet log2: ('a, 'b) => unit\nlet log3: ('a, 'b, 'c) => unit\nlet log4: ('a, 'b, 'c, 'd) => unit\nlet logMany: array<'a> => unit\n```\n\n----------------------------------------\n\nTITLE: Joining Array Elements into String in ReScript\nDESCRIPTION: The joinWith function converts each element of the array to a string and concatenates them, separated by a specified delimiter, into a single string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array-2.mdx#2025-04-18_snippet_15\n\nLANGUAGE: rescript\nCODE:\n```\nlet joinWith: (t<'a>, string) => string\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.Array2.joinWith([\"ant\", \"bee\", \"cat\"], \"--\") == \"ant--bee--cat\"\nJs.Array2.joinWith([\"door\", \"bell\"], \"\") == \"doorbell\"\nJs.Array2.joinWith([2020, 9, 4], \"/\") == \"2020/9/4\"\nJs.Array2.joinWith([2.5, 3.6, 3e-2], \";\") == \"2.5;3.6;0.03\"\n```\n\n----------------------------------------\n\nTITLE: Keep Operation in ReScript Set\nDESCRIPTION: Function that returns a set containing only elements that satisfy the given predicate. Demonstrates filtering elements based on a condition.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-dict.mdx#2025-04-18_snippet_12\n\nLANGUAGE: reason\nCODE:\n```\nlet keep: (t('value, 'id), 'value => bool) => t('value, 'id);\n```\n\nLANGUAGE: reason\nCODE:\n```\nmodule IntCmp =\n  Belt.Id.MakeComparable({\n    type t = int;\n    let cmp = Pervasives.compare;\n  });\n\nlet isEven = x => x mod 2 == 0;\n\nlet s0 = Belt.Set.Dict.fromArray([|1,2,3,4,5|], ~cmp=IntCmp.cmp);\nlet s1 = s0->Belt.Set.Dict.keep(isEven);\n\ns1->Belt.Set.Dict.toArray; /* [|2,4|] */\n```\n\n----------------------------------------\n\nTITLE: Getting a value by key from MapDict\nDESCRIPTION: Function signature for retrieving a value by key from a map, returning an option.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_34\n\nLANGUAGE: reason\nCODE:\n```\nlet get: (t('k, 'a, 'id), 'k, ~cmp: cmp('k, 'id)) => option('a);\n```\n\n----------------------------------------\n\nTITLE: Setting Hours, Minutes, and Seconds in ReScript\nDESCRIPTION: ReScript binding for JavaScript's Date.setHours method with minutes and seconds parameters. Sets the hours, minutes, and seconds and returns the time value. This function modifies the original Date object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_44\n\nLANGUAGE: res\nCODE:\n```\nlet setHoursMS: (t, ~hours: float, ~minutes: float, ~seconds: float, unit) => float\n```\n\nLANGUAGE: res\nCODE:\n```\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet futureTime = Js.Date.setHoursMS(date1, ~hours=22.0, ~minutes=46.0, ~seconds=37.0, ())\ndate1 == Js.Date.fromString(\"1973-11-29T22:46:37.321Z00:00\")\nfutureTime == Js.Date.getTime(date1)\n```\n\n----------------------------------------\n\nTITLE: Iterating over UInt32Array elements with index\nDESCRIPTION: Defines a function that executes a provided function once for each array element with access to the element index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_41\n\nLANGUAGE: rescript\nCODE:\n```\nlet forEachi: ((. elt, int) => unit, t) => unit\n```\n\n----------------------------------------\n\nTITLE: Creating Strings from Code Points in ReScript\nDESCRIPTION: The 'fromCodePoint' function creates a string from a given code point. It takes an integer representing a Unicode code point and returns the corresponding string, handling code points beyond the BMP.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/string-2.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromCodePoint: int => t\n```\n\n----------------------------------------\n\nTITLE: Promise.all5 Implementation\nDESCRIPTION: Combines five promises into a single promise that resolves with a tuple of results\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/promise.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\nlet all5: ((t<'a0>, t<'a1>, t<'a2>, t<'a3>, t<'a4>)) => t<('a0, 'a1, 'a2, 'a3, 'a4)>\n```\n\n----------------------------------------\n\nTITLE: Dictionary Set Operation\nDESCRIPTION: Type signature and example for setting key-value pairs in a dictionary.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/dict.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\nlet set: (t<'a>, key, 'a) => unit\n```\n\nLANGUAGE: res\nCODE:\n```\nJs.Dict.set(ages, \"Maria\", 31)\nJs.log(ages == Js.Dict.fromList(list{(\"Maria\", 31), (\"Vinh\", 22), (\"Fred\", 49)}))\n\nJs.Dict.set(ages, \"David\", 66)\nJs.log(ages == Js.Dict.fromList(list{(\"Maria\", 31), (\"Vinh\", 22), (\"Fred\", 49), (\"David\", 66)}))\n```\n\n----------------------------------------\n\nTITLE: Filtering a set with uncurried function in ReScript\nDESCRIPTION: Creates a new set containing only elements that satisfy the given uncurried predicate function. Used for optimized performance in certain scenarios.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-int.mdx#2025-04-18_snippet_25\n\nLANGUAGE: reason\nCODE:\n```\nlet keepU: (t, [@bs] (value => bool)) => t;\n```\n\n----------------------------------------\n\nTITLE: Checking if Set Contains Element in ReScript MutableSetString\nDESCRIPTION: Tests whether a given element exists in the set. Returns true if the element is present, false otherwise.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_7\n\nLANGUAGE: reason\nCODE:\n```\nlet has: (t, value) => bool;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet set = Belt.MutableSet.String.fromArray([|\"apple\", \"orange\", \"banana\"|]);\n\nset->Belt.MutableSet.String.has(\"strawberry\") /* false */\nset->Belt.MutableSet.String.has(\"apple\") /* true */\n```\n\n----------------------------------------\n\nTITLE: Promise Rejection\nDESCRIPTION: Function to create a rejected promise with an exception\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/promise.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet reject: exn => t<'a>\n```\n\n----------------------------------------\n\nTITLE: Shuffling List in ReScript\nDESCRIPTION: The shuffle function returns a new list with elements in random order.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/list.mdx#2025-04-18_snippet_13\n\nLANGUAGE: rescript\nCODE:\n```\nlet shuffle: t<'a> => t<'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nBelt.List.shuffle(list{1, 2, 3}) // list{2, 1, 3}\n```\n\n----------------------------------------\n\nTITLE: Simplified Function Syntax in Uncurried Mode\nDESCRIPTION: Shows how the 'final unit' pattern is no longer necessary in uncurried mode while still supporting optional parameters.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2023-09-18-uncurried-mode.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\n// old \nlet myFun = (~name=?, ())\n\n// new\nlet myFun = (~name=?)\n```\n\n----------------------------------------\n\nTITLE: Reducing a HashSet with Uncurried Function in ReScript\nDESCRIPTION: This function signature shows how to reduce a HashSet using an uncurried function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-set.mdx#2025-04-18_snippet_13\n\nLANGUAGE: reason\nCODE:\n```\nlet reduceU: (t('a, 'id), 'c, [@bs] (('c, 'a) => 'c)) => 'c;\n```\n\n----------------------------------------\n\nTITLE: Logarithmic Functions in ReScript\nDESCRIPTION: Various logarithmic functions including natural log, log1p, log10, and log2.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/math.mdx#2025-04-18_snippet_44\n\nLANGUAGE: rescript\nCODE:\n```\nlet log: float => float;\nlet log1p: float => float;\nlet log10: float => float;\nlet log2: float => float;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.Math.log(Js.Math._E) == 1.0;\nJs.Math.log(100.0) == 4.605170185988092;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.Math.log1p(Js.Math._E -. 1.0) == 1.0;\nJs.Math.log1p(99.0) == 4.605170185988092;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.Math.log10(1000.0) == 3.0;\nJs.Math.log10(0.01) == -2.0;\nJs.Math.log10(Js.Math.sqrt(10.0)) == 0.5;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.Math.log2(512.0) == 9.0;\nJs.Math.log2(0.125) == -3.0;\nJs.Math.log2(Js.Math._SQRT2) == 0.5000000000000001; // due to precision\n```\n\n----------------------------------------\n\nTITLE: Setting Array Data in Uint8ClampedArray in ReScript\nDESCRIPTION: Functions to set array data in a Uint8ClampedArray, with optional offset.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ReScript\nCODE:\n```\nlet setArray: (array(elt), t) => unit;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet setArrayOffset: (array(elt), int, t) => unit;\n```\n\n----------------------------------------\n\nTITLE: Finding Maximum Key-Value Pair (Undefined) in ReScript MapInt Module\nDESCRIPTION: Function signature for finding the maximum key-value pair in the map, returning undefined if not found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-int.mdx#2025-04-18_snippet_32\n\nLANGUAGE: rescript\nCODE:\n```\nlet maxUndefined: t<'v> => Js.undefined<(key, 'v)>\n```\n\n----------------------------------------\n\nTITLE: Cross-File Variant Definition\nDESCRIPTION: Demonstrates how to define a variant type in one file (Zoo.re) and import it for use in another file. Shows proper scoping for variants across modules.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/variant.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reason\nCODE:\n```\n// Zoo.re\ntype animal = Dog | Cat | Bird;\n```\n\nLANGUAGE: ml\nCODE:\n```\n(* Zoo.re *)\ntype animal = Dog | Cat | Bird\n```\n\nLANGUAGE: js\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Getting Set Size in ReScript Belt.MutableSet\nDESCRIPTION: The 'size' function returns the number of elements in a MutableSet. It takes a set as input and returns an integer representing the set's size.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_48\n\nLANGUAGE: reason\nCODE:\n```\nlet size: t('value, 'id) => int;\n```\n\nLANGUAGE: reason\nCODE:\n```\nmodule IntCmp =\n  Belt.Id.MakeComparable({\n    type t = int;\n    let cmp = Pervasives.compare;\n  });\n\nlet s0 = Belt.MutableSet.fromArray([|1,2,3,4|], ~id=(module IntCmp));\n\ns0->Belt.MutableSet.size; /* 4 */\n```\n\n----------------------------------------\n\nTITLE: Converting a HashMap to an Array in ReScript\nDESCRIPTION: Converts the hash map to an array of key-value pairs.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-map.mdx#2025-04-18_snippet_13\n\nLANGUAGE: rescript\nCODE:\n```\nlet toArray: t('key, 'value, 'id) => array(('key, 'value));\n```\n\nLANGUAGE: rescript\nCODE:\n```\nmodule IntHash =\n  Belt.Id.MakeHashable({\n    type t = int;\n    let hash = a => a;\n    let eq = (a, b) => a == b;\n  });\n  \nlet s0 = Belt.HashMap.make(~hintSize=10, ~id=(module IntHash));\nBelt.HashMap.set(s0, 1, \"value1\");\nBelt.HashMap.set(s0, 2, \"value2\");\n\nBelt.HashMap.toArray(s0) == [|(1, \"value1\"), (2, \"value2\")|];\n```\n\n----------------------------------------\n\nTITLE: Accessing Natural Logarithm of 2 in ReScript\nDESCRIPTION: Constant for the natural logarithm of 2 (approximately 0.6931471805599453), equivalent to JavaScript's Math.LN2.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/math.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reasonml\nCODE:\n```\nlet _LN2: float;\n```\n\n----------------------------------------\n\nTITLE: Creating Int Set from Array\nDESCRIPTION: Function signature and example for creating a set from an array of integers.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set-int.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\nlet fromArray: array<value> => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet s0 = Belt.Set.Int.fromArray([1, 3, 2, 4])\n\ns0->Belt.Set.Int.toArray /* [1, 2, 3, 4] */\n```\n\n----------------------------------------\n\nTITLE: Setting Array Data with Offset\nDESCRIPTION: Sets the contents of a Uint8Array from a regular array, starting at the specified offset.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nlet setArrayOffset: (array<elt>, int, t) => unit\n```\n\n----------------------------------------\n\nTITLE: Testing All Elements with Index\nDESCRIPTION: Function signature to test if all elements pass a condition that includes their index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_33\n\nLANGUAGE: res\nCODE:\n```\nlet everyi: ((. elt, int) => bool, t) => bool\n```\n\n----------------------------------------\n\nTITLE: Iterate Over Array Elements\nDESCRIPTION: Executes a provided function once for each array element.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-64-array.mdx#2025-04-18_snippet_40\n\nLANGUAGE: reason\nCODE:\n```\nlet forEach: ((. elt) => unit, t) => unit;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Seconds from Date in ReScript\nDESCRIPTION: The getSeconds function returns the seconds for a Date object, evaluated in the current time zone. It binds to JavaScript's Date.getSeconds method.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_28\n\nLANGUAGE: res\nCODE:\n```\nlet getSeconds: t => float\n```\n\nLANGUAGE: res\nCODE:\n```\nJs.Date.getSeconds(exampleDate) == 54.0\n```\n\n----------------------------------------\n\nTITLE: Defining Option Type in ReScript\nDESCRIPTION: Defines the fundamental option type that represents optional values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/option.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\ntype t('a) = option('a);\n```\n\n----------------------------------------\n\nTITLE: Checking equality of maps in MapString module (ReScript)\nDESCRIPTION: Function for testing whether two maps are equal, containing equal keys with equal associated data.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-string.mdx#2025-04-18_snippet_8\n\nLANGUAGE: reason\nCODE:\n```\nlet eq: (t('v), t('v), ('v, 'v) => bool) => bool;\n```\n\n----------------------------------------\n\nTITLE: Ceiling and Floor Operations in ReScript\nDESCRIPTION: Various implementations of ceiling and floor operations with different return types and safety constraints.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/math.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\nlet unsafe_ceil_int: float => int\nlet ceil_int: float => int\nlet ceil_float: float => float\nlet unsafe_floor_int: float => int\nlet floor_int: float => int\nlet floor_float: float => float\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Map Elements (Uncurried) in ReScript MapInt Module\nDESCRIPTION: Function signature for iterating over all key-value pairs in the map using an uncurried function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-int.mdx#2025-04-18_snippet_11\n\nLANGUAGE: rescript\nCODE:\n```\nlet forEachU: (t<'v>, (. key, 'v) => unit) => unit\n```\n\n----------------------------------------\n\nTITLE: Concatenating Strings in ReScript\nDESCRIPTION: The 'concat' function combines two strings. It takes two strings and returns a new string that is the concatenation of the input strings.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/string-2.mdx#2025-04-18_snippet_11\n\nLANGUAGE: rescript\nCODE:\n```\nlet concat: (t, t) => t\n```\n\n----------------------------------------\n\nTITLE: Adding elements to SetDict in ReScript\nDESCRIPTION: Demonstrates how to add elements to a SetDict using the 'add' function, which returns a new set if the element didn't exist.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-dict.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet add: (t('value, 'id), 'value, ~cmp: cmp('value, 'id)) => t('value, 'id);\n\nmodule IntCmp =\n  Belt.Id.MakeComparable({\n    type t = int;\n    let cmp = Pervasives.compare;\n  });\n\nlet s0 = Belt.Set.Dict.empty;\nlet s1 = s0->Belt.Set.Dict.add(1, ~cmp=IntCmp.cmp);\nlet s2 = s1->Belt.Set.Dict.add(2, ~cmp=IntCmp.cmp);\nlet s3 = s2->Belt.Set.Dict.add(2, ~cmp=IntCmp.cmp);\ns0->Belt.Set.Dict.toArray; /* [||] */\ns1->Belt.Set.Dict.toArray; /* [|1|] */\ns2->Belt.Set.Dict.toArray; /* [|1, 2|] */\ns3->Belt.Set.Dict.toArray; /* [|1,2 |] */\ns2 == s3; /* true */\n```\n\n----------------------------------------\n\nTITLE: Setting UTC Hours and Minutes in ReScript\nDESCRIPTION: Sets a Date's hours and minutes according to UTC time. Returns milliseconds since epoch. Function modifies the original Date object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_60\n\nLANGUAGE: rescript\nCODE:\n```\nlet setUTCHoursM: (t, ~hours: float, ~minutes: float, unit) => float\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet futureTime = Js.Date.setUTCHoursM(date1, ~hours=22.0, ~minutes=46.0, ())\ndate1 == Js.Date.fromString(\"1973-11-29T22:46:54.321Z00:00\")\nfutureTime == Js.Date.getTime(date1)\n```\n\n----------------------------------------\n\nTITLE: Reducing Array Elements in ReScript\nDESCRIPTION: Reduces array to single value using reducer function and initial accumulator value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array-2.mdx#2025-04-18_snippet_35\n\nLANGUAGE: res\nCODE:\n```\nlet sumOfSquares = (accumulator, item) => accumulator + item * item\n\nJs.Array2.reduce([10, 2, 4], sumOfSquares, 0) == 120\n```\n\n----------------------------------------\n\nTITLE: Using toLocaleLowerCase function in ReScript\nDESCRIPTION: Converts a string to lowercase using the current locale. Allows for language-specific case conversion rules to be applied.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/string-2.mdx#2025-04-18_snippet_31\n\nLANGUAGE: rescript\nCODE:\n```\nlet toLocaleLowerCase: t => t\n```\n\n----------------------------------------\n\nTITLE: Splitting ReScript Set Based on Value\nDESCRIPTION: Splits a set into two parts based on a given value, returning smaller and larger subsets along with a presence indicator. Returns tuple ((l, r), present) where l contains elements less than value, r contains elements greater than value, and present indicates if value exists in set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/set-int.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet split: (t, value) => ((t, t), bool)\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet s0 = Belt.Set.Int.fromArray([1, 2, 3, 4, 5])\n\nlet ((smaller, larger), present) = s0->Belt.Set.Int.split(3)\n\npresent /* true */\nsmaller->Belt.Set.Int.toArray /* [1,2] */\nlarger->Belt.Set.Int.toArray /* [4,5] */\n```\n\n----------------------------------------\n\nTITLE: Defining Equality Type Signature in ReScript\nDESCRIPTION: Type definition for equality function with type parameters for value and identity to ensure type safety between different equality functions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/id.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\ntype eq<'a, 'id>\n```\n\n----------------------------------------\n\nTITLE: Using Belt.Option.cmp in ReScript\nDESCRIPTION: Shows how to use the cmp function to compare two option values using a custom comparison function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/option.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rescript\nCODE:\n```\nlet clockCompare = (a, b) => compare(mod(a, 12), mod(b, 12))\n\nopen Belt.Option\n\ncmp(Some(3), Some(15), clockCompare) /* 0 */\n\ncmp(Some(3), Some(14), clockCompare) /* 1 */\n\ncmp(Some(2), Some(15), clockCompare) /* (-1) */\n\ncmp(None, Some(15), clockCompare) /* (-1) */\n\ncmp(Some(14), None, clockCompare) /* 1 */\n\ncmp(None, None, clockCompare) /* 0 */\n```\n\n----------------------------------------\n\nTITLE: Reducing Uint8ClampedArray elements with index\nDESCRIPTION: Executes a reducer function on each element of the array with its index, resulting in a single output value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_45\n\nLANGUAGE: res\nCODE:\n```\nlet reducei: ((. 'b, elt, int) => 'b, 'b, t) => 'b\n```\n\n----------------------------------------\n\nTITLE: Checking Element Existence in Array in ReScript\nDESCRIPTION: The includes function checks if a given value exists in the array. It returns true if the value is found, false otherwise.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array-2.mdx#2025-04-18_snippet_12\n\nLANGUAGE: rescript\nCODE:\n```\nlet includes: (t<'a>, 'a) => bool\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.Array2.includes([\"a\", \"b\", \"c\"], \"b\") == true\nJs.Array2.includes([\"a\", \"b\", \"c\"], \"x\") == false\n```\n\n----------------------------------------\n\nTITLE: Reducing Lists in Reverse Order with Belt.List in ReScript\nDESCRIPTION: The reduceReverse function applies a function to each element of a list from last to first, accumulating a result. It takes a list, an initial value, and a function that combines the accumulator with each element.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/list.mdx#2025-04-18_snippet_41\n\nLANGUAGE: rescript\nCODE:\n```\nlist{1, 2, 3, 4}->Belt.List.reduceReverse(0, (a, b) => a + b) /* 10 */\n\nlist{1, 2, 3, 4}->Belt.List.reduceReverse(10, (a, b) => a - b) /* 0 */\n\nlist{1, 2, 3, 4}->Belt.List.reduceReverse(list{}, Belt.List.add) // list{1, 2, 3, 4}\n```\n\n----------------------------------------\n\nTITLE: Converting List to Array in ReScript\nDESCRIPTION: The toArray function converts a ReScript list to a JavaScript array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/list.mdx#2025-04-18_snippet_29\n\nLANGUAGE: rescript\nCODE:\n```\nlet toArray: t<'a> => array<'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nBelt.List.toArray(list{1, 2, 3}) // [1, 2, 3]\n```\n\n----------------------------------------\n\nTITLE: Removing Elements from Belt.Set in ReScript\nDESCRIPTION: Shows how to remove elements from a Belt.Set using the remove function, demonstrating immutability.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/set.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nlet s0 = Belt.Set.fromArray([2,3,1,4,5], ~id=module(IntCmp))\nlet s1 = s0->Belt.Set.remove(1)\nlet s2 = s1->Belt.Set.remove(3)\nlet s3 = s2->Belt.Set.remove(3)\n\ns1->Belt.Set.toArray /* [2,3,4,5] */\ns2->Belt.Set.toArray /* [2,4,5] */\ns2 == s3 /* true */\n```\n\n----------------------------------------\n\nTITLE: Number Operations in ReScript\nDESCRIPTION: Illustrates number operations in ReScript, including the use of '+.' for float addition and 'mod' for modulus operation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/overview.mdx#2025-04-18_snippet_2\n\nLANGUAGE: ReScript\nCODE:\n```\n3.0 +. 4.5\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nmod(5, 3)\n```\n\n----------------------------------------\n\nTITLE: Querying MutableMap Properties in ReScript\nDESCRIPTION: Functions for checking if a map is empty or contains a specific key.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-map.mdx#2025-04-18_snippet_2\n\nLANGUAGE: ReScript\nCODE:\n```\nlet isEmpty: t<'a, 'b, 'c> => bool\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet has: (t<'k, 'a, 'b>, 'k) => bool\n```\n\n----------------------------------------\n\nTITLE: Removing a Key from HashMap in ReScript\nDESCRIPTION: Removes a key-value pair from the hash map using Belt.HashMap.String.remove.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-map-string.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\nlet remove: (t<'a>, key) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet hMap = Belt.HashMap.String.make(~hintSize=10)\nBelt.HashMap.String.set(hMap, \"1\", \"value1\")\nBelt.HashMap.String.remove(hMap, \"1\")\nBelt.HashMap.String.has(hMap, \"1\") == false\n```\n\n----------------------------------------\n\nTITLE: Example of Checking All Elements in String Set in ReScript\nDESCRIPTION: Demonstrates how to check if all strings in a set meet a condition, such as having at least five characters.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-string.mdx#2025-04-18_snippet_38\n\nLANGUAGE: reasonml\nCODE:\n```\nlet hasAtLeastFiveChars = x => String.length(x) >= 5;\n\nlet s0 = Belt.Set.String.fromArray([|\"apple\", \"carrot\"|]);\ns0->Belt.Set.String.every(hasAtLeastFiveChars); /* true */\n```\n\n----------------------------------------\n\nTITLE: Creating Union of Sets in ReScript MutableSetString\nDESCRIPTION: Returns a new set containing all elements from both input sets, combining them without duplicates.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_14\n\nLANGUAGE: reason\nCODE:\n```\nlet union: (t, t) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet s0 = Belt.MutableSet.String.fromArray([|\"apple\", \"banana\", \"orange\", \"carrot\"|]);\nlet s1 = Belt.MutableSet.String.fromArray([|\"apple\", \"banana\", \"orange\", \"strawberry\"|]);\nlet union = Belt.MutableSet.String.union(s0, s1);\nunion->Belt.MutableSet.String.toArray; /* [|\"apple\", \"banana\", \"carrot\", \"orange\", \"strawberry\"|] */\n```\n\n----------------------------------------\n\nTITLE: Adding Element to Set in ReScript MutableSetString\nDESCRIPTION: Adds an element to the set. If the element already exists, the set remains unchanged.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_8\n\nLANGUAGE: reason\nCODE:\n```\nlet add: (t, value) => unit;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet s0 = Belt.MutableSet.String.make();\ns0->Belt.MutableSet.String.add(\"apple\");\ns0->Belt.MutableSet.String.add(\"banana\");\ns0->Belt.MutableSet.String.add(\"banana\");\n\ns0->Belt.MutableSet.String.toArray; /* [|\"apple\", \"banana\"|] */\n```\n\n----------------------------------------\n\nTITLE: Array Element Manipulation Functions in ReScript\nDESCRIPTION: Functions for adding, removing, and rearranging array elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/array-2.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet pop: t<'a> => option<'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet push: (t<'a>, 'a) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet pushMany: (t<'a>, array<'a>) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet reverseInPlace: t<'a> => t<'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet shift: t<'a> => option<'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet sortInPlace: t<'a> => t<'a>\n```\n\n----------------------------------------\n\nTITLE: String Splitting Operations in ReScript\nDESCRIPTION: Various methods for splitting strings using delimiters and regular expressions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/string.mdx#2025-04-18_snippet_9\n\nLANGUAGE: res\nCODE:\n```\nlet split: (t, t) => array<t>\n```\n\nLANGUAGE: res\nCODE:\n```\nJs.String.split(\"-\", \"2018-01-02\") == [\"2018\", \"01\", \"02\"]\nJs.String.split(\",\", \"a,b,,c\") == [\"a\", \"b\", \"\", \"c\"]\nJs.String.split(\"::\", \"good::bad as great::awful\") == [\"good\", \"bad as great\", \"awful\"]\nJs.String.split(\";\", \"has-no-delimiter\") == [\"has-no-delimiter\"]\n```\n\n----------------------------------------\n\nTITLE: Filtering Belt.MutableSet.Int elements in ReScript\nDESCRIPTION: Filters set elements using keep and partition functions based on a predicate.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_13\n\nLANGUAGE: res\nCODE:\n```\nlet keep: (t, value => bool) => t\nlet partition: (t, value => bool) => (t, t)\n```\n\nLANGUAGE: res\nCODE:\n```\nlet isEven = x => mod(x, 2) == 0\n\nlet s0 = Belt.MutableSet.Int.fromArray([1, 2, 3, 4, 5])\nlet s1 = s0->Belt.MutableSet.Int.keep(isEven)\n\ns1->Belt.MutableSet.Int.toArray /* [2, 4] */\n\nlet isOdd = x => mod(x, 2) != 0\n\nlet s0 = Belt.MutableSet.Int.fromArray([1, 2, 3, 4, 5])\nlet (s1, s2) = s0->Belt.MutableSet.Int.partition(isOdd)\n\ns1->Belt.MutableSet.Int.toArray /* [1,3,5] */\ns2->Belt.MutableSet.Int.toArray /* [2,4] */\n```\n\n----------------------------------------\n\nTITLE: Cleaning ReScript Project Build Artifacts\nDESCRIPTION: Commands to clean build artifacts when encountering stale builds. The first command cleans only the current project, while the second also cleans dependencies' artifacts.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/build-overview.mdx#2025-04-18_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nrescript clean\n```\n\n----------------------------------------\n\nTITLE: Initializing Dictionary Example\nDESCRIPTION: Example showing how to create a dictionary with string keys and integer values using fromList.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/dict.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\nlet ages = Js.Dict.fromList(list{(\"Maria\", 30), (\"Vinh\", 22), (\"Fred\", 49)})\n```\n\n----------------------------------------\n\nTITLE: Converting Map to List in ReScript MapInt Module\nDESCRIPTION: Function signature for converting the map to a list of key-value pairs.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-int.mdx#2025-04-18_snippet_20\n\nLANGUAGE: rescript\nCODE:\n```\nlet toList: t<'v> => list<(key, 'v)>\n```\n\n----------------------------------------\n\nTITLE: Getting Time in Milliseconds from Date in ReScript\nDESCRIPTION: ReScript binding for JavaScript's Date.getTime method. Returns the number of milliseconds since Unix epoch, evaluated in UTC.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_27\n\nLANGUAGE: res\nCODE:\n```\nlet getTime: t => float\n```\n\nLANGUAGE: res\nCODE:\n```\nJs.Date.getTime(exampleDate) == 123456654321.0\n```\n\n----------------------------------------\n\nTITLE: Defining String2 Type in ReScript\nDESCRIPTION: Defines the type alias 't' for string in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/string-2.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype t = string\n```\n\n----------------------------------------\n\nTITLE: Limitations with Normal Polymorphic Types in ReScript\nDESCRIPTION: Demonstration of the type error that occurs when attempting to use a normal polymorphic logger with different data types, as the type gets fixed after the first usage.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/scoped-polymorphic-types.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\nlet myLogger = getLogger()\n\nmyLogger.log(\"Hello, ReScript!\")\nmyLogger.log(42) // Type error!\n```\n\n----------------------------------------\n\nTITLE: Using substrAtMost function in ReScript\nDESCRIPTION: Extracts a substring with a specified length from a string, starting at a specified position. Provides greater control by limiting the number of characters returned.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/string-2.mdx#2025-04-18_snippet_27\n\nLANGUAGE: rescript\nCODE:\n```\nlet substrAtMost: (t, ~from: int, ~length: int) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.String2.substrAtMost(\"abcdefghij\", ~from=3, ~length=4) == \"defg\"\nJs.String2.substrAtMost(\"abcdefghij\", ~from=-3, ~length=4) == \"hij\"\nJs.String2.substrAtMost(\"abcdefghij\", ~from=12, ~length=2) == \"\"\n```\n\n----------------------------------------\n\nTITLE: Creating RegExp Objects in ReScript\nDESCRIPTION: Functions to create RegExp objects from strings, with optional flags for configuration.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/re.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromString: string => t\n\nlet fromStringWithFlags: (string, ~flags: string) => t\n```\n\n----------------------------------------\n\nTITLE: Building ReScript code\nDESCRIPTION: Command to run a ReScript build, which compiles ReScript code into JavaScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/installation.mdx#2025-04-18_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nnpm run res:build\n```\n\n----------------------------------------\n\nTITLE: Converting String to Float\nDESCRIPTION: Function that parses a string into a float using JavaScript's number parsing semantics.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/float.mdx#2025-04-18_snippet_31\n\nLANGUAGE: re\nCODE:\n```\nlet fromString: string => float;\n```\n\n----------------------------------------\n\nTITLE: Sort Array In-Place\nDESCRIPTION: Sorts the elements of the typed array in-place using default comparison.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_type-s.mdx#2025-04-18_snippet_16\n\nLANGUAGE: res\nCODE:\n```\nlet sortInPlace: t => t\n```\n\n----------------------------------------\n\nTITLE: Converting Nullable to Option in ReScript\nDESCRIPTION: The 'toOption' function converts Js.null_undefined('a) to option('a), mapping values to Some(a) and null/undefined to None.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/nullable.mdx#2025-04-18_snippet_12\n\nLANGUAGE: reason\nCODE:\n```\nlet toOption: t('a) => option('a);\n```\n\n----------------------------------------\n\nTITLE: Finding Index of an Element with Index Check in Array in ReasonML\nDESCRIPTION: The findIndexi function returns the index of the first element in the array that satisfies the provided testing function, which takes both the element and its index as arguments. It returns -1 if no elements satisfy the function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array.mdx#2025-04-18_snippet_21\n\nLANGUAGE: ReasonML\nCODE:\n```\nlet findIndexi: (('a, int) => bool, t<'a>) => int\n```\n\nLANGUAGE: ReasonML\nCODE:\n```\nlet positiveOddElement = (item, index) => mod(index, 2) == 1 && item > 0\n\nJs.Array.findIndexi(positiveOddElement, [66, -33, 55, 88, 22]) == 3\nJs.Array.findIndexi(positiveOddElement, [66, -33, 55, -88, 22]) == -1\n```\n\n----------------------------------------\n\nTITLE: Configuring Warning Behavior in bsconfig.json\nDESCRIPTION: Example configuration for selectively enabling or disabling specific compiler warnings and optionally turning warnings into hard errors.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/build-configuration.mdx#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"warnings\": {\n    \"number\": \"-44-102\",\n    \"error\": \"+5\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing RegExp Operations in ReScript\nDESCRIPTION: Functions to execute RegExp operations like searching for matches and testing strings against patterns.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/re.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet exec_: (t, string) => option<result>\n\nlet exec: (string, t) => option<result>\n\nlet test_: (t, string) => bool\n\nlet test: (string, t) => bool\n```\n\n----------------------------------------\n\nTITLE: Finding Element Index with Context using findIndexi in ReScript\nDESCRIPTION: Function signature for findIndexi that returns the index of the first element in the Uint8Array that satisfies the provided testing function which also receives the element index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_39\n\nLANGUAGE: rescript\nCODE:\n```\nlet findIndexi: ((. elt, int) => bool, t) => int\n```\n\n----------------------------------------\n\nTITLE: Iterating Over a HashMap in ReScript\nDESCRIPTION: Applies a function to all bindings in the hash map. The function receives the key as the first argument and the associated value as the second.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-map.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\nlet forEachU: (t('key, 'value, 'id), [@bs] (('key, 'value) => unit)) => unit;\n\nlet forEach: (t('key, 'value, 'id), ('key, 'value) => unit) => unit;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nmodule IntHash =\n  Belt.Id.MakeHashable({\n    type t = int;\n    let hash = a => a;\n    let eq = (a, b) => a == b;\n  });\n  \nlet s0 = Belt.HashMap.make(~hintSize=10, ~id=(module IntHash));\nBelt.HashMap.set(s0, 1, \"value1\");\nBelt.HashMap.forEach(s0, (key, value) => Js.log2(key, value));\n// prints (1, \"value1\")\n```\n\n----------------------------------------\n\nTITLE: Getting String Length in ReScript\nDESCRIPTION: The 'length' function returns the length of a given string. It takes a string and returns an integer representing the number of characters in the string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/string-2.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet length: t => int\n```\n\n----------------------------------------\n\nTITLE: Accessing Empty Undefined Value in ReScript\nDESCRIPTION: Function signature for getting the empty undefined value. Provides access to JavaScript's undefined value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/undefined.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nlet empty: t<'a>\n```\n\n----------------------------------------\n\nTITLE: Setting Milliseconds in ReScript\nDESCRIPTION: Sets the milliseconds of a Date object according to current timezone. Returns milliseconds since epoch. Modifies the original Date object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_48\n\nLANGUAGE: res\nCODE:\n```\nlet date1 = Js.Date.fromFloat(123456654321.0)\nlet futureTime = Js.Date.setMilliseconds(date1, 494.0)\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Vector with Index in ReScript\nDESCRIPTION: Applies a function to each element of a vector, passing both the element and its index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/vector.mdx#2025-04-18_snippet_7\n\nLANGUAGE: ReScript\nCODE:\n```\nlet iteri: ((. int, 'a) => unit, t('a)) => unit;\n```\n\n----------------------------------------\n\nTITLE: Float fromString Function\nDESCRIPTION: Function to parse a string into a float using JavaScript semantics. Returns NaN for invalid inputs.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/float.mdx#2025-04-18_snippet_11\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromString: string => float\n```\n\n----------------------------------------\n\nTITLE: Testing Any Value for Undefined in ReScript\nDESCRIPTION: Returns true if the given value is empty (undefined). Introduced in version 1.6.1.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/undefined.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reasonml\nCODE:\n```\nlet testAny: 'a => bool;\n```\n\n----------------------------------------\n\nTITLE: Configuring Output Format in ReScript\nDESCRIPTION: Example of specifying output format in rescript.json. Shows how to configure CommonJS or ES module output and in-source generation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/build-configuration.mdx#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"package-specs\": {\n    \"module\": \"commonjs\",\n    \"in-source\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Checking Element Existence in String Set in ReScript\nDESCRIPTION: Shows how to check if specific string elements exist in a set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-string.mdx#2025-04-18_snippet_10\n\nLANGUAGE: reasonml\nCODE:\n```\nlet set = Belt.Set.String.fromArray([|\"apple\", \"orange\", \"banana\"|]);\n\nset->Belt.Set.String.has(\"strawberry\") /* false */\nset->Belt.Set.String.has(\"apple\") /* true */\n```\n\n----------------------------------------\n\nTITLE: Converting Date to UTC String in ReScript\nDESCRIPTION: Converts a Date object to a string representation in UTC (GMT time zone). Returns date and time formatted for UTC representation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_77\n\nLANGUAGE: rescript\nCODE:\n```\nlet toUTCString: t => string\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.Date.toUTCString(exampleDate) == \"Thu, 29 Nov 1973 21:30:54 GMT\"\n```\n\n----------------------------------------\n\nTITLE: Reversing Array Order\nDESCRIPTION: Reverses the order of elements in the array in place.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_15\n\nLANGUAGE: rescript\nCODE:\n```\nlet reverseInPlace: t => t\n```\n\n----------------------------------------\n\nTITLE: Example of Iterating Over Undefined Values in ReScript\nDESCRIPTION: Example showing how to use the iter function to log a message if it exists within an undefined container.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/undefined.mdx#2025-04-18_snippet_10\n\nLANGUAGE: res\nCODE:\n```\nlet maybeSay = (maybeMessage: Js.undefined<string>) =>\n  Js.Undefined.iter(maybeMessage, (. message) => Js.log(message))\n```\n\n----------------------------------------\n\nTITLE: Initial JavaScript Code Sample\nDESCRIPTION: Original JavaScript code showing a module import and function implementation for querying student data.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/converting-from-js.mdx#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst school = require('school');\n\nconst defaultId = 10;\n\nfunction queryResult(usePayload, payload) {\n  if (usePayload) {\n    return payload.student;\n  } else {\n    return school.getStudentById(defaultId);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing MutableStack in ReScript\nDESCRIPTION: Function to discard all elements from a stack, emptying it entirely.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-stack.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet clear: t('a) => unit;\n```\n\n----------------------------------------\n\nTITLE: Defining intervalId Type in ReScript\nDESCRIPTION: Type definition for intervalId used to identify intervals started by Js.Global.setInterval.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/global.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reasonml\nCODE:\n```\ntype intervalId;\n```\n\n----------------------------------------\n\nTITLE: Adding Element to MutableQueue in ReScript\nDESCRIPTION: The 'add' function adds an element to the end of the queue.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-queue.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet add: (t<'a>, 'a) => unit\n```\n\n----------------------------------------\n\nTITLE: Checking String Ending with Position in ReScript\nDESCRIPTION: The endsWithFrom function checks if a substring appears at the end of a specified portion of a string, determined by the length parameter.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string.mdx#2025-04-18_snippet_14\n\nLANGUAGE: reason\nCODE:\n```\nlet endsWithFrom: (t, int, t) => bool;\n```\n\nLANGUAGE: reason\nCODE:\n```\nJs.String.endsWithFrom(\"cd\", 4, \"abcd\") == true;\nJs.String.endsWithFrom(\"cd\", 3, \"abcde\") == false;\nJs.String.endsWithFrom(\"cde\", 99, \"abcde\",) == true;\nJs.String.endsWithFrom(\"ple\", 7, \"example.dat\") == true;\n```\n\n----------------------------------------\n\nTITLE: Installing ReScript in Existing Project\nDESCRIPTION: Command to install ReScript as a dependency in an existing JavaScript project.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/installation.mdx#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install rescript\n```\n\n----------------------------------------\n\nTITLE: List Count By Function Signature in ReScript\nDESCRIPTION: Defines the signature for the 'countBy' function, which counts elements in a list that satisfy a predicate.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/list.mdx#2025-04-18_snippet_18\n\nLANGUAGE: rescript\nCODE:\n```\nlet countBy: ((. 'a) => bool, list<'a>) => int\n```\n\n----------------------------------------\n\nTITLE: Left Fold on Vector in ReScript\nDESCRIPTION: Applies a function to each element of a vector from left to right, accumulating a result.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/vector.mdx#2025-04-18_snippet_11\n\nLANGUAGE: ReScript\nCODE:\n```\nlet foldLeft: ((. 'a, 'b) => 'a, 'a, t('b)) => 'a;\n```\n\n----------------------------------------\n\nTITLE: Testing for Null in ReScript\nDESCRIPTION: Returns true if the given value is empty (null), false otherwise.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/null.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\nlet test: t('a) => bool;\n```\n\n----------------------------------------\n\nTITLE: Sorting Array with sortInPlace\nDESCRIPTION: Function signature to sort the elements of the Int8Array in place using the default sort order.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_16\n\nLANGUAGE: res\nCODE:\n```\nlet sortInPlace: t => t\n```\n\n----------------------------------------\n\nTITLE: Defining isSorted Function\nDESCRIPTION: Function that checks if an array is increasingly sorted, allowing equal elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/sort-array.mdx#2025-04-18_snippet_5\n\nLANGUAGE: reason\nCODE:\n```\nlet isSorted: (array('a), ('a, 'a) => int) => bool;\n```\n\n----------------------------------------\n\nTITLE: String to Float Conversion\nDESCRIPTION: Function signature for parsing string to float using JavaScript semantics.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/float.mdx#2025-04-18_snippet_11\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromString: string => float\n```\n\n----------------------------------------\n\nTITLE: Checking Element Presence with includes in ReScript\nDESCRIPTION: Function signature for includes that determines whether a Uint8Array includes a certain element, returning a boolean value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_18\n\nLANGUAGE: rescript\nCODE:\n```\nlet includes: (elt, t) => bool\n```\n\n----------------------------------------\n\nTITLE: Using log2 function to calculate base-2 logarithm in ReScript\nDESCRIPTION: The log2 function returns the base-2 logarithm of its argument. It takes a float as input and returns a float, returning NaN for negative arguments.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/math.mdx#2025-04-18_snippet_13\n\nLANGUAGE: res\nCODE:\n```\nlet log2: float => float\n```\n\nLANGUAGE: res\nCODE:\n```\nJs.Math.log2(512.0) == 9.0\nJs.Math.log2(0.125) == -3.0\nJs.Math.log2(Js.Math._SQRT2) == 0.5000000000000001 // due to precision\n```\n\n----------------------------------------\n\nTITLE: Checking all elements in MapDict (ReScript)\nDESCRIPTION: Functions for checking if all key-value pairs in a MapDict satisfy a predicate.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_8\n\nLANGUAGE: ReScript\nCODE:\n```\nlet everyU: (t<'k, 'a, 'id>, (. 'k, 'a) => bool) => bool\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet every: (t<'k, 'a, 'id>, ('k, 'a) => bool) => bool\n```\n\n----------------------------------------\n\nTITLE: Creating a Set from Array in ReasonML\nDESCRIPTION: Shows how to create a new set from an array of elements using fromArray. The elements will be automatically sorted in the resulting set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set.mdx#2025-04-18_snippet_5\n\nLANGUAGE: reasonml\nCODE:\n```\nlet fromArray: (array('value), ~id: id('value, 'id)) => t('value, 'id);\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet s0 = Belt.Set.fromArray([|1, 3, 2, 4|], ~id=(module IntCmp))\n\ns0->Belt.Set.toArray; /* [|1, 2, 3, 4|] */\n```\n\n----------------------------------------\n\nTITLE: Demonstrating @unboxed Decorator Usage in ReScript\nDESCRIPTION: This snippet shows how to use the @unboxed decorator with variant types and single-field record types in ReScript. It demonstrates the unwrapping of variant constructors and record objects, resulting in more efficient JavaScript output.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/decorator_unboxed.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\n@unboxed\ntype listItemValue = String(string) | Boolean(bool) | Number(float)\nlet myArray = [String(\"Hello\"), Boolean(true), Boolean(false), Number(13.37)]\nlet studentName = Name(\"Joe\")\n\n@unboxed\ntype greeting = {message: string}\nlet hi = {message: \"hello!\"}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar myArray = [\"hello\", true, false, 13.37];\nvar hi = \"hello!\";\n```\n\n----------------------------------------\n\nTITLE: Splitting String by Regular Expression in ReScript\nDESCRIPTION: The splitByRe function splits a string into an array of substrings based on a regular expression pattern.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/string-2.mdx#2025-04-18_snippet_23\n\nLANGUAGE: rescript\nCODE:\n```\nlet splitByRe: (t, Js_re.t) => array<option<t>>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.String2.splitByRe(\"art; bed , cog ;dad\", %re(\"/\\s*[,;]\\s*/\")) == [\n    Some(\"art\"),\n    Some(\"bed\"),\n    Some(\"cog\"),\n    Some(\"dad\"),\n  ]\n```\n\n----------------------------------------\n\nTITLE: Get Raw Data from ReScript Belt.Set\nDESCRIPTION: Advanced usage function that returns the raw data detached from comparator while maintaining type manifestation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set.mdx#2025-04-18_snippet_31\n\nLANGUAGE: res\nCODE:\n```\nlet getData: t<'value, 'id> => Belt_SetDict.t<'value, 'id>\n```\n\n----------------------------------------\n\nTITLE: Tagged Template Implementation\nDESCRIPTION: Demonstrates the use of tagged templates with the Bun shell command example.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2024-02-01-release-11-1-0.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\ntype result = {exitCode: int}\n@module(\"bun\") @taggedTemplate\nexternal sh: (array<string>, array<string>) => promise<result> = \"$\"\n\nlet filename = \"index.res\"\nlet result = await sh`ls ${filename}`\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar $$Bun = require(\"bun\");\n\nvar filename = \"index.res\";\n\nvar result = await $$Bun.$`ls ${filename}`;\n```\n\n----------------------------------------\n\nTITLE: Using Modules to Prevent Naming Collisions\nDESCRIPTION: Demonstrates how to use modules to group related types and functions to avoid naming conflicts.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/generate-converters-accessors.mdx#2025-04-18_snippet_21\n\nLANGUAGE: rescript\nCODE:\n```\nmodule Person = {\n  @deriving(abstract)\n  type t = {name: string}\n}\n\nmodule Cat = {\n  @deriving(abstract)\n  type t = {\n    name: string,\n    isLazy: bool,\n  }\n}\n\nlet person = Person.t(~name=\"Alice\")\nlet cat = Cat.t(~name=\"Snowball\", ~isLazy=true)\n\nlet shoutPersonName = {\n  open Person\n  person->nameGet->Js.String.toUpperCase\n}\n\nlet whisperCatName = {\n  open Cat\n  cat->nameGet->Js.String.toLowerCase\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Substring with Length Limit in ReScript\nDESCRIPTION: The substrAtMost function returns a substring of specified length from a given index. It handles negative indices and out-of-bounds cases for both position and length.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string-2.mdx#2025-04-18_snippet_22\n\nLANGUAGE: reason\nCODE:\n```\nlet substrAtMost: (t, ~from: int, ~length: int) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nJs.String2.substrAtMost(\"abcdefghij\", ~from=3, ~length=4) == \"defg\";\nJs.String2.substrAtMost(\"abcdefghij\", ~from=(-3), ~length=4) == \"hij\";\nJs.String2.substrAtMost(\"abcdefghij\", ~from=12, ~length=2) == \"\";\n```\n\n----------------------------------------\n\nTITLE: Filtering Belt.Set Elements in ReScript\nDESCRIPTION: Demonstrates how to filter elements of a Belt.Set based on a predicate using the keep function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set.mdx#2025-04-18_snippet_18\n\nLANGUAGE: rescript\nCODE:\n```\nlet isEven = x => mod(x, 2) == 0\n\nlet s0 = Belt.Set.fromArray([1,2,3,4,5], ~id=module(IntCmp))\nlet s1 = s0->Belt.Set.keep(isEven)\n\ns1->Belt.Set.toArray /* [2,4] */\n```\n\n----------------------------------------\n\nTITLE: Creating List with Function in ReScript\nDESCRIPTION: The makeBy function creates a new list where each element is generated by applying a function to its index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/list.mdx#2025-04-18_snippet_11\n\nLANGUAGE: rescript\nCODE:\n```\nlet makeBy: (int, int => 'a) => t<'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nBelt.List.makeBy(5, i => i) // list{0, 1, 2, 3, 4}\n\nBelt.List.makeBy(5, i => i * i) // list{0, 1, 4, 9, 16}\n```\n\n----------------------------------------\n\nTITLE: Code Point At Position\nDESCRIPTION: Function signature for getting the code point at a specific position.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/string-2.mdx#2025-04-18_snippet_10\n\nLANGUAGE: res\nCODE:\n```\nlet codePointAt: (t, int) => option<int>\n```\n\n----------------------------------------\n\nTITLE: ReScript Record with BS.as Annotation for Capitalized Fields\nDESCRIPTION: ReScript code showing how to handle capitalized JavaScript field names using @bs.as annotation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/use-illegal-identifier-names.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\ntype payload = {\n  [@bs.as \"PostTitle\"] postTitle: string\n};\n\nlet payload = {\n  postTitle: \"Welcome to Reason\"\n};\n\n/* ReScript is happy since we're using the valid `postTitle` field name */\nlet title = payload.postTitle;\n```\n\nLANGUAGE: ml\nCODE:\n```\ntype payload = {\n  postTitle: string [@bs.as \"PostTitle\"]\n}\n\nlet payload = {\n  postTitle = \"Welcome to Reason\"\n}\n\n(* ReScript is happy since we're using the valid `postTitle` field name *)\nlet title = payload.postTitle\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/* The correct capitalized field name is output in the JavaScript! */\nvar title = payload.PostTitle;\n```\n\n----------------------------------------\n\nTITLE: Using open! to Ignore Shadow Warnings in ReScript\nDESCRIPTION: Shows how to use 'open!' to explicitly ignore shadow warnings when opening a module that redefines existing identifiers.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/module.mdx#2025-04-18_snippet_4\n\nLANGUAGE: ReScript\nCODE:\n```\nlet map = (arr, value) => {\n  value\n}\n\n// opening Js.Array2 would shadow our previously defined `map`\n// `open!` will explicitly turn off the automatic warning\nopen! Js.Array2\nlet arr = map([1,2,3], (a) => { a + 1})\n```\n\n----------------------------------------\n\nTITLE: Searching for Last Index in ReScript String\nDESCRIPTION: The lastIndexOfFrom function returns the position of the last occurrence of a search value within a string, searching backwards from a given start position. It returns -1 if the search value is not found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string.mdx#2025-04-18_snippet_20\n\nLANGUAGE: rescript\nCODE:\n```\nlet lastIndexOfFrom: (t, int, t) => int;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.String.lastIndexOfFrom(\"ok\", 6, \"bookseller\") == 2;\nJs.String.lastIndexOfFrom(\"ee\", 8, \"beekeeper\") == 4;\nJs.String.lastIndexOfFrom(\"ee\", 3, \"beekeeper\") == 1;\nJs.String.lastIndexOfFrom(\"xyz\", 4, \"abcdefg\") == -1;\n```\n\n----------------------------------------\n\nTITLE: Converting Values to Strings in ReScript\nDESCRIPTION: The make function converts any value to a string representation. It accepts any type and returns a string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reason\nCODE:\n```\nlet make: 'a => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nJs.String2.make(3.5) == \"3.5\";\nJs.String2.make([|1,2,3|]) == \"1,2,3\";\n```\n\n----------------------------------------\n\nTITLE: Intersection of MutableSets Example in ReasonML\nDESCRIPTION: Example showing how to create an intersection of two MutableSets using the intersect function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_26\n\nLANGUAGE: reasonml\nCODE:\n```\nmodule IntCmp =\n  Belt.Id.MakeComparable({\n    type t = int;\n    let cmp = Pervasives.compare;\n  });\n\nlet s0 = Belt.MutableSet.fromArray([|5,2,3,5,6|], ~id=(module IntCmp));\nlet s1 = Belt.MutableSet.fromArray([|5,2,3,1,5,4|], ~id=(module IntCmp));\nlet intersect = Belt.MutableSet.intersect(s0, s1);\nintersect->Belt.MutableSet.toArray; /* [|2,3,5|] */\n```\n\n----------------------------------------\n\nTITLE: mapWithDefault Function Definition and Example\nDESCRIPTION: Function to transform an Option value with a default fallback if None is provided.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/option.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reason\nCODE:\n```\nlet mapWithDefault: (option('a), 'b, 'a => 'b) => 'b;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet someValue = Some(3);\nsomeValue->Belt.Option.mapWithDefault(0, x => x + 5); /* 8 */\n\nlet noneValue = None;\nnoneValue->Belt.Option.mapWithDefault(0, x => x + 5); /* 0 */\n```\n\n----------------------------------------\n\nTITLE: Binding to JavaScript Functions with Polymorphic Variants\nDESCRIPTION: Shows how to use polymorphic variants to create bindings to JavaScript functions with constrained arguments. This example binds to Intl.NumberFormat with specific locale restrictions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/polymorphic-variant.mdx#2025-04-18_snippet_14\n\nLANGUAGE: res\nCODE:\n```\n// IntlNumberFormat.res\ntype t\n\n@bs.val\nexternal make: ([#\\\"de-DE\" | #\\\"en-GB\" | #\\\"en-US\" ]) => t = \"Intl.NumberFormat\"\n```\n\n----------------------------------------\n\nTITLE: Converting int to string in ReScript\nDESCRIPTION: Converts an integer value to a string representation using the Belt.Int.toString function. Uses JavaScript's String constructor internally.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/int.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet toString: int => string\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.log(Belt.Int.toString(1) === \"1\") /* true */\n```\n\n----------------------------------------\n\nTITLE: Converting an integer hash set to an array in ReScript\nDESCRIPTION: Function signature for creating an array containing all the elements of the hash set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/hash-set-int.mdx#2025-04-18_snippet_15\n\nLANGUAGE: res\nCODE:\n```\nlet toArray: t => array<key>\n```\n\n----------------------------------------\n\nTITLE: Updating a value in MapDict (uncurried)\nDESCRIPTION: Function signature for updating a value associated with a key using an uncurried function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_42\n\nLANGUAGE: reason\nCODE:\n```\nlet updateU:\n  (t('a, 'b, 'id), 'a, [@bs] (option('b) => option('b)), ~cmp: cmp('a, 'id)) => t('a, 'b, 'id);\n```\n\n----------------------------------------\n\nTITLE: Partitioning a string set with an uncurried predicate in ReScript\nDESCRIPTION: Splits the set into two sets based on the uncurried predicate.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set-string.mdx#2025-04-18_snippet_27\n\nLANGUAGE: rescript\nCODE:\n```\nlet partitionU: (t, (. value) => bool) => (t, t)\n```\n\n----------------------------------------\n\nTITLE: Testing if all entries satisfy predicate (uncurried) in ReScript map\nDESCRIPTION: Checks if all key-value pairs in the map satisfy the uncurried predicate function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_14\n\nLANGUAGE: reasonml\nCODE:\n```\nlet everyU: (t('a), [@bs] ((key, 'a) => bool)) => bool;\n```\n\n----------------------------------------\n\nTITLE: Computing Hyperbolic Cosine in ReScript\nDESCRIPTION: Function that returns the hyperbolic cosine of the argument (specified in radians), equivalent to JavaScript's Math.cosh.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/math.mdx#2025-04-18_snippet_30\n\nLANGUAGE: reasonml\nCODE:\n```\nlet cosh: float => float;\n```\n\n----------------------------------------\n\nTITLE: CopyWithin Operation\nDESCRIPTION: Copies a sequence of elements within the typed array to a specified position.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_type-s.mdx#2025-04-18_snippet_9\n\nLANGUAGE: res\nCODE:\n```\nlet copyWithin: (~to_: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Converting Option to Null in ReScript\nDESCRIPTION: Maps option('a) to Js.null('a). Some(a) becomes a, and None becomes empty (null).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/null.mdx#2025-04-18_snippet_10\n\nLANGUAGE: reason\nCODE:\n```\nlet fromOption: option('a) => t('a);\n```\n\n----------------------------------------\n\nTITLE: Converting Float to String in ReScript\nDESCRIPTION: The toString function converts a given float to a string. It uses the JavaScript String constructor under the hood.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/float.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ReScript\nCODE:\n```\nJs.log(Belt.Float.toString(1.0) === \"1.0\") /* true */\n```\n\n----------------------------------------\n\nTITLE: While Loop in ReScript\nDESCRIPTION: Shows the syntax for while loops in ReScript, which continue executing the body code block as long as the condition remains true.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/control-flow.mdx#2025-04-18_snippet_8\n\nLANGUAGE: re\nCODE:\n```\nwhile (testCondition) {\n  // body here\n};\n```\n\nLANGUAGE: ml\nCODE:\n```\nwhile testCondition do\n  (* body here *)\ndone\n```\n\nLANGUAGE: js\nCODE:\n```\nwhile (testCondition) {\n  // body here\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Array Elements with Index in ReScript\nDESCRIPTION: Returns the first element in the array that satisfies the provided testing function which receives both the element and its index. Returns Some(value) for the first matching element, or None if no element satisfies the predicate.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/array-2.mdx#2025-04-18_snippet_16\n\nLANGUAGE: ReScript\nCODE:\n```\nlet findi: (t<'a>, ('a, int) => bool) => option<'a>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\n// find first positive item at an odd index\nlet positiveOddElement = (item, index) => mod(index, 2) == 1 && item > 0\n\nJs.Array2.findi([66, -33, 55, 88, 22], positiveOddElement) == Some(88)\nJs.Array2.findi([66, -33, 55, -88, 22], positiveOddElement) == None\n```\n\n----------------------------------------\n\nTITLE: Defining hash type in ReScript\nDESCRIPTION: Defines a hash type with generic parameters for the value type and an identifier. The runtime representation is a hash function, but it's signed with a type parameter to prevent mixing of different hash functions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/id.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\ntype hash<'a, 'id>\n```\n\n----------------------------------------\n\nTITLE: Creating Intersection of Two Sets in ReScript\nDESCRIPTION: Returns a new set containing only elements that exist in both input sets.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-string.mdx#2025-04-18_snippet_21\n\nLANGUAGE: reasonml\nCODE:\n```\nlet intersect: (t, t) => t;\n```\n\n----------------------------------------\n\nTITLE: Checking String Start in ReScript\nDESCRIPTION: The startsWith function checks if a string starts with a specified substring. It returns a boolean value indicating the result.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string-2.mdx#2025-04-18_snippet_19\n\nLANGUAGE: reason\nCODE:\n```\nlet startsWith: (t, t) => bool;\n```\n\nLANGUAGE: reason\nCODE:\n```\nJs.String2.startsWith(\"BuckleScript\", \"Buckle\") == true;\nJs.String2.startsWith(\"BuckleScript\", \"\") == true;\nJs.String2.startsWith(\"JavaScript\", \"Buckle\") == false;\n```\n\n----------------------------------------\n\nTITLE: Check if All Elements Pass Test Function with Index\nDESCRIPTION: Tests whether all elements in the Float32Array pass the provided function that includes the element index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-32-array.mdx#2025-04-18_snippet_33\n\nLANGUAGE: rescript\nCODE:\n```\nlet everyi: ((. elt, int) => bool, t) => bool;\n```\n\n----------------------------------------\n\nTITLE: Unicode String Usage in ReScript\nDESCRIPTION: Example showing direct Unicode character usage in ReScript strings\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2022-08-25-release-10-0-0.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet str = \"Σ\"\n```\n\n----------------------------------------\n\nTITLE: Getting Seconds from Date in ReScript\nDESCRIPTION: ReScript binding for JavaScript's Date.getSeconds method. Returns the seconds for a date, evaluated in the current time zone.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_26\n\nLANGUAGE: res\nCODE:\n```\nlet getSeconds: t => float\n```\n\nLANGUAGE: res\nCODE:\n```\nJs.Date.getSeconds(exampleDate) == 54.0\n```\n\n----------------------------------------\n\nTITLE: Dictionary Entries Operation\nDESCRIPTION: Function signature for getting key-value pairs array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/dict.mdx#2025-04-18_snippet_13\n\nLANGUAGE: rescript\nCODE:\n```\nlet entries: t<'a> => array<(key, 'a)>\n```\n\n----------------------------------------\n\nTITLE: Checking Conditions with some in ReScript\nDESCRIPTION: Illustrates the use of Belt.Range.some to check if any number in a range satisfies a condition. Two examples are provided: one that returns false and another that returns true.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/range.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ReScript\nCODE:\n```\nBelt.Range.some(0, 4, (i) => i > 5) /* false */\n\nBelt.Range.some(0, 4, (i) => i > 2) /* true */\n```\n\n----------------------------------------\n\nTITLE: List Equality Function Signature\nDESCRIPTION: Function to check if two lists are equal according to a custom equality function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/list.mdx#2025-04-18_snippet_21\n\nLANGUAGE: ReScript\nCODE:\n```\nlet equal: ((. 'a, 'a) => bool, list('a), list('a)) => bool;\n```\n\n----------------------------------------\n\nTITLE: String Includes From Position\nDESCRIPTION: Function signature for checking if a string includes a substring from a specific position.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/string-2.mdx#2025-04-18_snippet_16\n\nLANGUAGE: res\nCODE:\n```\nlet includesFrom: (t, t, int) => bool\n```\n\n----------------------------------------\n\nTITLE: Maximum Value Operations in ReScript Set\nDESCRIPTION: Functions for retrieving the maximum value from a set, with different return types for empty sets.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-dict.mdx#2025-04-18_snippet_17\n\nLANGUAGE: reason\nCODE:\n```\nlet maximum: t('value, 'id) => option('value);\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet maxUndefined: t('value, 'id) => Js.undefined('value);\n```\n\n----------------------------------------\n\nTITLE: Map MergeMany Function Signature\nDESCRIPTION: Adds multiple key-value pairs to a map, potentially modifying the reference even if values exist.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet mergeMany: (t<'k, 'v, 'id>, array<('k, 'v)>) => t<'k, 'v, 'id>\n```\n\n----------------------------------------\n\nTITLE: JavaScript Logger Implementation\nDESCRIPTION: Example of a JavaScript logging implementation that handles multiple data types using typeof checks.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/scoped-polymorphic-types.mdx#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst logger = {\n  log: (data) => {\n    if (typeof data === \"string\") {\n      /* handle string */\n    } else if (typeof data === \"number\") {\n      /* handle number */\n    } else {\n      /* handle other types */\n    }\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating HashMap from Array in ReScript\nDESCRIPTION: Creates a new hash map from an array of key-value pairs.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-map-int.mdx#2025-04-18_snippet_13\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromArray: array<(key, 'a)> => t<'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet hMap = Belt.HashMap.Int.fromArray([(1, \"value1\"), (1, \"value2\")])\nBelt.HashMap.Int.toArray(hMap) == [(1, \"value1\"), (2, \"value2\")]\n```\n\n----------------------------------------\n\nTITLE: Using fromString Function in ReScript\nDESCRIPTION: Demonstrates the use of the fromString function with various date string formats.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\nJs.Date.fromString(\"Thu, 29 Nov 1973 21:30:54.321 GMT\") == exampleDate\nJs.Date.fromString(\"1973-11-29T21:30:54.321Z00:00\") == exampleDate\nJs.Date.fromString(\"Thor, 32 Lok -19 60:70:80 XYZ\") // returns NaN\n```\n\n----------------------------------------\n\nTITLE: Slicing UInt32Array with range\nDESCRIPTION: Defines a function that returns a new array containing elements from start (inclusive) to end (exclusive).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_25\n\nLANGUAGE: rescript\nCODE:\n```\nlet slice: (~start: int, ~end_: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Installing ReScript 8.3.1 via npm\nDESCRIPTION: Command to install ReScript 8.3.1 using npm. This allows users to test the new version of ReScript mentioned in the blog post.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2020-09-25-release-8-3-2.mdx#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i bs-platform@8.3.1\n```\n\n----------------------------------------\n\nTITLE: Mapping MutableQueue with Uncurried Function in ReScript\nDESCRIPTION: The 'mapU' function applies an uncurried function to each element of the queue, creating a new queue with the results.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-queue.mdx#2025-04-18_snippet_14\n\nLANGUAGE: rescript\nCODE:\n```\nlet mapU: (t<'a>, (. 'a) => 'b) => t<'b>\n```\n\n----------------------------------------\n\nTITLE: Dictionary FromArray Example\nDESCRIPTION: Example showing dictionary creation from an array of pairs.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/dict.mdx#2025-04-18_snippet_20\n\nLANGUAGE: rescript\nCODE:\n```\nlet capitals2 = Js.Dict.fromArray([(\"Germany\", \"Berlin\"), (\"Burkina Faso\", \"Ouagadougou\")])\n```\n\n----------------------------------------\n\nTITLE: Implementing Absolute Value Functions in ReScript\nDESCRIPTION: Defines absolute value functions for both integer and float arguments, corresponding to JavaScript's Math.abs function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/math.mdx#2025-04-18_snippet_1\n\nLANGUAGE: ReScript\nCODE:\n```\nlet abs_int: int => int\nlet abs_float: float => float\n```\n\n----------------------------------------\n\nTITLE: Creating an Intersection of MutableSets in ReasonML\nDESCRIPTION: Function signature for creating a new MutableSet containing only elements present in both input sets.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_25\n\nLANGUAGE: reasonml\nCODE:\n```\nlet intersect: (t('value, 'id), t('value, 'id)) => t('value, 'id);\n```\n\n----------------------------------------\n\nTITLE: Converting Array to String with Separator\nDESCRIPTION: Joins all elements into a string with a specified separator.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_22\n\nLANGUAGE: rescript\nCODE:\n```\nlet joinWith: (string, t) => string\n```\n\n----------------------------------------\n\nTITLE: Filter Array Elements with Index\nDESCRIPTION: Creates a new array with all elements that pass the provided function test, with access to the element index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-64-array.mdx#2025-04-18_snippet_35\n\nLANGUAGE: reason\nCODE:\n```\nlet filteri: ((. elt, int) => bool, t) => t;\n```\n\n----------------------------------------\n\nTITLE: Convert Array to Locale String\nDESCRIPTION: Returns a localized string representation of the array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-64-array.mdx#2025-04-18_snippet_31\n\nLANGUAGE: reason\nCODE:\n```\nlet toLocaleString: t => string;\n```\n\n----------------------------------------\n\nTITLE: Checking if two sets are equal in ReScript with MutableSetInt\nDESCRIPTION: Returns a boolean indicating whether two sets contain exactly the same elements. The order of elements doesn't matter as sets maintain their own internal ordering.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_19\n\nLANGUAGE: rescript\nCODE:\n```\nlet eq: (t, t) => bool;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet s0 = Belt.MutableSet.Int.fromArray([|5,2,3|]);\nlet s1 = Belt.MutableSet.Int.fromArray([|3,2,5|]);\n\nBelt.MutableSet.Int.eq(s0, s1); /* true */\n```\n\n----------------------------------------\n\nTITLE: Setting Month with setUTCMonth in ReScript\nDESCRIPTION: Sets a Date's month according to UTC time. This function modifies the original Date object and returns the updated timestamp in milliseconds. Binds to JavaScript's Date.setUTCMonth method.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_61\n\nLANGUAGE: res\nCODE:\n```\nlet setUTCMonth: (t, float) => float\n```\n\nLANGUAGE: res\nCODE:\n```\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet futureTime = Js.Date.setUTCMonth(date1, 11.0)\ndate1 == Js.Date.fromString(\"1973-12-29T21:34:56.789Z00:00\")\nfutureTime == Js.Date.getTime(date1)\n```\n\n----------------------------------------\n\nTITLE: Filtering Set with Predicate in ReScript\nDESCRIPTION: Returns a new set containing only elements that satisfy the given predicate function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-string.mdx#2025-04-18_snippet_43\n\nLANGUAGE: reasonml\nCODE:\n```\nlet keep: (t, value => bool) => t;\n```\n\n----------------------------------------\n\nTITLE: Converting integers to floating-point numbers in ReScript\nDESCRIPTION: The toFloat function converts an integer value to a floating-point number. It provides a type-safe way to perform this common conversion.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/int.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\nlet toFloat: int => float;\n```\n\nLANGUAGE: reason\nCODE:\n```\nJs.log(Belt.Int.toFloat(1) === 1.0); /* true */\n```\n\n----------------------------------------\n\nTITLE: Merging Multiple Key-Value Pairs in ReScript MapInt Module\nDESCRIPTION: Function signature for merging multiple key-value pairs into the map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-int.mdx#2025-04-18_snippet_45\n\nLANGUAGE: rescript\nCODE:\n```\nlet mergeMany: (t<'v>, array<(key, 'v)>) => t<'v>\n```\n\n----------------------------------------\n\nTITLE: Extracting keys from a HashMap with integer keys in ReScript\nDESCRIPTION: Converts the hash map to an array containing only the keys.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-map-int.mdx#2025-04-18_snippet_18\n\nLANGUAGE: reason\nCODE:\n```\nlet keysToArray: t('a) => array(key);\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet hMap = Belt.HashMap.Int.make(~hintSize=10);\nBelt.HashMap.Int.set(hMap, 1, \"value1\");\nBelt.HashMap.Int.set(hMap, 2, \"value2\");\n\nBelt.HashMap.Int.keysToArray(hMap) == [|1, 2|];\n```\n\n----------------------------------------\n\nTITLE: Checking MapDict invariant in ReScript\nDESCRIPTION: Function to check the internal invariant of a MapDict.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_17\n\nLANGUAGE: ReScript\nCODE:\n```\nlet checkInvariantInternal: t<'a, 'b, 'c> => unit\n```\n\n----------------------------------------\n\nTITLE: Getting UTC Date from Date in ReScript\nDESCRIPTION: ReScript binding for JavaScript's Date.getUTCDate method. Returns the day of the month of the date, evaluated in UTC.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_29\n\nLANGUAGE: res\nCODE:\n```\nlet getUTCDate: t => float\n```\n\nLANGUAGE: res\nCODE:\n```\nJs.Date.getUTCDate(exampleDate) == 29.0\n```\n\n----------------------------------------\n\nTITLE: Dictionary Get Usage Example\nDESCRIPTION: Example demonstrating how to retrieve values using get function\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/dict.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reason\nCODE:\n```\nJs.Dict.get(ages, \"Vinh\") == Some(22);\\nJs.Dict.get(ages, \"Paul\") == None;\n```\n\n----------------------------------------\n\nTITLE: Getting bucket histogram of Belt.HashMap.String in ReScript\nDESCRIPTION: Returns an array representing the distribution of elements across buckets in the hash map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/hash-map-string.mdx#2025-04-18_snippet_18\n\nLANGUAGE: ReScript\nCODE:\n```\nlet getBucketHistogram: t<'a> => array<int>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet hMap = Belt.HashMap.String.make(~hintSize=10)\nBelt.HashMap.String.set(hMap, \"1\", \"1\")\n\nBelt.HashMap.String.getBucketHistogram(hMap)\n```\n\n----------------------------------------\n\nTITLE: Partitioning elements in ReScript with MutableSetInt\nDESCRIPTION: Splits the set into two sets based on the given predicate function. The first set contains elements that satisfy the predicate, the second contains those that don't.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_31\n\nLANGUAGE: rescript\nCODE:\n```\nlet partition: (t, value => bool) => (t, t);\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet isOdd = x => x mod 2 != 0;\n\nlet s0 = Belt.MutableSet.Int.fromArray([|1,2,3,4,5|]);\nlet (s1, s2) = s0->Belt.MutableSet.Int.partition(isOdd);\n\ns1->Belt.MutableSet.Int.toArray; /* [|1,3,5|] */\ns2->Belt.MutableSet.Int.toArray; /* [|2,4|] */\n```\n\n----------------------------------------\n\nTITLE: Defining cmp type in ReScript\nDESCRIPTION: Defines a type 'cmp' with two type parameters. It represents a comparison function signed with a type parameter to prevent mixing of different comparison functions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/id.mdx#2025-04-18_snippet_2\n\nLANGUAGE: ReScript\nCODE:\n```\ntype cmp('a, 'id);\n```\n\n----------------------------------------\n\nTITLE: Stringifying JSON with Indentation in ReScript\nDESCRIPTION: Function signature for converting a JSON value into a string representation with specified indentation spacing.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/json.mdx#2025-04-18_snippet_26\n\nLANGUAGE: reason\nCODE:\n```\nlet stringifyWithSpace: (t, int) => string;\n```\n\n----------------------------------------\n\nTITLE: Accessing Characters by Index in ReScript\nDESCRIPTION: The 'get' function retrieves a character at a specified index in a string. It takes a string and an integer index, returning the character at that position as a string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/string-2.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nlet get: (t, int) => t\n```\n\n----------------------------------------\n\nTITLE: Copying elements from specified index in Uint8ClampedArray\nDESCRIPTION: Copies a sequence of elements within the array, starting from a source index to a target index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_10\n\nLANGUAGE: res\nCODE:\n```\nlet copyWithinFrom: (~to_: int, ~from: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Setting a key-value pair in a HashMap with integer keys in ReScript\nDESCRIPTION: Adds a new key-value binding or updates an existing binding in the hash map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-map-int.mdx#2025-04-18_snippet_5\n\nLANGUAGE: reason\nCODE:\n```\nlet set: (t('a), key, 'a) => unit;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet hMap = Belt.HashMap.Int.fromArray([|(2, \"2\")|]);\n\nBelt.HashMap.Int.set(hMap, 1, \"1\");\n\nBelt.HashMap.Int.valuesToArray(hMap) == [|\"1\", \"2\"|];\n```\n\n----------------------------------------\n\nTITLE: Configuring ReScript JSON for React\nDESCRIPTION: JSON configuration for rescript.json to enable JSX version 4 and include @rescript/react as a dependency.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/installation.mdx#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsx\": { \"version\": 4 },\n  \"bs-dependencies\": [\"@rescript/react\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Testing if any element satisfies a predicate with uncurried function in ReScript\nDESCRIPTION: Checks if at least one element in the set satisfies the given uncurried predicate function. Used for optimized performance in certain scenarios.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-int.mdx#2025-04-18_snippet_23\n\nLANGUAGE: reason\nCODE:\n```\nlet someU: (t, [@bs] (value => bool)) => bool;\n```\n\n----------------------------------------\n\nTITLE: Filtering MapDict (uncurried)\nDESCRIPTION: Function signature for filtering key-value pairs in a map using an uncurried predicate function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_47\n\nLANGUAGE: reason\nCODE:\n```\nlet keepU: (t('k, 'a, 'id), [@bs] (('k, 'a) => bool)) => t('k, 'a, 'id);\n```\n\n----------------------------------------\n\nTITLE: Defining Exception Type in ReScript\nDESCRIPTION: Core type definition for JavaScript exception handling.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/exn.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype t\n```\n\n----------------------------------------\n\nTITLE: Using Unboxed Variants for Nullable Values\nDESCRIPTION: Example of using unboxed variants to handle nullable values in ReScript v11, enabling direct pattern matching without explicit conversion to option types.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2023-04-17-improving-interop.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\n// The type definition below is inlined here to examplify, but this definition will live in [Core](https://github.com/rescript-lang/rescript-core) and be easily accessible\nmodule Null = {\n  @unboxed type t<'a> = Present('a) | @as(null) Null\n}\n\ntype userAge = {ageNum: Null.t<int>}\n\ntype rec user = {\n  name: string,\n  age: Null.t<userAge>,\n  bestFriend: Null.t<user>,\n}\n\nlet getBestFriendsAge = user =>\n  switch user.bestFriend {\n  | Present({age: Present({ageNum: Present(ageNum)})}) => Some(ageNum)\n  | _ => None\n  }\n```\n\n----------------------------------------\n\nTITLE: Map Traversal and Manipulation Functions\nDESCRIPTION: Function signatures for traversing and manipulating map contents including forEach, reduce, every, and some.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-int.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reason\nCODE:\n```\nlet forEachU: (t('v), [@bs] ((key, 'v) => unit)) => unit;\nlet forEach: (t('v), (key, 'v) => unit) => unit;\nlet reduceU: (t('v), 'v2, [@bs] (('v2, key, 'v) => 'v2)) => 'v2;\nlet reduce: (t('v), 'v2, ('v2, key, 'v) => 'v2) => 'v2;\nlet everyU: (t('v), [@bs] ((key, 'v) => bool)) => bool;\nlet every: (t('v), (key, 'v) => bool) => bool;\nlet someU: (t('v), [@bs] ((key, 'v) => bool)) => bool;\nlet some: (t('v), (key, 'v) => bool) => bool;\n```\n\n----------------------------------------\n\nTITLE: Iterating Over String Sets in ReScript\nDESCRIPTION: Shows how to iterate over string sets using forEach and reduce functions from Belt.Set.String.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/set-string.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet forEach: (t, value => unit) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet s0 = Belt.Set.String.fromArray([\"banana\", \"orange\", \"apple\"])\nlet acc = ref(list{})\ns0->Belt.Set.String.forEach(x => acc := Belt.List.add(acc.contents, x))\nacc /* [\"orange\", \"banana\", \"apple\"] */\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduce: (t, 'a, ('a, value) => 'a) => 'a\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet s0 = Belt.Set.String.fromArray([\"apple\", \"orange\"])\ns0->Belt.Set.String.reduce(0, (acc, element) => acc + String.length(element)) /* 11 */\n```\n\n----------------------------------------\n\nTITLE: Map Keep Function Signature\nDESCRIPTION: Filters map bindings based on a predicate function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\nlet keep: (t<'k, 'v, 'id>, ('k, 'v) => bool) => t<'k, 'v, 'id>\n```\n\n----------------------------------------\n\nTITLE: Mapping Values (Uncurried) in ReScript MapInt Module\nDESCRIPTION: Function signature for mapping values in the map using an uncurried function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-int.mdx#2025-04-18_snippet_51\n\nLANGUAGE: rescript\nCODE:\n```\nlet mapU: (t<'v>, (. 'v) => 'v2) => t<'v2>\n```\n\n----------------------------------------\n\nTITLE: Filtering Array Elements with Index using filteri in ReScript\nDESCRIPTION: Function signature for filteri that creates a new Uint8Array with all elements that pass the test implemented by the provided function which also receives the element index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_35\n\nLANGUAGE: rescript\nCODE:\n```\nlet filteri: ((. elt, int) => bool, t) => t\n```\n\n----------------------------------------\n\nTITLE: Finding Substring Index in ReScript\nDESCRIPTION: The 'indexOf' function finds the first occurrence of a substring within a string. It takes two strings and returns the index of the first occurrence of the second string within the first, or -1 if not found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/string-2.mdx#2025-04-18_snippet_17\n\nLANGUAGE: rescript\nCODE:\n```\nlet indexOf: (t, t) => int\n```\n\n----------------------------------------\n\nTITLE: String Concatenation in ReScript\nDESCRIPTION: Demonstrates string concatenation in ReScript using the ++ operator in Reason syntax or ^ in ML syntax. Shows how it compiles to JavaScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/primitive-types.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reason\nCODE:\n```\nlet greetings = \"Hello \" ++ \"world!\";\n```\n\nLANGUAGE: ml\nCODE:\n```\nlet greetings = \"Hello \" ^ \"world!\"\n```\n\nLANGUAGE: js\nCODE:\n```\nvar greetings = \"Hello world!\";\n```\n\n----------------------------------------\n\nTITLE: Creating an empty set in ReScript\nDESCRIPTION: Provides an empty set constant that can be used as a starting point for building new sets.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-int.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\nlet empty: t;\n```\n\n----------------------------------------\n\nTITLE: ReScript List Type Definition\nDESCRIPTION: Defines the generic list type t with type parameter 'a\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/list.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype t<'a> = list<'a>\n```\n\n----------------------------------------\n\nTITLE: Get Underlying ArrayBuffer from Float32Array\nDESCRIPTION: Returns the underlying ArrayBuffer object from a Float32Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-32-array.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet buffer: t => Js_typed_array2.array_buffer;\n```\n\n----------------------------------------\n\nTITLE: Clearing Storage in ReScript\nDESCRIPTION: External binding for clearing all items from storage.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/dom/storage.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nexternal clear: t => unit = \"clear\"\n```\n\n----------------------------------------\n\nTITLE: Finding Index of First Match\nDESCRIPTION: Returns the index of the first element that satisfies the provided testing function, or -1 if none found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_38\n\nLANGUAGE: rescript\nCODE:\n```\nlet findIndex: ((. elt) => bool, t) => int\n```\n\n----------------------------------------\n\nTITLE: Creating a new integer hash set in ReScript\nDESCRIPTION: Function signature for creating a new integer hash set with an optional hint for the initial capacity.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/hash-set-int.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nlet make: (~hintSize: int) => t\n```\n\n----------------------------------------\n\nTITLE: Using some Function in ReSript\nDESCRIPTION: The some function tests whether at least one element in the array passes the provided predicate function. This example checks if any element in an array is even.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array.mdx#2025-04-18_snippet_30\n\nLANGUAGE: rescript\nCODE:\n```\nlet isEven = x => mod(x, 2) == 0\n\nJs.Array.some(isEven, [3, 7, 5, 2, 9]) == true\nJs.Array.some(isEven, [3, 7, 5, 1, 9]) == false\n```\n\n----------------------------------------\n\nTITLE: Setting Hours, Minutes, and Seconds in ReScript\nDESCRIPTION: The setHoursMS function sets a Date object's hours, minutes, and seconds in the current time zone. It returns the timestamp of the updated Date and modifies the original Date object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_46\n\nLANGUAGE: res\nCODE:\n```\nlet setHoursMS: (t, ~hours: float, ~minutes: float, ~seconds: float, unit) => float\n```\n\nLANGUAGE: res\nCODE:\n```\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet futureTime = Js.Date.setHoursMS(date1, ~hours=22.0, ~minutes=46.0, ~seconds=37.0, ())\ndate1 == Js.Date.fromString(\"1973-11-29T22:46:37.321Z00:00\")\nfutureTime == Js.Date.getTime(date1)\n```\n\n----------------------------------------\n\nTITLE: Creating and Shuffling Arrays Using Function in ReScript\nDESCRIPTION: Creates an array using a function and then shuffles it. Equivalent to shuffle(makeBy(n, f)).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/array.mdx#2025-04-18_snippet_21\n\nLANGUAGE: reason\nCODE:\n```\nlet makeByAndShuffle: (int, int => 'a) => array('a);\n```\n\n----------------------------------------\n\nTITLE: Filling an Array Range with a Value in ReScript\nDESCRIPTION: The fill function modifies an array in place, storing a specific value in elements from a given offset for a specified length. Handles negative offsets and bounds checking.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/array.mdx#2025-04-18_snippet_31\n\nLANGUAGE: ReScript\nCODE:\n```\nlet fill: (array<'a>, ~offset: int, ~len: int, 'a) => unit\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet arr = Belt.Array.makeBy(5, (i) => i)\n\nBelt.Array.fill(arr, ~offset=2, ~len=2, 9)\n\narr == [0, 1, 9, 9, 4]\n\nBelt.Array.fill(arr, ~offset=7, ~len=2, 8)\n\narr == [0, 1, 9, 9, 4]\n```\n\n----------------------------------------\n\nTITLE: Removing Multiple Elements from Belt.Set in ReScript\nDESCRIPTION: Demonstrates how to remove multiple elements from a Belt.Set using the removeMany function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/set.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\nlet set = Belt.Set.fromArray([1, 2, 3, 4],~id=module(IntCmp))\n\nlet newSet = set->Belt.Set.removeMany([5, 4, 3, 2, 1])\nnewSet->Belt.Set.toArray /* [] */\n```\n\n----------------------------------------\n\nTITLE: Creating Uint8ClampedArray from array\nDESCRIPTION: Creates a new Uint8ClampedArray from an array of elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_51\n\nLANGUAGE: res\nCODE:\n```\nlet make: array<elt> => t\n```\n\n----------------------------------------\n\nTITLE: Reducing Lists with reduceReverse\nDESCRIPTION: Function that reduces a list from right to left, applying an accumulator function to each element. Takes a list, initial value, and reducer function as parameters.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/list.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\nlist{1, 2, 3, 4}->Belt.List.reduceReverse(0, (a, b) => a + b) /* 10 */\n\nlist{1, 2, 3, 4}->Belt.List.reduceReverse(10, (a, b) => a - b) /* 0 */\n\nlist{1, 2, 3, 4}->Belt.List.reduceReverse(list{}, Belt.List.add) // list{1, 2, 3, 4}\n```\n\n----------------------------------------\n\nTITLE: Getting Underlying ArrayBuffer\nDESCRIPTION: Returns the JavaScript ArrayBuffer backing this typed array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_type-s.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\nlet buffer: t => Js_typed_array.array_buffer\n```\n\n----------------------------------------\n\nTITLE: Integer to String with Radix Conversion in ReScript\nDESCRIPTION: Converts an integer to string using specified radix base (2-36). Useful for converting numbers to different number systems like binary or hexadecimal.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/int.mdx#2025-04-18_snippet_5\n\nLANGUAGE: reason\nCODE:\n```\nlet toStringWithRadix: (int, ~radix: int) => string;\n```\n\nLANGUAGE: reason\nCODE:\n```\n/* prints \"110\" */\nJs.log(Js.Int.toStringWithRadix(6, ~radix=2));\n\n/* prints \"deadbeef\" */\nJs.log(Js.Int.toStringWithRadix(3735928559, ~radix=16));\n\n/* prints \"2n9c\" */\nJs.log(Js.Int.toStringWithRadix(123456, ~radix=36));\n```\n\n----------------------------------------\n\nTITLE: Using splitByRe function in ReScript\nDESCRIPTION: Splits a string at every occurrence of a regular expression pattern and returns an array of the resulting substrings. Uses JavaScript's String.split method with a RegExp.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/string-2.mdx#2025-04-18_snippet_22\n\nLANGUAGE: rescript\nCODE:\n```\nlet splitByRe: (t, Js_re.t) => array<option<t>>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.String2.splitByRe(\"art; bed , cog ;dad\", %re(\"/\\s*[,;]\\s*/\")) == [\n    Some(\"art\"),\n    Some(\"bed\"),\n    Some(\"cog\"),\n    Some(\"dad\"),\n  ]\n```\n\n----------------------------------------\n\nTITLE: Testing Array Elements with every in ReScript\nDESCRIPTION: Function signature for every that tests whether all elements in the Uint8Array pass the test implemented by the provided function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_32\n\nLANGUAGE: rescript\nCODE:\n```\nlet every: ((. elt) => bool, t) => bool\n```\n\n----------------------------------------\n\nTITLE: Slicing Arrays to End in ReScript\nDESCRIPTION: Creates a new array with elements from the original array starting at the specified offset through the end. Supports negative offsets.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/array.mdx#2025-04-18_snippet_29\n\nLANGUAGE: reason\nCODE:\n```\nlet sliceToEnd: (array('a), int) => array('a);\n```\n\nLANGUAGE: reason\nCODE:\n```\nBelt.Array.sliceToEnd([|10, 11, 12, 13, 14, 15, 16|], 2) == [|12, 13, 14, 15, 16|];\n\nBelt.Array.sliceToEnd([|10, 11, 12, 13, 14, 15, 16|], -4) == [|13, 14, 15, 16|];\n```\n\n----------------------------------------\n\nTITLE: Splitting a MutableSet Based on Value in ReScript\nDESCRIPTION: Divides the set into two parts based on a value and returns a tuple with both sets and a boolean indicating if the value was present. The smaller set contains elements less than the value, and the larger set contains elements greater than it.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_19\n\nLANGUAGE: reason\nCODE:\n```\nlet split: (t, value) => ((t, t), bool)\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet s0 = Belt.MutableSet.Int.fromArray([1, 2, 3, 4, 5])\n\nlet ((smaller, larger), present) = s0->Belt.MutableSet.Int.split(3)\n\npresent /* true */\nsmaller->Belt.MutableSet.Int.toArray /* [1,2] */\nlarger->Belt.MutableSet.Int.toArray /* [4,5] */\n```\n\n----------------------------------------\n\nTITLE: ReScript Function Value Type Definition\nDESCRIPTION: Defines an opaque type for JavaScript function values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/types.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reason\nCODE:\n```\ntype function_val;\n```\n\n----------------------------------------\n\nTITLE: Checking String Start from Index in ReScript\nDESCRIPTION: The startsWithFrom function checks if a string starts with a specified substring from a given index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/string-2.mdx#2025-04-18_snippet_26\n\nLANGUAGE: rescript\nCODE:\n```\nlet startsWithFrom: (t, t, int) => bool\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.String2.startsWithFrom(\"BuckleScript\", \"kle\", 3) == true\nJs.String2.startsWithFrom(\"BuckleScript\", \"\", 3) == true\nJs.String2.startsWithFrom(\"JavaScript\", \"Buckle\", 2) == false\n```\n\n----------------------------------------\n\nTITLE: Trigonometric Functions in ReScript\nDESCRIPTION: Various trigonometric functions including sine, cosine, tangent, and their hyperbolic counterparts.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/math.mdx#2025-04-18_snippet_50\n\nLANGUAGE: rescript\nCODE:\n```\nlet sin: float => float;\nlet sinh: float => float;\nlet sqrt: float => float;\nlet tan: float => float;\nlet tanh: float => float;\n```\n\n----------------------------------------\n\nTITLE: Logging statistics about a HashMap with integer keys in ReScript\nDESCRIPTION: Outputs statistical information about the hash map for debugging purposes.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-map-int.mdx#2025-04-18_snippet_23\n\nLANGUAGE: reason\nCODE:\n```\nlet logStats: t('a) => unit;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet hMap = Belt.HashMap.Int.make(~hintSize=10);\nBelt.HashMap.Int.set(hMap, 1, \"1\");\n\nBelt.HashMap.Int.logStats(hMap);\n```\n\n----------------------------------------\n\nTITLE: List Right Fold Function Signature in ReScript\nDESCRIPTION: Defines the signature for the 'foldRight' function, which folds a list from right to left using an accumulator.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/list.mdx#2025-04-18_snippet_14\n\nLANGUAGE: rescript\nCODE:\n```\nlet foldRight: ((. 'a, 'b) => 'b, list<'a>, 'b) => 'b\n```\n\n----------------------------------------\n\nTITLE: Testing Any Value for Undefined\nDESCRIPTION: Function added in version 1.6.1 that returns true if the given value is undefined.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/undefined.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\nlet testAny: 'a => bool\n```\n\n----------------------------------------\n\nTITLE: Checking if a set contains a value in ReScript\nDESCRIPTION: Tests whether a given integer exists in the set, returning a boolean result.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-int.mdx#2025-04-18_snippet_6\n\nLANGUAGE: reason\nCODE:\n```\nlet has: (t, value) => bool;\n```\n\n----------------------------------------\n\nTITLE: Creating a Parametrized Type in ReScript\nDESCRIPTION: Shows how to define a parametrized type in ReScript, which allows for flexible type definitions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/newcomer-examples.mdx#2025-04-18_snippet_1\n\nLANGUAGE: ReScript\nCODE:\n```\ntype universityStudent = {gpa: float}\n\ntype response<'studentType> = {\n  status: int,\n  student: 'studentType,\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: FromCharCode Usage Examples\nDESCRIPTION: Examples demonstrating creation of strings from character codes.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string-2.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reason\nCODE:\n```\nJs.String2.fromCharCode(65) == \"A\";\nJs.String2.fromCharCode(0x3c8) == {js|ψ|js};\nJs.String2.fromCharCode(0xd55c) == {js|한|js};\nJs.String2.fromCharCode(-64568) == {js|ψ|js};\n```\n\n----------------------------------------\n\nTITLE: Map Empty Check Example - ReScript\nDESCRIPTION: Example demonstrating how to check if a map is empty using the isEmpty function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\nmodule IntCmp = Belt.Id.MakeComparable({\n  type t = int\n  let cmp = (a, b) => Pervasives.compare(a, b)\n})\n\nBelt.Map.isEmpty(Belt.Map.fromArray([(1, \"1\")], ~id=module(IntCmp))) == false\n```\n\n----------------------------------------\n\nTITLE: Defining MakeHashable module in ReScript\nDESCRIPTION: Defines a module functor that creates a Hashable module from a given module with a type t and curried hash and equality functions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/id.mdx#2025-04-18_snippet_12\n\nLANGUAGE: ReScript\nCODE:\n```\nmodule MakeHashable: (M: {\n  type t\n  let hash: t => int\n  let eq: (t, t) => bool\n}) => Hashable with type t = M.t\n```\n\n----------------------------------------\n\nTITLE: Finding the minimum value in a string set in ReScript\nDESCRIPTION: Returns the minimum value of the set, or None if the set is empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set-string.mdx#2025-04-18_snippet_32\n\nLANGUAGE: rescript\nCODE:\n```\nlet minimum: t => option<value>\n```\n\n----------------------------------------\n\nTITLE: Extending exn type with Error variant in ReScript\nDESCRIPTION: Extends the built-in 'exn' type with a private Error variant that wraps the 't' type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/exn.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\ntype exn +=\n  private\n  | Error(t)\n```\n\n----------------------------------------\n\nTITLE: Get Value with Undefined from ReScript Belt.Set\nDESCRIPTION: Returns the reference of a value from the collection, returns undefined when element does not exist.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set.mdx#2025-04-18_snippet_28\n\nLANGUAGE: res\nCODE:\n```\nlet getUndefined: (t<'value, 'id>, 'value) => Js.undefined<'value>\n```\n\n----------------------------------------\n\nTITLE: Splitting Belt.Set.String Based on Value in ReScript\nDESCRIPTION: The split function returns a triple ((l, r), present), where l is the set of elements strictly less than the given value, r is the set of elements strictly greater than the value, and present indicates if the set contains an element equal to the value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-string.mdx#2025-04-18_snippet_63\n\nLANGUAGE: rescript\nCODE:\n```\nlet split: (t, value) => ((t, t), bool);\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet s0 = Belt.Set.String.fromArray([|\"apple\", \"banana\", \"orange\"|]);\n\nlet ((smaller, larger), present) = s0->Belt.Set.String.split(\"banana\");\n\npresent; /* true */\nsmaller->Belt.Set.String.toArray; /* [|\"apple\"|] */\nlarger->Belt.Set.String.toArray; /* [|\"orange\"|] */\n```\n\n----------------------------------------\n\nTITLE: Removing a key-value pair from Belt.HashMap.String in ReScript\nDESCRIPTION: Removes a key and its associated value from the hash map using the remove function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/hash-map-string.mdx#2025-04-18_snippet_8\n\nLANGUAGE: ReScript\nCODE:\n```\nlet remove: (t<'a>, key) => unit\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet hMap = Belt.HashMap.String.make(~hintSize=10)\nBelt.HashMap.String.set(hMap, \"1\", \"value1\")\nBelt.HashMap.String.remove(hMap, \"1\")\nBelt.HashMap.String.has(hMap, \"1\") == false\n```\n\n----------------------------------------\n\nTITLE: Defining eq type in ReScript\nDESCRIPTION: Defines an equality comparison type with generic parameters for the value type and an identifier. The runtime representation is an equality function, but it's signed with a type parameter to prevent mixing of different comparison functions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/id.mdx#2025-04-18_snippet_1\n\nLANGUAGE: ReScript\nCODE:\n```\ntype eq<'a, 'id>\n```\n\n----------------------------------------\n\nTITLE: Test if Any Array Element Passes\nDESCRIPTION: Tests whether at least one element in the array passes the provided function test.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-64-array.mdx#2025-04-18_snippet_48\n\nLANGUAGE: reason\nCODE:\n```\nlet some: ((. elt) => bool, t) => bool;\n```\n\n----------------------------------------\n\nTITLE: Defining Comparable module type in ReScript\nDESCRIPTION: Defines a module type for comparable data structures. It includes an identity type, a value type, and a comparison function that uses the Belt.Id.cmp type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/id.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ReScript\nCODE:\n```\nmodule type Comparable = {\n  type identity\n\n  type t\n\n  let cmp: Belt.Id.cmp<t, identity>\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Array to String Representation\nDESCRIPTION: Function signature to convert the array to a string representation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_30\n\nLANGUAGE: res\nCODE:\n```\nlet toString: t => string\n```\n\n----------------------------------------\n\nTITLE: Bind Function Implementation\nDESCRIPTION: Function for mapping contained values in nullable types with example usage\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/nullable.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet bind: (t<'a>, (. 'a) => 'b) => t<'b>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet maybeGreetWorld = (maybeGreeting: Js.null_undefined<string>) =>\n  Js.Nullable.bind(maybeGreeting, (. greeting) => greeting ++ \" world!\")\n```\n\n----------------------------------------\n\nTITLE: Using sinh function to calculate hyperbolic sine in ReScript\nDESCRIPTION: The sinh function returns the hyperbolic sine of its argument, which must be specified in radians. It takes a float as input and returns a float.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/math.mdx#2025-04-18_snippet_31\n\nLANGUAGE: res\nCODE:\n```\nlet sinh: float => float\n```\n\n----------------------------------------\n\nTITLE: Vector Right Fold Operation\nDESCRIPTION: Performs a right fold operation on vector elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/vector.mdx#2025-04-18_snippet_12\n\nLANGUAGE: res\nCODE:\n```\nlet foldRight: ((. 'b, 'a) => 'a, t<'b>, 'a) => 'a\n```\n\n----------------------------------------\n\nTITLE: Using log function to calculate natural logarithm in ReScript\nDESCRIPTION: The log function returns the natural logarithm of its argument, the number x such that e^x equals the argument. It takes a float as input and returns a float, returning NaN for negative arguments.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/math.mdx#2025-04-18_snippet_10\n\nLANGUAGE: res\nCODE:\n```\nlet log: float => float\n```\n\nLANGUAGE: res\nCODE:\n```\nJs.Math.log(Js.Math._E) == 1.0\nJs.Math.log(100.0) == 4.605170185988092\n```\n\n----------------------------------------\n\nTITLE: Creating map from array in ReScript\nDESCRIPTION: Function signature for creating a mutable map from an array of key-value pairs.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_21\n\nLANGUAGE: ReScript\nCODE:\n```\nlet fromArray: array<(key, 'a)> => t<'a>\n```\n\n----------------------------------------\n\nTITLE: Checking if a Set is Empty in ReasonML\nDESCRIPTION: Demonstrates how to check if a set contains no elements using the isEmpty function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set.mdx#2025-04-18_snippet_7\n\nLANGUAGE: reasonml\nCODE:\n```\nlet isEmpty: t('a, 'b) => bool;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet empty = Belt.Set.fromArray([||], ~id=(module IntCmp));\nlet notEmpty = Belt.Set.fromArray([|1|],~id=(module IntCmp));\n\nBelt.Set.isEmpty(empty); /* true */\nBelt.Set.isEmpty(notEmpty); /* false */\n```\n\n----------------------------------------\n\nTITLE: Catch-All Pattern Matching in ReScript\nDESCRIPTION: Shows how to use _ as a catch-all condition in pattern matching.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\nswitch myStatus {\n| Vacations(_) => Js.log(\"Have fun!\")\n| _ => Js.log(\"Ok.\")\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nif (typeof myStatus === \"number\" || myStatus.TAG) {\n  console.log(\"Ok.\");\n} else {\n  console.log(\"Have fun!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Element by Index in ReScript\nDESCRIPTION: The get function returns the element at a specific index in the list wrapped in an option, or None if the index is out of bounds.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/list.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\nlet get: (t<'a>, int) => option<'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet abc = list{\"A\", \"B\", \"C\"}\n\nabc->Belt.List.get(1) // Some(\"B\")\n\nabc->Belt.List.get(4) // None\n```\n\n----------------------------------------\n\nTITLE: Checking All Elements in Belt.Set in ReScript\nDESCRIPTION: Demonstrates how to check if all elements in a Belt.Set satisfy a predicate using the every function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set.mdx#2025-04-18_snippet_16\n\nLANGUAGE: rescript\nCODE:\n```\nlet isEven = x => mod(x, 2) == 0\n\nlet s0 = Belt.Set.fromArray([2,4,6,8], ~id=module(IntCmp))\ns0->Belt.Set.every(isEven) /* true */\n```\n\n----------------------------------------\n\nTITLE: Checking if a set is a subset in ReScript\nDESCRIPTION: Tests whether the second set is a subset of the first set, returning a boolean result.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-int.mdx#2025-04-18_snippet_14\n\nLANGUAGE: reason\nCODE:\n```\nlet subset: (t, t) => bool;\n```\n\n----------------------------------------\n\nTITLE: Comparing String Operations in ReScript and JavaScript\nDESCRIPTION: Demonstrates string literals and concatenation in ReScript and JavaScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/overview.mdx#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"Hello world!\"\n```\n\nLANGUAGE: ReScript\nCODE:\n```\n\"Hello world!\"\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"hello \" + \"world\"\n```\n\nLANGUAGE: ReScript\nCODE:\n```\n\"hello \" ++ \"world\"\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n`hello ${message}`\n```\n\nLANGUAGE: ReScript\nCODE:\n```\n`hello ${message}`\n```\n\n----------------------------------------\n\nTITLE: Creating Union of Two Sets in ReScript\nDESCRIPTION: Returns a new set containing all elements from both input sets, combining two string sets.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-string.mdx#2025-04-18_snippet_19\n\nLANGUAGE: reasonml\nCODE:\n```\nlet union: (t, t) => t;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Object Type Inference in ReScript\nDESCRIPTION: Illustrates how ReScript's type inference for objects can lead to potential type mismatches if not carefully managed.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/object.mdx#2025-04-18_snippet_2\n\nLANGUAGE: ReScript\nCODE:\n```\ntype person = {\n  \"age\": int\n};\n\nlet me = {\n  \"age\": \"hello!\" // age is a string. No error.\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar me = {\n  \"age\": \"hello!\"\n};\n```\n\n----------------------------------------\n\nTITLE: Split Set Around Element\nDESCRIPTION: Splits the set into two sets based on a specific value, returning smaller and larger sets along with presence indicator.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set-dict.mdx#2025-04-18_snippet_9\n\nLANGUAGE: res\nCODE:\n```\nlet split: (t<'value, 'id>, 'value, ~cmp: cmp<'value, 'id>) => ((t<'value, 'id>, t<'value, 'id>), bool)\n```\n\n----------------------------------------\n\nTITLE: GetExn Function Signature in ReScript\nDESCRIPTION: Function signature for getting the value from a nullable type with exception handling.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/null.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet getExn: t<'a> => 'a\n```\n\n----------------------------------------\n\nTITLE: Initializing Dictionary Example\nDESCRIPTION: Example showing how to create a dictionary with age data using fromList\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/dict.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\nlet ages = Js.Dict.fromList(\\n  [(\"Maria\", 30), (\"Vinh\", 22), (\"Fred\", 49)]\\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Map Operations\nDESCRIPTION: Essential operations for creating and manipulating maps including initialization, clearing, and checking emptiness.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-map-int.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\nlet make: unit => t<'a>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet clear: t<'a> => unit\n```\n\nLANGUAGE: res\nCODE:\n```\nlet isEmpty: t<'a> => bool\n```\n\nLANGUAGE: res\nCODE:\n```\nlet has: (t<'a>, key) => bool\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching with BigInt in ReScript\nDESCRIPTION: Demonstrates how to use pattern matching with BigInt values in ReScript, allowing different code paths based on specific BigInt values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/primitive-types.mdx#2025-04-18_snippet_8\n\nLANGUAGE: res\nCODE:\n```\nlet bigintValue = 1n\n\nswitch bigintValue {\n| 1n => Console.log(\"Small bigint\")\n| 100n => Console.log(\"Larger bigint\")\n| _ => Console.log(\"Other bigint\")\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nif (1n !== 1n) {\n  if (1n !== 100n) {\n    console.log(\"Other bigint\");\n  } else {\n    console.log(\"Larger bigint\");\n  }\n} else {\n  console.log(\"Small bigint\");\n}\n\nvar bigintValue = 1n;\n```\n\n----------------------------------------\n\nTITLE: Handling Conditional Global Values with %external\nDESCRIPTION: This example shows how to safely handle global values that might not exist in all environments using the %external syntax. It allows checking for __DEV__ without causing reference errors.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/bind-to-global-js-values.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nswitch %external(__DEV__) {\n| Some(_) => Console.log(\"dev mode\")\n| None => Console.log(\"production mode\")\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar match = typeof __DEV__ === \"undefined\" ? undefined : __DEV__;\n\nif (match !== undefined) {\n  console.log(\"dev mode\");\n} else {\n  console.log(\"production mode\");\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Some Value in ReScript\nDESCRIPTION: Function to wrap a value in Some() constructor. Demonstrates basic option creation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/option.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reason\nCODE:\n```\nlet some: 'a => option('a);\n```\n\nLANGUAGE: reason\nCODE:\n```\nJs.Option.some(1066) == Some(1066);\n```\n\n----------------------------------------\n\nTITLE: Getting the size of Belt.HashMap.String in ReScript\nDESCRIPTION: Returns the number of key-value pairs in the hash map using the size function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/hash-map-string.mdx#2025-04-18_snippet_12\n\nLANGUAGE: ReScript\nCODE:\n```\nlet size: t<'a> => int\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet hMap = Belt.HashMap.String.make(~hintSize=10)\nBelt.HashMap.String.set(hMap, \"1\", \"value1\")\nBelt.HashMap.String.set(hMap, \"2\", \"value2\")\n\nBelt.HashMap.String.size(hMap) == 2\n```\n\n----------------------------------------\n\nTITLE: Using imul function for 32-bit integer multiplication in ReScript\nDESCRIPTION: The imul function performs 32-bit integer multiplication, useful for optimizing performance when working with numbers stored as 32-bit integers. It takes two integers as input and returns an integer.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/math.mdx#2025-04-18_snippet_9\n\nLANGUAGE: res\nCODE:\n```\nlet imul: (int, int) => int\n```\n\n----------------------------------------\n\nTITLE: Testing if all elements satisfy a predicate with uncurried function in ReScript\nDESCRIPTION: Checks if all elements in the set satisfy the given uncurried predicate function. Used for optimized performance in certain scenarios.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-int.mdx#2025-04-18_snippet_21\n\nLANGUAGE: reason\nCODE:\n```\nlet everyU: (t, [@bs] (value => bool)) => bool;\n```\n\n----------------------------------------\n\nTITLE: Uncurried reduce for MapDict\nDESCRIPTION: Function signature for reducing all key-value pairs into a single value using uncurried function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_14\n\nLANGUAGE: reason\nCODE:\n```\nlet reduceU: (t('k, 'a, 'id), 'b, [@bs] (('b, 'k, 'a) => 'b)) => 'b;\n```\n\n----------------------------------------\n\nTITLE: Getting Bucket Histogram of a HashMap in ReScript\nDESCRIPTION: Returns an array representing the bucket histogram of the hash map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-map.mdx#2025-04-18_snippet_18\n\nLANGUAGE: rescript\nCODE:\n```\nlet getBucketHistogram: t('a, 'b, 'c) => array(int);\n```\n\nLANGUAGE: rescript\nCODE:\n```\nmodule IntHash =\n  Belt.Id.MakeHashable({\n    type t = int;\n    let hash = a => a;\n    let eq = (a, b) => a == b;\n  });\nlet hMap = Belt.HashMap.make(~hintSize=10, ~id=(module IntHash));\nBelt.HashMap.set(hMap, 1, \"1\");\n\nBelt.HashMap.getBucketHistogram(hMap);\n```\n\n----------------------------------------\n\nTITLE: Finding the minimum key in MapDict (undefined version)\nDESCRIPTION: Function signature for finding the smallest key in a map, returning an undefined value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_27\n\nLANGUAGE: reason\nCODE:\n```\nlet minKeyUndefined: t('k, 'a, 'b) => Js.undefined('k);\n```\n\n----------------------------------------\n\nTITLE: Using maxMany_float function to find maximum in array of floats in ReScript\nDESCRIPTION: The maxMany_float function returns the maximum of the floating point values in the given array. It takes an array of floats as input and returns a float.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/math.mdx#2025-04-18_snippet_17\n\nLANGUAGE: res\nCODE:\n```\nlet maxMany_float: array<float> => float\n```\n\n----------------------------------------\n\nTITLE: Find Element Index\nDESCRIPTION: Returns the first index at which a given element can be found in the typed array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_type-s.mdx#2025-04-18_snippet_19\n\nLANGUAGE: res\nCODE:\n```\nlet indexOf: (elt, t) => int\n```\n\n----------------------------------------\n\nTITLE: Testing for Undefined Values in ReScript\nDESCRIPTION: Function signature for checking if a value is undefined. Returns true if the given value is empty (undefined), false otherwise.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/undefined.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nlet test: t<'a> => bool\n```\n\n----------------------------------------\n\nTITLE: Examples of Unsafe Ceiling Function in ReScript\nDESCRIPTION: Examples demonstrating the use of unsafe_ceil_int with different numeric values, including one that exceeds the int range.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/math.mdx#2025-04-18_snippet_20\n\nLANGUAGE: reasonml\nCODE:\n```\nJs.Math.unsafe_ceil_int(3.1) == 4;\nJs.Math.unsafe_ceil_int(3.0) == 3;\nJs.Math.unsafe_ceil_int(-3.1) == -3;\nJs.Math.unsafe_ceil_int(1.0e15); // result is outside range of int datatype\n```\n\n----------------------------------------\n\nTITLE: Declaring getDay Function for Date in ReScript\nDESCRIPTION: Declares the getDay function, which returns the day of the week (0-6) for a given Date object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_18\n\nLANGUAGE: rescript\nCODE:\n```\nlet getDay: t => float\n```\n\n----------------------------------------\n\nTITLE: Remove Storage Item - ReScript\nDESCRIPTION: External binding to remove an item from storage by key.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/dom/storage2.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nexternal removeItem: (t, string) => unit = \"removeItem\"\n```\n\n----------------------------------------\n\nTITLE: Example of Adding Elements to String Set in ReScript\nDESCRIPTION: Demonstrates how to add string elements to a set and shows that adding the same element twice has no effect.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-string.mdx#2025-04-18_snippet_12\n\nLANGUAGE: reasonml\nCODE:\n```\nlet s0 = Belt.Set.String.empty;\nlet s1 = s0->Belt.Set.String.add(\"apple\");\nlet s2 = s1->Belt.Set.String.add(\"banana\");\nlet s3 = s2->Belt.Set.String.add(\"banana\");\ns0->Belt.Set.String.toArray; /* [||] */\ns1->Belt.Set.String.toArray; /* [|\"apple\"|] */\ns2->Belt.Set.String.toArray; /* [|\"apple\", \"banana\"|] */\ns3->Belt.Set.String.toArray; /* [|\"apple\", \"banana\"|] */\ns2 == s3; /* true */\n```\n\n----------------------------------------\n\nTITLE: Character Type in ReScript\nDESCRIPTION: Demonstrates character (char) type usage in ReScript, which represents single-letter strings.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/primitive-types.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet firstLetterOfAlphabet = 'a'\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar firstLetterOfAlphabet = /* \"a\" */97;\n```\n\n----------------------------------------\n\nTITLE: Filter Array Elements\nDESCRIPTION: Creates a new array with all elements that pass the provided function test.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-64-array.mdx#2025-04-18_snippet_34\n\nLANGUAGE: reason\nCODE:\n```\nlet filter: ((. elt) => bool, t) => t;\n```\n\n----------------------------------------\n\nTITLE: Filtering Vector In-Place in ReScript\nDESCRIPTION: Filters a vector in-place using a predicate function. Takes a predicate and a vector as arguments.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/vector.mdx#2025-04-18_snippet_1\n\nLANGUAGE: ReScript\nCODE:\n```\nlet filterInPlace: ((. 'a) => bool, t('a)) => unit;\n```\n\n----------------------------------------\n\nTITLE: Setting Milliseconds in ReScript\nDESCRIPTION: Sets a Date's milliseconds according to current time zone. Returns milliseconds since epoch for the updated Date. Modifies the original Date.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_46\n\nLANGUAGE: rescript\nCODE:\n```\nlet setMilliseconds: (t, float) => float\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet futureTime = Js.Date.setMilliseconds(date1, 494.0)\ndate1 == Js.Date.fromString(\"1973-11-29T21:30:54.494Z00:00\")\nfutureTime == Js.Date.getTime(date1)\n```\n\n----------------------------------------\n\nTITLE: Accessing and Setting Int16Array Elements in ReScript\nDESCRIPTION: Provides unsafe_get and unsafe_set functions for accessing and modifying Int16Array elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_int-16-array.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet unsafe_get: (t, int) => elt;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet unsafe_set: (t, int, elt) => unit;\n```\n\n----------------------------------------\n\nTITLE: Implementing Trigonometric Functions in ReScript\nDESCRIPTION: Defines various trigonometric functions such as acos, acosh, asin, asinh, atan, atanh, and atan2, corresponding to their JavaScript Math counterparts.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/math.mdx#2025-04-18_snippet_2\n\nLANGUAGE: ReScript\nCODE:\n```\nlet acos: float => float\nlet acosh: float => float\nlet asin: float => float\nlet asinh: float => float\nlet atan: float => float\nlet atanh: float => float\nlet atan2: (~y: float, ~x: float, unit) => float\n```\n\n----------------------------------------\n\nTITLE: Higher-Order Array Methods for Int16Array (Test Predicates)\nDESCRIPTION: Methods that test if array elements satisfy certain conditions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-16-array.mdx#2025-04-18_snippet_10\n\nLANGUAGE: res\nCODE:\n```\nlet every: ((. elt) => bool, t) => bool\n```\n\nLANGUAGE: res\nCODE:\n```\nlet everyi: ((. elt, int) => bool, t) => bool\n```\n\nLANGUAGE: res\nCODE:\n```\nlet some: ((. elt) => bool, t) => bool\n```\n\nLANGUAGE: res\nCODE:\n```\nlet somei: ((. elt, int) => bool, t) => bool\n```\n\n----------------------------------------\n\nTITLE: Split ReScript Belt.Set\nDESCRIPTION: Splits the set into two parts based on a value and returns if the value was present.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set.mdx#2025-04-18_snippet_30\n\nLANGUAGE: res\nCODE:\n```\nlet split: (t<'value, 'id>, 'value) => ((t<'value, 'id>, t<'value, 'id>), bool)\n```\n\nLANGUAGE: res\nCODE:\n```\nlet s0 = Belt.Set.fromArray([1,2,3,4,5], ~id=module(IntCmp))\n\nlet ((smaller, larger), present) = s0->Belt.Set.split(3)\n\npresent /* true */\nsmaller->Belt.Set.toArray /* [1,2] */\nlarger->Belt.Set.toArray /* [4,5] */\n```\n\n----------------------------------------\n\nTITLE: Reducing a string set with an uncurried function in ReScript\nDESCRIPTION: Applies an uncurried reduction function to each element of the set in increasing order.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set-string.mdx#2025-04-18_snippet_19\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduceU: (t, 'a, (. 'a, value) => 'a) => 'a\n```\n\n----------------------------------------\n\nTITLE: Defining Array Types in ReScript\nDESCRIPTION: Type definitions for JavaScript arrays and array-like objects in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/array-2.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\ntype t<'a> = array<'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\ntype array_like<'a>\n```\n\n----------------------------------------\n\nTITLE: Comparing MutableSets in ReasonML\nDESCRIPTION: Function signature for total ordering between sets, comparing size first and then iterating over elements in order.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_31\n\nLANGUAGE: reasonml\nCODE:\n```\nlet cmp: (t('value, 'id), t('value, 'id)) => int;\n```\n\n----------------------------------------\n\nTITLE: Setting Full Year, Month, and Date in ReScript\nDESCRIPTION: ReScript binding for JavaScript's Date.setFullYear method with month and date parameters. Sets the year, month, and day and returns the time value. This function modifies the original Date object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_41\n\nLANGUAGE: res\nCODE:\n```\nlet setFullYearMD: (t, ~year: float, ~month: float, ~date: float, unit) => float\n```\n\nLANGUAGE: res\nCODE:\n```\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet future = Js.Date.setFullYearMD(date1, ~year=1974.0, ~month=0.0, ~date=7.0, ())\ndate1 == Js.Date.fromString(\"1974-01-07T21:30:54.321Z00:00\")\nfuture == Js.Date.getTime(date1)\n```\n\n----------------------------------------\n\nTITLE: Find Operations for Float64Array\nDESCRIPTION: Functions to find an element in a Float64Array that passes a predicate function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-64-array.mdx#2025-04-18_snippet_17\n\nLANGUAGE: rescript\nCODE:\n```\nlet find: ((. elt) => bool, t) => Js.undefined<elt>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet findi: ((. elt, int) => bool, t) => Js.undefined<elt>\n```\n\n----------------------------------------\n\nTITLE: String Anchor Method in ReScript\nDESCRIPTION: Binds to JavaScript's deprecated String.anchor() method that creates an HTML anchor tag with a name attribute. This method has been removed from web standards and should not be used.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/string.mdx#2025-04-18_snippet_23\n\nLANGUAGE: rescript\nCODE:\n```\nlet anchor: (t, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.String.anchor(\"page1\", \"Page One\") == \"<a name=\\\"page1\\\">Page One</a>\"\n```\n\n----------------------------------------\n\nTITLE: Embedding Top-Level Raw JavaScript in ReScript\nDESCRIPTION: Demonstrates how to use %%raw to embed top-level JavaScript code in a ReScript file. This allows pasting raw JavaScript directly into ReScript source files.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/embed-raw-javascript.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\n%%raw(`\n// look ma, regular JavaScript!\nvar message = \"hello\";\nfunction greet(m) {\n  console.log(m)\n}\n`)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// look ma, regular JavaScript!\nvar message = \"hello\";\nfunction greet(m) {\n  console.log(m)\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for element existence in Belt.MutableSet.Int in ReScript\nDESCRIPTION: Checks if an element exists in the set using the has function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_6\n\nLANGUAGE: res\nCODE:\n```\nlet has: (t, value) => bool\n```\n\nLANGUAGE: res\nCODE:\n```\nlet set = Belt.MutableSet.Int.fromArray([1, 4, 2, 5])\n\nset->Belt.MutableSet.Int.has(3) /* false */\nset->Belt.MutableSet.Int.has(1) /* true */\n```\n\n----------------------------------------\n\nTITLE: Appending Element to Vector in ReScript\nDESCRIPTION: Creates a new vector with an element appended to the end of an existing vector.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/vector.mdx#2025-04-18_snippet_18\n\nLANGUAGE: ReScript\nCODE:\n```\nlet append: ('a, t('a)) => t('a);\n```\n\n----------------------------------------\n\nTITLE: Float isNaN Function\nDESCRIPTION: Function to test if a given float value is NaN. Returns true if the value is NaN, false otherwise.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/float.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet isNaN: float => bool\n```\n\n----------------------------------------\n\nTITLE: Creating a MutableSet from Sorted Array in ReasonML\nDESCRIPTION: Function signature for creating a MutableSet from an already sorted array, which is more efficient than fromArray.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_6\n\nLANGUAGE: reasonml\nCODE:\n```\nlet fromSortedArrayUnsafe: (array('value), ~id: id('value, 'id)) => t('value, 'id);\n```\n\n----------------------------------------\n\nTITLE: Reordering Int32Array Elements\nDESCRIPTION: Functions to reverse or sort the elements of an Int32Array in place.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-32-array.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nlet reverseInPlace: t => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet sortInPlace: t => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet sortInPlaceWith: ((. elt, elt) => int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Array Search Operations\nDESCRIPTION: Functions for searching and comparing array elements\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_float-64-array.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet includes: (elt, t) => bool\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet indexOf: (elt, t) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet lastIndexOf: (elt, t) => int\n```\n\n----------------------------------------\n\nTITLE: Find Element in Float32Array\nDESCRIPTION: Returns the first element in the Float32Array that satisfies the provided test function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-32-array.mdx#2025-04-18_snippet_36\n\nLANGUAGE: rescript\nCODE:\n```\nlet find: ((. elt) => bool, t) => Js.undefined(elt);\n```\n\n----------------------------------------\n\nTITLE: Checking if an integer array is sorted\nDESCRIPTION: Returns true if the array is in non-strict increasing order (sorted). This function verifies sort order without modifying the array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/sort-array-int.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet isSorted: array(element) => bool;\n```\n\n----------------------------------------\n\nTITLE: Setting Month in ReScript\nDESCRIPTION: Sets a Date's month according to current time zone. Returns milliseconds since epoch for the updated Date. Modifies the original Date.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_50\n\nLANGUAGE: rescript\nCODE:\n```\nlet setMonth: (t, float) => float\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet futureTime = Js.Date.setMonth(date1, 11.0)\ndate1 == Js.Date.fromString(\"1973-12-29T21:34:56.789Z00:00\")\nfutureTime == Js.Date.getTime(date1)\n```\n\n----------------------------------------\n\nTITLE: Extracting keys from MapDict to an array\nDESCRIPTION: Function signature for extracting all keys from a map as an array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_24\n\nLANGUAGE: reason\nCODE:\n```\nlet keysToArray: t('k, 'a, 'id) => array('k);\n```\n\n----------------------------------------\n\nTITLE: Iterating over a string set with an uncurried function in ReScript\nDESCRIPTION: Applies an uncurried function to each element of the set in increasing order.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set-string.mdx#2025-04-18_snippet_17\n\nLANGUAGE: rescript\nCODE:\n```\nlet forEachU: (t, (. value) => unit) => unit\n```\n\n----------------------------------------\n\nTITLE: HashSet Function Signatures in ReScript\nDESCRIPTION: This collection of snippets provides the function signatures for various operations on the HashSet, including creation, modification, and querying.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-set.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet make: (~hintSize: int, ~id: id<'a, 'id>) => t<'a, 'id>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet clear: t<'a, 'id> => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet isEmpty: t<'a, 'b> => bool\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet add: (t<'a, 'id>, 'a) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet copy: t<'a, 'id> => t<'a, 'id>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet has: (t<'a, 'id>, 'a) => bool\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet remove: (t<'a, 'id>, 'a) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet forEachU: (t<'a, 'id>, (. 'a) => unit) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet forEach: (t<'a, 'id>, 'a => unit) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduceU: (t<'a, 'id>, 'c, (. 'c, 'a) => 'c) => 'c\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduce: (t<'a, 'id>, 'c, ('c, 'a) => 'c) => 'c\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet size: t<'a, 'id> => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet logStats: t<'a, 'b> => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet toArray: t<'a, 'id> => array<'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromArray: (array<'a>, ~id: id<'a, 'id>) => t<'a, 'id>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet mergeMany: (t<'a, 'id>, array<'a>) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet getBucketHistogram: t<'a, 'b> => array<int>\n```\n\n----------------------------------------\n\nTITLE: decodeURIComponent Function Signature in ReScript\nDESCRIPTION: Function signature for decodeURIComponent which decodes a URL-encoded string produced by encodeURIComponent.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/global.mdx#2025-04-18_snippet_17\n\nLANGUAGE: reasonml\nCODE:\n```\nlet decodeURIComponent: string => string;\n```\n\n----------------------------------------\n\nTITLE: Test Some Elements with Index\nDESCRIPTION: Tests whether at least one element in the typed array passes the test implemented by the provided function which also receives the element index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_type-s.mdx#2025-04-18_snippet_49\n\nLANGUAGE: res\nCODE:\n```\nlet somei: ((. elt, int) => bool, t) => bool\n```\n\n----------------------------------------\n\nTITLE: Equality Checking Example in MutableSets in ReasonML\nDESCRIPTION: Example showing how to check if two MutableSets are equal using the eq function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_33\n\nLANGUAGE: reasonml\nCODE:\n```\nmodule IntCmp =\n  Belt.Id.MakeComparable({\n    type t = int;\n    let cmp = Pervasives.compare;\n  });\n\nlet s0 = Belt.MutableSet.fromArray([|5,2,3|], ~id=(module IntCmp));\nlet s1 = Belt.MutableSet.fromArray([|3,2,5|], ~id=(module IntCmp));\n\nBelt.MutableSet.eq(s0, s1); /* true */\n```\n\n----------------------------------------\n\nTITLE: Installing ReScript with bun\nDESCRIPTION: Command to install ReScript and ReScript Core using bun package manager.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/installation.mdx#2025-04-18_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nbun install rescript @rescript/core\n```\n\n----------------------------------------\n\nTITLE: Defining Undefined Type Alias in ReScript\nDESCRIPTION: Defines a local alias for 'a Js.undefined.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/undefined.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reasonml\nCODE:\n```\ntype t('a) = Js.undefined('a);\n```\n\n----------------------------------------\n\nTITLE: Filtering and mapping Belt.HashMap.String in-place in ReScript\nDESCRIPTION: Modifies the hash map by applying a function to each key-value pair and keeping only non-None results using keepMapInPlace.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/hash-map-string.mdx#2025-04-18_snippet_11\n\nLANGUAGE: ReScript\nCODE:\n```\nlet keepMapInPlace: (t<'a>, (key, 'a) => option<'a>) => unit\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet hMap = Belt.HashMap.String.make(~hintSize=10)\nBelt.HashMap.String.set(hMap, \"1\", \"value1\")\nBelt.HashMap.String.set(hMap, \"2\", \"value2\")\n\nBelt.HashMap.String.keepMapInPlace(hMap, (key, value) => key == \"1\" ? None : Some(value))\n```\n\n----------------------------------------\n\nTITLE: Using fround function to round to nearest single precision float in ReScript\nDESCRIPTION: The fround function rounds a number to the nearest single precision float. It takes a float as input and returns a float. This is a binding to JavaScript's Math.fround method.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/math.mdx#2025-04-18_snippet_6\n\nLANGUAGE: res\nCODE:\n```\nlet fround: float => float\n```\n\nLANGUAGE: res\nCODE:\n```\nJs.Math.fround(5.5) == 5.5\nJs.Math.fround(5.05) == 5.050000190734863\n```\n\n----------------------------------------\n\nTITLE: Rendering ReScript Configuration Schema Explorer Component\nDESCRIPTION: Defines and exports the main page component function that renders the Docson schema explorer with a 'master' tag parameter. This component serves as the entry point for the configuration schema documentation page.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/build-configuration-schema.mdx#2025-04-18_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nexport default function BuildConfigurationSchemaPage() {\n  return <Docson tag=\"master\" />;\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Float to String\nDESCRIPTION: Function that formats a float as a string using default formatting rules.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/float.mdx#2025-04-18_snippet_24\n\nLANGUAGE: re\nCODE:\n```\nlet toString: float => string;\n```\n\n----------------------------------------\n\nTITLE: Uint8Array Length Property\nDESCRIPTION: Function to retrieve the length of a Uint8Array (number of elements).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nlet length: t => int\n```\n\n----------------------------------------\n\nTITLE: Example of Adding Multiple Elements to String Set in ReScript\nDESCRIPTION: Shows how to add multiple string elements to a set at once using mergeMany.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-string.mdx#2025-04-18_snippet_14\n\nLANGUAGE: reasonml\nCODE:\n```\nlet set = Belt.Set.String.empty;\n\nlet newSet =\n  set->Belt.Set.String.mergeMany([|\"apple\", \"banana\", \"orange\", \"strawberry\"|]);\n\nnewSet->Belt.Set.String.toArray; /* [|\"apple\", \"banana\", \"orange\", \"strawberry\"|] */\n```\n\n----------------------------------------\n\nTITLE: Reducing UInt32Array from right with index\nDESCRIPTION: Defines a function that applies a function against an accumulator and each element with its index from right to left to reduce it to a single value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_47\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduceRighti: ((. 'b, elt, int) => 'b, 'b, t) => 'b\n```\n\n----------------------------------------\n\nTITLE: Converting Belt.MutableSet to Array in ReScript\nDESCRIPTION: The toArray function returns an array of ordered set elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_10\n\nLANGUAGE: ReScript\nCODE:\n```\nlet toArray: t<'value, 'id> => array<'value>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nmodule IntCmp = Belt.Id.MakeComparable({\n  type t = int\n  let cmp = Pervasives.compare\n})\n\nlet s0 = Belt.MutableSet.fromArray([3, 2, 1, 5], ~id=module(IntCmp))\n\ns0->Belt.MutableSet.toArray /* [1,2,3,5] */\n```\n\n----------------------------------------\n\nTITLE: HashSet Curried Reduce\nDESCRIPTION: Reduces the HashSet elements using a curried reducer function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-set-string.mdx#2025-04-18_snippet_12\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduce: (t, 'c, ('c, key) => 'c) => 'c\n```\n\n----------------------------------------\n\nTITLE: Polymorphic Variants for Numbers Example\nDESCRIPTION: Demonstrates how polymorphic variants compile to JavaScript numbers and strings, including pattern matching functionality\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2021-05-07-release-9-1.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet secret = #42\n\n// optional type annotation, for documentation\ntype t = [#1 | #3 | #5 ]\n\n// enjoy the pattern matching\nlet test = (arg: t) => {\n  switch arg {\n  | #1 | #3 => \"hello\"\n  | #5 => \"world\"\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar secret = 42;\n\nfunction test(arg) {\n  if (arg === 5) {\n    return \"world\";\n  } else {\n    return \"hello\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping and Reversing List in ReScript\nDESCRIPTION: The mapReverse function applies a function to each element and returns the resulting list in reverse order.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/list.mdx#2025-04-18_snippet_31\n\nLANGUAGE: rescript\nCODE:\n```\nlet mapReverse: (t<'a>, 'a => 'b) => t<'b>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlist{3, 4, 5}->Belt.List.mapReverse(x => x * x) /* list{25, 16, 9} */\n```\n\n----------------------------------------\n\nTITLE: Dictionary Key Type Definition\nDESCRIPTION: Type definition specifying that dictionary keys must be strings.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/dict.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\ntype key = string\n```\n\n----------------------------------------\n\nTITLE: HashSet Empty Check - ReScript\nDESCRIPTION: Checks if the HashSet contains no elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-set-int.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet isEmpty: t => bool\n```\n\n----------------------------------------\n\nTITLE: Converting map to array in ReScript\nDESCRIPTION: Converts the map to an array of key-value pairs.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_20\n\nLANGUAGE: reasonml\nCODE:\n```\nlet toArray: t('a) => array((key, 'a));\n```\n\n----------------------------------------\n\nTITLE: Pack ID and Data in ReScript Belt.Set\nDESCRIPTION: Advanced usage function that returns a packed collection from ID and data.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set.mdx#2025-04-18_snippet_33\n\nLANGUAGE: res\nCODE:\n```\nlet packIdData: (~id: id<'value, 'id>, ~data: Belt_SetDict.t<'value, 'id>) => t<'value, 'id>\n```\n\n----------------------------------------\n\nTITLE: Creating Uint8ClampedArray from buffer with offset\nDESCRIPTION: Creates a new Uint8ClampedArray view over the provided ArrayBuffer starting at the specified byte offset.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_53\n\nLANGUAGE: res\nCODE:\n```\nlet fromBufferOffset: (Js_typed_array.array_buffer, int) => t\n```\n\n----------------------------------------\n\nTITLE: Splitting String with Limit in ReScript\nDESCRIPTION: The splitAtMost function splits a string into an array of substrings based on a delimiter, with a specified limit on the number of splits.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/string-2.mdx#2025-04-18_snippet_22\n\nLANGUAGE: rescript\nCODE:\n```\nlet splitAtMost: (t, t, ~limit: int) => array<t>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.String2.splitAtMost(\"ant/bee/cat/dog/elk\", \"/\", ~limit=3) == [\"ant\", \"bee\", \"cat\"]\nJs.String2.splitAtMost(\"ant/bee/cat/dog/elk\", \"/\", ~limit=0) == []\nJs.String2.splitAtMost(\"ant/bee/cat/dog/elk\", \"/\", ~limit=9) == [\n    \"ant\",\n    \"bee\",\n    \"cat\",\n    \"dog\",\n    \"elk\",\n  ]\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for Uint16Array\nDESCRIPTION: Core type definitions for the Uint16Array implementation including element type, typed array type and main array type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype elt = int\ntype typed_array<'a> = Js_typed_array2.Uint16Array.typed_array<'a>\ntype t = typed_array<elt>\n```\n\n----------------------------------------\n\nTITLE: Reordering Labeled Arguments in ReScript Bindings\nDESCRIPTION: Demonstrates how labeled arguments can be reordered on the ReScript side while preserving the correct parameter order in the JavaScript output.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/bind-to-js-function.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\n@module(\"MyGame\")\nexternal draw: (~x: int, ~y: int, ~border: bool=?, unit) => unit = \"draw\"\n\ndraw(~x=10, ~y=20, ())\ndraw(~y=20, ~x=10, ())\n```\n\nLANGUAGE: js\nCODE:\n```\nvar MyGame = require(\"MyGame\");\n\nMyGame.draw(10, 20, undefined);\nMyGame.draw(10, 20, undefined);\n```\n\n----------------------------------------\n\nTITLE: List Head Access Examples\nDESCRIPTION: Examples showing how to access the first element of a list using head and headExn functions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/list.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nBelt.List.head(list{}) // None\nBelt.List.head(list{1, 2, 3}) // Some(1)\n```\n\nLANGUAGE: res\nCODE:\n```\nBelt.List.headExn(list{1, 2, 3}) // 1\n\nBelt.List.headExn(list{}) // Raises an Error\n```\n\n----------------------------------------\n\nTITLE: Transforming Float32Array in ReScript\nDESCRIPTION: Functions to transform Float32Array data, including map, reduce, and their variants.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rescript\nCODE:\n```\nlet map: ((. elt) => 'b, t) => typed_array('b);\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet mapi: ((. elt, int) => 'b, t) => typed_array('b);\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduce: ((. 'b, elt) => 'b, 'b, t) => 'b;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet reducei: ((. 'b, elt, int) => 'b, 'b, t) => 'b;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduceRight: ((. 'b, elt) => 'b, 'b, t) => 'b;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduceRighti: ((. 'b, elt, int) => 'b, 'b, t) => 'b;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet some: ((. elt) => bool, t) => bool;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet somei: ((. elt, int) => bool, t) => bool;\n```\n\n----------------------------------------\n\nTITLE: Clear Storage - ReScript\nDESCRIPTION: External binding to clear all items from storage.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/dom/storage2.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nexternal clear: t => unit = \"clear\"\n```\n\n----------------------------------------\n\nTITLE: Finding elements in MapDict (ReScript)\nDESCRIPTION: Functions for finding the first key-value pair that matches a predicate in a MapDict.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_5\n\nLANGUAGE: ReScript\nCODE:\n```\nlet findFirstByU: (t<'k, 'v, 'id>, (. 'k, 'v) => bool) => option<('k, 'v)>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet findFirstBy: (t<'k, 'v, 'id>, ('k, 'v) => bool) => option<('k, 'v)>\n```\n\n----------------------------------------\n\nTITLE: Creating a New MutableSet in ReasonML\nDESCRIPTION: Function signature for creating a new MutableSet instance by providing a comparator module.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reasonml\nCODE:\n```\nlet make: (~id: id('value, 'id)) => t('value, 'id);\n```\n\n----------------------------------------\n\nTITLE: Repeating Strings in ReScript\nDESCRIPTION: The repeat function returns a new string that consists of the given string repeated a specified number of times. It raises a RangeError if the repeat count is negative.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string-2.mdx#2025-04-18_snippet_9\n\nLANGUAGE: ReScript\nCODE:\n```\nlet repeat: (t, int) => t;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nJs.String2.repeat(\"ha\", 3) == \"hahaha\";\nJs.String2.repeat(\"empty\", 0) == \"\";\n```\n\n----------------------------------------\n\nTITLE: Combining bs.new with bs.module for Imported Class Instantiation\nDESCRIPTION: Demonstrates how to chain `bs.new` and `bs.module` annotations to import a JavaScript module that's a class and instantiate it.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/reason-compiler/latest/class.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reason\nCODE:\n```\ntype t;\n[@bs.new] [@bs.module] external book : unit => t = \"Book\";\nlet bookInstance = book();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar Book = require(\"Book\");\nvar bookInstance = new Book();\n```\n\n----------------------------------------\n\nTITLE: Reversing Array Elements In Place in ReScript\nDESCRIPTION: The reverseInPlace function reverses the order of elements in an array, modifying the original array rather than creating a new one.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/array.mdx#2025-04-18_snippet_11\n\nLANGUAGE: ReScript\nCODE:\n```\nlet reverseInPlace: array<'a> => unit\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet arr = [10, 11, 12, 13, 14]\n\nlet () = Belt.Array.reverseInPlace(arr)\n\narr == [14, 13, 12, 11, 10]\n```\n\n----------------------------------------\n\nTITLE: Checking if All Elements Satisfy Condition in ReScript\nDESCRIPTION: Tests whether all elements in the set satisfy the given predicate function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-string.mdx#2025-04-18_snippet_37\n\nLANGUAGE: reasonml\nCODE:\n```\nlet every: (t, value => bool) => bool;\n```\n\n----------------------------------------\n\nTITLE: Checking None Value in ReScript\nDESCRIPTION: Function signature for checking if an option value is None.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/option.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet isNone: option<'a> => bool\n```\n\n----------------------------------------\n\nTITLE: Creating a string set from an array in ReScript\nDESCRIPTION: Creates a new set from an array of string elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set-string.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromArray: array<value> => t\n```\n\n----------------------------------------\n\nTITLE: ReScript Raw JavaScript Import\nDESCRIPTION: Example of using the %raw directive to import non-JavaScript assets like CSS files in ReScript code.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/interop-with-js-build-systems.mdx#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n%raw(\"require('./myStyles.css')\")\n```\n\n----------------------------------------\n\nTITLE: Higher-Order Array Methods for Int16Array (Transformation)\nDESCRIPTION: Methods that transform array elements through callback functions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-16-array.mdx#2025-04-18_snippet_12\n\nLANGUAGE: res\nCODE:\n```\nlet forEach: ((. elt) => unit, t) => unit\n```\n\nLANGUAGE: res\nCODE:\n```\nlet forEachi: ((. elt, int) => unit, t) => unit\n```\n\nLANGUAGE: res\nCODE:\n```\nlet map: ((. elt) => 'b, t) => typed_array<'b>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet mapi: ((. elt, int) => 'b, t) => typed_array<'b>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet filter: ((. elt) => bool, t) => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet filteri: ((. elt, int) => bool, t) => t\n```\n\n----------------------------------------\n\nTITLE: Dictionary Keys Function Example\nDESCRIPTION: Function for retrieving all keys from a dictionary as an array\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/dict.mdx#2025-04-18_snippet_9\n\nLANGUAGE: reason\nCODE:\n```\nlet keys: t('a) => array(string);\n```\n\n----------------------------------------\n\nTITLE: Using link Method Example in ReScript\nDESCRIPTION: Demonstrates how to use the link method to create an HTML anchor element with a specified href attribute and text content.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/string-2.mdx#2025-04-18_snippet_37\n\nLANGUAGE: res\nCODE:\n```\nJs.String2.link(\"Go to page two\", \"page2.html\") == \"<a href=\\\"page2.html\\\">Go to page two</a>\"\n```\n\n----------------------------------------\n\nTITLE: Finding Last Element Index with lastIndexOf in ReScript\nDESCRIPTION: Function signature for lastIndexOf that returns the last index at which a given element can be found in a Uint8Array, or -1 if not found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_23\n\nLANGUAGE: rescript\nCODE:\n```\nlet lastIndexOf: (elt, t) => int\n```\n\n----------------------------------------\n\nTITLE: Converting Date to String in ReScript\nDESCRIPTION: Returns a string representing the date and time of day for the given Date in the current locale and time zone. This function provides a comprehensive string representation of the date.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_69\n\nLANGUAGE: ReScript\nCODE:\n```\nlet toString: t => string\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nJs.Date.toString(\n  exampleDate,\n) == \"Thu Nov 29 1973 22:30:54 GMT+0100 (Central European Standard Time)\"\n```\n\n----------------------------------------\n\nTITLE: Convert Array to Localized String\nDESCRIPTION: Returns a localized string representation of the typed array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_type-s.mdx#2025-04-18_snippet_31\n\nLANGUAGE: res\nCODE:\n```\nlet toLocaleString: t => string\n```\n\n----------------------------------------\n\nTITLE: Checking if MutableStack is Empty in ReScript\nDESCRIPTION: Function to determine if a stack has no elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-stack.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\nlet isEmpty: t('a) => bool;\n```\n\n----------------------------------------\n\nTITLE: Int-to-Float Coercion in ReScript\nDESCRIPTION: Shows how to coerce an integer value to a float using the :> operator, allowing integers to be used in float calculations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/primitive-types.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\nlet result = (1 :> float) +. 2.\n```\n\nLANGUAGE: js\nCODE:\n```\nvar result = 1 + 2;\n```\n\n----------------------------------------\n\nTITLE: Checking if MutableQueue is Empty in ReScript\nDESCRIPTION: The 'isEmpty' function returns a boolean indicating whether the given queue is empty or not.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-queue.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet isEmpty: t<'a> => bool\n```\n\n----------------------------------------\n\nTITLE: Finding Minimum Value in ReScript Belt.MutableSet\nDESCRIPTION: The 'minimum' and 'minUndefined' functions return the minimum value in a MutableSet. 'minimum' returns an option type, while 'minUndefined' returns undefined for empty sets.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_51\n\nLANGUAGE: reason\nCODE:\n```\nlet minimum: t('value, 'id) => option('value);\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet minUndefined: t('value, 'id) => Js.undefined('value);\n```\n\nLANGUAGE: reason\nCODE:\n```\nmodule IntCmp =\n  Belt.Id.MakeComparable({\n    type t = int;\n    let cmp = Pervasives.compare;\n  });\n\nlet s0 = Belt.MutableSet.make(~id=(module IntCmp));\nlet s1 = Belt.MutableSet.fromArray([|3,2,1,5|], ~id=(module IntCmp));\n\ns0->Belt.MutableSet.minimum; /* None */\ns1->Belt.MutableSet.minimum; /* Some(1) */\n\ns0->Belt.MutableSet.minUndefined; /* undefined */\ns1->Belt.MutableSet.minUndefined; /* 1 */\n```\n\n----------------------------------------\n\nTITLE: Using log1p function to calculate natural logarithm of (1 + x) in ReScript\nDESCRIPTION: The log1p function returns the natural logarithm of one plus the argument. It takes a float as input and returns a float, returning NaN for arguments less than -1.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/math.mdx#2025-04-18_snippet_11\n\nLANGUAGE: res\nCODE:\n```\nlet log1p: float => float\n```\n\nLANGUAGE: res\nCODE:\n```\nJs.Math.log1p(Js.Math._E -. 1.0) == 1.0\nJs.Math.log1p(99.0) == 4.605170185988092\n```\n\n----------------------------------------\n\nTITLE: Getting HashMap Size in ReScript\nDESCRIPTION: Returns the number of key-value pairs in the hash map using Belt.HashMap.String.size.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-map-string.mdx#2025-04-18_snippet_12\n\nLANGUAGE: rescript\nCODE:\n```\nlet size: t<'a> => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet hMap = Belt.HashMap.String.make(~hintSize=10)\nBelt.HashMap.String.set(hMap, \"1\", \"value1\")\nBelt.HashMap.String.set(hMap, \"2\", \"value2\")\n\nBelt.HashMap.String.size(hMap) == 2\n```\n\n----------------------------------------\n\nTITLE: Testing Any Element Example in MutableSet in ReasonML\nDESCRIPTION: Example showing how to check if at least one element in a MutableSet satisfies a condition using some.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_45\n\nLANGUAGE: reasonml\nCODE:\n```\nmodule IntCmp =\n  Belt.Id.MakeComparable({\n    type t = int;\n    let cmp = Pervasives.compare;\n  });\n\nlet isOdd = x => x mod 2 != 0;\n\nlet s0 = Belt.MutableSet.fromArray([|1,2,4,6,8|], ~id=(module IntCmp));\ns0->Belt.MutableSet.some(isOdd); /* true */\n```\n\n----------------------------------------\n\nTITLE: Accessing error message from JavaScript exception\nDESCRIPTION: Function that extracts the error message from a JavaScript exception, returning None if not available.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/exn.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet message: t => option(string);\n```\n\n----------------------------------------\n\nTITLE: Reducing UInt32Array from right\nDESCRIPTION: Defines a function that applies a function against an accumulator and each element in the array from right to left to reduce it to a single value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_46\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduceRight: ((. 'b, elt) => 'b, 'b, t) => 'b\n```\n\n----------------------------------------\n\nTITLE: Retrieving a value from Belt.HashMap.String in ReScript\nDESCRIPTION: Gets the value associated with a key using the get function, returning an option type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/hash-map-string.mdx#2025-04-18_snippet_6\n\nLANGUAGE: ReScript\nCODE:\n```\nlet get: (t<'a>, key) => option<'a>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet hMap = Belt.HashMap.String.make(~hintSize=10)\nBelt.HashMap.String.set(hMap, \"1\", \"value1\")\n\nBelt.HashMap.String.get(hMap, \"1\") == Some(\"value1\")\nBelt.HashMap.String.get(hMap, \"2\") == None\n```\n\n----------------------------------------\n\nTITLE: Defining MutableSet Types in ReScript\nDESCRIPTION: This code defines the core types used in the MutableSet module. It includes the main set type 't' and the identity type 'id' used for creating sets.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_1\n\nLANGUAGE: ReScript\nCODE:\n```\ntype t<'value, 'id>\n\ntype id<'value, 'id> = Belt_Id.comparable<'value, 'id>\n```\n\n----------------------------------------\n\nTITLE: Create Subarray from Float32Array\nDESCRIPTION: Returns a new Float32Array view of the same ArrayBuffer, viewing elements from start (inclusive) to end (exclusive).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-32-array.mdx#2025-04-18_snippet_28\n\nLANGUAGE: rescript\nCODE:\n```\nlet subarray: (~start: int, ~end_: int, t) => t;\n```\n\n----------------------------------------\n\nTITLE: Popping with Exception in MutableQueue in ReScript\nDESCRIPTION: The 'popExn' function removes and returns the first element in the queue, raising an exception if the queue is empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-queue.mdx#2025-04-18_snippet_11\n\nLANGUAGE: rescript\nCODE:\n```\nlet popExn: t<'a> => 'a\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Set in ReScript\nDESCRIPTION: Applies a function to each element of the set in increasing order, with side effects only.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-string.mdx#2025-04-18_snippet_31\n\nLANGUAGE: reasonml\nCODE:\n```\nlet forEach: (t, value => unit) => unit;\n```\n\n----------------------------------------\n\nTITLE: Finding the maximum element in ReScript with MutableSetInt\nDESCRIPTION: Returns the maximum value in the set wrapped in an option. Returns None if the set is empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_37\n\nLANGUAGE: rescript\nCODE:\n```\nlet maximum: t => option(value);\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet s0 = Belt.MutableSet.Int.make();\nlet s1 = Belt.MutableSet.Int.fromArray([|3,2,1,5|]);\n\ns0->Belt.MutableSet.Int.maximum; /* None */\ns1->Belt.MutableSet.Int.maximum; /* Some(5) */\n```\n\n----------------------------------------\n\nTITLE: Mapping Null Values in ReScript\nDESCRIPTION: Maps the contained value using the given function. If Js.null('a) contains a value, that value is unwrapped, mapped to a 'b using the given function, then wrapped back up and returned.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/null.mdx#2025-04-18_snippet_6\n\nLANGUAGE: reason\nCODE:\n```\nlet bind: (t('a), (. 'a) => 'b) => t('b);\n```\n\n----------------------------------------\n\nTITLE: Defining hashableU function in ReScript\nDESCRIPTION: Defines an uncurried function 'hashableU' that takes a hash function and an equality function, and returns a Hashable module with a unique identity.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/id.mdx#2025-04-18_snippet_12\n\nLANGUAGE: ReScript\nCODE:\n```\nlet hashableU: (~hash: [@bs] ('a => int), ~eq: [@bs] (('a, 'a) => bool)) => (module BeltId.Hashable with type t = 'a);\n```\n\n----------------------------------------\n\nTITLE: Array Modification Operations\nDESCRIPTION: Functions for modifying array contents including copying, filling and reversing operations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reasonml\nCODE:\n```\nlet copyWithin: (~to_: int, t) => t;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet fillInPlace: (elt, t) => t;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet reverseInPlace: t => t;\n```\n\n----------------------------------------\n\nTITLE: Defining hashable function in ReScript\nDESCRIPTION: Defines a curried function 'hashable' that takes a hash function and an equality function, and returns a Hashable module with a unique identity.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/id.mdx#2025-04-18_snippet_13\n\nLANGUAGE: ReScript\nCODE:\n```\nlet hashable: (~hash: 'a => int, ~eq: ('a, 'a) => bool) => (module BeltId.Hashable with type t = 'a);\n```\n\n----------------------------------------\n\nTITLE: Testing All Elements\nDESCRIPTION: Function signature to test if all elements pass a specified condition.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_32\n\nLANGUAGE: res\nCODE:\n```\nlet every: ((. elt) => bool, t) => bool\n```\n\n----------------------------------------\n\nTITLE: Removing and Returning First Element of MutableQueue in ReScript\nDESCRIPTION: Function to remove and return the first element in the queue, wrapped in an option type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-queue.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\nlet pop: t('a) => option('a);\n```\n\n----------------------------------------\n\nTITLE: Integer multiplication in ReScript\nDESCRIPTION: Performs multiplication of two integers using the * operator from Belt.Int. This is the same as the multiplication operation from Pervasives.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/int.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet (*): (int, int) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nopen Belt.Int\nJs.log(2 * 2 === 4) /* true */\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Belt.Set Elements in ReScript\nDESCRIPTION: Demonstrates how to iterate over elements of a Belt.Set using the forEach function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set.mdx#2025-04-18_snippet_14\n\nLANGUAGE: rescript\nCODE:\n```\nlet s0 = Belt.Set.fromArray([5,2,3,5,6], ~id=module(IntCmp))\nlet acc = ref(list{})\ns0->Belt.Set.forEach(x => {\n  acc := Belt.List.add(acc.contents, x)\n})\nacc /* [6,5,3,2] */\n```\n\n----------------------------------------\n\nTITLE: Example of toStringWithRadix with Binary Representation of a Decimal\nDESCRIPTION: Shows the binary representation of a decimal number, including fractional part.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/float.mdx#2025-04-18_snippet_28\n\nLANGUAGE: re\nCODE:\n```\n/* prints \"11.001000111101011100001010001111010111000010100011111\" */\nJs.log @@ Js.Float.toStringWithRadix(3.14, ~radix=2);\n```\n\n----------------------------------------\n\nTITLE: Map Split Function Signature\nDESCRIPTION: Splits a map into two parts based on a key, returning the value at the split point.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map.mdx#2025-04-18_snippet_12\n\nLANGUAGE: rescript\nCODE:\n```\nlet split: (t<'k, 'v, 'id>, 'k) => ((t<'k, 'v, 'id>, t<'k, 'v, 'id>), option<'v>)\n```\n\n----------------------------------------\n\nTITLE: Splitting ReScript Belt.MutableSet\nDESCRIPTION: The 'split' function divides a MutableSet into two sets based on a given element. It returns a tuple containing the smaller set, larger set, and a boolean indicating if the element was present in the original set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_54\n\nLANGUAGE: reason\nCODE:\n```\nlet split: (t('value, 'id), 'value) => ((t('value, 'id), t('value, 'id)), bool);\n```\n\nLANGUAGE: reason\nCODE:\n```\nmodule IntCmp =\n  Belt.Id.MakeComparable({\n    type t = int;\n    let cmp = Pervasives.compare;\n  });\n\nlet s0 = Belt.MutableSet.fromArray([|1,2,3,4,5|], ~id=(module IntCmp));\n\nlet ((smaller, larger), present) = s0->Belt.MutableSet.split(3);\n\npresent; /* true */\nsmaller->Belt.MutableSet.toArray; /* [|1,2|] */\nlarger->Belt.MutableSet.toArray; /* [|4,5|] */\n```\n\n----------------------------------------\n\nTITLE: Global Module Method Binding\nDESCRIPTION: Example of binding to methods within global modules like Math.random using @scope annotation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/bind-to-global-js-values.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\n@scope(\"Math\") @val external random: unit => float = \"random\"\nlet someNumber = random()\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar someNumber = Math.random();\n```\n\n----------------------------------------\n\nTITLE: Using someBy with Custom Step in ReScript\nDESCRIPTION: Shows how to use Belt.Range.someBy to check conditions on a range with a custom step. Two examples are presented: one with step 2 that returns false and another that returns true.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/range.mdx#2025-04-18_snippet_4\n\nLANGUAGE: ReScript\nCODE:\n```\nBelt.Range.someBy(1, 5, ~step=2, (i) => mod(i, 2) === 0) /* false */\n\nBelt.Range.someBy(0, 4, ~step=2, (i) => mod(i, 2) === 0) /* true */\n```\n\n----------------------------------------\n\nTITLE: Merging maps in MapString module (ReScript)\nDESCRIPTION: Function to merge two maps using a custom function to resolve conflicts for keys present in both maps.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-string.mdx#2025-04-18_snippet_44\n\nLANGUAGE: reason\nCODE:\n```\nlet merge: (t('v), t('v2), (key, option('v), option('v2)) => option('c)) => t('c);\n```\n\n----------------------------------------\n\nTITLE: Float to Fixed-Point String with Precision\nDESCRIPTION: Function signature for converting float to fixed-point notation string with specified precision.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/float.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet toFixedWithPrecision: (float, ~digits: int) => string\n```\n\n----------------------------------------\n\nTITLE: Computing Ceiling as Float in ReScript\nDESCRIPTION: Function that returns the smallest integral value (as a float) greater than or equal to the argument, not restricted to the int range.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/math.mdx#2025-04-18_snippet_25\n\nLANGUAGE: reasonml\nCODE:\n```\nlet ceil_float: float => float;\n```\n\n----------------------------------------\n\nTITLE: Example of Partitioning String Set in ReScript\nDESCRIPTION: Demonstrates how to partition a string set into two sets based on a condition.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-string.mdx#2025-04-18_snippet_47\n\nLANGUAGE: reasonml\nCODE:\n```\nlet hasFiveChars = x => String.length(x) == 5;\n\nlet s0 = Belt.Set.String.fromArray([|\"apple\", \"carrot\"|]);\nlet (s1, s2) = s0->Belt.Set.String.partition(hasFiveChars);\n\ns1->Belt.Set.String.toArray; /* [|\"apple\"|] */\ns2->Belt.Set.String.toArray; /* [|\"carrot\"|] */\n```\n\n----------------------------------------\n\nTITLE: Ternary Expression in ReScript\nDESCRIPTION: Using the ternary operator in ReScript as an alternative to if-else, though if-else is preferred when possible.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/control-flow.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\nlet message = isMorning ? \"Good morning!\" : \"Hello!\"\n```\n\nLANGUAGE: js\nCODE:\n```\nvar message = isMorning ? \"Good morning!\" : \"Hello!\";\n```\n\n----------------------------------------\n\nTITLE: Dictionary FromList Operation\nDESCRIPTION: Function signature for creating dictionary from list of pairs.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/dict.mdx#2025-04-18_snippet_17\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromList: list<(key, 'a)> => t<'a>\n```\n\n----------------------------------------\n\nTITLE: DOM Element JSX Transformation\nDESCRIPTION: Examples of how uncapitalized JSX (DOM elements) is transformed into ReactDOM.createDOMElementVariadic calls.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/beyond-jsx.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\n<div title=\"test\">\n  <span/>\n</div>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nJsxRuntime.jsx(\"div\", {\n      children: JsxRuntime.jsx(\"span\", {}),\n      title: \"test\"\n    });\n```\n\n----------------------------------------\n\nTITLE: Defining and Using a Type with One Type Parameter in ReScript\nDESCRIPTION: This snippet demonstrates how to define a generic 2D point type with a single type parameter and use it with different concrete types.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/language_type_parameter.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\ntype point2D<'a> = ('a, 'a)\n\nlet intPoint: point2D<int> = (1, 2)\nlet floatPoint: point2D<float> = (1.0, 2.0)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar intPoint = [1, 2];\nvar floatPoint = [1.0, 2.0];\n```\n\n----------------------------------------\n\nTITLE: Checking if All Elements Satisfy Predicate in ReasonML\nDESCRIPTION: Shows how to check if all elements in a set satisfy a given predicate function using every.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set.mdx#2025-04-18_snippet_24\n\nLANGUAGE: reasonml\nCODE:\n```\nlet every: (t('value, 'id), 'value => bool) => bool;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet isEven = x => x mod 2 == 0;\n\nlet s0 = Belt.Set.fromArray([|2,4,6,8|], ~id=(module IntCmp));\ns0->Belt.Set.every(isEven); /* true */\n```\n\n----------------------------------------\n\nTITLE: Converting Option to Nullable in ReScript\nDESCRIPTION: The 'fromOption' function converts option('a) to Js.null_undefined('a), mapping Some(a) to a and None to undefined.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/nullable.mdx#2025-04-18_snippet_10\n\nLANGUAGE: reason\nCODE:\n```\nlet fromOption: option('a) => t('a);\n```\n\n----------------------------------------\n\nTITLE: Rounding Functions in ReScript\nDESCRIPTION: Functions for rounding numbers to integers or nearest integral values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/math.mdx#2025-04-18_snippet_48\n\nLANGUAGE: rescript\nCODE:\n```\nlet unsafe_round: float => int;\nlet round: float => float;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.Math.unsafe_round(3.7) == 4;\nJs.Math.unsafe_round(-3.5) == -3;\nJs.Math.unsafe_round(2_150_000_000_000.3); // out of range for int\n```\n\n----------------------------------------\n\nTITLE: Checking Some Value in ReScript\nDESCRIPTION: Function to check if an option value is Some.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/option.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\nlet isSome: option('a) => bool;\n```\n\n----------------------------------------\n\nTITLE: Array Search and Conversion Functions\nDESCRIPTION: Functions for searching array elements and converting arrays to strings.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet includes: (elt, t) => bool\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet indexOf: (elt, t) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet indexOfFrom: (elt, ~from: int, t) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet join: t => string\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet joinWith: (string, t) => string\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet lastIndexOf: (elt, t) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet lastIndexOfFrom: (elt, ~from: int, t) => int\n```\n\n----------------------------------------\n\nTITLE: Float to Fixed-Point String Conversion\nDESCRIPTION: Function signature for converting float to fixed-point notation string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/float.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet toFixed: float => string\n```\n\n----------------------------------------\n\nTITLE: Example of Filtering String Set in ReScript\nDESCRIPTION: Demonstrates how to filter a string set to keep only elements that meet a specific condition.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-string.mdx#2025-04-18_snippet_44\n\nLANGUAGE: reasonml\nCODE:\n```\nlet hasFiveChars = x => String.length(x) == 5;\n\nlet s0 = Belt.Set.String.fromArray([|\"apple\", \"orange\", \"banana\"|]);\nlet s1 = s0->Belt.Set.String.keep(hasFiveChars);\n\ns1->Belt.Set.String.toArray; /* [|\"apple\"|] */\n```\n\n----------------------------------------\n\nTITLE: Keep Elements in Set based on Predicate\nDESCRIPTION: Returns a new set containing only elements that satisfy the given predicate function. Uses Belt.Set.Dict.keep to filter elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set-dict.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nlet keep: (t<'value, 'id>, 'value => bool) => t<'value, 'id>\n```\n\nLANGUAGE: res\nCODE:\n```\nmodule IntCmp = Belt.Id.MakeComparable({\n  type t = int\n  let cmp = Pervasives.compare\n})\n\nlet isEven = x => mod(x, 2) == 0\n\nlet s0 = Belt.Set.Dict.fromArray([1, 2, 3, 4, 5], ~cmp=IntCmp.cmp)\nlet s1 = s0->Belt.Set.Dict.keep(isEven)\n\ns1->Belt.Set.Dict.toArray /* [2,4] */\n```\n\n----------------------------------------\n\nTITLE: HashSet Copy Operation - ReScript\nDESCRIPTION: Creates a shallow copy of the HashSet.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-set-int.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet copy: t => t\n```\n\n----------------------------------------\n\nTITLE: Merging MapDict instances\nDESCRIPTION: Function signature for merging two maps using a curried function to resolve conflicts.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_45\n\nLANGUAGE: reason\nCODE:\n```\nlet merge:\n  (\n    t('a, 'b, 'id),\n    t('a, 'c, 'id),\n    ('a, option('b), option('c)) => option('d),\n    ~cmp: cmp('a, 'id)\n  ) =>\n  t('a, 'd, 'id);\n```\n\n----------------------------------------\n\nTITLE: Creating Set from Array\nDESCRIPTION: Creates a new Set Dictionary from an array of elements with a custom comparator\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set-dict.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\nlet fromArray: (array<'value>, ~cmp: cmp<'value, 'id>) => t<'value, 'id>\n```\n\nLANGUAGE: res\nCODE:\n```\nmodule IntCmp = Belt.Id.MakeComparable({\n  type t = int\n  let cmp = Pervasives.compare\n})\n\nlet s0 = Belt.Set.Dict.fromArray([1, 3, 2, 4], ~cmp=IntCmp.cmp)\n\ns0->Belt.Set.Dict.toArray /* [1, 2, 3, 4] */\n```\n\n----------------------------------------\n\nTITLE: Unsafe Element Access in Float32Array\nDESCRIPTION: Provides unchecked access to elements at specific indices in a Float32Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet unsafe_get: (t, int) => elt\n```\n\n----------------------------------------\n\nTITLE: Binding Undefined Values in ReScript\nDESCRIPTION: Function signature for mapping the contained value using a given function. This implements a monadic bind operation for undefined values, allowing transformation of the contained value if it exists.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/undefined.mdx#2025-04-18_snippet_7\n\nLANGUAGE: res\nCODE:\n```\nlet bind: (t<'a>, (. 'a) => 'b) => t<'b>\n```\n\n----------------------------------------\n\nTITLE: Extracting Substring between Indices in ReScript\nDESCRIPTION: The substring function extracts characters from a string between two specified indices.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/string-2.mdx#2025-04-18_snippet_29\n\nLANGUAGE: rescript\nCODE:\n```\nlet substring: (t, ~from: int, ~to_: int) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.String2.substring(\"playground\", ~from=3, ~to_=6) == \"ygr\"\nJs.String2.substring(\"playground\", ~from=6, ~to_=3) == \"ygr\"\nJs.String2.substring(\"playground\", ~from=4, ~to_=12) == \"ground\"\n```\n\n----------------------------------------\n\nTITLE: Find Index of Matching Element with Index Parameter\nDESCRIPTION: Returns the index of the first element in the typed array that satisfies the provided testing function which also receives the element index, or -1 if no element is found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_type-s.mdx#2025-04-18_snippet_39\n\nLANGUAGE: res\nCODE:\n```\nlet findIndexi: ((. elt, int) => bool, t) => int\n```\n\n----------------------------------------\n\nTITLE: Installing ReScript with bun\nDESCRIPTION: Command to create a new ReScript project using bun's create functionality.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/installation.mdx#2025-04-18_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nbun create rescript-app\n```\n\n----------------------------------------\n\nTITLE: Float to String Conversion\nDESCRIPTION: Function signature for basic float to string conversion.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/float.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\nlet toString: float => string\n```\n\n----------------------------------------\n\nTITLE: Get Minimum/Maximum Values from Set\nDESCRIPTION: Functions to retrieve minimum and maximum values from the set with different return types (option or undefined).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set-dict.mdx#2025-04-18_snippet_7\n\nLANGUAGE: res\nCODE:\n```\nlet minimum: t<'value, 'id> => option<'value>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet minUndefined: t<'value, 'id> => Js.undefined<'value>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet maximum: t<'value, 'id> => option<'value>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet maxUndefined: t<'value, 'id> => Js.undefined<'value>\n```\n\n----------------------------------------\n\nTITLE: Conditional Block Scope in ReScript\nDESCRIPTION: Demonstrates block scoping within conditional statements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/let-binding.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nif displayGreeting {\n  let message = \"Enjoying the docs so far?\"\n  Js.log(message)\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nif (displayGreeting) {\n  console.log(\"Enjoying the docs so far?\");\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Array Element Index in ReScript\nDESCRIPTION: Returns index of first element satisfying predicate function, or -1 if not found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array-2.mdx#2025-04-18_snippet_29\n\nLANGUAGE: res\nCODE:\n```\nJs.Array2.findIndex([33, 22, -55, 77, -44], x => x < 0) == 2\nJs.Array2.findIndex([33, 22, 55, 77, 44], x => x < 0) == -1\n```\n\n----------------------------------------\n\nTITLE: Accessing Vector Element in ReScript\nDESCRIPTION: Returns the element at a specified index in a vector. Raises an exception if the index is out of bounds.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/vector.mdx#2025-04-18_snippet_14\n\nLANGUAGE: ReScript\nCODE:\n```\nlet get: (t('a), int) => 'a;\n```\n\n----------------------------------------\n\nTITLE: Defining Int32Array Type in ReScript\nDESCRIPTION: Defines the core types for working with Int32Array typed arrays, including the element type, typed_array generic type, and the concrete type t.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-32-array.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype elt = int32\ntype typed_array<'a> = Js_typed_array2.Int32Array.typed_array<'a>\ntype t = typed_array<elt>\n```\n\n----------------------------------------\n\nTITLE: Copying Elements within Array with copyWithin\nDESCRIPTION: Function signature to copy a sequence of elements within the Int8Array to a specified target position.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_9\n\nLANGUAGE: res\nCODE:\n```\nlet copyWithin: (~to_: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Iterating over HashSetString with uncurried function\nDESCRIPTION: Applies an uncurried function to each element of the HashSetString. This is a JavaScript runtime optimization.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-set-string.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\nlet forEachU: (t, [@bs] (key => unit)) => unit;\n```\n\n----------------------------------------\n\nTITLE: Defining stableSortByU Function\nDESCRIPTION: Uncurried version of stableSortBy function that returns a fresh sorted array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/sort-array.mdx#2025-04-18_snippet_8\n\nLANGUAGE: reason\nCODE:\n```\nlet stableSortByU: (array('a), [@bs] (('a, 'a) => int)) => array('a);\n```\n\n----------------------------------------\n\nTITLE: Find First Matching Element with Index\nDESCRIPTION: Returns the first element in the typed array that satisfies the provided testing function which also receives the element index, or undefined if no element is found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_type-s.mdx#2025-04-18_snippet_37\n\nLANGUAGE: res\nCODE:\n```\nlet findi: ((. elt, int) => bool, t) => Js.undefined<elt>\n```\n\n----------------------------------------\n\nTITLE: Dictionary Get Function Signature\nDESCRIPTION: Function signature for safely retrieving values from a dictionary with optional return\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/dict.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reason\nCODE:\n```\nlet get: (t('a), key) => option('a);\n```\n\n----------------------------------------\n\nTITLE: Defining ComparableU Function in ReScript\nDESCRIPTION: Function for creating uncurried comparable modules with custom comparison functions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/id.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nlet comparableU: (~cmp: (. 'a, 'a) => int) =>\n  module(Belt.Id.Comparable with type t = 'a)\n```\n\n----------------------------------------\n\nTITLE: Adding Unsafe Style Properties with unsafeAddProp in ReScript React\nDESCRIPTION: Demonstrates using ReactDOM.Style.unsafeAddProp to add CSS properties that might not be covered by the type-safe Style.make API, such as vendor-prefixed properties.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/styling.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet style =\n  ReactDOM.Style.make(\n    ~color=\"red\",\n    ~padding=\"10px\",\n    (),\n  )->ReactDOM.Style.unsafeAddProp(\"-webkit-animation-name\", \"moveit\")\n```\n\n----------------------------------------\n\nTITLE: Curried every for MapDict\nDESCRIPTION: Function signature for checking if all key-value pairs satisfy a predicate using curried function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_17\n\nLANGUAGE: reason\nCODE:\n```\nlet every: (t('k, 'a, 'id), ('k, 'a) => bool) => bool;\n```\n\n----------------------------------------\n\nTITLE: Using toLocaleUpperCase function in ReScript\nDESCRIPTION: Converts a string to uppercase using the current locale. Allows for language-specific case conversion rules to be applied.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/string-2.mdx#2025-04-18_snippet_33\n\nLANGUAGE: rescript\nCODE:\n```\nlet toLocaleUpperCase: t => t\n```\n\n----------------------------------------\n\nTITLE: Array Transformation Functions\nDESCRIPTION: Function signatures for array transformations like copying, filling, reversing and sorting operations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet copyWithin: (~to_: int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet copyWithinFrom: (~to_: int, ~from: int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet copyWithinFromRange: (~to_: int, ~start: int, ~end_: int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fillInPlace: (elt, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fillFromInPlace: (elt, ~from: int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fillRangeInPlace: (elt, ~start: int, ~end_: int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet reverseInPlace: t => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet sortInPlace: t => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet sortInPlaceWith: ((. elt, elt) => int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Stable Sort In Place Signature\nDESCRIPTION: Function signature for performing an in-place stable sort on a string array using a fixed comparator.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/sort-array-string.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\nlet stableSortInPlace: array<element> => unit\n```\n\n----------------------------------------\n\nTITLE: Adding an element to a set in ReScript with MutableSetInt\nDESCRIPTION: Adds the specified value to the set. If the value already exists in the set, the operation has no effect. This mutates the original set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\nlet add: (t, value) => unit;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet s0 = Belt.MutableSet.Int.make();\ns0->Belt.MutableSet.Int.add(1);\ns0->Belt.MutableSet.Int.add(2);\ns0->Belt.MutableSet.Int.add(2);\n\ns0->Belt.MutableSet.Int.toArray; /* [|1, 2|] */\n```\n\n----------------------------------------\n\nTITLE: HashSet Add Operation - ReScript\nDESCRIPTION: Adds an integer key to the HashSet.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-set-int.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet add: (t, key) => unit\n```\n\n----------------------------------------\n\nTITLE: Converting Int to Float in ReScript\nDESCRIPTION: Converts a given int to a float using Belt.Float.fromInt function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/float.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reason\nCODE:\n```\nlet fromInt: int => float;\n```\n\nLANGUAGE: reason\nCODE:\n```\nJs.log(Belt.Float.fromInt(1) === 1.0); /* true */\n```\n\n----------------------------------------\n\nTITLE: Adding multiple elements to Belt.MutableSet.Int in ReScript\nDESCRIPTION: Adds multiple elements from an array to the set using the mergeMany function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_8\n\nLANGUAGE: res\nCODE:\n```\nlet mergeMany: (t, array<value>) => unit\n```\n\nLANGUAGE: res\nCODE:\n```\nlet set = Belt.MutableSet.Int.make()\n\nset->Belt.MutableSet.Int.mergeMany([5, 4, 3, 2, 1])\nset->Belt.MutableSet.Int.toArray /* [1, 2, 3, 4, 5] */\n```\n\n----------------------------------------\n\nTITLE: Fill Array From Position In-Place\nDESCRIPTION: Fills the typed array with a specified value starting from a given position in-place.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_type-s.mdx#2025-04-18_snippet_13\n\nLANGUAGE: res\nCODE:\n```\nlet fillFromInPlace: (elt, ~from: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Buffer Information Access for Float64Array\nDESCRIPTION: Functions to retrieve information about the underlying buffer of a Float64Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-64-array.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet buffer: t => Js_typed_array.array_buffer\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet byteLength: t => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet byteOffset: t => int\n```\n\n----------------------------------------\n\nTITLE: Extract Slice from Float32Array Starting at Index\nDESCRIPTION: Returns a new Float32Array containing elements from the specified start index to the end of the original array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-32-array.mdx#2025-04-18_snippet_27\n\nLANGUAGE: rescript\nCODE:\n```\nlet sliceFrom: (int, t) => t;\n```\n\n----------------------------------------\n\nTITLE: JSON Number Decoding Function in ReScript\nDESCRIPTION: Function signature for attempting to decode a JSON value as a number. Returns None if the JSON value is not a number.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/json.mdx#2025-04-18_snippet_6\n\nLANGUAGE: reason\nCODE:\n```\nlet decodeNumber: t => option(float);\n```\n\n----------------------------------------\n\nTITLE: Computing Cube Root in ReScript\nDESCRIPTION: Function that returns the cube root of the argument, equivalent to JavaScript's Math.cbrt.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/math.mdx#2025-04-18_snippet_18\n\nLANGUAGE: reasonml\nCODE:\n```\nlet cbrt: float => float;\n```\n\n----------------------------------------\n\nTITLE: Creating a New Set with make in ReasonML\nDESCRIPTION: Demonstrates how to create a new empty set by providing a comparator module using the make function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reasonml\nCODE:\n```\nlet make: (~id: id('value, 'id)) => t('value, 'id);\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet set = Belt.Set.make(~id=(module IntCmp));\n```\n\n----------------------------------------\n\nTITLE: Retrieving Maximum Value as Undefined from Belt.Set in ReScript\nDESCRIPTION: The 'maxUndefined' function returns the maximum value of the collection. It returns 'undefined' if the collection is empty. The function signature and usage example are provided.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/set.mdx#2025-04-18_snippet_17\n\nLANGUAGE: rescript\nCODE:\n```\nlet maxUndefined: t<'value, 'id> => Js.undefined<'value>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet s0 = Belt.Set.make(~id=module(IntCmp))\nlet s1 = Belt.Set.fromArray([3,2,1,5], ~id=module(IntCmp))\n\ns0->Belt.Set.maxUndefined /* undefined */\ns1->Belt.Set.maxUndefined /* 5 */\n```\n\n----------------------------------------\n\nTITLE: Converting Date to Locale Time String in ReScript\nDESCRIPTION: Returns the time of day for the given Date in the current locale format. The output format for the time depends on the user's locale settings.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_68\n\nLANGUAGE: ReScript\nCODE:\n```\nlet toLocaleTimeString: t => string\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nJs.Date.toLocaleString(exampleDate) == \"10:30:54 PM\" // for en_US.utf8\nJs.Date.toLocaleString(exampleDate) == \"22:30:54\" // for de_DE.utf8\n```\n\n----------------------------------------\n\nTITLE: Mapping and Reversing List with Uncurried Function in ReScript\nDESCRIPTION: The mapReverseU function is the uncurried version of mapReverse for performance optimization.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/list.mdx#2025-04-18_snippet_32\n\nLANGUAGE: rescript\nCODE:\n```\nlet mapReverseU: (t<'a>, (. 'a) => 'b) => t<'b>\n```\n\n----------------------------------------\n\nTITLE: Finding maximum key in ReScript map (option return)\nDESCRIPTION: Returns the maximum key in the map wrapped in an option, or None if the map is empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_26\n\nLANGUAGE: reasonml\nCODE:\n```\nlet maxKey: t('a) => option(key);\n```\n\n----------------------------------------\n\nTITLE: Configuring GenType in ReScript\nDESCRIPTION: Shows how to enable and configure GenType in rescript.json for generating TypeScript type definitions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/build-configuration.mdx#2025-04-18_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"gentypeconfig\": {\n    \"module\": \"esmodule\",\n    \"moduleResolution\": \"node\",\n    \"generatedFileExtension\": \".gen.tsx\",\n    \"debug\": {\n      \"all\": false,\n      \"basic\": false\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing an element from a string set in ReScript\nDESCRIPTION: Removes an element from the set. If the element didn't exist, the set remains unchanged.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set-string.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\nlet remove: (t, value) => t\n```\n\n----------------------------------------\n\nTITLE: Filter Float32Array Elements\nDESCRIPTION: Creates a new Float32Array with all elements that pass the test implemented by the provided function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_34\n\nLANGUAGE: rescript\nCODE:\n```\nlet filter: ((. elt) => bool, t) => t\n```\n\n----------------------------------------\n\nTITLE: Examples of Unsafe Floor Function in ReScript\nDESCRIPTION: Examples demonstrating the use of unsafe_floor_int with different numeric values, including one that exceeds the int range.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/math.mdx#2025-04-18_snippet_34\n\nLANGUAGE: reasonml\nCODE:\n```\nJs.Math.unsafe_floor_int(3.7) == 3;\nJs.Math.unsafe_floor_int(3.0) == 3;\nJs.Math.unsafe_floor_int(-3.7) == -4;\nJs.Math.unsafe_floor_int(1.0e15); // result is outside range of int datatype\n```\n\n----------------------------------------\n\nTITLE: Finding Minimum Value in Belt.MutableSet using minUndefined in ReScript\nDESCRIPTION: The minUndefined function returns the minimum value of the collection. It returns undefined if the collection is empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_12\n\nLANGUAGE: ReScript\nCODE:\n```\nlet minUndefined: t<'value, 'id> => Js.undefined<'value>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nmodule IntCmp = Belt.Id.MakeComparable({\n  type t = int\n  let cmp = Pervasives.compare\n})\n\nlet s0 = Belt.MutableSet.make(~id=module(IntCmp))\nlet s1 = Belt.MutableSet.fromArray([3, 2, 1, 5], ~id=module(IntCmp))\n\ns0->Belt.MutableSet.minUndefined /* undefined */\ns1->Belt.MutableSet.minUndefined /* 1 */\n```\n\n----------------------------------------\n\nTITLE: Array Manipulation Operations for Float64Array\nDESCRIPTION: Functions for in-place modification of a Float64Array, including reverse and sort operations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-64-array.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nlet reverseInPlace: t => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet sortInPlace: t => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet sortInPlaceWith: ((. elt, elt) => int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Create Float64Array from Array\nDESCRIPTION: Creates a new Float64Array from a standard array of elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-64-array.mdx#2025-04-18_snippet_51\n\nLANGUAGE: reason\nCODE:\n```\nlet make: array(elt) => t;\n```\n\n----------------------------------------\n\nTITLE: Getting UTC Milliseconds from Date in ReScript\nDESCRIPTION: ReScript binding for JavaScript's Date.getUTCMilliseconds method. Returns the number of milliseconds for a date, evaluated in UTC.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_33\n\nLANGUAGE: res\nCODE:\n```\nlet getUTCMilliseconds: t => float\n```\n\nLANGUAGE: res\nCODE:\n```\nJs.Date.getUTCMilliseconds(exampleDate) == 321.0\n```\n\n----------------------------------------\n\nTITLE: Checking if HashMap is Empty in ReScript\nDESCRIPTION: Returns a boolean indicating whether the hash map contains any key-value pairs.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-map-int.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet isEmpty: t<'a> => bool\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet hMap = Belt.HashMap.Int.fromArray([(1, \"1\")])\nBelt.HashMap.Int.isEmpty(hMap) == false\n```\n\n----------------------------------------\n\nTITLE: Subset Checking Example in MutableSets in ReasonML\nDESCRIPTION: Example demonstrating how to check if one MutableSet is a subset of another using the subset function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_30\n\nLANGUAGE: reasonml\nCODE:\n```\nmodule IntCmp =\n  Belt.Id.MakeComparable({\n    type t = int;\n    let cmp = Pervasives.compare;\n  });\n\nlet s0 = Belt.MutableSet.fromArray([|5,2,3,5,6|], ~id=(module IntCmp));\nlet s1 = Belt.MutableSet.fromArray([|5,2,3,1,5,4|], ~id=(module IntCmp));\nlet s2 = Belt.MutableSet.intersect(s0, s1);\nBelt.MutableSet.subset(s2, s0); /* true */\nBelt.MutableSet.subset(s2, s1); /* true */\nBelt.MutableSet.subset(s1, s0); /* false */\n```\n\n----------------------------------------\n\nTITLE: Iterating over map with uncurried function in MapString module (ReScript)\nDESCRIPTION: Uncurried function to iterate through all key-value pairs in a map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-string.mdx#2025-04-18_snippet_11\n\nLANGUAGE: reason\nCODE:\n```\nlet forEachU: (t('v), [@bs] ((key, 'v) => unit)) => unit;\n```\n\n----------------------------------------\n\nTITLE: Coercing Polymorphic Variant to String in ReScript\nDESCRIPTION: This snippet demonstrates how to convert a polymorphic variant to a string at no cost. It shows the ReScript code and the corresponding JavaScript output.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/polymorphic-variant.mdx#2025-04-18_snippet_15\n\nLANGUAGE: res\nCODE:\n```\ntype company = [#Apple | #Facebook]\nlet theCompany: company = #Apple\n\nlet message = \"Hello \" ++ (theCompany :> string)\n```\n\nLANGUAGE: js\nCODE:\n```\nvar theCompany = \"Apple\";\nvar message = \"Hello \" + theCompany;\n```\n\n----------------------------------------\n\nTITLE: Creating an ArrayBuffer in ReScript\nDESCRIPTION: Function signature for creating a new ArrayBuffer with the specified length in bytes. All elements are initialized to 0.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_array-buffer.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet make: int => t\n```\n\n----------------------------------------\n\nTITLE: Finding first matching key-value pair with uncurried function in MapString module (ReScript)\nDESCRIPTION: Uncurried function to find the first key-value pair that matches a given predicate.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-string.mdx#2025-04-18_snippet_9\n\nLANGUAGE: reason\nCODE:\n```\nlet findFirstByU: (t('v), [@bs] ((key, 'v) => bool)) => option((key, 'v));\n```\n\n----------------------------------------\n\nTITLE: Creating a new HashMap with integer keys in ReScript\nDESCRIPTION: Creates a new hash map with integer keys by specifying a hint size for initial capacity.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-map-int.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\nlet make: (~hintSize: int) => t('b);\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet hMap = Belt.HashMap.Int.make(~hintSize=10);\n\nBelt.HashMap.Int.set(hMap, 1, \"a\");\n```\n\n----------------------------------------\n\nTITLE: Defining an Integer Comparator Module for Belt.Set Examples in ReScript\nDESCRIPTION: Sets up a reusable integer comparator module for use in Belt.Set examples.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/set.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nmodule IntCmp =\n  Belt.Id.MakeComparable({\n    type t = int\n    let cmp = Pervasives.compare\n  })\n```\n\n----------------------------------------\n\nTITLE: Filling Uint8ClampedArray with a value\nDESCRIPTION: Fills the entire array with the specified value, modifying the array in place.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_12\n\nLANGUAGE: res\nCODE:\n```\nlet fillInPlace: (elt, t) => t\n```\n\n----------------------------------------\n\nTITLE: Normalizing Unicode Strings with Specific Form in ReScript\nDESCRIPTION: The normalizeByForm function normalizes a Unicode string using a specified form of normalization (NFC, NFD, NFKC, or NFKD). This allows for different types of Unicode normalization based on the needs of the application.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string.mdx#2025-04-18_snippet_24\n\nLANGUAGE: rescript\nCODE:\n```\nlet normalizeByForm: (t, t) => t;\n```\n\n----------------------------------------\n\nTITLE: Example: Using RegExp in ReScript\nDESCRIPTION: Demonstrates how to use the RegExp bindings to find file extensions in a string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/re.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet firstReScriptFileExtension = (filename, content) => {\n  let result = Js.Re.fromString(filename ++ \"\\.(res|resi)\")->Js.Re.exec_(content)\n  switch result {\n  | Some(r) => Js.Nullable.toOption(Js.Re.captures(r)[1])\n  | None => None\n  }\n}\n\n// outputs \"res\"\nfirstReScriptFileExtension(\"School\", \"School.res School.resi Main.js School.bs.js\")\n```\n\n----------------------------------------\n\nTITLE: Iterating over a HashMap with integer keys using uncurried function in ReScript\nDESCRIPTION: Applies an uncurried function to all bindings in the hash map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-map-int.mdx#2025-04-18_snippet_10\n\nLANGUAGE: reason\nCODE:\n```\nlet forEachU: (t('b), [@bs] ((key, 'b) => unit)) => unit;\n```\n\n----------------------------------------\n\nTITLE: Example of using forEach in Belt.Range\nDESCRIPTION: Example demonstrating how to use forEach to iterate over a range from 0 to 4 and log each value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/range.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\nBelt.Range.forEach(0, 4, (i) => Js.log(i));\n\n/**\n * prints:\n *   0\n *   1\n *   2\n *   3\n *   4\n */\n```\n\n----------------------------------------\n\nTITLE: Partitioning a set in ReScript\nDESCRIPTION: Splits the set into two sets: one with elements that satisfy the predicate and one with elements that don't.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-int.mdx#2025-04-18_snippet_28\n\nLANGUAGE: reason\nCODE:\n```\nlet partition: (t, value => bool) => (t, t);\n```\n\n----------------------------------------\n\nTITLE: Array Search Methods\nDESCRIPTION: Methods for searching array elements including indexOf, includes, and find operations\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reason\nCODE:\n```\nlet includes: (elt, t) => bool;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet indexOf: (elt, t) => int;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet find: ((. elt) => bool, t) => Js.undefined(elt);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Key by Index from Storage in ReScript\nDESCRIPTION: External binding for getting a key from storage by its index. Returns an option type, which is None if the index is out of bounds.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/dom/storage.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nexternal key: (int, t) => option<string> = \"key\"\n```\n\n----------------------------------------\n\nTITLE: Creating map from array in ReScript\nDESCRIPTION: Creates a new map from an array of key-value pairs.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_21\n\nLANGUAGE: reasonml\nCODE:\n```\nlet fromArray: array((key, 'a)) => t('a);\n```\n\n----------------------------------------\n\nTITLE: Computing Integer Absolute Value in ReScript\nDESCRIPTION: Function that returns the absolute value of an integer argument, equivalent to JavaScript's Math.abs for integers.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/math.mdx#2025-04-18_snippet_8\n\nLANGUAGE: reasonml\nCODE:\n```\nlet abs_int: int => int;\n```\n\n----------------------------------------\n\nTITLE: Accessing localStorage in ReScript\nDESCRIPTION: External binding for accessing the global localStorage object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/dom/storage.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\n@val external localStorage: t = \"localStorage\"\n```\n\n----------------------------------------\n\nTITLE: Defining Uint8Array Types in ReScript\nDESCRIPTION: Defines the core types for working with Uint8Array in ReScript, including the element type (int), the generic typed_array type, and the specific Uint8Array type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\ntype elt = int\ntype typed_array<'a> = Js_typed_array2.Uint8Array.typed_array<'a>\ntype t = typed_array<elt>\n```\n\n----------------------------------------\n\nTITLE: Mapping List Elements with Index in ReScript\nDESCRIPTION: The mapWithIndex function transforms each element in a list by applying a function that takes both the element and its index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/list.mdx#2025-04-18_snippet_26\n\nLANGUAGE: rescript\nCODE:\n```\nlet mapWithIndex: (t<'a>, (int, 'a) => 'b) => t<'b>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlist{1, 2, 3}->Belt.List.mapWithIndex((index, x) => index + x) // list{1, 3, 5}\n```\n\n----------------------------------------\n\nTITLE: Test All Elements\nDESCRIPTION: Tests whether all elements in the typed array pass the test implemented by the provided function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_type-s.mdx#2025-04-18_snippet_32\n\nLANGUAGE: res\nCODE:\n```\nlet every: ((. elt) => bool, t) => bool\n```\n\n----------------------------------------\n\nTITLE: Iterating over Belt.HashMap.String in ReScript\nDESCRIPTION: Applies a function to each key-value pair in the hash map using the forEach function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/hash-map-string.mdx#2025-04-18_snippet_9\n\nLANGUAGE: ReScript\nCODE:\n```\nlet forEach: (t<'b>, (key, 'b) => unit) => unit\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet hMap = Belt.HashMap.String.make(~hintSize=10)\nBelt.HashMap.String.set(hMap, \"1\", \"value1\")\nBelt.HashMap.String.forEach(hMap, (key, value) => Js.log2(key, value))\n// prints (\"1\", \"value1\")\n```\n\n----------------------------------------\n\nTITLE: HashSet from Array Creation - ReScript\nDESCRIPTION: Creates a new HashSet from an array of keys.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-set-int.mdx#2025-04-18_snippet_16\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromArray: array<key> => t\n```\n\n----------------------------------------\n\nTITLE: TypeScript Usage Example\nDESCRIPTION: Example of how to use the generated TypeScript interface in a TypeScript application.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/typescript-integration.mdx#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { printColorMessage } from \"./Color.gen.tsx\";\n\nprintColorMessage(\"Red\", \"Hello, genType!\");\n```\n\n----------------------------------------\n\nTITLE: Element Searching in Int32Array\nDESCRIPTION: Functions to find elements or indices that match predicates.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-32-array.mdx#2025-04-18_snippet_12\n\nLANGUAGE: rescript\nCODE:\n```\nlet find: ((. elt) => bool, t) => Js.undefined<elt>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet findi: ((. elt, int) => bool, t) => Js.undefined<elt>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet findIndex: ((. elt) => bool, t) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet findIndexi: ((. elt, int) => bool, t) => int\n```\n\n----------------------------------------\n\nTITLE: Retrieving Values from MutableMaps in ReScript\nDESCRIPTION: Functions for retrieving values from a map, with various options for handling missing keys.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-map.mdx#2025-04-18_snippet_7\n\nLANGUAGE: ReScript\nCODE:\n```\nlet get: (t<'k, 'a, 'id>, 'k) => option<'a>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet getUndefined: (t<'k, 'a, 'id>, 'k) => Js.undefined<'a>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet getWithDefault: (t<'k, 'a, 'id>, 'k, 'a) => 'a\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet getExn: (t<'k, 'a, 'id>, 'k) => 'a\n```\n\n----------------------------------------\n\nTITLE: Zipping Lists with Custom Function in ReScript\nDESCRIPTION: The zipBy function combines elements from two lists using a custom function, with length equal to the shorter of the two input lists.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/list.mdx#2025-04-18_snippet_24\n\nLANGUAGE: rescript\nCODE:\n```\nlet zipBy: (t<'a>, t<'b>, ('a, 'b) => 'c) => t<'c>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nBelt.List.zipBy(list{1, 2, 3}, list{4, 5}, (a, b) => 2 * a + b) // list{6, 9}\n```\n\n----------------------------------------\n\nTITLE: Creating String from Code Point in ReScript\nDESCRIPTION: The fromCodePoint function creates a string from a Unicode code point. This supports the full range of Unicode, including characters outside the BMP. It raises RangeError for invalid code points.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reason\nCODE:\n```\nlet fromCodePoint: int => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nJs.String2.fromCodePoint(65) == \"A\";\nJs.String2.fromCodePoint(0x3c8) == {js|ψ|js};\nJs.String2.fromCodePoint(0xd55c) == {js|한|js};\nJs.String2.fromCodePoint(0x1f63a) == {js|😺|js};\n```\n\n----------------------------------------\n\nTITLE: Creating Subarray View from Position\nDESCRIPTION: Creates a new view on the same underlying buffer from start index to the end of the array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_29\n\nLANGUAGE: rescript\nCODE:\n```\nlet subarrayFrom: (int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Setting Date Components with setUTCFullYearMD in ReScript\nDESCRIPTION: Sets a Date's year, month, and day according to UTC time. This function modifies the original Date object and returns the updated timestamp in milliseconds. Binds to JavaScript's Date.setUTCFullYear method.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_52\n\nLANGUAGE: res\nCODE:\n```\nlet setUTCFullYearMD: (t, ~year: float, ~month: float, ~date: float, unit) => float\n```\n\nLANGUAGE: res\nCODE:\n```\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet future = Js.Date.setUTCFullYearMD(date1, ~year=1974.0, ~month=0.0, ~date=7.0, ())\ndate1 == Js.Date.fromString(\"1974-01-07T21:30:54.321Z00:00\")\nfuture == Js.Date.getTime(date1)\n```\n\n----------------------------------------\n\nTITLE: Map GetData Function Signature\nDESCRIPTION: Retrieves raw data from the map, detached from comparator.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map.mdx#2025-04-18_snippet_17\n\nLANGUAGE: rescript\nCODE:\n```\nlet getData: t<'k, 'v, 'id> => Belt_MapDict.t<'k, 'v, 'id>\n```\n\n----------------------------------------\n\nTITLE: Finding element index in UInt32Array\nDESCRIPTION: Defines a function that returns the index of the first element that satisfies the provided testing function, or -1 if none found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_38\n\nLANGUAGE: rescript\nCODE:\n```\nlet findIndex: ((. elt) => bool, t) => int\n```\n\n----------------------------------------\n\nTITLE: Checking key existence in MapDict (ReScript)\nDESCRIPTION: Function to check if a key exists in a MapDict using a comparison function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_2\n\nLANGUAGE: ReScript\nCODE:\n```\nlet has: (t<'k, 'a, 'id>, 'k, ~cmp: cmp<'k, 'id>) => bool\n```\n\n----------------------------------------\n\nTITLE: Setting Minutes and Seconds in ReScript\nDESCRIPTION: Sets a Date's minutes and seconds according to current time zone. Returns milliseconds since epoch for the updated Date. Modifies the original Date.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_48\n\nLANGUAGE: rescript\nCODE:\n```\nlet setMinutesS: (t, ~minutes: float, ~seconds: float, unit) => float\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet futureTime = Js.Date.setMinutesS(date1, ~minutes=34.0, ~seconds=56.0, ())\ndate1 == Js.Date.fromString(\"1973-11-29T21:34:56.494Z00:00\")\nfutureTime == Js.Date.getTime(date1)\n```\n\n----------------------------------------\n\nTITLE: Finding Maximum Key-Value Pair in ReScript MapInt Module\nDESCRIPTION: Function signature for finding the maximum key-value pair in the map, returning an option.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-int.mdx#2025-04-18_snippet_31\n\nLANGUAGE: rescript\nCODE:\n```\nlet maximum: t<'v> => option<(key, 'v)>\n```\n\n----------------------------------------\n\nTITLE: Using maxMany_int function to find maximum in array of integers in ReScript\nDESCRIPTION: The maxMany_int function returns the maximum of the integers in the given array. It takes an array of integers as input and returns an integer.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/math.mdx#2025-04-18_snippet_15\n\nLANGUAGE: res\nCODE:\n```\nlet maxMany_int: array<int> => int\n```\n\n----------------------------------------\n\nTITLE: Installing ReScript as a Dev Dependency\nDESCRIPTION: Command to install ReScript locally as a development dependency in an existing JavaScript project. This is useful when integrating ReScript into an existing project.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/installation.mdx#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev bs-platform\n```\n\n----------------------------------------\n\nTITLE: Defining Hashable module type in ReScript\nDESCRIPTION: Defines a module type 'Hashable' with an identity type, a value type 't', a hash function, and an equality function. This module type is used to create hashable modules with unique identities.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/id.mdx#2025-04-18_snippet_8\n\nLANGUAGE: ReScript\nCODE:\n```\nmodule type Hashable = {\n  type identity;\n\n  type t;\n\n  let hash: BeltId.hash(t, identity);\n\n  let eq: BeltId.eq(t, identity);\n}\n```\n\n----------------------------------------\n\nTITLE: Casting String to Array-Like Object in ReScript\nDESCRIPTION: The castToArrayLike function converts a string to an array-like object that can be used with JavaScript array functions like Js.Array2.fromMap(). This allows string manipulation using array operations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/string-2.mdx#2025-04-18_snippet_37\n\nLANGUAGE: res\nCODE:\n```\nlet castToArrayLike: t => Js_array2.array_like<t>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet s = \"abcde\"\nlet arr = Js.Array2.fromMap(Js.String2.castToArrayLike(s), x => x)\narr == [\"a\", \"b\", \"c\", \"d\", \"e\"]\n```\n\n----------------------------------------\n\nTITLE: Filtering UInt32Array\nDESCRIPTION: Defines a function that creates a new array with all elements that pass the test implemented by the provided function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_34\n\nLANGUAGE: rescript\nCODE:\n```\nlet filter: ((. elt) => bool, t) => t\n```\n\n----------------------------------------\n\nTITLE: Empty Dictionary Creation\nDESCRIPTION: Type signature for creating an empty dictionary.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/dict.mdx#2025-04-18_snippet_7\n\nLANGUAGE: res\nCODE:\n```\nlet empty: unit => t<'a>\n```\n\n----------------------------------------\n\nTITLE: Set Modification Operations\nDESCRIPTION: Methods for modifying sets including adding and removing elements, both individually and in bulk.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/set-int.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet add: (t, value) => t\nlet mergeMany: (t, array<value>) => t\nlet remove: (t, value) => t\nlet removeMany: (t, array<value>) => t\n```\n\n----------------------------------------\n\nTITLE: Defining DOM Observer Types in ReScript\nDESCRIPTION: Type definitions for various DOM observer interfaces like MutationObserver and ResizeObserver\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/dom.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\ntype intersectionObserver\ntype intersectionObserverEntry\ntype mutationObserver\ntype mutationRecord\ntype performanceObserver\ntype performanceObserverEntryList\ntype reportingObserver\ntype reportingObserverOptions\ntype resizeObserver\ntype resizeObserverEntry\n```\n\n----------------------------------------\n\nTITLE: Getting value by key with exception in MapString module (ReScript)\nDESCRIPTION: Function to retrieve a value for a given key, raising an exception if the key doesn't exist.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-string.mdx#2025-04-18_snippet_36\n\nLANGUAGE: reason\nCODE:\n```\nlet getExn: (t('v), key) => 'v;\n```\n\n----------------------------------------\n\nTITLE: Checking equality of MapDicts in ReScript\nDESCRIPTION: Functions for checking if two MapDicts are equal using key comparison and value equality functions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_4\n\nLANGUAGE: ReScript\nCODE:\n```\nlet eqU: (t<'k, 'a, 'id>, t<'k, 'a, 'id>, ~kcmp: cmp<'k, 'id>, ~veq: (. 'a, 'a) => bool) => bool\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet eq: (t<'k, 'a, 'id>, t<'k, 'a, 'id>, ~kcmp: cmp<'k, 'id>, ~veq: ('a, 'a) => bool) => bool\n```\n\n----------------------------------------\n\nTITLE: Example of Iterating Over Null Values in ReScript\nDESCRIPTION: Demonstrates how to use iter to conditionally log a message if it's not null.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/null.mdx#2025-04-18_snippet_9\n\nLANGUAGE: reason\nCODE:\n```\nlet maybeSay = (maybeMessage: Js.null(string)) =>\n  Js.Null.iter(maybeMessage, [@bs] message => Js.log(message));\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Elements to Set in ReScript\nDESCRIPTION: Adds multiple string elements from an array to a set at once. Unlike add, the reference might change even if all elements already exist.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-string.mdx#2025-04-18_snippet_13\n\nLANGUAGE: reasonml\nCODE:\n```\nlet mergeMany: (t, array(value)) => t;\n```\n\n----------------------------------------\n\nTITLE: Reading 16-bit Signed Integer (Little Endian)\nDESCRIPTION: Gets a signed 16-bit integer at the specified byte offset from the start of the DataView using little-endian format.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_data-view.mdx#2025-04-18_snippet_11\n\nLANGUAGE: reasonml\nCODE:\n```\nlet getInt16LittleEndian: (t, int) => int;\n```\n\n----------------------------------------\n\nTITLE: Join Float32Array Elements with Separator\nDESCRIPTION: Joins all elements of the Float32Array into a string using the specified separator.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-32-array.mdx#2025-04-18_snippet_22\n\nLANGUAGE: rescript\nCODE:\n```\nlet joinWith: (string, t) => string;\n```\n\n----------------------------------------\n\nTITLE: Map Iteration Functions - ReScript\nDESCRIPTION: Functions for iterating over map elements including forEach, reduce, every, and some operations\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-map.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reason\nCODE:\n```\nlet forEachU: (t('k, 'a, 'id), [@bs] (('k, 'a) => unit)) => unit;\nlet forEach: (t('k, 'a, 'id), ('k, 'a) => unit) => unit;\nlet reduceU: (t('k, 'a, 'id), 'b, [@bs] (('b, 'k, 'a) => 'b)) => 'b;\nlet reduce: (t('k, 'a, 'id), 'b, ('b, 'k, 'a) => 'b) => 'b;\nlet everyU: (t('k, 'a, 'id), [@bs] (('k, 'a) => bool)) => bool;\nlet every: (t('k, 'a, 'id), ('k, 'a) => bool) => bool;\nlet someU: (t('k, 'a, 'id), [@bs] (('k, 'a) => bool)) => bool;\nlet some: (t('k, 'a, 'id), ('k, 'a) => bool) => bool;\n```\n\n----------------------------------------\n\nTITLE: Creating a Copy of Array\nDESCRIPTION: Function signature to create a copy of the entire array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_26\n\nLANGUAGE: res\nCODE:\n```\nlet copy: t => t\n```\n\n----------------------------------------\n\nTITLE: Integer to String Conversion in ReScript\nDESCRIPTION: Basic integer to string conversion using fixed-point notation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/int.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\n/* prints \"123456789\" */\nJs.log(Js.Int.toString(123456789))\n```\n\n----------------------------------------\n\nTITLE: Testing String Against RegExp Pattern\nDESCRIPTION: Function that tests whether a RegExp object will match a given string. Returns true if a match is found, false otherwise.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/re.mdx#2025-04-18_snippet_19\n\nLANGUAGE: reason\nCODE:\n```\nlet test_: (t, string) => bool;\n```\n\nLANGUAGE: reason\nCODE:\n```\n/* A simple implementation of Js.String.startsWith */\n\nlet str = \"hello world!\";\n\nlet startsWith = (target, substring) =>\n  Js.Re.fromString(\"^\" ++ substring)->(Js.Re.test_(target));\n\nJs.log(str->(startsWith(\"hello\"))); /* prints \"true\" */\n```\n\n----------------------------------------\n\nTITLE: Modifying ReScript maps\nDESCRIPTION: Functions for removing, setting, updating, and merging entries in the map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-string.mdx#2025-04-18_snippet_8\n\nLANGUAGE: res\nCODE:\n```\nlet remove: (t<'v>, key) => t<'v>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet removeMany: (t<'v>, array<key>) => t<'v>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet set: (t<'v>, key, 'v) => t<'v>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet updateU: (t<'v>, key, (. option<'v>) => option<'v>) => t<'v>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet update: (t<'v>, key, option<'v> => option<'v>) => t<'v>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet mergeU: (t<'v>, t<'v2>, (. key, option<'v>, option<'v2>) => option<'c>) => t<'c>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet merge: (t<'v>, t<'v2>, (key, option<'v>, option<'v2>) => option<'c>) => t<'c>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet mergeMany: (t<'v>, array<(key, 'v)>) => t<'v>\n```\n\n----------------------------------------\n\nTITLE: Example of toFixedWithPrecision with Rounding\nDESCRIPTION: Demonstrates rounding behavior when formatting a number with toFixedWithPrecision.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/float.mdx#2025-04-18_snippet_16\n\nLANGUAGE: re\nCODE:\n```\n/* prints \"12345.7\" (note the rounding) */\nJs.log @@ Js.Float.toFixedWithPrecision(12345.6789, ~digits=1);\n```\n\n----------------------------------------\n\nTITLE: CopyWithinFromRange Operation\nDESCRIPTION: Copies a range of elements from source positions to a target position within the typed array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_type-s.mdx#2025-04-18_snippet_11\n\nLANGUAGE: res\nCODE:\n```\nlet copyWithinFromRange: (~to_: int, ~start: int, ~end_: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Testing MutableSet Emptiness Example in ReasonML\nDESCRIPTION: Example demonstrating how to check if a MutableSet is empty using the isEmpty function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_10\n\nLANGUAGE: reasonml\nCODE:\n```\nmodule IntCmp =\n  Belt.Id.MakeComparable({\n    type t = int;\n    let cmp = Pervasives.compare;\n  });\n\nlet empty = Belt.MutableSet.fromArray([||], ~id=(module IntCmp));\nlet notEmpty = Belt.MutableSet.fromArray([|1|],~id=(module IntCmp));\n\nBelt.MutableSet.isEmpty(empty); /* true */\nBelt.MutableSet.isEmpty(notEmpty); /* false */\n```\n\n----------------------------------------\n\nTITLE: Binding to Deeply Nested Global Objects with @scope Tuple\nDESCRIPTION: This example demonstrates binding to deeply nested global JavaScript objects by passing a tuple to the @scope annotation. Here, we're binding to window.location.ancestorOrigins.length.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/bind-to-global-js-values.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\n@val @scope((\"window\", \"location\", \"ancestorOrigins\"))\nexternal length: int = \"length\"\n```\n\nLANGUAGE: js\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: ReScript Console Trace Method\nDESCRIPTION: A function that prints the current stack trace to the console.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/console.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet trace: unit => unit\n```\n\n----------------------------------------\n\nTITLE: HashSet Curried Reduce - ReScript\nDESCRIPTION: Reduces the HashSet elements using a curried reducer function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-set-int.mdx#2025-04-18_snippet_12\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduce: (t, 'c, ('c, key) => 'c) => 'c\n```\n\n----------------------------------------\n\nTITLE: Stable sorting string array with new array in ReScript\nDESCRIPTION: Function to perform stable sorting on a string array, returning a new sorted array and using a fixed comparator.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/sort-array-string.mdx#2025-04-18_snippet_4\n\nLANGUAGE: ReScript\nCODE:\n```\nlet stableSort: array(element) => array(element);\n```\n\n----------------------------------------\n\nTITLE: Float to String with Specific Precision\nDESCRIPTION: Function signature for converting float to string with specified total digits.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/float.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\nlet toPrecisionWithPrecision: (float, ~digits: int) => string\n```\n\n----------------------------------------\n\nTITLE: Retrieving Minimum Value from Belt.Set in ReScript\nDESCRIPTION: The 'minimum' function returns the minimum value of the collection. It returns 'None' if the collection is empty. The function signature and usage example are provided.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/set.mdx#2025-04-18_snippet_14\n\nLANGUAGE: rescript\nCODE:\n```\nlet minimum: t<'value, 'id> => option<'value>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet s0 = Belt.Set.make(~id=module(IntCmp))\nlet s1 = Belt.Set.fromArray([3,2,1,5], ~id=module(IntCmp))\n\ns0->Belt.Set.minimum /* None */\ns1->Belt.Set.minimum /* Some(1) */\n```\n\n----------------------------------------\n\nTITLE: Checking Element Existence in Belt.Set in ReScript\nDESCRIPTION: Demonstrates how to check if an element exists in a Belt.Set using the has function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet set = Belt.Set.fromArray([1, 4, 2, 5], ~id=module(IntCmp))\n\nset->Belt.Set.has(3) /* false */\nset->Belt.Set.has(1) /* true */\n```\n\n----------------------------------------\n\nTITLE: Finding First Element by Predicate (Curried) in ReScript MapInt Module\nDESCRIPTION: Function signature for finding the first key-value pair that satisfies a curried predicate.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-int.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rescript\nCODE:\n```\nlet findFirstBy: (t<'v>, (key, 'v) => bool) => option<(key, 'v)>\n```\n\n----------------------------------------\n\nTITLE: JavaScript Example of Conditional Compilation\nDESCRIPTION: An example showing how conditional compilation based on environment variables works in JavaScript, which demonstrates the pattern ReScript needs to generate.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/inlining-constants.mdx#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif (process.env.mode === 'development') {\n  console.log(\"Dev-only code here!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Upper Bound Polymorphic Variant in ReScript\nDESCRIPTION: This example shows how to define an upper bound polymorphic variant type for valid red colors. The extending type may only use constructors stated in the upper bound constraint.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/polymorphic-variant.mdx#2025-04-18_snippet_14\n\nLANGUAGE: res\nCODE:\n```\ntype validRed<'a> = [< #Fire | #Crimson | #Ash] as 'a\ntype myReds = validRed<[#Ash]>\n\n// This will fail due to unlisted constructor not defined by the lower bound\ntype notWorking = validRed<[#Purple]>\n```\n\n----------------------------------------\n\nTITLE: Exporting Default Value in ReScript\nDESCRIPTION: Shows how to export a default value that can be imported by JavaScript modules.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/import-from-export-to-js.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet default = \"Bob\"\n```\n\n----------------------------------------\n\nTITLE: Iteration Operations\nDESCRIPTION: Functions for iterating over map elements including forEach, reduce, every, and some operations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-map-int.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\nlet forEachU: (t<'a>, (. key, 'a) => unit) => unit\n```\n\nLANGUAGE: res\nCODE:\n```\nlet forEach: (t<'a>, (key, 'a) => unit) => unit\n```\n\nLANGUAGE: res\nCODE:\n```\nlet reduceU: (t<'a>, 'b, (. 'b, key, 'a) => 'b) => 'b\n```\n\nLANGUAGE: res\nCODE:\n```\nlet reduce: (t<'a>, 'b, ('b, key, 'a) => 'b) => 'b\n```\n\nLANGUAGE: res\nCODE:\n```\nlet everyU: (t<'a>, (. key, 'a) => bool) => bool\n```\n\nLANGUAGE: res\nCODE:\n```\nlet every: (t<'a>, (key, 'a) => bool) => bool\n```\n\nLANGUAGE: res\nCODE:\n```\nlet someU: (t<'a>, (. key, 'a) => bool) => bool\n```\n\nLANGUAGE: res\nCODE:\n```\nlet some: (t<'a>, (key, 'a) => bool) => bool\n```\n\n----------------------------------------\n\nTITLE: Using Raw JavaScript Requires in ReScript\nDESCRIPTION: This code snippet demonstrates how to use the %raw function in ReScript to include CSS or other files that typically require loaders in JS build systems.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/interop-with-js-build-systems.mdx#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n%raw(\"require('./myStyles.css')\")\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Undefined Values in ReScript\nDESCRIPTION: Function signature for applying a function to the contained value for side effects. If the container holds a value, the function is called with that value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/undefined.mdx#2025-04-18_snippet_9\n\nLANGUAGE: res\nCODE:\n```\nlet iter: (t<'a>, (. 'a) => unit) => unit\n```\n\n----------------------------------------\n\nTITLE: Get Length of Float32Array\nDESCRIPTION: Returns the number of elements in the Float32Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\nlet length: t => int\n```\n\n----------------------------------------\n\nTITLE: Getting the size of a MapDict\nDESCRIPTION: Function signature for getting the number of key-value pairs in a map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_20\n\nLANGUAGE: reason\nCODE:\n```\nlet size: t('k, 'a, 'id) => int;\n```\n\n----------------------------------------\n\nTITLE: Stable Sort Function Signature\nDESCRIPTION: Function signature for performing a stable sort on an array of strings, returning a new sorted array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/sort-array-string.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nlet stableSort: array<element> => array<element>\n```\n\n----------------------------------------\n\nTITLE: Copying a Belt.HashMap.String instance in ReScript\nDESCRIPTION: Creates a new hash map with the same key-value pairs as the original using the copy function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/hash-map-string.mdx#2025-04-18_snippet_5\n\nLANGUAGE: ReScript\nCODE:\n```\nlet copy: t<'a> => t<'a>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet hMap1 = Belt.HashMap.String.fromArray([(\"1\", \"1\"), (\"2\", \"2\")])\nlet hMap2 = Belt.HashMap.String.copy(hMap1)\n\nBelt.HashMap.String.set(hMap2, \"2\", \"3\")\n\nBelt.HashMap.String.get(hMap1, \"2\") != Belt.HashMap.String.get(hMap2, \"2\")\n```\n\n----------------------------------------\n\nTITLE: Iterating over HashSetInt with uncurried function in ReScript\nDESCRIPTION: Applies an uncurried function to each element of the HashSetInt.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-set-int.mdx#2025-04-18_snippet_9\n\nLANGUAGE: ReScript\nCODE:\n```\nlet forEachU: (t, [@bs] (key => unit)) => unit;\n```\n\n----------------------------------------\n\nTITLE: Finding the minimum key in MapDict\nDESCRIPTION: Function signature for finding the smallest key in a map, returning an option.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_26\n\nLANGUAGE: reason\nCODE:\n```\nlet minKey: t('k, 'a, 'b) => option('k);\n```\n\n----------------------------------------\n\nTITLE: Example of Checking Empty String Sets in ReScript\nDESCRIPTION: Demonstrates how to check if a string set is empty using the isEmpty function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-string.mdx#2025-04-18_snippet_8\n\nLANGUAGE: reasonml\nCODE:\n```\nlet empty = Belt.Set.String.fromArray([||]);\nlet notEmpty = Belt.Set.String.fromArray([|\"apple\"|]);\n\nBelt.Set.String.isEmpty(empty); /* true */\nBelt.Set.String.isEmpty(notEmpty); /* false */\n```\n\n----------------------------------------\n\nTITLE: Filter Operations for Float64Array\nDESCRIPTION: Functions to create a new Float64Array with elements that pass a predicate function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-64-array.mdx#2025-04-18_snippet_16\n\nLANGUAGE: rescript\nCODE:\n```\nlet filter: ((. elt) => bool, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet filteri: ((. elt, int) => bool, t) => t\n```\n\n----------------------------------------\n\nTITLE: Using bind with Nullable values in ReScript\nDESCRIPTION: Example of using the 'bind' function to transform a potentially null/undefined string by appending 'world!' to it if it exists.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/nullable.mdx#2025-04-18_snippet_7\n\nLANGUAGE: reason\nCODE:\n```\nlet maybeGreetWorld = (maybeGreeting: Js.null_undefined(string)) =>\n  Js.Nullable.bind(maybeGreeting, [@bs] greeting => greeting ++ \" world!\");\n```\n\n----------------------------------------\n\nTITLE: List Left Fold Function Signature\nDESCRIPTION: Function to fold a list from left to right, applying a function to an accumulator and each element. Application order is left to right, tail-recursive.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/list.mdx#2025-04-18_snippet_13\n\nLANGUAGE: ReScript\nCODE:\n```\nlet foldLeft: ((. 'a, 'b) => 'a, 'a, list('b)) => 'a;\n```\n\n----------------------------------------\n\nTITLE: Create Subarray from Position with Same Buffer\nDESCRIPTION: Returns a new typed array view of the same buffer with elements from the starting position to the end.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_type-s.mdx#2025-04-18_snippet_29\n\nLANGUAGE: res\nCODE:\n```\nlet subarrayFrom: (int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Unsafe Array Element Access (unsafe_get) in ReScript\nDESCRIPTION: Function that provides unchecked access to array elements. Returns undefined for out-of-bounds indices.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/array-2.mdx#2025-04-18_snippet_21\n\nLANGUAGE: reasonml\nCODE:\n```\nlet unsafe_get: (array('a), int) => 'a;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet arr = [|100, 101, 102, 103|];\nJs.Array2.unsafe_get(arr, 3) == 103;\nJs.Array2.unsafe_get(arr, 4);\n```\n\n----------------------------------------\n\nTITLE: Cleaning a ReScript Project in Shell\nDESCRIPTION: Shows how to clean a ReScript project using the 'rescript clean' command, which is useful for resolving stale build issues.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/build-overview.mdx#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nrescript clean\n```\n\n----------------------------------------\n\nTITLE: Descending For Loop Structure in ReScript\nDESCRIPTION: The structure of a descending for loop in ReScript using the 'downto' keyword.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/control-flow.mdx#2025-04-18_snippet_6\n\nLANGUAGE: res\nCODE:\n```\nfor i in startValueInclusive downto endValueInclusive {\n  Console.log(i)\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nfor(var i = startValueInclusive; i >= endValueInclusive; --i){\n  console.log(i);\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Substring between Indices in ReScript\nDESCRIPTION: The substring function returns characters between two specified indices. It handles cases where start is greater than finish by swapping the indices.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string-2.mdx#2025-04-18_snippet_23\n\nLANGUAGE: reason\nCODE:\n```\nlet substring: (t, ~from: int, ~to_: int) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nJs.String2.substring(\"playground\", ~from=3, ~to_=6) == \"ygr\";\nJs.String2.substring(\"playground\", ~from=6, ~to_=3) == \"ygr\";\nJs.String2.substring(\"playground\", ~from=4, ~to_=12) == \"ground\";\n```\n\n----------------------------------------\n\nTITLE: Unsafe Vector Element Access in ReScript\nDESCRIPTION: Retrieves an element from a vector without bounds checking. Use with caution.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/vector.mdx#2025-04-18_snippet_19\n\nLANGUAGE: ReScript\nCODE:\n```\nlet unsafe_get: (t('a), int) => 'a;\n```\n\n----------------------------------------\n\nTITLE: Int32Array Byte Size Constant\nDESCRIPTION: Constant for the number of bytes per element in an Int32Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-32-array.mdx#2025-04-18_snippet_16\n\nLANGUAGE: rescript\nCODE:\n```\nlet _BYTES_PER_ELEMENT: int\n```\n\n----------------------------------------\n\nTITLE: Type Testing Function in ReScript\nDESCRIPTION: Function that tests if a value matches a specified type. It takes a value and a type representation and returns a boolean indicating if the value conforms to that type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/types.mdx#2025-04-18_snippet_6\n\nLANGUAGE: res\nCODE:\n```\nlet test: ('a, t<'b>) => bool\n```\n\n----------------------------------------\n\nTITLE: Defining Tagged Type Union for JavaScript Types in ReScript\nDESCRIPTION: Defines a variant type that represents all JavaScript types with their actual values (where applicable), used for type classification.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/types.mdx#2025-04-18_snippet_7\n\nLANGUAGE: res\nCODE:\n```\ntype tagged_t =\n  | JSFalse\n  | JSTrue\n  | JSNull\n  | JSUndefined\n  | JSNumber(float)\n  | JSString(string)\n  | JSFunction(function_val)\n  | JSObject(obj_val)\n  | JSSymbol(symbol)\n```\n\n----------------------------------------\n\nTITLE: Merging MapDict instances (uncurried)\nDESCRIPTION: Function signature for merging two maps using an uncurried function to resolve conflicts.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_44\n\nLANGUAGE: reason\nCODE:\n```\nlet mergeU:\n  (\n    t('a, 'b, 'id),\n    t('a, 'c, 'id),\n    [@bs] (('a, option('b), option('c)) => option('d)),\n    ~cmp: cmp('a, 'id)\n  ) =>\n  t('a, 'd, 'id);\n```\n\n----------------------------------------\n\nTITLE: Converting Null_undefined to Option in ReScript\nDESCRIPTION: Defines the 'toOption' function that converts a Js.null_undefined('a) to option('a).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/null-undefined.mdx#2025-04-18_snippet_12\n\nLANGUAGE: reason\nCODE:\n```\nlet toOption: t('a) => option('a);\n```\n\n----------------------------------------\n\nTITLE: Accessing Array Size in ReScript\nDESCRIPTION: Alias for Belt_Array.length that returns the size of the array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/array.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reason\nCODE:\n```\nlet size: array('a) => int;\n```\n\n----------------------------------------\n\nTITLE: Comparing MutableMaps in ReScript\nDESCRIPTION: Functions for comparing two mutable maps, including uncurried and curried versions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-map.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ReScript\nCODE:\n```\nlet cmpU: (t<'k, 'a, 'id>, t<'k, 'a, 'id>, (. 'a, 'a) => int) => int\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet cmp: (t<'k, 'a, 'id>, t<'k, 'a, 'id>, ('a, 'a) => int) => int\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet eqU: (t<'k, 'a, 'id>, t<'k, 'a, 'id>, (. 'a, 'a) => bool) => bool\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet eq: (t<'k, 'a, 'id>, t<'k, 'a, 'id>, ('a, 'a) => bool) => bool\n```\n\n----------------------------------------\n\nTITLE: Retrieving Undefined Value from MutableSet in ReScript\nDESCRIPTION: Similar to get but returns undefined when the element does not exist in the set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_17\n\nLANGUAGE: reason\nCODE:\n```\nlet getUndefined: (t, value) => Js.undefined<value>\n```\n\n----------------------------------------\n\nTITLE: Defining Timer Type Definitions in ReScript\nDESCRIPTION: Type definitions for interval and timeout IDs used by timer functions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/global.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype intervalId\ntype timeoutId\n```\n\n----------------------------------------\n\nTITLE: Sort Float32Array with Custom Comparator\nDESCRIPTION: Sorts the elements of the Float32Array in-place using a custom comparator function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-32-array.mdx#2025-04-18_snippet_17\n\nLANGUAGE: rescript\nCODE:\n```\nlet sortInPlaceWith: ((. elt, elt) => int, t) => t;\n```\n\n----------------------------------------\n\nTITLE: Converting Int16Array to String in ReScript\nDESCRIPTION: Functions for converting an Int16Array to string representations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_int-16-array.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nlet join: t => string\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet joinWith: (string, t) => string\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet toString: t => string\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet toLocaleString: t => string\n```\n\n----------------------------------------\n\nTITLE: Implementing Upper Bound Polymorphic Variants in ReScript\nDESCRIPTION: This snippet shows upper bound ([<]) polymorphic variants in ReScript, which restrict the set of constructors that can be used. The validRed type defines that only Fire, Crimson, and Ash constructors are allowed in extensions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/polymorphic-variant.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\ntype validRed<'a> = [< #Fire | #Crimson | #Ash] as 'a\ntype myReds = validRed<[#Ash]>\n\n// This will fail due to unlisted constructor not defined by the lower bound\ntype notWorking = validRed<[#Purple]>\n```\n\n----------------------------------------\n\nTITLE: Basic Array Operations\nDESCRIPTION: Core array operations including get, set, buffer access, and length properties.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_float-64-array.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet unsafe_get: (t, int) => elt\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet unsafe_set: (t, int, elt) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet buffer: t => Js_typed_array2.array_buffer\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet byteLength: t => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet byteOffset: t => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet length: t => int\n```\n\n----------------------------------------\n\nTITLE: HashSet Size Operation - ReScript\nDESCRIPTION: Returns the number of elements in the HashSet.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-set-int.mdx#2025-04-18_snippet_13\n\nLANGUAGE: rescript\nCODE:\n```\nlet size: t => int\n```\n\n----------------------------------------\n\nTITLE: Converting Float to Int in ReScript\nDESCRIPTION: Converts a given float to an int using Belt.Float.toInt function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/float.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\nlet toInt: float => int;\n```\n\nLANGUAGE: reason\nCODE:\n```\nJs.log(Belt.Float.toInt(1.0) === 1); /* true */\n```\n\n----------------------------------------\n\nTITLE: Creating an empty set in ReScript with MutableSetInt\nDESCRIPTION: Creates and returns an empty integer set. This is the basic constructor for the MutableSetInt data structure.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet make: unit => t;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet set = Belt.MutableSet.Int.make();\n```\n\n----------------------------------------\n\nTITLE: Joining Array Elements with join in ReScript\nDESCRIPTION: Function signature for join that concatenates all elements of a Uint8Array into a string using the default separator.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_21\n\nLANGUAGE: rescript\nCODE:\n```\nlet join: t => string\n```\n\n----------------------------------------\n\nTITLE: Buffer and Memory Properties in Int16Array\nDESCRIPTION: Provides functions to access the underlying buffer and memory-related properties.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-16-array.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nlet buffer: t => Js_typed_array.array_buffer\n```\n\nLANGUAGE: res\nCODE:\n```\nlet byteLength: t => int\n```\n\nLANGUAGE: res\nCODE:\n```\nlet byteOffset: t => int\n```\n\n----------------------------------------\n\nTITLE: Finding element index in Uint8ClampedArray with indexed predicate\nDESCRIPTION: Returns the index of the first element in the array that satisfies the provided testing function with index, or -1 if no element is found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_39\n\nLANGUAGE: res\nCODE:\n```\nlet findIndexi: ((. elt, int) => bool, t) => int\n```\n\n----------------------------------------\n\nTITLE: HashSet Remove Operation - ReScript\nDESCRIPTION: Removes a key from the HashSet if it exists.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-set-int.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\nlet remove: (t, key) => unit\n```\n\n----------------------------------------\n\nTITLE: Example of toPrecision with Regular Number\nDESCRIPTION: Shows how toPrecision formats a regular number, preserving all significant digits.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/float.mdx#2025-04-18_snippet_19\n\nLANGUAGE: re\nCODE:\n```\n/* prints \"12345.6789\" */\nJs.log @@ Js.Float.toPrecision(12345.6789);\n```\n\n----------------------------------------\n\nTITLE: Adding element to MutableSetInt\nDESCRIPTION: Adds an integer element to the set. If the element already exists, the set remains unchanged.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\nlet add: (t, value) => unit\n```\n\n----------------------------------------\n\nTITLE: Finding Minimum Key-Value Pair in ReScript MapInt Module\nDESCRIPTION: Function signature for finding the minimum key-value pair in the map, returning an option.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-int.mdx#2025-04-18_snippet_29\n\nLANGUAGE: rescript\nCODE:\n```\nlet minimum: t<'v> => option<(key, 'v)>\n```\n\n----------------------------------------\n\nTITLE: Defining Storage Type in ReScript\nDESCRIPTION: Defines an abstract type 't' representing storage objects in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/dom/storage.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\ntype t\n```\n\n----------------------------------------\n\nTITLE: Retrieving Maximum Value from Belt.MutableSet.String in ReScript\nDESCRIPTION: The 'maximum' function returns the maximum value of the collection as an option. It returns None if the collection is empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_37\n\nLANGUAGE: reasonml\nCODE:\n```\nlet maximum: t => option(value);\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet s0 = Belt.MutableSet.String.make();\nlet s1 = Belt.MutableSet.String.fromArray([|\"apple\", \"orange\"|]);\n\ns0->Belt.MutableSet.String.maximum; /* None */\ns1->Belt.MutableSet.String.maximum; /* Some(\"orange\") */\n```\n\n----------------------------------------\n\nTITLE: Using Abstract Type Setters in ReScript\nDESCRIPTION: Shows how to use the generated setter function to update mutable fields in an abstract type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/generate-converters-accessors.mdx#2025-04-18_snippet_15\n\nLANGUAGE: rescript\nCODE:\n```\nlet joe = person(~name=\"Joe\", ~age=20, ~job=\"teacher\");\nageSet(joe, 21);\n```\n\n----------------------------------------\n\nTITLE: Creating Date from Float in ReScript\nDESCRIPTION: Function signature for fromFloat, which creates a date from a float representing milliseconds since the epoch.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromFloat: float => t\n```\n\n----------------------------------------\n\nTITLE: Performing set operations on Belt.MutableSet.Int in ReScript\nDESCRIPTION: Performs union, intersection, and difference operations on sets using the union, intersect, and diff functions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_11\n\nLANGUAGE: res\nCODE:\n```\nlet union: (t, t) => t\nlet intersect: (t, t) => t\nlet diff: (t, t) => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet s0 = Belt.MutableSet.Int.fromArray([5, 2, 3, 5, 6])\nlet s1 = Belt.MutableSet.Int.fromArray([5, 2, 3, 1, 5, 4])\nlet union = Belt.MutableSet.Int.union(s0, s1)\nunion->Belt.MutableSet.Int.toArray /* [1,2,3,4,5,6] */\n\nlet intersect = Belt.MutableSet.Int.intersect(s0, s1)\nintersect->Belt.MutableSet.Int.toArray /* [2,3,5] */\n\nBelt.MutableSet.Int.toArray(Belt.MutableSet.Int.diff(s0, s1)) /* [6] */\nBelt.MutableSet.Int.toArray(Belt.MutableSet.Int.diff(s1, s0)) /* [1,4] */\n```\n\n----------------------------------------\n\nTITLE: Retrieving Primitive Value of Date in ReScript\nDESCRIPTION: Function signature for valueOf, which returns the primitive value of a date as a float.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet valueOf: t => float\n```\n\n----------------------------------------\n\nTITLE: Configuring External Stdlib in bsconfig.json\nDESCRIPTION: JSON configuration for bsconfig.json that sets @rescript/std as the external stdlib, directing the compiler to use this package for imports in the generated JavaScript code.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/build-external-stdlib.mdx#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...\n  \"external-stdlib\" : \"@rescript/std\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Uint16Array Properties in ReScript\nDESCRIPTION: Functions to access various properties of a Uint16Array, such as buffer, byte length, and byte offset.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\nlet buffer: t => Js_typed_array.array_buffer;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet byteLength: t => int;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet byteOffset: t => int;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet length: t => int;\n```\n\n----------------------------------------\n\nTITLE: Reducing TypedArray Elements with Index in ReScript\nDESCRIPTION: Function signature for applying a function that receives the accumulator, current element, and its index against each element in a Uint8ClampedArray to reduce it to a single value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_45\n\nLANGUAGE: res\nCODE:\n```\nlet reducei: ((. 'b, elt, int) => 'b, 'b, t) => 'b\n```\n\n----------------------------------------\n\nTITLE: Checking Top Element with Option in ReScript\nDESCRIPTION: Function to return the top element of a stack without removing it, wrapped in an option type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-stack.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\nlet top: t('a) => option('a);\n```\n\n----------------------------------------\n\nTITLE: Vector Push Operation\nDESCRIPTION: Operation to push an element to the back of a vector.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/vector.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\nlet pushBack: ('a, t<'a>) => unit\n```\n\n----------------------------------------\n\nTITLE: Getting Undefined Values from MutableSet in ReScript\nDESCRIPTION: The getUndefined method returns the value if it exists in the set, or undefined if it doesn't exist.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rescript\nCODE:\n```\nlet getUndefined: (t, value) => Js.undefined<value>\n```\n\n----------------------------------------\n\nTITLE: Splitting Belt.MutableSet.String in ReScript\nDESCRIPTION: The 'split' function returns a tuple ((smaller, larger), present), where 'present' is true when the element exists in the set. It splits the set into smaller and larger subsets based on the given value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_42\n\nLANGUAGE: reasonml\nCODE:\n```\nlet split: (t, value) => ((t, t), bool);\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet s0 = Belt.MutableSet.String.fromArray([|\"apple\", \"banana\", \"orange\"|]);\n\nlet ((smaller, larger), present) = s0->Belt.MutableSet.String.split(\"banana\");\n\npresent; /* true */\nsmaller->Belt.MutableSet.String.toArray; /* [|\"apple\"|] */\nlarger->Belt.MutableSet.String.toArray; /* [|\"orange\"|] */\n```\n\n----------------------------------------\n\nTITLE: Testing Any Value for Undefined in ReScript\nDESCRIPTION: Function signature for testing if any value is undefined. Introduced in version 1.6.1, this function returns true if the given value is empty (undefined).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/undefined.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\nlet testAny: 'a => bool\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler Warnings in ReScript\nDESCRIPTION: Selectively enables or disables specific warnings and can turn warnings into errors. This example disables warnings 44 and 102 while turning warning 5 into a hard error.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/build-configuration.mdx#2025-04-18_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"warnings\": {\n    \"number\": \"-44-102\",\n    \"error\": \"+5\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Array Elements\nDESCRIPTION: Creates a new array with all elements that pass the provided function test.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_34\n\nLANGUAGE: rescript\nCODE:\n```\nlet filter: ((. elt) => bool, t) => t\n```\n\n----------------------------------------\n\nTITLE: Mapping values with curried function in ReScript\nDESCRIPTION: Function signature for mapping values in a mutable map using a curried function. Applies the function to all bindings in increasing order of keys.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_43\n\nLANGUAGE: ReScript\nCODE:\n```\nlet map: (t<'a>, 'a => 'b) => t<'b>\n```\n\n----------------------------------------\n\nTITLE: Getting Optional Value from MutableSet in ReScript\nDESCRIPTION: Retrieves a value from the MutableSet, returning an option type. Returns None if the element doesn't exist.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_39\n\nLANGUAGE: reasonml\nCODE:\n```\nlet get: (t, value) => option(value);\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet s0 = Belt.MutableSet.Int.fromArray([|1,2,3,4,5|]);\n\ns0->Belt.MutableSet.Int.get(3); /* Some(3) */\ns0->Belt.MutableSet.Int.get(20); /* None */\n```\n\n----------------------------------------\n\nTITLE: RegExp Execution Functions\nDESCRIPTION: Functions for executing RegExp patterns on strings.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/re.mdx#2025-04-18_snippet_13\n\nLANGUAGE: res\nCODE:\n```\nlet exec_: (t, string) => option<result>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet re = %re(\"/quick\\s(brown).+?(jumps)/ig\")\nlet result = Js.Re.exec_(re, \"The Quick Brown Fox Jumps Over The Lazy Dog\")\n```\n\nLANGUAGE: res\nCODE:\n```\nlet exec: (string, t) => option<result>\n```\n\n----------------------------------------\n\nTITLE: Find First Matching Element\nDESCRIPTION: Returns the first element in the typed array that satisfies the provided testing function, or undefined if no element is found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_type-s.mdx#2025-04-18_snippet_36\n\nLANGUAGE: res\nCODE:\n```\nlet find: ((. elt) => bool, t) => Js.undefined<elt>\n```\n\n----------------------------------------\n\nTITLE: Using castToArrayLike Method Example in ReScript\nDESCRIPTION: Demonstrates how to convert a string to an array-like structure and then process it with Js.Array2.fromMap to create an array of individual characters.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/string-2.mdx#2025-04-18_snippet_39\n\nLANGUAGE: res\nCODE:\n```\nlet s = \"abcde\"\nlet arr = Js.Array2.fromMap(Js.String2.castToArrayLike(s), x => x)\narr == [\"a\", \"b\", \"c\", \"d\", \"e\"]\n```\n\n----------------------------------------\n\nTITLE: Converting Option Bool using Basic Pattern Matching\nDESCRIPTION: Second iteration using pattern matching with a nested ternary operator. Better than if-else but still not optimal.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_22\n\nLANGUAGE: rescript\nCODE:\n```\nlet optionBoolToBool = opt => {\n  switch opt {\n  | None => false\n  | Some(a) => a ? true : false\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction optionBoolToBool(opt) {\n  if (opt !== undefined && opt) {\n    return true;\n  } else {\n    return false;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using startsWithFrom function in ReScript\nDESCRIPTION: Determines whether a string begins with specified characters from a given position. Allows checking if a substring starts at a specific index in the string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/string-2.mdx#2025-04-18_snippet_25\n\nLANGUAGE: rescript\nCODE:\n```\nlet startsWithFrom: (t, t, int) => bool\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.String2.startsWithFrom(\"BuckleScript\", \"kle\", 3) == true\nJs.String2.startsWithFrom(\"BuckleScript\", \"\", 3) == true\nJs.String2.startsWithFrom(\"JavaScript\", \"Buckle\", 2) == false\n```\n\n----------------------------------------\n\nTITLE: Executing Lazy Values with Let Binding in ReScript\nDESCRIPTION: Shows how to use let binding with pattern matching to execute a lazy computation and bind its result to a variable.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/lazy-values.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet lazy(result) = expensiveFilesRead\nConsole.log(result)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = CamlinternalLazy.force(expensiveFilesRead);\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Integer to Exponential String with Precision in ReScript\nDESCRIPTION: Converts an integer to exponential notation with specified precision. The digits parameter controls decimal places and must be between 0 and 20.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/int.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reason\nCODE:\n```\nlet toExponentialWithPrecision: (int, ~digits: int) => string;\n```\n\nLANGUAGE: reason\nCODE:\n```\n/* prints \"7.70e+1\" */\nJs.log(Js.Int.toExponentialWithPrecision(77, ~digits=2));\n\n/* prints \"5.68e+3\" */\nJs.log(Js.Int.toExponentialWithPrecision(5678, ~digits=2));\n```\n\n----------------------------------------\n\nTITLE: Checking String Inclusion from Index in ReScript\nDESCRIPTION: The 'includesFrom' function checks if a string contains a specified substring starting from a given index. It takes two strings and an integer start index, returning a boolean indicating if the substring is found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/string-2.mdx#2025-04-18_snippet_16\n\nLANGUAGE: rescript\nCODE:\n```\nlet includesFrom: (t, t, int) => bool\n```\n\n----------------------------------------\n\nTITLE: Creating map from array in MapString module (ReScript)\nDESCRIPTION: Function to create a map from an array of key-value pairs.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-string.mdx#2025-04-18_snippet_22\n\nLANGUAGE: reason\nCODE:\n```\nlet fromArray: array((key, 'v)) => t('v);\n```\n\n----------------------------------------\n\nTITLE: Manipulating Float32Array Data in ReScript\nDESCRIPTION: Functions for in-place manipulation of Float32Array data, including copying, filling, and reversing.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet copyWithin: (~to_: int, t) => t;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet copyWithinFrom: (~to_: int, ~from: int, t) => t;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet copyWithinFromRange: (~to_: int, ~start: int, ~end_: int, t) => t;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fillInPlace: (elt, t) => t;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fillFromInPlace: (elt, ~from: int, t) => t;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fillRangeInPlace: (elt, ~start: int, ~end_: int, t) => t;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet reverseInPlace: t => t;\n```\n\n----------------------------------------\n\nTITLE: Configuring Uncurried Mode in rescript.json\nDESCRIPTION: JSON configuration to disable uncurried mode in ReScript 11, which is enabled by default. This setting can be used for a minimal migration path when not ready to adapt code to uncurried functions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/migrate-to-v11.mdx#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"uncurried\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Uint32Array types in ReScript\nDESCRIPTION: Defines the core types for UInt32Array including element type (int), the typed array type, and an alias t for convenience.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype elt = int\ntype typed_array<'a> = Js_typed_array2.Uint32Array.typed_array<'a>\ntype t = typed_array<elt>\n```\n\n----------------------------------------\n\nTITLE: HashMap Iteration Functions\nDESCRIPTION: Functions for iterating over hash map contents including forEach, reduce, and keepMapInPlace.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-map.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\nlet forEach: (t<'key, 'value, 'id>, ('key, 'value) => unit) => unit\nlet reduce: (t<'key, 'value, 'id>, 'c, ('c, 'key, 'value) => 'c) => 'c\nlet keepMapInPlace: (t<'key, 'value, 'id>, ('key, 'value) => option<'value>) => unit\n```\n\n----------------------------------------\n\nTITLE: Basic ReScript Configuration\nDESCRIPTION: JSON configuration for ReScript project setup in bsconfig.json.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/converting-from-js.mdx#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sources\": {\n    \"dir\" : \"src\",\n    \"subdirs\" : true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dictionary Values Function\nDESCRIPTION: Function for getting all values from a dictionary as an array\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/dict.mdx#2025-04-18_snippet_14\n\nLANGUAGE: reason\nCODE:\n```\nlet values: t('a) => array('a);\n```\n\n----------------------------------------\n\nTITLE: HashSet Contains Check - ReScript\nDESCRIPTION: Checks if a key exists in the HashSet.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-set-int.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nlet has: (t, key) => bool\n```\n\n----------------------------------------\n\nTITLE: Generated TypeScript for Color Example\nDESCRIPTION: The TypeScript file automatically generated by genType from the Color.res ReScript file, showing how the variant type is represented as a string union.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/typescript-integration.mdx#2025-04-18_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n// src/Color.gen.tsx\n\n/* TypeScript file generated from Color.res by genType. */\n\n/* eslint-disable */\n/* tslint:disable */\n\nimport * as ColorJS from \"./Color.res.js\";\n\nexport type color = \"Red\" | \"Blue\";\n\nexport const printColorMessage: (\n  color: color\n) => void = ColorJS.printColorMessage as any;\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Conditional Variables\nDESCRIPTION: Example showing how to add a custom conditional variable MY_VAR to be used in conditional compilation using the bsc compiler's -bs-D flag.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/reason-compiler/latest/conditional-compilation.mdx#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n> bsc.exe -bs-D MY_VAR=\"bla\" -bs-list-conditionals\nOCAML_PATCH \"BS\"\nBS_VERSION \"1.2.1\"\nOS_TYPE \"Unix\"\nBS true\nMY_VAR=\"bla\"\n...\n```\n\n----------------------------------------\n\nTITLE: Writing Float Values to DataView in ReScript\nDESCRIPTION: Functions to write 32-bit and 64-bit floating-point values to a DataView, with options for endianness.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_data-view.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet setFloat32: (t, int, float) => unit;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet setFloat32LittleEndian: (t, int, float) => unit;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet setFloat64: (t, int, float) => unit;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet setFloat64LittleEndian: (t, int, float) => unit;\n```\n\n----------------------------------------\n\nTITLE: Concatenating Two Strings in ReScript\nDESCRIPTION: The concat function combines two strings and returns a new string. The second string is appended to the first.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string.mdx#2025-04-18_snippet_11\n\nLANGUAGE: reason\nCODE:\n```\nlet concat: (t, t) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nJs.String.concat(\"bell\", \"cow\") == \"cowbell\";\n```\n\n----------------------------------------\n\nTITLE: Defining Object Value Type in ReScript\nDESCRIPTION: Defines a ReScript type representing JavaScript object values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/types.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\ntype obj_val\n```\n\n----------------------------------------\n\nTITLE: Stable Sort Function Signatures\nDESCRIPTION: Function signatures for stable array sorting returning a new array, with both uncurried and curried versions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/sort-array.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet stableSortByU: (array<'a>, (. 'a, 'a) => int) => array<'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet stableSortBy: (array<'a>, ('a, 'a) => int) => array<'a>\n```\n\n----------------------------------------\n\nTITLE: Creating Int8Array from Array-Like Object\nDESCRIPTION: Function signature to create a new Int8Array from an array-like object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_56\n\nLANGUAGE: res\nCODE:\n```\nlet from: Js_typed_array.array_like<elt> => t\n```\n\n----------------------------------------\n\nTITLE: Find Index of Element in Float32Array by Indexed Condition\nDESCRIPTION: Returns the index of the first element in the Float32Array that satisfies the provided testing function that includes the element index, or -1 if not found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_39\n\nLANGUAGE: rescript\nCODE:\n```\nlet findIndexi: ((. elt, int) => bool, t) => int\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching Pitfall with Variable Names in ReScript\nDESCRIPTION: Illustrates a common pitfall in ReScript pattern matching where a variable in a pattern is treated as a binding assignment rather than a value comparison, which might lead to unexpected behavior.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_14\n\nLANGUAGE: res\nCODE:\n```\nlet coordinates = (10, 20, 30)\nlet centerY = 20\nswitch coordinates {\n| (x, _centerY, _) => Console.log(x)\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar coordinates = [10, 20, 30];\nvar centerY = 20;\n\nconsole.log(10);\n```\n\n----------------------------------------\n\nTITLE: Converting Float to Fixed-Point Notation\nDESCRIPTION: Function that formats a float using fixed-point notation without specifying precision.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/float.mdx#2025-04-18_snippet_12\n\nLANGUAGE: re\nCODE:\n```\nlet toFixed: float => string;\n```\n\n----------------------------------------\n\nTITLE: Extracting Array Slice\nDESCRIPTION: Returns a new array containing elements from the start index (inclusive) to the end index (exclusive).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_25\n\nLANGUAGE: rescript\nCODE:\n```\nlet slice: (~start: int, ~end_: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Using sin function to calculate sine in ReScript\nDESCRIPTION: The sin function returns the sine of its argument, which must be specified in radians. It takes a float as input and returns a float.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/math.mdx#2025-04-18_snippet_30\n\nLANGUAGE: res\nCODE:\n```\nlet sin: float => float\n```\n\n----------------------------------------\n\nTITLE: Building ReScript Project\nDESCRIPTION: Command to build the entire ReScript project and its dependencies.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/build-overview.mdx#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nbsb -make-world\n```\n\n----------------------------------------\n\nTITLE: Defining Set Type Signature in ReasonML\nDESCRIPTION: Shows the type definition for the Belt.Set.t type, which contains a value type and an identity type parameter for the collection.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reasonml\nCODE:\n```\ntype t('value, 'identity);\n```\n\n----------------------------------------\n\nTITLE: Implementing Miscellaneous Math Functions in ReScript\nDESCRIPTION: Defines various mathematical functions such as cbrt, clz32, cos, cosh, exp, and expm1, corresponding to their JavaScript Math counterparts.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/math.mdx#2025-04-18_snippet_5\n\nLANGUAGE: ReScript\nCODE:\n```\nlet cbrt: float => float\nlet clz32: int => int\nlet cos: float => float\nlet cosh: float => float\nlet exp: float => float\nlet expm1: float => float\n```\n\n----------------------------------------\n\nTITLE: Creating subarray from UInt32Array from position\nDESCRIPTION: Defines a function that returns a new typed array sharing the same ArrayBuffer, starting from the given index to the end.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_29\n\nLANGUAGE: rescript\nCODE:\n```\nlet subarrayFrom: (int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Creating a HashSetString from an array\nDESCRIPTION: Creates a new HashSetString containing all the unique string keys from the input array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/hash-set-string.mdx#2025-04-18_snippet_16\n\nLANGUAGE: res\nCODE:\n```\nlet fromArray: array<key> => t\n```\n\n----------------------------------------\n\nTITLE: Copying a MutableSet Example in ReasonML\nDESCRIPTION: Example showing how to create a copy of an existing MutableSet instance.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_8\n\nLANGUAGE: reasonml\nCODE:\n```\nmodule IntCmp =\n  Belt.Id.MakeComparable({\n    type t = int;\n    let cmp = Pervasives.compare;\n  });\n\nlet s0 = Belt.MutableSet.fromArray([|1, 3, 2, 4|], ~id=(module IntCmp))\n\nlet copied = s0->Belt.MutableSet.copy;\ncopied->Belt.MutableSet.toArray /* [|1, 2, 3, 4|] */\n```\n\n----------------------------------------\n\nTITLE: Checking String Start from Index in ReScript\nDESCRIPTION: The startsWithFrom function checks if a string starts with a specified substring from a given index. It handles negative indices and returns a boolean result.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string-2.mdx#2025-04-18_snippet_20\n\nLANGUAGE: reason\nCODE:\n```\nlet startsWithFrom: (t, t, int) => bool;\n```\n\nLANGUAGE: reason\nCODE:\n```\nJs.String2.startsWithFrom(\"BuckleScript\", \"kle\", 3) == true;\nJs.String2.startsWithFrom(\"BuckleScript\", \"\", 3) == true;\nJs.String2.startsWithFrom(\"JavaScript\", \"Buckle\", 2) == false;\n```\n\n----------------------------------------\n\nTITLE: Checking map equality with uncurried function in ReScript\nDESCRIPTION: Tests whether two maps are equal using an uncurried equality function for comparing values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_8\n\nLANGUAGE: reasonml\nCODE:\n```\nlet eqU: (t('a), t('a), [@bs] (('a, 'a) => bool)) => bool;\n```\n\n----------------------------------------\n\nTITLE: Declaring valueOf Function for Date in ReScript\nDESCRIPTION: Declares the valueOf function, which returns the primitive value of a date as a float.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet valueOf: t => float\n```\n\n----------------------------------------\n\nTITLE: Adding an element with check in ReScript with MutableSetInt\nDESCRIPTION: Adds the specified value to the set and returns a boolean indicating whether the element was actually added (wasn't present before).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\nlet addCheck: (t, value) => bool;\n```\n\n----------------------------------------\n\nTITLE: Getting Match Index from RegExp Result\nDESCRIPTION: Function that returns the 0-based index of the match in the original input string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/re.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reason\nCODE:\n```\nlet index: result => int;\n```\n\n----------------------------------------\n\nTITLE: Writing 32-bit Unsigned Integer (Big Endian)\nDESCRIPTION: Stores an unsigned 32-bit integer at the specified byte offset from the start of the DataView using big-endian format.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_data-view.mdx#2025-04-18_snippet_30\n\nLANGUAGE: reasonml\nCODE:\n```\nlet setUint32: (t, int, int) => unit;\n```\n\n----------------------------------------\n\nTITLE: Computing Floor as Integer in ReScript (Safe)\nDESCRIPTION: Function that returns the largest integer less than or equal to the argument, with results pinned to the int range (-2147483648 to 2147483647).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/math.mdx#2025-04-18_snippet_36\n\nLANGUAGE: reasonml\nCODE:\n```\nlet floor_int: float => int;\n```\n\n----------------------------------------\n\nTITLE: Checking equality with curried function in ReScript\nDESCRIPTION: Function signature for checking equality of two mutable maps using a curried equality function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_9\n\nLANGUAGE: ReScript\nCODE:\n```\nlet eq: (t<'a>, t<'a>, ('a, 'a) => bool) => bool\n```\n\n----------------------------------------\n\nTITLE: Getting value with default in MapString module (ReScript)\nDESCRIPTION: Function to retrieve a value for a given key, returning a default value if the key doesn't exist.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-string.mdx#2025-04-18_snippet_35\n\nLANGUAGE: reason\nCODE:\n```\nlet getWithDefault: (t('v), key, 'v) => 'v;\n```\n\n----------------------------------------\n\nTITLE: Checking Subset Relationship in ReScript MutableSetString\nDESCRIPTION: Tests whether the second set is a subset of the first set. Returns true if every element in the second set exists in the first set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_17\n\nLANGUAGE: reason\nCODE:\n```\nlet subset: (t, t) => bool;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet s0 = Belt.MutableSet.String.fromArray([|\"5\", \"2\", \"3\", \"5\", \"6\"|]);\nlet s1 = Belt.MutableSet.String.fromArray([|\"5\", \"2\", \"3\", \"1\", \"5\", \"4\"|]);\nlet s2 = Belt.MutableSet.String.intersect(s0, s1);\nBelt.MutableSet.String.subset(s2, s0); /* true */\nBelt.MutableSet.String.subset(s2, s1); /* true */\nBelt.MutableSet.String.subset(s1, s0); /* false */\n```\n\n----------------------------------------\n\nTITLE: Accessing sessionStorage in ReScript\nDESCRIPTION: External binding for accessing the browser's sessionStorage object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/dom/storage.mdx#2025-04-18_snippet_8\n\nLANGUAGE: reason\nCODE:\n```\n[@bs.val] external sessionStorage: t = \"sessionStorage\"\n```\n\n----------------------------------------\n\nTITLE: Extracting values from Belt.HashMap.String in ReScript\nDESCRIPTION: Creates an array of values from the hash map using the valuesToArray function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/hash-map-string.mdx#2025-04-18_snippet_15\n\nLANGUAGE: ReScript\nCODE:\n```\nlet valuesToArray: t<'a> => array<'a>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet hMap = Belt.HashMap.String.make(~hintSize=10)\nBelt.HashMap.String.set(hMap, \"1\", \"value1\")\nBelt.HashMap.String.set(hMap, \"2\", \"value2\")\n\nBelt.HashMap.String.valuesToArray(hMap) == [\"value1\", \"value2\"]\n```\n\n----------------------------------------\n\nTITLE: Vector Type Definition in ReScript\nDESCRIPTION: Defines the vector type as an alias for array type with generic parameter.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/vector.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\ntype t<'a> = array<'a>\n```\n\n----------------------------------------\n\nTITLE: Slicing and Copying Int16Array in ReScript\nDESCRIPTION: Functions to create new Int16Arrays from existing ones through slicing and copying.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_int-16-array.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet slice: (~start: int, ~end_: int, t) => t;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet copy: t => t;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet subarray: (~start: int, ~end_: int, t) => t;\n```\n\n----------------------------------------\n\nTITLE: Creating a set from a sorted array in ReScript with MutableSetInt\nDESCRIPTION: Creates a new set from an already sorted array of integer elements. This operation is unsafe if the input array is not properly sorted.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromSortedArrayUnsafe: array(value) => t;\n```\n\n----------------------------------------\n\nTITLE: Using 'module type of' with Include in ReScript\nDESCRIPTION: Demonstrates how to extract module types from existing modules using `module type of` and `include` to create new module types that include all the type definitions from an existing module.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/language_include.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nmodule Message = {\n  let greeting = \"Hello\"\n}\n\nmodule type Greeter = {\n  // Includes the type definitions of Message\n  include module type of Message\n  let greet: string => string\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar Message = {\n  greeting: \"Hello\"\n};\n```\n\n----------------------------------------\n\nTITLE: Converting Date to ISO String in ReScript\nDESCRIPTION: Returns a simplified version of the ISO 8601 format for the date. This function provides a standardized string representation of the date.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_63\n\nLANGUAGE: ReScript\nCODE:\n```\nlet toISOString: t => string\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nJs.Date.toISOString(exampleDate) == \"1973-11-29T21:30:54.321Z\"\n```\n\n----------------------------------------\n\nTITLE: Extracting Keys as Array in ReScript MapInt Module\nDESCRIPTION: Function signature for extracting all keys from the map as an array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-int.mdx#2025-04-18_snippet_23\n\nLANGUAGE: rescript\nCODE:\n```\nlet keysToArray: t<'v> => array<key>\n```\n\n----------------------------------------\n\nTITLE: Finding Last Index of Element from Specific Position in Array in ReScript\nDESCRIPTION: The lastIndexOfFrom function returns the index of the last occurrence of a given value in the array, searching from a specified position down to the start of the array. If the value is not found, it returns -1.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array-2.mdx#2025-04-18_snippet_17\n\nLANGUAGE: rescript\nCODE:\n```\nlet lastIndexOfFrom: (t<'a>, 'a, ~from: int) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.Array2.lastIndexOfFrom([\"a\", \"b\", \"a\", \"c\", \"a\", \"d\"], \"a\", ~from=3) == 2\nJs.Array2.lastIndexOfFrom([\"a\", \"b\", \"a\", \"c\", \"a\", \"d\"], \"c\", ~from=2) == -1\n```\n\n----------------------------------------\n\nTITLE: Using getHours Function in ReScript\nDESCRIPTION: Demonstrates the use of the getHours function to retrieve the hours from the example date, considering the time zone difference.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_23\n\nLANGUAGE: rescript\nCODE:\n```\nJs.Date.getHours(exampleDate) == 22.0 // Vienna is in GMT+01:00\n```\n\n----------------------------------------\n\nTITLE: Checking Top Element with Undefined in ReScript\nDESCRIPTION: Function to return the top element of a stack without removing it, returning JavaScript undefined if the stack is empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-stack.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nlet topUndefined: t('a) => Js.undefined('a);\n```\n\n----------------------------------------\n\nTITLE: Getting Item from Storage in ReScript\nDESCRIPTION: External binding for retrieving an item from storage by key. Returns an option type containing the value if found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/dom/storage.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reason\nCODE:\n```\nexternal getItem: (string, t) => option<string> = \"getItem\"\n```\n\n----------------------------------------\n\nTITLE: Creating a New HashMap in ReScript\nDESCRIPTION: Creates a new hash map using Belt.HashMap.String.make with a hint size parameter.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-map-string.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet make: (~hintSize: int) => t<'b>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet hMap = Belt.HashMap.String.make(~hintSize=10)\n\nBelt.HashMap.String.set(hMap, \"key1\", \"a\")\n```\n\n----------------------------------------\n\nTITLE: Checking internal invariants of MapDict\nDESCRIPTION: Function signature for checking if the map's internal invariants hold (used for debugging).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_38\n\nLANGUAGE: reason\nCODE:\n```\nlet checkInvariantInternal: t('a, 'b, 'c) => unit;\n```\n\n----------------------------------------\n\nTITLE: Dictionary Map Function\nDESCRIPTION: Function for transforming dictionary values using a mapping function\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/dict.mdx#2025-04-18_snippet_17\n\nLANGUAGE: reason\nCODE:\n```\nlet map: ((. 'a) => 'b, t('a)) => t('b);\n```\n\n----------------------------------------\n\nTITLE: Using hypotMany function for generalized Pythagorean equation in ReScript\nDESCRIPTION: The hypotMany function calculates the square root of the sum of squares of multiple numbers. It takes an array of floats as input and returns a float, allowing for more than two items in the calculation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/math.mdx#2025-04-18_snippet_8\n\nLANGUAGE: res\nCODE:\n```\nlet hypotMany: array<float> => float\n```\n\nLANGUAGE: res\nCODE:\n```\nJs.Math.hypotMany([3.0, 4.0, 12.0]) == 13.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Sources in bsconfig.json - Directory with Subdirectories\nDESCRIPTION: Demonstrates how to specify a source directory ('src') along with specific subdirectories to include ('page'). This allows for more granular control over which folders get compiled.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/build-configuration.mdx#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sources\": {\n    \"dir\": \"src\",\n    \"subdirs\": [\"page\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Storage Item - ReScript\nDESCRIPTION: External binding to retrieve an item from storage by key, returning an optional string value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/dom/storage2.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nexternal getItem: (t, string) => option<string> = \"getItem\"\n```\n\n----------------------------------------\n\nTITLE: Map Map Function Signature\nDESCRIPTION: Transforms all values in a map using a mapping function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map.mdx#2025-04-18_snippet_14\n\nLANGUAGE: rescript\nCODE:\n```\nlet map: (t<'k, 'v, 'id>, 'v => 'v2) => t<'k, 'v2, 'id>\n```\n\n----------------------------------------\n\nTITLE: Filtering Set Elements in ReasonML\nDESCRIPTION: Shows how to create a new set containing only elements that satisfy a given predicate function using keep.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set.mdx#2025-04-18_snippet_28\n\nLANGUAGE: reasonml\nCODE:\n```\nlet keep: (t('value, 'id), 'value => bool) => t('value, 'id);\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet isEven = x => x mod 2 == 0;\n\nlet s0 = Belt.Set.fromArray([|1,2,3,4,5|], ~id=(module IntCmp));\nlet s1 = s0->Belt.Set.keep(isEven);\n\ns1->Belt.Set.toArray; /* [|2,4|] */\n```\n\n----------------------------------------\n\nTITLE: Removing Elements from Arrays In-Place in ReScript\nDESCRIPTION: Demonstrates the use of removeFromInPlace and removeCountInPlace to remove elements from arrays. These functions modify the original array and return the removed elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array.mdx#2025-04-18_snippet_6\n\nLANGUAGE: ReScript\nCODE:\n```\nlet arr = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\nJs.Array.removeFromInPlace(~pos=4, arr) == [\"e\", \"f\"]\narr == [\"a\", \"b\", \"c\", \"d\"]\n\nlet arr2 = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\nJs.Array.removeCountInPlace(~pos=2, ~count=3, arr2) == [\"c\", \"d\", \"e\"]\narr2 == [\"a\", \"b\", \"f\"]\n```\n\n----------------------------------------\n\nTITLE: Uncurried every for MapDict\nDESCRIPTION: Function signature for checking if all key-value pairs satisfy a predicate using uncurried function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_16\n\nLANGUAGE: reason\nCODE:\n```\nlet everyU: (t('k, 'a, 'id), [@bs] (('k, 'a) => bool)) => bool;\n```\n\n----------------------------------------\n\nTITLE: Setting Hours in ReScript\nDESCRIPTION: ReScript binding for JavaScript's Date.setHours method. Sets the hours and returns the time value. This function modifies the original Date object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_42\n\nLANGUAGE: res\nCODE:\n```\nlet setHours: (t, float) => float\n```\n\nLANGUAGE: res\nCODE:\n```\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet nextHour = Js.Date.setHours(date1, 22.0)\ndate1 == Js.Date.fromString(\"1973-11-29T22:30:54.321Z00:00\")\nnextHour == Js.Date.getTime(date1)\n```\n\n----------------------------------------\n\nTITLE: Comparing Sets in ReScript MutableSetString\nDESCRIPTION: Provides total ordering between sets, comparing first by size and then by elements in order. Useful for creating sets of sets.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_18\n\nLANGUAGE: reason\nCODE:\n```\nlet cmp: (t, t) => int;\n```\n\n----------------------------------------\n\nTITLE: Reducing HashSetInt with uncurried function in ReScript\nDESCRIPTION: Reduces the HashSetInt to a single value using an uncurried function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-set-int.mdx#2025-04-18_snippet_11\n\nLANGUAGE: ReScript\nCODE:\n```\nlet reduceU: (t, 'c, [@bs] (('c, key) => 'c)) => 'c;\n```\n\n----------------------------------------\n\nTITLE: Defining Map Type in ReScript MapInt Module\nDESCRIPTION: Defines the map type 't' with a generic value type 'value'.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-int.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\ntype t<'value>\n```\n\n----------------------------------------\n\nTITLE: Creating Empty Set in ReScript\nDESCRIPTION: Returns an empty set structure. Used as the starting point for creating string sets.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-string.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reasonml\nCODE:\n```\nlet empty: t;\n```\n\n----------------------------------------\n\nTITLE: Find Element in Array with Index\nDESCRIPTION: Returns the first element in the array that satisfies the provided function test, with access to the element index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-64-array.mdx#2025-04-18_snippet_37\n\nLANGUAGE: reason\nCODE:\n```\nlet findi: ((. elt, int) => bool, t) => Js.undefined(elt);\n```\n\n----------------------------------------\n\nTITLE: Accessing exception name in ReScript\nDESCRIPTION: Function signature for retrieving the name of a JavaScript exception as an optional string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/exn.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet name: t => option<string>\n```\n\n----------------------------------------\n\nTITLE: Copying Arrays in ReScript\nDESCRIPTION: Returns a fresh copy of the given array, containing the same elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/array.mdx#2025-04-18_snippet_10\n\nLANGUAGE: ReScript\nCODE:\n```\nlet copy: array<'a> => array<'a>\n```\n\n----------------------------------------\n\nTITLE: Computing Ceiling as Integer in ReScript (Unsafe)\nDESCRIPTION: Function that returns the smallest integer greater than or equal to the argument. May return values outside the int range (-2147483648 to 2147483647).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/math.mdx#2025-04-18_snippet_19\n\nLANGUAGE: reasonml\nCODE:\n```\nlet unsafe_ceil_int: float => int;\n```\n\n----------------------------------------\n\nTITLE: Copying a HashMap in ReScript\nDESCRIPTION: Creates a copy of a hash map using Belt.HashMap.String.copy.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-map-string.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet copy: t<'a> => t<'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet hMap1 = Belt.HashMap.String.fromArray([(\"1\", \"1\"), (\"2\", \"2\")])\nlet hMap2 = Belt.HashMap.String.copy(hMap1)\n\nBelt.HashMap.String.set(hMap2, \"2\", \"3\")\n\nBelt.HashMap.String.get(hMap1, \"2\") != Belt.HashMap.String.get(hMap2, \"2\")\n```\n\n----------------------------------------\n\nTITLE: Using sqrt function to calculate square root in ReScript\nDESCRIPTION: The sqrt function returns the square root of its argument. It takes a float as input and returns a float, returning NaN if the argument is negative.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/math.mdx#2025-04-18_snippet_32\n\nLANGUAGE: res\nCODE:\n```\nlet sqrt: float => float\n```\n\n----------------------------------------\n\nTITLE: Converting floating-point numbers to integers in ReScript\nDESCRIPTION: The fromFloat function converts a floating-point number to an integer. This truncates the decimal portion of the number.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/int.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reason\nCODE:\n```\nlet fromFloat: float => int;\n```\n\nLANGUAGE: reason\nCODE:\n```\nJs.log(Belt.Int.fromFloat(1.0) === 1); /* true */\n```\n\n----------------------------------------\n\nTITLE: Converting a HashSet to an Array in ReScript\nDESCRIPTION: This function signature shows how to convert a HashSet to an array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-set.mdx#2025-04-18_snippet_17\n\nLANGUAGE: reason\nCODE:\n```\nlet toArray: t('a, 'id) => array('a);\n```\n\n----------------------------------------\n\nTITLE: Defining Type Module Type in ReScript TypedArray\nDESCRIPTION: Defines a module type 'Type' that specifies a signature for modules containing a single type definition. This is used as a foundation for typed array implementations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nmodule type Type = {\n  type t\n}\n```\n\n----------------------------------------\n\nTITLE: Reducing Array to Single Value\nDESCRIPTION: Function signature to reduce the array to a single value by applying a function to each element.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_44\n\nLANGUAGE: res\nCODE:\n```\nlet reduce: ((. 'b, elt) => 'b, 'b, t) => 'b\n```\n\n----------------------------------------\n\nTITLE: Testing a Null_undefined Value in ReScript\nDESCRIPTION: Defines the 'test' function that tests a value of type Js.null_undefined('a).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/null-undefined.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\nlet test: t('a) => bool;\n```\n\n----------------------------------------\n\nTITLE: Multi-argument Function Piping\nDESCRIPTION: Shows how pipe operator works with functions taking multiple arguments.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/pipe.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\na(one, two, three)\n```\n\nLANGUAGE: rescript\nCODE:\n```\none->a(two, three)\n```\n\n----------------------------------------\n\nTITLE: Setting Vector Element in ReScript\nDESCRIPTION: Sets the element at a specified index in a vector. Raises an exception if the index is out of bounds.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/vector.mdx#2025-04-18_snippet_15\n\nLANGUAGE: ReScript\nCODE:\n```\nlet set: (t('a), int, 'a) => unit;\n```\n\n----------------------------------------\n\nTITLE: Writing an Int16 value to a DataView in ReScript\nDESCRIPTION: Function signature for storing a signed 16-bit integer at the specified byte offset with big-endian format.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_data-view.mdx#2025-04-18_snippet_24\n\nLANGUAGE: rescript\nCODE:\n```\nlet setInt16: (t, int, int) => unit\n```\n\n----------------------------------------\n\nTITLE: Empty Function Signature in ReScript\nDESCRIPTION: Function signature for the empty (null) value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/null.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet empty: t<'a>\n```\n\n----------------------------------------\n\nTITLE: Getting Array Size in ReScript (Alias for length)\nDESCRIPTION: The size function is an alias for Belt_Array.length, returning the number of elements in an array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/array.mdx#2025-04-18_snippet_1\n\nLANGUAGE: ReScript\nCODE:\n```\nlet size: array<'a> => int\n```\n\n----------------------------------------\n\nTITLE: Testing every element in UInt32Array\nDESCRIPTION: Defines a function that tests whether all elements in the array pass the test implemented by the provided function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_32\n\nLANGUAGE: rescript\nCODE:\n```\nlet every: ((. elt) => bool, t) => bool\n```\n\n----------------------------------------\n\nTITLE: Accessing Maximum Value with Undefined - ReScript\nDESCRIPTION: Returns the maximum value in a MutableSet.String collection. Returns undefined if the collection is empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_10\n\nLANGUAGE: res\nCODE:\n```\nlet maxUndefined: t => Js.undefined<value>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet s0 = Belt.MutableSet.String.make()\nlet s1 = Belt.MutableSet.String.fromArray([\"apple\", \"orange\"])\n\ns0->Belt.MutableSet.String.maxUndefined /* undefined */\ns1->Belt.MutableSet.String.maxUndefined /* orange */\n```\n\n----------------------------------------\n\nTITLE: List Fold Operations\nDESCRIPTION: Left and right fold operations for list reduction\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/list.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet foldLeft: ((. 'a, 'b) => 'a, 'a, list<'b>) => 'a\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet foldRight: ((. 'a, 'b) => 'b, list<'a>, 'b) => 'b\n```\n\n----------------------------------------\n\nTITLE: Joining Uint8ClampedArray elements with separator\nDESCRIPTION: Joins all elements of the array into a string using the specified separator.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_22\n\nLANGUAGE: res\nCODE:\n```\nlet joinWith: (string, t) => string\n```\n\n----------------------------------------\n\nTITLE: Defining MakeComparableU module in ReScript\nDESCRIPTION: Defines a module 'MakeComparableU' that takes a module with a type 't' and an uncurried comparison function, and returns a Comparable module with the same type 't'.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/id.mdx#2025-04-18_snippet_5\n\nLANGUAGE: ReScript\nCODE:\n```\nmodule MakeComparableU: (M: {type t; let cmp: [@bs] ((t, t) => int);}) => Comparable with type t = M.t;\n```\n\n----------------------------------------\n\nTITLE: Accessing and Modifying Int16Array Elements in ReScript\nDESCRIPTION: Provides unsafe methods for getting and setting elements in an Int16Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_int-16-array.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet unsafe_get: (t, int) => elt\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet unsafe_set: (t, int, elt) => unit\n```\n\n----------------------------------------\n\nTITLE: Creating a set from an array in ReScript with MutableSetInt\nDESCRIPTION: Creates a new set from an array of integer elements. The resulting set will contain unique elements sorted in ascending order.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromArray: array(value) => t;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet s0 = Belt.MutableSet.Int.fromArray([|1, 3, 2, 4|])\n\ns0->Belt.MutableSet.Int.toArray; /* [|1, 2, 3, 4|] */\n```\n\n----------------------------------------\n\nTITLE: Creating Empty String Sets in ReScript\nDESCRIPTION: Demonstrates how to create an empty string set using Belt.Set.String.empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/set-string.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet empty: t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet s0 = Belt.Set.String.empty\n```\n\n----------------------------------------\n\nTITLE: Finding the maximum element with undefined in ReScript with MutableSetInt\nDESCRIPTION: Returns the maximum value in the set or undefined if the set is empty. This is a JavaScript-friendly alternative to the option type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_38\n\nLANGUAGE: rescript\nCODE:\n```\nlet maxUndefined: t => Js.undefined(value);\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet s0 = Belt.MutableSet.Int.make();\nlet s1 = Belt.MutableSet.Int.fromArray([|3,2,1,5|]);\n\ns0->Belt.MutableSet.Int.maxUndefined; /* undefined */\ns1->Belt.MutableSet.Int.maxUndefined; /* 5 */\n```\n\n----------------------------------------\n\nTITLE: Create Float32Array from ArrayBuffer\nDESCRIPTION: Creates a new Float32Array view of the given ArrayBuffer.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-32-array.mdx#2025-04-18_snippet_52\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromBuffer: Js_typed_array2.array_buffer => t;\n```\n\n----------------------------------------\n\nTITLE: Defining Uint16Array Types in ReScript\nDESCRIPTION: Defines the element type, typed array type, and the main Uint16Array type for use in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\ntype elt = int;\ntype typed_array('a) = Js_typed_array2.Uint16Array.typed_array('a);\ntype t = typed_array(elt);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Uint8Array Properties in ReScript\nDESCRIPTION: Functions to access various properties of a Uint8Array, such as buffer, byte length, and byte offset.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet buffer: t => Js_typed_array2.array_buffer;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet byteLength: t => int;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet byteOffset: t => int;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet length: t => int;\n```\n\n----------------------------------------\n\nTITLE: Replacing Substrings with Function in ReScript\nDESCRIPTION: The unsafeReplaceBy0, unsafeReplaceBy1, unsafeReplaceBy2, and unsafeReplaceBy3 functions replace substrings in a string using a function to determine the replacement. They differ in the number of capturing groups in the regular expression.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string-2.mdx#2025-04-18_snippet_11\n\nLANGUAGE: ReScript\nCODE:\n```\nlet unsafeReplaceBy0: (t, Js_re.t, (t, int, t) => t) => t;\nlet unsafeReplaceBy1: (t, Js_re.t, (t, t, int, t) => t) => t;\nlet unsafeReplaceBy2: (t, Js_re.t, (t, t, t, int, t) => t) => t;\nlet unsafeReplaceBy3: (t, Js_re.t, (t, t, t, t, int, t) => t) => t;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet str = \"beautiful vowels\";\nlet re = [%re \"/[aeiou]/g\"];\nlet matchFn = (matchPart, _offset, _wholeString) =>\n  Js.String2.toUpperCase(matchPart);\n\nJs.String2.unsafeReplaceBy0(str, re, matchFn)\n  == \"bEAUtIfUl vOwEls\";\n\nlet str = \"increment 23\";\nlet re = [%re \"/increment (\\\\d+)/g\"];\nlet matchFn = (_matchPart, p1, _offset, wholeString) =>\n  wholeString ++ \" is \" ++ Belt.Int.toString(int_of_string(p1) + 1);\n\nJs.String2.unsafeReplaceBy1(str, re, matchFn)\n  == \"increment 23 is 24\";\n\nlet str = \"7 times 6\";\nlet re = [%re \"/(\\\\d+) times (\\\\d+)/\"];\nlet matchFn = (matchPart, p1, p2, offset, wholeString) =>\n  Belt.Int.toString(int_of_string(p1) * int_of_string(p2));\n\nJs.String2.unsafeReplaceBy2(str, re, matchFn) == \"42\";\n```\n\n----------------------------------------\n\nTITLE: Raising RangeError exception in ReScript\nDESCRIPTION: Function signature for raising a JavaScript RangeError exception with a custom message.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/exn.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rescript\nCODE:\n```\nlet raiseRangeError: string => 'a\n```\n\n----------------------------------------\n\nTITLE: Generating JS Object Converters for Records in ReScript\nDESCRIPTION: Uses @deriving(jsConverter) to create conversion functions between ReScript records and JavaScript objects. Note that this is largely obsolete in ReScript ≥ v7 as records already compile to JS objects.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/generate-converters-accessors.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\n@deriving(jsConverter)\ntype coordinates = {\n  x: int,\n  y: int\n};\n```\n\n----------------------------------------\n\nTITLE: Vector Member Reference Check\nDESCRIPTION: Checks if an element exists in the vector using JavaScript === equality.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/vector.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\nlet memByRef: ('a, t<'a>) => bool\n```\n\n----------------------------------------\n\nTITLE: Creating Subarray from Position\nDESCRIPTION: Function signature to create a new Int8Array from a specified start position to the end in the same underlying buffer.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_29\n\nLANGUAGE: res\nCODE:\n```\nlet subarrayFrom: (int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Getting Minimum Value from Set in ReScript\nDESCRIPTION: Returns the minimum value in the set as an option, or None if the set is empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-string.mdx#2025-04-18_snippet_54\n\nLANGUAGE: reasonml\nCODE:\n```\nlet minimum: t => option(value);\n```\n\n----------------------------------------\n\nTITLE: Defining Uint8ClampedArray Types\nDESCRIPTION: Defines the basic types used throughout the module, including the element type (int), the generic typed_array type, and the specific Uint8ClampedArray type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\ntype elt = int\ntype typed_array<'a> = Js_typed_array2.Uint8ClampedArray.typed_array<'a>\ntype t = typed_array<elt>\n```\n\n----------------------------------------\n\nTITLE: Curried some for MapDict\nDESCRIPTION: Function signature for checking if at least one key-value pair satisfies a predicate using curried function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_19\n\nLANGUAGE: reason\nCODE:\n```\nlet some: (t('k, 'a, 'id), ('k, 'a) => bool) => bool;\n```\n\n----------------------------------------\n\nTITLE: Defining stableSortBy Function\nDESCRIPTION: Function that returns a fresh sorted array while preserving the order of equal elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/sort-array.mdx#2025-04-18_snippet_9\n\nLANGUAGE: reason\nCODE:\n```\nlet stableSortBy: (array('a), ('a, 'a) => int) => array('a);\n```\n\n----------------------------------------\n\nTITLE: Fill Array From Index In Place\nDESCRIPTION: Fills elements of the array with the provided value, starting at the specified index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-64-array.mdx#2025-04-18_snippet_13\n\nLANGUAGE: reason\nCODE:\n```\nlet fillFromInPlace: (elt, ~from: int, t) => t;\n```\n\n----------------------------------------\n\nTITLE: Finding minimum and maximum elements in MapDict (ReScript)\nDESCRIPTION: Functions to find the minimum and maximum key-value pairs in a MapDict.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_15\n\nLANGUAGE: ReScript\nCODE:\n```\nlet minimum: t<'k, 'a, 'b> => option<('k, 'a)>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet minUndefined: t<'k, 'a, 'b> => Js.undefined<('k, 'a)>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet maximum: t<'k, 'a, 'b> => option<('k, 'a)>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet maxUndefined: t<'k, 'a, 'b> => Js.undefined<('k, 'a)>\n```\n\n----------------------------------------\n\nTITLE: Creating an Undefined Value in ReScript\nDESCRIPTION: Defines the 'undefined' value of type Js.null_undefined('a).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/null-undefined.mdx#2025-04-18_snippet_5\n\nLANGUAGE: reason\nCODE:\n```\nlet undefined: t('a);\n```\n\n----------------------------------------\n\nTITLE: Converting Date to JSON Unsafe in ReScript\nDESCRIPTION: Returns a string representation of the given date in JSON format. This function is the recommended alternative to the deprecated toJSON function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_65\n\nLANGUAGE: ReScript\nCODE:\n```\nlet toJSONUnsafe: t => string\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nJs.Date.toJSONUnsafe(exampleDate) == \"1973-11-29T21:30:54.321Z\"\n```\n\n----------------------------------------\n\nTITLE: ReScript JavaScript Comparison Operations\nDESCRIPTION: Unsafe comparison operations that compile directly to JavaScript comparison operators.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet eqNull: ('a, null<'a>) => bool\nlet eqUndefined: ('a, undefined<'a>) => bool\nlet eqNullable: ('a, nullable<'a>) => bool\nlet unsafe_lt: ('a, 'a) => bool\nlet unsafe_le: ('a, 'a) => bool\nlet unsafe_gt: ('a, 'a) => bool\nlet unsafe_ge: ('a, 'a) => bool\n```\n\n----------------------------------------\n\nTITLE: Array Search and Iteration Methods\nDESCRIPTION: Methods for searching and iterating through arrays including includes, indexOf, and various iteration helpers.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_type-s.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reason\nCODE:\n```\nlet includes: (elt, t) => bool;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet indexOf: (elt, t) => int;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet forEach: ((. elt) => unit, t) => unit;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet map: ((. elt) => 'b, t) => typed_array('b);\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet reduce: ((. 'b, elt) => 'b, 'b, t) => 'b;\n```\n\n----------------------------------------\n\nTITLE: Mapping with Key (Curried) in ReScript MapInt Module\nDESCRIPTION: Function signature for mapping values with keys in the map using a curried function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-int.mdx#2025-04-18_snippet_54\n\nLANGUAGE: rescript\nCODE:\n```\nlet mapWithKey: (t<'v>, (key, 'v) => 'v2) => t<'v2>\n```\n\n----------------------------------------\n\nTITLE: Int8Array Array Operations\nDESCRIPTION: Array manipulation methods including setting arrays and copying elements\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_int-8-array.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reasonml\nCODE:\n```\nlet setArray: (array(elt), t) => unit;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet setArrayOffset: (array(elt), int, t) => unit;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet copyWithin: (~to_: int, t) => t;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet copyWithinFrom: (~to_: int, ~from: int, t) => t;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet copyWithinFromRange: (~to_: int, ~start: int, ~end_: int, t) => t;\n```\n\n----------------------------------------\n\nTITLE: Mapping ReScript maps\nDESCRIPTION: Functions for applying a function to all values in the map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-string.mdx#2025-04-18_snippet_10\n\nLANGUAGE: res\nCODE:\n```\nlet mapU: (t<'v>, (. 'v) => 'v2) => t<'v2>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet map: (t<'v>, 'v => 'v2) => t<'v2>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet mapWithKeyU: (t<'v>, (. key, 'v) => 'v2) => t<'v2>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet mapWithKey: (t<'v>, (key, 'v) => 'v2) => t<'v2>\n```\n\n----------------------------------------\n\nTITLE: Checking if HashSetString has a key\nDESCRIPTION: Returns true if the specified string key exists in the HashSetString.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-set-string.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nlet has: (t, key) => bool;\n```\n\n----------------------------------------\n\nTITLE: Example of toFixed with Rounding\nDESCRIPTION: Shows how toFixed rounds a decimal number when converting to fixed-point notation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/float.mdx#2025-04-18_snippet_13\n\nLANGUAGE: re\nCODE:\n```\n/* prints \"12346\" (note the rounding) */\nJs.log @@ Js.Float.toFixed(12345.6789);\n```\n\n----------------------------------------\n\nTITLE: Creating Date with Year, Month, Day, Hour, and Minute in ReScript\nDESCRIPTION: Function signature for makeWithYMDHM, which creates a date for a specific year, month, day, hour, and minute.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\nlet makeWithYMDHM: (\n  ~year: float,\n  ~month: float,\n  ~date: float,\n  ~hours: float,\n  ~minutes: float,\n  unit,\n) => t\n```\n\n----------------------------------------\n\nTITLE: Raising JavaScript TypeError\nDESCRIPTION: Function that raises a JavaScript TypeError with the provided message.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/exn.mdx#2025-04-18_snippet_13\n\nLANGUAGE: rescript\nCODE:\n```\nlet raiseTypeError: string => 'a;\n```\n\n----------------------------------------\n\nTITLE: Reducing MutableSet Elements with Uncurried Function in ReasonML\nDESCRIPTION: Function signature for reducing a MutableSet to a single value using an uncurried function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_37\n\nLANGUAGE: reasonml\nCODE:\n```\nlet reduceU: (t('value, 'id), 'a, [@bs] (('a, 'value) => 'a)) => 'a;\n```\n\n----------------------------------------\n\nTITLE: Checking if a key exists in MapDict\nDESCRIPTION: Function signature for checking if a map contains a specific key, using a provided comparison function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reason\nCODE:\n```\nlet has: (t('k, 'a, 'id), 'k, ~cmp: cmp('k, 'id)) => bool;\n```\n\n----------------------------------------\n\nTITLE: Defining Set Dictionary Type\nDESCRIPTION: Core type definition for the Set Dictionary collection with generic value and identity types\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set-dict.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\ntype t<'value, 'identity>\n```\n\n----------------------------------------\n\nTITLE: Array Iteration Methods\nDESCRIPTION: Higher-order functions for array iteration and transformation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_float-64-array.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet every: ((. elt) => bool, t) => bool\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet filter: ((. elt) => bool, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet find: ((. elt) => bool, t) => Js.undefined<elt>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet forEach: ((. elt) => unit, t) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet map: ((. elt) => 'b, t) => typed_array<'b>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduce: ((. 'b, elt) => 'b, 'b, t) => 'b\n```\n\n----------------------------------------\n\nTITLE: Converting Array to List in ReScript\nDESCRIPTION: The fromArray function converts a JavaScript array to a ReScript list.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/list.mdx#2025-04-18_snippet_28\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromArray: array<'a> => t<'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nBelt.List.fromArray([1, 2, 3]) // [1, 2, 3]\n```\n\n----------------------------------------\n\nTITLE: JavaScript Method Chaining Bindings\nDESCRIPTION: Demonstrates binding to JavaScript's chainable methods using bs.send external declarations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/pipe.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\n[@bs.send] external map: (array('a), 'a => 'b) => array('b) = \"map\";\n[@bs.send] external filter: (array('a), 'a => bool) => array('a) = \"filter\";\n\ntype request;\n[@bs.val] external asyncRequest: unit => request = \"asyncRequest\";\n[@bs.send] external setWaitDuration: (request, int) => request = \"setWaitDuration\";\n[@bs.send] external send: request => unit = \"send\";\n```\n\n----------------------------------------\n\nTITLE: Using React.forwardRef in ReScript (Discouraged Approach)\nDESCRIPTION: Example of using React.forwardRef API to forward refs in a FancyInput component. This approach is discouraged as it may be deprecated in the future and offers no advantages over passing refs as props.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/forwarding-refs.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\n// App.res\n\nmodule FancyInput = {\n  @react.component\n  let make = React.forwardRef((~className=?, ~children, ref) =>\n    <div>\n      <input\n        type_=\"text\"\n        ?className\n        ref=?{Js.Nullable.toOption(ref)->Belt.Option.map(ReactDOM.Ref.domRef)}\n      />\n      children\n    </div>\n  )\n}\n\n@send external focus: Dom.element => unit = \"focus\"\n\n@react.component\nlet make = () => {\n  let input = React.useRef(Js.Nullable.null)\n\n  let focusInput = () =>\n    input.current->Js.Nullable.toOption->Belt.Option.forEach(input => input->focus)\n\n  let onClick = _ => focusInput()\n\n  <div>\n    <FancyInput className=\"fancy\" ref=input>\n      <button onClick> {React.string(\"Click to focus\")} </button>\n    </FancyInput>\n  </div>\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Substring from Index in ReScript\nDESCRIPTION: The substr function extracts a substring from a string starting at a specified index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/string-2.mdx#2025-04-18_snippet_27\n\nLANGUAGE: rescript\nCODE:\n```\nlet substr: (t, ~from: int) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.String2.substr(\"abcdefghij\", ~from=3) == \"defghij\"\nJs.String2.substr(\"abcdefghij\", ~from=-3) == \"hij\"\nJs.String2.substr(\"abcdefghij\", ~from=12) == \"\"\n```\n\n----------------------------------------\n\nTITLE: Type Signatures for Functions with Optional Arguments in ReScript\nDESCRIPTION: Demonstrates the difference between function signature types and parameter type annotations for optional arguments. Outside the function, the parameter is a raw type, while inside it's an option type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/function.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rescript\nCODE:\n```\nlet drawCircle: (~color: color, ~radius: int=?, unit) => unit =\n  (~color: color, ~radius: option<int>=?, ()) => {\n    setColor(color)\n    switch radius {\n    | None => startAt(1, 1)\n    | Some(r_) => startAt(r_, r_)\n    }\n  }\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction drawCircle(color, radius, param) {\n  setColor(color);\n  if (radius !== undefined) {\n    return startAt(radius, radius);\n  } else {\n    return startAt(1, 1);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Writing an Int8 value to a DataView in ReScript\nDESCRIPTION: Function signature for storing a signed 8-bit integer at the specified byte offset.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_data-view.mdx#2025-04-18_snippet_22\n\nLANGUAGE: rescript\nCODE:\n```\nlet setInt8: (t, int, int) => unit\n```\n\n----------------------------------------\n\nTITLE: Finding Substring Index from Start Position in ReScript\nDESCRIPTION: The 'indexOfFrom' function finds the first occurrence of a substring within a string, starting from a specified index. It takes two strings and a start index, returning the index of the first occurrence or -1 if not found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/string-2.mdx#2025-04-18_snippet_18\n\nLANGUAGE: rescript\nCODE:\n```\nlet indexOfFrom: (t, t, int) => int\n```\n\n----------------------------------------\n\nTITLE: Getting Value with Default in ReScript MapInt Module\nDESCRIPTION: Function signature for getting a value by its key, returning a default value if not found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-int.mdx#2025-04-18_snippet_35\n\nLANGUAGE: rescript\nCODE:\n```\nlet getWithDefault: (t<'v>, key, 'v) => 'v\n```\n\n----------------------------------------\n\nTITLE: Vector to List Conversion\nDESCRIPTION: Converts a vector to a list data structure.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/vector.mdx#2025-04-18_snippet_8\n\nLANGUAGE: res\nCODE:\n```\nlet toList: t<'a> => list<'a>\n```\n\n----------------------------------------\n\nTITLE: Undefined-returning Array Access in ReScript\nDESCRIPTION: Accesses array elements and returns Js.undefined when out of bounds, providing type safety while maintaining runtime efficiency.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/array.mdx#2025-04-18_snippet_5\n\nLANGUAGE: reason\nCODE:\n```\nlet getUndefined: (array('a), int) => Js.undefined('a);\n```\n\n----------------------------------------\n\nTITLE: Reading 32-bit Float (Big Endian)\nDESCRIPTION: Gets a 32-bit floating point number at the specified byte offset from the start of the DataView using big-endian format.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_data-view.mdx#2025-04-18_snippet_18\n\nLANGUAGE: reasonml\nCODE:\n```\nlet getFloat32: (t, int) => float;\n```\n\n----------------------------------------\n\nTITLE: Checking if a Set is a Subset in ReasonML\nDESCRIPTION: Shows how to check if one set is a subset of another set, meaning all elements in the first set exist in the second set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set.mdx#2025-04-18_snippet_16\n\nLANGUAGE: reasonml\nCODE:\n```\nlet subset: (t('value, 'id), t('value, 'id)) => bool;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet s0 = Belt.Set.fromArray([|5,2,3,5,6|], ~id=(module IntCmp));\nlet s1 = Belt.Set.fromArray([|5,2,3,1,5,4|], ~id=(module IntCmp));\nlet s2 = Belt.Set.intersect(s0, s1);\nBelt.Set.subset(s2, s0); /* true */\nBelt.Set.subset(s2, s1); /* true */\nBelt.Set.subset(s1, s0); /* false */\n```\n\n----------------------------------------\n\nTITLE: Compiled JavaScript Output for ReScript Router\nDESCRIPTION: Shows the compiled JavaScript output of the ReScript React Router implementation, demonstrating how it translates to vanilla React code.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/router.mdx#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from \"react\";\nimport * as User from \"./User.res.js\";\nimport * as RescriptReactRouter from \"@rescript/react/src/RescriptReactRouter.res.js\";\nimport * as Home from \"./Home.res.js\";\nimport * as NotFound from \"./NotFound.res.js\";\n\nfunction App(Props) {\n  var url = RescriptReactRouter.useUrl(undefined, undefined);\n  var match = url.path;\n  if (!match) {\n    return React.createElement(Home.make, {});\n  }\n  if (match.hd === \"user\") {\n    var match$1 = match.tl;\n    if (match$1 && !match$1.tl) {\n      return React.createElement(User.make, {\n                  id: match$1.hd\n                });\n    }\n    \n  }\n  return React.createElement(NotFound.make, {});\n}\n\nvar make = App;\n\nexport {\n  make ,\n  \n}\n```\n\n----------------------------------------\n\nTITLE: Integer Division in ReScript\nDESCRIPTION: Performs division of two int values using the / operator from Belt.Int module. Same as the division from Pervasives.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/int.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nlet (/): (int, int) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nopen Belt.Int\nJs.log(4 / 2 === 2); /* true */\n```\n\n----------------------------------------\n\nTITLE: Adding a value to a set in ReScript\nDESCRIPTION: Creates a new set with the given integer added. If the value already exists in the set, the original set is returned unchanged.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-int.mdx#2025-04-18_snippet_7\n\nLANGUAGE: reason\nCODE:\n```\nlet add: (t, value) => t;\n```\n\n----------------------------------------\n\nTITLE: Creating Int32Array Instances\nDESCRIPTION: Functions to create new Int32Array instances from various sources.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-32-array.mdx#2025-04-18_snippet_17\n\nLANGUAGE: rescript\nCODE:\n```\nlet make: array<elt> => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromBuffer: Js_typed_array.array_buffer => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromBufferOffset: (Js_typed_array.array_buffer, int) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromBufferRange: (Js_typed_array.array_buffer, ~offset: int, ~length: int) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromLength: int => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet from: Js_typed_array.array_like<elt> => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet create: array<elt> => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet of_buffer: Js_typed_array.array_buffer => t\n```\n\n----------------------------------------\n\nTITLE: Creating Array Slice from Index with sliceFrom in ReScript\nDESCRIPTION: Function signature for sliceFrom that extracts a section of a Uint8Array starting from a specified index to the end.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_27\n\nLANGUAGE: rescript\nCODE:\n```\nlet sliceFrom: (int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Sorting Float32Array in ReScript\nDESCRIPTION: Functions to sort a Float32Array in place, with an optional custom comparison function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet sortInPlace: t => t;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet sortInPlaceWith: ((. elt, elt) => int, t) => t;\n```\n\n----------------------------------------\n\nTITLE: Record Type Resolution by Field Name\nDESCRIPTION: Demonstrates how record types are found by field name, and the limitations this creates. In ReScript, you cannot create functions that accept any record with a specific field name.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/record.mdx#2025-04-18_snippet_7\n\nLANGUAGE: reason\nCODE:\n```\ntype person = {age: int, name: string};\ntype monster = {age: int, hasTentacles: bool};\n\nlet getAge = (entity) => entity.age;\n```\n\nLANGUAGE: ml\nCODE:\n```\ntype person = {age: int; name: string}\ntype monster = {age: int; hasTentacles: bool}\n\nlet getAge entity = entity.age\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getAge(entity) {\n  return entity.age;\n}\n```\n\n----------------------------------------\n\nTITLE: Minimal GenType Configuration for rescript.json\nDESCRIPTION: The required minimal configuration for genType in the project's rescript.json file.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/typescript-integration.mdx#2025-04-18_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"gentypeconfig\": {\n    \"module\": \"esmodule\",\n    \"moduleResolution\": \"node\",\n    \"generatedFileExtension\": \".gen.tsx\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Date to GMT String in ReScript\nDESCRIPTION: Deprecated method that converts a Date object to a GMT string. Users should use toUTCString() instead.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_68\n\nLANGUAGE: rescript\nCODE:\n```\nlet toGMTString: t => string\n```\n\n----------------------------------------\n\nTITLE: Adding Chrome Debugger Extension to ReScript File\nDESCRIPTION: Insert this preprocessor directive at the top of the ReScript file you want to debug. This extension enables Chrome debugger support conditionally and won't generate extra code unless -bs-g flag is enabled.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/reason-compiler/latest/better-data-structures-printing-debug-mode.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\n[%%debugger.chrome]\n```\n\n----------------------------------------\n\nTITLE: Reducing Array Elements from Right with Index\nDESCRIPTION: Function signature to reduce the array from right to left using a function that also receives the element index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_47\n\nLANGUAGE: res\nCODE:\n```\nlet reduceRighti: ((. 'b, elt, int) => 'b, 'b, t) => 'b\n```\n\n----------------------------------------\n\nTITLE: Converting MapDict to an array\nDESCRIPTION: Function signature for converting a map to an array of key-value pairs.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_22\n\nLANGUAGE: reason\nCODE:\n```\nlet toArray: t('k, 'a, 'id) => array(('k, 'a));\n```\n\n----------------------------------------\n\nTITLE: Setting Hours and Minutes with setUTCHoursM in ReScript\nDESCRIPTION: Sets a Date's hours and minutes according to UTC time. This function modifies the original Date object and returns the updated timestamp in milliseconds. Binds to JavaScript's Date.setUTCHours method.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_54\n\nLANGUAGE: res\nCODE:\n```\nlet setUTCHoursM: (t, ~hours: float, ~minutes: float, unit) => float\n```\n\nLANGUAGE: res\nCODE:\n```\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet futureTime = Js.Date.setUTCHoursM(date1, ~hours=22.0, ~minutes=46.0, ())\ndate1 == Js.Date.fromString(\"1973-11-29T22:46:54.321Z00:00\")\nfutureTime == Js.Date.getTime(date1)\n```\n\n----------------------------------------\n\nTITLE: Finding Element Index from Position\nDESCRIPTION: Returns the index of the first occurrence of a specified element starting from a given index, or -1 if not found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_20\n\nLANGUAGE: rescript\nCODE:\n```\nlet indexOfFrom: (elt, ~from: int, t) => int\n```\n\n----------------------------------------\n\nTITLE: Computing Arcsine in ReScript\nDESCRIPTION: Function that returns the arcsine (in radians) of the argument. Returns NaN if the argument is outside the range [-1.0, 1.0].\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/math.mdx#2025-04-18_snippet_12\n\nLANGUAGE: reasonml\nCODE:\n```\nlet asin: float => float;\n```\n\n----------------------------------------\n\nTITLE: Array String Operations in ReScript\nDESCRIPTION: Functions for converting arrays to strings and joining array elements with delimiters.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/array-2.mdx#2025-04-18_snippet_10\n\nLANGUAGE: reason\nCODE:\n```\nlet joinWith: (t('a), string) => string;\nlet toString: t('a) => string;\n\nJs.Array2.joinWith([|\"ant\", \"bee\", \"cat\"|], \"--\") == \"ant--bee--cat\";\nJs.Array2.toString([|3.5, 4.6, 7.8|]) == \"3.5,4.6,7.8\";\n```\n\n----------------------------------------\n\nTITLE: Finding Minimum Value in Set\nDESCRIPTION: Function that returns the minimum value of the collection as an option type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set.mdx#2025-04-18_snippet_34\n\nLANGUAGE: reason\nCODE:\n```\nlet minimum: t('value, 'id) => option('value);\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet s0 = Belt.Set.make(~id=(module IntCmp));\nlet s1 = Belt.Set.fromArray([|3,2,1,5|], ~id=(module IntCmp));\n\ns0->Belt.Set.minimum; /* None */\ns1->Belt.Set.minimum; /* Some(1) */\n```\n\n----------------------------------------\n\nTITLE: Filtering and Mapping HashMap in ReScript\nDESCRIPTION: Filters and maps the hash map in-place using Belt.HashMap.String.keepMapInPlace.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-map-string.mdx#2025-04-18_snippet_11\n\nLANGUAGE: rescript\nCODE:\n```\nlet keepMapInPlace: (t<'a>, (key, 'a) => option<'a>) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet hMap = Belt.HashMap.String.make(~hintSize=10)\nBelt.HashMap.String.set(hMap, \"1\", \"value1\")\nBelt.HashMap.String.set(hMap, \"2\", \"value2\")\n\nBelt.HashMap.String.keepMapInPlace(hMap, (key, value) => key == \"1\" ? None : Some(value))\n```\n\n----------------------------------------\n\nTITLE: Filling Array with a Value using fillInPlace in ReScript\nDESCRIPTION: Function signature for fillInPlace that fills all elements of a Uint8Array with a specified value, modifying the array in place.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_12\n\nLANGUAGE: rescript\nCODE:\n```\nlet fillInPlace: (elt, t) => t\n```\n\n----------------------------------------\n\nTITLE: Type Error Raiser\nDESCRIPTION: Function signature for raising a JavaScript TypeError.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/exn.mdx#2025-04-18_snippet_13\n\nLANGUAGE: rescript\nCODE:\n```\nlet raiseTypeError: string => 'a\n```\n\n----------------------------------------\n\nTITLE: Reducing Map Elements (Uncurried) in ReScript MapInt Module\nDESCRIPTION: Function signature for reducing the map to a single value using an uncurried function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-int.mdx#2025-04-18_snippet_13\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduceU: (t<'v>, 'v2, (. 'v2, key, 'v) => 'v2) => 'v2\n```\n\n----------------------------------------\n\nTITLE: Testing All Elements Example in MutableSet in ReasonML\nDESCRIPTION: Example demonstrating how to check if all elements in a MutableSet satisfy a condition using every.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_42\n\nLANGUAGE: reasonml\nCODE:\n```\nmodule IntCmp =\n  Belt.Id.MakeComparable({\n    type t = int;\n    let cmp = Pervasives.compare;\n  });\n\nlet isEven = x => x mod 2 == 0;\n\nlet s0 = Belt.MutableSet.fromArray([|2,4,6,8|], ~id=(module IntCmp));\ns0->Belt.MutableSet.every(isEven); /* true */\n```\n\n----------------------------------------\n\nTITLE: Size Operations in MutableSet - ReScript\nDESCRIPTION: Returns the number of elements in the set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet size: t<'value, 'id> => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nmodule IntCmp = Belt.Id.MakeComparable({\n  type t = int\n  let cmp = Pervasives.compare\n})\n\nlet s0 = Belt.MutableSet.fromArray([1, 2, 3, 4], ~id=module(IntCmp))\n\ns0->Belt.MutableSet.size /* 4 */\n```\n\n----------------------------------------\n\nTITLE: Getting UTC Full Year from Date in ReScript\nDESCRIPTION: ReScript binding for JavaScript's Date.getUTCFullYear method. Returns the full year for a date, evaluated in UTC.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_31\n\nLANGUAGE: res\nCODE:\n```\nlet getUTCFullYear: t => float\n```\n\nLANGUAGE: res\nCODE:\n```\nJs.Date.getUTCFullYear(exampleDate) == 1973.0\n```\n\n----------------------------------------\n\nTITLE: Reducing Set Elements with Uncurried Function in ReasonML\nDESCRIPTION: Provides a way to reduce a set to a single value using an uncurried function, optimized for BuckleScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set.mdx#2025-04-18_snippet_21\n\nLANGUAGE: reasonml\nCODE:\n```\nlet reduceU: (t('value, 'id), 'a, [@bs] (('a, 'value) => 'a)) => 'a;\n```\n\n----------------------------------------\n\nTITLE: Converting Int to Float in ReScript\nDESCRIPTION: The fromInt function converts a given int to a float. It shows how to use Belt.Float.fromInt for the conversion.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/float.mdx#2025-04-18_snippet_1\n\nLANGUAGE: ReScript\nCODE:\n```\nJs.log(Belt.Float.fromInt(1) === 1.0) /* true */\n```\n\n----------------------------------------\n\nTITLE: Copy Elements Within Float32Array\nDESCRIPTION: Copies a sequence of elements within the Float32Array to a position starting at the target index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-32-array.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\nlet copyWithin: (~to_: int, t) => t;\n```\n\n----------------------------------------\n\nTITLE: Accessing Character by Index in ReScript (get)\nDESCRIPTION: The get function returns the character at a specified index in a string. If the index is out of range, it returns undefined.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string.mdx#2025-04-18_snippet_7\n\nLANGUAGE: reason\nCODE:\n```\nlet get: (t, int) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nJs.String2.get(\"Reason\", 0) == \"R\";\nJs.String2.get(\"Reason\", 4) == \"o\";\nJs.String2.get({js|Rẽasöń|js}, 5) == {js|ń|js};\n```\n\n----------------------------------------\n\nTITLE: Getting List Size in ReScript\nDESCRIPTION: The size function is an alias for length, returning the number of elements in a list.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/list.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet size: t<'a> => int\n```\n\n----------------------------------------\n\nTITLE: Iterating through a set in ReScript\nDESCRIPTION: Applies a function to each element of the set in increasing order.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-int.mdx#2025-04-18_snippet_18\n\nLANGUAGE: reason\nCODE:\n```\nlet forEach: (t, value => unit) => unit;\n```\n\n----------------------------------------\n\nTITLE: Example of Checking String Set Subset in ReScript\nDESCRIPTION: Demonstrates how to check if one string set is a subset of another.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-string.mdx#2025-04-18_snippet_26\n\nLANGUAGE: reasonml\nCODE:\n```\nlet s0 = Belt.Set.String.fromArray([|\"5\", \"2\", \"3\", \"5\", \"6\"|]);\nlet s1 = Belt.Set.String.fromArray([|\"5\", \"2\", \"3\", \"1\", \"5\", \"4\"|]);\nlet s2 = Belt.Set.String.intersect(s0, s1);\nBelt.Set.String.subset(s2, s0); /* true */\nBelt.Set.String.subset(s2, s1); /* true */\nBelt.Set.String.subset(s1, s0); /* false */\n```\n\n----------------------------------------\n\nTITLE: Accessing stack trace from JavaScript exception\nDESCRIPTION: Function that extracts the stack trace string from a JavaScript exception, returning None if not available.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/exn.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet stack: t => option(string);\n```\n\n----------------------------------------\n\nTITLE: Setting a key-value pair in Belt.HashMap.String in ReScript\nDESCRIPTION: Adds or updates a key-value pair in the hash map using the set function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/hash-map-string.mdx#2025-04-18_snippet_4\n\nLANGUAGE: ReScript\nCODE:\n```\nlet set: (t<'a>, key, 'a) => unit\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet hMap = Belt.HashMap.String.fromArray([(\"2\", \"2\")])\n\nBelt.HashMap.String.set(hMap, \"1\", \"1\")\n\nBelt.HashMap.String.valuesToArray(hMap) == [\"1\", \"2\"]\n```\n\n----------------------------------------\n\nTITLE: Vector Reference Membership Check\nDESCRIPTION: Checks if an element exists in vector using JavaScript === equality.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/vector.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\nlet memByRef: ('a, t<'a>) => bool\n```\n\n----------------------------------------\n\nTITLE: Defining DOM Core Types in ReScript\nDESCRIPTION: Core DOM type definitions including node, document, element and related types\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/dom.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\ntype animation\ntype cssStyleDeclaration\ntype cssStyleSheet\ntype node\ntype characterData\ntype cdataSection\ntype comment\ntype document\ntype documentType\ntype domImplementation\ntype element\n```\n\n----------------------------------------\n\nTITLE: Defining the value type in ReScript for MutableSetInt\nDESCRIPTION: Defines the type of set elements as integers for the MutableSetInt module.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype value = int;\n```\n\n----------------------------------------\n\nTITLE: Including Module Signatures in ReScript\nDESCRIPTION: Shows how to extend module signatures with other module signatures using the `include` keyword in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/language_include.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\nmodule type Message = {\n  let greeting: string\n}\n\nmodule type Greeter = {\n  include Message\n  let greet: string => string\n}\n```\n\nLANGUAGE: js\nCODE:\n```\n// No output\n```\n\n----------------------------------------\n\nTITLE: Using utcWithYM Function in ReScript\nDESCRIPTION: Demonstrates the use of the utcWithYM function to get the milliseconds for November 1, 2020 in UTC.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_15\n\nLANGUAGE: rescript\nCODE:\n```\nlet november1 = Js.Date.utcWithYM(~year=2020.0, ~month=10.0, ())\n```\n\n----------------------------------------\n\nTITLE: Iterating and Transforming Uint8ClampedArray in ReScript\nDESCRIPTION: Higher-order functions for iterating, filtering, mapping, and reducing Uint8ClampedArray data.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_7\n\nLANGUAGE: ReScript\nCODE:\n```\nlet forEach: ((. elt) => unit, t) => unit;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet filter: ((. elt) => bool, t) => t;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet map: ((. elt) => 'b, t) => typed_array('b);\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet reduce: ((. 'b, elt) => 'b, 'b, t) => 'b;\n```\n\n----------------------------------------\n\nTITLE: Reducing a HashSet in ReScript\nDESCRIPTION: This function signature shows how to reduce a HashSet. The order of reduction is unspecified.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-set.mdx#2025-04-18_snippet_14\n\nLANGUAGE: reason\nCODE:\n```\nlet reduce: (t('a, 'id), 'c, ('c, 'a) => 'c) => 'c;\n```\n\n----------------------------------------\n\nTITLE: Setting Full Year in ReScript\nDESCRIPTION: The setFullYear function sets a Date object's year in the current time zone. It returns the timestamp of the updated Date and modifies the original Date object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_41\n\nLANGUAGE: res\nCODE:\n```\nlet setFullYear: (t, float) => float\n```\n\nLANGUAGE: res\nCODE:\n```\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet nextYear = Js.Date.setFullYear(date1, 1974.0)\ndate1 == Js.Date.fromString(\"1974-11-15T21:30:54.321Z00:00\")\nnextYear == Js.Date.getTime(date1)\n```\n\n----------------------------------------\n\nTITLE: Getting MutableStack Size in ReScript\nDESCRIPTION: Function to return the number of elements in a stack.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-stack.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rescript\nCODE:\n```\nlet size: t('a) => int;\n```\n\n----------------------------------------\n\nTITLE: String Conversion Functions for Uint8Array\nDESCRIPTION: Functions to convert a Uint8Array to string representations, with optional separator specification.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_9\n\nLANGUAGE: res\nCODE:\n```\nlet join: t => string\n```\n\nLANGUAGE: res\nCODE:\n```\nlet joinWith: (string, t) => string\n```\n\nLANGUAGE: res\nCODE:\n```\nlet toString: t => string\n```\n\nLANGUAGE: res\nCODE:\n```\nlet toLocaleString: t => string\n```\n\n----------------------------------------\n\nTITLE: Finding Array Element Index with Index Access in ReScript\nDESCRIPTION: Returns index of first element satisfying predicate function with index parameter, or -1 if not found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array-2.mdx#2025-04-18_snippet_30\n\nLANGUAGE: res\nCODE:\n```\nlet positiveOddElement = (item, index) => mod(index, 2) == 1 && item > 0\n\nJs.Array2.findIndexi([66, -33, 55, 88, 22], positiveOddElement) == 3\nJs.Array2.findIndexi([66, -33, 55, -88, 22], positiveOddElement) == -1\n```\n\n----------------------------------------\n\nTITLE: Basic Map Operations\nDESCRIPTION: Basic operations for creating, clearing, and checking map status\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-map-int.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reasonml\nCODE:\n```\nlet make: unit => t('a);\n\nlet clear: t('a) => unit;\n\nlet isEmpty: t('a) => bool;\n\nlet has: (t('a), key) => bool;\n```\n\n----------------------------------------\n\nTITLE: Defining Mathematical Constants in ReScript\nDESCRIPTION: Defines various mathematical constants such as Euler's number, natural logarithms, and Pi. These constants are prefixed with an underscore due to ReScript's naming conventions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/math.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\nlet _E: float\nlet _LN2: float\nlet _LN10: float\nlet _LOG2E: float\nlet _LOG10E: float\nlet _PI: float\nlet _SQRT1_2: float\nlet _SQRT2: float\n```\n\n----------------------------------------\n\nTITLE: Adding Element with Check in MutableSet in ReasonML\nDESCRIPTION: Function signature for adding an element to a MutableSet and returning a boolean indicating if the element was newly added.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_15\n\nLANGUAGE: reasonml\nCODE:\n```\nlet addCheck: (t('value, 'id), 'value) => bool;\n```\n\n----------------------------------------\n\nTITLE: Generic JSX Component in ReScript\nDESCRIPTION: Example of creating a Preact component using the new generic JSX transform feature.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2024-02-01-release-11-1-0.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\n// @jsx.component works the same as @react.component does in React\n@jsx.component\nlet make = (~name) => {\n  <div>\n    {Preact.string(\"Hello \" ++ name)}\n  </div>\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Item in Storage in ReScript\nDESCRIPTION: External binding for setting an item in storage with a key-value pair.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/dom/storage.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\nexternal setItem: (string, string, t) => unit = \"setItem\"\n```\n\n----------------------------------------\n\nTITLE: JavaScript Output for ignore() Usage\nDESCRIPTION: This snippet shows the JavaScript output corresponding to the ReScript code using ignore(). It demonstrates how the ignore() function is compiled to JavaScript, effectively discarding the return values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/builtinfunctions_ignore.mdx#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n$$Promise.$$catch(mySideEffect(), function (prim) {\n  return handleError(prim);\n});\n\nsetTimeout(function (prim) {\n  myFunc();\n}, 1000);\n```\n\n----------------------------------------\n\nTITLE: Splitting Set by Value\nDESCRIPTION: Function that splits a set into smaller and larger sets based on a value, returning presence information.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set.mdx#2025-04-18_snippet_40\n\nLANGUAGE: reason\nCODE:\n```\nlet split: (t('value, 'id), 'value) => ((t('value, 'id), t('value, 'id)), bool);\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet s0 = Belt.Set.fromArray([|1,2,3,4,5|], ~id=(module IntCmp));\n\nlet ((smaller, larger), present) = s0->Belt.Set.split(3);\n\npresent; /* true */\nsmaller->Belt.Set.toArray; /* [|1,2|] */\nlarger->Belt.Set.toArray; /* [|4,5|] */\n```\n\n----------------------------------------\n\nTITLE: Array Ordering Operations for Int16Array\nDESCRIPTION: Methods for reordering array elements, including reversing and sorting.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-16-array.mdx#2025-04-18_snippet_6\n\nLANGUAGE: res\nCODE:\n```\nlet reverseInPlace: t => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet sortInPlace: t => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet sortInPlaceWith: ((. elt, elt) => int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Curried find first by predicate for MapDict\nDESCRIPTION: Function signature for finding the first key-value pair matching a predicate using curried function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_10\n\nLANGUAGE: reason\nCODE:\n```\nlet findFirstBy: (t('k, 'v, 'id), ('k, 'v) => bool) => option(('k, 'v));\n```\n\n----------------------------------------\n\nTITLE: Retrieving UTC Hours in ReScript\nDESCRIPTION: The getUTCHours function returns the hours for a Date object, evaluated in UTC. It binds to JavaScript's Date.getUTCHours method.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_34\n\nLANGUAGE: res\nCODE:\n```\nlet getUTCHours: t => float\n```\n\nLANGUAGE: res\nCODE:\n```\nJs.Date.getUTCHours(exampleDate) == 21.0\n```\n\n----------------------------------------\n\nTITLE: Partitioning Set with Uncurried Function in ReScript MutableSetString\nDESCRIPTION: Splits a set into two based on an uncurried predicate function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_30\n\nLANGUAGE: reason\nCODE:\n```\nlet partitionU: (t, [@bs] (value => bool)) => (t, t);\n```\n\n----------------------------------------\n\nTITLE: Reducing a HashSetString with uncurried function\nDESCRIPTION: Applies an uncurried reducer function to each element with an initial accumulator value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/hash-set-string.mdx#2025-04-18_snippet_11\n\nLANGUAGE: res\nCODE:\n```\nlet reduceU: (t, 'c, (. 'c, key) => 'c) => 'c\n```\n\n----------------------------------------\n\nTITLE: Converting a string set to an array in ReScript\nDESCRIPTION: Returns an array of ordered set elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set-string.mdx#2025-04-18_snippet_31\n\nLANGUAGE: rescript\nCODE:\n```\nlet toArray: t => array<value>\n```\n\n----------------------------------------\n\nTITLE: Dictionary Entries Function\nDESCRIPTION: Function for getting key-value pairs as an array\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/dict.mdx#2025-04-18_snippet_13\n\nLANGUAGE: reason\nCODE:\n```\nlet entries: t('a) => array((key, 'a));\n```\n\n----------------------------------------\n\nTITLE: Map Array Elements with Index\nDESCRIPTION: Creates a new array with the results of calling the provided function on every element, with access to the element index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-64-array.mdx#2025-04-18_snippet_43\n\nLANGUAGE: reason\nCODE:\n```\nlet mapi: ((. elt, int) => 'b, t) => typed_array('b);\n```\n\n----------------------------------------\n\nTITLE: JSON StringifyAny Example\nDESCRIPTION: Example showing how to stringify an arbitrary value into JSON format.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/json.mdx#2025-04-18_snippet_7\n\nLANGUAGE: res\nCODE:\n```\nJs.log(Js.Json.stringifyAny([\"hello\", \"world\"]))\n```\n\n----------------------------------------\n\nTITLE: Type Casting in ReScript\nDESCRIPTION: Demonstrates unsafe type casting between types using the %identity external.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/interop-cheatsheet.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nexternal convertToFloat: int => float = \"%identity\"\nlet age = 10\nlet gpa = 2.1 +. convertToFloat(age)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar age = 10;\nvar gpa = 2.1 + 10;\n```\n\n----------------------------------------\n\nTITLE: Iterate Over Float32Array Elements\nDESCRIPTION: Executes the provided function once for each element in the Float32Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-32-array.mdx#2025-04-18_snippet_40\n\nLANGUAGE: rescript\nCODE:\n```\nlet forEach: ((. elt) => unit, t) => unit;\n```\n\n----------------------------------------\n\nTITLE: Creating UTC Date with Year, Month, Day, Hour, and Minute in ReScript\nDESCRIPTION: Function signature for utcWithYMDHM, which returns milliseconds since epoch for a UTC date with given year, month, day, hour, and minute.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_14\n\nLANGUAGE: rescript\nCODE:\n```\nlet utcWithYMDHM: (\n  ~year: float,\n  ~month: float,\n  ~date: float,\n  ~hours: float,\n  ~minutes: float,\n  unit,\n) => float\n```\n\n----------------------------------------\n\nTITLE: Reducing HashSetString with uncurried function\nDESCRIPTION: Applies an uncurried reducer function to accumulate a value by iterating over all elements in the HashSetString.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-set-string.mdx#2025-04-18_snippet_11\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduceU: (t, 'c, [@bs] (('c, key) => 'c)) => 'c;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Element from Belt.MutableSet using get in ReScript\nDESCRIPTION: The get function returns the reference of the value which is equivalent to the given value using the comparator specified by the collection. It returns None if the element does not exist.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_15\n\nLANGUAGE: ReScript\nCODE:\n```\nlet get: (t<'value, 'id>, 'value) => option<'value>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nmodule IntCmp = Belt.Id.MakeComparable({\n  type t = int\n  let cmp = Pervasives.compare\n})\n\nlet s0 = Belt.MutableSet.fromArray([1, 2, 3, 4, 5], ~id=module(IntCmp))\n\ns0->Belt.MutableSet.get(3) /* Some(3) */\ns0->Belt.MutableSet.get(20) /* None */\n```\n\n----------------------------------------\n\nTITLE: Converting a set to an array in ReScript with MutableSetInt\nDESCRIPTION: Returns an array containing all elements of the set in ascending order. This creates a new array without modifying the original set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_34\n\nLANGUAGE: rescript\nCODE:\n```\nlet toArray: t => array(value);\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet s0 = Belt.MutableSet.Int.fromArray([|3,2,1,5|]);\n\ns0->Belt.MutableSet.Int.toArray; /* [|1,2,3,5|] */\n```\n\n----------------------------------------\n\nTITLE: Setting Array Values with Offset in Float32Array\nDESCRIPTION: Sets the contents of the Float32Array from an array of elements, starting at the specified offset.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nlet setArrayOffset: (array<elt>, int, t) => unit\n```\n\n----------------------------------------\n\nTITLE: Creating Uint8ClampedArray from buffer\nDESCRIPTION: Creates a new Uint8ClampedArray view over the provided ArrayBuffer.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_52\n\nLANGUAGE: res\nCODE:\n```\nlet fromBuffer: Js_typed_array.array_buffer => t\n```\n\n----------------------------------------\n\nTITLE: Getting Hours in ReScript\nDESCRIPTION: Function signature for getHours, which returns the hours for a given date.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_22\n\nLANGUAGE: rescript\nCODE:\n```\nlet getHours: t => float\n```\n\n----------------------------------------\n\nTITLE: For Loop with Descending Range in ReScript\nDESCRIPTION: Shows the syntax for a for loop that counts down from a starting value to an ending value using 'downto'.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/control-flow.mdx#2025-04-18_snippet_6\n\nLANGUAGE: res\nCODE:\n```\nfor i in startValueInclusive downto endValueInclusive {\n  Js.log(i)\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nfor(var i = startValueInclusive; i >= endValueInclusive; --i){\n  console.log(i);\n}\n```\n\n----------------------------------------\n\nTITLE: String Index Of\nDESCRIPTION: Function signature for finding the first index of a substring.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/string-2.mdx#2025-04-18_snippet_17\n\nLANGUAGE: res\nCODE:\n```\nlet indexOf: (t, t) => int\n```\n\n----------------------------------------\n\nTITLE: Declaring makeWithYMDHMS Function for Date in ReScript\nDESCRIPTION: Declares the makeWithYMDHMS function, which creates a Date object from year, month, date, hours, minutes, and seconds values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_12\n\nLANGUAGE: rescript\nCODE:\n```\nlet makeWithYMDHMS: (\n  ~year: float,\n  ~month: float,\n  ~date: float,\n  ~hours: float,\n  ~minutes: float,\n  ~seconds: float,\n  unit,\n) => t\n```\n\n----------------------------------------\n\nTITLE: Slicing ArrayBuffer from Start Position\nDESCRIPTION: Function signature for creating a new ArrayBuffer by extracting a section from an existing buffer starting from a specified position to the end.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_array-buffer.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet sliceFrom: (t, int) => Js_typed_array2.array_buffer\n```\n\n----------------------------------------\n\nTITLE: Accessing localStorage in ReScript\nDESCRIPTION: External binding for accessing the browser's localStorage object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/dom/storage.mdx#2025-04-18_snippet_7\n\nLANGUAGE: reason\nCODE:\n```\n[@bs.val] external localStorage: t = \"localStorage\"\n```\n\n----------------------------------------\n\nTITLE: Getting Value with Exception - ReScript\nDESCRIPTION: Retrieves a reference to a value from the collection that matches the input value. Raises an exception if the element doesn't exist.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_13\n\nLANGUAGE: res\nCODE:\n```\nlet getExn: (t, value) => value\n```\n\n----------------------------------------\n\nTITLE: Unsafe Array Element Setting (unsafe_set) in ReScript\nDESCRIPTION: Function that provides unchecked setting of array elements. Can modify array beyond bounds with unpredictable results.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/array-2.mdx#2025-04-18_snippet_22\n\nLANGUAGE: reasonml\nCODE:\n```\nlet unsafe_set: (array('a), int, 'a) => unit;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet arr = [|100, 101, 102, 103|];\nJs.Array2.unsafe_set(arr, 3, 99);\nJs.Array2.unsafe_set(arr, 4, 88);\nJs.Array2.unsafe_set(arr, 6, 77);\nJs.Array2.unsafe_set(arr, -1, 66);\n```\n\n----------------------------------------\n\nTITLE: Testing TypedArray Elements with every Method in ReScript\nDESCRIPTION: Function signature for testing whether all elements in a Uint8ClampedArray pass the test implemented by the provided function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_32\n\nLANGUAGE: res\nCODE:\n```\nlet every: ((. elt) => bool, t) => bool\n```\n\n----------------------------------------\n\nTITLE: List Tail Function Signature\nDESCRIPTION: Function to get all elements except the first one as an option.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/list.mdx#2025-04-18_snippet_5\n\nLANGUAGE: ReScript\nCODE:\n```\nlet tl: t('a) => option(t('a));\n```\n\n----------------------------------------\n\nTITLE: ReScript Size Module with GenType\nDESCRIPTION: Example of exporting an entire ReScript module with types and functions to TypeScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/typescript-integration.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\n@genType\nmodule Size = {\n  type t =\n    | Small\n    | Medium\n    | Large\n\n  let getNum = (size: t) =>\n    switch size {\n    | Small => 1.\n    | Medium => 5.\n    | Large => 10.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Array to String with Separator\nDESCRIPTION: Function signature to join all elements of the array into a string with a specified separator.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_22\n\nLANGUAGE: res\nCODE:\n```\nlet joinWith: (string, t) => string\n```\n\n----------------------------------------\n\nTITLE: Copying a set in ReScript with MutableSetInt\nDESCRIPTION: Creates and returns a new set containing all elements from the input set. This operation performs a deep copy of the original set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet copy: t => t;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet s0 = Belt.MutableSet.Int.fromArray([|1, 3, 2, 4|])\n\nlet copied = s0->Belt.MutableSet.Int.copy;\ncopied->Belt.MutableSet.Int.toArray /* [|1, 2, 3, 4|] */\n```\n\n----------------------------------------\n\nTITLE: Checking MutableSet Operations\nDESCRIPTION: Examples of checking if a set is empty and if it contains specific elements\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nmodule IntCmp = Belt.Id.MakeComparable({\n  type t = int\n  let cmp = Pervasives.compare\n})\n\nlet empty = Belt.MutableSet.fromArray([], ~id=module(IntCmp))\nlet notEmpty = Belt.MutableSet.fromArray([1], ~id=module(IntCmp))\n\nBelt.MutableSet.isEmpty(empty) /* true */\nBelt.MutableSet.isEmpty(notEmpty) /* false */\n```\n\n----------------------------------------\n\nTITLE: Iterating over an integer hash set in ReScript\nDESCRIPTION: Function signature for applying a function to each element in the hash set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/hash-set-int.mdx#2025-04-18_snippet_10\n\nLANGUAGE: res\nCODE:\n```\nlet forEach: (t, key => unit) => unit\n```\n\n----------------------------------------\n\nTITLE: Defining ArrayBuffer Type in ReScript\nDESCRIPTION: Type definition for JavaScript ArrayBuffer interface in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype array_buffer;\n```\n\n----------------------------------------\n\nTITLE: Checking Internal Invariants of String Set in ReScript\nDESCRIPTION: Internal function that verifies if the set maintains its invariants. Raises an exception if invariants are not held. This is primarily used for debugging and validation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/set-string.mdx#2025-04-18_snippet_12\n\nLANGUAGE: res\nCODE:\n```\nlet checkInvariantInternal: t => unit\n```\n\n----------------------------------------\n\nTITLE: Slicing and Copying Uint8Array in ReScript\nDESCRIPTION: Functions for creating new Uint8Arrays from existing ones through slicing and copying.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet slice: (~start: int, ~end_: int, t) => t;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet copy: t => t;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet sliceFrom: (int, t) => t;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet subarray: (~start: int, ~end_: int, t) => t;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet subarrayFrom: (int, t) => t;\n```\n\n----------------------------------------\n\nTITLE: Defining the map type in MapString module (ReScript)\nDESCRIPTION: Defines the parametric type 't' that represents maps from string keys to values of type 'value'.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-string.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reason\nCODE:\n```\ntype t('value);\n```\n\n----------------------------------------\n\nTITLE: Reducing a HashMap with integer keys using uncurried function in ReScript\nDESCRIPTION: Reduces the hash map using an uncurried function that accumulates values from each key-value pair.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-map-int.mdx#2025-04-18_snippet_12\n\nLANGUAGE: reason\nCODE:\n```\nlet reduceU: (t('b), 'c, [@bs] (('c, key, 'b) => 'c)) => 'c;\n```\n\n----------------------------------------\n\nTITLE: String to Array-Like Conversion in ReScript\nDESCRIPTION: Provides a function to cast a string to an array-like entity that can be processed by JavaScript array functions. Useful for converting strings to arrays of characters.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/string.mdx#2025-04-18_snippet_25\n\nLANGUAGE: rescript\nCODE:\n```\nlet castToArrayLike: t => Js_array2.array_like<t>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet s = \"abcde\"\nlet arr = Js.Array2.fromMap(Js.String.castToArrayLike(s), x => x)\narr == [\"a\", \"b\", \"c\", \"d\", \"e\"]\n```\n\n----------------------------------------\n\nTITLE: Vector Indexed Iteration\nDESCRIPTION: Iterates over vector elements with index access.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/vector.mdx#2025-04-18_snippet_7\n\nLANGUAGE: res\nCODE:\n```\nlet iteri: ((. int, 'a) => unit, t<'a>) => unit\n```\n\n----------------------------------------\n\nTITLE: Searching Float32Array in ReScript\nDESCRIPTION: Functions to search for elements in a Float32Array, including includes, indexOf, and lastIndexOf.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet includes: (elt, t) => bool;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet indexOf: (elt, t) => int;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet indexOfFrom: (elt, ~from: int, t) => int;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet lastIndexOf: (elt, t) => int;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet lastIndexOfFrom: (elt, ~from: int, t) => int;\n```\n\n----------------------------------------\n\nTITLE: Element Access Operations in ReScript Set\nDESCRIPTION: Functions for accessing specific elements in the set using comparators.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-dict.mdx#2025-04-18_snippet_18\n\nLANGUAGE: reason\nCODE:\n```\nlet get: (t('value, 'id), 'value, ~cmp: cmp('value, 'id)) => option('value);\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet getUndefined: (t('value, 'id), 'value, ~cmp: cmp('value, 'id)) => Js.undefined('value);\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet getExn: (t('value, 'id), 'value, ~cmp: cmp('value, 'id)) => 'value;\n```\n\n----------------------------------------\n\nTITLE: Iter Function Implementation in ReScript\nDESCRIPTION: Function for iterating over nullable values with a side-effect function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/null.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nlet iter: (t<'a>, (. 'a) => unit) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet maybeSay = (maybeMessage: Js.null<string>) =>\n  Js.Null.iter(maybeMessage, (. message) => Js.log(message))\n```\n\n----------------------------------------\n\nTITLE: Keeping Elements (Uncurried) in ReScript MapInt Module\nDESCRIPTION: Function signature for keeping elements that satisfy an uncurried predicate.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-int.mdx#2025-04-18_snippet_46\n\nLANGUAGE: rescript\nCODE:\n```\nlet keepU: (t<'v>, (. key, 'v) => bool) => t<'v>\n```\n\n----------------------------------------\n\nTITLE: Converting Array to String with toLocaleString in ReScript\nDESCRIPTION: Converts an array to a string using the conventions of the current locale. Each element is converted to a string using JavaScript. All elements in a ReasonML array must have the same type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/array-2.mdx#2025-04-18_snippet_10\n\nLANGUAGE: ReScript\nCODE:\n```\nlet toLocaleString: t<'a> => string\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nJs.Array2.toLocaleString([Js.Date.make()])\n// returns \"3/19/2020, 10:52:11 AM\" for locale en_US.utf8\n// returns \"2020-3-19 10:52:11\" for locale de_DE.utf8\n```\n\n----------------------------------------\n\nTITLE: Getting Minutes from Date in ReScript\nDESCRIPTION: ReScript binding for JavaScript's Date.getMinutes method. Returns the number of minutes for a date, evaluated in the current time zone.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_24\n\nLANGUAGE: res\nCODE:\n```\nlet getMinutes: t => float\n```\n\nLANGUAGE: res\nCODE:\n```\nJs.Date.getMinutes(exampleDate) == 30.0\n```\n\n----------------------------------------\n\nTITLE: Creating Uint8Array from Buffer with Offset\nDESCRIPTION: Creates a new Uint8Array view for the ArrayBuffer starting at the given offset. Can throw an exception.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_53\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromBufferOffset: (Js_typed_array.array_buffer, int) => t\n```\n\n----------------------------------------\n\nTITLE: Accessing Top Element of MutableStack as Option in ReScript\nDESCRIPTION: Function signature for accessing the top element of the stack without removing it, returning an option type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-stack.mdx#2025-04-18_snippet_8\n\nLANGUAGE: ReScript\nCODE:\n```\nlet top: t<'a> => option<'a>\n```\n\n----------------------------------------\n\nTITLE: Accessing and Setting Float32Array Elements in ReScript\nDESCRIPTION: Provides unsafe methods to get and set elements in a Float32Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet unsafe_get: (t, int) => elt;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet unsafe_set: (t, int, elt) => unit;\n```\n\n----------------------------------------\n\nTITLE: ReScript JavaScript Logging Functions\nDESCRIPTION: Convenience functions for logging with different numbers of arguments.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet log: 'a => unit\nlet log2: ('a, 'b) => unit\nlet log3: ('a, 'b, 'c) => unit\nlet log4: ('a, 'b, 'c, 'd) => unit\nlet logMany: array<'a> => unit\n```\n\n----------------------------------------\n\nTITLE: Creating Set from Array\nDESCRIPTION: Function signature for creating a set from an array of strings.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\nlet fromArray: array<value> => t\n```\n\n----------------------------------------\n\nTITLE: Splitting MapDict in ReScript\nDESCRIPTION: Function to split a MapDict into two parts based on a key.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_23\n\nLANGUAGE: ReScript\nCODE:\n```\nlet split: (t<'a, 'b, 'id>, 'a, ~cmp: cmp<'a, 'id>) => ((t<'a, 'b, 'id>, t<'a, 'b, 'id>), option<'b>)\n```\n\n----------------------------------------\n\nTITLE: Creating Uint8ClampedArray from array-like object\nDESCRIPTION: Creates a new Uint8ClampedArray from an array-like object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_56\n\nLANGUAGE: res\nCODE:\n```\nlet from: Js_typed_array.array_like<elt> => t\n```\n\n----------------------------------------\n\nTITLE: Getting value with default in ReScript\nDESCRIPTION: Function signature for getting a value by key from a mutable map, returning a default value if the key is not found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_34\n\nLANGUAGE: ReScript\nCODE:\n```\nlet getWithDefault: (t<'a>, key, 'a) => 'a\n```\n\n----------------------------------------\n\nTITLE: Defining String Set Types in ReScript\nDESCRIPTION: Defines the types for string values and sets used in the Belt.Set.String module.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/set-string.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype value = string\ntype t\n```\n\n----------------------------------------\n\nTITLE: Extracting Value from Option in ReScript\nDESCRIPTION: Function signature for extracting a value from Some, throws if None.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/option.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet getExn: option<'a> => 'a\n```\n\n----------------------------------------\n\nTITLE: Power Functions in ReScript\nDESCRIPTION: Functions to raise a base to an exponent for integers and floats.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/math.mdx#2025-04-18_snippet_46\n\nLANGUAGE: rescript\nCODE:\n```\nlet pow_int: (~base: int, ~exp: int) => int;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.Math.pow_int(~base=3, ~exp=4) == 81;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet pow_float: (~base: float, ~exp: float) => float;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.Math.pow_float(~base=3.0, ~exp=4.0) == 81.0;\nJs.Math.pow_float(~base=4.0, ~exp=-2.0) == 0.0625;\nJs.Math.pow_float(~base=625.0, ~exp=0.5) == 25.0;\nJs.Math.pow_float(~base=625.0, ~exp=-0.5) == 0.04;\nJs.Float.isNaN(Js.Math.pow_float(~base=-2.0, ~exp=0.5)) == true;\n```\n\n----------------------------------------\n\nTITLE: Example Shim Type Definitions\nDESCRIPTION: Examples of TypeScript shim files that provide type definitions for ReScript modules, allowing them to be properly typed when imported in TypeScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/typescript-integration.mdx#2025-04-18_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Excerpt from https://github.com/rescript-lang/rescript-compiler/blob/master/jscomp/gentype_tests/typescript-react-example/src/shims/Js.shim.ts\nexport type Json_t = unknown;\nexport type t = unknown;\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Excerpt from https://github.com/rescript-lang/rescript-compiler/tree/master/jscomp/gentype_tests/typescript-react-example/src/shims\nexport type inputFocusEvent = React.FocusEvent<HTMLInputElement>;\n```\n\n----------------------------------------\n\nTITLE: Reducing a set with uncurried function in ReScript with MutableSetInt\nDESCRIPTION: Applies the given uncurried function to each element of the set in increasing order with an accumulator. This is an internal function primarily used for optimization.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_22\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduceU: (t, 'a, [@bs] (('a, value) => 'a)) => 'a;\n```\n\n----------------------------------------\n\nTITLE: Setting a Key-Value Pair in HashMap in ReScript\nDESCRIPTION: Adds a new key-value pair to the hash map or updates the value if the key already exists.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-map-int.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet set: (t<'a>, key, 'a) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet hMap = Belt.HashMap.Int.fromArray([(2, \"2\")])\n\nBelt.HashMap.Int.set(hMap, 1, \"1\")\n\nBelt.HashMap.Int.valuesToArray(hMap) == [\"1\", \"2\"]\n```\n\n----------------------------------------\n\nTITLE: Combining Option Values in ReScript\nDESCRIPTION: Function to return the first Some value between two options.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/option.mdx#2025-04-18_snippet_11\n\nLANGUAGE: reason\nCODE:\n```\nlet firstSome: (option('a), option('a)) => option('a);\n```\n\nLANGUAGE: reason\nCODE:\n```\nJs.Option.firstSome(Some(\"one\"), Some(\"two\")) == Some(\"one\");\nJs.Option.firstSome(Some(\"one\"), None) == Some(\"one\");\nJs.Option.firstSome(None, Some(\"two\")) == Some(\"two\");\nJs.Option.firstSome(None, None) == None;\n```\n\n----------------------------------------\n\nTITLE: Reading an Int8 value from a DataView in ReScript\nDESCRIPTION: Function signature for getting a signed 8-bit integer from the specified byte offset.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_data-view.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\nlet getInt8: (t, int) => int\n```\n\n----------------------------------------\n\nTITLE: Using Belt.Option.getExn in ReScript\nDESCRIPTION: Shows how to use the getExn function to extract a value from an option, with a warning about raising an error for None.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/option.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nBelt.Option.getExn(Some(3)) /* 3 */\n\nBelt.Option.getExn(None) /* Raises an Error */\n```\n\n----------------------------------------\n\nTITLE: Defining stableSortInPlaceByU Function\nDESCRIPTION: Uncurried version of stableSortInPlaceBy function for in-place stable sorting.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/sort-array.mdx#2025-04-18_snippet_6\n\nLANGUAGE: reason\nCODE:\n```\nlet stableSortInPlaceByU: (array('a), [@bs] (('a, 'a) => int)) => unit;\n```\n\n----------------------------------------\n\nTITLE: Finding Last Substring Position in ReScript\nDESCRIPTION: The lastIndexOf function returns the last occurrence index of a substring within a string, searching backwards from the end, or -1 if not found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string.mdx#2025-04-18_snippet_19\n\nLANGUAGE: reason\nCODE:\n```\nlet lastIndexOf: (t, t) => int;\n```\n\nLANGUAGE: reason\nCODE:\n```\nJs.String.lastIndexOf(\"ok\", \"bookseller\") == 2;\nJs.String.lastIndexOf(\"ee\", \"beekeeper\") == 4;\nJs.String.lastIndexOf(\"xyz\", \"abcdefg\") == -1;\n```\n\n----------------------------------------\n\nTITLE: JavaScript Type Classification Function Signature in ReScript\nDESCRIPTION: Function signature for classifying a JavaScript value into its corresponding tagged type, enabling type-safe handling of arbitrary JavaScript values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/types.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\nlet classify: 'a => tagged_t\n```\n\n----------------------------------------\n\nTITLE: Using Two-argument Arctangent in ReScript\nDESCRIPTION: Examples demonstrating the use of atan2 function with different coordinate values to calculate angles in radians.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/math.mdx#2025-04-18_snippet_17\n\nLANGUAGE: reasonml\nCODE:\n```\nJs.Math.atan2(~y=0.0, ~x=10.0, ()) == 0.0 ;\nJs.Math.atan2(~x=5.0, ~y=5.0, ()) == Js.Math._PI /. 4.0;\nJs.Math.atan2(~x=-5.0, ~y=5.0, ());\nJs.Math.atan2(~x=-5.0, ~y=5.0, ()) == 3.0 *. Js.Math._PI /. 4.0;\nJs.Math.atan2(~x=-0.0, ~y=-5.0, ()) == -. Js.Math._PI /. 2.0;\n```\n\n----------------------------------------\n\nTITLE: Converting String to Uppercase in ReScript\nDESCRIPTION: The toUpperCase function converts a string to uppercase using Unicode character mappings. It handles cases where uppercase conversion expands the number of characters.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string-2.mdx#2025-04-18_snippet_26\n\nLANGUAGE: reason\nCODE:\n```\nlet toUpperCase: t => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nJs.String2.toUpperCase(\"abc\") == \"ABC\";\nJs.String2.toUpperCase({js|Straße|js}) == {js|STRASSE|js};\nJs.String2.toUpperCase({js|πς|js}) == {js|ΠΣ|js};\n```\n\n----------------------------------------\n\nTITLE: Peeking at First Element of MutableQueue in ReScript\nDESCRIPTION: The 'peek' function returns the first element in the queue without removing it, wrapped in an Option type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-queue.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet peek: t<'a> => option<'a>\n```\n\n----------------------------------------\n\nTITLE: Reduce Operations for Float64Array\nDESCRIPTION: Functions to execute a reducer function on each element of a Float64Array, resulting in a single output value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-64-array.mdx#2025-04-18_snippet_21\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduce: ((. 'b, elt) => 'b, 'b, t) => 'b\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet reducei: ((. 'b, elt, int) => 'b, 'b, t) => 'b\n```\n\n----------------------------------------\n\nTITLE: Accessing reserved keywords as JavaScript object attributes in ReScript\nDESCRIPTION: Demonstrates how to use @bs.as annotation to access JavaScript object properties that use reserved keywords as names. It's customary to append an underscore to the field name in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/reason-compiler/latest/handling-js-naming-collisions.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\ntype payload {\n  [@bs.as \"type\"]\n  type_: string\n}\n\nlet payload = {\n  type_: \"Documentation\"\n}\n\n/* Reason is happy since we're using the valid `type_` field name */\nlet payloadType = payload.type_;\n```\n\nLANGUAGE: js\nCODE:\n```\n/* The reason compiler has correctly ouput `payload.type` even though *we* called the field `type_` */\nvar payloadType = payload.type;\n```\n\n----------------------------------------\n\nTITLE: RegExp Input String Function\nDESCRIPTION: Function signature for getting the original input string from a RegExp result.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/re.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\nlet input: result => string\n```\n\n----------------------------------------\n\nTITLE: Removing multiple elements from a string set in ReScript\nDESCRIPTION: Removes each element of the given array from the set. The reference of the return value might change even if some values didn't exist in the set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set-string.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rescript\nCODE:\n```\nlet removeMany: (t, array<value>) => t\n```\n\n----------------------------------------\n\nTITLE: Example of String Set Difference in ReScript\nDESCRIPTION: Demonstrates how to create a difference between two string sets, showing elements unique to each set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-string.mdx#2025-04-18_snippet_24\n\nLANGUAGE: reasonml\nCODE:\n```\nlet s0 = Belt.Set.String.fromArray([|\"apple\", \"banana\", \"orange\", \"carrot\"|]);\nlet s1 = Belt.Set.String.fromArray([|\"apple\", \"banana\", \"orange\", \"strawberry\"|]);\nBelt.Set.String.toArray(Belt.Set.String.diff(s0, s1)); /* [|\"carrot\"|] */\nBelt.Set.String.toArray(Belt.Set.String.diff(s1, s0)); /* [|\"strawberry\"|] */\n```\n\n----------------------------------------\n\nTITLE: Map Partition Function Signature\nDESCRIPTION: Splits a map into two based on a predicate function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map.mdx#2025-04-18_snippet_11\n\nLANGUAGE: rescript\nCODE:\n```\nlet partition: (t<'k, 'v, 'id>, ('k, 'v) => bool) => (t<'k, 'v, 'id>, t<'k, 'v, 'id>)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Object Keys with keys()\nDESCRIPTION: The keys() function returns an array of strings containing all the keys of an object's own enumerable properties.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/obj.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reasonml\nCODE:\n```\nlet keys: Js.t('a) => array(string);\n```\n\n----------------------------------------\n\nTITLE: Reducing from Right with Index\nDESCRIPTION: Applies a function against an accumulator and each element with its index from right to left to reduce to a single value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_47\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduceRighti: ((. 'b, elt, int) => 'b, 'b, t) => 'b\n```\n\n----------------------------------------\n\nTITLE: Create Float32Array (Alias for make)\nDESCRIPTION: Creates a new Float32Array from an array of values. An alias for the make function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_57\n\nLANGUAGE: rescript\nCODE:\n```\nlet create: array<elt> => t\n```\n\n----------------------------------------\n\nTITLE: Using getDay Function in ReScript\nDESCRIPTION: Demonstrates the use of the getDay function to retrieve the day of the week from the example date.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_19\n\nLANGUAGE: rescript\nCODE:\n```\nJs.Date.getDay(exampleDate) == 4.0\n```\n\n----------------------------------------\n\nTITLE: Vector Creation Operation\nDESCRIPTION: Creates a new vector of specified length initialized with a value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/vector.mdx#2025-04-18_snippet_16\n\nLANGUAGE: res\nCODE:\n```\nlet make: (int, 'a) => t<'a>\n```\n\n----------------------------------------\n\nTITLE: Checking any element in MapDict (ReScript)\nDESCRIPTION: Functions for checking if any key-value pair in a MapDict satisfies a predicate.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_9\n\nLANGUAGE: ReScript\nCODE:\n```\nlet someU: (t<'k, 'a, 'id>, (. 'k, 'a) => bool) => bool\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet some: (t<'k, 'a, 'id>, ('k, 'a) => bool) => bool\n```\n\n----------------------------------------\n\nTITLE: Retrieving Int16Array Properties in ReScript\nDESCRIPTION: Functions to get the underlying buffer, byte length, and byte offset of an Int16Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_int-16-array.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet buffer: t => Js_typed_array.array_buffer;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet byteLength: t => int;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet byteOffset: t => int;\n```\n\n----------------------------------------\n\nTITLE: Comparing Some Value with Given Value in ReScript\nDESCRIPTION: Function to compare a value with an option using a custom equality function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/option.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reason\nCODE:\n```\nlet isSomeValue: ((. 'a, 'a) => bool, 'a, option('a)) => bool;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet clockEqual = (. a, b) => (a mod 12 == b mod 12);\nJs.Option.isSomeValue(clockEqual, 3, Some(15)) == true;\nJs.Option.isSomeValue(clockEqual, 3, Some(4)) == false;\nJs.Option.isSomeValue(clockEqual, 3, None) == false;\n```\n\n----------------------------------------\n\nTITLE: Defining Vector Type in ReScript\nDESCRIPTION: Defines the type 't' for vectors as an array of generic type 'a'.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/vector.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\ntype t('a) = array('a);\n```\n\n----------------------------------------\n\nTITLE: List to Vector Conversion Function Signature in ReScript\nDESCRIPTION: Defines the signature for the 'toVector' function, which converts a list to a JavaScript array-like vector.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/list.mdx#2025-04-18_snippet_20\n\nLANGUAGE: rescript\nCODE:\n```\nlet toVector: t<'a> => Js_vector.t<'a>\n```\n\n----------------------------------------\n\nTITLE: Examples of Float Ceiling Function in ReScript\nDESCRIPTION: Examples demonstrating the use of ceil_float with different numeric values, including a value outside the int range.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/math.mdx#2025-04-18_snippet_26\n\nLANGUAGE: reasonml\nCODE:\n```\nJs.Math.ceil_float(3.1) == 4.0;\nJs.Math.ceil_float(3.0) == 3.0;\nJs.Math.ceil_float(-3.1) == -3.0;\nJs.Math.ceil_float(2_150_000_000.3) == 2_150_000_001.0;\n```\n\n----------------------------------------\n\nTITLE: Copying array elements within an array in ReScript\nDESCRIPTION: Functions to copy elements within an array with different targeting options, modifying the array in place.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/array-2.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reason\nCODE:\n```\nlet copyWithin: (t('a), ~to_: int) => t('a);\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet arr = [|100, 101, 102, 103, 104|];\nJs.Array2.copyWithin(arr, ~to_=2)\n  == [|100, 101, 100, 101, 102|];\narr == [|100, 101, 100, 101, 102|];\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet copyWithinFrom: (t('a), ~to_: int, ~from: int) => t('a);\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet arr = [|100, 101, 102, 103, 104|];\nJs.Array2.copyWithinFrom(arr, ~from=2, ~to_=0)\n  == [|102, 103, 104, 103, 104|];\narr == [|102, 103, 104, 103, 104|];\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet copyWithinFromRange: (t('a), ~to_: int, ~start: int, ~end_: int) => t('a);\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet arr = [|100, 101, 102, 103, 104, 105|];\nJs.Array2.copyWithinFromRange(arr, ~start=2, ~end_=5, ~to_=1)\n  == [|100, 102, 103, 104, 104, 105|];\narr == [|100, 102, 103, 104, 104, 105|];\n```\n\n----------------------------------------\n\nTITLE: Signature of someBy function in Belt.Range\nDESCRIPTION: Type signature for the someBy function that checks if a predicate is true for at least one element in a range with a step parameter.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/range.mdx#2025-04-18_snippet_13\n\nLANGUAGE: reason\nCODE:\n```\nlet someBy: (int, int, ~step: int, int => bool) => bool;\n```\n\n----------------------------------------\n\nTITLE: Converting Belt.Set to List in ReScript\nDESCRIPTION: Demonstrates how to convert a Belt.Set to a list of ordered elements using the toList function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set.mdx#2025-04-18_snippet_22\n\nLANGUAGE: rescript\nCODE:\n```\nlet s0 = Belt.Set.fromArray([3,2,1,5], ~id=module(IntCmp))\n\ns0->Belt.Set.toList /* [1,2,3,5] */\n```\n\n----------------------------------------\n\nTITLE: Slicing ArrayBuffer from Start Index in ReScript\nDESCRIPTION: Function signature for creating a new ArrayBuffer by extracting a section from a start index to the end.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array-2_array-buffer.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet sliceFrom: (t, int) => Js_typed_array2.array_buffer\n```\n\n----------------------------------------\n\nTITLE: Accessing error name from JavaScript exception\nDESCRIPTION: Function that extracts the error name (type) from a JavaScript exception, returning None if not available.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/exn.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet name: t => option(string);\n```\n\n----------------------------------------\n\nTITLE: Checking if a set contains an element in ReScript with MutableSetInt\nDESCRIPTION: Returns a boolean indicating whether the specified value exists in the set. This is an efficient lookup operation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nlet has: (t, value) => bool;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet set = Belt.MutableSet.Int.fromArray([|1, 4, 2, 5|]);\n\nset->Belt.MutableSet.Int.has(3) /* false */\nset->Belt.MutableSet.Int.has(1) /* true */\n```\n\n----------------------------------------\n\nTITLE: Adding multiple keys to HashSetString\nDESCRIPTION: Adds all elements from the array to the existing HashSetString.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-set-string.mdx#2025-04-18_snippet_17\n\nLANGUAGE: rescript\nCODE:\n```\nlet mergeMany: (t, array(key)) => unit;\n```\n\n----------------------------------------\n\nTITLE: Defining ArrayBuffer Type in ReScript\nDESCRIPTION: Defines the type alias for ArrayBuffer, using the underlying Js_typed_array2.array_buffer type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_array-buffer.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reasonml\nCODE:\n```\ntype t = Js_typed_array2.array_buffer;\n```\n\n----------------------------------------\n\nTITLE: Defining Int8Array Types in ReScript\nDESCRIPTION: Defines the fundamental types for Int8Array bindings, including the element type (int), the typed_array generic type, and the specific Int8Array type alias.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\ntype elt = int\ntype typed_array<'a> = Js_typed_array2.Int8Array.typed_array<'a>\ntype t = typed_array<elt>\n```\n\n----------------------------------------\n\nTITLE: Configuring Post-Build Hook in bsconfig.json for ReScript\nDESCRIPTION: Example of how to set up a post-build hook in bsconfig.json. This hook is invoked every time a file is recompiled, useful for JS build system interop.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/build-configuration.mdx#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"js-post-build\": {\n    \"cmd\": \"/path/to/node ../../postProcessTheFile.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Float Multiplication in ReScript\nDESCRIPTION: Multiplies two float values. Can be used with module opening to avoid dot notation, though this may cause shadow warnings in default configuration.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/float.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet (*): (float, float) => float\n```\n\nLANGUAGE: rescript\nCODE:\n```\nopen Belt.Float\nJs.log(2.0 * 2.0 === 4.0) /* true */\n```\n\n----------------------------------------\n\nTITLE: Finding Element Index from Position in TypedArray in ReScript\nDESCRIPTION: Function signature for finding the first index at which a given element can be found in a Uint8ClampedArray, starting from a specified index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_20\n\nLANGUAGE: res\nCODE:\n```\nlet indexOfFrom: (elt, ~from: int, t) => int\n```\n\n----------------------------------------\n\nTITLE: Peeking First Element of MutableQueue in ReScript\nDESCRIPTION: Function to return the first element in the queue without removing it, wrapped in an option type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-queue.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet peek: t('a) => option('a);\n```\n\n----------------------------------------\n\nTITLE: Creating an empty Belt.MutableSet.Int in ReScript\nDESCRIPTION: Creates and returns an empty set using the make function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\nlet make: unit => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet set = Belt.MutableSet.Int.make()\n```\n\n----------------------------------------\n\nTITLE: Finding Maximum Value in ReScript Belt.MutableSet\nDESCRIPTION: The 'maximum' and 'maxUndefined' functions return the maximum value in a MutableSet. 'maximum' returns an option type, while 'maxUndefined' returns undefined for empty sets.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_52\n\nLANGUAGE: reason\nCODE:\n```\nlet maximum: t('value, 'id) => option('value);\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet maxUndefined: t('value, 'id) => Js.undefined('value);\n```\n\nLANGUAGE: reason\nCODE:\n```\nmodule IntCmp =\n  Belt.Id.MakeComparable({\n    type t = int;\n    let cmp = Pervasives.compare;\n  });\n\nlet s0 = Belt.MutableSet.make(~id=(module IntCmp));\nlet s1 = Belt.MutableSet.fromArray([|3,2,1,5|], ~id=(module IntCmp));\n\ns0->Belt.MutableSet.maximum; /* None */\ns1->Belt.MutableSet.maximum; /* Some(5) */\n\ns0->Belt.MutableSet.maxUndefined; /* undefined */\ns1->Belt.MutableSet.maxUndefined; /* 5 */\n```\n\n----------------------------------------\n\nTITLE: Getting the size of a string set in ReScript\nDESCRIPTION: Returns the number of elements in the set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set-string.mdx#2025-04-18_snippet_29\n\nLANGUAGE: rescript\nCODE:\n```\nlet size: t => int\n```\n\n----------------------------------------\n\nTITLE: Writing a Uint32 value to a DataView in ReScript\nDESCRIPTION: Function signature for storing an unsigned 32-bit integer at the specified byte offset with big-endian format.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_data-view.mdx#2025-04-18_snippet_30\n\nLANGUAGE: rescript\nCODE:\n```\nlet setUint32: (t, int, int) => unit\n```\n\n----------------------------------------\n\nTITLE: Converting a HashMap with integer keys to an array of pairs in ReScript\nDESCRIPTION: Converts the hash map to an array of key-value pairs.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-map-int.mdx#2025-04-18_snippet_17\n\nLANGUAGE: reason\nCODE:\n```\nlet toArray: t('a) => array((key, 'a));\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet hMap = Belt.HashMap.Int.make(~hintSize=10);\nBelt.HashMap.Int.set(hMap, 1, \"value1\");\nBelt.HashMap.Int.set(hMap, 2, \"value2\");\n\nBelt.HashMap.Int.toArray(hMap) == [|(1, \"value1\"), (2, \"value2\")|];\n```\n\n----------------------------------------\n\nTITLE: RegExp Ignore Case Check\nDESCRIPTION: Function signature for checking if ignore case flag is set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/re.mdx#2025-04-18_snippet_10\n\nLANGUAGE: res\nCODE:\n```\nlet ignoreCase: t => bool\n```\n\n----------------------------------------\n\nTITLE: Retrieving Value with Exception Handling in ReScript Belt.Set.String\nDESCRIPTION: Gets a reference to a value in the set that matches the provided value. Raises an exception when the element does not exist, used when you're certain the element exists.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set-string.mdx#2025-04-18_snippet_38\n\nLANGUAGE: rescript\nCODE:\n```\nlet getExn: (t, value) => value\n```\n\n----------------------------------------\n\nTITLE: Checking All Elements in ReScript MutableSetString\nDESCRIPTION: Tests whether all elements satisfy a predicate function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_25\n\nLANGUAGE: reason\nCODE:\n```\nlet every: (t, value => bool) => bool;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet hasAtLeastFiveChars = x => String.length(x) >= 5;\n\nlet s0 = Belt.MutableSet.String.fromArray([|\"apple\", \"carrot\"|]);\ns0->Belt.MutableSet.String.every(hasAtLeastFiveChars); /* true */\n```\n\n----------------------------------------\n\nTITLE: Declaring make Function for Date in ReScript\nDESCRIPTION: Declares the make function, which creates a new Date object representing the current time.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet make: unit => t\n```\n\n----------------------------------------\n\nTITLE: Using getDate Function in ReScript\nDESCRIPTION: Demonstrates the use of the getDate function to retrieve the day of the month from the example date.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_17\n\nLANGUAGE: rescript\nCODE:\n```\nJs.Date.getDate(exampleDate) == 29.0\n```\n\n----------------------------------------\n\nTITLE: Creating UTC Date with Year, Month, Day, Hour, Minute, and Second in ReScript\nDESCRIPTION: Function signature for utcWithYMDHMS, which returns milliseconds since epoch for a UTC date with given year, month, day, hour, minute, and second.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_15\n\nLANGUAGE: rescript\nCODE:\n```\nlet utcWithYMDHMS: (\n  ~year: float,\n  ~month: float,\n  ~date: float,\n  ~hours: float,\n  ~minutes: float,\n  ~seconds: float,\n  unit,\n) => float\n```\n\n----------------------------------------\n\nTITLE: Minimum Value with Undefined in ReScript Belt.Set\nDESCRIPTION: Returns the minimum value from a Belt.Set collection. Returns undefined if the collection is empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set.mdx#2025-04-18_snippet_24\n\nLANGUAGE: res\nCODE:\n```\nlet minUndefined: t<'value, 'id> => Js.undefined<'value>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet s0 = Belt.Set.make(~id=module(IntCmp))\nlet s1 = Belt.Set.fromArray([3,2,1,5], ~id=module(IntCmp))\n\ns0->Belt.Set.minUndefined /* undefined */\ns1->Belt.Set.minUndefined /* 1 */\n```\n\n----------------------------------------\n\nTITLE: Using tan function to calculate tangent in ReScript\nDESCRIPTION: The tan function returns the tangent of its argument, which must be specified in radians. It takes a float as input and returns a float, returning NaN if the argument is positive or negative infinity.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/math.mdx#2025-04-18_snippet_33\n\nLANGUAGE: res\nCODE:\n```\nlet tan: float => float\n```\n\n----------------------------------------\n\nTITLE: Reducing MutableQueue with Uncurried Function in ReScript\nDESCRIPTION: Function to reduce the queue elements using an uncurried function and an initial accumulator.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-queue.mdx#2025-04-18_snippet_18\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduceU: (t('a), 'b, [@bs] (('b, 'a) => 'b)) => 'b;\n```\n\n----------------------------------------\n\nTITLE: Invalid Ref Usage in Component Props\nDESCRIPTION: Shows that trying to pass a ref directly as a prop to a component function will not work and will result in a compilation error, indicating that ref forwarding should be used instead.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/refs-and-the-dom.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nmodule MyComp = {\n  @react.component\n  let make = (~ref) => <input />\n}\n\n@react.component\nlet make = () => {\n  let textInput = React.useRef(Nullable.null)\n\n  // This will **not** work\n  <MyComp ref={ReactDOM.Ref.domRef(textInput)} />\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Compiler Error:\n// Ref cannot be passed as a normal prop. Please use `forwardRef`\n// API instead\n```\n\n----------------------------------------\n\nTITLE: Console Info Functions in ReScript\nDESCRIPTION: Functions for logging information messages to the console with different arities. These functions use the info log level for informational messages.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/console.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reasonml\nCODE:\n```\nlet info: 'a => unit;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet info2: ('a, 'b) => unit;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet info3: ('a, 'b, 'c) => unit;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet info4: ('a, 'b, 'c, 'd) => unit;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet infoMany: array('a) => unit;\n```\n\n----------------------------------------\n\nTITLE: Checking any element with curried predicate in ReScript\nDESCRIPTION: Function signature for checking if any element in a mutable map satisfies a curried predicate. The application order is unspecified.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_17\n\nLANGUAGE: ReScript\nCODE:\n```\nlet some: (t<'a>, (key, 'a) => bool) => bool\n```\n\n----------------------------------------\n\nTITLE: Array Creation Methods\nDESCRIPTION: Functions for creating new Int32Arrays from various sources including buffers and existing arrays.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_int-32-array.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet make: array<elt> => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromBuffer: Js_typed_array2.array_buffer => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromBufferOffset: (Js_typed_array2.array_buffer, int) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromBufferRange: (Js_typed_array2.array_buffer, ~offset: int, ~length: int) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromLength: int => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet from: Js_typed_array2.array_like<elt> => t\n```\n\n----------------------------------------\n\nTITLE: Converting MutableQueue to Array in ReScript\nDESCRIPTION: The 'toArray' function converts the queue to an array, with the first added element at the beginning of the array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-queue.mdx#2025-04-18_snippet_21\n\nLANGUAGE: rescript\nCODE:\n```\nlet toArray: t<'a> => array<'a>\n```\n\n----------------------------------------\n\nTITLE: Creating Arrays from Array-like Objects in ReScript\nDESCRIPTION: Functions to create arrays from array-like objects and map their values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/array-2.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet from: array_like<'a> => array<'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromMap: (array_like<'a>, 'a => 'b) => array<'b>\n```\n\n----------------------------------------\n\nTITLE: Illustrating Type Error with Record Field Resolution in ReScript\nDESCRIPTION: This code demonstrates how the ReScript type system infers the `monster` type for the `getAge` function, causing a type error when used with a `person` record.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/record.mdx#2025-04-18_snippet_12\n\nLANGUAGE: res\nCODE:\n```\nlet kraken = {age: 9999, hasTentacles: true}\nlet me = {age: 5, name: \"Baby ReScript\"}\n\ngetAge(kraken)\ngetAge(me) // type error!\n```\n\n----------------------------------------\n\nTITLE: Example of Checking Any Element in String Set in ReScript\nDESCRIPTION: Demonstrates how to check if any string in a set meets a condition, such as having exactly five characters.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-string.mdx#2025-04-18_snippet_41\n\nLANGUAGE: reasonml\nCODE:\n```\nlet hasFiveChars = x => String.length(x) == 5;\n\nlet s0 = Belt.Set.String.fromArray([|\"strawberry\", \"apple\"|]);\ns0->Belt.Set.String.some(hasFiveChars); /* true */\n```\n\n----------------------------------------\n\nTITLE: Writing an Int16 value with little-endian format in ReScript\nDESCRIPTION: Function signature for storing a signed 16-bit integer at the specified byte offset with little-endian format.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_data-view.mdx#2025-04-18_snippet_25\n\nLANGUAGE: rescript\nCODE:\n```\nlet setInt16LittleEndian: (t, int, int) => unit\n```\n\n----------------------------------------\n\nTITLE: Finding maximum key-value pair in MapString module (ReScript)\nDESCRIPTION: Function to find the key-value pair with the maximum key in a map, returning an option type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-string.mdx#2025-04-18_snippet_31\n\nLANGUAGE: reason\nCODE:\n```\nlet maximum: t('v) => option((key, 'v));\n```\n\n----------------------------------------\n\nTITLE: Setting Hours and Minutes in ReScript\nDESCRIPTION: ReScript binding for JavaScript's Date.setHours method with minutes parameter. Sets the hours and minutes and returns the time value. This function modifies the original Date object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_43\n\nLANGUAGE: res\nCODE:\n```\nlet setHoursM: (t, ~hours: float, ~minutes: float, unit) => float\n```\n\nLANGUAGE: res\nCODE:\n```\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet futureTime = Js.Date.setHoursM(date1, ~hours=22.0, ~minutes=46.0, ())\ndate1 == Js.Date.fromString(\"1973-11-29T22:46:54.321Z00:00\")\nfutureTime == Js.Date.getTime(date1)\n```\n\n----------------------------------------\n\nTITLE: Adding Element with Status Check in ReScript MutableSetString\nDESCRIPTION: Adds an element and returns a boolean indicating if the element was added (true) or if it already existed (false).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_9\n\nLANGUAGE: reason\nCODE:\n```\nlet addCheck: (t, value) => bool;\n```\n\n----------------------------------------\n\nTITLE: Adding multiple elements to a set in ReScript with MutableSetInt\nDESCRIPTION: Adds all elements from the provided array to the set. This mutates the original set and might change its reference even if all values already exist.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rescript\nCODE:\n```\nlet mergeMany: (t, array(value)) => unit;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet set = Belt.MutableSet.Int.make();\n\nset->Belt.MutableSet.Int.mergeMany([|5, 4, 3, 2, 1|]);\nset->Belt.MutableSet.Int.toArray; /* [|1, 2, 3, 4, 5|] */\n```\n\n----------------------------------------\n\nTITLE: Merging multiple elements into HashSetInt in ReScript\nDESCRIPTION: Adds multiple elements from an array to the HashSetInt.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-set-int.mdx#2025-04-18_snippet_17\n\nLANGUAGE: ReScript\nCODE:\n```\nlet mergeMany: (t, array(key)) => unit;\n```\n\n----------------------------------------\n\nTITLE: Getting UTC Hours from Date in ReScript\nDESCRIPTION: ReScript binding for JavaScript's Date.getUTCHours method. Returns the hours for a date, evaluated in UTC.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_32\n\nLANGUAGE: res\nCODE:\n```\nlet getUTCHours: t => float\n```\n\nLANGUAGE: res\nCODE:\n```\nJs.Date.getUTCHours(exampleDate) == 21.0\n```\n\n----------------------------------------\n\nTITLE: Getting Byte Offset of Array\nDESCRIPTION: Function signature to retrieve the offset in bytes from the start of the underlying ArrayBuffer.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\nlet byteOffset: t => int\n```\n\n----------------------------------------\n\nTITLE: Promise Type and Null/Undefined Values in ReScript\nDESCRIPTION: Defines the promise type and constants for JavaScript's null and undefined values. The promise type is marked as deprecated in favor of Js.Promise.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\ntype promise<+'a, +'e>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet null: Js.null<'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet undefined: Js.undefined<'a>\n```\n\n----------------------------------------\n\nTITLE: clearTimeout Function Signature in ReScript\nDESCRIPTION: Function signature for clearTimeout which cancels a timeout created by setTimeout.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/global.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reasonml\nCODE:\n```\nlet clearTimeout: timeoutId => unit;\n```\n\n----------------------------------------\n\nTITLE: Array Search and Iteration\nDESCRIPTION: Functions for searching and iterating over array elements including includes, indexOf, and iteration methods.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_uint-32-array.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reason\nCODE:\n```\nlet includes: (elt, t) => bool;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet indexOf: (elt, t) => int;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet forEach: ((. elt) => unit, t) => unit;\n```\n\n----------------------------------------\n\nTITLE: Creating Date with Year, Month, and Day in ReScript\nDESCRIPTION: Function signature for makeWithYMD, which creates a date for a specific year, month, and day.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nlet makeWithYMD: (~year: float, ~month: float, ~date: float, unit) => t\n```\n\n----------------------------------------\n\nTITLE: Using makeWithYM Function in ReScript\nDESCRIPTION: Demonstrates the use of the makeWithYM function to create a Date object for November 1, 2020.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_11\n\nLANGUAGE: rescript\nCODE:\n```\nlet november1 = Js.Date.makeWithYM(~year=2020.0, ~month=10.0, ())\n```\n\n----------------------------------------\n\nTITLE: Checking if a key exists in a HashMap with integer keys in ReScript\nDESCRIPTION: Determines whether a given key exists in the hash map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-map-int.mdx#2025-04-18_snippet_8\n\nLANGUAGE: reason\nCODE:\n```\nlet has: (t('b), key) => bool;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet hMap = Belt.HashMap.Int.make(~hintSize=10);\nBelt.HashMap.Int.set(hMap, 1, \"value1\");\n\nBelt.HashMap.Int.get(hMap, 1) == Some(\"value1\");\nBelt.HashMap.Int.get(hMap, 2) == None;\n```\n\n----------------------------------------\n\nTITLE: Creating Vector with Initial Value in ReScript\nDESCRIPTION: Creates a new vector of specified length, initializing all elements with a given value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/vector.mdx#2025-04-18_snippet_16\n\nLANGUAGE: ReScript\nCODE:\n```\nlet make: (int, 'a) => t('a);\n```\n\n----------------------------------------\n\nTITLE: Array Creation and Type Checking Functions\nDESCRIPTION: Functions for creating arrays from array-like objects and checking if a value is an array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/array.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet strArr = Js.String.castToArrayLike(\"abcd\")\nJs.Array.from(strArr) == [\"a\", \"b\", \"c\", \"d\"]\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet strArr = Js.String.castToArrayLike(\"abcd\")\nlet code = s => Js.String.charCodeAt(0, s)\nJs.Array.fromMap(strArr, code) == [97.0, 98.0, 99.0, 100.0]\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.Array.isArray([5, 2, 3, 1, 4]) == true\nJs.Array.isArray(list{5, 2, 3, 1, 4}) == true\nJs.Array.isArray(\"abcd\") == false\n```\n\n----------------------------------------\n\nTITLE: Slicing and Copying Int16Array in ReScript\nDESCRIPTION: Functions for creating new Int16Arrays from existing ones through slicing and copying.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_int-16-array.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet slice: (~start: int, ~end_: int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet copy: t => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet sliceFrom: (int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet subarray: (~start: int, ~end_: int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet subarrayFrom: (int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Iterating Over TypedArray Elements with forEach in ReScript\nDESCRIPTION: Function signature for executing a provided function once for each element in a Uint8ClampedArray.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_40\n\nLANGUAGE: res\nCODE:\n```\nlet forEach: ((. elt) => unit, t) => unit\n```\n\n----------------------------------------\n\nTITLE: Setting UTC Full Year and Month in ReScript\nDESCRIPTION: Sets a Date's year and month according to UTC. Returns milliseconds since epoch for the updated Date. Modifies the original Date.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_57\n\nLANGUAGE: rescript\nCODE:\n```\nlet setUTCFullYearM: (t, ~year: float, ~month: float, unit) => float\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet future = Js.Date.setUTCFullYearM(date1, ~year=1974.0, ~month=0.0, ())\ndate1 == Js.Date.fromString(\"1974-01-22T21:30:54.321Z00:00\")\nfuture == Js.Date.getTime(date1)\n```\n\n----------------------------------------\n\nTITLE: Big Integer Operations in ReScript\nDESCRIPTION: Example of using Big Integers in ReScript with basic arithmetic operations. Requires opening the BigInt module to use the overloaded operators.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/primitive-types.mdx#2025-04-18_snippet_6\n\nLANGUAGE: res\nCODE:\n```\nopen! BigInt\n\nlet a = 9007199254740991n + 9007199254740991n\nlet b = 2n ** 2n\n```\n\nLANGUAGE: js\nCODE:\n```\nvar a = 9007199254740991n + 9007199254740991n;\n\nvar p = 2n ** 2n;\n```\n\n----------------------------------------\n\nTITLE: String Ends With From Position\nDESCRIPTION: Function signature for checking if a string ends with a substring from a specific position.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/string-2.mdx#2025-04-18_snippet_14\n\nLANGUAGE: res\nCODE:\n```\nlet endsWithFrom: (t, t, int) => bool\n```\n\n----------------------------------------\n\nTITLE: Iterating over Int8Array in ReScript\nDESCRIPTION: Higher-order functions for iterating, filtering, and transforming Int8Array data.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nlet every: ((. elt) => bool, t) => bool\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet everyi: ((. elt, int) => bool, t) => bool\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet filter: ((. elt) => bool, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet filteri: ((. elt, int) => bool, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet find: ((. elt) => bool, t) => Js.undefined<elt>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet findi: ((. elt, int) => bool, t) => Js.undefined<elt>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet findIndex: ((. elt) => bool, t) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet findIndexi: ((. elt, int) => bool, t) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet forEach: ((. elt) => unit, t) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet forEachi: ((. elt, int) => unit, t) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet map: ((. elt) => 'b, t) => typed_array<'b>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet mapi: ((. elt, int) => 'b, t) => typed_array<'b>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduce: ((. 'b, elt) => 'b, 'b, t) => 'b\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet reducei: ((. 'b, elt, int) => 'b, 'b, t) => 'b\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduceRight: ((. 'b, elt) => 'b, 'b, t) => 'b\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduceRighti: ((. 'b, elt, int) => 'b, 'b, t) => 'b\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet some: ((. elt) => bool, t) => bool\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet somei: ((. elt, int) => bool, t) => bool\n```\n\n----------------------------------------\n\nTITLE: Defining JavaScript Undefined Type in ReScript\nDESCRIPTION: Type definition for JavaScript's undefined primitive value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/types.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\ntype undefined_val\n```\n\n----------------------------------------\n\nTITLE: Setting UInt32Array from array with offset\nDESCRIPTION: Defines a function that copies the content of a regular array into a typed array starting at a specified offset.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nlet setArrayOffset: (array<elt>, int, t) => unit\n```\n\n----------------------------------------\n\nTITLE: Configuring JSX v4 Classic Mode\nDESCRIPTION: Configuration for JSX v4 in classic mode, which generates calls to React.createElement similar to v3.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/migrate-react.mdx#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsx\": { \"version\": 4, \"mode\": \"classic\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting the Size of a HashSet in ReScript\nDESCRIPTION: This function signature shows how to get the number of elements in a HashSet.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-set.mdx#2025-04-18_snippet_15\n\nLANGUAGE: reason\nCODE:\n```\nlet size: t('a, 'id) => int;\n```\n\n----------------------------------------\n\nTITLE: Array Construction Methods\nDESCRIPTION: Methods for creating new Int16Array instances from various sources\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_int-16-array.mdx#2025-04-18_snippet_5\n\nLANGUAGE: reason\nCODE:\n```\nlet make: array(elt) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet fromBuffer: Js_typed_array2.array_buffer => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet fromLength: int => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet from: Js_typed_array2.array_like(elt) => t;\n```\n\n----------------------------------------\n\nTITLE: Accessing Array Elements with unsafe_get in ReScript\nDESCRIPTION: Function signature for unsafe_get that retrieves an element from a Uint8Array at a specified index without bounds checking.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet unsafe_get: (t, int) => elt\n```\n\n----------------------------------------\n\nTITLE: ReScript Chrome Debugger Setup Function Signature\nDESCRIPTION: Function signature for setupChromeDebugger that initializes Chrome debugger functionality. Takes no parameters and returns unit (void).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/debug.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nlet setupChromeDebugger: unit => unit\n```\n\n----------------------------------------\n\nTITLE: Array Properties and Metrics\nDESCRIPTION: Functions for accessing array properties like length, byte length and offset.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_int-16-array.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet byteLength: t => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet byteOffset: t => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet length: t => int\n```\n\n----------------------------------------\n\nTITLE: Filtering elements with uncurried function in ReScript with MutableSetInt\nDESCRIPTION: Returns a new set containing only the elements that satisfy the given uncurried predicate function. This is an internal function primarily used for optimization.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_28\n\nLANGUAGE: rescript\nCODE:\n```\nlet keepU: (t, [@bs] (value => bool)) => t;\n```\n\n----------------------------------------\n\nTITLE: Creating Difference of Sets in ReScript MutableSetString\nDESCRIPTION: Returns a new set containing elements from the first set that don't exist in the second set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_16\n\nLANGUAGE: reason\nCODE:\n```\nlet diff: (t, t) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet s0 = Belt.MutableSet.String.fromArray([|\"apple\", \"banana\", \"orange\", \"carrot\"|]);\nlet s1 = Belt.MutableSet.String.fromArray([|\"apple\", \"banana\", \"orange\", \"strawberry\"|]);\nBelt.MutableSet.String.toArray(Belt.MutableSet.String.diff(s0, s1)); /* [|\"carrot\"|] */\nBelt.MutableSet.String.toArray(Belt.MutableSet.String.diff(s1, s0)); /* [|\"strawberry\"|] */\n```\n\n----------------------------------------\n\nTITLE: Getting the size of a HashMap with integer keys in ReScript\nDESCRIPTION: Returns the number of key-value pairs in the hash map. This operation takes constant time.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-map-int.mdx#2025-04-18_snippet_16\n\nLANGUAGE: reason\nCODE:\n```\nlet size: t('a) => int;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet hMap = Belt.HashMap.Int.make(~hintSize=10);\nBelt.HashMap.Int.set(hMap, 1, \"value1\");\nBelt.HashMap.Int.set(hMap, 2, \"value2\");\n\nBelt.HashMap.Int.size(hMap) == 2;\n```\n\n----------------------------------------\n\nTITLE: Defining DataView type in ReScript\nDESCRIPTION: Defines the DataView type by aliasing it to the existing type from the Js_typed_array2 module.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_data-view.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype t = Js_typed_array2.DataView.t\n```\n\n----------------------------------------\n\nTITLE: Copying Set\nDESCRIPTION: Function signature for creating a copy of an existing set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\nlet copy: t => t\n```\n\n----------------------------------------\n\nTITLE: Array Transformation Methods\nDESCRIPTION: Functions for array transformations like copy, fill, reverse and sort operations\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_int-32-array.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reason\nCODE:\n```\nlet copyWithin: (~to_: int, t) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet copyWithinFrom: (~to_: int, ~from: int, t) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet copyWithinFromRange: (~to_: int, ~start: int, ~end_: int, t) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet fillInPlace: (elt, t) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet fillFromInPlace: (elt, ~from: int, t) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet fillRangeInPlace: (elt, ~start: int, ~end_: int, t) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet reverseInPlace: t => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet sortInPlace: t => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet sortInPlaceWith: ((. elt, elt) => int, t) => t;\n```\n\n----------------------------------------\n\nTITLE: Integer to Exponential String with Precision in ReScript\nDESCRIPTION: Converts an integer to exponential notation with specified decimal precision. Takes digits parameter to control decimal places (0-20 range).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/int.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\n/* prints \"7.70e+1\" */\nJs.log(Js.Int.toExponentialWithPrecision(77, ~digits=2))\n\n/* prints \"5.68e+3\" */\nJs.log(Js.Int.toExponentialWithPrecision(5678, ~digits=2))\n```\n\n----------------------------------------\n\nTITLE: Setting a key-value pair in MapDict\nDESCRIPTION: Function signature for adding or updating a key-value pair in a map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_41\n\nLANGUAGE: reason\nCODE:\n```\nlet set: (t('a, 'b, 'id), 'a, 'b, ~cmp: cmp('a, 'id)) => t('a, 'b, 'id);\n```\n\n----------------------------------------\n\nTITLE: Replacing Substrings with Function (No Capture) in ReScript\nDESCRIPTION: The unsafeReplaceBy0 function replaces matches of a pattern with no capturing parentheses using a provided function. The function receives the matched string, offset, and whole string as parameters.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string.mdx#2025-04-18_snippet_28\n\nLANGUAGE: rescript\nCODE:\n```\nlet unsafeReplaceBy0: (Js_re.t, (t, int, t) => t, t) => t;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet str = \"beautiful vowels\";\nlet re = [%re \"/[aeiou]/g\"];\nlet matchFn = (matchPart, _offset, _wholeString) =>\n  Js.String.toUpperCase(matchPart);\n\nJs.String.unsafeReplaceBy0(re, matchFn, str)\n  == \"bEAUtIfUl vOwEls\";\n```\n\n----------------------------------------\n\nTITLE: Filtering MapDict in ReScript\nDESCRIPTION: Functions to keep only elements that satisfy a predicate in a MapDict.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_21\n\nLANGUAGE: ReScript\nCODE:\n```\nlet keepU: (t<'k, 'a, 'id>, (. 'k, 'a) => bool) => t<'k, 'a, 'id>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet keep: (t<'k, 'a, 'id>, ('k, 'a) => bool) => t<'k, 'a, 'id>\n```\n\n----------------------------------------\n\nTITLE: Reading integer values from DataView in ReScript\nDESCRIPTION: Functions to read 8-bit, 16-bit, and 32-bit integer values from a DataView, with optional little-endian versions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array-2_data-view.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet getInt8: (t, int) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet getUint8: (t, int) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet getInt16: (t, int) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet getInt16LittleEndian: (t, int) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet getUint16: (t, int) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet getUint16LittleEndian: (t, int) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet getInt32: (t, int) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet getInt32LittleEndian: (t, int) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet getUint32: (t, int) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet getUint32LittleEndian: (t, int) => int\n```\n\n----------------------------------------\n\nTITLE: Defining Undefined Type Alias in ReScript\nDESCRIPTION: Creates a local type alias for Js.undefined<'a>, providing a shorthand for working with undefined values in JavaScript interop.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/undefined.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\ntype t<'a> = Js.undefined<'a>\n```\n\n----------------------------------------\n\nTITLE: Copying MutableSet\nDESCRIPTION: Shows how to create a copy of an existing MutableSet\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nmodule IntCmp = Belt.Id.MakeComparable({\n  type t = int\n  let cmp = Pervasives.compare\n})\n\nlet s0 = Belt.MutableSet.fromArray([1, 3, 2, 4], ~id=module(IntCmp))\n\nlet copied = s0->Belt.MutableSet.copy\ncopied->Belt.MutableSet.toArray /* [1, 2, 3, 4] */\n```\n\n----------------------------------------\n\nTITLE: Computing Arctangent in ReScript\nDESCRIPTION: Function that returns the arctangent (in radians) of the argument, equivalent to JavaScript's Math.atan.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/math.mdx#2025-04-18_snippet_14\n\nLANGUAGE: reasonml\nCODE:\n```\nlet atan: float => float;\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON String with Exception in ReScript\nDESCRIPTION: Function signature for parsing a JSON string into a JSON value. Raises a SyntaxError exception if the string is not valid JSON.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/json.mdx#2025-04-18_snippet_21\n\nLANGUAGE: reason\nCODE:\n```\nlet parseExn: string => t;\n```\n\n----------------------------------------\n\nTITLE: Running Build Performance Profiling in ReScript\nDESCRIPTION: Command to generate an interactive visualization of ReScript build performance. The command outputs a JSON file that can be analyzed using Chrome's tracing tool.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/build-performance.mdx#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n./node_modules/.bin/bstracing\n```\n\n----------------------------------------\n\nTITLE: Converting Array to String\nDESCRIPTION: Joins all elements into a string with the default separator.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_21\n\nLANGUAGE: rescript\nCODE:\n```\nlet join: t => string\n```\n\n----------------------------------------\n\nTITLE: Splitting MutableSet in ReScript\nDESCRIPTION: The split method divides the set into two parts based on a value, returning smaller and larger sets along with a boolean indicating if the value was present.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_12\n\nLANGUAGE: rescript\nCODE:\n```\nlet split: (t, value) => ((t, t), bool)\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet s0 = Belt.MutableSet.Int.fromArray([1, 2, 3, 4, 5])\n\nlet ((smaller, larger), present) = s0->Belt.MutableSet.Int.split(3)\n\npresent /* true */\nsmaller->Belt.MutableSet.Int.toArray /* [1,2] */\nlarger->Belt.MutableSet.Int.toArray /* [4,5] */\n```\n\n----------------------------------------\n\nTITLE: List to Vector Conversion Function Signature\nDESCRIPTION: Function to convert a list to a JavaScript vector (array).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/list.mdx#2025-04-18_snippet_20\n\nLANGUAGE: ReScript\nCODE:\n```\nlet toVector: t('a) => Js_vector.t('a);\n```\n\n----------------------------------------\n\nTITLE: Legacy Null to Option Conversion in ReScript\nDESCRIPTION: Deprecated alias for toOption that maps Js.null('a) to option('a).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/null.mdx#2025-04-18_snippet_13\n\nLANGUAGE: reason\nCODE:\n```\nlet to_opt: t('a) => option('a);\n```\n\n----------------------------------------\n\nTITLE: Removing multiple values from a set in ReScript\nDESCRIPTION: Removes multiple integers from an array from a set at once. Unlike remove, this may return a new reference even if some values don't exist in the set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-int.mdx#2025-04-18_snippet_10\n\nLANGUAGE: reason\nCODE:\n```\nlet removeMany: (t, array(value)) => t;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Maximum Value from Belt.Set.String in ReScript\nDESCRIPTION: The maximum function returns the maximum value of the collection as an option. It returns None if the collection is empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-string.mdx#2025-04-18_snippet_58\n\nLANGUAGE: rescript\nCODE:\n```\nlet maximum: t => option(value);\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet s0 = Belt.Set.String.empty;\nlet s1 = Belt.Set.String.fromArray([|\"apple\", \"orange\"|]);\n\ns0->Belt.Set.String.maximum; /* None */\ns1->Belt.Set.String.maximum; /* Some(\"orange\") */\n```\n\n----------------------------------------\n\nTITLE: Map MapU Function Signature\nDESCRIPTION: Uncurried version of map operation for transforming values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map.mdx#2025-04-18_snippet_13\n\nLANGUAGE: rescript\nCODE:\n```\nlet mapU: (t<'k, 'v, 'id>, (. 'v) => 'v2) => t<'k, 'v2, 'id>\n```\n\n----------------------------------------\n\nTITLE: Finding minimum key-value pair in ReScript map (undefined return)\nDESCRIPTION: Returns the key-value pair with the minimum key as a JavaScript undefined value if the map is empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_29\n\nLANGUAGE: reasonml\nCODE:\n```\nlet minUndefined: t('a) => Js.undefined((key, 'a));\n```\n\n----------------------------------------\n\nTITLE: Defining MakeHashableU module in ReScript\nDESCRIPTION: Defines a module 'MakeHashableU' that takes a module with a type 't', an uncurried hash function, and an uncurried equality function, and returns a Hashable module with the same type 't'.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/id.mdx#2025-04-18_snippet_10\n\nLANGUAGE: ReScript\nCODE:\n```\nmodule MakeHashableU: (M: {type t; let hash: [@bs] (t => int); let eq: [@bs] ((t, t) => bool);}) => Hashable with type t = M.t;\n```\n\n----------------------------------------\n\nTITLE: Extracting Keys from HashMap in ReScript\nDESCRIPTION: Returns an array of keys from the hash map using Belt.HashMap.String.keysToArray.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-map-string.mdx#2025-04-18_snippet_14\n\nLANGUAGE: rescript\nCODE:\n```\nlet keysToArray: t<'a> => array<key>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet hMap = Belt.HashMap.String.make(~hintSize=10)\nBelt.HashMap.String.set(hMap, \"1\", \"value1\")\nBelt.HashMap.String.set(hMap, \"2\", \"value2\")\n\nBelt.HashMap.String.keysToArray(hMap) == [\"1\", \"2\"]\n```\n\n----------------------------------------\n\nTITLE: Finding minimum and maximum values in Belt.MutableSet.Int in ReScript\nDESCRIPTION: Retrieves the minimum and maximum values from the set using minimum, minUndefined, maximum, and maxUndefined functions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_15\n\nLANGUAGE: res\nCODE:\n```\nlet minimum: t => option<value>\nlet minUndefined: t => Js.undefined<value>\nlet maximum: t => option<value>\nlet maxUndefined: t => Js.undefined<value>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet s0 = Belt.MutableSet.Int.make()\nlet s1 = Belt.MutableSet.Int.fromArray([3, 2, 1, 5])\n\ns0->Belt.MutableSet.Int.minimum /* None */\ns1->Belt.MutableSet.Int.minimum /* Some(1) */\n\ns0->Belt.MutableSet.Int.minUndefined /* undefined */\ns1->Belt.MutableSet.Int.minUndefined /* 1 */\n\ns0->Belt.MutableSet.Int.maximum /* None */\ns1->Belt.MutableSet.Int.maximum /* Some(5) */\n\ns0->Belt.MutableSet.Int.maxUndefined /* undefined */\ns1->Belt.MutableSet.Int.maxUndefined /* 5 */\n```\n\n----------------------------------------\n\nTITLE: Converting Polymorphic Variants to Primitive Types in ReScript\nDESCRIPTION: This code demonstrates coercion of polymorphic variants to primitive types (string or int) in ReScript. The example shows converting a company polymorphic variant to a string with zero runtime cost using the :> operator.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/polymorphic-variant.mdx#2025-04-18_snippet_6\n\nLANGUAGE: res\nCODE:\n```\ntype company = [#Apple | #Facebook]\nlet theCompany: company = #Apple\n\nlet message = \"Hello \" ++ (theCompany :> string)\n```\n\nLANGUAGE: js\nCODE:\n```\nvar theCompany = \"Apple\";\nvar message = \"Hello \" + theCompany;\n```\n\n----------------------------------------\n\nTITLE: Vector Length Operation\nDESCRIPTION: Returns the number of elements in the vector.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/vector.mdx#2025-04-18_snippet_13\n\nLANGUAGE: res\nCODE:\n```\nlet length: t<'a> => int\n```\n\n----------------------------------------\n\nTITLE: Mapping with Key (Uncurried) in ReScript MapInt Module\nDESCRIPTION: Function signature for mapping values with keys in the map using an uncurried function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-int.mdx#2025-04-18_snippet_53\n\nLANGUAGE: rescript\nCODE:\n```\nlet mapWithKeyU: (t<'v>, (. key, 'v) => 'v2) => t<'v2>\n```\n\n----------------------------------------\n\nTITLE: Defining Basic DOM Types in ReScript\nDESCRIPTION: Core DOM type definitions including node, element, document and text types. These represent fundamental DOM structures.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/dom.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype animation\ntype cssStyleDeclaration\ntype cssStyleSheet\ntype node\ntype characterData\ntype cdataSection\ntype comment\ntype document\ntype documentType\ntype domImplementation\ntype element\ntype text\n```\n\n----------------------------------------\n\nTITLE: Getting Byte Length of TypedArray in ReScript\nDESCRIPTION: Function signature for retrieving the byte length of a Uint8ClampedArray.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nlet byteLength: t => int\n```\n\n----------------------------------------\n\nTITLE: Creating Nullable values in ReScript\nDESCRIPTION: The 'return' function constructs a Js.null_undefined('a) value containing a value of type 'a.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/nullable.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reason\nCODE:\n```\nlet return: 'a => t('a);\n```\n\n----------------------------------------\n\nTITLE: Integer Utility Functions in ReScript\nDESCRIPTION: Basic utility functions for integer operations including conversion to float, equality comparison, and accessing max/min values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/int.mdx#2025-04-18_snippet_6\n\nLANGUAGE: reason\nCODE:\n```\nlet toFloat: int => float;\n\nlet equal: (int, int) => bool;\n\nlet max: int;\n\nlet min: int;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Partial Application in ReScript (Curried)\nDESCRIPTION: Shows how partial application works in curried functions, comparing a concise version with a more explicit one.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2023-09-18-uncurried-mode.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nlet add = (a, b) => a + b\nlet addFive = add(5)\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet add = (a, b) => a + b\nlet addFive = (b) => add(5, b)\n```\n\n----------------------------------------\n\nTITLE: Converting HashMap to Array in ReScript\nDESCRIPTION: Converts the hash map to an array of key-value pairs using Belt.HashMap.String.toArray.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-map-string.mdx#2025-04-18_snippet_13\n\nLANGUAGE: rescript\nCODE:\n```\nlet toArray: t<'a> => array<(key, 'a)>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet hMap = Belt.HashMap.String.make(~hintSize=10)\nBelt.HashMap.String.set(hMap, \"1\", \"value1\")\nBelt.HashMap.String.set(hMap, \"2\", \"value2\")\n\nBelt.HashMap.String.toArray(hMap) == [(\"1\", \"value1\"), (\"2\", \"value2\")]\n```\n\n----------------------------------------\n\nTITLE: Using reduceRighti Function in ReSript\nDESCRIPTION: The reduceRighti function reduces an array from right to left using an accumulator, element value, and element index. This example demonstrates summing elements at even indices, similar to the reducei example.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array.mdx#2025-04-18_snippet_29\n\nLANGUAGE: rescript\nCODE:\n```\n// find sum of even-index elements in array\nlet sumOfEvens = (accumulator, item, index) =>\n  if mod(index, 2) == 0 {\n    accumulator + item\n  } else {\n    accumulator\n  }\n\nJs.Array.reduceRighti(sumOfEvens, 0, [2, 5, 1, 4, 3]) == 6\n```\n\n----------------------------------------\n\nTITLE: Getting Element with Undefined Return in ReScript MutableSet\nDESCRIPTION: Retrieves a reference to a value in the collection, returning undefined when the element doesn't exist.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_13\n\nLANGUAGE: res\nCODE:\n```\nlet getUndefined: (t, value) => Js.undefined<value>\n```\n\n----------------------------------------\n\nTITLE: Vector Append Operation\nDESCRIPTION: Creates a new vector with an element appended to the original vector.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/vector.mdx#2025-04-18_snippet_18\n\nLANGUAGE: res\nCODE:\n```\nlet append: ('a, t<'a>) => t<'a>\n```\n\n----------------------------------------\n\nTITLE: Reducing map with curried function in ReScript\nDESCRIPTION: Folds over the key-value pairs in the map using a curried function and an initial accumulator value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_13\n\nLANGUAGE: reasonml\nCODE:\n```\nlet reduce: (t('a), 'b, ('b, key, 'a) => 'b) => 'b;\n```\n\n----------------------------------------\n\nTITLE: Strictly Sorted Length Function Signature\nDESCRIPTION: Function signature for checking the sorted length of a string array, returning a positive number for increasing order and negative for decreasing order.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/sort-array-string.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\nlet strictlySortedLength: array<element> => int\n```\n\n----------------------------------------\n\nTITLE: Converting Integer to Float in ReScript\nDESCRIPTION: Converts a given int to a float using the toFloat function from Belt.Int module.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/int.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nlet toFloat: int => float\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.log(Belt.Int.toFloat(1) === 1.0) /* true */\n```\n\n----------------------------------------\n\nTITLE: Checking if RegExp has IgnoreCase Flag\nDESCRIPTION: Function that returns a boolean indicating whether the ignoreCase flag is set on the RegExp object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/re.mdx#2025-04-18_snippet_10\n\nLANGUAGE: reason\nCODE:\n```\nlet ignoreCase: t => bool;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Element from String Set with get in ReScript\nDESCRIPTION: Returns an option containing the reference of the value if found in the set, or None if the element does not exist. This uses ReScript's option type for safely handling potential absence.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/set-string.mdx#2025-04-18_snippet_8\n\nLANGUAGE: res\nCODE:\n```\nlet get: (t, value) => option<value>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet s0 = Belt.Set.String.fromArray([\"apple\", \"carrot\"])\n\ns0->Belt.Set.String.get(\"carrot\") /* Some(\"carrot\") */\ns0->Belt.Set.String.get(\"watermelon\") /* None */\n```\n\n----------------------------------------\n\nTITLE: Checking Key Existence in ReScript MapInt Module\nDESCRIPTION: Function signature for checking if a key exists in the map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-int.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet has: (t<'v>, key) => bool\n```\n\n----------------------------------------\n\nTITLE: Float toPrecision Function\nDESCRIPTION: Function to format a float using general formatting rules. Returns a string representation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/float.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nlet toPrecision: float => string\n```\n\n----------------------------------------\n\nTITLE: Defining Float32Array Types in ReScript\nDESCRIPTION: Defines the core types for Float32Array, including the element type (float), the generic typed_array type, and the concrete Float32Array type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype elt = float\ntype typed_array<'a> = Js_typed_array2.Float32Array.typed_array<'a>\ntype t = typed_array<elt>\n```\n\n----------------------------------------\n\nTITLE: Array Reduction for Int32Array\nDESCRIPTION: Functions to reduce arrays to single values with accumulators.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-32-array.mdx#2025-04-18_snippet_15\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduce: ((. 'b, elt) => 'b, 'b, t) => 'b\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet reducei: ((. 'b, elt, int) => 'b, 'b, t) => 'b\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduceRight: ((. 'b, elt) => 'b, 'b, t) => 'b\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduceRighti: ((. 'b, elt, int) => 'b, 'b, t) => 'b\n```\n\n----------------------------------------\n\nTITLE: Getting Value with Option - ReScript\nDESCRIPTION: Retrieves a reference to a value from the collection that matches the input value. Returns None if the element doesn't exist.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_11\n\nLANGUAGE: res\nCODE:\n```\nlet get: (t, value) => option<value>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet s0 = Belt.MutableSet.String.fromArray([\"apple\", \"carrot\"])\n\ns0->Belt.MutableSet.String.get(\"carrot\") /* Some(\"carrot\") */\ns0->Belt.MutableSet.String.get(\"watermelon\") /* None */\n```\n\n----------------------------------------\n\nTITLE: Creating Shuffled Array Copy in ReScript\nDESCRIPTION: Returns a fresh array with items from the original array randomly shuffled, preserving the original array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/array.mdx#2025-04-18_snippet_10\n\nLANGUAGE: reason\nCODE:\n```\nlet shuffle: array('a) => array('a);\n```\n\n----------------------------------------\n\nTITLE: setTimeoutFloat Example in ReScript\nDESCRIPTION: Example of using setTimeoutFloat to log a message after a 1-second delay using a float delay value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/global.mdx#2025-04-18_snippet_13\n\nLANGUAGE: reasonml\nCODE:\n```\n/* Prints \"Timed out!\" in the console after one second */\n\nlet message = \"Timed out!\";\n\nJs.Global.setTimeoutFloat(() => Js.log(message), 1000.0);\n```\n\n----------------------------------------\n\nTITLE: Getting Month from Date in ReScript\nDESCRIPTION: ReScript binding for JavaScript's Date.getMonth method. Returns the month (0.0-11.0) for a date, evaluated in the current time zone.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_25\n\nLANGUAGE: res\nCODE:\n```\nlet getMonth: t => float\n```\n\nLANGUAGE: res\nCODE:\n```\nJs.Date.getMonth(exampleDate) == 10.0\n```\n\n----------------------------------------\n\nTITLE: Modifying array elements in ReScript\nDESCRIPTION: Functions to add or remove elements from arrays, modifying the array in place.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/array-2.mdx#2025-04-18_snippet_6\n\nLANGUAGE: reason\nCODE:\n```\nlet pop: t('a) => option('a);\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet arr = [|100, 101, 102, 103, 104|];\nJs.Array2.pop(arr) == Some(104);\narr == [|100, 101, 102, 103|];\n\nlet empty: array(int) = [| |];\nJs.Array2.pop(empty) == None;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet push: (t('a), 'a) => int;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet arr = [|\"ant\", \"bee\", \"cat\"|];\nJs.Array2.push(arr, \"dog\") == 4;\narr == [|\"ant\", \"bee\", \"cat\", \"dog\"|];\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet pushMany: (t('a), array('a)) => int;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet arr = [|\"ant\", \"bee\", \"cat\"|];\nJs.Array2.pushMany(arr, [|\"dog\", \"elk\"|]) == 5;\narr == [|\"ant\", \"bee\", \"cat\", \"dog\", \"elk\"|];\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet reverseInPlace: t('a) => t('a);\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet arr = [|\"ant\", \"bee\", \"cat\"|];\nJs.Array2.reverseInPlace(arr) == [|\"cat\", \"bee\", \"ant\"|];\narr == [|\"cat\", \"bee\", \"ant\"|];\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet shift: t('a) => option('a);\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet arr = [|100, 101, 102, 103, 104|];\nJs.Array2.shift(arr) == Some(100);\narr == [|101, 102, 103, 104|];\n\nlet empty: array(int) = [| |];\nJs.Array2.shift(empty) == None;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet sortInPlace: t('a) => t('a);\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet words = [|\"bee\", \"dog\", \"ant\", \"cat\"|];\nJs.Array2.sortInPlace(words) == [|\"ant\", \"bee\", \"cat\", \"dog\"|];\nwords == [|\"ant\", \"bee\", \"cat\", \"dog\"|];\n\nlet numbers = [|3, 30, 10, 1, 20, 2|];\nJs.Array2.sortInPlace(numbers) == [|1, 10, 2, 20, 3, 30|];\nnumbers == [|1, 10, 2, 20, 3, 30|];\n```\n\n----------------------------------------\n\nTITLE: Accessing TypedArray Elements with unsafe_get in ReScript\nDESCRIPTION: Function signature for accessing an element from a Uint8ClampedArray at a specific index without bounds checking.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\nlet unsafe_get: (t, int) => elt\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for UInt32Array\nDESCRIPTION: Core type definitions for the UInt32Array implementation including element type, typed array type, and the main array type t.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reasonml\nCODE:\n```\ntype elt = int;\ntype typed_array('a) = Js_typed_array2.Uint32Array.typed_array('a);\ntype t = typed_array(elt);\n```\n\n----------------------------------------\n\nTITLE: Object Property Assignment in ReScript\nDESCRIPTION: Function signature for copying properties from a source object to a target object. The target object's properties will be overwritten by source properties with the same keys.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/obj.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet assign: ({..}, {..}) => {..}\n```\n\n----------------------------------------\n\nTITLE: FindIndex Operations for Float64Array\nDESCRIPTION: Functions to find the index of an element in a Float64Array that passes a predicate function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-64-array.mdx#2025-04-18_snippet_18\n\nLANGUAGE: rescript\nCODE:\n```\nlet findIndex: ((. elt) => bool, t) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet findIndexi: ((. elt, int) => bool, t) => int\n```\n\n----------------------------------------\n\nTITLE: Getting Milliseconds in ReScript\nDESCRIPTION: Function signature for getMilliseconds, which returns the milliseconds for a given date.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_23\n\nLANGUAGE: rescript\nCODE:\n```\nlet getMilliseconds: t => float\n```\n\n----------------------------------------\n\nTITLE: Float Finite Check Function\nDESCRIPTION: Function signature for testing if a given float value is finite.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/float.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet isFinite: float => bool\n```\n\n----------------------------------------\n\nTITLE: Dictionary Map Usage Example\nDESCRIPTION: Example showing how to transform dictionary values using map function\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/dict.mdx#2025-04-18_snippet_18\n\nLANGUAGE: reason\nCODE:\n```\nlet prices = Js.Dict.fromList([(\"pen\", 1.00), (\"book\", 5.00), (\"stapler\", 7.00)]);\\n\\nlet discount = (. price) => {price *. 0.90};\\nlet salePrices = Js.Dict.map(discount, prices);\\n\\nsalePrices == Js.Dict.fromList([(\"pen\", 0.90), (\"book\", 4.50), (\"stapler\", 6.30)]);\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Null Values in ReScript\nDESCRIPTION: Executes a function on the contained value if it exists. If Js.null('a) contains a value, that value is unwrapped and applied to the given function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/null.mdx#2025-04-18_snippet_8\n\nLANGUAGE: reason\nCODE:\n```\nlet iter: (t('a), (. 'a) => unit) => unit;\n```\n\n----------------------------------------\n\nTITLE: Example of Using ReScript String Operations\nDESCRIPTION: Demonstrates different ways to use Js.String data-last APIs with pipe operators and direct function calls.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\n/* Js.String (data-last API used with pipe last operator) */\nJs.log(\"2019-11-10\" |> Js.String.split(\"-\"))\nJs.log(\"ReScript\" |> Js.String.startsWith(\"Re\"))\n\n/* Js.String (data-last API used with pipe first operator) */\nJs.log(\"2019-11-10\"->Js.String.split(\"-\", _))\nJs.log(\"ReScript\"->Js.String.startsWith(\"Re\", _))\n\n/* Js.String (data-last API used without any piping) */\nJs.log(Js.String.split(\"-\", \"2019-11-10\"))\nJs.log(Js.String.startsWith(\"Re\", \"ReScript\"))\n```\n\n----------------------------------------\n\nTITLE: Setting Array Elements\nDESCRIPTION: Copies values from a ReScript array into the typed array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_type-s.mdx#2025-04-18_snippet_6\n\nLANGUAGE: res\nCODE:\n```\nlet setArray: (array<elt>, t) => unit\n```\n\n----------------------------------------\n\nTITLE: FromOption Function Signature in ReScript\nDESCRIPTION: Function signature for converting option types to Js.null_undefined.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/null-undefined.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromOption: option<'a> => t<'a>\n```\n\n----------------------------------------\n\nTITLE: Using max_int function to find maximum of two integers in ReScript\nDESCRIPTION: The max_int function returns the maximum of its two integer arguments. It takes two integers as input and returns an integer.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/math.mdx#2025-04-18_snippet_14\n\nLANGUAGE: res\nCODE:\n```\nlet max_int: (int, int) => int\n```\n\n----------------------------------------\n\nTITLE: List isEmpty Function Signature\nDESCRIPTION: Function to check if a list is empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/list.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ReScript\nCODE:\n```\nlet isEmpty: t('a) => bool;\n```\n\n----------------------------------------\n\nTITLE: Mapping Array Elements\nDESCRIPTION: Creates a new array with the results of calling the provided function on every element.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_42\n\nLANGUAGE: rescript\nCODE:\n```\nlet map: ((. elt) => 'b, t) => typed_array<'b>\n```\n\n----------------------------------------\n\nTITLE: Reading Float Values from DataView in ReScript\nDESCRIPTION: Functions to read 32-bit and 64-bit floating-point values from a DataView, with options for endianness.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_data-view.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet getFloat32: (t, int) => float;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet getFloat32LittleEndian: (t, int) => float;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet getFloat64: (t, int) => float;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet getFloat64LittleEndian: (t, int) => float;\n```\n\n----------------------------------------\n\nTITLE: List Flatten Function Signature\nDESCRIPTION: Function to flatten a list of lists into a single list.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/list.mdx#2025-04-18_snippet_15\n\nLANGUAGE: ReScript\nCODE:\n```\nlet flatten: t(t('a)) => t('a);\n```\n\n----------------------------------------\n\nTITLE: Controlling Mutability Visibility in Interface Files\nDESCRIPTION: Demonstrates how to hide mutability of fields in the interface file while keeping them mutable in the implementation, providing finer-grained access control.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/generate-converters-accessors.mdx#2025-04-18_snippet_20\n\nLANGUAGE: ReScript\nCODE:\n```\n/* test.res */\n@deriving(abstract)\ntype cord = {\n  @optional mutable x: int,\n  y: int,\n};\n```\n\nLANGUAGE: ReScript\nCODE:\n```\n/* test.resi */\n@deriving(abstract)\ntype cord = {\n  @optional x: int,\n  y: int,\n};\n```\n\n----------------------------------------\n\nTITLE: ReScript Undefined Value Type Definition\nDESCRIPTION: Defines an opaque type for JavaScript undefined values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/types.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\ntype undefined_val;\n```\n\n----------------------------------------\n\nTITLE: Removing and Returning First Element as Undefined in MutableQueue (ReScript)\nDESCRIPTION: Function to remove and return the first element in the queue or undefined if it's empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-queue.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rescript\nCODE:\n```\nlet popUndefined: t('a) => Js.undefined('a);\n```\n\n----------------------------------------\n\nTITLE: Checking if MutableSetInt is empty\nDESCRIPTION: Returns a boolean indicating whether the set is empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet isEmpty: t => bool\n```\n\n----------------------------------------\n\nTITLE: Removing a key-value pair from a HashMap with integer keys in ReScript\nDESCRIPTION: Removes the binding for a key if it exists in the hash map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-map-int.mdx#2025-04-18_snippet_9\n\nLANGUAGE: reason\nCODE:\n```\nlet remove: (t('a), key) => unit;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet hMap = Belt.HashMap.Int.make(~hintSize=10);\nBelt.HashMap.Int.set(hMap, 1, \"value1\");\nBelt.HashMap.Int.remove(hMap, 1);\nBelt.HashMap.Int.has(hMap, 1) == false;\n```\n\n----------------------------------------\n\nTITLE: Searching for Regular Expression Match in ReScript\nDESCRIPTION: The search function returns the starting position of the first match of a regular expression in a given string, or -1 if there is no match.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string-2.mdx#2025-04-18_snippet_12\n\nLANGUAGE: ReScript\nCODE:\n```\nlet search: (t, Js_re.t) => int;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nJs.String2.search(\"testing 1 2 3\", [%re \"/\\\\d+/\"]) == 8;\nJs.String2.search(\"no numbers\", [%re \"/\\\\d+/\"]) == -1;\n```\n\n----------------------------------------\n\nTITLE: Reading 16-bit Unsigned Integer (Big Endian)\nDESCRIPTION: Gets an unsigned 16-bit integer at the specified byte offset from the start of the DataView using big-endian format.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_data-view.mdx#2025-04-18_snippet_12\n\nLANGUAGE: reasonml\nCODE:\n```\nlet getUint16: (t, int) => int;\n```\n\n----------------------------------------\n\nTITLE: Array to HashSet Conversion\nDESCRIPTION: Creates a new HashSet from an array of keys.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-set-string.mdx#2025-04-18_snippet_16\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromArray: array<key> => t\n```\n\n----------------------------------------\n\nTITLE: Converting Option to Undefined in ReScript\nDESCRIPTION: Function signature for converting ReScript's option type to JavaScript's undefined. Maps Some(a) to a and None to empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/undefined.mdx#2025-04-18_snippet_11\n\nLANGUAGE: res\nCODE:\n```\nlet fromOption: option<'a> => t<'a>\n```\n\n----------------------------------------\n\nTITLE: Filtering Option Values in ReScript\nDESCRIPTION: Function to filter option values based on a predicate function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/option.mdx#2025-04-18_snippet_10\n\nLANGUAGE: reason\nCODE:\n```\nlet filter: ((. 'a) => bool, option('a)) => option('a);\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet isEven = (. x) => {x mod 2 == 0};\nJs.Option.filter(isEven, Some(2)) == Some(2);\nJs.Option.filter(isEven, Some(3)) == None;\nJs.Option.filter(isEven, None) == None;\n```\n\n----------------------------------------\n\nTITLE: Removing multiple key-value pairs in ReScript\nDESCRIPTION: Function signature for removing multiple key-value pairs from a mutable map by an array of keys.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_38\n\nLANGUAGE: ReScript\nCODE:\n```\nlet removeMany: (t<'a>, array<key>) => unit\n```\n\n----------------------------------------\n\nTITLE: Retrieving Timestamp from Date in ReScript\nDESCRIPTION: The getTime function returns the number of milliseconds since Unix epoch for a Date object, evaluated in UTC. It binds to JavaScript's Date.getTime method.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_29\n\nLANGUAGE: res\nCODE:\n```\nlet getTime: t => float\n```\n\nLANGUAGE: res\nCODE:\n```\nJs.Date.getTime(exampleDate) == 123456654321.0\n```\n\n----------------------------------------\n\nTITLE: Converting Float to Exponential Notation\nDESCRIPTION: Function that formats a float using exponential (scientific) notation without specifying precision.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/float.mdx#2025-04-18_snippet_7\n\nLANGUAGE: re\nCODE:\n```\nlet toExponential: float => string;\n```\n\n----------------------------------------\n\nTITLE: Setting Full Year and Month in ReScript\nDESCRIPTION: ReScript binding for JavaScript's Date.setFullYear method with month parameter. Sets the year and month and returns the time value. This function modifies the original Date object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_40\n\nLANGUAGE: res\nCODE:\n```\nlet setFullYearM: (t, ~year: float, ~month: float, unit) => float\n```\n\nLANGUAGE: res\nCODE:\n```\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet future = Js.Date.setFullYearM(date1, ~year=1974.0, ~month=0.0, ())\ndate1 == Js.Date.fromString(\"1974-01-22T21:30:54.321Z00:00\")\nfuture == Js.Date.getTime(date1)\n```\n\n----------------------------------------\n\nTITLE: Using sign_int function to determine sign of integer in ReScript\nDESCRIPTION: The sign_int function returns the sign of its integer argument: -1 if negative, 0 if zero, 1 if positive. It takes an integer as input and returns an integer.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/math.mdx#2025-04-18_snippet_28\n\nLANGUAGE: res\nCODE:\n```\nlet sign_int: int => int\n```\n\n----------------------------------------\n\nTITLE: Finding the minimum key-value pair in MapDict (undefined version)\nDESCRIPTION: Function signature for finding the key-value pair with the smallest key, returning an undefined value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_31\n\nLANGUAGE: reason\nCODE:\n```\nlet minUndefined: t('k, 'a, 'b) => Js.undefined(('k, 'a));\n```\n\n----------------------------------------\n\nTITLE: Getting Element with Exception\nDESCRIPTION: Function that returns an element from the set, raising an exception when not found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set.mdx#2025-04-18_snippet_39\n\nLANGUAGE: reason\nCODE:\n```\nlet getExn: (t('value, 'id), 'value) => 'value;\n```\n\n----------------------------------------\n\nTITLE: Removing JSX v3 Configuration\nDESCRIPTION: Configuration to remove from rescript.json for JSX v3\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/migrate-react.mdx#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"reason\": { \"react-jsx\": 3 }\n}\n```\n\n----------------------------------------\n\nTITLE: Console Error Functions in ReScript\nDESCRIPTION: Functions for logging error messages to the console with different arities. These functions use the error log level to indicate errors and critical issues.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/console.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reasonml\nCODE:\n```\nlet error: 'a => unit;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet error2: ('a, 'b) => unit;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet error3: ('a, 'b, 'c) => unit;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet error4: ('a, 'b, 'c, 'd) => unit;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet errorMany: array('a) => unit;\n```\n\n----------------------------------------\n\nTITLE: Retrieving value for key with exception in ReScript map\nDESCRIPTION: Returns the value associated with the given key, or raises an exception if the key is not found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_35\n\nLANGUAGE: reasonml\nCODE:\n```\nlet getExn: (t('a), key) => 'a;\n```\n\n----------------------------------------\n\nTITLE: Array Iteration Methods\nDESCRIPTION: Functions for iterating over array elements including map, reduce, filter and forEach operations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_float-32-array.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet forEach: ((. elt) => unit, t) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet forEachi: ((. elt, int) => unit, t) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet map: ((. elt) => 'b, t) => typed_array<'b>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet mapi: ((. elt, int) => 'b, t) => typed_array<'b>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduce: ((. 'b, elt) => 'b, 'b, t) => 'b\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet reducei: ((. 'b, elt, int) => 'b, 'b, t) => 'b\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduceRight: ((. 'b, elt) => 'b, 'b, t) => 'b\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduceRighti: ((. 'b, elt, int) => 'b, 'b, t) => 'b\n```\n\n----------------------------------------\n\nTITLE: Popping Elements from MutableStack with Option in ReScript\nDESCRIPTION: Function to remove and return the top element of a stack, wrapped in an option type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-stack.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet pop: t('a) => option('a);\n```\n\n----------------------------------------\n\nTITLE: Array Sorting with Custom Comparator in ReScript\nDESCRIPTION: Sorts an array in place using a custom comparison function that returns negative, zero, or positive integers based on element comparison.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/array-2.mdx#2025-04-18_snippet_7\n\nLANGUAGE: reason\nCODE:\n```\nlet sortInPlaceWith: (t('a), ('a, 'a) => int) => t('a);\n```\n\nLANGUAGE: reason\nCODE:\n```\n// sort by word length\nlet words = [|\"horse\", \"aardvark\", \"dog\", \"camel\"|];\nlet byLength = (s1, s2) => {\n  Js.String.length(s1) - Js.String.length(s2);\n};\n\nJs.Array2.sortInPlaceWith(words, byLength)\n  == [|\"dog\", \"horse\", \"camel\", \"aardvark\"|];\n  \n// sort in reverse numeric order\nlet numbers = [|3, 30, 10, 1, 20, 2|];\nlet reverseNumeric = (n1, n2) => {n2 - n1};\nJs.Array2.sortInPlaceWith(numbers, reverseNumeric)\n  == [|30, 20, 10, 3, 2, 1|];\n```\n\n----------------------------------------\n\nTITLE: Checking if a HashMap is Empty in ReScript\nDESCRIPTION: Checks whether a hash map is empty. Demonstrates usage with an example of creating a non-empty hash map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-map.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet isEmpty: t('a, 'b, 'c) => bool;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nmodule IntHash =\n  Belt.Id.MakeHashable({\n    type t = int;\n    let hash = a => a;\n    let eq = (a, b) => a == b;\n  });\n  \nBelt.HashMap.isEmpty(Belt.HashMap.fromArray([|(1, \"1\")|], ~id=(module IntHash))) == false;\n```\n\n----------------------------------------\n\nTITLE: Configuring ReasonReact JSX in bsconfig.json\nDESCRIPTION: Example of how to enable JSX for ReasonReact in the bsconfig.json file. This configuration turns on JSX version 3 and specifies the refmt version.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/build-configuration.mdx#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"reason\": { \"react-jsx\": 3 },\n  \"refmt\": 3\n}\n```\n\n----------------------------------------\n\nTITLE: Partitioning Set with Predicate in ReScript\nDESCRIPTION: Divides a set into two parts: elements that satisfy the predicate and elements that don't.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-string.mdx#2025-04-18_snippet_46\n\nLANGUAGE: reasonml\nCODE:\n```\nlet partition: (t, value => bool) => (t, t);\n```\n\n----------------------------------------\n\nTITLE: Checking Set Equality in ReScript\nDESCRIPTION: Determines whether two sets contain exactly the same elements, regardless of insertion order.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-string.mdx#2025-04-18_snippet_28\n\nLANGUAGE: reasonml\nCODE:\n```\nlet eq: (t, t) => bool;\n```\n\n----------------------------------------\n\nTITLE: Defining key and t types for Belt.HashMap.String in ReScript\nDESCRIPTION: Defines the key type as string and the t type as a generic hash map type for the Belt.HashMap.String module.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/hash-map-string.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\ntype key = string\n\ntype t<'b>\n```\n\n----------------------------------------\n\nTITLE: Setting Time in ReScript\nDESCRIPTION: Sets a Date's value in terms of milliseconds since the epoch. Returns milliseconds since epoch of the updated Date. Modifies the original Date.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_54\n\nLANGUAGE: rescript\nCODE:\n```\nlet setTime: (t, float) => float\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet futureTime = Js.Date.setTime(date1, 198765432101.0)\n\ndate1 == Js.Date.fromString(\"1976-04-19T12:37:12.101Z00:00\")\nfutureTime == Js.Date.getTime(date1)\n```\n\n----------------------------------------\n\nTITLE: Finding Maximum Value with Option Return in ReScript MutableSet\nDESCRIPTION: Returns the maximum value in a string MutableSet collection wrapped in an Option type. Returns None if the collection is empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_10\n\nLANGUAGE: res\nCODE:\n```\nlet maximum: t => option<value>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet s0 = Belt.MutableSet.String.make()\nlet s1 = Belt.MutableSet.String.fromArray([\"apple\", \"orange\"])\n\ns0->Belt.MutableSet.String.maximum /* None */\ns1->Belt.MutableSet.String.maximum /* Some(\"orange\") */\n```\n\n----------------------------------------\n\nTITLE: Getting the size of a set in ReScript with MutableSetInt\nDESCRIPTION: Returns the number of elements in the set. This is a constant-time operation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_32\n\nLANGUAGE: rescript\nCODE:\n```\nlet size: t => int;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet s0 = Belt.MutableSet.Int.fromArray([|1,2,3,4|]);\n\ns0->Belt.MutableSet.Int.size; /* 4 */\n```\n\n----------------------------------------\n\nTITLE: Creating HashSetString from array\nDESCRIPTION: Creates a new HashSetString containing all unique elements from the given array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-set-string.mdx#2025-04-18_snippet_16\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromArray: array(key) => t;\n```\n\n----------------------------------------\n\nTITLE: Fill Float32Array Range with Value\nDESCRIPTION: Fills the Float32Array with a static value from start index to end index and returns the modified array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_14\n\nLANGUAGE: rescript\nCODE:\n```\nlet fillRangeInPlace: (elt, ~start: int, ~end_: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Finding last index of element starting from specified position\nDESCRIPTION: Returns the last index at which a given element can be found in the array, searching backwards from the specified index, or -1 if not present.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_24\n\nLANGUAGE: res\nCODE:\n```\nlet lastIndexOfFrom: (elt, ~from: int, t) => int\n```\n\n----------------------------------------\n\nTITLE: Setting RegExp LastIndex Property\nDESCRIPTION: Function that sets the index at which the next match will start its search from when using a RegExp with the global flag.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/re.mdx#2025-04-18_snippet_12\n\nLANGUAGE: reason\nCODE:\n```\nlet setLastIndex: (t, int) => unit;\n```\n\n----------------------------------------\n\nTITLE: Console Warning Functions in ReScript\nDESCRIPTION: Functions for logging warning messages to the console with different arities. These functions use the warn log level to indicate potential issues.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/console.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reasonml\nCODE:\n```\nlet warn: 'a => unit;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet warn2: ('a, 'b) => unit;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet warn3: ('a, 'b, 'c) => unit;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet warn4: ('a, 'b, 'c, 'd) => unit;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet warnMany: array('a) => unit;\n```\n\n----------------------------------------\n\nTITLE: Join Array Elements into String\nDESCRIPTION: Joins all elements of the array into a string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-64-array.mdx#2025-04-18_snippet_21\n\nLANGUAGE: reason\nCODE:\n```\nlet join: t => string;\n```\n\n----------------------------------------\n\nTITLE: Create Float32Array from Buffer\nDESCRIPTION: Creates a new Float32Array view on the provided ArrayBuffer.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_52\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromBuffer: Js_typed_array.array_buffer => t\n```\n\n----------------------------------------\n\nTITLE: Setting UTC Date in ReScript\nDESCRIPTION: Sets a Date's day of month according to UTC. Returns milliseconds since epoch for the updated Date. Modifies the original Date.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_55\n\nLANGUAGE: rescript\nCODE:\n```\nlet setUTCDate: (t, float) => float\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet twoWeeksBefore = Js.Date.setUTCDate(date1, 15.0)\ndate1 == Js.Date.fromString(\"1973-11-15T21:30:54.321Z00:00\")\ntwoWeeksBefore == Js.Date.getTime(date1)\n```\n\n----------------------------------------\n\nTITLE: Slicing ArrayBuffer with Start and End in ReScript\nDESCRIPTION: Function signature for creating a new ArrayBuffer by slicing an existing one from a start index to an end index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_array-buffer.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ReScript\nCODE:\n```\nlet slice: (~start: int, ~end_: int, t) => Js_typed_array.array_buffer;\n```\n\n----------------------------------------\n\nTITLE: Array Iteration Methods\nDESCRIPTION: Higher-order functions for iterating over and transforming arrays.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_5\n\nLANGUAGE: reasonml\nCODE:\n```\nlet forEach: ((. elt) => unit, t) => unit;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet map: ((. elt) => 'b, t) => typed_array('b);\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet reduce: ((. 'b, elt) => 'b, 'b, t) => 'b;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Int8Array properties in ReScript\nDESCRIPTION: Functions to get the buffer, byte length, byte offset, and length of an Int8Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet buffer: t => Js_typed_array.array_buffer\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet byteLength: t => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet byteOffset: t => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet length: t => int\n```\n\n----------------------------------------\n\nTITLE: Creating Array Slice with slice in ReScript\nDESCRIPTION: Function signature for slice that extracts a section of a Uint8Array from start to end (end not included) and returns a new array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_25\n\nLANGUAGE: rescript\nCODE:\n```\nlet slice: (~start: int, ~end_: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Computing Arccosine in ReScript\nDESCRIPTION: Function that returns the arccosine (in radians) of the argument. Returns NaN if the argument is outside the range [-1.0, 1.0].\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/math.mdx#2025-04-18_snippet_10\n\nLANGUAGE: reasonml\nCODE:\n```\nlet acos: float => float;\n```\n\n----------------------------------------\n\nTITLE: String substr Function in ReScript\nDESCRIPTION: The substr function extracts a substring from a specified position to the end of the string. Negative indices count from the end, and if the start index exceeds the string length, an empty string is returned. This is a legacy function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/string.mdx#2025-04-18_snippet_14\n\nLANGUAGE: res\nCODE:\n```\nlet substr: (~from: int, t) => t\n```\n\nLANGUAGE: res\nCODE:\n```\nJs.String.substr(~from=3, \"abcdefghij\") == \"defghij\"\nJs.String.substr(~from=-3, \"abcdefghij\") == \"hij\"\nJs.String.substr(~from=12, \"abcdefghij\") == \"\"\n```\n\n----------------------------------------\n\nTITLE: Finding Index of First Match\nDESCRIPTION: Function signature to find the index of the first element that satisfies a specified condition.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_38\n\nLANGUAGE: res\nCODE:\n```\nlet findIndex: ((. elt) => bool, t) => int\n```\n\n----------------------------------------\n\nTITLE: Creating a new ReScript project with pnpm\nDESCRIPTION: Command to create a new ReScript project using the create-rescript-app generator with pnpm.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/installation.mdx#2025-04-18_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\npnpm create rescript-app\n```\n\n----------------------------------------\n\nTITLE: Accessing and Setting Elements in UInt32Array\nDESCRIPTION: Provides unsafe get and set operations for Uint32Array elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_1\n\nLANGUAGE: ReScript\nCODE:\n```\nlet unsafe_get: (t, int) => elt\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet unsafe_set: (t, int, elt) => unit\n```\n\n----------------------------------------\n\nTITLE: Setting Array Values from Array\nDESCRIPTION: Function signature to set multiple values in a Uint16Array from a standard array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_6\n\nLANGUAGE: res\nCODE:\n```\nlet setArray: (array<elt>, t) => unit\n```\n\n----------------------------------------\n\nTITLE: Checking internal invariants in ReScript map\nDESCRIPTION: Validates the internal structure of the map and raises an exception if invariants are not held.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_36\n\nLANGUAGE: reasonml\nCODE:\n```\nlet checkInvariantInternal: t('a) => unit;\n```\n\n----------------------------------------\n\nTITLE: Creating Slice of Array\nDESCRIPTION: Function signature to extract a section of the Int8Array and return a new Int8Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_25\n\nLANGUAGE: res\nCODE:\n```\nlet slice: (~start: int, ~end_: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Converting Array to String in ReasonML\nDESCRIPTION: The toString function converts an array to a string, with each element converted using JavaScript. All elements in the array must have the same type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array.mdx#2025-04-18_snippet_12\n\nLANGUAGE: ReasonML\nCODE:\n```\nlet toString: t<'a> => string\n```\n\nLANGUAGE: ReasonML\nCODE:\n```\nJs.Array.toString([3.5, 4.6, 7.8]) == \"3.5,4.6,7.8\"\nJs.Array.toString([\"a\", \"b\", \"c\"]) == \"a,b,c\"\n```\n\n----------------------------------------\n\nTITLE: Defining Null_undefined Type in ReScript\nDESCRIPTION: Defines a type alias 't' for Js.null_undefined('a), which represents values that can be null or undefined in JavaScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/null-undefined.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\ntype t('a) = Js.null_undefined('a);\n```\n\n----------------------------------------\n\nTITLE: Using @as Decorator for Field Name Mapping\nDESCRIPTION: Shows how to use the @as decorator to map different field names between ReScript and JavaScript, useful for handling JavaScript keywords or expressing names that can't be directly used in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/bind-to-js-object.mdx#2025-04-18_snippet_1\n\nLANGUAGE: ReScript\nCODE:\n```\ntype action = {\n  @as(\"type\") type_: string\n}\n\nlet action = {type_: \"ADD_USER\"}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar action = {\n  type: \"ADD_USER\"\n};\n```\n\n----------------------------------------\n\nTITLE: Filling Uint8ClampedArray from index with a value\nDESCRIPTION: Fills the array from the specified start index with the given value, modifying the array in place.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_13\n\nLANGUAGE: res\nCODE:\n```\nlet fillFromInPlace: (elt, ~from: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Creating Set from Sorted Array in ReScript MutableSetString\nDESCRIPTION: Function signature for creating a set from a pre-sorted array of strings.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nlet fromSortedArrayUnsafe: array<value> => t\n```\n\n----------------------------------------\n\nTITLE: Getting size of HashSetInt in ReScript\nDESCRIPTION: Returns the number of elements in the HashSetInt.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-set-int.mdx#2025-04-18_snippet_13\n\nLANGUAGE: ReScript\nCODE:\n```\nlet size: t => int;\n```\n\n----------------------------------------\n\nTITLE: Creating and Clearing MutableMaps in ReScript\nDESCRIPTION: Functions for creating a new mutable map with a custom id and clearing all elements from a map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-map.mdx#2025-04-18_snippet_1\n\nLANGUAGE: ReScript\nCODE:\n```\nlet make: (~id: id<'k, 'id>) => t<'k, 'a, 'id>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet clear: t<'a, 'b, 'c> => unit\n```\n\n----------------------------------------\n\nTITLE: String splitByReAtMost Function in ReScript\nDESCRIPTION: The splitByReAtMost function divides a string using a regular expression with a maximum number of results. It returns an array of at most the specified number of substrings, each wrapped in an Option type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/string.mdx#2025-04-18_snippet_10\n\nLANGUAGE: res\nCODE:\n```\nlet splitByReAtMost: (Js_re.t, ~limit: int, t) => array<option<t>>\n```\n\nLANGUAGE: res\nCODE:\n```\nJs.String.splitByReAtMost(%re(\"/\\s*:\\s*/\"), ~limit=3, \"one: two: three: four\") == [\n    Some(\"one\"),\n    Some(\"two\"),\n    Some(\"three\"),\n  ]\n\nJs.String.splitByReAtMost(%re(\"/\\s*:\\s*/\"), ~limit=0, \"one: two: three: four\") == []\n\nJs.String.splitByReAtMost(%re(\"/\\s*:\\s*/\"), ~limit=8, \"one: two: three: four\") == [\n    Some(\"one\"),\n    Some(\"two\"),\n    Some(\"three\"),\n    Some(\"four\"),\n  ]\n```\n\n----------------------------------------\n\nTITLE: Reducing Set with Uncurried Function in ReScript MutableSetString\nDESCRIPTION: Accumulates a single value by applying an uncurried function to each element with an accumulator.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_22\n\nLANGUAGE: reason\nCODE:\n```\nlet reduceU: (t, 'a, [@bs] (('a, value) => 'a)) => 'a;\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Checking Values in HashMap in ReScript\nDESCRIPTION: Functions to get a value by key and check if a key exists in the hash map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-map-int.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet get: (t<'a>, key) => option<'a>\n\nlet has: (t<'b>, key) => bool\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet hMap = Belt.HashMap.Int.make(~hintSize=10)\nBelt.HashMap.Int.set(hMap, 1, \"value1\")\n\nBelt.HashMap.Int.get(hMap, 1) == Some(\"value1\")\nBelt.HashMap.Int.get(hMap, 2) == None\n```\n\n----------------------------------------\n\nTITLE: Descending For Loop Example in ReScript\nDESCRIPTION: A simple descending for loop example in ReScript that iterates from 3 down to 1 and logs each value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/control-flow.mdx#2025-04-18_snippet_7\n\nLANGUAGE: res\nCODE:\n```\n// prints: 3 2 1, one per line\nfor x in 3 downto 1 {\n  Console.log(x)\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nfor(var x = 3; x >= 1; --x){\n  console.log(x);\n}\n```\n\n----------------------------------------\n\nTITLE: Converting MapDict to/from array in ReScript\nDESCRIPTION: Functions to convert MapDict to and from arrays of key-value pairs.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_12\n\nLANGUAGE: ReScript\nCODE:\n```\nlet toArray: t<'k, 'a, 'id> => array<('k, 'a)>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet fromArray: (array<('k, 'a)>, ~cmp: cmp<'k, 'id>) => t<'k, 'a, 'id>\n```\n\n----------------------------------------\n\nTITLE: Converting Values to Strings in ReScript\nDESCRIPTION: The 'make' function converts any value to a string. It takes a value of any type and returns a string representation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/string-2.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet make: 'a => t\n```\n\n----------------------------------------\n\nTITLE: Getting a value by key from MapDict (undefined version)\nDESCRIPTION: Function signature for retrieving a value by key from a map, returning an undefined value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_35\n\nLANGUAGE: reason\nCODE:\n```\nlet getUndefined: (t('k, 'a, 'id), 'k, ~cmp: cmp('k, 'id)) => Js.undefined('a);\n```\n\n----------------------------------------\n\nTITLE: Int32Array Type Definitions\nDESCRIPTION: Core type definitions for Int32Array including element type, typed array type and main array type\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array-2_int-32-array.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype elt = int32\ntype typed_array<'a>\ntype t = typed_array<elt>\n```\n\n----------------------------------------\n\nTITLE: ToOption Function Signatures\nDESCRIPTION: Function signatures for converting nullable types to option types.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/null.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\nlet toOption: t<'a> => option<'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet to_opt: t<'a> => option<'a>\n```\n\n----------------------------------------\n\nTITLE: List Cons Function Signature\nDESCRIPTION: Function to prepend an element to a list.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/list.mdx#2025-04-18_snippet_2\n\nLANGUAGE: ReScript\nCODE:\n```\nlet cons: ('a, t('a)) => t('a);\n```\n\n----------------------------------------\n\nTITLE: Dictionary Unsafe Get Example\nDESCRIPTION: Examples showing direct value access including undefined case.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/dict.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nJs.Dict.unsafeGet(ages, \"Fred\") == 49\nJs.Dict.unsafeGet(ages, \"Paul\") // returns undefined\n```\n\n----------------------------------------\n\nTITLE: Adding multiple values to a set in ReScript\nDESCRIPTION: Adds multiple integers from an array to a set at once. Unlike the add function, this may return a new reference even if all values already exist.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-int.mdx#2025-04-18_snippet_8\n\nLANGUAGE: reason\nCODE:\n```\nlet mergeMany: (t, array(value)) => t;\n```\n\n----------------------------------------\n\nTITLE: Checking if an integer hash set is empty in ReScript\nDESCRIPTION: Function signature for determining if an integer hash set contains no elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/hash-set-int.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nlet isEmpty: t => bool\n```\n\n----------------------------------------\n\nTITLE: Iter Function Implementation\nDESCRIPTION: Function for iterating over nullable values with example usage\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/nullable.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nlet iter: (t<'a>, (. 'a) => unit) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet maybeSay = (maybeMessage: Js.null_undefined<string>) =>\n  Js.Nullable.iter(maybeMessage, (. message) => Js.log(message))\n```\n\n----------------------------------------\n\nTITLE: Signature of someByU function in Belt.Range\nDESCRIPTION: Type signature for the uncurried version of someBy function that checks if a predicate is true for at least one element in a range with a step parameter.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/range.mdx#2025-04-18_snippet_12\n\nLANGUAGE: reason\nCODE:\n```\nlet someByU: (int, int, ~step: int, [@bs] (int => bool)) => bool;\n```\n\n----------------------------------------\n\nTITLE: Finding the minimum value with undefined return in ReScript\nDESCRIPTION: Returns the smallest element in the set, or undefined if the set is empty. Useful for JavaScript interop.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-int.mdx#2025-04-18_snippet_33\n\nLANGUAGE: reason\nCODE:\n```\nlet minUndefined: t => Js.undefined(value);\n```\n\n----------------------------------------\n\nTITLE: Exception-based Array Element Access in ReScript\nDESCRIPTION: Retrieves an array element by index, raising an exception if the index is out of range.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/array.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reason\nCODE:\n```\nlet getExn: (array('a), int) => 'a;\n```\n\n----------------------------------------\n\nTITLE: Copying a HashSetString\nDESCRIPTION: Creates a new HashSetString with the same elements as the input set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/hash-set-string.mdx#2025-04-18_snippet_6\n\nLANGUAGE: res\nCODE:\n```\nlet copy: t => t\n```\n\n----------------------------------------\n\nTITLE: Retrieving Element with Exception using getExn in ReScript\nDESCRIPTION: Similar to get, but raises an exception when the element does not exist instead of returning an option. This should be used when you're certain the element exists.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/set-string.mdx#2025-04-18_snippet_10\n\nLANGUAGE: res\nCODE:\n```\nlet getExn: (t, value) => value\n```\n\n----------------------------------------\n\nTITLE: Writing a Float32 value with little-endian format in ReScript\nDESCRIPTION: Function signature for storing a 32-bit floating point number at the specified byte offset with little-endian format.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_data-view.mdx#2025-04-18_snippet_33\n\nLANGUAGE: rescript\nCODE:\n```\nlet setFloat32LittleEndian: (t, int, float) => unit\n```\n\n----------------------------------------\n\nTITLE: HashSet Empty Check\nDESCRIPTION: Checks if the HashSet contains no elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-set-string.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet isEmpty: t => bool\n```\n\n----------------------------------------\n\nTITLE: Combining six Promises with Promise.all6 in ReScript\nDESCRIPTION: Creates a promise that resolves when all six promises resolve, returning a tuple of results.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/promise.mdx#2025-04-18_snippet_10\n\nLANGUAGE: reason\nCODE:\n```\nlet all6: ((t('a0), t('a1), t('a2), t('a3), t('a4), t('a5))) => t(('a0, 'a1, 'a2, 'a3, 'a4, 'a5));\n```\n\n----------------------------------------\n\nTITLE: Creating a Set from Sorted Array in ReasonML\nDESCRIPTION: Creates a set from an already sorted array, which can be more efficient than fromArray for pre-sorted data.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set.mdx#2025-04-18_snippet_6\n\nLANGUAGE: reasonml\nCODE:\n```\nlet fromSortedArrayUnsafe: (array('value), ~id: id('value, 'id)) => t('value, 'id);\n```\n\n----------------------------------------\n\nTITLE: Performing Integer Subtraction in ReScript\nDESCRIPTION: This snippet demonstrates how to use the subtraction operator (-) to perform integer subtraction in ReScript. The example subtracts 2 from 3 and stores the result in a variable.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/operators_integer_subtraction.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\nlet result = 3 - 2\n```\n\nLANGUAGE: js\nCODE:\n```\nvar result = 1;\n```\n\n----------------------------------------\n\nTITLE: Defining Types for UInt32Array in ReScript\nDESCRIPTION: Defines the element type, typed array type, and the main type t for Uint32Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\ntype elt = int\ntype typed_array<'a> = Js_typed_array2.Uint32Array.typed_array<'a>\ntype t = typed_array<elt>\n```\n\n----------------------------------------\n\nTITLE: Vector Length Operation\nDESCRIPTION: Returns the number of elements in the vector.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/vector.mdx#2025-04-18_snippet_13\n\nLANGUAGE: res\nCODE:\n```\nlet length: t<'a> => int\n```\n\n----------------------------------------\n\nTITLE: Splitting MutableSet in ReScript\nDESCRIPTION: Splits the set into two parts based on a value, returning smaller and larger sets along with a presence indicator.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_42\n\nLANGUAGE: reasonml\nCODE:\n```\nlet split: (t, value) => ((t, t), bool);\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet s0 = Belt.MutableSet.Int.fromArray([|1,2,3,4,5|]);\n\nlet ((smaller, larger), present) = s0->Belt.MutableSet.Int.split(3);\n\npresent; /* true */\nsmaller->Belt.MutableSet.Int.toArray; /* [|1,2|] */\nlarger->Belt.MutableSet.Int.toArray; /* [|4,5|] */\n```\n\n----------------------------------------\n\nTITLE: Mapping with keys in MapDict (uncurried)\nDESCRIPTION: Function signature for transforming values in a map with access to their keys using an uncurried function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_54\n\nLANGUAGE: reason\nCODE:\n```\nlet mapWithKeyU: (t('k, 'a, 'id), [@bs] (('k, 'a) => 'b)) => t('k, 'b, 'id);\n```\n\n----------------------------------------\n\nTITLE: Dictionary Get Operation Type\nDESCRIPTION: Type signature for safely retrieving values from a dictionary, returning an option type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/dict.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\nlet get: (t<'a>, key) => option<'a>\n```\n\nLANGUAGE: res\nCODE:\n```\nJs.Dict.get(ages, \"Vinh\") == Some(22)\nJs.Dict.get(ages, \"Paul\") == None\n```\n\n----------------------------------------\n\nTITLE: FromOption Function Signature in ReScript\nDESCRIPTION: Function signature for converting Option type to nullable type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/nullable.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromOption: option<'a> => t<'a>\n```\n\n----------------------------------------\n\nTITLE: Getting Size of MutableQueue in ReScript\nDESCRIPTION: Function to return the number of elements in the queue.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-queue.mdx#2025-04-18_snippet_13\n\nLANGUAGE: rescript\nCODE:\n```\nlet size: t('a) => int;\n```\n\n----------------------------------------\n\nTITLE: Creating a copy of a HashMap with integer keys in ReScript\nDESCRIPTION: Creates a new hash map that is a copy of the given hash map, with the same bindings.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-map-int.mdx#2025-04-18_snippet_6\n\nLANGUAGE: reason\nCODE:\n```\nlet copy: t('a) => t('a);\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet hMap1 = Belt.HashMap.Int.fromArray([|(1, \"1\"), (2, \"2\")|]);\nlet hMap2 = Belt.HashMap.Int.copy(hMap1)\n\nBelt.HashMap.Int.set(hMap2, 2, \"3\");\n\nBelt.HashMap.Int.get(hMap1, 2) != Belt.HashMap.Int.get(hMap2, 2)\n```\n\n----------------------------------------\n\nTITLE: Finding Maximum Value in Belt.MutableSet using maximum in ReScript\nDESCRIPTION: The maximum function returns the maximum value of the collection. It returns None if the collection is empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_13\n\nLANGUAGE: ReScript\nCODE:\n```\nlet maximum: t<'value, 'id> => option<'value>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nmodule IntCmp = Belt.Id.MakeComparable({\n  type t = int\n  let cmp = Pervasives.compare\n})\n\nlet s0 = Belt.MutableSet.make(~id=module(IntCmp))\nlet s1 = Belt.MutableSet.fromArray([3, 2, 1, 5], ~id=module(IntCmp))\n\ns0->Belt.MutableSet.maximum /* None */\ns1->Belt.MutableSet.maximum /* Some(5) */\n```\n\n----------------------------------------\n\nTITLE: Array Access Methods\nDESCRIPTION: Basic array access methods for getting and setting values, and accessing array properties.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_int-32-array.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reason\nCODE:\n```\nlet unsafe_get: (t, int) => elt;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet unsafe_set: (t, int, elt) => unit;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet buffer: t => Js_typed_array2.array_buffer;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet byteLength: t => int;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet byteOffset: t => int;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet length: t => int;\n```\n\n----------------------------------------\n\nTITLE: Declaring getDate Function for Date in ReScript\nDESCRIPTION: Declares the getDate function, which returns the day of the month for a given Date object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_16\n\nLANGUAGE: rescript\nCODE:\n```\nlet getDate: t => float\n```\n\n----------------------------------------\n\nTITLE: Removing an element from a set in ReScript with MutableSetInt\nDESCRIPTION: Removes the specified value from the set. If the value doesn't exist in the set, the operation has no effect. This mutates the original set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_11\n\nLANGUAGE: rescript\nCODE:\n```\nlet remove: (t, value) => unit;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet s0 = Belt.MutableSet.Int.fromArray([|2,3,1,4,5|]);\ns0->Belt.MutableSet.Int.remove(1);\ns0->Belt.MutableSet.Int.remove(3);\ns0->Belt.MutableSet.Int.remove(3);\n\ns0->Belt.MutableSet.Int.toArray; /* [|2,4,5|] */\n```\n\n----------------------------------------\n\nTITLE: Using bs.open for Safe External Data Handling in ReScript\nDESCRIPTION: Shows how to use bs.open to safely handle mixed data sources that could come from either JavaScript or ReScript. This approach uses OCaml's extensible variant system to filter structured exception data, preserving type safety while dealing with potentially unpredictable external data formats.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/reason-compiler/latest/interop-misc.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reason\nCODE:\n```\nlet handleData = [@bs.open] (\n  fun\n  | Invalid_argument(_) => 0\n  | Not_found => 1\n  | Sys_error(_) => 2\n);\n\n/* handleData is 'a => option(int) */\n```\n\n----------------------------------------\n\nTITLE: Map GetId Function Signature\nDESCRIPTION: Retrieves the identity of the map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map.mdx#2025-04-18_snippet_18\n\nLANGUAGE: rescript\nCODE:\n```\nlet getId: t<'k, 'v, 'id> => id<'k, 'id>\n```\n\n----------------------------------------\n\nTITLE: Array Creation and Type Checking Functions\nDESCRIPTION: Functions for creating arrays from array-like objects and checking if a value is an array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet strArr = Js.String.castToArrayLike(\"abcd\")\nJs.Array.from(strArr) == [\"a\", \"b\", \"c\", \"d\"]\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet strArr = Js.String.castToArrayLike(\"abcd\")\nlet code = s => Js.String.charCodeAt(0, s)\nJs.Array.fromMap(strArr, code) == [97.0, 98.0, 99.0, 100.0]\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.Array.isArray([5, 2, 3, 1, 4]) == true\nJs.Array.isArray(list{5, 2, 3, 1, 4}) == true\nJs.Array.isArray(\"abcd\") == false\n```\n\n----------------------------------------\n\nTITLE: Reducing MutableQueue in ReScript\nDESCRIPTION: Function to reduce the queue elements, applying a function to an accumulator and each element, returning the final accumulator value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-queue.mdx#2025-04-18_snippet_19\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduce: (t('a), 'b, ('b, 'a) => 'b) => 'b;\n```\n\n----------------------------------------\n\nTITLE: Example of using everyBy in Belt.Range\nDESCRIPTION: Example demonstrating how to use everyBy to check if all elements in a range with a step satisfy a condition.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/range.mdx#2025-04-18_snippet_8\n\nLANGUAGE: reason\nCODE:\n```\nBelt.Range.everyBy(0, 4, ~step=1, (i) => i mod 2 === 0); /* false */\n\nBelt.Range.everyBy(0, 4, ~step=2, (i) => i mod 2 === 0); /* true */\n```\n\n----------------------------------------\n\nTITLE: Minimum/Maximum Operations in MutableSet - ReScript\nDESCRIPTION: Functions to get minimum and maximum values from the set with different return types (Option and Undefined).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\nlet minimum: t<'value, 'id> => option<'value>\nlet minUndefined: t<'value, 'id> => Js.undefined<'value>\nlet maximum: t<'value, 'id> => option<'value>\nlet maxUndefined: t<'value, 'id> => Js.undefined<'value>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nmodule IntCmp = Belt.Id.MakeComparable({\n  type t = int\n  let cmp = Pervasives.compare\n})\n\nlet s0 = Belt.MutableSet.make(~id=module(IntCmp))\nlet s1 = Belt.MutableSet.fromArray([3, 2, 1, 5], ~id=module(IntCmp))\n\ns0->Belt.MutableSet.minimum /* None */\ns1->Belt.MutableSet.minimum /* Some(1) */\ns0->Belt.MutableSet.maximum /* None */\ns1->Belt.MutableSet.maximum /* Some(5) */\n```\n\n----------------------------------------\n\nTITLE: Integer to Precision String Conversion in ReScript\nDESCRIPTION: Formats an integer to a string using full precision formatting rules. Different from toFixed as it shows full precision.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/int.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\nlet toPrecision: int => string;\n```\n\nLANGUAGE: reason\nCODE:\n```\n/* prints \"123456789\" */\nJs.log(Js.Int.toPrecision(123456789));\n```\n\n----------------------------------------\n\nTITLE: Iter Function Implementation in ReScript\nDESCRIPTION: Function signature and example for iterating over nullable values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/nullable.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nlet iter: (t<'a>, (. 'a) => unit) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet maybeSay = (maybeMessage: Js.null_undefined<string>) =>\n  Js.Nullable.iter(maybeMessage, (. message) => Js.log(message))\n```\n\n----------------------------------------\n\nTITLE: Join Array Elements with Separator\nDESCRIPTION: Joins all elements of the typed array into a string with a specified separator.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_type-s.mdx#2025-04-18_snippet_22\n\nLANGUAGE: res\nCODE:\n```\nlet joinWith: (string, t) => string\n```\n\n----------------------------------------\n\nTITLE: CSS Module Example for ReScript React\nDESCRIPTION: Example CSS module content showing a simple class definition that will be imported in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/styling.mdx#2025-04-18_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n/* styles.module.css */\n\n.root {\n  color: red;\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating over map with curried function in ReScript\nDESCRIPTION: Function signature for iterating over a mutable map using a curried function. Applies the function to all bindings in increasing order of keys.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_11\n\nLANGUAGE: ReScript\nCODE:\n```\nlet forEach: (t<'a>, (key, 'a) => unit) => unit\n```\n\n----------------------------------------\n\nTITLE: Creating UTC Date with Year, Month, Day, and Hour in ReScript\nDESCRIPTION: Function signature for utcWithYMDH, which returns milliseconds since epoch for a UTC date with given year, month, day, and hour.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_13\n\nLANGUAGE: rescript\nCODE:\n```\nlet utcWithYMDH: (~year: float, ~month: float, ~date: float, ~hours: float, unit) => float\n```\n\n----------------------------------------\n\nTITLE: Setting Minutes in ReScript\nDESCRIPTION: Sets a Date's minutes according to current time zone. Returns milliseconds since epoch for the updated Date. Modifies the original Date.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_47\n\nLANGUAGE: rescript\nCODE:\n```\nlet setMinutes: (t, float) => float\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet futureTime = Js.Date.setMinutes(date1, 34.0)\ndate1 == Js.Date.fromString(\"1973-11-29T21:34:54.494Z00:00\")\nfutureTime == Js.Date.getTime(date1)\n```\n\n----------------------------------------\n\nTITLE: Creating Abstract Record Objects\nDESCRIPTION: Creating abstract record objects using the generated creation function with labeled arguments. This generates a clean JS object without runtime overhead.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/generate-converters-accessors.mdx#2025-04-18_snippet_8\n\nLANGUAGE: ReScript\nCODE:\n```\nlet joe = person(~name=\"Joe\", ~age=20, ~job=\"teacher\")\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar joe = {\n  name: \"Joe\",\n  age: 20,\n  job: \"teacher\"\n};\n```\n\n----------------------------------------\n\nTITLE: Float64Array Type Definitions\nDESCRIPTION: Core type definitions for Float64Array including element type, typed array type, and the main type alias.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_float-64-array.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype elt = float\ntype typed_array<'a>\ntype t = typed_array<elt>\n```\n\n----------------------------------------\n\nTITLE: Checking if a HashMap with integer keys is empty in ReScript\nDESCRIPTION: Returns a boolean indicating whether the hash map contains any key-value pairs.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-map-int.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reason\nCODE:\n```\nlet isEmpty: t('a) => bool;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet hMap = Belt.HashMap.Int.fromArray([|(1, \"1\")|])  \nBelt.HashMap.Int.isEmpty(hMap) == false;\n```\n\n----------------------------------------\n\nTITLE: Accessing Array Elements with unsafe_get\nDESCRIPTION: Function to access elements from a Uint8Array at a specified index without bounds checking.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet unsafe_get: (t, int) => elt\n```\n\n----------------------------------------\n\nTITLE: Getting Full Year in ReScript\nDESCRIPTION: Function signature for getFullYear, which returns the full year for a given date.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_21\n\nLANGUAGE: rescript\nCODE:\n```\nlet getFullYear: t => float\n```\n\n----------------------------------------\n\nTITLE: Checking if any element satisfies a predicate in ReScript\nDESCRIPTION: Returns a boolean indicating whether at least one element of the set satisfies the predicate.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set-string.mdx#2025-04-18_snippet_24\n\nLANGUAGE: rescript\nCODE:\n```\nlet some: (t, value => bool) => bool\n```\n\n----------------------------------------\n\nTITLE: Dictionary Type Definition\nDESCRIPTION: Type definition for the dictionary type that can hold values of a single type\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/dict.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reason\nCODE:\n```\ntype t('a);\n```\n\n----------------------------------------\n\nTITLE: Accessing sessionStorage in ReScript\nDESCRIPTION: External binding for accessing the browser's sessionStorage object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/dom/storage2.mdx#2025-04-18_snippet_8\n\nLANGUAGE: reasonml\nCODE:\n```\n[@bs.val] external sessionStorage: t = \"sessionStorage\"\n```\n\n----------------------------------------\n\nTITLE: Removing and Returning First Element of MutableQueue in ReScript\nDESCRIPTION: The 'pop' function removes and returns the first element in the queue, wrapped in an Option type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-queue.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\nlet pop: t<'a> => option<'a>\n```\n\n----------------------------------------\n\nTITLE: Iterating MutableQueue with Uncurried Function in ReScript\nDESCRIPTION: Function to iterate over the queue elements using an uncurried function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-queue.mdx#2025-04-18_snippet_16\n\nLANGUAGE: rescript\nCODE:\n```\nlet forEachU: (t('a), [@bs] ('a => unit)) => unit;\n```\n\n----------------------------------------\n\nTITLE: Defining DOM NodeFilter Type in ReScript\nDESCRIPTION: Type definition for NodeFilter with an acceptNode function that takes a DOM element and returns an integer. Used for DOM traversal filtering.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/dom.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\ntype nodeFilter = {\n  acceptNode: (Dom.element) => int\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Yarn Workspaces for ReScript\nDESCRIPTION: Root package.json configuration for setting up Yarn workspaces with multiple ReScript packages.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/build-pinned-dependencies.mdx#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"myproject\",\n  \"private\": true,\n  \"workspaces\": {\n    \"packages\": [\"app\", \"common\", \"myplugin\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Uint8ClampedArray types in ReScript\nDESCRIPTION: Defines the core types for Uint8ClampedArray, including the element type (int), the generic typed_array type, and the concrete type t.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\ntype elt = int\ntype typed_array<'a> = Js_typed_array2.Uint8ClampedArray.typed_array<'a>\ntype t = typed_array<elt>\n```\n\n----------------------------------------\n\nTITLE: Fill Range in Float32Array with Value\nDESCRIPTION: Fills elements within a specified range of the Float32Array with the specified value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-32-array.mdx#2025-04-18_snippet_14\n\nLANGUAGE: rescript\nCODE:\n```\nlet fillRangeInPlace: (elt, ~start: int, ~end_: int, t) => t;\n```\n\n----------------------------------------\n\nTITLE: Creating a DataView with offset in ReScript\nDESCRIPTION: Function signature for creating a DataView from an ArrayBuffer with a specified byte offset.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_data-view.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromBufferOffset: (Js_typed_array.array_buffer, int) => t\n```\n\n----------------------------------------\n\nTITLE: Reading 8-bit Unsigned Integer\nDESCRIPTION: Gets an unsigned 8-bit integer at the specified byte offset from the start of the DataView.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_data-view.mdx#2025-04-18_snippet_9\n\nLANGUAGE: reasonml\nCODE:\n```\nlet getUint8: (t, int) => int;\n```\n\n----------------------------------------\n\nTITLE: Converting Float to Precision-Based Notation with Custom Precision\nDESCRIPTION: Function that formats a float with a specified total number of significant digits.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/float.mdx#2025-04-18_snippet_21\n\nLANGUAGE: re\nCODE:\n```\nlet toPrecisionWithPrecision: (float, ~digits: int) => string;\n```\n\n----------------------------------------\n\nTITLE: Extracting Value from Option in ReScript\nDESCRIPTION: Function to extract the value from Some, throwing an exception for None.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/option.mdx#2025-04-18_snippet_5\n\nLANGUAGE: reason\nCODE:\n```\nlet getExn: option('a) => 'a;\n```\n\n----------------------------------------\n\nTITLE: Example of Removing Elements from String Set in ReScript\nDESCRIPTION: Demonstrates how to remove string elements from a set and shows that removing a non-existent element has no effect.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-string.mdx#2025-04-18_snippet_16\n\nLANGUAGE: reasonml\nCODE:\n```\nlet s0 = Belt.Set.String.fromArray([|\"orange\", \"banana\", \"apple\"|]);\nlet s1 = s0->Belt.Set.String.remove(\"apple\");\nlet s2 = s1->Belt.Set.String.remove(\"banana\");\nlet s3 = s2->Belt.Set.String.remove(\"banana\");\n\ns1->Belt.Set.String.toArray; /* [|\"orange\", \"banana\"|] */\ns2->Belt.Set.String.toArray; /* [|\"orange\"|] */\ns2 == s3; /* true */\n```\n\n----------------------------------------\n\nTITLE: Defining the value type for Int set in ReScript\nDESCRIPTION: Defines the element type for the Belt.Set.Int module as integer values. This specialization allows for more efficient operations compared to generic sets.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-int.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\ntype value = int;\n```\n\n----------------------------------------\n\nTITLE: Clearing a HashSetString\nDESCRIPTION: Removes all elements from the given HashSetString.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-set-string.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet clear: t => unit;\n```\n\n----------------------------------------\n\nTITLE: Defining Int16Array Type Structure in ReScript\nDESCRIPTION: Defines the main type structure for Int16Array, including element type (int), typed_array generic type, and the main t type alias.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-16-array.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\ntype elt = int\ntype typed_array<'a> = Js_typed_array2.Int16Array.typed_array<'a>\ntype t = typed_array<elt>\n```\n\n----------------------------------------\n\nTITLE: Reducing UInt32Array\nDESCRIPTION: Defines a function that applies a function against an accumulator and each element in the array to reduce it to a single value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_44\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduce: ((. 'b, elt) => 'b, 'b, t) => 'b\n```\n\n----------------------------------------\n\nTITLE: Getting bucket histogram of HashSetString\nDESCRIPTION: Returns an array representing the bucket distribution of the HashSetString, useful for analyzing performance characteristics.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-set-string.mdx#2025-04-18_snippet_18\n\nLANGUAGE: rescript\nCODE:\n```\nlet getBucketHistogram: t => array(int);\n```\n\n----------------------------------------\n\nTITLE: Defining comparable type in ReScript\nDESCRIPTION: Defines a type alias for a module that implements the Comparable interface. It uses generic parameters for the key type and identifier.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/id.mdx#2025-04-18_snippet_8\n\nLANGUAGE: ReScript\nCODE:\n```\ntype comparable<'key, 'id> =\n  module(Belt.Id.Comparable with type identity = 'id and type t = 'key)\n```\n\n----------------------------------------\n\nTITLE: Array Element Access and Mutation (unsafe_get, unsafe_set)\nDESCRIPTION: Functions for accessing and setting elements in a Uint8ClampedArray without boundary checks.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\nlet unsafe_get: (t, int) => elt\n```\n\nLANGUAGE: res\nCODE:\n```\nlet unsafe_set: (t, int, elt) => unit\n```\n\n----------------------------------------\n\nTITLE: Merging Maps (Uncurried) in ReScript MapInt Module\nDESCRIPTION: Function signature for merging two maps using an uncurried function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-int.mdx#2025-04-18_snippet_43\n\nLANGUAGE: rescript\nCODE:\n```\nlet mergeU: (t<'v>, t<'v2>, (. key, option<'v>, option<'v2>) => option<'c>) => t<'c>\n```\n\n----------------------------------------\n\nTITLE: Converting Date to Locale String in ReScript\nDESCRIPTION: Converts a Date object to a string with both date and time formatted according to the current locale. Result varies based on locale settings.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_73\n\nLANGUAGE: rescript\nCODE:\n```\nlet toLocaleString: t => string\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.Date.toLocaleString(exampleDate) == \"11/29/1973, 10:30:54 PM\" // for en_US.utf8\nJs.Date.toLocaleString(exampleDate) == \"29.11.1973, 22:30:54\" // for de_DE.utf8\n```\n\n----------------------------------------\n\nTITLE: ReScript Without Inlining\nDESCRIPTION: ReScript code example without using @inline, showing why direct value assignment doesn't achieve the desired inlining effect.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/inlining-constants.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\n@val external process: 'a = \"process\"\n\nlet mode = \"development\"\n\nif (process[\"env\"][\"mode\"] === mode) {\n  Js.log(\"Dev-only code here!\")\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar mode = \"development\";\n\nif (process.env.mode === mode) {\n  console.log(\"Dev-only code here!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Setting UTC Hours in ReScript\nDESCRIPTION: Sets a Date's hours according to UTC time. Returns milliseconds since epoch. Function modifies the original Date object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_59\n\nLANGUAGE: rescript\nCODE:\n```\nlet setUTCHours: (t, float) => float\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet nextHour = Js.Date.setUTCHours(date1, 22.0)\ndate1 == Js.Date.fromString(\"1973-11-29T22:30:54.321Z00:00\")\nnextHour == Js.Date.getTime(date1)\n```\n\n----------------------------------------\n\nTITLE: Iterating over a string set in ReScript\nDESCRIPTION: Applies a function to each element of the set in increasing order.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set-string.mdx#2025-04-18_snippet_18\n\nLANGUAGE: rescript\nCODE:\n```\nlet forEach: (t, value => unit) => unit\n```\n\n----------------------------------------\n\nTITLE: To_opt Function Signature in ReScript\nDESCRIPTION: Alternative function signature for converting Js.null_undefined to option types.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/null-undefined.mdx#2025-04-18_snippet_11\n\nLANGUAGE: rescript\nCODE:\n```\nlet to_opt: t<'a> => option<'a>\n```\n\n----------------------------------------\n\nTITLE: Uncurried Partition of Set in ReScript\nDESCRIPTION: Partitions set with an uncurried predicate function. Used internally by the partition function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-string.mdx#2025-04-18_snippet_45\n\nLANGUAGE: reasonml\nCODE:\n```\nlet partitionU: (t, [@bs] (value => bool)) => (t, t);\n```\n\n----------------------------------------\n\nTITLE: Converting String to Integer Option in ReScript\nDESCRIPTION: Converts a given string to an option<int> using the fromString function from Belt.Int module. Returns Some(int) when the input is a number, None otherwise.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/int.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromString: string => option<int>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.log(Belt.Int.fromString(\"1\") === Some(1)) /* true */\n```\n\n----------------------------------------\n\nTITLE: Testing for Undefined Values\nDESCRIPTION: Function to check if a given value is undefined, returning a boolean result.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/undefined.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nlet test: t<'a> => bool\n```\n\n----------------------------------------\n\nTITLE: Finding the minimum element with undefined in ReScript with MutableSetInt\nDESCRIPTION: Returns the minimum value in the set or undefined if the set is empty. This is a JavaScript-friendly alternative to the option type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_36\n\nLANGUAGE: rescript\nCODE:\n```\nlet minUndefined: t => Js.undefined(value);\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet s0 = Belt.MutableSet.Int.make();\nlet s1 = Belt.MutableSet.Int.fromArray([|3,2,1,5|]);\n\ns0->Belt.MutableSet.Int.minUndefined; /* undefined */\ns1->Belt.MutableSet.Int.minUndefined; /* 1 */\n```\n\n----------------------------------------\n\nTITLE: Checking if String Contains Substring from Position in ReScript\nDESCRIPTION: The includesFrom function determines whether a string contains a substring starting from a specified position, returning a boolean result.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string.mdx#2025-04-18_snippet_16\n\nLANGUAGE: reason\nCODE:\n```\nlet includesFrom: (t, int, t) => bool;\n```\n\nLANGUAGE: reason\nCODE:\n```\nJs.String.includesFrom(\"gram\", 1, \"programmer\") == true;\nJs.String.includesFrom(\"gram\", 4, \"programmer\") == false;\nJs.String.includesFrom({js|한|js}, 1, {js|대한민국|js}) == true;\n```\n\n----------------------------------------\n\nTITLE: Splitting MapDict by a key\nDESCRIPTION: Function signature for splitting a map into parts less than, equal to, and greater than a given key.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_51\n\nLANGUAGE: reason\nCODE:\n```\nlet split:\n  (t('a, 'b, 'id), 'a, ~cmp: cmp('a, 'id)) => ((t('a, 'b, 'id), t('a, 'b, 'id)), option('b));\n```\n\n----------------------------------------\n\nTITLE: In-Place Stable Sort Function Signature\nDESCRIPTION: Function signature for performing an in-place stable sort on an array of strings, modifying the original array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/sort-array-string.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\nlet stableSortInPlace: array<element> => unit\n```\n\n----------------------------------------\n\nTITLE: Dictionary Values Operation\nDESCRIPTION: Function signature for getting all dictionary values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/dict.mdx#2025-04-18_snippet_15\n\nLANGUAGE: rescript\nCODE:\n```\nlet values: t<'a> => array<'a>\n```\n\n----------------------------------------\n\nTITLE: Array Modification Methods\nDESCRIPTION: Methods for modifying array contents including copying, filling, and sorting operations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet copyWithin: (~to_: int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet copyWithinFrom: (~to_: int, ~from: int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet copyWithinFromRange: (~to_: int, ~start: int, ~end_: int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fillInPlace: (elt, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fillFromInPlace: (elt, ~from: int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fillRangeInPlace: (elt, ~start: int, ~end_: int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet reverseInPlace: t => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet sortInPlace: t => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet sortInPlaceWith: ((. elt, elt) => int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Example of Getting Minimum Value as Undefined from String Set in ReScript\nDESCRIPTION: Demonstrates how to get the minimum string from a set as undefined when empty, for JavaScript interoperability.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-string.mdx#2025-04-18_snippet_57\n\nLANGUAGE: reasonml\nCODE:\n```\nlet s0 = Belt.Set.String.empty;\nlet s1 = Belt.Set.String.fromArray([|\"apple\", \"orange\"|]);\n\ns0->Belt.Set.String.minUndefined; /* undefined */\ns1->Belt.Set.String.minUndefined; /* \"apple\" */\n```\n\n----------------------------------------\n\nTITLE: Finding the maximum key-value pair in MapDict\nDESCRIPTION: Function signature for finding the key-value pair with the largest key in a map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_32\n\nLANGUAGE: reason\nCODE:\n```\nlet maximum: t('k, 'a, 'b) => option(('k, 'a));\n```\n\n----------------------------------------\n\nTITLE: Creating Empty Set in ReScript MutableSetString\nDESCRIPTION: Creates an empty string set. This is the starting point for building a new set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\nlet make: unit => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet set = Belt.MutableSet.String.make();\n```\n\n----------------------------------------\n\nTITLE: Converting Date to Date String in ReScript\nDESCRIPTION: Converts a Date object to a string representation of the date portion in English. Returns a string with day of week, year, month, and day of month.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_67\n\nLANGUAGE: rescript\nCODE:\n```\nlet toDateString: t => string\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.Date.toDateString(exampleDate) == \"Thu Nov 29 1973\"\n```\n\n----------------------------------------\n\nTITLE: Converting Belt.MutableSet.Int to other data structures in ReScript\nDESCRIPTION: Converts the set to a list or array using toList and toArray functions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_14\n\nLANGUAGE: res\nCODE:\n```\nlet toList: t => list<value>\nlet toArray: t => array<value>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet s0 = Belt.MutableSet.Int.fromArray([3, 2, 1, 5])\n\ns0->Belt.MutableSet.Int.toList /* [1,2,3,5] */\ns0->Belt.MutableSet.Int.toArray /* [1,2,3,5] */\n```\n\n----------------------------------------\n\nTITLE: Checking all elements with uncurried predicate in ReScript\nDESCRIPTION: Function signature for checking if all elements in a mutable map satisfy an uncurried predicate.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_14\n\nLANGUAGE: ReScript\nCODE:\n```\nlet everyU: (t<'a>, (. key, 'a) => bool) => bool\n```\n\n----------------------------------------\n\nTITLE: Checking if MutableQueue is Empty in ReScript\nDESCRIPTION: Function to check if the given queue is empty, returning a boolean value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-queue.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet isEmpty: t('a) => bool;\n```\n\n----------------------------------------\n\nTITLE: Array Transformation for Int32Array\nDESCRIPTION: Functions to transform arrays by mapping or filtering elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-32-array.mdx#2025-04-18_snippet_14\n\nLANGUAGE: rescript\nCODE:\n```\nlet map: ((. elt) => 'b, t) => typed_array<'b>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet mapi: ((. elt, int) => 'b, t) => typed_array<'b>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet filter: ((. elt) => bool, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet filteri: ((. elt, int) => bool, t) => t\n```\n\n----------------------------------------\n\nTITLE: Defining Uint8Array Types\nDESCRIPTION: Core type definitions for Uint8Array including element type, typed array type and main array type\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\ntype elt = int;\ntype typed_array('a) = Js_typed_array2.Uint8Array.typed_array('a);\ntype t = typed_array(elt);\n```\n\n----------------------------------------\n\nTITLE: Creating a Subarray from Position\nDESCRIPTION: Function signature to create a new array from a section starting at a specified position.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_29\n\nLANGUAGE: res\nCODE:\n```\nlet subarrayFrom: (int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Extracting Undefined Values with Exception in ReScript\nDESCRIPTION: Function signature for extracting the value from an undefined container. This may throw an exception if the container is empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/undefined.mdx#2025-04-18_snippet_6\n\nLANGUAGE: res\nCODE:\n```\nlet getExn: t<'a> => 'a\n```\n\n----------------------------------------\n\nTITLE: Reducing Array Elements from Right\nDESCRIPTION: Function signature to reduce the array from right to left to a single value by applying a function against an accumulator and each element.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_46\n\nLANGUAGE: res\nCODE:\n```\nlet reduceRight: ((. 'b, elt) => 'b, 'b, t) => 'b\n```\n\n----------------------------------------\n\nTITLE: Writing 32-bit Signed Integer (Big Endian)\nDESCRIPTION: Stores a signed 32-bit integer at the specified byte offset from the start of the DataView using big-endian format.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_data-view.mdx#2025-04-18_snippet_28\n\nLANGUAGE: reasonml\nCODE:\n```\nlet setInt32: (t, int, int) => unit;\n```\n\n----------------------------------------\n\nTITLE: Return Function Signature for Null Type\nDESCRIPTION: Function signature for constructing a nullable value from a non-null value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/null.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet return: 'a => t<'a>\n```\n\n----------------------------------------\n\nTITLE: RegExp Constructor with Flags\nDESCRIPTION: Function signature for creating a RegExp with specific flags.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/re.mdx#2025-04-18_snippet_7\n\nLANGUAGE: res\nCODE:\n```\nlet fromStringWithFlags: (string, ~flags: string) => t\n```\n\n----------------------------------------\n\nTITLE: Accessing Underlying Buffer\nDESCRIPTION: Returns the ArrayBuffer associated with the Float64Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-64-array.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reason\nCODE:\n```\nlet buffer: t => Js_typed_array2.array_buffer;\n```\n\n----------------------------------------\n\nTITLE: Getting a value by key from MapDict (exceptional version)\nDESCRIPTION: Function signature for retrieving a value by key from a map, throwing an exception if not found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_37\n\nLANGUAGE: reason\nCODE:\n```\nlet getExn: (t('k, 'a, 'id), 'k, ~cmp: cmp('k, 'id)) => 'a;\n```\n\n----------------------------------------\n\nTITLE: Array Search and Iteration Methods\nDESCRIPTION: Methods for searching, filtering and iterating over array elements\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array-2_int-32-array.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet includes: (elt, t) => bool\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet indexOf: (elt, t) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet forEach: ((. elt) => unit, t) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet map: ((. elt) => 'b, t) => typed_array<'b>\n```\n\n----------------------------------------\n\nTITLE: Fill Array Range In-Place\nDESCRIPTION: Fills a specified range of the typed array with a value in-place.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_type-s.mdx#2025-04-18_snippet_14\n\nLANGUAGE: res\nCODE:\n```\nlet fillRangeInPlace: (elt, ~start: int, ~end_: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Range Error Raiser\nDESCRIPTION: Function signature for raising a JavaScript RangeError.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/exn.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rescript\nCODE:\n```\nlet raiseRangeError: string => 'a\n```\n\n----------------------------------------\n\nTITLE: Splicing Arrays In-Place in ReScript\nDESCRIPTION: Shows how to use spliceInPlace to modify arrays by removing elements and adding new ones at a specified position. The function returns an array of removed items and modifies the original array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array.mdx#2025-04-18_snippet_5\n\nLANGUAGE: ReScript\nCODE:\n```\nlet arr = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\nJs.Array.spliceInPlace(~pos=2, ~remove=2, ~add=[\"x\", \"y\", \"z\"], arr) == [\"c\", \"d\"]\narr == [\"a\", \"b\", \"x\", \"y\", \"z\", \"e\", \"f\"]\n\nlet arr2 = [\"a\", \"b\", \"c\", \"d\"]\nJs.Array.spliceInPlace(~pos=3, ~remove=0, ~add=[\"x\", \"y\"], arr2) == []\narr2 == [\"a\", \"b\", \"c\", \"x\", \"y\", \"d\"]\n\nlet arr3 = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\nJs.Array.spliceInPlace(~pos=9, ~remove=2, ~add=[\"x\", \"y\", \"z\"], arr3) == []\narr3 == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"x\", \"y\", \"z\"]\n```\n\n----------------------------------------\n\nTITLE: Finding Last Element Index from Position\nDESCRIPTION: Returns the index of the last occurrence of a specified element starting from a given index, or -1 if not found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_24\n\nLANGUAGE: rescript\nCODE:\n```\nlet lastIndexOfFrom: (elt, ~from: int, t) => int\n```\n\n----------------------------------------\n\nTITLE: Defining the set type in ReScript\nDESCRIPTION: Defines the abstract type for sets in the Belt.Set.Int module. The actual implementation details are hidden.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-int.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reason\nCODE:\n```\ntype t;\n```\n\n----------------------------------------\n\nTITLE: Partitioning Map Entries in ReScript (Uncurried)\nDESCRIPTION: Partitions a map into two maps based on a predicate function. This is the uncurried version.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map.mdx#2025-04-18_snippet_6\n\nLANGUAGE: reasonml\nCODE:\n```\nlet partitionU: (t('k, 'v, 'id), [@bs] (('k, 'v) => bool)) => (t('k, 'v, 'id), t('k, 'v, 'id));\n```\n\n----------------------------------------\n\nTITLE: Finding First Matching Element\nDESCRIPTION: Function signature to find the first element that satisfies a specified condition.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_36\n\nLANGUAGE: res\nCODE:\n```\nlet find: ((. elt) => bool, t) => Js.undefined<elt>\n```\n\n----------------------------------------\n\nTITLE: Creating Strings from Multiple Character Codes in ReScript\nDESCRIPTION: The 'fromCharCodeMany' function creates a string from an array of character codes. It takes an array of integers representing Unicode code points and returns the corresponding string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/string-2.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromCharCodeMany: array<int> => t\n```\n\n----------------------------------------\n\nTITLE: Strictly Sorted Length Signature\nDESCRIPTION: Function signature for determining the strictly sorted length of a string array. Returns positive number for increasing order and negative for decreasing order.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/sort-array-string.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\nlet strictlySortedLength: array<element> => int\n```\n\n----------------------------------------\n\nTITLE: Creating Int8Array from ArrayBuffer with Offset\nDESCRIPTION: Function signature to create a new Int8Array from an ArrayBuffer starting at a specified byte offset.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_53\n\nLANGUAGE: res\nCODE:\n```\nlet fromBufferOffset: (Js_typed_array.array_buffer, int) => t\n```\n\n----------------------------------------\n\nTITLE: List Left Fold Function Signature in ReScript\nDESCRIPTION: Defines the signature for the 'foldLeft' function, which folds a list from left to right using an accumulator.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/list.mdx#2025-04-18_snippet_13\n\nLANGUAGE: rescript\nCODE:\n```\nlet foldLeft: ((. 'a, 'b) => 'a, 'a, list<'b>) => 'a\n```\n\n----------------------------------------\n\nTITLE: Retrieving Maximum Value as Undefined from Belt.Set.String in ReScript\nDESCRIPTION: The maxUndefined function returns the maximum value of the collection. It returns undefined if the collection is empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-string.mdx#2025-04-18_snippet_59\n\nLANGUAGE: rescript\nCODE:\n```\nlet maxUndefined: t => Js.undefined(value);\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet s0 = Belt.Set.String.empty;\nlet s1 = Belt.Set.String.fromArray([|\"apple\", \"orange\"|]);\n\ns0->Belt.Set.String.maxUndefined; /* undefined */\ns1->Belt.Set.String.maxUndefined; /* orange */\n```\n\n----------------------------------------\n\nTITLE: Array Iteration Methods\nDESCRIPTION: Higher-order functions for array iteration and transformation\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reason\nCODE:\n```\nlet forEach: ((. elt) => unit, t) => unit;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet forEachi: ((. elt, int) => unit, t) => unit;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet map: ((. elt) => 'b, t) => typed_array('b);\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet mapi: ((. elt, int) => 'b, t) => typed_array('b);\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet reduce: ((. 'b, elt) => 'b, 'b, t) => 'b;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet reducei: ((. 'b, elt, int) => 'b, 'b, t) => 'b;\n```\n\n----------------------------------------\n\nTITLE: Map Transformation Operations\nDESCRIPTION: Functions for transforming map values\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-map-int.mdx#2025-04-18_snippet_9\n\nLANGUAGE: reasonml\nCODE:\n```\nlet mapU: (t('a), [@bs] ('a => 'b)) => t('b);\n\nlet map: (t('a), 'a => 'b) => t('b);\n\nlet mapWithKeyU: (t('a), [@bs] ((key, 'a) => 'b)) => t('b);\n\nlet mapWithKey: (t('a), (key, 'a) => 'b) => t('b);\n```\n\n----------------------------------------\n\nTITLE: Defining HashableU Function in ReScript\nDESCRIPTION: Function for creating uncurried hashable modules with custom hash and equality functions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/id.mdx#2025-04-18_snippet_12\n\nLANGUAGE: rescript\nCODE:\n```\nlet hashableU: (~hash: (. 'a) => int, ~eq: (. 'a, 'a) => bool) =>\n  module(Belt.Id.Hashable with type t = 'a)\n```\n\n----------------------------------------\n\nTITLE: Configuring Yarn Workspaces for ReScript Packages\nDESCRIPTION: Example of a package.json file that uses yarn workspaces to manage multiple ReScript packages in a monorepo.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/build-pinned-dependencies.mdx#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"myproject\",\n  \"private\": true,\n  \"workspaces\": {\n    \"packages\": [\n      \"app\",\n      \"common\",\n      \"myplugin\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting UTC Minutes from Date in ReScript\nDESCRIPTION: ReScript binding for JavaScript's Date.getUTCMinutes method. Returns the number of minutes for a date, evaluated in UTC.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_34\n\nLANGUAGE: res\nCODE:\n```\nlet getUTCMinutes: t => float\n```\n\nLANGUAGE: res\nCODE:\n```\nJs.Date.getUTCMinutes(exampleDate) == 30.0\n```\n\n----------------------------------------\n\nTITLE: Dynamic Pop Iteration with Uncurried Function in ReScript\nDESCRIPTION: Function signature for iterating and popping elements using an uncurried function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-stack.mdx#2025-04-18_snippet_13\n\nLANGUAGE: ReScript\nCODE:\n```\nlet dynamicPopIterU: (t<'a>, (. 'a) => unit) => unit\n```\n\n----------------------------------------\n\nTITLE: Extracting values from a HashMap with integer keys in ReScript\nDESCRIPTION: Converts the hash map to an array containing only the values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-map-int.mdx#2025-04-18_snippet_19\n\nLANGUAGE: reason\nCODE:\n```\nlet valuesToArray: t('a) => array('a);\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet hMap = Belt.HashMap.Int.make(~hintSize=10);\nBelt.HashMap.Int.set(hMap, 1, \"value1\");\nBelt.HashMap.Int.set(hMap, 2, \"value2\");\n\nBelt.HashMap.Int.valuesToArray(hMap) == [|\"value1\", \"value2\"|];\n```\n\n----------------------------------------\n\nTITLE: Example of fromString with Binary String\nDESCRIPTION: Shows parsing a binary string representation into a float.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/float.mdx#2025-04-18_snippet_36\n\nLANGUAGE: re\nCODE:\n```\n/* returns 3 */\nJs.Float.fromString(\"0b11\");\n```\n\n----------------------------------------\n\nTITLE: Mapping Values (Curried) in ReScript MapInt Module\nDESCRIPTION: Function signature for mapping values in the map using a curried function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-int.mdx#2025-04-18_snippet_52\n\nLANGUAGE: rescript\nCODE:\n```\nlet map: (t<'v>, 'v => 'v2) => t<'v2>\n```\n\n----------------------------------------\n\nTITLE: Unsafe Null Value Access in ReScript\nDESCRIPTION: Unsafely extracts the value from a nullable type. Can cause runtime errors if the value is null.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/null.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reason\nCODE:\n```\nlet getUnsafe: t('a) => 'a;\n```\n\n----------------------------------------\n\nTITLE: Normalizing Unicode Strings in ReScript\nDESCRIPTION: The normalize function returns the normalized Unicode string using Normalization Form Canonical (NFC) Composition. It ensures equivalent binary representation for characters that can be represented in multiple ways.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string.mdx#2025-04-18_snippet_23\n\nLANGUAGE: rescript\nCODE:\n```\nlet normalize: t => t;\n```\n\n----------------------------------------\n\nTITLE: Joining TypedArray Elements to String in ReScript\nDESCRIPTION: Function signature for creating a string from a Uint8ClampedArray by concatenating all elements with the default separator.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_21\n\nLANGUAGE: res\nCODE:\n```\nlet join: t => string\n```\n\n----------------------------------------\n\nTITLE: Test Function Signature in ReScript\nDESCRIPTION: Function signature for testing if a nullable value is null.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/null.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet test: t<'a> => bool\n```\n\n----------------------------------------\n\nTITLE: Using copyWithinFrom Method for TypedArray in ReScript\nDESCRIPTION: Function signature for copying a sequence of array elements within a Uint8ClampedArray, specifying target and source positions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_10\n\nLANGUAGE: res\nCODE:\n```\nlet copyWithinFrom: (~to_: int, ~from: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Executing RegExp Search (Deprecated)\nDESCRIPTION: Deprecated function for executing a search using a RegExp object. Users are advised to use Js.Re.exec_ instead.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/re.mdx#2025-04-18_snippet_18\n\nLANGUAGE: reason\nCODE:\n```\nlet exec: (string, t) => option(result);\n```\n\n----------------------------------------\n\nTITLE: Converting a set to a list in ReScript\nDESCRIPTION: Returns a list containing all elements of the set in ascending order.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-int.mdx#2025-04-18_snippet_30\n\nLANGUAGE: reason\nCODE:\n```\nlet toList: t => list(value);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Module Signature in ReScript\nDESCRIPTION: Demonstrates how to implement a module that satisfies a given module signature. The module can contain more fields than the signature declares.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/module.mdx#2025-04-18_snippet_7\n\nLANGUAGE: ReScript\nCODE:\n```\nmodule Company: EstablishmentType = {\n  type profession = CEO | Designer | Engineer | ...\n\n  let getProfession = (person) => ...\n  let person1 = ...\n  let person2 = ...\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction getProfession(person) {\n  ...\n}\n\nvar person1 = ...\n\nvar person2 = ...\n\nvar Company = {\n  getProfession: getProfession,\n  person1: person1,\n  person2: person2\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Strings from Character Codes in ReScript\nDESCRIPTION: The 'fromCharCode' function creates a string from a given character code. It takes an integer representing a Unicode code point and returns the corresponding string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/string-2.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromCharCode: int => t\n```\n\n----------------------------------------\n\nTITLE: Creating an empty string set in ReScript\nDESCRIPTION: Defines the empty set constant for Belt.Set.String.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set-string.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet empty: t\n```\n\n----------------------------------------\n\nTITLE: Writing integer values to DataView in ReScript\nDESCRIPTION: Functions to write 8-bit, 16-bit, and 32-bit integer values to a DataView, with optional little-endian versions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array-2_data-view.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet setInt8: (t, int, int) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet setUint8: (t, int, int) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet setInt16: (t, int, int) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet setInt16LittleEndian: (t, int, int) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet setUint16: (t, int, int) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet setUint16LittleEndian: (t, int, int) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet setInt32: (t, int, int) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet setInt32LittleEndian: (t, int, int) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet setUint32: (t, int, int) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet setUint32LittleEndian: (t, int, int) => unit\n```\n\n----------------------------------------\n\nTITLE: String Creation from Character Code\nDESCRIPTION: Function signature for creating a string from a character code (0-65535).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/string.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nlet fromCharCode: int => t\n```\n\n----------------------------------------\n\nTITLE: Defining MutableStack Type in ReScript\nDESCRIPTION: Defines the generic stack type 't' that can hold elements of any type 'a'.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-stack.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype t('a);\n```\n\n----------------------------------------\n\nTITLE: Filter Float32Array Elements with Index\nDESCRIPTION: Creates a new Float32Array with elements that pass the test function that includes the element index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-32-array.mdx#2025-04-18_snippet_35\n\nLANGUAGE: rescript\nCODE:\n```\nlet filteri: ((. elt, int) => bool, t) => t;\n```\n\n----------------------------------------\n\nTITLE: ReScript Promise.all3 Implementation\nDESCRIPTION: Function signature for combining three Promises into a tuple Promise\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/promise.mdx#2025-04-18_snippet_7\n\nLANGUAGE: res\nCODE:\n```\nlet all3: ((t<'a0>, t<'a1>, t<'a2>)) => t<('a0, 'a1, 'a2)>\n```\n\n----------------------------------------\n\nTITLE: Integer addition in ReScript's Belt.Int module\nDESCRIPTION: The + operator adds two integers. This is the same as the addition operator from Pervasives.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/int.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reason\nCODE:\n```\nlet (+): (int, int) => int;\n```\n\nLANGUAGE: reason\nCODE:\n```\nopen Belt.Int;\nJs.log(2 + 2 === 4); /* true */\n```\n\n----------------------------------------\n\nTITLE: Vector Initialization Operation\nDESCRIPTION: Initializes a vector with a function that maps indices to values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/vector.mdx#2025-04-18_snippet_17\n\nLANGUAGE: res\nCODE:\n```\nlet init: (int, (. int) => 'a) => t<'a>\n```\n\n----------------------------------------\n\nTITLE: Converting Set to Array in ReScript\nDESCRIPTION: Converts the set to an array of ordered elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-string.mdx#2025-04-18_snippet_52\n\nLANGUAGE: reasonml\nCODE:\n```\nlet toArray: t => array(value);\n```\n\n----------------------------------------\n\nTITLE: Example of Iterating Over Null_undefined String in ReScript\nDESCRIPTION: Demonstrates the use of 'iter' function to log a message if it's present in a nullable string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/null-undefined.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\nlet maybeSay = (maybeMessage: Js.null_undefined<string>) =>\n  Js.Null_undefined.iter(maybeMessage, (. message) => Js.log(message))\n```\n\n----------------------------------------\n\nTITLE: Searching and Querying Int16Array in ReScript\nDESCRIPTION: Functions for searching elements, checking inclusion, and finding indices in an Int16Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_int-16-array.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet includes: (elt, t) => bool\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet indexOf: (elt, t) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet indexOfFrom: (elt, ~from: int, t) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet lastIndexOf: (elt, t) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet lastIndexOfFrom: (elt, ~from: int, t) => int\n```\n\n----------------------------------------\n\nTITLE: Vector Unsafe Set Operation\nDESCRIPTION: Sets an element without bounds checking.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/vector.mdx#2025-04-18_snippet_20\n\nLANGUAGE: res\nCODE:\n```\nlet unsafe_set: (t<'a>, int, 'a) => unit\n```\n\n----------------------------------------\n\nTITLE: Getting value by key with undefined in ReScript\nDESCRIPTION: Function signature for getting a value by key from a mutable map, returning an undefined type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_33\n\nLANGUAGE: ReScript\nCODE:\n```\nlet getUndefined: (t<'a>, key) => Js.undefined<'a>\n```\n\n----------------------------------------\n\nTITLE: Iterating Over a HashSet with Uncurried Function in ReScript\nDESCRIPTION: This function signature shows how to iterate over a HashSet using an uncurried function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-set.mdx#2025-04-18_snippet_11\n\nLANGUAGE: reason\nCODE:\n```\nlet forEachU: (t('a, 'id), [@bs] ('a => unit)) => unit;\n```\n\n----------------------------------------\n\nTITLE: RegExp Global Flag Check\nDESCRIPTION: Function signature for checking if global flag is set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/re.mdx#2025-04-18_snippet_9\n\nLANGUAGE: res\nCODE:\n```\nlet global: t => bool\n```\n\n----------------------------------------\n\nTITLE: JSON Value Classification Function in ReScript\nDESCRIPTION: Function signature for classifying a JSON value into its concrete type representation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/json.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reason\nCODE:\n```\nlet classify: t => tagged_t;\n```\n\n----------------------------------------\n\nTITLE: Opening Belt Module in ReScript\nDESCRIPTION: Demonstrates how to open the Belt module at the top of a ReScript file to use its functions without fully qualified names.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nopen Belt\n```\n\n----------------------------------------\n\nTITLE: Find Last Element Index from Position\nDESCRIPTION: Returns the last index at which a given element can be found in the typed array, searching backward from the specified index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_type-s.mdx#2025-04-18_snippet_24\n\nLANGUAGE: res\nCODE:\n```\nlet lastIndexOfFrom: (elt, ~from: int, t) => int\n```\n\n----------------------------------------\n\nTITLE: Creating HashSetInt from array in ReScript\nDESCRIPTION: Creates a new HashSetInt containing all unique elements from the given array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-set-int.mdx#2025-04-18_snippet_16\n\nLANGUAGE: ReScript\nCODE:\n```\nlet fromArray: array(key) => t;\n```\n\n----------------------------------------\n\nTITLE: Iterating over HashSetInt in ReScript\nDESCRIPTION: Applies a function to each element of the HashSetInt.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-set-int.mdx#2025-04-18_snippet_10\n\nLANGUAGE: ReScript\nCODE:\n```\nlet forEach: (t, key => unit) => unit;\n```\n\n----------------------------------------\n\nTITLE: Adding an element to HashSetInt in ReScript\nDESCRIPTION: Adds a key to the HashSetInt.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-set-int.mdx#2025-04-18_snippet_5\n\nLANGUAGE: ReScript\nCODE:\n```\nlet add: (t, key) => unit;\n```\n\n----------------------------------------\n\nTITLE: Declaring fromFloat Function for Date in ReScript\nDESCRIPTION: Declares the fromFloat function, which creates a Date object from a float representing milliseconds since the epoch.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromFloat: float => t\n```\n\n----------------------------------------\n\nTITLE: Checking if Set is Empty in ReScript MutableSetString\nDESCRIPTION: Determines if a set has no elements. Returns true if the set is empty, false otherwise.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_6\n\nLANGUAGE: reason\nCODE:\n```\nlet isEmpty: t => bool;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet empty = Belt.MutableSet.String.fromArray([||]);\nlet notEmpty = Belt.MutableSet.String.fromArray([|\"apple\"|]);\n\nBelt.MutableSet.String.isEmpty(empty); /* true */\nBelt.MutableSet.String.isEmpty(notEmpty); /* false */\n```\n\n----------------------------------------\n\nTITLE: Writing 32-bit Float (Little Endian)\nDESCRIPTION: Stores a 32-bit floating point number at the specified byte offset from the start of the DataView using little-endian format.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_data-view.mdx#2025-04-18_snippet_33\n\nLANGUAGE: reasonml\nCODE:\n```\nlet setFloat32LittleEndian: (t, int, float) => unit;\n```\n\n----------------------------------------\n\nTITLE: Check if Some Element Passes Test Function\nDESCRIPTION: Tests whether at least one element in the Float32Array passes the provided function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-32-array.mdx#2025-04-18_snippet_48\n\nLANGUAGE: rescript\nCODE:\n```\nlet some: ((. elt) => bool, t) => bool;\n```\n\n----------------------------------------\n\nTITLE: String Concatenation Operations\nDESCRIPTION: Functions for concatenating strings together.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/string.mdx#2025-04-18_snippet_8\n\nLANGUAGE: res\nCODE:\n```\nlet concat: (t, t) => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet concatMany: (array<t>, t) => t\n```\n\n----------------------------------------\n\nTITLE: Comparing maps with curried function in ReScript\nDESCRIPTION: Compares two maps using a curried comparison function for values. First compares by size, then by key-value pairs if sizes are equal.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_7\n\nLANGUAGE: reasonml\nCODE:\n```\nlet cmp: (t('a), t('a), ('a, 'a) => int) => int;\n```\n\n----------------------------------------\n\nTITLE: String Includes Check\nDESCRIPTION: Function signature for checking if a string includes a substring.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/string-2.mdx#2025-04-18_snippet_15\n\nLANGUAGE: res\nCODE:\n```\nlet includes: (t, t) => bool\n```\n\n----------------------------------------\n\nTITLE: Removing Element from Set in ReScript MutableSetString\nDESCRIPTION: Removes an element from the set. If the element doesn't exist, the set remains unchanged.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_11\n\nLANGUAGE: reason\nCODE:\n```\nlet remove: (t, value) => unit;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet s0 = Belt.MutableSet.String.fromArray([|\"orange\", \"banana\", \"apple\"|]);\ns0->Belt.MutableSet.String.remove(\"apple\");\ns0->Belt.MutableSet.String.remove(\"banana\");\ns0->Belt.MutableSet.String.remove(\"banana\");\n\ns0->Belt.MutableSet.String.toArray; /* [|\"orange\"|] */\n```\n\n----------------------------------------\n\nTITLE: Character Access by Index\nDESCRIPTION: Function signature for accessing a character at a specific index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/string.mdx#2025-04-18_snippet_7\n\nLANGUAGE: res\nCODE:\n```\nlet get: (t, int) => t\n```\n\n----------------------------------------\n\nTITLE: Iterating and Transforming Float32Array in ReScript\nDESCRIPTION: Higher-order functions for iterating, filtering, mapping, and reducing Float32Array data.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\nlet every: ((. elt) => bool, t) => bool\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet everyi: ((. elt, int) => bool, t) => bool\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet filter: ((. elt) => bool, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet filteri: ((. elt, int) => bool, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet find: ((. elt) => bool, t) => Js.undefined<elt>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet findi: ((. elt, int) => bool, t) => Js.undefined<elt>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet findIndex: ((. elt) => bool, t) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet findIndexi: ((. elt, int) => bool, t) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet forEach: ((. elt) => unit, t) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet forEachi: ((. elt, int) => unit, t) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet map: ((. elt) => 'b, t) => typed_array<'b>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet mapi: ((. elt, int) => 'b, t) => typed_array<'b>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduce: ((. 'b, elt) => 'b, 'b, t) => 'b\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet reducei: ((. 'b, elt, int) => 'b, 'b, t) => 'b\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduceRight: ((. 'b, elt) => 'b, 'b, t) => 'b\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduceRighti: ((. 'b, elt, int) => 'b, 'b, t) => 'b\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet some: ((. elt) => bool, t) => bool\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet somei: ((. elt, int) => bool, t) => bool\n```\n\n----------------------------------------\n\nTITLE: Checking if any element satisfies a predicate in ReScript with MutableSetInt\nDESCRIPTION: Returns a boolean indicating whether at least one element in the set satisfies the given predicate function. The order of element testing is unspecified.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_27\n\nLANGUAGE: rescript\nCODE:\n```\nlet some: (t, value => bool) => bool;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet isOdd = x => x mod 2 != 0;\n\nlet s0 = Belt.MutableSet.Int.fromArray([|1,2,4,6,8|]);\ns0->Belt.MutableSet.Int.some(isOdd); /* true */\n```\n\n----------------------------------------\n\nTITLE: Creating Int16Array Instances in ReScript\nDESCRIPTION: Functions to create new Int16Array instances from various sources like arrays and array buffers.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_int-16-array.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\nlet make: array(elt) => t;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromBuffer: Js_typed_array.array_buffer => t;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromLength: int => t;\n```\n\n----------------------------------------\n\nTITLE: Basic Attribute Example in ReScript\nDESCRIPTION: Demonstrates how to use the @inline attribute to make a value be inlined at its usage sites in the generated JavaScript output.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/attribute.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\n@inline\nlet mode = \"dev\"\n\nlet mode2 = mode\n```\n\nLANGUAGE: js\nCODE:\n```\nvar mode2 = \"dev\";\n```\n\n----------------------------------------\n\nTITLE: Mapping Operations\nDESCRIPTION: Functions for transforming map values using mapping functions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-map-int.mdx#2025-04-18_snippet_8\n\nLANGUAGE: res\nCODE:\n```\nlet mapU: (t<'a>, (. 'a) => 'b) => t<'b>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet map: (t<'a>, 'a => 'b) => t<'b>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet mapWithKeyU: (t<'a>, (. key, 'a) => 'b) => t<'b>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet mapWithKey: (t<'a>, (key, 'a) => 'b) => t<'b>\n```\n\n----------------------------------------\n\nTITLE: Updating Value (Uncurried) in ReScript MapInt Module\nDESCRIPTION: Function signature for updating a value in the map using an uncurried function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-int.mdx#2025-04-18_snippet_41\n\nLANGUAGE: rescript\nCODE:\n```\nlet updateU: (t<'v>, key, (. option<'v>) => option<'v>) => t<'v>\n```\n\n----------------------------------------\n\nTITLE: Signature of forEach function in Belt.Range\nDESCRIPTION: Type signature for the forEach function that iterates over a range and applies a function to each element.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/range.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reason\nCODE:\n```\nlet forEach: (int, int, int => unit) => unit;\n```\n\n----------------------------------------\n\nTITLE: Extracting Substring from Index in ReScript\nDESCRIPTION: The substr function returns a substring from a specified index to the end of the string. It handles negative indices and out-of-bounds cases.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string-2.mdx#2025-04-18_snippet_21\n\nLANGUAGE: reason\nCODE:\n```\nlet substr: (t, ~from: int) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nJs.String2.substr(\"abcdefghij\", ~from=3) == \"defghij\";\nJs.String2.substr(\"abcdefghij\", ~from=(-3)) == \"hij\";\nJs.String2.substr(\"abcdefghij\", ~from=12) == \"\";\n```\n\n----------------------------------------\n\nTITLE: Equality Check with Curried Function in ReScript MapInt Module\nDESCRIPTION: Function signature for checking equality of two maps using a curried comparison function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-int.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\nlet eq: (t<'v>, t<'v>, ('v, 'v) => bool) => bool\n```\n\n----------------------------------------\n\nTITLE: Adding an element to a string set in ReScript\nDESCRIPTION: Adds an element to the set. If the element already exists, the set remains unchanged.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set-string.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nlet add: (t, value) => t\n```\n\n----------------------------------------\n\nTITLE: Retrieving Uint16Array Properties in ReScript\nDESCRIPTION: Functions to get the underlying buffer, byte length, byte offset, and length of a Uint16Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_uint-16-array.mdx#2025-04-18_snippet_2\n\nLANGUAGE: ReScript\nCODE:\n```\nlet buffer: t => Js_typed_array2.array_buffer;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet byteLength: t => int;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet byteOffset: t => int;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet length: t => int;\n```\n\n----------------------------------------\n\nTITLE: Using isFinite with Infinite Values - Example 2\nDESCRIPTION: Example showing that isFinite returns false when checking negative infinity.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/float.mdx#2025-04-18_snippet_4\n\nLANGUAGE: re\nCODE:\n```\n/* returns [false] */\nJs.Float.isFinite(neg_infinity);\n```\n\n----------------------------------------\n\nTITLE: Checking if Any Element Satisfies Condition in ReScript\nDESCRIPTION: Tests whether at least one element in the set satisfies the given predicate function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-string.mdx#2025-04-18_snippet_40\n\nLANGUAGE: reasonml\nCODE:\n```\nlet some: (t, value => bool) => bool;\n```\n\n----------------------------------------\n\nTITLE: Removing Elements from MutableSet Example in ReasonML\nDESCRIPTION: Example demonstrating how to remove elements from a MutableSet using the remove function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_19\n\nLANGUAGE: reasonml\nCODE:\n```\nmodule IntCmp =\n  Belt.Id.MakeComparable({\n    type t = int;\n    let cmp = Pervasives.compare;\n  });\n\nlet s0 = Belt.MutableSet.fromArray([|2,3,1,4,5|], ~id=(module IntCmp));\ns0->Belt.MutableSet.remove(1);\ns0->Belt.MutableSet.remove(3);\ns0->Belt.MutableSet.remove(3);\n\ns0->Belt.MutableSet.toArray; /* [|2,4,5|] */\n```\n\n----------------------------------------\n\nTITLE: Finding Element Index from Position with indexOfFrom in ReScript\nDESCRIPTION: Function signature for indexOfFrom that searches for an element in a Uint8Array starting from a specified index, returning its position or -1 if not found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_20\n\nLANGUAGE: rescript\nCODE:\n```\nlet indexOfFrom: (elt, ~from: int, t) => int\n```\n\n----------------------------------------\n\nTITLE: Copying MutableQueue in ReScript\nDESCRIPTION: Function to create and return a fresh copy of the given queue.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-queue.mdx#2025-04-18_snippet_12\n\nLANGUAGE: rescript\nCODE:\n```\nlet copy: t('a) => t('a);\n```\n\n----------------------------------------\n\nTITLE: Removing elements from Belt.MutableSet.Int in ReScript\nDESCRIPTION: Removes an element from the set using the remove function. If the element doesn't exist, the set remains unchanged.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_9\n\nLANGUAGE: res\nCODE:\n```\nlet remove: (t, value) => unit\n```\n\nLANGUAGE: res\nCODE:\n```\nlet s0 = Belt.MutableSet.Int.fromArray([2, 3, 1, 4, 5])\ns0->Belt.MutableSet.Int.remove(1)\ns0->Belt.MutableSet.Int.remove(3)\ns0->Belt.MutableSet.Int.remove(3)\n\ns0->Belt.MutableSet.Int.toArray /* [2,4,5] */\n```\n\n----------------------------------------\n\nTITLE: Get Value with Exception from ReScript Belt.Set\nDESCRIPTION: Returns the reference of a value from the collection, raises an exception when element does not exist.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set.mdx#2025-04-18_snippet_29\n\nLANGUAGE: res\nCODE:\n```\nlet getExn: (t<'value, 'id>, 'value) => 'value\n```\n\n----------------------------------------\n\nTITLE: Improved Polyvariant Syntax in ReScript 9.0\nDESCRIPTION: Demonstrates the cleaner polyvariant syntax for invalid identifier names in ReScript 9.0.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2021-02-09-release-9-0.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\ntype animation = [ #\"ease-in\" | #\"ease-out\" ]\n```\n\nLANGUAGE: rescript\nCODE:\n```\ntype animation = [ #\\\"ease-in\" | #\\\"ease-out\" ]\n```\n\n----------------------------------------\n\nTITLE: Setting Full Year in ReScript\nDESCRIPTION: ReScript binding for JavaScript's Date.setFullYear method. Sets the year and returns the time value. This function modifies the original Date object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_39\n\nLANGUAGE: res\nCODE:\n```\nlet setFullYear: (t, float) => float\n```\n\nLANGUAGE: res\nCODE:\n```\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet nextYear = Js.Date.setFullYear(date1, 1974.0)\ndate1 == Js.Date.fromString(\"1974-11-15T21:30:54.321Z00:00\")\nnextYear == Js.Date.getTime(date1)\n```\n\n----------------------------------------\n\nTITLE: ReScript Array Truncation Function Signature\nDESCRIPTION: Type signature for the truncateToLengthUnsafe function that takes an array of generic type and length parameter\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/array.mdx#2025-04-18_snippet_18\n\nLANGUAGE: rescript\nCODE:\n```\nlet truncateToLengthUnsafe: (array<'a>, int) => unit\n```\n\n----------------------------------------\n\nTITLE: Create Float32Array from Buffer with Offset\nDESCRIPTION: Creates a new Float32Array view on the provided ArrayBuffer, starting at the specified byte offset. Can throw an exception.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_53\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromBufferOffset: (Js_typed_array.array_buffer, int) => t\n```\n\n----------------------------------------\n\nTITLE: Creating DataView with Offset from ArrayBuffer\nDESCRIPTION: Creates a DataView starting at the specified byte offset in the ArrayBuffer.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_data-view.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reasonml\nCODE:\n```\nlet fromBufferOffset: (Js_typed_array2.array_buffer, int) => t;\n```\n\n----------------------------------------\n\nTITLE: Defining Uint8Array Types in ReScript\nDESCRIPTION: Defines the core types for working with Uint8Array in ReScript, including the element type (int), a generic typed_array type, and the specific Uint8Array type (t).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype elt = int\ntype typed_array<'a>\ntype t = typed_array<elt>\n```\n\n----------------------------------------\n\nTITLE: Raising JavaScript SyntaxError\nDESCRIPTION: Function that raises a JavaScript SyntaxError with the provided message.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/exn.mdx#2025-04-18_snippet_12\n\nLANGUAGE: rescript\nCODE:\n```\nlet raiseSyntaxError: string => 'a;\n```\n\n----------------------------------------\n\nTITLE: Getting Undefined Value from MutableSet in ReScript\nDESCRIPTION: Retrieves a value from the MutableSet, returning undefined when the element doesn't exist.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_40\n\nLANGUAGE: reasonml\nCODE:\n```\nlet getUndefined: (t, value) => Js.undefined(value);\n```\n\n----------------------------------------\n\nTITLE: Checking Internal Invariant in ReScript MutableSet\nDESCRIPTION: Validates the internal invariant of the set structure, raising an exception if the invariant is not maintained.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_16\n\nLANGUAGE: res\nCODE:\n```\nlet checkInvariantInternal: t => unit\n```\n\n----------------------------------------\n\nTITLE: Dictionary Type Definition\nDESCRIPTION: Type definition for the dictionary that can hold values of a single type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/dict.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\ntype t<'a>\n```\n\n----------------------------------------\n\nTITLE: Slicing an ArrayBuffer with start and end in ReScript\nDESCRIPTION: Function signature for creating a new ArrayBuffer by slicing an existing one from the specified start index to the end index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_array-buffer.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet slice: (~start: int, ~end_: int, t) => Js_typed_array.array_buffer\n```\n\n----------------------------------------\n\nTITLE: Mapping Uint8ClampedArray elements with index\nDESCRIPTION: Creates a new array with the results of calling a provided function on every element in the array with its index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_43\n\nLANGUAGE: res\nCODE:\n```\nlet mapi: ((. elt, int) => 'b, t) => typed_array<'b>\n```\n\n----------------------------------------\n\nTITLE: Defining key type in HashSetString module\nDESCRIPTION: Defines the key type used in the HashSetString module as string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/hash-set-string.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\ntype key = string\n```\n\n----------------------------------------\n\nTITLE: HashSet Curried ForEach - ReScript\nDESCRIPTION: Iterates over the HashSet elements using a curried callback function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-set-int.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rescript\nCODE:\n```\nlet forEach: (t, key => unit) => unit\n```\n\n----------------------------------------\n\nTITLE: Checking key existence in Belt.HashMap.String in ReScript\nDESCRIPTION: Determines if a key exists in the hash map using the has function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/hash-map-string.mdx#2025-04-18_snippet_7\n\nLANGUAGE: ReScript\nCODE:\n```\nlet has: (t<'b>, key) => bool\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet hMap = Belt.HashMap.String.make(~hintSize=10)\nBelt.HashMap.String.set(hMap, \"1\", \"value1\")\n\nBelt.HashMap.String.has(hMap, \"1\") == true\nBelt.HashMap.String.has(hMap, \"2\") == false\n```\n\n----------------------------------------\n\nTITLE: Computing Cosine in ReScript\nDESCRIPTION: Function that returns the cosine of the argument (specified in radians), equivalent to JavaScript's Math.cos.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/math.mdx#2025-04-18_snippet_29\n\nLANGUAGE: reasonml\nCODE:\n```\nlet cos: float => float;\n```\n\n----------------------------------------\n\nTITLE: Bind Function Implementation in ReScript\nDESCRIPTION: Function for mapping contained values in Js.null_undefined using a transformation function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/null-undefined.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet bind: (t<'a>, (. 'a) => 'b) => t<'b>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet maybeGreetWorld = (maybeGreeting: Js.null_undefined<string>) =>\n  Js.Null_undefined.bind(maybeGreeting, (. greeting) => greeting ++ \" world!\")\n```\n\n----------------------------------------\n\nTITLE: Dictionary Delete Operation\nDESCRIPTION: Internal function signature for removing dictionary entries.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/dict.mdx#2025-04-18_snippet_12\n\nLANGUAGE: rescript\nCODE:\n```\nlet unsafeDeleteKey: (. t<string>, string) => unit\n```\n\n----------------------------------------\n\nTITLE: Dictionary FromArray Operation\nDESCRIPTION: Function signature for creating dictionary from array of pairs.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/dict.mdx#2025-04-18_snippet_19\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromArray: array<(key, 'a)> => t<'a>\n```\n\n----------------------------------------\n\nTITLE: Defining Null Value Type in ReScript\nDESCRIPTION: Defines a ReScript type representing JavaScript null values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/types.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\ntype null_val\n```\n\n----------------------------------------\n\nTITLE: Example of fromString with Hexadecimal String\nDESCRIPTION: Shows parsing a hexadecimal string representation into a float.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/float.mdx#2025-04-18_snippet_35\n\nLANGUAGE: re\nCODE:\n```\n/* returns 17 */\nJs.Float.fromString(\"0x11\");\n```\n\n----------------------------------------\n\nTITLE: Unsafe Array Element Setting Without Bounds Checking in ReScript\nDESCRIPTION: The setUnsafe function modifies an array in place without bounds checking, which could lead to runtime errors if the index is out of range.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/array.mdx#2025-04-18_snippet_8\n\nLANGUAGE: ReScript\nCODE:\n```\nlet setUnsafe: (array<'a>, int, 'a) => unit\n```\n\n----------------------------------------\n\nTITLE: Finding the maximum value in a string set in ReScript\nDESCRIPTION: Returns the maximum value of the set, or None if the set is empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set-string.mdx#2025-04-18_snippet_34\n\nLANGUAGE: rescript\nCODE:\n```\nlet maximum: t => option<value>\n```\n\n----------------------------------------\n\nTITLE: Partitioning a string set in ReScript\nDESCRIPTION: Splits the set into two sets based on the predicate.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set-string.mdx#2025-04-18_snippet_28\n\nLANGUAGE: rescript\nCODE:\n```\nlet partition: (t, value => bool) => (t, t)\n```\n\n----------------------------------------\n\nTITLE: GetUnsafe Function Signature in ReScript\nDESCRIPTION: Function signature for unsafely getting the value from a nullable type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/null.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet getUnsafe: t<'a> => 'a\n```\n\n----------------------------------------\n\nTITLE: Splitting Set Based on Value in ReScript MutableSet\nDESCRIPTION: Splits the set into two sets based on a value, returning smaller and larger sets along with a boolean indicating if the value was present.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_15\n\nLANGUAGE: res\nCODE:\n```\nlet split: (t, value) => ((t, t), bool)\n```\n\nLANGUAGE: res\nCODE:\n```\nlet s0 = Belt.MutableSet.String.fromArray([\"apple\", \"banana\", \"orange\"])\n\nlet ((smaller, larger), present) = s0->Belt.MutableSet.String.split(\"banana\")\n\npresent /* true */\nsmaller->Belt.MutableSet.String.toArray /* [\"apple\"] */\nlarger->Belt.MutableSet.String.toArray /* [\"orange\"] */\n```\n\n----------------------------------------\n\nTITLE: Creating Date from String in ReScript\nDESCRIPTION: Function signature for fromString, which creates a date from a string representation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromString: string => t\n```\n\n----------------------------------------\n\nTITLE: Adding multiple elements to a string set in ReScript\nDESCRIPTION: Adds each element of the given array to the set. The reference of the return value might change even if all values already exist.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set-string.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\nlet mergeMany: (t, array<value>) => t\n```\n\n----------------------------------------\n\nTITLE: Defining Hashable Module Type in ReScript\nDESCRIPTION: Module type definition for hashable types that includes identity type, hash function, and equality function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/id.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\nmodule type Hashable = {\n  type identity\n  type t\n  let hash: Belt.Id.hash<t, identity>\n  let eq: Belt.Id.eq<t, identity>\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating Over MutableSet Elements with Uncurried Function in ReasonML\nDESCRIPTION: Function signature for iterating over all elements in a MutableSet using an uncurried function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_34\n\nLANGUAGE: reasonml\nCODE:\n```\nlet forEachU: (t('value, 'id), [@bs] ('value => unit)) => unit;\n```\n\n----------------------------------------\n\nTITLE: Computing Ceiling as Integer in ReScript (Safe)\nDESCRIPTION: Function that returns the smallest integer greater than or equal to the argument, with results pinned to the int range (-2147483648 to 2147483647).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/math.mdx#2025-04-18_snippet_22\n\nLANGUAGE: reasonml\nCODE:\n```\nlet ceil_int: float => int;\n```\n\n----------------------------------------\n\nTITLE: GetUnsafe Function Signature\nDESCRIPTION: Function signature for unsafely getting the value from a nullable type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/null.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet getUnsafe: t<'a> => 'a\n```\n\n----------------------------------------\n\nTITLE: Converting Date to JSON Unsafe in ReScript\nDESCRIPTION: Converts a Date object to a string representation used in JSON. This is the unsafe version that should be used instead of toJSON.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_71\n\nLANGUAGE: rescript\nCODE:\n```\nlet toJSONUnsafe: t => string\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.Date.toJSONUnsafe(exampleDate) == \"1973-11-29T21:30:54.321Z\"\n```\n\n----------------------------------------\n\nTITLE: Converting a string set to a list in ReScript\nDESCRIPTION: Returns a list of ordered set elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set-string.mdx#2025-04-18_snippet_30\n\nLANGUAGE: rescript\nCODE:\n```\nlet toList: t => list<value>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Value with Exception from Belt.Set.String in ReScript\nDESCRIPTION: The getExn function is similar to get, but raises an exception when the element does not exist.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-string.mdx#2025-04-18_snippet_62\n\nLANGUAGE: rescript\nCODE:\n```\nlet getExn: (t, value) => value;\n```\n\n----------------------------------------\n\nTITLE: Creating Empty JavaScript Objects with empty()\nDESCRIPTION: The empty() function creates and returns an empty JavaScript object ({}).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/obj.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reasonml\nCODE:\n```\nlet empty: unit => Js.t({..});\n```\n\n----------------------------------------\n\nTITLE: Finding Last Index of Element\nDESCRIPTION: Function signature to find the last index of a specified element in the Int8Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_23\n\nLANGUAGE: res\nCODE:\n```\nlet lastIndexOf: (elt, t) => int\n```\n\n----------------------------------------\n\nTITLE: Getting Array Length\nDESCRIPTION: Function signature to get the length (number of elements) in the Int8Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_8\n\nLANGUAGE: res\nCODE:\n```\nlet length: t => int\n```\n\n----------------------------------------\n\nTITLE: Iter Function Signature and Example\nDESCRIPTION: Function signature and example for iterating over nullable values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/null.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nlet iter: (t<'a>, (. 'a) => unit) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet maybeSay = (maybeMessage: Js.null<string>) =>\n  Js.Null.iter(maybeMessage, (. message) => Js.log(message))\n```\n\n----------------------------------------\n\nTITLE: Setting UTC Full Year with Month and Date in ReScript\nDESCRIPTION: Sets a Date's year, month, and day according to UTC time. Returns milliseconds since epoch. Function modifies the original Date object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_58\n\nLANGUAGE: rescript\nCODE:\n```\nlet setUTCFullYearMD: (t, ~year: float, ~month: float, ~date: float, unit) => float\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet future = Js.Date.setUTCFullYearMD(date1, ~year=1974.0, ~month=0.0, ~date=7.0, ())\ndate1 == Js.Date.fromString(\"1974-01-07T21:30:54.321Z00:00\")\nfuture == Js.Date.getTime(date1)\n```\n\n----------------------------------------\n\nTITLE: Array Transformation Functions for Uint8Array\nDESCRIPTION: Higher-order functions for transforming Uint8Array data into new forms, including variants that provide index information.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_12\n\nLANGUAGE: res\nCODE:\n```\nlet map: ((. elt) => 'b, t) => typed_array<'b>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet mapi: ((. elt, int) => 'b, t) => typed_array<'b>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet reduce: ((. 'b, elt) => 'b, 'b, t) => 'b\n```\n\nLANGUAGE: res\nCODE:\n```\nlet reducei: ((. 'b, elt, int) => 'b, 'b, t) => 'b\n```\n\nLANGUAGE: res\nCODE:\n```\nlet reduceRight: ((. 'b, elt) => 'b, 'b, t) => 'b\n```\n\nLANGUAGE: res\nCODE:\n```\nlet reduceRighti: ((. 'b, elt, int) => 'b, 'b, t) => 'b\n```\n\nLANGUAGE: res\nCODE:\n```\nlet some: ((. elt) => bool, t) => bool\n```\n\nLANGUAGE: res\nCODE:\n```\nlet somei: ((. elt, int) => bool, t) => bool\n```\n\n----------------------------------------\n\nTITLE: Computing the difference between two string sets in ReScript\nDESCRIPTION: Returns a new set containing elements from the first set that don't exist in the second set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set-string.mdx#2025-04-18_snippet_13\n\nLANGUAGE: rescript\nCODE:\n```\nlet diff: (t, t) => t\n```\n\n----------------------------------------\n\nTITLE: Defining MakeComparable module in ReScript\nDESCRIPTION: Defines a module functor that creates a Comparable module from a given module with a type t and a curried comparison function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/id.mdx#2025-04-18_snippet_6\n\nLANGUAGE: ReScript\nCODE:\n```\nmodule MakeComparable: (M: {\n  type t\n  let cmp: (t, t) => int\n}) => Comparable with type t = M.t\n```\n\n----------------------------------------\n\nTITLE: Array Iteration Methods\nDESCRIPTION: Higher-order methods for iterating, mapping, filtering and reducing array contents.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_float-64-array.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reason\nCODE:\n```\nlet forEach: ((. elt) => unit, t) => unit;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet forEachi: ((. elt, int) => unit, t) => unit;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet map: ((. elt) => 'b, t) => typed_array('b);\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet mapi: ((. elt, int) => 'b, t) => typed_array('b);\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet reduce: ((. 'b, elt) => 'b, 'b, t) => 'b;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet reducei: ((. 'b, elt, int) => 'b, 'b, t) => 'b;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet reduceRight: ((. 'b, elt) => 'b, 'b, t) => 'b;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet reduceRighti: ((. 'b, elt, int) => 'b, 'b, t) => 'b;\n```\n\n----------------------------------------\n\nTITLE: Removing a key from MapDict\nDESCRIPTION: Function signature for removing a key and its associated value from a map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_39\n\nLANGUAGE: reason\nCODE:\n```\nlet remove: (t('a, 'b, 'id), 'a, ~cmp: cmp('a, 'id)) => t('a, 'b, 'id);\n```\n\n----------------------------------------\n\nTITLE: Creating Uint16Array in ReScript\nDESCRIPTION: Functions for creating new Uint16Arrays from various sources.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_uint-16-array.mdx#2025-04-18_snippet_9\n\nLANGUAGE: ReScript\nCODE:\n```\nlet _BYTES_PER_ELEMENT: int;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet make: array(elt) => t;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet fromBuffer: Js_typed_array2.array_buffer => t;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet fromBufferOffset: (Js_typed_array2.array_buffer, int) => t;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet fromBufferRange: (Js_typed_array2.array_buffer, ~offset: int, ~length: int) => t;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet fromLength: int => t;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet from: Js_typed_array2.array_like(elt) => t;\n```\n\n----------------------------------------\n\nTITLE: Element Search Methods for Int16Array\nDESCRIPTION: Methods to check for element existence and find element positions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-16-array.mdx#2025-04-18_snippet_7\n\nLANGUAGE: res\nCODE:\n```\nlet includes: (elt, t) => bool\n```\n\nLANGUAGE: res\nCODE:\n```\nlet indexOf: (elt, t) => int\n```\n\nLANGUAGE: res\nCODE:\n```\nlet indexOfFrom: (elt, ~from: int, t) => int\n```\n\nLANGUAGE: res\nCODE:\n```\nlet lastIndexOf: (elt, t) => int\n```\n\nLANGUAGE: res\nCODE:\n```\nlet lastIndexOfFrom: (elt, ~from: int, t) => int\n```\n\n----------------------------------------\n\nTITLE: Checking All Elements (Uncurried) in ReScript MapInt Module\nDESCRIPTION: Function signature for checking if all elements satisfy an uncurried predicate.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-int.mdx#2025-04-18_snippet_15\n\nLANGUAGE: rescript\nCODE:\n```\nlet everyU: (t<'v>, (. key, 'v) => bool) => bool\n```\n\n----------------------------------------\n\nTITLE: Dictionary UnsafeGet Usage Example\nDESCRIPTION: Example showing direct value access with unsafeGet\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/dict.mdx#2025-04-18_snippet_6\n\nLANGUAGE: reason\nCODE:\n```\nJs.Dict.unsafeGet(ages, \"Fred\") == 49;\\nJs.Dict.unsafeGet(ages, \"Paul\"); // returns undefined\n```\n\n----------------------------------------\n\nTITLE: Joining Array Elements with Custom Separator using joinWith in ReScript\nDESCRIPTION: Function signature for joinWith that concatenates all elements of a Uint8Array into a string using a specified separator.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_22\n\nLANGUAGE: rescript\nCODE:\n```\nlet joinWith: (string, t) => string\n```\n\n----------------------------------------\n\nTITLE: Filtering Array Elements with filter in ReScript\nDESCRIPTION: Function signature for filter that creates a new Uint8Array with all elements that pass the test implemented by the provided function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_34\n\nLANGUAGE: rescript\nCODE:\n```\nlet filter: ((. elt) => bool, t) => t\n```\n\n----------------------------------------\n\nTITLE: Finding First Matching Element with Index\nDESCRIPTION: Returns the first element that satisfies the provided testing function with index, or undefined if none found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_37\n\nLANGUAGE: rescript\nCODE:\n```\nlet findi: ((. elt, int) => bool, t) => Js.undefined<elt>\n```\n\n----------------------------------------\n\nTITLE: Reducing HashSetString\nDESCRIPTION: Applies a reducer function to accumulate a value by iterating over all elements in the HashSetString.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-set-string.mdx#2025-04-18_snippet_12\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduce: (t, 'c, ('c, key) => 'c) => 'c;\n```\n\n----------------------------------------\n\nTITLE: String Length Function\nDESCRIPTION: Function signature for getting the length of a string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/string-2.mdx#2025-04-18_snippet_6\n\nLANGUAGE: res\nCODE:\n```\nlet length: t => int\n```\n\n----------------------------------------\n\nTITLE: Creating Array from Values\nDESCRIPTION: Function signature to create a new Uint16Array from an array of values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_51\n\nLANGUAGE: res\nCODE:\n```\nlet make: array<elt> => t\n```\n\n----------------------------------------\n\nTITLE: Defining binarySearchBy Function\nDESCRIPTION: Function that performs binary search in a sorted array, returning index of found element or bitwise complement for insertion point if not found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/sort-array.mdx#2025-04-18_snippet_11\n\nLANGUAGE: reason\nCODE:\n```\nlet binarySearchBy: (array('a), 'a, ('a, 'a) => int) => int;\n```\n\n----------------------------------------\n\nTITLE: Defining a React Component for Lazy Loading\nDESCRIPTION: A simple React component defined in ReScript that will be used to demonstrate lazy loading with dynamic imports. The component renders a div with text passed as a prop.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2023-06-05-first-class-dynamic-import-support.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\n// Title.res\n@react.component\nlet make = (~text) => {\n  <div className=\"title\">{text->React.string}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Warnings in ReScript Build\nDESCRIPTION: Demonstrates how to selectively turn on/off warnings or turn them into hard errors in rescript.json.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/build-configuration.mdx#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"warnings\": {\n    \"number\": \"-44-102\",\n    \"error\": \"+5\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Array-like Type Definition\nDESCRIPTION: Generic type definition for array-like structures with a type parameter.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\ntype array_like('a);\n```\n\n----------------------------------------\n\nTITLE: Defining Compare Function Type\nDESCRIPTION: Type definition for the comparison function used by the Set Dictionary\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set-dict.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\ntype cmp<'value, 'id> = Belt.Id.cmp<'value, 'id>\n```\n\n----------------------------------------\n\nTITLE: Signature of forEachU function in Belt.Range\nDESCRIPTION: Type signature for the uncurried version of forEach function that iterates over a range and applies a function to each element.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/range.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\nlet forEachU: (int, int, [@bs] (int => unit)) => unit;\n```\n\n----------------------------------------\n\nTITLE: Computing Natural Exponent Minus 1 in ReScript\nDESCRIPTION: Function that returns e (the base of natural logarithms) raised to the power of the argument minus 1, equivalent to JavaScript's Math.expm1.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/math.mdx#2025-04-18_snippet_32\n\nLANGUAGE: reasonml\nCODE:\n```\nlet expm1: float => float;\n```\n\n----------------------------------------\n\nTITLE: Setting Date of Month in ReScript\nDESCRIPTION: ReScript binding for JavaScript's Date.setDate method. Sets the day of month and returns the time value. This function modifies the original Date object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_38\n\nLANGUAGE: res\nCODE:\n```\nlet setDate: (t, float) => float\n```\n\nLANGUAGE: res\nCODE:\n```\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet twoWeeksBefore = Js.Date.setDate(date1, 15.0)\ndate1 == Js.Date.fromString(\"1973-11-15T21:30:54.321Z00:00\")\ntwoWeeksBefore == Js.Date.getTime(date1)\n```\n\n----------------------------------------\n\nTITLE: HashSet Add Operation\nDESCRIPTION: Adds a key to the HashSet.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-set-string.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet add: (t, key) => unit\n```\n\n----------------------------------------\n\nTITLE: Clearing a HashSetInt in ReScript\nDESCRIPTION: Removes all elements from the HashSetInt.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-set-int.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ReScript\nCODE:\n```\nlet clear: t => unit;\n```\n\n----------------------------------------\n\nTITLE: Converting Vector to List in ReScript\nDESCRIPTION: Converts a vector to a list.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/vector.mdx#2025-04-18_snippet_8\n\nLANGUAGE: ReScript\nCODE:\n```\nlet toList: t('a) => list('a);\n```\n\n----------------------------------------\n\nTITLE: Test Function Signature\nDESCRIPTION: Function signature for testing nullable values\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/nullable.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet test: t<'a> => bool\n```\n\n----------------------------------------\n\nTITLE: Getting Set Size in Belt.MutableSet using size in ReScript\nDESCRIPTION: The size function returns the number of elements in the set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_8\n\nLANGUAGE: ReScript\nCODE:\n```\nlet size: t<'value, 'id> => int\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nmodule IntCmp = Belt.Id.MakeComparable({\n  type t = int\n  let cmp = Pervasives.compare\n})\n\nlet s0 = Belt.MutableSet.fromArray([1, 2, 3, 4], ~id=module(IntCmp))\n\ns0->Belt.MutableSet.size /* 4 */\n```\n\n----------------------------------------\n\nTITLE: Slicing ArrayBuffer with Start and End Points in ReScript\nDESCRIPTION: Function signature for creating a new ArrayBuffer from a slice of an existing one, specifying both start and end indices.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_array-buffer.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reasonml\nCODE:\n```\nlet slice: (t, ~start: int, ~end_: int) => Js_typed_array2.array_buffer;\n```\n\n----------------------------------------\n\nTITLE: Accessing and Modifying Uint8ClampedArray Elements in ReScript\nDESCRIPTION: Provides unsafe get and set operations for Uint8ClampedArray elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_1\n\nLANGUAGE: ReScript\nCODE:\n```\nlet unsafe_get: (t, int) => elt;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet unsafe_set: (t, int, elt) => unit;\n```\n\n----------------------------------------\n\nTITLE: Adding ReScript Keyword to package.json\nDESCRIPTION: When publishing a ReScript package to npm, add 'rescript' as a keyword in the package.json file to ensure proper indexing.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/guidelines/publishing-packages.mdx#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"keywords\": [\"rescript\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Logging statistics of HashSetString\nDESCRIPTION: Logs internal statistics about the HashSetString for debugging purposes.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-set-string.mdx#2025-04-18_snippet_14\n\nLANGUAGE: rescript\nCODE:\n```\nlet logStats: t => unit;\n```\n\n----------------------------------------\n\nTITLE: Creating a SetDict from an array in ReScript\nDESCRIPTION: Shows how to create a SetDict from an array of elements using the 'fromArray' function, which requires a comparison function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-dict.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromArray: (array('value), ~cmp: cmp('value, 'id)) => t('value, 'id);\n\nmodule IntCmp =\n  Belt.Id.MakeComparable({\n    type t = int;\n    let cmp = Pervasives.compare;\n  });\n\nlet s0 = Belt.Set.Dict.fromArray([|1, 3, 2, 4|], ~cmp=IntCmp.cmp);\n\ns0->Belt.Set.Dict.toArray; /* [|1, 2, 3, 4|] */\n```\n\n----------------------------------------\n\nTITLE: Creating subarray of Uint8ClampedArray from index\nDESCRIPTION: Returns a new Uint8ClampedArray view of the ArrayBuffer store for this array, referencing the elements at start to the end of the array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_29\n\nLANGUAGE: res\nCODE:\n```\nlet subarrayFrom: (int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Performing Integer Addition in ReScript\nDESCRIPTION: This snippet demonstrates how to use the + operator for integer addition in ReScript. It adds two integers and assigns the result to a variable.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/operators_integer_addition.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\nlet result = 1 + 2\n```\n\nLANGUAGE: js\nCODE:\n```\nval result = 3;\n```\n\n----------------------------------------\n\nTITLE: Reducing a set with uncurried function in ReScript\nDESCRIPTION: Reduces the set to a single value using an uncurried accumulator function. Used for optimized performance in certain scenarios.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-int.mdx#2025-04-18_snippet_19\n\nLANGUAGE: reason\nCODE:\n```\nlet reduceU: (t, 'a, [@bs] (('a, value) => 'a)) => 'a;\n```\n\n----------------------------------------\n\nTITLE: ReScript Info Level Logging Functions\nDESCRIPTION: Info level logging functions supporting 1-4 arguments and array logging. These functions print output to the console with info level styling.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/console.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet info: 'a => unit\nlet info2: ('a, 'b) => unit\nlet info3: ('a, 'b, 'c) => unit\nlet info4: ('a, 'b, 'c, 'd) => unit\nlet infoMany: array<'a> => unit\n```\n\n----------------------------------------\n\nTITLE: Defining RegExp type in ReScript\nDESCRIPTION: Defines the core type that represents a JavaScript RegExp object in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/re.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\ntype t\n```\n\n----------------------------------------\n\nTITLE: Partitioning Set in ReScript MutableSetString\nDESCRIPTION: Splits a set into two based on a predicate function, returning a tuple with elements that satisfy and don't satisfy the predicate.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_31\n\nLANGUAGE: reason\nCODE:\n```\nlet partition: (t, value => bool) => (t, t);\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet hasFiveChars = x => String.length(x) == 5;\n\nlet s0 = Belt.MutableSet.String.fromArray([|\"apple\", \"carrot\"|]);\nlet (s1, s2) = s0->Belt.MutableSet.String.partition(hasFiveChars);\n\ns1->Belt.MutableSet.String.toArray; /* [|\"apple\"|] */\ns2->Belt.MutableSet.String.toArray; /* [|\"carrot\"|] */\n```\n\n----------------------------------------\n\nTITLE: Filter Array Elements\nDESCRIPTION: Creates a new typed array with all elements that pass the test implemented by the provided function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_type-s.mdx#2025-04-18_snippet_34\n\nLANGUAGE: res\nCODE:\n```\nlet filter: ((. elt) => bool, t) => t\n```\n\n----------------------------------------\n\nTITLE: HashSet Size Operation\nDESCRIPTION: Returns the number of elements in the HashSet.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-set-string.mdx#2025-04-18_snippet_13\n\nLANGUAGE: rescript\nCODE:\n```\nlet size: t => int\n```\n\n----------------------------------------\n\nTITLE: List Map Reverse Function Signature\nDESCRIPTION: Function to map a function over a list and reverse the result.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/list.mdx#2025-04-18_snippet_9\n\nLANGUAGE: ReScript\nCODE:\n```\nlet mapRev: ((. 'a) => 'b, t('a)) => t('b);\n```\n\n----------------------------------------\n\nTITLE: Vector Creation Operation\nDESCRIPTION: Creates a new vector of specified length initialized with a value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/vector.mdx#2025-04-18_snippet_16\n\nLANGUAGE: res\nCODE:\n```\nlet make: (int, 'a) => t<'a>\n```\n\n----------------------------------------\n\nTITLE: Check Element Inclusion\nDESCRIPTION: Determines whether the typed array includes a certain element.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_type-s.mdx#2025-04-18_snippet_18\n\nLANGUAGE: res\nCODE:\n```\nlet includes: (elt, t) => bool\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Nullable Values in ReScript\nDESCRIPTION: Defines the 'iter' function that applies a function to the contained value if the nullable value is not null or undefined.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/null-undefined.mdx#2025-04-18_snippet_8\n\nLANGUAGE: reason\nCODE:\n```\nlet iter: (t('a), (. 'a) => unit) => unit;\n```\n\n----------------------------------------\n\nTITLE: Writing a Uint8 value to a DataView in ReScript\nDESCRIPTION: Function signature for storing an unsigned 8-bit integer at the specified byte offset.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_data-view.mdx#2025-04-18_snippet_23\n\nLANGUAGE: rescript\nCODE:\n```\nlet setUint8: (t, int, int) => unit\n```\n\n----------------------------------------\n\nTITLE: List isEmpty Function Signature in ReScript\nDESCRIPTION: Defines the signature for the 'isEmpty' function, which checks if a list is empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/list.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet isEmpty: t<'a> => bool\n```\n\n----------------------------------------\n\nTITLE: Creating Date with Year, Month, Day, and Hour in ReScript\nDESCRIPTION: Function signature for makeWithYMDH, which creates a date for a specific year, month, day, and hour.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\nlet makeWithYMDH: (~year: float, ~month: float, ~date: float, ~hours: float, unit) => t\n```\n\n----------------------------------------\n\nTITLE: Return Function Signature in ReScript\nDESCRIPTION: Function signature for constructing a nullable value from a regular value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/null.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet return: 'a => t<'a>\n```\n\n----------------------------------------\n\nTITLE: Accessing Square Root of 1/2 in ReScript\nDESCRIPTION: Constant for the square root of 1/2 (approximately 0.7071067811865476), equivalent to JavaScript's Math.SQRT1_2.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/math.mdx#2025-04-18_snippet_6\n\nLANGUAGE: reasonml\nCODE:\n```\nlet _SQRT1_2: float;\n```\n\n----------------------------------------\n\nTITLE: Promise.all6 Implementation\nDESCRIPTION: Combines six promises into a single promise that resolves with a tuple of results\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/promise.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rescript\nCODE:\n```\nlet all6: ((t<'a0>, t<'a1>, t<'a2>, t<'a3>, t<'a4>, t<'a5>)) => t<('a0, 'a1, 'a2, 'a3, 'a4, 'a5)>\n```\n\n----------------------------------------\n\nTITLE: Dividing Floats in ReScript\nDESCRIPTION: Division of two float values using the / operator from Belt.Float. Can be opened in a module to avoid dot-notation, but yields a shadow warning.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/float.mdx#2025-04-18_snippet_7\n\nLANGUAGE: reason\nCODE:\n```\nlet (/): (float, float) => float;\n```\n\nLANGUAGE: reason\nCODE:\n```\nopen Belt.Float;\nJs.log(4.0 / 2.0 === 2.0); /* true */\n```\n\n----------------------------------------\n\nTITLE: Partitioning Map (Curried) in ReScript MapInt Module\nDESCRIPTION: Function signature for partitioning the map based on a curried predicate.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-int.mdx#2025-04-18_snippet_49\n\nLANGUAGE: rescript\nCODE:\n```\nlet partition: (t<'v>, (key, 'v) => bool) => (t<'v>, t<'v>)\n```\n\n----------------------------------------\n\nTITLE: Map MapWithKeyU Function Signature\nDESCRIPTION: Uncurried version of mapWithKey operation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map.mdx#2025-04-18_snippet_15\n\nLANGUAGE: rescript\nCODE:\n```\nlet mapWithKeyU: (t<'k, 'v, 'id>, (. 'k, 'v) => 'v2) => t<'k, 'v2, 'id>\n```\n\n----------------------------------------\n\nTITLE: Creating JSON Object Value in ReScript\nDESCRIPTION: Function signature for creating a JSON object value from a ReScript dictionary of JSON values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/json.mdx#2025-04-18_snippet_15\n\nLANGUAGE: reason\nCODE:\n```\nlet object_: Js_dict.t(t) => t;\n```\n\n----------------------------------------\n\nTITLE: Floor Function in ReScript\nDESCRIPTION: Returns the largest integral value less than or equal to the argument. The result is a float and is not restricted to the int data type range.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/math.mdx#2025-04-18_snippet_39\n\nLANGUAGE: rescript\nCODE:\n```\nlet floor_float: float => float;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.Math.floor_float(3.7) == 3.0;\nJs.Math.floor_float(3.0) == 3.0;\nJs.Math.floor_float(-3.1) == -4.0;\nJs.Math.floor_float(2_150_000_000.3) == 2_150_000_000.0;\n```\n\n----------------------------------------\n\nTITLE: HashSet to Array Conversion - ReScript\nDESCRIPTION: Converts the HashSet to an array of keys.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-set-int.mdx#2025-04-18_snippet_15\n\nLANGUAGE: rescript\nCODE:\n```\nlet toArray: t => array<key>\n```\n\n----------------------------------------\n\nTITLE: Getting a value with default from MapDict\nDESCRIPTION: Function signature for retrieving a value by key from a map with a default value if not found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_36\n\nLANGUAGE: reason\nCODE:\n```\nlet getWithDefault: (t('k, 'a, 'id), 'k, 'a, ~cmp: cmp('k, 'id)) => 'a;\n```\n\n----------------------------------------\n\nTITLE: Slice Array by Range\nDESCRIPTION: Returns a new array containing elements from start (inclusive) to end (exclusive).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-64-array.mdx#2025-04-18_snippet_25\n\nLANGUAGE: reason\nCODE:\n```\nlet slice: (~start: int, ~end_: int, t) => t;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Item from Storage in ReScript\nDESCRIPTION: External binding for getting an item from storage by key. Returns an option type, which is None if the item doesn't exist.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/dom/storage.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nexternal getItem: (string, t) => option<string> = \"getItem\"\n```\n\n----------------------------------------\n\nTITLE: Mapping with keys and uncurried function in ReScript map\nDESCRIPTION: Creates a new map by applying an uncurried function to all key-value pairs in the original map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_44\n\nLANGUAGE: reasonml\nCODE:\n```\nlet mapWithKeyU: (t('a), [@bs] ((key, 'a) => 'b)) => t('b);\n```\n\n----------------------------------------\n\nTITLE: Float toExponential Function\nDESCRIPTION: Function to format a float using exponential notation. Returns a string representation in scientific notation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/float.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet toExponential: float => string\n```\n\n----------------------------------------\n\nTITLE: Finding minimum key in ReScript map (undefined return)\nDESCRIPTION: Returns the minimum key in the map as a JavaScript undefined value if the map is empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_25\n\nLANGUAGE: reasonml\nCODE:\n```\nlet minKeyUndefined: t('a) => Js.undefined(key);\n```\n\n----------------------------------------\n\nTITLE: Multiple Character Codes to String\nDESCRIPTION: Function signature for creating a string from multiple character codes.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/string-2.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\nlet fromCharCodeMany: array<int> => t\n```\n\n----------------------------------------\n\nTITLE: String Concatenation in ReScript\nDESCRIPTION: Demonstrates how to concatenate strings using the ++ operator in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/primitive-types.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\nlet greetings = \"Hello \" ++ \"world!\"\n```\n\nLANGUAGE: js\nCODE:\n```\nvar greetings = \"Hello world!\";\n```\n\n----------------------------------------\n\nTITLE: Peeking First Element with Exception in MutableQueue (ReScript)\nDESCRIPTION: Function to return the first element in the queue, raising an exception if the queue is empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-queue.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\nlet peekExn: t('a) => 'a;\n```\n\n----------------------------------------\n\nTITLE: Iterating Elements with Index using forEachi\nDESCRIPTION: Function signature to execute a provided function on each element of the Int8Array, with the element index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_41\n\nLANGUAGE: res\nCODE:\n```\nlet forEachi: ((. elt, int) => unit, t) => unit\n```\n\n----------------------------------------\n\nTITLE: Iterating over a set in ReScript with MutableSetInt\nDESCRIPTION: Applies the given function to all elements of the set in increasing order. This is useful for performing side effects on each element.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_21\n\nLANGUAGE: rescript\nCODE:\n```\nlet forEach: (t, value => unit) => unit;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet s0 = Belt.MutableSet.Int.fromArray([|5,2,3,5,6|]);\nlet acc = ref([]);\ns0->Belt.MutableSet.Int.forEach(x => {\n  acc := Belt.List.add(acc^, x)\n});\nacc; /* [6,5,3,2] */\n```\n\n----------------------------------------\n\nTITLE: Finding the maximum key-value pair in MapDict (undefined version)\nDESCRIPTION: Function signature for finding the key-value pair with the largest key, returning an undefined value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_33\n\nLANGUAGE: reason\nCODE:\n```\nlet maxUndefined: t('k, 'a, 'b) => Js.undefined(('k, 'a));\n```\n\n----------------------------------------\n\nTITLE: Reducing a HashMap with integer keys in ReScript\nDESCRIPTION: Reduces the hash map using a function that accumulates values from each key-value pair with an initial value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-map-int.mdx#2025-04-18_snippet_13\n\nLANGUAGE: reason\nCODE:\n```\nlet reduce: (t('b), 'c, ('c, key, 'b) => 'c) => 'c;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet hMap = Belt.HashMap.Int.make(~hintSize=10);\nBelt.HashMap.Int.set(hMap, 1, \"value1\");\nBelt.HashMap.Int.set(hMap, 2, \"value2\");\n\nBelt.HashMap.Int.reduce(hMap, \"\", (acc, key, value) => {\n  acc ++ \", \" ++ value\n}) == \"value1, value2\";\n```\n\n----------------------------------------\n\nTITLE: Copying a HashSetString\nDESCRIPTION: Creates a new HashSetString containing all elements from the original set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-set-string.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet copy: t => t;\n```\n\n----------------------------------------\n\nTITLE: Equality Check with Uncurried Function in ReScript MapInt Module\nDESCRIPTION: Function signature for checking equality of two maps using an uncurried comparison function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-int.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nlet eqU: (t<'v>, t<'v>, (. 'v, 'v) => bool) => bool\n```\n\n----------------------------------------\n\nTITLE: Removing elements from SetDict in ReScript\nDESCRIPTION: Demonstrates how to remove elements from a SetDict using the 'remove' function, which returns a new set if the element existed.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-dict.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nlet remove: (t('value, 'id), 'value, ~cmp: cmp('value, 'id)) => t('value, 'id);\n\nmodule IntCmp =\n  Belt.Id.MakeComparable({\n    type t = int;\n    let cmp = Pervasives.compare;\n  });\n\nlet s0 = Belt.Set.Dict.fromArray([|2,3,1,4,5|], ~cmp=IntCmp.cmp);\nlet s1 = s0->Belt.Set.Dict.remove(1, ~cmp=IntCmp.cmp);\nlet s2 = s1->Belt.Set.Dict.remove(3, ~cmp=IntCmp.cmp);\nlet s3 = s2->Belt.Set.Dict.remove(3, ~cmp=IntCmp.cmp);\n\ns1->Belt.Set.Dict.toArray; /* [|2,3,4,5|] */\ns2->Belt.Set.Dict.toArray; /* [|2,4,5|] */\ns2 == s3; /* true */\n```\n\n----------------------------------------\n\nTITLE: Retrieving Storage Key by Index in ReScript\nDESCRIPTION: External binding for getting a storage key by numeric index. Returns an option type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/dom/storage2.mdx#2025-04-18_snippet_5\n\nLANGUAGE: reasonml\nCODE:\n```\nexternal key: (t, int) => option(string) = \"key\"\n```\n\n----------------------------------------\n\nTITLE: Example of toPrecisionWithPrecision with Scientific Notation\nDESCRIPTION: Shows how toPrecisionWithPrecision uses scientific notation when needed for the specified precision.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/float.mdx#2025-04-18_snippet_22\n\nLANGUAGE: re\nCODE:\n```\n/* prints \"1e+4\" */\nJs.log @@ Js.Float.toPrecisionWithPrecision(12345.6789, ~digits=1);\n```\n\n----------------------------------------\n\nTITLE: Checking if a Belt.MutableSet.Int is empty in ReScript\nDESCRIPTION: Determines if a set is empty using the isEmpty function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\nlet isEmpty: t => bool\n```\n\nLANGUAGE: res\nCODE:\n```\nlet empty = Belt.MutableSet.Int.fromArray([])\nlet notEmpty = Belt.MutableSet.Int.fromArray([1])\n\nBelt.MutableSet.Int.isEmpty(empty) /* true */\nBelt.MutableSet.Int.isEmpty(notEmpty) /* false */\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching with Polymorphic Variants\nDESCRIPTION: Shows how to use pattern matching with polymorphic variants including type annotations and handling different cases\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/polymorphic-variant.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet render = (myColor: [#red | #green | #blue]) => {\n  switch myColor {\n  | #blue => Js.log(\"Hello blue!\")\n  | #red\n  | #green => Js.log(\"Hello other colors\")\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction render(myColor) {\n  if (myColor === \"green\" || myColor === \"red\") {\n    console.log(\"Hello other colors\");\n  } else {\n    console.log(\"Hello blue!\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Imul Function in ReScript\nDESCRIPTION: 32-bit integer multiplication. Use this only when you need to optimize performance of multiplication of numbers stored as 32-bit integers.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/math.mdx#2025-04-18_snippet_43\n\nLANGUAGE: rescript\nCODE:\n```\nlet imul: (int, int) => int;\n```\n\n----------------------------------------\n\nTITLE: Popping Elements from MutableStack with Undefined in ReScript\nDESCRIPTION: Function to remove and return the top element of a stack, returning JavaScript undefined if the stack is empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-stack.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet popUndefined: t('a) => Js.undefined('a);\n```\n\n----------------------------------------\n\nTITLE: Comparing maps in MapString module (ReScript)\nDESCRIPTION: Function for comparing two maps using a custom comparison function for values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-string.mdx#2025-04-18_snippet_6\n\nLANGUAGE: reason\nCODE:\n```\nlet cmp: (t('v), t('v), ('v, 'v) => int) => int;\n```\n\n----------------------------------------\n\nTITLE: Merging Multiple Elements into a HashSet in ReScript\nDESCRIPTION: This function signature shows how to merge multiple elements from an array into an existing HashSet.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-set.mdx#2025-04-18_snippet_19\n\nLANGUAGE: reason\nCODE:\n```\nlet mergeMany: (t('a, 'id), array('a)) => unit;\n```\n\n----------------------------------------\n\nTITLE: Defining Date Type in ReScript\nDESCRIPTION: Defines the type t for representing Date objects in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\ntype t\n```\n\n----------------------------------------\n\nTITLE: Creating New HashMap in ReScript\nDESCRIPTION: Creates a new HashMap with specified hint size for initial capacity.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-map-string.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reasonml\nCODE:\n```\nlet make: (~hintSize: int) => t('b);\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet hMap = Belt.HashMap.String.make(~hintSize=10);\n\nBelt.HashMap.String.set(hMap, \"key1\", \"a\");\n```\n\n----------------------------------------\n\nTITLE: Create Float64Array from ArrayBuffer with Offset\nDESCRIPTION: Creates a new Float64Array view of an ArrayBuffer starting at the specified offset. Can throw an exception.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-64-array.mdx#2025-04-18_snippet_53\n\nLANGUAGE: reason\nCODE:\n```\nlet fromBufferOffset: (Js_typed_array2.array_buffer, int) => t;\n```\n\n----------------------------------------\n\nTITLE: Writing 32-bit Float (Big Endian)\nDESCRIPTION: Stores a 32-bit floating point number at the specified byte offset from the start of the DataView using big-endian format.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_data-view.mdx#2025-04-18_snippet_32\n\nLANGUAGE: reasonml\nCODE:\n```\nlet setFloat32: (t, int, float) => unit;\n```\n\n----------------------------------------\n\nTITLE: Finding index of element from position\nDESCRIPTION: Defines a function that returns the first index at which a given element can be found in the array, starting from the provided index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_20\n\nLANGUAGE: rescript\nCODE:\n```\nlet indexOfFrom: (elt, ~from: int, t) => int\n```\n\n----------------------------------------\n\nTITLE: Raising ReferenceError exception in ReScript\nDESCRIPTION: Function signature for raising a JavaScript ReferenceError exception with a custom message.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/exn.mdx#2025-04-18_snippet_11\n\nLANGUAGE: rescript\nCODE:\n```\nlet raiseReferenceError: string => 'a\n```\n\n----------------------------------------\n\nTITLE: HashSet Clear Operation - ReScript\nDESCRIPTION: Removes all elements from the HashSet.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-set-int.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet clear: t => unit\n```\n\n----------------------------------------\n\nTITLE: ReScript Array Truncation Usage Example\nDESCRIPTION: Demonstrates practical usage of truncateToLengthUnsafe to reduce an array of strings from 5 elements to 3 elements\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/array.mdx#2025-04-18_snippet_19\n\nLANGUAGE: rescript\nCODE:\n```\nlet arr = [\"ant\", \"bee\", \"cat\", \"dog\", \"elk\"]\n\nBelt.Array.truncateToLengthUnsafe(arr, 3)\n\narr == [\"ant\", \"bee\", \"cat\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Function Value Type in ReScript\nDESCRIPTION: Defines a ReScript type representing JavaScript function values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/types.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\ntype function_val\n```\n\n----------------------------------------\n\nTITLE: Finding Last Element Index\nDESCRIPTION: Function signature to find the last index of a specified element in the array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_23\n\nLANGUAGE: res\nCODE:\n```\nlet lastIndexOf: (elt, t) => int\n```\n\n----------------------------------------\n\nTITLE: Filtering Array Elements with Index\nDESCRIPTION: Function signature to create a new Int8Array with elements that pass a test function that also receives the element index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_35\n\nLANGUAGE: res\nCODE:\n```\nlet filteri: ((. elt, int) => bool, t) => t\n```\n\n----------------------------------------\n\nTITLE: Creating a new HashSetInt in ReScript\nDESCRIPTION: Creates a new HashSetInt with a specified hint size for initial capacity.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-set-int.mdx#2025-04-18_snippet_2\n\nLANGUAGE: ReScript\nCODE:\n```\nlet make: (~hintSize: int) => t;\n```\n\n----------------------------------------\n\nTITLE: Checking if all elements satisfy a predicate with uncurried function in ReScript with MutableSetInt\nDESCRIPTION: Returns a boolean indicating whether all elements in the set satisfy the given uncurried predicate function. This is an internal function primarily used for optimization.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_24\n\nLANGUAGE: rescript\nCODE:\n```\nlet everyU: (t, [@bs] (value => bool)) => bool;\n```\n\n----------------------------------------\n\nTITLE: Finding the maximum key in MapDict (undefined version)\nDESCRIPTION: Function signature for finding the largest key in a map, returning an undefined value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_29\n\nLANGUAGE: reason\nCODE:\n```\nlet maxKeyUndefined: t('k, 'a, 'b) => Js.undefined('k);\n```\n\n----------------------------------------\n\nTITLE: Clearing a HashSetString\nDESCRIPTION: Removes all elements from the HashSetString.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/hash-set-string.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\nlet clear: t => unit\n```\n\n----------------------------------------\n\nTITLE: Computing Natural Exponent in ReScript\nDESCRIPTION: Function that returns e (the base of natural logarithms) raised to the power of the argument, equivalent to JavaScript's Math.exp.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/math.mdx#2025-04-18_snippet_31\n\nLANGUAGE: reasonml\nCODE:\n```\nlet exp: float => float;\n```\n\n----------------------------------------\n\nTITLE: Record Type Coercion with Superset Fields\nDESCRIPTION: Demonstrates coercing a record to another type when the source record contains all fields of the target type plus additional fields.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2023-05-17-enhanced-ergonomics-for-record-types.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\ntype a = {\n  id: string,\n  name: string,\n  age: int,\n  active: bool,\n}\n\ntype b = {\n  name: string,\n  age: int,\n}\n\nlet nameFromB = (b: b) => b.name\n\nlet a: a = {\n  id: \"1\",\n  name: \"Name\",\n  age: 35,\n  active: true,\n}\n\nlet name = nameFromB(a :> b)\n```\n\n----------------------------------------\n\nTITLE: IsNullable Function Signature in ReScript\nDESCRIPTION: Function signature for checking if a value is null or undefined.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/null-undefined.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet isNullable: t<'a> => bool\n```\n\n----------------------------------------\n\nTITLE: Clearing a HashMap in ReScript\nDESCRIPTION: Removes all key-value pairs from the hash map, leaving it empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-map-int.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet clear: t<'b> => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet hMap = Belt.HashMap.Int.fromArray([(1, \"1\")])\nBelt.HashMap.Int.clear(hMap)\nBelt.HashMap.Int.isEmpty(hMap) == true\n```\n\n----------------------------------------\n\nTITLE: Vector Copy Operation\nDESCRIPTION: Creates a shallow copy of a vector.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/vector.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nlet copy: t<'a> => t<'a>\n```\n\n----------------------------------------\n\nTITLE: Reduce Array Elements with Index\nDESCRIPTION: Applies a function against an accumulator and each element in the typed array to reduce it to a single value, with the element index as an additional parameter.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_type-s.mdx#2025-04-18_snippet_45\n\nLANGUAGE: res\nCODE:\n```\nlet reducei: ((. 'b, elt, int) => 'b, 'b, t) => 'b\n```\n\n----------------------------------------\n\nTITLE: Slicing and Copying Float32Array in ReScript\nDESCRIPTION: Functions to create new Float32Arrays from existing ones by slicing or copying.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nlet slice: (~start: int, ~end_: int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet copy: t => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet sliceFrom: (int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet subarray: (~start: int, ~end_: int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet subarrayFrom: (int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Checking Equality of Belt.Sets in ReScript\nDESCRIPTION: Shows how to check if two Belt.Sets are equal using the eq function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set.mdx#2025-04-18_snippet_13\n\nLANGUAGE: rescript\nCODE:\n```\nlet s0 = Belt.Set.fromArray([5,2,3], ~id=module(IntCmp))\nlet s1 = Belt.Set.fromArray([3,2,5], ~id=module(IntCmp))\n\nBelt.Set.eq(s0, s1) /* true */\n```\n\n----------------------------------------\n\nTITLE: Checking Nullability of Null_undefined Value in ReScript\nDESCRIPTION: Function signature for 'isNullable', which returns true if the given value is null or undefined, false otherwise.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/null-undefined.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet isNullable: t<'a> => bool\n```\n\n----------------------------------------\n\nTITLE: MutableMap Comparison Operations\nDESCRIPTION: Functions for comparing maps and their contents\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/mutable-map.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet cmpU: (t<'k, 'a, 'id>, t<'k, 'a, 'id>, (. 'a, 'a) => int) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet cmp: (t<'k, 'a, 'id>, t<'k, 'a, 'id>, ('a, 'a) => int) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet eqU: (t<'k, 'a, 'id>, t<'k, 'a, 'id>, (. 'a, 'a) => bool) => bool\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet eq: (t<'k, 'a, 'id>, t<'k, 'a, 'id>, ('a, 'a) => bool) => bool\n```\n\n----------------------------------------\n\nTITLE: Extracting Values as Array in ReScript MapInt Module\nDESCRIPTION: Function signature for extracting all values from the map as an array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-int.mdx#2025-04-18_snippet_24\n\nLANGUAGE: rescript\nCODE:\n```\nlet valuesToArray: t<'v> => array<'v>\n```\n\n----------------------------------------\n\nTITLE: Converting Reason Files to ReScript Syntax using Bash\nDESCRIPTION: This bash command converts all Reason (.re) files in a specified folder to ReScript (.res) syntax. It uses the bsc compiler to format each file and replace the original.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/migrate-from-bucklescript-reason.mdx#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfor f in your-folder/**/*.re; do; node_modules/.bin/bsc -format $f > ${f%.re}.res && rm $f; done;\n```\n\n----------------------------------------\n\nTITLE: Map Conversion Functions - ReScript\nDESCRIPTION: Functions for converting maps to and from arrays and lists\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-map.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reason\nCODE:\n```\nlet toList: t('k, 'a, 'id) => list(('k, 'a));\nlet toArray: t('k, 'a, 'id) => array(('k, 'a));\nlet fromArray: (array(('k, 'a)), ~id: id('k, 'id)) => t('k, 'a, 'id);\nlet keysToArray: t('k, 'a, 'b) => array('k);\nlet valuesToArray: t('b, 'a, 'c) => array('a);\n```\n\n----------------------------------------\n\nTITLE: Signature of some function in Belt.Range\nDESCRIPTION: Type signature for the some function that checks if a predicate is true for at least one element in a range.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/range.mdx#2025-04-18_snippet_10\n\nLANGUAGE: reason\nCODE:\n```\nlet some: (int, int, int => bool) => bool;\n```\n\n----------------------------------------\n\nTITLE: Creating MutableQueue from Array in ReScript\nDESCRIPTION: Function to create a queue from an array, equivalent to adding each element of the array to the queue.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-queue.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromArray: array('a) => t('a);\n```\n\n----------------------------------------\n\nTITLE: Partition Set Elements based on Condition\nDESCRIPTION: Splits the set into two sets based on a predicate function. One set contains elements that satisfy the predicate, the other contains elements that don't.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set-dict.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\nlet partitionU: (t<'value, 'id>, (. 'value) => bool) => (t<'value, 'id>, t<'value, 'id>)\n```\n\nLANGUAGE: res\nCODE:\n```\nlet partition: (t<'value, 'id>, 'value => bool) => (t<'value, 'id>, t<'value, 'id>)\n```\n\nLANGUAGE: res\nCODE:\n```\nmodule IntCmp = Belt.Id.MakeComparable({\n  type t = int\n  let cmp = Pervasives.compare\n})\n\nlet isOdd = x => mod(x, 2) != 0\n\nlet s0 = Belt.Set.Dict.fromArray([1, 2, 3, 4, 5], ~cmp=IntCmp.cmp)\nlet (s1, s2) = s0->Belt.Set.Dict.partition(isOdd)\n\ns1->Belt.Set.Dict.toArray /* [1,3,5] */\ns2->Belt.Set.Dict.toArray /* [2,4] */\n```\n\n----------------------------------------\n\nTITLE: Binary search in sorted string array in ReScript\nDESCRIPTION: Function to perform binary search on a sorted string array. Returns the index of the found element or a negative number indicating the insertion point if not found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/sort-array-string.mdx#2025-04-18_snippet_5\n\nLANGUAGE: ReScript\nCODE:\n```\nlet binarySearch: (array(element), element) => int;\n```\n\n----------------------------------------\n\nTITLE: Dictionary Unsafe Get Operation\nDESCRIPTION: Type signature and example for directly retrieving values without safety checks.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/dict.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nlet unsafeGet: (t<'a>, key) => 'a\n```\n\nLANGUAGE: res\nCODE:\n```\nJs.Dict.unsafeGet(ages, \"Fred\") == 49\nJs.Dict.unsafeGet(ages, \"Paul\") // returns undefined\n```\n\n----------------------------------------\n\nTITLE: Maximum Value with Undefined in ReScript Belt.Set\nDESCRIPTION: Returns the maximum value from a Belt.Set collection. Returns undefined if the collection is empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set.mdx#2025-04-18_snippet_26\n\nLANGUAGE: res\nCODE:\n```\nlet maxUndefined: t<'value, 'id> => Js.undefined<'value>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet s0 = Belt.Set.make(~id=module(IntCmp))\nlet s1 = Belt.Set.fromArray([3,2,1,5], ~id=module(IntCmp))\n\ns0->Belt.Set.maxUndefined /* undefined */\ns1->Belt.Set.maxUndefined /* 5 */\n```\n\n----------------------------------------\n\nTITLE: Defining comparableU function in ReScript\nDESCRIPTION: Defines an uncurried function 'comparableU' that takes a comparison function and returns a Comparable module with a unique identity.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/id.mdx#2025-04-18_snippet_7\n\nLANGUAGE: ReScript\nCODE:\n```\nlet comparableU: (~cmp: [@bs] (('a, 'a) => int)) => (module BeltId.Comparable with type t = 'a);\n```\n\n----------------------------------------\n\nTITLE: Creating a Null_undefined Value in ReScript\nDESCRIPTION: Defines the 'return' function that constructs a value of Js.null_undefined('a) containing a value of 'a'.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/null-undefined.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reason\nCODE:\n```\nlet return: 'a => t('a);\n```\n\n----------------------------------------\n\nTITLE: Convert Float32Array to Localized String\nDESCRIPTION: Converts the Float32Array to a localized string representation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-32-array.mdx#2025-04-18_snippet_31\n\nLANGUAGE: rescript\nCODE:\n```\nlet toLocaleString: t => string;\n```\n\n----------------------------------------\n\nTITLE: Iterating Array Elements with Index using forEachi in ReScript\nDESCRIPTION: Function signature for forEachi that executes a provided function once for each element in the Uint8Array, also providing the element index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_41\n\nLANGUAGE: rescript\nCODE:\n```\nlet forEachi: ((. elt, int) => unit, t) => unit\n```\n\n----------------------------------------\n\nTITLE: Accessing and Modifying Uint16Array Elements in ReScript\nDESCRIPTION: Provides unsafe getter and setter functions for Uint16Array elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reason\nCODE:\n```\nlet unsafe_get: (t, int) => elt;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet unsafe_set: (t, int, elt) => unit;\n```\n\n----------------------------------------\n\nTITLE: Removing a value from a set in ReScript\nDESCRIPTION: Creates a new set with the given integer removed. If the value doesn't exist in the set, the original set is returned unchanged.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-int.mdx#2025-04-18_snippet_9\n\nLANGUAGE: reason\nCODE:\n```\nlet remove: (t, value) => t;\n```\n\n----------------------------------------\n\nTITLE: Defining the exn type in ReScript Exn module\nDESCRIPTION: Extends the built-in exn type with a private Error constructor that wraps JavaScript exceptions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/exn.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\ntype exn +=\n  pri\n  | Error(t);\n```\n\n----------------------------------------\n\nTITLE: Float toStringWithRadix Function\nDESCRIPTION: Function to convert a float to its string representation using specified radix base (2-36).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/float.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rescript\nCODE:\n```\nlet toStringWithRadix: (float, ~radix: int) => string\n```\n\n----------------------------------------\n\nTITLE: Example of Iterating Over String Set in ReScript\nDESCRIPTION: Demonstrates how to iterate over all elements in a string set using forEach, collecting values in a reference list.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-string.mdx#2025-04-18_snippet_32\n\nLANGUAGE: reasonml\nCODE:\n```\nlet s0 = Belt.Set.String.fromArray([|\"banana\", \"orange\", \"apple\"|]);\nlet acc = ref([]);\ns0->Belt.Set.String.forEach(x => {\n  acc := Belt.List.add(acc^, x)\n});\nacc; /* [\"orange\", \"banana\", \"apple\"] */\n```\n\n----------------------------------------\n\nTITLE: Get Storage Key - ReScript\nDESCRIPTION: External binding to retrieve a key at a given index in storage, returning an optional string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/dom/storage2.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nexternal key: (t, int) => option<string> = \"key\"\n```\n\n----------------------------------------\n\nTITLE: Copying within UInt32Array with range\nDESCRIPTION: Defines a function that copies a range of elements within the array to another position.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_11\n\nLANGUAGE: rescript\nCODE:\n```\nlet copyWithinFromRange: (~to_: int, ~start: int, ~end_: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Copying Sets in ReScript MutableSetString\nDESCRIPTION: Function signature for creating a copy of an existing set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\nlet copy: t => t\n```\n\n----------------------------------------\n\nTITLE: Accessing the ArrayBuffer with buffer in ReScript\nDESCRIPTION: Function signature for buffer that retrieves the underlying ArrayBuffer of a Uint8Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet buffer: t => Js_typed_array2.array_buffer\n```\n\n----------------------------------------\n\nTITLE: Splitting a Map Based on a Key in ReScript\nDESCRIPTION: Splits a map into two maps and an optional value based on a given key. Returns maps with keys less than and greater than the given key, and the value associated with the key if it exists.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map.mdx#2025-04-18_snippet_8\n\nLANGUAGE: reasonml\nCODE:\n```\nlet split: (t('k, 'v, 'id), 'k) => ((t('k, 'v, 'id), t('k, 'v, 'id)), option('v));\n```\n\n----------------------------------------\n\nTITLE: ReScript Promise Error Type\nDESCRIPTION: Type definition for Promise error handling\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/promise.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\ntype error\n```\n\n----------------------------------------\n\nTITLE: Set Storage Item - ReScript\nDESCRIPTION: External binding to set a key-value pair in storage.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/dom/storage2.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nexternal setItem: (t, string, string) => unit = \"setItem\"\n```\n\n----------------------------------------\n\nTITLE: FromOption Function Signatures\nDESCRIPTION: Function signatures for converting option types to nullable types.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/null.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromOption: option<'a> => t<'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet from_opt: option<'a> => t<'a>\n```\n\n----------------------------------------\n\nTITLE: Defining comparableU function in ReScript\nDESCRIPTION: Defines a function that creates a Comparable module using an uncurried comparison function. It takes a comparison function as a labeled argument and returns a module implementing the Comparable interface.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/id.mdx#2025-04-18_snippet_7\n\nLANGUAGE: ReScript\nCODE:\n```\nlet comparableU: (~cmp: (. 'a, 'a) => int) =>\n  module(Belt.Id.Comparable with type t = 'a)\n```\n\n----------------------------------------\n\nTITLE: Copying Elements with Source Index using copyWithinFrom in ReScript\nDESCRIPTION: Function signature for copyWithinFrom that copies a sequence of elements from a specified position within the Uint8Array to another position.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rescript\nCODE:\n```\nlet copyWithinFrom: (~to_: int, ~from: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Testing All Array Elements\nDESCRIPTION: Tests whether all elements in the array pass the provided function test.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_32\n\nLANGUAGE: rescript\nCODE:\n```\nlet every: ((. elt) => bool, t) => bool\n```\n\n----------------------------------------\n\nTITLE: Clearing a HashMap in ReScript\nDESCRIPTION: Clears all entries from a hash map using Belt.HashMap.String.clear.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-map-string.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet clear: t<'b> => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet hMap = Belt.HashMap.String.fromArray([(\"1\", \"1\")])\nBelt.HashMap.String.clear(hMap)\nBelt.HashMap.String.isEmpty(hMap) == true\n```\n\n----------------------------------------\n\nTITLE: Finding Index of Element\nDESCRIPTION: Function signature to find the first index of a specified element in the Int8Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_19\n\nLANGUAGE: res\nCODE:\n```\nlet indexOf: (elt, t) => int\n```\n\n----------------------------------------\n\nTITLE: Basic Array Operations\nDESCRIPTION: Core operations for accessing and modifying array elements and properties.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_int-8-array.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet unsafe_get: (t, int) => elt\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet unsafe_set: (t, int, elt) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet buffer: t => Js_typed_array2.array_buffer\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet byteLength: t => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet byteOffset: t => int\n```\n\n----------------------------------------\n\nTITLE: Extracting values from MapDict to an array\nDESCRIPTION: Function signature for extracting all values from a map as an array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_25\n\nLANGUAGE: reason\nCODE:\n```\nlet valuesToArray: t('k, 'a, 'id) => array('a);\n```\n\n----------------------------------------\n\nTITLE: Getting a value with exception in ReScript\nDESCRIPTION: Returns the element from the set that is equivalent to the given value. Raises an exception if no matching element exists.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-int.mdx#2025-04-18_snippet_38\n\nLANGUAGE: reason\nCODE:\n```\nlet getExn: (t, value) => value;\n```\n\n----------------------------------------\n\nTITLE: Join Operations for Float64Array\nDESCRIPTION: Functions to convert a Float64Array to a string by joining its elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-64-array.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rescript\nCODE:\n```\nlet join: t => string\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet joinWith: (string, t) => string\n```\n\n----------------------------------------\n\nTITLE: List Iteration Functions\nDESCRIPTION: Functions for iterating over list elements with and without index\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/list.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet iter: ((. 'a) => unit, t<'a>) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet iteri: ((. int, 'a) => unit, t<'a>) => unit\n```\n\n----------------------------------------\n\nTITLE: Reducing map with curried function in ReScript\nDESCRIPTION: Function signature for reducing a mutable map using a curried function. Computes the reduction over all bindings in increasing order of keys.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_13\n\nLANGUAGE: ReScript\nCODE:\n```\nlet reduce: (t<'a>, 'b, ('b, key, 'a) => 'b) => 'b\n```\n\n----------------------------------------\n\nTITLE: Example of fromString with Invalid Input\nDESCRIPTION: Shows that parsing a non-numeric string results in NaN.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/float.mdx#2025-04-18_snippet_38\n\nLANGUAGE: re\nCODE:\n```\n/* returns [_NaN] */\nJs.Float.fromString(\"foo\");\n```\n\n----------------------------------------\n\nTITLE: Counting Leading Zeros in 32-bit Integer in ReScript\nDESCRIPTION: Function that returns the number of leading zero bits in the 32-bit binary representation of the argument, equivalent to JavaScript's Math.clz32.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/math.mdx#2025-04-18_snippet_27\n\nLANGUAGE: reasonml\nCODE:\n```\nlet clz32: int => int;\n```\n\n----------------------------------------\n\nTITLE: Mapping with keys in MapDict\nDESCRIPTION: Function signature for transforming values in a map with access to their keys using a curried function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_55\n\nLANGUAGE: reason\nCODE:\n```\nlet mapWithKey: (t('k, 'a, 'id), ('k, 'a) => 'b) => t('k, 'b, 'id);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Undefined-Wrapped Value from ReScript Belt.Set.String\nDESCRIPTION: Gets a reference to a value in the set that matches the provided value. Returns undefined when the element does not exist, similar to the get function but with different return type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set-string.mdx#2025-04-18_snippet_37\n\nLANGUAGE: rescript\nCODE:\n```\nlet getUndefined: (t, value) => Js.undefined<value>\n```\n\n----------------------------------------\n\nTITLE: Array Creation Methods\nDESCRIPTION: Functions for creating new Int8Array instances\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_5\n\nLANGUAGE: reason\nCODE:\n```\nlet make: array(elt) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet fromBuffer: Js_typed_array.array_buffer => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet fromBufferOffset: (Js_typed_array.array_buffer, int) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet fromBufferRange: (Js_typed_array.array_buffer, ~offset: int, ~length: int) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet fromLength: int => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet from: Js_typed_array.array_like(elt) => t;\n```\n\n----------------------------------------\n\nTITLE: Vector Unsafe Get Operation\nDESCRIPTION: Retrieves an element without bounds checking.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/vector.mdx#2025-04-18_snippet_19\n\nLANGUAGE: res\nCODE:\n```\nlet unsafe_get: (t<'a>, int) => 'a\n```\n\n----------------------------------------\n\nTITLE: Using isFinite with NaN Values\nDESCRIPTION: Example showing that isFinite returns false when checking NaN values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/float.mdx#2025-04-18_snippet_5\n\nLANGUAGE: re\nCODE:\n```\n/* returns [false] */\nJs.Float.isFinite(Js.Float._NaN);\n```\n\n----------------------------------------\n\nTITLE: Adding a string to HashSetString\nDESCRIPTION: Adds a string key to the HashSetString. If the key already exists, the set remains unchanged.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-set-string.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet add: (t, key) => unit;\n```\n\n----------------------------------------\n\nTITLE: Defining Storage Type in ReScript\nDESCRIPTION: Defines the abstract type 't' for storage objects.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/dom/storage2.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reasonml\nCODE:\n```\ntype t\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Module Opening in ReScript\nDESCRIPTION: JSON configuration example showing how to open a project module globally using bsc-flags in rescript.json\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2024-01-11-release-11-0-0.mdx#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bsc-flags\": [\"-open Utils\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Reading a Float64 value from a DataView in ReScript\nDESCRIPTION: Function signature for getting a 64-bit floating point number from the specified byte offset with big-endian format.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_data-view.mdx#2025-04-18_snippet_20\n\nLANGUAGE: rescript\nCODE:\n```\nlet getFloat64: (t, int) => float\n```\n\n----------------------------------------\n\nTITLE: Mapping MutableQueue with Uncurried Function in ReScript\nDESCRIPTION: Function to map over the queue elements using an uncurried function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-queue.mdx#2025-04-18_snippet_14\n\nLANGUAGE: rescript\nCODE:\n```\nlet mapU: (t('a), [@bs] ('a => 'b)) => t('b);\n```\n\n----------------------------------------\n\nTITLE: Dictionary Keys Operation\nDESCRIPTION: Function signature for retrieving all dictionary keys.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/dict.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\nlet keys: t<'a> => array<string>\n```\n\n----------------------------------------\n\nTITLE: Implementing Lower Bound Polymorphic Variants in ReScript\nDESCRIPTION: This example demonstrates how to create a lower bound polymorphic variant that defines a minimum set of constructors that must be included when extending the type. The basicBlueTone type requires at least Blue, DeepBlue, and LightBlue constructors.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/polymorphic-variant.mdx#2025-04-18_snippet_13\n\nLANGUAGE: res\nCODE:\n```\ntype basicBlueTone<'a> = [> #Blue | #DeepBlue | #LightBlue ] as 'a\ntype color = basicBlueTone<[#Blue | #DeepBlue | #LightBlue | #Purple]>\n\nlet color: color = #Purple\n\n// This will fail due to missing minimum constructors:\ntype notWorking = basicBlueTone<[#Purple]>\n```\n\n----------------------------------------\n\nTITLE: Defining HashSet Type in ReScript\nDESCRIPTION: This code defines the type signature for the HashSet. It is a parameterized type that takes two type parameters: 'a for the element type and 'id for the unique identity.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-set.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\ntype t('a, 'id);\n```\n\n----------------------------------------\n\nTITLE: Adding a string to a HashSetString\nDESCRIPTION: Adds a string key to the HashSetString.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/hash-set-string.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\nlet add: (t, key) => unit\n```\n\n----------------------------------------\n\nTITLE: JSON Null Value in ReScript\nDESCRIPTION: Constant representing the JSON null value in ReScript's type system.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/json.mdx#2025-04-18_snippet_11\n\nLANGUAGE: reason\nCODE:\n```\nlet null: t;\n```\n\n----------------------------------------\n\nTITLE: Defining Float32Array Types in ReScript\nDESCRIPTION: Defines the element type, typed array type, and the Float32Array type alias.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype elt = float;\ntype typed_array('a) = Js_typed_array2.Float32Array.typed_array('a);\ntype t = typed_array(elt);\n```\n\n----------------------------------------\n\nTITLE: Removing Multiple Elements from Set in ReScript MutableSetString\nDESCRIPTION: Removes each element from an array from the set, providing a batch operation for removal.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_13\n\nLANGUAGE: reason\nCODE:\n```\nlet removeMany: (t, array(value)) => unit;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet set = Belt.MutableSet.String.fromArray([|\"apple\", \"banana\", \"orange\"|]);\n\nset->Belt.MutableSet.String.removeMany([|\"strawberry\", \"apple\", \"banana\", \"orange\"|]);\nset->Belt.MutableSet.String.toArray; /* [||] */\n```\n\n----------------------------------------\n\nTITLE: Sorting Array with Custom Comparator\nDESCRIPTION: Sorts the elements of the array in place using a custom comparison function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_17\n\nLANGUAGE: rescript\nCODE:\n```\nlet sortInPlaceWith: ((. elt, elt) => int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Using getMilliseconds Function in ReScript\nDESCRIPTION: Demonstrates the use of the getMilliseconds function to retrieve the milliseconds from the example date.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_25\n\nLANGUAGE: rescript\nCODE:\n```\nJs.Date.getMilliseconds(exampleDate) == 321.0\n```\n\n----------------------------------------\n\nTITLE: Converting Array to Locale-Specific String in ReasonML\nDESCRIPTION: The toLocaleString function converts an array to a string using the conventions of the current locale. Each element is converted using JavaScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array.mdx#2025-04-18_snippet_13\n\nLANGUAGE: ReasonML\nCODE:\n```\nlet toLocaleString: t<'a> => string\n```\n\nLANGUAGE: ReasonML\nCODE:\n```\nJs.Array.toLocaleString([Js.Date.make()])\n// returns \"3/19/2020, 10:52:11 AM\" for locale en_US.utf8\n// returns \"2020-3-19 10:52:11\" for locale de_DE.utf8\n```\n\n----------------------------------------\n\nTITLE: String substringToEnd Function in ReScript\nDESCRIPTION: The substringToEnd function extracts characters from a specified position to the end of the string. If start is less than or equal to zero, the entire string is returned, and if start exceeds the string length, an empty string is returned.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/string.mdx#2025-04-18_snippet_17\n\nLANGUAGE: res\nCODE:\n```\nlet substringToEnd: (~from: int, t) => t\n```\n\nLANGUAGE: res\nCODE:\n```\nJs.String.substringToEnd(~from=4, \"playground\") == \"ground\"\nJs.String.substringToEnd(~from=-3, \"playground\") == \"playground\"\nJs.String.substringToEnd(~from=12, \"playground\") == \"\"\n```\n\n----------------------------------------\n\nTITLE: Dictionary UnsafeGet Function Signature\nDESCRIPTION: Function signature for directly accessing dictionary values without safety checks\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/dict.mdx#2025-04-18_snippet_5\n\nLANGUAGE: reason\nCODE:\n```\nlet unsafeGet: (t('a), key) => 'a;\n```\n\n----------------------------------------\n\nTITLE: Filtering MapDict\nDESCRIPTION: Function signature for filtering key-value pairs in a map using a curried predicate function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_48\n\nLANGUAGE: reason\nCODE:\n```\nlet keep: (t('k, 'a, 'id), ('k, 'a) => bool) => t('k, 'a, 'id);\n```\n\n----------------------------------------\n\nTITLE: Convert Float32Array to String\nDESCRIPTION: Converts the Float32Array to a string representation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-32-array.mdx#2025-04-18_snippet_30\n\nLANGUAGE: rescript\nCODE:\n```\nlet toString: t => string;\n```\n\n----------------------------------------\n\nTITLE: Iterate Over Float32Array Elements\nDESCRIPTION: Executes a provided function once for each element in the Float32Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_40\n\nLANGUAGE: rescript\nCODE:\n```\nlet forEach: ((. elt) => unit, t) => unit\n```\n\n----------------------------------------\n\nTITLE: Setting Seconds and Milliseconds with setUTCSecondsMs in ReScript\nDESCRIPTION: Sets a Date's seconds and milliseconds according to UTC time. This function modifies the original Date object and returns the updated timestamp in milliseconds. Binds to JavaScript's Date.setUTCSeconds method.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_64\n\nLANGUAGE: res\nCODE:\n```\nlet setUTCSecondsMs: (t, ~seconds: float, ~milliseconds: float, unit) => float\n```\n\nLANGUAGE: res\nCODE:\n```\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet futureTime = Js.Date.setUTCSecondsMs(date1, ~seconds=56.0, ~milliseconds=789.0, ())\ndate1 == Js.Date.fromString(\"1973-12-29T21:30:56.789Z00:00\")\nfutureTime == Js.Date.getTime(date1)\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Specs in bsconfig.json for ReScript\nDESCRIPTION: Example of how to configure package specifications in bsconfig.json. This includes setting the module type to CommonJS and enabling in-source builds.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/build-configuration.mdx#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"package-specs\": {\n    \"module\": \"commonjs\",\n    \"in-source\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: List Filter Function Signature\nDESCRIPTION: Function to filter elements from a list based on a predicate function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/list.mdx#2025-04-18_snippet_16\n\nLANGUAGE: ReScript\nCODE:\n```\nlet filter: ((. 'a) => bool, t('a)) => t('a);\n```\n\n----------------------------------------\n\nTITLE: Reduce Array Elements from Right with Index\nDESCRIPTION: Applies a function against an accumulator and each element in the typed array from right to left to reduce it to a single value, with the element index as an additional parameter.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_type-s.mdx#2025-04-18_snippet_47\n\nLANGUAGE: res\nCODE:\n```\nlet reduceRighti: ((. 'b, elt, int) => 'b, 'b, t) => 'b\n```\n\n----------------------------------------\n\nTITLE: Filtering and Mapping a HashMap In-Place in ReScript\nDESCRIPTION: Filters out values for which the given function returns None, effectively removing or transforming entries in-place.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-map.mdx#2025-04-18_snippet_11\n\nLANGUAGE: rescript\nCODE:\n```\nlet keepMapInPlaceU: (t('key, 'value, 'id), [@bs] (('key, 'value) => option('value))) => unit;\n\nlet keepMapInPlace: (t('key, 'value, 'id), ('key, 'value) => option('value)) => unit;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nmodule IntHash =\n  Belt.Id.MakeHashable({\n    type t = int;\n    let hash = a => a;\n    let eq = (a, b) => a == b;\n  });\n  \nlet s0 = Belt.HashMap.make(~hintSize=10, ~id=(module IntHash));\nBelt.HashMap.set(s0, 1, \"value1\");\nBelt.HashMap.set(s0, 2, \"value2\");\n\nBelt.HashMap.keepMapInPlace(s0, (key, value) => {\n  key == 1 ? None : Some(value)\n});\n```\n\n----------------------------------------\n\nTITLE: Converting Float to Fixed-Point Notation with Custom Precision\nDESCRIPTION: Function that formats a float using fixed-point notation with a specified number of digits after the decimal point.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/float.mdx#2025-04-18_snippet_15\n\nLANGUAGE: re\nCODE:\n```\nlet toFixedWithPrecision: (float, ~digits: int) => string;\n```\n\n----------------------------------------\n\nTITLE: Finding Minimum Key (Undefined) in ReScript MapInt Module\nDESCRIPTION: Function signature for finding the minimum key in the map, returning undefined if not found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-int.mdx#2025-04-18_snippet_26\n\nLANGUAGE: rescript\nCODE:\n```\nlet minKeyUndefined: t<'a> => Js.undefined<key>\n```\n\n----------------------------------------\n\nTITLE: Creating a Union of MutableSets in ReasonML\nDESCRIPTION: Function signature for creating a new MutableSet containing all elements from two sets.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_23\n\nLANGUAGE: reasonml\nCODE:\n```\nlet union: (t('value, 'id), t('value, 'id)) => t('value, 'id);\n```\n\n----------------------------------------\n\nTITLE: Dictionary FromList Example\nDESCRIPTION: Example showing dictionary creation from a list of pairs.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/dict.mdx#2025-04-18_snippet_18\n\nLANGUAGE: rescript\nCODE:\n```\nlet capitals = Js.Dict.fromList(list{(\"Japan\", \"Tokyo\"), (\"France\", \"Paris\"), (\"Egypt\", \"Cairo\")})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Float32Array Properties in ReScript\nDESCRIPTION: Functions to get various properties of a Float32Array, such as buffer, byte length, and byte offset.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet buffer: t => Js_typed_array.array_buffer\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet byteLength: t => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet byteOffset: t => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet length: t => int\n```\n\n----------------------------------------\n\nTITLE: Extracting Values from a HashMap in ReScript\nDESCRIPTION: Returns an array containing all the values in the hash map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-map.mdx#2025-04-18_snippet_15\n\nLANGUAGE: rescript\nCODE:\n```\nlet valuesToArray: t('a, 'value, 'b) => array('value);\n```\n\nLANGUAGE: rescript\nCODE:\n```\nmodule IntHash =\n  Belt.Id.MakeHashable({\n    type t = int;\n    let hash = a => a;\n    let eq = (a, b) => a == b;\n  });\n  \nlet s0 = Belt.HashMap.make(~hintSize=10, ~id=(module IntHash));\nBelt.HashMap.set(s0, 1, \"value1\");\nBelt.HashMap.set(s0, 2, \"value2\");\n\nBelt.HashMap.valuesToArray(s0) == [|\"value1\", \"value2\"|];\n```\n\n----------------------------------------\n\nTITLE: Getting Minimum Value as Undefined from Set in ReScript\nDESCRIPTION: Returns the minimum value in the set as a JavaScript undefined value if empty, for interoperability with JavaScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-string.mdx#2025-04-18_snippet_56\n\nLANGUAGE: reasonml\nCODE:\n```\nlet minUndefined: t => Js.undefined(value);\n```\n\n----------------------------------------\n\nTITLE: Creating Empty Map in ReScript MapInt Module\nDESCRIPTION: Function signature for creating an empty map of type 't<'v>'.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-int.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet empty: t<'v>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Item from Storage in ReScript\nDESCRIPTION: External binding for getting an item from storage by key. Returns an option type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/dom/storage2.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reasonml\nCODE:\n```\nexternal getItem: (t, string) => option(string) = \"getItem\"\n```\n\n----------------------------------------\n\nTITLE: Finding minimum key in ReScript\nDESCRIPTION: Function signature for finding the minimum key in a mutable map, returning an option type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_24\n\nLANGUAGE: ReScript\nCODE:\n```\nlet minKey: t<'a> => option<key>\n```\n\n----------------------------------------\n\nTITLE: Testing Element Existence in MutableSet Example in ReasonML\nDESCRIPTION: Example showing how to check if particular elements exist in a MutableSet using the has function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_12\n\nLANGUAGE: reasonml\nCODE:\n```\nmodule IntCmp =\n  Belt.Id.MakeComparable({\n    type t = int;\n    let cmp = Pervasives.compare;\n  });\n\nlet set = Belt.MutableSet.fromArray([|1, 4, 2, 5|], ~id=(module IntCmp));\n\nset->Belt.MutableSet.has(3) /* false */\nset->Belt.MutableSet.has(1) /* true */\n```\n\n----------------------------------------\n\nTITLE: Copying a HashSetInt in ReScript\nDESCRIPTION: Creates a new HashSetInt with the same elements as the original.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-set-int.mdx#2025-04-18_snippet_6\n\nLANGUAGE: ReScript\nCODE:\n```\nlet copy: t => t;\n```\n\n----------------------------------------\n\nTITLE: Creating JSON Number Value in ReScript\nDESCRIPTION: Function signature for creating a JSON number value from a ReScript float.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/json.mdx#2025-04-18_snippet_13\n\nLANGUAGE: reason\nCODE:\n```\nlet number: float => t;\n```\n\n----------------------------------------\n\nTITLE: Int-to-Float Coercion in ReScript\nDESCRIPTION: Example of coercing an integer to a float using the :> operator in ReScript, allowing integers to be used in float operations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/primitive-types.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\nlet result = (1 :> float) +. 2.\n```\n\nLANGUAGE: js\nCODE:\n```\nvar result = 1 + 2;\n```\n\n----------------------------------------\n\nTITLE: Testing Any Element with Uncurried Predicate in ReasonML\nDESCRIPTION: Function signature for checking if at least one element in a MutableSet satisfies an uncurried predicate function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_43\n\nLANGUAGE: reasonml\nCODE:\n```\nlet someU: (t('value, 'id), [@bs] ('value => bool)) => bool;\n```\n\n----------------------------------------\n\nTITLE: Float Exponentiation in ReScript vs JavaScript\nDESCRIPTION: Demonstrates float exponentiation in ReScript and how it's converted to Math.pow() in JavaScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/overview.mdx#2025-04-18_snippet_11\n\nLANGUAGE: rescript\nCODE:\n```\n2.0 ** 3.0\n```\n\nLANGUAGE: javascript\nCODE:\n```\nMath.pow(2.0, 3.0)\n```\n\n----------------------------------------\n\nTITLE: Creating the union of two sets in ReScript\nDESCRIPTION: Returns a new set containing all elements from both input sets, with duplicates removed.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-int.mdx#2025-04-18_snippet_11\n\nLANGUAGE: reason\nCODE:\n```\nlet union: (t, t) => t;\n```\n\n----------------------------------------\n\nTITLE: HashSet Remove Operation\nDESCRIPTION: Removes a key from the HashSet.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-set-string.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\nlet remove: (t, key) => unit\n```\n\n----------------------------------------\n\nTITLE: Access Set Elements\nDESCRIPTION: Functions for accessing specific elements in the set with different return types and error handling.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set-dict.mdx#2025-04-18_snippet_8\n\nLANGUAGE: res\nCODE:\n```\nlet get: (t<'value, 'id>, 'value, ~cmp: cmp<'value, 'id>) => option<'value>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet getUndefined: (t<'value, 'id>, 'value, ~cmp: cmp<'value, 'id>) => Js.undefined<'value>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet getExn: (t<'value, 'id>, 'value, ~cmp: cmp<'value, 'id>) => 'value\n```\n\n----------------------------------------\n\nTITLE: Integer to String with Custom Precision in ReScript\nDESCRIPTION: Formats an integer with specified total digits, using either fixed-point or scientific notation based on the number's magnitude.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/int.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\n/* prints \"1.2e+8\" */\nJs.log(Js.Int.toPrecisionWithPrecision(123456789, ~digits=2))\n\n/* prints \"0.0\" */\nJs.log(Js.Int.toPrecisionWithPrecision(0, ~digits=2))\n```\n\n----------------------------------------\n\nTITLE: Getting Bytes Per Element Constant\nDESCRIPTION: Function signature to access the constant that represents the number of bytes per element in the Int8Array (1 byte).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_50\n\nLANGUAGE: res\nCODE:\n```\nlet _BYTES_PER_ELEMENT: int\n```\n\n----------------------------------------\n\nTITLE: Configuring ReScript for Idiomatic JS Output\nDESCRIPTION: This JSON configuration in bsconfig.json makes ReScript generate JS files alongside source files with a .bs.js extension, allowing for easier integration with existing JS projects.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/interop-with-js-build-systems.mdx#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"package-specs\": {\n    \"module\": \"commonjs\",\n    \"in-source\": true\n  },\n  \"suffix\": \".bs.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting values to array in ReScript\nDESCRIPTION: Function signature for extracting all values from a mutable map into an array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_23\n\nLANGUAGE: ReScript\nCODE:\n```\nlet valuesToArray: t<'a> => array<'a>\n```\n\n----------------------------------------\n\nTITLE: Finding Index of Element from Position\nDESCRIPTION: Function signature to find the first index of a specified element in the Int8Array, starting from a given position.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_20\n\nLANGUAGE: res\nCODE:\n```\nlet indexOfFrom: (elt, ~from: int, t) => int\n```\n\n----------------------------------------\n\nTITLE: Converting Int8Array to string in ReScript\nDESCRIPTION: Functions for converting an Int8Array to string representations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet toString: t => string\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet toLocaleString: t => string\n```\n\n----------------------------------------\n\nTITLE: Converting Belt.MutableSet to List in ReScript\nDESCRIPTION: The toList function returns a list of ordered set elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_9\n\nLANGUAGE: ReScript\nCODE:\n```\nlet toList: t<'value, 'id> => list<'value>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nmodule IntCmp = Belt.Id.MakeComparable({\n  type t = int\n  let cmp = Pervasives.compare\n})\n\nlet s0 = Belt.MutableSet.fromArray([3, 2, 1, 5], ~id=module(IntCmp))\n\ns0->Belt.MutableSet.toList /* [1,2,3,5] */\n```\n\n----------------------------------------\n\nTITLE: Defining Comparison Type Signature in ReScript\nDESCRIPTION: Type definition for comparison function with type parameters for value and identity to ensure type safety between different comparison functions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/id.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\ntype cmp<'a, 'id>\n```\n\n----------------------------------------\n\nTITLE: Creating Empty Undefined Value in ReScript\nDESCRIPTION: Returns the empty value, undefined.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/undefined.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reasonml\nCODE:\n```\nlet empty: t('a);\n```\n\n----------------------------------------\n\nTITLE: Testing if Any Element Passes\nDESCRIPTION: Tests whether at least one element in the array passes the provided function test.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_48\n\nLANGUAGE: rescript\nCODE:\n```\nlet some: ((. elt) => bool, t) => bool\n```\n\n----------------------------------------\n\nTITLE: Retrieving value for key in ReScript map (option return)\nDESCRIPTION: Returns the value associated with the given key wrapped in an option, or None if the key is not found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_32\n\nLANGUAGE: reasonml\nCODE:\n```\nlet get: (t('a), key) => option('a);\n```\n\n----------------------------------------\n\nTITLE: Uncurried Iteration Over Set in ReScript\nDESCRIPTION: Applies an uncurried function to each element of the set in increasing order. Used internally by the forEach function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-string.mdx#2025-04-18_snippet_30\n\nLANGUAGE: reasonml\nCODE:\n```\nlet forEachU: (t, [@bs] (value => unit)) => unit;\n```\n\n----------------------------------------\n\nTITLE: Converting MutableSet to List in ReScript\nDESCRIPTION: The 'toList' function converts a MutableSet to a list of ordered set elements. It takes a set as input and returns a list containing all elements in the set in ascending order.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_49\n\nLANGUAGE: reason\nCODE:\n```\nlet toList: t('value, 'id) => list('value);\n```\n\nLANGUAGE: reason\nCODE:\n```\nmodule IntCmp =\n  Belt.Id.MakeComparable({\n    type t = int;\n    let cmp = Pervasives.compare;\n  });\n\nlet s0 = Belt.MutableSet.fromArray([|3,2,1,5|], ~id=(module IntCmp));\n\ns0->Belt.MutableSet.toList; /* [1,2,3,5] */\n```\n\n----------------------------------------\n\nTITLE: Defining MakeComparableU module in ReScript\nDESCRIPTION: Defines a module functor that creates a Comparable module from a given module with a type t and an uncurried comparison function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/id.mdx#2025-04-18_snippet_5\n\nLANGUAGE: ReScript\nCODE:\n```\nmodule MakeComparableU: (M: {\n  type t\n  let cmp: (. t, t) => int\n}) => Comparable with type t = M.t\n```\n\n----------------------------------------\n\nTITLE: Testing All Elements with Index\nDESCRIPTION: Tests whether all elements in the array pass the provided function test, which includes the element index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_33\n\nLANGUAGE: rescript\nCODE:\n```\nlet everyi: ((. elt, int) => bool, t) => bool\n```\n\n----------------------------------------\n\nTITLE: Array Buffer Operations\nDESCRIPTION: Functions to access the underlying ArrayBuffer and its properties.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nlet buffer: t => Js_typed_array.array_buffer\n```\n\nLANGUAGE: res\nCODE:\n```\nlet byteLength: t => int\n```\n\nLANGUAGE: res\nCODE:\n```\nlet byteOffset: t => int\n```\n\n----------------------------------------\n\nTITLE: Array Properties and Metrics\nDESCRIPTION: Methods for accessing array properties like length, byte length and offset.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_type-s.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\nlet byteLength: t => int;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet byteOffset: t => int;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet length: t => int;\n```\n\n----------------------------------------\n\nTITLE: ReduceRight Operations for Float64Array\nDESCRIPTION: Functions to execute a reducer function on each element of a Float64Array from right to left.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-64-array.mdx#2025-04-18_snippet_22\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduceRight: ((. 'b, elt) => 'b, 'b, t) => 'b\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduceRighti: ((. 'b, elt, int) => 'b, 'b, t) => 'b\n```\n\n----------------------------------------\n\nTITLE: Converting Date to JSON in ReScript (Deprecated)\nDESCRIPTION: Deprecated method for converting a Date to JSON. It will be changed to return an option in a future release. Use toJSONUnsafe() instead.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_64\n\nLANGUAGE: ReScript\nCODE:\n```\nlet toJSON: t => string\n```\n\n----------------------------------------\n\nTITLE: Filtering Array Elements with Index\nDESCRIPTION: Function signature to create a new array with elements that pass a condition that includes their index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_35\n\nLANGUAGE: res\nCODE:\n```\nlet filteri: ((. elt, int) => bool, t) => t\n```\n\n----------------------------------------\n\nTITLE: Defining ArrayBuffer Type in ReScript\nDESCRIPTION: Type definition for JavaScript ArrayBuffer binding in ReScript, representing a fixed-length raw binary data buffer.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype array_buffer\n```\n\n----------------------------------------\n\nTITLE: Undefined Value Definition in ReScript\nDESCRIPTION: Signature for the undefined value of type Js.null_undefined.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/null-undefined.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet undefined: t<'a>\n```\n\n----------------------------------------\n\nTITLE: Accessing ArrayBuffer with buffer\nDESCRIPTION: Function signature to get the underlying ArrayBuffer from an Int8Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\nlet buffer: t => Js_typed_array.array_buffer\n```\n\n----------------------------------------\n\nTITLE: Extracting Array Slice from Position\nDESCRIPTION: Returns a new array containing elements from the start index to the end of the array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_27\n\nLANGUAGE: rescript\nCODE:\n```\nlet sliceFrom: (int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Creating Difference Between Two Sets in ReScript\nDESCRIPTION: Returns a new set containing elements from the first set that don't exist in the second set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-string.mdx#2025-04-18_snippet_23\n\nLANGUAGE: reasonml\nCODE:\n```\nlet diff: (t, t) => t;\n```\n\n----------------------------------------\n\nTITLE: Finding maximum key-value pair in ReScript\nDESCRIPTION: Function signature for finding the maximum key-value pair in a mutable map, returning an option type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_30\n\nLANGUAGE: ReScript\nCODE:\n```\nlet maximum: t<'a> => option<(key, 'a)>\n```\n\n----------------------------------------\n\nTITLE: Getting byte offset of Uint8ClampedArray\nDESCRIPTION: Returns the offset (in bytes) of the Uint8ClampedArray from the start of its ArrayBuffer.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\nlet byteOffset: t => int\n```\n\n----------------------------------------\n\nTITLE: Defining HashSet Types in ReScript\nDESCRIPTION: This snippet shows the type signatures for the HashSet instances created with custom hash functions. It demonstrates how the compiler infers different types for HashSets with different hash functions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/hash-set.mdx#2025-04-18_snippet_1\n\nLANGUAGE: ReScript\nCODE:\n```\nlet s0: Belt.HashSet.t<int, I0.identity>\nlet s1: Belt.HashSet.t<int, I1.identity>\n```\n\n----------------------------------------\n\nTITLE: Hypot Function in ReScript\nDESCRIPTION: Returns the square root of the sum of squares of its two arguments (the Pythagorean formula).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/math.mdx#2025-04-18_snippet_41\n\nLANGUAGE: rescript\nCODE:\n```\nlet hypot: (float, float) => float;\n```\n\n----------------------------------------\n\nTITLE: Compiled JavaScript for Module Import\nDESCRIPTION: The JavaScript code generated by the ReScript compiler when dynamically importing an entire module. Shows how the compiler handles the import path and stores the result in a variable.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2023-06-05-first-class-dynamic-import-support.mdx#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nasync function main() {\n  var Utils = await import(\"./MathUtils.mjs\");\n\n  var twoPlusTwo = Utils.add(2, 2);\n  console.log(twoPlusTwo);\n}\n```\n\n----------------------------------------\n\nTITLE: Raising standard JavaScript Error\nDESCRIPTION: Function that raises a standard JavaScript Error with the provided message and includes a stack trace.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/exn.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\nlet raiseError: string => 'a;\n```\n\n----------------------------------------\n\nTITLE: Checking if a key exists in MapString module (ReScript)\nDESCRIPTION: Function that checks if a specific key exists in the map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-string.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reason\nCODE:\n```\nlet has: (t('v), key) => bool;\n```\n\n----------------------------------------\n\nTITLE: Array Transformation Methods\nDESCRIPTION: Methods for transforming and extracting array data.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_float-64-array.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet slice: (~start: int, ~end_: int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet copy: t => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet sliceFrom: (int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet subarray: (~start: int, ~end_: int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet subarrayFrom: (int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Array Ordering Methods in ReScript\nDESCRIPTION: Functions to reverse and sort the array in place, with optional custom comparison function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-32-array.mdx#2025-04-18_snippet_7\n\nLANGUAGE: res\nCODE:\n```\nlet reverseInPlace: t => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet sortInPlace: t => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet sortInPlaceWith: ((. elt, elt) => int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Iterating Over MutableSet Elements in ReasonML\nDESCRIPTION: Function signature for applying a function to each element of the set in increasing order.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_35\n\nLANGUAGE: reasonml\nCODE:\n```\nlet forEach: (t('value, 'id), 'value => unit) => unit;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Values from MutableSet in ReScript\nDESCRIPTION: The get method returns an option type containing the reference of a value if it exists in the set, using the specified comparator. Returns None if the element does not exist.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\nlet get: (t, value) => option<value>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet s0 = Belt.MutableSet.Int.fromArray([1, 2, 3, 4, 5])\n\ns0->Belt.MutableSet.Int.get(3) /* Some(3) */\ns0->Belt.MutableSet.Int.get(20) /* None */\n```\n\n----------------------------------------\n\nTITLE: Defining Option Type in ReScript\nDESCRIPTION: Type definition for the Option type alias.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/option.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype t<'a> = option<'a>\n```\n\n----------------------------------------\n\nTITLE: Signature for flatMapU Function in ReScript Result Module\nDESCRIPTION: Function signature for flatMapU, an uncurried version of flatMap.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/result.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nlet flatMapU: (t<'a, 'c>, (. 'a) => t<'b, 'c>) => t<'b, 'c>\n```\n\n----------------------------------------\n\nTITLE: Filtering Set in ReScript MutableSetString\nDESCRIPTION: Creates a new set with only elements that satisfy a predicate function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_29\n\nLANGUAGE: reason\nCODE:\n```\nlet keep: (t, value => bool) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet hasFiveChars = x => String.length(x) == 5;\n\nlet s0 = Belt.MutableSet.String.fromArray([|\"apple\", \"orange\", \"banana\"|]);\nlet s1 = s0->Belt.MutableSet.String.keep(hasFiveChars);\n\ns1->Belt.MutableSet.String.toArray; /* [|\"apple\"|] */\n```\n\n----------------------------------------\n\nTITLE: Using unsafe_set with Arrays in ReScript\nDESCRIPTION: Demonstrates the unsafe_set function that sets a value at a given position in an array without bounds checking. This function modifies the original array and can have unpredictable results if the index is out of bounds.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/array-2.mdx#2025-04-18_snippet_30\n\nLANGUAGE: res\nCODE:\n```\nlet unsafe_set: (array<'a>, int, 'a) => unit\n```\n\nLANGUAGE: res\nCODE:\n```\nlet arr = [100, 101, 102, 103]\nJs.Array2.unsafe_set(arr, 3, 99)\n// result is [100, 101, 102, 99];\n\nJs.Array2.unsafe_set(arr, 4, 88)\n// result is [100, 101, 102, 99, 88]\n\nJs.Array2.unsafe_set(arr, 6, 77)\n// result is [100, 101, 102, 99, 88, <1 empty item>, 77]\n\nJs.Array2.unsafe_set(arr, -1, 66)\n// you don't want to know.\n```\n\n----------------------------------------\n\nTITLE: Removing Multiple Elements from MutableSet Example in ReasonML\nDESCRIPTION: Example showing how to remove multiple elements from a MutableSet using the removeMany function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_22\n\nLANGUAGE: reasonml\nCODE:\n```\nmodule IntCmp =\n  Belt.Id.MakeComparable({\n    type t = int;\n    let cmp = Pervasives.compare;\n  });\n\nlet set = Belt.MutableSet.fromArray([|1, 2, 3, 4|],~id=(module IntCmp));\n\nset->Belt.MutableSet.removeMany([|5, 4, 3, 2, 1|]);\nset->Belt.MutableSet.toArray; /* [||] */\n```\n\n----------------------------------------\n\nTITLE: Creating ArrayBuffer in ReScript\nDESCRIPTION: Function signature for creating a new ArrayBuffer of specified length with elements initialized to 0.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_array-buffer.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet make: int => t\n```\n\n----------------------------------------\n\nTITLE: Removing multiple keys from ReScript mutable map\nDESCRIPTION: Removes the bindings for all keys in the provided array from the map as an in-place modification.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_38\n\nLANGUAGE: reasonml\nCODE:\n```\nlet removeMany: (t('a), array(key)) => unit;\n```\n\n----------------------------------------\n\nTITLE: Stringifying Any Value to JSON in ReScript\nDESCRIPTION: Function signature for attempting to convert any ReScript value to a JSON string. Returns None if the value cannot be converted.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/json.mdx#2025-04-18_snippet_28\n\nLANGUAGE: reason\nCODE:\n```\nlet stringifyAny: 'a => option(string);\n```\n\n----------------------------------------\n\nTITLE: Vector Element Access\nDESCRIPTION: Retrieves an element at a specified index. Raises Invalid_argument if index is out of bounds.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/vector.mdx#2025-04-18_snippet_14\n\nLANGUAGE: res\nCODE:\n```\nlet get: (t<'a>, int) => 'a\n```\n\n----------------------------------------\n\nTITLE: List Cons Function Signature in ReScript\nDESCRIPTION: Defines the signature for the 'cons' function, which adds an element to the beginning of a list.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/list.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet cons: ('a, t<'a>) => t<'a>\n```\n\n----------------------------------------\n\nTITLE: Iterating through a set with uncurried function in ReScript\nDESCRIPTION: Applies an uncurried function to each element of the set in increasing order. Used for optimized performance in certain scenarios.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-int.mdx#2025-04-18_snippet_17\n\nLANGUAGE: reason\nCODE:\n```\nlet forEachU: (t, [@bs] (value => unit)) => unit;\n```\n\n----------------------------------------\n\nTITLE: Array Creation Methods\nDESCRIPTION: Factory methods for creating new Int32Array instances\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array-2_int-32-array.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet make: array<elt> => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromBuffer: Js_typed_array2.array_buffer => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromLength: int => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet create: array<elt> => t\n```\n\n----------------------------------------\n\nTITLE: GetExn Function Signature\nDESCRIPTION: Function signature for getting the value from a nullable type with exception handling.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/null.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet getExn: t<'a> => 'a\n```\n\n----------------------------------------\n\nTITLE: Convert Float32Array to String\nDESCRIPTION: Returns a string representation of the Float32Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_30\n\nLANGUAGE: rescript\nCODE:\n```\nlet toString: t => string\n```\n\n----------------------------------------\n\nTITLE: Reading 64-bit Float (Big Endian)\nDESCRIPTION: Gets a 64-bit floating point number at the specified byte offset from the start of the DataView using big-endian format.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_data-view.mdx#2025-04-18_snippet_20\n\nLANGUAGE: reasonml\nCODE:\n```\nlet getFloat64: (t, int) => float;\n```\n\n----------------------------------------\n\nTITLE: Retrieving an element from UInt32Array\nDESCRIPTION: Defines a function that retrieves an element at a specified index without bounds checking.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet unsafe_get: (t, int) => elt\n```\n\n----------------------------------------\n\nTITLE: Binary search implementation for integer arrays\nDESCRIPTION: Performs a binary search on a sorted integer array. Returns the index of the found element or a negative value that can be used to determine the insertion point when the element is not found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/sort-array-int.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet binarySearch: (array(element), element) => int;\n```\n\n----------------------------------------\n\nTITLE: Checking for element existence in a string set in ReScript\nDESCRIPTION: Returns a boolean indicating whether the given element exists in the set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set-string.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet has: (t, value) => bool\n```\n\n----------------------------------------\n\nTITLE: Create Float32Array from ArrayBuffer with Range\nDESCRIPTION: Creates a new Float32Array view of the ArrayBuffer starting at the specified byte offset with the specified length. Raises `Js.Exn.Error` if invalid.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-32-array.mdx#2025-04-18_snippet_54\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromBufferRange: (Js_typed_array2.array_buffer, ~offset: int, ~length: int) => t;\n```\n\n----------------------------------------\n\nTITLE: Finding minimum key-value pair as undefined in MapString module (ReScript)\nDESCRIPTION: Function to find the key-value pair with the minimum key, returning an undefined type for JavaScript interoperability.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-string.mdx#2025-04-18_snippet_30\n\nLANGUAGE: reason\nCODE:\n```\nlet minUndefined: t('v) => Js.undefined((key, 'v));\n```\n\n----------------------------------------\n\nTITLE: Creating empty MutableSetInt\nDESCRIPTION: Creates and returns an empty set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet make: unit => t\n```\n\n----------------------------------------\n\nTITLE: Setting an element in UInt32Array\nDESCRIPTION: Defines a function that sets an element at a specified index without bounds checking.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet unsafe_set: (t, int, elt) => unit\n```\n\n----------------------------------------\n\nTITLE: Checking Set Empty State in ReScript MutableSetString\nDESCRIPTION: Function signature for checking if a set is empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_6\n\nLANGUAGE: res\nCODE:\n```\nlet isEmpty: t => bool\n```\n\n----------------------------------------\n\nTITLE: Copying Elements within Array using copyWithin in ReScript\nDESCRIPTION: Function signature for copyWithin that copies a sequence of elements within the Uint8Array to a specified position.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\nlet copyWithin: (~to_: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Map ID Type Definition - ReScript\nDESCRIPTION: Type definition for the map identity needed for creating empty maps.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\ntype id<'key, 'id> = Belt_Id.comparable<'key, 'id>\n```\n\n----------------------------------------\n\nTITLE: Checking key existence in ReScript\nDESCRIPTION: Function signature for checking if a key exists in a mutable map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_5\n\nLANGUAGE: ReScript\nCODE:\n```\nlet has: (t<'a>, key) => bool\n```\n\n----------------------------------------\n\nTITLE: Defining Tagged JSON Value Types in ReScript\nDESCRIPTION: Defines a variant type that represents the concrete types a JSON value can have, along with their associated data.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/json.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\ntype tagged_t =\n  | JSONFalse\n  | JSONTrue\n  | JSONNull\n  | JSONString(string)\n  | JSONNumber(float)\n  | JSONObject(Js_dict.t(t))\n  | JSONArray(array(t));\n```\n\n----------------------------------------\n\nTITLE: Extraction from Undefined with Exception\nDESCRIPTION: Function to extract a value from an undefined container, potentially throwing an exception.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/undefined.mdx#2025-04-18_snippet_6\n\nLANGUAGE: res\nCODE:\n```\nlet getExn: t<'a> => 'a\n```\n\n----------------------------------------\n\nTITLE: Setting Uint16Array Data in ReScript\nDESCRIPTION: Functions to set array data and set array data with an offset.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_uint-16-array.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ReScript\nCODE:\n```\nlet setArray: (array(elt), t) => unit;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet setArrayOffset: (array(elt), int, t) => unit;\n```\n\n----------------------------------------\n\nTITLE: Converting Array to String with Custom Separator\nDESCRIPTION: Function signature to join all elements of the Int8Array into a string with a custom separator.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_22\n\nLANGUAGE: res\nCODE:\n```\nlet joinWith: (string, t) => string\n```\n\n----------------------------------------\n\nTITLE: Checking element existence in MutableSetInt\nDESCRIPTION: Checks if a given integer exists in the set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nlet has: (t, value) => bool\n```\n\n----------------------------------------\n\nTITLE: Copying Elements Within Array with Start Position\nDESCRIPTION: Function signature for copying elements within the array from a start index to a specified position.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_10\n\nLANGUAGE: res\nCODE:\n```\nlet copyWithinFrom: (~to_: int, ~from: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Legacy Undefined to Option Conversion in ReScript\nDESCRIPTION: Function signature for the legacy function to convert undefined to option values. This is likely maintained for backward compatibility.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/undefined.mdx#2025-04-18_snippet_14\n\nLANGUAGE: res\nCODE:\n```\nlet to_opt: t<'a> => option<'a>\n```\n\n----------------------------------------\n\nTITLE: Checking if a HashSetString contains a key\nDESCRIPTION: Returns true if the HashSetString contains the specified string key.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/hash-set-string.mdx#2025-04-18_snippet_7\n\nLANGUAGE: res\nCODE:\n```\nlet has: (t, key) => bool\n```\n\n----------------------------------------\n\nTITLE: Computing Hyperbolic Arcsine in ReScript\nDESCRIPTION: Function that returns the hyperbolic arcsine (in radians) of the argument, equivalent to JavaScript's Math.asinh.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/math.mdx#2025-04-18_snippet_13\n\nLANGUAGE: reasonml\nCODE:\n```\nlet asinh: float => float;\n```\n\n----------------------------------------\n\nTITLE: Testing if All Elements Satisfy a Condition with Belt.List in ReScript\nDESCRIPTION: The every function checks if all elements in a list satisfy a given predicate function. It returns true only if the predicate returns true for every element.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/list.mdx#2025-04-18_snippet_46\n\nLANGUAGE: rescript\nCODE:\n```\nlet isBelow10 = value => value < 10\n\nlist{1, 9, 8, 2}->Belt.List.every(isBelow10) /* true */\n\nlist{1, 99, 8, 2}->Belt.List.every(isBelow10) /* false */\n```\n\n----------------------------------------\n\nTITLE: Creating subarray from UInt32Array with range\nDESCRIPTION: Defines a function that returns a new typed array that shares the same ArrayBuffer but represents a portion of the array's elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_28\n\nLANGUAGE: rescript\nCODE:\n```\nlet subarray: (~start: int, ~end_: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Signature of everyU function in Belt.Range\nDESCRIPTION: Type signature for the uncurried version of every function that checks if a predicate is true for all elements in a range.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/range.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reason\nCODE:\n```\nlet everyU: (int, int, [@bs] (int => bool)) => bool;\n```\n\n----------------------------------------\n\nTITLE: Updating a value in MapDict\nDESCRIPTION: Function signature for updating a value associated with a key using a curried function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_43\n\nLANGUAGE: reason\nCODE:\n```\nlet update: (t('a, 'b, 'id), 'a, option('b) => option('b), ~cmp: cmp('a, 'id)) => t('a, 'b, 'id);\n```\n\n----------------------------------------\n\nTITLE: Using toLowerCase function in ReScript\nDESCRIPTION: Converts a string to lowercase using locale-insensitive case mappings. Transforms characters based on the Unicode Character Database rules.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/string-2.mdx#2025-04-18_snippet_30\n\nLANGUAGE: rescript\nCODE:\n```\nlet toLowerCase: t => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.String2.toLowerCase(\"ABC\") == \"abc\"\nJs.String2.toLowerCase(`ΣΠ`) == `σπ`\nJs.String2.toLowerCase(`ΠΣ`) == `πς`\n```\n\n----------------------------------------\n\nTITLE: Defining the t type in ReScript Exn module\nDESCRIPTION: Defines the t type which represents JavaScript exception objects.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/exn.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype t;\n```\n\n----------------------------------------\n\nTITLE: Clearing a Belt.HashMap.String instance in ReScript\nDESCRIPTION: Removes all key-value pairs from the hash map using the clear function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/hash-map-string.mdx#2025-04-18_snippet_2\n\nLANGUAGE: ReScript\nCODE:\n```\nlet clear: t<'b> => unit\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet hMap = Belt.HashMap.String.fromArray([(\"1\", \"1\")])\nBelt.HashMap.String.clear(hMap)\nBelt.HashMap.String.isEmpty(hMap) == true\n```\n\n----------------------------------------\n\nTITLE: Checking if a string set is empty in ReScript\nDESCRIPTION: Returns a boolean indicating whether the given set is empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set-string.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet isEmpty: t => bool\n```\n\n----------------------------------------\n\nTITLE: Creating a DataView with offset and length in ReScript\nDESCRIPTION: Function signature for creating a DataView from an ArrayBuffer with a specified byte offset and length.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_data-view.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromBufferRange: (Js_typed_array.array_buffer, ~offset: int, ~length: int) => t\n```\n\n----------------------------------------\n\nTITLE: Iterating through a HashSetString\nDESCRIPTION: Executes the provided function for each element in the HashSetString.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/hash-set-string.mdx#2025-04-18_snippet_10\n\nLANGUAGE: res\nCODE:\n```\nlet forEach: (t, key => unit) => unit\n```\n\n----------------------------------------\n\nTITLE: Reduce Float32Array Elements Right to Left with Index\nDESCRIPTION: Applies a function against an accumulator and each element in the Float32Array (from right to left) to reduce it to a single value, providing the element index as a parameter.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_47\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduceRighti: ((. 'b, elt, int) => 'b, 'b, t) => 'b\n```\n\n----------------------------------------\n\nTITLE: Checking for element existence in HashSetInt in ReScript\nDESCRIPTION: Returns a boolean indicating whether the given key exists in the HashSetInt.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-set-int.mdx#2025-04-18_snippet_7\n\nLANGUAGE: ReScript\nCODE:\n```\nlet has: (t, key) => bool;\n```\n\n----------------------------------------\n\nTITLE: Getting Storage Length in ReScript\nDESCRIPTION: External binding for getting the number of items in storage.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/dom/storage2.mdx#2025-04-18_snippet_6\n\nLANGUAGE: reasonml\nCODE:\n```\nexternal length: t => int = \"length\"\n```\n\n----------------------------------------\n\nTITLE: Example of toExponential with Integer Value\nDESCRIPTION: Shows how toExponential formats an integer in scientific notation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/float.mdx#2025-04-18_snippet_9\n\nLANGUAGE: re\nCODE:\n```\n/* prints \"7.7e+1\" */\nJs.log @@ Js.Float.toExponential(77.);\n```\n\n----------------------------------------\n\nTITLE: HashSet Uncurried Reduce - ReScript\nDESCRIPTION: Reduces the HashSet elements using an uncurried reducer function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-set-int.mdx#2025-04-18_snippet_11\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduceU: (t, 'c, (. 'c, key) => 'c) => 'c\n```\n\n----------------------------------------\n\nTITLE: Accessing Ref Contents in ReScript\nDESCRIPTION: Shows how to access the value stored in a ref through its contents field. The value is retrieved without modifying the reference.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/mutation.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reason\nCODE:\n```\nlet five = myValue.contents; // 5\n```\n\nLANGUAGE: ml\nCODE:\n```\nlet five = myValue.contents (* 5 *)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar five = myValue.contents;\n```\n\n----------------------------------------\n\nTITLE: Binary Search Function Signatures\nDESCRIPTION: Function signatures for binary search operations, with both uncurried and curried versions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/sort-array.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nlet binarySearchByU: (array<'a>, 'a, (. 'a, 'a) => int) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet binarySearchBy: (array<'a>, 'a, ('a, 'a) => int) => int\n```\n\n----------------------------------------\n\nTITLE: Declaring and Using a Record Type in ReScript\nDESCRIPTION: This snippet demonstrates how to define a custom location record type with string, tuple, and array fields, and then create an instance of that type with specific values. It shows the basic syntax for type declarations in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/language_type.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\ntype location = {\n  name: string,\n  coordinates: (float, float),\n  keywords: array<string>,\n}\n\nlet uluru: location = {\n  name: \"Uluru\",\n  coordinates: (-25.344490, 131.035431),\n  keywords: [\"Rock\", \"Australia\"],\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar uluru_coordinates = [-25.34449, 131.035431];\n\nvar uluru_keywords = [\"Rock\", \"Australia\"];\n\nvar uluru = {\n  name: \"Uluru\",\n  coordinates: uluru_coordinates,\n  keywords: uluru_keywords,\n};\n```\n\n----------------------------------------\n\nTITLE: Array Access Operations\nDESCRIPTION: Basic array access operations including unsafe get and set methods\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_int-32-array.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reason\nCODE:\n```\nlet unsafe_get: (t, int) => elt;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet unsafe_set: (t, int, elt) => unit;\n```\n\n----------------------------------------\n\nTITLE: Unsafe Set Element Operation for Float32Array\nDESCRIPTION: Provides unsafe operation to set an element at a specific index in a Float32Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-32-array.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet unsafe_set: (t, int, elt) => unit;\n```\n\n----------------------------------------\n\nTITLE: Creating Slice from Position\nDESCRIPTION: Function signature to extract a section of the Int8Array from a specified start position to the end.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_27\n\nLANGUAGE: res\nCODE:\n```\nlet sliceFrom: (int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Elements to Set in ReScript MutableSetString\nDESCRIPTION: Adds each element from an array to the set, providing a batch operation to extend a set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_10\n\nLANGUAGE: reason\nCODE:\n```\nlet mergeMany: (t, array(value)) => unit;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet set = Belt.MutableSet.String.make();\n\nset->Belt.MutableSet.String.mergeMany([|\"apple\", \"banana\", \"orange\", \"strawberry\"|]);\nset->Belt.MutableSet.String.toArray; /* [|\"apple\", \"banana\", \"orange\", \"strawberry\"|] */\n```\n\n----------------------------------------\n\nTITLE: Create Subarray of Float32Array from Position\nDESCRIPTION: Returns a new Float32Array from the given starting index to the end. Shares the same buffer.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_29\n\nLANGUAGE: rescript\nCODE:\n```\nlet subarrayFrom: (int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Defining JavaScript Null Type in ReScript\nDESCRIPTION: Type definition for JavaScript's null primitive value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/types.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\ntype null_val\n```\n\n----------------------------------------\n\nTITLE: Array Creation Methods\nDESCRIPTION: Methods for creating new Uint8Arrays from various sources including buffers and existing arrays\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_6\n\nLANGUAGE: reason\nCODE:\n```\nlet make: array(elt) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet fromBuffer: Js_typed_array.array_buffer => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet from: Js_typed_array.array_like(elt) => t;\n```\n\n----------------------------------------\n\nTITLE: Checking Element Existence in ReScript MutableSetString\nDESCRIPTION: Function signature for checking if a string exists in the set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_7\n\nLANGUAGE: res\nCODE:\n```\nlet has: (t, value) => bool\n```\n\n----------------------------------------\n\nTITLE: RegExp Flag Checks\nDESCRIPTION: Functions for checking various RegExp flags.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/re.mdx#2025-04-18_snippet_12\n\nLANGUAGE: res\nCODE:\n```\nlet multiline: t => bool\n```\n\nLANGUAGE: res\nCODE:\n```\nlet source: t => string\n```\n\nLANGUAGE: res\nCODE:\n```\nlet sticky: t => bool\n```\n\nLANGUAGE: res\nCODE:\n```\nlet unicode: t => bool\n```\n\n----------------------------------------\n\nTITLE: Example of Creating Empty String Set in ReScript\nDESCRIPTION: Demonstrates how to create an empty string set instance.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-string.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reasonml\nCODE:\n```\nlet s0 = Belt.Set.String.empty;\n```\n\n----------------------------------------\n\nTITLE: Create Float32Array from Array\nDESCRIPTION: Creates a new Float32Array from a ReScript array of floating point values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-32-array.mdx#2025-04-18_snippet_51\n\nLANGUAGE: rescript\nCODE:\n```\nlet make: array(elt) => t;\n```\n\n----------------------------------------\n\nTITLE: Sort Float32Array In-Place\nDESCRIPTION: Sorts the elements of the Float32Array in-place and returns the modified array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_16\n\nLANGUAGE: rescript\nCODE:\n```\nlet sortInPlace: t => t\n```\n\n----------------------------------------\n\nTITLE: Multiple Code Point String Creation\nDESCRIPTION: Function signature for creating a string from multiple Unicode code points.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/string.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\nlet fromCodePointMany: array<int> => t\n```\n\n----------------------------------------\n\nTITLE: Viewing Inferred Signature in ReScript (OCaml Syntax)\nDESCRIPTION: Shows the inferred signature of the same ReScript file, but in OCaml syntax. This demonstrates how the bsc compiler can work with both Reason and OCaml syntaxes for ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/try.mdx#2025-04-18_snippet_4\n\nLANGUAGE: ocaml\nCODE:\n```\nval fib: int => int\n```\n\n----------------------------------------\n\nTITLE: ReScript Promise Race Implementation\nDESCRIPTION: Function signature for creating a Promise that resolves with the first settled Promise from an array\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/promise.mdx#2025-04-18_snippet_11\n\nLANGUAGE: res\nCODE:\n```\nlet race: array<t<'a>> => t<'a>\n```\n\n----------------------------------------\n\nTITLE: Reducing Array to Value\nDESCRIPTION: Applies a function against an accumulator and each element to reduce to a single value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_44\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduce: ((. 'b, elt) => 'b, 'b, t) => 'b\n```\n\n----------------------------------------\n\nTITLE: Creating DOM Elements in ReScript React\nDESCRIPTION: Demonstrates how to create DOM elements using ReactDOMRe.createDOMElementVariadic in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/elements-and-jsx.mdx#2025-04-18_snippet_7\n\nLANGUAGE: ReScript\nCODE:\n```\nReactDOMRe.createDOMElementVariadic(\"div\", ~props=ReactDOM.domProps(~className=\"card\", ()), []);\n```\n\n----------------------------------------\n\nTITLE: Reducing List Elements with Index and Uncurried Function in ReScript\nDESCRIPTION: The reduceWithIndexU function is the uncurried version of reduceWithIndex for performance optimization.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/list.mdx#2025-04-18_snippet_40\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduceWithIndexU: (t<'a>, 'b, (. 'b, 'a, int) => 'b) => 'b\n```\n\n----------------------------------------\n\nTITLE: HashSet Copy Operation\nDESCRIPTION: Creates a new HashSet with the same elements as the input set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-set-string.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet copy: t => t\n```\n\n----------------------------------------\n\nTITLE: Getting bucket histogram of HashSetInt in ReScript\nDESCRIPTION: Returns an array representing the bucket histogram of the HashSetInt.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-set-int.mdx#2025-04-18_snippet_18\n\nLANGUAGE: ReScript\nCODE:\n```\nlet getBucketHistogram: t => array(int);\n```\n\n----------------------------------------\n\nTITLE: Manipulating Float32Array Data in ReScript\nDESCRIPTION: Functions for in-place operations on Float32Array, such as copying, filling, reversing, and sorting.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet copyWithin: (~to_: int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet copyWithinFrom: (~to_: int, ~from: int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet copyWithinFromRange: (~to_: int, ~start: int, ~end_: int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fillInPlace: (elt, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fillFromInPlace: (elt, ~from: int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fillRangeInPlace: (elt, ~start: int, ~end_: int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet reverseInPlace: t => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet sortInPlace: t => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet sortInPlaceWith: ((. elt, elt) => int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Finding maximum key-value pair in ReScript map (option return)\nDESCRIPTION: Returns the key-value pair with the maximum key wrapped in an option, or None if the map is empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_30\n\nLANGUAGE: reasonml\nCODE:\n```\nlet maximum: t('a) => option((key, 'a));\n```\n\n----------------------------------------\n\nTITLE: Unsafe Copying Between Arrays Without Bounds Checking in ReScript\nDESCRIPTION: The blitUnsafe function copies elements from one array to another without bounds checking, which could lead to runtime errors if indices are out of range.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/array.mdx#2025-04-18_snippet_33\n\nLANGUAGE: ReScript\nCODE:\n```\nlet blitUnsafe: (~src: array<'a>, ~srcOffset: int, ~dst: array<'a>, ~dstOffset: int, ~len: int) => unit\n```\n\n----------------------------------------\n\nTITLE: IsNullable Function Signature\nDESCRIPTION: Function signature for checking if a value is null or undefined\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/nullable.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet isNullable: t<'a> => bool\n```\n\n----------------------------------------\n\nTITLE: Accessing Base 2 Logarithm of E in ReScript\nDESCRIPTION: Constant for the base 2 logarithm of E (approximately 1.4426950408889634), equivalent to JavaScript's Math.LOG2E.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/math.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reasonml\nCODE:\n```\nlet _LOG2E: float;\n```\n\n----------------------------------------\n\nTITLE: Map PartitionU Function Signature\nDESCRIPTION: Uncurried version of partition operation for splitting map entries.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rescript\nCODE:\n```\nlet partitionU: (t<'k, 'v, 'id>, (. 'k, 'v) => bool) => (t<'k, 'v, 'id>, t<'k, 'v, 'id>)\n```\n\n----------------------------------------\n\nTITLE: Splitting a Set in ReScript\nDESCRIPTION: The split function divides a set into two parts based on a value, returning elements less than and greater than the provided value, along with a boolean indicating if the value exists in the set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-int.mdx#2025-04-18_snippet_39\n\nLANGUAGE: reasonml\nCODE:\n```\nlet split: (t, value) => ((t, t), bool);\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet s0 = Belt.Set.Int.fromArray([|1,2,3,4,5|]);\n\nlet ((smaller, larger), present) = s0->Belt.Set.Int.split(3);\n\npresent; /* true */\nsmaller->Belt.Set.Int.toArray; /* [|1,2|] */\nlarger->Belt.Set.Int.toArray; /* [|4,5|] */\n```\n\n----------------------------------------\n\nTITLE: Finding Minimum Value with Undefined Return\nDESCRIPTION: Function that returns the minimum value of the collection as undefined when empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set.mdx#2025-04-18_snippet_35\n\nLANGUAGE: reason\nCODE:\n```\nlet minUndefined: t('value, 'id) => Js.undefined('value);\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet s0 = Belt.Set.make(~id=(module IntCmp));\nlet s1 = Belt.Set.fromArray([|3,2,1,5|], ~id=(module IntCmp));\n\ns0->Belt.Set.minUndefined; /* undefined */\ns1->Belt.Set.minUndefined; /* 1 */\n```\n\n----------------------------------------\n\nTITLE: Creating JSON Number Array in ReScript\nDESCRIPTION: Function signature for creating a JSON array of numbers from a ReScript array of floats.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/json.mdx#2025-04-18_snippet_18\n\nLANGUAGE: reason\nCODE:\n```\nlet numberArray: array(float) => t;\n```\n\n----------------------------------------\n\nTITLE: Float Addition in ReScript vs JavaScript\nDESCRIPTION: Shows float addition in ReScript, which uses a specialized operator (+.), and its corresponding JavaScript output.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/overview.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\n23.0 +. 1.0\n```\n\nLANGUAGE: javascript\nCODE:\n```\n23.0 + 1.0\n```\n\n----------------------------------------\n\nTITLE: Creating MutableQueue from Array in ReScript\nDESCRIPTION: The 'fromArray' function creates a queue from an array, adding each element to the queue in order.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-queue.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromArray: array<'a> => t<'a>\n```\n\n----------------------------------------\n\nTITLE: Checking equality of two string sets in ReScript\nDESCRIPTION: Returns a boolean indicating whether two sets are equal.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set-string.mdx#2025-04-18_snippet_16\n\nLANGUAGE: rescript\nCODE:\n```\nlet eq: (t, t) => bool\n```\n\n----------------------------------------\n\nTITLE: Defining HashMap Types in ReScript\nDESCRIPTION: Defines the type of hash tables from 'key' to 'value', and the identity type needed for creating an empty hash map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-map.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype t('key, 'value, 'id);\n\ntype id('a, 'id) = BeltId.hashable('a, 'id);\n```\n\n----------------------------------------\n\nTITLE: Removing an integer from a hash set in ReScript\nDESCRIPTION: Function signature for removing a specific integer key from the hash set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/hash-set-int.mdx#2025-04-18_snippet_8\n\nLANGUAGE: res\nCODE:\n```\nlet remove: (t, key) => unit\n```\n\n----------------------------------------\n\nTITLE: Defining Set Type\nDESCRIPTION: Defines the abstract type for sets.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\ntype t\n```\n\n----------------------------------------\n\nTITLE: Installing @rescript/react NPM Package\nDESCRIPTION: Command to install @rescript/react package using npm. This package is required for using React with ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/installation.mdx#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @rescript/react\n```\n\n----------------------------------------\n\nTITLE: Concise Pattern Matching with Wildcard in ReScript\nDESCRIPTION: Shortened version using wildcard pattern matching. While more concise, this approach sacrifices exhaustiveness checking.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_20\n\nLANGUAGE: rescript\nCODE:\n```\nlet optionBoolToBool = opt => {\n  switch opt {\n  | Some(true) => true\n  | _ => false\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction optionBoolToBool(opt) {\n  if (opt !== undefined && opt) {\n    return true;\n  } else {\n    return false;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reversing UInt32Array in place\nDESCRIPTION: Defines a function that reverses the order of elements in the array in place.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_15\n\nLANGUAGE: rescript\nCODE:\n```\nlet reverseInPlace: t => t\n```\n\n----------------------------------------\n\nTITLE: Accessing Int32Array Buffer Properties\nDESCRIPTION: Functions to access the underlying ArrayBuffer and related properties.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-32-array.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet buffer: t => Js_typed_array.array_buffer\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet byteLength: t => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet byteOffset: t => int\n```\n\n----------------------------------------\n\nTITLE: Defining Value Type in ReScript MutableSetString\nDESCRIPTION: Type definition for the set elements, specified as string type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\ntype value = string\n```\n\n----------------------------------------\n\nTITLE: Setting Hours, Minutes, Seconds, and Milliseconds with setUTCHoursMSMs in ReScript\nDESCRIPTION: Sets a Date's hours, minutes, seconds, and milliseconds according to UTC time. This function modifies the original Date object and returns the updated timestamp in milliseconds. Binds to JavaScript's Date.setUTCHours method.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_56\n\nLANGUAGE: res\nCODE:\n```\nlet setUTCHoursMSMs: (\n  t,\n  ~hours: float,\n  ~minutes: float,\n  ~seconds: float,\n  ~milliseconds: float,\n  unit,\n) => float\n```\n\nLANGUAGE: res\nCODE:\n```\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet futureTime = Js.Date.setUTCHoursMSMs(\n  date1,\n  ~hours=22.0,\n  ~minutes=46.0,\n  ~seconds=37.0,\n  ~milliseconds=494.0,\n  (),\n)\ndate1 == Js.Date.fromString(\"1973-11-29T22:46:37.494Z00:00\")\nfutureTime == Js.Date.getTime(date1)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Maximum Value as Undefined from Belt.MutableSet.String in ReScript\nDESCRIPTION: The 'maxUndefined' function returns the maximum value of the collection. It returns undefined if the collection is empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_38\n\nLANGUAGE: reasonml\nCODE:\n```\nlet maxUndefined: t => Js.undefined(value);\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet s0 = Belt.MutableSet.String.make();\nlet s1 = Belt.MutableSet.String.fromArray([|\"apple\", \"orange\"|]);\n\ns0->Belt.MutableSet.String.maxUndefined; /* undefined */\ns1->Belt.MutableSet.String.maxUndefined; /* orange */\n```\n\n----------------------------------------\n\nTITLE: Converting Array to Localized String\nDESCRIPTION: Returns a localized string representing the array and its elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_31\n\nLANGUAGE: rescript\nCODE:\n```\nlet toLocaleString: t => string\n```\n\n----------------------------------------\n\nTITLE: Adding multiple keys to a HashSetString\nDESCRIPTION: Adds all the string keys from the provided array to the HashSetString.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/hash-set-string.mdx#2025-04-18_snippet_17\n\nLANGUAGE: res\nCODE:\n```\nlet mergeMany: (t, array<key>) => unit\n```\n\n----------------------------------------\n\nTITLE: Reducing Set in ReScript MutableSetString\nDESCRIPTION: Accumulates a single value by applying a function to each element with an accumulator.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_23\n\nLANGUAGE: reason\nCODE:\n```\nlet reduce: (t, 'a, ('a, value) => 'a) => 'a;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet s0 = Belt.MutableSet.String.fromArray([|\"apple\", \"orange\"|]);\ns0->Belt.MutableSet.String.reduce(0, (acc, element) =>\n  acc + String.length(element)\n); /* 11 */\n```\n\n----------------------------------------\n\nTITLE: Example of using findFirstBy in MapDict\nDESCRIPTION: Example code showing how to use findFirstBy to search for a key-value pair in a map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_11\n\nLANGUAGE: reason\nCODE:\n```\nmodule IntCmp =\n  Belt.Id.MakeComparable({\n    type t = int;\n    let cmp = Pervasives.compare;\n  });\n\nlet s0 = Belt.Map.Dict.fromArray([|(4, \"4\"), (1, \"1\"), (2, \"2\"), (3, \"3\")|], ~cmp=IntCmp.cmp);\n\nBelt.Map.Dict.findFirstBy(s0, (k, _) => k == 4) == Some((4, \"4\"));\n```\n\n----------------------------------------\n\nTITLE: Uncurried find first by predicate for MapDict\nDESCRIPTION: Function signature for finding the first key-value pair matching a predicate using uncurried function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_9\n\nLANGUAGE: reason\nCODE:\n```\nlet findFirstByU: (t('k, 'v, 'id), [@bs] (('k, 'v) => bool)) => option(('k, 'v));\n```\n\n----------------------------------------\n\nTITLE: Searching and Joining Uint8Array in ReScript\nDESCRIPTION: Functions for searching elements and joining array elements into strings.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet includes: (elt, t) => bool;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet indexOf: (elt, t) => int;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet indexOfFrom: (elt, ~from: int, t) => int;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet join: t => string;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet joinWith: (string, t) => string;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet lastIndexOf: (elt, t) => int;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet lastIndexOfFrom: (elt, ~from: int, t) => int;\n```\n\n----------------------------------------\n\nTITLE: Inline Attribute Example in ReScript\nDESCRIPTION: Demonstrates the usage of @inline attribute to inline a value into its usage sites.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/attribute.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\n@inline\nlet mode = \"dev\"\n\nlet mode2 = mode\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar mode2 = \"dev\";\n```\n\n----------------------------------------\n\nTITLE: Creating Uint16Array Instances in ReScript\nDESCRIPTION: Functions for creating new Uint16Array instances from various sources.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_9\n\nLANGUAGE: reason\nCODE:\n```\nlet _BYTES_PER_ELEMENT: int;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet make: array(elt) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet fromBuffer: Js_typed_array.array_buffer => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet fromBufferOffset: (Js_typed_array.array_buffer, int) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet fromBufferRange: (Js_typed_array.array_buffer, ~offset: int, ~length: int) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet fromLength: int => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet from: Js_typed_array.array_like(elt) => t;\n```\n\n----------------------------------------\n\nTITLE: Getting the byte length of a DataView in ReScript\nDESCRIPTION: Function signature for retrieving the length (in bytes) of the DataView.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_data-view.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet byteLength: t => int\n```\n\n----------------------------------------\n\nTITLE: Example of fromString with Empty String\nDESCRIPTION: Demonstrates that parsing an empty string yields zero.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/float.mdx#2025-04-18_snippet_34\n\nLANGUAGE: re\nCODE:\n```\n/* returns 0 */\nJs.Float.fromString(\"\");\n```\n\n----------------------------------------\n\nTITLE: Creating a Subarray from Range\nDESCRIPTION: Function signature to create a new array from a section of the existing array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_28\n\nLANGUAGE: res\nCODE:\n```\nlet subarray: (~start: int, ~end_: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Int16Array Constants and Construction\nDESCRIPTION: Constants and constructor methods for creating Int16Array instances.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-16-array.mdx#2025-04-18_snippet_14\n\nLANGUAGE: res\nCODE:\n```\nlet _BYTES_PER_ELEMENT: int\n```\n\nLANGUAGE: res\nCODE:\n```\nlet make: array<elt> => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet fromBuffer: Js_typed_array.array_buffer => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet fromBufferOffset: (Js_typed_array.array_buffer, int) => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet fromBufferRange: (Js_typed_array.array_buffer, ~offset: int, ~length: int) => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet fromLength: int => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet from: Js_typed_array.array_like<elt> => t\n```\n\n----------------------------------------\n\nTITLE: Defining the Undefined Type in ReScript\nDESCRIPTION: Defines a local type alias 't' for JavaScript's undefined type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/undefined.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\ntype t<'a> = Js.undefined<'a>\n```\n\n----------------------------------------\n\nTITLE: Convert Array to String\nDESCRIPTION: Returns a string representation of the array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-64-array.mdx#2025-04-18_snippet_30\n\nLANGUAGE: reason\nCODE:\n```\nlet toString: t => string;\n```\n\n----------------------------------------\n\nTITLE: Converting Uint16Array to String in ReScript\nDESCRIPTION: Functions for converting a Uint16Array to a string representation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_uint-16-array.mdx#2025-04-18_snippet_6\n\nLANGUAGE: ReScript\nCODE:\n```\nlet join: t => string;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet joinWith: (string, t) => string;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet toString: t => string;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet toLocaleString: t => string;\n```\n\n----------------------------------------\n\nTITLE: Creating a Belt.MutableSet.Int from an array in ReScript\nDESCRIPTION: Creates a new set from an array of integers using the fromArray function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nlet fromArray: array<value> => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet s0 = Belt.MutableSet.Int.fromArray([1, 3, 2, 4])\n\ns0->Belt.MutableSet.Int.toArray /* [1, 2, 3, 4] */\n```\n\n----------------------------------------\n\nTITLE: Finding minimum key with undefined in ReScript\nDESCRIPTION: Function signature for finding the minimum key in a mutable map, returning an undefined type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_25\n\nLANGUAGE: ReScript\nCODE:\n```\nlet minKeyUndefined: t<'a> => Js.undefined<key>\n```\n\n----------------------------------------\n\nTITLE: Finding the minimum key-value pair in MapDict\nDESCRIPTION: Function signature for finding the key-value pair with the smallest key in a map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_30\n\nLANGUAGE: reason\nCODE:\n```\nlet minimum: t('k, 'a, 'b) => option(('k, 'a));\n```\n\n----------------------------------------\n\nTITLE: URI Error Raiser\nDESCRIPTION: Function signature for raising a JavaScript URIError.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/exn.mdx#2025-04-18_snippet_14\n\nLANGUAGE: rescript\nCODE:\n```\nlet raiseUriError: string => 'a\n```\n\n----------------------------------------\n\nTITLE: Computing Set Union in ReasonML\nDESCRIPTION: Demonstrates how to compute the union of two sets, combining all elements from both sets and removing duplicates.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set.mdx#2025-04-18_snippet_13\n\nLANGUAGE: reasonml\nCODE:\n```\nlet union: (t('value, 'id), t('value, 'id)) => t('value, 'id);\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet s0 = Belt.Set.fromArray([|5,2,3,5,6|], ~id=(module IntCmp));\nlet s1 = Belt.Set.fromArray([|5,2,3,1,5,4|], ~id=(module IntCmp));\nlet union = Belt.Set.union(s0, s1);\nunion->Belt.Set.toArray; /* [|1,2,3,4,5,6|] */\n```\n\n----------------------------------------\n\nTITLE: Creating a string set from a sorted array in ReScript\nDESCRIPTION: Creates a new set from a sorted array of string elements, assuming the input is already sorted.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set-string.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromSortedArrayUnsafe: array<value> => t\n```\n\n----------------------------------------\n\nTITLE: Error Raiser\nDESCRIPTION: Function signature for raising a JavaScript Error with stacktrace.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/exn.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\nlet raiseError: string => 'a\n```\n\n----------------------------------------\n\nTITLE: Curried reduce for MapDict\nDESCRIPTION: Function signature for reducing all key-value pairs into a single value using curried function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_15\n\nLANGUAGE: reason\nCODE:\n```\nlet reduce: (t('k, 'a, 'id), 'b, ('b, 'k, 'a) => 'b) => 'b;\n```\n\n----------------------------------------\n\nTITLE: Accessing the Underlying ArrayBuffer\nDESCRIPTION: Returns the ArrayBuffer that this DataView references.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_data-view.mdx#2025-04-18_snippet_5\n\nLANGUAGE: reasonml\nCODE:\n```\nlet buffer: t => Js_typed_array2.array_buffer;\n```\n\n----------------------------------------\n\nTITLE: Array Slicing Methods in ReScript\nDESCRIPTION: Functions to create new arrays from portions of the existing array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-32-array.mdx#2025-04-18_snippet_10\n\nLANGUAGE: res\nCODE:\n```\nlet slice: (~start: int, ~end_: int, t) => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet copy: t => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet sliceFrom: (int, t) => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet subarray: (~start: int, ~end_: int, t) => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet subarrayFrom: (int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Value with Exception from Belt.MutableSet.String in ReScript\nDESCRIPTION: The 'getExn' function is similar to 'get' but raises an exception when the element does not exist.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_41\n\nLANGUAGE: reasonml\nCODE:\n```\nlet getExn: (t, value) => value;\n```\n\n----------------------------------------\n\nTITLE: Extracting keys from Belt.HashMap.String in ReScript\nDESCRIPTION: Creates an array of keys from the hash map using the keysToArray function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/hash-map-string.mdx#2025-04-18_snippet_14\n\nLANGUAGE: ReScript\nCODE:\n```\nlet keysToArray: t<'a> => array<key>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet hMap = Belt.HashMap.String.make(~hintSize=10)\nBelt.HashMap.String.set(hMap, \"1\", \"value1\")\nBelt.HashMap.String.set(hMap, \"2\", \"value2\")\n\nBelt.HashMap.String.keysToArray(hMap) == [\"1\", \"2\"]\n```\n\n----------------------------------------\n\nTITLE: Array Access with Option Type\nDESCRIPTION: Example showing how array access now returns an option type in ReScript 11\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/migrate-to-v11.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\nlet firstItem = myArray[0] // Some(\"hello\")\n```\n\n----------------------------------------\n\nTITLE: Filter Float32Array Elements\nDESCRIPTION: Creates a new Float32Array with elements that pass the test function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-32-array.mdx#2025-04-18_snippet_34\n\nLANGUAGE: rescript\nCODE:\n```\nlet filter: ((. elt) => bool, t) => t;\n```\n\n----------------------------------------\n\nTITLE: HashSet Curried ForEach\nDESCRIPTION: Iterates over the HashSet elements using a curried callback function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-set-string.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rescript\nCODE:\n```\nlet forEach: (t, key => unit) => unit\n```\n\n----------------------------------------\n\nTITLE: Creating MapDict from an array\nDESCRIPTION: Function signature for creating a map from an array of key-value pairs, using a comparison function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_23\n\nLANGUAGE: reason\nCODE:\n```\nlet fromArray: (array(('k, 'a)), ~cmp: cmp('k, 'id)) => t('k, 'a, 'id);\n```\n\n----------------------------------------\n\nTITLE: Creating a union of two sets in ReScript with MutableSetInt\nDESCRIPTION: Returns a new set containing all elements from both input sets. This operation creates a new set without modifying the originals.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_14\n\nLANGUAGE: rescript\nCODE:\n```\nlet union: (t, t) => t;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet s0 = Belt.MutableSet.Int.fromArray([|5,2,3,5,6|]);\nlet s1 = Belt.MutableSet.Int.fromArray([|5,2,3,1,5,4|]);\nlet union = Belt.MutableSet.Int.union(s0, s1);\nunion->Belt.MutableSet.Int.toArray; /* [|1,2,3,4,5,6|] */\n```\n\n----------------------------------------\n\nTITLE: Defining ArrayBuffer Type in ReScript\nDESCRIPTION: Type definition for JavaScript ArrayBuffer, which is a fixed-length raw binary data buffer.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array-2.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype array_buffer\n```\n\n----------------------------------------\n\nTITLE: Accessing Base 10 Logarithm of E in ReScript\nDESCRIPTION: Constant for the base 10 logarithm of E (approximately 0.4342944819032518), equivalent to JavaScript's Math.LOG10E.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/math.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reasonml\nCODE:\n```\nlet _LOG10E: float;\n```\n\n----------------------------------------\n\nTITLE: Setting Minutes, Seconds, and Milliseconds in ReScript\nDESCRIPTION: Sets a Date's minutes, seconds, and milliseconds according to current time zone. Returns milliseconds since epoch for the updated Date. Modifies the original Date.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_49\n\nLANGUAGE: rescript\nCODE:\n```\nlet setMinutesSMs: (t, ~minutes: float, ~seconds: float, ~milliseconds: float, unit) => float\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet futureTime = Js.Date.setMinutesSMs(\n  date1,\n  ~minutes=34.0,\n  ~seconds=56.0,\n  ~milliseconds=789.0,\n  (),\n)\ndate1 == Js.Date.fromString(\"1973-11-29T21:34:56.789Z00:00\")\nfutureTime == Js.Date.getTime(date1)\n```\n\n----------------------------------------\n\nTITLE: Find Element Index from Position\nDESCRIPTION: Returns the first index at which a given element can be found in the typed array, starting from the specified index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_type-s.mdx#2025-04-18_snippet_20\n\nLANGUAGE: res\nCODE:\n```\nlet indexOfFrom: (elt, ~from: int, t) => int\n```\n\n----------------------------------------\n\nTITLE: Iter Function Implementation in ReScript\nDESCRIPTION: Function for iterating over contained values in Js.null_undefined.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/null-undefined.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nlet iter: (t<'a>, (. 'a) => unit) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet maybeSay = (maybeMessage: Js.null_undefined<string>) =>\n  Js.Null_undefined.iter(maybeMessage, (. message) => Js.log(message))\n```\n\n----------------------------------------\n\nTITLE: Extracting values as array in MapString module (ReScript)\nDESCRIPTION: Function to extract all values from a map as an array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-string.mdx#2025-04-18_snippet_24\n\nLANGUAGE: reason\nCODE:\n```\nlet valuesToArray: t('v) => array('v);\n```\n\n----------------------------------------\n\nTITLE: Basic Array Operations\nDESCRIPTION: Essential array operations including getting/setting values, accessing buffer properties and array manipulation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_float-32-array.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet unsafe_get: (t, int) => elt\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet unsafe_set: (t, int, elt) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet buffer: t => Js_typed_array2.array_buffer\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet byteLength: t => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet byteOffset: t => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet length: t => int\n```\n\n----------------------------------------\n\nTITLE: Reversing Array with reverseInPlace in ReScript\nDESCRIPTION: Function signature for reverseInPlace that reverses the order of elements in a Uint8Array, modifying the array in place.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_15\n\nLANGUAGE: rescript\nCODE:\n```\nlet reverseInPlace: t => t\n```\n\n----------------------------------------\n\nTITLE: Finding Last Index of Element from Position\nDESCRIPTION: Function signature to find the last index of a specified element in the Int8Array, searching backwards from a given position.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_24\n\nLANGUAGE: res\nCODE:\n```\nlet lastIndexOfFrom: (elt, ~from: int, t) => int\n```\n\n----------------------------------------\n\nTITLE: Setting Float32Array Data in ReScript\nDESCRIPTION: Functions to set data in a Float32Array from a regular array, with optional offset.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet setArray: (array(elt), t) => unit;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet setArrayOffset: (array(elt), int, t) => unit;\n```\n\n----------------------------------------\n\nTITLE: Joining Uint8ClampedArray elements as string\nDESCRIPTION: Joins all elements of the array into a string with commas.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_21\n\nLANGUAGE: res\nCODE:\n```\nlet join: t => string\n```\n\n----------------------------------------\n\nTITLE: RegExp Flags Accessor\nDESCRIPTION: Function signature for accessing RegExp flags.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/re.mdx#2025-04-18_snippet_8\n\nLANGUAGE: res\nCODE:\n```\nlet flags: t => string\n```\n\n----------------------------------------\n\nTITLE: List Length Function Signature\nDESCRIPTION: Function to get the length of a list.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/list.mdx#2025-04-18_snippet_1\n\nLANGUAGE: ReScript\nCODE:\n```\nlet length: t('a) => int;\n```\n\n----------------------------------------\n\nTITLE: Example of fromString with Mixed Content\nDESCRIPTION: Shows that parsing a string with numeric prefix followed by non-numeric content results in NaN.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/float.mdx#2025-04-18_snippet_39\n\nLANGUAGE: re\nCODE:\n```\n/* returns [_NaN] */\nJs.Float.fromString(\"100a\");\n```\n\n----------------------------------------\n\nTITLE: Finding the maximum value in a set in ReScript\nDESCRIPTION: Returns the largest element in the set wrapped in an option type. Returns None if the set is empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-int.mdx#2025-04-18_snippet_34\n\nLANGUAGE: reason\nCODE:\n```\nlet maximum: t => option(value);\n```\n\n----------------------------------------\n\nTITLE: HashSet Bulk Add Operation - ReScript\nDESCRIPTION: Adds multiple keys from an array to the HashSet.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-set-int.mdx#2025-04-18_snippet_17\n\nLANGUAGE: rescript\nCODE:\n```\nlet mergeMany: (t, array<key>) => unit\n```\n\n----------------------------------------\n\nTITLE: Reversing Array In-Place\nDESCRIPTION: Function signature to reverse the order of elements in the array in-place.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_15\n\nLANGUAGE: res\nCODE:\n```\nlet reverseInPlace: t => t\n```\n\n----------------------------------------\n\nTITLE: Accessing Maximum Value with Option - ReScript\nDESCRIPTION: Returns the maximum value in a MutableSet.String collection wrapped in an Option type. Returns None if the collection is empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_9\n\nLANGUAGE: res\nCODE:\n```\nlet maximum: t => option<value>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet s0 = Belt.MutableSet.String.make()\nlet s1 = Belt.MutableSet.String.fromArray([\"apple\", \"orange\"])\n\ns0->Belt.MutableSet.String.maximum /* None */\ns1->Belt.MutableSet.String.maximum /* Some(\"orange\") */\n```\n\n----------------------------------------\n\nTITLE: Extracting Elements from Position\nDESCRIPTION: Function signature to extract a section of the array from a start position to the end.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_27\n\nLANGUAGE: res\nCODE:\n```\nlet sliceFrom: (int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Retrieving values from ReScript maps\nDESCRIPTION: Functions for getting values from the map with various fallback options.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-string.mdx#2025-04-18_snippet_7\n\nLANGUAGE: res\nCODE:\n```\nlet get: (t<'v>, key) => option<'v>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet getUndefined: (t<'v>, key) => Js.undefined<'v>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet getWithDefault: (t<'v>, key, 'v) => 'v\n```\n\nLANGUAGE: res\nCODE:\n```\nlet getExn: (t<'v>, key) => 'v\n```\n\n----------------------------------------\n\nTITLE: Array Manipulation Functions in ReScript\nDESCRIPTION: Functions for copying, filling, and modifying arrays in place.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/array-2.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet copyWithin: (t<'a>, ~to_: int) => t<'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet copyWithinFrom: (t<'a>, ~to_: int, ~from: int) => t<'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet copyWithinFromRange: (t<'a>, ~to_: int, ~start: int, ~end_: int) => t<'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fillInPlace: (t<'a>, 'a) => t<'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fillFromInPlace: (t<'a>, 'a, ~from: int) => t<'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fillRangeInPlace: (t<'a>, 'a, ~start: int, ~end_: int) => t<'a>\n```\n\n----------------------------------------\n\nTITLE: Array Reduction with Index (reducei) in ReScript\nDESCRIPTION: Function that reduces an array from left to right while providing access to element indices. Takes an array, reducer function with accumulator/element/index parameters, and initial value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/array-2.mdx#2025-04-18_snippet_16\n\nLANGUAGE: reasonml\nCODE:\n```\nlet reducei: (t('a), ('b, 'a, int) => 'b, 'b) => 'b;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet sumOfEvens = (accumulator, item, index) => {\n  if (index mod 2 == 0) {\n    accumulator + item;\n  } else {\n    accumulator;\n  }\n};\n\nJs.Array2.reducei([|2, 5, 1, 4, 3|], sumOfEvens, 0) == 6;\n```\n\n----------------------------------------\n\nTITLE: Removing an element from HashSetInt in ReScript\nDESCRIPTION: Removes the specified key from the HashSetInt.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-set-int.mdx#2025-04-18_snippet_8\n\nLANGUAGE: ReScript\nCODE:\n```\nlet remove: (t, key) => unit;\n```\n\n----------------------------------------\n\nTITLE: Array Search Methods in ReScript\nDESCRIPTION: Functions to search for elements in the array, including includes, indexOf, and lastIndexOf with various parameters.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-32-array.mdx#2025-04-18_snippet_8\n\nLANGUAGE: res\nCODE:\n```\nlet includes: (elt, t) => bool\n```\n\nLANGUAGE: res\nCODE:\n```\nlet indexOf: (elt, t) => int\n```\n\nLANGUAGE: res\nCODE:\n```\nlet indexOfFrom: (elt, ~from: int, t) => int\n```\n\nLANGUAGE: res\nCODE:\n```\nlet lastIndexOf: (elt, t) => int\n```\n\nLANGUAGE: res\nCODE:\n```\nlet lastIndexOfFrom: (elt, ~from: int, t) => int\n```\n\n----------------------------------------\n\nTITLE: Iterate Over Elements\nDESCRIPTION: Executes a provided function once for each element in the typed array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_type-s.mdx#2025-04-18_snippet_40\n\nLANGUAGE: res\nCODE:\n```\nlet forEach: ((. elt) => unit, t) => unit\n```\n\n----------------------------------------\n\nTITLE: TypeScript Discriminated Union Definition\nDESCRIPTION: Example of a TypeScript discriminated union representing different loading states. Each variant uses a 'state' property as its discriminator with string values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2023-04-17-improving-interop.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype LoadingState =\n  | { state: \"loading\"; ready: boolean }\n  | { state: \"error\"; message: string }\n  | { state: \"done\"; data: Data };\n```\n\n----------------------------------------\n\nTITLE: ToOption Function Signature in ReScript\nDESCRIPTION: Function signature for converting nullable type to Option type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/nullable.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rescript\nCODE:\n```\nlet toOption: t<'a> => option<'a>\n```\n\n----------------------------------------\n\nTITLE: Getting Value by Key (Undefined) in ReScript MapInt Module\nDESCRIPTION: Function signature for getting a value by its key, returning undefined if not found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-int.mdx#2025-04-18_snippet_34\n\nLANGUAGE: rescript\nCODE:\n```\nlet getUndefined: (t<'v>, key) => Js.undefined<'v>\n```\n\n----------------------------------------\n\nTITLE: Getting the size of a HashSetString\nDESCRIPTION: Returns the number of elements in the HashSetString.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/hash-set-string.mdx#2025-04-18_snippet_13\n\nLANGUAGE: res\nCODE:\n```\nlet size: t => int\n```\n\n----------------------------------------\n\nTITLE: Reduce Array Elements from Right\nDESCRIPTION: Applies a function against an accumulator and each element in the typed array from right to left to reduce it to a single value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_type-s.mdx#2025-04-18_snippet_46\n\nLANGUAGE: res\nCODE:\n```\nlet reduceRight: ((. 'b, elt) => 'b, 'b, t) => 'b\n```\n\n----------------------------------------\n\nTITLE: Creating a DataView from ArrayBuffer (alias) in ReScript\nDESCRIPTION: Alternative function signature for creating a DataView from an ArrayBuffer (equivalent to make).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_data-view.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromBuffer: Js_typed_array.array_buffer => t\n```\n\n----------------------------------------\n\nTITLE: Computing Float Absolute Value in ReScript\nDESCRIPTION: Function that returns the absolute value of a float argument, equivalent to JavaScript's Math.abs for floating-point numbers.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/math.mdx#2025-04-18_snippet_9\n\nLANGUAGE: reasonml\nCODE:\n```\nlet abs_float: float => float;\n```\n\n----------------------------------------\n\nTITLE: List Map Reverse Function Signature in ReScript\nDESCRIPTION: Defines the signature for the 'mapRev' function, which maps a function over a list and reverses the result.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/list.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\nlet mapRev: ((. 'a) => 'b, t<'a>) => t<'b>\n```\n\n----------------------------------------\n\nTITLE: Defining List Type in ReScript\nDESCRIPTION: Defines the type alias for list in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/list.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\ntype t('a) = list('a);\n```\n\n----------------------------------------\n\nTITLE: Raising EvalError exception in ReScript\nDESCRIPTION: Function signature for raising a JavaScript EvalError exception with a custom message.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/exn.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\nlet raiseEvalError: string => 'a\n```\n\n----------------------------------------\n\nTITLE: Reducing map with uncurried function in ReScript\nDESCRIPTION: Folds over the key-value pairs in the map using an uncurried function and an initial accumulator value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_12\n\nLANGUAGE: reasonml\nCODE:\n```\nlet reduceU: (t('a), 'b, [@bs] (('b, key, 'a) => 'b)) => 'b;\n```\n\n----------------------------------------\n\nTITLE: Defining the set type for Belt.Set.String in ReScript\nDESCRIPTION: Defines the type of sets in the Belt.Set.String module.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set-string.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\ntype t\n```\n\n----------------------------------------\n\nTITLE: Setting Array Data in Int32Array\nDESCRIPTION: Functions to set data from JavaScript arrays into Int32Array instances.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-32-array.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet setArray: (array<elt>, t) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet setArrayOffset: (array<elt>, int, t) => unit\n```\n\n----------------------------------------\n\nTITLE: Reverse Array In Place\nDESCRIPTION: Reverses the order of elements in the array in place.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-64-array.mdx#2025-04-18_snippet_15\n\nLANGUAGE: reason\nCODE:\n```\nlet reverseInPlace: t => t;\n```\n\n----------------------------------------\n\nTITLE: Create Slice of Float32Array\nDESCRIPTION: Extracts a section of the Float32Array and returns a new Float32Array. Start is inclusive and end is exclusive.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_25\n\nLANGUAGE: rescript\nCODE:\n```\nlet slice: (~start: int, ~end_: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Getting bucket histogram of a HashMap with integer keys in ReScript\nDESCRIPTION: Returns an array representing the histogram of bucket sizes for debugging and optimization purposes.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-map-int.mdx#2025-04-18_snippet_22\n\nLANGUAGE: reason\nCODE:\n```\nlet getBucketHistogram: t('a) => array(int);\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet hMap = Belt.HashMap.Int.make(~hintSize=10);\nBelt.HashMap.Int.set(hMap, 1, \"1\");\n\nBelt.HashMap.Int.getBucketHistogram(hMap);\n```\n\n----------------------------------------\n\nTITLE: Dictionary Key Type Definition\nDESCRIPTION: Type definition specifying that dictionary keys must be strings.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/dict.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\ntype key = string\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Links with ReScript String.link Function\nDESCRIPTION: Creates an HTML anchor tag string with specified URL and text. This function is deprecated according to web standards. Takes urlText and linkText parameters and returns an HTML string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string.mdx#2025-04-18_snippet_41\n\nLANGUAGE: reasonml\nCODE:\n```\nlet link: (t, t) => t;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nJs.String.link(\"page2.html\", \"Go to page two\") == \"<a href=\\\"page2.html\\\">Go to page two</a>\";\n```\n\n----------------------------------------\n\nTITLE: Finding first matching key-value pair in MapString module (ReScript)\nDESCRIPTION: Function to find the first key-value pair that matches a given predicate.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-string.mdx#2025-04-18_snippet_10\n\nLANGUAGE: reason\nCODE:\n```\nlet findFirstBy: (t('v), (key, 'v) => bool) => option((key, 'v));\n```\n\n----------------------------------------\n\nTITLE: Creating Subarray from Index in TypedArray in ReScript\nDESCRIPTION: Function signature for creating a new Uint8ClampedArray view of the ArrayBuffer store for the original array, starting from a specified index to the end.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_29\n\nLANGUAGE: res\nCODE:\n```\nlet subarrayFrom: (int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Creating an empty map in MapString module (ReScript)\nDESCRIPTION: Function that returns an empty map of strings to values of type 'v'.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-string.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\nlet empty: t('v);\n```\n\n----------------------------------------\n\nTITLE: Converting Float32Array to String in ReScript\nDESCRIPTION: Functions to convert a Float32Array to a string representation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nlet join: t => string;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet joinWith: (string, t) => string;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet toString: t => string;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet toLocaleString: t => string;\n```\n\n----------------------------------------\n\nTITLE: Creating Int16Array Instances in ReScript\nDESCRIPTION: Functions for creating new Int16Array instances from various sources.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_int-16-array.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\nlet _BYTES_PER_ELEMENT: int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet make: array<elt> => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromBuffer: Js_typed_array.array_buffer => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromBufferOffset: (Js_typed_array.array_buffer, int) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromBufferRange: (Js_typed_array.array_buffer, ~offset: int, ~length: int) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromLength: int => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet from: Js_typed_array.array_like<elt> => t\n```\n\n----------------------------------------\n\nTITLE: Array Search and Query Methods\nDESCRIPTION: Functions for searching and querying array elements\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_int-32-array.mdx#2025-04-18_snippet_5\n\nLANGUAGE: reason\nCODE:\n```\nlet includes: (elt, t) => bool;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet indexOf: (elt, t) => int;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet indexOfFrom: (elt, ~from: int, t) => int;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet lastIndexOf: (elt, t) => int;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet lastIndexOfFrom: (elt, ~from: int, t) => int;\n```\n\n----------------------------------------\n\nTITLE: JavaScript Output for Scoped Polymorphic Logger Usage\nDESCRIPTION: Compiled JavaScript output for the ReScript code that uses a scoped polymorphic logger function, showing how it translates to simple JavaScript function calls.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/scoped-polymorphic-types.mdx#2025-04-18_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nvar myLogger = JsAPI.getLogger();\n\nmyLogger.log(\"Hello, ReScript!\");\nmyLogger.log(42);\n```\n\n----------------------------------------\n\nTITLE: Reducing Array from Right with Index\nDESCRIPTION: Function signature to reduce the array from right to left with a function that includes the element index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_47\n\nLANGUAGE: res\nCODE:\n```\nlet reduceRighti: ((. 'b, elt, int) => 'b, 'b, t) => 'b\n```\n\n----------------------------------------\n\nTITLE: Finding Maximum Value with Undefined Return in ReScript MutableSet\nDESCRIPTION: Returns the maximum value in a string MutableSet collection. Returns undefined if the collection is empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_11\n\nLANGUAGE: res\nCODE:\n```\nlet maxUndefined: t => Js.undefined<value>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet s0 = Belt.MutableSet.String.make()\nlet s1 = Belt.MutableSet.String.fromArray([\"apple\", \"orange\"])\n\ns0->Belt.MutableSet.String.maxUndefined /* undefined */\ns1->Belt.MutableSet.String.maxUndefined /* orange */\n```\n\n----------------------------------------\n\nTITLE: Find Last Index of Value Starting from Position\nDESCRIPTION: Returns the last index at which a given element can be found in the array, searching backwards from the specified index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-64-array.mdx#2025-04-18_snippet_24\n\nLANGUAGE: reason\nCODE:\n```\nlet lastIndexOfFrom: (elt, ~from: int, t) => int;\n```\n\n----------------------------------------\n\nTITLE: Float Truncation with trunc in ReScript\nDESCRIPTION: Truncates a float value by removing its fractional digits while keeping the result as a float. This is a wrapper around JavaScript's Math.trunc function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/math.mdx#2025-04-18_snippet_52\n\nLANGUAGE: rescript\nCODE:\n```\nlet trunc: float => float;\n```\n\n----------------------------------------\n\nTITLE: Extracting a Range of Elements\nDESCRIPTION: Function signature to extract a section of the array from start to end (exclusive).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_25\n\nLANGUAGE: res\nCODE:\n```\nlet slice: (~start: int, ~end_: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Using min_int function to find minimum of two integers in ReScript\nDESCRIPTION: The min_int function returns the minimum of its two integer arguments. It takes two integers as input and returns an integer.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/math.mdx#2025-04-18_snippet_18\n\nLANGUAGE: res\nCODE:\n```\nlet min_int: (int, int) => int\n```\n\n----------------------------------------\n\nTITLE: Core Map Function Signatures\nDESCRIPTION: Function signatures for essential map operations including empty, isEmpty, has, and comparison functions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-int.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\nlet empty: t('v);\nlet isEmpty: t('v) => bool;\nlet has: (t('v), key) => bool;\nlet cmpU: (t('v), t('v), [@bs] (('v, 'v) => int)) => int;\nlet cmp: (t('v), t('v), ('v, 'v) => int) => int;\nlet eqU: (t('v), t('v), [@bs] (('v, 'v) => bool)) => bool;\nlet eq: (t('v), t('v), ('v, 'v) => bool) => bool;\n```\n\n----------------------------------------\n\nTITLE: Getting Set Size in ReScript\nDESCRIPTION: Returns the number of elements in the set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-string.mdx#2025-04-18_snippet_48\n\nLANGUAGE: reasonml\nCODE:\n```\nlet size: t => int;\n```\n\n----------------------------------------\n\nTITLE: Reduce Float32Array Elements Right to Left\nDESCRIPTION: Applies a function against an accumulator and each element in the Float32Array (from right to left) to reduce it to a single value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_46\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduceRight: ((. 'b, elt) => 'b, 'b, t) => 'b\n```\n\n----------------------------------------\n\nTITLE: Create Float32Array with Length\nDESCRIPTION: Creates a new Float32Array with the specified length. Raises Js.Exn.Error if length is invalid.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_55\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromLength: int => t\n```\n\n----------------------------------------\n\nTITLE: Accessing sessionStorage in ReScript\nDESCRIPTION: External binding to access the browser's sessionStorage API.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/dom/storage2.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\n@val external sessionStorage: t = \"sessionStorage\"\n```\n\n----------------------------------------\n\nTITLE: Using valueOf Function in ReScript\nDESCRIPTION: Demonstrates the use of the valueOf function to get the primitive value of the example date.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nJs.Date.valueOf(exampleDate) == 123456654321.0\n```\n\n----------------------------------------\n\nTITLE: Integer Multiplication in ReScript\nDESCRIPTION: Performs multiplication of two int values using the * operator from Belt.Int module. Same as the multiplication from Pervasives.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/int.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet (*): (int, int) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nopen Belt.Int\nJs.log(2 * 2 === 4) /* true */\n```\n\n----------------------------------------\n\nTITLE: Finding an element in Uint8ClampedArray with index\nDESCRIPTION: Returns the first element in the array that satisfies the provided testing function with index, or undefined if no element is found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_37\n\nLANGUAGE: res\nCODE:\n```\nlet findi: ((. elt, int) => bool, t) => Js.undefined<elt>\n```\n\n----------------------------------------\n\nTITLE: List Comparison Functions\nDESCRIPTION: Collection of functions for comparing lists including cmpByLength for length comparison and cmp for element-by-element comparison.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/list.mdx#2025-04-18_snippet_8\n\nLANGUAGE: res\nCODE:\n```\nBelt.List.cmpByLength(list{1, 2}, list{3, 4, 5, 6}) /* -1 */\n\nBelt.List.cmp(list{1, 3, 5}, list{1, 4, 2}, (a, b) => compare(a, b)) /* (-1) */\n```\n\n----------------------------------------\n\nTITLE: Configuring JavaScript Module Output Format in bsconfig.json\nDESCRIPTION: Specifies the JavaScript module format for output files. This example configures CommonJS module format with in-source generation, which places output files alongside source files.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/build-configuration.mdx#2025-04-18_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"package-specs\": {\n    \"module\": \"commonjs\",\n    \"in-source\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fill Array In-Place\nDESCRIPTION: Fills the entire typed array with a specified value in-place.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_type-s.mdx#2025-04-18_snippet_12\n\nLANGUAGE: res\nCODE:\n```\nlet fillInPlace: (elt, t) => t\n```\n\n----------------------------------------\n\nTITLE: Merging maps with uncurried function in MapString module (ReScript)\nDESCRIPTION: Uncurried function to merge two maps using a custom function to resolve conflicts.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-string.mdx#2025-04-18_snippet_43\n\nLANGUAGE: reason\nCODE:\n```\nlet mergeU: (t('v), t('v2), [@bs] ((key, option('v), option('v2)) => option('c))) => t('c);\n```\n\n----------------------------------------\n\nTITLE: Getting bytes per element of UInt32Array\nDESCRIPTION: Defines a constant representing the size in bytes of each element in the array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_50\n\nLANGUAGE: rescript\nCODE:\n```\nlet _BYTES_PER_ELEMENT: int\n```\n\n----------------------------------------\n\nTITLE: Fill Methods for Uint8Array\nDESCRIPTION: Functions for filling a Uint8Array with a specified value, with options to specify ranges to fill.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_6\n\nLANGUAGE: res\nCODE:\n```\nlet fillInPlace: (elt, t) => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet fillFromInPlace: (elt, ~from: int, t) => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet fillRangeInPlace: (elt, ~start: int, ~end_: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Partitioning MapDict in ReScript\nDESCRIPTION: Functions to partition a MapDict into two based on a predicate.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_22\n\nLANGUAGE: ReScript\nCODE:\n```\nlet partitionU: (t<'k, 'a, 'id>, (. 'k, 'a) => bool) => (t<'k, 'a, 'id>, t<'k, 'a, 'id>)\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet partition: (t<'k, 'a, 'id>, ('k, 'a) => bool) => (t<'k, 'a, 'id>, t<'k, 'a, 'id>)\n```\n\n----------------------------------------\n\nTITLE: Legacy Operator Syntax in ReScript\nDESCRIPTION: Shows the previous syntax for different types of additions before unified operators, using different operators for integers, floats, and strings.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2025-04-11-introducing-unified-operators.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet addInt = 1 + 2\nlet addFloat = 1.0 +. 2.0\nlet concatString = \"Hello\" ++ \", World!\"\n```\n\n----------------------------------------\n\nTITLE: Getting Day of Month in ReScript\nDESCRIPTION: Function signature for getDate, which returns the day of the month for a given date.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_19\n\nLANGUAGE: rescript\nCODE:\n```\nlet getDate: t => float\n```\n\n----------------------------------------\n\nTITLE: Get Set Identity from ReScript Belt.Set\nDESCRIPTION: Advanced usage function that returns the identity of the set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set.mdx#2025-04-18_snippet_32\n\nLANGUAGE: res\nCODE:\n```\nlet getId: t<'value, 'id> => id<'value, 'id>\n```\n\n----------------------------------------\n\nTITLE: Defining Comparable Type in ReScript\nDESCRIPTION: Type definition for comparable modules with identity and key type parameters.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/id.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\ntype comparable<'key,'id> =\n  module(Belt.Id.Comparable with type identity = 'id and type t = 'key)\n```\n\n----------------------------------------\n\nTITLE: Find Index of Element in Float32Array by Condition\nDESCRIPTION: Returns the index of the first element in the Float32Array that satisfies the provided testing function, or -1 if not found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_38\n\nLANGUAGE: rescript\nCODE:\n```\nlet findIndex: ((. elt) => bool, t) => int\n```\n\n----------------------------------------\n\nTITLE: Partitioning MapDict\nDESCRIPTION: Function signature for partitioning a map into two maps based on a curried predicate function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_50\n\nLANGUAGE: reason\nCODE:\n```\nlet partition: (t('k, 'a, 'id), ('k, 'a) => bool) => (t('k, 'a, 'id), t('k, 'a, 'id));\n```\n\n----------------------------------------\n\nTITLE: Defining Null Value for Null_undefined in ReScript\nDESCRIPTION: Function signature for 'null', which represents the null value of type Js.null_undefined('a).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/null-undefined.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet null: t<'a>\n```\n\n----------------------------------------\n\nTITLE: ReScript Float Exponentiation\nDESCRIPTION: Shows how ReScript's exponentiation operator for floats is translated to JavaScript's Math.pow function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/overview.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rescript\nCODE:\n```\n2.0 ** 3.0\n```\n\nLANGUAGE: javascript\nCODE:\n```\nMath.pow(2.0, 3.0)\n```\n\n----------------------------------------\n\nTITLE: Minimum Value Operations in ReScript Set\nDESCRIPTION: Functions for retrieving the minimum value from a set, with different return types for empty sets.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-dict.mdx#2025-04-18_snippet_16\n\nLANGUAGE: reason\nCODE:\n```\nlet minimum: t('value, 'id) => option('value);\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet minUndefined: t('value, 'id) => Js.undefined('value);\n```\n\n----------------------------------------\n\nTITLE: Checking if all elements satisfy a predicate in ReScript with MutableSetInt\nDESCRIPTION: Returns a boolean indicating whether all elements in the set satisfy the given predicate function. Order of element testing is unspecified.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_25\n\nLANGUAGE: rescript\nCODE:\n```\nlet every: (t, value => bool) => bool;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet isEven = x => x mod 2 == 0;\n\nlet s0 = Belt.MutableSet.Int.fromArray([|2,4,6,8|]);\ns0->Belt.MutableSet.Int.every(isEven); /* true */\n```\n\n----------------------------------------\n\nTITLE: Getting Current Time in Milliseconds in ReScript\nDESCRIPTION: Function signature for now, which returns the current time as number of milliseconds since Unix epoch.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_16\n\nLANGUAGE: rescript\nCODE:\n```\nlet now: unit => float\n```\n\n----------------------------------------\n\nTITLE: Signature of everyBy function in Belt.Range\nDESCRIPTION: Type signature for the everyBy function that checks if a predicate is true for all elements in a range with a step parameter.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/range.mdx#2025-04-18_snippet_7\n\nLANGUAGE: reason\nCODE:\n```\nlet everyBy: (int, int, ~step: int, int => bool) => bool;\n```\n\n----------------------------------------\n\nTITLE: Copying an integer hash set in ReScript\nDESCRIPTION: Function signature for creating a new hash set with the same elements as the input set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/hash-set-int.mdx#2025-04-18_snippet_6\n\nLANGUAGE: res\nCODE:\n```\nlet copy: t => t\n```\n\n----------------------------------------\n\nTITLE: Converting a set to an array in ReScript\nDESCRIPTION: Returns an array containing all elements of the set in ascending order.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-int.mdx#2025-04-18_snippet_31\n\nLANGUAGE: reason\nCODE:\n```\nlet toArray: t => array(value);\n```\n\n----------------------------------------\n\nTITLE: Extracting keys as array from map in ReScript\nDESCRIPTION: Returns an array containing all the keys in the map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_22\n\nLANGUAGE: reasonml\nCODE:\n```\nlet keysToArray: t('a) => array(key);\n```\n\n----------------------------------------\n\nTITLE: Sorting Array with sortInPlace in ReScript\nDESCRIPTION: Function signature for sortInPlace that sorts the elements of a Uint8Array in place using the default comparison function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_16\n\nLANGUAGE: rescript\nCODE:\n```\nlet sortInPlace: t => t\n```\n\n----------------------------------------\n\nTITLE: Defining setupChromeDebugger Function Signature in ReScript\nDESCRIPTION: Defines the signature for the setupChromeDebugger function that initializes Chrome debugger integration. This function takes no arguments (unit) and returns nothing (unit).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/debug.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nlet setupChromeDebugger: unit => unit\n```\n\n----------------------------------------\n\nTITLE: Iterating over UInt32Array elements\nDESCRIPTION: Defines a function that executes a provided function once for each array element.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_40\n\nLANGUAGE: rescript\nCODE:\n```\nlet forEach: ((. elt) => unit, t) => unit\n```\n\n----------------------------------------\n\nTITLE: Creating Set from Array in ReScript MutableSetString\nDESCRIPTION: Function signature for creating a set from an array of strings.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\nlet fromArray: array<value> => t\n```\n\n----------------------------------------\n\nTITLE: Fill Operations for Float64Array\nDESCRIPTION: Functions that implement the fill method for Float64Array, which fills the array with a specified value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-64-array.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet fillInPlace: (elt, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fillFromInPlace: (elt, ~from: int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fillRangeInPlace: (elt, ~start: int, ~end_: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Retrieving value for key in ReScript map (undefined return)\nDESCRIPTION: Returns the value associated with the given key as a JavaScript undefined value if the key is not found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_33\n\nLANGUAGE: reasonml\nCODE:\n```\nlet getUndefined: (t('a), key) => Js.undefined('a);\n```\n\n----------------------------------------\n\nTITLE: Converting Array to Locale String in ReScript\nDESCRIPTION: Converts array elements to strings using current locale conventions. All elements must have same type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array-2.mdx#2025-04-18_snippet_22\n\nLANGUAGE: res\nCODE:\n```\nJs.Array2.toLocaleString([Js.Date.make()])\n```\n\n----------------------------------------\n\nTITLE: Getting a value with undefined return in ReScript\nDESCRIPTION: Returns the element from the set that is equivalent to the given value, or undefined if no matching element exists. Useful for JavaScript interop.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-int.mdx#2025-04-18_snippet_37\n\nLANGUAGE: reason\nCODE:\n```\nlet getUndefined: (t, value) => Js.undefined(value);\n```\n\n----------------------------------------\n\nTITLE: Setting Time with setUTCTime in ReScript\nDESCRIPTION: Equivalent to setTime(), sets a Date's time value to the specified timestamp. Binds to JavaScript's Date.setTime method.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_65\n\nLANGUAGE: res\nCODE:\n```\nlet setUTCTime: (t, float) => float\n```\n\n----------------------------------------\n\nTITLE: List Iteration Function Signature in ReScript\nDESCRIPTION: Defines the signature for the 'iter' function, which applies a function to each element of a list for side effects.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/list.mdx#2025-04-18_snippet_11\n\nLANGUAGE: rescript\nCODE:\n```\nlet iter: ((. 'a) => unit, t<'a>) => unit\n```\n\n----------------------------------------\n\nTITLE: Getting map size in ReScript\nDESCRIPTION: Function signature for getting the number of key-value pairs in a mutable map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_18\n\nLANGUAGE: ReScript\nCODE:\n```\nlet size: t<'a> => int\n```\n\n----------------------------------------\n\nTITLE: Find Index of Value in Float32Array\nDESCRIPTION: Returns the first index at which a given element can be found in the Float32Array, or -1 if not found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_19\n\nLANGUAGE: rescript\nCODE:\n```\nlet indexOf: (elt, t) => int\n```\n\n----------------------------------------\n\nTITLE: Defining Hashable Type in ReScript\nDESCRIPTION: Type definition for hashable modules with identity and key type parameters.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/id.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\ntype hashable<'key, 'id> =\n  module(Belt.Id.Hashable with type identity = 'id and type t = 'key)\n```\n\n----------------------------------------\n\nTITLE: Manipulating Uint16Array Data in ReScript\nDESCRIPTION: Functions for copying, filling, reversing, and sorting Uint16Array data in place.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_uint-16-array.mdx#2025-04-18_snippet_4\n\nLANGUAGE: ReScript\nCODE:\n```\nlet copyWithin: (~to_: int, t) => t;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet copyWithinFrom: (~to_: int, ~from: int, t) => t;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet copyWithinFromRange: (~to_: int, ~start: int, ~end_: int, t) => t;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet fillInPlace: (elt, t) => t;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet fillFromInPlace: (elt, ~from: int, t) => t;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet fillRangeInPlace: (elt, ~start: int, ~end_: int, t) => t;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet reverseInPlace: t => t;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet sortInPlace: t => t;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet sortInPlaceWith: ((. elt, elt) => int, t) => t;\n```\n\n----------------------------------------\n\nTITLE: Copying Array\nDESCRIPTION: Creates a new copy of the entire array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_26\n\nLANGUAGE: rescript\nCODE:\n```\nlet copy: t => t\n```\n\n----------------------------------------\n\nTITLE: Removing an element with check in ReScript with MutableSetInt\nDESCRIPTION: Removes the specified value from the set and returns a boolean indicating whether the element was actually removed (was present before).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_12\n\nLANGUAGE: rescript\nCODE:\n```\nlet removeCheck: (t, value) => bool;\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for Int32Array\nDESCRIPTION: Core type definitions for the Int32Array implementation including element type, typed array type and main array type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_int-32-array.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\ntype elt = int32;\ntype typed_array('a);\ntype t = typed_array(elt);\n```\n\n----------------------------------------\n\nTITLE: Array Modification Methods\nDESCRIPTION: Methods for modifying array contents including copying, filling, and sorting operations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_float-64-array.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet copyWithin: (~to_: int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet copyWithinFrom: (~to_: int, ~from: int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet copyWithinFromRange: (~to_: int, ~start: int, ~end_: int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fillInPlace: (elt, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fillFromInPlace: (elt, ~from: int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fillRangeInPlace: (elt, ~start: int, ~end_: int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet reverseInPlace: t => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet sortInPlace: t => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet sortInPlaceWith: ((. elt, elt) => int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Unsafe Extraction from Undefined\nDESCRIPTION: Function to unsafely extract a value from an undefined container.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/undefined.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\nlet getUnsafe: t<'a> => 'a\n```\n\n----------------------------------------\n\nTITLE: Sorting Uint8ClampedArray in ReScript\nDESCRIPTION: Functions for sorting Uint8ClampedArray in place, with optional custom comparison function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_4\n\nLANGUAGE: ReScript\nCODE:\n```\nlet sortInPlace: t => t;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet sortInPlaceWith: ((. elt, elt) => int, t) => t;\n```\n\n----------------------------------------\n\nTITLE: Int8Array Search Operations\nDESCRIPTION: Methods for searching elements in the array\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_int-8-array.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reasonml\nCODE:\n```\nlet includes: (elt, t) => bool;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet indexOf: (elt, t) => int;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet indexOfFrom: (elt, ~from: int, t) => int;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet lastIndexOf: (elt, t) => int;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet lastIndexOfFrom: (elt, ~from: int, t) => int;\n```\n\n----------------------------------------\n\nTITLE: Creating MutableSet from Array\nDESCRIPTION: Demonstrates creating a MutableSet from an array of integers using a custom integer comparator\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nmodule IntCmp = Belt.Id.MakeComparable({\n  type t = int\n  let cmp = Pervasives.compare\n})\n\nlet s0 = Belt.MutableSet.fromArray([1, 3, 2, 4], ~id=module(IntCmp))\n\ns0->Belt.MutableSet.toArray /* [1, 2, 3, 4] */\n```\n\n----------------------------------------\n\nTITLE: Filling Array in Range\nDESCRIPTION: Function signature to fill a range of the array with a specified value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_14\n\nLANGUAGE: res\nCODE:\n```\nlet fillRangeInPlace: (elt, ~start: int, ~end_: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Popping with Undefined Result in MutableQueue in ReScript\nDESCRIPTION: The 'popUndefined' function removes and returns the first element in the queue, or undefined if the queue is empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-queue.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rescript\nCODE:\n```\nlet popUndefined: t<'a> => Js.undefined<'a>\n```\n\n----------------------------------------\n\nTITLE: JSON String Decoding Function in ReScript\nDESCRIPTION: Function signature for attempting to decode a JSON value as a string. Returns None if the JSON value is not a string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/json.mdx#2025-04-18_snippet_5\n\nLANGUAGE: reason\nCODE:\n```\nlet decodeString: t => option(Js_string.t);\n```\n\n----------------------------------------\n\nTITLE: Filtering Set Elements with Uncurried Function in ReasonML\nDESCRIPTION: Provides an uncurried function variant to create a new set with only elements that satisfy a predicate.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set.mdx#2025-04-18_snippet_27\n\nLANGUAGE: reasonml\nCODE:\n```\nlet keepU: (t('value, 'id), [@bs] ('value => bool)) => t('value, 'id);\n```\n\n----------------------------------------\n\nTITLE: Float Representation in ReScript vs JavaScript\nDESCRIPTION: Shows how floating-point numbers in ReScript are represented in JavaScript. The output is identical.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/overview.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\n23.0, -23.0\n```\n\nLANGUAGE: javascript\nCODE:\n```\n23.0, -23.0\n```\n\n----------------------------------------\n\nTITLE: Getting List Length in ReScript\nDESCRIPTION: The length function returns the number of elements in a list.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/list.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet length: t<'a> => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nBelt.List.length(list{1, 2, 3}) // 3\n```\n\n----------------------------------------\n\nTITLE: Getting RegExp Flags as String\nDESCRIPTION: Function that returns the enabled flags of a RegExp object as a string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/re.mdx#2025-04-18_snippet_8\n\nLANGUAGE: reason\nCODE:\n```\nlet flags: t => string;\n```\n\n----------------------------------------\n\nTITLE: Getting the Byte Offset with byteOffset in ReScript\nDESCRIPTION: Function signature for byteOffset that returns the offset of a Uint8Array from the start of its ArrayBuffer in bytes.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet byteOffset: t => int\n```\n\n----------------------------------------\n\nTITLE: Finding Index of First Match with Index\nDESCRIPTION: Function signature to find the index of the first element that satisfies a condition that includes its index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_39\n\nLANGUAGE: res\nCODE:\n```\nlet findIndexi: ((. elt, int) => bool, t) => int\n```\n\n----------------------------------------\n\nTITLE: Integer Addition in ReScript\nDESCRIPTION: Performs addition of two int values using the + operator from Belt.Int module. Same as the addition from Pervasives.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/int.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet (+): (int, int) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nopen Belt.Int\nJs.log(2 + 2 === 4) /* true */\n```\n\n----------------------------------------\n\nTITLE: Testing if Any Element Matches\nDESCRIPTION: Function signature to test if at least one element passes a specified condition.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_48\n\nLANGUAGE: res\nCODE:\n```\nlet some: ((. elt) => bool, t) => bool\n```\n\n----------------------------------------\n\nTITLE: Creating JSON Boolean Array in ReScript\nDESCRIPTION: Function signature for creating a JSON array of booleans from a ReScript array of bools.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/json.mdx#2025-04-18_snippet_19\n\nLANGUAGE: reason\nCODE:\n```\nlet booleanArray: array(bool) => t;\n```\n\n----------------------------------------\n\nTITLE: Array Search Methods\nDESCRIPTION: Functions for searching elements within the array, including includes, indexOf, and lastIndexOf.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\nlet includes: (elt, t) => bool\n```\n\nLANGUAGE: res\nCODE:\n```\nlet indexOf: (elt, t) => int\n```\n\nLANGUAGE: res\nCODE:\n```\nlet indexOfFrom: (elt, ~from: int, t) => int\n```\n\nLANGUAGE: res\nCODE:\n```\nlet lastIndexOf: (elt, t) => int\n```\n\nLANGUAGE: res\nCODE:\n```\nlet lastIndexOfFrom: (elt, ~from: int, t) => int\n```\n\n----------------------------------------\n\nTITLE: Finding minimum key-value pair in ReScript\nDESCRIPTION: Function signature for finding the minimum key-value pair in a mutable map, returning an option type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_28\n\nLANGUAGE: ReScript\nCODE:\n```\nlet minimum: t<'a> => option<(key, 'a)>\n```\n\n----------------------------------------\n\nTITLE: Coordinate System Example Without Type Safety\nDESCRIPTION: Shows a basic implementation of a coordinate system without type safety guarantees.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/unboxed.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\ntype coordinates = {x: float, y: float}\n\nlet renderDot = (coordinates) => {\n  Js.log3(\"Pretend to draw at:\", coordinates.x, coordinates.y)\n}\n\nlet toWorldCoordinates = (localCoordinates) => {\n  {\n    x: localCoordinates.x +. 10.,\n    y: localCoordinates.x +. 20.,\n  }\n}\n\nlet playerLocalCoordinates = {x: 20.5, y: 30.5}\n\nrenderDot(playerLocalCoordinates)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction renderDot(coordinates) {\n  console.log(\"Pretend to draw at:\", coordinates.x, coordinates.y);\n}\n\nfunction toWorldCoordinates(localCoordinates) {\n  return {\n    x: localCoordinates.x + 10,\n    y: localCoordinates.x + 20\n  };\n}\n\nvar playerLocalCoordinates = {\n  x: 20.5,\n  y: 30.5\n};\n\nrenderDot(playerLocalCoordinates);\n```\n\n----------------------------------------\n\nTITLE: Splitting a Set in ReScript\nDESCRIPTION: The 'split' function divides a set into two parts based on a given value. It returns a tuple containing two sets and a boolean indicating if the value is present in the original set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set-int.mdx#2025-04-18_snippet_4\n\nLANGUAGE: ReScript\nCODE:\n```\nlet split: (t, value) => ((t, t), bool)\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet s0 = Belt.Set.Int.fromArray([1, 2, 3, 4, 5])\n\nlet ((smaller, larger), present) = s0->Belt.Set.Int.split(3)\n\npresent /* true */\nsmaller->Belt.Set.Int.toArray /* [1,2] */\nlarger->Belt.Set.Int.toArray /* [4,5] */\n```\n\n----------------------------------------\n\nTITLE: Defining Type Signatures for Int Set\nDESCRIPTION: Core type definitions for the specialized integer set implementation, including the value type and set type t.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/set-int.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype value = int\ntype t\n```\n\n----------------------------------------\n\nTITLE: Accessing Natural Logarithm of 10 in ReScript\nDESCRIPTION: Constant for the natural logarithm of 10 (approximately 2.302585092994046), equivalent to JavaScript's Math.LN10.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/math.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reasonml\nCODE:\n```\nlet _LN10: float;\n```\n\n----------------------------------------\n\nTITLE: Creating Null Values in ReScript\nDESCRIPTION: Constructs a value of Js.null('a) containing a value of 'a.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/null.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reason\nCODE:\n```\nlet return: 'a => t('a);\n```\n\n----------------------------------------\n\nTITLE: Array Modification Methods\nDESCRIPTION: Methods for modifying array contents including setting arrays, copying, filling and sorting.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_type-s.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reason\nCODE:\n```\nlet setArray: (array(elt), t) => unit;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet setArrayOffset: (array(elt), int, t) => unit;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet copyWithin: (~to_: int, t) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet fillInPlace: (elt, t) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet sortInPlace: t => t;\n```\n\n----------------------------------------\n\nTITLE: Return Function Signature\nDESCRIPTION: Function signature for constructing a nullable value from a non-nullable value\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/nullable.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet return: 'a => t<'a>\n```\n\n----------------------------------------\n\nTITLE: Iterating MutableQueue with Uncurried Function in ReScript\nDESCRIPTION: The 'forEachU' function applies an uncurried function to each element of the queue in order.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-queue.mdx#2025-04-18_snippet_16\n\nLANGUAGE: rescript\nCODE:\n```\nlet forEachU: (t<'a>, (. 'a) => unit) => unit\n```\n\n----------------------------------------\n\nTITLE: Retrieving UInt32Array Properties in ReScript\nDESCRIPTION: Functions to get buffer, byteLength, byteOffset, and length of a Uint32Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_2\n\nLANGUAGE: ReScript\nCODE:\n```\nlet buffer: t => Js_typed_array.array_buffer\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet byteLength: t => int\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet byteOffset: t => int\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet length: t => int\n```\n\n----------------------------------------\n\nTITLE: Sorting Int8Array in ReScript\nDESCRIPTION: Functions for sorting an Int8Array in place, with an optional custom comparator.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet sortInPlace: t => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet sortInPlaceWith: ((. elt, elt) => int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Copying Elements from Index\nDESCRIPTION: Copies a sequence of elements within the array starting at a source index to a position starting at the target index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rescript\nCODE:\n```\nlet copyWithinFrom: (~to_: int, ~from: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Converting Map to Array in ReScript MapInt Module\nDESCRIPTION: Function signature for converting the map to an array of key-value pairs.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-int.mdx#2025-04-18_snippet_21\n\nLANGUAGE: rescript\nCODE:\n```\nlet toArray: t<'v> => array<(key, 'v)>\n```\n\n----------------------------------------\n\nTITLE: Array Slicing Methods\nDESCRIPTION: Functions to create new arrays by extracting portions of the original array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_7\n\nLANGUAGE: res\nCODE:\n```\nlet slice: (~start: int, ~end_: int, t) => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet copy: t => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet sliceFrom: (int, t) => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet subarray: (~start: int, ~end_: int, t) => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet subarrayFrom: (int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Union of MutableSets Example in ReasonML\nDESCRIPTION: Example showing how to create a union of two MutableSets using the union function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_24\n\nLANGUAGE: reasonml\nCODE:\n```\nmodule IntCmp =\n  Belt.Id.MakeComparable({\n    type t = int;\n    let cmp = Pervasives.compare;\n  });\n\nlet s0 = Belt.MutableSet.fromArray([|5,2,3,5,6|], ~id=(module IntCmp));\nlet s1 = Belt.MutableSet.fromArray([|5,2,3,1,5,4|], ~id=(module IntCmp));\nlet union = Belt.MutableSet.union(s0, s1);\nunion->Belt.MutableSet.toArray; /* [|1,2,3,4,5,6|] */\n```\n\n----------------------------------------\n\nTITLE: Copy Array\nDESCRIPTION: Creates a copy of the entire typed array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_type-s.mdx#2025-04-18_snippet_26\n\nLANGUAGE: res\nCODE:\n```\nlet copy: t => t\n```\n\n----------------------------------------\n\nTITLE: Getting Byte Length\nDESCRIPTION: Returns the length of the typed array in bytes.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_type-s.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nlet byteLength: t => int\n```\n\n----------------------------------------\n\nTITLE: Defining Key and HashMap Types in ReScript\nDESCRIPTION: Defines the key type as string and the hash map type t<'b> for Belt.HashMap.String.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-map-string.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype key = string\n\ntype t<'b>\n```\n\n----------------------------------------\n\nTITLE: Testing all elements in Uint8ClampedArray with predicate\nDESCRIPTION: Tests whether all elements in the array pass the test implemented by the provided function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_32\n\nLANGUAGE: res\nCODE:\n```\nlet every: ((. elt) => bool, t) => bool\n```\n\n----------------------------------------\n\nTITLE: Testing if Any Element Matches with Index\nDESCRIPTION: Function signature to test if at least one element passes a condition that includes its index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_49\n\nLANGUAGE: res\nCODE:\n```\nlet somei: ((. elt, int) => bool, t) => bool\n```\n\n----------------------------------------\n\nTITLE: Defining Set ID Type in ReasonML\nDESCRIPTION: Shows the type definition for the Belt.Set.id type, which represents the identity needed for making a set from scratch.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reasonml\nCODE:\n```\ntype id('value, 'id) = Belt_Id.comparable('value, 'id);\n```\n\n----------------------------------------\n\nTITLE: Getting length of UInt32Array\nDESCRIPTION: Defines a function that returns the number of elements in the typed array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\nlet length: t => int\n```\n\n----------------------------------------\n\nTITLE: Checking if every entry satisfies a predicate in MapString module (ReScript)\nDESCRIPTION: Function to check if all key-value pairs in a map satisfy a given predicate.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-string.mdx#2025-04-18_snippet_16\n\nLANGUAGE: reason\nCODE:\n```\nlet every: (t('v), (key, 'v) => bool) => bool;\n```\n\n----------------------------------------\n\nTITLE: Array Element and Index Validation with Everyi\nDESCRIPTION: Similar to every but predicate function receives both element and index as arguments.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/array-2.mdx#2025-04-18_snippet_13\n\nLANGUAGE: reasonml\nCODE:\n```\nlet everyi: (t('a), ('a, int) => bool) => bool;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet evenIndexPositive = (item, index) => \n  {(index mod 2 == 0) ? item > 0 : true;};\n\nJs.Array2.everyi([|6, -3, 5, 8|], evenIndexPositive) == true;\nJs.Array2.everyi([|6, 3, -5, 8|], evenIndexPositive) == false;\n```\n\n----------------------------------------\n\nTITLE: JSON Stringify with Spacing Example\nDESCRIPTION: Example demonstrating how to stringify a JSON object with formatted spacing.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/json.mdx#2025-04-18_snippet_6\n\nLANGUAGE: res\nCODE:\n```\n{\n  let dict = Js.Dict.empty()\n  Js.Dict.set(dict, \"name\", Js.Json.string(\"John Doe\"))\n  Js.Dict.set(dict, \"age\", Js.Json.number(30.0))\n  Js.Dict.set(dict, \"likes\", Js.Json.stringArray([\"bucklescript\", \"ocaml\", \"js\"]))\n\n  Js.log(Js.Json.stringifyWithSpace(Js.Json.object_(dict), 2))\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Minimum Value from Belt.MutableSet.String in ReScript\nDESCRIPTION: The 'minimum' function returns the minimum value of the collection as an option. It returns None if the collection is empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_35\n\nLANGUAGE: reasonml\nCODE:\n```\nlet minimum: t => option(value);\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet s0 = Belt.MutableSet.String.make();\nlet s1 = Belt.MutableSet.String.fromArray([|\"apple\", \"orange\"|]);\n\ns0->Belt.MutableSet.String.minimum; /* None */\ns1->Belt.MutableSet.String.minimum; /* Some(\"apple\") */\n```\n\n----------------------------------------\n\nTITLE: Setting Array Elements with unsafe_set\nDESCRIPTION: Function to set elements in a Uint8Array at a specified index without bounds checking.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet unsafe_set: (t, int, elt) => unit\n```\n\n----------------------------------------\n\nTITLE: Sort Array with Custom Comparison In-Place\nDESCRIPTION: Sorts the elements of the typed array in-place using a custom comparison function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_type-s.mdx#2025-04-18_snippet_17\n\nLANGUAGE: res\nCODE:\n```\nlet sortInPlaceWith: ((. elt, elt) => int, t) => t\n```\n\n----------------------------------------\n\nTITLE: JavaScript Exception Conversion Function\nDESCRIPTION: Function signature for converting ReScript exceptions to JavaScript exceptions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/exn.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet asJsExn: exn => option<t>\n```\n\n----------------------------------------\n\nTITLE: Float isFinite Function\nDESCRIPTION: Function to test if a given float value is finite. Returns true if the value is a finite number, false otherwise.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/float.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet isFinite: float => bool\n```\n\n----------------------------------------\n\nTITLE: Finding the maximum key in MapDict\nDESCRIPTION: Function signature for finding the largest key in a map, returning an option.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_28\n\nLANGUAGE: reason\nCODE:\n```\nlet maxKey: t('k, 'a, 'b) => option('k);\n```\n\n----------------------------------------\n\nTITLE: Defining HashSet ID Type in ReScript\nDESCRIPTION: This code defines the type signature for the HashSet's id. It uses the BeltId.hashable type to create a unique identity for the HashSet.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-set.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reason\nCODE:\n```\ntype id('a, 'id) = BeltId.hashable('a, 'id);\n```\n\n----------------------------------------\n\nTITLE: Integer Representation in ReScript vs JavaScript\nDESCRIPTION: Demonstrates how integer literals in ReScript are represented in JavaScript. The output is identical.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/overview.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\n23, -23\n```\n\nLANGUAGE: javascript\nCODE:\n```\n23, -23\n```\n\n----------------------------------------\n\nTITLE: Getting First Element of List in ReScript\nDESCRIPTION: The head function returns the first element of a list wrapped in an option, or None if the list is empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/list.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet head: t<'a> => option<'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nBelt.List.head(list{}) // None\nBelt.List.head(list{1, 2, 3}) // Some(1)\n```\n\n----------------------------------------\n\nTITLE: Finding element index with position in UInt32Array\nDESCRIPTION: Defines a function that returns the index of the first element that satisfies the provided testing function with access to the element index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_39\n\nLANGUAGE: rescript\nCODE:\n```\nlet findIndexi: ((. elt, int) => bool, t) => int\n```\n\n----------------------------------------\n\nTITLE: Basic Array Operations\nDESCRIPTION: Core array operations including unsafe get/set, buffer access, and length properties.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet unsafe_get: (t, int) => elt\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet unsafe_set: (t, int, elt) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet buffer: t => Js_typed_array2.array_buffer\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet byteLength: t => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet byteOffset: t => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet length: t => int\n```\n\n----------------------------------------\n\nTITLE: Mapping Undefined Value in ReScript\nDESCRIPTION: Maps the contained value using the given function. If Js.undefined('a) contains a value, it's unwrapped, mapped, and rewrapped.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/undefined.mdx#2025-04-18_snippet_7\n\nLANGUAGE: reasonml\nCODE:\n```\nlet bind: (t('a), (. 'a) => 'b) => t('b);\n```\n\n----------------------------------------\n\nTITLE: ReScript Type Classification Function Signature\nDESCRIPTION: Function signature for classifying JavaScript values into their runtime types.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/types.mdx#2025-04-18_snippet_8\n\nLANGUAGE: reason\nCODE:\n```\nlet classify: 'a => tagged_t;\n```\n\n----------------------------------------\n\nTITLE: Exception-based Null Value Access in ReScript\nDESCRIPTION: Extracts the value from a nullable type, potentially raising an exception if the value is null.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/null.mdx#2025-04-18_snippet_5\n\nLANGUAGE: reason\nCODE:\n```\nlet getExn: t('a) => 'a;\n```\n\n----------------------------------------\n\nTITLE: Iterating over map with uncurried function in ReScript\nDESCRIPTION: Function signature for iterating over a mutable map using an uncurried function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_10\n\nLANGUAGE: ReScript\nCODE:\n```\nlet forEachU: (t<'a>, (. key, 'a) => unit) => unit\n```\n\n----------------------------------------\n\nTITLE: Popping Element from MutableStack as Undefined in ReScript\nDESCRIPTION: Function signature for popping an element from the stack, returning undefined if empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-stack.mdx#2025-04-18_snippet_5\n\nLANGUAGE: ReScript\nCODE:\n```\nlet popUndefined: t<'a> => Js.undefined<'a>\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Anchor Element in ReScript\nDESCRIPTION: Creates an HTML anchor element with a name attribute. This function is deprecated according to web standards. Takes anchorText and anchorName as parameters and returns an HTML string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string-2.mdx#2025-04-18_snippet_28\n\nLANGUAGE: reason\nCODE:\n```\nlet anchor: (t, t) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nJs.String2.anchor(\"Page One\", \"page1\") == \"<a name=\\\"page1\\\">Page One</a>\";\n```\n\n----------------------------------------\n\nTITLE: Mapping Array Elements\nDESCRIPTION: Function signature to create a new array with the results of calling a function on every element.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_42\n\nLANGUAGE: res\nCODE:\n```\nlet map: ((. elt) => 'b, t) => typed_array<'b>\n```\n\n----------------------------------------\n\nTITLE: Find Last Index of Value in Float32Array from Position\nDESCRIPTION: Returns the last index at which a given element can be found in the Float32Array, searching backward from the specified index, or -1 if not found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_24\n\nLANGUAGE: rescript\nCODE:\n```\nlet lastIndexOfFrom: (elt, ~from: int, t) => int\n```\n\n----------------------------------------\n\nTITLE: Undefined Value Definition\nDESCRIPTION: Function signature for undefined value of nullable type\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/nullable.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet undefined: t<'a>\n```\n\n----------------------------------------\n\nTITLE: Pushing Element to Vector in ReScript\nDESCRIPTION: Adds an element to the end of a vector.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/vector.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ReScript\nCODE:\n```\nlet pushBack: ('a, t('a)) => unit;\n```\n\n----------------------------------------\n\nTITLE: Get Bytes Per Element Constant\nDESCRIPTION: Returns the size in bytes of each element in the array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-64-array.mdx#2025-04-18_snippet_50\n\nLANGUAGE: reason\nCODE:\n```\nlet _BYTES_PER_ELEMENT: int;\n```\n\n----------------------------------------\n\nTITLE: Writing 8-bit Signed Integer\nDESCRIPTION: Stores a signed 8-bit integer at the specified byte offset from the start of the DataView.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_data-view.mdx#2025-04-18_snippet_22\n\nLANGUAGE: reasonml\nCODE:\n```\nlet setInt8: (t, int, int) => unit;\n```\n\n----------------------------------------\n\nTITLE: Finding Array Element with Index using findi in ReScript\nDESCRIPTION: Function signature for findi that returns the first element in the Uint8Array that satisfies the provided testing function which also receives the element index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_37\n\nLANGUAGE: rescript\nCODE:\n```\nlet findi: ((. elt, int) => bool, t) => Js.undefined<elt>\n```\n\n----------------------------------------\n\nTITLE: Retrieving UTC Day of Week in ReScript\nDESCRIPTION: The getUTCDay function returns the day of the week of a Date object, evaluated in UTC. The range is 0.0-6.0, where Sunday is zero. It binds to JavaScript's Date.getUTCDay method.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_32\n\nLANGUAGE: res\nCODE:\n```\nlet getUTCDay: t => float\n```\n\nLANGUAGE: res\nCODE:\n```\nJs.Date.getUTCDay(exampleDate) == 4.0\n```\n\n----------------------------------------\n\nTITLE: Writing 16-bit Signed Integer (Big Endian)\nDESCRIPTION: Stores a signed 16-bit integer at the specified byte offset from the start of the DataView using big-endian format.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_data-view.mdx#2025-04-18_snippet_24\n\nLANGUAGE: reasonml\nCODE:\n```\nlet setInt16: (t, int, int) => unit;\n```\n\n----------------------------------------\n\nTITLE: Joining UInt32Array elements with separator\nDESCRIPTION: Defines a function that joins all elements of the array into a string using the specified separator.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_22\n\nLANGUAGE: rescript\nCODE:\n```\nlet joinWith: (string, t) => string\n```\n\n----------------------------------------\n\nTITLE: Array Construction Methods\nDESCRIPTION: Methods for creating new Int16Array instances from various sources.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_int-16-array.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet make: array<elt> => t\nlet fromBuffer: Js_typed_array2.array_buffer => t\nlet fromLength: int => t\nlet from: Js_typed_array2.array_like<elt> => t\n```\n\n----------------------------------------\n\nTITLE: Importing CSS with Side Effects using %%raw in ReScript\nDESCRIPTION: This example shows how to use %%raw to import files with side effects, such as CSS files, which is a common use case for this extension point.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/extension_raw_top_level_expression.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\n%%raw(`import \"main.css\"`)\n```\n\nLANGUAGE: js\nCODE:\n```\nimport \"main.css\";\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Value from MutableSet with get in ReScript\nDESCRIPTION: Returns an option containing the reference of the value if it exists in the set based on the comparator. Returns None if the element does not exist.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_16\n\nLANGUAGE: reason\nCODE:\n```\nlet get: (t, value) => option<value>\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet s0 = Belt.MutableSet.Int.fromArray([1, 2, 3, 4, 5])\n\ns0->Belt.MutableSet.Int.get(3) /* Some(3) */\ns0->Belt.MutableSet.Int.get(20) /* None */\n```\n\n----------------------------------------\n\nTITLE: Reducing Set to Single Value in ReScript\nDESCRIPTION: Applies a function to each element of the set in increasing order, accumulating a result.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-string.mdx#2025-04-18_snippet_34\n\nLANGUAGE: reasonml\nCODE:\n```\nlet reduce: (t, 'a, ('a, value) => 'a) => 'a;\n```\n\n----------------------------------------\n\nTITLE: Reducing Array from Right to Left\nDESCRIPTION: Function signature to reduce the array from right to left to a single value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_46\n\nLANGUAGE: res\nCODE:\n```\nlet reduceRight: ((. 'b, elt) => 'b, 'b, t) => 'b\n```\n\n----------------------------------------\n\nTITLE: setTimeoutFloat Function Signature in ReScript\nDESCRIPTION: Function signature for setTimeoutFloat which is like setTimeout but accepts a float value for the delay.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/global.mdx#2025-04-18_snippet_12\n\nLANGUAGE: reasonml\nCODE:\n```\nlet setTimeoutFloat: (unit => unit, float) => timeoutId;\n```\n\n----------------------------------------\n\nTITLE: Creating Array with Length\nDESCRIPTION: Function signature to create a new Uint16Array of a specified length, which can raise a Js.Exn.Error.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_55\n\nLANGUAGE: res\nCODE:\n```\nlet fromLength: int => t\n```\n\n----------------------------------------\n\nTITLE: Setting Hours, Minutes and Seconds with setUTCHoursMS in ReScript\nDESCRIPTION: Sets a Date's hours, minutes, and seconds according to UTC time. This function modifies the original Date object and returns the updated timestamp in milliseconds. Binds to JavaScript's Date.setUTCHours method.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_55\n\nLANGUAGE: res\nCODE:\n```\nlet setUTCHoursMS: (t, ~hours: float, ~minutes: float, ~seconds: float, unit) => float\n```\n\nLANGUAGE: res\nCODE:\n```\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet futureTime = Js.Date.setUTCHoursMS(date1, ~hours=22.0, ~minutes=46.0, ~seconds=37.0, ())\ndate1 == Js.Date.fromString(\"1973-11-29T22:46:37.321Z00:00\")\nfutureTime == Js.Date.getTime(date1)\n```\n\n----------------------------------------\n\nTITLE: Comparison Operations\nDESCRIPTION: Functions for comparing maps including uncurried (U) and curried versions for equality and ordering.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-map-int.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nlet cmpU: (t<'a>, t<'a>, (. 'a, 'a) => int) => int\n```\n\nLANGUAGE: res\nCODE:\n```\nlet cmp: (t<'a>, t<'a>, ('a, 'a) => int) => int\n```\n\nLANGUAGE: res\nCODE:\n```\nlet eqU: (t<'a>, t<'a>, (. 'a, 'a) => bool) => bool\n```\n\nLANGUAGE: res\nCODE:\n```\nlet eq: (t<'a>, t<'a>, ('a, 'a) => bool) => bool\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Value as Undefined from Belt.Set.String in ReScript\nDESCRIPTION: The getUndefined function is similar to get, but returns undefined when the element does not exist.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-string.mdx#2025-04-18_snippet_61\n\nLANGUAGE: rescript\nCODE:\n```\nlet getUndefined: (t, value) => Js.undefined(value);\n```\n\n----------------------------------------\n\nTITLE: copyWithin Methods for Uint8Array\nDESCRIPTION: Functions for copying a section of an array to another location within the same array, with various parameters for source and target positions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\nlet copyWithin: (~to_: int, t) => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet copyWithinFrom: (~to_: int, ~from: int, t) => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet copyWithinFromRange: (~to_: int, ~start: int, ~end_: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Last Index Search Operations for Float64Array\nDESCRIPTION: Functions to find the last index of an element in a Float64Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-64-array.mdx#2025-04-18_snippet_11\n\nLANGUAGE: rescript\nCODE:\n```\nlet lastIndexOf: (elt, t) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet lastIndexOfFrom: (elt, ~from: int, t) => int\n```\n\n----------------------------------------\n\nTITLE: Defining Nullable type alias in ReScript\nDESCRIPTION: Defines a local type alias 't' for Js.null_undefined('a), which represents values that can be either a value of type 'a, null, or undefined.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/nullable.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\ntype t('a) = Js.null_undefined('a);\n```\n\n----------------------------------------\n\nTITLE: Finding an element in Uint8ClampedArray\nDESCRIPTION: Returns the first element in the array that satisfies the provided testing function, or undefined if no element is found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_36\n\nLANGUAGE: res\nCODE:\n```\nlet find: ((. elt) => bool, t) => Js.undefined<elt>\n```\n\n----------------------------------------\n\nTITLE: Map MergeU Function Signature\nDESCRIPTION: Uncurried version of merge operation for maps.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet mergeU: (t<'k, 'v, 'id>, t<'k, 'v2, 'id>, (. 'k, option<'v>, option<'v2>) => option<'v3>) => t<'k, 'v3, 'id>\n```\n\n----------------------------------------\n\nTITLE: Get Underlying Buffer of Float32Array\nDESCRIPTION: Returns the ArrayBuffer that is used to store the elements of the Float32Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet buffer: t => Js_typed_array.array_buffer\n```\n\n----------------------------------------\n\nTITLE: Empty Null Value Signature\nDESCRIPTION: Function signature for getting an empty (null) value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/null.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet empty: t<'a>\n```\n\n----------------------------------------\n\nTITLE: Sort Array In Place with Custom Comparator\nDESCRIPTION: Sorts the elements of the array in place using a custom comparison function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-64-array.mdx#2025-04-18_snippet_17\n\nLANGUAGE: reason\nCODE:\n```\nlet sortInPlaceWith: ((. elt, elt) => int, t) => t;\n```\n\n----------------------------------------\n\nTITLE: Finding the maximum value with undefined return in ReScript\nDESCRIPTION: Returns the largest element in the set, or undefined if the set is empty. Useful for JavaScript interop.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-int.mdx#2025-04-18_snippet_35\n\nLANGUAGE: reason\nCODE:\n```\nlet maxUndefined: t => Js.undefined(value);\n```\n\n----------------------------------------\n\nTITLE: Alias for Converting Option to Null_undefined in ReScript\nDESCRIPTION: Function signature for 'from_opt', which is likely an alias for 'fromOption'.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/null-undefined.mdx#2025-04-18_snippet_11\n\nLANGUAGE: rescript\nCODE:\n```\nlet from_opt: option<'a> => t<'a>\n```\n\n----------------------------------------\n\nTITLE: Creating Array Subarray from Index with subarrayFrom in ReScript\nDESCRIPTION: Function signature for subarrayFrom that returns a new Uint8Array from a given start to the end, sharing the same underlying buffer.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_29\n\nLANGUAGE: rescript\nCODE:\n```\nlet subarrayFrom: (int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Creating Strings from Multiple Code Points in ReScript\nDESCRIPTION: The 'fromCodePointMany' function creates a string from an array of code points. It takes an array of integers representing Unicode code points and returns the corresponding string, handling code points beyond the BMP.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/string-2.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromCodePointMany: array<int> => t\n```\n\n----------------------------------------\n\nTITLE: JSON Stringify with Spacing Example\nDESCRIPTION: Example demonstrating pretty printing of JSON with custom spacing\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/json.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\n{\n  let dict = Js.Dict.empty()\n  Js.Dict.set(dict, \"name\", Js.Json.string(\"John Doe\"))\n  Js.Dict.set(dict, \"age\", Js.Json.number(30.0))\n  Js.Dict.set(dict, \"likes\", Js.Json.stringArray([\"bucklescript\", \"ocaml\", \"js\"]))\n\n  Js.log(Js.Json.stringifyWithSpace(Js.Json.object_(dict), 2))\n}\n```\n\n----------------------------------------\n\nTITLE: Testing if any entry satisfies predicate in ReScript map\nDESCRIPTION: Checks if at least one key-value pair in the map satisfies the curried predicate function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_17\n\nLANGUAGE: reasonml\nCODE:\n```\nlet some: (t('a), (key, 'a) => bool) => bool;\n```\n\n----------------------------------------\n\nTITLE: Clearing a HashSet in ReScript\nDESCRIPTION: This function signature shows how to clear all elements from a HashSet.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-set.mdx#2025-04-18_snippet_5\n\nLANGUAGE: reason\nCODE:\n```\nlet clear: t('a, 'id) => unit;\n```\n\n----------------------------------------\n\nTITLE: Replacing Substrings with Function (Two Captures) in ReScript\nDESCRIPTION: The unsafeReplaceBy2 function replaces matches of a pattern with two sets of capturing parentheses using a provided function. The function receives the matched string, captured strings, offset, and whole string as parameters.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string.mdx#2025-04-18_snippet_30\n\nLANGUAGE: rescript\nCODE:\n```\nlet unsafeReplaceBy2: (Js_re.t, (t, t, t, int, t) => t, t) => t;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet str = \"7 times 6\";\nlet re = [%re \"/(\\\\d+) times (\\\\d+)/\"];\nlet matchFn = (_matchPart, p1, p2, _offset, _wholeString) =>\n  Belt.Int.toString(int_of_string(p1) * int_of_string(p2));\n\nJs.String.unsafeReplaceBy2(re, matchFn, str) == \"42\";\n```\n\n----------------------------------------\n\nTITLE: Using %todo Extension Point in ReScript\nDESCRIPTION: Demonstrates how to use the %todo extension point to mark unimplemented code. The example shows a function that uses %todo with a message, and how it's transpiled to JavaScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/extension_todo.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\nlet implementMeLater = (): string => %todo(\"This should return a string eventually.\")\n\nlet x = implementMeLater()\n\nConsole.log(x->String.includes(\"x\"))\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar Js_exn = require(\"./stdlib/js_exn.js\");\n\nfunction implementMeLater() {\n  return Js_exn.raiseError(\"playground.res:1:37-42 - Todo: This should return a string eventually.\");\n}\n\nvar x = Js_exn.raiseError(\"playground.res:1:37-42 - Todo: This should return a string eventually.\");\n\nconsole.log(x.includes(\"x\"));\n```\n\n----------------------------------------\n\nTITLE: Array Search and Iteration Methods\nDESCRIPTION: Methods for searching, filtering and iterating over array elements including map, reduce, filter and find operations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-16-array.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet includes: (elt, t) => bool\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet indexOf: (elt, t) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet find: ((. elt) => bool, t) => Js.undefined<elt>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet map: ((. elt) => 'b, t) => typed_array<'b>\n```\n\n----------------------------------------\n\nTITLE: Defining Type Module Signature in ReScript\nDESCRIPTION: Declares a module type 'Type' with a single type 't', used as a common interface for typed array modules.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array.mdx#2025-04-18_snippet_2\n\nLANGUAGE: ReScript\nCODE:\n```\nmodule type Type = {\n  type t\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing sets in ReScript with MutableSetInt\nDESCRIPTION: Provides a total ordering between sets, useful when creating sets of sets. Compares sizes first and then iterates over elements following their order.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_18\n\nLANGUAGE: rescript\nCODE:\n```\nlet cmp: (t, t) => int;\n```\n\n----------------------------------------\n\nTITLE: Defining String Value Type in ReScript MutableSetString\nDESCRIPTION: Defines the type of elements in the string set, which is simply 'string'.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\ntype value = string;\n```\n\n----------------------------------------\n\nTITLE: Stable Sort Signature\nDESCRIPTION: Function signature for performing a stable sort on a string array, returning a new sorted array with fixed comparator.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/sort-array-string.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nlet stableSort: array<element> => array<element>\n```\n\n----------------------------------------\n\nTITLE: Checking if HashSetString is empty\nDESCRIPTION: Returns true if the HashSetString contains no elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-set-string.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet isEmpty: t => bool;\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Array Elements\nDESCRIPTION: Executes the provided function once for each element in the array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_40\n\nLANGUAGE: rescript\nCODE:\n```\nlet forEach: ((. elt) => unit, t) => unit\n```\n\n----------------------------------------\n\nTITLE: Packing Map Identity and Data in ReScript\nDESCRIPTION: Advanced usage function that creates a packed collection from separate identity and data components.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map.mdx#2025-04-18_snippet_15\n\nLANGUAGE: reasonml\nCODE:\n```\nlet packIdData: (~id: id('k, 'id), ~data: Belt_MapDict.t('k, 'v, 'id)) => t('k, 'v, 'id);\n```\n\n----------------------------------------\n\nTITLE: Unboxed Attribute Implementation in ReScript\nDESCRIPTION: Shows how to use the @unboxed attribute to optimize JavaScript output by removing wrapper objects.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/unboxed.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\n@unboxed\ntype name = Name(string)\nlet studentName = Name(\"Joe\")\n\n@unboxed\ntype greeting = {message: string}\nlet hi = {message: \"hello!\"}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar studentName = \"Joe\";\n\nvar hi = \"hello!\";\n```\n\n----------------------------------------\n\nTITLE: Vector Right Fold Operation\nDESCRIPTION: Performs a right fold operation on vector elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/vector.mdx#2025-04-18_snippet_12\n\nLANGUAGE: res\nCODE:\n```\nlet foldRight: ((. 'b, 'a) => 'a, t<'b>, 'a) => 'a\n```\n\n----------------------------------------\n\nTITLE: Slicing ArrayBuffer from a Starting Point in ReScript\nDESCRIPTION: Function signature for creating a new ArrayBuffer from a slice of an existing one, specifying only the starting index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_array-buffer.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reasonml\nCODE:\n```\nlet sliceFrom: (t, int) => Js_typed_array2.array_buffer;\n```\n\n----------------------------------------\n\nTITLE: Creating Set from Sorted Array\nDESCRIPTION: Function signature for creating a set from a pre-sorted array of strings.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nlet fromSortedArrayUnsafe: array<value> => t\n```\n\n----------------------------------------\n\nTITLE: Creating UInt32Array from buffer\nDESCRIPTION: Defines a function that creates a new typed array using an existing ArrayBuffer for its storage.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_52\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromBuffer: Js_typed_array.array_buffer => t\n```\n\n----------------------------------------\n\nTITLE: Iterating over a set with uncurried function in ReScript with MutableSetInt\nDESCRIPTION: Applies the given uncurried function to all elements of the set in increasing order. This is an internal function primarily used for optimization.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_20\n\nLANGUAGE: rescript\nCODE:\n```\nlet forEachU: (t, [@bs] (value => unit)) => unit;\n```\n\n----------------------------------------\n\nTITLE: Testing Some TypedArray Elements with Index in ReScript\nDESCRIPTION: Function signature for testing whether at least one element in a Uint8ClampedArray passes a test implemented by a function that receives both the element and its index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_49\n\nLANGUAGE: res\nCODE:\n```\nlet somei: ((. elt, int) => bool, t) => bool\n```\n\n----------------------------------------\n\nTITLE: Integer multiplication in ReScript's Belt.Int module\nDESCRIPTION: The * operator multiplies two integers. This is the same as the multiplication operator from Pervasives.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/int.mdx#2025-04-18_snippet_6\n\nLANGUAGE: reason\nCODE:\n```\nlet ( * ): (int, int) => int;\n```\n\nLANGUAGE: reason\nCODE:\n```\nopen Belt.Int;\nJs.log(2 * 2 === 4); /* true */\n```\n\n----------------------------------------\n\nTITLE: Float to Exponential String Conversion\nDESCRIPTION: Function signature for converting float to exponential notation string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/float.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet toExponential: float => string\n```\n\n----------------------------------------\n\nTITLE: Find Index of Element Passing Test Function with Index\nDESCRIPTION: Returns the index of the first element in the Float32Array that satisfies the provided test function that includes the element index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-32-array.mdx#2025-04-18_snippet_39\n\nLANGUAGE: rescript\nCODE:\n```\nlet findIndexi: ((. elt, int) => bool, t) => int;\n```\n\n----------------------------------------\n\nTITLE: Declaring getMilliseconds Function for Date in ReScript\nDESCRIPTION: Declares the getMilliseconds function, which returns the milliseconds for a given Date object in the current time zone.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_24\n\nLANGUAGE: rescript\nCODE:\n```\nlet getMilliseconds: t => float\n```\n\n----------------------------------------\n\nTITLE: Reducing a set in ReScript\nDESCRIPTION: Reduces the set to a single value using an accumulator function, starting with the provided initial value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-int.mdx#2025-04-18_snippet_20\n\nLANGUAGE: reason\nCODE:\n```\nlet reduce: (t, 'a, ('a, value) => 'a) => 'a;\n```\n\n----------------------------------------\n\nTITLE: Getting the Byte Length of Array\nDESCRIPTION: Function signature to retrieve the length in bytes of a Uint16Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nlet byteLength: t => int\n```\n\n----------------------------------------\n\nTITLE: Array Manipulation Methods\nDESCRIPTION: Methods for manipulating array contents including copying, filling, reversing and sorting operations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-16-array.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet copyWithin: (~to_: int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fillInPlace: (elt, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet reverseInPlace: t => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet sortInPlace: t => t\n```\n\n----------------------------------------\n\nTITLE: Checking Set Invariant in ReScript\nDESCRIPTION: The 'checkInvariantInternal' function is used to verify if the set maintains its invariant. It raises an exception when the invariant is not held.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set-int.mdx#2025-04-18_snippet_5\n\nLANGUAGE: ReScript\nCODE:\n```\nlet checkInvariantInternal: t => unit\n```\n\n----------------------------------------\n\nTITLE: Creating a difference of two sets in ReScript with MutableSetInt\nDESCRIPTION: Returns a new set containing elements from the first set that don't exist in the second set. This operation creates a new set without modifying the originals.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_16\n\nLANGUAGE: rescript\nCODE:\n```\nlet diff: (t, t) => t;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet s0 = Belt.MutableSet.Int.fromArray([|5,2,3,5,6|]);\nlet s1 = Belt.MutableSet.Int.fromArray([|5,2,3,1,5,4|]);\nBelt.MutableSet.Int.toArray(Belt.MutableSet.Int.diff(s0, s1)); /* [|6|] */\nBelt.MutableSet.Int.toArray(Belt.MutableSet.Int.diff(s1,s0)); /* [|1,4|] */\n```\n\n----------------------------------------\n\nTITLE: Unsafe Get Element Access for Float32Array\nDESCRIPTION: Provides unsafe access to retrieve an element at a specific index from a Float32Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-32-array.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet unsafe_get: (t, int) => elt;\n```\n\n----------------------------------------\n\nTITLE: Map Operations for Float64Array\nDESCRIPTION: Functions to create a new typed array with the results of calling a provided function on every element.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-64-array.mdx#2025-04-18_snippet_20\n\nLANGUAGE: rescript\nCODE:\n```\nlet map: ((. elt) => 'b, t) => typed_array<'b>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet mapi: ((. elt, int) => 'b, t) => typed_array<'b>\n```\n\n----------------------------------------\n\nTITLE: To_opt Function Signature in ReScript\nDESCRIPTION: Alias function signature for converting a nullable type to an option type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/null.mdx#2025-04-18_snippet_11\n\nLANGUAGE: rescript\nCODE:\n```\nlet to_opt: t<'a> => option<'a>\n```\n\n----------------------------------------\n\nTITLE: Getting ArrayBuffer Byte Length in ReScript\nDESCRIPTION: Function signature for retrieving the byte length of an ArrayBuffer.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_array-buffer.mdx#2025-04-18_snippet_2\n\nLANGUAGE: ReScript\nCODE:\n```\nlet byteLength: t => int;\n```\n\n----------------------------------------\n\nTITLE: Checking if an Element Exists in a HashSet in ReScript\nDESCRIPTION: This function signature shows how to check if an element exists in a HashSet.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-set.mdx#2025-04-18_snippet_9\n\nLANGUAGE: reason\nCODE:\n```\nlet has: (t('a, 'id), 'a) => bool;\n```\n\n----------------------------------------\n\nTITLE: Identity Type Definition for MutableSet in ReasonML\nDESCRIPTION: Type signature for the identity needed to create a MutableSet, which is based on Belt_Id.comparable.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reasonml\nCODE:\n```\ntype id('value, 'id) = Belt_Id.comparable('value, 'id);\n```\n\n----------------------------------------\n\nTITLE: Getting Array Length\nDESCRIPTION: Function signature to retrieve the number of elements in a Uint16Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_8\n\nLANGUAGE: res\nCODE:\n```\nlet length: t => int\n```\n\n----------------------------------------\n\nTITLE: Checking All Elements (Curried) in ReScript MapInt Module\nDESCRIPTION: Function signature for checking if all elements satisfy a curried predicate.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-int.mdx#2025-04-18_snippet_16\n\nLANGUAGE: rescript\nCODE:\n```\nlet every: (t<'v>, (key, 'v) => bool) => bool\n```\n\n----------------------------------------\n\nTITLE: Converting Date to Locale Date String in ReScript\nDESCRIPTION: Returns the year, month, and day for the given Date in the current locale format. The output format depends on the user's locale settings.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_66\n\nLANGUAGE: ReScript\nCODE:\n```\nlet toLocaleDateString: t => string\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nJs.Date.toLocaleDateString(exampleDate) == \"11/29/1973\" // for en_US.utf8\nJs.Date.toLocaleDateString(exampleDate) == \"29.11.73\" // for de_DE.utf8\n```\n\n----------------------------------------\n\nTITLE: Comparing Sets in ReasonML\nDESCRIPTION: Defines a total ordering function between sets that can be used for creating sets of sets. It compares size first and then iterates over elements in order.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set.mdx#2025-04-18_snippet_17\n\nLANGUAGE: reasonml\nCODE:\n```\nlet cmp: (t('value, 'id), t('value, 'id)) => int;\n```\n\n----------------------------------------\n\nTITLE: Removing Multiple Elements from Set in ReScript\nDESCRIPTION: Removes multiple string elements from an array from a set at once. Unlike remove, the reference might change even if some elements don't exist.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-string.mdx#2025-04-18_snippet_17\n\nLANGUAGE: reasonml\nCODE:\n```\nlet removeMany: (t, array(value)) => t;\n```\n\n----------------------------------------\n\nTITLE: Slicing ArrayBuffer from Start Index in ReScript\nDESCRIPTION: Function signature for creating a new ArrayBuffer by slicing an existing one from a start index to the end.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_array-buffer.mdx#2025-04-18_snippet_4\n\nLANGUAGE: ReScript\nCODE:\n```\nlet sliceFrom: (int, t) => Js_typed_array.array_buffer;\n```\n\n----------------------------------------\n\nTITLE: Finding element index in Uint8ClampedArray\nDESCRIPTION: Returns the index of the first element in the array that satisfies the provided testing function, or -1 if no element is found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_38\n\nLANGUAGE: res\nCODE:\n```\nlet findIndex: ((. elt) => bool, t) => int\n```\n\n----------------------------------------\n\nTITLE: Searching and Querying Uint16Array in ReScript\nDESCRIPTION: Functions for searching elements and querying Uint16Array contents.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_5\n\nLANGUAGE: reason\nCODE:\n```\nlet includes: (elt, t) => bool;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet indexOf: (elt, t) => int;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet indexOfFrom: (elt, ~from: int, t) => int;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet lastIndexOf: (elt, t) => int;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet lastIndexOfFrom: (elt, ~from: int, t) => int;\n```\n\n----------------------------------------\n\nTITLE: Creating Array from Array-Like Object\nDESCRIPTION: Function signature to create a new Uint16Array from an array-like object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_56\n\nLANGUAGE: res\nCODE:\n```\nlet from: Js_typed_array.array_like<elt> => t\n```\n\n----------------------------------------\n\nTITLE: Converting Integer to String with Custom Precision in ReScript\nDESCRIPTION: Formats an integer to string with specified total digits, using either fixed-point or scientific notation as appropriate.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/int.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\n/* prints \"1.2e+8\" */\nJs.log(Js.Int.toPrecisionWithPrecision(123456789, ~digits=2))\n\n/* prints \"0.0\" */\nJs.log(Js.Int.toPrecisionWithPrecision(0, ~digits=2))\n```\n\n----------------------------------------\n\nTITLE: Dictionary Keys Usage Example\nDESCRIPTION: Example showing how to get all keys from a dictionary\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/dict.mdx#2025-04-18_snippet_10\n\nLANGUAGE: reason\nCODE:\n```\nJs.Dict.keys(ages) == [|\"Maria\", \"Vinh\", \"Fred\"|];\n```\n\n----------------------------------------\n\nTITLE: Defining array_buffer Type in ReScript\nDESCRIPTION: Declares a type alias for the JavaScript ArrayBuffer type in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\ntype array_buffer\n```\n\n----------------------------------------\n\nTITLE: Float NaN Declaration\nDESCRIPTION: Special value declaration for Not a Number (NaN) in float type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/float.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nlet _NaN: float\n```\n\n----------------------------------------\n\nTITLE: Getting Element with Exception in ReScript MutableSet\nDESCRIPTION: Retrieves a reference to a value in the collection, raising an exception when the element doesn't exist.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_14\n\nLANGUAGE: res\nCODE:\n```\nlet getExn: (t, value) => value\n```\n\n----------------------------------------\n\nTITLE: Example of fromString with Octal String\nDESCRIPTION: Shows parsing an octal string representation into a float.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/float.mdx#2025-04-18_snippet_37\n\nLANGUAGE: re\nCODE:\n```\n/* returns 9 */\nJs.Float.fromString(\"0o11\");\n```\n\n----------------------------------------\n\nTITLE: Retrieving Timezone Offset in ReScript\nDESCRIPTION: The getTimezoneOffset function returns the time zone offset in minutes from the current time zone to UTC. It binds to JavaScript's Date.getTimezoneOffset method.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_30\n\nLANGUAGE: res\nCODE:\n```\nlet getTimezoneOffset: t => float\n```\n\nLANGUAGE: res\nCODE:\n```\nJs.Date.getTimezoneOffset(exampleDate) == -60.0\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Array Elements\nDESCRIPTION: Function signature to execute a function on each element of the array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_40\n\nLANGUAGE: res\nCODE:\n```\nlet forEach: ((. elt) => unit, t) => unit\n```\n\n----------------------------------------\n\nTITLE: Example of toStringWithRadix with Binary Radix\nDESCRIPTION: Shows how to convert a number to its binary (base 2) string representation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/float.mdx#2025-04-18_snippet_27\n\nLANGUAGE: re\nCODE:\n```\n/* prints \"110\" */\nJs.log @@ Js.Float.toStringWithRadix(6., ~radix=2);\n```\n\n----------------------------------------\n\nTITLE: Creating Empty Null Values in ReScript\nDESCRIPTION: Returns the empty value, null.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/null.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reason\nCODE:\n```\nlet empty: t('a);\n```\n\n----------------------------------------\n\nTITLE: Setting array values in Uint8ClampedArray\nDESCRIPTION: Sets values in the Uint8ClampedArray from a source array of elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_6\n\nLANGUAGE: res\nCODE:\n```\nlet setArray: (array<elt>, t) => unit\n```\n\n----------------------------------------\n\nTITLE: String splitByRe Function in ReScript\nDESCRIPTION: The splitByRe function divides a string into an array of substrings at each match of the specified regular expression. Each substring is wrapped in an Option type, with Some for matches and None for empty sections.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/string.mdx#2025-04-18_snippet_9\n\nLANGUAGE: res\nCODE:\n```\nlet splitByRe: (Js_re.t, t) => array<option<t>>\n```\n\nLANGUAGE: res\nCODE:\n```\nJs.String.splitByRe(%re(\"/\\s*[,;]\\s*/\"), \"art; bed , cog ;dad\") == [\n    Some(\"art\"),\n    Some(\"bed\"),\n    Some(\"cog\"),\n    Some(\"dad\"),\n  ]\n```\n\n----------------------------------------\n\nTITLE: Implementing Array unsafe_set Method in ReScript\nDESCRIPTION: Function that sets a value at a given position in the array. Modifies the original array and can have undefined behavior for out of bounds indices.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/array.mdx#2025-04-18_snippet_29\n\nLANGUAGE: rescript\nCODE:\n```\nlet unsafe_set: (array<'a>, int, 'a) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet arr = [100, 101, 102, 103]\nJs.Array.unsafe_set(arr, 3, 99)\nJs.Array.unsafe_set(arr, 4, 88)\nJs.Array.unsafe_set(arr, 6, 77)\nJs.Array.unsafe_set(arr, -1, 66)\n```\n\n----------------------------------------\n\nTITLE: Filling Array from Index using fillFromInPlace in ReScript\nDESCRIPTION: Function signature for fillFromInPlace that fills elements of a Uint8Array from a specified index with a value, modifying the array in place.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_13\n\nLANGUAGE: rescript\nCODE:\n```\nlet fillFromInPlace: (elt, ~from: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Creating Int32Array Subsets\nDESCRIPTION: Functions to create new arrays from sections of existing Int32Arrays.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-32-array.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rescript\nCODE:\n```\nlet slice: (~start: int, ~end_: int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet copy: t => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet sliceFrom: (int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet subarray: (~start: int, ~end_: int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet subarrayFrom: (int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Copy Within Array with From Index\nDESCRIPTION: Copies a sequence of elements within the array from a specified start index to a position starting at the target index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-64-array.mdx#2025-04-18_snippet_10\n\nLANGUAGE: reason\nCODE:\n```\nlet copyWithinFrom: (~to_: int, ~from: int, t) => t;\n```\n\n----------------------------------------\n\nTITLE: Checking if a HashSetString is empty\nDESCRIPTION: Returns true if the HashSetString contains no elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/hash-set-string.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nlet isEmpty: t => bool\n```\n\n----------------------------------------\n\nTITLE: Higher-Order Array Methods for Int16Array (Reduction)\nDESCRIPTION: Methods that reduce the array to a single value using callback functions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-16-array.mdx#2025-04-18_snippet_13\n\nLANGUAGE: res\nCODE:\n```\nlet reduce: ((. 'b, elt) => 'b, 'b, t) => 'b\n```\n\nLANGUAGE: res\nCODE:\n```\nlet reducei: ((. 'b, elt, int) => 'b, 'b, t) => 'b\n```\n\nLANGUAGE: res\nCODE:\n```\nlet reduceRight: ((. 'b, elt) => 'b, 'b, t) => 'b\n```\n\nLANGUAGE: res\nCODE:\n```\nlet reduceRighti: ((. 'b, elt, int) => 'b, 'b, t) => 'b\n```\n\n----------------------------------------\n\nTITLE: Reducing a set in ReScript with MutableSetInt\nDESCRIPTION: Applies the given function to each element of the set in increasing order with an accumulator, combining all elements into a single value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_23\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduce: (t, 'a, ('a, value) => 'a) => 'a;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet s0 = Belt.MutableSet.Int.fromArray([|5,2,3,5,6|]);\ns0->Belt.MutableSet.Int.reduce([], (acc, element) =>\n  acc->Belt.List.add(element)\n); /* [6,5,3,2] */\n```\n\n----------------------------------------\n\nTITLE: Getting Day of Week in ReScript\nDESCRIPTION: Function signature for getDay, which returns the day of the week (0-6) for a given date.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_20\n\nLANGUAGE: rescript\nCODE:\n```\nlet getDay: t => float\n```\n\n----------------------------------------\n\nTITLE: Slicing ArrayBuffer with Start and End\nDESCRIPTION: Function signature for creating a new ArrayBuffer by extracting a section from an existing buffer using start and end positions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_array-buffer.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet slice: (t, ~start: int, ~end_: int) => Js_typed_array2.array_buffer\n```\n\n----------------------------------------\n\nTITLE: Set Iteration and Transformation\nDESCRIPTION: Methods for iterating over sets and transforming their contents using various functional operations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/set-int.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet forEach: (t, value => unit) => unit\nlet reduce: (t, 'a, ('a, value) => 'a) => 'a\nlet every: (t, value => bool) => bool\nlet some: (t, value => bool) => bool\nlet keep: (t, value => bool) => t\nlet partition: (t, value => bool) => (t, t)\n```\n\n----------------------------------------\n\nTITLE: Finding Last Element Index\nDESCRIPTION: Returns the index of the last occurrence of a specified element in the array, or -1 if not found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_23\n\nLANGUAGE: rescript\nCODE:\n```\nlet lastIndexOf: (elt, t) => int\n```\n\n----------------------------------------\n\nTITLE: Sorting Int16Array in ReScript\nDESCRIPTION: Functions for sorting an Int16Array in place, with an optional custom comparison function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_int-16-array.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet sortInPlace: t => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet sortInPlaceWith: ((. elt, elt) => int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Pushing Elements to MutableStack in ReScript\nDESCRIPTION: Function to add an element to the top of a stack.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-stack.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet push: (t('a), 'a) => unit;\n```\n\n----------------------------------------\n\nTITLE: Testing some element in UInt32Array\nDESCRIPTION: Defines a function that tests whether at least one element in the array passes the test implemented by the provided function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_48\n\nLANGUAGE: rescript\nCODE:\n```\nlet some: ((. elt) => bool, t) => bool\n```\n\n----------------------------------------\n\nTITLE: Map Predicate Operations\nDESCRIPTION: Functions for testing map contents against predicates\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-map-int.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reasonml\nCODE:\n```\nlet everyU: (t('a), [@bs] ((key, 'a) => bool)) => bool;\n\nlet every: (t('a), (key, 'a) => bool) => bool;\n\nlet someU: (t('a), [@bs] ((key, 'a) => bool)) => bool;\n\nlet some: (t('a), (key, 'a) => bool) => bool;\n```\n\n----------------------------------------\n\nTITLE: Filling Array with Value\nDESCRIPTION: Fills the entire array with a specified value, modifying it in place.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_12\n\nLANGUAGE: rescript\nCODE:\n```\nlet fillInPlace: (elt, t) => t\n```\n\n----------------------------------------\n\nTITLE: Getting a value from a set in ReScript\nDESCRIPTION: Returns the element from the set that is equivalent to the given value, wrapped in an option type. Returns None if no matching element exists.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-int.mdx#2025-04-18_snippet_36\n\nLANGUAGE: reason\nCODE:\n```\nlet get: (t, value) => option(value);\n```\n\n----------------------------------------\n\nTITLE: List Reverse Function Signature\nDESCRIPTION: Function to reverse a list.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/list.mdx#2025-04-18_snippet_8\n\nLANGUAGE: ReScript\nCODE:\n```\nlet rev: t('a) => t('a);\n```\n\n----------------------------------------\n\nTITLE: Converting Option to Null_undefined in ReScript\nDESCRIPTION: Defines the 'fromOption' function that converts an option('a) to Js.null_undefined('a).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/null-undefined.mdx#2025-04-18_snippet_10\n\nLANGUAGE: reason\nCODE:\n```\nlet fromOption: option('a) => t('a);\n```\n\n----------------------------------------\n\nTITLE: Converting Array to Localized String\nDESCRIPTION: Function signature to convert the array to a localized string representation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_31\n\nLANGUAGE: res\nCODE:\n```\nlet toLocaleString: t => string\n```\n\n----------------------------------------\n\nTITLE: Converting Uint16Array to String in ReScript\nDESCRIPTION: Functions for converting Uint16Array to string representations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_6\n\nLANGUAGE: reason\nCODE:\n```\nlet join: t => string;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet joinWith: (string, t) => string;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet toString: t => string;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet toLocaleString: t => string;\n```\n\n----------------------------------------\n\nTITLE: Checking Any Element (Uncurried) in ReScript MapInt Module\nDESCRIPTION: Function signature for checking if any element satisfies an uncurried predicate.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-int.mdx#2025-04-18_snippet_17\n\nLANGUAGE: rescript\nCODE:\n```\nlet someU: (t<'v>, (. key, 'v) => bool) => bool\n```\n\n----------------------------------------\n\nTITLE: Signature for cmp Function in ReScript Result Module\nDESCRIPTION: Function signature for cmp, which compares two Results using a provided comparison function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/result.mdx#2025-04-18_snippet_15\n\nLANGUAGE: rescript\nCODE:\n```\nlet cmp: (t<'a, 'c>, t<'b, 'd>, ('a, 'b) => int) => int\n```\n\n----------------------------------------\n\nTITLE: Iterating over a HashMap with integer keys in ReScript\nDESCRIPTION: Applies a function to all bindings in the hash map. The function receives the key and value for each binding.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-map-int.mdx#2025-04-18_snippet_11\n\nLANGUAGE: reason\nCODE:\n```\nlet forEach: (t('b), (key, 'b) => unit) => unit;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet hMap = Belt.HashMap.Int.make(~hintSize=10);\nBelt.HashMap.Int.set(hMap, 1, \"value1\");\nBelt.HashMap.Int.forEach(hMap, (key, value) => Js.log2(key, value));\n// prints (\"1\", \"value1\")\n```\n\n----------------------------------------\n\nTITLE: Defining array_like Type in ReScript\nDESCRIPTION: Declares a generic type alias for array-like structures in ReScript, parameterized by type 'a.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array.mdx#2025-04-18_snippet_1\n\nLANGUAGE: ReScript\nCODE:\n```\ntype array_like<'a>\n```\n\n----------------------------------------\n\nTITLE: Sorting Array with Custom Comparator using sortInPlaceWith in ReScript\nDESCRIPTION: Function signature for sortInPlaceWith that sorts the elements of a Uint8Array in place using a custom comparison function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_17\n\nLANGUAGE: rescript\nCODE:\n```\nlet sortInPlaceWith: ((. elt, elt) => int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Exception-based Retrieval of Undefined Value in ReScript\nDESCRIPTION: Retrieves the value from Js.undefined('a), potentially throwing an exception.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/undefined.mdx#2025-04-18_snippet_6\n\nLANGUAGE: reasonml\nCODE:\n```\nlet getExn: t('a) => 'a;\n```\n\n----------------------------------------\n\nTITLE: Find Element in Float32Array with Index\nDESCRIPTION: Returns the first element in the Float32Array that satisfies the provided test function that includes the element index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-32-array.mdx#2025-04-18_snippet_37\n\nLANGUAGE: rescript\nCODE:\n```\nlet findi: ((. elt, int) => bool, t) => Js.undefined(elt);\n```\n\n----------------------------------------\n\nTITLE: Converting Null to Option in ReScript\nDESCRIPTION: Maps Js.null('a) to option('a). A value becomes Some(a), and empty (null) becomes None.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/null.mdx#2025-04-18_snippet_12\n\nLANGUAGE: reason\nCODE:\n```\nlet toOption: t('a) => option('a);\n```\n\n----------------------------------------\n\nTITLE: Collection Operations\nDESCRIPTION: Functions for getting collection information and converting between different collection types.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-map-int.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nlet size: t<'a> => int\n```\n\nLANGUAGE: res\nCODE:\n```\nlet toList: t<'a> => list<(key, 'a)>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet toArray: t<'a> => array<(key, 'a)>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet fromArray: array<(key, 'a)> => t<'a>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet keysToArray: t<'a> => array<key>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet valuesToArray: t<'a> => array<'a>\n```\n\n----------------------------------------\n\nTITLE: Converting Float to Int in ReScript\nDESCRIPTION: The toInt function converts a given float to an int. It demonstrates how to use Belt.Float.toInt to perform the conversion.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/float.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\nJs.log(Belt.Float.toInt(1.0) === 1) /* true */\n```\n\n----------------------------------------\n\nTITLE: Testing some element with index in UInt32Array\nDESCRIPTION: Defines a function that tests whether at least one element in the array passes the test implemented by the provided function with access to the element index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_49\n\nLANGUAGE: rescript\nCODE:\n```\nlet somei: ((. elt, int) => bool, t) => bool\n```\n\n----------------------------------------\n\nTITLE: Finding First Matching Element with Index\nDESCRIPTION: Function signature to find the first element that satisfies a condition that includes its index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_37\n\nLANGUAGE: res\nCODE:\n```\nlet findi: ((. elt, int) => bool, t) => Js.undefined<elt>\n```\n\n----------------------------------------\n\nTITLE: CopyWithin Operations for Float64Array\nDESCRIPTION: Functions that implement the copyWithin method for Float64Array, which copies a sequence of elements within the array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-64-array.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet copyWithin: (~to_: int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet copyWithinFrom: (~to_: int, ~from: int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet copyWithinFromRange: (~to_: int, ~start: int, ~end_: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: ReScript Nullable Type Definitions\nDESCRIPTION: Defines various nullable and undefined types for JavaScript interop.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\ntype null<+'a>\ntype undefined<+'a>\ntype nullable<+'a>\ntype null_undefined<'a> = Js.nullable<'a>\n```\n\n----------------------------------------\n\nTITLE: Creating Empty Object in ReScript\nDESCRIPTION: Function signature for creating an empty JavaScript object. Returns an empty object literal {}.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/obj.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nlet empty: unit => {..}\n```\n\n----------------------------------------\n\nTITLE: Iterating over Uint8ClampedArray elements with index\nDESCRIPTION: Executes a provided function once for each array element, with the element index as a second parameter.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_41\n\nLANGUAGE: res\nCODE:\n```\nlet forEachi: ((. elt, int) => unit, t) => unit\n```\n\n----------------------------------------\n\nTITLE: Setting UInt32Array from array\nDESCRIPTION: Defines a function that copies the content of a regular array into a typed array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet setArray: (array<elt>, t) => unit\n```\n\n----------------------------------------\n\nTITLE: Iterating Over TypedArray Elements with Index in ReScript\nDESCRIPTION: Function signature for executing a provided function once for each element in a Uint8ClampedArray, with access to the element's index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_41\n\nLANGUAGE: res\nCODE:\n```\nlet forEachi: ((. elt, int) => unit, t) => unit\n```\n\n----------------------------------------\n\nTITLE: Setting Minutes in ReScript\nDESCRIPTION: Sets the minutes of a Date object according to current timezone. Returns milliseconds since epoch. Modifies the original Date object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_49\n\nLANGUAGE: res\nCODE:\n```\nlet date1 = Js.Date.fromFloat(123456654321.0)\nlet futureTime = Js.Date.setMinutes(date1, 34.0)\n```\n\n----------------------------------------\n\nTITLE: Adding Floats in ReScript\nDESCRIPTION: Addition of two float values using the + operator from Belt.Float. Can be opened in a module to avoid dot-notation, but yields a shadow warning.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/float.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reason\nCODE:\n```\nlet (+): (float, float) => float;\n```\n\nLANGUAGE: reason\nCODE:\n```\nopen Belt.Float;\nJs.log(2.0 + 2.0 === 4.0); /* true */\n```\n\n----------------------------------------\n\nTITLE: Creating Empty Undefined Values\nDESCRIPTION: Constant representing the empty undefined value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/undefined.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nlet empty: t<'a>\n```\n\n----------------------------------------\n\nTITLE: Converting Array to String\nDESCRIPTION: Function signature to join all elements of the array into a string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_21\n\nLANGUAGE: res\nCODE:\n```\nlet join: t => string\n```\n\n----------------------------------------\n\nTITLE: Embedding Expression-Level Raw JavaScript in ReScript\nDESCRIPTION: Shows how to use %raw to embed expression-level JavaScript code in ReScript. This example declares a ReScript variable with a raw JavaScript function value and then calls it.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/embed-raw-javascript.mdx#2025-04-18_snippet_1\n\nLANGUAGE: ReScript\nCODE:\n```\nlet add = %raw(`\n  function(a, b) {\n    console.log(\"hello from raw JavaScript!\");\n    return a + b\n  }\n`)\n\nJs.log(add(1, 2))\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar add = function(a, b) {\n  console.log(\"hello from raw JavaScript!\");\n  return a + b\n};\n\nconsole.log(add(1, 2));\n```\n\n----------------------------------------\n\nTITLE: Comparing maps with uncurried function in MapString module (ReScript)\nDESCRIPTION: Uncurried function for comparing two maps using a custom comparison function for values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-string.mdx#2025-04-18_snippet_5\n\nLANGUAGE: reason\nCODE:\n```\nlet cmpU: (t('v), t('v), [@bs] (('v, 'v) => int)) => int;\n```\n\n----------------------------------------\n\nTITLE: Difference of MutableSets Example in ReasonML\nDESCRIPTION: Example showing how to create a difference of two MutableSets using the diff function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_28\n\nLANGUAGE: reasonml\nCODE:\n```\nmodule IntCmp =\n  Belt.Id.MakeComparable({\n    type t = int;\n    let cmp = Pervasives.compare;\n  });\n\nlet s0 = Belt.MutableSet.fromArray([|5,2,3,5,6|], ~id=(module IntCmp));\nlet s1 = Belt.MutableSet.fromArray([|5,2,3,1,5,4|], ~id=(module IntCmp));\nBelt.MutableSet.toArray(Belt.MutableSet.diff(s0, s1)); /* [|6|] */\nBelt.MutableSet.toArray(Belt.MutableSet.diff(s1,s0)); /* [|1,4|] */\n```\n\n----------------------------------------\n\nTITLE: Set Array with Offset into Float32Array\nDESCRIPTION: Sets values from a ReScript array into a Float32Array, starting at the specified offset.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-32-array.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nlet setArrayOffset: (array(elt), int, t) => unit;\n```\n\n----------------------------------------\n\nTITLE: Clearing a mutable map in ReScript\nDESCRIPTION: Removes all bindings from the map, making it empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reasonml\nCODE:\n```\nlet clear: t('a) => unit;\n```\n\n----------------------------------------\n\nTITLE: Array Manipulation Functions\nDESCRIPTION: Functions for manipulating array contents including copying, filling, and sorting operations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_uint-32-array.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reason\nCODE:\n```\nlet copyWithin: (~to_: int, t) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet fillInPlace: (elt, t) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet reverseInPlace: t => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet sortInPlace: t => t;\n```\n\n----------------------------------------\n\nTITLE: Float toExponentialWithPrecision Function\nDESCRIPTION: Function to format a float using exponential notation with specified precision. Takes digits parameter to control decimal places.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/float.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet toExponentialWithPrecision: (float, ~digits: int) => string\n```\n\n----------------------------------------\n\nTITLE: Signature of someU function in Belt.Range\nDESCRIPTION: Type signature for the uncurried version of some function that checks if a predicate is true for at least one element in a range.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/range.mdx#2025-04-18_snippet_9\n\nLANGUAGE: reason\nCODE:\n```\nlet someU: (int, int, [@bs] (int => bool)) => bool;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Element with getUndefined in ReScript\nDESCRIPTION: Similar to get, but returns JavaScript's undefined when the element does not exist instead of using ReScript's option type. This is useful for JavaScript interoperability.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/set-string.mdx#2025-04-18_snippet_9\n\nLANGUAGE: res\nCODE:\n```\nlet getUndefined: (t, value) => Js.undefined<value>\n```\n\n----------------------------------------\n\nTITLE: Accessing underlying buffer in Uint8ClampedArray\nDESCRIPTION: Returns the ArrayBuffer object referenced by the Uint8ClampedArray.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\nlet buffer: t => Js_typed_array.array_buffer\n```\n\n----------------------------------------\n\nTITLE: Finding element in UInt32Array\nDESCRIPTION: Defines a function that returns the first element in the array that satisfies the provided testing function, or undefined if none found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_36\n\nLANGUAGE: rescript\nCODE:\n```\nlet find: ((. elt) => bool, t) => Js.undefined<elt>\n```\n\n----------------------------------------\n\nTITLE: From_opt Function Signature in ReScript\nDESCRIPTION: Alternative function signature for converting option types to Js.null_undefined.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/null-undefined.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\nlet from_opt: option<'a> => t<'a>\n```\n\n----------------------------------------\n\nTITLE: Partitioning MapDict (uncurried)\nDESCRIPTION: Function signature for partitioning a map into two maps based on an uncurried predicate function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_49\n\nLANGUAGE: reason\nCODE:\n```\nlet partitionU: (t('k, 'a, 'id), [@bs] (('k, 'a) => bool)) => (t('k, 'a, 'id), t('k, 'a, 'id));\n```\n\n----------------------------------------\n\nTITLE: Merging Two Maps with Custom Function in ReScript\nDESCRIPTION: Merges two maps using a custom function to determine the presence and value of each binding in the resulting map. This is the curried version of mergeU.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reasonml\nCODE:\n```\nlet merge:\n(t('k, 'v, 'id), t('k, 'v2, 'id), ('k, option('v), option('v2)) => option('v3)) =>\nt('k, 'v3, 'id);\n```\n\n----------------------------------------\n\nTITLE: Get Byte Offset of Float32Array\nDESCRIPTION: Returns the offset (in bytes) of the Float32Array from the start of its ArrayBuffer.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet byteOffset: t => int\n```\n\n----------------------------------------\n\nTITLE: Extracting Values from HashMap in ReScript\nDESCRIPTION: Returns an array of values from the hash map using Belt.HashMap.String.valuesToArray.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-map-string.mdx#2025-04-18_snippet_15\n\nLANGUAGE: rescript\nCODE:\n```\nlet valuesToArray: t<'a> => array<'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet hMap = Belt.HashMap.String.make(~hintSize=10)\nBelt.HashMap.String.set(hMap, \"1\", \"value1\")\nBelt.HashMap.String.set(hMap, \"2\", \"value2\")\n\nBelt.HashMap.String.valuesToArray(hMap) == [\"value1\", \"value2\"]\n```\n\n----------------------------------------\n\nTITLE: Finding Last Index of Element in TypedArray in ReScript\nDESCRIPTION: Function signature for finding the last index at which a given element can be found in a Uint8ClampedArray.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_23\n\nLANGUAGE: res\nCODE:\n```\nlet lastIndexOf: (elt, t) => int\n```\n\n----------------------------------------\n\nTITLE: Setting Array Elements with unsafe_set\nDESCRIPTION: Sets an element at the specified index without bounds checking.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-64-array.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\nlet unsafe_set: (t, int, elt) => unit;\n```\n\n----------------------------------------\n\nTITLE: Find Last Index of Value in Float32Array\nDESCRIPTION: Returns the last index at which the specified value can be found in the Float32Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-32-array.mdx#2025-04-18_snippet_23\n\nLANGUAGE: rescript\nCODE:\n```\nlet lastIndexOf: (elt, t) => int;\n```\n\n----------------------------------------\n\nTITLE: Adding Element to MutableSet in ReasonML\nDESCRIPTION: Function signature for adding an element to a MutableSet. If the element already exists, the set remains unchanged.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_13\n\nLANGUAGE: reasonml\nCODE:\n```\nlet add: (t('value, 'id), 'value) => unit;\n```\n\n----------------------------------------\n\nTITLE: Getting Length of TypedArray in ReScript\nDESCRIPTION: Function signature for retrieving the length (number of elements) of a Uint8ClampedArray.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_8\n\nLANGUAGE: res\nCODE:\n```\nlet length: t => int\n```\n\n----------------------------------------\n\nTITLE: Array Access and Manipulation Functions\nDESCRIPTION: Collection of function signatures for accessing and manipulating Uint16Array data including get, set, buffer access, and array operations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet unsafe_get: (t, int) => elt\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet unsafe_set: (t, int, elt) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet buffer: t => Js_typed_array.array_buffer\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet byteLength: t => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet byteOffset: t => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet setArray: (array<elt>, t) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet setArrayOffset: (array<elt>, int, t) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet length: t => int\n```\n\n----------------------------------------\n\nTITLE: Reading Integer Values from DataView in ReScript\nDESCRIPTION: Functions to read 8-bit, 16-bit, and 32-bit integer values from a DataView, with options for signed/unsigned and endianness.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_data-view.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet getInt8: (t, int) => int;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet getUint8: (t, int) => int;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet getInt16: (t, int) => int;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet getInt16LittleEndian: (t, int) => int;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet getUint16: (t, int) => int;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet getUint16LittleEndian: (t, int) => int;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet getInt32: (t, int) => int;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet getInt32LittleEndian: (t, int) => int;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet getUint32: (t, int) => int;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet getUint32LittleEndian: (t, int) => int;\n```\n\n----------------------------------------\n\nTITLE: Mapping values in MapDict (ReScript)\nDESCRIPTION: Functions to map values in a MapDict using a function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_24\n\nLANGUAGE: ReScript\nCODE:\n```\nlet mapU: (t<'k, 'a, 'id>, (. 'a) => 'b) => t<'k, 'b, 'id>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet map: (t<'k, 'a, 'id>, 'a => 'b) => t<'k, 'b, 'id>\n```\n\n----------------------------------------\n\nTITLE: Checking Invariant in ReScript Belt.MutableSet\nDESCRIPTION: The 'checkInvariantInternal' function checks if the internal invariant of a MutableSet is maintained. It raises an exception if the invariant is not held.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_55\n\nLANGUAGE: reason\nCODE:\n```\nlet checkInvariantInternal: t('a, 'b) => unit;\n```\n\n----------------------------------------\n\nTITLE: Getting String Length in ReScript\nDESCRIPTION: The length function returns the number of characters in a string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string.mdx#2025-04-18_snippet_6\n\nLANGUAGE: reason\nCODE:\n```\nlet length: t => int;\n```\n\nLANGUAGE: reason\nCODE:\n```\nJs.String2.length(\"abcd\") == 4;\n```\n\n----------------------------------------\n\nTITLE: Example of Converting String Set to Array in ReScript\nDESCRIPTION: Demonstrates how to convert a string set to an array of its elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-string.mdx#2025-04-18_snippet_53\n\nLANGUAGE: reasonml\nCODE:\n```\nlet s0 = Belt.Set.String.fromArray([|\"apple\", \"watermelon\"|]);\n\ns0->Belt.Set.String.toArray; /* [|\"apple\", \"watermelon\"|] */\n```\n\n----------------------------------------\n\nTITLE: Find Last Element Index\nDESCRIPTION: Returns the last index at which a given element can be found in the typed array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_type-s.mdx#2025-04-18_snippet_23\n\nLANGUAGE: res\nCODE:\n```\nlet lastIndexOf: (elt, t) => int\n```\n\n----------------------------------------\n\nTITLE: Declaring utcWithYM Function for Date in ReScript\nDESCRIPTION: Declares the utcWithYM function, which returns the number of milliseconds since the epoch for a given year and month in UTC.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_14\n\nLANGUAGE: rescript\nCODE:\n```\nlet utcWithYM: (~year: float, ~month: float, unit) => float\n```\n\n----------------------------------------\n\nTITLE: Checking if a value is a ReScript exception or open variant\nDESCRIPTION: Internal utility function that determines whether a value is a ReScript exception or an open variant. Not intended for public use.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/exn.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nlet isCamlExceptionOrOpenVariant: 'a => bool;\n```\n\n----------------------------------------\n\nTITLE: Setting UTC Full Year in ReScript\nDESCRIPTION: Sets a Date's year according to UTC. Returns milliseconds since epoch for the updated Date. Modifies the original Date.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_56\n\nLANGUAGE: rescript\nCODE:\n```\nlet setUTCFullYear: (t, float) => float\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet nextYear = Js.Date.setUTCFullYear(date1, 1974.0)\ndate1 == Js.Date.fromString(\"1974-11-15T21:30:54.321Z00:00\")\nnextYear == Js.Date.getTime(date1)\n```\n\n----------------------------------------\n\nTITLE: Testing Some TypedArray Elements in ReScript\nDESCRIPTION: Function signature for testing whether at least one element in a Uint8ClampedArray passes the test implemented by the provided function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_48\n\nLANGUAGE: res\nCODE:\n```\nlet some: ((. elt) => bool, t) => bool\n```\n\n----------------------------------------\n\nTITLE: setTimeout Example in ReScript\nDESCRIPTION: Example of using setTimeout to log a message after a 1-second delay.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/global.mdx#2025-04-18_snippet_11\n\nLANGUAGE: reasonml\nCODE:\n```\n/* Prints \"Timed out!\" in the console after one second */\n\nlet message = \"Timed out!\";\n\nJs.Global.setTimeout(() => Js.log(message), 1000);\n```\n\n----------------------------------------\n\nTITLE: JSON Type Testing Function in ReScript\nDESCRIPTION: Function signature for testing if a JSON value is of a specific kind, using the GADT kind system for type safety.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/json.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reason\nCODE:\n```\nlet test: ('a, kind('b)) => bool;\n```\n\n----------------------------------------\n\nTITLE: Removing Element from MutableSet in ReasonML\nDESCRIPTION: Function signature for removing an element from a MutableSet. If the element doesn't exist, the set remains unchanged.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_18\n\nLANGUAGE: reasonml\nCODE:\n```\nlet remove: (t('value, 'id), 'value) => unit;\n```\n\n----------------------------------------\n\nTITLE: Getting MapDict size in ReScript\nDESCRIPTION: Function to get the number of key-value pairs in a MapDict.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_10\n\nLANGUAGE: ReScript\nCODE:\n```\nlet size: t<'k, 'a, 'id> => int\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Undefined Values\nDESCRIPTION: Iterates over a contained value with a function. If the undefined contains a value, it's unwrapped and applied to the function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/undefined.mdx#2025-04-18_snippet_9\n\nLANGUAGE: res\nCODE:\n```\nlet iter: (t<'a>, (. 'a) => unit) => unit\n```\n\n----------------------------------------\n\nTITLE: Defining JavaScript Type Variants in ReScript\nDESCRIPTION: Recursive type definition that represents all possible JavaScript value types as ReScript variants, enabling type-safe handling of JavaScript values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/types.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\ntype rec t<'a> =\n  | Undefined: t<undefined_val>\n  | Null: t<null_val>\n  | Boolean: t<bool>\n  | Number: t<float>\n  | String: t<string>\n  | Function: t<function_val>\n  | Object: t<obj_val>\n  | Symbol: t<symbol>\n```\n\n----------------------------------------\n\nTITLE: Retrieving UTC Full Year in ReScript\nDESCRIPTION: The getUTCFullYear function returns the full year for a Date object, evaluated in UTC. It binds to JavaScript's Date.getUTCFullYear method.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_33\n\nLANGUAGE: res\nCODE:\n```\nlet getUTCFullYear: t => float\n```\n\nLANGUAGE: res\nCODE:\n```\nJs.Date.getUTCFullYear(exampleDate) == 1973.0\n```\n\n----------------------------------------\n\nTITLE: Creating Uninitialized Arrays in ReScript\nDESCRIPTION: Creates an array of specified length filled with undefined values. Type must be specified as Js.undefined.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/array.mdx#2025-04-18_snippet_13\n\nLANGUAGE: reason\nCODE:\n```\nlet makeUninitialized: int => array(Js.undefined('a));\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet arr: array(Js.undefined(string)) = Belt.Array.makeUninitialized(5);\n\nBelt.Array.getExn(arr, 0) == Js.undefined;\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for MutableMapInt\nDESCRIPTION: Core type definitions for the map's key type and generic container type\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-map-int.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reasonml\nCODE:\n```\ntype key = int;\n\ntype t('a);\n```\n\n----------------------------------------\n\nTITLE: Defining DataView type in ReScript\nDESCRIPTION: Defines the abstract type 't' representing a DataView object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array-2_data-view.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype t\n```\n\n----------------------------------------\n\nTITLE: Defining Float32Array Types in ReScript\nDESCRIPTION: Defines the basic type structure for Float32Array, including the element type (float), generic typed_array type, and the concrete Float32Array type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-32-array.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype elt = float;\ntype typed_array('a);\ntype t = typed_array(elt);\n```\n\n----------------------------------------\n\nTITLE: Creating subarray of Uint8ClampedArray within range\nDESCRIPTION: Returns a new Uint8ClampedArray view of the ArrayBuffer store for this array, referencing the elements at start up to (but not including) end.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_28\n\nLANGUAGE: res\nCODE:\n```\nlet subarray: (~start: int, ~end_: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Float to Precision String Conversion\nDESCRIPTION: Function signature for converting float to string with full precision.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/float.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nlet toPrecision: float => string\n```\n\n----------------------------------------\n\nTITLE: ReScript Code Using Belt Module\nDESCRIPTION: Example ReScript code that uses the Belt library for array operations. When compiled with external-stdlib configured, imports will reference the external package.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/build-external-stdlib.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nBelt.Array.forEach([1, 2, 3], num => Js.log(num))\n```\n\n----------------------------------------\n\nTITLE: Vector Initialization Operation\nDESCRIPTION: Initializes a vector with a function that maps indices to values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/vector.mdx#2025-04-18_snippet_17\n\nLANGUAGE: res\nCODE:\n```\nlet init: (int, (. int) => 'a) => t<'a>\n```\n\n----------------------------------------\n\nTITLE: List Initialize Function Signature\nDESCRIPTION: Function to create a list of specified length with elements generated by a function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/list.mdx#2025-04-18_snippet_19\n\nLANGUAGE: ReScript\nCODE:\n```\nlet init: (int, (. int) => 'a) => t('a);\n```\n\n----------------------------------------\n\nTITLE: HashSet Bucket Distribution\nDESCRIPTION: Returns an array representing the distribution of elements across internal buckets.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-set-string.mdx#2025-04-18_snippet_18\n\nLANGUAGE: rescript\nCODE:\n```\nlet getBucketHistogram: t => array<int>\n```\n\n----------------------------------------\n\nTITLE: Filling UInt32Array in place\nDESCRIPTION: Defines a function that fills all elements of the array with a given value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_12\n\nLANGUAGE: rescript\nCODE:\n```\nlet fillInPlace: (elt, t) => t\n```\n\n----------------------------------------\n\nTITLE: ReScript Null Value Type Definition\nDESCRIPTION: Defines an opaque type for JavaScript null values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/types.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reason\nCODE:\n```\ntype null_val;\n```\n\n----------------------------------------\n\nTITLE: Array Subsection Operations for Int16Array\nDESCRIPTION: Methods for creating copies or views of array subsections.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-16-array.mdx#2025-04-18_snippet_9\n\nLANGUAGE: res\nCODE:\n```\nlet slice: (~start: int, ~end_: int, t) => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet copy: t => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet sliceFrom: (int, t) => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet subarray: (~start: int, ~end_: int, t) => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet subarrayFrom: (int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Retrieving Value with Exception from MutableSet in ReScript\nDESCRIPTION: Similar to get but raises an exception when the element does not exist in the set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_18\n\nLANGUAGE: reason\nCODE:\n```\nlet getExn: (t, value) => value\n```\n\n----------------------------------------\n\nTITLE: Accessing and Modifying Uint8ClampedArray Elements in ReScript\nDESCRIPTION: Provides unsafe getter and setter functions for Uint8ClampedArray elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_1\n\nLANGUAGE: ReScript\nCODE:\n```\nlet unsafe_get: (t, int) => elt;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet unsafe_set: (t, int, elt) => unit;\n```\n\n----------------------------------------\n\nTITLE: Accessing Uint8ClampedArray elements in ReScript\nDESCRIPTION: Provides the unsafe_get function for retrieving elements from a Uint8ClampedArray by index without bounds checking.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\nlet unsafe_get: (t, int) => elt\n```\n\n----------------------------------------\n\nTITLE: Signature for eq Function in ReScript Result Module\nDESCRIPTION: Function signature for eq, which compares two Results using a provided equality function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/result.mdx#2025-04-18_snippet_13\n\nLANGUAGE: rescript\nCODE:\n```\nlet eq: (t<'a, 'c>, t<'b, 'd>, ('a, 'b) => bool) => bool\n```\n\n----------------------------------------\n\nTITLE: Dictionary Empty Function\nDESCRIPTION: Function signature for creating an empty dictionary\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/dict.mdx#2025-04-18_snippet_11\n\nLANGUAGE: reason\nCODE:\n```\nlet empty: unit => t('a);\n```\n\n----------------------------------------\n\nTITLE: Logging statistics of Belt.HashMap.String in ReScript\nDESCRIPTION: Prints statistical information about the hash map to the console.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/hash-map-string.mdx#2025-04-18_snippet_19\n\nLANGUAGE: ReScript\nCODE:\n```\nlet logStats: t<'a> => unit\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet hMap = Belt.HashMap.String.make(~hintSize=10)\nBelt.HashMap.String.set(hMap, \"1\", \"1\")\n\nBelt.HashMap.String.logStats(hMap)\n```\n\n----------------------------------------\n\nTITLE: Converting MutableQueue to Array in ReScript\nDESCRIPTION: Function to convert the queue to an array, with the first added element at the beginning of the array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-queue.mdx#2025-04-18_snippet_21\n\nLANGUAGE: rescript\nCODE:\n```\nlet toArray: t('a) => array('a);\n```\n\n----------------------------------------\n\nTITLE: String Conversion Operations for Float64Array\nDESCRIPTION: Functions to convert a Float64Array to a string representation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-64-array.mdx#2025-04-18_snippet_14\n\nLANGUAGE: rescript\nCODE:\n```\nlet toString: t => string\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet toLocaleString: t => string\n```\n\n----------------------------------------\n\nTITLE: Defining ArrayBuffer Type in ReScript\nDESCRIPTION: Defines the core type t that represents a JavaScript ArrayBuffer in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_array-buffer.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype t = Js_typed_array2.array_buffer\n```\n\n----------------------------------------\n\nTITLE: Joining TypedArray Elements with Custom Separator in ReScript\nDESCRIPTION: Function signature for creating a string from a Uint8ClampedArray by concatenating all elements with a custom separator.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_22\n\nLANGUAGE: res\nCODE:\n```\nlet joinWith: (string, t) => string\n```\n\n----------------------------------------\n\nTITLE: Checking if a set is empty in ReScript\nDESCRIPTION: Returns a boolean indicating whether the set contains any elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-int.mdx#2025-04-18_snippet_5\n\nLANGUAGE: reason\nCODE:\n```\nlet isEmpty: t => bool;\n```\n\n----------------------------------------\n\nTITLE: Adding Elements in ReScript MutableSetString\nDESCRIPTION: Function signature for adding a string to the set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_8\n\nLANGUAGE: res\nCODE:\n```\nlet add: (t, value) => unit\n```\n\n----------------------------------------\n\nTITLE: Array Creation Methods\nDESCRIPTION: Methods for creating new Float64Array instances from different sources.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_float-64-array.mdx#2025-04-18_snippet_5\n\nLANGUAGE: reason\nCODE:\n```\nlet make: array(elt) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet fromBuffer: Js_typed_array.array_buffer => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet fromBufferOffset: (Js_typed_array.array_buffer, int) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet fromBufferRange: (Js_typed_array.array_buffer, ~offset: int, ~length: int) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet fromLength: int => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet from: Js_typed_array.array_like(elt) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet create: array(elt) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet of_buffer: Js_typed_array.array_buffer => t;\n```\n\n----------------------------------------\n\nTITLE: Creating a slice of Uint8ClampedArray from index\nDESCRIPTION: Returns a new array containing the elements from the specified start index to the end of the array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_27\n\nLANGUAGE: res\nCODE:\n```\nlet sliceFrom: (int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Basic Array Operations\nDESCRIPTION: Core operations for accessing and modifying array elements including unsafe get/set and buffer operations\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reason\nCODE:\n```\nlet unsafe_get: (t, int) => elt;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet unsafe_set: (t, int, elt) => unit;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet buffer: t => Js_typed_array.array_buffer;\n```\n\n----------------------------------------\n\nTITLE: Searching and Checking Uint16Array in ReScript\nDESCRIPTION: Functions for searching elements and checking their presence in a Uint16Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_uint-16-array.mdx#2025-04-18_snippet_5\n\nLANGUAGE: ReScript\nCODE:\n```\nlet includes: (elt, t) => bool;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet indexOf: (elt, t) => int;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet indexOfFrom: (elt, ~from: int, t) => int;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet lastIndexOf: (elt, t) => int;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet lastIndexOfFrom: (elt, ~from: int, t) => int;\n```\n\n----------------------------------------\n\nTITLE: Fill Float32Array with Value from Index\nDESCRIPTION: Fills the Float32Array with a static value from the specified index to the end and returns the modified array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_13\n\nLANGUAGE: rescript\nCODE:\n```\nlet fillFromInPlace: (elt, ~from: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Creating an integer hash set from an array in ReScript\nDESCRIPTION: Function signature for building a new hash set containing all the elements from an array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/hash-set-int.mdx#2025-04-18_snippet_16\n\nLANGUAGE: res\nCODE:\n```\nlet fromArray: array<key> => t\n```\n\n----------------------------------------\n\nTITLE: ArrayBuffer Creation Function Signature\nDESCRIPTION: Function signature for creating a new ArrayBuffer with specified length. All elements are initialized to 0.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_array-buffer.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet make: int => t\n```\n\n----------------------------------------\n\nTITLE: Map Array Elements with Index\nDESCRIPTION: Creates a new typed array with the results of calling a provided function on every element in the array, with the element index as an additional parameter.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_type-s.mdx#2025-04-18_snippet_43\n\nLANGUAGE: res\nCODE:\n```\nlet mapi: ((. elt, int) => 'b, t) => typed_array<'b>\n```\n\n----------------------------------------\n\nTITLE: Test if Some Float32Array Elements Pass Condition\nDESCRIPTION: Tests whether at least one element in the Float32Array passes the provided function test.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_48\n\nLANGUAGE: rescript\nCODE:\n```\nlet some: ((. elt) => bool, t) => bool\n```\n\n----------------------------------------\n\nTITLE: Higher-Order Functions for Int16Array in ReScript\nDESCRIPTION: Implementations of common higher-order functions like map, filter, and reduce for Int16Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_int-16-array.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nlet map: ((. elt) => 'b, t) => typed_array('b);\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet filter: ((. elt) => bool, t) => t;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduce: ((. 'b, elt) => 'b, 'b, t) => 'b;\n```\n\n----------------------------------------\n\nTITLE: String toLocaleUpperCase Function in ReScript\nDESCRIPTION: The toLocaleUpperCase function converts a string to uppercase using the current locale. This allows for language-specific case conversions that might differ from the standard Unicode mappings.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/string.mdx#2025-04-18_snippet_21\n\nLANGUAGE: res\nCODE:\n```\nlet toLocaleUpperCase: t => t\n```\n\n----------------------------------------\n\nTITLE: Iterating over Uint8ClampedArray elements\nDESCRIPTION: Executes a provided function once for each array element.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_40\n\nLANGUAGE: res\nCODE:\n```\nlet forEach: ((. elt) => unit, t) => unit\n```\n\n----------------------------------------\n\nTITLE: Integer to Exponential String Conversion in ReScript\nDESCRIPTION: Converts an integer to its exponential (scientific) notation representation. Returns a string without precision specification.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/int.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\n/* prints \"7.7e+1\" */\nJs.log(Js.Int.toExponential(77))\n```\n\n----------------------------------------\n\nTITLE: Defining timeoutId Type in ReScript\nDESCRIPTION: Type definition for timeoutId used to identify timeouts started by Js.Global.setTimeout.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/global.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reasonml\nCODE:\n```\ntype timeoutId;\n```\n\n----------------------------------------\n\nTITLE: Reversing Uint8ClampedArray elements in-place\nDESCRIPTION: Reverses the order of elements in the array, modifying it in place and returning the modified array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_15\n\nLANGUAGE: res\nCODE:\n```\nlet reverseInPlace: t => t\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Links with String.link in ReScript\nDESCRIPTION: The link function creates an HTML anchor element string using two parameters. This method is deprecated in web standards and should not be used in production code.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/string.mdx#2025-04-18_snippet_14\n\nLANGUAGE: rescript\nCODE:\n```\nlet link: (t, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.String.link(\"page2.html\", \"Go to page two\") == \"<a href=\\\"page2.html\\\">Go to page two</a>\"\n```\n\n----------------------------------------\n\nTITLE: Dictionary FromArray Function\nDESCRIPTION: Function for creating a dictionary from an array of key-value pairs\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/dict.mdx#2025-04-18_snippet_16\n\nLANGUAGE: reason\nCODE:\n```\nlet fromArray: array((key, 'a)) => t('a);\n```\n\n----------------------------------------\n\nTITLE: Finding First Matching Element\nDESCRIPTION: Returns the first element that satisfies the provided testing function, or undefined if none found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_36\n\nLANGUAGE: rescript\nCODE:\n```\nlet find: ((. elt) => bool, t) => Js.undefined<elt>\n```\n\n----------------------------------------\n\nTITLE: Setting Float32Array Data in ReScript\nDESCRIPTION: Functions to set data in a Float32Array from a regular array, with optional offset.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet setArray: (array<elt>, t) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet setArrayOffset: (array<elt>, int, t) => unit\n```\n\n----------------------------------------\n\nTITLE: Defining array_buffer Type in ReScript\nDESCRIPTION: Declares the array_buffer type, which represents a JavaScript ArrayBuffer object in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\ntype array_buffer;\n```\n\n----------------------------------------\n\nTITLE: Iterating over HashSetString\nDESCRIPTION: Applies a function to each element of the HashSetString.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-set-string.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rescript\nCODE:\n```\nlet forEach: (t, key => unit) => unit;\n```\n\n----------------------------------------\n\nTITLE: Create Float32Array from Array\nDESCRIPTION: Creates a new Float32Array from an array of values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_51\n\nLANGUAGE: rescript\nCODE:\n```\nlet make: array<elt> => t\n```\n\n----------------------------------------\n\nTITLE: Updating value with uncurried function in ReScript\nDESCRIPTION: Function signature for updating a value in a mutable map using an uncurried function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_40\n\nLANGUAGE: ReScript\nCODE:\n```\nlet updateU: (t<'a>, key, (. option<'a>) => option<'a>) => unit\n```\n\n----------------------------------------\n\nTITLE: Uint8Array Buffer Properties\nDESCRIPTION: Functions to access the underlying ArrayBuffer and its properties like byteLength and byteOffset.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nlet buffer: t => Js_typed_array.array_buffer\n```\n\nLANGUAGE: res\nCODE:\n```\nlet byteLength: t => int\n```\n\nLANGUAGE: res\nCODE:\n```\nlet byteOffset: t => int\n```\n\n----------------------------------------\n\nTITLE: Creating UInt32Array with length\nDESCRIPTION: Defines a function that creates a new typed array with the specified length, initialized to zeros.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_55\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromLength: int => t\n```\n\n----------------------------------------\n\nTITLE: Testing All Elements with Index using everyi\nDESCRIPTION: Function signature to test if all elements in the Int8Array pass a test function that also receives the element index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_33\n\nLANGUAGE: res\nCODE:\n```\nlet everyi: ((. elt, int) => bool, t) => bool\n```\n\n----------------------------------------\n\nTITLE: Test All Array Elements with Indexed Predicate\nDESCRIPTION: Tests whether all elements in the array pass the provided function test, with access to the element index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-64-array.mdx#2025-04-18_snippet_33\n\nLANGUAGE: reason\nCODE:\n```\nlet everyi: ((. elt, int) => bool, t) => bool;\n```\n\n----------------------------------------\n\nTITLE: Creating Uint8Array from Array-like Object with from in ReScript\nDESCRIPTION: Function signature for from that creates a new Uint8Array from an array-like or iterable object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_56\n\nLANGUAGE: rescript\nCODE:\n```\nlet from: Js_typed_array2.array_like<elt> => t\n```\n\n----------------------------------------\n\nTITLE: Uncurried equality check for MapDict instances\nDESCRIPTION: Function signature for checking equality between two maps using uncurried functions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_7\n\nLANGUAGE: reason\nCODE:\n```\nlet eqU:\n  (t('k, 'a, 'id), t('k, 'a, 'id), ~kcmp: cmp('k, 'id), ~veq: [@bs] (('a, 'a) => bool)) => bool;\n```\n\n----------------------------------------\n\nTITLE: Filtering Uint8ClampedArray elements\nDESCRIPTION: Creates a new array with all elements that pass the test implemented by the provided function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_34\n\nLANGUAGE: res\nCODE:\n```\nlet filter: ((. elt) => bool, t) => t\n```\n\n----------------------------------------\n\nTITLE: Curried equality check for MapDict instances\nDESCRIPTION: Function signature for checking equality between two maps using curried functions for comparison.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_8\n\nLANGUAGE: reason\nCODE:\n```\nlet eq: (t('k, 'a, 'id), t('k, 'a, 'id), ~kcmp: cmp('k, 'id), ~veq: ('a, 'a) => bool) => bool;\n```\n\n----------------------------------------\n\nTITLE: Getting Storage Length in ReScript\nDESCRIPTION: External binding for getting the number of items in storage.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/dom/storage.mdx#2025-04-18_snippet_6\n\nLANGUAGE: reason\nCODE:\n```\nexternal length: t => int = \"length\"\n```\n\n----------------------------------------\n\nTITLE: Finding Array Elements with Index in ReScript\nDESCRIPTION: Returns first element that satisfies predicate function (with index) as Some(value), or None if no element found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array-2.mdx#2025-04-18_snippet_28\n\nLANGUAGE: res\nCODE:\n```\nlet positiveOddElement = (item, index) => mod(index, 2) == 1 && item > 0\n\nJs.Array2.findi([66, -33, 55, 88, 22], positiveOddElement) == Some(88)\nJs.Array2.findi([66, -33, 55, -88, 22], positiveOddElement) == None\n```\n\n----------------------------------------\n\nTITLE: Unsafe Element Access in Int16Array\nDESCRIPTION: Provides methods for accessing and setting array elements without bounds checking.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-16-array.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\nlet unsafe_get: (t, int) => elt\n```\n\nLANGUAGE: res\nCODE:\n```\nlet unsafe_set: (t, int, elt) => unit\n```\n\n----------------------------------------\n\nTITLE: Querying Float32Array Data in ReScript\nDESCRIPTION: Functions to search and query data within a Float32Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet includes: (elt, t) => bool\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet indexOf: (elt, t) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet indexOfFrom: (elt, ~from: int, t) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet lastIndexOf: (elt, t) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet lastIndexOfFrom: (elt, ~from: int, t) => int\n```\n\n----------------------------------------\n\nTITLE: Defining Null Type Alias in ReScript\nDESCRIPTION: Defines a local type alias 't<'a>' for 'Js.null<'a>' to represent nullable values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/null.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype t<'a> = Js.null<'a>\n```\n\n----------------------------------------\n\nTITLE: Copying MutableSetInt\nDESCRIPTION: Creates a copy of an existing set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet copy: t => t\n```\n\n----------------------------------------\n\nTITLE: Slicing and Copying Uint8ClampedArray in ReScript\nDESCRIPTION: Functions for creating new arrays from slices or copies of existing Uint8ClampedArrays.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_6\n\nLANGUAGE: ReScript\nCODE:\n```\nlet slice: (~start: int, ~end_: int, t) => t;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet copy: t => t;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet subarray: (~start: int, ~end_: int, t) => t;\n```\n\n----------------------------------------\n\nTITLE: Finding maximum key in ReScript\nDESCRIPTION: Function signature for finding the maximum key in a mutable map, returning an option type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_26\n\nLANGUAGE: ReScript\nCODE:\n```\nlet maxKey: t<'a> => option<key>\n```\n\n----------------------------------------\n\nTITLE: Checking if any entry satisfies a predicate with uncurried function (ReScript)\nDESCRIPTION: Uncurried function to check if at least one key-value pair in a map satisfies a given predicate.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-string.mdx#2025-04-18_snippet_17\n\nLANGUAGE: reason\nCODE:\n```\nlet someU: (t('v), [@bs] ((key, 'v) => bool)) => bool;\n```\n\n----------------------------------------\n\nTITLE: Reading 32-bit Unsigned Integer (Big Endian)\nDESCRIPTION: Gets an unsigned 32-bit integer at the specified byte offset from the start of the DataView using big-endian format.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_data-view.mdx#2025-04-18_snippet_16\n\nLANGUAGE: reasonml\nCODE:\n```\nlet getUint32: (t, int) => int;\n```\n\n----------------------------------------\n\nTITLE: Iterating Over MutableMaps in ReScript\nDESCRIPTION: Functions for iterating over map elements, including forEach, reduce, every, and some operations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-map.mdx#2025-04-18_snippet_4\n\nLANGUAGE: ReScript\nCODE:\n```\nlet forEachU: (t<'k, 'a, 'id>, (. 'k, 'a) => unit) => unit\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet forEach: (t<'k, 'a, 'id>, ('k, 'a) => unit) => unit\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet reduceU: (t<'k, 'a, 'id>, 'b, (. 'b, 'k, 'a) => 'b) => 'b\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet reduce: (t<'k, 'a, 'id>, 'b, ('b, 'k, 'a) => 'b) => 'b\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet everyU: (t<'k, 'a, 'id>, (. 'k, 'a) => bool) => bool\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet every: (t<'k, 'a, 'id>, ('k, 'a) => bool) => bool\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet someU: (t<'k, 'a, 'id>, (. 'k, 'a) => bool) => bool\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet some: (t<'k, 'a, 'id>, ('k, 'a) => bool) => bool\n```\n\n----------------------------------------\n\nTITLE: Testing every element with index in UInt32Array\nDESCRIPTION: Defines a function that tests whether all elements in the array pass the test implemented by the provided function, with access to the element index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_33\n\nLANGUAGE: rescript\nCODE:\n```\nlet everyi: ((. elt, int) => bool, t) => bool\n```\n\n----------------------------------------\n\nTITLE: Filling UInt32Array from position\nDESCRIPTION: Defines a function that fills elements of the array with a given value starting from a specific position.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_13\n\nLANGUAGE: rescript\nCODE:\n```\nlet fillFromInPlace: (elt, ~from: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: From_opt Function Signature in ReScript\nDESCRIPTION: Function signature for legacy conversion from Option to nullable type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/nullable.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\nlet from_opt: option<'a> => t<'a>\n```\n\n----------------------------------------\n\nTITLE: Find Index of Element Passing Test Function\nDESCRIPTION: Returns the index of the first element in the Float32Array that satisfies the provided test function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-32-array.mdx#2025-04-18_snippet_38\n\nLANGUAGE: rescript\nCODE:\n```\nlet findIndex: ((. elt) => bool, t) => int;\n```\n\n----------------------------------------\n\nTITLE: Constructing Null_undefined Value in ReScript\nDESCRIPTION: Function signature for 'return', which constructs a value of Js.null_undefined('a) containing a value of 'a.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/null-undefined.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet return: 'a => t<'a>\n```\n\n----------------------------------------\n\nTITLE: Finding Minimum Key in ReScript MapInt Module\nDESCRIPTION: Function signature for finding the minimum key in the map, returning an option.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-int.mdx#2025-04-18_snippet_25\n\nLANGUAGE: rescript\nCODE:\n```\nlet minKey: t<'a> => option<key>\n```\n\n----------------------------------------\n\nTITLE: Parsing strings to integers in ReScript\nDESCRIPTION: The fromString function attempts to parse a string into an integer. It returns Some(int) when successful or None when the string doesn't represent a valid integer.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/int.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\nlet fromString: string => option(int);\n```\n\nLANGUAGE: reason\nCODE:\n```\nJs.log(Belt.Int.fromString(\"1\") === Some(1)); /* true */\n```\n\n----------------------------------------\n\nTITLE: Filling Array from Index using fillFromInPlace\nDESCRIPTION: Function signature to fill elements of the Int8Array from a specified starting index with a value, modifying the array in place.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_13\n\nLANGUAGE: res\nCODE:\n```\nlet fillFromInPlace: (elt, ~from: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Creating Subarray\nDESCRIPTION: Function signature to create a new Int8Array from a specified range in the same underlying buffer.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_28\n\nLANGUAGE: res\nCODE:\n```\nlet subarray: (~start: int, ~end_: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Array Operations on UInt32Array in ReScript\nDESCRIPTION: Functions for reversing, sorting, and checking element presence in the array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_4\n\nLANGUAGE: ReScript\nCODE:\n```\nlet reverseInPlace: t => t\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet sortInPlace: t => t\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet sortInPlaceWith: ((. elt, elt) => int, t) => t\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet includes: (elt, t) => bool\n```\n\n----------------------------------------\n\nTITLE: ReScript Tagged Type Variant Definition\nDESCRIPTION: Defines a variant type for runtime type classification of JavaScript values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/types.mdx#2025-04-18_snippet_7\n\nLANGUAGE: reason\nCODE:\n```\ntype tagged_t =\n  | JSFalse\n  | JSTrue\n  | JSNull\n  | JSUndefined\n  | JSNumber(float)\n  | JSString(string)\n  | JSFunction(function_val)\n  | JSObject(obj_val)\n  | JSSymbol(symbol);\n```\n\n----------------------------------------\n\nTITLE: Unicode Code Point String Creation\nDESCRIPTION: Function signature for creating a string from a Unicode code point.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/string.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nlet fromCodePoint: int => t\n```\n\n----------------------------------------\n\nTITLE: Int8Array Type Definitions\nDESCRIPTION: Core type definitions for Int8Array including element type, typed array type and concrete type\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_int-8-array.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reasonml\nCODE:\n```\ntype elt = int;\ntype typed_array('a);\ntype t = typed_array(elt);\n```\n\n----------------------------------------\n\nTITLE: Map Update Function Signature\nDESCRIPTION: Updates a map by modifying, adding, or removing a binding based on a transformation function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet update: (t<'k, 'v, 'id>, 'k, option<'v> => option<'v>) => t<'k, 'v, 'id>\n```\n\n----------------------------------------\n\nTITLE: Converting TypedArray to Localized String in ReScript\nDESCRIPTION: Function signature for converting a Uint8ClampedArray to a localized string representation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_31\n\nLANGUAGE: res\nCODE:\n```\nlet toLocaleString: t => string\n```\n\n----------------------------------------\n\nTITLE: Example of fromString with Integer String\nDESCRIPTION: Shows how to parse a string containing an integer into a float.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/float.mdx#2025-04-18_snippet_32\n\nLANGUAGE: re\nCODE:\n```\n/* returns 123 */\nJs.Float.fromString(\"123\");\n```\n\n----------------------------------------\n\nTITLE: Testing if all entries satisfy predicate in ReScript map\nDESCRIPTION: Checks if all key-value pairs in the map satisfy the curried predicate function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_15\n\nLANGUAGE: reasonml\nCODE:\n```\nlet every: (t('a), (key, 'a) => bool) => bool;\n```\n\n----------------------------------------\n\nTITLE: DataView Properties\nDESCRIPTION: Functions to access DataView properties like buffer, byteLength, and byteOffset\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_data-view.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet buffer: t => Js_typed_array2.array_buffer\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet byteLength: t => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet byteOffset: t => int\n```\n\n----------------------------------------\n\nTITLE: Finding Element Index with findIndex in ReScript\nDESCRIPTION: Function signature for findIndex that returns the index of the first element in the Uint8Array that satisfies the provided testing function, or -1 if not found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_38\n\nLANGUAGE: rescript\nCODE:\n```\nlet findIndex: ((. elt) => bool, t) => int\n```\n\n----------------------------------------\n\nTITLE: Defining Hash Type Signature in ReScript\nDESCRIPTION: Type definition for hash function with type parameters for value and identity to ensure type safety between different hash functions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/id.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype hash<'a, 'id>\n```\n\n----------------------------------------\n\nTITLE: Inferred Types of HashSets in ReScript\nDESCRIPTION: This code snippet shows the inferred types of the HashSets created in the previous example. It demonstrates how the compiler differentiates between HashSets with different hash functions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-set.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reason\nCODE:\n```\nlet s0: t(int, I0.identity);\nlet s1: t(int, I1.identity);\n```\n\n----------------------------------------\n\nTITLE: Implementing Array unsafe_get Method in ReScript\nDESCRIPTION: Function that returns the value at a given position in the array. Returns undefined if position is out of bounds.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/array.mdx#2025-04-18_snippet_28\n\nLANGUAGE: rescript\nCODE:\n```\nlet unsafe_get: (array<'a>, int) => 'a\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet arr = [100, 101, 102, 103]\nJs.Array.unsafe_get(arr, 3) == 103\nJs.Array.unsafe_get(arr, 4)\n```\n\n----------------------------------------\n\nTITLE: Character Code to String Conversion\nDESCRIPTION: Function signature for creating a string from a character code between 0 and 65535.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/string-2.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nlet fromCharCode: int => t\n```\n\n----------------------------------------\n\nTITLE: Reducing a string set in ReScript\nDESCRIPTION: Applies a reduction function to each element of the set in increasing order.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set-string.mdx#2025-04-18_snippet_20\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduce: (t, 'a, ('a, value) => 'a) => 'a\n```\n\n----------------------------------------\n\nTITLE: String Conversion for UInt32Array in ReScript\nDESCRIPTION: Functions to convert Uint32Array to string representations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_6\n\nLANGUAGE: ReScript\nCODE:\n```\nlet toString: t => string\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet toLocaleString: t => string\n```\n\n----------------------------------------\n\nTITLE: Logging statistics of HashSetInt in ReScript\nDESCRIPTION: Logs statistical information about the HashSetInt to the console.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-set-int.mdx#2025-04-18_snippet_14\n\nLANGUAGE: ReScript\nCODE:\n```\nlet logStats: t => unit;\n```\n\n----------------------------------------\n\nTITLE: String Value Conversion Function\nDESCRIPTION: Function signature for converting any value to a string representation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/string-2.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\nlet make: 'a => t\n```\n\n----------------------------------------\n\nTITLE: Example of toExponential with Decimal Value\nDESCRIPTION: Shows how toExponential formats a decimal number in scientific notation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/float.mdx#2025-04-18_snippet_8\n\nLANGUAGE: re\nCODE:\n```\n/* prints \"7.71234e+1\" */\nJs.log @@ Js.Float.toExponential(77.1234);\n```\n\n----------------------------------------\n\nTITLE: Slicing ArrayBuffer with Start and End in ReScript\nDESCRIPTION: Function signature for creating a new ArrayBuffer by extracting a section of an existing one using both start and end indices.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array-2_array-buffer.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet slice: (t, ~start: int, ~end_: int) => Js_typed_array2.array_buffer\n```\n\n----------------------------------------\n\nTITLE: Copying Elements Within Array\nDESCRIPTION: Function signature for copying elements within the array to a specified position.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_9\n\nLANGUAGE: res\nCODE:\n```\nlet copyWithin: (~to_: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Float Addition in ReScript\nDESCRIPTION: Adds two float values. Can be used with module opening to avoid dot notation, though this may cause shadow warnings in default configuration.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/float.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet (+): (float, float) => float\n```\n\nLANGUAGE: rescript\nCODE:\n```\nopen Belt.Float\nJs.log(2.0 + 2.0 === 4.0) /* true */\n```\n\n----------------------------------------\n\nTITLE: Converting Option to Null_undefined in ReScript\nDESCRIPTION: Function signature for 'fromOption', which maps option('a) to Js.null_undefined('a). Some(a) becomes a, and None becomes undefined.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/null-undefined.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromOption: option<'a> => t<'a>\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Map Elements (Curried) in ReScript MapInt Module\nDESCRIPTION: Function signature for iterating over all key-value pairs in the map using a curried function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-int.mdx#2025-04-18_snippet_12\n\nLANGUAGE: rescript\nCODE:\n```\nlet forEach: (t<'v>, (key, 'v) => unit) => unit\n```\n\n----------------------------------------\n\nTITLE: ArrayBuffer Slice Method Signature\nDESCRIPTION: Function signature for creating a new ArrayBuffer by extracting a section of an existing one using start and end indices.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_array-buffer.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet slice: (~start: int, ~end_: int, t) => Js_typed_array.array_buffer\n```\n\n----------------------------------------\n\nTITLE: Setting NINJA_ANSI_FORCED for ReScript Color Output Control\nDESCRIPTION: The NINJA_ANSI_FORCED environment variable controls whether the ReScript compiler produces colored output. When set to 1, colors are forced on; when set to 0, colors are disabled; when not set, ReScript uses smart detection based on the output destination.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/build-configuration.mdx#2025-04-18_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nNINJA_ANSI_FORCED=1 # forces ReScript to produce color\nNINJA_ANSI_FORCED=0 # forces ReScript to not produce color\n```\n\n----------------------------------------\n\nTITLE: Slicing and Copying Uint16Array in ReScript\nDESCRIPTION: Functions for creating new arrays from portions of existing Uint16Arrays.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_uint-16-array.mdx#2025-04-18_snippet_7\n\nLANGUAGE: ReScript\nCODE:\n```\nlet slice: (~start: int, ~end_: int, t) => t;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet copy: t => t;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet sliceFrom: (int, t) => t;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet subarray: (~start: int, ~end_: int, t) => t;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet subarrayFrom: (int, t) => t;\n```\n\n----------------------------------------\n\nTITLE: Slice Array from Index\nDESCRIPTION: Returns a new array containing elements from the start index to the end of the array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-64-array.mdx#2025-04-18_snippet_27\n\nLANGUAGE: reason\nCODE:\n```\nlet sliceFrom: (int, t) => t;\n```\n\n----------------------------------------\n\nTITLE: Copying MutableQueue in ReScript\nDESCRIPTION: The 'copy' function creates and returns a fresh copy of the given queue.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-queue.mdx#2025-04-18_snippet_12\n\nLANGUAGE: rescript\nCODE:\n```\nlet copy: t<'a> => t<'a>\n```\n\n----------------------------------------\n\nTITLE: Using copyWithinFromRange Method for TypedArray in ReScript\nDESCRIPTION: Function signature for copying a sequence of array elements within a Uint8ClampedArray, specifying target position and source range.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_11\n\nLANGUAGE: res\nCODE:\n```\nlet copyWithinFromRange: (~to_: int, ~start: int, ~end_: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Getting RegExp Pattern Source\nDESCRIPTION: Function that returns the pattern string of a RegExp object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/re.mdx#2025-04-18_snippet_14\n\nLANGUAGE: reason\nCODE:\n```\nlet source: t => string;\n```\n\n----------------------------------------\n\nTITLE: Clearing an integer hash set in ReScript\nDESCRIPTION: Function signature for removing all elements from an integer hash set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/hash-set-int.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\nlet clear: t => unit\n```\n\n----------------------------------------\n\nTITLE: Testing if any entry satisfies predicate (uncurried) in ReScript map\nDESCRIPTION: Checks if at least one key-value pair in the map satisfies the uncurried predicate function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_16\n\nLANGUAGE: reasonml\nCODE:\n```\nlet someU: (t('a), [@bs] ((key, 'a) => bool)) => bool;\n```\n\n----------------------------------------\n\nTITLE: Converting MutableMaps in ReScript\nDESCRIPTION: Functions for converting maps to and from other data structures like lists and arrays.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-map.mdx#2025-04-18_snippet_5\n\nLANGUAGE: ReScript\nCODE:\n```\nlet size: t<'k, 'a, 'id> => int\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet toList: t<'k, 'a, 'id> => list<('k, 'a)>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet toArray: t<'k, 'a, 'id> => array<('k, 'a)>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet fromArray: (array<('k, 'a)>, ~id: id<'k, 'id>) => t<'k, 'a, 'id>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet keysToArray: t<'k, 'a, 'b> => array<'k>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet valuesToArray: t<'b, 'a, 'c> => array<'a>\n```\n\n----------------------------------------\n\nTITLE: Checking String Start in ReScript\nDESCRIPTION: The startsWith function checks if a string starts with a specified substring.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/string-2.mdx#2025-04-18_snippet_25\n\nLANGUAGE: rescript\nCODE:\n```\nlet startsWith: (t, t) => bool\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.String2.startsWith(\"BuckleScript\", \"Buckle\") == true\nJs.String2.startsWith(\"BuckleScript\", \"\") == true\nJs.String2.startsWith(\"JavaScript\", \"Buckle\") == false\n```\n\n----------------------------------------\n\nTITLE: Custom Comparator Implementation with Belt\nDESCRIPTION: Demonstrates creating custom comparable modules for Belt collections using phantom types\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reason\nCODE:\n```\nmodule Comparable1 =\n  Belt.Id.MakeComparable(\n    {\n      type t = (int, int);\n      let cmp = ((a0, a1), (b0, b1)) =>\n        switch (Pervasives.compare(a0, b0)) {\n        | 0 => Pervasives.compare(a1, b1)\n        | c => c\n        };\n    }\n  );\n\nlet mySet1 = Belt.Set.make(~id=(module Comparable1));\n\nmodule Comparable2 =\n  Belt.Id.MakeComparable(\n    {\n      type t = (int, int);\n      let cmp = ((a0, a1), (b0, b1)) =>\n        switch (Pervasives.compare(a0, b0)) {\n        | 0 => Pervasives.compare(a1, b1)\n        | c => c\n        };\n    }\n  );\n\nlet mySet2 = Belt.Set.make(~id=(module Comparable2));\n```\n\n----------------------------------------\n\nTITLE: Writing 8-bit Unsigned Integer\nDESCRIPTION: Stores an unsigned 8-bit integer at the specified byte offset from the start of the DataView.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_data-view.mdx#2025-04-18_snippet_23\n\nLANGUAGE: reasonml\nCODE:\n```\nlet setUint8: (t, int, int) => unit;\n```\n\n----------------------------------------\n\nTITLE: Checking Internal Invariant of MutableSet in ReScript\nDESCRIPTION: Validates the internal structure of the set. Raises an exception when the invariant is not held.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_20\n\nLANGUAGE: reason\nCODE:\n```\nlet checkInvariantInternal: t => unit\n```\n\n----------------------------------------\n\nTITLE: Copying Sets in ReScript MutableSetString\nDESCRIPTION: Creates a new set with the same elements as the provided set. Useful to avoid mutating the original set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_5\n\nLANGUAGE: reason\nCODE:\n```\nlet copy: t => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet s0 = Belt.MutableSet.String.fromArray([|\"orange\", \"apple\"|])\n\nlet copied = s0->Belt.MutableSet.String.copy;\ncopied->Belt.MutableSet.String.toArray /* [|\"apple\", \"orange\"|] */\n```\n\n----------------------------------------\n\nTITLE: Filling Range of Array using fillRangeInPlace\nDESCRIPTION: Function signature to fill a range of elements in the Int8Array with a specified value, modifying the array in place.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_14\n\nLANGUAGE: res\nCODE:\n```\nlet fillRangeInPlace: (elt, ~start: int, ~end_: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Check if Some Element Passes Test Function with Index\nDESCRIPTION: Tests whether at least one element in the Float32Array passes the provided function that includes the element index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-32-array.mdx#2025-04-18_snippet_49\n\nLANGUAGE: rescript\nCODE:\n```\nlet somei: ((. elt, int) => bool, t) => bool;\n```\n\n----------------------------------------\n\nTITLE: Mapping with Element Index\nDESCRIPTION: Creates a new array with the results of calling the provided function on every element with its index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_43\n\nLANGUAGE: rescript\nCODE:\n```\nlet mapi: ((. elt, int) => 'b, t) => typed_array<'b>\n```\n\n----------------------------------------\n\nTITLE: Removing multiple elements from a set in ReScript with MutableSetInt\nDESCRIPTION: Removes all elements from the provided array that exist in the set. This mutates the original set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_13\n\nLANGUAGE: rescript\nCODE:\n```\nlet removeMany: (t, array(value)) => unit;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet set = Belt.MutableSet.Int.fromArray([|1, 2, 3, 4|]);\n\nset->Belt.MutableSet.Int.removeMany([|5, 4, 3, 2, 1|]);\nset->Belt.MutableSet.Int.toArray; /* [||] */\n```\n\n----------------------------------------\n\nTITLE: Unsafe Vector Element Setting in ReScript\nDESCRIPTION: Sets an element in a vector without bounds checking. Use with caution.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/vector.mdx#2025-04-18_snippet_20\n\nLANGUAGE: ReScript\nCODE:\n```\nlet unsafe_set: (t('a), int, 'a) => unit;\n```\n\n----------------------------------------\n\nTITLE: Array Manipulation Methods\nDESCRIPTION: Functions for copying, filling, reversing, and sorting array data in place.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nlet copyWithin: (~to_: int, t) => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet copyWithinFrom: (~to_: int, ~from: int, t) => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet copyWithinFromRange: (~to_: int, ~start: int, ~end_: int, t) => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet fillInPlace: (elt, t) => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet fillFromInPlace: (elt, ~from: int, t) => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet fillRangeInPlace: (elt, ~start: int, ~end_: int, t) => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet reverseInPlace: t => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet sortInPlace: t => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet sortInPlaceWith: ((. elt, elt) => int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Reducing Map Elements (Curried) in ReScript MapInt Module\nDESCRIPTION: Function signature for reducing the map to a single value using a curried function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-int.mdx#2025-04-18_snippet_14\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduce: (t<'v>, 'v2, ('v2, key, 'v) => 'v2) => 'v2\n```\n\n----------------------------------------\n\nTITLE: Iterating and Transforming Uint8Array in ReScript\nDESCRIPTION: Higher-order functions for iterating, filtering, mapping, and reducing Uint8Array data.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\nlet every: ((. elt) => bool, t) => bool;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet everyi: ((. elt, int) => bool, t) => bool;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet filter: ((. elt) => bool, t) => t;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet filteri: ((. elt, int) => bool, t) => t;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet find: ((. elt) => bool, t) => Js.undefined(elt);\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet findi: ((. elt, int) => bool, t) => Js.undefined(elt);\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet findIndex: ((. elt) => bool, t) => int;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet findIndexi: ((. elt, int) => bool, t) => int;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet forEach: ((. elt) => unit, t) => unit;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet forEachi: ((. elt, int) => unit, t) => unit;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet map: ((. elt) => 'b, t) => typed_array('b);\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet mapi: ((. elt, int) => 'b, t) => typed_array('b);\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduce: ((. 'b, elt) => 'b, 'b, t) => 'b;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet reducei: ((. 'b, elt, int) => 'b, 'b, t) => 'b;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduceRight: ((. 'b, elt) => 'b, 'b, t) => 'b;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduceRighti: ((. 'b, elt, int) => 'b, 'b, t) => 'b;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet some: ((. elt) => bool, t) => bool;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet somei: ((. elt, int) => bool, t) => bool;\n```\n\n----------------------------------------\n\nTITLE: ToOption Function Signature in ReScript\nDESCRIPTION: Function signature for converting a nullable type to an option type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/null.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rescript\nCODE:\n```\nlet toOption: t<'a> => option<'a>\n```\n\n----------------------------------------\n\nTITLE: Defining key and map types in ReScript\nDESCRIPTION: Defines the key type as string and the map type t as a generic type with a value parameter.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-string.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\ntype key = string\n```\n\nLANGUAGE: res\nCODE:\n```\ntype t<'value>\n```\n\n----------------------------------------\n\nTITLE: Reading 32-bit Signed Integer (Big Endian)\nDESCRIPTION: Gets a signed 32-bit integer at the specified byte offset from the start of the DataView using big-endian format.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_data-view.mdx#2025-04-18_snippet_14\n\nLANGUAGE: reasonml\nCODE:\n```\nlet getInt32: (t, int) => int;\n```\n\n----------------------------------------\n\nTITLE: Fill Float32Array from Index with Value\nDESCRIPTION: Fills elements of the Float32Array with the specified value, starting from the specified index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-32-array.mdx#2025-04-18_snippet_13\n\nLANGUAGE: rescript\nCODE:\n```\nlet fillFromInPlace: (elt, ~from: int, t) => t;\n```\n\n----------------------------------------\n\nTITLE: Setting Uint8ClampedArray elements in ReScript\nDESCRIPTION: Provides the unsafe_set function for setting elements in a Uint8ClampedArray at a specific index without bounds checking.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nlet unsafe_set: (t, int, elt) => unit\n```\n\n----------------------------------------\n\nTITLE: List Length Function Signature in ReScript\nDESCRIPTION: Defines the signature for the 'length' function, which takes a list and returns its length as an integer.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/list.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet length: t<'a> => int\n```\n\n----------------------------------------\n\nTITLE: Monorepo Project Structure in ReScript\nDESCRIPTION: Shows the folder structure for a ReScript monorepo project with multiple packages.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/build-pinned-dependencies.mdx#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmyproject/\n  app/\n   - src/App.res\n   - bsconfig.json\n  common/\n   - src/Header.res\n   - bsconfig.json\n  myplugin/\n   - src/MyPlugin.res\n   - bsconfig.json\n  package.json\n```\n\n----------------------------------------\n\nTITLE: Checking if a set is a subset in ReScript with MutableSetInt\nDESCRIPTION: Returns a boolean indicating whether the second set is a subset of the first set, meaning all elements in the second set exist in the first set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_17\n\nLANGUAGE: rescript\nCODE:\n```\nlet subset: (t, t) => bool;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet s0 = Belt.MutableSet.Int.fromArray([|5,2,3,5,6|]);\nlet s1 = Belt.MutableSet.Int.fromArray([|5,2,3,1,5,4|]);\nlet s2 = Belt.MutableSet.Int.intersect(s0, s1);\nBelt.MutableSet.Int.subset(s2, s0); /* true */\nBelt.MutableSet.Int.subset(s2, s1); /* true */\nBelt.MutableSet.Int.subset(s1, s0); /* false */\n```\n\n----------------------------------------\n\nTITLE: Retrieving UTC Milliseconds in ReScript\nDESCRIPTION: The getUTCMilliseconds function returns the number of milliseconds for a Date object, evaluated in UTC. It binds to JavaScript's Date.getUTCMilliseconds method.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_35\n\nLANGUAGE: res\nCODE:\n```\nlet getUTCMilliseconds: t => float\n```\n\nLANGUAGE: res\nCODE:\n```\nJs.Date.getUTCMilliseconds(exampleDate) == 321.0\n```\n\n----------------------------------------\n\nTITLE: Basic Array Operations\nDESCRIPTION: Basic array access and manipulation functions including unsafe get/set operations and buffer access.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reasonml\nCODE:\n```\nlet unsafe_get: (t, int) => elt;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet unsafe_set: (t, int, elt) => unit;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet buffer: t => Js_typed_array.array_buffer;\n```\n\n----------------------------------------\n\nTITLE: Reducing TypedArray Elements from Right with Index in ReScript\nDESCRIPTION: Function signature for applying a function that receives the accumulator, current element, and its index against each element in a Uint8ClampedArray, starting from the last element.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_47\n\nLANGUAGE: res\nCODE:\n```\nlet reduceRighti: ((. 'b, elt, int) => 'b, 'b, t) => 'b\n```\n\n----------------------------------------\n\nTITLE: Array Construction Methods\nDESCRIPTION: Functions for creating new UInt32Arrays from various sources.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_6\n\nLANGUAGE: reasonml\nCODE:\n```\nlet make: array(elt) => t;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet fromBuffer: Js_typed_array.array_buffer => t;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet from: Js_typed_array.array_like(elt) => t;\n```\n\n----------------------------------------\n\nTITLE: Checking if every entry satisfies a predicate with uncurried function (ReScript)\nDESCRIPTION: Uncurried function to check if all key-value pairs in a map satisfy a given predicate.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-string.mdx#2025-04-18_snippet_15\n\nLANGUAGE: reason\nCODE:\n```\nlet everyU: (t('v), [@bs] ((key, 'v) => bool)) => bool;\n```\n\n----------------------------------------\n\nTITLE: Raising JavaScript RangeError\nDESCRIPTION: Function that raises a JavaScript RangeError with the provided message.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/exn.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rescript\nCODE:\n```\nlet raiseRangeError: string => 'a;\n```\n\n----------------------------------------\n\nTITLE: Accessing and Setting Uint8Array Elements in ReScript\nDESCRIPTION: Provides unsafe methods for getting and setting elements in a Uint8Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet unsafe_get: (t, int) => elt;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet unsafe_set: (t, int, elt) => unit;\n```\n\n----------------------------------------\n\nTITLE: Defining the key type for Belt.HashMap.Int in ReScript\nDESCRIPTION: Defines the type of keys used in Belt.HashMap.Int as integers.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-map-int.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\ntype key = int;\n```\n\n----------------------------------------\n\nTITLE: Iterating MutableStack with Uncurried Function in ReScript\nDESCRIPTION: Function signature for iterating over the stack elements using an uncurried function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-stack.mdx#2025-04-18_snippet_11\n\nLANGUAGE: ReScript\nCODE:\n```\nlet forEachU: (t<'a>, (. 'a) => unit) => unit\n```\n\n----------------------------------------\n\nTITLE: Updating value with uncurried function in MapString module (ReScript)\nDESCRIPTION: Uncurried function to update a value for a given key using a function, returning a new map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-string.mdx#2025-04-18_snippet_41\n\nLANGUAGE: reason\nCODE:\n```\nlet updateU: (t('v), key, [@bs] (option('v) => option('v))) => t('v);\n```\n\n----------------------------------------\n\nTITLE: Removing Key-Value Pair in ReScript MapInt Module\nDESCRIPTION: Function signature for removing a key-value pair from the map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-int.mdx#2025-04-18_snippet_38\n\nLANGUAGE: rescript\nCODE:\n```\nlet remove: (t<'v>, key) => t<'v>\n```\n\n----------------------------------------\n\nTITLE: Array Access Methods\nDESCRIPTION: Methods for getting and setting array elements, and accessing array properties like buffer, length and byte information.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_float-64-array.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reason\nCODE:\n```\nlet unsafe_get: (t, int) => elt;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet unsafe_set: (t, int, elt) => unit;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet buffer: t => Js_typed_array.array_buffer;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet byteLength: t => int;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet byteOffset: t => int;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet length: t => int;\n```\n\n----------------------------------------\n\nTITLE: Find Last Index of Value in Float32Array from Specific Position\nDESCRIPTION: Returns the last index at which the specified value can be found in the Float32Array, searching backwards from the specified position.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-32-array.mdx#2025-04-18_snippet_24\n\nLANGUAGE: rescript\nCODE:\n```\nlet lastIndexOfFrom: (elt, ~from: int, t) => int;\n```\n\n----------------------------------------\n\nTITLE: DataView Creation Functions\nDESCRIPTION: Functions for creating DataView instances from ArrayBuffer with optional offset and length parameters\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_data-view.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet make: Js_typed_array2.array_buffer => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromBuffer: Js_typed_array2.array_buffer => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromBufferOffset: (Js_typed_array2.array_buffer, int) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromBufferRange: (Js_typed_array2.array_buffer, ~offset: int, ~length: int) => t\n```\n\n----------------------------------------\n\nTITLE: Defining String Value Type in ReScript Sets\nDESCRIPTION: Defines the value type for the specialized string set implementation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-string.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reasonml\nCODE:\n```\ntype value = string;\n```\n\n----------------------------------------\n\nTITLE: Getting bucket histogram of a HashSetString\nDESCRIPTION: Returns an array representing the bucket distribution in the HashSetString for performance analysis.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/hash-set-string.mdx#2025-04-18_snippet_18\n\nLANGUAGE: res\nCODE:\n```\nlet getBucketHistogram: t => array<int>\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for Int8Array\nDESCRIPTION: Core type definitions for Int8Array including element type, typed array type, and the main type t\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\ntype elt = int;\ntype typed_array('a) = Js_typed_array2.Int8Array.typed_array('a);\ntype t = typed_array(elt);\n```\n\n----------------------------------------\n\nTITLE: ToOption Function Signature in ReScript\nDESCRIPTION: Function signature for converting Js.null_undefined to option types.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/null-undefined.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rescript\nCODE:\n```\nlet toOption: t<'a> => option<'a>\n```\n\n----------------------------------------\n\nTITLE: Iterate Over Array Elements with Index\nDESCRIPTION: Executes a provided function once for each array element, with access to the element index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-64-array.mdx#2025-04-18_snippet_41\n\nLANGUAGE: reason\nCODE:\n```\nlet forEachi: ((. elt, int) => unit, t) => unit;\n```\n\n----------------------------------------\n\nTITLE: Checking if TypedArray Includes Element in ReScript\nDESCRIPTION: Function signature for determining whether a Uint8ClampedArray includes a certain element, returning a boolean value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_18\n\nLANGUAGE: res\nCODE:\n```\nlet includes: (elt, t) => bool\n```\n\n----------------------------------------\n\nTITLE: Copy Range of Elements Within Float32Array\nDESCRIPTION: Copies a range of elements within the Float32Array to a position starting at the target index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-32-array.mdx#2025-04-18_snippet_11\n\nLANGUAGE: rescript\nCODE:\n```\nlet copyWithinFromRange: (~to_: int, ~start: int, ~end_: int, t) => t;\n```\n\n----------------------------------------\n\nTITLE: Converting Uint8Array to String in ReScript\nDESCRIPTION: Functions for converting Uint8Array to string representations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nlet toString: t => string;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet toLocaleString: t => string;\n```\n\n----------------------------------------\n\nTITLE: Getting ArrayBuffer Byte Length\nDESCRIPTION: Function signature for retrieving the byte length of an ArrayBuffer.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_array-buffer.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet byteLength: t => int\n```\n\n----------------------------------------\n\nTITLE: Retrieving Month from Date in ReScript\nDESCRIPTION: The getMonth function returns the month (0.0-11.0) for a Date object, evaluated in the current time zone. January is month zero. It binds to JavaScript's Date.getMonth method.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_27\n\nLANGUAGE: res\nCODE:\n```\nlet getMonth: t => float\n```\n\nLANGUAGE: res\nCODE:\n```\nJs.Date.getMonth(exampleDate) == 10.0\n```\n\n----------------------------------------\n\nTITLE: Defining the ArrayBuffer type in ReScript\nDESCRIPTION: Defines the type t as an alias for Js_typed_array.array_buffer, representing a JavaScript ArrayBuffer in ReScript's type system.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_array-buffer.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype t = Js_typed_array.array_buffer\n```\n\n----------------------------------------\n\nTITLE: Raising JavaScript ReferenceError\nDESCRIPTION: Function that raises a JavaScript ReferenceError with the provided message.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/exn.mdx#2025-04-18_snippet_11\n\nLANGUAGE: rescript\nCODE:\n```\nlet raiseReferenceError: string => 'a;\n```\n\n----------------------------------------\n\nTITLE: Defining hashable function in ReScript\nDESCRIPTION: Defines a function that creates a Hashable module using curried hash and equality functions. It takes hash and equality functions as labeled arguments and returns a module implementing the Hashable interface.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/id.mdx#2025-04-18_snippet_14\n\nLANGUAGE: ReScript\nCODE:\n```\nlet hashable: (~hash: 'a => int, ~eq: ('a, 'a) => bool) =>\n  module(Belt.Id.Hashable with type t = 'a)\n```\n\n----------------------------------------\n\nTITLE: Converting MapDict to a list\nDESCRIPTION: Function signature for converting a map to a list of key-value pairs in increasing order.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_21\n\nLANGUAGE: reason\nCODE:\n```\nlet toList: t('k, 'a, 'id) => list(('k, 'a));\n```\n\n----------------------------------------\n\nTITLE: Array Properties and Metrics\nDESCRIPTION: Functions to get array properties like length, byte length and offset\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_int-16-array.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\nlet byteLength: t => int;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet byteOffset: t => int;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet length: t => int;\n```\n\n----------------------------------------\n\nTITLE: Reduce Array Elements\nDESCRIPTION: Applies a function against an accumulator and each element in the array (from left to right).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-64-array.mdx#2025-04-18_snippet_44\n\nLANGUAGE: reason\nCODE:\n```\nlet reduce: ((. 'b, elt) => 'b, 'b, t) => 'b;\n```\n\n----------------------------------------\n\nTITLE: Finding last index of element in Uint8ClampedArray\nDESCRIPTION: Returns the last index at which a given element can be found in the array, or -1 if not present.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_23\n\nLANGUAGE: res\nCODE:\n```\nlet lastIndexOf: (elt, t) => int\n```\n\n----------------------------------------\n\nTITLE: Getting Character at Index in ReScript\nDESCRIPTION: The 'charAt' function retrieves the character at a specified index in a string. It takes a string and an integer index, returning the character at that position as a string, or an empty string if out of range.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/string-2.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\nlet charAt: (t, int) => t\n```\n\n----------------------------------------\n\nTITLE: Create Subarray of Float32Array\nDESCRIPTION: Returns a new Float32Array from the given range. Similar to slice but shares the same buffer. Start is inclusive and end is exclusive.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_28\n\nLANGUAGE: rescript\nCODE:\n```\nlet subarray: (~start: int, ~end_: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Reducing with Element Index\nDESCRIPTION: Applies a function against an accumulator and each element with its index to reduce to a single value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_45\n\nLANGUAGE: rescript\nCODE:\n```\nlet reducei: ((. 'b, elt, int) => 'b, 'b, t) => 'b\n```\n\n----------------------------------------\n\nTITLE: Fill Float32Array with Value\nDESCRIPTION: Fills the entire Float32Array with a static value and returns the modified array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_12\n\nLANGUAGE: rescript\nCODE:\n```\nlet fillInPlace: (elt, t) => t\n```\n\n----------------------------------------\n\nTITLE: Emptying a Vector in ReScript\nDESCRIPTION: Empties a vector of any type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/vector.mdx#2025-04-18_snippet_2\n\nLANGUAGE: ReScript\nCODE:\n```\nlet empty: t('a) => unit;\n```\n\n----------------------------------------\n\nTITLE: Checking if a SetDict is empty in ReScript\nDESCRIPTION: Demonstrates how to use the 'isEmpty' function to check if a SetDict contains any elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-dict.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet isEmpty: t('a, 'b) => bool;\n\nmodule IntCmp =\n  Belt.Id.MakeComparable({\n    type t = int;\n    let cmp = Pervasives.compare;\n  });\n\nlet empty = Belt.Set.Dict.fromArray([||], ~cmp=IntCmp.cmp);\nlet notEmpty = Belt.Set.Dict.fromArray([|1|], ~cmp=IntCmp.cmp);\n\nBelt.Set.Dict.isEmpty(empty); /* true */\nBelt.Set.Dict.isEmpty(notEmpty); /* false */\n```\n\n----------------------------------------\n\nTITLE: Reading an Int16 value from a DataView in ReScript\nDESCRIPTION: Function signature for getting a signed 16-bit integer from the specified byte offset with big-endian format.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_data-view.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rescript\nCODE:\n```\nlet getInt16: (t, int) => int\n```\n\n----------------------------------------\n\nTITLE: Checking Internal Invariant of Belt.MutableSet.String in ReScript\nDESCRIPTION: The 'checkInvariantInternal' function raises an exception when the invariant is not held.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_43\n\nLANGUAGE: reasonml\nCODE:\n```\nlet checkInvariantInternal: t => unit;\n```\n\n----------------------------------------\n\nTITLE: Deprecated Option to Undefined Conversion in ReScript\nDESCRIPTION: Deprecated function for converting option('a) to Js.undefined('a).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/undefined.mdx#2025-04-18_snippet_10\n\nLANGUAGE: reasonml\nCODE:\n```\nlet from_opt: option('a) => t('a);\n```\n\n----------------------------------------\n\nTITLE: List Tail Function Signature in ReScript\nDESCRIPTION: Defines the signature for the 'tl' function, which returns all but the first element of a list as an option.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/list.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet tl: t<'a> => option<t<'a>>\n```\n\n----------------------------------------\n\nTITLE: Testing all elements in Uint8ClampedArray with indexed predicate\nDESCRIPTION: Tests whether all elements in the array pass the test implemented by the provided function that also receives the element index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_33\n\nLANGUAGE: res\nCODE:\n```\nlet everyi: ((. elt, int) => bool, t) => bool\n```\n\n----------------------------------------\n\nTITLE: Join Float32Array Elements with Separator\nDESCRIPTION: Joins all elements of the Float32Array into a string, separated by the specified separator.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_22\n\nLANGUAGE: rescript\nCODE:\n```\nlet joinWith: (string, t) => string\n```\n\n----------------------------------------\n\nTITLE: Setting Values from an Array with Offset using setArrayOffset in ReScript\nDESCRIPTION: Function signature for setArrayOffset that copies values from a JavaScript array into a Uint8Array starting at a specified offset.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nlet setArrayOffset: (array<elt>, int, t) => unit\n```\n\n----------------------------------------\n\nTITLE: Getting the size of HashSetString\nDESCRIPTION: Returns the number of elements in the HashSetString.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-set-string.mdx#2025-04-18_snippet_13\n\nLANGUAGE: rescript\nCODE:\n```\nlet size: t => int;\n```\n\n----------------------------------------\n\nTITLE: Creating Uint8ClampedArray with specified length\nDESCRIPTION: Creates a new Uint8ClampedArray with the specified length. Can raise a JavaScript exception if the length is invalid.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_55\n\nLANGUAGE: res\nCODE:\n```\nlet fromLength: int => t\n```\n\n----------------------------------------\n\nTITLE: Copying a MutableSet in ReasonML\nDESCRIPTION: Function signature and example for creating a copy of an existing MutableSet.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_7\n\nLANGUAGE: reasonml\nCODE:\n```\nlet copy: t('value, 'id) => t('value, 'id);\n```\n\n----------------------------------------\n\nTITLE: Defining HashMap Types in ReScript\nDESCRIPTION: Core type definitions for hash maps and hashable identities used throughout the module.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-map.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\ntype t<'key, 'value, 'id>\n\ntype id<'a, 'id> = Belt.Id.hashable<'a, 'id>\n```\n\n----------------------------------------\n\nTITLE: Structural Typing Inference for Polymorphic Variants\nDESCRIPTION: Explains how the compiler infers types for polymorphic variants and how structural typing allows for flexibility in type checking and assignment.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/polymorphic-variant.mdx#2025-04-18_snippet_11\n\nLANGUAGE: res\nCODE:\n```\n// inferred as [> #Red]\nlet color = #Red\n```\n\n----------------------------------------\n\nTITLE: Checking if RegExp has Sticky Flag\nDESCRIPTION: Function that returns a boolean indicating whether the sticky flag is set on the RegExp object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/re.mdx#2025-04-18_snippet_15\n\nLANGUAGE: reason\nCODE:\n```\nlet sticky: t => bool;\n```\n\n----------------------------------------\n\nTITLE: Iterate Over Float32Array Elements with Index\nDESCRIPTION: Executes a provided function once for each element in the Float32Array, providing the element index as a parameter.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_41\n\nLANGUAGE: rescript\nCODE:\n```\nlet forEachi: ((. elt, int) => unit, t) => unit\n```\n\n----------------------------------------\n\nTITLE: Creating Date with Year, Month, Day, Hour, Minute, and Second in ReScript\nDESCRIPTION: Function signature for makeWithYMDHMS, which creates a date for a specific year, month, day, hour, minute, and second.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rescript\nCODE:\n```\nlet makeWithYMDHMS: (\n  ~year: float,\n  ~month: float,\n  ~date: float,\n  ~hours: float,\n  ~minutes: float,\n  ~seconds: float,\n  unit,\n) => t\n```\n\n----------------------------------------\n\nTITLE: Creating Empty Set\nDESCRIPTION: Creates an empty Set Dictionary instance\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set-dict.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nlet empty: t<'value, 'id>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet s0 = Belt.Set.Dict.empty\n```\n\n----------------------------------------\n\nTITLE: Copying elements within Uint8ClampedArray\nDESCRIPTION: Copies a sequence of elements within the array to a position starting at the specified target index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_9\n\nLANGUAGE: res\nCODE:\n```\nlet copyWithin: (~to_: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Adding an integer to a hash set in ReScript\nDESCRIPTION: Function signature for adding an integer key to a hash set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/hash-set-int.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\nlet add: (t, key) => unit\n```\n\n----------------------------------------\n\nTITLE: setTimeout Function Signature in ReScript\nDESCRIPTION: Function signature for setTimeout which executes a callback after a specified delay in milliseconds.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/global.mdx#2025-04-18_snippet_10\n\nLANGUAGE: reasonml\nCODE:\n```\nlet setTimeout: (unit => unit, int) => timeoutId;\n```\n\n----------------------------------------\n\nTITLE: Using Legacy Js.Promise Module in ReScript\nDESCRIPTION: Example of creating and chaining promises using the legacy Js.Promise module with pipe operator. This approach is maintained for backward compatibility but not recommended for new code.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/promise.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet myPromise = Js.Promise.make((~resolve, ~reject) => resolve(. 2))\n\nmyPromise->Js.Promise.then_(value => {\n  Js.log(value)\n  Js.Promise.resolve(value + 2)\n}, _)->Js.Promise.then_(value => {\n  Js.log(value)\n  Js.Promise.resolve(value + 3)\n}, _)->Js.Promise.catch(err => {\n  Js.log2(\"Failure!!\", err)\n  Js.Promise.resolve(-2)\n}, _)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar myPromise = new Promise(function (resolve, reject) {\n  return resolve(2);\n});\n\nmyPromise\n  .then(function (value) {\n    console.log(value);\n    return Promise.resolve((value + 2) | 0);\n  })\n  .then(function (value) {\n    console.log(value);\n    return Promise.resolve((value + 3) | 0);\n  })\n  .catch(function (err) {\n    console.log(\"Failure!!\", err);\n    return Promise.resolve(-2);\n  });\n```\n\n----------------------------------------\n\nTITLE: Writing a Uint16 value with little-endian format in ReScript\nDESCRIPTION: Function signature for storing an unsigned 16-bit integer at the specified byte offset with little-endian format.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_data-view.mdx#2025-04-18_snippet_27\n\nLANGUAGE: rescript\nCODE:\n```\nlet setUint16LittleEndian: (t, int, int) => unit\n```\n\n----------------------------------------\n\nTITLE: Reducing UInt32Array with index\nDESCRIPTION: Defines a function that applies a function against an accumulator and each element in the array with its index to reduce it to a single value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_45\n\nLANGUAGE: rescript\nCODE:\n```\nlet reducei: ((. 'b, elt, int) => 'b, 'b, t) => 'b\n```\n\n----------------------------------------\n\nTITLE: Defining Null_undefined Type Alias in ReScript\nDESCRIPTION: Defines a local alias 't' for Js.null_undefined('a) type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/null-undefined.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype t<'a> = Js.null_undefined<'a>\n```\n\n----------------------------------------\n\nTITLE: Find Index of First Matching Element\nDESCRIPTION: Returns the index of the first element in the array that satisfies the provided function test.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-64-array.mdx#2025-04-18_snippet_38\n\nLANGUAGE: reason\nCODE:\n```\nlet findIndex: ((. elt) => bool, t) => int;\n```\n\n----------------------------------------\n\nTITLE: Binary Search Signature\nDESCRIPTION: Function signature for performing binary search on a sorted string array. Returns index if found, or bitwise complement of insertion position if not found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/sort-array-string.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\nlet binarySearch: (array<element>, element) => int\n```\n\n----------------------------------------\n\nTITLE: Logging HashMap Statistics in ReScript\nDESCRIPTION: Logs statistics about the hash map to the console.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-map.mdx#2025-04-18_snippet_19\n\nLANGUAGE: rescript\nCODE:\n```\nlet logStats: t('a, 'b, 'c) => unit;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nmodule IntHash =\n  Belt.Id.MakeHashable({\n    type t = int;\n    let hash = a => a;\n    let eq = (a, b) => a == b;\n  });\nlet hMap = Belt.HashMap.make(~hintSize=10, ~id=(module IntHash));\nBelt.HashMap.set(hMap, 1, \"1\");\n\nBelt.HashMap.logStats(hMap);\n```\n\n----------------------------------------\n\nTITLE: Using round function to round float to nearest integral value in ReScript\nDESCRIPTION: The round function rounds to the nearest integral value expressed as a float. It takes a float as input and returns a float.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/math.mdx#2025-04-18_snippet_27\n\nLANGUAGE: res\nCODE:\n```\nlet round: float => float\n```\n\n----------------------------------------\n\nTITLE: Creating TypedArray with Length in ReScript\nDESCRIPTION: Function signature for creating a new Uint8ClampedArray of the specified length. Raises Js.Exn.Error exception if length is invalid.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_55\n\nLANGUAGE: res\nCODE:\n```\nlet fromLength: int => t\n```\n\n----------------------------------------\n\nTITLE: Reading 16-bit Signed Integer (Big Endian)\nDESCRIPTION: Gets a signed 16-bit integer at the specified byte offset from the start of the DataView using big-endian format.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_data-view.mdx#2025-04-18_snippet_10\n\nLANGUAGE: reasonml\nCODE:\n```\nlet getInt16: (t, int) => int;\n```\n\n----------------------------------------\n\nTITLE: Array Iteration Functions for Uint8Array\nDESCRIPTION: Higher-order functions for iterating over Uint8Array elements, including variants that provide index information.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_11\n\nLANGUAGE: res\nCODE:\n```\nlet every: ((. elt) => bool, t) => bool\n```\n\nLANGUAGE: res\nCODE:\n```\nlet everyi: ((. elt, int) => bool, t) => bool\n```\n\nLANGUAGE: res\nCODE:\n```\nlet filter: ((. elt) => bool, t) => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet filteri: ((. elt, int) => bool, t) => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet find: ((. elt) => bool, t) => Js.undefined<elt>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet findi: ((. elt, int) => bool, t) => Js.undefined<elt>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet findIndex: ((. elt) => bool, t) => int\n```\n\nLANGUAGE: res\nCODE:\n```\nlet findIndexi: ((. elt, int) => bool, t) => int\n```\n\nLANGUAGE: res\nCODE:\n```\nlet forEach: ((. elt) => unit, t) => unit\n```\n\nLANGUAGE: res\nCODE:\n```\nlet forEachi: ((. elt, int) => unit, t) => unit\n```\n\n----------------------------------------\n\nTITLE: Uint8Array Creation and Constants\nDESCRIPTION: Functions for creating Uint8Array instances from various sources, and constants like BYTES_PER_ELEMENT.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_13\n\nLANGUAGE: res\nCODE:\n```\nlet _BYTES_PER_ELEMENT: int\n```\n\nLANGUAGE: res\nCODE:\n```\nlet make: array<elt> => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet fromBuffer: Js_typed_array.array_buffer => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet fromBufferOffset: (Js_typed_array.array_buffer, int) => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet fromBufferRange: (Js_typed_array.array_buffer, ~offset: int, ~length: int) => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet fromLength: int => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet from: Js_typed_array.array_like<elt> => t\n```\n\n----------------------------------------\n\nTITLE: Defining anchor Method Signature in ReScript\nDESCRIPTION: Defines the signature for the anchor method that creates an HTML anchor element with a name attribute. This method is noted as deprecated in web standards.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/string-2.mdx#2025-04-18_snippet_34\n\nLANGUAGE: res\nCODE:\n```\nlet anchor: (t, t) => t\n```\n\n----------------------------------------\n\nTITLE: Defining Uint16Array Types in ReScript\nDESCRIPTION: Defines the element type, typed array type, and the specific Uint16Array type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_uint-16-array.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\ntype elt = int;\ntype typed_array('a);\ntype t = typed_array(elt);\n```\n\n----------------------------------------\n\nTITLE: In-Place Stable Sort Function Signature\nDESCRIPTION: Function signature for performing an in-place stable sort on an integer array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/sort-array-int.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet stableSortInPlace: array<element> => unit\n```\n\n----------------------------------------\n\nTITLE: Mapping Uint8ClampedArray elements\nDESCRIPTION: Creates a new array with the results of calling a provided function on every element in the array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_42\n\nLANGUAGE: res\nCODE:\n```\nlet map: ((. elt) => 'b, t) => typed_array<'b>\n```\n\n----------------------------------------\n\nTITLE: Array Search Operations\nDESCRIPTION: Functions for searching and comparing array elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reasonml\nCODE:\n```\nlet includes: (elt, t) => bool;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet indexOf: (elt, t) => int;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet lastIndexOf: (elt, t) => int;\n```\n\n----------------------------------------\n\nTITLE: Maximum Value Retrieval in ReScript Belt.Set\nDESCRIPTION: Returns the maximum value from a Belt.Set collection. Returns None if the collection is empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set.mdx#2025-04-18_snippet_25\n\nLANGUAGE: res\nCODE:\n```\nlet s0 = Belt.Set.make(~id=module(IntCmp))\nlet s1 = Belt.Set.fromArray([3,2,1,5], ~id=module(IntCmp))\n\ns0->Belt.Set.maximum /* None */\ns1->Belt.Set.maximum /* Some(5) */\n```\n\n----------------------------------------\n\nTITLE: Get Value Functions\nDESCRIPTION: Functions to get values of different numeric types from the DataView, with both big-endian and little-endian variants\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_data-view.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet getInt8: (t, int) => int\n\nlet getUint8: (t, int) => int\n\nlet getInt16: (t, int) => int\n\nlet getInt16LittleEndian: (t, int) => int\n\nlet getUint16: (t, int) => int\n\nlet getUint16LittleEndian: (t, int) => int\n\nlet getInt32: (t, int) => int\n\nlet getInt32LittleEndian: (t, int) => int\n\nlet getUint32: (t, int) => int\n\nlet getUint32LittleEndian: (t, int) => int\n\nlet getFloat32: (t, int) => float\n\nlet getFloat32LittleEndian: (t, int) => float\n\nlet getFloat64: (t, int) => float\n\nlet getFloat64LittleEndian: (t, int) => float\n```\n\n----------------------------------------\n\nTITLE: Finding Index of First Matching Element with Index in TypedArray in ReScript\nDESCRIPTION: Function signature for finding the index of the first element in a Uint8ClampedArray that satisfies a test implemented by a function that receives both the element and its index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_39\n\nLANGUAGE: res\nCODE:\n```\nlet findIndexi: ((. elt, int) => bool, t) => int\n```\n\n----------------------------------------\n\nTITLE: Setting Array Values in TypedArray in ReScript\nDESCRIPTION: Function signature for setting values in a Uint8ClampedArray from a regular array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_6\n\nLANGUAGE: res\nCODE:\n```\nlet setArray: (array<elt>, t) => unit\n```\n\n----------------------------------------\n\nTITLE: Using substr function in ReScript\nDESCRIPTION: Extracts a substring from a string, starting at a specified position. This is a legacy function that returns characters from a starting index to the end of the string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/string-2.mdx#2025-04-18_snippet_26\n\nLANGUAGE: rescript\nCODE:\n```\nlet substr: (t, ~from: int) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.String2.substr(\"abcdefghij\", ~from=3) == \"defghij\"\nJs.String2.substr(\"abcdefghij\", ~from=-3) == \"hij\"\nJs.String2.substr(\"abcdefghij\", ~from=12) == \"\"\n```\n\n----------------------------------------\n\nTITLE: Checking Element Existence in MutableSet in ReasonML\nDESCRIPTION: Function signature for checking if a specific element exists in a MutableSet.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_11\n\nLANGUAGE: reasonml\nCODE:\n```\nlet has: (t('value, 'a), 'value) => bool;\n```\n\n----------------------------------------\n\nTITLE: Reducing Array Elements from Right with Index using reduceRighti in ReScript\nDESCRIPTION: Function signature for reduceRighti that applies a function against an accumulator and each element in the Uint8Array (from right to left), also providing the element index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_47\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduceRighti: ((. 'b, elt, int) => 'b, 'b, t) => 'b\n```\n\n----------------------------------------\n\nTITLE: Reducing Set Elements in ReasonML\nDESCRIPTION: Demonstrates how to apply a function to each element of a set in increasing order with an accumulator, reducing the set to a single value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set.mdx#2025-04-18_snippet_22\n\nLANGUAGE: reasonml\nCODE:\n```\nlet reduce: (t('value, 'id), 'a, ('a, 'value) => 'a) => 'a;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet s0 = Belt.Set.fromArray([|5,2,3,5,6|], ~id=(module IntCmp));\ns0->Belt.Set.reduce([], (acc, element) =>\n  acc->Belt.List.add(element)\n); /* [6,5,3,2] */\n```\n\n----------------------------------------\n\nTITLE: Finding last index of element in UInt32Array\nDESCRIPTION: Defines a function that returns the last index at which a given element can be found in the array, or -1 if not found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_23\n\nLANGUAGE: rescript\nCODE:\n```\nlet lastIndexOf: (elt, t) => int\n```\n\n----------------------------------------\n\nTITLE: Converting Integer to Exponential Notation in ReScript\nDESCRIPTION: Converts an integer to a string using exponential notation. Returns scientific notation representation of the number.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/int.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\n/* prints \"7.7e+1\" */\nJs.log(Js.Int.toExponential(77))\n```\n\n----------------------------------------\n\nTITLE: Get Length of Float32Array\nDESCRIPTION: Returns the number of elements in the Float32Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-32-array.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\nlet length: t => int;\n```\n\n----------------------------------------\n\nTITLE: Using trunc function to truncate float in ReScript\nDESCRIPTION: The trunc function truncates its argument by removing fractional digits. It takes a float as input and returns a float.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/math.mdx#2025-04-18_snippet_36\n\nLANGUAGE: res\nCODE:\n```\nlet trunc: float => float\n```\n\n----------------------------------------\n\nTITLE: String Conversion for Int16Array\nDESCRIPTION: Methods for converting the array to string representations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-16-array.mdx#2025-04-18_snippet_8\n\nLANGUAGE: res\nCODE:\n```\nlet join: t => string\n```\n\nLANGUAGE: res\nCODE:\n```\nlet joinWith: (string, t) => string\n```\n\nLANGUAGE: res\nCODE:\n```\nlet toString: t => string\n```\n\nLANGUAGE: res\nCODE:\n```\nlet toLocaleString: t => string\n```\n\n----------------------------------------\n\nTITLE: Converting Array to String Representation\nDESCRIPTION: Returns a string representing the array and its elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_30\n\nLANGUAGE: rescript\nCODE:\n```\nlet toString: t => string\n```\n\n----------------------------------------\n\nTITLE: Float Subtraction in ReScript\nDESCRIPTION: The - operator performs subtraction of two float values. It can be opened in a module to avoid dot-notation, but this may yield a shadow warning.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/float.mdx#2025-04-18_snippet_5\n\nLANGUAGE: ReScript\nCODE:\n```\nopen Belt.Float\nJs.log(2.0 - 1.0 === 1.0) /* true */\n```\n\n----------------------------------------\n\nTITLE: Mapping Array Elements with Index using mapi in ReScript\nDESCRIPTION: Function signature for mapi that creates a new typed array with the results of calling a provided function on every element in the Uint8Array, also providing the element index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_43\n\nLANGUAGE: rescript\nCODE:\n```\nlet mapi: ((. elt, int) => 'b, t) => typed_array<'b>\n```\n\n----------------------------------------\n\nTITLE: Reducing map with uncurried function in ReScript\nDESCRIPTION: Function signature for reducing a mutable map using an uncurried function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_12\n\nLANGUAGE: ReScript\nCODE:\n```\nlet reduceU: (t<'a>, 'b, (. 'b, key, 'a) => 'b) => 'b\n```\n\n----------------------------------------\n\nTITLE: CopyWithin Methods for Int16Array\nDESCRIPTION: Methods for copying a sequence of array elements within the array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-16-array.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nlet copyWithin: (~to_: int, t) => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet copyWithinFrom: (~to_: int, ~from: int, t) => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet copyWithinFromRange: (~to_: int, ~start: int, ~end_: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Removing a Key-Value Pair from HashMap in ReScript\nDESCRIPTION: Removes the key-value pair associated with the given key from the hash map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-map-int.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nlet remove: (t<'a>, key) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet hMap = Belt.HashMap.Int.make(~hintSize=10)\nBelt.HashMap.Int.set(hMap, 1, \"value1\")\nBelt.HashMap.Int.remove(hMap, 1)\nBelt.HashMap.Int.has(hMap, 1) == false\n```\n\n----------------------------------------\n\nTITLE: None Option Type Compilation\nDESCRIPTION: Example showing how None compiles to JavaScript undefined.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/null-undefined-option.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet x = None\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar x;\n```\n\n----------------------------------------\n\nTITLE: Reading a Uint32 value from a DataView in ReScript\nDESCRIPTION: Function signature for getting an unsigned 32-bit integer from the specified byte offset with big-endian format.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_data-view.mdx#2025-04-18_snippet_16\n\nLANGUAGE: rescript\nCODE:\n```\nlet getUint32: (t, int) => int\n```\n\n----------------------------------------\n\nTITLE: Copy Within Array\nDESCRIPTION: Copies a sequence of elements within the array to a position starting at the target index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-64-array.mdx#2025-04-18_snippet_9\n\nLANGUAGE: reason\nCODE:\n```\nlet copyWithin: (~to_: int, t) => t;\n```\n\n----------------------------------------\n\nTITLE: HashMap Conversion Functions\nDESCRIPTION: Methods for converting hash maps to and from arrays and accessing statistics.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-map.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nlet toArray: t<'key, 'value, 'id> => array<('key, 'value)>\nlet keysToArray: t<'key, 'a, 'b> => array<'key>\nlet valuesToArray: t<'a, 'value, 'b> => array<'value>\nlet fromArray: (array<('key, 'value)>, ~id: id<'key, 'id>) => t<'key, 'value, 'id>\n```\n\n----------------------------------------\n\nTITLE: Reading 32-bit Signed Integer (Little Endian)\nDESCRIPTION: Gets a signed 32-bit integer at the specified byte offset from the start of the DataView using little-endian format.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_data-view.mdx#2025-04-18_snippet_15\n\nLANGUAGE: reasonml\nCODE:\n```\nlet getInt32LittleEndian: (t, int) => int;\n```\n\n----------------------------------------\n\nTITLE: Defining Symbol Type in ReScript\nDESCRIPTION: Defines a ReScript type representing JavaScript symbols.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/types.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\ntype symbol\n```\n\n----------------------------------------\n\nTITLE: ReScript Promise Catch Implementation\nDESCRIPTION: Function signature for handling Promise errors using catch\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/promise.mdx#2025-04-18_snippet_13\n\nLANGUAGE: res\nCODE:\n```\nlet catch: (error => t<'a>, t<'a>) => t<'a>\n```\n\n----------------------------------------\n\nTITLE: Null Value Definition in ReScript\nDESCRIPTION: Signature for the null value of type Js.null_undefined.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/null-undefined.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet null: t<'a>\n```\n\n----------------------------------------\n\nTITLE: Defining the key type in MapString module (ReScript)\nDESCRIPTION: Defines the key type for MapString as string. This is a specialized version that's more efficient than the generic map type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-string.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\ntype key = string;\n```\n\n----------------------------------------\n\nTITLE: Multiple String Concatenation\nDESCRIPTION: Function signature for concatenating multiple strings.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/string-2.mdx#2025-04-18_snippet_12\n\nLANGUAGE: res\nCODE:\n```\nlet concatMany: (t, array<t>) => t\n```\n\n----------------------------------------\n\nTITLE: Manipulating UInt32Array Data in ReScript\nDESCRIPTION: Functions for setting array data, copying within the array, and filling the array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ReScript\nCODE:\n```\nlet setArray: (array<elt>, t) => unit\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet setArrayOffset: (array<elt>, int, t) => unit\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet copyWithin: (~to_: int, t) => t\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet copyWithinFrom: (~to_: int, ~from: int, t) => t\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet copyWithinFromRange: (~to_: int, ~start: int, ~end_: int, t) => t\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet fillInPlace: (elt, t) => t\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet fillFromInPlace: (elt, ~from: int, t) => t\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet fillRangeInPlace: (elt, ~start: int, ~end_: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Array Iteration Methods\nDESCRIPTION: Higher-order functions for array iteration and transformation\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_int-32-array.mdx#2025-04-18_snippet_6\n\nLANGUAGE: reason\nCODE:\n```\nlet every: ((. elt) => bool, t) => bool;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet everyi: ((. elt, int) => bool, t) => bool;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet filter: ((. elt) => bool, t) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet filteri: ((. elt, int) => bool, t) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet find: ((. elt) => bool, t) => Js.undefined(elt);\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet findi: ((. elt, int) => bool, t) => Js.undefined(elt);\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet findIndex: ((. elt) => bool, t) => int;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet findIndexi: ((. elt, int) => bool, t) => int;\n```\n\n----------------------------------------\n\nTITLE: Finding minimum and maximum keys in MapDict (ReScript)\nDESCRIPTION: Functions to find the minimum and maximum keys in a MapDict.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_14\n\nLANGUAGE: ReScript\nCODE:\n```\nlet minKey: t<'k, 'a, 'b> => option<'k>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet minKeyUndefined: t<'k, 'a, 'b> => Js.undefined<'k>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet maxKey: t<'k, 'a, 'b> => option<'k>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet maxKeyUndefined: t<'k, 'a, 'b> => Js.undefined<'k>\n```\n\n----------------------------------------\n\nTITLE: Reducing Example with MutableSet in ReasonML\nDESCRIPTION: Example showing how to reduce a MutableSet to a list using the reduce function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_39\n\nLANGUAGE: reasonml\nCODE:\n```\nmodule IntCmp =\n  Belt.Id.MakeComparable({\n    type t = int;\n    let cmp = Pervasives.compare;\n  });\n\nlet s0 = Belt.MutableSet.fromArray([|5,2,3,5,6|], ~id=(module IntCmp));\ns0->Belt.MutableSet.reduce([], (acc, element) =>\n  acc->Belt.List.add(element)\n); /* [6,5,3,2] */\n```\n\n----------------------------------------\n\nTITLE: Removing Element with Status Check in ReScript MutableSetString\nDESCRIPTION: Removes an element and returns a boolean indicating if the element was removed (true) or if it didn't exist (false).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_12\n\nLANGUAGE: reason\nCODE:\n```\nlet removeCheck: (t, value) => bool;\n```\n\n----------------------------------------\n\nTITLE: Getting UTC Day from Date in ReScript\nDESCRIPTION: ReScript binding for JavaScript's Date.getUTCDay method. Returns the day of the week (0.0-6.0) of the date, evaluated in UTC.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_30\n\nLANGUAGE: res\nCODE:\n```\nlet getUTCDay: t => float\n```\n\nLANGUAGE: res\nCODE:\n```\nJs.Date.getUTCDay(exampleDate) == 4.0\n```\n\n----------------------------------------\n\nTITLE: String Substring Operations in ReScript\nDESCRIPTION: Methods for extracting substrings with various positioning options.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/string.mdx#2025-04-18_snippet_13\n\nLANGUAGE: res\nCODE:\n```\nlet substring: (~from: int, ~to_: int, t) => t\nlet substr: (~from: int, t) => t\n```\n\nLANGUAGE: res\nCODE:\n```\nJs.String.substring(~from=3, ~to_=6, \"playground\") == \"ygr\"\nJs.String.substring(~from=6, ~to_=3, \"playground\") == \"ygr\"\nJs.String.substring(~from=4, ~to_=12, \"playground\") == \"ground\"\n\nJs.String.substr(~from=3, \"abcdefghij\") == \"defghij\"\nJs.String.substr(~from=-3, \"abcdefghij\") == \"hij\"\nJs.String.substr(~from=12, \"abcdefghij\") == \"\"\n```\n\n----------------------------------------\n\nTITLE: Finding Index with Element and Index\nDESCRIPTION: Returns the index of the first element that satisfies the provided testing function with index, or -1 if none found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_39\n\nLANGUAGE: rescript\nCODE:\n```\nlet findIndexi: ((. elt, int) => bool, t) => int\n```\n\n----------------------------------------\n\nTITLE: Float Subtraction in ReScript\nDESCRIPTION: Subtracts the second float value from the first. Can be used with module opening to avoid dot notation, though this may cause shadow warnings in default configuration.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/float.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet (-): (float, float) => float\n```\n\nLANGUAGE: rescript\nCODE:\n```\nopen Belt.Float\nJs.log(2.0 - 1.0 === 1.0) /* true */\n```\n\n----------------------------------------\n\nTITLE: Error Type Definition\nDESCRIPTION: Type definition for Promise error handling\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/promise.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\ntype error\n```\n\n----------------------------------------\n\nTITLE: Getting Bytes Per Element\nDESCRIPTION: Returns the size in bytes of each element in the array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_50\n\nLANGUAGE: rescript\nCODE:\n```\nlet _BYTES_PER_ELEMENT: int\n```\n\n----------------------------------------\n\nTITLE: ReScript Object Type Inference Example\nDESCRIPTION: This example shows how object types are inferred rather than matched against declarations. The object doesn't conform to the person type but still passes type checking.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/object.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\ntype person = {\n  \"age\": int\n};\n\nlet me = {\n  \"age\": \"hello!\" // age is a string. No error.\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar me = {\n  \"age\": \"hello!\"\n};\n```\n\n----------------------------------------\n\nTITLE: Getting Array Length\nDESCRIPTION: Returns the number of elements in the Uint8Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\nlet length: t => int\n```\n\n----------------------------------------\n\nTITLE: FromOption Function Signature in ReScript\nDESCRIPTION: Function signature for converting an option type to a nullable type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/null.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromOption: option<'a> => t<'a>\n```\n\n----------------------------------------\n\nTITLE: Reducing map in MapString module (ReScript)\nDESCRIPTION: Function to reduce a map to a single value by applying a function to each key-value pair with an accumulator.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-string.mdx#2025-04-18_snippet_14\n\nLANGUAGE: reason\nCODE:\n```\nlet reduce: (t('v), 'v2, ('v2, key, 'v) => 'v2) => 'v2;\n```\n\n----------------------------------------\n\nTITLE: Setting Values from an Array with setArray in ReScript\nDESCRIPTION: Function signature for setArray that copies values from a JavaScript array into a Uint8Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet setArray: (array<elt>, t) => unit\n```\n\n----------------------------------------\n\nTITLE: Reduce Float32Array Elements Right-to-Left\nDESCRIPTION: Applies a function against an accumulator and each element in the Float32Array, from right to left, to reduce it to a single value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-32-array.mdx#2025-04-18_snippet_46\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduceRight: ((. 'b, elt) => 'b, 'b, t) => 'b;\n```\n\n----------------------------------------\n\nTITLE: Higher-Order Array Methods for Int16Array (Element Search)\nDESCRIPTION: Methods for finding elements that match specific conditions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-16-array.mdx#2025-04-18_snippet_11\n\nLANGUAGE: res\nCODE:\n```\nlet find: ((. elt) => bool, t) => Js.undefined<elt>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet findi: ((. elt, int) => bool, t) => Js.undefined<elt>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet findIndex: ((. elt) => bool, t) => int\n```\n\nLANGUAGE: res\nCODE:\n```\nlet findIndexi: ((. elt, int) => bool, t) => int\n```\n\n----------------------------------------\n\nTITLE: Defining JavaScript Symbol Type in ReScript\nDESCRIPTION: Type definition for JavaScript's Symbol primitive value type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/types.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype symbol\n```\n\n----------------------------------------\n\nTITLE: Filling Array from Position\nDESCRIPTION: Function signature to fill the array with a specified value from a start position.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_13\n\nLANGUAGE: res\nCODE:\n```\nlet fillFromInPlace: (elt, ~from: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Checking if any element satisfies a predicate with uncurried function in ReScript with MutableSetInt\nDESCRIPTION: Returns a boolean indicating whether at least one element in the set satisfies the given uncurried predicate function. This is an internal function primarily used for optimization.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_26\n\nLANGUAGE: rescript\nCODE:\n```\nlet someU: (t, [@bs] (value => bool)) => bool;\n```\n\n----------------------------------------\n\nTITLE: Converting Date to UTC String in ReScript\nDESCRIPTION: Returns a string representing the date and time of day for the given Date in the current locale and UTC (GMT time zone). This function provides a standardized UTC representation of the date.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_71\n\nLANGUAGE: ReScript\nCODE:\n```\nlet toUTCString: t => string\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nJs.Date.toUTCString(exampleDate) == \"Thu, 29 Nov 1973 21:30:54 GMT\"\n```\n\n----------------------------------------\n\nTITLE: Getting Array Length with length in ReScript\nDESCRIPTION: Function signature for length that returns the number of elements in a Uint8Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\nlet length: t => int\n```\n\n----------------------------------------\n\nTITLE: Getting byteLength of UInt32Array\nDESCRIPTION: Defines a function that returns the length of the typed array in bytes.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet byteLength: t => int\n```\n\n----------------------------------------\n\nTITLE: Defining Core Types for Uint8ClampedArray\nDESCRIPTION: Defines the core types used throughout the module including the element type (int), generic typed array type, and specific Uint8ClampedArray type\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype elt = int\ntype typed_array<'a>\ntype t = typed_array<elt>\n```\n\n----------------------------------------\n\nTITLE: Mapping values in MapDict (uncurried)\nDESCRIPTION: Function signature for transforming all values in a map using an uncurried function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_52\n\nLANGUAGE: reason\nCODE:\n```\nlet mapU: (t('k, 'a, 'id), [@bs] ('a => 'b)) => t('k, 'b, 'id);\n```\n\n----------------------------------------\n\nTITLE: Type Definition for RegExp Object\nDESCRIPTION: Basic type definition for the JavaScript RegExp object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/re.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\ntype t\n```\n\n----------------------------------------\n\nTITLE: Accessing DataView properties in ReScript\nDESCRIPTION: Functions to retrieve the underlying buffer, byte length, and byte offset of a DataView.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array-2_data-view.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet buffer: t => Js_typed_array2.array_buffer\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet byteLength: t => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet byteOffset: t => int\n```\n\n----------------------------------------\n\nTITLE: Defining hash type in ReScript\nDESCRIPTION: Defines a type 'hash' with two type parameters. It represents a hash function signed with a type parameter to prevent mixing of different hash functions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/id.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\ntype hash('a, 'id);\n```\n\n----------------------------------------\n\nTITLE: FromCharCode Function Signature\nDESCRIPTION: Function signature for creating a string from a character code.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string-2.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reason\nCODE:\n```\nlet fromCharCode: int => t;\n```\n\n----------------------------------------\n\nTITLE: Checking if a MapDict is empty\nDESCRIPTION: Function signature for checking if a map contains no elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reason\nCODE:\n```\nlet isEmpty: t('k, 'v, 'id) => bool;\n```\n\n----------------------------------------\n\nTITLE: Finding maximum key-value pair as undefined in MapString module (ReScript)\nDESCRIPTION: Function to find the key-value pair with the maximum key, returning an undefined type for JavaScript interoperability.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-string.mdx#2025-04-18_snippet_32\n\nLANGUAGE: reason\nCODE:\n```\nlet maxUndefined: t('v) => Js.undefined((key, 'v));\n```\n\n----------------------------------------\n\nTITLE: Filling Array in Range\nDESCRIPTION: Fills the array with a specified value within a specified range, modifying it in place.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_14\n\nLANGUAGE: rescript\nCODE:\n```\nlet fillRangeInPlace: (elt, ~start: int, ~end_: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Checking Internal Invariant of Belt.Set.String in ReScript\nDESCRIPTION: The checkInvariantInternal function raises an exception when the invariant is not held.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-string.mdx#2025-04-18_snippet_64\n\nLANGUAGE: rescript\nCODE:\n```\nlet checkInvariantInternal: t => unit;\n```\n\n----------------------------------------\n\nTITLE: Create Float64Array from ArrayBuffer\nDESCRIPTION: Creates a new Float64Array view of an ArrayBuffer.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-64-array.mdx#2025-04-18_snippet_52\n\nLANGUAGE: reason\nCODE:\n```\nlet fromBuffer: Js_typed_array2.array_buffer => t;\n```\n\n----------------------------------------\n\nTITLE: Peeking with Exception in MutableQueue in ReScript\nDESCRIPTION: The 'peekExn' function returns the first element in the queue, raising an exception if the queue is empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-queue.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\nlet peekExn: t<'a> => 'a\n```\n\n----------------------------------------\n\nTITLE: Packing Set Identity and Data\nDESCRIPTION: Advanced function that returns a packed collection from identity and data.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set.mdx#2025-04-18_snippet_43\n\nLANGUAGE: reason\nCODE:\n```\nlet packIdData: (~id: id('value, 'id), ~data: Belt_SetDict.t('value, 'id)) => t('value, 'id);\n```\n\n----------------------------------------\n\nTITLE: Finding index of element in UInt32Array\nDESCRIPTION: Defines a function that returns the first index at which a given element can be found in the array, or -1 if not found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_19\n\nLANGUAGE: rescript\nCODE:\n```\nlet indexOf: (elt, t) => int\n```\n\n----------------------------------------\n\nTITLE: Setting Month and Day with setUTCMonthD in ReScript\nDESCRIPTION: Sets a Date's month and day according to UTC time. This function modifies the original Date object and returns the updated timestamp in milliseconds. Binds to JavaScript's Date.setUTCMonth method.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_62\n\nLANGUAGE: res\nCODE:\n```\nlet setUTCMonthD: (t, ~month: float, ~date: float, unit) => float\n```\n\nLANGUAGE: res\nCODE:\n```\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet futureTime = Js.Date.setUTCMonthD(date1, ~month=11.0, ~date=8.0, ())\ndate1 == Js.Date.fromString(\"1973-12-08T21:34:56.789Z00:00\")\nfutureTime == Js.Date.getTime(date1)\n```\n\n----------------------------------------\n\nTITLE: Checking if MutableStack is Empty in ReScript\nDESCRIPTION: Function signature for checking if the stack is empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-stack.mdx#2025-04-18_snippet_9\n\nLANGUAGE: ReScript\nCODE:\n```\nlet isEmpty: t<'a> => bool\n```\n\n----------------------------------------\n\nTITLE: Finding Last Index of Element from Position in TypedArray in ReScript\nDESCRIPTION: Function signature for finding the last index at which a given element can be found in a Uint8ClampedArray, searching backwards from a specified index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_24\n\nLANGUAGE: res\nCODE:\n```\nlet lastIndexOfFrom: (elt, ~from: int, t) => int\n```\n\n----------------------------------------\n\nTITLE: Basic Array Operations\nDESCRIPTION: Core operations for accessing and manipulating array elements including unsafe get/set operations and buffer access.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-16-array.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet unsafe_get: (t, int) => elt\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet unsafe_set: (t, int, elt) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet buffer: t => Js_typed_array2.array_buffer\n```\n\n----------------------------------------\n\nTITLE: Creating Empty Int Set\nDESCRIPTION: Function signature for creating an empty integer set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set-int.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nlet empty: t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet s0 = Belt.Set.Int.empty\n```\n\n----------------------------------------\n\nTITLE: Join Float32Array Elements into String\nDESCRIPTION: Joins all elements of the Float32Array into a string, separated by commas.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_21\n\nLANGUAGE: rescript\nCODE:\n```\nlet join: t => string\n```\n\n----------------------------------------\n\nTITLE: Finding Element Index\nDESCRIPTION: Returns the index of the first occurrence of a specified element in the array, or -1 if not found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_19\n\nLANGUAGE: rescript\nCODE:\n```\nlet indexOf: (elt, t) => int\n```\n\n----------------------------------------\n\nTITLE: Accessing DataView Properties in ReScript\nDESCRIPTION: Functions to retrieve the underlying ArrayBuffer, byte length, and byte offset of a DataView.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_data-view.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet buffer: t => Js_typed_array.array_buffer;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet byteLength: t => int;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet byteOffset: t => int;\n```\n\n----------------------------------------\n\nTITLE: Accessing and Modifying Uint16Array Elements in ReScript\nDESCRIPTION: Provides unsafe get and set operations for Uint16Array elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_uint-16-array.mdx#2025-04-18_snippet_1\n\nLANGUAGE: ReScript\nCODE:\n```\nlet unsafe_get: (t, int) => elt;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet unsafe_set: (t, int, elt) => unit;\n```\n\n----------------------------------------\n\nTITLE: Vector Filter In Place Operation\nDESCRIPTION: Filters elements in place based on a predicate function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/vector.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\nlet filterInPlace: ((. 'a) => bool, t<'a>) => unit\n```\n\n----------------------------------------\n\nTITLE: Array Creation and Conversion Methods\nDESCRIPTION: Functions for creating new arrays and converting between different formats including buffer operations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_float-32-array.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet make: array<elt> => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromBuffer: Js_typed_array2.array_buffer => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromBufferOffset: (Js_typed_array2.array_buffer, int) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromBufferRange: (Js_typed_array2.array_buffer, ~offset: int, ~length: int) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromLength: int => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet from: Js_typed_array2.array_like<elt> => t\n```\n\n----------------------------------------\n\nTITLE: Array Properties and Metrics\nDESCRIPTION: Methods for accessing array properties like length and byte information\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\nlet byteLength: t => int;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet byteOffset: t => int;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet length: t => int;\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Set Elements with Uncurried Function in ReasonML\nDESCRIPTION: Provides a way to iterate over all elements in a set using an uncurried function, typically used for BuckleScript optimizations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set.mdx#2025-04-18_snippet_19\n\nLANGUAGE: reasonml\nCODE:\n```\nlet forEachU: (t('value, 'id), [@bs] ('value => unit)) => unit;\n```\n\n----------------------------------------\n\nTITLE: Reduce Float32Array Elements with Index\nDESCRIPTION: Applies a function against an accumulator and each element in the Float32Array to reduce it to a single value, providing the element index as a parameter.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_45\n\nLANGUAGE: rescript\nCODE:\n```\nlet reducei: ((. 'b, elt, int) => 'b, 'b, t) => 'b\n```\n\n----------------------------------------\n\nTITLE: String Type Definition in ReScript\nDESCRIPTION: Defines the basic string type alias for the module.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/string-2.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\ntype t = string\n```\n\n----------------------------------------\n\nTITLE: Array Search and Query Methods\nDESCRIPTION: Functions for searching and querying array contents including includes, indexOf and find operations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_float-32-array.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet includes: (elt, t) => bool\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet indexOf: (elt, t) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet indexOfFrom: (elt, ~from: int, t) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet lastIndexOf: (elt, t) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet lastIndexOfFrom: (elt, ~from: int, t) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet find: ((. elt) => bool, t) => Js.undefined<elt>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet findi: ((. elt, int) => bool, t) => Js.undefined<elt>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet findIndex: ((. elt) => bool, t) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet findIndexi: ((. elt, int) => bool, t) => int\n```\n\n----------------------------------------\n\nTITLE: Converting Array to Locale-Specific String\nDESCRIPTION: Function signature to convert the Int8Array to a locale-specific string representation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_31\n\nLANGUAGE: res\nCODE:\n```\nlet toLocaleString: t => string\n```\n\n----------------------------------------\n\nTITLE: Find Element in Float32Array with Index\nDESCRIPTION: Returns the first element in the Float32Array that satisfies the provided testing function that includes the element index, or undefined if not found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_37\n\nLANGUAGE: rescript\nCODE:\n```\nlet findi: ((. elt, int) => bool, t) => Js.undefined<elt>\n```\n\n----------------------------------------\n\nTITLE: Logging HashMap Statistics in ReScript\nDESCRIPTION: Logs statistical information about the hash map to the console.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-map-int.mdx#2025-04-18_snippet_16\n\nLANGUAGE: rescript\nCODE:\n```\nlet logStats: t<'a> => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet hMap = Belt.HashMap.Int.make(~hintSize=10)\nBelt.HashMap.Int.set(hMap, 1, \"1\")\n\nBelt.HashMap.Int.logStats(hMap)\n```\n\n----------------------------------------\n\nTITLE: Partition Operations in ReScript Set\nDESCRIPTION: Functions that split a set into two based on a predicate. Returns a tuple of sets where the first contains elements satisfying the predicate and the second contains the rest.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-dict.mdx#2025-04-18_snippet_13\n\nLANGUAGE: reason\nCODE:\n```\nlet partitionU: (t('value, 'id), [@bs] ('value => bool)) => (t('value, 'id), t('value, 'id));\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet partition: (t('value, 'id), 'value => bool) => (t('value, 'id), t('value, 'id));\n```\n\nLANGUAGE: reason\nCODE:\n```\nmodule IntCmp =\n  Belt.Id.MakeComparable({\n    type t = int;\n    let cmp = Pervasives.compare;\n  });\n\nlet isOdd = x => x mod 2 != 0;\n\nlet s0 = Belt.Set.Dict.fromArray([|1,2,3,4,5|], ~cmp=IntCmp.cmp);\nlet (s1, s2) = s0->Belt.Set.Dict.partition(isOdd);\n\ns1->Belt.Set.Dict.toArray; /* [|1,3,5|] */\ns2->Belt.Set.Dict.toArray; /* [|2,4|] */\n```\n\n----------------------------------------\n\nTITLE: Basic Array Operations\nDESCRIPTION: Basic operations for accessing and modifying array elements including unsafe get/set operations and buffer access.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_int-16-array.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet unsafe_get: (t, int) => elt\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet unsafe_set: (t, int, elt) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet buffer: t => Js_typed_array2.array_buffer\n```\n\n----------------------------------------\n\nTITLE: Accessing the Underlying Buffer\nDESCRIPTION: Function signature to get the underlying ArrayBuffer from a Uint16Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\nlet buffer: t => Js_typed_array.array_buffer\n```\n\n----------------------------------------\n\nTITLE: Checking internal invariant in ReScript\nDESCRIPTION: Function signature for checking the internal invariant of a mutable map, raising an exception if not held.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_36\n\nLANGUAGE: ReScript\nCODE:\n```\nlet checkInvariantInternal: t<'a> => unit\n```\n\n----------------------------------------\n\nTITLE: Configuring Dev-Only Sources in ReScript\nDESCRIPTION: Marks a directory as development-only using the 'type' property. Files in the 'test' directory won't be exposed to third-parties or other dev directories in the same project.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/build-configuration.mdx#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sources\": {\n    \"dir\": \"test\",\n    \"type\": \"dev\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Array Manipulation Methods\nDESCRIPTION: Methods for manipulating array contents including copy, fill, reverse and sort operations\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet copyWithin: (~to_: int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fillInPlace: (elt, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet reverseInPlace: t => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet sortInPlace: t => t\n```\n\n----------------------------------------\n\nTITLE: Signature for strictlySortedLength function in ReScript\nDESCRIPTION: Function signature for strictlySortedLength, which returns the length of the strictly sorted portion of an integer array. Returns a positive number for increasing order and a negative number for decreasing order.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/sort-array-int.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\nlet strictlySortedLength: array<element> => int\n```\n\n----------------------------------------\n\nTITLE: Legacy Option to Null Conversion in ReScript\nDESCRIPTION: Deprecated alias for fromOption that maps option('a) to Js.null('a).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/null.mdx#2025-04-18_snippet_11\n\nLANGUAGE: reason\nCODE:\n```\nlet from_opt: option('a) => t('a);\n```\n\n----------------------------------------\n\nTITLE: Getting DataView Byte Length\nDESCRIPTION: Returns the length (in bytes) of this DataView.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_data-view.mdx#2025-04-18_snippet_6\n\nLANGUAGE: reasonml\nCODE:\n```\nlet byteLength: t => int;\n```\n\n----------------------------------------\n\nTITLE: Splitting Belt.MutableSet using split in ReScript\nDESCRIPTION: The split function returns a tuple ((smaller, larger), present), where present is true when the element exists in the set. It splits the set into two parts based on the given value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_16\n\nLANGUAGE: ReScript\nCODE:\n```\nlet split: (t<'value, 'id>, 'value) => ((t<'value, 'id>, t<'value, 'id>), bool)\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nmodule IntCmp = Belt.Id.MakeComparable({\n  type t = int\n  let cmp = Pervasives.compare\n})\n\nlet s0 = Belt.MutableSet.fromArray([1, 2, 3, 4, 5], ~id=module(IntCmp))\n\nlet ((smaller, larger), present) = s0->Belt.MutableSet.split(3)\n\npresent /* true */\nsmaller->Belt.MutableSet.toArray /* [1,2] */\nlarger->Belt.MutableSet.toArray /* [4,5] */\n```\n\n----------------------------------------\n\nTITLE: No Children in ReScript React Components\nDESCRIPTION: Demonstrates a component that doesn't accept children props at all. The NoChildren component will cause a type error if any children are passed to it, ensuring type safety at compile time.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/components-and-props.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nmodule NoChildren = {\n  @react.component\n  let make = () => {\n    <div>\n      {React.string(\"I don't accept any children params\")}\n    </div>\n  }\n}\n\n// The compiler will raise a type error here\n<NoChildren> <div/> </NoChildren>\n```\n\n----------------------------------------\n\nTITLE: Creating null values in ReScript\nDESCRIPTION: The 'null' value represents JavaScript's null of type Js.null_undefined('a).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/nullable.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reason\nCODE:\n```\nlet null: t('a);\n```\n\n----------------------------------------\n\nTITLE: Signature for stableSort function in ReScript\nDESCRIPTION: Function signature for stableSort, which returns a new sorted array of integers without modifying the original array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/sort-array-int.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nlet stableSort: array<element> => array<element>\n```\n\n----------------------------------------\n\nTITLE: Reducing Uint8ClampedArray elements right-to-left with index\nDESCRIPTION: Executes a reducer function on each element of the array in reverse order with its index, resulting in a single output value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_47\n\nLANGUAGE: res\nCODE:\n```\nlet reduceRighti: ((. 'b, elt, int) => 'b, 'b, t) => 'b\n```\n\n----------------------------------------\n\nTITLE: Setting Minutes and Seconds with setUTCMinutesS in ReScript\nDESCRIPTION: Sets a Date's minutes and seconds according to UTC time. This function modifies the original Date object and returns the updated timestamp in milliseconds. Binds to JavaScript's Date.setUTCMinutes method.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_59\n\nLANGUAGE: res\nCODE:\n```\nlet setUTCMinutesS: (t, ~minutes: float, ~seconds: float, unit) => float\n```\n\nLANGUAGE: res\nCODE:\n```\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet futureTime = Js.Date.setUTCMinutesS(date1, ~minutes=34.0, ~seconds=56.0, ())\ndate1 == Js.Date.fromString(\"1973-11-29T21:34:56.494Z00:00\")\nfutureTime == Js.Date.getTime(date1)\n```\n\n----------------------------------------\n\nTITLE: Embedding Raw JavaScript Expression in ReScript\nDESCRIPTION: Demonstrates using %raw to embed a JavaScript function that checks canvas support by attempting to get a canvas context. The function returns a boolean indicating if canvas is supported in the current environment.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/extension_raw_expression.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nlet canUseCanvas: unit => bool = %raw(`\n  function canUseCanvas() {\n    return !!document.createElement('canvas').getContext;\n  }\n`)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar canUseCanvas = function canUseCanvas() {\n  return !!document.createElement(\"canvas\").getContext;\n};\n```\n\n----------------------------------------\n\nTITLE: Array Type Definitions\nDESCRIPTION: Defines core array types used in the ReScript bindings including the main array type and array-like type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/array.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\ntype t<'a> = array<'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\ntype array_like<'a> = Js_array2.array_like<'a>\n```\n\n----------------------------------------\n\nTITLE: Defining Int Set Value Type\nDESCRIPTION: Defines the type of elements stored in the integer set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set-int.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\ntype value = int\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Null_undefined Value in ReScript\nDESCRIPTION: Function signature for 'iter', which applies a given function to the contained value if it's not null or undefined.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/null-undefined.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\nlet iter: (t<'a>, (. 'a) => unit) => unit\n```\n\n----------------------------------------\n\nTITLE: Reading 8-bit Signed Integer\nDESCRIPTION: Gets a signed 8-bit integer at the specified byte offset from the start of the DataView.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_data-view.mdx#2025-04-18_snippet_8\n\nLANGUAGE: reasonml\nCODE:\n```\nlet getInt8: (t, int) => int;\n```\n\n----------------------------------------\n\nTITLE: Array Predicates and Comparison\nDESCRIPTION: Functions for testing array elements against predicates and comparing arrays, including some, every, and comparison operations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/array.mdx#2025-04-18_snippet_39\n\nLANGUAGE: rescript\nCODE:\n```\nBelt.Array.some([2, 3, 4], (x) => mod(x, 2) == 1) == true\nBelt.Array.every([1, 3, 5], (x) => mod(x, 2) == 1) == true\n```\n\n----------------------------------------\n\nTITLE: Find Index of Matching Element\nDESCRIPTION: Returns the index of the first element in the typed array that satisfies the provided testing function, or -1 if no element is found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_type-s.mdx#2025-04-18_snippet_38\n\nLANGUAGE: res\nCODE:\n```\nlet findIndex: ((. elt) => bool, t) => int\n```\n\n----------------------------------------\n\nTITLE: Creating UInt32Array from array-like\nDESCRIPTION: Defines a function that creates a new typed array from an array-like object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_56\n\nLANGUAGE: rescript\nCODE:\n```\nlet from: Js_typed_array.array_like<elt> => t\n```\n\n----------------------------------------\n\nTITLE: Private Abstract Type Definition\nDESCRIPTION: Shows how to mark an abstract type as private to disable the creation function while maintaining accessors.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/generate-converters-accessors.mdx#2025-04-18_snippet_19\n\nLANGUAGE: rescript\nCODE:\n```\n@deriving(abstract)\ntype cord = private {\n  @optional x: int,\n  y: int,\n}\n```\n\n----------------------------------------\n\nTITLE: Manipulating Uint8ClampedArray Data in ReScript\nDESCRIPTION: Functions for setting array data, getting length, and performing operations like copyWithin, fill, and reverse.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ReScript\nCODE:\n```\nlet setArray: (array(elt), t) => unit;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet setArrayOffset: (array(elt), int, t) => unit;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet length: t => int;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet copyWithin: (~to_: int, t) => t;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet copyWithinFrom: (~to_: int, ~from: int, t) => t;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet copyWithinFromRange: (~to_: int, ~start: int, ~end_: int, t) => t;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet fillInPlace: (elt, t) => t;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet fillFromInPlace: (elt, ~from: int, t) => t;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet fillRangeInPlace: (elt, ~start: int, ~end_: int, t) => t;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet reverseInPlace: t => t;\n```\n\n----------------------------------------\n\nTITLE: Getting Element from Set\nDESCRIPTION: Function that returns a reference to an equivalent value in the set using the specified comparator.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set.mdx#2025-04-18_snippet_37\n\nLANGUAGE: reason\nCODE:\n```\nlet get: (t('value, 'id), 'value) => option('value);\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet s0 = Belt.Set.fromArray([|1,2,3,4,5|], ~id=(module IntCmp));\n\ns0->Belt.Set.get(3); /* Some(3) */\ns0->Belt.Set.get(20); /* None */\n```\n\n----------------------------------------\n\nTITLE: Example of Using iter with Nullable Strings in ReScript\nDESCRIPTION: Example demonstrating how to use the 'iter' function to log a message if the nullable string is not null or undefined.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/null-undefined.mdx#2025-04-18_snippet_9\n\nLANGUAGE: reason\nCODE:\n```\nlet maybeSay = (maybeMessage: Js.null_undefined(string)) =>\n  Js.Null_undefined.iter(maybeMessage, [@bs] message => Js.log(message));\n```\n\n----------------------------------------\n\nTITLE: Computing Two-argument Arctangent in ReScript\nDESCRIPTION: Function that returns the angle (in radians) between the positive x-axis and the point (x, y), equivalent to JavaScript's Math.atan2.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/math.mdx#2025-04-18_snippet_16\n\nLANGUAGE: reasonml\nCODE:\n```\nlet atan2: (~y: float, ~x: float, unit) => float;\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Set in ReScript MutableSetString\nDESCRIPTION: Applies a function to each element of the set in increasing order.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_21\n\nLANGUAGE: reason\nCODE:\n```\nlet forEach: (t, value => unit) => unit;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet s0 = Belt.MutableSet.String.fromArray([|\"banana\", \"orange\", \"apple\"|]);\nlet acc = ref([]);\ns0->Belt.MutableSet.String.forEach(x => {\n  acc := Belt.List.add(acc^, x)\n});\nacc; /* [\"orange\", \"banana\", \"apple\"] */\n```\n\n----------------------------------------\n\nTITLE: Reducing TypedArray Elements from Right in ReScript\nDESCRIPTION: Function signature for applying a function against an accumulator and each element in a Uint8ClampedArray, starting from the last element, to reduce it to a single value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_46\n\nLANGUAGE: res\nCODE:\n```\nlet reduceRight: ((. 'b, elt) => 'b, 'b, t) => 'b\n```\n\n----------------------------------------\n\nTITLE: Reducing Array Elements from Right with reduceRight in ReScript\nDESCRIPTION: Function signature for reduceRight that applies a function against an accumulator and each element in the Uint8Array (from right to left) to reduce it to a single value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_46\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduceRight: ((. 'b, elt) => 'b, 'b, t) => 'b\n```\n\n----------------------------------------\n\nTITLE: Defining TypedArray.Uint16Array Types\nDESCRIPTION: Core type definitions for the Uint16Array module, specifying the element type, typed array type, and the main type alias.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\ntype elt = int\ntype typed_array<'a> = Js_typed_array2.Uint16Array.typed_array<'a>\ntype t = typed_array<elt>\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for MutableMapInt\nDESCRIPTION: Core type definitions for the MutableMapInt module, defining the key type as integer and generic map type t.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-map-int.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\ntype key = int\n```\n\nLANGUAGE: res\nCODE:\n```\ntype t<'a>\n```\n\n----------------------------------------\n\nTITLE: String Length Operation\nDESCRIPTION: Function signature for getting string length.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/string.mdx#2025-04-18_snippet_6\n\nLANGUAGE: res\nCODE:\n```\nlet length: t => int\n```\n\n----------------------------------------\n\nTITLE: Examples of Counting Leading Zeros in ReScript\nDESCRIPTION: Examples demonstrating the use of clz32 with different integer values to count leading zeros in their 32-bit representation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/math.mdx#2025-04-18_snippet_28\n\nLANGUAGE: reasonml\nCODE:\n```\nJs.Math.clz32(0) == 32;\nJs.Math.clz32(-1) == 0;\nJs.Math.clz32(255) == 24;\n```\n\n----------------------------------------\n\nTITLE: Reading 64-bit Float (Little Endian)\nDESCRIPTION: Gets a 64-bit floating point number at the specified byte offset from the start of the DataView using little-endian format.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_data-view.mdx#2025-04-18_snippet_21\n\nLANGUAGE: reasonml\nCODE:\n```\nlet getFloat64LittleEndian: (t, int) => float;\n```\n\n----------------------------------------\n\nTITLE: Array Manipulation Methods\nDESCRIPTION: Methods for manipulating array contents including copying, filling, reversing and sorting.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_int-32-array.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\nlet setArray: (array(elt), t) => unit;\n\nlet setArrayOffset: (array(elt), int, t) => unit;\n\nlet copyWithin: (~to_: int, t) => t;\n\nlet copyWithinFrom: (~to_: int, ~from: int, t) => t;\n\nlet copyWithinFromRange: (~to_: int, ~start: int, ~end_: int, t) => t;\n\nlet fillInPlace: (elt, t) => t;\n\nlet fillFromInPlace: (elt, ~from: int, t) => t;\n\nlet fillRangeInPlace: (elt, ~start: int, ~end_: int, t) => t;\n\nlet reverseInPlace: t => t;\n\nlet sortInPlace: t => t;\n\nlet sortInPlaceWith: ((. elt, elt) => int, t) => t;\n```\n\n----------------------------------------\n\nTITLE: Conversion Operations in ReScript Set\nDESCRIPTION: Functions for converting sets to lists and arrays while maintaining element order.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-dict.mdx#2025-04-18_snippet_15\n\nLANGUAGE: reason\nCODE:\n```\nlet toList: t('value, 'id) => list('value);\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet toArray: t('value, 'id) => array('value);\n```\n\n----------------------------------------\n\nTITLE: Array Modification Operations\nDESCRIPTION: Methods for modifying array contents including setArray and array manipulation functions\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_int-32-array.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reason\nCODE:\n```\nlet setArray: (array(elt), t) => unit;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet setArrayOffset: (array(elt), int, t) => unit;\n```\n\n----------------------------------------\n\nTITLE: Test All Array Elements with Predicate\nDESCRIPTION: Tests whether all elements in the array pass the provided function test.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-64-array.mdx#2025-04-18_snippet_32\n\nLANGUAGE: reason\nCODE:\n```\nlet every: ((. elt) => bool, t) => bool;\n```\n\n----------------------------------------\n\nTITLE: Iterating over MapDict in ReScript\nDESCRIPTION: Functions for iterating over all key-value pairs in a MapDict.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_6\n\nLANGUAGE: ReScript\nCODE:\n```\nlet forEachU: (t<'k, 'a, 'id>, (. 'k, 'a) => unit) => unit\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet forEach: (t<'k, 'a, 'id>, ('k, 'a) => unit) => unit\n```\n\n----------------------------------------\n\nTITLE: Using substringToEnd function in ReScript\nDESCRIPTION: Extracts characters from a string from a specified position to the end. Similar to substr but uses the substring method's behavior for handling indices.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/string-2.mdx#2025-04-18_snippet_29\n\nLANGUAGE: rescript\nCODE:\n```\nlet substringToEnd: (t, ~from: int) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.String2.substringToEnd(\"playground\", ~from=4) == \"ground\"\nJs.String2.substringToEnd(\"playground\", ~from=-3) == \"playground\"\nJs.String2.substringToEnd(\"playground\", ~from=12) == \"\"\n```\n\n----------------------------------------\n\nTITLE: ReScript Nullable Type Operations\nDESCRIPTION: Function signatures for converting between nullable types and ReScript options.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet toOption: Js.nullable<'a> => option<'a>\nlet undefinedToOption: Js.undefined<'a> => option<'a>\nlet nullToOption: Js.null<'a> => option<'a>\nlet test: Js.nullable<'a> => bool\nlet isNullable: Js.nullable<'a> => bool\nlet testAny: 'a => bool\n```\n\n----------------------------------------\n\nTITLE: Defining TypedArray2.Uint8ClampedArray Type in ReScript\nDESCRIPTION: Defines the core types for Uint8ClampedArray, including the element type, generic typed_array type, and the specific Uint8ClampedArray type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\ntype elt = int\ntype typed_array<'a>\ntype t = typed_array<elt>\n```\n\n----------------------------------------\n\nTITLE: Array Manipulation Methods\nDESCRIPTION: Methods for manipulating array contents including copying, filling, reversing and sorting operations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_int-32-array.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet copyWithin: (~to_: int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet copyWithinFrom: (~to_: int, ~from: int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet copyWithinFromRange: (~to_: int, ~start: int, ~end_: int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fillInPlace: (elt, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fillFromInPlace: (elt, ~from: int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fillRangeInPlace: (elt, ~start: int, ~end_: int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet reverseInPlace: t => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet sortInPlace: t => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet sortInPlaceWith: ((. elt, elt) => int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Subarray Operations for Float64Array\nDESCRIPTION: Functions to create a new Float64Array from a section of an existing one using the subarray method.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-64-array.mdx#2025-04-18_snippet_13\n\nLANGUAGE: rescript\nCODE:\n```\nlet subarray: (~start: int, ~end_: int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet subarrayFrom: (int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Computing Hyperbolic Arccosine in ReScript\nDESCRIPTION: Function that returns the hyperbolic arccosine (in radians) of the argument. Returns NaN if the argument is less than 1.0.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/math.mdx#2025-04-18_snippet_11\n\nLANGUAGE: reasonml\nCODE:\n```\nlet acosh: float => float;\n```\n\n----------------------------------------\n\nTITLE: Map Float32Array Elements\nDESCRIPTION: Creates a new typed array with the results of calling a provided function on every element in the Float32Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_42\n\nLANGUAGE: rescript\nCODE:\n```\nlet map: ((. elt) => 'b, t) => typed_array<'b>\n```\n\n----------------------------------------\n\nTITLE: Null Value Definition\nDESCRIPTION: Function signature for null value of nullable type\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/nullable.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet null: t<'a>\n```\n\n----------------------------------------\n\nTITLE: Defining strictlySortedLengthU Function\nDESCRIPTION: Uncurried version of strictlySortedLength function that determines the sorted length of an array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/sort-array.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\nlet strictlySortedLengthU: (array('a), [@bs] (('a, 'a) => bool)) => int;\n```\n\n----------------------------------------\n\nTITLE: Creating Uint8Array from Buffer Range\nDESCRIPTION: Creates a new Uint8Array view for the ArrayBuffer with specified offset and length. Can raise Js.Exn.Error exception.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_54\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromBufferRange: (Js_typed_array.array_buffer, ~offset: int, ~length: int) => t\n```\n\n----------------------------------------\n\nTITLE: Performing Floating Point Subtraction in ReScript\nDESCRIPTION: This snippet demonstrates the use of the '-.' operator for floating point subtraction in ReScript. It subtracts 2.5 from 3.0 and assigns the result to a variable.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/operators_float_subtraction.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\nlet result = 3.0 -. 2.5\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar result = 3.0 - 2.5;\n```\n\n----------------------------------------\n\nTITLE: Join Array Elements\nDESCRIPTION: Joins all elements of the typed array into a string with default separator.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_type-s.mdx#2025-04-18_snippet_21\n\nLANGUAGE: res\nCODE:\n```\nlet join: t => string\n```\n\n----------------------------------------\n\nTITLE: Finding and iterating over map entries in ReScript\nDESCRIPTION: Functions for finding entries and iterating over the map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-string.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\nlet findFirstByU: (t<'v>, (. key, 'v) => bool) => option<(key, 'v)>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet findFirstBy: (t<'v>, (key, 'v) => bool) => option<(key, 'v)>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet forEachU: (t<'v>, (. key, 'v) => unit) => unit\n```\n\nLANGUAGE: res\nCODE:\n```\nlet forEach: (t<'v>, (key, 'v) => unit) => unit\n```\n\n----------------------------------------\n\nTITLE: Array Manipulation in Int16Array\nDESCRIPTION: Functions for setting array values and retrieving array length.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-16-array.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\nlet setArray: (array<elt>, t) => unit\n```\n\nLANGUAGE: res\nCODE:\n```\nlet setArrayOffset: (array<elt>, int, t) => unit\n```\n\nLANGUAGE: res\nCODE:\n```\nlet length: t => int\n```\n\n----------------------------------------\n\nTITLE: HashSet Statistics Logging\nDESCRIPTION: Logs internal statistics about the HashSet.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-set-string.mdx#2025-04-18_snippet_14\n\nLANGUAGE: rescript\nCODE:\n```\nlet logStats: t => unit\n```\n\n----------------------------------------\n\nTITLE: Defining DataView Type in ReScript\nDESCRIPTION: Defines the type 't' for DataView, which is an alias for Js_typed_array2.DataView.t.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_data-view.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype t = Js_typed_array2.DataView.t;\n```\n\n----------------------------------------\n\nTITLE: Converting Set to List in ReScript MutableSetString\nDESCRIPTION: Returns a list containing all elements of the set in ascending order.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_33\n\nLANGUAGE: reason\nCODE:\n```\nlet toList: t => list(value);\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet s0 = Belt.MutableSet.String.fromArray([|\"apple\", \"watermelon\"|]);\n\ns0->Belt.MutableSet.String.toList; /* [\"apple\", \"watermelon\"] */\n```\n\n----------------------------------------\n\nTITLE: Mapping UInt32Array elements\nDESCRIPTION: Defines a function that creates a new array with the results of calling a provided function on every element in the array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_42\n\nLANGUAGE: rescript\nCODE:\n```\nlet map: ((. elt) => 'b, t) => typed_array<'b>\n```\n\n----------------------------------------\n\nTITLE: IsNullable Function Signature in ReScript\nDESCRIPTION: Function signature for checking if a value is null or undefined.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/nullable.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet isNullable: t<'a> => bool\n```\n\n----------------------------------------\n\nTITLE: Defining the generic type for Belt.HashMap.Int in ReScript\nDESCRIPTION: Defines the generic type of the Belt.HashMap.Int data structure, where 'b represents the value type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-map-int.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reason\nCODE:\n```\ntype t('b);\n```\n\n----------------------------------------\n\nTITLE: Getting the size of an integer hash set in ReScript\nDESCRIPTION: Function signature for retrieving the number of elements in the hash set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/hash-set-int.mdx#2025-04-18_snippet_13\n\nLANGUAGE: res\nCODE:\n```\nlet size: t => int\n```\n\n----------------------------------------\n\nTITLE: Defining Null_undefined Type Alias in ReScript\nDESCRIPTION: Defines a type alias 't' for Js.null_undefined to represent nullable/undefined values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/null-undefined.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype t<'a> = Js.null_undefined<'a>\n```\n\n----------------------------------------\n\nTITLE: Iterating over map in MapString module (ReScript)\nDESCRIPTION: Function to apply a function to all bindings in a map in increasing key order.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-string.mdx#2025-04-18_snippet_12\n\nLANGUAGE: reason\nCODE:\n```\nlet forEach: (t('v), (key, 'v) => unit) => unit;\n```\n\n----------------------------------------\n\nTITLE: Getting HashMap Size in ReScript\nDESCRIPTION: Returns the number of key-value pairs in the hash map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-map-int.mdx#2025-04-18_snippet_11\n\nLANGUAGE: rescript\nCODE:\n```\nlet size: t<'a> => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet hMap = Belt.HashMap.Int.make(~hintSize=10)\nBelt.HashMap.Int.set(hMap, 1, \"value1\")\nBelt.HashMap.Int.set(hMap, 2, \"value2\")\n\nBelt.HashMap.Int.size(hMap) == 2\n```\n\n----------------------------------------\n\nTITLE: Finding Element Index with Index using findIndexi\nDESCRIPTION: Function signature to find the index of the first element that satisfies a test function that also receives the element index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_39\n\nLANGUAGE: res\nCODE:\n```\nlet findIndexi: ((. elt, int) => bool, t) => int\n```\n\n----------------------------------------\n\nTITLE: MutableMap Type Definitions\nDESCRIPTION: Core type definitions for the mutable map and comparable ID\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/mutable-map.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype t<'k, 'v, 'id>\n```\n\nLANGUAGE: rescript\nCODE:\n```\ntype id<'key, 'id> = Belt_Id.comparable<'key, 'id>\n```\n\n----------------------------------------\n\nTITLE: Getting map size in MapString module (ReScript)\nDESCRIPTION: Function to get the number of key-value pairs in a map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-string.mdx#2025-04-18_snippet_19\n\nLANGUAGE: reason\nCODE:\n```\nlet size: t('v) => int;\n```\n\n----------------------------------------\n\nTITLE: Checking if a set is empty in ReScript with MutableSetInt\nDESCRIPTION: Returns a boolean indicating whether the set contains no elements. This is useful for validating a set before performing operations on it.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet isEmpty: t => bool;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet empty = Belt.MutableSet.Int.fromArray([||]);\nlet notEmpty = Belt.MutableSet.Int.fromArray([|1|]);\n\nBelt.MutableSet.Int.isEmpty(empty); /* true */\nBelt.MutableSet.Int.isEmpty(notEmpty); /* false */\n```\n\n----------------------------------------\n\nTITLE: Finding Maximum Key (Undefined) in ReScript MapInt Module\nDESCRIPTION: Function signature for finding the maximum key in the map, returning undefined if not found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-int.mdx#2025-04-18_snippet_28\n\nLANGUAGE: rescript\nCODE:\n```\nlet maxKeyUndefined: t<'a> => Js.undefined<key>\n```\n\n----------------------------------------\n\nTITLE: Iterating Array Elements with forEach in ReScript\nDESCRIPTION: Function signature for forEach that executes a provided function once for each element in the Uint8Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_40\n\nLANGUAGE: rescript\nCODE:\n```\nlet forEach: ((. elt) => unit, t) => unit\n```\n\n----------------------------------------\n\nTITLE: Array Testing Functions for Int32Array\nDESCRIPTION: Functions to test if all or some elements match a given predicate.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-32-array.mdx#2025-04-18_snippet_11\n\nLANGUAGE: rescript\nCODE:\n```\nlet every: ((. elt) => bool, t) => bool\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet everyi: ((. elt, int) => bool, t) => bool\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet some: ((. elt) => bool, t) => bool\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet somei: ((. elt, int) => bool, t) => bool\n```\n\n----------------------------------------\n\nTITLE: Accessing file name from JavaScript exception\nDESCRIPTION: Function that extracts the file name where the exception occurred from a JavaScript exception, returning None if not available.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/exn.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet fileName: t => option(string);\n```\n\n----------------------------------------\n\nTITLE: RegExp Match Index Function\nDESCRIPTION: Function signature for getting the index of a match in the input string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/re.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nlet index: result => int\n```\n\n----------------------------------------\n\nTITLE: Converting Integer to String with Precision in ReScript\nDESCRIPTION: Formats an integer to string using full precision formatting rules.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/int.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\n/* prints \"123456789\" */\nJs.log(Js.Int.toPrecision(123456789))\n```\n\n----------------------------------------\n\nTITLE: Removing multiple keys from MapDict\nDESCRIPTION: Function signature for removing multiple keys and their associated values from a map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_40\n\nLANGUAGE: reason\nCODE:\n```\nlet removeMany: (t('a, 'b, 'id), array('a), ~cmp: cmp('a, 'id)) => t('a, 'b, 'id);\n```\n\n----------------------------------------\n\nTITLE: Legacy Option to Undefined Conversion\nDESCRIPTION: Legacy function for mapping option('a) to Js.undefined('a).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/undefined.mdx#2025-04-18_snippet_12\n\nLANGUAGE: res\nCODE:\n```\nlet from_opt: option<'a> => t<'a>\n```\n\n----------------------------------------\n\nTITLE: ReScript List Prepend Operation\nDESCRIPTION: Demonstrates the JavaScript output of ReScript's list prepend operation using the spread syntax.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/overview.mdx#2025-04-18_snippet_13\n\nLANGUAGE: rescript\nCODE:\n```\nlist{a1, a2, ...oldList}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{hd: a1, tl: {hd: a2, tl: theRest}}\n```\n\n----------------------------------------\n\nTITLE: Create Float32Array from Buffer (Alias for fromBuffer)\nDESCRIPTION: Creates a new Float32Array view on the provided ArrayBuffer. An alias for the fromBuffer function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_58\n\nLANGUAGE: rescript\nCODE:\n```\nlet of_buffer: Js_typed_array.array_buffer => t\n```\n\n----------------------------------------\n\nTITLE: Setting Values from Regular Array\nDESCRIPTION: Copies values from a standard array into the typed array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-64-array.mdx#2025-04-18_snippet_6\n\nLANGUAGE: reason\nCODE:\n```\nlet setArray: (array(elt), t) => unit;\n```\n\n----------------------------------------\n\nTITLE: Manipulating Int16Array Contents in ReScript\nDESCRIPTION: Functions for setting array contents, copying within the array, filling, and reversing.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_int-16-array.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet setArray: (array<elt>, t) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet setArrayOffset: (array<elt>, int, t) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet copyWithin: (~to_: int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet copyWithinFrom: (~to_: int, ~from: int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet copyWithinFromRange: (~to_: int, ~start: int, ~end_: int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fillInPlace: (elt, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fillFromInPlace: (elt, ~from: int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fillRangeInPlace: (elt, ~start: int, ~end_: int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet reverseInPlace: t => t\n```\n\n----------------------------------------\n\nTITLE: Deprecated Floor Function in ReScript\nDESCRIPTION: Deprecated function that should be replaced with floor_int.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/math.mdx#2025-04-18_snippet_38\n\nLANGUAGE: reasonml\nCODE:\n```\nlet floor: float => int;\n```\n\n----------------------------------------\n\nTITLE: Reducing Array with Index\nDESCRIPTION: Function signature to reduce the array to a single value with a function that includes the element index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_45\n\nLANGUAGE: res\nCODE:\n```\nlet reducei: ((. 'b, elt, int) => 'b, 'b, t) => 'b\n```\n\n----------------------------------------\n\nTITLE: Using unsafe_round function to round float to nearest integer in ReScript\nDESCRIPTION: The unsafe_round function rounds its argument to the nearest integer, with ties rounded towards positive infinity. It takes a float as input and returns an integer, but may return values outside the valid int range.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/math.mdx#2025-04-18_snippet_26\n\nLANGUAGE: res\nCODE:\n```\nlet unsafe_round: float => int\n```\n\nLANGUAGE: res\nCODE:\n```\nJs.Math.unsafe_round(3.7) == 4\nJs.Math.unsafe_round(-3.5) == -3\nJs.Math.unsafe_round(2_150_000_000_000.3) // out of range for int\n```\n\n----------------------------------------\n\nTITLE: Array Manipulation Methods\nDESCRIPTION: Methods for manipulating array contents including copying, filling, and sorting.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_int-8-array.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet setArray: (array<elt>, t) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet setArrayOffset: (array<elt>, int, t) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet length: t => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet copyWithin: (~to_: int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet copyWithinFrom: (~to_: int, ~from: int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet copyWithinFromRange: (~to_: int, ~start: int, ~end_: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Checking Any Element with Uncurried Function in ReScript MutableSetString\nDESCRIPTION: Tests whether any element satisfies an uncurried predicate function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_26\n\nLANGUAGE: reason\nCODE:\n```\nlet someU: (t, [@bs] (value => bool)) => bool;\n```\n\n----------------------------------------\n\nTITLE: Creating Uint8Array Instances in ReScript\nDESCRIPTION: Functions for creating new Uint8Array instances from various sources.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\nlet _BYTES_PER_ELEMENT: int;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet make: array(elt) => t;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromBuffer: Js_typed_array2.array_buffer => t;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromBufferOffset: (Js_typed_array2.array_buffer, int) => t;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromBufferRange: (Js_typed_array2.array_buffer, ~offset: int, ~length: int) => t;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromLength: int => t;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet from: Js_typed_array2.array_like(elt) => t;\n```\n\n----------------------------------------\n\nTITLE: Array Properties and Metrics\nDESCRIPTION: Functions for accessing array properties like length, byte length and offset.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_uint-32-array.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\nlet byteLength: t => int;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet byteOffset: t => int;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet length: t => int;\n```\n\n----------------------------------------\n\nTITLE: Removing Elements from a Set in ReasonML\nDESCRIPTION: Demonstrates how to remove a single element from a set using the remove function. If the element doesn't exist, the set remains unchanged.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set.mdx#2025-04-18_snippet_11\n\nLANGUAGE: reasonml\nCODE:\n```\nlet remove: (t('value, 'id), 'value) => t('value, 'id);\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet s0 = Belt.Set.fromArray([|2,3,1,4,5|], ~id=(module IntCmp));\nlet s1 = s0->Belt.Set.remove(1);\nlet s2 = s1->Belt.Set.remove(3);\nlet s3 = s2->Belt.Set.remove(3);\n\ns1->Belt.Set.toArray; /* [|2,3,4,5|] */\ns2->Belt.Set.toArray; /* [|2,4,5|] */\ns2 == s3; /* true */\n```\n\n----------------------------------------\n\nTITLE: Defining MutableQueue Type in ReScript\nDESCRIPTION: Defines the type 't' for queues containing elements of type 'a'.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-queue.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype t('a);\n```\n\n----------------------------------------\n\nTITLE: Reading 16-bit Unsigned Integer (Little Endian)\nDESCRIPTION: Gets an unsigned 16-bit integer at the specified byte offset from the start of the DataView using little-endian format.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_data-view.mdx#2025-04-18_snippet_13\n\nLANGUAGE: reasonml\nCODE:\n```\nlet getUint16LittleEndian: (t, int) => int;\n```\n\n----------------------------------------\n\nTITLE: Dropping Elements from List in ReScript\nDESCRIPTION: The drop function returns a new list without the first n elements, or None if the list has fewer than n elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/list.mdx#2025-04-18_snippet_14\n\nLANGUAGE: rescript\nCODE:\n```\nlet drop: (t<'a>, int) => option<t<'a>>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlist{1, 2, 3}->Belt.List.drop(2) // Some(list{3})\n\nlist{1, 2, 3}->Belt.List.drop(3) // Some(list{})\n\nlist{1, 2, 3}->Belt.List.drop(4) // None\n```\n\n----------------------------------------\n\nTITLE: Defining HashMap Type in ReScript\nDESCRIPTION: Generic type definition for Belt.HashMap.String container type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-map-string.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reasonml\nCODE:\n```\ntype t('b);\n```\n\n----------------------------------------\n\nTITLE: Filtering a string set with an uncurried predicate in ReScript\nDESCRIPTION: Returns a new set containing all elements that satisfy the uncurried predicate.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set-string.mdx#2025-04-18_snippet_25\n\nLANGUAGE: rescript\nCODE:\n```\nlet keepU: (t, (. value) => bool) => t\n```\n\n----------------------------------------\n\nTITLE: Filtering map with uncurried function in MapString module (ReScript)\nDESCRIPTION: Uncurried function to filter a map based on a predicate, returning a new map with only key-value pairs that satisfy the predicate.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-string.mdx#2025-04-18_snippet_46\n\nLANGUAGE: reason\nCODE:\n```\nlet keepU: (t('v), [@bs] ((key, 'v) => bool)) => t('v);\n```\n\n----------------------------------------\n\nTITLE: Array Data Operations\nDESCRIPTION: Functions to set array data and get array length.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\nlet setArray: (array<elt>, t) => unit\n```\n\nLANGUAGE: res\nCODE:\n```\nlet setArrayOffset: (array<elt>, int, t) => unit\n```\n\nLANGUAGE: res\nCODE:\n```\nlet length: t => int\n```\n\n----------------------------------------\n\nTITLE: Unsafe Retrieval of Undefined Value in ReScript\nDESCRIPTION: Retrieves the value from Js.undefined('a) without safety checks.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/undefined.mdx#2025-04-18_snippet_5\n\nLANGUAGE: reasonml\nCODE:\n```\nlet getUnsafe: t('a) => 'a;\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for Int8Array\nDESCRIPTION: Core type definitions for Int8Array including element type, typed array type and main array type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_int-8-array.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype elt = int\ntype typed_array<'a>\ntype t = typed_array<elt>\n```\n\n----------------------------------------\n\nTITLE: Removing and Returning First Element with Exception in MutableQueue (ReScript)\nDESCRIPTION: Function to remove and return the first element in the queue, raising an exception if the queue is empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-queue.mdx#2025-04-18_snippet_11\n\nLANGUAGE: rescript\nCODE:\n```\nlet popExn: t('a) => 'a;\n```\n\n----------------------------------------\n\nTITLE: Defining hashable type in ReScript\nDESCRIPTION: Defines a type alias for a module that implements the Hashable interface. It uses generic parameters for the key type and identifier.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/id.mdx#2025-04-18_snippet_10\n\nLANGUAGE: ReScript\nCODE:\n```\ntype hashable<'key, 'id> =\n  module(Belt.Id.Hashable with type identity = 'id and type t = 'key)\n```\n\n----------------------------------------\n\nTITLE: Reading a Uint16 value with little-endian format in ReScript\nDESCRIPTION: Function signature for getting an unsigned 16-bit integer from the specified byte offset with little-endian format.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_data-view.mdx#2025-04-18_snippet_13\n\nLANGUAGE: rescript\nCODE:\n```\nlet getUint16LittleEndian: (t, int) => int\n```\n\n----------------------------------------\n\nTITLE: Setting Hours in ReScript\nDESCRIPTION: The setHours function sets a Date object's hours in the current time zone. It returns the timestamp of the updated Date and modifies the original Date object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_44\n\nLANGUAGE: res\nCODE:\n```\nlet setHours: (t, float) => float\n```\n\nLANGUAGE: res\nCODE:\n```\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet nextHour = Js.Date.setHours(date1, 22.0)\ndate1 == Js.Date.fromString(\"1973-11-29T22:30:54.321Z00:00\")\nnextHour == Js.Date.getTime(date1)\n```\n\n----------------------------------------\n\nTITLE: Dynamic Popping Iteration with Curried Function in ReScript\nDESCRIPTION: Function that applies a callback to each element, popping them from the stack before applying the function. Useful for worklist algorithms as it empties the stack during processing.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-stack.mdx#2025-04-18_snippet_14\n\nLANGUAGE: rescript\nCODE:\n```\nlet dynamicPopIter: (t('a), 'a => unit) => unit;\n```\n\n----------------------------------------\n\nTITLE: Creating TypedArray from ArrayBuffer with Range in ReScript\nDESCRIPTION: Function signature for creating a new Uint8ClampedArray view on an ArrayBuffer with a specified byte offset and length. Raises Js.Exn.Error exception if parameters are invalid.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_54\n\nLANGUAGE: res\nCODE:\n```\nlet fromBufferRange: (Js_typed_array2.array_buffer, ~offset: int, ~length: int) => t\n```\n\n----------------------------------------\n\nTITLE: Int8Array Basic Operations\nDESCRIPTION: Basic array operations including unsafe get/set, buffer access, and length properties\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_int-8-array.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reasonml\nCODE:\n```\nlet unsafe_get: (t, int) => elt;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet unsafe_set: (t, int, elt) => unit;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet buffer: t => Js_typed_array2.array_buffer;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet byteLength: t => int;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet byteOffset: t => int;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet length: t => int;\n```\n\n----------------------------------------\n\nTITLE: Array Properties and Attributes\nDESCRIPTION: Functions to access array buffer properties like length, byteLength and byteOffset\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_int-32-array.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\nlet buffer: t => Js_typed_array.array_buffer;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet byteLength: t => int;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet byteOffset: t => int;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet length: t => int;\n```\n\n----------------------------------------\n\nTITLE: Setting Full Year and Month in ReScript\nDESCRIPTION: The setFullYearM function sets a Date object's year and month in the current time zone. It returns the timestamp of the updated Date and modifies the original Date object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_42\n\nLANGUAGE: res\nCODE:\n```\nlet setFullYearM: (t, ~year: float, ~month: float, unit) => float\n```\n\nLANGUAGE: res\nCODE:\n```\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet future = Js.Date.setFullYearM(date1, ~year=1974.0, ~month=0.0, ())\ndate1 == Js.Date.fromString(\"1974-01-22T21:30:54.321Z00:00\")\nfuture == Js.Date.getTime(date1)\n```\n\n----------------------------------------\n\nTITLE: Index Search Operations for Float64Array\nDESCRIPTION: Functions to find the index of an element in a Float64Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-64-array.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\nlet indexOf: (elt, t) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet indexOfFrom: (elt, ~from: int, t) => int\n```\n\n----------------------------------------\n\nTITLE: Find Index of Value in Array\nDESCRIPTION: Returns the first index at which a given element can be found in the array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-64-array.mdx#2025-04-18_snippet_19\n\nLANGUAGE: reason\nCODE:\n```\nlet indexOf: (elt, t) => int;\n```\n\n----------------------------------------\n\nTITLE: HashSet Uncurried Reduce\nDESCRIPTION: Reduces the HashSet elements using an uncurried reducer function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-set-string.mdx#2025-04-18_snippet_11\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduceU: (t, 'c, (. 'c, key) => 'c) => 'c\n```\n\n----------------------------------------\n\nTITLE: List Indexed Iteration Function Signature\nDESCRIPTION: Function to iterate over a list with index, applying a function to each element and its index for side effects.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/list.mdx#2025-04-18_snippet_12\n\nLANGUAGE: ReScript\nCODE:\n```\nlet iteri: ((. int, 'a) => unit, t('a)) => unit;\n```\n\n----------------------------------------\n\nTITLE: Create Copy of Float32Array\nDESCRIPTION: Creates a new Float32Array with the same elements as the original array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-32-array.mdx#2025-04-18_snippet_26\n\nLANGUAGE: rescript\nCODE:\n```\nlet copy: t => t;\n```\n\n----------------------------------------\n\nTITLE: Descending For Loop Syntax in ReScript\nDESCRIPTION: Shows the syntax for a descending for loop in ReScript using the 'downto' keyword.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/control-flow.mdx#2025-04-18_snippet_6\n\nLANGUAGE: res\nCODE:\n```\nfor i in startValueInclusive downto endValueInclusive {\n  Js.log(i)\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nfor(var i = startValueInclusive; i >= endValueInclusive; --i){\n  console.log(i);\n}\n```\n\n----------------------------------------\n\nTITLE: Array Creation and Conversion Methods\nDESCRIPTION: Methods for creating new arrays and converting between different formats.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_int-8-array.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet make: array<elt> => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromBuffer: Js_typed_array2.array_buffer => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromBufferOffset: (Js_typed_array2.array_buffer, int) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromBufferRange: (Js_typed_array2.array_buffer, ~offset: int, ~length: int) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromLength: int => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet from: Js_typed_array2.array_like<elt> => t\n```\n\n----------------------------------------\n\nTITLE: Creating Uint8Array with Length\nDESCRIPTION: Creates a new Uint8Array with the specified length. Can raise Js.Exn.Error exception.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_55\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromLength: int => t\n```\n\n----------------------------------------\n\nTITLE: Array Slicing and Copying Functions\nDESCRIPTION: Functions for creating array slices and copies.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet slice: (~start: int, ~end_: int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet copy: t => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet sliceFrom: (int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet subarray: (~start: int, ~end_: int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet subarrayFrom: (int, t) => t\n```\n\n----------------------------------------\n\nTITLE: List Indexed Iteration Function Signature in ReScript\nDESCRIPTION: Defines the signature for the 'iteri' function, which applies a function to each element and its index in a list.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/list.mdx#2025-04-18_snippet_12\n\nLANGUAGE: rescript\nCODE:\n```\nlet iteri: ((. int, 'a) => unit, t<'a>) => unit\n```\n\n----------------------------------------\n\nTITLE: Sorting UInt32Array with custom comparator\nDESCRIPTION: Defines a function that sorts the elements of the array in place using a custom comparison function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_17\n\nLANGUAGE: rescript\nCODE:\n```\nlet sortInPlaceWith: ((. elt, elt) => int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Removing an Element from a HashSet in ReScript\nDESCRIPTION: This function signature shows how to remove an element from a HashSet.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-set.mdx#2025-04-18_snippet_10\n\nLANGUAGE: reason\nCODE:\n```\nlet remove: (t('a, 'id), 'a) => unit;\n```\n\n----------------------------------------\n\nTITLE: Pushing Element to MutableStack in ReScript\nDESCRIPTION: Function signature for pushing an element onto the stack.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-stack.mdx#2025-04-18_snippet_4\n\nLANGUAGE: ReScript\nCODE:\n```\nlet push: (t<'a>, 'a) => unit\n```\n\n----------------------------------------\n\nTITLE: Curried forEach for MapDict\nDESCRIPTION: Function signature for iterating over all key-value pairs in a map using curried function, in increasing key order.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_13\n\nLANGUAGE: reason\nCODE:\n```\nlet forEach: (t('k, 'a, 'id), ('k, 'a) => unit) => unit;\n```\n\n----------------------------------------\n\nTITLE: Create Slice of Float32Array from Position\nDESCRIPTION: Extracts a section of the Float32Array starting at the specified index and returns a new Float32Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_27\n\nLANGUAGE: rescript\nCODE:\n```\nlet sliceFrom: (int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Create Float32Array with Specified Length\nDESCRIPTION: Creates a new Float32Array with the specified length. Raises `Js.Exn.Error` if invalid.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-32-array.mdx#2025-04-18_snippet_55\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromLength: int => t;\n```\n\n----------------------------------------\n\nTITLE: Example of Creating String Set from Array in ReScript\nDESCRIPTION: Shows how to create a string set from an array and convert it back to a sorted array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-string.mdx#2025-04-18_snippet_5\n\nLANGUAGE: reasonml\nCODE:\n```\nlet s0 = Belt.Set.String.fromArray([|\"apple\", \"orange\", \"banana\"|])\n\ns0->Belt.Set.String.toArray; /* [|\"apple\", \"banana\", \"orange\"|] */\n```\n\n----------------------------------------\n\nTITLE: Creating Uint8Array from Array with make in ReScript\nDESCRIPTION: Function signature for make that creates a new Uint8Array from a JavaScript array of elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_51\n\nLANGUAGE: rescript\nCODE:\n```\nlet make: array<elt> => t\n```\n\n----------------------------------------\n\nTITLE: Setting Milliseconds with setUTCMilliseconds in ReScript\nDESCRIPTION: Sets a Date's milliseconds according to UTC time. This function modifies the original Date object and returns the updated timestamp in milliseconds. Binds to JavaScript's Date.setUTCMilliseconds method.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_57\n\nLANGUAGE: res\nCODE:\n```\nlet setUTCMilliseconds: (t, float) => float\n```\n\nLANGUAGE: res\nCODE:\n```\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet futureTime = Js.Date.setUTCMilliseconds(date1, 494.0)\ndate1 == Js.Date.fromString(\"1973-11-29T21:30:54.494Z00:00\")\nfutureTime == Js.Date.getTime(date1)\n```\n\n----------------------------------------\n\nTITLE: Checking if Uint8ClampedArray includes a value\nDESCRIPTION: Determines whether the array includes a certain value, returning true or false as appropriate.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_18\n\nLANGUAGE: res\nCODE:\n```\nlet includes: (elt, t) => bool\n```\n\n----------------------------------------\n\nTITLE: Sorting Uint8ClampedArray elements in-place\nDESCRIPTION: Sorts the elements of the array in place and returns the sorted array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_16\n\nLANGUAGE: res\nCODE:\n```\nlet sortInPlace: t => t\n```\n\n----------------------------------------\n\nTITLE: Defining the value type for Belt.Set.String in ReScript\nDESCRIPTION: Defines the type of elements in the string set as 'string'.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set-string.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype value = string\n```\n\n----------------------------------------\n\nTITLE: Defining MakeComparableU Module Generator in ReScript\nDESCRIPTION: Module functor for creating uncurried comparable modules with custom comparison functions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/id.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nmodule MakeComparableU: (M: {\n  type t\n  let cmp: (. t, t) => int\n}) => Comparable with type t = M.t\n```\n\n----------------------------------------\n\nTITLE: Polymorphic Variants Coercion Example\nDESCRIPTION: Shows how to safely coerce polymorphic variants to integers or strings in ReScript\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2021-05-07-release-9-1.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet test2 = (arg: [#1 | #3 | #5]) => {\n  (arg :> int)\n}\n\nlet test3 = (arg: option<[#1 | #3 | #5]>) => {\n  (arg :> option<int>)\n}\n\nJs.log(test2(#1))\nJs.log(test3(Some(#3)))\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction test2(arg) {\n  return arg;\n}\n\nfunction test3(arg) {\n  return arg;\n}\n\nconsole.log(1);\nconsole.log(3);\n```\n\n----------------------------------------\n\nTITLE: Defining castToArrayLike Method Signature in ReScript\nDESCRIPTION: Defines the signature for the castToArrayLike method that converts a string to an array-like structure that can be processed by array functions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/string-2.mdx#2025-04-18_snippet_38\n\nLANGUAGE: res\nCODE:\n```\nlet castToArrayLike: t => Js_array2.array_like<t>\n```\n\n----------------------------------------\n\nTITLE: Unsafe String Interpolation in ReScript\nDESCRIPTION: Shows deprecated unsafe string interpolation using the j prefix for implicit type conversion.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/primitive-types.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet age = 10\nlet message = j`Today I am $age years old.`\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar message = \"Today I am \" + 10 + \" years old.\";\n```\n\n----------------------------------------\n\nTITLE: Converting Uint8ClampedArray to locale-specific string\nDESCRIPTION: Returns a string representing the array using locale-specific formatting.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_31\n\nLANGUAGE: res\nCODE:\n```\nlet toLocaleString: t => string\n```\n\n----------------------------------------\n\nTITLE: Accessing Character by Index in ReScript (charAt)\nDESCRIPTION: The charAt function gets the character at a specified index in a string. If the index is out of range, it returns an empty string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string.mdx#2025-04-18_snippet_8\n\nLANGUAGE: reason\nCODE:\n```\nlet charAt: (int, t) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nJs.String.charAt(0, \"Reason\") == \"R\";\nJs.String.charAt(12, \"Reason\") == \"\";\nJs.String.charAt(5, {js|Rẽasöń|js}) == {js|ń|js};\n```\n\n----------------------------------------\n\nTITLE: Extract Slice from Float32Array\nDESCRIPTION: Returns a new Float32Array containing elements from start (inclusive) to end (exclusive) of the original array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-32-array.mdx#2025-04-18_snippet_25\n\nLANGUAGE: rescript\nCODE:\n```\nlet slice: (~start: int, ~end_: int, t) => t;\n```\n\n----------------------------------------\n\nTITLE: Float64Array Type Definitions\nDESCRIPTION: Core type definitions for Float64Array including element type, typed array type and main array type t.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_float-64-array.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\ntype elt = float;\ntype typed_array('a) = Js_typed_array2.Float64Array.typed_array('a);\ntype t = typed_array(elt);\n```\n\n----------------------------------------\n\nTITLE: Checking Strictly Sorted Length Function Signature\nDESCRIPTION: Function signature for determining the strictly sorted length of an integer array. Returns positive for increasing order and negative for decreasing order.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/sort-array-int.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet strictlySortedLength: array<element> => int\n```\n\n----------------------------------------\n\nTITLE: Rendering List Data Structure\nDESCRIPTION: Shows how to render a ReScript list data structure by converting it to an array first using List.toArray.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/arrays-and-keys.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\ntype todo = {id: string, text: string}\n\n@react.component\nlet make = () => {\n  let todoList = list{\n    {id: \"todo1\", text: \"Todo 1\"},\n    {id: \"todo2\", text: \"Todo 2\"},\n  }\n\n  let items =\n    todoList\n    ->List.toArray\n    ->Array.map(todo => {\n      <li key={todo.id}> {React.string(todo.text)} </li>\n    })\n\n  <div> {React.array(items)} </div>\n}\n```\n\n----------------------------------------\n\nTITLE: Create Float32Array from Array-Like Object\nDESCRIPTION: Creates a new Float32Array from an array-like or iterable object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_56\n\nLANGUAGE: rescript\nCODE:\n```\nlet from: Js_typed_array.array_like<elt> => t\n```\n\n----------------------------------------\n\nTITLE: Performing Integer Division in ReScript\nDESCRIPTION: Demonstrates the use of the integer division operator (/) in ReScript, which truncates the result to an integer value. The example shows dividing 3 by 2, which results in 1 because the fractional part is truncated.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/operators_integer_division.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\nlet result = 3 / 2\n```\n\nLANGUAGE: js\nCODE:\n```\nvar result = 1;\n```\n\n----------------------------------------\n\nTITLE: Reduce Array Elements with Index\nDESCRIPTION: Applies a function against an accumulator and each element in the array (from left to right), with access to the element index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-64-array.mdx#2025-04-18_snippet_45\n\nLANGUAGE: reason\nCODE:\n```\nlet reducei: ((. 'b, elt, int) => 'b, 'b, t) => 'b;\n```\n\n----------------------------------------\n\nTITLE: Converting Array to Locale String in ReasonML\nDESCRIPTION: Converts array elements to string using current locale conventions. Each element is converted using JavaScript's locale conversion.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/array-2.mdx#2025-04-18_snippet_11\n\nLANGUAGE: reasonml\nCODE:\n```\nlet toLocaleString: t('a) => string;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nJs.Array2.toLocaleString([|Js.Date.make()|]);\n```\n\n----------------------------------------\n\nTITLE: Filling TypedArray with Value in ReScript\nDESCRIPTION: Function signature for filling all elements of a Uint8ClampedArray with a specified value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_12\n\nLANGUAGE: res\nCODE:\n```\nlet fillInPlace: (elt, t) => t\n```\n\n----------------------------------------\n\nTITLE: Comparing Sets in ReScript\nDESCRIPTION: Provides total ordering between sets by comparing size first, then iterating over elements in order.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-string.mdx#2025-04-18_snippet_27\n\nLANGUAGE: reasonml\nCODE:\n```\nlet cmp: (t, t) => int;\n```\n\n----------------------------------------\n\nTITLE: Constructing Undefined Value in ReScript\nDESCRIPTION: Constructs a value of Js.undefined('a) containing a value of 'a.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/undefined.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reasonml\nCODE:\n```\nlet return: 'a => t('a);\n```\n\n----------------------------------------\n\nTITLE: Converting Date to Locale Date String in ReScript\nDESCRIPTION: Converts a Date object to a string with the date formatted according to the current locale. Shows year, month, and day in locale-specific format.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_72\n\nLANGUAGE: rescript\nCODE:\n```\nlet toLocaleDateString: t => string\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.Date.toLocaleDateString(exampleDate) == \"11/29/1973\" // for en_US.utf8\nJs.Date.toLocaleDateString(exampleDate) == \"29.11.73\" // for de_DE.utf8\n```\n\n----------------------------------------\n\nTITLE: Getting Bucket Histogram of HashMap in ReScript\nDESCRIPTION: Returns the bucket histogram of the hash map using Belt.HashMap.String.getBucketHistogram.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-map-string.mdx#2025-04-18_snippet_18\n\nLANGUAGE: rescript\nCODE:\n```\nlet getBucketHistogram: t<'a> => array<int>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet hMap = Belt.HashMap.String.make(~hintSize=10)\nBelt.HashMap.String.set(hMap, \"1\", \"1\")\n\nBelt.HashMap.String.getBucketHistogram(hMap)\n```\n\n----------------------------------------\n\nTITLE: Creating a slice of Uint8ClampedArray\nDESCRIPTION: Returns a new array containing the elements from the specified start to end indices (end exclusive).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_25\n\nLANGUAGE: res\nCODE:\n```\nlet slice: (~start: int, ~end_: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Creating Array Subarray with subarray in ReScript\nDESCRIPTION: Function signature for subarray that returns a new Uint8Array from a given start to end (end not included), sharing the same underlying buffer.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_28\n\nLANGUAGE: rescript\nCODE:\n```\nlet subarray: (~start: int, ~end_: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Creation Functions for Float64Array\nDESCRIPTION: Functions to create a new Float64Array from various source types like arrays and buffers.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-64-array.mdx#2025-04-18_snippet_25\n\nLANGUAGE: rescript\nCODE:\n```\nlet make: array<elt> => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromBuffer: Js_typed_array.array_buffer => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromBufferOffset: (Js_typed_array.array_buffer, int) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromBufferRange: (Js_typed_array.array_buffer, ~offset: int, ~length: int) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromLength: int => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet from: Js_typed_array.array_like<elt> => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet create: array<elt> => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet of_buffer: Js_typed_array.array_buffer => t\n```\n\n----------------------------------------\n\nTITLE: Extended Exception Type Definition\nDESCRIPTION: Private extension of the exception type to include Error variant.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/exn.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\ntype exn +=\n  private\n  | Error(t)\n```\n\n----------------------------------------\n\nTITLE: Signature for mapWithDefaultU Function in ReScript Result Module\nDESCRIPTION: Function signature for mapWithDefaultU, an uncurried version of mapWithDefault.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/result.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet mapWithDefaultU: (t<'a, 'c>, 'b, (. 'a) => 'b) => 'b\n```\n\n----------------------------------------\n\nTITLE: Writing a Uint32 value with little-endian format in ReScript\nDESCRIPTION: Function signature for storing an unsigned 32-bit integer at the specified byte offset with little-endian format.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_data-view.mdx#2025-04-18_snippet_31\n\nLANGUAGE: rescript\nCODE:\n```\nlet setUint32LittleEndian: (t, int, int) => unit\n```\n\n----------------------------------------\n\nTITLE: Creating Int8Array from ArrayBuffer\nDESCRIPTION: Function signature to create a new Int8Array from an existing ArrayBuffer.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_52\n\nLANGUAGE: res\nCODE:\n```\nlet fromBuffer: Js_typed_array.array_buffer => t\n```\n\n----------------------------------------\n\nTITLE: Sorting TypedArray in Place in ReScript\nDESCRIPTION: Function signature for sorting the elements of a Uint8ClampedArray in place using the default comparison.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_16\n\nLANGUAGE: res\nCODE:\n```\nlet sortInPlace: t => t\n```\n\n----------------------------------------\n\nTITLE: Parsing Date String in ReScript (Deprecated)\nDESCRIPTION: Function signature for parse, which is deprecated. Use fromString() instead.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_17\n\nLANGUAGE: rescript\nCODE:\n```\nlet parse: string => t\n```\n\n----------------------------------------\n\nTITLE: Accessing and Setting Float32Array Elements in ReScript\nDESCRIPTION: Provides unsafe getter and setter functions for Float32Array elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet unsafe_get: (t, int) => elt\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet unsafe_set: (t, int, elt) => unit\n```\n\n----------------------------------------\n\nTITLE: Create Float32Array from ArrayBuffer with Offset\nDESCRIPTION: Creates a new Float32Array view of the ArrayBuffer starting at the specified byte offset. Can throw an exception.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-32-array.mdx#2025-04-18_snippet_53\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromBufferOffset: (Js_typed_array2.array_buffer, int) => t;\n```\n\n----------------------------------------\n\nTITLE: Defining isSortedU Function\nDESCRIPTION: Uncurried version of isSorted function that checks if an array is sorted.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/sort-array.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reason\nCODE:\n```\nlet isSortedU: (array('a), [@bs] (('a, 'a) => int)) => bool;\n```\n\n----------------------------------------\n\nTITLE: Checking if map is empty in ReScript\nDESCRIPTION: Function signature for checking if a mutable map is empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_4\n\nLANGUAGE: ReScript\nCODE:\n```\nlet isEmpty: t<'a> => bool\n```\n\n----------------------------------------\n\nTITLE: Splitting Strings in ReScript\nDESCRIPTION: Functions for splitting strings using delimiters or regular expressions. Includes options for limiting the number of splits.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string.mdx#2025-04-18_snippet_35\n\nLANGUAGE: ReScript\nCODE:\n```\nlet split: (t, t) => array(t);\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet splitAtMost: (t, ~limit: int, t) => array(t);\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet splitByRe: (Js_re.t, t) => array(option(t));\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet splitByReAtMost: (Js_re.t, ~limit: int, t) => array(option(t));\n```\n\n----------------------------------------\n\nTITLE: Removing multiple elements from Belt.MutableSet.Int in ReScript\nDESCRIPTION: Removes multiple elements from an array from the set using the removeMany function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_10\n\nLANGUAGE: res\nCODE:\n```\nlet removeMany: (t, array<value>) => unit\n```\n\nLANGUAGE: res\nCODE:\n```\nlet set = Belt.MutableSet.Int.fromArray([1, 2, 3, 4])\n\nset->Belt.MutableSet.Int.removeMany([5, 4, 3, 2, 1])\nset->Belt.MutableSet.Int.toArray /* [] */\n```\n\n----------------------------------------\n\nTITLE: Reducing HashSetInt in ReScript\nDESCRIPTION: Reduces the HashSetInt to a single value using a reducer function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-set-int.mdx#2025-04-18_snippet_12\n\nLANGUAGE: ReScript\nCODE:\n```\nlet reduce: (t, 'c, ('c, key) => 'c) => 'c;\n```\n\n----------------------------------------\n\nTITLE: Mapping Array Elements with Index\nDESCRIPTION: Function signature to create a new typed array with the results of calling a provided function on every element with its index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_43\n\nLANGUAGE: res\nCODE:\n```\nlet mapi: ((. elt, int) => 'b, t) => typed_array<'b>\n```\n\n----------------------------------------\n\nTITLE: Signature for eqU Function in ReScript Result Module\nDESCRIPTION: Function signature for eqU, an uncurried version of eq for comparing Results.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/result.mdx#2025-04-18_snippet_12\n\nLANGUAGE: rescript\nCODE:\n```\nlet eqU: (t<'a, 'c>, t<'b, 'd>, (. 'a, 'b) => bool) => bool\n```\n\n----------------------------------------\n\nTITLE: Copying Range of Elements\nDESCRIPTION: Copies a range of elements within the array to a position starting at the target index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_11\n\nLANGUAGE: rescript\nCODE:\n```\nlet copyWithinFromRange: (~to_: int, ~start: int, ~end_: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Creating New Blog Post File with Shell Command\nDESCRIPTION: Shell command example for creating a new blog post file with the correct naming convention.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/blogpost-guide.mdx#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ntouch _blogposts/2020-01-30-my-new-blog-post.mdx\n```\n\n----------------------------------------\n\nTITLE: Retrieving Map Identity in ReScript\nDESCRIPTION: Advanced usage function that returns the identity of a map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map.mdx#2025-04-18_snippet_14\n\nLANGUAGE: reasonml\nCODE:\n```\nlet getId: t('k, 'v, 'id) => id('k, 'id);\n```\n\n----------------------------------------\n\nTITLE: Setting Array Data with Offset using setArrayOffset\nDESCRIPTION: Function signature to set data from a regular array into an Int8Array at a specified offset.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_7\n\nLANGUAGE: res\nCODE:\n```\nlet setArrayOffset: (array<elt>, int, t) => unit\n```\n\n----------------------------------------\n\nTITLE: Performing Integer Multiplication in ReScript\nDESCRIPTION: This snippet demonstrates how to use the integer multiplication operator (*) in ReScript. It multiplies two integers and assigns the result to a variable.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/operators_integer_multiplication.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\nlet result = 2 * 3\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar result = 6;\n```\n\n----------------------------------------\n\nTITLE: Convert Array to String\nDESCRIPTION: Returns a string representation of the typed array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_type-s.mdx#2025-04-18_snippet_30\n\nLANGUAGE: res\nCODE:\n```\nlet toString: t => string\n```\n\n----------------------------------------\n\nTITLE: Creating an empty MapDict in ReScript\nDESCRIPTION: Function signature for creating an empty map with specified key, value, and identity types.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\nlet empty: t('k, 'v, 'id);\n```\n\n----------------------------------------\n\nTITLE: Basic Array Operations\nDESCRIPTION: Core array operations including get, set, buffer access and length operations\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array-2_int-32-array.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet unsafe_get: (t, int) => elt\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet unsafe_set: (t, int, elt) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet buffer: t => Js_typed_array2.array_buffer\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet byteLength: t => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet byteOffset: t => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet length: t => int\n```\n\n----------------------------------------\n\nTITLE: Clearing a HashMap with integer keys in ReScript\nDESCRIPTION: Removes all key-value pairs from the hash map, resulting in an empty map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-map-int.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reason\nCODE:\n```\nlet clear: t('b) => unit;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet hMap = Belt.HashMap.Int.fromArray([|(1, \"1\")|])  \nBelt.HashMap.Int.clear(hMap)\nBelt.HashMap.Int.isEmpty(hMap) == true;\n```\n\n----------------------------------------\n\nTITLE: Getting value by key in ReScript\nDESCRIPTION: Function signature for getting a value by key from a mutable map, returning an option type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_32\n\nLANGUAGE: ReScript\nCODE:\n```\nlet get: (t<'a>, key) => option<'a>\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for UInt32Array\nDESCRIPTION: Core type definitions for the UInt32Array including element type, typed array type, and the main array type t.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_uint-32-array.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\ntype elt = int;\ntype typed_array('a);\ntype t = typed_array(elt);\n```\n\n----------------------------------------\n\nTITLE: Using unsafe_set Function in ReScript\nDESCRIPTION: The unsafe_set function sets an element in an array at the specified index without bounds checking. It modifies the original array and can lead to unexpected behavior with out-of-bounds indices.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array-2.mdx#2025-04-18_snippet_42\n\nLANGUAGE: res\nCODE:\n```\nlet arr = [100, 101, 102, 103]\nJs.Array2.unsafe_set(arr, 3, 99)\n// result is [100, 101, 102, 99];\n\nJs.Array2.unsafe_set(arr, 4, 88)\n// result is [100, 101, 102, 99, 88]\n\nJs.Array2.unsafe_set(arr, 6, 77)\n// result is [100, 101, 102, 99, 88, <1 empty item>, 77]\n\nJs.Array2.unsafe_set(arr, -1, 66)\n// you don't want to know.\n```\n\n----------------------------------------\n\nTITLE: Getting Storage Length in ReScript\nDESCRIPTION: External binding for getting the number of items in storage.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/dom/storage.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nexternal length: t => int = \"length\"\n```\n\n----------------------------------------\n\nTITLE: Signature for getWithDefault Function in ReScript Result Module\nDESCRIPTION: Function signature for getWithDefault, which returns the Ok value or a default value for Error.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/result.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\nlet getWithDefault: (t<'a, 'b>, 'a) => 'a\n```\n\n----------------------------------------\n\nTITLE: Checking Map Emptiness in ReScript MapInt Module\nDESCRIPTION: Function signature for checking if a map is empty, returning a boolean.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-int.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet isEmpty: t<'v> => bool\n```\n\n----------------------------------------\n\nTITLE: Finding maximum key as undefined in MapString module (ReScript)\nDESCRIPTION: Function to find the maximum key in a map, returning an undefined type for JavaScript interoperability.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-string.mdx#2025-04-18_snippet_28\n\nLANGUAGE: reason\nCODE:\n```\nlet maxKeyUndefined: t('a) => Js.undefined(key);\n```\n\n----------------------------------------\n\nTITLE: Size Operation in ReScript Set\nDESCRIPTION: Function that returns the number of elements in the set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-dict.mdx#2025-04-18_snippet_14\n\nLANGUAGE: reason\nCODE:\n```\nlet size: t('value, 'id) => int;\n```\n\nLANGUAGE: reason\nCODE:\n```\nmodule IntCmp =\n  Belt.Id.MakeComparable({\n    type t = int;\n    let cmp = Pervasives.compare;\n  });\n\nlet s0 = Belt.Set.Dict.fromArray([|1,2,3,4|], ~cmp=IntCmp.cmp);\n\ns0->Belt.Set.Dict.size; /* 4 */\n```\n\n----------------------------------------\n\nTITLE: Reducing map with uncurried function in MapString module (ReScript)\nDESCRIPTION: Uncurried function to reduce a map to a single value using an accumulator.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-string.mdx#2025-04-18_snippet_13\n\nLANGUAGE: reason\nCODE:\n```\nlet reduceU: (t('v), 'v2, [@bs] (('v2, key, 'v) => 'v2)) => 'v2;\n```\n\n----------------------------------------\n\nTITLE: Float toString Function\nDESCRIPTION: Function to convert a float to its string representation using default formatting.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/float.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\nlet toString: float => string\n```\n\n----------------------------------------\n\nTITLE: Vector to List Conversion\nDESCRIPTION: Converts a vector to a list data structure.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/vector.mdx#2025-04-18_snippet_8\n\nLANGUAGE: res\nCODE:\n```\nlet toList: t<'a> => list<'a>\n```\n\n----------------------------------------\n\nTITLE: Get Bytes Per Element for Float32Array\nDESCRIPTION: Returns the size in bytes of each element in the Float32Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_50\n\nLANGUAGE: rescript\nCODE:\n```\nlet _BYTES_PER_ELEMENT: int\n```\n\n----------------------------------------\n\nTITLE: Accessing Storage Key by Index in ReScript\nDESCRIPTION: External binding for retrieving a storage key by its numeric index. Returns an option type containing the key if found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/dom/storage.mdx#2025-04-18_snippet_5\n\nLANGUAGE: reason\nCODE:\n```\nexternal key: (int, t) => option<string> = \"key\"\n```\n\n----------------------------------------\n\nTITLE: Installing ReScript Globally with npm\nDESCRIPTION: Command to install ReScript globally using npm. This allows you to use ReScript from any directory on your system.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/installation.mdx#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -g bs-platform\n```\n\n----------------------------------------\n\nTITLE: Extracting values as array from map in ReScript\nDESCRIPTION: Returns an array containing all the values in the map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_23\n\nLANGUAGE: reasonml\nCODE:\n```\nlet valuesToArray: t('a) => array('a);\n```\n\n----------------------------------------\n\nTITLE: Finding Minimum Key-Value Pair (Undefined) in ReScript MapInt Module\nDESCRIPTION: Function signature for finding the minimum key-value pair in the map, returning undefined if not found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-int.mdx#2025-04-18_snippet_30\n\nLANGUAGE: rescript\nCODE:\n```\nlet minUndefined: t<'v> => Js.undefined<(key, 'v)>\n```\n\n----------------------------------------\n\nTITLE: Filtering Belt.Set in ReScript\nDESCRIPTION: Shows how to filter elements in a Belt.Set using the keep function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/set.mdx#2025-04-18_snippet_12\n\nLANGUAGE: rescript\nCODE:\n```\nlet isEven = x => mod(x, 2) == 0\n\nlet s0 = Belt.Set.fromArray([1,2,3,4,5], ~id=module(IntCmp))\nlet s1 = s0->Belt.Set.keep(isEven)\n\ns1->Belt.Set.toArray /* [2,4] */\n```\n\n----------------------------------------\n\nTITLE: Finding Array Element with find in ReScript\nDESCRIPTION: Function signature for find that returns the first element in the Uint8Array that satisfies the provided testing function, or undefined if not found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_36\n\nLANGUAGE: rescript\nCODE:\n```\nlet find: ((. elt) => bool, t) => Js.undefined<elt>\n```\n\n----------------------------------------\n\nTITLE: Fill Array Range In Place\nDESCRIPTION: Fills elements within a specified range of the array with the provided value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-64-array.mdx#2025-04-18_snippet_14\n\nLANGUAGE: reason\nCODE:\n```\nlet fillRangeInPlace: (elt, ~start: int, ~end_: int, t) => t;\n```\n\n----------------------------------------\n\nTITLE: Initializing Belt.SortArray.String Module\nDESCRIPTION: Specialized module for efficient string array sorting operations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/sort-array.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nmodule String = Belt.SortArray.String\n```\n\n----------------------------------------\n\nTITLE: Clearing a MutableQueue in ReScript\nDESCRIPTION: The 'clear' function discards all elements from the given queue, effectively emptying it.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-queue.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet clear: t<'a> => unit\n```\n\n----------------------------------------\n\nTITLE: Getting the byte offset of a DataView in ReScript\nDESCRIPTION: Function signature for retrieving the offset (in bytes) of the DataView from the start of its ArrayBuffer.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_data-view.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nlet byteOffset: t => int\n```\n\n----------------------------------------\n\nTITLE: Reducing Array Elements\nDESCRIPTION: Function signature to reduce the array to a single value by applying a function against an accumulator and each element.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_44\n\nLANGUAGE: res\nCODE:\n```\nlet reduce: ((. 'b, elt) => 'b, 'b, t) => 'b\n```\n\n----------------------------------------\n\nTITLE: To_opt Function Signature in ReScript\nDESCRIPTION: Function signature for legacy conversion from nullable to Option type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/nullable.mdx#2025-04-18_snippet_11\n\nLANGUAGE: rescript\nCODE:\n```\nlet to_opt: t<'a> => option<'a>\n```\n\n----------------------------------------\n\nTITLE: Array Iteration for Int32Array\nDESCRIPTION: Functions to iterate over and process array elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-32-array.mdx#2025-04-18_snippet_13\n\nLANGUAGE: rescript\nCODE:\n```\nlet forEach: ((. elt) => unit, t) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet forEachi: ((. elt, int) => unit, t) => unit\n```\n\n----------------------------------------\n\nTITLE: Converting Float to Precision-Based Notation\nDESCRIPTION: Function that formats a float using a default precision rule, typically showing all significant digits.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/float.mdx#2025-04-18_snippet_18\n\nLANGUAGE: re\nCODE:\n```\nlet toPrecision: float => string;\n```\n\n----------------------------------------\n\nTITLE: Check if Array Includes Value\nDESCRIPTION: Determines whether the array includes a certain value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-64-array.mdx#2025-04-18_snippet_18\n\nLANGUAGE: reason\nCODE:\n```\nlet includes: (elt, t) => bool;\n```\n\n----------------------------------------\n\nTITLE: Reversing Array with reverseInPlace\nDESCRIPTION: Function signature to reverse the order of elements in the Int8Array, modifying the array in place.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_15\n\nLANGUAGE: res\nCODE:\n```\nlet reverseInPlace: t => t\n```\n\n----------------------------------------\n\nTITLE: Limitations of Scoped Polymorphic Types in ReScript\nDESCRIPTION: Examples showing the syntax limitations of scoped polymorphic types, which can only be applied to let-bindings or record fields but not to function bodies or separate type definitions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/scoped-polymorphic-types.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\nexception Abort\n\nlet testExn: 'a. unit => 'a = () => raise(Abort) // Works!\n\nlet testExn2 = (): 'a. 'a = raise(Abort) // Syntax error!\ntype fn = 'a. 'a => unit // Syntax error!\n```\n\n----------------------------------------\n\nTITLE: Finding Element Index from Position\nDESCRIPTION: Function signature to find the first index of a specified element starting from a given position.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_20\n\nLANGUAGE: res\nCODE:\n```\nlet indexOfFrom: (elt, ~from: int, t) => int\n```\n\n----------------------------------------\n\nTITLE: Array Setting Operations in ReScript\nDESCRIPTION: Functions to set values in a Uint32Array from a standard ReScript array, with optional offset.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-32-array.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\nlet setArray: (array<elt>, t) => unit\n```\n\nLANGUAGE: res\nCODE:\n```\nlet setArrayOffset: (array<elt>, int, t) => unit\n```\n\n----------------------------------------\n\nTITLE: Copy Elements Within Float32Array with Source Index\nDESCRIPTION: Copies a sequence of elements within the Float32Array from a source index to a position starting at the target index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-32-array.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rescript\nCODE:\n```\nlet copyWithinFrom: (~to_: int, ~from: int, t) => t;\n```\n\n----------------------------------------\n\nTITLE: Check Set Internal Invariant\nDESCRIPTION: Internal function to verify set invariants, raises an exception when invariants are not held.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set-dict.mdx#2025-04-18_snippet_10\n\nLANGUAGE: res\nCODE:\n```\nlet checkInvariantInternal: t<'a, 'b> => unit\n```\n\n----------------------------------------\n\nTITLE: Unsafe Element Access in TypedArray\nDESCRIPTION: Retrieves an element at the specified index without bounds checking.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_type-s.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\nlet unsafe_get: (t, int) => elt\n```\n\n----------------------------------------\n\nTITLE: Array Creation and Conversion Methods\nDESCRIPTION: Functions for creating new arrays and converting between formats\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_int-32-array.mdx#2025-04-18_snippet_7\n\nLANGUAGE: reason\nCODE:\n```\nlet make: array(elt) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet fromBuffer: Js_typed_array.array_buffer => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet fromBufferOffset: (Js_typed_array.array_buffer, int) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet fromBufferRange: (Js_typed_array.array_buffer, ~offset: int, ~length: int) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet fromLength: int => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet from: Js_typed_array.array_like(elt) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet create: array(elt) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet of_buffer: Js_typed_array.array_buffer => t;\n```\n\n----------------------------------------\n\nTITLE: Comparing String Operations in JavaScript and ReScript\nDESCRIPTION: Shows the differences in string declaration and concatenation between JavaScript and ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/overview.mdx#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"hello \" + \"world\"\n```\n\nLANGUAGE: ReScript\nCODE:\n```\n\"hello \" ++ \"world\"\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nsql`select ${fnName};`\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nsql`select ${fnName};`\n```\n\n----------------------------------------\n\nTITLE: Split Operation in ReScript Set\nDESCRIPTION: Function that splits a set into smaller and larger parts based on a value, also indicating if the value is present.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-dict.mdx#2025-04-18_snippet_19\n\nLANGUAGE: reason\nCODE:\n```\nlet split: (t('value, 'id), 'value, ~cmp: cmp('value, 'id)) => ((t('value, 'id), t('value, 'id)), bool);\n```\n\n----------------------------------------\n\nTITLE: JavaScript Logger Implementation\nDESCRIPTION: A JavaScript example of a logger object with a log method that handles different data types based on typeof checks.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/scoped-polymorphic-types.mdx#2025-04-18_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst logger = {\n  log: (data) => {\n    if (typeof data === \"string\") {\n      /* handle string */\n    } else if (typeof data === \"number\") {\n      /* handle number */\n    } else {\n      /* handle other types */\n    }\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Hours with setUTCHours in ReScript\nDESCRIPTION: Sets a Date's hours according to UTC time. This function modifies the original Date object and returns the updated timestamp in milliseconds. Binds to JavaScript's Date.setUTCHours method.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_53\n\nLANGUAGE: res\nCODE:\n```\nlet setUTCHours: (t, float) => float\n```\n\nLANGUAGE: res\nCODE:\n```\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet nextHour = Js.Date.setUTCHours(date1, 22.0)\ndate1 == Js.Date.fromString(\"1973-11-29T22:30:54.321Z00:00\")\nnextHour == Js.Date.getTime(date1)\n```\n\n----------------------------------------\n\nTITLE: Creating UTC Date with Year and Month in ReScript\nDESCRIPTION: Function signature for utcWithYM, which returns milliseconds since epoch for a UTC date with given year and month.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_11\n\nLANGUAGE: rescript\nCODE:\n```\nlet utcWithYM: (~year: float, ~month: float, unit) => float\n```\n\n----------------------------------------\n\nTITLE: Float to String with Radix\nDESCRIPTION: Function signature for converting float to string with specified radix base.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/float.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rescript\nCODE:\n```\nlet toStringWithRadix: (float, ~radix: int) => string\n```\n\n----------------------------------------\n\nTITLE: Checking if Element Exists in Set in ReScript\nDESCRIPTION: Determines whether a string element is present in the set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-string.mdx#2025-04-18_snippet_9\n\nLANGUAGE: reasonml\nCODE:\n```\nlet has: (t, value) => bool;\n```\n\n----------------------------------------\n\nTITLE: Integer division in ReScript\nDESCRIPTION: Performs division of two integers using the / operator from Belt.Int. This is the same as the division operation from Pervasives.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/int.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nlet (/): (int, int) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nopen Belt.Int\nJs.log(4 / 2 === 2); /* true */\n```\n\n----------------------------------------\n\nTITLE: Defining Uint8ClampedArray Types in ReScript\nDESCRIPTION: Defines the element type, typed array type, and the main Uint8ClampedArray type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\ntype elt = int;\ntype typed_array('a) = Js_typed_array2.Uint8ClampedArray.typed_array('a);\ntype t = typed_array(elt);\n```\n\n----------------------------------------\n\nTITLE: Checking internal invariants in MapString module (ReScript)\nDESCRIPTION: Function to check if the internal invariants of the map data structure are maintained. Raises an exception if not.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-string.mdx#2025-04-18_snippet_37\n\nLANGUAGE: reason\nCODE:\n```\nlet checkInvariantInternal: t('a) => unit;\n```\n\n----------------------------------------\n\nTITLE: Copying Element Range with copyWithinFromRange in ReScript\nDESCRIPTION: Function signature for copyWithinFromRange that copies a range of elements from a Uint8Array to a specified position within the same array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_11\n\nLANGUAGE: rescript\nCODE:\n```\nlet copyWithinFromRange: (~to_: int, ~start: int, ~end_: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Mapping MutableQueue in ReScript\nDESCRIPTION: Function to map over the queue elements, creating a new queue with transformed elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-queue.mdx#2025-04-18_snippet_15\n\nLANGUAGE: rescript\nCODE:\n```\nlet map: (t('a), 'a => 'b) => t('b);\n```\n\n----------------------------------------\n\nTITLE: Defining hashableU function in ReScript\nDESCRIPTION: Defines a function that creates a Hashable module using uncurried hash and equality functions. It takes hash and equality functions as labeled arguments and returns a module implementing the Hashable interface.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/id.mdx#2025-04-18_snippet_13\n\nLANGUAGE: ReScript\nCODE:\n```\nlet hashableU: (~hash: (. 'a) => int, ~eq: (. 'a, 'a) => bool) =>\n  module(Belt.Id.Hashable with type t = 'a)\n```\n\n----------------------------------------\n\nTITLE: Checking if Set is Empty in ReScript\nDESCRIPTION: Returns a boolean indicating whether the set contains no elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-string.mdx#2025-04-18_snippet_7\n\nLANGUAGE: reasonml\nCODE:\n```\nlet isEmpty: t => bool;\n```\n\n----------------------------------------\n\nTITLE: Declaring makeWithYM Function for Date in ReScript\nDESCRIPTION: Declares the makeWithYM function, which creates a Date object from year and month values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rescript\nCODE:\n```\nlet makeWithYM: (~year: float, ~month: float, unit) => t\n```\n\n----------------------------------------\n\nTITLE: Type Definition for MutableSet in ReasonML\nDESCRIPTION: Type signature for the MutableSet, where 'value is the element type and 'id is the identity of the collection.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reasonml\nCODE:\n```\ntype t('value, 'id);\n```\n\n----------------------------------------\n\nTITLE: Reading 32-bit Unsigned Integer (Little Endian)\nDESCRIPTION: Gets an unsigned 32-bit integer at the specified byte offset from the start of the DataView using little-endian format.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_data-view.mdx#2025-04-18_snippet_17\n\nLANGUAGE: reasonml\nCODE:\n```\nlet getUint32LittleEndian: (t, int) => int;\n```\n\n----------------------------------------\n\nTITLE: Compiled JavaScript Output for Promise Usage\nDESCRIPTION: The JavaScript output generated from the ReScript promise usage example. It shows how ReScript code is compiled to native JavaScript promises and operations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/promise.mdx#2025-04-18_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nvar myPromise = new Promise(function (resolve, reject) {\n  return resolve(2);\n});\n\nmyPromise\n  .then(function (value) {\n    console.log(value);\n    return Promise.resolve((value + 2) | 0);\n  })\n  .then(function (value) {\n    console.log(value);\n    return Promise.resolve((value + 3) | 0);\n  })\n  .catch(function (err) {\n    console.log(\"Failure!!\", err);\n    return Promise.resolve(-2);\n  });\n```\n\n----------------------------------------\n\nTITLE: Defining Hashable module type in ReScript\nDESCRIPTION: Defines a module type for hashable data structures. It includes an identity type, a value type, and hash and equality functions that use the Belt.Id types.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/id.mdx#2025-04-18_snippet_9\n\nLANGUAGE: ReScript\nCODE:\n```\nmodule type Hashable = {\n  type identity\n\n  type t\n\n  let hash: Belt.Id.hash<t, identity>\n\n  let eq: Belt.Id.eq<t, identity>\n}\n```\n\n----------------------------------------\n\nTITLE: String Conversion for Int32Array\nDESCRIPTION: Functions to join array elements into strings with optional separators.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-32-array.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\nlet join: t => string\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet joinWith: (string, t) => string\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet toString: t => string\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet toLocaleString: t => string\n```\n\n----------------------------------------\n\nTITLE: Getting UTC Month from Date in ReScript\nDESCRIPTION: ReScript binding for JavaScript's Date.getUTCMonth method. Returns the month (0.0-11.0) for a date, evaluated in UTC.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_35\n\nLANGUAGE: res\nCODE:\n```\nlet getUTCMonth: t => float\n```\n\nLANGUAGE: res\nCODE:\n```\nJs.Date.getUTCMonth(exampleDate) == 10.0\n```\n\n----------------------------------------\n\nTITLE: Searching and Querying Int16Array in ReScript\nDESCRIPTION: Functions to search for elements, check for inclusion, and find indices in Int16Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_int-16-array.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet includes: (elt, t) => bool;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet indexOf: (elt, t) => int;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet lastIndexOf: (elt, t) => int;\n```\n\n----------------------------------------\n\nTITLE: Retrieving UTC Seconds in ReScript\nDESCRIPTION: The getUTCSeconds function returns the seconds for a Date object, evaluated in UTC. It binds to JavaScript's Date.getUTCSeconds method.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_38\n\nLANGUAGE: res\nCODE:\n```\nlet getUTCSeconds: t => float\n```\n\nLANGUAGE: res\nCODE:\n```\nJs.Date.getUTCSeconds(exampleDate) == 54.0\n```\n\n----------------------------------------\n\nTITLE: Finding minimum key-value pair in MapString module (ReScript)\nDESCRIPTION: Function to find the key-value pair with the minimum key in a map, returning an option type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-string.mdx#2025-04-18_snippet_29\n\nLANGUAGE: reason\nCODE:\n```\nlet minimum: t('v) => option((key, 'v));\n```\n\n----------------------------------------\n\nTITLE: Stack Trace Accessor\nDESCRIPTION: Function signature for accessing the stack trace of an exception.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/exn.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet stack: t => option<string>\n```\n\n----------------------------------------\n\nTITLE: Map Function Over Float32Array Elements with Index\nDESCRIPTION: Creates a new typed array with the results of calling the provided function on every element in the Float32Array, passing the element index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-32-array.mdx#2025-04-18_snippet_43\n\nLANGUAGE: rescript\nCODE:\n```\nlet mapi: ((. elt, int) => 'b, t) => typed_array('b);\n```\n\n----------------------------------------\n\nTITLE: While Loop in ReScript\nDESCRIPTION: Demonstrates the basic syntax of while loops in ReScript, which execute a code block as long as a condition remains true. The syntax is similar to JavaScript's while loop.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/control-flow.mdx#2025-04-18_snippet_8\n\nLANGUAGE: res\nCODE:\n```\nwhile testCondition {\n  // body here\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nwhile (testCondition) {\n  // body here\n}\n```\n\n----------------------------------------\n\nTITLE: Array Properties and Metadata\nDESCRIPTION: Methods for accessing array metadata like length and byte information\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet byteLength: t => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet byteOffset: t => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet length: t => int\n```\n\n----------------------------------------\n\nTITLE: Array Iteration Methods\nDESCRIPTION: Functions for iterating over array elements to test conditions or perform operations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_8\n\nLANGUAGE: res\nCODE:\n```\nlet every: ((. elt) => bool, t) => bool\n```\n\nLANGUAGE: res\nCODE:\n```\nlet everyi: ((. elt, int) => bool, t) => bool\n```\n\nLANGUAGE: res\nCODE:\n```\nlet filter: ((. elt) => bool, t) => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet filteri: ((. elt, int) => bool, t) => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet find: ((. elt) => bool, t) => Js.undefined<elt>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet findi: ((. elt, int) => bool, t) => Js.undefined<elt>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet findIndex: ((. elt) => bool, t) => int\n```\n\nLANGUAGE: res\nCODE:\n```\nlet findIndexi: ((. elt, int) => bool, t) => int\n```\n\nLANGUAGE: res\nCODE:\n```\nlet forEach: ((. elt) => unit, t) => unit\n```\n\nLANGUAGE: res\nCODE:\n```\nlet forEachi: ((. elt, int) => unit, t) => unit\n```\n\n----------------------------------------\n\nTITLE: Array Properties and Metadata\nDESCRIPTION: Functions for accessing array metadata like byte length, offset and total length.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reasonml\nCODE:\n```\nlet byteLength: t => int;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet byteOffset: t => int;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet length: t => int;\n```\n\n----------------------------------------\n\nTITLE: Creating UTC Date with Year, Month, and Day in ReScript\nDESCRIPTION: Function signature for utcWithYMD, which returns milliseconds since epoch for a UTC date with given year, month, and day.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_12\n\nLANGUAGE: rescript\nCODE:\n```\nlet utcWithYMD: (~year: float, ~month: float, ~date: float, unit) => float\n```\n\n----------------------------------------\n\nTITLE: Reading a Uint32 value with little-endian format in ReScript\nDESCRIPTION: Function signature for getting an unsigned 32-bit integer from the specified byte offset with little-endian format.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_data-view.mdx#2025-04-18_snippet_17\n\nLANGUAGE: rescript\nCODE:\n```\nlet getUint32LittleEndian: (t, int) => int\n```\n\n----------------------------------------\n\nTITLE: Set Utility Operations\nDESCRIPTION: Utility functions for accessing set properties and converting sets to other data structures.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/set-int.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet size: t => int\nlet toList: t => list<value>\nlet toArray: t => array<value>\nlet minimum: t => option<value>\nlet maximum: t => option<value>\nlet get: (t, value) => option<value>\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Undefined Value in ReScript\nDESCRIPTION: Iterates over the contained value with the given function. If Js.undefined('a) contains a value, it's unwrapped and applied to the function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/undefined.mdx#2025-04-18_snippet_8\n\nLANGUAGE: reasonml\nCODE:\n```\nlet iter: (t('a), (. 'a) => unit) => unit;\n```\n\n----------------------------------------\n\nTITLE: Mapping values with uncurried function in MapString module (ReScript)\nDESCRIPTION: Uncurried function to transform all values in a map using a function, keeping the keys unchanged.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-string.mdx#2025-04-18_snippet_51\n\nLANGUAGE: reason\nCODE:\n```\nlet mapU: (t('v), [@bs] ('v => 'v2)) => t('v2);\n```\n\n----------------------------------------\n\nTITLE: UInt32Array Constants in ReScript\nDESCRIPTION: Constant values related to the UInt32Array implementation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-32-array.mdx#2025-04-18_snippet_13\n\nLANGUAGE: res\nCODE:\n```\nlet _BYTES_PER_ELEMENT: int\n```\n\n----------------------------------------\n\nTITLE: Removing multiple keys from map in MapString module (ReScript)\nDESCRIPTION: Function to remove multiple keys and their associated values from a map, returning a new map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-string.mdx#2025-04-18_snippet_39\n\nLANGUAGE: reason\nCODE:\n```\nlet removeMany: (t('v), array(key)) => t('v);\n```\n\n----------------------------------------\n\nTITLE: Creating Uint8Array from Array\nDESCRIPTION: Creates a new Uint8Array from a regular array of elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_51\n\nLANGUAGE: rescript\nCODE:\n```\nlet make: array<elt> => t\n```\n\n----------------------------------------\n\nTITLE: Create Float32Array from Array-Like Object\nDESCRIPTION: Creates a new Float32Array from an array-like object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-32-array.mdx#2025-04-18_snippet_56\n\nLANGUAGE: rescript\nCODE:\n```\nlet from: Js_typed_array2.array_like(elt) => t;\n```\n\n----------------------------------------\n\nTITLE: Test Function Signature in ReScript\nDESCRIPTION: Function signature for testing nullable values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/nullable.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet test: t<'a> => bool\n```\n\n----------------------------------------\n\nTITLE: Setting array values with offset in Uint8ClampedArray\nDESCRIPTION: Sets values in the Uint8ClampedArray from a source array starting at the specified offset.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_7\n\nLANGUAGE: res\nCODE:\n```\nlet setArrayOffset: (array<elt>, int, t) => unit\n```\n\n----------------------------------------\n\nTITLE: Copying TypedArray in ReScript\nDESCRIPTION: Function signature for creating a copy of a Uint8ClampedArray.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_26\n\nLANGUAGE: res\nCODE:\n```\nlet copy: t => t\n```\n\n----------------------------------------\n\nTITLE: Filtering a set in ReScript\nDESCRIPTION: Creates a new set containing only elements that satisfy the given predicate function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-int.mdx#2025-04-18_snippet_26\n\nLANGUAGE: reason\nCODE:\n```\nlet keep: (t, value => bool) => t;\n```\n\n----------------------------------------\n\nTITLE: Testing Null_undefined Value in ReScript\nDESCRIPTION: Function signature for 'test', which likely checks if a Js.null_undefined('a) value is null or undefined.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/null-undefined.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet test: t<'a> => bool\n```\n\n----------------------------------------\n\nTITLE: Undefined Value Definition in ReScript\nDESCRIPTION: Function signature for the undefined value of nullable type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/nullable.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet undefined: t<'a>\n```\n\n----------------------------------------\n\nTITLE: Iterating MutableStack with Curried Function in ReScript\nDESCRIPTION: Function signature for iterating over the stack elements using a curried function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-stack.mdx#2025-04-18_snippet_12\n\nLANGUAGE: ReScript\nCODE:\n```\nlet forEach: (t<'a>, 'a => unit) => unit\n```\n\n----------------------------------------\n\nTITLE: Creating Uint8Array from ArrayBuffer with fromBuffer in ReScript\nDESCRIPTION: Function signature for fromBuffer that creates a new Uint8Array using an existing ArrayBuffer as its storage.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_52\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromBuffer: Js_typed_array2.array_buffer => t\n```\n\n----------------------------------------\n\nTITLE: Finding first index of element in Uint8ClampedArray\nDESCRIPTION: Returns the first index at which a given element can be found in the array, or -1 if not present.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_19\n\nLANGUAGE: res\nCODE:\n```\nlet indexOf: (elt, t) => int\n```\n\n----------------------------------------\n\nTITLE: Getting Storage Length in ReScript\nDESCRIPTION: External binding to get the number of items in storage.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/dom/storage2.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nexternal length: t => int = \"length\"\n```\n\n----------------------------------------\n\nTITLE: Setting Key-Value Pair in ReScript MapInt Module\nDESCRIPTION: Function signature for setting a key-value pair in the map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-int.mdx#2025-04-18_snippet_40\n\nLANGUAGE: rescript\nCODE:\n```\nlet set: (t<'v>, key, 'v) => t<'v>\n```\n\n----------------------------------------\n\nTITLE: Defining ArrayBuffer Type in ReScript\nDESCRIPTION: Defines the type alias for JavaScript's ArrayBuffer using ReScript's type system.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array-2_array-buffer.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype t = Js_typed_array2.array_buffer\n```\n\n----------------------------------------\n\nTITLE: Stable Sort Function Signature\nDESCRIPTION: Function signature for performing a stable sort that returns a new sorted array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/sort-array-int.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet stableSort: array<element> => array<element>\n```\n\n----------------------------------------\n\nTITLE: ForwardRef Migration Example\nDESCRIPTION: Example of migrating React.forwardRef implementation from v3 to v4\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/migrate-react.mdx#2025-04-18_snippet_7\n\nLANGUAGE: res\nCODE:\n```\nmodule FancyInput = {\n  @react.component\n  let make = React.forwardRef((\n    ~className=?,\n    ~children,\n    ref,\n  ) =>\n    <div>\n      <input\n        type_=\"text\"\n        ?className\n        ref=?{ref->Nullable.toOption->Option.map(ReactDOM.Ref.domRef)}\n      />\n      children\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Find Index of Value Starting from Position\nDESCRIPTION: Returns the first index at which a given element can be found in the array, starting from the specified index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-64-array.mdx#2025-04-18_snippet_20\n\nLANGUAGE: reason\nCODE:\n```\nlet indexOfFrom: (elt, ~from: int, t) => int;\n```\n\n----------------------------------------\n\nTITLE: HypotMany Function in ReScript\nDESCRIPTION: Returns the square root of the sum of squares of the numbers in the array argument (generalized Pythagorean equation).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/math.mdx#2025-04-18_snippet_42\n\nLANGUAGE: rescript\nCODE:\n```\nlet hypotMany: array(float) => float;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.Math.hypotMany([|3.0, 4.0, 12.0|]) == 13.0;\n```\n\n----------------------------------------\n\nTITLE: ForEach Operations for Float64Array\nDESCRIPTION: Functions to execute a provided function once for each element in a Float64Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-64-array.mdx#2025-04-18_snippet_19\n\nLANGUAGE: rescript\nCODE:\n```\nlet forEach: ((. elt) => unit, t) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet forEachi: ((. elt, int) => unit, t) => unit\n```\n\n----------------------------------------\n\nTITLE: Search and Comparison Functions for Uint8Array\nDESCRIPTION: Functions to search for elements in a Uint8Array, including ES2016's includes method.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_8\n\nLANGUAGE: res\nCODE:\n```\nlet includes: (elt, t) => bool\n```\n\nLANGUAGE: res\nCODE:\n```\nlet indexOf: (elt, t) => int\n```\n\nLANGUAGE: res\nCODE:\n```\nlet indexOfFrom: (elt, ~from: int, t) => int\n```\n\nLANGUAGE: res\nCODE:\n```\nlet lastIndexOf: (elt, t) => int\n```\n\nLANGUAGE: res\nCODE:\n```\nlet lastIndexOfFrom: (elt, ~from: int, t) => int\n```\n\n----------------------------------------\n\nTITLE: Filling UInt32Array range\nDESCRIPTION: Defines a function that fills a range of elements of the array with a given value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_14\n\nLANGUAGE: rescript\nCODE:\n```\nlet fillRangeInPlace: (elt, ~start: int, ~end_: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Comparing two string sets in ReScript\nDESCRIPTION: Provides a total ordering between sets, comparing size first and then iterating over elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set-string.mdx#2025-04-18_snippet_15\n\nLANGUAGE: rescript\nCODE:\n```\nlet cmp: (t, t) => int\n```\n\n----------------------------------------\n\nTITLE: Checking if RegExp has Multiline Flag\nDESCRIPTION: Function that returns a boolean indicating whether the multiline flag is set on the RegExp object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/re.mdx#2025-04-18_snippet_13\n\nLANGUAGE: reason\nCODE:\n```\nlet multiline: t => bool;\n```\n\n----------------------------------------\n\nTITLE: Setting Hours, Minutes, Seconds and Milliseconds in ReScript\nDESCRIPTION: Sets a Date's hours, minutes, seconds, and milliseconds according to current time zone. Returns milliseconds since epoch for the updated Date. Modifies the original Date.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_45\n\nLANGUAGE: rescript\nCODE:\n```\nlet setHoursMSMs: (\n  t,\n  ~hours: float,\n  ~minutes: float,\n  ~seconds: float,\n  ~milliseconds: float,\n  unit,\n) => float\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet futureTime = Js.Date.setHoursMSMs(\n  date1,\n  ~hours=22.0,\n  ~minutes=46.0,\n  ~seconds=37.0,\n  ~milliseconds=494.0,\n  (),\n)\ndate1 == Js.Date.fromString(\"1973-11-29T22:46:37.494Z00:00\")\nfutureTime == Js.Date.getTime(date1)\n```\n\n----------------------------------------\n\nTITLE: Importing Dynamic Component in Next.js for ReScript Configuration Schema\nDESCRIPTION: Dynamically imports the Docson component with Next.js dynamic import functionality. The component is loaded client-side (with ssr: false) to display the ReScript build configuration schema documentation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/build-configuration-schema.mdx#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport dynamic from \"next/dynamic\";\n\nexport const Docson = dynamic(\n  () =>\n    import(\"src/components/Docson\").then((comp) => {\n      return comp.make;\n    }),\n  {\n    ssr: false,\n    loading: () => <div> Loading... </div>,\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Getting Byte Offset of Uint8Array\nDESCRIPTION: Returns the offset in bytes from the start of the ArrayBuffer.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet byteOffset: t => int\n```\n\n----------------------------------------\n\nTITLE: Basic Array Operations\nDESCRIPTION: Essential array operations including unsafe get/set, buffer access, and length operations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_int-32-array.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet unsafe_get: (t, int) => elt\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet unsafe_set: (t, int, elt) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet buffer: t => Js_typed_array2.array_buffer\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet byteLength: t => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet byteOffset: t => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet length: t => int\n```\n\n----------------------------------------\n\nTITLE: Sort Float32Array with Comparator\nDESCRIPTION: Sorts the elements of the Float32Array in-place using a custom comparator function and returns the modified array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_17\n\nLANGUAGE: rescript\nCODE:\n```\nlet sortInPlaceWith: ((. elt, elt) => int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Merging multiple key-value pairs into a HashMap with integer keys in ReScript\nDESCRIPTION: Adds multiple key-value pairs to an existing hash map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-map-int.mdx#2025-04-18_snippet_21\n\nLANGUAGE: reason\nCODE:\n```\nlet mergeMany: (t('a), array((key, 'a))) => unit;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet hMap = Belt.HashMap.Int.make(~hintSize=10);\nBelt.HashMap.Int.mergeMany(hMap, [|(1, \"value1\"), (2, \"value2\")|]);\n```\n\n----------------------------------------\n\nTITLE: Converting Option Bool using Expanded Pattern Matching\nDESCRIPTION: Third iteration using more explicit pattern matching cases. More linear and clearer but still not the most concise solution.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_23\n\nLANGUAGE: rescript\nCODE:\n```\nlet optionBoolToBool = opt => {\n  switch opt {\n  | None => false\n  | Some(true) => true\n  | Some(false) => false\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction optionBoolToBool(opt) {\n  if (opt !== undefined && opt) {\n    return true;\n  } else {\n    return false;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining array_buffer Type in ReScript TypedArray\nDESCRIPTION: Defines the array_buffer type which represents JavaScript's ArrayBuffer objects that are used to store fixed-length binary data.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype array_buffer\n```\n\n----------------------------------------\n\nTITLE: Defining Int16Array Types in ReScript\nDESCRIPTION: Defines the basic types for Int16Array, including the element type, the typed array type, and the main type t.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_int-16-array.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype elt = int;\ntype typed_array('a) = Js_typed_array2.Int16Array.typed_array('a);\ntype t = typed_array(elt);\n```\n\n----------------------------------------\n\nTITLE: Copying within UInt32Array\nDESCRIPTION: Defines a function that copies a sequence of elements within the array to another position, returning the modified array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\nlet copyWithin: (~to_: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: JSON Tagged Type Definition\nDESCRIPTION: Tagged union type defining different JSON value variants\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/json.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\ntype tagged_t =\n  | JSONFalse\n  | JSONTrue\n  | JSONNull\n  | JSONString(string)\n  | JSONNumber(float)\n  | JSONObject(Js_dict.t<t>)\n  | JSONArray(array<t>)\n```\n\n----------------------------------------\n\nTITLE: Vector Empty Operation\nDESCRIPTION: Operation to empty a vector.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/vector.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nlet empty: t<'a> => unit\n```\n\n----------------------------------------\n\nTITLE: Set Value Functions\nDESCRIPTION: Functions to set values of different numeric types in the DataView, with both big-endian and little-endian variants\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_data-view.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet setInt8: (t, int, int) => unit\n\nlet setUint8: (t, int, int) => unit\n\nlet setInt16: (t, int, int) => unit\n\nlet setInt16LittleEndian: (t, int, int) => unit\n\nlet setUint16: (t, int, int) => unit\n\nlet setUint16LittleEndian: (t, int, int) => unit\n\nlet setInt32: (t, int, int) => unit\n\nlet setInt32LittleEndian: (t, int, int) => unit\n\nlet setUint32: (t, int, int) => unit\n\nlet setUint32LittleEndian: (t, int, int) => unit\n\nlet setFloat32: (t, int, float) => unit\n\nlet setFloat32LittleEndian: (t, int, float) => unit\n\nlet setFloat64: (t, int, float) => unit\n\nlet setFloat64LittleEndian: (t, int, float) => unit\n```\n\n----------------------------------------\n\nTITLE: Structural Sharing with Polymorphic Variants in ReScript\nDESCRIPTION: Demonstrates how polymorphic variants enable structural typing, allowing values of different poly variant types to be used together if they share common constructors.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/polymorphic-variant.mdx#2025-04-18_snippet_8\n\nLANGUAGE: res\nCODE:\n```\ntype preferredColors = [#white | #blue]\n\nlet myColor: preferredColors = #blue\n\nlet displayColor = v => {\n  switch v {\n  | #red => \"Hello red\"\n  | #green => \"Hello green\"\n  | #white => \"Hey white!\"\n  | #blue => \"Hey blue!\"\n  }\n}\n\nConsole.log(displayColor(myColor))\n```\n\nLANGUAGE: js\nCODE:\n```\nvar myColor = \"blue\";\n\nfunction displayColor(v) {\n  if (v === \"white\") {\n    return \"Hey white!\";\n  } else if (v === \"red\") {\n    return \"Hello red\";\n  } else if (v === \"green\") {\n    return \"Hello green\";\n  } else {\n    return \"Hey blue!\";\n  }\n}\n\nconsole.log(displayColor(\"blue\"));\n```\n\n----------------------------------------\n\nTITLE: Character Type in ReScript\nDESCRIPTION: Demonstration of the char type in ReScript, which represents a single character. Note that Char doesn't support Unicode or UTF-8.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/primitive-types.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\nlet firstLetterOfAlphabet = 'a'\n```\n\nLANGUAGE: js\nCODE:\n```\nvar firstLetterOfAlphabet = /* \"a\" */97;\n```\n\n----------------------------------------\n\nTITLE: Converting Option Bool using Wildcard Pattern Matching\nDESCRIPTION: Fourth iteration using a wildcard pattern. More concise but loses exhaustiveness checking, which is not recommended.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_24\n\nLANGUAGE: rescript\nCODE:\n```\nlet optionBoolToBool = opt => {\n  switch opt {\n  | Some(true) => true\n  | _ => false\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction optionBoolToBool(opt) {\n  if (opt !== undefined && opt) {\n    return true;\n  } else {\n    return false;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking All Elements with Uncurried Function in ReScript MutableSetString\nDESCRIPTION: Tests whether all elements satisfy an uncurried predicate function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_24\n\nLANGUAGE: reason\nCODE:\n```\nlet everyU: (t, [@bs] (value => bool)) => bool;\n```\n\n----------------------------------------\n\nTITLE: Getting Raw Set Data\nDESCRIPTION: Advanced function that returns the raw data detached from comparator while maintaining type manifestation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set.mdx#2025-04-18_snippet_41\n\nLANGUAGE: reason\nCODE:\n```\nlet getData: t('value, 'id) => Belt_SetDict.t('value, 'id);\n```\n\n----------------------------------------\n\nTITLE: Filling TypedArray Range with Value in ReScript\nDESCRIPTION: Function signature for filling a range of a Uint8ClampedArray with a specified value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_14\n\nLANGUAGE: res\nCODE:\n```\nlet fillRangeInPlace: (elt, ~start: int, ~end_: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Array Element Testing (some) in ReScript\nDESCRIPTION: Function that tests if any element in an array satisfies a predicate function. Returns true if predicate returns true for any element.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/array-2.mdx#2025-04-18_snippet_19\n\nLANGUAGE: reasonml\nCODE:\n```\nlet some: (t('a), 'a => bool) => bool;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet isEven = (x) => {x mod 2 == 0};\n\nJs.Array2.some([|3, 7, 5, 2, 9|], isEven) == true;\nJs.Array2.some([|3, 7, 5, 1, 9|], isEven) == false;\n```\n\n----------------------------------------\n\nTITLE: Array Construction Functions\nDESCRIPTION: Functions for creating new Uint16Array instances from various sources.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet make: array<elt> => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromBuffer: Js_typed_array.array_buffer => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromBufferOffset: (Js_typed_array.array_buffer, int) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromBufferRange: (Js_typed_array.array_buffer, ~offset: int, ~length: int) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromLength: int => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet from: Js_typed_array.array_like<elt> => t\n```\n\n----------------------------------------\n\nTITLE: Disabling a Specific Warning in ReScript\nDESCRIPTION: This example demonstrates how to use the @@warning decorator to disable warning number 27 for the current module in ReScript. The decorator takes a string parameter with a plus or minus prefix to enable or disable warnings respectively.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/decorator_module_warning.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\n// Disables warning 27 for the current module\n@@warning(\"-27\")\n```\n\nLANGUAGE: js\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Getting Map Size in ReScript MapInt Module\nDESCRIPTION: Function signature for getting the number of key-value pairs in the map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-int.mdx#2025-04-18_snippet_19\n\nLANGUAGE: rescript\nCODE:\n```\nlet size: t<'v> => int\n```\n\n----------------------------------------\n\nTITLE: Array Manipulation Methods\nDESCRIPTION: Methods for manipulating array contents including copying, filling, reversing and sorting\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reason\nCODE:\n```\nlet copyWithin: (~to_: int, t) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet fillInPlace: (elt, t) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet reverseInPlace: t => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet sortInPlace: t => t;\n```\n\n----------------------------------------\n\nTITLE: Defining ArrayBuffer Type in ReScript\nDESCRIPTION: Defines the type 't' as an alias for Js_typed_array.array_buffer, representing a JavaScript ArrayBuffer in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_array-buffer.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\ntype t = Js_typed_array.array_buffer;\n```\n\n----------------------------------------\n\nTITLE: Type Definitions - ReScript MutableMap\nDESCRIPTION: Core type definitions for MutableMap including the map type and id type for comparable keys\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-map.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\ntype t('k, 'v, 'id);\ntype id('key, 'id) = Belt_Id.comparable('key, 'id);\n```\n\n----------------------------------------\n\nTITLE: HashSet Creation - ReScript\nDESCRIPTION: Creates a new HashSet with a specified initial size hint for optimization.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-set-int.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet make: (~hintSize: int) => t\n```\n\n----------------------------------------\n\nTITLE: Mapping Array Elements with Index\nDESCRIPTION: Function signature to create a new array with results of calling a function on every element with its index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_43\n\nLANGUAGE: res\nCODE:\n```\nlet mapi: ((. elt, int) => 'b, t) => typed_array<'b>\n```\n\n----------------------------------------\n\nTITLE: Finding Element Index with findIndex\nDESCRIPTION: Function signature to find the index of the first element in the Int8Array that satisfies a provided test function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_38\n\nLANGUAGE: res\nCODE:\n```\nlet findIndex: ((. elt) => bool, t) => int\n```\n\n----------------------------------------\n\nTITLE: Integer to Precision String Conversion in ReScript\nDESCRIPTION: Formats an integer to string using full precision formatting rules. Differs from toFixed by including all precision digits.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/int.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\n/* prints \"123456789\" */\nJs.log(Js.Int.toPrecision(123456789))\n```\n\n----------------------------------------\n\nTITLE: Partition MutableSet - ReScript\nDESCRIPTION: Splits the set into two sets based on a predicate function. Returns a tuple of sets where the first contains elements satisfying the predicate and the second contains the rest.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet partitionU: (t<'value, 'id>, (. 'value) => bool) => (t<'value, 'id>, t<'value, 'id>)\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet partition: (t<'value, 'id>, 'value => bool) => (t<'value, 'id>, t<'value, 'id>)\n```\n\nLANGUAGE: rescript\nCODE:\n```\nmodule IntCmp = Belt.Id.MakeComparable({\n  type t = int\n  let cmp = Pervasives.compare\n})\n\nlet isOdd = x => mod(x, 2) != 0\n\nlet s0 = Belt.MutableSet.fromArray([1, 2, 3, 4, 5], ~id=module(IntCmp))\nlet (s1, s2) = s0->Belt.MutableSet.partition(isOdd)\n\ns1->Belt.MutableSet.toArray /* [1,3,5] */\ns2->Belt.MutableSet.toArray /* [2,4] */\n```\n\n----------------------------------------\n\nTITLE: Defining Set Type in ReScript\nDESCRIPTION: Defines the abstract type for sets of strings.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-string.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reasonml\nCODE:\n```\ntype t;\n```\n\n----------------------------------------\n\nTITLE: Map Key Operations\nDESCRIPTION: Functions for finding minimum and maximum keys in the map\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-map-int.mdx#2025-04-18_snippet_6\n\nLANGUAGE: reasonml\nCODE:\n```\nlet minKey: t('a) => option(key);\n\nlet minKeyUndefined: t('a) => Js.undefined(key);\n\nlet maxKey: t('a) => option(key);\n\nlet maxKeyUndefined: t('a) => Js.undefined(key);\n```\n\n----------------------------------------\n\nTITLE: Finding Last Element Index from Position with lastIndexOfFrom in ReScript\nDESCRIPTION: Function signature for lastIndexOfFrom that searches backwards for an element in a Uint8Array starting from a specified index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_24\n\nLANGUAGE: rescript\nCODE:\n```\nlet lastIndexOfFrom: (elt, ~from: int, t) => int\n```\n\n----------------------------------------\n\nTITLE: Comparing Maps with Curried Function in ReScript MapInt Module\nDESCRIPTION: Function signature for comparing two maps using a curried comparison function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-int.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet cmp: (t<'v>, t<'v>, ('v, 'v) => int) => int\n```\n\n----------------------------------------\n\nTITLE: Merging multiple key-value pairs into MapDict\nDESCRIPTION: Function signature for merging an array of key-value pairs into a map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_46\n\nLANGUAGE: reason\nCODE:\n```\nlet mergeMany: (t('a, 'b, 'id), array(('a, 'b)), ~cmp: cmp('a, 'id)) => t('a, 'b, 'id);\n```\n\n----------------------------------------\n\nTITLE: Float NaN Declaration\nDESCRIPTION: Declaration for Not a Number special float value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/float.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nlet _NaN: float\n```\n\n----------------------------------------\n\nTITLE: Removing elements from MapDict in ReScript\nDESCRIPTION: Functions to remove single or multiple elements from a MapDict.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_18\n\nLANGUAGE: ReScript\nCODE:\n```\nlet remove: (t<'a, 'b, 'id>, 'a, ~cmp: cmp<'a, 'id>) => t<'a, 'b, 'id>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet removeMany: (t<'a, 'b, 'id>, array<'a>, ~cmp: cmp<'a, 'id>) => t<'a, 'b, 'id>\n```\n\n----------------------------------------\n\nTITLE: Map Array Elements\nDESCRIPTION: Creates a new array with the results of calling the provided function on every element.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-64-array.mdx#2025-04-18_snippet_42\n\nLANGUAGE: reason\nCODE:\n```\nlet map: ((. elt) => 'b, t) => typed_array('b);\n```\n\n----------------------------------------\n\nTITLE: Multiplying Floating Point Numbers in ReScript\nDESCRIPTION: This example demonstrates how to use the floating point multiplication operator (*.) to multiply two floating point numbers in ReScript. The operator takes two float operands and returns their product as a float.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/operators_float_multiplication.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\nlet result = 1.5 *. 2.3\n```\n\nLANGUAGE: js\nCODE:\n```\nvar result = 1.5 * 2.3;\n```\n\n----------------------------------------\n\nTITLE: String Character At Position\nDESCRIPTION: Function signature for getting a character at a specific position in a string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/string-2.mdx#2025-04-18_snippet_8\n\nLANGUAGE: res\nCODE:\n```\nlet charAt: (t, int) => t\n```\n\n----------------------------------------\n\nTITLE: Converting HashSetString to array\nDESCRIPTION: Returns an array containing all elements from the HashSetString.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-set-string.mdx#2025-04-18_snippet_15\n\nLANGUAGE: rescript\nCODE:\n```\nlet toArray: t => array(key);\n```\n\n----------------------------------------\n\nTITLE: Setting TypedArray Elements with unsafe_set in ReScript\nDESCRIPTION: Function signature for setting an element in a Uint8ClampedArray at a specific index without bounds checking.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nlet unsafe_set: (t, int, elt) => unit\n```\n\n----------------------------------------\n\nTITLE: Create Copy of Float32Array\nDESCRIPTION: Creates a new Float32Array with the same elements as the given array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_26\n\nLANGUAGE: rescript\nCODE:\n```\nlet copy: t => t\n```\n\n----------------------------------------\n\nTITLE: ByteLength Getter Signature\nDESCRIPTION: Function signature for retrieving the length in bytes of an ArrayBuffer.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_array-buffer.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet byteLength: t => int\n```\n\n----------------------------------------\n\nTITLE: Defining MutableQueue Type in ReScript\nDESCRIPTION: Defines the type 't' for queues containing elements of type 'a'. This is the core type definition for the MutableQueue module.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-queue.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype t<'a>\n```\n\n----------------------------------------\n\nTITLE: Converting Array to String in ReScript\nDESCRIPTION: Converts an array to a string by joining elements with commas. Each element is converted to a string using JavaScript's conversion rules. All elements in a ReasonML array must have the same type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/array.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\nlet toString: t<'a> => string\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.Array.toString([3.5, 4.6, 7.8]) == \"3.5,4.6,7.8\"\nJs.Array.toString([\"a\", \"b\", \"c\"]) == \"a,b,c\"\n```\n\n----------------------------------------\n\nTITLE: Searching and Joining UInt32Array in ReScript\nDESCRIPTION: Functions for finding elements, joining array elements, and creating subarrays.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_5\n\nLANGUAGE: ReScript\nCODE:\n```\nlet indexOf: (elt, t) => int\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet indexOfFrom: (elt, ~from: int, t) => int\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet join: t => string\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet joinWith: (string, t) => string\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet lastIndexOf: (elt, t) => int\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet lastIndexOfFrom: (elt, ~from: int, t) => int\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet slice: (~start: int, ~end_: int, t) => t\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet copy: t => t\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet sliceFrom: (int, t) => t\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet subarray: (~start: int, ~end_: int, t) => t\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet subarrayFrom: (int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Checking key existence and comparing maps in ReScript\nDESCRIPTION: Functions for checking if a key exists in a map and comparing two maps.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-string.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nlet has: (t<'v>, key) => bool\n```\n\nLANGUAGE: res\nCODE:\n```\nlet cmpU: (t<'v>, t<'v>, (. 'v, 'v) => int) => int\n```\n\nLANGUAGE: res\nCODE:\n```\nlet cmp: (t<'v>, t<'v>, ('v, 'v) => int) => int\n```\n\nLANGUAGE: res\nCODE:\n```\nlet eqU: (t<'v>, t<'v>, (. 'v, 'v) => bool) => bool\n```\n\nLANGUAGE: res\nCODE:\n```\nlet eq: (t<'v>, t<'v>, ('v, 'v) => bool) => bool\n```\n\n----------------------------------------\n\nTITLE: Converting Null_undefined to Option in ReScript\nDESCRIPTION: Function signature for 'toOption', which maps Js.null_undefined('a) to option('a). Non-null/undefined values become Some(a), while null and undefined become None.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/null-undefined.mdx#2025-04-18_snippet_12\n\nLANGUAGE: rescript\nCODE:\n```\nlet toOption: t<'a> => option<'a>\n```\n\n----------------------------------------\n\nTITLE: Slicing an ArrayBuffer from a start index in ReScript\nDESCRIPTION: Function signature for creating a new ArrayBuffer by slicing an existing one from the specified start index to the end of the buffer.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_array-buffer.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet sliceFrom: (int, t) => Js_typed_array.array_buffer\n```\n\n----------------------------------------\n\nTITLE: Integer addition in ReScript\nDESCRIPTION: Performs addition of two integers using the + operator from Belt.Int. This is the same as the addition operation from Pervasives.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/int.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet (+): (int, int) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nopen Belt.Int\nJs.log(2 + 2 === 4) /* true */\n```\n\n----------------------------------------\n\nTITLE: Create Subarray with Range\nDESCRIPTION: Returns a new typed array that shares the same ArrayBuffer but with a different range of elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-64-array.mdx#2025-04-18_snippet_28\n\nLANGUAGE: reason\nCODE:\n```\nlet subarray: (~start: int, ~end_: int, t) => t;\n```\n\n----------------------------------------\n\nTITLE: Array Setting Operations for Float64Array\nDESCRIPTION: Functions for setting multiple elements in a Float64Array from a regular array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-64-array.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet setArray: (array<elt>, t) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet setArrayOffset: (array<elt>, int, t) => unit\n```\n\n----------------------------------------\n\nTITLE: Alternative JavaScript Binding Approach\nDESCRIPTION: Shows how to bind JavaScript functions that accept multiple types using separate external bindings instead of variants.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/variant.mdx#2025-04-18_snippet_24\n\nLANGUAGE: rescript\nCODE:\n```\n@module(\"myLibrary\") external drawFloat: float => unit = \"draw\"\n@module(\"myLibrary\") external drawString: string => unit = \"draw\"\n```\n\n----------------------------------------\n\nTITLE: Finding Element Index with indexOf in ReScript\nDESCRIPTION: Function signature for indexOf that returns the first index at which a given element can be found in a Uint8Array, or -1 if not found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_19\n\nLANGUAGE: rescript\nCODE:\n```\nlet indexOf: (elt, t) => int\n```\n\n----------------------------------------\n\nTITLE: Checking all elements with curried predicate in ReScript\nDESCRIPTION: Function signature for checking if all elements in a mutable map satisfy a curried predicate. The application order is unspecified.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_15\n\nLANGUAGE: ReScript\nCODE:\n```\nlet every: (t<'a>, (key, 'a) => bool) => bool\n```\n\n----------------------------------------\n\nTITLE: Unsafe Element Setting in TypedArray\nDESCRIPTION: Sets an element at the specified index without bounds checking.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_type-s.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nlet unsafe_set: (t, int, elt) => unit\n```\n\n----------------------------------------\n\nTITLE: Defining DataView Type in ReScript\nDESCRIPTION: Defines the abstract type t that represents a JavaScript DataView object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_data-view.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reasonml\nCODE:\n```\ntype t;\n```\n\n----------------------------------------\n\nTITLE: Array Search and Conversion Methods\nDESCRIPTION: Methods for searching elements and converting arrays to strings\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reason\nCODE:\n```\nlet includes: (elt, t) => bool;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet indexOf: (elt, t) => int;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet indexOfFrom: (elt, ~from: int, t) => int;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet join: t => string;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet joinWith: (string, t) => string;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet toString: t => string;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet toLocaleString: t => string;\n```\n\n----------------------------------------\n\nTITLE: Filling Array with Value\nDESCRIPTION: Function signature to fill the entire array with a specified value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_12\n\nLANGUAGE: res\nCODE:\n```\nlet fillInPlace: (elt, t) => t\n```\n\n----------------------------------------\n\nTITLE: Checking Belt.Set Emptiness in ReScript\nDESCRIPTION: Shows how to create empty and non-empty sets and check their emptiness using Belt.Set.isEmpty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet empty = Belt.Set.fromArray([], ~id=module(IntCmp))\nlet notEmpty = Belt.Set.fromArray([1],~id=module(IntCmp))\n\nBelt.Set.isEmpty(empty) /* true */\nBelt.Set.isEmpty(notEmpty) /* false */\n```\n\n----------------------------------------\n\nTITLE: Map Type Definition - ReScript\nDESCRIPTION: Core type definition for the Map module representing a generic immutable map with key, value and identity types.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\ntype t<'key, 'value, 'identity>\n```\n\n----------------------------------------\n\nTITLE: ReScript Standard Library Functions Requiring TypedArray Polyfill\nDESCRIPTION: List of ReScript standard library functions that require TypedArray polyfill support in older browsers. These functions handle bit-level operations and float conversions for Int32 and Int64 types.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/browser-support-polyfills.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nInt64.float_of_bits\nInt64.bits_of_float\nInt32.float_of_bits\nInt32.bits_of_float\n```\n\n----------------------------------------\n\nTITLE: Retrieving Minutes from Date in ReScript\nDESCRIPTION: The getMinutes function returns the number of minutes for a Date object, evaluated in the current time zone. It binds to JavaScript's Date.getMinutes method.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_26\n\nLANGUAGE: res\nCODE:\n```\nlet getMinutes: t => float\n```\n\nLANGUAGE: res\nCODE:\n```\nJs.Date.getMinutes(exampleDate) == 30.0\n```\n\n----------------------------------------\n\nTITLE: Setting Hours with Minutes, Seconds, and Milliseconds in ReScript\nDESCRIPTION: Sets the hours, minutes, seconds, and milliseconds of a Date object. Returns milliseconds since epoch. Modifies the original Date object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_47\n\nLANGUAGE: res\nCODE:\n```\nlet date1 = Js.Date.fromFloat(123456654321.0)\nlet futureTime = Js.Date.setHoursMSMs(\n  date1,\n  ~hours=22.0,\n  ~minutes=46.0,\n  ~seconds=37.0,\n  ~milliseconds=494.0,\n  (),\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing NaN in ReScript\nDESCRIPTION: Defines a constant for the special \"Not a Number\" value in JavaScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/float.mdx#2025-04-18_snippet_0\n\nLANGUAGE: re\nCODE:\n```\nlet _NaN: float;\n```\n\n----------------------------------------\n\nTITLE: Checking Subset Relationship in MutableSets in ReasonML\nDESCRIPTION: Function signature for checking if the second set is a subset of the first set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_29\n\nLANGUAGE: reasonml\nCODE:\n```\nlet subset: (t('value, 'id), t('value, 'id)) => bool;\n```\n\n----------------------------------------\n\nTITLE: Integer division in ReScript's Belt.Int module\nDESCRIPTION: The / operator divides two integers. This is the same as the division operator from Pervasives.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/int.mdx#2025-04-18_snippet_7\n\nLANGUAGE: reason\nCODE:\n```\nlet (/): (int, int) => int;\n```\n\nLANGUAGE: reason\nCODE:\n```\nopen Belt.Int;\nJs.log(4 / 2 === 2); /* true */\n```\n\n----------------------------------------\n\nTITLE: Searching and Indexing Uint8ClampedArray in ReScript\nDESCRIPTION: Functions for searching elements and finding their indices in Uint8ClampedArray.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_5\n\nLANGUAGE: ReScript\nCODE:\n```\nlet includes: (elt, t) => bool;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet indexOf: (elt, t) => int;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet indexOfFrom: (elt, ~from: int, t) => int;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet lastIndexOf: (elt, t) => int;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet lastIndexOfFrom: (elt, ~from: int, t) => int;\n```\n\n----------------------------------------\n\nTITLE: Reference Error Raiser\nDESCRIPTION: Function signature for raising a JavaScript ReferenceError.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/exn.mdx#2025-04-18_snippet_11\n\nLANGUAGE: rescript\nCODE:\n```\nlet raiseReferenceError: string => 'a\n```\n\n----------------------------------------\n\nTITLE: Retrieving Float32Array Properties in ReScript\nDESCRIPTION: Functions to access various properties of a Float32Array such as buffer, byte length, and byte offset.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet buffer: t => Js_typed_array.array_buffer;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet byteLength: t => int;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet byteOffset: t => int;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet length: t => int;\n```\n\n----------------------------------------\n\nTITLE: Mapping values with uncurried function in ReScript map\nDESCRIPTION: Creates a new map by applying an uncurried function to all values in the original map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_42\n\nLANGUAGE: reasonml\nCODE:\n```\nlet mapU: (t('a), [@bs] ('a => 'b)) => t('b);\n```\n\n----------------------------------------\n\nTITLE: Defining cmp type in ReScript\nDESCRIPTION: Defines a comparison type with generic parameters for the value type and an identifier. The runtime representation is a comparison function, but it's signed with a type parameter to prevent mixing of different comparison functions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/id.mdx#2025-04-18_snippet_2\n\nLANGUAGE: ReScript\nCODE:\n```\ntype cmp<'a, 'id>\n```\n\n----------------------------------------\n\nTITLE: Splitting a String Set by Value in ReScript Belt.Set.String\nDESCRIPTION: Splits a set into three parts: elements less than the provided value, elements greater than the provided value, and a boolean indicating if the value itself was present in the set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set-string.mdx#2025-04-18_snippet_39\n\nLANGUAGE: rescript\nCODE:\n```\nlet split: (t, value) => ((t, t), bool)\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet s0 = Belt.Set.String.fromArray([\"apple\", \"banana\", \"orange\"])\n\nlet ((smaller, larger), present) = s0->Belt.Set.String.split(\"banana\")\n\npresent /* true */\nsmaller->Belt.Set.String.toArray /* [\"apple\"] */\nlarger->Belt.Set.String.toArray /* [\"orange\"] */\n```\n\n----------------------------------------\n\nTITLE: Comparing Maps with Uncurried Function in ReScript MapInt Module\nDESCRIPTION: Function signature for comparing two maps using an uncurried comparison function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-int.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet cmpU: (t<'v>, t<'v>, (. 'v, 'v) => int) => int\n```\n\n----------------------------------------\n\nTITLE: Checking Set Invariant in ReScript\nDESCRIPTION: The checkInvariantInternal function validates the internal structure of a set and raises an exception if the invariant is not maintained.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-int.mdx#2025-04-18_snippet_40\n\nLANGUAGE: reasonml\nCODE:\n```\nlet checkInvariantInternal: t => unit;\n```\n\n----------------------------------------\n\nTITLE: Object Type Mismatch Example\nDESCRIPTION: Shows how object types are not enforced unless explicitly annotated, allowing potential type mismatches.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/object.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\ntype person = {\n  .\n  \"age\": int\n};\n\nlet me = {\n  \"age\": \"hello!\" // age is a string. No error.\n};\n```\n\nLANGUAGE: ml\nCODE:\n```\ntype person = <\n  age :int\n> Js.t\n\nlet me = [%bs.obj {\n  age = \"hello!\" (* age is a string. No error. *)\n}]\n```\n\n----------------------------------------\n\nTITLE: Getting the Byte Length with byteLength in ReScript\nDESCRIPTION: Function signature for byteLength that returns the length of a Uint8Array in bytes.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet byteLength: t => int\n```\n\n----------------------------------------\n\nTITLE: Example of fromString with Decimal String\nDESCRIPTION: Shows how to parse a string containing a decimal number into a float.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/float.mdx#2025-04-18_snippet_33\n\nLANGUAGE: re\nCODE:\n```\n/* returns 12.3 */\nJs.Float.fromString(\"12.3\");\n```\n\n----------------------------------------\n\nTITLE: Finding Element Index\nDESCRIPTION: Function signature to find the first index of a specified element in the array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_19\n\nLANGUAGE: res\nCODE:\n```\nlet indexOf: (elt, t) => int\n```\n\n----------------------------------------\n\nTITLE: Adding multiple integers to a hash set in ReScript\nDESCRIPTION: Function signature for adding multiple integer keys from an array to an existing hash set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/hash-set-int.mdx#2025-04-18_snippet_17\n\nLANGUAGE: res\nCODE:\n```\nlet mergeMany: (t, array<key>) => unit\n```\n\n----------------------------------------\n\nTITLE: Filtering Array Elements\nDESCRIPTION: Function signature to create a new array with elements that pass a specified condition.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_34\n\nLANGUAGE: res\nCODE:\n```\nlet filter: ((. elt) => bool, t) => t\n```\n\n----------------------------------------\n\nTITLE: Example of Getting String Set Size in ReScript\nDESCRIPTION: Demonstrates how to get the number of elements in a string set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-string.mdx#2025-04-18_snippet_49\n\nLANGUAGE: reasonml\nCODE:\n```\nlet s0 = Belt.Set.String.fromArray([|\"apple\"|]);\n\ns0->Belt.Set.String.size; /* 1 */\n```\n\n----------------------------------------\n\nTITLE: Checking if All Elements Satisfy Predicate with Uncurried Function in ReasonML\nDESCRIPTION: Provides an uncurried function variant to check if all elements in a set satisfy a given predicate.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set.mdx#2025-04-18_snippet_23\n\nLANGUAGE: reasonml\nCODE:\n```\nlet everyU: (t('value, 'id), [@bs] ('value => bool)) => bool;\n```\n\n----------------------------------------\n\nTITLE: Reducing Array Elements with Index\nDESCRIPTION: Function signature to reduce the array to a single value by applying a function against an accumulator and each element with its index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_45\n\nLANGUAGE: res\nCODE:\n```\nlet reducei: ((. 'b, elt, int) => 'b, 'b, t) => 'b\n```\n\n----------------------------------------\n\nTITLE: Create Float64Array from Array-like Object\nDESCRIPTION: Creates a new Float64Array from an array-like object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-64-array.mdx#2025-04-18_snippet_56\n\nLANGUAGE: reason\nCODE:\n```\nlet from: Js_typed_array2.array_like(elt) => t;\n```\n\n----------------------------------------\n\nTITLE: Defining MutableSetInt container type\nDESCRIPTION: Defines the abstract type for sets.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\ntype t\n```\n\n----------------------------------------\n\nTITLE: Array Transformation Methods in ReScript\nDESCRIPTION: Higher-order functions for transforming arrays, including map and reduce variants.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-32-array.mdx#2025-04-18_snippet_12\n\nLANGUAGE: res\nCODE:\n```\nlet map: ((. elt) => 'b, t) => typed_array<'b>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet mapi: ((. elt, int) => 'b, t) => typed_array<'b>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet reduce: ((. 'b, elt) => 'b, 'b, t) => 'b\n```\n\nLANGUAGE: res\nCODE:\n```\nlet reducei: ((. 'b, elt, int) => 'b, 'b, t) => 'b\n```\n\nLANGUAGE: res\nCODE:\n```\nlet reduceRight: ((. 'b, elt) => 'b, 'b, t) => 'b\n```\n\nLANGUAGE: res\nCODE:\n```\nlet reduceRighti: ((. 'b, elt, int) => 'b, 'b, t) => 'b\n```\n\nLANGUAGE: res\nCODE:\n```\nlet some: ((. elt) => bool, t) => bool\n```\n\nLANGUAGE: res\nCODE:\n```\nlet somei: ((. elt, int) => bool, t) => bool\n```\n\n----------------------------------------\n\nTITLE: Converting UInt32Array to locale string\nDESCRIPTION: Defines a function that returns a locale-specific string representing the typed array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_31\n\nLANGUAGE: rescript\nCODE:\n```\nlet toLocaleString: t => string\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for Float64Array\nDESCRIPTION: Defines the basic types for Float64Array including the element type (float), a generic typed_array type, and the Float64Array type itself.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-64-array.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\ntype elt = float;\ntype typed_array('a);\ntype t = typed_array(elt);\n```\n\n----------------------------------------\n\nTITLE: Declaring getFullYear Function for Date in ReScript\nDESCRIPTION: Declares the getFullYear function, which returns the full year for a given Date object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_20\n\nLANGUAGE: rescript\nCODE:\n```\nlet getFullYear: t => float\n```\n\n----------------------------------------\n\nTITLE: Array Construction Methods\nDESCRIPTION: Methods for creating new Uint8ClampedArray instances from various sources\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet make: array<elt> => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromBuffer: Js_typed_array2.array_buffer => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromLength: int => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet from: Js_typed_array2.array_like<elt> => t\n```\n\n----------------------------------------\n\nTITLE: Map Comparison Operations - ReScript\nDESCRIPTION: Functions for comparing maps including custom comparison functions for keys and values\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-map.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\nlet cmpU: (t('k, 'a, 'id), t('k, 'a, 'id), [@bs] (('a, 'a) => int)) => int;\nlet cmp: (t('k, 'a, 'id), t('k, 'a, 'id), ('a, 'a) => int) => int;\nlet eqU: (t('k, 'a, 'id), t('k, 'a, 'id), [@bs] (('a, 'a) => bool)) => bool;\nlet eq: (t('k, 'a, 'id), t('k, 'a, 'id), ('a, 'a) => bool) => bool;\n```\n\n----------------------------------------\n\nTITLE: Converting Undefined to Option in ReScript\nDESCRIPTION: Function signature for converting JavaScript's undefined to ReScript's option type. Maps a value to Some(a) and empty to None.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/undefined.mdx#2025-04-18_snippet_13\n\nLANGUAGE: res\nCODE:\n```\nlet toOption: t<'a> => option<'a>\n```\n\n----------------------------------------\n\nTITLE: Finding First Element by Predicate (Uncurried) in ReScript MapInt Module\nDESCRIPTION: Function signature for finding the first key-value pair that satisfies an uncurried predicate.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-int.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\nlet findFirstByU: (t<'v>, (. key, 'v) => bool) => option<(key, 'v)>\n```\n\n----------------------------------------\n\nTITLE: Filtering Uint8ClampedArray elements with index\nDESCRIPTION: Creates a new array with all elements that pass the test implemented by the provided function that also receives the element index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_35\n\nLANGUAGE: res\nCODE:\n```\nlet filteri: ((. elt, int) => bool, t) => t\n```\n\n----------------------------------------\n\nTITLE: Creating Set from Sorted Array in ReScript\nDESCRIPTION: Creates a set from an already sorted array. More efficient than fromArray but assumes input is correctly sorted.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-string.mdx#2025-04-18_snippet_6\n\nLANGUAGE: reasonml\nCODE:\n```\nlet fromSortedArrayUnsafe: array(value) => t;\n```\n\n----------------------------------------\n\nTITLE: Defining Upper Bound Polymorphic Variant in ReScript\nDESCRIPTION: Illustrates how to define an upper bound polymorphic variant type for red colors in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/polymorphic-variant.mdx#2025-04-18_snippet_20\n\nLANGUAGE: res\nCODE:\n```\ntype validRed<'a> = [< #Fire | #Crimson | #Ash] as 'a\ntype myReds = validRed<[#Ash]>\n\n// This will fail due to unlisted constructor not defined by the lower bound\ntype notWorking = validRed<[#Purple]>\n```\n\n----------------------------------------\n\nTITLE: Find Index of First Matching Element with Index Access\nDESCRIPTION: Returns the index of the first element in the array that satisfies the provided function test, with access to the element index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-64-array.mdx#2025-04-18_snippet_39\n\nLANGUAGE: reason\nCODE:\n```\nlet findIndexi: ((. elt, int) => bool, t) => int;\n```\n\n----------------------------------------\n\nTITLE: Legacy Conversion from Null_undefined to Option in ReScript\nDESCRIPTION: Defines the 'to_opt' function, a legacy alias for 'toOption'.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/null-undefined.mdx#2025-04-18_snippet_13\n\nLANGUAGE: reason\nCODE:\n```\nlet to_opt: t('a) => option('a);\n```\n\n----------------------------------------\n\nTITLE: Array Transformation Methods\nDESCRIPTION: Functions for transforming array elements to create new arrays or aggregate values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_9\n\nLANGUAGE: res\nCODE:\n```\nlet map: ((. elt) => 'b, t) => typed_array<'b>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet mapi: ((. elt, int) => 'b, t) => typed_array<'b>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet reduce: ((. 'b, elt) => 'b, 'b, t) => 'b\n```\n\nLANGUAGE: res\nCODE:\n```\nlet reducei: ((. 'b, elt, int) => 'b, 'b, t) => 'b\n```\n\nLANGUAGE: res\nCODE:\n```\nlet reduceRight: ((. 'b, elt) => 'b, 'b, t) => 'b\n```\n\nLANGUAGE: res\nCODE:\n```\nlet reduceRighti: ((. 'b, elt, int) => 'b, 'b, t) => 'b\n```\n\nLANGUAGE: res\nCODE:\n```\nlet some: ((. elt) => bool, t) => bool\n```\n\nLANGUAGE: res\nCODE:\n```\nlet somei: ((. elt, int) => bool, t) => bool\n```\n\n----------------------------------------\n\nTITLE: Copy Within Array with Range\nDESCRIPTION: Copies a sequence of elements within the array from a specified range to a position starting at the target index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-64-array.mdx#2025-04-18_snippet_11\n\nLANGUAGE: reason\nCODE:\n```\nlet copyWithinFromRange: (~to_: int, ~start: int, ~end_: int, t) => t;\n```\n\n----------------------------------------\n\nTITLE: Splitting map by key in MapString module (ReScript)\nDESCRIPTION: Function to split a map into three parts based on a key: entries with keys less than, equal to, and greater than the given key.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-string.mdx#2025-04-18_snippet_50\n\nLANGUAGE: reason\nCODE:\n```\nlet split: (key, t('v)) => (t('v), option('v), t('v));\n```\n\n----------------------------------------\n\nTITLE: List nth Element Function Signature\nDESCRIPTION: Function to get the nth element of a list as an option.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/list.mdx#2025-04-18_snippet_6\n\nLANGUAGE: ReScript\nCODE:\n```\nlet nth: (t('a), int) => option('a);\n```\n\n----------------------------------------\n\nTITLE: Removing a key from a HashSetString\nDESCRIPTION: Removes the specified string key from the HashSetString.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/hash-set-string.mdx#2025-04-18_snippet_8\n\nLANGUAGE: res\nCODE:\n```\nlet remove: (t, key) => unit\n```\n\n----------------------------------------\n\nTITLE: Reducing a HashSetString\nDESCRIPTION: Applies a reducer function to each element with an initial accumulator value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/hash-set-string.mdx#2025-04-18_snippet_12\n\nLANGUAGE: res\nCODE:\n```\nlet reduce: (t, 'c, ('c, key) => 'c) => 'c\n```\n\n----------------------------------------\n\nTITLE: ReScript Code Using Belt Array Functions\nDESCRIPTION: Example ReScript code that uses Belt.Array.forEach to iterate over an array of numbers and log each element, demonstrating code that will be compiled using the external stdlib.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/build-external-stdlib.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nBelt.Array.forEach([1, 2, 3], num => Js.log(num))\n```\n\n----------------------------------------\n\nTITLE: Filling TypedArray from Position in ReScript\nDESCRIPTION: Function signature for filling a Uint8ClampedArray with a value starting from a specified index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_13\n\nLANGUAGE: res\nCODE:\n```\nlet fillFromInPlace: (elt, ~from: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Accessing Minimum Value with Undefined - ReScript\nDESCRIPTION: Returns the minimum value in a MutableSet.String collection. Returns undefined if the collection is empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_8\n\nLANGUAGE: res\nCODE:\n```\nlet minUndefined: t => Js.undefined<value>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet s0 = Belt.MutableSet.String.make()\nlet s1 = Belt.MutableSet.String.fromArray([\"apple\", \"orange\"])\n\ns0->Belt.MutableSet.String.minUndefined /* undefined */\ns1->Belt.MutableSet.String.minUndefined /* \"apple\" */\n```\n\n----------------------------------------\n\nTITLE: ReScript Without Inlining Constants\nDESCRIPTION: A ReScript example showing how variables are not automatically inlined in the JavaScript output, which prevents optimization by bundlers and minifiers.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/inlining-constants.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\n@val external process: 'a = \"process\"\n\nlet mode = \"development\"\n\nif (process[\"env\"][\"mode\"] === mode) {\n  Js.log(\"Dev-only code here!\")\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar mode = \"development\";\n\nif (process.env.mode === mode) {\n  console.log(\"Dev-only code here!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Get Bytes Per Element Constant\nDESCRIPTION: Returns the size in bytes of each element in the Float32Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-32-array.mdx#2025-04-18_snippet_50\n\nLANGUAGE: rescript\nCODE:\n```\nlet _BYTES_PER_ELEMENT: int;\n```\n\n----------------------------------------\n\nTITLE: Using Extended Options in ReScript Bindings\nDESCRIPTION: Example of using the extended formatDateOptions with custom types in ReScript, showing how the variant type gets compiled to the expected JavaScript numeric values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2025-03-05-what-can-i-do-with-rescript.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet formattedDate = formatString(\n  ~date=\"2021-09-01\",\n  ~formatStr=\"MMMM dd, yyyy\",\n  ~options={firstWeekContainsDate: Four},\n)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as DateFns from \"date-fns\";\n\nvar formattedDate = DateFns.format(\"2021-09-01\", \"MMMM dd, yyyy\", {\n      firstWeekContainsDate: 4\n    });\n```\n\n----------------------------------------\n\nTITLE: Checking equality with uncurried function in ReScript\nDESCRIPTION: Function signature for checking equality of two mutable maps using an uncurried equality function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_8\n\nLANGUAGE: ReScript\nCODE:\n```\nlet eqU: (t<'a>, t<'a>, (. 'a, 'a) => bool) => bool\n```\n\n----------------------------------------\n\nTITLE: Accessing Square Root of 2 in ReScript\nDESCRIPTION: Constant for the square root of 2 (approximately 1.4142135623730951), equivalent to JavaScript's Math.SQRT2.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/math.mdx#2025-04-18_snippet_7\n\nLANGUAGE: reasonml\nCODE:\n```\nlet _SQRT2: float;\n```\n\n----------------------------------------\n\nTITLE: Getting Byte Offset\nDESCRIPTION: Returns the offset of this typed array from the start of its ArrayBuffer, in bytes.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_type-s.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\nlet byteOffset: t => int\n```\n\n----------------------------------------\n\nTITLE: Converting Array to String with toString in ReScript\nDESCRIPTION: Function signature for toString that returns a string representing the elements of the Uint8Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_30\n\nLANGUAGE: rescript\nCODE:\n```\nlet toString: t => string\n```\n\n----------------------------------------\n\nTITLE: Create Float32Array from Buffer with Range\nDESCRIPTION: Creates a new Float32Array view on the provided ArrayBuffer, starting at the specified byte offset with the specified length. Raises Js.Exn.Error if parameters are invalid.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_54\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromBufferRange: (Js_typed_array.array_buffer, ~offset: int, ~length: int) => t\n```\n\n----------------------------------------\n\nTITLE: Finding the minimum value in a string set with undefined result in ReScript\nDESCRIPTION: Returns the minimum value of the set, or undefined if the set is empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set-string.mdx#2025-04-18_snippet_33\n\nLANGUAGE: rescript\nCODE:\n```\nlet minUndefined: t => Js.undefined<value>\n```\n\n----------------------------------------\n\nTITLE: Evaluating ReScript Code in Terminal with bsc\nDESCRIPTION: Demonstrates how to use the bsc -e flag to evaluate ReScript code directly in the terminal. The example shows defining a simple add function and getting the compiled JavaScript output.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/try.mdx#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n❯ bsc -e 'let add = (x, y) => x + y'\n// Generated by ReScript, PLEASE EDIT WITH CARE\n'use strict';\n\n\nfunction add(x, y) {\n  return x + y | 0;\n}\n\nexports.add = add;\n/* No side effect */\n```\n\n----------------------------------------\n\nTITLE: Getting Character Code at Index in ReScript\nDESCRIPTION: The 'charCodeAt' function returns the Unicode value of the character at a specified index in a string. It takes a string and an integer index, returning a float representing the character code.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/string-2.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\nlet charCodeAt: (t, int) => float\n```\n\n----------------------------------------\n\nTITLE: Map PackIdData Function Signature\nDESCRIPTION: Creates a packed collection from id and data components.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map.mdx#2025-04-18_snippet_19\n\nLANGUAGE: rescript\nCODE:\n```\nlet packIdData: (~id: id<'k, 'id>, ~data: Belt_MapDict.t<'k, 'v, 'id>) => t<'k, 'v, 'id>\n```\n\n----------------------------------------\n\nTITLE: Iterating over map with uncurried function in ReScript\nDESCRIPTION: Applies an uncurried function to each key-value pair in the map in increasing key order.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_10\n\nLANGUAGE: reasonml\nCODE:\n```\nlet forEachU: (t('a), [@bs] ((key, 'a) => unit)) => unit;\n```\n\n----------------------------------------\n\nTITLE: Basic Array Operations (Get/Set/Buffer)\nDESCRIPTION: Core array operations including unsafe get/set operations and buffer access methods\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet unsafe_get: (t, int) => elt\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet unsafe_set: (t, int, elt) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet buffer: t => Js_typed_array2.array_buffer\n```\n\n----------------------------------------\n\nTITLE: Writing an Int32 value to a DataView in ReScript\nDESCRIPTION: Function signature for storing a signed 32-bit integer at the specified byte offset with big-endian format.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_data-view.mdx#2025-04-18_snippet_28\n\nLANGUAGE: rescript\nCODE:\n```\nlet setInt32: (t, int, int) => unit\n```\n\n----------------------------------------\n\nTITLE: If Statement with Implicit Unit Return in ReScript\nDESCRIPTION: Demonstrates how an if statement without else is equivalent to an if-else where the else branch returns the unit value. This explains ReScript's type system behavior with conditionals.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/control-flow.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nif showMenu {\n  displayMenu()\n} else {\n  ()\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nif (showMenu) {\n  displayMenu()\n}\n```\n\n----------------------------------------\n\nTITLE: Signature for isSorted function in ReScript\nDESCRIPTION: Function signature for isSorted, which checks if an integer array is in non-strict increasing order.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/sort-array-int.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nlet isSorted: array<element> => bool\n```\n\n----------------------------------------\n\nTITLE: Checking Set Equality in ReScript MutableSetString\nDESCRIPTION: Tests whether two sets contain exactly the same elements. Order is not considered since sets are inherently unordered.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_19\n\nLANGUAGE: reason\nCODE:\n```\nlet eq: (t, t) => bool;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet s0 = Belt.MutableSet.String.fromArray([|\"apple\", \"orange\"|]);\nlet s1 = Belt.MutableSet.String.fromArray([|\"orange\", \"apple\"|]);\n\nBelt.MutableSet.String.eq(s0, s1); /* true */\n```\n\n----------------------------------------\n\nTITLE: Defining ArrayBuffer Type in ReScript\nDESCRIPTION: Defines the type alias for JavaScript ArrayBuffer using ReScript's type system.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_array-buffer.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype t = Js_typed_array.array_buffer\n```\n\n----------------------------------------\n\nTITLE: Setting Array Elements with unsafe_set in ReScript\nDESCRIPTION: Function signature for unsafe_set that sets an element in a Uint8Array at a specified index without bounds checking.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet unsafe_set: (t, int, elt) => unit\n```\n\n----------------------------------------\n\nTITLE: Element Size Constant for Float64Array\nDESCRIPTION: Constant that specifies the byte size of each element in a Float64Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-64-array.mdx#2025-04-18_snippet_24\n\nLANGUAGE: rescript\nCODE:\n```\nlet _BYTES_PER_ELEMENT: int\n```\n\n----------------------------------------\n\nTITLE: Copying Elements Within Array with Range\nDESCRIPTION: Function signature for copying a range of elements within the array to a specified position.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_11\n\nLANGUAGE: res\nCODE:\n```\nlet copyWithinFromRange: (~to_: int, ~start: int, ~end_: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Record Type Coercion with Superset Fields\nDESCRIPTION: Shows how a record with more fields can be coerced to a type with fewer fields. This works when the source record contains all the fields of the target type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/record.mdx#2025-04-18_snippet_16\n\nLANGUAGE: rescript\nCODE:\n```\ntype a = {\n  id: string,\n  name: string,\n  age: int,\n  active: bool,\n}\n\ntype b = {\n  name: string,\n  age: int,\n}\n\nlet nameFromB = (b: b) => b.name\n\nlet a: a = {\n  id: \"1\",\n  name: \"Name\",\n  age: 35,\n  active: true,\n}\n\nlet name = nameFromB(a :> b)\n```\n\n----------------------------------------\n\nTITLE: Reducing an integer hash set in ReScript\nDESCRIPTION: Function signature for folding over the hash set to produce a single result using an accumulator.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/hash-set-int.mdx#2025-04-18_snippet_12\n\nLANGUAGE: res\nCODE:\n```\nlet reduce: (t, 'c, ('c, key) => 'c) => 'c\n```\n\n----------------------------------------\n\nTITLE: Return Function Signature in ReScript\nDESCRIPTION: Function signature for constructing a nullable value from a non-nullable value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/nullable.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet return: 'a => t<'a>\n```\n\n----------------------------------------\n\nTITLE: Catching Promise errors in ReScript\nDESCRIPTION: Handles rejected promises by providing an error handler function, equivalent to JavaScript's Promise.catch().\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/promise.mdx#2025-04-18_snippet_13\n\nLANGUAGE: reason\nCODE:\n```\nlet catch: (error => t('a), t('a)) => t('a);\n```\n\n----------------------------------------\n\nTITLE: Creating MutableSetInt from sorted array\nDESCRIPTION: Creates a set from an already sorted array of integers.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromSortedArrayUnsafe: array<value> => t\n```\n\n----------------------------------------\n\nTITLE: Character Literal Examples in ReScript\nDESCRIPTION: Demonstrates different character literal declarations in ReScript including numeric, alphabetic, unicode and escape sequence characters. Shows how ReScript characters are converted to their corresponding integer values in JavaScript output.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/language_char_literal.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nlet one = '1';\nlet upperCaseA = 'A';\nlet lowerCaseA = 'a';\nlet unicode ='😀';\nlet escape = '\\u1111'\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar one = /* '1' */49;\n\nvar upperCaseA = /* 'A' */65;\n\nvar lowerCaseA = /* 'a' */97;\nvar unicode = 128512;\nvar escape = 4369;\n```\n\n----------------------------------------\n\nTITLE: Testing if any element in Uint8ClampedArray passes a test\nDESCRIPTION: Tests whether at least one element in the array passes the test implemented by the provided function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_48\n\nLANGUAGE: res\nCODE:\n```\nlet some: ((. elt) => bool, t) => bool\n```\n\n----------------------------------------\n\nTITLE: Testing Any Element with some\nDESCRIPTION: Function signature to test whether at least one element in the array passes the provided function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_48\n\nLANGUAGE: res\nCODE:\n```\nlet some: ((. elt) => bool, t) => bool\n```\n\n----------------------------------------\n\nTITLE: Testing All Elements with every\nDESCRIPTION: Function signature to test if all elements in the Int8Array pass a provided test function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_32\n\nLANGUAGE: res\nCODE:\n```\nlet every: ((. elt) => bool, t) => bool\n```\n\n----------------------------------------\n\nTITLE: Reading a Uint16 value from a DataView in ReScript\nDESCRIPTION: Function signature for getting an unsigned 16-bit integer from the specified byte offset with big-endian format.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_data-view.mdx#2025-04-18_snippet_12\n\nLANGUAGE: rescript\nCODE:\n```\nlet getUint16: (t, int) => int\n```\n\n----------------------------------------\n\nTITLE: Getting Set Identity\nDESCRIPTION: Advanced function that returns the identity of the set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set.mdx#2025-04-18_snippet_42\n\nLANGUAGE: reason\nCODE:\n```\nlet getId: t('value, 'id) => id('value, 'id);\n```\n\n----------------------------------------\n\nTITLE: Creating JSON Boolean Value in ReScript\nDESCRIPTION: Function signature for creating a JSON boolean value from a ReScript bool.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/json.mdx#2025-04-18_snippet_14\n\nLANGUAGE: reason\nCODE:\n```\nlet boolean: bool => t;\n```\n\n----------------------------------------\n\nTITLE: Creating an ArrayBuffer in ReScript\nDESCRIPTION: Function signature for creating a new ArrayBuffer with a specified length. All elements are initialized to 0.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_array-buffer.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reasonml\nCODE:\n```\nlet make: int => t;\n```\n\n----------------------------------------\n\nTITLE: Using copyWithin Method for TypedArray in ReScript\nDESCRIPTION: Function signature for copying a sequence of array elements within a Uint8ClampedArray, specifying only the target position.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_9\n\nLANGUAGE: res\nCODE:\n```\nlet copyWithin: (~to_: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Defining SetDict types in ReScript\nDESCRIPTION: Defines the core types for the SetDict module, including the set type 't' and the comparison function type 'cmp'.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-dict.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype t('value, 'identity);\n\ntype cmp('value, 'id) = BeltId.cmp('value, 'id);\n```\n\n----------------------------------------\n\nTITLE: Getting Element with Undefined Return\nDESCRIPTION: Function that returns an element from the set as undefined when not found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set.mdx#2025-04-18_snippet_38\n\nLANGUAGE: reason\nCODE:\n```\nlet getUndefined: (t('value, 'id), 'value) => Js.undefined('value);\n```\n\n----------------------------------------\n\nTITLE: Using Array Access with Options in ReScript Core\nDESCRIPTION: ReScript code example demonstrating the new behavior of array access in ReScript Core, which now returns an option type instead of the raw value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/migrate-to-v11.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nlet firstItem = myArray[0] // Some(\"hello\")\n```\n\n----------------------------------------\n\nTITLE: Testing if Any Element Pair Satisfies a Condition with Belt.List in ReScript\nDESCRIPTION: The some2 function checks if a predicate returns true for any corresponding pair of elements from two lists. It stops at the length of the shorter list.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/list.mdx#2025-04-18_snippet_49\n\nLANGUAGE: rescript\nCODE:\n```\nBelt.List.some2(list{1, 2, 3}, list{0, 1}, (a, b) => a > b) /* true */\n\nBelt.List.some2(list{}, list{1}, (a, b) => a > b) /* false */\n\nBelt.List.some2(list{2, 3}, list{1}, (a, b) => a > b) /* true */\n\nBelt.List.some2(list{0, 1}, list{5, 0}, (a, b) => a > b) /* true */\n```\n\n----------------------------------------\n\nTITLE: Defining Uint8Array Types in ReScript\nDESCRIPTION: Defines the core types for the Uint8Array module, including element type, typed array type, and the main type alias.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype elt = int\ntype typed_array<'a> = Js_typed_array2.Uint8Array.typed_array<'a>\ntype t = typed_array<elt>\n```\n\n----------------------------------------\n\nTITLE: Writing Integer Values to DataView in ReScript\nDESCRIPTION: Functions to write 8-bit, 16-bit, and 32-bit integer values to a DataView, with options for signed/unsigned and endianness.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_data-view.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet setInt8: (t, int, int) => unit;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet setUint8: (t, int, int) => unit;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet setInt16: (t, int, int) => unit;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet setInt16LittleEndian: (t, int, int) => unit;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet setUint16: (t, int, int) => unit;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet setUint16LittleEndian: (t, int, int) => unit;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet setInt32: (t, int, int) => unit;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet setInt32LittleEndian: (t, int, int) => unit;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet setUint32: (t, int, int) => unit;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet setUint32LittleEndian: (t, int, int) => unit;\n```\n\n----------------------------------------\n\nTITLE: Setting Item in Storage in ReScript\nDESCRIPTION: External binding for setting an item in storage with a key-value pair.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/dom/storage.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nexternal setItem: (string, string, t) => unit = \"setItem\"\n```\n\n----------------------------------------\n\nTITLE: Clearing MutableStack in ReScript\nDESCRIPTION: Function signature for discarding all elements from the stack.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-stack.mdx#2025-04-18_snippet_2\n\nLANGUAGE: ReScript\nCODE:\n```\nlet clear: t<'a> => unit\n```\n\n----------------------------------------\n\nTITLE: HashSet Statistics Logging - ReScript\nDESCRIPTION: Logs internal statistics about the HashSet for debugging purposes.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-set-int.mdx#2025-04-18_snippet_14\n\nLANGUAGE: rescript\nCODE:\n```\nlet logStats: t => unit\n```\n\n----------------------------------------\n\nTITLE: Creating Uint8Array from ArrayBuffer with Offset using fromBufferOffset in ReScript\nDESCRIPTION: Function signature for fromBufferOffset that creates a new Uint8Array using an existing ArrayBuffer as its storage, starting at a specified offset.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_53\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromBufferOffset: (Js_typed_array2.array_buffer, int) => t\n```\n\n----------------------------------------\n\nTITLE: Legacy conversion from Option to Nullable in ReScript\nDESCRIPTION: The 'from_opt' function is a legacy alias for 'fromOption', converting option('a) to Js.null_undefined('a).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/nullable.mdx#2025-04-18_snippet_11\n\nLANGUAGE: reason\nCODE:\n```\nlet from_opt: option('a) => t('a);\n```\n\n----------------------------------------\n\nTITLE: Defining MakeHashable Module Generator in ReScript\nDESCRIPTION: Module functor for creating curried hashable modules with custom hash and equality functions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/id.mdx#2025-04-18_snippet_11\n\nLANGUAGE: rescript\nCODE:\n```\nmodule MakeHashable: (M: {\n  type t\n  let hash: t => int\n  let eq: (t, t) => bool\n}) => Hashable with type t = M.t\n```\n\n----------------------------------------\n\nTITLE: TypeOf Operator in ReScript\nDESCRIPTION: Function signature for JavaScript's typeof operator. This allows checking the runtime type of values, though the documentation recommends using Js.Types for type-safe reflection.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet typeof: 'a => string\n```\n\n----------------------------------------\n\nTITLE: Filtering and mapping values in place in a HashMap with integer keys in ReScript\nDESCRIPTION: Filters and transforms values in the hash map in place. Removes entries for which the function returns None.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-map-int.mdx#2025-04-18_snippet_15\n\nLANGUAGE: reason\nCODE:\n```\nlet keepMapInPlace: (t('a), (key, 'a) => option('a)) => unit;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet hMap = Belt.HashMap.Int.make(~hintSize=10);\nBelt.HashMap.Int.set(hMap, 1, \"value1\");\nBelt.HashMap.Int.set(hMap, 2, \"value2\");\n\nBelt.HashMap.Int.keepMapInPlace(hMap, (key, value) => {\n  key mod 1 == 0 ? None : Some(value)\n});\n```\n\n----------------------------------------\n\nTITLE: Sorting Array with Comparator\nDESCRIPTION: Function signature to sort the array in-place using a custom comparison function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_17\n\nLANGUAGE: res\nCODE:\n```\nlet sortInPlaceWith: ((. elt, elt) => int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Explicit Unit Return in If-Else Expression\nDESCRIPTION: Demonstrates the explicit return of unit () in the else branch, which is equivalent to an if without an else branch.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/control-flow.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nif showMenu {\n  displayMenu()\n} else {\n  ()\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nif (showMenu) {\n  displayMenu()\n}\n```\n\n----------------------------------------\n\nTITLE: Reduce Float32Array Elements Right-to-Left with Index\nDESCRIPTION: Applies a function against an accumulator and each element in the Float32Array, from right to left, to reduce it to a single value, passing the element index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-32-array.mdx#2025-04-18_snippet_47\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduceRighti: ((. 'b, elt, int) => 'b, 'b, t) => 'b;\n```\n\n----------------------------------------\n\nTITLE: Setting value in ReScript\nDESCRIPTION: Function signature for setting a value in a mutable map, performing in-place modification and returning the map for chaining.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_39\n\nLANGUAGE: ReScript\nCODE:\n```\nlet set: (t<'a>, key, 'a) => unit\n```\n\n----------------------------------------\n\nTITLE: Setting Array Values with Offset in TypedArray in ReScript\nDESCRIPTION: Function signature for setting values in a Uint8ClampedArray from a regular array with a specified offset.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_7\n\nLANGUAGE: res\nCODE:\n```\nlet setArrayOffset: (array<elt>, int, t) => unit\n```\n\n----------------------------------------\n\nTITLE: Creating String from Multiple Character Codes in ReScript\nDESCRIPTION: The fromCharCodeMany function creates a string from an array of character codes, using the same rules as fromCharCode.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reason\nCODE:\n```\nlet fromCharCodeMany: array(int) => t;\n```\n\n----------------------------------------\n\nTITLE: Copy Elements Within Float32Array with Source\nDESCRIPTION: Copies a sequence of elements within the Float32Array, specifying both destination and source indices.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rescript\nCODE:\n```\nlet copyWithinFrom: (~to_: int, ~from: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Clearing Storage in ReScript\nDESCRIPTION: External binding for clearing all items from storage.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/dom/storage2.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reasonml\nCODE:\n```\nexternal clear: t => unit = \"clear\"\n```\n\n----------------------------------------\n\nTITLE: Sort Array In Place\nDESCRIPTION: Sorts the elements of the array in place using the default comparison.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-64-array.mdx#2025-04-18_snippet_16\n\nLANGUAGE: reason\nCODE:\n```\nlet sortInPlace: t => t;\n```\n\n----------------------------------------\n\nTITLE: Reverse Array In-Place\nDESCRIPTION: Reverses the order of elements in the typed array in-place.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_type-s.mdx#2025-04-18_snippet_15\n\nLANGUAGE: res\nCODE:\n```\nlet reverseInPlace: t => t\n```\n\n----------------------------------------\n\nTITLE: Defining Uint32Array Types in ReScript\nDESCRIPTION: Defines the core types for the Uint32Array binding, including the element type (int), generic typed_array type, and the specific Uint32Array type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-32-array.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\ntype elt = int\ntype typed_array<'a>\ntype t = typed_array<elt>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Maximum Value with Undefined Fallback in ReScript Belt.Set.String\nDESCRIPTION: Returns the maximum string value from a string set collection. Returns undefined if the collection is empty. Demonstrates usage with both empty and populated sets.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set-string.mdx#2025-04-18_snippet_35\n\nLANGUAGE: rescript\nCODE:\n```\nlet maxUndefined: t => Js.undefined<value>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet s0 = Belt.Set.String.empty\nlet s1 = Belt.Set.String.fromArray([\"apple\", \"orange\"])\n\ns0->Belt.Set.String.maxUndefined /* undefined */\ns1->Belt.Set.String.maxUndefined /* orange */\n```\n\n----------------------------------------\n\nTITLE: Array Iteration and Search Methods\nDESCRIPTION: Methods for iterating over array elements and searching for specific values\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet forEach: ((. elt) => unit, t) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet map: ((. elt) => 'b, t) => typed_array<'b>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduce: ((. 'b, elt) => 'b, 'b, t) => 'b\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet find: ((. elt) => bool, t) => Js.undefined<elt>\n```\n\n----------------------------------------\n\nTITLE: Array Search and Iteration Methods\nDESCRIPTION: Methods for searching, filtering and iterating over array elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_int-16-array.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet includes: (elt, t) => bool\nlet indexOf: (elt, t) => int\nlet lastIndexOf: (elt, t) => int\nlet find: ((. elt) => bool, t) => Js.undefined<elt>\nlet filter: ((. elt) => bool, t) => t\n```\n\n----------------------------------------\n\nTITLE: Finding minimum key in MapString module (ReScript)\nDESCRIPTION: Function to find the minimum key in a map, returning an option type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-string.mdx#2025-04-18_snippet_25\n\nLANGUAGE: reason\nCODE:\n```\nlet minKey: t('a) => option(key);\n```\n\n----------------------------------------\n\nTITLE: Array Iteration Methods\nDESCRIPTION: Higher-order functions for iterating over array elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_int-32-array.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reason\nCODE:\n```\nlet forEach: ((. elt) => unit, t) => unit;\n\nlet forEachi: ((. elt, int) => unit, t) => unit;\n\nlet map: ((. elt) => 'b, t) => typed_array('b);\n\nlet mapi: ((. elt, int) => 'b, t) => typed_array('b);\n\nlet filter: ((. elt) => bool, t) => t;\n\nlet filteri: ((. elt, int) => bool, t) => t;\n\nlet some: ((. elt) => bool, t) => bool;\n\nlet somei: ((. elt, int) => bool, t) => bool;\n\nlet every: ((. elt) => bool, t) => bool;\n\nlet everyi: ((. elt, int) => bool, t) => bool;\n```\n\n----------------------------------------\n\nTITLE: Array Fill Methods in ReScript\nDESCRIPTION: Functions to fill the array with a value, with optional start and end positions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-32-array.mdx#2025-04-18_snippet_6\n\nLANGUAGE: res\nCODE:\n```\nlet fillInPlace: (elt, t) => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet fillFromInPlace: (elt, ~from: int, t) => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet fillRangeInPlace: (elt, ~start: int, ~end_: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Array Length Accessor in ReScript\nDESCRIPTION: Function to get the length of a Uint32Array instance.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-32-array.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nlet length: t => int\n```\n\n----------------------------------------\n\nTITLE: Array Modification Methods\nDESCRIPTION: Functions for modifying array contents including copying, filling, reversing and sorting operations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_float-32-array.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet setArray: (array<elt>, t) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet setArrayOffset: (array<elt>, int, t) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet copyWithin: (~to_: int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet copyWithinFrom: (~to_: int, ~from: int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet copyWithinFromRange: (~to_: int, ~start: int, ~end_: int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fillInPlace: (elt, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fillFromInPlace: (elt, ~from: int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fillRangeInPlace: (elt, ~start: int, ~end_: int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet reverseInPlace: t => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet sortInPlace: t => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet sortInPlaceWith: ((. elt, elt) => int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Check if All Elements Pass Test Function\nDESCRIPTION: Tests whether all elements in the Float32Array pass the provided function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-32-array.mdx#2025-04-18_snippet_32\n\nLANGUAGE: rescript\nCODE:\n```\nlet every: ((. elt) => bool, t) => bool;\n```\n\n----------------------------------------\n\nTITLE: Getting Byte Length of Uint8Array\nDESCRIPTION: Returns the length in bytes of the Uint8Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet byteLength: t => int\n```\n\n----------------------------------------\n\nTITLE: Sort Float32Array In-Place\nDESCRIPTION: Sorts the elements of the Float32Array in-place in ascending order.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-32-array.mdx#2025-04-18_snippet_16\n\nLANGUAGE: rescript\nCODE:\n```\nlet sortInPlace: t => t;\n```\n\n----------------------------------------\n\nTITLE: Example of toPrecision with Large Number\nDESCRIPTION: Shows how toPrecision handles very large numbers by outputting them in scientific notation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/float.mdx#2025-04-18_snippet_20\n\nLANGUAGE: re\nCODE:\n```\n/* print \"1.2e+21\" */\nJs.log @@ Js.Float.toPrecision(1.2e21);\n```\n\n----------------------------------------\n\nTITLE: Legacy conversion from Nullable to Option in ReScript\nDESCRIPTION: The 'to_opt' function is a legacy alias for 'toOption', converting Js.null_undefined('a) to option('a).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/nullable.mdx#2025-04-18_snippet_13\n\nLANGUAGE: reason\nCODE:\n```\nlet to_opt: t('a) => option('a);\n```\n\n----------------------------------------\n\nTITLE: Checking equality of maps with uncurried function in MapString module (ReScript)\nDESCRIPTION: Uncurried function for testing equality of two maps using a custom equality function for values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-string.mdx#2025-04-18_snippet_7\n\nLANGUAGE: reason\nCODE:\n```\nlet eqU: (t('v), t('v), [@bs] (('v, 'v) => bool)) => bool;\n```\n\n----------------------------------------\n\nTITLE: Converting HashSetInt to array in ReScript\nDESCRIPTION: Creates an array containing all elements of the HashSetInt.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-set-int.mdx#2025-04-18_snippet_15\n\nLANGUAGE: ReScript\nCODE:\n```\nlet toArray: t => array(key);\n```\n\n----------------------------------------\n\nTITLE: Multiline Comments in ReScript vs JavaScript\nDESCRIPTION: Shows multiline comment syntax in ReScript. Comments are not included in the generated JavaScript output.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/overview.mdx#2025-04-18_snippet_20\n\nLANGUAGE: rescript\nCODE:\n```\n/* Comment here */\n```\n\nLANGUAGE: javascript\nCODE:\n```\nNot in output\n```\n\n----------------------------------------\n\nTITLE: Using unsafe_trunc function to truncate float to integer in ReScript\nDESCRIPTION: The unsafe_trunc function truncates its argument by removing fractional digits. It takes a float as input and returns an integer, but may return values outside the valid int range.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/math.mdx#2025-04-18_snippet_35\n\nLANGUAGE: res\nCODE:\n```\nlet unsafe_trunc: float => int\n```\n\n----------------------------------------\n\nTITLE: Getting the underlying buffer of a DataView in ReScript\nDESCRIPTION: Function signature for retrieving the ArrayBuffer associated with a DataView.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_data-view.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet buffer: t => Js_typed_array.array_buffer\n```\n\n----------------------------------------\n\nTITLE: Signature for mapU Function in ReScript Result Module\nDESCRIPTION: Function signature for mapU, an uncurried version of map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/result.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet mapU: (t<'a, 'c>, (. 'a) => 'b) => t<'b, 'c>\n```\n\n----------------------------------------\n\nTITLE: Defining MutableStack Type in ReScript\nDESCRIPTION: Defines the generic type 't' for the MutableStack.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-stack.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\ntype t<'a>\n```\n\n----------------------------------------\n\nTITLE: Converting float to int in ReScript\nDESCRIPTION: Converts a floating-point number to an integer using the Belt.Int.fromFloat function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/int.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromFloat: float => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.log(Belt.Int.fromFloat(1.0) === 1) /* true */\n```\n\n----------------------------------------\n\nTITLE: Array Search Methods\nDESCRIPTION: Methods for searching and comparing array elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_int-32-array.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reason\nCODE:\n```\nlet includes: (elt, t) => bool;\n\nlet indexOf: (elt, t) => int;\n\nlet indexOfFrom: (elt, ~from: int, t) => int;\n\nlet lastIndexOf: (elt, t) => int;\n\nlet lastIndexOfFrom: (elt, ~from: int, t) => int;\n```\n\n----------------------------------------\n\nTITLE: Dynamically Loading Docson Component in React/Next.js\nDESCRIPTION: This code dynamically imports the Docson component for schema exploration with lazy loading functionality. It includes a loading placeholder and disables server-side rendering for the component.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/build-configuration-schema.mdx#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const Docson = dynamic(\n  () =>\n    import(\"src/components/Docson\").then((comp) => {\n      return comp.make;\n    }),\n  {\n    ssr: false,\n    loading: () => <div> Loading... </div>,\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Manipulating Uint8ClampedArray Data in ReScript\nDESCRIPTION: Functions for copying, filling, reversing, and sorting Uint8ClampedArray data in-place.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_4\n\nLANGUAGE: ReScript\nCODE:\n```\nlet copyWithin: (~to_: int, t) => t;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet fillInPlace: (elt, t) => t;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet reverseInPlace: t => t;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet sortInPlace: t => t;\n```\n\n----------------------------------------\n\nTITLE: String substring Function in ReScript\nDESCRIPTION: The substring function extracts characters between two indices. If start is negative, it's treated as zero, and if start is greater than finish, the indices are swapped. If finish is negative or zero, returns an empty string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/string.mdx#2025-04-18_snippet_16\n\nLANGUAGE: res\nCODE:\n```\nlet substring: (~from: int, ~to_: int, t) => t\n```\n\nLANGUAGE: res\nCODE:\n```\nJs.String.substring(~from=3, ~to_=6, \"playground\") == \"ygr\"\nJs.String.substring(~from=6, ~to_=3, \"playground\") == \"ygr\"\nJs.String.substring(~from=4, ~to_=12, \"playground\") == \"ground\"\n```\n\n----------------------------------------\n\nTITLE: Reduce Float32Array Elements\nDESCRIPTION: Applies a function against an accumulator and each element in the Float32Array to reduce it to a single value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_44\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduce: ((. 'b, elt) => 'b, 'b, t) => 'b\n```\n\n----------------------------------------\n\nTITLE: Merging Multiple Key-Value Pairs into HashMap in ReScript\nDESCRIPTION: Adds multiple key-value pairs to an existing hash map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-map-int.mdx#2025-04-18_snippet_14\n\nLANGUAGE: rescript\nCODE:\n```\nlet mergeMany: (t<'a>, array<(key, 'a)>) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet hMap = Belt.HashMap.Int.make(~hintSize=10)\nBelt.HashMap.Int.mergeMany(hMap, [(1, \"value1\"), (2, \"value2\")])\n```\n\n----------------------------------------\n\nTITLE: Raising Error exception in ReScript\nDESCRIPTION: Function signature for raising a JavaScript Error exception with a stacktrace and a custom message.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/exn.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\nlet raiseError: string => 'a\n```\n\n----------------------------------------\n\nTITLE: Integer subtraction in ReScript\nDESCRIPTION: Performs subtraction of two integers using the - operator from Belt.Int. This is the same as the subtraction operation from Pervasives.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/int.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet (-): (int, int) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nopen Belt.Int\nJs.log(2 - 1 === 1) /* true */\n```\n\n----------------------------------------\n\nTITLE: TypeScript String Literal Type Definition\nDESCRIPTION: Example of a TypeScript string literal union type which traditionally has limitations similar to polymorphic variants in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2023-04-17-improving-interop.mdx#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// direction.ts\ntype direction = \"UP\" | \"DOWN\" | \"LEFT\" | \"RIGHT\";\n```\n\n----------------------------------------\n\nTITLE: Finding last index of element from position\nDESCRIPTION: Defines a function that returns the last index at which a given element can be found in the array, searching backwards from the provided index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_24\n\nLANGUAGE: rescript\nCODE:\n```\nlet lastIndexOfFrom: (elt, ~from: int, t) => int\n```\n\n----------------------------------------\n\nTITLE: Example of toStringWithRadix with Base-36 Radix\nDESCRIPTION: Demonstrates converting a number to the highest supported base (36).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/float.mdx#2025-04-18_snippet_30\n\nLANGUAGE: re\nCODE:\n```\n/* prints \"3f.gez4w97ry0a18ymf6qadcxr\" */\nJs.log @@ Js.Float.toStringWithRadix(123.456, ~radix=36);\n```\n\n----------------------------------------\n\nTITLE: Testing if any element in Uint8ClampedArray passes an indexed test\nDESCRIPTION: Tests whether at least one element in the array passes the test implemented by the provided function with its index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_49\n\nLANGUAGE: res\nCODE:\n```\nlet somei: ((. elt, int) => bool, t) => bool\n```\n\n----------------------------------------\n\nTITLE: Dictionary Delete Function\nDESCRIPTION: Internal function signature for deleting keys from a dictionary\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/dict.mdx#2025-04-18_snippet_12\n\nLANGUAGE: reason\nCODE:\n```\nlet unsafeDeleteKey: (. t(string), string) => unit;\n```\n\n----------------------------------------\n\nTITLE: Creating UInt32Array from buffer with offset\nDESCRIPTION: Defines a function that creates a new typed array using an existing ArrayBuffer for its storage, starting at the specified byte offset.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_53\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromBufferOffset: (Js_typed_array.array_buffer, int) => t\n```\n\n----------------------------------------\n\nTITLE: Checking and measuring arrays in ReScript\nDESCRIPTION: Functions to check if a value is an array and to get the length of an array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/array-2.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reason\nCODE:\n```\nlet isArray: 'a => bool;\n```\n\nLANGUAGE: reason\nCODE:\n```\nJs.Array2.isArray([|5, 2, 3, 1, 4|]) == true;\nJs.Array2.isArray([5, 2, 3, 1, 4]) == true;\nJs.Array2.isArray(\"abcd\") == false;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet length: array('a) => int;\n```\n\n----------------------------------------\n\nTITLE: Integer Subtraction in ReScript\nDESCRIPTION: Performs subtraction of two int values using the - operator from Belt.Int module. Same as the subtraction from Pervasives.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/int.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet (-): (int, int) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nopen Belt.Int\nJs.log(2 - 1 === 1) /* true */\n```\n\n----------------------------------------\n\nTITLE: Comparing maps with uncurried function in ReScript\nDESCRIPTION: Function signature for comparing two mutable maps using an uncurried comparison function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_6\n\nLANGUAGE: ReScript\nCODE:\n```\nlet cmpU: (t<'a>, t<'a>, (. 'a, 'a) => int) => int\n```\n\n----------------------------------------\n\nTITLE: Setting Values with Offset from Regular Array\nDESCRIPTION: Copies values from a standard array into the typed array, starting at the specified offset.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-64-array.mdx#2025-04-18_snippet_7\n\nLANGUAGE: reason\nCODE:\n```\nlet setArrayOffset: (array(elt), int, t) => unit;\n```\n\n----------------------------------------\n\nTITLE: Checking if a map is empty in MapString module (ReScript)\nDESCRIPTION: Function that determines whether a given map contains any key-value pairs.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-string.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reason\nCODE:\n```\nlet isEmpty: t('v) => bool;\n```\n\n----------------------------------------\n\nTITLE: Manipulating Int8Array data in ReScript\nDESCRIPTION: Functions for setting array data, copying within the array, filling, and reversing.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet setArray: (array<elt>, t) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet setArrayOffset: (array<elt>, int, t) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet copyWithin: (~to_: int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet copyWithinFrom: (~to_: int, ~from: int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet copyWithinFromRange: (~to_: int, ~start: int, ~end_: int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fillInPlace: (elt, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fillFromInPlace: (elt, ~from: int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fillRangeInPlace: (elt, ~start: int, ~end_: int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet reverseInPlace: t => t\n```\n\n----------------------------------------\n\nTITLE: Array Length Operation for Float64Array\nDESCRIPTION: Function to get the length of a Float64Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-64-array.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet length: t => int\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for Int32Array\nDESCRIPTION: Core type definitions for the Int32Array implementation including element type, typed array type and the main type t.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_int-32-array.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype elt = int32\ntype typed_array<'a>\ntype t = typed_array<elt>\n```\n\n----------------------------------------\n\nTITLE: Setting Minutes, Seconds, and Milliseconds in ReScript\nDESCRIPTION: Sets minutes, seconds, and milliseconds of a Date object according to current timezone. Returns milliseconds since epoch. Modifies the original Date object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_51\n\nLANGUAGE: res\nCODE:\n```\nlet date1 = Js.Date.fromFloat(123456654321.0)\nlet futureTime = Js.Date.setMinutesSMs(\n  date1,\n  ~minutes=34.0,\n  ~seconds=56.0,\n  ~milliseconds=789.0,\n  ()\n)\n```\n\n----------------------------------------\n\nTITLE: Check if Float32Array Includes Value\nDESCRIPTION: Checks if the Float32Array includes the specified value. Part of ES2016.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-32-array.mdx#2025-04-18_snippet_18\n\nLANGUAGE: rescript\nCODE:\n```\nlet includes: (elt, t) => bool;\n```\n\n----------------------------------------\n\nTITLE: Partitioning Map (Uncurried) in ReScript MapInt Module\nDESCRIPTION: Function signature for partitioning the map based on an uncurried predicate.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-int.mdx#2025-04-18_snippet_48\n\nLANGUAGE: rescript\nCODE:\n```\nlet partitionU: (t<'v>, (. key, 'v) => bool) => (t<'v>, t<'v>)\n```\n\n----------------------------------------\n\nTITLE: Legacy Undefined to Option Conversion\nDESCRIPTION: Legacy function for mapping Js.undefined('a) to option('a).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/undefined.mdx#2025-04-18_snippet_14\n\nLANGUAGE: res\nCODE:\n```\nlet to_opt: t<'a> => option<'a>\n```\n\n----------------------------------------\n\nTITLE: Mapping with key using uncurried function in ReScript\nDESCRIPTION: Function signature for mapping values with keys in a mutable map using an uncurried function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_44\n\nLANGUAGE: ReScript\nCODE:\n```\nlet mapWithKeyU: (t<'a>, (. key, 'a) => 'b) => t<'b>\n```\n\n----------------------------------------\n\nTITLE: Writing a Float64 value with little-endian format in ReScript\nDESCRIPTION: Function signature for storing a 64-bit floating point number at the specified byte offset with little-endian format.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_data-view.mdx#2025-04-18_snippet_35\n\nLANGUAGE: rescript\nCODE:\n```\nlet setFloat64LittleEndian: (t, int, float) => unit\n```\n\n----------------------------------------\n\nTITLE: Initial JavaScript Code Sample\nDESCRIPTION: Original JavaScript code showing a simple module with require statement and a conditional function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/converting-from-js.mdx#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst school = require('school');\n\nconst defaultId = 10;\n\nfunction queryResult(usePayload, payload) {\n  if (usePayload) {\n    return payload.student;\n  } else {\n    return school.getStudentById(defaultId);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting bytes per element in Uint8ClampedArray\nDESCRIPTION: Returns the size in bytes of each element in the array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_50\n\nLANGUAGE: res\nCODE:\n```\nlet _BYTES_PER_ELEMENT: int\n```\n\n----------------------------------------\n\nTITLE: Map Float32Array Elements with Index\nDESCRIPTION: Creates a new typed array with the results of calling a provided function on every element in the Float32Array, providing the element index as a parameter.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_43\n\nLANGUAGE: rescript\nCODE:\n```\nlet mapi: ((. elt, int) => 'b, t) => typed_array<'b>\n```\n\n----------------------------------------\n\nTITLE: Migrating JS Component Bindings with Optional Props\nDESCRIPTION: Example of how to correctly write bindings to JS components with optional props in JSX v4.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/migrate-react.mdx#2025-04-18_snippet_10\n\nLANGUAGE: res\nCODE:\n```\nmodule Button = {\n  @module(\"./Button\") @react.component\n  external make: (~text: option<string>=?) => React.element = \"default\"\n}\n```\n\nLANGUAGE: res\nCODE:\n```\nmodule Button = {\n  @module(\"./Button\") @react.component\n  external make: (~text: string=?) => React.element = \"default\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Subarray from TypedArray in ReScript\nDESCRIPTION: Function signature for creating a new Uint8ClampedArray view of the ArrayBuffer store for the original array, referencing a range between start (inclusive) and end (exclusive) indices.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_28\n\nLANGUAGE: res\nCODE:\n```\nlet subarray: (~start: int, ~end_: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Creating a Difference of MutableSets in ReasonML\nDESCRIPTION: Function signature for creating a new MutableSet containing elements from the first set that are not in the second set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_27\n\nLANGUAGE: reasonml\nCODE:\n```\nlet diff: (t('value, 'id), t('value, 'id)) => t('value, 'id);\n```\n\n----------------------------------------\n\nTITLE: Finding Maximum Key in ReScript MapInt Module\nDESCRIPTION: Function signature for finding the maximum key in the map, returning an option.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-int.mdx#2025-04-18_snippet_27\n\nLANGUAGE: rescript\nCODE:\n```\nlet maxKey: t<'a> => option<key>\n```\n\n----------------------------------------\n\nTITLE: Binary Search Function Signature\nDESCRIPTION: Function signature for performing a binary search on a sorted array of strings, returning the index of the found element or a negative bitwise complement value if not found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/sort-array-string.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\nlet binarySearch: (array<element>, element) => int\n```\n\n----------------------------------------\n\nTITLE: Using Getter and Setter Attributes\nDESCRIPTION: Shows how to bind to individual fields of a JavaScript object using get and set attributes.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/bind-to-js-object.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\ntype textarea\n@set external setName: (textarea, string) => unit = \"name\"\n@get external getName: textarea => string = \"name\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom JavaScript File Extensions in ReScript\nDESCRIPTION: JSON configuration for specifying custom JavaScript file extensions for different module formats in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2020-09-25-release-8-3.mdx#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"package-specs\": [{\n    \"module\": \"es6\",\n    \"suffix\": \".mjs\"\n  },{\n    \"module\": \"commonjs\",\n    \"suffix\": \".cjs\"\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Uncurried comparison of MapDict instances\nDESCRIPTION: Function signature for comparing two maps using uncurried functions for key and value comparison.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_5\n\nLANGUAGE: reason\nCODE:\n```\nlet cmpU:\n  (t('k, 'v, 'id), t('k, 'v, 'id), ~kcmp: cmp('k, 'id), ~vcmp: [@bs] (('v, 'v) => int)) => int;\n```\n\n----------------------------------------\n\nTITLE: Creating UInt32Array from buffer with range\nDESCRIPTION: Defines a function that creates a new typed array using an existing ArrayBuffer for its storage, using the specified offset and length.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_54\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromBufferRange: (Js_typed_array.array_buffer, ~offset: int, ~length: int) => t\n```\n\n----------------------------------------\n\nTITLE: Retrieving Minimum Value as Undefined from Belt.MutableSet.String in ReScript\nDESCRIPTION: The 'minUndefined' function returns the minimum value of the collection. It returns undefined if the collection is empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_36\n\nLANGUAGE: reasonml\nCODE:\n```\nlet minUndefined: t => Js.undefined(value);\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet s0 = Belt.MutableSet.String.make();\nlet s1 = Belt.MutableSet.String.fromArray([|\"apple\", \"orange\"|]);\n\ns0->Belt.MutableSet.String.minUndefined; /* undefined */\ns1->Belt.MutableSet.String.minUndefined; /* \"apple\" */\n```\n\n----------------------------------------\n\nTITLE: Listing Conditional Variables with bsc Compiler\nDESCRIPTION: Shell command example showing how to list all available conditional variables using the bsc compiler, including how to add custom variables with the -bs-D flag.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/reason-compiler/latest/conditional-compilation.mdx#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n> bsc.exe -bs-D CUSTOM_A=\"ghsigh\" -bs-list-conditionals\nOCAML_PATCH \"BS\"\nBS_VERSION \"1.2.1\"\nOS_TYPE \"Unix\"\nBS true\nCUSTOM_A \"ghsigh\"\nWORD_SIZE 64\nOCAML_VERSION \"4.02.3+BS\"\nBIG_ENDIAN false\n```\n\n----------------------------------------\n\nTITLE: Creating String from Multiple Code Points in ReScript\nDESCRIPTION: The fromCodePointMany function creates a string from an array of Unicode code points, using the same rules as fromCodePoint.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string.mdx#2025-04-18_snippet_5\n\nLANGUAGE: reason\nCODE:\n```\nlet fromCodePointMany: array(int) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nJs.String2.fromCodePointMany([|0xd55c, 0xae00, 0x1f63a|]) == {js|한글😺|js};\n```\n\n----------------------------------------\n\nTITLE: Disabling Warning 27 for a Function in ReScript\nDESCRIPTION: Example of using the @warning decorator to disable warning number 27 for a specific function. The example demonstrates how to disable the warning for a deepClone function that uses raw JavaScript through the %raw directive.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/decorator_expression_warning.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\n// Disables warning 27 for the deepClone function\n@warning(\"-27\")\nlet deepClone = (obj: 'a): 'a => %raw(`\n  JSON.parse(JSON.stringify(obj))\n`);\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction deepClone(obj) {\n  return (JSON.parse(JSON.stringify(obj)));\n}\n```\n\n----------------------------------------\n\nTITLE: Normal Polymorphic Type Example\nDESCRIPTION: Example showing the limitations of normal polymorphic types in ReScript compared to scoped polymorphic types.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/scoped-polymorphic-types.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\ntype logger<'a> = { log: 'a => unit}\n\n@module(\"jsAPI\") external getLogger: unit => logger<'a> = \"getLogger\"\n```\n\n----------------------------------------\n\nTITLE: Defining generic map type in ReScript\nDESCRIPTION: Defines the generic map type t<'a> for the MutableMapString module.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_1\n\nLANGUAGE: ReScript\nCODE:\n```\ntype t<'a>\n```\n\n----------------------------------------\n\nTITLE: Example of Reducing String Set in ReScript\nDESCRIPTION: Demonstrates how to reduce a string set to compute the total length of all strings.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-string.mdx#2025-04-18_snippet_35\n\nLANGUAGE: reasonml\nCODE:\n```\nlet s0 = Belt.Set.String.fromArray([|\"apple\", \"orange\"|]);\ns0->Belt.Set.String.reduce(0, (acc, element) =>\n  acc + String.length(element)\n); /* 11 */\n```\n\n----------------------------------------\n\nTITLE: Setting Month and Date in ReScript\nDESCRIPTION: Sets a Date's month and day of month according to current time zone. Returns milliseconds since epoch for the updated Date. Modifies the original Date.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_51\n\nLANGUAGE: rescript\nCODE:\n```\nlet setMonthD: (t, ~month: float, ~date: float, unit) => float\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet futureTime = Js.Date.setMonthD(date1, ~month=11.0, ~date=8.0, ())\ndate1 == Js.Date.fromString(\"1973-12-08T21:34:56.789Z00:00\")\nfutureTime == Js.Date.getTime(date1)\n```\n\n----------------------------------------\n\nTITLE: Array Construction Methods\nDESCRIPTION: Factory methods for creating new Float64Arrays.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_float-64-array.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet make: array<elt> => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromBuffer: Js_typed_array2.array_buffer => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromBufferOffset: (Js_typed_array2.array_buffer, int) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromBufferRange: (Js_typed_array2.array_buffer, ~offset: int, ~length: int) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromLength: int => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet from: Js_typed_array2.array_like<elt> => t\n```\n\n----------------------------------------\n\nTITLE: Array Creation Methods\nDESCRIPTION: Functions for creating new Int32Array instances from various sources.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_int-32-array.mdx#2025-04-18_snippet_5\n\nLANGUAGE: reason\nCODE:\n```\nlet make: array(elt) => t;\n\nlet create: array(elt) => t;\n\nlet fromBuffer: Js_typed_array2.array_buffer => t;\n\nlet fromBufferOffset: (Js_typed_array2.array_buffer, int) => t;\n\nlet fromBufferRange: (Js_typed_array2.array_buffer, ~offset: int, ~length: int) => t;\n\nlet fromLength: int => t;\n\nlet from: Js_typed_array2.array_like(elt) => t;\n```\n\n----------------------------------------\n\nTITLE: Accessing Node.js-specific Global Values in ReScript\nDESCRIPTION: Shows how to safely access Node.js-specific global values like __filename using the %external syntax. This approach allows for graceful handling when the value is not defined in non-Node environments.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/bind-to-global-js-values.mdx#2025-04-18_snippet_5\n\nLANGUAGE: reason\nCODE:\n```\nswitch ([%external __filename]) {\n| Some(f) => Js.log(f)\n| None => Js.log(\"non-node environment\")\n};\n```\n\nLANGUAGE: ocaml\nCODE:\n```\nlet () = match [%external __filename] with\n| Some f -> Js.log f\n| None -> Js.log \"non-node environment\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar match = typeof (__filename) === \"undefined\" ? undefined : (__filename);\n\nif (match !== undefined) {\n  console.log(match);\n} else {\n  console.log(\"non-node environment\");\n}\n```\n\n----------------------------------------\n\nTITLE: Finding the minimum value in a set in ReScript\nDESCRIPTION: Returns the smallest element in the set wrapped in an option type. Returns None if the set is empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-int.mdx#2025-04-18_snippet_32\n\nLANGUAGE: reason\nCODE:\n```\nlet minimum: t => option(value);\n```\n\n----------------------------------------\n\nTITLE: Converting Reason File to ReScript Syntax\nDESCRIPTION: Command to convert a Reason (.re, .rei, .ml, .mli) file to the new ReScript syntax using the BuckleScript compiler.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/migrate-from-bucklescript-reason.mdx#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode_modules/.bin/bsc -format MyFile.re > MyFile.res\n```\n\n----------------------------------------\n\nTITLE: JavaScript Type Testing Function Signature in ReScript\nDESCRIPTION: Function signature for testing if a value matches a specific JavaScript type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/types.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet test: ('a, t<'b>) => bool\n```\n\n----------------------------------------\n\nTITLE: Finding maximum key-value pair with undefined in ReScript\nDESCRIPTION: Function signature for finding the maximum key-value pair in a mutable map, returning an undefined type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_31\n\nLANGUAGE: ReScript\nCODE:\n```\nlet maxUndefined: t<'a> => Js.undefined<(key, 'a)>\n```\n\n----------------------------------------\n\nTITLE: Basic Environment Variables Access with Untyped External\nDESCRIPTION: A simple implementation of accessing import.meta.env with a generic type, demonstrating the limitation of not having specific typing.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/module-functions.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\n@val external env: 'a = \"import.meta.env\"\n\nlet getEnv = () => {\n  env\n}\n```\n\n----------------------------------------\n\nTITLE: List Iteration Function Signature\nDESCRIPTION: Function to iterate over a list, applying a function to each element for side effects.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/list.mdx#2025-04-18_snippet_11\n\nLANGUAGE: ReScript\nCODE:\n```\nlet iter: ((. 'a) => unit, t('a)) => unit;\n```\n\n----------------------------------------\n\nTITLE: List Filtering and Transformation\nDESCRIPTION: Functions for filtering, flattening, and mapping with filters\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/list.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet flatten: t<t<'a>> => t<'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet filter: ((. 'a) => bool, t<'a>) => t<'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet filterMap: ((. 'a) => option<'b>, t<'a>) => t<'b>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet countBy: ((. 'a) => bool, list<'a>) => int\n```\n\n----------------------------------------\n\nTITLE: If Statement Without Else in ReScript\nDESCRIPTION: Shows how an if expression without an else branch implicitly returns unit () in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/control-flow.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\nif showMenu {\n  displayMenu()\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nif (showMenu) {\n  displayMenu();\n}\n```\n\n----------------------------------------\n\nTITLE: Combining four Promises with Promise.all4 in ReScript\nDESCRIPTION: Creates a promise that resolves when all four promises resolve, returning a tuple of results.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/promise.mdx#2025-04-18_snippet_8\n\nLANGUAGE: reason\nCODE:\n```\nlet all4: ((t('a0), t('a1), t('a2), t('a3))) => t(('a0, 'a1, 'a2, 'a3));\n```\n\n----------------------------------------\n\nTITLE: Array Element Validation with Every Function\nDESCRIPTION: Tests whether all elements in array pass a predicate function test. Returns true if all elements pass, false otherwise.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/array-2.mdx#2025-04-18_snippet_12\n\nLANGUAGE: reasonml\nCODE:\n```\nlet every: (t('a), 'a => bool) => bool;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet isEven = (x) => {x mod 2 == 0};\nJs.Array2.every([|6, 22, 8, 4|], isEven) == true;\nJs.Array2.every([|6, 22, 7, 4|], isEven) == false;\n```\n\n----------------------------------------\n\nTITLE: HashSet Type Definition - ReScript\nDESCRIPTION: Abstract type definition for the HashSet data structure.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-set-int.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\ntype t\n```\n\n----------------------------------------\n\nTITLE: Array Iteration and Higher-Order Functions\nDESCRIPTION: Collection of higher-order functions for array iteration and transformation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet every: ((. elt) => bool, t) => bool\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet everyi: ((. elt, int) => bool, t) => bool\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet filter: ((. elt) => bool, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet filteri: ((. elt, int) => bool, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet find: ((. elt) => bool, t) => Js.undefined<elt>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet findi: ((. elt, int) => bool, t) => Js.undefined<elt>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet findIndex: ((. elt) => bool, t) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet findIndexi: ((. elt, int) => bool, t) => int\n```\n\n----------------------------------------\n\nTITLE: Searching and joining Int8Array in ReScript\nDESCRIPTION: Functions for searching elements, joining array elements, and creating subarrays.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet includes: (elt, t) => bool\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet indexOf: (elt, t) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet indexOfFrom: (elt, ~from: int, t) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet join: t => string\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet joinWith: (string, t) => string\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet lastIndexOf: (elt, t) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet lastIndexOfFrom: (elt, ~from: int, t) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet slice: (~start: int, ~end_: int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet copy: t => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet sliceFrom: (int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet subarray: (~start: int, ~end_: int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet subarrayFrom: (int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Creating an Uninitialized Array Unsafely in ReScript\nDESCRIPTION: The makeUninitializedUnsafe function creates an uninitialized array without type safety guarantees, which can be more flexible but potentially unsafe.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/array.mdx#2025-04-18_snippet_14\n\nLANGUAGE: ReScript\nCODE:\n```\nlet makeUninitializedUnsafe: int => array<'a>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet arr = Belt.Array.makeUninitializedUnsafe(5)\n\nJs.log(Belt.Array.getExn(arr, 0)) // undefined\n\nBelt.Array.setExn(arr, 0, \"example\")\n\nJs.log(Belt.Array.getExn(arr, 0) == \"example\")\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching on Records with Optional Fields\nDESCRIPTION: Shows pattern matching on a record with optional fields, where the field is treated as its underlying type rather than an option when matching directly on the record.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/record.mdx#2025-04-18_snippet_12\n\nLANGUAGE: rescript\nCODE:\n```\ntype person = {\n  age: int,\n  name?: string,\n}\n\nlet me = {\n  age: 123,\n  name: \"Hello\",\n}\n\nlet isRescript = switch me {\n| {name: \"ReScript\"} => true\n| _ => false\n}\n\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar isRescript;\n\nisRescript = \"Hello\" === \"ReScript\" ? true : false;\n\nvar me = {\n  age: 123,\n  name: \"Hello\"\n};\n```\n\n----------------------------------------\n\nTITLE: Copying Range of Elements with copyWithinFromRange\nDESCRIPTION: Function signature to copy a range of elements from specified start and end indexes to a target position within the Int8Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_11\n\nLANGUAGE: res\nCODE:\n```\nlet copyWithinFromRange: (~to_: int, ~start: int, ~end_: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Uncurried some for MapDict\nDESCRIPTION: Function signature for checking if at least one key-value pair satisfies a predicate using uncurried function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_18\n\nLANGUAGE: reason\nCODE:\n```\nlet someU: (t('k, 'a, 'id), [@bs] (('k, 'a) => bool)) => bool;\n```\n\n----------------------------------------\n\nTITLE: RegExp Matches Function\nDESCRIPTION: Deprecated function signature for accessing matches from a RegExp result.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/re.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\nlet matches: result => array<string>\n```\n\n----------------------------------------\n\nTITLE: Defining value type for MutableSetInt\nDESCRIPTION: Defines the type of set elements as integers.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype value = int\n```\n\n----------------------------------------\n\nTITLE: Retrieving Uint8ClampedArray Properties in ReScript\nDESCRIPTION: Functions to get the underlying buffer, byte length, and byte offset of a Uint8ClampedArray.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_2\n\nLANGUAGE: ReScript\nCODE:\n```\nlet buffer: t => Js_typed_array.array_buffer;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet byteLength: t => int;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet byteOffset: t => int;\n```\n\n----------------------------------------\n\nTITLE: Example of toPrecisionWithPrecision with Zero\nDESCRIPTION: Demonstrates formatting of zero with toPrecisionWithPrecision and specified digits.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/float.mdx#2025-04-18_snippet_23\n\nLANGUAGE: re\nCODE:\n```\n/* prints \"0.0\" */\nJs.log @@ Js.Float.toPrecisionWithPrecision(0., ~digits=2);\n```\n\n----------------------------------------\n\nTITLE: Creating DataView with Offset and Length from ArrayBuffer\nDESCRIPTION: Creates a DataView starting at the specified byte offset with the given length in the ArrayBuffer.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_data-view.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reasonml\nCODE:\n```\nlet fromBufferRange: (Js_typed_array2.array_buffer, ~offset: int, ~length: int) => t;\n```\n\n----------------------------------------\n\nTITLE: Map Conversion Operations\nDESCRIPTION: Functions for converting map to and from other data structures\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-map-int.mdx#2025-04-18_snippet_5\n\nLANGUAGE: reasonml\nCODE:\n```\nlet size: t('a) => int;\n\nlet toList: t('a) => list((key, 'a));\n\nlet toArray: t('a) => array((key, 'a));\n\nlet fromArray: array((key, 'a)) => t('a);\n\nlet keysToArray: t('a) => array(key);\n\nlet valuesToArray: t('a) => array('a);\n```\n\n----------------------------------------\n\nTITLE: Setting Array Values with Offset\nDESCRIPTION: Function signature to set multiple values in a Uint16Array from a standard array with a specified offset.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_7\n\nLANGUAGE: res\nCODE:\n```\nlet setArrayOffset: (array<elt>, int, t) => unit\n```\n\n----------------------------------------\n\nTITLE: Checking if an integer hash set contains a key in ReScript\nDESCRIPTION: Function signature for determining if a specific integer key exists in the hash set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/hash-set-int.mdx#2025-04-18_snippet_7\n\nLANGUAGE: res\nCODE:\n```\nlet has: (t, key) => bool\n```\n\n----------------------------------------\n\nTITLE: encodeURI Function Signature in ReScript\nDESCRIPTION: Function signature for encodeURI which URL-encodes a string while preserving URI structural characters.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/global.mdx#2025-04-18_snippet_14\n\nLANGUAGE: reasonml\nCODE:\n```\nlet encodeURI: string => string;\n```\n\n----------------------------------------\n\nTITLE: Accessing the buffer of UInt32Array\nDESCRIPTION: Defines a function that returns the underlying ArrayBuffer of a UInt32Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet buffer: t => Js_typed_array.array_buffer\n```\n\n----------------------------------------\n\nTITLE: Removing Element from Set in ReScript\nDESCRIPTION: Removes a string element from the set. If the element didn't exist, the set remains unchanged.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-string.mdx#2025-04-18_snippet_15\n\nLANGUAGE: reasonml\nCODE:\n```\nlet remove: (t, value) => t;\n```\n\n----------------------------------------\n\nTITLE: Getting Value with Undefined - ReScript\nDESCRIPTION: Returns a reference to a value from the collection that matches the input value. Returns undefined if the element doesn't exist.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_12\n\nLANGUAGE: res\nCODE:\n```\nlet getUndefined: (t, value) => Js.undefined<value>\n```\n\n----------------------------------------\n\nTITLE: Setting Array Values in Float32Array\nDESCRIPTION: Sets the contents of the Float32Array from an array of elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet setArray: (array<elt>, t) => unit\n```\n\n----------------------------------------\n\nTITLE: Creating ArrayBuffer in ReScript\nDESCRIPTION: Function signature for creating a new ArrayBuffer with a specified length. Elements are initialized to 0.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_array-buffer.mdx#2025-04-18_snippet_1\n\nLANGUAGE: ReScript\nCODE:\n```\nlet make: int => t;\n```\n\n----------------------------------------\n\nTITLE: Creating Float32Array in ReScript\nDESCRIPTION: Functions to create new Float32Arrays from various sources, including arrays, buffers, and lengths.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_11\n\nLANGUAGE: rescript\nCODE:\n```\nlet _BYTES_PER_ELEMENT: int;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet make: array(elt) => t;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromBuffer: Js_typed_array.array_buffer => t;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromBufferOffset: (Js_typed_array.array_buffer, int) => t;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromBufferRange: (Js_typed_array.array_buffer, ~offset: int, ~length: int) => t;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromLength: int => t;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet from: Js_typed_array.array_like(elt) => t;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet create: array(elt) => t;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet of_buffer: Js_typed_array.array_buffer => t;\n```\n\n----------------------------------------\n\nTITLE: Iterating and Transforming Uint16Array in ReScript\nDESCRIPTION: Higher-order functions for iterating over and transforming Uint16Array data.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_uint-16-array.mdx#2025-04-18_snippet_8\n\nLANGUAGE: ReScript\nCODE:\n```\nlet every: ((. elt) => bool, t) => bool;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet everyi: ((. elt, int) => bool, t) => bool;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet filter: ((. elt) => bool, t) => t;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet filteri: ((. elt, int) => bool, t) => t;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet find: ((. elt) => bool, t) => Js.undefined(elt);\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet findi: ((. elt, int) => bool, t) => Js.undefined(elt);\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet findIndex: ((. elt) => bool, t) => int;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet findIndexi: ((. elt, int) => bool, t) => int;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet forEach: ((. elt) => unit, t) => unit;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet forEachi: ((. elt, int) => unit, t) => unit;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet map: ((. elt) => 'b, t) => typed_array('b);\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet mapi: ((. elt, int) => 'b, t) => typed_array('b);\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet reduce: ((. 'b, elt) => 'b, 'b, t) => 'b;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet reducei: ((. 'b, elt, int) => 'b, 'b, t) => 'b;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet reduceRight: ((. 'b, elt) => 'b, 'b, t) => 'b;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet reduceRighti: ((. 'b, elt, int) => 'b, 'b, t) => 'b;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet some: ((. elt) => bool, t) => bool;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet somei: ((. elt, int) => bool, t) => bool;\n```\n\n----------------------------------------\n\nTITLE: Dynamic Pop Iteration with Curried Function in ReScript\nDESCRIPTION: Function signature for iterating and popping elements using a curried function. Useful for worklist algorithms.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-stack.mdx#2025-04-18_snippet_14\n\nLANGUAGE: ReScript\nCODE:\n```\nlet dynamicPopIter: (t<'a>, 'a => unit) => unit\n```\n\n----------------------------------------\n\nTITLE: Partitioning elements with uncurried function in ReScript with MutableSetInt\nDESCRIPTION: Splits the set into two sets based on the given uncurried predicate function. This is an internal function primarily used for optimization.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_30\n\nLANGUAGE: rescript\nCODE:\n```\nlet partitionU: (t, [@bs] (value => bool)) => (t, t);\n```\n\n----------------------------------------\n\nTITLE: Adding ReScript Core to Dependencies\nDESCRIPTION: JSON configuration diff showing how to add ReScript Core to the project dependencies\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/migrate-to-v11.mdx#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n {\n   \"bs-dependencies\": [\n    \"@rescript/core\"\n   ]\n }\n```\n\n----------------------------------------\n\nTITLE: Configuring Shims for GenType\nDESCRIPTION: Configuration for shims in rescript.json, which provide type definitions for library types when exporting certain ReScript data types to JavaScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/typescript-integration.mdx#2025-04-18_snippet_9\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"gentypeconfig\": {\n    \"shims\": {\n      \"Js\": \"Js\",\n      \"ReactEvent\": \"ReactEvent\",\n      \"RescriptPervasives\": \"RescriptPervasives\",\n      \"ReasonReact\": \"ReactShim\"\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Result type in ReScript\nDESCRIPTION: Defines the basic Result type (t) with two variants: Ok for successful operations and Error for failed operations. The type is generic, accepting two type parameters 'good' for success values and 'bad' for error values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/result.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\ntype t('good, 'bad) =\n  | Ok('good)\n  | Error('bad);\n```\n\n----------------------------------------\n\nTITLE: decodeURI Function Signature in ReScript\nDESCRIPTION: Function signature for decodeURI which decodes a URL-encoded string produced by encodeURI.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/global.mdx#2025-04-18_snippet_15\n\nLANGUAGE: reasonml\nCODE:\n```\nlet decodeURI: string => string;\n```\n\n----------------------------------------\n\nTITLE: Creating Map from Array in ReScript MapInt Module\nDESCRIPTION: Function signature for creating a map from an array of key-value pairs.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-int.mdx#2025-04-18_snippet_22\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromArray: array<(key, 'v)> => t<'v>\n```\n\n----------------------------------------\n\nTITLE: Defining String Element Type\nDESCRIPTION: Type definition for string elements used in the sort array module.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/sort-array-string.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\ntype element = string\n```\n\n----------------------------------------\n\nTITLE: clearInterval Example in ReScript\nDESCRIPTION: Example of using clearInterval to cancel a repeating task. Demonstrates a snoozing alarm clock implementation with interval management.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/global.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reasonml\nCODE:\n```\n/* API for a somewhat aggressive snoozing alarm clock */\n\nlet punchSleepyGuy = () => Js.log(\"Punch\");\n\nlet interval = ref(Js.Nullable.null);\n\nlet remind = () => {\n  Js.log(\"Wake Up!\");\n  punchSleepyGuy();\n};\n\nlet snooze = mins =>\n  interval :=\n    Js.Nullable.return(Js.Global.setInterval(remind, mins * 60 * 1000));\n\nlet cancel = () =>\n  Js.Nullable.iter(interval^, (. intervalId) =>\n    Js.Global.clearInterval(intervalId)\n  );\n```\n\n----------------------------------------\n\nTITLE: Getting Array Length\nDESCRIPTION: Returns the number of elements in the array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-64-array.mdx#2025-04-18_snippet_8\n\nLANGUAGE: reason\nCODE:\n```\nlet length: t => int;\n```\n\n----------------------------------------\n\nTITLE: Getting map size in ReScript\nDESCRIPTION: Returns the number of bindings in the map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_18\n\nLANGUAGE: reasonml\nCODE:\n```\nlet size: t('a) => int;\n```\n\n----------------------------------------\n\nTITLE: Declaration of setupChromeDebugger Function in ReScript\nDESCRIPTION: Defines a function for setting up Chrome's debugger. This function takes no arguments (unit) and returns nothing (unit). It's likely used to initialize debugging capabilities for a ReScript application in Chrome.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/debug.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nlet setupChromeDebugger: unit => unit;\n```\n\n----------------------------------------\n\nTITLE: Test if Some Float32Array Elements Pass Indexed Condition\nDESCRIPTION: Tests whether at least one element in the Float32Array passes the provided function test that includes the element index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_49\n\nLANGUAGE: rescript\nCODE:\n```\nlet somei: ((. elt, int) => bool, t) => bool\n```\n\n----------------------------------------\n\nTITLE: Getting Original Input String from RegExp Result\nDESCRIPTION: Function that returns the original input string that was used for the RegExp match.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/re.mdx#2025-04-18_snippet_5\n\nLANGUAGE: reason\nCODE:\n```\nlet input: result => string;\n```\n\n----------------------------------------\n\nTITLE: Finding Index of First Matching Element in TypedArray in ReScript\nDESCRIPTION: Function signature for finding the index of the first element in a Uint8ClampedArray that satisfies the provided testing function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_38\n\nLANGUAGE: res\nCODE:\n```\nlet findIndex: ((. elt) => bool, t) => int\n```\n\n----------------------------------------\n\nTITLE: Accessing Ref Contents in ReScript\nDESCRIPTION: Demonstrates how to access the actual value stored in a ref container through its contents field.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/mutation.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet five = myValue.contents // 5\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar five = myValue.contents;\n```\n\n----------------------------------------\n\nTITLE: Defining Int16Array Types in ReScript\nDESCRIPTION: Defines the element type, typed array type, and the main Int16Array type alias.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_int-16-array.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype elt = int\ntype typed_array<'a> = Js_typed_array2.Int16Array.typed_array<'a>\ntype t = typed_array<elt>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Maximum Value from String Set with maxUndefined in ReScript\nDESCRIPTION: Returns the maximum value of a string set collection, or undefined if the collection is empty. This function uses JavaScript's undefined type to represent absence of a value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/set-string.mdx#2025-04-18_snippet_7\n\nLANGUAGE: res\nCODE:\n```\nlet maxUndefined: t => Js.undefined<value>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet s0 = Belt.Set.String.empty\nlet s1 = Belt.Set.String.fromArray([\"apple\", \"orange\"])\n\ns0->Belt.Set.String.maxUndefined /* undefined */\ns1->Belt.Set.String.maxUndefined /* orange */\n```\n\n----------------------------------------\n\nTITLE: Int8Array Fill Operations\nDESCRIPTION: Methods for filling array elements with values\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_int-8-array.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reasonml\nCODE:\n```\nlet fillInPlace: (elt, t) => t;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet fillFromInPlace: (elt, ~from: int, t) => t;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet fillRangeInPlace: (elt, ~start: int, ~end_: int, t) => t;\n```\n\n----------------------------------------\n\nTITLE: Join Float32Array Elements into String\nDESCRIPTION: Joins all elements of the Float32Array into a string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-32-array.mdx#2025-04-18_snippet_21\n\nLANGUAGE: rescript\nCODE:\n```\nlet join: t => string;\n```\n\n----------------------------------------\n\nTITLE: List Nth Element Function Signature in ReScript\nDESCRIPTION: Defines the signature for the 'nth' function, which returns the nth element of a list as an option.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/list.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet nth: (t<'a>, int) => option<'a>\n```\n\n----------------------------------------\n\nTITLE: Array Search and Iteration Methods\nDESCRIPTION: Methods for searching, filtering and iterating over array elements\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_int-16-array.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reason\nCODE:\n```\nlet includes: (elt, t) => bool;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet indexOf: (elt, t) => int;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet forEach: ((. elt) => unit, t) => unit;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet map: ((. elt) => 'b, t) => typed_array('b);\n```\n\n----------------------------------------\n\nTITLE: Slicing and Copying Uint16Array in ReScript\nDESCRIPTION: Functions for creating new Uint16Arrays from existing ones through slicing and copying.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_7\n\nLANGUAGE: reason\nCODE:\n```\nlet slice: (~start: int, ~end_: int, t) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet copy: t => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet sliceFrom: (int, t) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet subarray: (~start: int, ~end_: int, t) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet subarrayFrom: (int, t) => t;\n```\n\n----------------------------------------\n\nTITLE: Example of iter Usage in ReScript\nDESCRIPTION: Demonstrates how to use the iter function to log a potential message.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/undefined.mdx#2025-04-18_snippet_10\n\nLANGUAGE: res\nCODE:\n```\nlet maybeSay = (maybeMessage: Js.undefined<string>) =>\n  Js.Undefined.iter(maybeMessage, (. message) => Js.log(message))\n```\n\n----------------------------------------\n\nTITLE: Reducing TypedArray Elements in ReScript\nDESCRIPTION: Function signature for applying a function against an accumulator and each element in a Uint8ClampedArray to reduce it to a single value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_44\n\nLANGUAGE: res\nCODE:\n```\nlet reduce: ((. 'b, elt) => 'b, 'b, t) => 'b\n```\n\n----------------------------------------\n\nTITLE: Converting Integer to String in ReScript\nDESCRIPTION: Basic conversion of an integer to string representation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/int.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\n/* prints \"123456789\" */\nJs.log(Js.Int.toString(123456789))\n```\n\n----------------------------------------\n\nTITLE: Array copyWithin Methods in ReScript\nDESCRIPTION: Functions to copy a sequence of elements within the array to another position, with various parameter options.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-32-array.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\nlet copyWithin: (~to_: int, t) => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet copyWithinFrom: (~to_: int, ~from: int, t) => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet copyWithinFromRange: (~to_: int, ~start: int, ~end_: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Using Abstract Types with JS Object Converters in ReScript\nDESCRIPTION: Uses the newType option with @deriving(jsConverter) to create abstract types for JavaScript objects, hiding implementation details and providing more type safety.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/generate-converters-accessors.mdx#2025-04-18_snippet_6\n\nLANGUAGE: res\nCODE:\n```\n@deriving({jsConverter: newType})\ntype coordinates = {\n  x: int,\n  y: int,\n}\n```\n\nLANGUAGE: res\nCODE:\n```\nlet coordinatesToJs: coordinates => abs_coordinates;\n\nlet coordinatesFromJs: abs_coordinates => coordinates;\n```\n\n----------------------------------------\n\nTITLE: Find Index of Value in Float32Array from Specific Position\nDESCRIPTION: Returns the first index at which the specified value can be found in the Float32Array, starting from the specified position.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-32-array.mdx#2025-04-18_snippet_20\n\nLANGUAGE: rescript\nCODE:\n```\nlet indexOfFrom: (elt, ~from: int, t) => int;\n```\n\n----------------------------------------\n\nTITLE: Filter Float32Array Elements with Index\nDESCRIPTION: Creates a new Float32Array with all elements that pass the test implemented by the provided function that includes the element index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_35\n\nLANGUAGE: rescript\nCODE:\n```\nlet filteri: ((. elt, int) => bool, t) => t\n```\n\n----------------------------------------\n\nTITLE: Getting bucket distribution histogram of an integer hash set in ReScript\nDESCRIPTION: Function signature for retrieving an array representing the distribution of elements across buckets for analysis of hash efficiency.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/hash-set-int.mdx#2025-04-18_snippet_18\n\nLANGUAGE: res\nCODE:\n```\nlet getBucketHistogram: t => array<int>\n```\n\n----------------------------------------\n\nTITLE: Configuring External Stdlib in rescript.json\nDESCRIPTION: JSON configuration for rescript.json that defines @rescript/std as the external stdlib, enabling proper import paths in the compiled JavaScript output.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/build-external-stdlib.mdx#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...\n  \"external-stdlib\" : \"@rescript/std\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using sign_float function to determine sign of float in ReScript\nDESCRIPTION: The sign_float function returns the sign of its float argument: -1.0 if negative, 0.0 if zero, 1.0 if positive. It takes a float as input and returns a float.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/math.mdx#2025-04-18_snippet_29\n\nLANGUAGE: res\nCODE:\n```\nlet sign_float: float => float\n```\n\n----------------------------------------\n\nTITLE: Defining element type in Belt.SortArrayInt\nDESCRIPTION: Defines the element type for the SortArrayInt module as int, indicating that this specialized module works with integer arrays.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/sort-array-int.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype element = int;\n```\n\n----------------------------------------\n\nTITLE: Popping Element from MutableStack as Option in ReScript\nDESCRIPTION: Function signature for popping an element from the stack, returning an option type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-stack.mdx#2025-04-18_snippet_6\n\nLANGUAGE: ReScript\nCODE:\n```\nlet pop: t<'a> => option<'a>\n```\n\n----------------------------------------\n\nTITLE: Defining HTML Element Types in ReScript\nDESCRIPTION: Type definitions for HTML element interfaces like buttons, divs, inputs etc.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/dom.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reason\nCODE:\n```\ntype htmlElement\ntype htmlAnchorElement\ntype htmlButtonElement\ntype htmlInputElement\ntype htmlDivElement\ntype htmlFormElement\n```\n\n----------------------------------------\n\nTITLE: Get Byte Offset of Float32Array\nDESCRIPTION: Returns the offset in bytes of the Float32Array from the start of its ArrayBuffer.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-32-array.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet byteOffset: t => int;\n```\n\n----------------------------------------\n\nTITLE: Installing ReScript with pnpm\nDESCRIPTION: Command to create a new ReScript project using pnpm's create functionality.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/installation.mdx#2025-04-18_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npnpm create rescript-app\n```\n\n----------------------------------------\n\nTITLE: Checking if Value Exists in Array\nDESCRIPTION: Function signature to check if an array includes a specific element, added in ES2016.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_18\n\nLANGUAGE: res\nCODE:\n```\nlet includes: (elt, t) => bool\n```\n\n----------------------------------------\n\nTITLE: Getting Character Code at Index in ReScript\nDESCRIPTION: The charCodeAt function returns the UTF-16 code unit at a specified index as a float. Returns NaN for out-of-range indices.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string.mdx#2025-04-18_snippet_9\n\nLANGUAGE: reason\nCODE:\n```\nlet charCodeAt: (int, t) => float;\n```\n\nLANGUAGE: reason\nCODE:\n```\nJs.String.charCodeAt(0, {js|😺|js}) == 0xd83d->float_of_int;\nJs.String.codePointAt(0, {js|😺|js}) == Some(0x1f63a);\n```\n\n----------------------------------------\n\nTITLE: Float32Array Type Definitions\nDESCRIPTION: Core type definitions for Float32Array including element type, typed array type and main array type alias.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_float-32-array.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype elt = float\ntype typed_array<'a>\ntype t = typed_array<elt>\n```\n\n----------------------------------------\n\nTITLE: Defining Vector Type in ReScript\nDESCRIPTION: Type definition for the vector data structure as an array wrapper.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/vector.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\ntype t<'a> = array<'a>\n```\n\n----------------------------------------\n\nTITLE: Creating Undefined Values with return\nDESCRIPTION: Function to construct a value of Js.undefined('a) containing a value of 'a.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/undefined.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\nlet return: 'a => t<'a>\n```\n\n----------------------------------------\n\nTITLE: Implementation File with Mutable Field\nDESCRIPTION: Shows how to define mutable fields in the implementation file while hiding mutability in the interface.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/generate-converters-accessors.mdx#2025-04-18_snippet_17\n\nLANGUAGE: rescript\nCODE:\n```\n/* test.res */\n@deriving(abstract)\ntype cord = {\n  @optional mutable x: int,\n  y: int,\n};\n```\n\n----------------------------------------\n\nTITLE: Traditional Optional Record Fields\nDESCRIPTION: Example of how optional fields were handled in ReScript before version 10\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2022-08-25-release-10-0-0.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\ntype user = {\n  name: string,\n  age: option<int>\n}\n\nlet userWithoutAge = {\n  name: \"Name\",\n  age: None,\n}\n\nlet userWithAge = {\n  name: \"Name\",\n  age: Some(34),\n}\n```\n\n----------------------------------------\n\nTITLE: Reading an Int32 value with little-endian format in ReScript\nDESCRIPTION: Function signature for getting a signed 32-bit integer from the specified byte offset with little-endian format.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_data-view.mdx#2025-04-18_snippet_15\n\nLANGUAGE: rescript\nCODE:\n```\nlet getInt32LittleEndian: (t, int) => int\n```\n\n----------------------------------------\n\nTITLE: Copying within UInt32Array with from index\nDESCRIPTION: Defines a function that copies a sequence of elements within the array starting from a specific position to another position.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rescript\nCODE:\n```\nlet copyWithinFrom: (~to_: int, ~from: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Finding First Matching Element with Index in TypedArray in ReScript\nDESCRIPTION: Function signature for finding the first element in a Uint8ClampedArray that satisfies a test implemented by a function that receives both the element and its index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_37\n\nLANGUAGE: res\nCODE:\n```\nlet findi: ((. elt, int) => bool, t) => Js.undefined<elt>\n```\n\n----------------------------------------\n\nTITLE: Basic Array Operations\nDESCRIPTION: Basic array access and manipulation functions including get, set, buffer access, and length operations\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_float-64-array.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet unsafe_get: (t, int) => elt\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet unsafe_set: (t, int, elt) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet buffer: t => Js_typed_array.array_buffer\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet byteLength: t => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet byteOffset: t => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet length: t => int\n```\n\n----------------------------------------\n\nTITLE: Int16Array Type Definitions\nDESCRIPTION: Core type definitions for Int16Array including element type, typed array type, and the main array type t.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_int-16-array.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype elt = int\ntype typed_array<'a>\ntype t = typed_array<elt>\n```\n\n----------------------------------------\n\nTITLE: Testing for Finite Values in ReScript\nDESCRIPTION: Provides a function to check if a float value is finite. Returns false for infinity, negative infinity, and NaN.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/float.mdx#2025-04-18_snippet_2\n\nLANGUAGE: re\nCODE:\n```\nlet isFinite: float => bool;\n```\n\n----------------------------------------\n\nTITLE: Float to Integer Conversion with unsafe_trunc in ReScript\nDESCRIPTION: Truncates a float value to an integer by removing its fractional digits. May return values outside the int range (-2147483648 to 2147483647) as JavaScript can represent integers up to ±(2^53-1).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/math.mdx#2025-04-18_snippet_51\n\nLANGUAGE: rescript\nCODE:\n```\nlet unsafe_trunc: float => int;\n```\n\n----------------------------------------\n\nTITLE: List Reverse Append Function Signature in ReScript\nDESCRIPTION: Defines the signature for the 'revAppend' function, which reverses the first list and appends it to the second.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/list.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nlet revAppend: (t<'a>, t<'a>) => t<'a>\n```\n\n----------------------------------------\n\nTITLE: Join Array Elements with Separator\nDESCRIPTION: Joins all elements of the array into a string using the specified separator.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-64-array.mdx#2025-04-18_snippet_22\n\nLANGUAGE: reason\nCODE:\n```\nlet joinWith: (string, t) => string;\n```\n\n----------------------------------------\n\nTITLE: Getting Year from Date in ReScript (Deprecated)\nDESCRIPTION: ReScript binding for the deprecated JavaScript Date.getYear method. Users should use getFullYear() instead.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_37\n\nLANGUAGE: res\nCODE:\n```\nlet getYear: t => float\n```\n\n----------------------------------------\n\nTITLE: Defining array_like Type in ReScript\nDESCRIPTION: Declares the array_like type, which is a generic type representing JavaScript array-like objects in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2.mdx#2025-04-18_snippet_1\n\nLANGUAGE: ReScript\nCODE:\n```\ntype array_like('a);\n```\n\n----------------------------------------\n\nTITLE: Array Modification Methods\nDESCRIPTION: Methods for modifying array contents including copying, filling, reversing and sorting operations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_float-64-array.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\nlet setArray: (array(elt), t) => unit;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet setArrayOffset: (array(elt), int, t) => unit;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet copyWithin: (~to_: int, t) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet copyWithinFrom: (~to_: int, ~from: int, t) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet copyWithinFromRange: (~to_: int, ~start: int, ~end_: int, t) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet fillInPlace: (elt, t) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet fillFromInPlace: (elt, ~from: int, t) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet fillRangeInPlace: (elt, ~start: int, ~end_: int, t) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet reverseInPlace: t => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet sortInPlace: t => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet sortInPlaceWith: ((. elt, elt) => int, t) => t;\n```\n\n----------------------------------------\n\nTITLE: Getting Array Length\nDESCRIPTION: Returns the number of elements in the typed array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_type-s.mdx#2025-04-18_snippet_8\n\nLANGUAGE: res\nCODE:\n```\nlet length: t => int\n```\n\n----------------------------------------\n\nTITLE: Defining Storage Type in ReScript\nDESCRIPTION: Defines the abstract type 't' for storage objects in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/dom/storage.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype t\n```\n\n----------------------------------------\n\nTITLE: Type Module Interface Definition\nDESCRIPTION: Module type definition specifying required type structure for typed array implementations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nmodule type Type = {type t;};\n```\n\n----------------------------------------\n\nTITLE: Defining Comparable Module Type in ReScript\nDESCRIPTION: Module type definition for comparable types that includes an identity type and comparison function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/id.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nmodule type Comparable = {\n  type identity\n  type t\n  let cmp: Belt.Id.cmp<t, identity>\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing Storage in ReScript\nDESCRIPTION: External binding to clear all items from storage.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/dom/storage2.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nexternal clear: t => unit = \"clear\"\n```\n\n----------------------------------------\n\nTITLE: Comparing maps with curried function in ReScript\nDESCRIPTION: Function signature for comparing two mutable maps using a curried comparison function. Compares by size first, then by key-value pairs if sizes are equal.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_7\n\nLANGUAGE: ReScript\nCODE:\n```\nlet cmp: (t<'a>, t<'a>, ('a, 'a) => int) => int\n```\n\n----------------------------------------\n\nTITLE: Defining the HashSetString set type\nDESCRIPTION: Defines the abstract type t representing a HashSetString set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-set-string.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\ntype t;\n```\n\n----------------------------------------\n\nTITLE: Defining Tagged JavaScript Types in ReScript\nDESCRIPTION: Type definition for tagged JavaScript values that includes both the type information and the actual value, useful for pattern matching on JavaScript values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/types.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\ntype tagged_t =\n  | JSFalse\n  | JSTrue\n  | JSNull\n  | JSUndefined\n  | JSNumber(float)\n  | JSString(string)\n  | JSFunction(function_val)\n  | JSObject(obj_val)\n  | JSSymbol(symbol)\n```\n\n----------------------------------------\n\nTITLE: Mapping UInt32Array elements with index\nDESCRIPTION: Defines a function that creates a new array with the results of calling a provided function on every element in the array, with access to the element index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_43\n\nLANGUAGE: rescript\nCODE:\n```\nlet mapi: ((. elt, int) => 'b, t) => typed_array<'b>\n```\n\n----------------------------------------\n\nTITLE: Basic If-Else Implementation in ReScript\nDESCRIPTION: Initial implementation using basic if-else conditions to handle option boolean conversion. This approach is verbose and prone to errors.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_17\n\nLANGUAGE: rescript\nCODE:\n```\nlet optionBoolToBool = opt => {\n  if opt == None {\n    false\n  } else if opt === Some(true) {\n    true\n  } else {\n    false\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction optionBoolToBool(opt) {\n  if (opt === undefined) {\n    return false;\n  } else {\n    return opt === true;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Function Syntax in ReScript and JavaScript\nDESCRIPTION: Demonstrates the differences in function syntax between ReScript and JavaScript, including arrow functions and named functions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/overview.mdx#2025-04-18_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\narg => retVal\n```\n\nLANGUAGE: ReScript\nCODE:\n```\narg => retVal\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction named(arg) {...}\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet named = (arg) => {...}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst f = function(arg) {...}\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet f = (arg) => {...}\n```\n\n----------------------------------------\n\nTITLE: Array Modification Functions for Uint8Array\nDESCRIPTION: Functions for in-place array operations like reverse and sort.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_7\n\nLANGUAGE: res\nCODE:\n```\nlet reverseInPlace: t => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet sortInPlace: t => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet sortInPlaceWith: ((. elt, elt) => int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Handling Special Global Values in ReScript\nDESCRIPTION: Shows how to safely handle special global values like __DEV__ that may not always exist using the %external syntax.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/bind-to-global-js-values.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nswitch %external(__DEV__) {\n| Some(_) => Js.log(\"dev mode\")\n| None => Js.log(\"production mode\")\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar match = typeof __DEV__ === \"undefined\" ? undefined : __DEV__;\n\nif (match !== undefined) {\n  console.log(\"dev mode\");\n} else {\n  console.log(\"production mode\");\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Size of MutableStack in ReScript\nDESCRIPTION: Function signature for getting the number of elements in the stack.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-stack.mdx#2025-04-18_snippet_10\n\nLANGUAGE: ReScript\nCODE:\n```\nlet size: t<'a> => int\n```\n\n----------------------------------------\n\nTITLE: Defining link Method Signature in ReScript\nDESCRIPTION: Defines the signature for the link method that creates an HTML anchor element with an href attribute. This method is noted as deprecated in web standards.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/string-2.mdx#2025-04-18_snippet_36\n\nLANGUAGE: res\nCODE:\n```\nlet link: (t, t) => t\n```\n\n----------------------------------------\n\nTITLE: Using If Statement Without Else in ReScript\nDESCRIPTION: Shows how an if statement without an else branch implicitly returns the unit value () when the condition is false.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/control-flow.mdx#2025-04-18_snippet_1\n\nLANGUAGE: re\nCODE:\n```\nif (showMenu) {\n  displayMenu();\n};\n```\n\nLANGUAGE: ml\nCODE:\n```\nif showMenu then\n  displayMenu ()\n```\n\nLANGUAGE: js\nCODE:\n```\nif (showMenu) {\n  displayMenu();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ArrayBuffer in ReScript\nDESCRIPTION: Function signature for creating a new ArrayBuffer with specified length. All elements are initialized to 0.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array-2_array-buffer.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet make: int => t\n```\n\n----------------------------------------\n\nTITLE: Using %debugger Extension Point in ReScript\nDESCRIPTION: Demonstrates how to use the %debugger extension point to insert a JavaScript debugger statement in ReScript code. This causes the JavaScript debugger to pause execution at that point when running in a browser or Node.js environment.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/extension_debugger.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\nlet f = (x, y) => {\n  %debugger\n  x + y\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction f(x, y) {\n  debugger;\n  return (x + y) | 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Elements to MutableSet in ReasonML\nDESCRIPTION: Function signature for adding multiple elements from an array to a MutableSet at once.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_16\n\nLANGUAGE: reasonml\nCODE:\n```\nlet mergeMany: (t('value, 'id), array('value)) => unit;\n```\n\n----------------------------------------\n\nTITLE: Defining Set Type in ReScript MutableSetString\nDESCRIPTION: Abstract type definition for the set container.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\ntype t\n```\n\n----------------------------------------\n\nTITLE: Basic ReScript Example for Node.js\nDESCRIPTION: A simple ReScript example that logs 'Hello' to the console, demonstrating how ReScript code can be compiled and run with Node.js.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2025-03-05-what-can-i-do-with-rescript.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\n// index.res\nConsole.log(\"Hello\")\n```\n\n----------------------------------------\n\nTITLE: JavaScript Output with External Stdlib Imports\nDESCRIPTION: The compiled JavaScript output showing how the external stdlib configuration affects the import paths, requiring modules from @rescript/std instead of the default paths.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/build-external-stdlib.mdx#2025-04-18_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// Note the require path starting with \"@rescript/std\".\nvar Belt_Array = require(\"@rescript/std/lib/js/belt_Array.js\");\n\nBelt_Array.forEach([1, 2, 3], function (num) {\n  console.log(num);\n});\n```\n\n----------------------------------------\n\nTITLE: Providing Download Links for ReScript Brandmark Variants\nDESCRIPTION: This snippet shows how to provide download links for various versions of the ReScript brandmark (white and red) in both SVG and PNG formats using Markdown syntax.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/brand.mdx#2025-04-18_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n[white.svg](/static/brand/rescript-logo-white.svg) | [white.png](/static/brand/rescript-logo-white.png) | [red.svg](/static/brand/rescript-logo.svg) | [red.png](/static/brand/rescript-logo.png)\n```\n\n----------------------------------------\n\nTITLE: Defining String Enum in TypeScript\nDESCRIPTION: Demonstrates how to define a string enum in TypeScript for direction values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/polymorphic-variant.mdx#2025-04-18_snippet_16\n\nLANGUAGE: js\nCODE:\n```\n// direction.js\nenum Direction {\n  Up = \"UP\",\n  Down = \"DOWN\",\n  Left = \"LEFT\",\n  Right = \"RIGHT\",\n}\n\nexport const myDirection = Direction.Up\n```\n\n----------------------------------------\n\nTITLE: Creating String from Character Code in ReScript\nDESCRIPTION: The fromCharCode function creates a string containing the character corresponding to a given number between 0 and 65535. For values outside this range, only the lower 16 bits are used.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\nlet fromCharCode: int => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nJs.String2.fromCharCode(65) == \"A\";\nJs.String2.fromCharCode(0x3c8) == {js|ψ|js};\nJs.String2.fromCharCode(0xd55c) == {js|한|js};\nJs.String2.fromCharCode(-64568) == {js|ψ|js};\n```\n\n----------------------------------------\n\nTITLE: List Head Function Signature\nDESCRIPTION: Function to get the first element of a list as an option.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/list.mdx#2025-04-18_snippet_4\n\nLANGUAGE: ReScript\nCODE:\n```\nlet hd: t('a) => option('a);\n```\n\n----------------------------------------\n\nTITLE: Creating Uint8Array from Buffer\nDESCRIPTION: Creates a new Uint8Array view for the entire ArrayBuffer.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_52\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromBuffer: Js_typed_array.array_buffer => t\n```\n\n----------------------------------------\n\nTITLE: Create Subarray from Float32Array Starting at Index\nDESCRIPTION: Returns a new Float32Array view of the same ArrayBuffer, viewing elements from the specified start index to the end.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-32-array.mdx#2025-04-18_snippet_29\n\nLANGUAGE: rescript\nCODE:\n```\nlet subarrayFrom: (int, t) => t;\n```\n\n----------------------------------------\n\nTITLE: Inline Attribute Example in ReScript\nDESCRIPTION: Demonstrates the @inline attribute which causes a value to be inlined at its usage sites, eliminating the variable reference in the JavaScript output.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/attribute.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\n@inline\nlet mode = \"dev\"\n\nlet mode2 = mode\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar mode2 = \"dev\";\n```\n\n----------------------------------------\n\nTITLE: Filtering Set with Uncurried Function in ReScript MutableSetString\nDESCRIPTION: Creates a new set with only elements that satisfy an uncurried predicate function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_28\n\nLANGUAGE: reason\nCODE:\n```\nlet keepU: (t, [@bs] (value => bool)) => t;\n```\n\n----------------------------------------\n\nTITLE: Converting an Entire Codebase to ReScript\nDESCRIPTION: Command to convert all Reason files in a project to ReScript syntax in a single operation. Recommended for users confident in making a complete transition.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/migrate-from-bucklescript-reason.mdx#2025-04-18_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nnpx rescript convert -all\n```\n\n----------------------------------------\n\nTITLE: ReScript Object Value Type Definition\nDESCRIPTION: Defines an opaque type for JavaScript object values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/types.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reason\nCODE:\n```\ntype obj_val;\n```\n\n----------------------------------------\n\nTITLE: Checking ReScript Set Internal Invariant\nDESCRIPTION: Internal utility function that validates set invariants. Raises an exception when the invariant is not maintained.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/set-int.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nlet checkInvariantInternal: t => unit\n```\n\n----------------------------------------\n\nTITLE: Adding ReScript Core to Project Dependencies\nDESCRIPTION: JSON diff showing how to add @rescript/core to the project's dependencies in rescript.json configuration file, which is a prerequisite for using the new standard library.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/migrate-to-v11.mdx#2025-04-18_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n {\n   \"bs-dependencies\": [\n+    \"@rescript/core\"\n   ]\n }\n```\n\n----------------------------------------\n\nTITLE: Updating value with curried function in ReScript\nDESCRIPTION: Function signature for updating a value in a mutable map using a curried function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_41\n\nLANGUAGE: ReScript\nCODE:\n```\nlet update: (t<'a>, key, option<'a> => option<'a>) => unit\n```\n\n----------------------------------------\n\nTITLE: Map KeepU Function Signature\nDESCRIPTION: Uncurried version of keep operation for filtering map entries.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\nlet keepU: (t<'k, 'v, 'id>, (. 'k, 'v) => bool) => t<'k, 'v, 'id>\n```\n\n----------------------------------------\n\nTITLE: ReScript URL Example Structure\nDESCRIPTION: Example showing how a URL is parsed into the ReScript router's URL record structure.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/router.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\n{\n  path: list{\"book\", \"10\", \"edit\"},\n  hash: \"author\",\n  search: \"name=Jane\"\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Substrings with Function (One Capture) in ReScript\nDESCRIPTION: The unsafeReplaceBy1 function replaces matches of a pattern with one set of capturing parentheses using a provided function. The function receives the matched string, captured string, offset, and whole string as parameters.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string.mdx#2025-04-18_snippet_29\n\nLANGUAGE: rescript\nCODE:\n```\nlet unsafeReplaceBy1: (Js_re.t, (t, t, int, t) => t, t) => t;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet str = \"increment 23\";\nlet re = [%re \"/increment (\\\\d+)/g\"];\nlet matchFn = (_matchPart, p1, _offset, wholeString) =>\n  wholeString ++ \" is \" ++ Belt.Int.toString(int_of_string(p1) + 1);\n\nJs.String.unsafeReplaceBy1(re, matchFn, str)\n  == \"increment 23 is 24\";\n```\n\n----------------------------------------\n\nTITLE: Defining HashSetInt container type in ReScript\nDESCRIPTION: Defines the opaque type t for the HashSetInt module which represents the container for integer hash sets.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/hash-set-int.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\ntype t\n```\n\n----------------------------------------\n\nTITLE: Checking if Array Includes Value\nDESCRIPTION: Function signature to determine whether an Int8Array includes a specified value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_18\n\nLANGUAGE: res\nCODE:\n```\nlet includes: (elt, t) => bool\n```\n\n----------------------------------------\n\nTITLE: Getting Byte Offset of Int8Array\nDESCRIPTION: Function signature to get the byte offset of the Int8Array in its ArrayBuffer.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\nlet byteOffset: t => int\n```\n\n----------------------------------------\n\nTITLE: Float Division in ReScript\nDESCRIPTION: The / operator performs division of two float values. It can be opened in a module to avoid dot-notation, but this may yield a shadow warning.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/float.mdx#2025-04-18_snippet_7\n\nLANGUAGE: ReScript\nCODE:\n```\nopen Belt.Float\nJs.log(4.0 / 2.0 === 2.0) /* true */\n```\n\n----------------------------------------\n\nTITLE: Accessing Record Fields in ReScript\nDESCRIPTION: Demonstrates how to access fields of a record value using standard dot notation syntax. Fields are accessed directly by their name.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/record.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet name = me.name\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar name = \"Big ReScript\";\n```\n\n----------------------------------------\n\nTITLE: Removing Multiple Elements from MutableSet in ReasonML\nDESCRIPTION: Function signature for removing multiple elements from an array from a MutableSet at once.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_21\n\nLANGUAGE: reasonml\nCODE:\n```\nlet removeMany: (t('value, 'id), array('value)) => unit;\n```\n\n----------------------------------------\n\nTITLE: Creating an Empty MutableQueue in ReScript\nDESCRIPTION: The 'make' function creates and returns a new, initially empty queue.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-queue.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet make: unit => t<'a>\n```\n\n----------------------------------------\n\nTITLE: Incorrect usage of refs with component functions in ReScript\nDESCRIPTION: This example demonstrates that you cannot directly pass a ref attribute to a component function in ReScript. This will result in a compilation error, suggesting to use the forwardRef API instead.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/refs-and-the-dom.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nmodule MyComp = {\n  @react.component\n  let make = (~ref) => <input />\n}\n\n@react.component\nlet make = () => {\n  let textInput = React.useRef(Js.Nullable.null)\n\n  // This will **not** work\n  <MyComp ref={ReactDOM.Ref.domRef(textInput)} />\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Compiler Error:\n// Ref cannot be passed as a normal prop. Please use `forwardRef`\n// API instead\n```\n\n----------------------------------------\n\nTITLE: Array Manipulation Methods\nDESCRIPTION: Methods for modifying array contents including copying, filling, and sorting\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\nlet copyWithin: (~to_: int, t) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet copyWithinFrom: (~to_: int, ~from: int, t) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet copyWithinFromRange: (~to_: int, ~start: int, ~end_: int, t) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet fillInPlace: (elt, t) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet fillFromInPlace: (elt, ~from: int, t) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet fillRangeInPlace: (elt, ~start: int, ~end_: int, t) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet reverseInPlace: t => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet sortInPlace: t => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet sortInPlaceWith: ((. elt, elt) => int, t) => t;\n```\n\n----------------------------------------\n\nTITLE: Semantic Version Operator Examples in OCaml\nDESCRIPTION: Examples demonstrating the semantic version operator (=~) behavior in ReScript's conditional compilation, showing how version strings are compared using different operators.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/reason-compiler/latest/conditional-compilation.mdx#2025-04-18_snippet_4\n\nLANGUAGE: ocaml\nCODE:\n```\nsemver Location.none \"1.2.3\" \"~1.3.0\" = false;;\nsemver Location.none \"1.2.3\" \"^1.3.0\" = true ;;\nsemver Location.none \"1.2.3\" \">1.3.0\" = false ;;\nsemver Location.none \"1.2.3\" \">=1.3.0\" = false ;;\nsemver Location.none \"1.2.3\" \"<1.3.0\" = true ;;\nsemver Location.none \"1.2.3\" \"<=1.3.0\" = true ;;\nsemver Location.none \"1.2.3\" \"1.2.3\" = true;;\n```\n\n----------------------------------------\n\nTITLE: Null Value Definition in ReScript\nDESCRIPTION: Function signature for the null value of nullable type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/nullable.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet null: t<'a>\n```\n\n----------------------------------------\n\nTITLE: Removing multiple elements from SetDict in ReScript\nDESCRIPTION: Shows how to use the 'removeMany' function to remove multiple elements from a SetDict at once.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-dict.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\nlet removeMany: (t('value, 'id), array('value), ~cmp: cmp('value, 'id)) => t('value, 'id);\n\nmodule IntCmp =\n  Belt.Id.MakeComparable({\n    type t = int;\n    let cmp = Pervasives.compare;\n  });\n\nlet set = Belt.Set.Dict.fromArray([|1, 2, 3, 4|],~cmp=IntCmp.cmp);\n\nlet newSet = set->Belt.Set.Dict.removeMany([|5, 4, 3, 2, 1|], ~cmp=IntCmp.cmp);\nnewSet->Belt.Set.Dict.toArray; /* [||] */\n```\n\n----------------------------------------\n\nTITLE: Creating empty map in ReScript\nDESCRIPTION: Function signature for creating an empty mutable map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_2\n\nLANGUAGE: ReScript\nCODE:\n```\nlet make: unit => t<'a>\n```\n\n----------------------------------------\n\nTITLE: Test if All Float32Array Elements Pass Condition\nDESCRIPTION: Tests whether all elements in the Float32Array pass the provided function test.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_32\n\nLANGUAGE: rescript\nCODE:\n```\nlet every: ((. elt) => bool, t) => bool\n```\n\n----------------------------------------\n\nTITLE: Converting map to list in ReScript\nDESCRIPTION: Converts the map to a list of key-value pairs in increasing key order.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_19\n\nLANGUAGE: reasonml\nCODE:\n```\nlet toList: t('a) => list((key, 'a));\n```\n\n----------------------------------------\n\nTITLE: Configuring Sources with Recursive Subdirectories in ReScript\nDESCRIPTION: Combines multiple source configurations, including one that recursively builds all subdirectories. This example includes files from 'examples' and all subdirectories under 'src'.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/build-configuration.mdx#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sources\": [\n    \"examples\",\n    {\n      \"dir\": \"src\",\n      \"subdirs\": true // recursively builds every subdirectory\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Array Manipulation Methods\nDESCRIPTION: Methods for manipulating array contents including copying, filling, reversing and sorting\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array-2_int-32-array.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet copyWithin: (~to_: int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fillInPlace: (elt, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet reverseInPlace: t => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet sortInPlace: t => t\n```\n\n----------------------------------------\n\nTITLE: Sorting UInt32Array in place\nDESCRIPTION: Defines a function that sorts the elements of the array in place.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_16\n\nLANGUAGE: rescript\nCODE:\n```\nlet sortInPlace: t => t\n```\n\n----------------------------------------\n\nTITLE: Comparing sets in ReScript\nDESCRIPTION: Provides total ordering between sets by comparing size first, then elements in order. Returns an integer indicating the comparison result.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-int.mdx#2025-04-18_snippet_15\n\nLANGUAGE: reason\nCODE:\n```\nlet cmp: (t, t) => int;\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Set with Uncurried Function in ReScript MutableSetString\nDESCRIPTION: Applies an uncurried function to each element of the set in increasing order.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_20\n\nLANGUAGE: reason\nCODE:\n```\nlet forEachU: (t, [@bs] (value => unit)) => unit;\n```\n\n----------------------------------------\n\nTITLE: Uncurried Reduction Over Set in ReScript\nDESCRIPTION: Reduces set elements with an uncurried function. Used internally by the reduce function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-string.mdx#2025-04-18_snippet_33\n\nLANGUAGE: reasonml\nCODE:\n```\nlet reduceU: (t, 'a, [@bs] (('a, value) => 'a)) => 'a;\n```\n\n----------------------------------------\n\nTITLE: Retrieving UTC Month in ReScript\nDESCRIPTION: The getUTCMonth function returns the month (0.0-11.0) for a Date object, evaluated in UTC. January is month zero. It binds to JavaScript's Date.getUTCMonth method.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_37\n\nLANGUAGE: res\nCODE:\n```\nlet getUTCMonth: t => float\n```\n\nLANGUAGE: res\nCODE:\n```\nJs.Date.getUTCMonth(exampleDate) == 10.0\n```\n\n----------------------------------------\n\nTITLE: Chaining Option Operations in ReScript\nDESCRIPTION: Function signature and examples for chaining Option operations with a mapping function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/option.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nlet andThen: ((. 'a) => option<'b>, option<'a>) => option<'b>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet reciprocal = (. x) => x == 0 ? None : Some(1.0 /. Belt.Int.toFloat(x))\nJs.Option.andThen(reciprocal, Some(5)) == Some(0.2)\nJs.Option.andThen(reciprocal, Some(0)) == None\nJs.Option.andThen(reciprocal, None) == None\n```\n\n----------------------------------------\n\nTITLE: Checking if RegExp has Global Flag\nDESCRIPTION: Function that returns a boolean indicating whether the global flag is set on the RegExp object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/re.mdx#2025-04-18_snippet_9\n\nLANGUAGE: reason\nCODE:\n```\nlet global: t => bool;\n```\n\n----------------------------------------\n\nTITLE: Removing Item from Storage in ReScript\nDESCRIPTION: External binding for removing an item from storage by key.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/dom/storage.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nexternal removeItem: (string, t) => unit = \"removeItem\"\n```\n\n----------------------------------------\n\nTITLE: Array Type Definitions\nDESCRIPTION: Defines the core array types used in the ReScript array module.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\ntype t<'a> = array<'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\ntype array_like<'a> = Js_array2.array_like<'a>\n```\n\n----------------------------------------\n\nTITLE: Using Raw CSS Strings with Emotion in ReScript\nDESCRIPTION: Shows how to use raw CSS string literals with Emotion's rawCss function for a more traditional CSS authoring experience.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/styling.mdx#2025-04-18_snippet_12\n\nLANGUAGE: rescript\nCODE:\n```\nlet container = Emotion.rawCss(`\n  color: #fff;\n  background-color: red;\n`)\n\nlet app = <div className={container} />\n```\n\n----------------------------------------\n\nTITLE: Test All Elements with Index\nDESCRIPTION: Tests whether all elements in the typed array pass the test implemented by the provided function which also receives the element index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_type-s.mdx#2025-04-18_snippet_33\n\nLANGUAGE: res\nCODE:\n```\nlet everyi: ((. elt, int) => bool, t) => bool\n```\n\n----------------------------------------\n\nTITLE: Checking Some Value in ReScript\nDESCRIPTION: Function signature for checking if an option value is Some.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/option.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet isSome: option<'a> => bool\n```\n\n----------------------------------------\n\nTITLE: Element Access Operations for Float64Array\nDESCRIPTION: Functions for safely getting and setting elements in a Float64Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-64-array.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet unsafe_get: (t, int) => elt\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet unsafe_set: (t, int, elt) => unit\n```\n\n----------------------------------------\n\nTITLE: Creating a copy of Uint8ClampedArray\nDESCRIPTION: Creates a new copy of the array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_26\n\nLANGUAGE: res\nCODE:\n```\nlet copy: t => t\n```\n\n----------------------------------------\n\nTITLE: Defining element type as string in ReScript\nDESCRIPTION: Declares the element type for the SortArrayString module as string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/sort-array-string.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\ntype element = string;\n```\n\n----------------------------------------\n\nTITLE: Using reserved keywords as JSX props in ReScript\nDESCRIPTION: Demonstrates how to use reserved keywords (like 'type') as props in JSX by prepending an underscore. The ReScript compiler will remove the leading underscore when compiling to JavaScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/reason-compiler/latest/handling-js-naming-collisions.mdx#2025-04-18_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n/* this won't work in Reason since `type` is a reserved keyword! */\n<Component type=\"title\" />\n```\n\nLANGUAGE: reason\nCODE:\n```\n/* This works because `_type` is not a reserved keyword */\n<Component _type=\"title\" />\n```\n\n----------------------------------------\n\nTITLE: Getting ArrayBuffer Length in ReScript\nDESCRIPTION: Function signature for retrieving the byte length of an ArrayBuffer.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_array-buffer.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reasonml\nCODE:\n```\nlet byteLength: t => int;\n```\n\n----------------------------------------\n\nTITLE: Accessing Bytes Per Element Constant in ReScript\nDESCRIPTION: Function signature for _BYTES_PER_ELEMENT that returns the size in bytes of each element in the Uint8Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_50\n\nLANGUAGE: rescript\nCODE:\n```\nlet _BYTES_PER_ELEMENT: int\n```\n\n----------------------------------------\n\nTITLE: Map Iteration Functions\nDESCRIPTION: Functions for iterating over map contents with various patterns\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-map-int.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reasonml\nCODE:\n```\nlet forEachU: (t('a), [@bs] ((key, 'a) => unit)) => unit;\n\nlet forEach: (t('a), (key, 'a) => unit) => unit;\n\nlet reduceU: (t('a), 'b, [@bs] (('b, key, 'a) => 'b)) => 'b;\n\nlet reduce: (t('a), 'b, ('b, key, 'a) => 'b) => 'b;\n```\n\n----------------------------------------\n\nTITLE: In-place Array Shuffling in ReScript\nDESCRIPTION: Randomly re-orders the items in an array in place, modifying the original array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/array.mdx#2025-04-18_snippet_9\n\nLANGUAGE: reason\nCODE:\n```\nlet shuffleInPlace: array('a) => unit;\n```\n\n----------------------------------------\n\nTITLE: Reduce Float32Array Elements to Single Value\nDESCRIPTION: Applies a function against an accumulator and each element in the Float32Array to reduce it to a single value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-32-array.mdx#2025-04-18_snippet_44\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduce: ((. 'b, elt) => 'b, 'b, t) => 'b;\n```\n\n----------------------------------------\n\nTITLE: HTML Root Element for React Application\nDESCRIPTION: HTML markup showing the root div element where the React application will be mounted.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/rendering-elements.mdx#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"root\"/>\n```\n\n----------------------------------------\n\nTITLE: Logging Functions in ReScript\nDESCRIPTION: Defines various logging utility functions for different numbers of arguments.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reason\nCODE:\n```\nlet log: 'a => unit;\nlet log2: ('a, 'b) => unit;\nlet log3: ('a, 'b, 'c) => unit;\nlet log4: ('a, 'b, 'c, 'd) => unit;\nlet logMany: array('a) => unit;\n```\n\n----------------------------------------\n\nTITLE: Removing a key from HashSetString\nDESCRIPTION: Removes a string key from the HashSetString if it exists.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-set-string.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\nlet remove: (t, key) => unit;\n```\n\n----------------------------------------\n\nTITLE: Converting Array to String Representation\nDESCRIPTION: Function signature to convert the Int8Array to a string representation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_30\n\nLANGUAGE: res\nCODE:\n```\nlet toString: t => string\n```\n\n----------------------------------------\n\nTITLE: Defining SortArrayInt Module\nDESCRIPTION: Specialized module for sorting arrays when key type is integer, providing more efficient implementation than generic type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/sort-array.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\nmodule Int : Belt_SortArrayInt\n```\n\n----------------------------------------\n\nTITLE: Strictly Sorted Length Function Signatures\nDESCRIPTION: Function signatures for checking strictly sorted array length with both uncurried and curried versions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/sort-array.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet strictlySortedLengthU: (array<'a>, (. 'a, 'a) => bool) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet strictlySortedLength: (array<'a>, ('a, 'a) => bool) => int\n```\n\n----------------------------------------\n\nTITLE: Iterate Over Float32Array Elements with Index\nDESCRIPTION: Executes the provided function once for each element in the Float32Array, passing the element index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-32-array.mdx#2025-04-18_snippet_41\n\nLANGUAGE: rescript\nCODE:\n```\nlet forEachi: ((. elt, int) => unit, t) => unit;\n```\n\n----------------------------------------\n\nTITLE: Defining strictlySortedLength Function\nDESCRIPTION: Function that returns the length of strictly sorted portion of an array, with positive indicating increasing order and negative indicating decreasing order.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/sort-array.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reason\nCODE:\n```\nlet strictlySortedLength: (array('a), ('a, 'a) => bool) => int;\n```\n\n----------------------------------------\n\nTITLE: Iterating and Transforming Uint8ClampedArray in ReScript\nDESCRIPTION: Higher-order functions for iterating, filtering, mapping, and reducing Uint8ClampedArray.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_8\n\nLANGUAGE: ReScript\nCODE:\n```\nlet every: ((. elt) => bool, t) => bool;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet everyi: ((. elt, int) => bool, t) => bool;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet filter: ((. elt) => bool, t) => t;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet filteri: ((. elt, int) => bool, t) => t;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet find: ((. elt) => bool, t) => Js.undefined(elt);\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet findi: ((. elt, int) => bool, t) => Js.undefined(elt);\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet findIndex: ((. elt) => bool, t) => int;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet findIndexi: ((. elt, int) => bool, t) => int;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet forEach: ((. elt) => unit, t) => unit;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet forEachi: ((. elt, int) => unit, t) => unit;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet map: ((. elt) => 'b, t) => typed_array('b);\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet mapi: ((. elt, int) => 'b, t) => typed_array('b);\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet reduce: ((. 'b, elt) => 'b, 'b, t) => 'b;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet reducei: ((. 'b, elt, int) => 'b, 'b, t) => 'b;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet reduceRight: ((. 'b, elt) => 'b, 'b, t) => 'b;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet reduceRighti: ((. 'b, elt, int) => 'b, 'b, t) => 'b;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet some: ((. elt) => bool, t) => bool;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet somei: ((. elt, int) => bool, t) => bool;\n```\n\n----------------------------------------\n\nTITLE: Vector Unsafe Get Operation\nDESCRIPTION: Retrieves an element without bounds checking.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/vector.mdx#2025-04-18_snippet_19\n\nLANGUAGE: res\nCODE:\n```\nlet unsafe_get: (t<'a>, int) => 'a\n```\n\n----------------------------------------\n\nTITLE: Using anchor function in ReScript\nDESCRIPTION: Creates a string with an HTML anchor element. This is a legacy function that has been removed from web standards and should be avoided.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/string-2.mdx#2025-04-18_snippet_35\n\nLANGUAGE: rescript\nCODE:\n```\nlet anchor: (t, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.String2.anchor(\"Page One\", \"page1\") == \"<a name=\\\"page1\\\">Page One</a>\"\n```\n\n----------------------------------------\n\nTITLE: Defining TypedArray2.Uint8ClampedArray Types in ReScript\nDESCRIPTION: Defines the core types for Uint8ClampedArray, including the element type, typed array type, and the main type t.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\ntype elt = int;\ntype typed_array('a);\ntype t = typed_array(elt);\n```\n\n----------------------------------------\n\nTITLE: Uncurried Some Check for Set in ReScript\nDESCRIPTION: Checks if any element satisfies a predicate using an uncurried function. Used internally by the some function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-string.mdx#2025-04-18_snippet_39\n\nLANGUAGE: reasonml\nCODE:\n```\nlet someU: (t, [@bs] (value => bool)) => bool;\n```\n\n----------------------------------------\n\nTITLE: Getting Int32Array Length\nDESCRIPTION: Function to retrieve the length of an Int32Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-32-array.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet length: t => int\n```\n\n----------------------------------------\n\nTITLE: Using Submodules to Prevent Naming Collisions in Abstract Types\nDESCRIPTION: Demonstrates how to use modules to group abstract types with their related functions to avoid naming collisions when multiple types have similar attributes.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/generate-converters-accessors.mdx#2025-04-18_snippet_22\n\nLANGUAGE: ReScript\nCODE:\n```\nmodule Person = {\n  @deriving(abstract)\n  type t = {name: string}\n}\n\nmodule Cat = {\n  @deriving(abstract)\n  type t = {\n    name: string,\n    isLazy: bool,\n  }\n}\n\nlet person = Person.t(~name=\"Alice\")\nlet cat = Cat.t(~name=\"Snowball\", ~isLazy=true)\n\n/* We can use each nameGet function separately now */\nlet shoutPersonName = {\n  open Person\n  person->nameGet->Js.String.toUpperCase\n}\n\n/* Note how we use a local `open Cat` expression to\n get access to Cat's nameGet function */\nlet whisperCatName = {\n  open Cat\n  cat->nameGet->Js.String.toLowerCase\n}\n```\n\n----------------------------------------\n\nTITLE: Finding maximum key in ReScript map (undefined return)\nDESCRIPTION: Returns the maximum key in the map as a JavaScript undefined value if the map is empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_27\n\nLANGUAGE: reasonml\nCODE:\n```\nlet maxKeyUndefined: t('a) => Js.undefined(key);\n```\n\n----------------------------------------\n\nTITLE: Converting TypedArray to String in ReScript\nDESCRIPTION: Function signature for converting a Uint8ClampedArray to a string representation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_30\n\nLANGUAGE: res\nCODE:\n```\nlet toString: t => string\n```\n\n----------------------------------------\n\nTITLE: Slicing Float32Array in ReScript\nDESCRIPTION: Functions to create new Float32Arrays from slices of existing ones.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\nlet slice: (~start: int, ~end_: int, t) => t;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet copy: t => t;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet sliceFrom: (int, t) => t;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet subarray: (~start: int, ~end_: int, t) => t;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet subarrayFrom: (int, t) => t;\n```\n\n----------------------------------------\n\nTITLE: HashSet Uncurried ForEach - ReScript\nDESCRIPTION: Iterates over the HashSet elements using an uncurried callback function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-set-int.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\nlet forEachU: (t, (. key) => unit) => unit\n```\n\n----------------------------------------\n\nTITLE: Generated JavaScript with External Stdlib Imports\nDESCRIPTION: The JavaScript output showing how the ReScript code is compiled with imports from @rescript/std instead of the default rescript package paths.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/build-external-stdlib.mdx#2025-04-18_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// Note the require path starting with \"@rescript/std\".\nvar Belt_Array = require(\"@rescript/std/lib/js/belt_Array.js\");\n\nBelt_Array.forEach([1, 2, 3], function (num) {\n  console.log(num);\n});\n```\n\n----------------------------------------\n\nTITLE: Example of toString\nDESCRIPTION: Shows the basic string representation of a floating-point number.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/float.mdx#2025-04-18_snippet_25\n\nLANGUAGE: re\nCODE:\n```\n/* prints \"12345.6789\" */\nJs.log @@ Js.Float.toString(12345.6789);\n```\n\n----------------------------------------\n\nTITLE: Defining DOM Collection Types in ReScript\nDESCRIPTION: Type definitions for DOM collection interfaces like HTMLCollection and NodeList\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/dom.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reason\nCODE:\n```\ntype htmlCollection\ntype htmlFormControlsCollection\ntype htmlOptionsCollection\ntype nodeList\ntype radioNodeList\n```\n\n----------------------------------------\n\nTITLE: To_opt Function Signature\nDESCRIPTION: Legacy function signature for converting nullable type to option type\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/nullable.mdx#2025-04-18_snippet_11\n\nLANGUAGE: rescript\nCODE:\n```\nlet to_opt: t<'a> => option<'a>\n```\n\n----------------------------------------\n\nTITLE: Check Internal Invariant in MutableSet - ReScript\nDESCRIPTION: Internal function to verify the set's invariant holds. Raises an exception if the invariant is violated.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_11\n\nLANGUAGE: rescript\nCODE:\n```\nlet checkInvariantInternal: t<'a, 'b> => unit\n```\n\n----------------------------------------\n\nTITLE: Examples of Safe Floor Function in ReScript\nDESCRIPTION: Examples demonstrating the use of floor_int with different numeric values, including values that would exceed the int range but are pinned to the maximum/minimum int value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/math.mdx#2025-04-18_snippet_37\n\nLANGUAGE: reasonml\nCODE:\n```\nJs.Math.floor_int(3.7) == 3;\nJs.Math.floor_int(3.0) == 3;\nJs.Math.floor_int(-3.1) == -4;\nJs.Math.floor_int(-1.0e15) == -2147483648;\nJs.Math.floor_int(1.0e15) == 2147483647;\n```\n\n----------------------------------------\n\nTITLE: Reading an Int16 value with little-endian format in ReScript\nDESCRIPTION: Function signature for getting a signed 16-bit integer from the specified byte offset with little-endian format.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_data-view.mdx#2025-04-18_snippet_11\n\nLANGUAGE: rescript\nCODE:\n```\nlet getInt16LittleEndian: (t, int) => int\n```\n\n----------------------------------------\n\nTITLE: ReScript With @inline Annotation\nDESCRIPTION: ReScript code example using @inline to force string value inlining in the JavaScript output.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/inlining-constants.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\n@val external process: 'a = \"process\"\n\n@inline\nlet mode = \"development\"\n\nif (process[\"env\"][\"mode\"] === mode) {\n  Js.log(\"Dev-only code here!\")\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nif (process.env.mode === \"development\") {\n  console.log(\"Dev-only code here!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Array from Buffer\nDESCRIPTION: Function signature to create a new Uint16Array from an ArrayBuffer.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_52\n\nLANGUAGE: res\nCODE:\n```\nlet fromBuffer: Js_typed_array.array_buffer => t\n```\n\n----------------------------------------\n\nTITLE: String Index Of From Position\nDESCRIPTION: Function signature for finding the first index of a substring from a specific position.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/string-2.mdx#2025-04-18_snippet_18\n\nLANGUAGE: res\nCODE:\n```\nlet indexOfFrom: (t, t, int) => int\n```\n\n----------------------------------------\n\nTITLE: Array Element Access Functions in ReScript\nDESCRIPTION: Functions for getting and setting values in a Uint32Array without bounds checking.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-32-array.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\nlet unsafe_get: (t, int) => elt\n```\n\nLANGUAGE: res\nCODE:\n```\nlet unsafe_set: (t, int, elt) => unit\n```\n\n----------------------------------------\n\nTITLE: Defining String Type in ReScript\nDESCRIPTION: Basic type definition for string type alias.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/string.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\ntype t = string\n```\n\n----------------------------------------\n\nTITLE: Writing a Float64 value to a DataView in ReScript\nDESCRIPTION: Function signature for storing a 64-bit floating point number at the specified byte offset with big-endian format.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_data-view.mdx#2025-04-18_snippet_34\n\nLANGUAGE: rescript\nCODE:\n```\nlet setFloat64: (t, int, float) => unit\n```\n\n----------------------------------------\n\nTITLE: Bundler Optimization Output\nDESCRIPTION: Shows how JavaScript bundlers transform the development mode check.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/inlining-constants.mdx#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif ('production' === 'development') {\n  console.log(\"Dev-only code here!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Installing ReScript 9.0.1 via npm\nDESCRIPTION: Command to install the latest ReScript 9.0.1 release using npm.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2021-02-09-release-9-0.mdx#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install bs-platform@9.0.1\n```\n\n----------------------------------------\n\nTITLE: Slicing TypedArray Range in ReScript\nDESCRIPTION: Function signature for extracting a section of a Uint8ClampedArray between specified start (inclusive) and end (exclusive) indices and returning a new array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_25\n\nLANGUAGE: res\nCODE:\n```\nlet slice: (~start: int, ~end_: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Reading floating-point values from DataView in ReScript\nDESCRIPTION: Functions to read 32-bit and 64-bit floating-point values from a DataView, with optional little-endian versions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array-2_data-view.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet getFloat32: (t, int) => float\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet getFloat32LittleEndian: (t, int) => float\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet getFloat64: (t, int) => float\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet getFloat64LittleEndian: (t, int) => float\n```\n\n----------------------------------------\n\nTITLE: Creating TypedArray from Regular Array in ReScript\nDESCRIPTION: Function signature for creating a new Uint8ClampedArray from a regular array of elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_51\n\nLANGUAGE: res\nCODE:\n```\nlet make: array<elt> => t\n```\n\n----------------------------------------\n\nTITLE: Defining HashSetInt type in ReScript\nDESCRIPTION: Declares the abstract type t for HashSetInt.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-set-int.mdx#2025-04-18_snippet_1\n\nLANGUAGE: ReScript\nCODE:\n```\ntype t;\n```\n\n----------------------------------------\n\nTITLE: Buffer Property Accessors in ReScript\nDESCRIPTION: Functions to access the underlying ArrayBuffer and its properties.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-32-array.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nlet buffer: t => Js_typed_array2.array_buffer\n```\n\nLANGUAGE: res\nCODE:\n```\nlet byteLength: t => int\n```\n\nLANGUAGE: res\nCODE:\n```\nlet byteOffset: t => int\n```\n\n----------------------------------------\n\nTITLE: Installing ReScript 11.1 with NPM\nDESCRIPTION: Command to install the new ReScript compiler version using npm package manager.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2024-02-01-release-11-1-0.mdx#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install rescript@11.1\n```\n\n----------------------------------------\n\nTITLE: Fill Operations for Int16Array\nDESCRIPTION: Functions to fill the array or parts of it with a static value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-16-array.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\nlet fillInPlace: (elt, t) => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet fillFromInPlace: (elt, ~from: int, t) => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet fillRangeInPlace: (elt, ~start: int, ~end_: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Peeking First Element as Undefined in MutableQueue (ReScript)\nDESCRIPTION: Function to return the first element in the queue or undefined if not found, without removing it.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-queue.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nlet peekUndefined: t('a) => Js.undefined('a);\n```\n\n----------------------------------------\n\nTITLE: Creating Uint8ClampedArray from buffer with range\nDESCRIPTION: Creates a new Uint8ClampedArray view over the provided ArrayBuffer, starting at the specified byte offset and length. Can raise a JavaScript exception.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_54\n\nLANGUAGE: res\nCODE:\n```\nlet fromBufferRange: (Js_typed_array.array_buffer, ~offset: int, ~length: int) => t\n```\n\n----------------------------------------\n\nTITLE: Record Type Error Example in ReScript\nDESCRIPTION: Shows how the type system enforces record type checking, demonstrating that a function inferred to work with one record type cannot accept another record type, even if they share common fields.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/record.mdx#2025-04-18_snippet_19\n\nLANGUAGE: res\nCODE:\n```\nlet kraken = {age: 9999, hasTentacles: true}\nlet me = {age: 5, name: \"Baby ReScript\"}\n\ngetAge(kraken)\ngetAge(me) // type error!\n```\n\n----------------------------------------\n\nTITLE: Using @string Decorator with Polymorphic Variants in ReScript\nDESCRIPTION: Demonstrates how to use the @string decorator with polymorphic variants and @as decorator to define external bindings that map to specific string values in JavaScript. The example shows binding to a setStatus function with three variant states.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/decorator_string.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\n@val external setStatus: @string[\n  @as(\"NOT_STARTED\") #NotStarted |\n  @as(\"STARTED\") #Started |\n  @as(\"DONE\") #Done \n] => unit = \"setStatus\"\n\nsetStatus(#NotStarted)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsetStatus(\"NOT_STARTED\");\n```\n\n----------------------------------------\n\nTITLE: Array String Conversion Methods in ReScript\nDESCRIPTION: Functions to convert the array to string representations, with optional separator.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-32-array.mdx#2025-04-18_snippet_9\n\nLANGUAGE: res\nCODE:\n```\nlet join: t => string\n```\n\nLANGUAGE: res\nCODE:\n```\nlet joinWith: (string, t) => string\n```\n\nLANGUAGE: res\nCODE:\n```\nlet toString: t => string\n```\n\nLANGUAGE: res\nCODE:\n```\nlet toLocaleString: t => string\n```\n\n----------------------------------------\n\nTITLE: Writing 32-bit Unsigned Integer (Little Endian)\nDESCRIPTION: Stores an unsigned 32-bit integer at the specified byte offset from the start of the DataView using little-endian format.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_data-view.mdx#2025-04-18_snippet_31\n\nLANGUAGE: reasonml\nCODE:\n```\nlet setUint32LittleEndian: (t, int, int) => unit;\n```\n\n----------------------------------------\n\nTITLE: Raising JavaScript EvalError\nDESCRIPTION: Function that raises a JavaScript EvalError with the provided message.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/exn.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\nlet raiseEvalError: string => 'a;\n```\n\n----------------------------------------\n\nTITLE: Configuring External Stdlib in bsconfig.json\nDESCRIPTION: Configuration snippet for bsconfig.json that enables using the external stdlib package. This setting directs the compiler to reference the external package in generated imports.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/build-external-stdlib.mdx#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...\n  \"external-stdlib\" : \"@rescript/std\"\n}\n```\n\n----------------------------------------\n\nTITLE: List Equality Comparison Function Signature in ReScript\nDESCRIPTION: Defines the signature for the 'equal' function, which compares two lists for equality using a custom comparison function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/list.mdx#2025-04-18_snippet_21\n\nLANGUAGE: rescript\nCODE:\n```\nlet equal: ((. 'a, 'a) => bool, list<'a>, list<'a>) => bool\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for ReScript Multi-Package Project\nDESCRIPTION: Shows the folder structure of a sample ReScript project with multiple packages (app, common, myplugin) organized in a monorepo style.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/build-pinned-dependencies.mdx#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmyproject/\n  app/\n   - src/App.res\n   - bsconfig.json\n  common/\n   - src/Header.res\n   - bsconfig.json\n  myplugin/\n   - src/MyPlugin.res\n   - bsconfig.json\n  package.json\n```\n\n----------------------------------------\n\nTITLE: Checking Element Existence\nDESCRIPTION: Function signature for checking if an element exists in the set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_7\n\nLANGUAGE: res\nCODE:\n```\nlet has: (t, value) => bool\n```\n\n----------------------------------------\n\nTITLE: Defining Key and Map Types in ReScript\nDESCRIPTION: Defines the key type as int and the generic map type t<'b> for Belt.HashMap.Int.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-map-int.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype key = int\n\ntype t<'b>\n```\n\n----------------------------------------\n\nTITLE: Using ReScript Object Access for JavaScript Interoperability\nDESCRIPTION: Shows how to use ReScript's object access notation to handle JavaScript objects without needing type declarations, which simplifies the conversion process when dealing with untyped JavaScript properties.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/converting-from-js.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\n%%raw(`\nconst school = require('school');\n`)\n\nlet defaultId = 10\n\nlet queryResult = (usePayload, payload) => {\n  if usePayload {\n    payload[\"student\"]\n  } else {\n    school[\"getStudentById\"](. defaultId)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating Through List Elements with Index and Uncurried Function in ReScript\nDESCRIPTION: The forEachWithIndexU function is the uncurried version of forEachWithIndex for performance optimization.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/list.mdx#2025-04-18_snippet_36\n\nLANGUAGE: rescript\nCODE:\n```\nlet forEachWithIndexU: (t<'a>, (. int, 'a) => 'b) => unit\n```\n\n----------------------------------------\n\nTITLE: Exception-based Array Element Setting in ReScript\nDESCRIPTION: Sets the value at a specific index in an array, raising an exception if the index is out of range.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/array.mdx#2025-04-18_snippet_7\n\nLANGUAGE: reason\nCODE:\n```\nlet setExn: (array('a), int, 'a) => unit;\n```\n\n----------------------------------------\n\nTITLE: Generated TypeScript Type Definition\nDESCRIPTION: The TypeScript type definition generated by genType from the ReScript variant type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/typescript-integration.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype t = { TAG: \"A\"; _0: number } | { TAG: \"B\"; _0: string };\n```\n\n----------------------------------------\n\nTITLE: String Ends With Check\nDESCRIPTION: Function signature for checking if a string ends with a specific substring.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/string-2.mdx#2025-04-18_snippet_13\n\nLANGUAGE: res\nCODE:\n```\nlet endsWith: (t, t) => bool\n```\n\n----------------------------------------\n\nTITLE: npm Scripts for ReScript Development\nDESCRIPTION: JSON snippet to add ReScript build and watch commands to package.json scripts. These provide convenient ways to build and continuously compile ReScript code.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/installation.mdx#2025-04-18_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  \"res:build\": \"rescript\",\n  \"res:dev\": \"rescript -w\"\n}\n```\n\n----------------------------------------\n\nTITLE: Special Global Value Binding\nDESCRIPTION: Examples of safely binding to conditional global values like __DEV__ and __filename using %external syntax.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/bind-to-global-js-values.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nswitch %external(__DEV__) {\n| Some(_) => Js.log(\"dev mode\")\n| None => Js.log(\"production mode\")\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar match = typeof __DEV__ === \"undefined\" ? undefined : __DEV__;\n\nif (match !== undefined) {\n  console.log(\"dev mode\");\n} else {\n  console.log(\"production mode\");\n}\n```\n\nLANGUAGE: rescript\nCODE:\n```\nswitch %external(__filename) {\n| Some(f) => Js.log(f)\n| None => Js.log(\"non-node environment\")\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar match = typeof (__filename) === \"undefined\" ? undefined : (__filename);\n\nif (match !== undefined) {\n  console.log(match);\n} else {\n  console.log(\"non-node environment\");\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering WarningTable Component in JSX\nDESCRIPTION: This code snippet renders the imported WarningTable component within the markdown content. It's used to display the table of compiler warnings in the documentation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/warning-numbers.mdx#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<WarningTable />\n```\n\n----------------------------------------\n\nTITLE: Configuring Yarn Workspaces for ReScript Project\nDESCRIPTION: Example package.json configuration for setting up yarn workspaces in a ReScript project with multiple packages.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/build-pinned-dependencies.mdx#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"myproject\",\n  \"private\": true,\n  \"workspaces\": {\n    \"packages\": [\"app\", \"common\", \"myplugin\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Output for ReScript String Literals\nDESCRIPTION: Shows the JavaScript output generated from ReScript string literal declarations. It illustrates how single-line and multi-line strings are translated to JavaScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/language_string_literal.mdx#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar myString = \"Single line string!\";\n\nvar myMultiLineString = \"Multi\\n line\\n string!\";\n```\n\n----------------------------------------\n\nTITLE: HashSet to Array Conversion\nDESCRIPTION: Converts the HashSet to an array of keys.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-set-string.mdx#2025-04-18_snippet_15\n\nLANGUAGE: rescript\nCODE:\n```\nlet toArray: t => array<key>\n```\n\n----------------------------------------\n\nTITLE: Mapping values with uncurried function in ReScript\nDESCRIPTION: Function signature for mapping values in a mutable map using an uncurried function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_42\n\nLANGUAGE: ReScript\nCODE:\n```\nlet mapU: (t<'a>, (. 'a) => 'b) => t<'b>\n```\n\n----------------------------------------\n\nTITLE: Getting value by key with exception in ReScript\nDESCRIPTION: Function signature for getting a value by key from a mutable map, throwing an exception if the key is not found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_35\n\nLANGUAGE: ReScript\nCODE:\n```\nlet getExn: (t<'a>, key) => 'a\n```\n\n----------------------------------------\n\nTITLE: Example of Getting Minimum Value from String Set in ReScript\nDESCRIPTION: Demonstrates how to get the minimum (lexicographically first) string from a set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-string.mdx#2025-04-18_snippet_55\n\nLANGUAGE: reasonml\nCODE:\n```\nlet s0 = Belt.Set.String.empty;\nlet s1 = Belt.Set.String.fromArray([|\"apple\", \"orange\"|]);\n\ns0->Belt.Set.String.minimum; /* None */\ns1->Belt.Set.String.minimum; /* Some(\"apple\") */\n```\n\n----------------------------------------\n\nTITLE: HTML Root Element for React Application\nDESCRIPTION: This HTML snippet shows the root DOM node where the React application will be mounted. This div with id 'root' serves as the container for the React-managed content.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/rendering-elements.mdx#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"root\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Sources with Subdirectories in ReScript\nDESCRIPTION: Specifies source files using an object with directory and subdirectory specifications. This configuration includes files from the 'src' directory and its 'page' subdirectory.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/build-configuration.mdx#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sources\": {\n    \"dir\": \"src\",\n    \"subdirs\": [\"page\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Private Binding with %%private Syntax\nDESCRIPTION: Shows the usage of %%private annotation for marking private fields.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/let-binding.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\nmodule A = {\n  %%private(let a = 3)\n  let b = 4\n}\n```\n\n----------------------------------------\n\nTITLE: Converting a set to a list in ReScript with MutableSetInt\nDESCRIPTION: Returns a list containing all elements of the set in ascending order. This creates a new list without modifying the original set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_33\n\nLANGUAGE: rescript\nCODE:\n```\nlet toList: t => list(value);\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet s0 = Belt.MutableSet.Int.fromArray([|3,2,1,5|]);\n\ns0->Belt.MutableSet.Int.toList; /* [1,2,3,5] */\n```\n\n----------------------------------------\n\nTITLE: Implementing Counter with setInterval in ReScript\nDESCRIPTION: Example showing how to use setInterval to create a counting timer that logs to console.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/global.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet count = ref(0)\n\nlet tick = () => {\n  count := count.contents + 1\n  Js.log(Belt.Int.toString(count.contents))\n}\n\nJs.Global.setInterval(tick, 1000)\n```\n\n----------------------------------------\n\nTITLE: Converting Float to String in ReScript\nDESCRIPTION: Converts a given float to a string using Belt.Float.toString function. Uses the JavaScript String constructor under the hood.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/float.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reason\nCODE:\n```\nlet toString: float => string;\n```\n\nLANGUAGE: reason\nCODE:\n```\nJs.log(Belt.Float.toString(1.0) === \"1.0\"); /* true */\n```\n\n----------------------------------------\n\nTITLE: Removing Item from Storage in ReScript\nDESCRIPTION: External binding for removing an item from storage by key.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/dom/storage2.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reasonml\nCODE:\n```\nexternal removeItem: (t, string) => unit = \"removeItem\"\n```\n\n----------------------------------------\n\nTITLE: Create Float64Array from ArrayBuffer with Range\nDESCRIPTION: Creates a new Float64Array view of an ArrayBuffer with the specified range. May raise a JavaScript exception.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-64-array.mdx#2025-04-18_snippet_54\n\nLANGUAGE: reason\nCODE:\n```\nlet fromBufferRange: (Js_typed_array2.array_buffer, ~offset: int, ~length: int) => t;\n```\n\n----------------------------------------\n\nTITLE: Signature of every function in Belt.Range\nDESCRIPTION: Type signature for the every function that checks if a predicate is true for all elements in a range.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/range.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reason\nCODE:\n```\nlet every: (int, int, int => bool) => bool;\n```\n\n----------------------------------------\n\nTITLE: HashSet Contains Check\nDESCRIPTION: Checks if a key exists in the HashSet.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-set-string.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nlet has: (t, key) => bool\n```\n\n----------------------------------------\n\nTITLE: Configuring JSX v4 Automatic Mode\nDESCRIPTION: Configuration for JSX v4 in experimental automatic mode, which generates calls to _jsx functions similar to TypeScript's react-jsx mode.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/migrate-react.mdx#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsx\": { \"version\": 4, \"mode\": \"automatic\" }\n}\n```\n\n----------------------------------------\n\nTITLE: List Map Function Signature in ReScript\nDESCRIPTION: Defines the signature for the 'map' function, which applies a function to each element of a list.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/list.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rescript\nCODE:\n```\nlet map: ((. 'a) => 'b, t<'a>) => t<'b>\n```\n\n----------------------------------------\n\nTITLE: HashSetString Type Definition\nDESCRIPTION: Defines the main HashSet type container.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-set-string.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\ntype t\n```\n\n----------------------------------------\n\nTITLE: Running Raw BSB Executable\nDESCRIPTION: Example of navigating to and executing the low-level bsb.exe binary directly, bypassing the Node.js wrapper for faster builds without watching functionality.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/build-performance.mdx#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n> bsb -where\n/usr/local/lib/node_modules/bs-platform/lib\n```\n\n----------------------------------------\n\nTITLE: Testing Any Element with Predicate in ReasonML\nDESCRIPTION: Function signature for checking if at least one element in a MutableSet satisfies a predicate function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_44\n\nLANGUAGE: reasonml\nCODE:\n```\nlet some: (t('value, 'id), 'value => bool) => bool;\n```\n\n----------------------------------------\n\nTITLE: Using bs.new to Create JavaScript Objects in ReScript\nDESCRIPTION: Shows how to use the `bs.new` annotation to create JavaScript objects with the `new` operator, specifically creating a Date object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/reason-compiler/latest/class.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\ntype t;\n[@bs.new] external createDate : unit => t = \"Date\";\n\nlet date = createDate();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar date = new Date();\n```\n\n----------------------------------------\n\nTITLE: Piping into Variants in ReScript\nDESCRIPTION: Shows how to use the pipe operator with variant constructors.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/pipe.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet result = name->preprocess->Some\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet result = Some(preprocess(name))\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = preprocess(name);\n```\n\n----------------------------------------\n\nTITLE: Defining key type for HashSetInt in ReScript\nDESCRIPTION: Defines the key type for the HashSetInt module as a primitive integer type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/hash-set-int.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\ntype key = int\n```\n\n----------------------------------------\n\nTITLE: Creating and Shuffling an Array in ReScript\nDESCRIPTION: The makeByAndShuffle function creates an array using the makeBy function and then shuffles it, equivalent to shuffle(makeBy(n, f)).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/array.mdx#2025-04-18_snippet_21\n\nLANGUAGE: ReScript\nCODE:\n```\nlet makeByAndShuffle: (int, int => 'a) => array<'a>\n```\n\n----------------------------------------\n\nTITLE: Defining Null Type Alias in ReScript\nDESCRIPTION: Creates a local type alias for Js.null('a) representing nullable values in JavaScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/null.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\ntype t('a) = Js.null('a);\n```\n\n----------------------------------------\n\nTITLE: Querying Int16Array Properties in ReScript\nDESCRIPTION: Functions to access various properties of an Int16Array, such as buffer, byte length, and offset.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_int-16-array.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet buffer: t => Js_typed_array.array_buffer\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet byteLength: t => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet byteOffset: t => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet length: t => int\n```\n\n----------------------------------------\n\nTITLE: Importing TailwindCSS in ReScript React Application\nDESCRIPTION: Shows how to import the main TailwindCSS file in a ReScript React application using the %%raw expression.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/styling.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\n// src/App.res\n\n%%raw(\"import './main.css'\")\n```\n\n----------------------------------------\n\nTITLE: Creating an Empty MutableQueue in ReScript\nDESCRIPTION: Function to create and return a new, initially empty queue.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-queue.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet make: unit => t('a);\n```\n\n----------------------------------------\n\nTITLE: Accessing Module Contents in ReScript\nDESCRIPTION: Shows how to access the contents of the School module using dot notation. This demonstrates modules' utility for namespacing.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/module.mdx#2025-04-18_snippet_1\n\nLANGUAGE: ReScript\nCODE:\n```\nlet anotherPerson: School.profession = School.Teacher\nJs.log(School.getProfession(anotherPerson)) /* \"A teacher\" */\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar anotherPerson = /* Teacher */0;\nconsole.log(\"A teacher\");\n```\n\n----------------------------------------\n\nTITLE: Reading an Int32 value from a DataView in ReScript\nDESCRIPTION: Function signature for getting a signed 32-bit integer from the specified byte offset with big-endian format.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_data-view.mdx#2025-04-18_snippet_14\n\nLANGUAGE: rescript\nCODE:\n```\nlet getInt32: (t, int) => int\n```\n\n----------------------------------------\n\nTITLE: Copying MutableStack in ReScript\nDESCRIPTION: Function signature for creating a copy of the stack in O(1) time.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-stack.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ReScript\nCODE:\n```\nlet copy: t<'a> => t<'a>\n```\n\n----------------------------------------\n\nTITLE: Accessing File Location with __POS__ in ReScript\nDESCRIPTION: Demonstrates how to use the __POS__ special value to obtain the current file location information as a tuple containing filename, line number, and column positions. The values can be destructured and logged to the console.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/specialvalues_pos.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nlet (fileName, lineNumber, columnNumberStart, columnNumberEnd) = __POS__\n\nfileName->Console.log\nlineNumber->Console.log\ncolumnNumberStart->Console.log\ncolumnNumberEnd->Console.log\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar fileName = \"testmodule.res\";\n\nconsole.log(fileName);\nconsole.log(1);\nconsole.log(65);\nconsole.log(72);\n```\n\n----------------------------------------\n\nTITLE: Iterating over MutableStack with Uncurried Function in ReScript\nDESCRIPTION: Function to apply an uncurried callback function to each element of a stack.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-stack.mdx#2025-04-18_snippet_11\n\nLANGUAGE: rescript\nCODE:\n```\nlet forEachU: (t('a), [@bs] ('a => unit)) => unit;\n```\n\n----------------------------------------\n\nTITLE: Reading a Float32 value from a DataView in ReScript\nDESCRIPTION: Function signature for getting a 32-bit floating point number from the specified byte offset with big-endian format.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_data-view.mdx#2025-04-18_snippet_18\n\nLANGUAGE: rescript\nCODE:\n```\nlet getFloat32: (t, int) => float\n```\n\n----------------------------------------\n\nTITLE: Using iter with Nullable values in ReScript\nDESCRIPTION: Example of using 'iter' to log a message if it's not null or undefined.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/nullable.mdx#2025-04-18_snippet_9\n\nLANGUAGE: reason\nCODE:\n```\nlet maybeSay = (maybeMessage: Js.null_undefined(string)) =>\n  Js.Nullable.iter(maybeMessage, [@bs] message => Js.log(message));\n```\n\n----------------------------------------\n\nTITLE: JSON Kind Type Definition\nDESCRIPTION: Recursive type definition specifying different kinds of JSON values with their corresponding types\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/json.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\ntype rec kind<'a> =\n  | String: kind<Js_string.t>\n  | Number: kind<float>\n  | Object: kind<Js_dict.t<t>>\n  | Array: kind<array<t>>\n  | Boolean: kind<bool>\n  | Null: kind<Js_types.null_val>\n```\n\n----------------------------------------\n\nTITLE: Creating Set from Sorted Array in ReScript MutableSetString\nDESCRIPTION: Creates a new set from an array that is already sorted, skipping the sorting step for better performance.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reason\nCODE:\n```\nlet fromSortedArrayUnsafe: array(value) => t;\n```\n\n----------------------------------------\n\nTITLE: Creating Array Copy with copy in ReScript\nDESCRIPTION: Function signature for copy that creates a new Uint8Array with the same elements as the original array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_26\n\nLANGUAGE: rescript\nCODE:\n```\nlet copy: t => t\n```\n\n----------------------------------------\n\nTITLE: Evaluating ReScript Code Directly\nDESCRIPTION: Demonstrates how to evaluate ReScript code directly using the -bs-eval flag, useful for learning or troubleshooting.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/reason-compiler/latest/extended-compiler-options.mdx#2025-04-18_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nbsc -dparsetree -drawlambda -bs-eval 'Js.log \"hello\"'\n```\n\n----------------------------------------\n\nTITLE: Dynamically Importing Docson Component in Next.js\nDESCRIPTION: This code snippet dynamically imports a custom Docson component using Next.js dynamic import. It includes a loading state and disables server-side rendering.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/build-configuration-schema.mdx#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const Docson = dynamic(\n  () =>\n    import(\"src/components/Docson\").then((comp) => {\n      return comp.make;\n    }),\n  {\n    ssr: false,\n    loading: () => <div> Loading... </div>,\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Converting Float32Array to String in ReScript\nDESCRIPTION: Functions to convert Float32Array to string representations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet join: t => string\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet joinWith: (string, t) => string\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet toString: t => string\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet toLocaleString: t => string\n```\n\n----------------------------------------\n\nTITLE: Copying elements from specified range in Uint8ClampedArray\nDESCRIPTION: Copies a sequence of elements within the array, from a source range to a target index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_11\n\nLANGUAGE: res\nCODE:\n```\nlet copyWithinFromRange: (~to_: int, ~start: int, ~end_: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Finding Minimum Value with Undefined Return in ReScript MutableSet\nDESCRIPTION: Returns the minimum value in a string MutableSet collection. Returns undefined if the collection is empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_9\n\nLANGUAGE: res\nCODE:\n```\nlet minUndefined: t => Js.undefined<value>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet s0 = Belt.MutableSet.String.make()\nlet s1 = Belt.MutableSet.String.fromArray([\"apple\", \"orange\"])\n\ns0->Belt.MutableSet.String.minUndefined /* undefined */\ns1->Belt.MutableSet.String.minUndefined /* \"apple\" */\n```\n\n----------------------------------------\n\nTITLE: Checking if a map is empty in ReScript\nDESCRIPTION: Returns true if the map contains no bindings, false otherwise.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reasonml\nCODE:\n```\nlet isEmpty: t('a) => bool;\n```\n\n----------------------------------------\n\nTITLE: Accessing and Modifying Int32Array Elements\nDESCRIPTION: Function signatures for low-level access to array elements without bounds checking.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-32-array.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet unsafe_get: (t, int) => elt\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet unsafe_set: (t, int, elt) => unit\n```\n\n----------------------------------------\n\nTITLE: Defining Storage Type in ReScript\nDESCRIPTION: Defines the abstract type t for storage operations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/dom/storage2.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype t\n```\n\n----------------------------------------\n\nTITLE: encodeURIComponent Function Signature in ReScript\nDESCRIPTION: Function signature for encodeURIComponent which URL-encodes a string including characters with special meaning in a URI.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/global.mdx#2025-04-18_snippet_16\n\nLANGUAGE: reasonml\nCODE:\n```\nlet encodeURIComponent: string => string;\n```\n\n----------------------------------------\n\nTITLE: Adding Element to Set in ReScript\nDESCRIPTION: Adds a string element to the set. If the element already exists, the set remains unchanged.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-string.mdx#2025-04-18_snippet_11\n\nLANGUAGE: reasonml\nCODE:\n```\nlet add: (t, value) => t;\n```\n\n----------------------------------------\n\nTITLE: Migrating React.forwardRef from JSX v3 to v4\nDESCRIPTION: Example of how to migrate React.forwardRef usage from JSX v3 to v4, addressing the inconsistency between ref as prop and ref_ as argument.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/migrate-react.mdx#2025-04-18_snippet_8\n\nLANGUAGE: res\nCODE:\n```\nmodule FancyInput = {\n  @react.component\n  let make = React.forwardRef((\n    ~className=?,\n    ~children,\n    ref_, // argument\n  ) =>\n    <div>\n      <input\n        type_=\"text\"\n        ?className\n        ref=?{ref_->Js.Nullable.toOption->Belt.Option.map(ReactDOM.Ref.domRef)}\n      />\n      children\n    </div>\n  )\n}\n\n@react.component\nlet make = () => {\n  let input = React.useRef(Js.Nullable.null)\n\n  <div>\n    <FancyInput ref=input> // prop\n      <button onClick> {React.string(\"Click to focus\")} </button>\n    </FancyInput>\n  </div>\n}\n```\n\nLANGUAGE: res\nCODE:\n```\nmodule FancyInput = {\n  @react.component\n  let make = React.forwardRef((\n    ~className=?,\n    ~children,\n    ref, // only `ref` is allowed\n  ) =>\n    <div>\n      <input\n        type_=\"text\"\n        ?className\n        ref=?{ref->Js.Nullable.toOption->Belt.Option.map(ReactDOM.Ref.domRef)}\n      />\n      children\n    </div>\n  )\n}\n\n@react.component\nlet make = () => {\n  let input = React.useRef(Js.Nullable.null)\n\n  <div>\n    <FancyInput ref=input>\n      <button onClick> {React.string(\"Click to focus\")} </button>\n    </FancyInput>\n  </div>\n}\n```\n\n----------------------------------------\n\nTITLE: Float64Array Type Definitions\nDESCRIPTION: Core type definitions for Float64Array typed array implementation\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_float-64-array.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype elt = float\ntype typed_array<'a> = Js_typed_array2.Float64Array.typed_array<'a>\ntype t = typed_array<elt>\n```\n\n----------------------------------------\n\nTITLE: Mapping with key using curried function in ReScript\nDESCRIPTION: Function signature for mapping values with keys in a mutable map using a curried function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_45\n\nLANGUAGE: ReScript\nCODE:\n```\nlet mapWithKey: (t<'a>, (key, 'a) => 'b) => t<'b>\n```\n\n----------------------------------------\n\nTITLE: Executing Lazy Computations with Let Binding\nDESCRIPTION: This snippet illustrates how to use let binding with pattern matching to execute a lazy computation. The pattern lazy(result) forces the computation and binds its result to the variable 'result'.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/lazy-values.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\nlet lazy(result) = expensiveFilesRead\nConsole.log(result)\n```\n\nLANGUAGE: js\nCODE:\n```\nvar result = CamlinternalLazy.force(expensiveFilesRead);\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Convert Float32Array to Locale String\nDESCRIPTION: Returns a locale-specific string representation of the Float32Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_31\n\nLANGUAGE: rescript\nCODE:\n```\nlet toLocaleString: t => string\n```\n\n----------------------------------------\n\nTITLE: Creating a HashSet in ReScript\nDESCRIPTION: This function signature shows how to create a new HashSet. It takes a hint size for initial capacity and an id module for custom hash behavior.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-set.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reason\nCODE:\n```\nlet make: (~hintSize: int, ~id: id('a, 'id)) => t('a, 'id);\n```\n\n----------------------------------------\n\nTITLE: Cleaning ReScript Project Build Artifacts\nDESCRIPTION: This command cleans all project build artifacts, including those in dependencies. It's useful for resolving stale build issues.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/build-overview.mdx#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nbsb -clean-world\n```\n\n----------------------------------------\n\nTITLE: Prop Name Mangling Migration\nDESCRIPTION: Example of migrating prop name mangling from v3 to v4 using @as annotation\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/migrate-react.mdx#2025-04-18_snippet_8\n\nLANGUAGE: res\nCODE:\n```\nmodule Comp = {\n  @react.component\n  let make =\n    (@as(\"open\") ~_open, @as(\"type\") ~_type) =>\n      <Modal _open _type>\n        <Description />\n      </Modal>\n}\n```\n\n----------------------------------------\n\nTITLE: Integer to Exponential String Conversion in ReScript\nDESCRIPTION: Converts an integer to a string using exponential (scientific) notation. Returns the number in exponential format without specifying precision.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/int.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\nlet toExponential: int => string;\n```\n\nLANGUAGE: reason\nCODE:\n```\n/* prints \"7.7e+1\" */\nJs.log(Js.Int.toExponential(77));\n```\n\n----------------------------------------\n\nTITLE: Creating Int8Array from Array\nDESCRIPTION: Function signature to create a new Int8Array from a regular array of integers.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_51\n\nLANGUAGE: res\nCODE:\n```\nlet make: array<elt> => t\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Anchor Tags in ReScript\nDESCRIPTION: Deprecated function for creating HTML anchor tags. Not recommended for use.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string.mdx#2025-04-18_snippet_40\n\nLANGUAGE: ReScript\nCODE:\n```\nlet anchor: (t, t) => t;\n```\n\n----------------------------------------\n\nTITLE: Setting Array Elements with unsafe_set\nDESCRIPTION: Function signature for unsafely setting an element at a specified index in the Int8Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nlet unsafe_set: (t, int, elt) => unit\n```\n\n----------------------------------------\n\nTITLE: Importing Global CSS in ReScript React\nDESCRIPTION: Shows how to import global CSS files in ReScript using the %%raw expression with either ES modules or CommonJS syntax.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/styling.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\n// in a JS module setup\n%%raw(\"import './styles/main.css'\")\n\n// or with CommonJS\n%%raw(\"require('./styles/main.css')\")\n```\n\n----------------------------------------\n\nTITLE: Adding Debug Flag to BuckleScript Configuration\nDESCRIPTION: Add the -bs-g flag to your bsconfig.json to enable better data structures printing for debugging. This flag preserves record field names, variant tags, and other structural information in the compiled JavaScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/reason-compiler/latest/better-data-structures-printing-debug-mode.mdx#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"bsc-flags\": [\"-bs-g\"]\n```\n\n----------------------------------------\n\nTITLE: Creating a Belt.MutableSet.Int from a sorted array in ReScript\nDESCRIPTION: Creates a new set from a sorted array of integers using the fromSortedArrayUnsafe function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\nlet fromSortedArrayUnsafe: array<value> => t\n```\n\n----------------------------------------\n\nTITLE: Integer to Precision String with Specified Digits in ReScript\nDESCRIPTION: Formats an integer to a string with specified total digits of precision. Can use scientific notation if precision is less than number of digits.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/int.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reason\nCODE:\n```\nlet toPrecisionWithPrecision: (int, ~digits: int) => string;\n```\n\nLANGUAGE: reason\nCODE:\n```\n/* prints \"1.2e+8\" */\nJs.log(Js.Int.toPrecisionWithPrecision(123456789, ~digits=2));\n\n/* prints \"0.0\" */\nJs.log(Js.Int.toPrecisionWithPrecision(0, ~digits=2));\n```\n\n----------------------------------------\n\nTITLE: Unsafe Array Element Setting in ReScript\nDESCRIPTION: Sets the value at a specific index in an array without bounds checking, which may cause errors if the index is out of range.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/array.mdx#2025-04-18_snippet_8\n\nLANGUAGE: reason\nCODE:\n```\nlet setUnsafe: (array('a), int, 'a) => unit;\n```\n\n----------------------------------------\n\nTITLE: JavaScript Output of React Rendering Code\nDESCRIPTION: Shows the compiled JavaScript output of the ReScript code for rendering a React element to the DOM. It demonstrates how ReScript's pattern matching is translated to JavaScript conditionals.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/rendering-elements.mdx#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar root = document.querySelector(\"#root\");\n\nif (!(root == null)) {\n  ReactDom.render(React.createElement(\"div\", undefined, \"Hello Andrea\"), root);\n}\n```\n\n----------------------------------------\n\nTITLE: UInt32Array Creation Methods in ReScript\nDESCRIPTION: Functions to create new UInt32Array instances from various sources, including arrays, buffers, and length.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-32-array.mdx#2025-04-18_snippet_14\n\nLANGUAGE: res\nCODE:\n```\nlet make: array<elt> => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet fromBuffer: Js_typed_array2.array_buffer => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet fromBufferOffset: (Js_typed_array2.array_buffer, int) => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet fromBufferRange: (Js_typed_array2.array_buffer, ~offset: int, ~length: int) => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet fromLength: int => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet from: Js_typed_array2.array_like<elt> => t\n```\n\n----------------------------------------\n\nTITLE: Example of Removing Multiple Elements from String Set in ReScript\nDESCRIPTION: Shows how to remove multiple string elements from a set at once using removeMany.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-string.mdx#2025-04-18_snippet_18\n\nLANGUAGE: reasonml\nCODE:\n```\nlet set = Belt.Set.String.fromArray([|\"apple\", \"banana\", \"orange\"|]);\n\nlet newSet = set->Belt.Set.String.removeMany([|\"strawberry\", \"apple\", \"banana\", \"orange\"|]);\nnewSet->Belt.Set.String.toArray; /* [||] */\n```\n\n----------------------------------------\n\nTITLE: Alternative Constructor for DataView from ArrayBuffer\nDESCRIPTION: Alternative binding for creating a DataView from an ArrayBuffer, functionally equivalent to make.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_data-view.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reasonml\nCODE:\n```\nlet fromBuffer: Js_typed_array2.array_buffer => t;\n```\n\n----------------------------------------\n\nTITLE: Copying a Vector in ReScript\nDESCRIPTION: Creates a shallow copy of a vector.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/vector.mdx#2025-04-18_snippet_4\n\nLANGUAGE: ReScript\nCODE:\n```\nlet copy: t('a) => t('a);\n```\n\n----------------------------------------\n\nTITLE: Find Element in Array\nDESCRIPTION: Returns the first element in the array that satisfies the provided function test.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-64-array.mdx#2025-04-18_snippet_36\n\nLANGUAGE: reason\nCODE:\n```\nlet find: ((. elt) => bool, t) => Js.undefined(elt);\n```\n\n----------------------------------------\n\nTITLE: Manipulating Int32Array Data with copyWithin\nDESCRIPTION: Functions to copy a sequence of array elements within the same array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-32-array.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet copyWithin: (~to_: int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet copyWithinFrom: (~to_: int, ~from: int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet copyWithinFromRange: (~to_: int, ~start: int, ~end_: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Array Search Operation for Float64Array\nDESCRIPTION: Function to check if a Float64Array includes a specific value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-64-array.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\nlet includes: (elt, t) => bool\n```\n\n----------------------------------------\n\nTITLE: Modification Operations\nDESCRIPTION: Functions for modifying map contents including removal and updates.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-map-int.mdx#2025-04-18_snippet_7\n\nLANGUAGE: res\nCODE:\n```\nlet checkInvariantInternal: t<'a> => unit\n```\n\nLANGUAGE: res\nCODE:\n```\nlet remove: (t<'a>, key) => unit\n```\n\nLANGUAGE: res\nCODE:\n```\nlet removeMany: (t<'a>, array<key>) => unit\n```\n\nLANGUAGE: res\nCODE:\n```\nlet set: (t<'a>, key, 'a) => unit\n```\n\nLANGUAGE: res\nCODE:\n```\nlet updateU: (t<'a>, key, (. option<'a>) => option<'a>) => unit\n```\n\nLANGUAGE: res\nCODE:\n```\nlet update: (t<'a>, key, option<'a> => option<'a>) => unit\n```\n\n----------------------------------------\n\nTITLE: Merging multiple key-value pairs into Belt.HashMap.String in ReScript\nDESCRIPTION: Adds multiple key-value pairs to an existing hash map using the mergeMany function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/hash-map-string.mdx#2025-04-18_snippet_17\n\nLANGUAGE: ReScript\nCODE:\n```\nlet mergeMany: (t<'a>, array<(key, 'a)>) => unit\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet hMap = Belt.HashMap.String.make(~hintSize=10)\nBelt.HashMap.String.mergeMany(hMap, [(\"1\", \"value1\"), (\"2\", \"value2\")])\n```\n\n----------------------------------------\n\nTITLE: Checking if any element satisfies a predicate with uncurried function in ReScript\nDESCRIPTION: Returns a boolean indicating whether at least one element of the set satisfies the uncurried predicate.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set-string.mdx#2025-04-18_snippet_23\n\nLANGUAGE: rescript\nCODE:\n```\nlet someU: (t, (. value) => bool) => bool\n```\n\n----------------------------------------\n\nTITLE: Converting Option<bool> to bool Using Basic Pattern Matching\nDESCRIPTION: Improving the optionBoolToBool function with pattern matching, but still using nested conditional logic within a pattern case.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_15\n\nLANGUAGE: reason\nCODE:\n```\nlet optionBoolToBool = opt => {\n  switch (opt) {\n  | None => false\n  | Some(a) => a ? true : false\n  }\n};\n```\n\nLANGUAGE: ml\nCODE:\n```\nlet optionBoolToBool opt =\n  match opt with\n  | None -> false\n  | Some a -> if a then true else false\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction optionBoolToBool(opt) {\n  if (opt !== undefined && opt) {\n    return true;\n  } else {\n    return false;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Uncurried Every Check for Set in ReScript\nDESCRIPTION: Checks if all elements satisfy a predicate using an uncurried function. Used internally by the every function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-string.mdx#2025-04-18_snippet_36\n\nLANGUAGE: reasonml\nCODE:\n```\nlet everyU: (t, [@bs] (value => bool)) => bool;\n```\n\n----------------------------------------\n\nTITLE: Finding maximum key with undefined in ReScript\nDESCRIPTION: Function signature for finding the maximum key in a mutable map, returning an undefined type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_27\n\nLANGUAGE: ReScript\nCODE:\n```\nlet maxKeyUndefined: t<'a> => Js.undefined<key>\n```\n\n----------------------------------------\n\nTITLE: Using @live Decorator in ReScript\nDESCRIPTION: The @live decorator is used to mark values as live for reanalyze's dead code analysis, even if they appear unused. It's particularly useful for FFI where values may be accessed indirectly. The decorator can be applied to various code elements that might otherwise be flagged as unused.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/decorator_live.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\n@live\n```\n\n----------------------------------------\n\nTITLE: Using __LINE_OF__ Special Value in ReScript\nDESCRIPTION: Demonstrates the usage of __LINE_OF__ to get the line number of an expression. The example shows how to capture both the line number and the expression itself using tuple destructuring, then logging both values to the console.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/specialvalues_line_of.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nlet f = () => None\nlet (line, f') = __LINE_OF__(f)\n\nline->Console.log\nf'->Console.log\n\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction f() {\n  \n}\n\nconsole.log(2);\n\nconsole.log(f);\n\nvar line = 2;\n\nvar f$p = f;\n```\n\n----------------------------------------\n\nTITLE: Installing ReScript Documentation Tools\nDESCRIPTION: Commands to install and use the ReScript documentation extraction tool to generate JSON documentation from ReScript files\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2024-01-11-release-11-0-0.mdx#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev @rescript/tools\nnpx rescript-tools doc src/MyFile.res > doc.json\n```\n\n----------------------------------------\n\nTITLE: Creating undefined values in ReScript\nDESCRIPTION: The 'undefined' value represents JavaScript's undefined of type Js.null_undefined('a).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/nullable.mdx#2025-04-18_snippet_5\n\nLANGUAGE: reason\nCODE:\n```\nlet undefined: t('a);\n```\n\n----------------------------------------\n\nTITLE: Creating Empty Set in ReScript MutableSetString\nDESCRIPTION: Function signature for creating an empty string set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nlet make: unit => t\n```\n\n----------------------------------------\n\nTITLE: Converting Integer to Exponential Notation with Precision in ReScript\nDESCRIPTION: Converts an integer to exponential notation with specified decimal precision. The digits parameter controls decimal places (range 0-20).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/int.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\n/* prints \"7.70e+1\" */\nJs.log(Js.Int.toExponentialWithPrecision(77, ~digits=2))\n\n/* prints \"5.68e+3\" */\nJs.log(Js.Int.toExponentialWithPrecision(5678, ~digits=2))\n```\n\n----------------------------------------\n\nTITLE: Converting Array to String with join\nDESCRIPTION: Function signature to join all elements of the Int8Array into a string with the default separator.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_21\n\nLANGUAGE: res\nCODE:\n```\nlet join: t => string\n```\n\n----------------------------------------\n\nTITLE: Comparison Operations in ReScript\nDESCRIPTION: Defines unsafe comparison operations and equality checks for null and undefined values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reason\nCODE:\n```\nlet eqNull: ('a, null('a)) => bool;\nlet eqUndefined: ('a, undefined('a)) => bool;\nlet eqNullable: ('a, nullable('a)) => bool;\n\nlet unsafe_lt: ('a, 'a) => bool;\nlet unsafe_le: ('a, 'a) => bool;\nlet unsafe_gt: ('a, 'a) => bool;\nlet unsafe_ge: ('a, 'a) => bool;\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for Uint16Array\nDESCRIPTION: Core type definitions for the Uint16Array implementation, defining element type, typed array type and the main type t.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-16-array.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype elt = int\ntype typed_array<'a>\ntype t = typed_array<elt>\n```\n\n----------------------------------------\n\nTITLE: Converting String to Array-Like Structure in ReScript\nDESCRIPTION: Converts a string into an array-like structure that can be processed by array functions like Js.Array2.fromMap(). Takes a string input and returns an array-like object containing individual characters.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string-2.mdx#2025-04-18_snippet_30\n\nLANGUAGE: reason\nCODE:\n```\nlet castToArrayLike: t => Js_array2.array_like(t);\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet s = \"abcde\";\nlet arr = Js.Array2.fromMap(Js.String2.castToArrayLike(s), (x)=>{x});\narr == [|\"a\", \"b\", \"c\", \"d\", \"e\"|];\n```\n\n----------------------------------------\n\nTITLE: Finding Element with find\nDESCRIPTION: Function signature to find the first element in the Int8Array that satisfies a provided test function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_36\n\nLANGUAGE: res\nCODE:\n```\nlet find: ((. elt) => bool, t) => Js.undefined<elt>\n```\n\n----------------------------------------\n\nTITLE: String splitLimited Function in ReScript (Deprecated)\nDESCRIPTION: The splitLimited function is deprecated. Users should use splitAtMost instead for splitting strings with a limit on the number of substrings returned.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/string.mdx#2025-04-18_snippet_8\n\nLANGUAGE: res\nCODE:\n```\nlet splitLimited: (t, int, t) => array<t>\n```\n\n----------------------------------------\n\nTITLE: Getting the byte length of an ArrayBuffer in ReScript\nDESCRIPTION: Function signature for retrieving the length in bytes of an ArrayBuffer.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_array-buffer.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet byteLength: t => int\n```\n\n----------------------------------------\n\nTITLE: Retrieving Matches from RegExp Result (Deprecated)\nDESCRIPTION: Deprecated function that returns an array of matches from a RegExp result. The first element is the full match, and remaining elements are the substring matches.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/re.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reason\nCODE:\n```\nlet matches: result => array(string);\n```\n\n----------------------------------------\n\nTITLE: Compiled JavaScript Output with External Stdlib\nDESCRIPTION: JavaScript output after compiling the ReScript code with external stdlib configuration. Note the require path starting with @rescript/std, indicating the use of the external stdlib package.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/build-external-stdlib.mdx#2025-04-18_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Note the require path starting with \"@rescript/std\".\nvar Belt_Array = require(\"@rescript/std/lib/js/belt_Array.js\");\n\nBelt_Array.forEach([1, 2, 3], function (num) {\n  console.log(num);\n});\n```\n\n----------------------------------------\n\nTITLE: Using tanh function to calculate hyperbolic tangent in ReScript\nDESCRIPTION: The tanh function returns the hyperbolic tangent of its argument, which must be specified in radians. It takes a float as input and returns a float.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/math.mdx#2025-04-18_snippet_34\n\nLANGUAGE: res\nCODE:\n```\nlet tanh: float => float\n```\n\n----------------------------------------\n\nTITLE: Setting Array Data in Uint16Array in ReScript\nDESCRIPTION: Functions to set array data in a Uint16Array, with optional offset.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reason\nCODE:\n```\nlet setArray: (array(elt), t) => unit;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet setArrayOffset: (array(elt), int, t) => unit;\n```\n\n----------------------------------------\n\nTITLE: Array Construction and Conversion\nDESCRIPTION: Functions for creating new arrays and converting between different formats.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_uint-32-array.mdx#2025-04-18_snippet_5\n\nLANGUAGE: reason\nCODE:\n```\nlet make: array(elt) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet fromBuffer: Js_typed_array2.array_buffer => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet from: Js_typed_array2.array_like(elt) => t;\n```\n\n----------------------------------------\n\nTITLE: Array Manipulation Methods\nDESCRIPTION: Methods for manipulating array contents including copying, filling, and sorting\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_int-16-array.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reason\nCODE:\n```\nlet copyWithin: (~to_: int, t) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet fillInPlace: (elt, t) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet reverseInPlace: t => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet sortInPlace: t => t;\n```\n\n----------------------------------------\n\nTITLE: Finding Element Index in TypedArray in ReScript\nDESCRIPTION: Function signature for finding the first index at which a given element can be found in a Uint8ClampedArray.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_19\n\nLANGUAGE: res\nCODE:\n```\nlet indexOf: (elt, t) => int\n```\n\n----------------------------------------\n\nTITLE: Defining Storage Type - ReScript\nDESCRIPTION: Defines the abstract type 't' representing a storage object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/dom/storage2.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype t\n```\n\n----------------------------------------\n\nTITLE: Mapping TypedArray Elements in ReScript\nDESCRIPTION: Function signature for creating a new typed array populated with the results of calling a provided function on every element in the calling array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_42\n\nLANGUAGE: res\nCODE:\n```\nlet map: ((. elt) => 'b, t) => typed_array<'b>\n```\n\n----------------------------------------\n\nTITLE: Array Creation and Constant Methods\nDESCRIPTION: Constants and constructor functions for creating new Uint8ClampedArray instances.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_10\n\nLANGUAGE: res\nCODE:\n```\nlet _BYTES_PER_ELEMENT: int\n```\n\nLANGUAGE: res\nCODE:\n```\nlet make: array<elt> => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet fromBuffer: Js_typed_array.array_buffer => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet fromBufferOffset: (Js_typed_array.array_buffer, int) => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet fromBufferRange: (Js_typed_array.array_buffer, ~offset: int, ~length: int) => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet fromLength: int => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet from: Js_typed_array.array_like<elt> => t\n```\n\n----------------------------------------\n\nTITLE: ReScript App Configuration with Pinned Dependencies\nDESCRIPTION: Configuration for the main app's rescript.json file showing how to define pinned dependencies.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/build-pinned-dependencies.mdx#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"app\",\n  \"version\": \"1.0.0\",\n  \"sources\": {\n    \"dir\": \"src\",\n    \"subdirs\": true\n  },\n  /* ... */\n  \"bs-dependencies\": [\"common\", \"myplugin\"],\n  \"pinned-dependencies\": [\"common\", \"myplugin\"]\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Installing ReScript React Package\nDESCRIPTION: Command to install the @rescript/react package using npm.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/installation.mdx#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @rescript/react\n```\n\n----------------------------------------\n\nTITLE: Defining Basic ReScript Variants with Inline Records\nDESCRIPTION: Example of traditional ReScript variant with inline record, showing its JavaScript runtime representation. The variant uses the default TAG property as a discriminator with numeric values (0 for User).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2023-04-17-improving-interop.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype entity = User({name: string}) | Group({workingName: string})\n\nlet user = User({name: \"Hello\"})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar user = {\n  TAG: /* User */ 0,\n  name: \"Hello\",\n};\n```\n\n----------------------------------------\n\nTITLE: Writing floating-point values to DataView in ReScript\nDESCRIPTION: Functions to write 32-bit and 64-bit floating-point values to a DataView, with optional little-endian versions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array-2_data-view.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet setFloat32: (t, int, float) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet setFloat32LittleEndian: (t, int, float) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet setFloat64: (t, int, float) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet setFloat64LittleEndian: (t, int, float) => unit\n```\n\n----------------------------------------\n\nTITLE: Vector Left Fold Operation\nDESCRIPTION: Performs a left fold operation on vector elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/vector.mdx#2025-04-18_snippet_11\n\nLANGUAGE: res\nCODE:\n```\nlet foldLeft: ((. 'a, 'b) => 'a, 'a, t<'b>) => 'a\n```\n\n----------------------------------------\n\nTITLE: String Link Method in ReScript\nDESCRIPTION: The link function creates a string with an HTML <a> element. It takes link text and URL as parameters, but is deprecated in web standards. Returns an HTML anchor tag string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/string-2.mdx#2025-04-18_snippet_36\n\nLANGUAGE: res\nCODE:\n```\nlet link: (t, t) => t\n```\n\nLANGUAGE: res\nCODE:\n```\nJs.String2.link(\"Go to page two\", \"page2.html\") == \"<a href=\\\"page2.html\\\">Go to page two</a>\"\n```\n\n----------------------------------------\n\nTITLE: Example Project Structure\nDESCRIPTION: Directory structure showcasing a ReScript project using pinned dependencies with multiple packages.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/build-pinned-dependencies.mdx#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmyproject/\n  app/\n   - src/App.res\n   - rescript.json\n  common/\n   - src/Header.res\n   - rescript.json\n  myplugin/\n   - src/MyPlugin.res\n   - rescript.json\n  package.json\n```\n\n----------------------------------------\n\nTITLE: Syntax Error Raiser\nDESCRIPTION: Function signature for raising a JavaScript SyntaxError.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/exn.mdx#2025-04-18_snippet_12\n\nLANGUAGE: rescript\nCODE:\n```\nlet raiseSyntaxError: string => 'a\n```\n\n----------------------------------------\n\nTITLE: Configuring ReScript JSON for Automatic JSX Mode\nDESCRIPTION: JSON configuration to explicitly set JSX version 4 with automatic mode.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/installation.mdx#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsx\": { \"version\": 4, \"mode\": \"automatic\" }\n}\n```\n\n----------------------------------------\n\nTITLE: ReScript CLI Usage Example\nDESCRIPTION: Shows the new unified ReScript CLI command structure and available subcommands that replace the old bsc and bsb commands\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2021-05-07-release-9-1.mdx#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n❯ rescript -help\nAvailable flags\n-v, -version  display version number\n-h, -help     display help\nSubcommands:\n    build\n    clean\n    format\n    convert\n    help\nRun rescript subcommand -h for more details,\nFor example:\n    rescript build -h\n    rescript format -h\nThe default `rescript` is equivalent to `rescript build` subcommand\n```\n\n----------------------------------------\n\nTITLE: ReScript Record with BS.as Annotation for Reserved Keywords\nDESCRIPTION: ReScript code demonstrating how to handle JavaScript object properties that use reserved keywords.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/use-illegal-identifier-names.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reason\nCODE:\n```\ntype payload = {\n  [@bs.as \"type\"] type_: string\n}\n\nlet payload = {\n  type_: \"Documentation\"\n}\n\n/* ReScript is happy since we're using the valid `type_` field name */\nlet payloadType = payload.type_;\n```\n\nLANGUAGE: ml\nCODE:\n```\ntype payload = {\n  type_: string [@bs.as \"type\"]\n}\n\nlet payload = {\n  type_ = \"Documentation\"\n}\n\n(* ReScript is happy since we're using the valid `type_` field name *)\nlet payloadType = payload.type_\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/* The reason compiler has correctly ouput `payload.type` even though *we* called the field `type_` */\nvar payloadType = payload.type;\n```\n\n----------------------------------------\n\nTITLE: Creating Date with Year and Month in ReScript\nDESCRIPTION: Function signature for makeWithYM, which creates a date for the first day of a given year and month.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet makeWithYM: (~year: float, ~month: float, unit) => t\n```\n\n----------------------------------------\n\nTITLE: Integer Addition in ReScript vs JavaScript\nDESCRIPTION: Demonstrates integer addition in ReScript and its JavaScript output. The operation is identical in both languages.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/overview.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\n23 + 1\n```\n\nLANGUAGE: javascript\nCODE:\n```\n23 + 1\n```\n\n----------------------------------------\n\nTITLE: List Manipulation Functions\nDESCRIPTION: Examples of list manipulation including adding elements and accessing by index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/list.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\nBelt.List.add(list{2, 3}, 1) // list{1, 2, 3}\n\nBelt.List.add(list{\"World\", \"!\"}, \"Hello\") // list{\"Hello\", \"World\", \"!\"}\n```\n\nLANGUAGE: res\nCODE:\n```\nlet abc = list{\"A\", \"B\", \"C\"}\n\nabc->Belt.List.get(1) // Some(\"B\")\n\nabc->Belt.List.get(4) // None\n```\n\n----------------------------------------\n\nTITLE: String splitRegexpLimited Function in ReScript (Deprecated)\nDESCRIPTION: The splitRegexpLimited function is deprecated. Users should use splitByReAtMost instead for splitting strings by regular expressions with a limit on results.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/string.mdx#2025-04-18_snippet_11\n\nLANGUAGE: res\nCODE:\n```\nlet splitRegexpLimited: (Js_re.t, int, t) => array<t>\n```\n\n----------------------------------------\n\nTITLE: Vector Unsafe Set Operation\nDESCRIPTION: Sets an element without bounds checking.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/vector.mdx#2025-04-18_snippet_20\n\nLANGUAGE: res\nCODE:\n```\nlet unsafe_set: (t<'a>, int, 'a) => unit\n```\n\n----------------------------------------\n\nTITLE: Disabling Uncurried Mode Configuration\nDESCRIPTION: JSON configuration showing how to disable uncurried mode in ReScript 11\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/migrate-to-v11.mdx#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"uncurried\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Cleaning ReScript Build Artifacts\nDESCRIPTION: Command to clean all build artifacts when encountering build issues.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/build-overview.mdx#2025-04-18_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nbsb -clean-world\n```\n\n----------------------------------------\n\nTITLE: TypeScript Example of useParams Type Annotation\nDESCRIPTION: Example of how Next.js useParams hook is annotated in TypeScript, providing context for the ReScript solution that follows.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/module-functions.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nconst params = useParams<{ tag: string; item: string }>()\n```\n\n----------------------------------------\n\nTITLE: List Implementation in ReScript vs JavaScript\nDESCRIPTION: Shows how ReScript lists are represented in JavaScript as linked list structures with hd (head) and tl (tail) properties. This feature is not recommended in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/overview.mdx#2025-04-18_snippet_16\n\nLANGUAGE: rescript\nCODE:\n```\nlist{1, 2, 3}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{hd: 1, tl: {hd: 2, tl: {hd: 3, tl: 0}}}\n```\n\n----------------------------------------\n\nTITLE: Defining URL Record Type in ReScript\nDESCRIPTION: Defines the structure of the URL record used by the ReScript React Router, including path, hash, and search properties.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/router.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype url = {\n  /* path takes window.location.pathname, like \"/book/title/edit\" and turns it into `list{\"book\", \"title\", \"edit\"}` */\n  path: list<string>,\n  /* the url's hash, if any. The # symbol is stripped out for you */\n  hash: string,\n  /* the url's query params, if any. The ? symbol is stripped out for you */\n  search: string\n}\n```\n\n----------------------------------------\n\nTITLE: Removing JSX v3 Configuration in bsconfig.json\nDESCRIPTION: Configuration to remove from bsconfig.json when migrating from JSX v3.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/migrate-react.mdx#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"reason\": { \"react-jsx\": 3 }\n}\n```\n\n----------------------------------------\n\nTITLE: String Coercion to Unboxed Variant in ReScript\nDESCRIPTION: Demonstrates how to coerce strings to variant types when the variant is @unboxed and has a catch-all string case. This allows for flexible type conversion while maintaining type safety.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/variant.mdx#2025-04-18_snippet_21\n\nLANGUAGE: rescript\nCODE:\n```\n@unboxed\ntype myEnum = One | Two | Other(string)\n\n// Other(\"Other thing\")\nlet asMyEnum = (\"Other thing\" :> myEnum)\n\n// One\nlet asMyEnum = (\"One\" :> myEnum)\n```\n\n----------------------------------------\n\nTITLE: String Representation in ReScript vs JavaScript\nDESCRIPTION: Shows how string literals in ReScript are converted to JavaScript strings. The output is identical.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/overview.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\n\"Hello\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\n\"Hello\"\n```\n\n----------------------------------------\n\nTITLE: ReScript Without Inlining Constants\nDESCRIPTION: This example shows ReScript code without the @inline annotation, resulting in JavaScript that keeps the variable reference instead of inlining the value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/inlining-constants.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\n@val external process: 'a = \"process\"\n\nlet mode = \"development\"\n\nif (process[\"env\"][\"mode\"] === mode) {\n  Console.log(\"Dev-only code here!\")\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar mode = \"development\";\n\nif (process.env.mode === mode) {\n  console.log(\"Dev-only code here!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Polymorphic Variant to String in ReScript\nDESCRIPTION: Demonstrates coercing a polymorphic variant color type to a string value using the :> operator.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/operators_type_coercion.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype color = [#Red | #Green | #Blue]\nlet color: color = #Red\nlet message = \"The color is \" ++ (color :> string)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar message = \"The color is Red\";\n```\n\n----------------------------------------\n\nTITLE: Type Comparison Functions in ReScript and JavaScript\nDESCRIPTION: Shows how comparison operators work with type checking in ReScript and their JavaScript output.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2025-04-11-introducing-unified-operators.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet compareInt = (a: int, b) => a < b\n\nlet compareFloat = (a: float, b) => a < b\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction compareInt(a, b) {\n  return a < b;\n}\n\nfunction compareFloat(a, b) {\n  return a < b;\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Triangle Pipe Operator in ReScript\nDESCRIPTION: Example demonstrating how to use the deprecated triangle pipe operator (|>) to pass a value to a function as its last argument. The example creates a die roll function and then pipes its result into a message formatter.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/operators_triangle_pipe.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\nlet dieRoll = size => {\n  Math.Int.random(1, size)\n}\n\nlet dieRollMessage = (name, value) => {\n  \"Hi \" ++ name ++ \", you rolled a \" ++ Int.toString(value)\n}\n\nlet message = dieRoll(6) |> dieRollMessage(\"Jeremy\")\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction dieRoll(size) {\n  return Core__Math.Int.random(1, size);\n}\n\nfunction dieRollMessage(name, value) {\n  return \"Hi \" + name + \", you rolled a \" + value.toString();\n}\n\nvar message = dieRollMessage(\"Jeremy\", dieRoll(6));\n```\n\n----------------------------------------\n\nTITLE: Unicode Support Preview\nDESCRIPTION: Preview of upcoming unicode support in ReScript pattern matching\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2021-05-07-release-9-1.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet helloUnicode = (x) =>{\n  switch x {\n  | '❤️' => \"ReScript is awesome\"\n  | 'Σ' => \"Math is fun\"\n  | _ => \"Lots of unicode\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Legacy Conversion from Option to Null_undefined in ReScript\nDESCRIPTION: Defines the 'from_opt' function, a legacy alias for 'fromOption'.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/null-undefined.mdx#2025-04-18_snippet_11\n\nLANGUAGE: reason\nCODE:\n```\nlet from_opt: option('a) => t('a);\n```\n\n----------------------------------------\n\nTITLE: Get Storage Length - ReScript\nDESCRIPTION: External binding to get the number of items in storage.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/dom/storage2.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nexternal length: t => int = \"length\"\n```\n\n----------------------------------------\n\nTITLE: Writing 16-bit Unsigned Integer (Big Endian)\nDESCRIPTION: Stores an unsigned 16-bit integer at the specified byte offset from the start of the DataView using big-endian format.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_data-view.mdx#2025-04-18_snippet_26\n\nLANGUAGE: reasonml\nCODE:\n```\nlet setUint16: (t, int, int) => unit;\n```\n\n----------------------------------------\n\nTITLE: Signature for binarySearch function in ReScript\nDESCRIPTION: Function signature for binarySearch, which performs a binary search on a sorted integer array. Returns the index of the found element or a negative number indicating the insertion point if not found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/sort-array-int.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\nlet binarySearch: (array<element>, element) => int\n```\n\n----------------------------------------\n\nTITLE: Updating Value (Curried) in ReScript MapInt Module\nDESCRIPTION: Function signature for updating a value in the map using a curried function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-int.mdx#2025-04-18_snippet_42\n\nLANGUAGE: rescript\nCODE:\n```\nlet update: (t<'v>, key, option<'v> => option<'v>) => t<'v>\n```\n\n----------------------------------------\n\nTITLE: JavaScript Output for Scoped Polymorphic Type\nDESCRIPTION: The compiled JavaScript output from the ReScript scoped polymorphic type example, showing how it cleanly compiles to standard JavaScript with no type information.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/language_scoped_polymorphic_type.mdx#2025-04-18_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nvar JsAPI = require(\"jsAPI\");\n\nvar myLogger = JsAPI.getLogger();\n\nmyLogger.log(\"Hello, ReScript!\");\n\nmyLogger.log(42);\n```\n\n----------------------------------------\n\nTITLE: Using %debugger expression in ReScript\nDESCRIPTION: This snippet demonstrates the use of the [%debugger] expression in ReScript, which creates a debugger statement in the JavaScript output. This allows setting breakpoints for debugging purposes.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/embed-raw-javascript.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\nlet f = (x, y) => {\n  [%debugger];\n  x + y;\n};\n```\n\nLANGUAGE: ml\nCODE:\n```\nlet f x y =\n  [%debugger ];\n  x + y\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction f(x, y) {\n  debugger;\n  return x + y | 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Set Size in ReScript MutableSetString\nDESCRIPTION: Returns the number of elements in the set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_32\n\nLANGUAGE: reason\nCODE:\n```\nlet size: t => int;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet s0 = Belt.MutableSet.String.fromArray([|\"apple\"|]);\n\ns0->Belt.MutableSet.String.size; /* 1 */\n```\n\n----------------------------------------\n\nTITLE: Incorrect Spread Positioning in ReScript JSX\nDESCRIPTION: Shows that spreads must be at the first position in props list, followed by other props. This example is not allowed.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/jsx.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\n<NotAllowed a=\"a\" {...props} />\n```\n\n----------------------------------------\n\nTITLE: Compiling Multiple ReScript Files\nDESCRIPTION: Shows how to compile multiple .ml and .mli files in ReScript using wildcard patterns.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/reason-compiler/latest/extended-compiler-options.mdx#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nbsc -c -bs-files *.ml *.mli\n```\n\n----------------------------------------\n\nTITLE: JavaScript Object Example\nDESCRIPTION: Sample JavaScript object structure that will be created using ReScript bindings.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/generate-converters-accessors.mdx#2025-04-18_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nvar homeRoute = {\n  type: \"GET\",\n  path: \"/\",\n  action: () => console.log(\"Home\"),\n  // options: ...\n};\n```\n\n----------------------------------------\n\nTITLE: Creating TypedArray from Array-Like Object in ReScript\nDESCRIPTION: Function signature for creating a new Uint8ClampedArray from an array-like object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_56\n\nLANGUAGE: res\nCODE:\n```\nlet from: Js_typed_array2.array_like<elt> => t\n```\n\n----------------------------------------\n\nTITLE: Creating Some Value in ReScript\nDESCRIPTION: Function signature and example for wrapping a value in Some constructor.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/option.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet some: 'a => option<'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.Option.some(1066) == Some(1066)\n```\n\n----------------------------------------\n\nTITLE: Finding first index of element starting from specified position\nDESCRIPTION: Returns the first index at which a given element can be found in the array, starting at the specified index, or -1 if not present.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_20\n\nLANGUAGE: res\nCODE:\n```\nlet indexOfFrom: (elt, ~from: int, t) => int\n```\n\n----------------------------------------\n\nTITLE: Using Component Children in ReScript JSX\nDESCRIPTION: Shows how children are passed to components in ReScript JSX. By default, multiple children are wrapped in a list when passed to the children prop.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/jsx.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reason\nCODE:\n```\n<MyComponent> child1 child2 </MyComponent>;\n```\n\nLANGUAGE: reason\nCODE:\n```\n[@JSX] MyComponent.createElement(~children=[child1, child2], ());\n```\n\nLANGUAGE: ml\nCODE:\n```\nMyComponent.createElement ~children:[child1; child2] () [@@JSX]\n```\n\nLANGUAGE: js\nCODE:\n```\nReact.createElement(MyComponent.make, MyComponent.makeProps(null, undefined), child1, child2);\n```\n\n----------------------------------------\n\nTITLE: Peeking with Undefined Result in MutableQueue in ReScript\nDESCRIPTION: The 'peekUndefined' function returns the first element in the queue or undefined if the queue is empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-queue.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nlet peekUndefined: t<'a> => Js.undefined<'a>\n```\n\n----------------------------------------\n\nTITLE: Converting Option<bool> to bool Using Non-exhaustive Pattern Matching\nDESCRIPTION: A concise but problematic implementation that uses a wildcard pattern, which prevents the compiler from performing exhaustiveness checking.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_17\n\nLANGUAGE: reason\nCODE:\n```\nlet optionBoolToBool = opt => {\n  switch (opt) {\n  | Some(true) => true\n  | _ => false\n  }\n};\n```\n\nLANGUAGE: ml\nCODE:\n```\nlet optionBoolToBool opt =\n  match opt with\n  | Some true -> true\n  | _ -> false\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction optionBoolToBool(opt) {\n  if (opt !== undefined && opt) {\n    return true;\n  } else {\n    return false;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: String Conversion for Uint8ClampedArray in ReScript\nDESCRIPTION: Functions to convert Uint8ClampedArray to string representations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_6\n\nLANGUAGE: ReScript\nCODE:\n```\nlet join: t => string;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet joinWith: (string, t) => string;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet toString: t => string;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet toLocaleString: t => string;\n```\n\n----------------------------------------\n\nTITLE: Using truncateToLengthUnsafe Function in ReScript\nDESCRIPTION: Demonstrates the usage of truncateToLengthUnsafe function to reduce the length of an array to 3 elements. The function modifies the original array in-place.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/array.mdx#2025-04-18_snippet_41\n\nLANGUAGE: ReScript\nCODE:\n```\nlet arr = [\"ant\", \"bee\", \"cat\", \"dog\", \"elk\"]\n\nBelt.Array.truncateToLengthUnsafe(arr, 3)\n\narr == [\"ant\", \"bee\", \"cat\"]\n```\n\n----------------------------------------\n\nTITLE: Displaying ReScript White Logo with Background\nDESCRIPTION: This snippet demonstrates how to display the white version of the ReScript logo with a dark background using HTML and CSS classes.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/brand.mdx#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div className=\"bg-gray-90 p-4\">\n  <img className=\"h-24\" src=\"/static/brand/rescript-logo-white.svg\" />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating an empty SetDict in ReScript\nDESCRIPTION: Demonstrates how to create an empty SetDict using the 'empty' function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-dict.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet empty: t('value, 'id);\n\nlet s0 = Belt.Set.Dict.empty;\n```\n\n----------------------------------------\n\nTITLE: Sorting Uint8ClampedArray with custom comparator\nDESCRIPTION: Sorts the elements of the array in place using a custom comparison function and returns the sorted array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_17\n\nLANGUAGE: res\nCODE:\n```\nlet sortInPlaceWith: ((. elt, elt) => int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Using anchor Method Example in ReScript\nDESCRIPTION: Demonstrates how to use the anchor method to create an HTML anchor element with a specified name attribute and text content.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/string-2.mdx#2025-04-18_snippet_35\n\nLANGUAGE: res\nCODE:\n```\nJs.String2.anchor(\"Page One\", \"page1\") == \"<a name=\\\"page1\\\">Page One</a>\"\n```\n\n----------------------------------------\n\nTITLE: Using @get_index Decorator in ReScript for Dynamic Property Access\nDESCRIPTION: This example demonstrates how to use the @get_index decorator to access dynamic properties on a JavaScript object. It creates an object, sets several properties using @set_index, and then retrieves a value using @get_index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/decorator_get_index.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\ntype t\n\n@new external create: unit => t = \"Object\"\n@set_index external set: (t, string, int) => unit = \"\"\n@get_index external get: (t, string) => int = \"\"\n\nlet o = create()\no->set(\"x\", 1)\no->set(\"y\", 3)\no->set(\"z\", 5)\n\nlet value = o->get(\"y\")\n```\n\nLANGUAGE: js\nCODE:\n```\nvar o = new Object();\n\no[\"x\"] = 1;\no[\"y\"] = 3;\no[\"z\"] = 5;\n\nvar value = o[\"y\"];\n```\n\n----------------------------------------\n\nTITLE: Signature for stableSortInPlace function in ReScript\nDESCRIPTION: Function signature for stableSortInPlace, which performs an in-place stable sort on an integer array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/sort-array-int.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\nlet stableSortInPlace: array<element> => unit\n```\n\n----------------------------------------\n\nTITLE: Testing Array Elements with Index using somei in ReScript\nDESCRIPTION: Function signature for somei that tests whether at least one element in the Uint8Array passes the test implemented by the provided function which also receives the element index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_49\n\nLANGUAGE: rescript\nCODE:\n```\nlet somei: ((. elt, int) => bool, t) => bool\n```\n\n----------------------------------------\n\nTITLE: TailwindCSS Main CSS File for ReScript React\nDESCRIPTION: Creates the main CSS entry point for TailwindCSS with the standard directives to include Tailwind's base, components, and utilities.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/styling.mdx#2025-04-18_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n/* main.css */\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\n----------------------------------------\n\nTITLE: Defining the comparison function type for MapDict\nDESCRIPTION: Defines the comparison function type used for key comparison with the identity parameter.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reason\nCODE:\n```\ntype cmp('key, 'id) = Belt_Id.cmp('key, 'id);\n```\n\n----------------------------------------\n\nTITLE: Array Operations on Int16Array in ReScript\nDESCRIPTION: Higher-order functions for performing operations on Int16Array elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_int-16-array.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\nlet every: ((. elt) => bool, t) => bool\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet everyi: ((. elt, int) => bool, t) => bool\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet filter: ((. elt) => bool, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet filteri: ((. elt, int) => bool, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet find: ((. elt) => bool, t) => Js.undefined<elt>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet findi: ((. elt, int) => bool, t) => Js.undefined<elt>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet findIndex: ((. elt) => bool, t) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet findIndexi: ((. elt, int) => bool, t) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet forEach: ((. elt) => unit, t) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet forEachi: ((. elt, int) => unit, t) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet map: ((. elt) => 'b, t) => typed_array<'b>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet mapi: ((. elt, int) => 'b, t) => typed_array<'b>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduce: ((. 'b, elt) => 'b, 'b, t) => 'b\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet reducei: ((. 'b, elt, int) => 'b, 'b, t) => 'b\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduceRight: ((. 'b, elt) => 'b, 'b, t) => 'b\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduceRighti: ((. 'b, elt, int) => 'b, 'b, t) => 'b\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet some: ((. elt) => bool, t) => bool\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet somei: ((. elt, int) => bool, t) => bool\n```\n\n----------------------------------------\n\nTITLE: Converting Uint8ClampedArray to string\nDESCRIPTION: Returns a string representing the array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_30\n\nLANGUAGE: res\nCODE:\n```\nlet toString: t => string\n```\n\n----------------------------------------\n\nTITLE: Listing ReScript Standard Library Modules in Markdown\nDESCRIPTION: A markdown list of the three modules in ReScript's standard library: Js, Belt, and Dom. Each item includes a brief description and a link to the module's API documentation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api.mdx#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [Js](api/js): bindings for all your familiar JavaScript APIs.\n- [Belt](api/belt): extra collections and helpers not available in JavaScript.\n- [Dom](api/dom): Dom related types and modules.\n```\n\n----------------------------------------\n\nTITLE: Object Property Access in ReScript\nDESCRIPTION: Shows how to access object properties using bracket notation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/object.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet age = me[\"age\"]\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar age = me[\"age\"];\n```\n\n----------------------------------------\n\nTITLE: Uncurried Filtering Set in ReScript\nDESCRIPTION: Filters set elements with an uncurried predicate function. Used internally by the keep function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-string.mdx#2025-04-18_snippet_42\n\nLANGUAGE: reasonml\nCODE:\n```\nlet keepU: (t, [@bs] (value => bool)) => t;\n```\n\n----------------------------------------\n\nTITLE: Comparing maps with uncurried function in ReScript\nDESCRIPTION: Compares two maps using an uncurried comparison function for values. First compares by size, then by key-value pairs if sizes are equal.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_6\n\nLANGUAGE: reasonml\nCODE:\n```\nlet cmpU: (t('a), t('a), [@bs] (('a, 'a) => int)) => int;\n```\n\n----------------------------------------\n\nTITLE: Defining Exn type in ReScript\nDESCRIPTION: Defines the abstract type 't' for representing JavaScript exceptions in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/exn.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype t\n```\n\n----------------------------------------\n\nTITLE: Array Search Methods\nDESCRIPTION: Methods for searching and checking array contents.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_float-64-array.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reason\nCODE:\n```\nlet includes: (elt, t) => bool;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet indexOf: (elt, t) => int;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet indexOfFrom: (elt, ~from: int, t) => int;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet lastIndexOf: (elt, t) => int;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet lastIndexOfFrom: (elt, ~from: int, t) => int;\n```\n\n----------------------------------------\n\nTITLE: Removing Item from Storage in ReScript\nDESCRIPTION: External binding for removing an item from storage by key.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/dom/storage.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reason\nCODE:\n```\nexternal removeItem: (string, t) => unit = \"removeItem\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic React Component in ReScript\nDESCRIPTION: A simple FancyButton component that renders a button DOM element with custom styling. This example shows a component without ref forwarding capabilities.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/forwarding-refs.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\n// FancyButton.res\n\n@react.component\nlet make = (~children) => {\n  <button className=\"FancyButton\">\n    children\n  </button>\n}\n```\n\n----------------------------------------\n\nTITLE: Integer Division/Multiplication in ReScript vs JavaScript\nDESCRIPTION: Demonstrates integer division and multiplication in ReScript and its JavaScript output. The operations are identical in both languages.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/overview.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\n2 / 23 * 1\n```\n\nLANGUAGE: javascript\nCODE:\n```\n2 / 23 * 1\n```\n\n----------------------------------------\n\nTITLE: Adding elements to Belt.MutableSet.Int in ReScript\nDESCRIPTION: Adds an element to the set using the add function. If the element already exists, the set remains unchanged.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_7\n\nLANGUAGE: res\nCODE:\n```\nlet add: (t, value) => unit\n```\n\nLANGUAGE: res\nCODE:\n```\nlet s0 = Belt.MutableSet.Int.make()\ns0->Belt.MutableSet.Int.add(1)\ns0->Belt.MutableSet.Int.add(2)\ns0->Belt.MutableSet.Int.add(2)\n\ns0->Belt.MutableSet.Int.toArray /* [1, 2] */\n```\n\n----------------------------------------\n\nTITLE: Migrating Prop Name Mangling from JSX v3 to v4\nDESCRIPTION: Example of how to migrate prop name mangling from JSX v3 to v4 using @as annotation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/migrate-react.mdx#2025-04-18_snippet_9\n\nLANGUAGE: res\nCODE:\n```\nmodule Comp = {\n  @react.component\n  let make = (~_open, ~_type) =>\n    <Modal _open _type>\n      <Description />\n    </Modal>\n}\n```\n\nLANGUAGE: res\nCODE:\n```\nmodule Comp = {\n  @react.component\n  let make =\n    (@as(\"open\") ~_open, @as(\"type\") ~_type) =>\n      <Modal _open _type>\n        <Description />\n      </Modal>\n}\n```\n\n----------------------------------------\n\nTITLE: Find Last Index of Value in Float32Array\nDESCRIPTION: Returns the last index at which a given element can be found in the Float32Array, or -1 if not found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_23\n\nLANGUAGE: rescript\nCODE:\n```\nlet lastIndexOf: (elt, t) => int\n```\n\n----------------------------------------\n\nTITLE: Creating Unsafe Uninitialized Arrays in ReScript\nDESCRIPTION: Creates an uninitialized array without type safety constraints. Unsafe to use until elements are properly initialized.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/array.mdx#2025-04-18_snippet_14\n\nLANGUAGE: reason\nCODE:\n```\nlet makeUninitializedUnsafe: int => array('a);\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet arr = Belt.Array.makeUninitializedUnsafe(5);\n\nlet () = Js.log(Belt.Array.getExn(arr, 0)); /* undefined */\n\nBelt.Array.setExn(arr, 0, \"example\");\n\nlet () = Js.log(Belt.Array.getExn(arr, 0) == \"example\");\n```\n\n----------------------------------------\n\nTITLE: Setting up the ReScript Documentation Platform\nDESCRIPTION: Instructions for setting up the ReScript documentation platform locally, including installing dependencies, building the project, and running the development server.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/README.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# For first time clone / build (install dependencies)\nnpm i\n\n# Initial build\nnpx rescript\n\n# Build the index data. Only needed for initial clone (or content H2 changes)\nnpm run update-index\n\n# In a new tab\nnpm run dev\n\nopen localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Array Creation Operations\nDESCRIPTION: Functions for creating new Float64Arrays from various sources\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_float-64-array.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet make: array<elt> => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromBuffer: Js_typed_array.array_buffer => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromLength: int => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet from: Js_typed_array.array_like<elt> => t\n```\n\n----------------------------------------\n\nTITLE: Testing Any Element with Index using somei\nDESCRIPTION: Function signature to test whether at least one element passes a function that also receives the element index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_49\n\nLANGUAGE: res\nCODE:\n```\nlet somei: ((. elt, int) => bool, t) => bool\n```\n\n----------------------------------------\n\nTITLE: ESY Configuration for PPX Tool Maintainers\nDESCRIPTION: JSON configuration for package.json to set the correct OCaml version (4.6.1) when building PPX extensions with ESY.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/reason-compiler/latest/upgrade-to-v7.mdx#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"devDependencies\": {\n    \"ocaml\": \"~4.6.1000\",\n    \"@opam/dune\": \"*\",\n}\n```\n\n----------------------------------------\n\nTITLE: Partitioning Map Entries in ReScript\nDESCRIPTION: Partitions a map into two maps based on a predicate function. This is the curried version of partitionU.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map.mdx#2025-04-18_snippet_7\n\nLANGUAGE: reasonml\nCODE:\n```\nlet partition: (t('k, 'v, 'id), ('k, 'v) => bool) => (t('k, 'v, 'id), t('k, 'v, 'id));\n```\n\n----------------------------------------\n\nTITLE: Reading a Float32 value with little-endian format in ReScript\nDESCRIPTION: Function signature for getting a 32-bit floating point number from the specified byte offset with little-endian format.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_data-view.mdx#2025-04-18_snippet_19\n\nLANGUAGE: rescript\nCODE:\n```\nlet getFloat32LittleEndian: (t, int) => float\n```\n\n----------------------------------------\n\nTITLE: Providing Download Links for ReScript Logo\nDESCRIPTION: This snippet demonstrates how to provide download links for the ReScript logo in both SVG and PNG formats using Markdown syntax.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/brand.mdx#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[svg](/static/brand/rescript-brandmark.svg) | [png](/static/brand/rescript-brandmark.png)\n```\n\n----------------------------------------\n\nTITLE: Configuring JavaScript Module Output Format\nDESCRIPTION: Configuration for specifying the JavaScript module output format (CommonJS or ES6) and whether to generate output files alongside source files.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/build-configuration.mdx#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"package-specs\": {\n    \"module\": \"commonjs\",\n    \"in-source\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Copying Elements with Source Index using copyWithinFrom\nDESCRIPTION: Function signature to copy elements from a specified source index to a target position within the Int8Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_10\n\nLANGUAGE: res\nCODE:\n```\nlet copyWithinFrom: (~to_: int, ~from: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: ReScript Symbol Type Definition\nDESCRIPTION: Defines an opaque type for JavaScript symbols.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/types.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\ntype symbol;\n```\n\n----------------------------------------\n\nTITLE: HashSet Uncurried ForEach\nDESCRIPTION: Iterates over the HashSet elements using an uncurried callback function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-set-string.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\nlet forEachU: (t, (. key) => unit) => unit\n```\n\n----------------------------------------\n\nTITLE: Example of Converting String Set to List in ReScript\nDESCRIPTION: Demonstrates how to convert a string set to a list of its elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-string.mdx#2025-04-18_snippet_51\n\nLANGUAGE: reasonml\nCODE:\n```\nlet s0 = Belt.Set.String.fromArray([|\"apple\", \"watermelon\"|]);\n\ns0->Belt.Set.String.toList; /* [\"apple\", \"watermelon\"] */\n```\n\n----------------------------------------\n\nTITLE: Getting Bytes Per Element in TypedArray in ReScript\nDESCRIPTION: Function signature for retrieving the size in bytes of each element in a Uint8ClampedArray.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_50\n\nLANGUAGE: res\nCODE:\n```\nlet _BYTES_PER_ELEMENT: int\n```\n\n----------------------------------------\n\nTITLE: Testing if all elements satisfy a predicate in ReScript\nDESCRIPTION: Checks if all elements in the set satisfy the given predicate function, returning a boolean result.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-int.mdx#2025-04-18_snippet_22\n\nLANGUAGE: reason\nCODE:\n```\nlet every: (t, value => bool) => bool;\n```\n\n----------------------------------------\n\nTITLE: Writing 64-bit Float (Big Endian)\nDESCRIPTION: Stores a 64-bit floating point number at the specified byte offset from the start of the DataView using big-endian format.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_data-view.mdx#2025-04-18_snippet_34\n\nLANGUAGE: reasonml\nCODE:\n```\nlet setFloat64: (t, int, float) => unit;\n```\n\n----------------------------------------\n\nTITLE: Uncurried forEach for MapDict\nDESCRIPTION: Function signature for iterating over all key-value pairs in a map using uncurried function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_12\n\nLANGUAGE: reason\nCODE:\n```\nlet forEachU: (t('k, 'a, 'id), [@bs] (('k, 'a) => unit)) => unit;\n```\n\n----------------------------------------\n\nTITLE: Filtering and mapping values in place using uncurried function in ReScript\nDESCRIPTION: Filters and transforms values in the hash map in place using an uncurried function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-map-int.mdx#2025-04-18_snippet_14\n\nLANGUAGE: reason\nCODE:\n```\nlet keepMapInPlaceU: (t('a), [@bs] ((key, 'a) => option('a))) => unit;\n```\n\n----------------------------------------\n\nTITLE: Creating Int8Array with Length\nDESCRIPTION: Function signature to create a new Int8Array with a specified length, initialized to zeros.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_55\n\nLANGUAGE: res\nCODE:\n```\nlet fromLength: int => t\n```\n\n----------------------------------------\n\nTITLE: Find Last Index of Value in Array\nDESCRIPTION: Returns the last index at which a given element can be found in the array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-64-array.mdx#2025-04-18_snippet_23\n\nLANGUAGE: reason\nCODE:\n```\nlet lastIndexOf: (elt, t) => int;\n```\n\n----------------------------------------\n\nTITLE: Filtering elements in ReScript with MutableSetInt\nDESCRIPTION: Returns a new set containing only the elements that satisfy the given predicate function. This creates a new set without modifying the original.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_29\n\nLANGUAGE: rescript\nCODE:\n```\nlet keep: (t, value => bool) => t;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet isEven = x => x mod 2 == 0;\n\nlet s0 = Belt.MutableSet.Int.fromArray([|1,2,3,4,5|]);\nlet s1 = s0->Belt.MutableSet.Int.keep(isEven);\n\ns1->Belt.MutableSet.Int.toArray; /* [|2, 4|] */\n```\n\n----------------------------------------\n\nTITLE: Mutable Record Fields in ReScript\nDESCRIPTION: Example showing how to declare and use mutable fields in records.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/record.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\ntype person = {\n  name: string,\n  mutable age: int\n}\n\nlet baby = {name: \"Baby ReScript\", age: 5}\nbaby.age = baby.age + 1\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar baby = {\n  name: \"Baby ReScript\",\n  age: 5\n};\n\nbaby.age = baby.age + 1 | 0;\n```\n\n----------------------------------------\n\nTITLE: Testing All Elements with Uncurried Predicate in ReasonML\nDESCRIPTION: Function signature for checking if all elements in a MutableSet satisfy an uncurried predicate function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_40\n\nLANGUAGE: reasonml\nCODE:\n```\nlet everyU: (t('value, 'id), [@bs] ('value => bool)) => bool;\n```\n\n----------------------------------------\n\nTITLE: Cleaning ReScript Project in Shell\nDESCRIPTION: Illustrates the command to clean a ReScript project, useful for resolving stale build issues.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/build-overview.mdx#2025-04-18_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nrescript clean\n```\n\n----------------------------------------\n\nTITLE: Checking if RegExp has Unicode Flag\nDESCRIPTION: Function that returns a boolean indicating whether the unicode flag is set on the RegExp object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/re.mdx#2025-04-18_snippet_16\n\nLANGUAGE: reason\nCODE:\n```\nlet unicode: t => bool;\n```\n\n----------------------------------------\n\nTITLE: ReScript Without Inlining Constants\nDESCRIPTION: Shows a ReScript example attempting to use environment variables without the @inline attribute, resulting in a variable reference in the output.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/inlining-constants.mdx#2025-04-18_snippet_2\n\nLANGUAGE: ReScript\nCODE:\n```\n@val external process: 'a = \"process\"\n\nlet mode = \"development\"\n\nif (process[\"env\"][\"mode\"] === mode) {\n  Console.log(\"Dev-only code here!\")\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar mode = \"development\";\n\nif (process.env.mode === mode) {\n  console.log(\"Dev-only code here!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Binding to Object Properties with @get Decorator in ReScript\nDESCRIPTION: This example demonstrates how to use the @get decorator to bind to the 'name' property of a window object. It defines a window type, creates an external binding to the window object, and then uses @get to access its name property.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/decorator_get.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\ntype window\n@val external window: window = \"window\"\n@get external getName: window => string = \"name\"\n\nlet name = getName(window)\n```\n\nLANGUAGE: js\nCODE:\n```\nvar name = window.name;\n```\n\n----------------------------------------\n\nTITLE: Running bstracing for ReScript Build Performance Analysis\nDESCRIPTION: This snippet shows how to use the bstracing tool to generate a JSON file visualizing your ReScript build's performance. The output can be imported into chrome://tracing for interactive analysis.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/build-performance.mdx#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n./node_modules/.bin/bstracing\n```\n\n----------------------------------------\n\nTITLE: Iterating over an integer hash set with uncurried function in ReScript\nDESCRIPTION: Function signature for applying an uncurried function to each element in the hash set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/hash-set-int.mdx#2025-04-18_snippet_9\n\nLANGUAGE: res\nCODE:\n```\nlet forEachU: (t, (. key) => unit) => unit\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for the translations documentation page, specifying title, description and canonical URL.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/community/translations.mdx#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"Translations\"\ndescription: \"Translation Sites\"\ncanonical: \"/community/translation\"\n---\n```\n\n----------------------------------------\n\nTITLE: Example of toFixed with Scientific Notation\nDESCRIPTION: Shows how toFixed handles very large numbers by outputting them in scientific notation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/float.mdx#2025-04-18_snippet_14\n\nLANGUAGE: re\nCODE:\n```\n/* print \"1.2e+21\" */\nJs.log @@ Js.Float.toFixed(1.2e21);\n```\n\n----------------------------------------\n\nTITLE: Creating Int8Array from ArrayBuffer with Range\nDESCRIPTION: Function signature to create a new Int8Array from an ArrayBuffer with specified offset and length.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_54\n\nLANGUAGE: res\nCODE:\n```\nlet fromBufferRange: (Js_typed_array.array_buffer, ~offset: int, ~length: int) => t\n```\n\n----------------------------------------\n\nTITLE: String Value Conversion in ReScript\nDESCRIPTION: Function signature and examples for converting values to strings.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/string.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet make: 'a => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.String2.make(3.5) == \"3.5\"\nJs.String2.make([1, 2, 3]) == \"1,2,3\"\n```\n\n----------------------------------------\n\nTITLE: Displaying ReScript CLI Help in Shell\nDESCRIPTION: Shows the output of the 'rescript help' command, which lists available subcommands and options for the ReScript build system.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/build-overview.mdx#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n❯ rescript help\nUsage: rescript <options> <subcommand>\n\n`rescript` is equivalent to `rescript build`\n\nOptions:\n  -v, -version  display version number\n  -h, -help     display help\n\nSubcommands:\n  build\n  clean\n  format\n  convert\n  dump\n  help\n\nRun `rescript <subcommand> -h` for subcommand help. Examples:\n  rescript build -h\n  rescript format -h\n```\n\n----------------------------------------\n\nTITLE: Creating DataView from ArrayBuffer in ReScript\nDESCRIPTION: Creates a new DataView instance from a JavaScript ArrayBuffer.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_data-view.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reasonml\nCODE:\n```\nlet make: Js_typed_array2.array_buffer => t;\n```\n\n----------------------------------------\n\nTITLE: Sorting Array with Custom Comparator using sortInPlaceWith\nDESCRIPTION: Function signature to sort the elements of the Int8Array in place using a custom comparison function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_17\n\nLANGUAGE: res\nCODE:\n```\nlet sortInPlaceWith: ((. elt, elt) => int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Creating Empty MutableStack in ReScript\nDESCRIPTION: Function to create a new empty stack instance.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-stack.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet make: unit => t('a);\n```\n\n----------------------------------------\n\nTITLE: Searching and Joining Uint8ClampedArray in ReScript\nDESCRIPTION: Functions for searching elements and joining array elements into a string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_5\n\nLANGUAGE: ReScript\nCODE:\n```\nlet includes: (elt, t) => bool;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet indexOf: (elt, t) => int;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet join: t => string;\n```\n\n----------------------------------------\n\nTITLE: RegExp Capture Groups Function\nDESCRIPTION: Function signature for accessing capture groups from a RegExp result.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/re.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nlet captures: result => array<Js.nullable<string>>\n```\n\n----------------------------------------\n\nTITLE: Using Variants for JavaScript Interop in ReScript (Anti-pattern)\nDESCRIPTION: Demonstrates a pattern to avoid when binding to polymorphic JavaScript functions, which creates unnecessary JS output.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/variant.mdx#2025-04-18_snippet_9\n\nLANGUAGE: res\nCODE:\n```\n// reserved for internal usage\n@module(\"myLibrary\") external draw : 'a => unit = \"draw\"\n\ntype animal =\n  | MyFloat(float)\n  | MyString(string)\n\nlet betterDraw = (animal) =>\n  switch animal {\n  | MyFloat(f) => draw(f)\n  | MyString(s) => draw(s)\n  }\n\nbetterDraw(MyFloat(1.5))\n```\n\nLANGUAGE: js\nCODE:\n```\nvar MyLibrary = require(\"myLibrary\");\n\nfunction betterDraw(animal) {\n  MyLibrary.draw(animal._0);\n}\n\nbetterDraw({\n  TAG: /* MyFloat */0,\n  _0: 1.5\n});\n```\n\n----------------------------------------\n\nTITLE: List Initialize Function Signature in ReScript\nDESCRIPTION: Defines the signature for the 'init' function, which creates a new list by applying a function to indices.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/list.mdx#2025-04-18_snippet_19\n\nLANGUAGE: rescript\nCODE:\n```\nlet init: (int, (. int) => 'a) => t<'a>\n```\n\n----------------------------------------\n\nTITLE: Creating Array from Buffer with Offset\nDESCRIPTION: Function signature to create a new Uint16Array from an ArrayBuffer with an offset, which can throw an exception.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_53\n\nLANGUAGE: res\nCODE:\n```\nlet fromBufferOffset: (Js_typed_array.array_buffer, int) => t\n```\n\n----------------------------------------\n\nTITLE: Create Subarray from Index\nDESCRIPTION: Returns a new typed array that shares the same ArrayBuffer, starting from the specified index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-64-array.mdx#2025-04-18_snippet_29\n\nLANGUAGE: reason\nCODE:\n```\nlet subarrayFrom: (int, t) => t;\n```\n\n----------------------------------------\n\nTITLE: Testing TypedArray Elements with Index using everyi in ReScript\nDESCRIPTION: Function signature for testing whether all elements in a Uint8ClampedArray pass a test implemented by a function that receives both the element and its index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_33\n\nLANGUAGE: res\nCODE:\n```\nlet everyi: ((. elt, int) => bool, t) => bool\n```\n\n----------------------------------------\n\nTITLE: List Reverse Append Function Signature\nDESCRIPTION: Function to append the reverse of the first list to the second list.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/list.mdx#2025-04-18_snippet_7\n\nLANGUAGE: ReScript\nCODE:\n```\nlet revAppend: (t('a), t('a)) => t('a);\n```\n\n----------------------------------------\n\nTITLE: Slice Operations for Float64Array\nDESCRIPTION: Functions to create a new Float64Array from a section of an existing one, where start is inclusive and end is exclusive.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-64-array.mdx#2025-04-18_snippet_12\n\nLANGUAGE: rescript\nCODE:\n```\nlet slice: (~start: int, ~end_: int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet copy: t => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet sliceFrom: (int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Getting DataView Byte Offset\nDESCRIPTION: Returns the offset (in bytes) of this DataView from the start of its ArrayBuffer.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_data-view.mdx#2025-04-18_snippet_7\n\nLANGUAGE: reasonml\nCODE:\n```\nlet byteOffset: t => int;\n```\n\n----------------------------------------\n\nTITLE: Getting length of Uint8ClampedArray\nDESCRIPTION: Returns the number of elements in the Uint8ClampedArray.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_8\n\nLANGUAGE: res\nCODE:\n```\nlet length: t => int\n```\n\n----------------------------------------\n\nTITLE: Importing WarningTable Component in JSX\nDESCRIPTION: This code snippet imports a React component named WarningTable from a specific file path. The component is likely used to display a table of ReScript compiler warnings.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/warning-numbers.mdx#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { make as WarningTable } from \"src/components/WarningTable.mjs\";\n```\n\n----------------------------------------\n\nTITLE: Incorrect usage of ref with a function component\nDESCRIPTION: Example showing how refs cannot be directly passed to component functions, resulting in a compilation error. This demonstrates a limitation that requires ref forwarding instead.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/refs-and-the-dom.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nmodule MyComp = {\n  @react.component\n  let make = (~ref) => <input />\n}\n\n@react.component\nlet make = () => {\n  let textInput = React.useRef(Js.Nullable.null)\n\n  // This will **not** work\n  <MyComp ref={ReactDOM.Ref.domRef(textInput)} />\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Compiler Error:\n// Ref cannot be passed as a normal prop. Please use `forwardRef`\n// API instead\n```\n\n----------------------------------------\n\nTITLE: Vector Empty Operation\nDESCRIPTION: Empties a vector container.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/vector.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nlet empty: t<'a> => unit\n```\n\n----------------------------------------\n\nTITLE: Using pow_int function to calculate integer power in ReScript\nDESCRIPTION: The pow_int function raises the given base to the given exponent with integer arguments and result. It takes a base integer and exponent integer as input and returns an integer.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/math.mdx#2025-04-18_snippet_22\n\nLANGUAGE: res\nCODE:\n```\nlet pow_int: (~base: int, ~exp: int) => int\n```\n\nLANGUAGE: res\nCODE:\n```\nJs.Math.pow_int(~base=3, ~exp=4) == 81\n```\n\n----------------------------------------\n\nTITLE: Deprecated Floor Function in ReScript\nDESCRIPTION: Deprecated function that should be replaced with unsafe_floor_int.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/math.mdx#2025-04-18_snippet_35\n\nLANGUAGE: reasonml\nCODE:\n```\nlet unsafe_floor: float => int;\n```\n\n----------------------------------------\n\nTITLE: Interface File Hiding Mutability\nDESCRIPTION: Demonstrates how to hide mutability in the interface file for better access control.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/generate-converters-accessors.mdx#2025-04-18_snippet_18\n\nLANGUAGE: rescript\nCODE:\n```\n/* test.resi */\n@deriving(abstract)\ntype cord = {\n  @optional x: int,\n  y: int,\n};\n```\n\n----------------------------------------\n\nTITLE: Replacing Substrings with Function (Three Captures) in ReScript\nDESCRIPTION: The unsafeReplaceBy3 function replaces matches of a pattern with three sets of capturing parentheses using a provided function. The function receives the matched string, captured strings, offset, and whole string as parameters.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string.mdx#2025-04-18_snippet_31\n\nLANGUAGE: rescript\nCODE:\n```\nlet unsafeReplaceBy3: (Js_re.t, (t, t, t, t, int, t) => t, t) => t;\n```\n\n----------------------------------------\n\nTITLE: JavaScript Bundler Transformation Example\nDESCRIPTION: Shows how JavaScript bundlers like Webpack transform environment variables, replacing them with string literals that enable dead code elimination during minification.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/inlining-constants.mdx#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif ('production' === 'development') {\n  console.log(\"Dev-only code here!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Using __LINE__ Special Value in ReScript\nDESCRIPTION: This snippet demonstrates how to use the __LINE__ special value in ReScript. It logs the current line number to the console. The __LINE__ value is replaced with the actual line number during compilation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/specialvalues_line.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\n// Line 1\n// Line 2\n__LINE__->Console.log\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nconsole.log(3);\n```\n\n----------------------------------------\n\nTITLE: Rendering WarningTable Component in JSX\nDESCRIPTION: This code snippet renders the imported WarningTable component within the markdown content. It's used to display the table of ReScript compiler warnings in the documentation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/warning-numbers.mdx#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<WarningTable />\n```\n\n----------------------------------------\n\nTITLE: Cleaning ReScript Project Including Dependencies\nDESCRIPTION: Command to clean both the project's build artifacts and those of its dependencies, useful for resolving more stubborn build issues.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/build-overview.mdx#2025-04-18_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nrescript clean -with-deps\n```\n\n----------------------------------------\n\nTITLE: Defining value and t types for Belt.MutableSet.Int in ReScript\nDESCRIPTION: Defines the types for set elements (value) and the set itself (t).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\ntype value = int\n\ntype t\n```\n\n----------------------------------------\n\nTITLE: Demonstrating ReScript backtick string with unicode and interpolation\nDESCRIPTION: Shows an example of a ReScript backtick string that supports unicode characters and string interpolation, which compiles directly to a JavaScript string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/shared-data-types.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\n`` `hello 👋 ${personName}` ``\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Link Element in ReScript\nDESCRIPTION: Creates an HTML link element with an href attribute. This function is deprecated according to web standards. Takes linkText and urlText as parameters and returns an HTML string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string-2.mdx#2025-04-18_snippet_29\n\nLANGUAGE: reason\nCODE:\n```\nlet link: (t, t) => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\nJs.String2.link(\"Go to page two\", \"page2.html\") == \"<a href=\\\"page2.html\\\">Go to page two</a>\";\n```\n\n----------------------------------------\n\nTITLE: Listing ReScript Templates\nDESCRIPTION: Command to display all available project templates.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/build-overview.mdx#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nbsb -themes\n```\n\n----------------------------------------\n\nTITLE: setIntervalFloat Example in ReScript\nDESCRIPTION: Example of using setIntervalFloat to create a counter that increments and logs its value every second using a float interval value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/global.mdx#2025-04-18_snippet_9\n\nLANGUAGE: reasonml\nCODE:\n```\n/* Will count up and print the count to the console every second */\n\nlet count = ref(0);\n\nlet tick = () => {\n  count := count^ + 1;\n  Js.log(Belt.Int.toString(count^));\n};\n\nJs.Global.setIntervalFloat(tick, 1000.0);\n```\n\n----------------------------------------\n\nTITLE: Using __POS_OF__ to Get Position and Expression in ReScript\nDESCRIPTION: This snippet demonstrates how to use the __POS_OF__ special value in ReScript. It returns a tuple containing position information and the expression. The position is a tuple of (fileName, lineNumber, columnNumberStart, columnNumberEnd).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/specialvalues_pos_of.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\nlet f = () => None\nlet (pos, f') = __POS_OF__(f)\n\npos->Console.log\nf'->Console.log\n```\n\n----------------------------------------\n\nTITLE: Creating TypedArray from ArrayBuffer in ReScript\nDESCRIPTION: Function signature for creating a new Uint8ClampedArray from an existing ArrayBuffer.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_52\n\nLANGUAGE: res\nCODE:\n```\nlet fromBuffer: Js_typed_array2.array_buffer => t\n```\n\n----------------------------------------\n\nTITLE: ReScript Float Division and Multiplication\nDESCRIPTION: Demonstrates how ReScript's float-specific division and multiplication operators are converted to JavaScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/overview.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\n2.0 /. 23.0 *. 1.0\n```\n\nLANGUAGE: javascript\nCODE:\n```\n2.0 / 23.0 * 1.0\n```\n\n----------------------------------------\n\nTITLE: Getting Bytes Per Element Constant\nDESCRIPTION: Function signature to get the number of bytes per element in the array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_50\n\nLANGUAGE: res\nCODE:\n```\nlet _BYTES_PER_ELEMENT: int\n```\n\n----------------------------------------\n\nTITLE: Single Line Comments in ReScript vs JavaScript\nDESCRIPTION: Shows single line comment syntax in ReScript. Comments are not included in the generated JavaScript output.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/overview.mdx#2025-04-18_snippet_21\n\nLANGUAGE: rescript\nCODE:\n```\n// Comment here\n```\n\nLANGUAGE: javascript\nCODE:\n```\nNot in output\n```\n\n----------------------------------------\n\nTITLE: Converting Date to JSON in ReScript (Deprecated)\nDESCRIPTION: Deprecated method for converting a Date to JSON. This method is unsafe and will be changed to return an option type in the future.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_70\n\nLANGUAGE: rescript\nCODE:\n```\nlet toJSON: t => string\n```\n\n----------------------------------------\n\nTITLE: Converting Option<bool> to bool in ReScript (Concise but Unsafe)\nDESCRIPTION: This snippet demonstrates a concise but unsafe pattern matching approach. It uses a wildcard pattern, which bypasses exhaustiveness checking and is not recommended for maintaining code correctness.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_18\n\nLANGUAGE: rescript\nCODE:\n```\nlet optionBoolToBool = opt => {\n  switch opt {\n  | Some(true) => true\n  | _ => false\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction optionBoolToBool(opt) {\n  if (opt !== undefined && opt) {\n    return true;\n  } else {\n    return false;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating arrays from array-like objects in ReScript\nDESCRIPTION: Functions to create arrays from array-like objects, with optional mapping functionality.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/array-2.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\nlet from: array_like('a) => array('b);\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet strArr = Js.String.castToArrayLike(\"abcd\");\nJs.Array2.from(strArr) == [|\"a\", \"b\", \"c\", \"d\"|];\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet fromMap: (array_like('a), 'a => 'b) => array('b);\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet strArr = Js.String.castToArrayLike(\"abcd\");\nlet code = (s) => {Js.String.charCodeAt(0, s)};\nJs.Array2.fromMap(strArr, code) == [|97.0, 98.0, 99.0, 100.0|];\n```\n\n----------------------------------------\n\nTITLE: Splitting Map in ReScript MapInt Module\nDESCRIPTION: Function signature for splitting the map into three parts based on a key.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-int.mdx#2025-04-18_snippet_50\n\nLANGUAGE: rescript\nCODE:\n```\nlet split: (key, t<'v>) => (t<'v>, option<'v>, t<'v>)\n```\n\n----------------------------------------\n\nTITLE: Accessing localStorage in ReScript\nDESCRIPTION: External binding to access the browser's localStorage API.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/dom/storage2.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\n@val external localStorage: t = \"localStorage\"\n```\n\n----------------------------------------\n\nTITLE: Converting Date to Time String in ReScript\nDESCRIPTION: Returns a string representing the time of day for the given Date in the current locale and time zone. This function focuses on the time portion of the date.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_70\n\nLANGUAGE: ReScript\nCODE:\n```\nlet toTimeString: t => string\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nJs.Date.toTimeString(exampleDate) == \"22:30:54 GMT+0100 (Central European Standard Time)\"\n```\n\n----------------------------------------\n\nTITLE: Defining key type in ReScript\nDESCRIPTION: Defines the key type as a string for the MutableMapString module.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\ntype key = string\n```\n\n----------------------------------------\n\nTITLE: Converting map to array in ReScript\nDESCRIPTION: Function signature for converting a mutable map to an array of key-value pairs.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_20\n\nLANGUAGE: ReScript\nCODE:\n```\nlet toArray: t<'a> => array<(key, 'a)>\n```\n\n----------------------------------------\n\nTITLE: Installing ReScript 10\nDESCRIPTION: NPM installation command for ReScript version 10\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2022-08-25-release-10-0-0.mdx#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install rescript@10\n```\n\n----------------------------------------\n\nTITLE: Direct Field Assignment Equivalent to := Operator in ReScript\nDESCRIPTION: Shows the underlying implementation of the `:=` operator by directly assigning to the `contents` field of the ref record, which produces identical JavaScript output to using the `:=` operator.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/operator_ref_value_assignment.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\nlet total = ref(0)\ntotal.contents = 1\n```\n\nLANGUAGE: js\nCODE:\n```\nvar total = {\n  contents: 0\n};\n\ntotal.contents = 1;\n```\n\n----------------------------------------\n\nTITLE: Unboxed Variant and String Coercion in ReScript\nDESCRIPTION: Demonstrates bidirectional coercion between unboxed variants and strings, including pattern matching on coerced values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/operators_type_coercion.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\n@unboxed\ntype myNumberType = One | Two | Other(string)\n\nlet v = Other(\"Infinite\")\nlet v2 = One\n\nlet x = \"NaN\"\n\n// variant to string\nConsole.log((v :> string))\nConsole.log((v2 :> string))\n\n// string to variant\nlet y = (x :> myNumberType)\n\nlet f = switch y {\n| One => \"One\"\n| _ => \"Two\"\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar v = \"Infinite\";\n\nvar x = \"NaN\";\n\nconsole.log(v);\n\nconsole.log(\"One\");\n\nvar f;\n\nf = (x === \"One\" || x === \"Two\") && x === \"One\" ? \"One\" : \"Two\";\n\nvar v2 = \"One\";\n\nvar y = x;\n```\n\n----------------------------------------\n\nTITLE: Getting Bucket Histogram of HashMap in ReScript\nDESCRIPTION: Returns an array representing the distribution of elements across buckets in the hash map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-map-int.mdx#2025-04-18_snippet_15\n\nLANGUAGE: rescript\nCODE:\n```\nlet getBucketHistogram: t<'a> => array<int>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet hMap = Belt.HashMap.Int.make(~hintSize=10)\nBelt.HashMap.Int.set(hMap, 1, \"1\")\n\nBelt.HashMap.Int.getBucketHistogram(hMap)\n```\n\n----------------------------------------\n\nTITLE: Configuring ReScript App with Pinned Dependencies\nDESCRIPTION: Configuration for the toplevel app/rescript.json showing how to specify pinned dependencies and bs-dependencies for a ReScript application.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/build-pinned-dependencies.mdx#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"app\",\n  \"version\": \"1.0.0\",\n  \"sources\": {\n    \"dir\": \"src\",\n    \"subdirs\": true\n  },\n  /* ... */\n  \"bs-dependencies\": [\"common\", \"myplugin\"],\n  \"pinned-dependencies\": [\"common\", \"myplugin\"]\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering CommunityContent Component in JSX\nDESCRIPTION: This snippet imports the CommunityContent component from a local file and renders it within the page. It's likely part of a React-based website for ReScript documentation or community resources.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/community/content.mdx#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport CommunityContent from 'src/CommunityContent.mjs';\n\n<CommunityContent />\n```\n\n----------------------------------------\n\nTITLE: Defining List Type in ReScript\nDESCRIPTION: Defines the type 't' as an alias for the built-in list type with a generic type parameter.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/list.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype t<'a> = list<'a>\n```\n\n----------------------------------------\n\nTITLE: Creating Empty MutableStack in ReScript\nDESCRIPTION: Function signature for creating a new, empty stack.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-stack.mdx#2025-04-18_snippet_1\n\nLANGUAGE: ReScript\nCODE:\n```\nlet make: unit => t<'a>\n```\n\n----------------------------------------\n\nTITLE: Using 'if' Instead of 'when' in Pattern Matching\nDESCRIPTION: Shows the new syntax using 'if' instead of 'when' in pattern matching within a switch statement.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2021-02-09-release-9-0.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nswitch person1 {\n| Student({reportCard: {gpa}}) if gpa < 0.5 =>\n  Js.log(\"What's happening\")\n| _ => () // do nothing\n}\n```\n\nLANGUAGE: rescript\nCODE:\n```\nswitch person1 {\n| Student({reportCard: {gpa}}) when gpa < 0.5 =>\n  Js.log(\"What's happening\")\n| _ => () // do nothing\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HashSetString Key Type\nDESCRIPTION: Defines the key type as string for the HashSet implementation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-set-string.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype key = string\n```\n\n----------------------------------------\n\nTITLE: Accessing Top Element of MutableStack as Undefined in ReScript\nDESCRIPTION: Function signature for accessing the top element of the stack without removing it, returning undefined if empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-stack.mdx#2025-04-18_snippet_7\n\nLANGUAGE: ReScript\nCODE:\n```\nlet topUndefined: t<'a> => Js.undefined<'a>\n```\n\n----------------------------------------\n\nTITLE: Converting Reason Files in a Specific Folder\nDESCRIPTION: Shell command to recursively convert all Reason files in a folder to ReScript syntax and remove the original files afterward. Useful for directory-based conversions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/migrate-from-bucklescript-reason.mdx#2025-04-18_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n# *.rei, *.ml, *.mli,....\nfor f in your-folder/**/*.re; do; node_modules/.bin/rescript convert $f && rm $f; done;\n```\n\n----------------------------------------\n\nTITLE: Set Array into Float32Array\nDESCRIPTION: Sets values from a ReScript array into a Float32Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-32-array.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet setArray: (array(elt), t) => unit;\n```\n\n----------------------------------------\n\nTITLE: Defining External Function with Lightweight FFI Attributes in ReScript\nDESCRIPTION: Example of defining an external function 'readFileAsUtf8Sync' using the new lightweight FFI attributes without the 'bs.' prefix in ReScript, Reason, and OCaml syntax.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2020-09-25-release-8-3.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\n@val @module(\"fs\") external readFileAsUtf8Sync: (string, @as(\"utf8\") _) => string = \"readFileSync\"\n```\n\nLANGUAGE: reason\nCODE:\n```\n[@val] [@module \"fs\"]\nexternal readFileAsUtf8Sync: (string, [@as \"utf8\"] _) => string =\n  \"readFileSync\";\n```\n\nLANGUAGE: ocaml\nCODE:\n```\nexternal readFileAsUtf8Sync : string -> (_[@as \"utf8\"]) -> string = \"readFileSync\"\n[@@val] [@@module \"fs\"]\n```\n\n----------------------------------------\n\nTITLE: Converting Integer to Float Using %identity in ReScript\nDESCRIPTION: This snippet demonstrates using the %identity external to perform an unsafe conversion from int to float. The example shows converting an integer age value to float before adding it to another float value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/extension_identity.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\nexternal convertToFloat: int => float = \"%identity\"\nlet age = 10\nlet gpa = 2.1 +. convertToFloat(age)\n```\n\nLANGUAGE: js\nCODE:\n```\nvar gpa = 2.1 + 10;\nvar age = 10;\n```\n\n----------------------------------------\n\nTITLE: Merging Maps (Curried) in ReScript MapInt Module\nDESCRIPTION: Function signature for merging two maps using a curried function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-int.mdx#2025-04-18_snippet_44\n\nLANGUAGE: rescript\nCODE:\n```\nlet merge: (t<'v>, t<'v2>, (key, option<'v>, option<'v2>) => option<'c>) => t<'c>\n```\n\n----------------------------------------\n\nTITLE: Unsafe Access to Undefined Values in ReScript\nDESCRIPTION: Function signature for unsafely accessing the value inside an undefined container. This doesn't perform any safety checks before extracting the value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/undefined.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\nlet getUnsafe: t<'a> => 'a\n```\n\n----------------------------------------\n\nTITLE: Character Type in ReScript\nDESCRIPTION: Shows how to declare a character in ReScript using single quotes. Note that char doesn't support Unicode or UTF-8 and compiles to the ASCII code in JavaScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/primitive-types.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reason\nCODE:\n```\nlet firstLetterOfAlphabet = 'a';\n```\n\nLANGUAGE: ml\nCODE:\n```\nlet firstLetterOfAlphabet = 'a'\n```\n\nLANGUAGE: js\nCODE:\n```\nvar firstLetterOfAlphabet = /* \"a\" */97;\n```\n\n----------------------------------------\n\nTITLE: Installing ReScript with yarn\nDESCRIPTION: Command to create a new ReScript project using yarn's create functionality.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/installation.mdx#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn create rescript-app\n```\n\n----------------------------------------\n\nTITLE: Inline Private Let Bindings with %%private\nDESCRIPTION: Shows the use of the %%private annotation introduced in ReScript 7.2 to mark specific bindings as private directly within the module definition.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/let-binding.mdx#2025-04-18_snippet_7\n\nLANGUAGE: res\nCODE:\n```\nmodule A = {\n  %%private(let a = 3)\n  let b = 4\n}\n```\n\n----------------------------------------\n\nTITLE: Reducing Uint8ClampedArray elements right-to-left\nDESCRIPTION: Executes a reducer function on each element of the array in reverse order, resulting in a single output value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_46\n\nLANGUAGE: res\nCODE:\n```\nlet reduceRight: ((. 'b, elt) => 'b, 'b, t) => 'b\n```\n\n----------------------------------------\n\nTITLE: Calling Methods on Js.t Objects in ReScript\nDESCRIPTION: Demonstrates how to define and call methods on Js.t objects. Methods are marked with [@bs.meth] to ensure proper 'this' context.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/reason-compiler/latest/object-2.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\ntype person = {. [@bs.meth] \"say\": (string, string) => unit};\n[@bs.val] external john : person = \"john\";\n\njohn##say(\"hey\", \"jude\");\n```\n\n----------------------------------------\n\nTITLE: Partitioning Set Elements with Uncurried Function in ReasonML\nDESCRIPTION: Provides an uncurried function variant to split a set into two sets based on a predicate.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set.mdx#2025-04-18_snippet_29\n\nLANGUAGE: reasonml\nCODE:\n```\nlet partitionU: (t('value, 'id), [@bs] ('value => bool)) => (t('value, 'id), t('value, 'id));\n```\n\n----------------------------------------\n\nTITLE: Find Index of Value in Float32Array\nDESCRIPTION: Returns the first index at which the specified value can be found in the Float32Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-32-array.mdx#2025-04-18_snippet_19\n\nLANGUAGE: rescript\nCODE:\n```\nlet indexOf: (elt, t) => int;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Conditional Compilation in OCaml Interface File\nDESCRIPTION: Example showing how to use conditional compilation in an OCaml interface file (lwt_unix.mli) to handle different versions of OCaml, where certain flags are only available in newer versions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/reason-compiler/latest/conditional-compilation.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ocaml\nCODE:\n```\ntype open_flag =\n    Unix.open_flag =\n  | O_RDONLY\n  | O_WRONLY\n  | O_RDWR\n  | O_NONBLOCK\n  | O_APPEND\n  | O_CREAT\n  | O_TRUNC\n  | O_EXCL\n  | O_NOCTTY\n  | O_DSYNC\n  | O_SYNC\n  | O_RSYNC\n#if OCAML_VERSION =~ \">=3.13\" then\n  | O_SHARE_DELETE\n#end\n#if OCAML_VERSION =~ \">=4.01\" then\n  | O_CLOEXEC\n#end\n```\n\n----------------------------------------\n\nTITLE: Exception Type Checker\nDESCRIPTION: Internal function signature for checking if a value is a OCaml exception or open variant.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/exn.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nlet isCamlExceptionOrOpenVariant: 'a => bool\n```\n\n----------------------------------------\n\nTITLE: Removing Multiple Key-Value Pairs in ReScript MapInt Module\nDESCRIPTION: Function signature for removing multiple key-value pairs from the map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-int.mdx#2025-04-18_snippet_39\n\nLANGUAGE: rescript\nCODE:\n```\nlet removeMany: (t<'v>, array<key>) => t<'v>\n```\n\n----------------------------------------\n\nTITLE: Defining HashSetString type\nDESCRIPTION: Defines the abstract type t which represents a HashSetString.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/hash-set-string.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\ntype t\n```\n\n----------------------------------------\n\nTITLE: Int32Array Type Definitions in ReScript\nDESCRIPTION: Core type definitions for Int32Array including element type, typed array type and the main type t\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_int-32-array.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\ntype elt = int32;\ntype typed_array('a) = Js_typed_array2.Int32Array.typed_array('a);\ntype t = typed_array(elt);\n```\n\n----------------------------------------\n\nTITLE: Deprecated Ceiling Function in ReScript\nDESCRIPTION: Deprecated function that should be replaced with ceil_int.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/math.mdx#2025-04-18_snippet_24\n\nLANGUAGE: reasonml\nCODE:\n```\nlet ceil: float => int;\n```\n\n----------------------------------------\n\nTITLE: Module Resolution Settings for Node16\nDESCRIPTION: Example of matching moduleResolution settings between tsconfig.json and gentypeconfig to ensure proper module resolution with Node16.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/typescript-integration.mdx#2025-04-18_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n// tsconfig.json\n{\n  \"compilerOptions\": {\n    \"moduleResolution\": \"node16\"\n  }\n}\n```\n\nLANGUAGE: JSON\nCODE:\n```\n// rescript.json\n{\n  \"gentypeconfig\": {\n    \"moduleResolution\": \"node16\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Logging statistics about an integer hash set in ReScript\nDESCRIPTION: Function signature for printing statistical information about the hash set to the console.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/hash-set-int.mdx#2025-04-18_snippet_14\n\nLANGUAGE: res\nCODE:\n```\nlet logStats: t => unit\n```\n\n----------------------------------------\n\nTITLE: Vector Indexed Iteration\nDESCRIPTION: Iterates over vector elements with index executing a callback function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/vector.mdx#2025-04-18_snippet_7\n\nLANGUAGE: res\nCODE:\n```\nlet iteri: ((. int, 'a) => unit, t<'a>) => unit\n```\n\n----------------------------------------\n\nTITLE: Blog Post Frontmatter Template\nDESCRIPTION: YAML frontmatter template showing all available metadata fields for blog posts including author, co-authors, date, preview image, badge, title and description.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/blogpost-guide.mdx#2025-04-18_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\nauthor: hongbo\nco-authors:\n  - chenglou\n  - ryyppy\ndate: \"2017-10-01\"\npreviewImg:\nbadge: release\ntitle: Bloomberg announces BuckleScript 1.0\ndescription: |\n  some multiline\n  description\n---\n```\n\n----------------------------------------\n\nTITLE: Manipulating Int16Array Contents in ReScript\nDESCRIPTION: Functions for in-place operations on Int16Array, including copying, filling, reversing, and sorting.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_int-16-array.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet copyWithin: (~to_: int, t) => t;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fillInPlace: (elt, t) => t;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet reverseInPlace: t => t;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet sortInPlace: t => t;\n```\n\n----------------------------------------\n\nTITLE: Creating JSON String Array in ReScript\nDESCRIPTION: Function signature for creating a JSON array of strings from a ReScript array of strings.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/json.mdx#2025-04-18_snippet_17\n\nLANGUAGE: reason\nCODE:\n```\nlet stringArray: array(string) => t;\n```\n\n----------------------------------------\n\nTITLE: Comparing Nativeint and Int32 Shift Operations in BuckleScript\nDESCRIPTION: This snippet demonstrates the difference between Nativeint.shift_right_logical and Int32.shift_right_local operations in BuckleScript. Nativeint operations are translated to JavaScript bitwise operations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/reason-compiler/latest/difference-from-native-ocaml.mdx#2025-04-18_snippet_0\n\nLANGUAGE: OCaml\nCODE:\n```\nNativeint.shift_right_logical x 0  (* Translated to: x >>> 0 *)\nInt32.shift_right_local x 0     (* Translated to: x | 0 *)\n```\n\n----------------------------------------\n\nTITLE: Accessing Capitalized Object Properties in JavaScript\nDESCRIPTION: Example of JavaScript code accessing object properties that start with capital letters.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/use-illegal-identifier-names.mdx#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst payload = {\n  PostTitle: \"Welcome to Reason\",\n};\n\n/* this won't work in Reason since `PostTitle` is capitalized, so `paylod.PostTitle` would break */\nconst title = payload.PostTitle;\n```\n\n----------------------------------------\n\nTITLE: Parsing Date String to Float in ReScript\nDESCRIPTION: Function signature for parseAsFloat, which parses a date string and returns milliseconds since epoch as a float.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_18\n\nLANGUAGE: rescript\nCODE:\n```\nlet parseAsFloat: string => float\n```\n\n----------------------------------------\n\nTITLE: Using unsafe_get Function in ReScript\nDESCRIPTION: The unsafe_get function retrieves an element from an array at the specified index without bounds checking. If the index is out of bounds, it returns the JavaScript undefined value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array-2.mdx#2025-04-18_snippet_41\n\nLANGUAGE: res\nCODE:\n```\nlet arr = [100, 101, 102, 103]\nJs.Array2.unsafe_get(arr, 3) == 103\nJs.Array2.unsafe_get(arr, 4) // returns undefined\n```\n\n----------------------------------------\n\nTITLE: Running Node.js with Debugger for ReScript Output\nDESCRIPTION: Command to run the compiled JavaScript file with Node.js in debug mode. This enables the inspection breakpoint so you can connect Chrome DevTools to debug your code.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/reason-compiler/latest/better-data-structures-printing-debug-mode.mdx#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode --inspect-brk MyCompiledFile.js\n```\n\n----------------------------------------\n\nTITLE: Declaring IntCmp Module for Integer Comparisons in ReasonML\nDESCRIPTION: Sets up a reusable integer comparator module that is used in subsequent examples. This module implements the comparable interface for integers using the default Pervasives.compare function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reasonml\nCODE:\n```\nmodule IntCmp =\n  Belt.Id.MakeComparable({\n    type t = int;\n    let cmp = Pervasives.compare;\n  });\n```\n\n----------------------------------------\n\nTITLE: Character Representation (Disrecommended) in ReScript vs JavaScript\nDESCRIPTION: Shows how character literals in ReScript are converted to their ASCII/Unicode character codes in JavaScript. This feature is not recommended in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/overview.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\n'x'\n```\n\nLANGUAGE: javascript\nCODE:\n```\n120\n```\n\n----------------------------------------\n\nTITLE: Running compiled ReScript code with Node.js\nDESCRIPTION: Command to run the compiled JavaScript output from a ReScript file using Node.js.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/installation.mdx#2025-04-18_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nnode src/Demo.res.js\n```\n\n----------------------------------------\n\nTITLE: Getting Vector Length in ReScript\nDESCRIPTION: Returns the number of elements in a vector.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/vector.mdx#2025-04-18_snippet_13\n\nLANGUAGE: ReScript\nCODE:\n```\nlet length: t('a) => int;\n```\n\n----------------------------------------\n\nTITLE: Validating Set Invariants in ReScript Belt.Set.String\nDESCRIPTION: Internal function that checks if the invariant of the set data structure is maintained. Raises an exception when the invariant is violated.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set-string.mdx#2025-04-18_snippet_40\n\nLANGUAGE: rescript\nCODE:\n```\nlet checkInvariantInternal: t => unit\n```\n\n----------------------------------------\n\nTITLE: Accessing Array Elements - unsafe_get\nDESCRIPTION: Function signature for unsafely retrieving an element from a Uint16Array at a specified index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\nlet unsafe_get: (t, int) => elt\n```\n\n----------------------------------------\n\nTITLE: Getting Value (Exception) in ReScript MapInt Module\nDESCRIPTION: Function signature for getting a value by its key, raising an exception if not found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-int.mdx#2025-04-18_snippet_36\n\nLANGUAGE: rescript\nCODE:\n```\nlet getExn: (t<'v>, key) => 'v\n```\n\n----------------------------------------\n\nTITLE: Setting Array Elements in ReScript\nDESCRIPTION: Modifies the array in place, replacing the nth element. Returns false if the index is out of range.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/array.mdx#2025-04-18_snippet_2\n\nLANGUAGE: ReScript\nCODE:\n```\nlet set: (array<'a>, int, 'a) => bool\n```\n\n----------------------------------------\n\nTITLE: Importing Dynamic Component for ReScript Configuration Schema Visualization\nDESCRIPTION: Imports the Docson component dynamically with Next.js's dynamic import, with a loading state displayed while the component loads. This pattern is used to load the schema visualization component only on the client side.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/build-configuration-schema.mdx#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport dynamic from \"next/dynamic\";\n\nexport const Docson = dynamic(\n  () =>\n    import(\"src/components/Docson\").then((comp) => {\n      return comp.make;\n    }),\n  {\n    ssr: false,\n    loading: () => <div> Loading... </div>,\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: List Reverse Function Signature in ReScript\nDESCRIPTION: Defines the signature for the 'rev' function, which reverses a list.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/list.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\nlet rev: t<'a> => t<'a>\n```\n\n----------------------------------------\n\nTITLE: Exception-based Value Retrieval from MutableSet in ReScript\nDESCRIPTION: The getExn method returns the value if it exists in the set, but raises an exception if the element does not exist.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_11\n\nLANGUAGE: rescript\nCODE:\n```\nlet getExn: (t, value) => value\n```\n\n----------------------------------------\n\nTITLE: Array Properties and Metrics\nDESCRIPTION: Methods for accessing array properties like length, byte length and offset.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-16-array.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet byteLength: t => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet byteOffset: t => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet length: t => int\n```\n\n----------------------------------------\n\nTITLE: Iterating over Belt.MutableSet.Int elements in ReScript\nDESCRIPTION: Iterates over set elements using forEach and reduce functions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_12\n\nLANGUAGE: res\nCODE:\n```\nlet forEach: (t, value => unit) => unit\nlet reduce: (t, 'a, ('a, value) => 'a) => 'a\n```\n\nLANGUAGE: res\nCODE:\n```\nlet s0 = Belt.MutableSet.Int.fromArray([5, 2, 3, 5, 6])\nlet acc = ref(list{})\ns0->Belt.MutableSet.Int.forEach(x => acc := Belt.List.add(acc.contents, x))\nacc /* [6,5,3,2] */\n\nlet s0 = Belt.MutableSet.Int.fromArray([5, 2, 3, 5, 6])\ns0->Belt.MutableSet.Int.reduce(list{}, (acc, element) =>\n  acc->Belt.List.add(element)\n) /* [6,5,3,2] */\n```\n\n----------------------------------------\n\nTITLE: Defining Set Type in ReScript MutableSetString\nDESCRIPTION: Defines the abstract type for the string set data structure.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reason\nCODE:\n```\ntype t;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Enum Definition with Documentation\nDESCRIPTION: Example of a TypeScript enum with documentation comments for the enum itself and each enum value, demonstrating an interop challenge for ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2023-04-17-improving-interop.mdx#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// direction.ts\n/** Direction of the action. */\nenum Direction {\n  /** The direction is up. */\n  Up = \"UP\",\n\n  /** The direction is down. */\n  Down = \"DOWN\",\n\n  /** The direction is left. */\n  Left = \"LEFT\",\n\n  /** The direction is right. */\n  Right = \"RIGHT\",\n}\n\nexport const myDirection = Direction.Up;\n```\n\n----------------------------------------\n\nTITLE: Using Reserved Keywords as JSX Props in JavaScript\nDESCRIPTION: Example showing problematic JavaScript JSX code that uses reserved keywords as props.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/use-illegal-identifier-names.mdx#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/* this won't work in Reason since `type` is a reserved keyword! */\n<Component type=\"title\" />\n```\n\n----------------------------------------\n\nTITLE: Using __LOC_OF__ in ReScript\nDESCRIPTION: Demonstrates how to use __LOC_OF__ to get the location and value of an expression. The example creates a function that returns None and uses __LOC_OF__ to get both its location in the source code and the function itself.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/specialvalues_loc_of.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nlet f = () => None\nlet (loc, f') = __LOC_OF__(f)\n\nloc->Console.log\nf'->Console.log\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction f() {\n  \n}\n\nvar loc = \"File \\\"testmodule.res\\\", line 2, characters 27-28\";\n\nconsole.log(loc);\nconsole.log(f);\nvar f$p = f;\n```\n\n----------------------------------------\n\nTITLE: Checking Internal Invariant in ReScript MapInt Module\nDESCRIPTION: Function signature for checking the internal invariant of the map, raising an exception if not held.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-int.mdx#2025-04-18_snippet_37\n\nLANGUAGE: rescript\nCODE:\n```\nlet checkInvariantInternal: t<'a> => unit\n```\n\n----------------------------------------\n\nTITLE: Reading a Float64 value with little-endian format in ReScript\nDESCRIPTION: Function signature for getting a 64-bit floating point number from the specified byte offset with little-endian format.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_data-view.mdx#2025-04-18_snippet_21\n\nLANGUAGE: rescript\nCODE:\n```\nlet getFloat64LittleEndian: (t, int) => float\n```\n\n----------------------------------------\n\nTITLE: Basic Value Assignment in ReScript\nDESCRIPTION: Example showing basic value assignment in ReScript with number type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/null-undefined-option.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reason\nCODE:\n```\nlet licenseNumber = 5;\n```\n\nLANGUAGE: ml\nCODE:\n```\nlet licenseNumber = 5\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar licenseNumber = 5;\n```\n\n----------------------------------------\n\nTITLE: Using log10 function to calculate base-10 logarithm in ReScript\nDESCRIPTION: The log10 function returns the base-10 logarithm of its argument. It takes a float as input and returns a float, returning NaN for negative arguments.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/math.mdx#2025-04-18_snippet_12\n\nLANGUAGE: res\nCODE:\n```\nlet log10: float => float\n```\n\nLANGUAGE: res\nCODE:\n```\nJs.Math.log10(1000.0) == 3.0\nJs.Math.log10(0.01) == -2.0\nJs.Math.log10(Js.Math.sqrt(10.0)) == 0.5\n```\n\n----------------------------------------\n\nTITLE: Running ReScript Build Watcher in Shell\nDESCRIPTION: Shows how to start a build watcher that automatically rebuilds the project when file changes are detected.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/build-overview.mdx#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nrescript -w\n```\n\n----------------------------------------\n\nTITLE: Writing 64-bit Float (Little Endian)\nDESCRIPTION: Stores a 64-bit floating point number at the specified byte offset from the start of the DataView using little-endian format.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_data-view.mdx#2025-04-18_snippet_35\n\nLANGUAGE: reasonml\nCODE:\n```\nlet setFloat64LittleEndian: (t, int, float) => unit;\n```\n\n----------------------------------------\n\nTITLE: Sorting Array In-Place\nDESCRIPTION: Function signature to sort the elements of the array in-place.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_16\n\nLANGUAGE: res\nCODE:\n```\nlet sortInPlace: t => t\n```\n\n----------------------------------------\n\nTITLE: ReScript Configuration\nDESCRIPTION: JSON configuration for ReScript project setup specifying source directories.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/converting-from-js.mdx#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n  \"sources\": {\n    \"dir\" : \"src\",\n    \"subdirs\" : true\n  }\n```\n\n----------------------------------------\n\nTITLE: Defining DOM NodeFilter Interface in ReScript\nDESCRIPTION: Type definition for NodeFilter interface with acceptNode function\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/dom.mdx#2025-04-18_snippet_5\n\nLANGUAGE: reason\nCODE:\n```\ntype nodeFilter = {\n  acceptNode: (Dom.element) => int\n}\n```\n\n----------------------------------------\n\nTITLE: Error Message Accessor\nDESCRIPTION: Function signature for accessing the error message of an exception.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/exn.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet message: t => option<string>\n```\n\n----------------------------------------\n\nTITLE: Array Sort Check Function Signature\nDESCRIPTION: Function signature for checking if an array of strings is sorted in non-strict increasing order.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/sort-array-string.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nlet isSorted: array<element> => bool\n```\n\n----------------------------------------\n\nTITLE: Writing an Int32 value with little-endian format in ReScript\nDESCRIPTION: Function signature for storing a signed 32-bit integer at the specified byte offset with little-endian format.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_data-view.mdx#2025-04-18_snippet_29\n\nLANGUAGE: rescript\nCODE:\n```\nlet setInt32LittleEndian: (t, int, int) => unit\n```\n\n----------------------------------------\n\nTITLE: Defining String Element Type in ReScript\nDESCRIPTION: Type definition for the basic element type used in the sorting module, which is set to string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/sort-array-string.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\ntype element = string\n```\n\n----------------------------------------\n\nTITLE: Setting Hours and Minutes in ReScript\nDESCRIPTION: The setHoursM function sets a Date object's hours and minutes in the current time zone. It returns the timestamp of the updated Date and modifies the original Date object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_45\n\nLANGUAGE: res\nCODE:\n```\nlet setHoursM: (t, ~hours: float, ~minutes: float, unit) => float\n```\n\nLANGUAGE: res\nCODE:\n```\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet futureTime = Js.Date.setHoursM(date1, ~hours=22.0, ~minutes=46.0, ())\ndate1 == Js.Date.fromString(\"1973-11-29T22:46:54.321Z00:00\")\nfutureTime == Js.Date.getTime(date1)\n```\n\n----------------------------------------\n\nTITLE: Character Type in ReScript\nDESCRIPTION: Declaring a character in ReScript using single quotes. Note that Char doesn't support Unicode or UTF-8.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/primitive-types.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nlet firstLetterOfAlphabet = 'a'\n```\n\nLANGUAGE: js\nCODE:\n```\nvar firstLetterOfAlphabet = /* \"a\" */97;\n```\n\n----------------------------------------\n\nTITLE: Defining Date Type in ReScript\nDESCRIPTION: Defines the type 't' for representing dates in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\ntype t\n```\n\n----------------------------------------\n\nTITLE: Reduce Array Elements from Right\nDESCRIPTION: Applies a function against an accumulator and each element in the array (from right to left).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-64-array.mdx#2025-04-18_snippet_46\n\nLANGUAGE: reason\nCODE:\n```\nlet reduceRight: ((. 'b, elt) => 'b, 'b, t) => 'b;\n```\n\n----------------------------------------\n\nTITLE: Reduce Float32Array Elements to Single Value with Index\nDESCRIPTION: Applies a function against an accumulator and each element in the Float32Array to reduce it to a single value, passing the element index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-32-array.mdx#2025-04-18_snippet_45\n\nLANGUAGE: rescript\nCODE:\n```\nlet reducei: ((. 'b, elt, int) => 'b, 'b, t) => 'b;\n```\n\n----------------------------------------\n\nTITLE: Adding Schema Autocompletion to bsconfig.json\nDESCRIPTION: JSON snippet for enabling schema autocompletion in editors like VSCode by adding the $schema field to bsconfig.json.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/build-configuration.mdx#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"$schema\": \"https://raw.githubusercontent.com/rescript-lang/rescript/master/docs/docson/build-schema.json\"\n```\n\n----------------------------------------\n\nTITLE: Installing and Running ReScript Language Server\nDESCRIPTION: Commands to install the ReScript Language Server globally and run it in stdio mode for editor integration\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2024-01-11-release-11-0-0.mdx#2025-04-18_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -g @rescript/language-server\nnpx rescript-language-server --stdio\n```\n\n----------------------------------------\n\nTITLE: Testing for Undefined Value in ReScript\nDESCRIPTION: Returns true if the given value is empty (undefined), false otherwise.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/undefined.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reasonml\nCODE:\n```\nlet test: t('a) => bool;\n```\n\n----------------------------------------\n\nTITLE: Compiled JavaScript for Function Import\nDESCRIPTION: The JavaScript code generated by the ReScript compiler when dynamically importing a specific function. Shows how the compiler automatically handles the relative path and extracts the specific function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2023-06-05-first-class-dynamic-import-support.mdx#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nasync function main() {\n  var add = await import(\"./MathUtils.mjs\").then(function(m) {\n    return m.add;\n  });\n\n  var onePlusOne = add(1, 1);\n  console.log(onePlusOne);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Directories in bsconfig.json\nDESCRIPTION: Examples of configuring source directories in bsconfig.json, including simple directory lists, nested directory structures, and recursive subdirectory building.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/build-configuration.mdx#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sources\": [\"src\", \"examples\"]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sources\": {\n    \"dir\": \"src\",\n    \"subdirs\": [\"page\"]\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sources\": [\n    \"examples\",\n    {\n      \"dir\": \"src\",\n      \"subdirs\": true // recursively builds every subdirectory\n    }\n  ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sources\": {\n    \"dir\": \"test\",\n    \"type\": \"dev\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Null Value in ReScript\nDESCRIPTION: Defines the 'null' value of type Js.null_undefined('a).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/null-undefined.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reason\nCODE:\n```\nlet null: t('a);\n```\n\n----------------------------------------\n\nTITLE: Finding minimum key as undefined in MapString module (ReScript)\nDESCRIPTION: Function to find the minimum key in a map, returning an undefined type for JavaScript interoperability.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-string.mdx#2025-04-18_snippet_26\n\nLANGUAGE: reason\nCODE:\n```\nlet minKeyUndefined: t('a) => Js.undefined(key);\n```\n\n----------------------------------------\n\nTITLE: String Declaration in ReScript\nDESCRIPTION: Creating string variables in ReScript with both single-line and multiline syntax. ReScript strings use double quotes.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/primitive-types.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\nlet greeting = \"Hello world!\"\nlet multilineGreeting = \"Hello\\n world!\"\n```\n\nLANGUAGE: js\nCODE:\n```\nvar greeting = \"Hello world!\";\nvar multilineGreeting = \"Hello\\n world!\";\n```\n\n----------------------------------------\n\nTITLE: Mapping values with curried function in ReScript map\nDESCRIPTION: Creates a new map by applying a curried function to all values in the original map in increasing key order.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_43\n\nLANGUAGE: reasonml\nCODE:\n```\nlet map: (t('a), 'a => 'b) => t('b);\n```\n\n----------------------------------------\n\nTITLE: JavaScript Output with External Stdlib Imports\nDESCRIPTION: The compiled JavaScript output showing how ReScript transforms the code to use the external stdlib. Note how the require path points to @rescript/std instead of the local bs-platform installation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/build-external-stdlib.mdx#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Note the require path starting with \"@rescript/std\".\nvar Belt_Array = require(\"@rescript/std/lib/js/belt_Array.js\");\n\nBelt_Array.forEach([1, 2, 3], function (num) {\n  console.log(num);\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Root Element for React Application\nDESCRIPTION: Shows the HTML markup for a root div element where the React application will be rendered.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/rendering-elements.mdx#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"root\"/>\n```\n\n----------------------------------------\n\nTITLE: Value Access Operations\nDESCRIPTION: Functions for getting and setting values in the map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-map-int.mdx#2025-04-18_snippet_6\n\nLANGUAGE: res\nCODE:\n```\nlet get: (t<'a>, key) => option<'a>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet getUndefined: (t<'a>, key) => Js.undefined<'a>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet getWithDefault: (t<'a>, key, 'a) => 'a\n```\n\nLANGUAGE: res\nCODE:\n```\nlet getExn: (t<'a>, key) => 'a\n```\n\n----------------------------------------\n\nTITLE: Raising JavaScript Exceptions from ReScript\nDESCRIPTION: Shows how to raise JavaScript exceptions from ReScript code using Js.Exn.raiseError function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/exception.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet myTest = () => {\n  Js.Exn.raiseError(\"Hello!\")\n}\n```\n\n----------------------------------------\n\nTITLE: BigInt Operation Workaround\nDESCRIPTION: Demonstrates the previous workaround needed for BigInt operations using module shadowing.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2025-04-11-introducing-unified-operators.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet addBigInt = {\n  open BigInt!\n  1n + 2n\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Running a Main Module in ReScript\nDESCRIPTION: Demonstrates how to build a main module and its dependencies, with an option to run it using Node.js.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/reason-compiler/latest/extended-compiler-options.mdx#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nbsc -bs-main Main\n```\n\nLANGUAGE: sh\nCODE:\n```\nbsc -c -bs-main Main\n```\n\n----------------------------------------\n\nTITLE: Map Modification Operations\nDESCRIPTION: Functions for modifying map contents\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-map-int.mdx#2025-04-18_snippet_8\n\nLANGUAGE: reasonml\nCODE:\n```\nlet remove: (t('a), key) => unit;\n\nlet removeMany: (t('a), array(key)) => unit;\n\nlet set: (t('a), key, 'a) => unit;\n\nlet updateU: (t('a), key, [@bs] (option('a) => option('a))) => unit;\n\nlet update: (t('a), key, option('a) => option('a)) => unit;\n```\n\n----------------------------------------\n\nTITLE: Setting Minutes and Seconds in ReScript\nDESCRIPTION: Sets both minutes and seconds of a Date object according to current timezone. Returns milliseconds since epoch. Modifies the original Date object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_50\n\nLANGUAGE: res\nCODE:\n```\nlet date1 = Js.Date.fromFloat(123456654321.0)\nlet futureTime = Js.Date.setMinutesS(date1, ~minutes=34.0, ~seconds=56.0, ())\n```\n\n----------------------------------------\n\nTITLE: JavaScript Output of React.forwardRef Implementation\nDESCRIPTION: The compiled JavaScript output of the React.forwardRef implementation in ReScript. Shows how the ReScript code transpiles to JavaScript with proper ref handling and component structure.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/forwarding-refs.mdx#2025-04-18_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from \"react\";\nimport * as Belt_Option from \"rescript/lib/es6/belt_Option.js\";\nimport * as Caml_option from \"rescript/lib/es6/caml_option.js\";\n\nvar make = React.forwardRef(function (props, ref) {\n  return React.createElement(\n    \"div\",\n    undefined,\n    React.createElement(\"input\", {\n      ref: Belt_Option.map(\n        ref == null ? undefined : Caml_option.some(ref),\n        function (prim) {\n          return prim;\n        }\n      ),\n      className: props.className,\n      type: \"text\",\n    }),\n    props.children\n  );\n});\n\nvar FancyInput = {\n  make: make,\n};\n\nfunction App(props) {\n  var input = React.useRef(null);\n  var onClick = function (param) {\n    Belt_Option.forEach(\n      Caml_option.nullable_to_opt(input.current),\n      function (input) {\n        input.focus();\n      }\n    );\n  };\n  return React.createElement(\n    \"div\",\n    undefined,\n    React.createElement(make, {\n      className: \"fancy\",\n      children: React.createElement(\n        \"button\",\n        {\n          onClick: onClick,\n        },\n        \"Click to focus\"\n      ),\n      ref: input,\n    })\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping with keys and curried function in ReScript map\nDESCRIPTION: Creates a new map by applying a curried function to all key-value pairs in the original map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_45\n\nLANGUAGE: reasonml\nCODE:\n```\nlet mapWithKey: (t('a), (key, 'a) => 'b) => t('b);\n```\n\n----------------------------------------\n\nTITLE: Using Lowercase Constructor Names in Polymorphic Variants\nDESCRIPTION: Demonstrates how polymorphic variant constructor names are less restrictive than common variants, allowing lowercase names. This provides more flexibility for JavaScript interoperability.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/polymorphic-variant.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\ntype users = [ #admin | #moderator | #user ]\n\nlet admin = #admin\n```\n\nLANGUAGE: js\nCODE:\n```\nvar admin = \"admin\";\n```\n\n----------------------------------------\n\nTITLE: String Make Function Signature\nDESCRIPTION: Function signature for converting any value to a string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string-2.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reason\nCODE:\n```\nlet make: 'a => t;\n```\n\n----------------------------------------\n\nTITLE: Creating a new HashSetString\nDESCRIPTION: Creates a new empty HashSetString with an optional hint for the initial size.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/hash-set-string.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nlet make: (~hintSize: int) => t\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for the FAQ page, defining title, description, and canonical URL\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/faq.mdx#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"FAQ\"\ndescription: \"Frequently asked questions about ReScript and its ecosystem\"\ncanonical: \"/docs/manual/latest/faq\"\n---\n```\n\n----------------------------------------\n\nTITLE: String Link Method in ReScript\nDESCRIPTION: Binds to JavaScript's deprecated String.link() method that creates an HTML anchor tag with an href attribute. This method has been removed from web standards and should not be used.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/string.mdx#2025-04-18_snippet_24\n\nLANGUAGE: rescript\nCODE:\n```\nlet link: (t, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.String.link(\"page2.html\", \"Go to page two\") == \"<a href=\\\"page2.html\\\">Go to page two</a>\"\n```\n\n----------------------------------------\n\nTITLE: Comparing Number Operations in ReScript and JavaScript\nDESCRIPTION: Shows how number operations differ between ReScript and JavaScript, particularly for floating-point arithmetic.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/overview.mdx#2025-04-18_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n3.0 + 4.5\n```\n\nLANGUAGE: ReScript\nCODE:\n```\n3.0 +. 4.5\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n5 % 3\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nmod(5, 3)\n```\n\n----------------------------------------\n\nTITLE: Stable sorting string array in-place in ReScript\nDESCRIPTION: Function to perform stable sorting on a string array in-place, using a fixed comparator.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/sort-array-string.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ReScript\nCODE:\n```\nlet stableSortInPlace: array(element) => unit;\n```\n\n----------------------------------------\n\nTITLE: Installing ReScript 8.4.2 via NPM\nDESCRIPTION: Command to install version 8.4.2 of bs-platform (ReScript) using npm. This allows users to try the new release with its build system improvements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2020-12-07-release-8-4.mdx#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i bs-platform@8.4.2\n```\n\n----------------------------------------\n\nTITLE: Implementing Derived Comparison Operators in ReScript\nDESCRIPTION: Demonstrates the proposed @deriving annotation for generating comparison operators for custom types. Shows how the compiler would generate specialized comparison functions for record types.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2025-04-11-introducing-unified-operators.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\n@deriving([compare, equals])\ntype person = {\n  name: string,\n}\n\n// Implicitly derived unified comparison operators for the `person` type.\nexternal \"person$compare\": (person, person) => int = \"%compare\"\nexternal \"person$equals\": (person, person) => bool = \"%equals\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction person$compare(a, b) {\n  return a.name.localeCompare(b.name);\n}\n\nfunction person$equals(a, b) {\n  return a.name === b.name;\n}\n```\n\n----------------------------------------\n\nTITLE: Using %todo Extension Point Without Message in ReScript\nDESCRIPTION: Shows how to use the %todo extension point without a text message. This will also crash when executed, and it's recommended to promote the warning to an error in production builds.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/extension_todo.mdx#2025-04-18_snippet_1\n\nLANGUAGE: ReScript\nCODE:\n```\nlet implementMeLater = (): string => %todo\n```\n\n----------------------------------------\n\nTITLE: Creating UInt32Array from array\nDESCRIPTION: Defines a function that creates a new typed array from a regular array of elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_51\n\nLANGUAGE: rescript\nCODE:\n```\nlet make: array<elt> => t\n```\n\n----------------------------------------\n\nTITLE: Configuring ReScript Sources in bsconfig.json\nDESCRIPTION: Shows how to configure the sources directory in bsconfig.json to include the ReScript files for compilation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/converting-from-js.mdx#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n  \"sources\": {\n    \"dir\" : \"src\",\n    \"subdirs\" : true\n  },\n```\n\n----------------------------------------\n\nTITLE: ReScript Normal Polymorphic Type Definition (Limited)\nDESCRIPTION: Example of defining a logger with normal polymorphic types in ReScript, which has limitations when using the same logger instance with different data types.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/scoped-polymorphic-types.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\ntype logger<'a> = { log: 'a => unit}\n\n@module(\"jsAPI\") external getLogger: unit => logger<'a> = \"getLogger\"\n```\n\n----------------------------------------\n\nTITLE: Filling Uint8ClampedArray range with a value\nDESCRIPTION: Fills the array within the specified start and end range with the given value, modifying the array in place.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_14\n\nLANGUAGE: res\nCODE:\n```\nlet fillRangeInPlace: (elt, ~start: int, ~end_: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Defining JavaScript Function Type in ReScript\nDESCRIPTION: Type definition for JavaScript function values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/types.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\ntype function_val\n```\n\n----------------------------------------\n\nTITLE: Slicing and Copying Uint8ClampedArray in ReScript\nDESCRIPTION: Functions for creating slices and copies of Uint8ClampedArray.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_7\n\nLANGUAGE: ReScript\nCODE:\n```\nlet slice: (~start: int, ~end_: int, t) => t;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet copy: t => t;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet sliceFrom: (int, t) => t;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet subarray: (~start: int, ~end_: int, t) => t;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet subarrayFrom: (int, t) => t;\n```\n\n----------------------------------------\n\nTITLE: Illustrating Invalid Spread Props Usage in ReScript\nDESCRIPTION: Demonstrates incorrect usage of spread props in ReScript React components. Multiple spreads and incorrect positioning are not allowed.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/extensions-of-props.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\n<NotAllowed {...props1} {...props2} />\n```\n\nLANGUAGE: rescript\nCODE:\n```\n<NotAllowed a=\"a\" {...props} />\n```\n\n----------------------------------------\n\nTITLE: Using External PPX with ReScript\nDESCRIPTION: Shows how to use an external PPX preprocessor with ReScript by disabling built-in PPX and specifying a custom one.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/reason-compiler/latest/extended-compiler-options.mdx#2025-04-18_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nbsc -c -ppx bsppx.exe -bs-no-builtin-ppx-ml c.ml\n```\n\n----------------------------------------\n\nTITLE: setIntervalFloat Function Signature in ReScript\nDESCRIPTION: Function signature for setIntervalFloat which is like setInterval but accepts a float value for the interval.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/global.mdx#2025-04-18_snippet_8\n\nLANGUAGE: reasonml\nCODE:\n```\nlet setIntervalFloat: (unit => unit, float) => intervalId;\n```\n\n----------------------------------------\n\nTITLE: Checking for element existence in SetDict in ReScript\nDESCRIPTION: Shows how to use the 'has' function to check if a specific element exists in a SetDict.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-dict.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet has: (t('value, 'id), 'value, ~cmp: cmp('value, 'id)) => bool;\n\nmodule IntCmp =\n  Belt.Id.MakeComparable({\n    type t = int;\n    let cmp = Pervasives.compare;\n  });\n\nlet set = Belt.Set.Dict.fromArray([|1, 4, 2, 5|], ~cmp=IntCmp.cmp);\n\nset->Belt.Set.Dict.has(3) /* false */\nset->Belt.Set.Dict.has(1) /* true */\n```\n\n----------------------------------------\n\nTITLE: Defining the set type in ReScript for MutableSetInt\nDESCRIPTION: Defines the abstract type for sets in the MutableSetInt module.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\ntype t;\n```\n\n----------------------------------------\n\nTITLE: Filling Array from Start Index\nDESCRIPTION: Fills the array with a specified value starting from a specified index, modifying it in place.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_13\n\nLANGUAGE: rescript\nCODE:\n```\nlet fillFromInPlace: (elt, ~from: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Installing ReScript Core via NPM\nDESCRIPTION: Command to install the new ReScript Core standard library package\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/migrate-to-v11.mdx#2025-04-18_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ npm install @rescript/core\n```\n\n----------------------------------------\n\nTITLE: Defining Nullable Type Alias\nDESCRIPTION: Defines a type alias 't' for Js.null_undefined to represent nullable values\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/nullable.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype t<'a> = Js.null_undefined<'a>\n```\n\n----------------------------------------\n\nTITLE: Array Access Operations\nDESCRIPTION: Basic array access operations including unsafe get and set methods, and buffer access.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_type-s.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reason\nCODE:\n```\nlet unsafe_get: (t, int) => elt;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet unsafe_set: (t, int, elt) => unit;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet buffer: t => Js_typed_array.array_buffer;\n```\n\n----------------------------------------\n\nTITLE: Updating a value with uncurried function in ReScript map\nDESCRIPTION: Updates the value associated with the given key using an uncurried function that takes the current value as option.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_40\n\nLANGUAGE: reasonml\nCODE:\n```\nlet updateU: (t('a), key, [@bs] (option('a) => option('a))) => unit;\n```\n\n----------------------------------------\n\nTITLE: Basic JavaScript Value Inlining Example\nDESCRIPTION: Example showing a typical JavaScript development mode check that bundlers can optimize.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/inlining-constants.mdx#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif (process.env.mode === 'development') {\n  console.log(\"Dev-only code here!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Array Data with setArray\nDESCRIPTION: Function signature to set data from a regular array into an Int8Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_6\n\nLANGUAGE: res\nCODE:\n```\nlet setArray: (array<elt>, t) => unit\n```\n\n----------------------------------------\n\nTITLE: Dictionary Values Example\nDESCRIPTION: Example showing how to get all values from a dictionary.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/dict.mdx#2025-04-18_snippet_16\n\nLANGUAGE: rescript\nCODE:\n```\nJs.Dict.values(ages) == [30, 22, 49]\n```\n\n----------------------------------------\n\nTITLE: Getting Storage Key by Index in ReScript\nDESCRIPTION: External binding to get a storage key at a given numeric index, returning an optional string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/dom/storage2.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nexternal key: (t, int) => option<string> = \"key\"\n```\n\n----------------------------------------\n\nTITLE: ReScript Color Module Implementation\nDESCRIPTION: Example ReScript module implementing color-related functionality with genType annotations for TypeScript export.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/typescript-integration.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\n@genType\ntype color =\n  | Red\n  | Blue\n\n@genType\nlet printColorMessage = (~color, ~message) => {\n  let prefix = switch color {\n  | Red => \"\\x1b[91m\"\n  | Blue => \"\\x1b[94m\"\n  }\n  let reset = \"\\x1b[0m\"\n\n  Console.log(prefix ++ message ++ reset)\n}\n```\n\n----------------------------------------\n\nTITLE: Map Comparison Operations\nDESCRIPTION: Functions for comparing maps and their contents with custom comparators\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-map-int.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reasonml\nCODE:\n```\nlet cmpU: (t('a), t('a), [@bs] (('a, 'a) => int)) => int;\n\nlet cmp: (t('a), t('a), ('a, 'a) => int) => int;\n\nlet eqU: (t('a), t('a), [@bs] (('a, 'a) => bool)) => bool;\n\nlet eq: (t('a), t('a), ('a, 'a) => bool) => bool;\n```\n\n----------------------------------------\n\nTITLE: Comparing SetDict instances in ReScript\nDESCRIPTION: Shows how to use functions like 'subset', 'cmp', and 'eq' to compare SetDict instances.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-dict.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rescript\nCODE:\n```\nlet subset: (t('value, 'id), t('value, 'id), ~cmp: cmp('value, 'id)) => bool;\nlet cmp: (t('value, 'id), t('value, 'id), ~cmp: cmp('value, 'id)) => int;\nlet eq: (t('value, 'id), t('value, 'id), ~cmp: cmp('value, 'id)) => bool;\n\nmodule IntCmp =\n  Belt.Id.MakeComparable({\n    type t = int;\n    let cmp = Pervasives.compare;\n  });\n\nlet s0 = Belt.Set.Dict.fromArray([|5,2,3,5,6|], ~cmp=IntCmp.cmp);\nlet s1 = Belt.Set.Dict.fromArray([|5,2,3,1,5,4|], ~cmp=IntCmp.cmp);\nlet s2 = Belt.Set.Dict.intersect(s0, s1, ~cmp=IntCmp.cmp);\nBelt.Set.Dict.subset(s2, s0, ~cmp=IntCmp.cmp); /* true */\nBelt.Set.Dict.subset(s2, s1, ~cmp=IntCmp.cmp); /* true */\nBelt.Set.Dict.subset(s1, s0, ~cmp=IntCmp.cmp); /* false */\n\nlet s3 = Belt.Set.Dict.fromArray([|3,2,5|], ~cmp=IntCmp.cmp);\nBelt.Set.Dict.eq(s0, s3, ~cmp=IntCmp.cmp); /* true */\n```\n\n----------------------------------------\n\nTITLE: Comparing Block Syntax in JavaScript and ReScript\nDESCRIPTION: Illustrates the differences in block syntax and implicit returns between JavaScript and ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/overview.mdx#2025-04-18_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst myFun = (x, y) => {\n  const doubleX = x + x;\n  const doubleY = y + y;\n  return doubleX + doubleY;\n};\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet myFun = (x, y) => {\n  let doubleX = x + x\n  let doubleY = y + y\n  doubleX + doubleY\n}\n```\n\n----------------------------------------\n\nTITLE: Defining eq type in ReScript\nDESCRIPTION: Defines a type 'eq' with two type parameters. It represents an equality function signed with a type parameter to prevent mixing of different equality functions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/id.mdx#2025-04-18_snippet_1\n\nLANGUAGE: ReScript\nCODE:\n```\ntype eq('a, 'id);\n```\n\n----------------------------------------\n\nTITLE: Installing ReScript 8.3 via npm\nDESCRIPTION: Command to install ReScript version 8.3 using npm.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2020-09-25-release-8-3.mdx#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i bs-platform@8.3.0\n```\n\n----------------------------------------\n\nTITLE: Generated TypeScript Output for ReScript Component\nDESCRIPTION: This snippet shows the TypeScript code generated by GenType for the ReScript component. It includes type definitions, a converter function, and a React component wrapper that handles prop conversion between ReScript and TypeScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/decorator_gentype.mdx#2025-04-18_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n/* TypeScript file generated from MyComponent.res by genType. */\n/* eslint-disable import/first */\n\nimport * as React from \"react\";\n\nconst $$toRE818596289: { [key: string]: any } = { Red: 0, Blue: 1 };\n\n// tslint:disable-next-line:no-var-requires\nconst MyComponentBS = require(\"./MyComponent.bs\");\n\n// tslint:disable-next-line:interface-over-type-literal\nexport type color = \"Red\" | \"Blue\";\n\n// tslint:disable-next-line:interface-over-type-literal\nexport type Props = { readonly color: color; readonly name: string };\n\nexport const make: React.ComponentType<{\n  readonly color: color;\n  readonly name: string;\n}> = function MyComponent(Arg1: any) {\n  const $props = { color: $$toRE818596289[Arg1.color], name: Arg1.name };\n  const result = React.createElement(MyComponentBS.make, $props);\n  return result;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Array from Buffer with Range\nDESCRIPTION: Function signature to create a new Uint16Array from a section of an ArrayBuffer, which can raise a Js.Exn.Error.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_54\n\nLANGUAGE: res\nCODE:\n```\nlet fromBufferRange: (Js_typed_array.array_buffer, ~offset: int, ~length: int) => t\n```\n\n----------------------------------------\n\nTITLE: Checking Empty Set\nDESCRIPTION: Function signature for checking if a set is empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_6\n\nLANGUAGE: res\nCODE:\n```\nlet isEmpty: t => bool\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for Uint8Array\nDESCRIPTION: Core type definitions for the Uint8Array implementation including element type, typed array type and main array type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype elt = int\ntype typed_array<'a>\ntype t = typed_array<elt>\n```\n\n----------------------------------------\n\nTITLE: Using Light Syntax for Shorter Getter Function Names\nDESCRIPTION: Demonstrates the light setting for @deriving(abstract) which generates getter functions with names that match the field names, instead of the default nameGet style.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/generate-converters-accessors.mdx#2025-04-18_snippet_18\n\nLANGUAGE: ReScript\nCODE:\n```\n@deriving({abstract: light})\ntype person = {\n  name: string,\n  age: int,\n}\n\nlet joe = person(~name=\"Joe\", ~age=20)\nlet joeName = name(joe)\n```\n\n----------------------------------------\n\nTITLE: Computing Floor as Integer in ReScript (Unsafe)\nDESCRIPTION: Function that returns the largest integer less than or equal to the argument. May return values outside the int range (-2147483648 to 2147483647).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/math.mdx#2025-04-18_snippet_33\n\nLANGUAGE: reasonml\nCODE:\n```\nlet unsafe_floor_int: float => int;\n```\n\n----------------------------------------\n\nTITLE: Reducing MutableSet Elements in ReasonML\nDESCRIPTION: Function signature for applying a reducer function to each element of the set with an accumulator.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_38\n\nLANGUAGE: reasonml\nCODE:\n```\nlet reduce: (t('value, 'id), 'a, ('a, 'value) => 'a) => 'a;\n```\n\n----------------------------------------\n\nTITLE: Iterating Elements with forEach\nDESCRIPTION: Function signature to execute a provided function on each element of the Int8Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_40\n\nLANGUAGE: res\nCODE:\n```\nlet forEach: ((. elt) => unit, t) => unit\n```\n\n----------------------------------------\n\nTITLE: Reducing an integer hash set with uncurried function in ReScript\nDESCRIPTION: Function signature for folding over the hash set with an uncurried function to produce a single result.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/hash-set-int.mdx#2025-04-18_snippet_11\n\nLANGUAGE: res\nCODE:\n```\nlet reduceU: (t, 'c, (. 'c, key) => 'c) => 'c\n```\n\n----------------------------------------\n\nTITLE: Updating a value with curried function in ReScript map\nDESCRIPTION: Updates the value associated with the given key using a curried function that takes the current value as option.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_41\n\nLANGUAGE: reasonml\nCODE:\n```\nlet update: (t('a), key, option('a) => option('a)) => unit;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Uint8ClampedArray Properties in ReScript\nDESCRIPTION: Functions to get various properties of a Uint8ClampedArray, such as buffer, byte length, and byte offset.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_2\n\nLANGUAGE: ReScript\nCODE:\n```\nlet buffer: t => Js_typed_array2.array_buffer;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet byteLength: t => int;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet byteOffset: t => int;\n```\n\n----------------------------------------\n\nTITLE: Raising UriError exception in ReScript\nDESCRIPTION: Function signature for raising a JavaScript UriError exception with a custom message.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/exn.mdx#2025-04-18_snippet_14\n\nLANGUAGE: rescript\nCODE:\n```\nlet raiseUriError: string => 'a\n```\n\n----------------------------------------\n\nTITLE: Traditional Approach to Handling Nullable Values\nDESCRIPTION: Example of the traditional approach to handling nullable values in ReScript using Null.t and Null.toOption, requiring explicit conversion before pattern matching.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2023-04-17-improving-interop.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\ntype userAge = {ageNum: Null.t<int>}\n\ntype rec user = {\n  name: string,\n  age: Null.t<userAge>,\n  bestFriend: Null.t<user>,\n}\n\nlet getBestFriendsAge = user =>\n  switch user.bestFriend->Null.toOption {\n  | Some({age}) =>\n    switch age->Null.toOption {\n    | None => None\n    | Some({ageNum}) => ageNum->Null.toOption\n    }\n  | None => None\n  }\n```\n\n----------------------------------------\n\nTITLE: Testing Nullable values in ReScript\nDESCRIPTION: The 'test' function checks whether a Nullable value is null/undefined or contains a value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/nullable.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\nlet test: t('a) => bool;\n```\n\n----------------------------------------\n\nTITLE: Compiling ReScript with Stricter Errors in CI\nDESCRIPTION: Demonstrates how to compile a ReScript project with stricter error rules, specifically promoting warning 110 (todo) to an error using the -warn-error flag.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/build-overview.mdx#2025-04-18_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nrescript -warn-error +110\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for Int16Array\nDESCRIPTION: Core type definitions for the Int16Array implementation including element type, typed array type and main array type\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_int-16-array.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\ntype elt = int;\ntype typed_array('a);\ntype t = typed_array(elt);\n```\n\n----------------------------------------\n\nTITLE: Sorting TypedArray with Custom Comparator in ReScript\nDESCRIPTION: Function signature for sorting the elements of a Uint8ClampedArray in place using a custom comparison function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_17\n\nLANGUAGE: res\nCODE:\n```\nlet sortInPlaceWith: ((. elt, elt) => int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Configuring External Stdlib in rescript.json\nDESCRIPTION: JSON configuration in rescript.json to specify the external stdlib package. This tells the ReScript compiler to use the external stdlib for imports.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/build-external-stdlib.mdx#2025-04-18_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  // ...\n  \"external-stdlib\" : \"@rescript/std\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Float32Array Types in ReScript\nDESCRIPTION: Defines the basic types for Float32Array, including element type, typed array, and the main Float32Array type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype elt = float\ntype typed_array<'a> = Js_typed_array2.Float32Array.typed_array<'a>\ntype t = typed_array<elt>\n```\n\n----------------------------------------\n\nTITLE: Accessing Ref Contents in ReScript\nDESCRIPTION: Demonstrates how to access the value stored in a ref by using the .contents field.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/mutation.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet five = myValue.contents // 5\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar five = myValue.contents;\n```\n\n----------------------------------------\n\nTITLE: Getting the size of a set in ReScript\nDESCRIPTION: Returns the number of elements in the set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-int.mdx#2025-04-18_snippet_29\n\nLANGUAGE: reason\nCODE:\n```\nlet size: t => int;\n```\n\n----------------------------------------\n\nTITLE: TailwindCSS Main Configuration in ReScript\nDESCRIPTION: Shows the main CSS entry file for TailwindCSS setup that imports the required Tailwind directives for base styles, components, and utilities.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/styling.mdx#2025-04-18_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n/* main.css */\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\n----------------------------------------\n\nTITLE: Fill Array In Place\nDESCRIPTION: Fills all elements of the array with the provided value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-64-array.mdx#2025-04-18_snippet_12\n\nLANGUAGE: reason\nCODE:\n```\nlet fillInPlace: (elt, t) => t;\n```\n\n----------------------------------------\n\nTITLE: Defining Int8Array types in ReScript\nDESCRIPTION: Defines the element type, typed array type, and the main Int8Array type alias.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype elt = int\ntype typed_array<'a> = Js_typed_array2.Int8Array.typed_array<'a>\ntype t = typed_array<elt>\n```\n\n----------------------------------------\n\nTITLE: Defining truncateToLengthUnsafe Function Signature in ReScript\nDESCRIPTION: Declares the type signature of the truncateToLengthUnsafe function, which takes an array of any type and an integer, and returns unit (no value).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/array.mdx#2025-04-18_snippet_40\n\nLANGUAGE: ReScript\nCODE:\n```\nlet truncateToLengthUnsafe: (array<'a>, int) => unit\n```\n\n----------------------------------------\n\nTITLE: Creating Empty Set\nDESCRIPTION: Function signature for creating an empty string set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nlet make: unit => t\n```\n\n----------------------------------------\n\nTITLE: Creating a DataView from ArrayBuffer in ReScript\nDESCRIPTION: Function signature for creating a new DataView from an ArrayBuffer.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_data-view.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet make: Js_typed_array.array_buffer => t\n```\n\n----------------------------------------\n\nTITLE: Checking Internal Invariants in MutableSet\nDESCRIPTION: The checkInvariantInternal method validates the internal invariants of the set structure and raises an exception if they are not maintained.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_13\n\nLANGUAGE: rescript\nCODE:\n```\nlet checkInvariantInternal: t => unit\n```\n\n----------------------------------------\n\nTITLE: Reverse Float32Array In-Place\nDESCRIPTION: Reverses the order of elements in the Float32Array in-place.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-32-array.mdx#2025-04-18_snippet_15\n\nLANGUAGE: rescript\nCODE:\n```\nlet reverseInPlace: t => t;\n```\n\n----------------------------------------\n\nTITLE: Error in Uncurried Mode for Partial Application\nDESCRIPTION: Shows the error message when attempting partial application in uncurried mode.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2023-09-18-uncurried-mode.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet add = (a, b) => a + b\nlet addFive = add(5) // <-- Error:\n// This uncurried function has type (. int, int) => int\n// It is applied with 1 arguments but it requires 2.\n```\n\n----------------------------------------\n\nTITLE: ReScript Type Variant Definition\nDESCRIPTION: Defines a parametric variant type representing all possible JavaScript value types.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/types.mdx#2025-04-18_snippet_5\n\nLANGUAGE: reason\nCODE:\n```\ntype t('a) =\n  | Undefined: t(undefined_val)\n  | Null: t(null_val)\n  | Boolean: t(bool)\n  | Number: t(float)\n  | String: t(string)\n  | Function: t(function_val)\n  | Object: t(obj_val)\n  | Symbol: t(symbol);\n```\n\n----------------------------------------\n\nTITLE: Including Modules in ReScript\nDESCRIPTION: Demonstrates how to include one module in another using the `include` keyword, which spreads all public values from the included module into the current module's scope.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/language_include.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\nmodule Message = {\n  let greeting = \"Hello\"\n}\n\nmodule Greeter = {\n  include Message\n  let greet = name => greeting ++ \" \" ++ name\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar greeting = \"Hello\";\n\nvar Message = {\n  greeting: greeting,\n};\n\nfunction greet(name) {\n  return \"Hello \" + name;\n}\n\nvar Greeter = {\n  greeting: greeting,\n  greet: greet,\n};\n```\n\n----------------------------------------\n\nTITLE: Running ReScript in Watch Mode\nDESCRIPTION: Command to run ReScript compiler in watch mode to automatically rebuild on file changes.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/README.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx rescript -w\n```\n\n----------------------------------------\n\nTITLE: Raw JavaScript Integration in ReScript\nDESCRIPTION: Demonstrates how to embed raw JavaScript code in ReScript using %raw decorator.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/interop-cheatsheet.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nlet add = %raw(\"(a, b) => a + b\")\n%%raw(\"const a = 1\")\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar add = ((a, b) => a + b);\nconst a = 1\n```\n\n----------------------------------------\n\nTITLE: Legacy Option to Undefined Conversion in ReScript\nDESCRIPTION: Function signature for the legacy function to convert options to undefined values. This is likely maintained for backward compatibility.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/undefined.mdx#2025-04-18_snippet_12\n\nLANGUAGE: res\nCODE:\n```\nlet from_opt: option<'a> => t<'a>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic FancyButton Component in ReScript\nDESCRIPTION: A simple example of a FancyButton component that renders a native button DOM element with custom styling.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/forwarding-refs.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\n// FancyButton.res\n\n@react.component\nlet make = (~children) => {\n  <button className=\"FancyButton\">\n    children\n  </button>\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting Array in Place\nDESCRIPTION: Sorts the elements of the array in place using the default sorting algorithm.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_16\n\nLANGUAGE: rescript\nCODE:\n```\nlet sortInPlace: t => t\n```\n\n----------------------------------------\n\nTITLE: Forwarding Refs via Props in ReScript React\nDESCRIPTION: Example of the recommended approach for forwarding refs in ReScript React by passing them explicitly as props. Shows a FancyInput component that accepts an inputRef prop and forwards it to the internal input element.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/forwarding-refs.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\n// App.res\n\nmodule FancyInput = {\n  @react.component\n  let make = (~children, ~inputRef: ReactDOM.domRef) =>\n    <div> <input type_=\"text\" ref=inputRef /> children </div>\n}\n\n@send external focus: Dom.element => unit = \"focus\"\n\n@react.component\nlet make = () => {\n  let input = React.useRef(Nullable.null)\n\n  let focusInput = () =>\n    input.current->Nullable.forEach(input => input->focus)\n\n  let onClick = _ => focusInput()\n\n  <div>\n    <FancyInput inputRef={ReactDOM.Ref.domRef(input)}>\n      <button onClick> {React.string(\"Click to focus\")} </button>\n    </FancyInput>\n  </div>\n}\n```\n\n----------------------------------------\n\nTITLE: Filling Array with Value using fillInPlace\nDESCRIPTION: Function signature to fill all elements of the Int8Array with a specified value, modifying the array in place.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_12\n\nLANGUAGE: res\nCODE:\n```\nlet fillInPlace: (elt, t) => t\n```\n\n----------------------------------------\n\nTITLE: Using File-level JSX Configuration in ReScript\nDESCRIPTION: Example of using @@jsxConfig to set different JSX configurations within a single file, allowing for mixed JSX version usage.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/migrate-react.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\n@@jsxConfig({ version: 4, mode: \"automatic\" })\n\nmodule Wrapper = {\n  module R1 = {\n    @react.component  // V4 and new _jsx transform\n    let make = () => body\n  }\n\n  @@jsxConfig({ version: 4, mode: \"classic\" })\n\n  module R2 = {\n    @react.component  // V4 with `React.createElement`\n    let make = () => body\n  }\n}\n\n@@jsxConfig({ version: 3 })\n\n@react.component  // V3\nlet make = () => body\n```\n\n----------------------------------------\n\nTITLE: Object Keys Retrieval in ReScript\nDESCRIPTION: Function signature for retrieving an array of object keys. Returns an array of strings containing all enumerable property names of the object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/obj.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet keys: {..} => array<string>\n```\n\n----------------------------------------\n\nTITLE: Configuring ReasonReact JSX Support\nDESCRIPTION: JSON configuration for enabling ReasonReact JSX support in the ReScript build system, specifying the React JSX version and refmt version.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/build-configuration.mdx#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"reason\": { \"react-jsx\": 3 },\n  \"refmt\": 3\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Timezone Offset from Date in ReScript\nDESCRIPTION: ReScript binding for JavaScript's Date.getTimezoneOffset method. Returns the time zone offset in minutes from the current time zone to UTC.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_28\n\nLANGUAGE: res\nCODE:\n```\nlet getTimezoneOffset: t => float\n```\n\nLANGUAGE: res\nCODE:\n```\nJs.Date.getTimezoneOffset(exampleDate) == -60.0\n```\n\n----------------------------------------\n\nTITLE: Using Array Indices as React Keys in ReScript (Last Resort)\nDESCRIPTION: Demonstrates using array indices as keys when stable IDs aren't available, which should be used as a last resort since it may cause performance issues with dynamic lists.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/arrays-and-keys.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet items = Belt.Array.mapWithIndex(todos, (i, todo) => {\n  // Only do this if items have no stable id\n  <li key={Belt.Int.toString(i)}>\n    {todo.text}\n  </li>\n});\n```\n\n----------------------------------------\n\nTITLE: Clearing a MutableQueue in ReScript\nDESCRIPTION: Function to discard all elements from the queue.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-queue.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet clear: t('a) => unit;\n```\n\n----------------------------------------\n\nTITLE: Reducing List Elements with Index in ReScript\nDESCRIPTION: The reduceWithIndex function combines all elements in a list using an accumulator function that also receives the element index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/list.mdx#2025-04-18_snippet_39\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduceWithIndex: (t<'a>, 'b, ('b, 'a, int) => 'b) => 'b\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlist{1, 2, 3, 4}->Belt.List.reduceWithIndex(0, (acc, item, index) => acc + item + index) /* 16 */\n```\n\n----------------------------------------\n\nTITLE: Using React.forwardRef in ReScript (Discouraged Method)\nDESCRIPTION: Implementation of a FancyInput component using React.forwardRef API to forward refs to the underlying input element, with an example of usage. This approach is discouraged in favor of passing refs as props.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/forwarding-refs.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\n// App.res\n\nmodule FancyInput = {\n  @react.component\n  let make = React.forwardRef((~className=?, ~children, ref_) =>\n    <div>\n      <input\n        type_=\"text\"\n        ?className\n        ref=?{Js.Nullable.toOption(ref_)->Belt.Option.map(\n          ReactDOM.Ref.domRef,\n        )}\n      />\n      children\n    </div>\n  )\n}\n\n@send external focus: Dom.element => unit = \"focus\"\n\n@react.component\nlet make = () => {\n  let input = React.useRef(Js.Nullable.null)\n\n  let focusInput = () =>\n    input.current\n    ->Js.Nullable.toOption\n    ->Belt.Option.forEach(input => input->focus)\n\n  let onClick = _ => focusInput()\n\n  <div>\n    <FancyInput className=\"fancy\" ref=input>\n      <button onClick> {React.string(\"Click to focus\")} </button>\n    </FancyInput>\n  </div>\n}\n```\n\n----------------------------------------\n\nTITLE: Breaking Out of a While Loop in ReScript\nDESCRIPTION: Since ReScript doesn't have a break keyword, this example shows how to break out of a while loop using a mutable reference.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/control-flow.mdx#2025-04-18_snippet_9\n\nLANGUAGE: res\nCODE:\n```\nlet break = ref(false)\n\nwhile !break.contents {\n  if Math.random() > 0.3 {\n    break := true\n  } else {\n    Console.log(\"Still running\")\n  }\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar $$break = {\n  contents: false\n};\n\nwhile(!$$break.contents) {\n  if (Math.random() > 0.3) {\n    $$break.contents = true;\n  } else {\n    console.log(\"Still running\");\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Running Build Trace Profiler in ReScript\nDESCRIPTION: Command to run the bstracing tool that generates a JSON file for visualizing build performance in Chrome's tracing tool. The file can be loaded into chrome://tracing for analysis.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/build-performance.mdx#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n./node_modules/.bin/bstracing\n```\n\n----------------------------------------\n\nTITLE: Using Array Index as Keys in ReScript React\nDESCRIPTION: Demonstrates using array indices as keys when stable IDs are not available, which should be used as a last resort.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/arrays-and-keys.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet items = Belt.Array.mapWithIndex(todos, (i, todo) => {\n  // Only do this if items have no stable id\n  <li key={Belt.Int.toString(i)}>\n    {todo.text}\n  </li>\n});\n```\n\n----------------------------------------\n\nTITLE: Unsafe Element Setting in Float32Array\nDESCRIPTION: Provides unchecked setting of elements at specific indices in a Float32Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet unsafe_set: (t, int, elt) => unit\n```\n\n----------------------------------------\n\nTITLE: Composing Multiple bs Attributes with Variadic Functions in ReScript\nDESCRIPTION: Demonstrates combining multiple bs.* attributes in a single external declaration. This example uses bs.val, bs.scope, and bs.variadic (formerly bs.splice) to create a binding to a global JavaScript function with a specific parameter structure.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/reason-compiler/latest/interop-misc.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\n[@bs.val] [@bs.scope \"global\"] [@bs.variadic]\nexternal draw : ([@bs.as \"dog\"] _, array(int)) => unit = \"draw\";\n\ndraw([|1, 2|]);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nglobal.draw(\"dog\", 1, 2);\n```\n\n----------------------------------------\n\nTITLE: Building ReScript Project without Dependencies\nDESCRIPTION: This command builds only the project's files without including dependencies.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/build-overview.mdx#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nbsb\n```\n\n----------------------------------------\n\nTITLE: UInt32Array Constants and Creation in ReScript\nDESCRIPTION: Constant for bytes per element and functions for creating Uint32Array instances.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_8\n\nLANGUAGE: ReScript\nCODE:\n```\nlet _BYTES_PER_ELEMENT: int\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet make: array<elt> => t\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet fromBuffer: Js_typed_array.array_buffer => t\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet fromBufferOffset: (Js_typed_array.array_buffer, int) => t\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet fromBufferRange: (Js_typed_array.array_buffer, ~offset: int, ~length: int) => t\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet fromLength: int => t\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet from: Js_typed_array.array_like<elt> => t\n```\n\n----------------------------------------\n\nTITLE: Importing WarningTable Component in JSX\nDESCRIPTION: Imports the WarningTable component from the specified path to display a table of ReScript compiler warnings.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/warning-numbers.mdx#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { make as WarningTable } from \"src/components/WarningTable.mjs\";\n```\n\n----------------------------------------\n\nTITLE: Getting Byte Length of Array\nDESCRIPTION: Returns the length of the array in bytes.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-64-array.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reason\nCODE:\n```\nlet byteLength: t => int;\n```\n\n----------------------------------------\n\nTITLE: Using @ignore Decorator in ReScript External Function Declaration\nDESCRIPTION: This snippet demonstrates how to use the @ignore decorator to hide a parameter of an external function on the JavaScript side. It allows adding more type context in ReScript without affecting the resulting JavaScript code.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/decorator_ignore.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\n@val external doSomething: (@ignore 'a, 'a) => unit = \"doSomething\"\n\ndoSomething(\"this only shows up in ReScript code\", \"test\")\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ndoSomething(\"test\");\n```\n\n----------------------------------------\n\nTITLE: Accessing Underlying Buffer in TypedArray in ReScript\nDESCRIPTION: Function signature for accessing the underlying ArrayBuffer of a Uint8ClampedArray.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\nlet buffer: t => Js_typed_array2.array_buffer\n```\n\n----------------------------------------\n\nTITLE: Converting Date to GMT String in ReScript\nDESCRIPTION: Deprecated function for converting a Date to GMT string. It's recommended to use toUTCString() instead.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_62\n\nLANGUAGE: ReScript\nCODE:\n```\nlet toGMTString: t => string\n```\n\n----------------------------------------\n\nTITLE: Installing ReScript with npx\nDESCRIPTION: Command to create a new ReScript project using npx to execute create-rescript-app without installing it globally.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/installation.mdx#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx create-rescript-app\n```\n\n----------------------------------------\n\nTITLE: Configuring Pinned Dependencies in ReScript's bsconfig.json\nDESCRIPTION: Example of a bsconfig.json file that specifies pinned dependencies to enable rebuilding local packages when the main app is built.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/build-pinned-dependencies.mdx#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"app\",\n  \"version\": \"1.0.0\",\n  \"sources\": {\n    \"dir\" : \"src\",\n    \"subdirs\" : true\n  },\n  /* ... */\n  \"bs-dependencies\": [\n    \"common\",\n    \"myplugin\"\n  ],\n  \"pinned-dependencies\": [\"common\", \"myplugin\"],\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MakeComparable Module Generator in ReScript\nDESCRIPTION: Module functor for creating curried comparable modules with custom comparison functions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/id.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nmodule MakeComparable: (M: {\n  type t\n  let cmp: (t, t) => int\n}) => Comparable with type t = M.t\n```\n\n----------------------------------------\n\nTITLE: Signature of everyByU function in Belt.Range\nDESCRIPTION: Type signature for the uncurried version of everyBy function that checks if a predicate is true for all elements in a range with a step parameter.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/range.mdx#2025-04-18_snippet_6\n\nLANGUAGE: reason\nCODE:\n```\nlet everyByU: (int, int, ~step: int, [@bs] (int => bool)) => bool;\n```\n\n----------------------------------------\n\nTITLE: Installing ReScript with npm\nDESCRIPTION: Command to install ReScript and ReScript Core using npm package manager.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/installation.mdx#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install rescript @rescript/core\n```\n\n----------------------------------------\n\nTITLE: Copying a HashSet in ReScript\nDESCRIPTION: This function signature shows how to create a copy of a HashSet.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-set.mdx#2025-04-18_snippet_8\n\nLANGUAGE: reason\nCODE:\n```\nlet copy: t('a, 'id) => t('a, 'id);\n```\n\n----------------------------------------\n\nTITLE: Getting Element with Option Return in ReScript MutableSet\nDESCRIPTION: Retrieves a reference to a value in the collection that matches the provided value using the set's comparator. Returns None if the element doesn't exist.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_12\n\nLANGUAGE: res\nCODE:\n```\nlet get: (t, value) => option<value>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet s0 = Belt.MutableSet.String.fromArray([\"apple\", \"carrot\"])\n\ns0->Belt.MutableSet.String.get(\"carrot\") /* Some(\"carrot\") */\ns0->Belt.MutableSet.String.get(\"watermelon\") /* None */\n```\n\n----------------------------------------\n\nTITLE: Creating JSON Array Value in ReScript\nDESCRIPTION: Function signature for creating a JSON array value from a ReScript array of JSON values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/json.mdx#2025-04-18_snippet_16\n\nLANGUAGE: reason\nCODE:\n```\nlet array: array(t) => t;\n```\n\n----------------------------------------\n\nTITLE: Creating Blog Post File Path Structure\nDESCRIPTION: Demonstrates the file naming convention for blog posts in the _blogposts directory, using a date-based prefix for natural sorting.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/blogpost-guide.mdx#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n_blogposts/YYYY-MM-DD-[title].mdx\n```\n\n----------------------------------------\n\nTITLE: Creating a new mutable map in ReScript\nDESCRIPTION: Creates and returns a new empty mutable map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reasonml\nCODE:\n```\nlet make: unit => t('a);\n```\n\n----------------------------------------\n\nTITLE: Accessing sessionStorage in ReScript\nDESCRIPTION: External binding for accessing the global sessionStorage object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/dom/storage.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\n@val external sessionStorage: t = \"sessionStorage\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Curried Mode in bsconfig.json\nDESCRIPTION: Demonstrates how to switch back to curried mode by adding a configuration option in bsconfig.json.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2023-09-18-uncurried-mode.mdx#2025-04-18_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"uncurried\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating Error Due to Changed Function Signature in Curried Mode\nDESCRIPTION: Demonstrates how changing a function signature can lead to errors at the use site in curried mode.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2023-09-18-uncurried-mode.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\n@react.component\nlet make = (~onChange: (~a: int, string) => option<unit => unit>) => {\n  React.useEffect(() => {\n    // As partial application is allowed, there is no error here.\n    let cleanup = onChange(\"change\") \n    \n    // Here it errors with \"This call is missing an argument of type (~a: int)\"\n    cleanup \n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Return Function Signature in ReScript\nDESCRIPTION: Function signature for constructing a Js.null_undefined value containing a value of type 'a.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/null-undefined.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet return: 'a => t<'a>\n```\n\n----------------------------------------\n\nTITLE: Visualizing ReScript Compiler Pipeline Flow\nDESCRIPTION: A text-based visualization of ReScript's compilation pipeline, showing the transformation stages from Source Language through various intermediate representations to final JavaScript code. It illustrates the reuse of OCaml components and the custom optimization passes applied at different stages.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/reason-compiler/latest/compiler-architecture-principles.mdx#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nSource Language\n  |\n  | (Reuse OCaml Parser)\n  v\nSurface Syntax Tree\n  |\n  | (built-in Syntax tree transformation)\n  v\nSurface Syntax Tree\n  |\n  | (Reuse OCaml Type checker)\n  v\nTypedtree\n  |\n  | (Reuse OCaml pattern match compiler and erase types)\n  | (Patches to pass more information down to Lambda )\n  |\nOCaml Lambda IR\n  |\n  |\n  v\nBuckle Lambda IR ------------------+\n  |   ^                            |\n  |   |                     6 Lambda Passes (lam_* files)\n  |   |             Optimization/inlining/dead code elimination\n  |   \\                            |\n  |    \\ --------------------------+\n  |\n  |  Self tail call elimination\n  |  Constant folding + propagation\n  V\nJS IR (J.ml)  ---------------------+\n  |   ^                            |\n  |   |                     6 JS Passes (js_* files)\n  |   |            Optimization/inlining/dead code elimination\n  |   \\                            |\n  |    \\  -------------------------+\n  |\n  |  Smart printer includes scope analysis\n  |\n  V\nJavascript Code\n```\n\n----------------------------------------\n\nTITLE: Installing ReScript and External Stdlib Packages\nDESCRIPTION: Shell commands for installing the ReScript compiler and the external stdlib package. This ensures the correct versions are installed for development and runtime dependencies.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/build-external-stdlib.mdx#2025-04-18_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install rescript@11.0.1 --save-dev\nnpm install @rescript/std@11.0.1\n```\n\n----------------------------------------\n\nTITLE: Configuring ReScript for JS Compatibility in rescript.json\nDESCRIPTION: This configuration generates JavaScript files alongside ReScript source files using CommonJS module format with a .res.js suffix for seamless integration with existing JavaScript projects.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/interop-with-js-build-systems.mdx#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"package-specs\": {\n    \"module\": \"commonjs\", // or whatever module system your project uses\n    \"in-source\": true\n  },\n  \"suffix\": \".res.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Logging API Implementation\nDESCRIPTION: Example of a JavaScript logger that handles different data types, demonstrating the need for polymorphic types when binding to such APIs in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/scoped-polymorphic-types.mdx#2025-04-18_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst logger = {\n  log: (data) => {\n    if (typeof data === \"string\") {\n      /* handle string */\n    } else if (typeof data === \"number\") {\n      /* handle number */\n    } else {\n      /* handle other types */\n    }\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing and modifying Int8Array elements in ReScript\nDESCRIPTION: Provides unsafe getter and setter functions for Int8Array elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet unsafe_get: (t, int) => elt\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet unsafe_set: (t, int, elt) => unit\n```\n\n----------------------------------------\n\nTITLE: Copying a Belt.MutableSet.Int in ReScript\nDESCRIPTION: Creates and returns a copy of an existing set using the copy function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nlet copy: t => t\n```\n\nLANGUAGE: res\nCODE:\n```\nlet s0 = Belt.MutableSet.Int.fromArray([1, 3, 2, 4])\n\nlet copied = s0->Belt.MutableSet.Int.copy\ncopied->Belt.MutableSet.Int.toArray /* [1, 2, 3, 4] */\n```\n\n----------------------------------------\n\nTITLE: Mapping TypedArray Elements with Index in ReScript\nDESCRIPTION: Function signature for creating a new typed array populated with the results of calling a provided function that receives both the element and its index on every element in the calling array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_43\n\nLANGUAGE: res\nCODE:\n```\nlet mapi: ((. elt, int) => 'b, t) => typed_array<'b>\n```\n\n----------------------------------------\n\nTITLE: Global CSS Import in ReScript\nDESCRIPTION: Shows how to import global CSS files using raw expressions in both module and CommonJS setups.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/styling.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\n%%raw(\"import './styles/main.css'\")\n\n// or with CommonJS\n%%raw(\"require('./styles/main.css')\")\n```\n\n----------------------------------------\n\nTITLE: Getting Value with Exception from MutableSet in ReScript\nDESCRIPTION: Retrieves a value from the MutableSet, raising an exception when the element doesn't exist.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_41\n\nLANGUAGE: reasonml\nCODE:\n```\nlet getExn: (t, value) => value;\n```\n\n----------------------------------------\n\nTITLE: Checking Internal Invariant - ReScript\nDESCRIPTION: Validates the internal invariant of the set structure. Raises an exception if the invariant is not maintained.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_15\n\nLANGUAGE: res\nCODE:\n```\nlet checkInvariantInternal: t => unit\n```\n\n----------------------------------------\n\nTITLE: Defining MakeHashableU Module Generator in ReScript\nDESCRIPTION: Module functor for creating uncurried hashable modules with custom hash and equality functions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/id.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rescript\nCODE:\n```\nmodule MakeHashableU: (M: {\n  type t\n  let hash: (. t) => int\n  let eq: (. t, t) => bool\n}) => Hashable with type t = M.t\n```\n\n----------------------------------------\n\nTITLE: ReScript Build Configuration for JS Integration\nDESCRIPTION: Configuration for bsconfig.json to generate JavaScript files alongside ReScript source files with a .bs.js extension, enabling seamless integration with common module systems.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/interop-with-js-build-systems.mdx#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"package-specs\": {\n    \"module\": \"commonjs\",\n    \"in-source\": true\n  },\n  \"suffix\": \".bs.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Building Index Data for Documentation\nDESCRIPTION: Command to build the search index data for the ReScript documentation platform, needed for searching features.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/README.md#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm run update-index\n```\n\n----------------------------------------\n\nTITLE: Converting Set to Array in ReScript MutableSetString\nDESCRIPTION: Returns an array containing all elements of the set in ascending order.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_34\n\nLANGUAGE: reason\nCODE:\n```\nlet toArray: t => array(value);\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet s0 = Belt.MutableSet.String.fromArray([|\"apple\", \"watermelon\"|]);\n\ns0->Belt.MutableSet.String.toArray; /* [|\"apple\", \"watermelon\"|] */\n```\n\n----------------------------------------\n\nTITLE: Array Access Operations\nDESCRIPTION: Basic array access operations including get, set and buffer management\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_int-16-array.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reason\nCODE:\n```\nlet unsafe_get: (t, int) => elt;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet unsafe_set: (t, int, elt) => unit;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet buffer: t => Js_typed_array2.array_buffer;\n```\n\n----------------------------------------\n\nTITLE: Filtering TypedArray Elements in ReScript\nDESCRIPTION: Function signature for creating a new Uint8ClampedArray with all elements that pass the test implemented by the provided function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_34\n\nLANGUAGE: res\nCODE:\n```\nlet filter: ((. elt) => bool, t) => t\n```\n\n----------------------------------------\n\nTITLE: Running Markdown Hyperlink Tests\nDESCRIPTION: Commands to verify markdown hyperlinks to relative resources in the documentation, ensuring all internal links are valid.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/README.md#2025-04-18_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n# Tests all files\nnode scripts/test-hrefs.mjs\n\n# Or just a subset (glob pattern)\nnode scripts/test-hrefs.mjs \"pages/docs/manual/**/*.mdx\"\n```\n\n----------------------------------------\n\nTITLE: Testing String Against RegExp (Deprecated)\nDESCRIPTION: Deprecated function for testing a string against a RegExp pattern. Users are advised to use Js.Re.test_ instead.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/re.mdx#2025-04-18_snippet_20\n\nLANGUAGE: reason\nCODE:\n```\nlet test: (string, t) => bool;\n```\n\n----------------------------------------\n\nTITLE: Running Markdown Codeblock Tests\nDESCRIPTION: Command to test the validity of code examples in the documentation marked with specific tags for ReScript code, signatures, and preludes.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/README.md#2025-04-18_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnode scripts/test-examples.mjs\n```\n\n----------------------------------------\n\nTITLE: Logging HashSetString statistics\nDESCRIPTION: Outputs statistics about the HashSetString to the console for debugging purposes.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/hash-set-string.mdx#2025-04-18_snippet_14\n\nLANGUAGE: res\nCODE:\n```\nlet logStats: t => unit\n```\n\n----------------------------------------\n\nTITLE: Using @set_index Decorator in ReScript with Object Properties\nDESCRIPTION: This example demonstrates how to use the @set_index decorator to dynamically set and retrieve properties on a JavaScript object. It creates a new Object instance, sets various properties with numeric values, and retrieves them.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/decorator_set_index.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype t\n\n@new external create: unit => t = \"Object\"\n@set_index external set: (t, string, int) => unit = \"\"\n@get_index external get: (t, string) => int = \"\"\n\nlet o = create()\no->set(\"x\", 1)\no->set(\"y\", 3)\no->set(\"z\", 5)\n\nlet value = o->get(\"y\")\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar o = new Object();\n\no[\"x\"] = 1;\no[\"y\"] = 3;\no[\"z\"] = 5;\n\nvar value = o[\"y\"];\n```\n\n----------------------------------------\n\nTITLE: Defining Float64Array Types in ReScript\nDESCRIPTION: Defines the core types for Float64Array bindings in ReScript, including the element type, typed array type, and the main array type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-64-array.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype elt = float\ntype typed_array<'a> = Js_typed_array2.Float64Array.typed_array<'a>\ntype t = typed_array<elt>\n```\n\n----------------------------------------\n\nTITLE: Creating MutableSetInt from array\nDESCRIPTION: Creates a new set from an array of integer elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromArray: array<value> => t\n```\n\n----------------------------------------\n\nTITLE: Using polymorphic variants with @unwrap for JavaScript interop\nDESCRIPTION: Shows how to use polymorphic variants with the @unwrap annotation to model JavaScript functions that accept different types of arguments, providing better type safety.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/bind-to-js-function.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\n@val\nexternal padLeft: (\n  string,\n  @unwrap [\n    | #Str(string)\n    | #Int(int)\n  ])\n  => string = \"padLeft\"\npadLeft(\"Hello World\", #Int(4))\npadLeft(\"Hello World\", #Str(\"Message from ReScript: \"))\n```\n\nLANGUAGE: javascript\nCODE:\n```\npadLeft(\"Hello World\", 4);\npadLeft(\"Hello World\", \"Message from ReScript: \");\n```\n\n----------------------------------------\n\nTITLE: Defining key type for HashSetInt in ReScript\nDESCRIPTION: Specifies the key type for HashSetInt as integer.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-set-int.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\ntype key = int;\n```\n\n----------------------------------------\n\nTITLE: Reversing TypedArray in Place in ReScript\nDESCRIPTION: Function signature for reversing the elements of a Uint8ClampedArray in place.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_15\n\nLANGUAGE: res\nCODE:\n```\nlet reverseInPlace: t => t\n```\n\n----------------------------------------\n\nTITLE: Checking if HashSetInt is empty in ReScript\nDESCRIPTION: Returns a boolean indicating whether the HashSetInt is empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-set-int.mdx#2025-04-18_snippet_4\n\nLANGUAGE: ReScript\nCODE:\n```\nlet isEmpty: t => bool;\n```\n\n----------------------------------------\n\nTITLE: Using React.createElementVariadic in ReScript\nDESCRIPTION: Shows how to use React.createElementVariadic to create elements with variadic children in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/elements-and-jsx.mdx#2025-04-18_snippet_6\n\nLANGUAGE: ReScript\nCODE:\n```\ntype props = {\"title\": string, \"children\": React.element};\n\nlet render = (article: props => React.element) => {\n  let children = [React.string(\"Introduction\"), React.string(\"Body\")];\n\n  let props = {\"title\": \"Article #1\", \"children\": React.null};\n\n  {React.createElementVariadic(article, props, children)}\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction render(article) {\n  var children = [\"Introduction\"];\n  var props = {\n    title: \"Article #1\",\n    children: null\n  };\n  return Caml_splice_call.spliceApply(React.createElement, [\n              article,\n              props,\n              children\n            ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying ReScript Logo in Markdown and HTML\nDESCRIPTION: This snippet shows how to display the ReScript logo using Markdown and HTML. It includes an image tag with specific styling classes and a source link to the logo file.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/brand.mdx#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<img className=\"h-24 w-24 mt-10\" src=\"/static/brand/rescript-brandmark.svg\" />\n```\n\n----------------------------------------\n\nTITLE: Writing a Float32 value to a DataView in ReScript\nDESCRIPTION: Function signature for storing a 32-bit floating point number at the specified byte offset with big-endian format.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_data-view.mdx#2025-04-18_snippet_32\n\nLANGUAGE: rescript\nCODE:\n```\nlet setFloat32: (t, int, float) => unit\n```\n\n----------------------------------------\n\nTITLE: Mapping key-value pairs with uncurried function in MapString module (ReScript)\nDESCRIPTION: Uncurried function to transform all values in a map using both the key and value, returning a new map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-string.mdx#2025-04-18_snippet_53\n\nLANGUAGE: reason\nCODE:\n```\nlet mapWithKeyU: (t('v), [@bs] ((key, 'v) => 'v2)) => t('v2);\n```\n\n----------------------------------------\n\nTITLE: Setting Year with setYear in ReScript (Deprecated)\nDESCRIPTION: A deprecated method for setting a Date's year. Use setFullYear() instead. Binds to JavaScript's deprecated Date.setYear method.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_66\n\nLANGUAGE: res\nCODE:\n```\nlet setYear: (t, float) => float\n```\n\n----------------------------------------\n\nTITLE: Using @as Decorator for JavaScript Attribute Aliasing in ReScript\nDESCRIPTION: This example demonstrates how to use the @as decorator to alias a ReScript record field to a JavaScript keyword. The 'type_' field is mapped to 'type' in the JavaScript output.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/decorator_as.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype action = {\n  @as(\"type\") type_: string\n}\n\nlet action = {type_: \"ADD_USER\"}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar action = {\n  type: \"ADD_USER\"\n};\n```\n\n----------------------------------------\n\nTITLE: Forwarding Optional Arguments in ReScript (Naive Approach)\nDESCRIPTION: Shows a verbose way to forward an optional value to a function by manually handling the None and Some cases with a switch statement.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/function.mdx#2025-04-18_snippet_11\n\nLANGUAGE: rescript\nCODE:\n```\nlet result =\n  switch payloadRadius {\n  | None => drawCircle(~color, ())\n  | Some(r) => drawCircle(~color, ~radius=r, ())\n  }\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar r = payloadRadius;\n\nvar result = r !== undefined\n  ? drawCircle(color, Caml_option.valFromOption(r), undefined)\n  : drawCircle(color, undefined);\n```\n\n----------------------------------------\n\nTITLE: Module Resolution Settings for Bundler\nDESCRIPTION: Configuration for projects using bundler moduleResolution, including the allowImportingTsExtensions option.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/typescript-integration.mdx#2025-04-18_snippet_8\n\nLANGUAGE: JSON\nCODE:\n```\n// tsconfig.json\n{\n  \"compilerOptions\": {\n    \"moduleResolution\": \"bundler\",\n    \"allowImportingTsExtensions\": true\n  }\n}\n```\n\nLANGUAGE: JSON\nCODE:\n```\n// rescript.json\n{\n  \"gentypeconfig\": {\n    \"moduleResolution\": \"bundler\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Array Sort Check Function Signatures\nDESCRIPTION: Function signatures for checking if an array is sorted, with both uncurried and curried versions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/sort-array.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet isSortedU: (array<'a>, (. 'a, 'a) => int) => bool\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet isSorted: (array<'a>, ('a, 'a) => int) => bool\n```\n\n----------------------------------------\n\nTITLE: Migrating makeProps Pattern from JSX v3 to v4\nDESCRIPTION: Example of how to migrate from using makeProps in JSX v3 to the record-based representation in v4.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/migrate-react.mdx#2025-04-18_snippet_6\n\nLANGUAGE: res\nCODE:\n```\n// V3\nmodule M = {\n  @obj external makeProps: (~msg: 'msg, ~key: string=?, unit) => {\"msg\": 'msg} = \"\"\n\n  let make = (~msg) => <div> {React.string(msg)} </div>\n}\n```\n\nLANGUAGE: res\nCODE:\n```\n// V4\nmodule M = {\n  type props<'msg> = {msg: 'msg}\n  let make = props => <div> {React.string(props.msg)} </div>\n}\n```\n\n----------------------------------------\n\nTITLE: Converting map to array in MapString module (ReScript)\nDESCRIPTION: Function to convert a map to an array of key-value pairs.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-string.mdx#2025-04-18_snippet_21\n\nLANGUAGE: reason\nCODE:\n```\nlet toArray: t('v) => array((key, 'v));\n```\n\n----------------------------------------\n\nTITLE: Multiple Spreads Not Allowed in ReScript JSX\nDESCRIPTION: Demonstrates that multiple spread operators are not allowed in ReScript JSX, unlike in JavaScript JSX.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/jsx.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\n<NotAllowed {...props1} {...props2} />\n```\n\n----------------------------------------\n\nTITLE: Installing ReScript with External Stdlib\nDESCRIPTION: Commands for installing both the ReScript compiler as a devDependency and the standalone stdlib as a regular dependency, ensuring the versions match.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/build-external-stdlib.mdx#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install rescript@11.0.1 --save-dev\nnpm install @rescript/std@11.0.1\n```\n\n----------------------------------------\n\nTITLE: Installing ReScript globally with NPM\nDESCRIPTION: Command to install the ReScript platform globally on your system using NPM. This makes the ReScript compiler and tools available system-wide.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/installation.mdx#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -g bs-platform\n```\n\n----------------------------------------\n\nTITLE: Creating Copy of Array\nDESCRIPTION: Function signature to create a new Int8Array with the same elements as the original array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_26\n\nLANGUAGE: res\nCODE:\n```\nlet copy: t => t\n```\n\n----------------------------------------\n\nTITLE: Array Modification Operations\nDESCRIPTION: Functions for modifying array contents including copying, filling, reversing and sorting\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_float-64-array.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet copyWithin: (~to_: int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fillInPlace: (elt, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet reverseInPlace: t => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet sortInPlace: t => t\n```\n\n----------------------------------------\n\nTITLE: Locating ReScript Build System Path\nDESCRIPTION: Command to find the installation path of the ReScript build system (bsb) on your system. This is useful for accessing the lower-level bsb.exe directly.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/build-performance.mdx#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n> bsb -where\n/usr/local/lib/node_modules/bs-platform/lib\n```\n\n----------------------------------------\n\nTITLE: Creating the difference between sets in ReScript\nDESCRIPTION: Returns a new set containing elements from the first set that don't exist in the second set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-int.mdx#2025-04-18_snippet_13\n\nLANGUAGE: reason\nCODE:\n```\nlet diff: (t, t) => t;\n```\n\n----------------------------------------\n\nTITLE: Updating External Bindings in Reason to Fix BuckleScript v7 Warnings\nDESCRIPTION: Example showing how to fix the warning about inferred external names by explicitly specifying the name in external bindings that previously ended with an empty string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/reason-compiler/latest/upgrade-to-v7.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\n/* Before (warning) */\n[@bs.module \"valid-url\"]\nexternal isWebUri: string => option(string) = \"\";\n\n/* After (fixed the warning) */\n[@bs.module \"valid-url\"]\nexternal isWebUri: string => option(string) = \"isWebUri\";\n```\n\n----------------------------------------\n\nTITLE: Keeping Elements (Curried) in ReScript MapInt Module\nDESCRIPTION: Function signature for keeping elements that satisfy a curried predicate.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-int.mdx#2025-04-18_snippet_47\n\nLANGUAGE: rescript\nCODE:\n```\nlet keep: (t<'v>, (key, 'v) => bool) => t<'v>\n```\n\n----------------------------------------\n\nTITLE: Converting Array to Localized String with toLocaleString in ReScript\nDESCRIPTION: Function signature for toLocaleString that returns a localized string representing the elements of the Uint8Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_31\n\nLANGUAGE: rescript\nCODE:\n```\nlet toLocaleString: t => string\n```\n\n----------------------------------------\n\nTITLE: Checking Any Element in ReScript MutableSetString\nDESCRIPTION: Tests whether any element satisfies a predicate function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_27\n\nLANGUAGE: reason\nCODE:\n```\nlet some: (t, value => bool) => bool;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet hasFiveChars = x => String.length(x) == 5;\n\nlet s0 = Belt.MutableSet.String.fromArray([|\"strawberry\", \"apple\"|]);\ns0->Belt.MutableSet.String.some(hasFiveChars); /* true */\n```\n\n----------------------------------------\n\nTITLE: CopyWithinFrom Operation\nDESCRIPTION: Copies a sequence of elements from a source position to a target position within the typed array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_type-s.mdx#2025-04-18_snippet_10\n\nLANGUAGE: res\nCODE:\n```\nlet copyWithinFrom: (~to_: int, ~from: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Defining key type as string in HashSetString\nDESCRIPTION: Defines the key type for the HashSetString module as string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-set-string.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype key = string;\n```\n\n----------------------------------------\n\nTITLE: Setting Seconds and Milliseconds in ReScript\nDESCRIPTION: Sets a Date's seconds and milliseconds according to current time zone. Returns milliseconds since epoch for the updated Date. Modifies the original Date.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_53\n\nLANGUAGE: rescript\nCODE:\n```\nlet setSecondsMs: (t, ~seconds: float, ~milliseconds: float, unit) => float\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet futureTime = Js.Date.setSecondsMs(date1, ~seconds=56.0, ~milliseconds=789.0, ())\ndate1 == Js.Date.fromString(\"1973-12-29T21:30:56.789Z00:00\")\nfutureTime == Js.Date.getTime(date1)\n```\n\n----------------------------------------\n\nTITLE: Nested Records Within Objects in ReScript 9.0\nDESCRIPTION: Illustrates the breaking change in handling nested records within objects in ReScript 9.0.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2021-02-09-release-9-0.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\ntype user = {\n  age: int\n}\n\nlet data = {\n  \"user\": {\n    age: 1\n  }\n}\n\n// This is the way: `age` should be usable via record accessor\nlet age = data[\"user\"].age\n```\n\nLANGUAGE: rescript\nCODE:\n```\ntype user = {\n  age: int\n}\n\nlet data = {\n  \"user\": {\n    age: 1\n  }\n}\n\n// This was the problem: The record implicitly turned\n// into a ReScript object (which is confusing)\nlet age = data[\"user\"][\"age\"]\n```\n\n----------------------------------------\n\nTITLE: Is Sorted Check Signature\nDESCRIPTION: Function signature for checking if a string array is sorted in non-strict increasing order.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/sort-array-string.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nlet isSorted: array<element> => bool\n```\n\n----------------------------------------\n\nTITLE: HashSet Clear Operation\nDESCRIPTION: Removes all elements from the HashSet.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-set-string.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet clear: t => unit\n```\n\n----------------------------------------\n\nTITLE: JavaScript Conditional Compilation Example\nDESCRIPTION: Example of JavaScript code that uses environment variables for conditional compilation, which can be optimized by bundlers like Webpack.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/inlining-constants.mdx#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif (process.env.mode === 'development') {\n  console.log(\"Dev-only code here!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Defining comparable type in ReScript\nDESCRIPTION: Defines a type alias for a module that implements the Comparable interface. It uses generic parameters for the key type and identifier.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/id.mdx#2025-04-18_snippet_4\n\nLANGUAGE: ReScript\nCODE:\n```\ntype comparable<'key,'id> =\n  module(Belt.Id.Comparable with type identity = 'id and type t = 'key)\n```\n\n----------------------------------------\n\nTITLE: Referencing Test Examples Script Path in Markdown\nDESCRIPTION: References the path to the script that automatically installs ReScript compiler dependencies when needed for testing examples across multiple compiler versions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/compilers/README.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nscripts/test-examples.mjs\n```\n\n----------------------------------------\n\nTITLE: Nullable and Undefined Types in ReScript\nDESCRIPTION: Defines types and utility functions for handling null, undefined, and nullable values in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\ntype null(+'a);\ntype undefined(+'a);\ntype nullable(+'a);\ntype null_undefined('a) = Js.nullable('a);\n\nlet toOption: Js.nullable('a) => option('a);\nlet undefinedToOption: Js.undefined('a) => option('a);\nlet nullToOption: Js.null('a) => option('a);\nlet test: Js.nullable('a) => bool;\nlet isNullable: Js.nullable('a) => bool;\nlet testAny: 'a => bool;\n```\n\n----------------------------------------\n\nTITLE: Accessing Array Elements with unsafe_get\nDESCRIPTION: Retrieves an element at the specified index without bounds checking.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-64-array.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reason\nCODE:\n```\nlet unsafe_get: (t, int) => elt;\n```\n\n----------------------------------------\n\nTITLE: Raising TypeError exception in ReScript\nDESCRIPTION: Function signature for raising a JavaScript TypeError exception with a custom message.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/exn.mdx#2025-04-18_snippet_13\n\nLANGUAGE: rescript\nCODE:\n```\nlet raiseTypeError: string => 'a\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Improved Type Inference for Object Destructuring in ReScript\nDESCRIPTION: Example showing improved type inference for object destructuring in ReScript, Reason, and OCaml syntax.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2020-09-25-release-8-3.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nmodule N = {\n  type t = {x: int}\n}\n\nlet f = (u: N.t) => {\n  let {x} = u\n  x + 1\n}\n```\n\nLANGUAGE: reason\nCODE:\n```\nmodule N = {\n  type t = {x: int};\n};\n\nlet f = (u: N.t) => {\n  let {x} = u;\n  x + 1;\n};\n```\n\nLANGUAGE: ocaml\nCODE:\n```\nmodule N = struct\n    type t = {\n        x : int\n    }\nend\n\nlet f (u : N.t) =\n    let {x } = u in x + 1\n```\n\n----------------------------------------\n\nTITLE: Int8Array Array Creation Methods\nDESCRIPTION: Factory methods for creating new Int8Arrays\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_int-8-array.mdx#2025-04-18_snippet_5\n\nLANGUAGE: reasonml\nCODE:\n```\nlet make: array(elt) => t;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet fromBuffer: Js_typed_array2.array_buffer => t;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet fromBufferOffset: (Js_typed_array2.array_buffer, int) => t;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet fromBufferRange: (Js_typed_array2.array_buffer, ~offset: int, ~length: int) => t;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet fromLength: int => t;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet from: Js_typed_array2.array_like(elt) => t;\n```\n\n----------------------------------------\n\nTITLE: Create Float64Array with Length\nDESCRIPTION: Creates a new Float64Array with the specified length. May raise a JavaScript exception.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-64-array.mdx#2025-04-18_snippet_55\n\nLANGUAGE: reason\nCODE:\n```\nlet fromLength: int => t;\n```\n\n----------------------------------------\n\nTITLE: Using minMany_int function to find minimum in array of integers in ReScript\nDESCRIPTION: The minMany_int function returns the minimum of the integers in the given array. It takes an array of integers as input and returns an integer.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/math.mdx#2025-04-18_snippet_19\n\nLANGUAGE: res\nCODE:\n```\nlet minMany_int: array<int> => int\n```\n\n----------------------------------------\n\nTITLE: Defining key type in ReScript MutableMapString\nDESCRIPTION: Defines the type of keys used in the MutableMapString module, which are strings.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reasonml\nCODE:\n```\ntype key = string;\n```\n\n----------------------------------------\n\nTITLE: Curried comparison of MapDict instances\nDESCRIPTION: Function signature for comparing two maps using curried functions for key and value comparison.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_6\n\nLANGUAGE: reason\nCODE:\n```\nlet cmp: (t('k, 'v, 'id), t('k, 'v, 'id), ~kcmp: cmp('k, 'id), ~vcmp: ('v, 'v) => int) => int;\n```\n\n----------------------------------------\n\nTITLE: Using Placeholder for Specifying Argument Position in Pipe Syntax (ReScript)\nDESCRIPTION: Shows how the placeholder (_) can be used to specify the position of an argument when using the pipe operator. Here it indicates where the piped value \"John\" should be inserted in the greet function call.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/language_placeholder.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\nlet greet = (greeting, name) => greeting ++ \" \" ++ name\n\n// Pipe the value \"John\" into the second argument of the greet() function.\nlet greetJohn = \"John\"->greet(\"Hello\", _)\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction greet(greeting, name) {\n  return greeting + \" \" + name;\n}\n\nvar greetJohn = \"Hello John\";\n```\n\n----------------------------------------\n\nTITLE: Using External Bindings Without Pipe in ReScript\nDESCRIPTION: Shows how to use the externally bound JavaScript methods without the pipe operator. This approach results in nested function calls that mirror JavaScript's method chaining but are less readable.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/pipe.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet result = Js.Array2.filter(\n  Js.Array2.map([1, 2, 3], a => a + 1),\n  a => mod(a, 2) == 0\n)\n\nsend(setWaitDuration(asyncRequest(), 4000))\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = [1, 2, 3].map(function(a) {\n  return a + 1 | 0;\n}).filter(function(a) {\n  return a % 2 === 0;\n});\n\nasyncRequest().setWaitDuration(4000).send();\n```\n\n----------------------------------------\n\nTITLE: Checking Equality of MutableSets in ReasonML\nDESCRIPTION: Function signature for checking if two MutableSets contain the same elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_32\n\nLANGUAGE: reasonml\nCODE:\n```\nlet eq: (t('value, 'id), t('value, 'id)) => bool;\n```\n\n----------------------------------------\n\nTITLE: Installing ReScript Packages for External Stdlib Usage\nDESCRIPTION: Commands for installing bs-platform as a dev dependency and @rescript/std as a runtime dependency, ensuring both are at the same version number to avoid runtime issues.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/build-external-stdlib.mdx#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install bs-platform@9.0.0 --save-dev\nnpm install @rescript/std@9.0.0 --save\n```\n\n----------------------------------------\n\nTITLE: Defining Int Set Type\nDESCRIPTION: Defines the abstract type for integer sets.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set-int.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\ntype t\n```\n\n----------------------------------------\n\nTITLE: Adding ReScript Keyword to Package.json\nDESCRIPTION: Add the 'rescript' keyword to the package.json file to improve discoverability of ReScript libraries.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/project-structure.mdx#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"keywords\": [\"rescript\"]\n```\n\n----------------------------------------\n\nTITLE: Getting Set Size in ReasonML\nDESCRIPTION: Shows how to get the number of elements in a set using the size function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set.mdx#2025-04-18_snippet_31\n\nLANGUAGE: reasonml\nCODE:\n```\nlet size: t('value, 'id) => int;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet s0 = Belt.Set.fromArray([|1,2,3,4|], ~id=(module IntCmp));\n\ns0->Belt.Set.size; /* 4 */\n```\n\n----------------------------------------\n\nTITLE: Signature for map Function in ReScript Result Module\nDESCRIPTION: Function signature for map, which applies a function to the Ok value of a Result, leaving Error unchanged.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/result.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet map: (t<'a, 'c>, 'a => 'b) => t<'b, 'c>\n```\n\n----------------------------------------\n\nTITLE: JSON Array Decoding Function in ReScript\nDESCRIPTION: Function signature for attempting to decode a JSON value as an array. Returns None if the JSON value is not an array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/json.mdx#2025-04-18_snippet_8\n\nLANGUAGE: reason\nCODE:\n```\nlet decodeArray: t => option(array(t));\n```\n\n----------------------------------------\n\nTITLE: Applying @@deprecated Decorator in ReScript\nDESCRIPTION: Examples showing how to use the @@deprecated decorator to mark an entire module as deprecated, with and without a custom message. The compiler and editor tooling will display warnings when deprecated modules are used.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/decorator_module_deprecated.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\n// Indicate whole module is deprecated\n@@deprecated\n\n// Indicate whole module is deprecated, with a comment\n@@deprecated(\"Use OtherModule instead\")\n```\n\n----------------------------------------\n\nTITLE: Setting Int16Array Values from Arrays in ReScript\nDESCRIPTION: Functions to set Int16Array values from regular arrays, with optional offset.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_int-16-array.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet setArray: (array(elt), t) => unit;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet setArrayOffset: (array(elt), int, t) => unit;\n```\n\n----------------------------------------\n\nTITLE: Using Shared Props with ReScript React Native Navigation\nDESCRIPTION: Demonstrates how to use shared props to ensure type consistency when passing components to the Screen component in ReScript React Native Navigation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/extensions-of-props.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\ntype screenProps = { navigation: navigation, route: route }\n\nmodule Screen: {\n  @react.component\n  let make: (\n    ~name: string,\n    ~component: React.component<screenProps>,\n    ...\n  ) => React.element\n}\n\n<Screen\n  name=\"SomeScreen\"\n  component={A.make} // This will cause a type check error\n  ...\n/>\n<Screen\n  name=\"SomeScreen\"\n  component={B.make} // This will cause a type check error\n  ...\n/>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nmodule A = {\n  @react.component(:screenProps)\n  let make = (\n    ~navigation: navigation,\n    ~route: route\n  ) => ...\n}\n\nmodule B = {\n  @react.component(:screenProps)\n  let make = (\n    ~navigation: navigation,\n    ~route: route\n  ) => ...\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Potential Backward Compatibility Issue\nDESCRIPTION: A code example showing a potential backward compatibility issue when using conditional compilation at the beginning of a line after an expression, as #elif is interpreted as a static if statement.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/reason-compiler/latest/conditional-compilation.mdx#2025-04-18_snippet_5\n\nLANGUAGE: ocaml\nCODE:\n```\nlet f x =\n  x\n#elif //\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation Syntax in OCaml\nDESCRIPTION: Formal syntax definition for conditional compilation in OCaml, showing the structure of static-if expressions, conditional expressions, atom predicates, operators, and atoms.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/reason-compiler/latest/conditional-compilation.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ocaml\nCODE:\n```\nstatic-if\n| HASH-IF-BOL conditional-expression THEN //\n   tokens\n(HASH-ELIF-BOL conditional-expression THEN) *\n(ELSE-BOL tokens)?\nHASH-END-BOL\n\nconditional-expression\n| conditional-expression && conditional-expression\n| conditional-expression || conditional-expression\n| atom-predicate\n\natom-predicate\n| atom operator atom\n| defined UIDENT\n| undefined UIDENT\n\noperator\n| (= | < | > | <= | >= | =~ )\n\natom\n| UIDENT | INT | STRING | FLOAT\n```\n\n----------------------------------------\n\nTITLE: Defining Key Type in ReScript MapInt Module\nDESCRIPTION: Defines the key type for the MapInt module as an integer.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-int.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype key = int\n```\n\n----------------------------------------\n\nTITLE: Test Function Signature for Null Check\nDESCRIPTION: Function signature for testing if a nullable value is null.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/null.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet test: t<'a> => bool\n```\n\n----------------------------------------\n\nTITLE: Checking Sort Order Function Signature\nDESCRIPTION: Function signature for checking if an array is sorted in non-strict increasing order.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/sort-array-int.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet isSorted: array<element> => bool\n```\n\n----------------------------------------\n\nTITLE: Finding the minimum element in ReScript with MutableSetInt\nDESCRIPTION: Returns the minimum value in the set wrapped in an option. Returns None if the set is empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_35\n\nLANGUAGE: rescript\nCODE:\n```\nlet minimum: t => option(value);\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet s0 = Belt.MutableSet.Int.make();\nlet s1 = Belt.MutableSet.Int.fromArray([|3,2,1,5|]);\n\ns0->Belt.MutableSet.Int.minimum; /* None */\ns1->Belt.MutableSet.Int.minimum; /* Some(1) */\n```\n\n----------------------------------------\n\nTITLE: Defining Promise error type in ReScript\nDESCRIPTION: Defines the error type used in promise rejections.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/promise.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reason\nCODE:\n```\ntype error;\n```\n\n----------------------------------------\n\nTITLE: HashSet Bucket Distribution - ReScript\nDESCRIPTION: Returns an array representing the distribution of elements across internal buckets.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-set-int.mdx#2025-04-18_snippet_18\n\nLANGUAGE: rescript\nCODE:\n```\nlet getBucketHistogram: t => array<int>\n```\n\n----------------------------------------\n\nTITLE: Basic @dead Decorator Usage in ReScript\nDESCRIPTION: Example of using the @dead decorator in ReScript code to suppress dead code analysis reporting or force the analysis to consider a value as dead. This decorator requires the reanalyze tool to be installed.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/decorator_dead.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\n@dead\n```\n\n----------------------------------------\n\nTITLE: Unicode Code Point to String\nDESCRIPTION: Function signature for creating a string from a Unicode code point.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/string-2.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nlet fromCodePoint: int => t\n```\n\n----------------------------------------\n\nTITLE: Deprecated Undefined to Option Conversion in ReScript\nDESCRIPTION: Deprecated function for converting Js.undefined('a) to option('a).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/undefined.mdx#2025-04-18_snippet_12\n\nLANGUAGE: reasonml\nCODE:\n```\nlet to_opt: t('a) => option('a);\n```\n\n----------------------------------------\n\nTITLE: Reducing Array from Right\nDESCRIPTION: Applies a function against an accumulator and each element from right to left to reduce to a single value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_46\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduceRight: ((. 'b, elt) => 'b, 'b, t) => 'b\n```\n\n----------------------------------------\n\nTITLE: From_opt Function Signature\nDESCRIPTION: Legacy function signature for converting option type to nullable type\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/nullable.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\nlet from_opt: option<'a> => t<'a>\n```\n\n----------------------------------------\n\nTITLE: Handling Special Global Values in ReScript\nDESCRIPTION: Demonstrates how to safely access potentially undefined global values like __DEV__ using the %external syntax. This approach prevents ReferenceErrors when the value doesn't exist.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/bind-to-global-js-values.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reason\nCODE:\n```\nswitch ([%external __DEV__]) {\n| Some(_) => Js.log(\"dev mode\")\n| None => Js.log(\"production mode\")\n};\n```\n\nLANGUAGE: ocaml\nCODE:\n```\nlet () = match [%external __DEV__] with\n| Some _ -> Js.log \"dev mode\"\n| None -> Js.log \"production mode\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar match = typeof __DEV__ === \"undefined\" ? undefined : __DEV__;\n\nif (match !== undefined) {\n  console.log(\"dev mode\");\n} else {\n  console.log(\"production mode\");\n}\n```\n\n----------------------------------------\n\nTITLE: Get Byte Length of Float32Array\nDESCRIPTION: Returns the length in bytes of the Float32Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-32-array.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet byteLength: t => int;\n```\n\n----------------------------------------\n\nTITLE: Writing 16-bit Unsigned Integer (Little Endian)\nDESCRIPTION: Stores an unsigned 16-bit integer at the specified byte offset from the start of the DataView using little-endian format.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_data-view.mdx#2025-04-18_snippet_27\n\nLANGUAGE: reasonml\nCODE:\n```\nlet setUint16LittleEndian: (t, int, int) => unit;\n```\n\n----------------------------------------\n\nTITLE: Defining Value Type\nDESCRIPTION: Defines the type of set elements as string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\ntype value = string\n```\n\n----------------------------------------\n\nTITLE: Transferring Elements Between MutableQueues in ReScript\nDESCRIPTION: Function to transfer all elements from one queue to another, clearing the source queue in the process.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-queue.mdx#2025-04-18_snippet_20\n\nLANGUAGE: rescript\nCODE:\n```\nlet transfer: (t('a), t('a)) => unit;\n```\n\n----------------------------------------\n\nTITLE: Building ReScript Code\nDESCRIPTION: npm script command to compile ReScript code into JavaScript. This needs to be run after making changes to ReScript files.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/installation.mdx#2025-04-18_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnpm run res:build\n```\n\n----------------------------------------\n\nTITLE: ReScript Float Operations\nDESCRIPTION: Shows how ReScript's specialized float operators convert to standard JavaScript arithmetic operators.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/overview.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\n23.0 +. 1.0\n```\n\nLANGUAGE: javascript\nCODE:\n```\n23.0 + 1.0\n```\n\n----------------------------------------\n\nTITLE: Reducing Uint8ClampedArray elements\nDESCRIPTION: Executes a reducer function on each element of the array, resulting in a single output value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_44\n\nLANGUAGE: res\nCODE:\n```\nlet reduce: ((. 'b, elt) => 'b, 'b, t) => 'b\n```\n\n----------------------------------------\n\nTITLE: Listing ReScript Functions Requiring TypedArray Polyfills\nDESCRIPTION: A list of ReScript standard library functions that require TypedArray polyfills for compatibility with older browsers. These functions will fail at runtime without the proper polyfill.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/browser-support-polyfills.mdx#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `Int64.float_of_bits`\n- `Int64.bits_of_float`\n- `Int32.float_of_bits`\n- `Int32.bits_of_float`\n```\n\n----------------------------------------\n\nTITLE: Unsafe Array Element Access in ReScript\nDESCRIPTION: Accesses array elements without bounds checking. This is unsafe and may cause type errors if the index is out of range.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/array.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reason\nCODE:\n```\nlet getUnsafe: (array('a), int) => 'a;\n```\n\n----------------------------------------\n\nTITLE: Adding ReScript File to Project Configuration\nDESCRIPTION: Configuration snippet showing how to add ReScript source directories to the bsconfig.json file, which is necessary for the compiler to find and process ReScript files.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/converting-from-js.mdx#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n  \"sources\": {\n    \"dir\" : \"src\",\n    \"subdirs\" : true\n  },\n```\n\n----------------------------------------\n\nTITLE: ArrayBuffer SliceFrom Method Signature\nDESCRIPTION: Function signature for creating a new ArrayBuffer by extracting a section from a starting index to the end.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_array-buffer.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet sliceFrom: (int, t) => Js_typed_array.array_buffer\n```\n\n----------------------------------------\n\nTITLE: Setting Array Data with setArray\nDESCRIPTION: Sets the contents of a Uint8Array from a regular array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet setArray: (array<elt>, t) => unit\n```\n\n----------------------------------------\n\nTITLE: Partitioning Elements in ReScript Belt.MutableSet\nDESCRIPTION: The 'partitionU' and 'partition' functions split a MutableSet into two sets based on a predicate. They return a tuple of two sets: one containing elements that satisfy the condition, and another with elements that don't.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_47\n\nLANGUAGE: reason\nCODE:\n```\nlet partitionU: (t('value, 'id), [@bs] ('value => bool)) => (t('value, 'id), t('value, 'id));\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet partition: (t('value, 'id), 'value => bool) => (t('value, 'id), t('value, 'id));\n```\n\nLANGUAGE: reason\nCODE:\n```\nmodule IntCmp =\n  Belt.Id.MakeComparable({\n    type t = int;\n    let cmp = Pervasives.compare;\n  });\n\nlet isOdd = x => x mod 2 != 0;\n\nlet s0 = Belt.MutableSet.fromArray([|1,2,3,4,5|], ~id=(module IntCmp));\nlet (s1, s2) = s0->Belt.MutableSet.partition(isOdd);\n\ns1->Belt.MutableSet.toArray; /* [|1,3,5|] */\ns2->Belt.MutableSet.toArray; /* [|2,4|] */\n```\n\n----------------------------------------\n\nTITLE: Finding maximum key-value pair in ReScript map (undefined return)\nDESCRIPTION: Returns the key-value pair with the maximum key as a JavaScript undefined value if the map is empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_31\n\nLANGUAGE: reasonml\nCODE:\n```\nlet maxUndefined: t('a) => Js.undefined((key, 'a));\n```\n\n----------------------------------------\n\nTITLE: Accessing Array Elements with unsafe_get\nDESCRIPTION: Function signature for unsafely retrieving an element from the Int8Array at a specified index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\nlet unsafe_get: (t, int) => elt\n```\n\n----------------------------------------\n\nTITLE: Logging HashSet Statistics in ReScript\nDESCRIPTION: This function signature shows how to log statistics about a HashSet.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-set.mdx#2025-04-18_snippet_16\n\nLANGUAGE: reason\nCODE:\n```\nlet logStats: t('a, 'b) => unit;\n```\n\n----------------------------------------\n\nTITLE: Internal Invariant Check in ReScript Set\nDESCRIPTION: Function for checking internal invariants of the set data structure.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-dict.mdx#2025-04-18_snippet_20\n\nLANGUAGE: reason\nCODE:\n```\nlet checkInvariantInternal: t('a, 'b) => unit;\n```\n\n----------------------------------------\n\nTITLE: Type Inference with Unified Operators\nDESCRIPTION: Demonstrates how type inference works with unified operators across different primitive types.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2025-04-11-introducing-unified-operators.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet t1 = 1 + 2     // => (int, int) => int\nlet t2 = 1. + 2.   // => (float, float) => float\nlet t3 = \"1\" + \"2\" // => (string, string) => string\nlet t4 = 1n + 2n   // => (bigint, bigint) => bigint\n\nlet fn1 = (a, b) => a + b        // (int, int) => int\nlet fn2 = (a: float, b) => a + b // (float, float) => float \nlet fn3 = (a, b: float) => a + b // (float, float) => float\n\nlet inv1 = (a: int, b: float) => a + b  // => (int, int) => int\n//                                   ^ error: cannot apply float here, expected int\n```\n\n----------------------------------------\n\nTITLE: JavaScript Output of __POS_OF__ Usage in ReScript\nDESCRIPTION: This is the JavaScript output generated from the ReScript code using __POS_OF__. It shows how the position information is represented as an array and how the expression is handled in the compiled JavaScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/specialvalues_pos_of.mdx#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction f(param) {}\n\nvar pos = [\n  \"testmodule.res\",\n  2,\n  27,\n  28\n];\n\nconsole.log(pos);\nconsole.log(f);\nvar f$p = f;\n```\n\n----------------------------------------\n\nTITLE: Float to Exponential String with Precision\nDESCRIPTION: Function signature for converting float to exponential notation string with specified precision.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/float.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet toExponentialWithPrecision: (float, ~digits: int) => string\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Array Elements with Index\nDESCRIPTION: Function signature to execute a function on each element that includes its index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_41\n\nLANGUAGE: res\nCODE:\n```\nlet forEachi: ((. elt, int) => unit, t) => unit\n```\n\n----------------------------------------\n\nTITLE: Setting Array Data in Uint8Array in ReScript\nDESCRIPTION: Functions for setting array data in a Uint8Array, with options for specifying an offset.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet setArray: (array(elt), t) => unit;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet setArrayOffset: (array(elt), int, t) => unit;\n```\n\n----------------------------------------\n\nTITLE: Eval Error Raiser\nDESCRIPTION: Function signature for raising a JavaScript EvalError.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/exn.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\nlet raiseEvalError: string => 'a\n```\n\n----------------------------------------\n\nTITLE: Using Fixed Arguments with external Bindings in ReScript\nDESCRIPTION: This snippet demonstrates how to bind to a JavaScript function while passing predetermined argument values using @as. The example shows binding to process.on with 'exit' as a fixed first argument.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/bind-to-js-function.mdx#2025-04-18_snippet_11\n\nLANGUAGE: res\nCODE:\n```\n@val\nexternal processOnExit: (\n  @as(\"exit\") _,\n  int => unit\n) => unit = \"process.on\"\n\nprocessOnExit(exitCode =>\n  Js.log(\"error code: \" ++ Js.Int.toString(exitCode))\n);\n```\n\nLANGUAGE: js\nCODE:\n```\nprocess.on(\"exit\", function (exitCode) {\n  console.log(\"error code: \" + exitCode.toString());\n});\n```\n\n----------------------------------------\n\nTITLE: Computing Hyperbolic Arctangent in ReScript\nDESCRIPTION: Function that returns the hyperbolic arctangent (in radians) of the argument. Returns NaN if the argument is outside the range [-1.0, 1.0].\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/math.mdx#2025-04-18_snippet_15\n\nLANGUAGE: reasonml\nCODE:\n```\nlet atanh: float => float;\n```\n\n----------------------------------------\n\nTITLE: Using Fixed Arguments with External Bindings in ReScript\nDESCRIPTION: Demonstrates how to bind to a JavaScript function while passing predetermined argument values using @as annotation. This example binds to process.on('exit', callback) where 'exit' is fixed.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/bind-to-js-function.mdx#2025-04-18_snippet_7\n\nLANGUAGE: res\nCODE:\n```\n@val\nexternal processOnExit: (\n  @as(\"exit\") _,\n  int => unit\n) => unit = \"process.on\"\n\nprocessOnExit(exitCode =>\n  Console.log(\"error code: \" ++ Int.toString(exitCode))\n);\n```\n\nLANGUAGE: js\nCODE:\n```\nprocess.on(\"exit\", function (exitCode) {\n  console.log(\"error code: \" + exitCode.toString());\n});\n```\n\n----------------------------------------\n\nTITLE: From_opt Function Signature in ReScript\nDESCRIPTION: Alias function signature for converting an option type to a nullable type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/null.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\nlet from_opt: option<'a> => t<'a>\n```\n\n----------------------------------------\n\nTITLE: Subtracting Floats in ReScript\nDESCRIPTION: Subtraction of two float values using the - operator from Belt.Float. Can be opened in a module to avoid dot-notation, but yields a shadow warning.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/float.mdx#2025-04-18_snippet_5\n\nLANGUAGE: reason\nCODE:\n```\nlet (-): (float, float) => float;\n```\n\nLANGUAGE: reason\nCODE:\n```\nopen Belt.Float;\nJs.log(2.0 - 1.0 === 1.0); /* true */\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Value from Belt.MutableSet.String in ReScript\nDESCRIPTION: The 'get' function returns the reference of the value which is equivalent to the given value using the comparator specified by the collection. It returns None if the element does not exist.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_39\n\nLANGUAGE: reasonml\nCODE:\n```\nlet get: (t, value) => option(value);\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet s0 = Belt.MutableSet.String.fromArray([|\"apple\", \"carrot\"|]);\n\ns0->Belt.MutableSet.String.get(\"carrot\"); /* Some(\"carrot\") */\ns0->Belt.MutableSet.String.get(\"watermelon\"); /* None */\n```\n\n----------------------------------------\n\nTITLE: Defining Integer Element Type in ReScript\nDESCRIPTION: Type definition for the element type used in the sorting module, specialized to integers.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/sort-array-int.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype element = int\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for the community overview page, defining title, description and canonical URL.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/community/overview.mdx#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"Overview\"\ndescription: \"Community Resources Overview\"\ncanonical: \"/community/overview\"\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Key Type in ReScript HashMap\nDESCRIPTION: Type definition for Belt.HashMap.String key type, which is specialized to be string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-map-string.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reasonml\nCODE:\n```\ntype key = string;\n```\n\n----------------------------------------\n\nTITLE: Integer subtraction in ReScript's Belt.Int module\nDESCRIPTION: The - operator subtracts two integers. This is the same as the subtraction operator from Pervasives.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/int.mdx#2025-04-18_snippet_5\n\nLANGUAGE: reason\nCODE:\n```\nlet (-): (int, int) => int;\n```\n\nLANGUAGE: reason\nCODE:\n```\nopen Belt.Int;\nJs.log(2 - 1 === 1); /* true */\n```\n\n----------------------------------------\n\nTITLE: Accessing exception fileName in ReScript\nDESCRIPTION: Function signature for retrieving the file name associated with a JavaScript exception as an optional string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/exn.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet fileName: t => option<string>\n```\n\n----------------------------------------\n\nTITLE: Finding Element with Index using findi\nDESCRIPTION: Function signature to find the first element in the Int8Array that satisfies a test function that also receives the element index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_37\n\nLANGUAGE: res\nCODE:\n```\nlet findi: ((. elt, int) => bool, t) => Js.undefined<elt>\n```\n\n----------------------------------------\n\nTITLE: Defining element type as int in ReScript\nDESCRIPTION: Defines the element type as an integer for use in the SortArrayInt module.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/sort-array-int.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\ntype element = int\n```\n\n----------------------------------------\n\nTITLE: Uncapitalized Element JSX Transformation\nDESCRIPTION: Demonstrates transformation of uncapitalized JSX elements (like HTML tags) from ReScript to JavaScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/jsx.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\n<div onClick={handler}> child1 child2 </div>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nReact.createElement(\"div\", {\n  onClick: handler\n}, child1, child2);\n```\n\n----------------------------------------\n\nTITLE: Split Operation in MutableSet - ReScript\nDESCRIPTION: Splits the set into two sets based on a value and returns whether the value was present.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rescript\nCODE:\n```\nlet split: (t<'value, 'id>, 'value) => ((t<'value, 'id>, t<'value, 'id>), bool)\n```\n\nLANGUAGE: rescript\nCODE:\n```\nmodule IntCmp = Belt.Id.MakeComparable({\n  type t = int\n  let cmp = Pervasives.compare\n})\n\nlet s0 = Belt.MutableSet.fromArray([1, 2, 3, 4, 5], ~id=module(IntCmp))\n\nlet ((smaller, larger), present) = s0->Belt.MutableSet.split(3)\n\npresent /* true */\nsmaller->Belt.MutableSet.toArray /* [1,2] */\nlarger->Belt.MutableSet.toArray /* [4,5] */\n```\n\n----------------------------------------\n\nTITLE: Converting MutableSet to Array in ReScript\nDESCRIPTION: The 'toArray' function converts a MutableSet to an array of ordered set elements. It takes a set as input and returns an array containing all elements in the set in ascending order.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_50\n\nLANGUAGE: reason\nCODE:\n```\nlet toArray: t('value, 'id) => array('value);\n```\n\nLANGUAGE: reason\nCODE:\n```\nmodule IntCmp =\n  Belt.Id.MakeComparable({\n    type t = int;\n    let cmp = Pervasives.compare;\n  });\n\nlet s0 = Belt.MutableSet.fromArray([|3,2,1,5|], ~id=(module IntCmp));\n\ns0->Belt.MutableSet.toArray; /* [|1,2,3,5|] */\n```\n\n----------------------------------------\n\nTITLE: Retrieving Minimum Value as Undefined from Belt.Set in ReScript\nDESCRIPTION: The 'minUndefined' function returns the minimum value of the collection. It returns 'undefined' if the collection is empty. The function signature and usage example are provided.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/set.mdx#2025-04-18_snippet_15\n\nLANGUAGE: rescript\nCODE:\n```\nlet minUndefined: t<'value, 'id> => Js.undefined<'value>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet s0 = Belt.Set.make(~id=module(IntCmp))\nlet s1 = Belt.Set.fromArray([3,2,1,5], ~id=module(IntCmp))\n\ns0->Belt.Set.minUndefined /* undefined */\ns1->Belt.Set.minUndefined /* 1 */\n```\n\n----------------------------------------\n\nTITLE: Reducing Array Elements with Index using reducei in ReScript\nDESCRIPTION: Function signature for reducei that applies a function against an accumulator and each element in the Uint8Array to reduce it to a single value, also providing the element index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_45\n\nLANGUAGE: rescript\nCODE:\n```\nlet reducei: ((. 'b, elt, int) => 'b, 'b, t) => 'b\n```\n\n----------------------------------------\n\nTITLE: Iterating Example with MutableSet in ReasonML\nDESCRIPTION: Example demonstrating how to iterate over all elements in a MutableSet using forEach.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_36\n\nLANGUAGE: reasonml\nCODE:\n```\nmodule IntCmp =\n  Belt.Id.MakeComparable({\n    type t = int;\n    let cmp = Pervasives.compare;\n  });\n\nlet s0 = Belt.MutableSet.fromArray([|5,2,3,5,6|], ~id=(module IntCmp));\nlet acc = ref([]);\ns0->Belt.MutableSet.forEach(x => {\n  acc := Belt.List.add(acc^, x)\n});\nacc; /* [6,5,3,2] */\n```\n\n----------------------------------------\n\nTITLE: Getting byte length of Uint8ClampedArray\nDESCRIPTION: Returns the length (in bytes) of the Uint8ClampedArray from the start of its ArrayBuffer.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nlet byteLength: t => int\n```\n\n----------------------------------------\n\nTITLE: Finding Last Element Index from Position\nDESCRIPTION: Function signature to find the last index of a specified element starting from a given position.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_24\n\nLANGUAGE: res\nCODE:\n```\nlet lastIndexOfFrom: (elt, ~from: int, t) => int\n```\n\n----------------------------------------\n\nTITLE: Splitting Set - ReScript\nDESCRIPTION: Splits a set into two parts based on a value, returning smaller and larger sets along with a boolean indicating if the value was present.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_14\n\nLANGUAGE: res\nCODE:\n```\nlet split: (t, value) => ((t, t), bool)\n```\n\nLANGUAGE: res\nCODE:\n```\nlet s0 = Belt.MutableSet.String.fromArray([\"apple\", \"banana\", \"orange\"])\n\nlet ((smaller, larger), present) = s0->Belt.MutableSet.String.split(\"banana\")\n\npresent /* true */\nsmaller->Belt.MutableSet.String.toArray /* [\"apple\"] */\nlarger->Belt.MutableSet.String.toArray /* [\"orange\"] */\n```\n\n----------------------------------------\n\nTITLE: Rendering Docson Component in React\nDESCRIPTION: This React functional component renders the dynamically imported Docson component with a specific tag prop. It's used to display the ReScript build configuration schema.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/build-configuration-schema.mdx#2025-04-18_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nexport default function BuildConfigurationSchemaPage() {\n  return <Docson tag=\"9.0.0\" />;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Uint8ClampedArray in ReScript\nDESCRIPTION: Functions for creating new Uint8ClampedArray instances from various sources.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_9\n\nLANGUAGE: ReScript\nCODE:\n```\nlet _BYTES_PER_ELEMENT: int;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet make: array(elt) => t;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet fromBuffer: Js_typed_array2.array_buffer => t;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet fromBufferOffset: (Js_typed_array2.array_buffer, int) => t;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet fromBufferRange: (Js_typed_array2.array_buffer, ~offset: int, ~length: int) => t;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet fromLength: int => t;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet from: Js_typed_array2.array_like(elt) => t;\n```\n\n----------------------------------------\n\nTITLE: Checking Internal Invariant in MutableSet\nDESCRIPTION: Validates the internal invariant of the MutableSet, raising an exception when the invariant is not maintained.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-int.mdx#2025-04-18_snippet_43\n\nLANGUAGE: reasonml\nCODE:\n```\nlet checkInvariantInternal: t => unit;\n```\n\n----------------------------------------\n\nTITLE: Creating Uint8ClampedArray Instances in ReScript\nDESCRIPTION: Functions for creating new Uint8ClampedArray instances from various sources.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_8\n\nLANGUAGE: ReScript\nCODE:\n```\nlet make: array(elt) => t;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet fromBuffer: Js_typed_array.array_buffer => t;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet fromLength: int => t;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet from: Js_typed_array.array_like(elt) => t;\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Value as Undefined from Belt.MutableSet.String in ReScript\nDESCRIPTION: The 'getUndefined' function is similar to 'get' but returns undefined when the element does not exist.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set-string.mdx#2025-04-18_snippet_40\n\nLANGUAGE: reasonml\nCODE:\n```\nlet getUndefined: (t, value) => Js.undefined(value);\n```\n\n----------------------------------------\n\nTITLE: Defining Key Type - ReScript\nDESCRIPTION: Type definition for the key used in the HashSet, specialized to integer type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-set-int.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype key = int\n```\n\n----------------------------------------\n\nTITLE: Creating JSON Object Array in ReScript\nDESCRIPTION: Function signature for creating a JSON array of objects from a ReScript array of dictionaries of JSON values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/json.mdx#2025-04-18_snippet_20\n\nLANGUAGE: reason\nCODE:\n```\nlet objectArray: array(Js_dict.t(t)) => t;\n```\n\n----------------------------------------\n\nTITLE: Getting UTC Seconds from Date in ReScript\nDESCRIPTION: ReScript binding for JavaScript's Date.getUTCSeconds method. Returns the seconds for a date, evaluated in UTC.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_36\n\nLANGUAGE: res\nCODE:\n```\nlet getUTCSeconds: t => float\n```\n\nLANGUAGE: res\nCODE:\n```\nJs.Date.getUTCSeconds(exampleDate) == 54.0\n```\n\n----------------------------------------\n\nTITLE: Displaying ReScript Brandmark in Markdown and HTML\nDESCRIPTION: This snippet shows how to display the ReScript brandmark using Markdown and HTML. It includes an image tag with specific styling classes and a source link to the brandmark file.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/brand.mdx#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<img className=\"h-24 mt-10\" src=\"/static/brand/rescript-logo.svg\" />\n```\n\n----------------------------------------\n\nTITLE: Generated Size Module TypeScript Code\nDESCRIPTION: The TypeScript code generated from the ReScript Size module.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/typescript-integration.mdx#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as MyCompBS__Es6Import from './MyComp.res';\nconst MyCompBS: any = MyCompBS__Es6Import;\n\nexport type Size_t = \"Small\" | \"Medium\" | \"Large\";\n\nexport const Size_getNum: (size:Size_t) => number = MyCompBS.Size.getNum;\n\nexport const Size: { getNum: (size:Size_t) => number } = MyCompBS.Size\n```\n\n----------------------------------------\n\nTITLE: Creating a MutableSet from Array in ReasonML\nDESCRIPTION: Function signature for creating a new MutableSet from an array of elements and a comparator module.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reasonml\nCODE:\n```\nlet fromArray: (array('value), ~id: id('value, 'id)) => t('value, 'id);\n```\n\n----------------------------------------\n\nTITLE: Setting Seconds with setUTCSeconds in ReScript\nDESCRIPTION: Sets a Date's seconds according to UTC time. This function modifies the original Date object and returns the updated timestamp in milliseconds. Binds to JavaScript's Date.setUTCSeconds method.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_63\n\nLANGUAGE: res\nCODE:\n```\nlet setUTCSeconds: (t, float) => float\n```\n\nLANGUAGE: res\nCODE:\n```\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet futureTime = Js.Date.setUTCSeconds(date1, 56.0)\ndate1 == Js.Date.fromString(\"1973-12-29T21:30:56.321Z00:00\")\nfutureTime == Js.Date.getTime(date1)\n```\n\n----------------------------------------\n\nTITLE: Installing ReScript 11.0\nDESCRIPTION: Command to install the new ReScript compiler version using npm package manager\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2024-01-11-release-11-0-0.mdx#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install rescript@11\n```\n\n----------------------------------------\n\nTITLE: React Component for ReScript Build Configuration Schema Page\nDESCRIPTION: Defines a React functional component that renders the dynamically imported Docson component with a 'master' tag prop. This component serves as the main page content.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/build-configuration-schema.mdx#2025-04-18_snippet_1\n\nLANGUAGE: React\nCODE:\n```\nexport default function BuildConfigurationSchemaPage() {\n  return <Docson tag=\"master\" />;\n}\n```\n\n----------------------------------------\n\nTITLE: Copy Elements Within Float32Array with Range\nDESCRIPTION: Copies a sequence of elements within the Float32Array, specifying destination, start, and end indices.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_11\n\nLANGUAGE: rescript\nCODE:\n```\nlet copyWithinFromRange: (~to_: int, ~start: int, ~end_: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: RegExp Last Index Functions\nDESCRIPTION: Functions for getting and setting the last index property of RegExp.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/re.mdx#2025-04-18_snippet_11\n\nLANGUAGE: res\nCODE:\n```\nlet lastIndex: t => int\n```\n\nLANGUAGE: res\nCODE:\n```\nlet re = %re(\"/ab*/g\")\nlet str = \"abbcdefabh\"\n\nlet break = ref(false)\nwhile !break.contents {\n  switch Js.Re.exec_(re, str) {\n  | Some(result) => Js.Nullable.iter(Js.Re.captures(result)[0], (. match_) => {\n      let next = Belt.Int.toString(Js.Re.lastIndex(re))\n      Js.log(\"Found \" ++ (match_ ++ (\". Next match starts at \" ++ next)))\n    })\n  | None => break := true\n  }\n}\n```\n\nLANGUAGE: res\nCODE:\n```\nlet setLastIndex: (t, int) => unit\n```\n\n----------------------------------------\n\nTITLE: Building CSS Separately for Debugging\nDESCRIPTION: Commands to build CSS separately using PostCSS for debugging purposes in both development and production modes.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/README.md#2025-04-18_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n# Devmode\nnpx postcss styles/main.css -o test.css\n\n# Production\nNODE_ENV=production npx postcss styles/main.css -o test.css\n```\n\n----------------------------------------\n\nTITLE: Removing Element with Check in MutableSet in ReasonML\nDESCRIPTION: Function signature for removing an element from a MutableSet and returning a boolean indicating if the element was actually removed.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-set.mdx#2025-04-18_snippet_20\n\nLANGUAGE: reasonml\nCODE:\n```\nlet removeCheck: (t('value, 'id), 'value) => bool;\n```\n\n----------------------------------------\n\nTITLE: Implementing Prop Drilling Pattern in ReScript React\nDESCRIPTION: This code demonstrates manual prop threading by passing a theme parameter through multiple component layers. It shows how to define a simple theme type and pass it from App to Button through intermediate components.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/context.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\n// src/App.res\ntype theme = Light | Dark;\n\nmodule Button = {\n  @react.component\n  let make = (~theme) => {\n    let className = switch theme {\n      | Light => \"theme-light\"\n      | Dark => \"theme-black\"\n    };\n    <button className> {React.string(\"Click me\")} </button>\n  }\n}\n\nmodule ThemedButton = {\n  @react.component\n  let make = (~theme) => {\n    <Button theme />\n  }\n}\n\nmodule Toolbar = {\n  @react.component\n  let make = (~theme) => {\n    <div>\n      <ThemedButton theme/>\n    </div>\n  }\n}\n\n@react.component\nlet make = () => {\n  // We define the theme in the\n  // toplevel App component and\n  // pass it down\n  <Toolbar theme=Dark/>\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction Button(Props) {\n  var theme = Props.theme;\n  var className = theme ? \"theme-black\" : \"theme-light\";\n  return React.createElement(\"button\", {\n              className: className\n            }, \"Click me\");\n}\n\nfunction ThemedButton(Props) {\n  var theme = Props.theme;\n  return React.createElement(Button, {\n              theme: theme\n            });\n}\n\nfunction Toolbar(Props) {\n  var theme = Props.theme;\n  return React.createElement(\"div\", undefined, React.createElement(ThemedButton, {\n                  theme: theme\n                }));\n}\n\nfunction Playground(Props) {\n  return React.createElement(Toolbar, {\n              theme: /* Dark */1\n            });\n}\n```\n\n----------------------------------------\n\nTITLE: Check if Float32Array Includes Value\nDESCRIPTION: Determines whether a Float32Array includes a certain value. This is an ES2016 feature.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_18\n\nLANGUAGE: rescript\nCODE:\n```\nlet includes: (elt, t) => bool\n```\n\n----------------------------------------\n\nTITLE: Checking map equality with curried function in ReScript\nDESCRIPTION: Tests whether two maps are equal using a curried equality function for comparing values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_9\n\nLANGUAGE: reasonml\nCODE:\n```\nlet eq: (t('a), t('a), ('a, 'a) => bool) => bool;\n```\n\n----------------------------------------\n\nTITLE: Copying MutableStack in ReScript\nDESCRIPTION: Function to create a new stack as a copy of an existing stack in O(1) time complexity.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-stack.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet copy: t('a) => t('a);\n```\n\n----------------------------------------\n\nTITLE: Get Byte Length of Float32Array\nDESCRIPTION: Returns the length of the Float32Array in bytes.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet byteLength: t => int\n```\n\n----------------------------------------\n\nTITLE: Partitioning a set with uncurried function in ReScript\nDESCRIPTION: Splits the set into two sets based on the given uncurried predicate function. Used for optimized performance in certain scenarios.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-int.mdx#2025-04-18_snippet_27\n\nLANGUAGE: reason\nCODE:\n```\nlet partitionU: (t, [@bs] (value => bool)) => (t, t);\n```\n\n----------------------------------------\n\nTITLE: Iterating over MutableStack with Curried Function in ReScript\nDESCRIPTION: Function to apply a callback function to each element of a stack.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-stack.mdx#2025-04-18_snippet_12\n\nLANGUAGE: rescript\nCODE:\n```\nlet forEach: (t('a), 'a => unit) => unit;\n```\n\n----------------------------------------\n\nTITLE: Using somei Function in ReScript\nDESCRIPTION: The somei function tests whether at least one element in the array passes the test implemented by the provided function, which receives both the element and its index. This example checks if any string has the same length as its index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array-2.mdx#2025-04-18_snippet_40\n\nLANGUAGE: res\nCODE:\n```\n// Does any string in the array\n// have the same length as its index?\n\nlet sameLength = (str, index) => Js.String.length(str) == index\n\n// \"ef\" has length 2 and is it at index 2\nJs.Array2.somei([\"ab\", \"cd\", \"ef\", \"gh\"], sameLength) == true\n// no item has the same length as its index\nJs.Array2.somei([\"a\", \"bc\", \"def\", \"gh\"], sameLength) == false\n```\n\n----------------------------------------\n\nTITLE: Getting byteOffset of UInt32Array\nDESCRIPTION: Defines a function that returns the offset in bytes from the start of the ArrayBuffer.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet byteOffset: t => int\n```\n\n----------------------------------------\n\nTITLE: Creating Float32Array Instances in ReScript\nDESCRIPTION: Functions to create new Float32Array instances from various sources.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\nlet _BYTES_PER_ELEMENT: int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet make: array<elt> => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromBuffer: Js_typed_array.array_buffer => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromBufferOffset: (Js_typed_array.array_buffer, int) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromBufferRange: (Js_typed_array.array_buffer, ~offset: int, ~length: int) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromLength: int => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet from: Js_typed_array.array_like<elt> => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet create: array<elt> => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet of_buffer: Js_typed_array.array_buffer => t\n```\n\n----------------------------------------\n\nTITLE: Defining map container type in ReScript MutableMapString\nDESCRIPTION: Defines the abstract type of the mutable map container with parametric type 'a for values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reasonml\nCODE:\n```\ntype t('a);\n```\n\n----------------------------------------\n\nTITLE: Passing recipientId to useFriendStatus Hook\nDESCRIPTION: A code snippet showing how to pass the latest value of a state variable to a custom hook. This pattern allows the hook to respond to changes in the state, such as unsubscribing from one friend's status and subscribing to another when the selection changes.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/hooks-custom.mdx#2025-04-18_snippet_6\n\nLANGUAGE: ReScript\nCODE:\n```\nlet (recipientId, setRecipientId) = React.useState(_ => \"1\")\nlet recipientOnlineState = FriendStatusHook.useFriendStatus(recipientId)\n```\n\n----------------------------------------\n\nTITLE: Joining UInt32Array elements\nDESCRIPTION: Defines a function that joins all elements of the array into a string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_21\n\nLANGUAGE: rescript\nCODE:\n```\nlet join: t => string\n```\n\n----------------------------------------\n\nTITLE: clearInterval Function Signature in ReScript\nDESCRIPTION: Function signature for clearInterval which cancels an interval created by setInterval.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/global.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reasonml\nCODE:\n```\nlet clearInterval: intervalId => unit;\n```\n\n----------------------------------------\n\nTITLE: Using Closed and Bounded Polymorphic Variant Type Annotations\nDESCRIPTION: Demonstrates different ways to constrain polymorphic variant types using closed, upper bound, and lower bound annotations. These annotations control what constructors are allowed in a type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/polymorphic-variant.mdx#2025-04-18_snippet_10\n\nLANGUAGE: res\nCODE:\n```\n// Only #Red allowed, no upper / lower bound (closed poly variant)\nlet basic: [#Red] = #Red\n\n// May contain #Red, or any other value (open poly variant)\n// here, foreground will actually be inferred as [> #Red | #Green]\nlet foreground: [> #Red] = #Green\n\n// The value must be \"one of\" #Red | #Blue\n// Only #Red and #Blue are valid values\nlet background: [< #Red | #Blue] = #Red\n```\n\n----------------------------------------\n\nTITLE: Clearing map in ReScript\nDESCRIPTION: Function signature for clearing all elements from a mutable map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ReScript\nCODE:\n```\nlet clear: t<'a> => unit\n```\n\n----------------------------------------\n\nTITLE: Using reduceRight Function in ReScript\nDESCRIPTION: The reduceRight function reduces an array from right to left by applying a function to each element and an accumulator value. Examples show calculating sum of squares and a division operation where order matters.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array-2.mdx#2025-04-18_snippet_37\n\nLANGUAGE: res\nCODE:\n```\nlet sumOfSquares = (accumulator, item) => accumulator + item * item\n\nJs.Array2.reduceRight([10, 2, 4], sumOfSquares, 0) == 120\nJs.Array2.reduceRight([2.0, 4.0], (acc, item) => item /. acc, 1.0) == 0.5 // 2.0 / (4.0 / 1.0)\n```\n\n----------------------------------------\n\nTITLE: Testing Array Elements with Index using everyi in ReScript\nDESCRIPTION: Function signature for everyi that tests whether all elements in the Uint8Array pass the test implemented by the provided function which also receives the element index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_33\n\nLANGUAGE: rescript\nCODE:\n```\nlet everyi: ((. elt, int) => bool, t) => bool\n```\n\n----------------------------------------\n\nTITLE: Error Name Accessor\nDESCRIPTION: Function signature for accessing the name of an exception.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/exn.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet name: t => option<string>\n```\n\n----------------------------------------\n\nTITLE: Data-Last API Usage Examples in ReScript\nDESCRIPTION: Demonstrates different ways to use data-last APIs in ReScript, showing examples with pipe last operator, pipe first operator, and without piping.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\n/* Js.String (data-last API used with pipe last operator) */\nJs.log(\"2019-11-10\" |> Js.String.split(\"-\"));\nJs.log(\"ReScript\" |> Js.String.startsWith(\"Re\"));\n\n/* Js.String (data-last API used with pipe first operator) */\nJs.log(\"2019-11-10\"->Js.String.split(\"-\", _));\nJs.log(\"ReScript\"->Js.String.startsWith(\"Re\", _));\n\n/* Js.String (data-last API used without any piping) */\nJs.log(Js.String.split(\"-\", \"2019-11-10\"));\nJs.log(Js.String.startsWith(\"Re\", \"ReScript\"));\n```\n\n----------------------------------------\n\nTITLE: Type Inference for Props in ReScript React\nDESCRIPTION: Shows how ReScript's type system can infer prop types from their usage in a component. The Button component doesn't explicitly type its props, but the compiler infers their types based on how they're used.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/components-and-props.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\n// Button.res\n\n@react.component\nlet make = (~onClick, ~msg, ~children) => {\n  <div onClick>\n    {React.string(msg)}\n    children\n  </div>\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating through a HashSetString with uncurried function\nDESCRIPTION: Executes the provided uncurried function for each element in the HashSetString.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/hash-set-string.mdx#2025-04-18_snippet_9\n\nLANGUAGE: res\nCODE:\n```\nlet forEachU: (t, (. key) => unit) => unit\n```\n\n----------------------------------------\n\nTITLE: Examples of Safe Ceiling Function in ReScript\nDESCRIPTION: Examples demonstrating the use of ceil_int with different numeric values, including values that would exceed the int range but are pinned to the maximum/minimum int value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/math.mdx#2025-04-18_snippet_23\n\nLANGUAGE: reasonml\nCODE:\n```\nJs.Math.ceil_int(3.1) == 4;\nJs.Math.ceil_int(3.0) == 3;\nJs.Math.ceil_int(-3.1) == -3;\nJs.Math.ceil_int(-1.0e15) == -2147483648;\nJs.Math.ceil_int(1.0e15) == 2147483647;\n```\n\n----------------------------------------\n\nTITLE: Rendering a React Element to the DOM in ReScript with JS Output\nDESCRIPTION: This example shows how to render a React element to the DOM by finding the root element and using ReactDOM.render. The ReScript code handles the potential failure of finding the DOM element using pattern matching, while the JS output shows the compiled JavaScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/rendering-elements.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\n// Dom access can actually fail. ReScript\n// is really explicit about handling edge cases!\nswitch(ReactDOM.querySelector(\"#root\")){\n| Some(root) => ReactDOM.render(<div> {React.string(\"Hello Andrea\")} </div>, root)\n| None => () // do nothing\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar root = document.querySelector(\"#root\");\n\nif (!(root == null)) {\n  ReactDom.render(React.createElement(\"div\", undefined, \"Hello Andrea\"), root);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Uint8Array from ArrayBuffer Range with fromBufferRange in ReScript\nDESCRIPTION: Function signature for fromBufferRange that creates a new Uint8Array using a specified range of an existing ArrayBuffer as its storage. May raise a JavaScript exception.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_54\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromBufferRange: (Js_typed_array2.array_buffer, ~offset: int, ~length: int) => t\n```\n\n----------------------------------------\n\nTITLE: Converting Set to List in ReScript\nDESCRIPTION: Converts the set to a list of ordered elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set-string.mdx#2025-04-18_snippet_50\n\nLANGUAGE: reasonml\nCODE:\n```\nlet toList: t => list(value);\n```\n\n----------------------------------------\n\nTITLE: Using Fixed Arguments in ReScript External Bindings\nDESCRIPTION: Shows how to bind to a JavaScript function using an external while passing predetermined argument values. This example binds to 'process.on' with a fixed 'exit' event and a callback function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/bind-to-js-function.mdx#2025-04-18_snippet_8\n\nLANGUAGE: reason\nCODE:\n```\n[@bs.val]\nexternal processOnExit: (\n  [@bs.as \"exit\"] _,\n  int => unit\n) => unit = \"process.on\";\n\nprocessOnExit(exitCode =>\n  Js.log(\"error code: \" ++ Js.Int.toString(exitCode))\n);\n```\n\nLANGUAGE: ocaml\nCODE:\n```\nexternal processOnExit:\n  (_ [@bs.as \"exit\"]) ->\n  (int -> unit) ->\n  unit = \"process.on\"\n[@@bs.val]\n\nlet () = processOnExit (fun exitCode  ->\n Js.log (\"error code: \" ^ (Js.Int.toString exitCode))\n)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nprocess.on(\"exit\", function (exitCode) {\n  console.log(\"error code: \" + exitCode.toString());\n});\n```\n\n----------------------------------------\n\nTITLE: Logging HashMap Statistics in ReScript\nDESCRIPTION: Logs statistics about the hash map using Belt.HashMap.String.logStats.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-map-string.mdx#2025-04-18_snippet_19\n\nLANGUAGE: rescript\nCODE:\n```\nlet logStats: t<'a> => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet hMap = Belt.HashMap.String.make(~hintSize=10)\nBelt.HashMap.String.set(hMap, \"1\", \"1\")\n\nBelt.HashMap.String.logStats(hMap)\n```\n\n----------------------------------------\n\nTITLE: Standard Polymorphic Type in ReScript\nDESCRIPTION: Example of a regular polymorphic type in ReScript, showing how a logger type with type parameter 'a can only work with one type at a time, leading to a type error when trying to log different types.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/language_scoped_polymorphic_type.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\ntype logger<'a> = { log: 'a => unit}\n\n@module(\"jsAPI\") external getLogger: unit => logger<'a> = \"getLogger\"\n\nlet myLogger = getLogger()\n\nmyLogger.log(\"Hello, ReScript!\")\nmyLogger.log(42) // Type error!\n```\n\n----------------------------------------\n\nTITLE: Binding to JavaScript Classes Using OCaml Class Types\nDESCRIPTION: Shows how to use OCaml class types with the `[@bs]` annotation to create bindings for JavaScript classes. Methods with arrow types are treated as methods while non-arrow types are treated as properties.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/reason-compiler/latest/class.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\nclass type _rect =\n  [@bs]\n  {\n    [@bs.set] pub height: int;\n    [@bs.set] pub width: int;\n    pub draw: unit => unit\n  };\n\ntype rect = Js.t(_rect);\n```\n\n----------------------------------------\n\nTITLE: Binding to JS Object Fields using Special @bs Getters & Setters\nDESCRIPTION: Illustrates how to use @bs.get and @bs.set annotations to bind to individual fields of a JavaScript object. It defines getter and setter functions for a textarea object's name property.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/bind-to-js-object.mdx#2025-04-18_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\ntype textarea;\n[@bs.set] external setName: (textarea, string) => unit = \"name\";\n[@bs.get] external getName: textarea => string = \"name\";\n```\n\nLANGUAGE: ocaml\nCODE:\n```\ntype textarea;\nexternal setName: textarea -> string -> unit = \"name\" [@@bs.set]\nexternal getName: textarea -> string = \"name\" [@@bs.get]\n```\n\nLANGUAGE: javascript\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Referencing Record Types from Other Modules\nDESCRIPTION: Shows how to create records whose types are defined in other modules. You can use type annotation or field path notation to specify which module the record type comes from.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/record.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\n// Example.res\n\nlet me: School.person = {age: 20, name: \"Big ReScript\"}\n/* or */\nlet me2 = {School.age: 20, name: \"Big ReScript\"}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar me = {\n  age: 20,\n  name: \"Big ReScript\"\n};\nvar me2 = {\n  age: 20,\n  name: \"Big ReScript\"\n};\n```\n\n----------------------------------------\n\nTITLE: Checking String Ending with Length Limit in ReScript\nDESCRIPTION: The 'endsWithFrom' function checks if a string ends with a specified substring within a given length. It takes two strings and an integer length, returning a boolean indicating if the ending matches within the specified length.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/string-2.mdx#2025-04-18_snippet_14\n\nLANGUAGE: rescript\nCODE:\n```\nlet endsWithFrom: (t, t, int) => bool\n```\n\n----------------------------------------\n\nTITLE: Creating Uint8Array from Array-like Object\nDESCRIPTION: Creates a new Uint8Array from an array-like object.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_56\n\nLANGUAGE: rescript\nCODE:\n```\nlet from: Js_typed_array.array_like<elt> => t\n```\n\n----------------------------------------\n\nTITLE: Every Testing Operations for Float64Array\nDESCRIPTION: Functions to test if all elements in a Float64Array pass a predicate function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-64-array.mdx#2025-04-18_snippet_15\n\nLANGUAGE: rescript\nCODE:\n```\nlet every: ((. elt) => bool, t) => bool\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet everyi: ((. elt, int) => bool, t) => bool\n```\n\n----------------------------------------\n\nTITLE: Creating Basic React Component in ReScript\nDESCRIPTION: Demonstrates how to create a simple Greeting component in ReScript React that returns a div element with text. Shows both the ReScript code and its JavaScript output after compilation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/components-and-props.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\n// src/Greeting.res\n@react.component\nlet make = () => {\n  <div>\n    {React.string(\"Hello ReScripters!\")}\n  </div>\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar React = require(\"react\");\n\nfunction Greeting(Props) {\n  return React.createElement(\"div\", undefined, \"Hello ReScripters!\");\n}\n\nvar make = Greeting;\n```\n\n----------------------------------------\n\nTITLE: Determining strictly sorted length of integer arrays\nDESCRIPTION: Returns the length of the sorted portion of an array. The function returns a positive value for increasing order and a negative value for decreasing order.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/sort-array-int.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet strictlySortedLength: array(element) => int;\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching on Tuples in ReScript\nDESCRIPTION: Demonstrates pattern matching on tuples, allowing for 2D table-like conditional logic. This example assigns a categoryId based on combinations of animal type and size.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_6\n\nLANGUAGE: res\nCODE:\n```\ntype animal = Dog | Cat | Bird\nlet categoryId = switch (isBig, myAnimal) {\n| (true, Dog) => 1\n| (true, Cat) => 2\n| (true, Bird) => 3\n| (false, Dog | Cat) => 4\n| (false, Bird) => 5\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nvar categoryId = isBig ? (myAnimal + 1) | 0 : myAnimal >= 2 ? 5 : 4;\n```\n\n----------------------------------------\n\nTITLE: Creating Elements from Component Functions in ReScript\nDESCRIPTION: Demonstrates how to use React.createElement to instantiate elements from component functions. This is useful when you need more control over element creation beyond what JSX provides.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/elements-and-jsx.mdx#2025-04-18_snippet_6\n\nLANGUAGE: ReScript\nCODE:\n```\ntype props = {name: string}\n\nlet render = (myComp: props => React.element) => {\n  <div> {React.createElement(myComp, {name: \"Franz\"})} </div>\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming Array Elements with Index in ReScript\nDESCRIPTION: Creates a new array with the results of calling the provided function on every element in the array. The function takes both the array element and its index as parameters. The result array can have different element types.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/array.mdx#2025-04-18_snippet_21\n\nLANGUAGE: rescript\nCODE:\n```\nlet mapi: (('a, int) => 'b, t<'a>) => t<'b>\n```\n\nLANGUAGE: rescript\nCODE:\n```\n// multiply each item in array by its position\nlet product = (item, index) => item * index\nJs.Array.mapi(product, [10, 11, 12]) == [0, 11, 24]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Array Operations in ReScript\nDESCRIPTION: Examples showing how to use Array2 functions without and with pipe-first syntax to find the sum of squares of even numbers in an array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/array-2.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nlet isEven = x => mod(x, 2) == 0\nlet square = x => x * x\nlet result = {\n  open Js.Array2\n  reduce(map(filter([5, 2, 3, 4, 1], isEven), square), \"+\", 0)\n}\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet isEven = x => mod(x, 2) == 0\nlet square = x => x * x\nlet result = {\n  open Js.Array2\n  [5, 2, 3, 4, 1]->filter(isEven)->map(square)->reduce(\"+\", 0)\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Generator Dependencies in ReScript Build\nDESCRIPTION: Configuration option to disable generator dependencies in development mode, preventing regeneration of files when source files change. Useful for testing production behavior where generated files are used directly.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/reason-compiler/latest/build-advanced.mdx#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cut-generators\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Byte Offset of TypedArray in ReScript\nDESCRIPTION: Function signature for retrieving the byte offset of a Uint8ClampedArray from the start of its ArrayBuffer.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\nlet byteOffset: t => int\n```\n\n----------------------------------------\n\nTITLE: Copy Elements Within Float32Array\nDESCRIPTION: Copies a sequence of elements within the Float32Array, specifying only the destination index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\nlet copyWithin: (~to_: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Implementing Array reducei Method in ReScript\nDESCRIPTION: Function that reduces an array from left to right with access to index. Takes a reducer function, initial value, and array as parameters. The reducer receives accumulator, current value, and index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/array.mdx#2025-04-18_snippet_23\n\nLANGUAGE: rescript\nCODE:\n```\nlet reducei: (('b, 'a, int) => 'b, 'b, t<'a>) => 'b\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet sumOfEvens = (accumulator, item, index) =>\n  if mod(index, 2) == 0 {\n    accumulator + item\n  } else {\n    accumulator\n  }\n\nJs.Array.reducei(sumOfEvens, 0, [2, 5, 1, 4, 3]) == 6\n```\n\n----------------------------------------\n\nTITLE: TypeScript Signature for date-fns Format Function\nDESCRIPTION: The TypeScript type signature and usage example for the date-fns format function, which is being referenced for creating ReScript bindings.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2025-03-05-what-can-i-do-with-rescript.mdx#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// type signature\nfunction format(\n  date: string | number | Date,\n  formatStr: string,\n  options?: FormatOptions\n): string\n\n// how it's imported \nimport { format } from \"date-fns\";\n\n// how it's used\nconst result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Comparator and Set in ReScript\nDESCRIPTION: Demonstrates how to create a custom comparator for pairs of integers and use it to initialize a Belt.Set.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/set.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nmodule PairComparator =\n  Belt.Id.MakeComparable({\n    type t = (int, int)\n    let cmp = ((a0, a1), (b0, b1)) =>\n      switch (Pervasives.compare(a0, b0)) {\n      | 0 => Pervasives.compare(a1, b1)\n      | c => c\n      }\n  })\n\nlet mySet = Belt.Set.make(~id=module(PairComparator))\nlet mySet2 = Belt.Set.add(mySet, (1, 2))\n```\n\n----------------------------------------\n\nTITLE: Mapping Values with Keys in a Map in ReScript (Uncurried)\nDESCRIPTION: Applies a function to all key-value pairs in a map, creating a new map with the same keys and transformed values. This is the uncurried version.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map.mdx#2025-04-18_snippet_11\n\nLANGUAGE: reasonml\nCODE:\n```\nlet mapWithKeyU: (t('k, 'v, 'id), [@bs] (('k, 'v) => 'v2)) => t('k, 'v2, 'id);\n```\n\n----------------------------------------\n\nTITLE: DataView Type Definition\nDESCRIPTION: Defines the abstract type t for DataView\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_data-view.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype t\n```\n\n----------------------------------------\n\nTITLE: Getting Unicode Code Point at Index in ReScript\nDESCRIPTION: The codePointAt function returns the complete Unicode code point at a specified position as an option type. Can handle code points outside the BMP (>=0x10000).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string.mdx#2025-04-18_snippet_10\n\nLANGUAGE: reason\nCODE:\n```\nlet codePointAt: (int, t) => option(int);\n```\n\nLANGUAGE: reason\nCODE:\n```\nJs.String.codePointAt(1, {js|¿😺?|js}) == Some(0x1f63a);\nJs.String.codePointAt(5, \"abc\") == None;\n```\n\n----------------------------------------\n\nTITLE: Creating Promise Type Signature in ReScript (Reason Syntax)\nDESCRIPTION: Type signature for creating a promise in ReScript using the Reason syntax. It defines the Js.Promise.make function that takes a callback with resolve and reject arguments.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/promise.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rei\nCODE:\n```\nJs.Promise.make: (\n  (\n    ~resolve: (. 'a) => unit,\n    ~reject: (. exn) => unit\n  ) => unit\n) => Js.Promise.t('a);\n```\n\n----------------------------------------\n\nTITLE: Array Element Index Search in ReScript\nDESCRIPTION: getIndexBy and getIndexByU functions find the index of first element matching a predicate. Returns Some(index) if found, None if not found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/array.mdx#2025-04-18_snippet_14\n\nLANGUAGE: rescript\nCODE:\n```\nBelt.Array.getIndexBy([1, 4, 3, 2], (x) => mod(x, 2) == 0) == Some(1)\nBelt.Array.getIndexBy([15, 13, 11], (x) => mod(x, 2) == 0) == None\n```\n\n----------------------------------------\n\nTITLE: Using Data IDs as React Keys in ReScript\nDESCRIPTION: Shows the recommended approach of using unique IDs from data objects as keys when mapping todo items to React elements.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/arrays-and-keys.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\ntype todo = {id: string, text: string}\n\nlet todos = [\n  {id: \"todo1\", text: \"Todo 1\"},\n  {id: \"todo2\", text: \"Todo 2\"}\n]\n\nlet items = Belt.Array.map(todos, todo => {\n  <li key={todo.id}> {React.string(todo.text)} </li>\n})\n```\n\n----------------------------------------\n\nTITLE: Generating ReScript Interface File Using BSC Compiler\nDESCRIPTION: Command to generate a .resi interface file from a compiled .cmi file. The command outputs a boilerplate interface in ML syntax to stdout. The project namespace is required if enabled.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/reason-compiler/latest/automatic-interface-generation.mdx#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbsc lib/bs/src/MyUtils-MyProject.cmi\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Variants in ReScript\nDESCRIPTION: Creates a simple variant type with three constructors: Yes, No, and PrettyMuch. The example demonstrates how to define and instantiate a variant in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/variant.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\ntype myResponse =\n  | Yes\n  | No\n  | PrettyMuch;\n\nlet areYouCrushingIt = Yes;\n```\n\nLANGUAGE: ml\nCODE:\n```\ntype myResponse =\n  | Yes\n  | No\n  | PrettyMuch\n\nlet areYouCrushingIt = Yes\n```\n\nLANGUAGE: js\nCODE:\n```\nvar areYouCrushingIt = /* Yes */0;\n```\n\n----------------------------------------\n\nTITLE: Finding Last Substring Index in ReScript\nDESCRIPTION: The 'lastIndexOf' function finds the last occurrence of a substring within a string. It takes two strings and returns the index of the last occurrence of the second string within the first, or -1 if not found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/string-2.mdx#2025-04-18_snippet_19\n\nLANGUAGE: rescript\nCODE:\n```\nlet lastIndexOf: (t, t) => int\n```\n\n----------------------------------------\n\nTITLE: Writing a Uint16 value to a DataView in ReScript\nDESCRIPTION: Function signature for storing an unsigned 16-bit integer at the specified byte offset with big-endian format.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_data-view.mdx#2025-04-18_snippet_26\n\nLANGUAGE: rescript\nCODE:\n```\nlet setUint16: (t, int, int) => unit\n```\n\n----------------------------------------\n\nTITLE: Creating React Element from Array in ReScript\nDESCRIPTION: Demonstrates how to represent multiple elements as a single element using React.array. This pattern is useful for rendering lists of data or passing multiple children.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/elements-and-jsx.mdx#2025-04-18_snippet_4\n\nLANGUAGE: ReScript\nCODE:\n```\nlet element = React.array([\n  React.string(\"element 1\"),\n  React.string(\"element 2\"),\n  React.string(\"element 3\")\n])\n```\n\n----------------------------------------\n\nTITLE: Converting Option Bool using If-Else in ReScript\nDESCRIPTION: Initial implementation using nested if-else statements to convert an optional boolean value. This approach is verbose and prone to errors.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/pattern-matching-destructuring.mdx#2025-04-18_snippet_21\n\nLANGUAGE: rescript\nCODE:\n```\nlet optionBoolToBool = opt => {\n  if opt == None {\n    false\n  } else if opt === Some(true) {\n    true\n  } else {\n    false\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction optionBoolToBool(opt) {\n  if (opt === undefined) {\n    return false;\n  } else {\n    return opt === true;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating RegExp from String in ReScript\nDESCRIPTION: Function that constructs a RegExp object from a string pattern. This is useful when you need to dynamically create regular expressions or insert strings into patterns.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/re.mdx#2025-04-18_snippet_6\n\nLANGUAGE: reason\nCODE:\n```\nlet fromString: string => t;\n```\n\nLANGUAGE: reason\nCODE:\n```\n/* A function that extracts the content of the first element with the given tag */\n\nlet contentOf = (tag, xmlString) =>\n  Js.Re.fromString(\"<\" ++ tag ++ \">(.*?)<\\\\/\" ++ tag ++ \">\")\n  -> Js.Re.exec_(xmlString)\n  -> (\n    fun\n    | Some(result) => Js.Nullable.toOption(Js.Re.captures(result)[1])\n    | None => None\n  );\n```\n\n----------------------------------------\n\nTITLE: String split Function in ReScript\nDESCRIPTION: The split function divides a string into an array of substrings at each occurrence of the specified delimiter. It returns all substrings including empty ones if consecutive delimiters are found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/string.mdx#2025-04-18_snippet_6\n\nLANGUAGE: res\nCODE:\n```\nlet split: (t, t) => array<t>\n```\n\nLANGUAGE: res\nCODE:\n```\nJs.String.split(\"-\", \"2018-01-02\") == [\"2018\", \"01\", \"02\"]\nJs.String.split(\",\", \"a,b,,c\") == [\"a\", \"b\", \"\", \"c\"]\nJs.String.split(\"::\", \"good::bad as great::awful\") == [\"good\", \"bad as great\", \"awful\"]\nJs.String.split(\";\", \"has-no-delimiter\") == [\"has-no-delimiter\"]\n```\n\n----------------------------------------\n\nTITLE: Mapping Array Elements with Index in ReasonML\nDESCRIPTION: The mapi function creates a new array with the results of calling a provided function on every element in the array, passing both the element and its index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array.mdx#2025-04-18_snippet_25\n\nLANGUAGE: ReasonML\nCODE:\n```\nlet mapi: (('a, int) => 'b, t<'a>) => t<'b>\n```\n\nLANGUAGE: ReasonML\nCODE:\n```\nlet product = (item, index) => item * index\nJs.Array.mapi(product, [10, 11, 12]) == [0, 11, 24]\n```\n\n----------------------------------------\n\nTITLE: Configuring JS Post-Build Hook in ReScript\nDESCRIPTION: Sets up a hook that's invoked every time a file is recompiled, useful for JS build system integration. The example runs a Node.js script for post-processing.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/build-configuration.mdx#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"js-post-build\": {\n    \"cmd\": \"/path/to/node ../../postProcessTheFile.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: List Prepend Operations in ReScript\nDESCRIPTION: Demonstrates immutable list prepending using spread syntax. Shows how new lists can share structure with existing ones.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/array-and-list.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reason\nCODE:\n```\nlet myList = [1, 2, 3];\nlet anotherList = [0, ...myList];\n```\n\nLANGUAGE: ml\nCODE:\n```\nlet myList = [1; 2; 3]\nlet anotherList = 0 :: myList\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar myList = {\n  hd: 1,\n  tl: {\n    hd: 2,\n    tl: {\n      hd: 3,\n      tl: 0\n    }\n  }\n};\n\nvar anotherList = {\n  hd: 0,\n  tl: myList\n};\n```\n\n----------------------------------------\n\nTITLE: Importing WarningTable Component in JSX\nDESCRIPTION: This code snippet imports a React component named WarningTable from a specific file path. The component is likely used to display a table of ReScript compiler warnings.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/warning-numbers.mdx#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { make as WarningTable } from \"src/components/WarningTable.mjs\";\n```\n\n----------------------------------------\n\nTITLE: Declaring an External Function in ReScript\nDESCRIPTION: Shows how to declare an external binding to the JavaScript setTimeout function. The binding has no output in JavaScript as external declarations are inlined at compile time.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/external.mdx#2025-04-18_snippet_0\n\nLANGUAGE: res\nCODE:\n```\n@val external setTimeout: (unit => unit, int) => float = \"setTimeout\"\n```\n\nLANGUAGE: js\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Testing Array Elements with some in ReScript\nDESCRIPTION: Function signature for some that tests whether at least one element in the Uint8Array passes the test implemented by the provided function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_48\n\nLANGUAGE: rescript\nCODE:\n```\nlet some: ((. elt) => bool, t) => bool\n```\n\n----------------------------------------\n\nTITLE: Getting Byte Length of Int8Array\nDESCRIPTION: Function signature to get the byte length of the Int8Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_4\n\nLANGUAGE: res\nCODE:\n```\nlet byteLength: t => int\n```\n\n----------------------------------------\n\nTITLE: Merging Multiple Key-Value Pairs into a Map in ReScript\nDESCRIPTION: Adds multiple key-value pairs to an existing map. The reference of the return value might change even if all values already exist in the map.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reasonml\nCODE:\n```\nlet mergeMany: (t('k, 'v, 'id), array(('k, 'v))) => t('k, 'v, 'id);\n```\n\n----------------------------------------\n\nTITLE: Defining Uncurried Async Functions in ReScript\nDESCRIPTION: Demonstrates how to define an uncurried async function using the dot notation, which is useful when binding to JavaScript functions that expect all arguments at once.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/async-await.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet fetchData = async (. userId: string): string {\n  await fetchUserMail(userId)\n}\n```\n\n----------------------------------------\n\nTITLE: Find Index of Value in Float32Array from Position\nDESCRIPTION: Returns the first index at which a given element can be found in the Float32Array, starting from the specified index, or -1 if not found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_float-32-array.mdx#2025-04-18_snippet_20\n\nLANGUAGE: rescript\nCODE:\n```\nlet indexOfFrom: (elt, ~from: int, t) => int\n```\n\n----------------------------------------\n\nTITLE: Partitioning Belt.Set in ReScript\nDESCRIPTION: Demonstrates how to partition a Belt.Set into two sets based on a predicate using the partition function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/set.mdx#2025-04-18_snippet_13\n\nLANGUAGE: rescript\nCODE:\n```\nlet isOdd = x => mod(x, 2) != 0\n\nlet s0 = Belt.Set.fromArray([1,2,3,4,5], ~id=module(IntCmp))\nlet (s1, s2) = s0->Belt.Set.partition(isOdd)\n\ns1->Belt.Set.toArray /* [1,3,5] */\ns2->Belt.Set.toArray /* [2,4] */\n```\n\n----------------------------------------\n\nTITLE: Set Comparison and Combination Operations\nDESCRIPTION: Operations for comparing and combining sets including union, intersection, difference and subset testing.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/set-int.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet union: (t, t) => t\nlet intersect: (t, t) => t\nlet diff: (t, t) => t\nlet subset: (t, t) => bool\nlet cmp: (t, t) => int\nlet eq: (t, t) => bool\n```\n\n----------------------------------------\n\nTITLE: Reading 32-bit Float (Little Endian)\nDESCRIPTION: Gets a 32-bit floating point number at the specified byte offset from the start of the DataView using little-endian format.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_data-view.mdx#2025-04-18_snippet_19\n\nLANGUAGE: reasonml\nCODE:\n```\nlet getFloat32LittleEndian: (t, int) => float;\n```\n\n----------------------------------------\n\nTITLE: Mapping Array Elements with map in ReScript\nDESCRIPTION: Function signature for map that creates a new typed array with the results of calling a provided function on every element in the Uint8Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_42\n\nLANGUAGE: rescript\nCODE:\n```\nlet map: ((. elt) => 'b, t) => typed_array<'b>\n```\n\n----------------------------------------\n\nTITLE: Configuring v3 Compatibility Mode\nDESCRIPTION: Configuration for maintaining compatibility with JSX v3 dependencies while using the latest compiler and rescript-react.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/migrate-react.mdx#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsx\": { \"version\": 3, \"v3-dependencies\": [\"rescript-relay\"] },\n  \"bsc-flags\": [\"-open ReactV3\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Curried and Uncurried Callbacks in Belt\nDESCRIPTION: Shows how to use both curried and uncurried versions of the forEach function in Belt with an array of strings.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\n[\"a\", \"b\", \"c\"]->Belt.Array.forEach(x => Js.log(x))\n\n[\"a\", \"b\", \"c\"]->Belt.Array.forEachU((. x) => Js.log(x))\n```\n\n----------------------------------------\n\nTITLE: Formatting ReScript Code with bsc\nDESCRIPTION: Demonstrates using the bsc -format flag to format ReScript code according to the standard style guidelines.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/try.mdx#2025-04-18_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n❯ bsc -format MyFile.res\nlet rec fib = n => {\n  switch n {\n  | 0 | 1 => n\n  | n => fib(n - 1) + fib(n - 2)\n  }\n}\nJs.log(fib(0))\n```\n\n----------------------------------------\n\nTITLE: Creating Undefined Values in ReScript\nDESCRIPTION: Function signature for constructing a value of Js.undefined<'a> containing a value of 'a.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/undefined.mdx#2025-04-18_snippet_1\n\nLANGUAGE: res\nCODE:\n```\nlet return: 'a => t<'a>\n```\n\n----------------------------------------\n\nTITLE: Getting Byte Offset of Array\nDESCRIPTION: Returns the offset (in bytes) of this array from the start of its ArrayBuffer.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-64-array.mdx#2025-04-18_snippet_5\n\nLANGUAGE: reason\nCODE:\n```\nlet byteOffset: t => int;\n```\n\n----------------------------------------\n\nTITLE: Dictionary Set Usage Example\nDESCRIPTION: Example demonstrating how to set and update dictionary values\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/dict.mdx#2025-04-18_snippet_8\n\nLANGUAGE: reason\nCODE:\n```\nJs.Dict.set(ages, \"Maria\", 31)\\nJs.log(ages ==\\n  Js.Dict.fromList([(\"Maria\", 31), (\"Vinh\", 22), (\"Fred\", 49)]));\\n\\nJs.Dict.set(ages, \"David\", 66)\\nJs.log(ages ==\\n  Js.Dict.fromList([(\"Maria\", 31), (\"Vinh\", 22), (\"Fred\", 49), (\"David\", 66)]));\n```\n\n----------------------------------------\n\nTITLE: Implementing Floor Functions in ReScript\nDESCRIPTION: Defines various floor functions with different return types and safety levels, corresponding to JavaScript's Math.floor function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/math.mdx#2025-04-18_snippet_4\n\nLANGUAGE: ReScript\nCODE:\n```\nlet unsafe_floor_int: float => int\nlet unsafe_floor: float => int\nlet floor_int: float => int\nlet floor: float => int\nlet floor_float: float => float\n```\n\n----------------------------------------\n\nTITLE: Retrieving Object Keys in ReScript\nDESCRIPTION: The keys() function returns an array of strings containing the keys of an object's own enumerable properties. It takes a Js.t<'a> object as input and returns an array of strings.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/obj.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet keys: Js.t<'a> => array<string>\n```\n\n----------------------------------------\n\nTITLE: Array Manipulation Methods\nDESCRIPTION: Methods for manipulating array contents including copying, filling, reversing and sorting operations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_int-16-array.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet setArray: (array<elt>, t) => unit\nlet setArrayOffset: (array<elt>, int, t) => unit\nlet copyWithin: (~to_: int, t) => t\nlet fillInPlace: (elt, t) => t\nlet reverseInPlace: t => t\nlet sortInPlace: t => t\n```\n\n----------------------------------------\n\nTITLE: Writing 16-bit Signed Integer (Little Endian)\nDESCRIPTION: Stores a signed 16-bit integer at the specified byte offset from the start of the DataView using little-endian format.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_data-view.mdx#2025-04-18_snippet_25\n\nLANGUAGE: reasonml\nCODE:\n```\nlet setInt16LittleEndian: (t, int, int) => unit;\n```\n\n----------------------------------------\n\nTITLE: Handling Nullable Values in ReScript\nDESCRIPTION: Shows how ReScript's Some and None values compile to JavaScript, and demonstrates using the Nullable module for handling null and undefined.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/interop-cheatsheet.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet a = Some(5) // compiles to 5\nlet b = None // compiles to undefined\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar a = 5;\nvar b;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet jsNull = Nullable.null\nlet jsUndefined = Nullable.undefined\nlet result1: Nullable.t<string> = Nullable.make(\"hello\")\nlet result2: Nullable.t<int> = Nullable.fromOption(Some(10))\nlet result3: option<int> = Nullable.toOption(Nullable.make(10))\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Caml_option from \"./stdlib/caml_option.js\";\nimport * as Core__Nullable from \"./stdlib/core__Nullable.js\";\n\nvar result2 = Core__Nullable.fromOption(10);\n\nvar jsNull = null;\n\nvar jsUndefined;\n\nvar result1 = \"hello\";\n\nvar result3 = Caml_option.nullable_to_opt(10);\n```\n\n----------------------------------------\n\nTITLE: Setting Array Elements - unsafe_set\nDESCRIPTION: Function signature for unsafely setting an element in a Uint16Array at a specified index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-16-array.mdx#2025-04-18_snippet_2\n\nLANGUAGE: res\nCODE:\n```\nlet unsafe_set: (t, int, elt) => unit\n```\n\n----------------------------------------\n\nTITLE: Creating and Shuffling Arrays Using Function (Uncurried) in ReScript\nDESCRIPTION: Uncurried version of makeByAndShuffle that creates and shuffles an array in one operation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/array.mdx#2025-04-18_snippet_20\n\nLANGUAGE: reason\nCODE:\n```\nlet makeByAndShuffleU: (int, [@bs] (int => 'a)) => array('a);\n```\n\n----------------------------------------\n\nTITLE: List Operations - Basic Functions\nDESCRIPTION: Core list operation signatures including length, cons, isEmpty, head (hd), tail (tl), and nth element access\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/list.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet length: t<'a> => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet cons: ('a, t<'a>) => t<'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet isEmpty: t<'a> => bool\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet hd: t<'a> => option<'a>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet tl: t<'a> => option<t<'a>>\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet nth: (t<'a>, int) => option<'a>\n```\n\n----------------------------------------\n\nTITLE: Example of Binding Undefined Values in ReScript\nDESCRIPTION: Example demonstrating how to use the bind function to transform a potentially undefined string by appending \" world!\" to it if it exists.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/undefined.mdx#2025-04-18_snippet_8\n\nLANGUAGE: res\nCODE:\n```\nlet maybeGreetWorld = (maybeGreeting: Js.undefined<string>) =>\n  Js.Undefined.bind(maybeGreeting, (. greeting) => greeting ++ \" world!\")\n```\n\n----------------------------------------\n\nTITLE: Map Function Over Float32Array Elements\nDESCRIPTION: Creates a new typed array with the results of calling the provided function on every element in the Float32Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-32-array.mdx#2025-04-18_snippet_42\n\nLANGUAGE: rescript\nCODE:\n```\nlet map: ((. elt) => 'b, t) => typed_array('b);\n```\n\n----------------------------------------\n\nTITLE: Initializing Example Date in ReScript\nDESCRIPTION: Creates an example date using Js.Date.fromFloat for use in subsequent examples. The date represents Thu, 29 Nov 1973 21:30:54 GMT.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nlet exampleDate = Js.Date.fromFloat(123456654321.0)\n```\n\n----------------------------------------\n\nTITLE: Adding Element to Array Beginning in ReScript\nDESCRIPTION: The unshift function adds a given element to the beginning of the array. It returns the new number of elements in the array and modifies the original array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/array-2.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\nlet unshift: (t<'a>, 'a) => int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet arr = [\"b\", \"c\", \"d\"]\nJs.Array2.unshift(arr, \"a\") == 4\narr == [\"a\", \"b\", \"c\", \"d\"]\n```\n\n----------------------------------------\n\nTITLE: Using Belt.Option.isSome and isNone in ReScript\nDESCRIPTION: Shows how to use isSome and isNone functions to check the state of an option value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/option.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\nBelt.Option.isSome(None) /* false */\n\nBelt.Option.isSome(Some(1)) /* true */\n\nBelt.Option.isNone(None) /* true */\n\nBelt.Option.isNone(Some(1)) /* false */\n```\n\n----------------------------------------\n\nTITLE: Binding to Variadic JavaScript Functions in ReScript\nDESCRIPTION: Shows how to bind to a JavaScript function that accepts a variable number of arguments using the @variadic decorator.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/interop-cheatsheet.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\n@module(\"path\") @variadic\nexternal join: array<string> => string = \"join\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Retrieving Year from Date (Deprecated) in ReScript\nDESCRIPTION: The getYear function is deprecated. It's recommended to use getFullYear() instead.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_39\n\nLANGUAGE: res\nCODE:\n```\nlet getYear: t => float\n```\n\n----------------------------------------\n\nTITLE: Copying Elements within Array\nDESCRIPTION: Copies a sequence of elements within the array to a position starting at the target index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\nlet copyWithin: (~to_: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Finding Substring Position in ReScript\nDESCRIPTION: The indexOf function returns the first occurrence index of a substring within a string, or -1 if not found.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string.mdx#2025-04-18_snippet_17\n\nLANGUAGE: reason\nCODE:\n```\nlet indexOf: (t, t) => int;\n```\n\nLANGUAGE: reason\nCODE:\n```\nJs.String.indexOf(\"ok\", \"bookseller\") == 2;\nJs.String.indexOf(\"sell\", \"bookseller\") == 4;\nJs.String.indexOf( \"ee\", \"beekeeper\") == 1;\nJs.String.indexOf(\"xyz\", \"bookseller\") == -1;\n```\n\n----------------------------------------\n\nTITLE: Splitting Strings by Regular Expression in ReScript\nDESCRIPTION: The splitByRe function splits a string using a regular expression as the delimiter. It returns an array of optional substrings.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string-2.mdx#2025-04-18_snippet_17\n\nLANGUAGE: reason\nCODE:\n```\nlet splitByRe: (t, Js_re.t) => array(option(t));\n```\n\nLANGUAGE: reason\nCODE:\n```\nJs.String2.splitByRe(\"art; bed , cog ;dad\", [%re \"/\\\\s*[,;]\\\\s*/\"])\n  == [|Some(\"art\"), Some(\"bed\"), Some(\"cog\"), Some(\"dad\")|];\n```\n\n----------------------------------------\n\nTITLE: Iterating over Nullable values in ReScript\nDESCRIPTION: The 'iter' function applies a function to the contained value if it exists. Used for side effects on non-null/undefined values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/nullable.mdx#2025-04-18_snippet_8\n\nLANGUAGE: reason\nCODE:\n```\nlet iter: (t('a), (. 'a) => unit) => unit;\n```\n\n----------------------------------------\n\nTITLE: Global Module Value Access in ReScript\nDESCRIPTION: Demonstrates accessing values from global JavaScript modules using @val and @scope.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/interop-cheatsheet.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\n@val @scope(\"Math\")\nexternal random: unit => float = \"random\"\n\nlet someNumber = random()\n\n@val @scope((\"window\", \"location\", \"ancestorOrigins\"))\nexternal length: int = \"length\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar someNumber = Math.random();\n```\n\n----------------------------------------\n\nTITLE: Reducing Belt.HashMap.String in ReScript\nDESCRIPTION: Combines all key-value pairs into a single value using the reduce function with an initial accumulator.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/hash-map-string.mdx#2025-04-18_snippet_10\n\nLANGUAGE: ReScript\nCODE:\n```\nlet reduce: (t<'b>, 'c, ('c, key, 'b) => 'c) => 'c\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet hMap = Belt.HashMap.String.make(~hintSize=10)\nBelt.HashMap.String.set(hMap, \"1\", \"value1\")\nBelt.HashMap.String.set(hMap, \"2\", \"value2\")\n\nBelt.HashMap.String.reduce(hMap, \"\", (acc, key, value) =>\n  acc ++ (\", \" ++ value)\n) == \"value1, value2\"\n```\n\n----------------------------------------\n\nTITLE: Testing Any with Element Index\nDESCRIPTION: Tests whether at least one element in the array passes the provided function test with index.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_49\n\nLANGUAGE: rescript\nCODE:\n```\nlet somei: ((. elt, int) => bool, t) => bool\n```\n\n----------------------------------------\n\nTITLE: List Pattern Matching in ReScript\nDESCRIPTION: Shows how to access list items using pattern matching with switch expressions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/array-and-list.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet message =\n  switch myList {\n  | list{} => \"This list is empty\"\n  | list{a, ...rest} => \"The head of the list is the string \" ++ Js.Int.toString(a)\n  }\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar message = myList\n  ? \"The head of the list is the string \" + (1).toString()\n  : \"This list is empty\";\n```\n\n----------------------------------------\n\nTITLE: Filling Int32Array with Values\nDESCRIPTION: Functions to fill all or part of an Int32Array with a static value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-32-array.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet fillInPlace: (elt, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fillFromInPlace: (elt, ~from: int, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fillRangeInPlace: (elt, ~start: int, ~end_: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Checking for OCaml exception or open variant in ReScript\nDESCRIPTION: Function signature for determining if a value is an OCaml exception or open variant. This function is for internal use only.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/exn.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nlet isCamlExceptionOrOpenVariant: 'a => bool\n```\n\n----------------------------------------\n\nTITLE: Webpack Transformation of Environment Variables\nDESCRIPTION: Shows how Webpack transforms environment variables in JavaScript during build process, replacing them with literal values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/inlining-constants.mdx#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nif ('production' === 'development') {\n  console.log(\"Dev-only code here!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Array Elements\nDESCRIPTION: Function signature to create a new Int8Array with elements that pass a provided test function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_34\n\nLANGUAGE: res\nCODE:\n```\nlet filter: ((. elt) => bool, t) => t\n```\n\n----------------------------------------\n\nTITLE: Dynamic Popping Iteration with Uncurried Function in ReScript\nDESCRIPTION: Function that applies an uncurried callback while popping each element from the stack.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-stack.mdx#2025-04-18_snippet_13\n\nLANGUAGE: rescript\nCODE:\n```\nlet dynamicPopIterU: (t('a), [@bs] ('a => unit)) => unit;\n```\n\n----------------------------------------\n\nTITLE: Higher-Order Array Functions for UInt32Array in ReScript\nDESCRIPTION: Functions like every, filter, find, forEach, map, reduce, and some for Uint32Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_7\n\nLANGUAGE: ReScript\nCODE:\n```\nlet every: ((. elt) => bool, t) => bool\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet everyi: ((. elt, int) => bool, t) => bool\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet filter: ((. elt) => bool, t) => t\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet filteri: ((. elt, int) => bool, t) => t\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet find: ((. elt) => bool, t) => Js.undefined<elt>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet findi: ((. elt, int) => bool, t) => Js.undefined<elt>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet findIndex: ((. elt) => bool, t) => int\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet findIndexi: ((. elt, int) => bool, t) => int\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet forEach: ((. elt) => unit, t) => unit\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet forEachi: ((. elt, int) => unit, t) => unit\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet map: ((. elt) => 'b, t) => typed_array<'b>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet mapi: ((. elt, int) => 'b, t) => typed_array<'b>\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet reduce: ((. 'b, elt) => 'b, 'b, t) => 'b\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet reducei: ((. 'b, elt, int) => 'b, 'b, t) => 'b\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet reduceRight: ((. 'b, elt) => 'b, 'b, t) => 'b\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet reduceRighti: ((. 'b, elt, int) => 'b, 'b, t) => 'b\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet some: ((. elt) => bool, t) => bool\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet somei: ((. elt, int) => bool, t) => bool\n```\n\n----------------------------------------\n\nTITLE: Defining Uint8Array Types in ReScript\nDESCRIPTION: Defines the element type, typed array type, and Uint8Array type for use in the module.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\ntype elt = int;\ntype typed_array('a);\ntype t = typed_array(elt);\n```\n\n----------------------------------------\n\nTITLE: ReScript Promise.all5 Implementation\nDESCRIPTION: Function signature for combining five Promises into a tuple Promise\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/promise.mdx#2025-04-18_snippet_9\n\nLANGUAGE: res\nCODE:\n```\nlet all5: ((t<'a0>, t<'a1>, t<'a2>, t<'a3>, t<'a4>)) => t<('a0, 'a1, 'a2, 'a3, 'a4)>\n```\n\n----------------------------------------\n\nTITLE: Creating Subarray View\nDESCRIPTION: Creates a new view on the same underlying buffer from start (inclusive) to end (exclusive).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_28\n\nLANGUAGE: rescript\nCODE:\n```\nlet subarray: (~start: int, ~end_: int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Extracting Substrings in ReScript\nDESCRIPTION: Functions for extracting portions of a string, including options for specifying start and end positions or length.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string.mdx#2025-04-18_snippet_37\n\nLANGUAGE: ReScript\nCODE:\n```\nlet substr: (~from: int, t) => t;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet substrAtMost: (~from: int, ~length: int, t) => t;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet substring: (~from: int, ~to_: int, t) => t;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet substringToEnd: (~from: int, t) => t;\n```\n\n----------------------------------------\n\nTITLE: Comparing MapDicts in ReScript\nDESCRIPTION: Functions for comparing two MapDicts using key and value comparison functions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-dict.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ReScript\nCODE:\n```\nlet cmpU: (t<'k, 'v, 'id>, t<'k, 'v, 'id>, ~kcmp: cmp<'k, 'id>, ~vcmp: (. 'v, 'v) => int) => int\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet cmp: (t<'k, 'v, 'id>, t<'k, 'v, 'id>, ~kcmp: cmp<'k, 'id>, ~vcmp: ('v, 'v) => int) => int\n```\n\n----------------------------------------\n\nTITLE: Getting Element by Index with Exception in ReScript\nDESCRIPTION: The getExn function returns the element at a specific index directly, raising an exception if the index is out of bounds.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/list.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\nlet getExn: (t<'a>, int) => 'a\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet abc = list{\"A\", \"B\", \"C\"}\n\nabc->Belt.List.getExn(1) // \"B\"\n\nabc->Belt.List.getExn(4) // Raises an Error\n```\n\n----------------------------------------\n\nTITLE: Array Creation Methods\nDESCRIPTION: Methods for creating new Uint16Array instances from various sources including buffers and existing arrays.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-16-array.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet make: array<elt> => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromBuffer: Js_typed_array2.array_buffer => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromLength: int => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet from: Js_typed_array2.array_like<elt> => t\n```\n\n----------------------------------------\n\nTITLE: Converting Option to Undefined in ReScript\nDESCRIPTION: Maps ReScript's option('a) to JavaScript's Js.undefined('a), with Some(a) becoming a and None becoming empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/undefined.mdx#2025-04-18_snippet_11\n\nLANGUAGE: res\nCODE:\n```\nlet fromOption: option<'a> => t<'a>\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Output for ReScript\nDESCRIPTION: Illustrates how to set package name and configure output for different module systems in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/reason-compiler/latest/extended-compiler-options.mdx#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nbsc -bs-package-name your_package -bs-package-output es6:lib/es6 -c xx.ml\n```\n\nLANGUAGE: sh\nCODE:\n```\nbsc -bs-package-name name -bs-package-output commonjs:lib/js  -bs-package-output amdjs:lib/amdjs -c x.ml\n```\n\n----------------------------------------\n\nTITLE: Reading a Uint8 value from a DataView in ReScript\nDESCRIPTION: Function signature for getting an unsigned 8-bit integer from the specified byte offset.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_data-view.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rescript\nCODE:\n```\nlet getUint8: (t, int) => int\n```\n\n----------------------------------------\n\nTITLE: Converting Date to String in ReScript\nDESCRIPTION: Returns the date portion of a Date object in English. It includes the day of the week, year, month, and day of the month.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/date.mdx#2025-04-18_snippet_61\n\nLANGUAGE: ReScript\nCODE:\n```\nlet toDateString: t => string\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nJs.Date.toDateString(exampleDate) == \"Thu Nov 29 1973\"\n```\n\n----------------------------------------\n\nTITLE: Mapping Arrays in ReScript\nDESCRIPTION: The map function creates a new array by applying a function to each element of the input array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/array.mdx#2025-04-18_snippet_34\n\nLANGUAGE: reason\nCODE:\n```\nlet map: (array('a), 'a => 'b) => array('b);\n```\n\nLANGUAGE: reason\nCODE:\n```\nBelt.Array.map([|1, 2|], (x) => x + 1) == [|3, 4|];\n```\n\n----------------------------------------\n\nTITLE: Finding minimum key-value pair with undefined in ReScript\nDESCRIPTION: Function signature for finding the minimum key-value pair in a mutable map, returning an undefined type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_29\n\nLANGUAGE: ReScript\nCODE:\n```\nlet minUndefined: t<'a> => Js.undefined<(key, 'a)>\n```\n\n----------------------------------------\n\nTITLE: Comparing Some Value with Value in ReScript\nDESCRIPTION: Function signature and examples for comparing a value with an Option using a custom equality function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/option.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet isSomeValue: ((. 'a, 'a) => bool, 'a, option<'a>) => bool\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet clockEqual = (. a, b) => mod(a, 12) == mod(b, 12)\nJs.Option.isSomeValue(clockEqual, 3, Some(15)) == true\nJs.Option.isSomeValue(clockEqual, 3, Some(4)) == false\nJs.Option.isSomeValue(clockEqual, 3, None) == false\n```\n\n----------------------------------------\n\nTITLE: Signature for cmpU Function in ReScript Result Module\nDESCRIPTION: Function signature for cmpU, an uncurried version of cmp for comparing Results.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/result.mdx#2025-04-18_snippet_14\n\nLANGUAGE: rescript\nCODE:\n```\nlet cmpU: (t<'a, 'c>, t<'b, 'd>, (. 'a, 'b) => int) => int\n```\n\n----------------------------------------\n\nTITLE: Option Type Definition\nDESCRIPTION: Basic type definition for the Option type in ReScript/Reason, which can be either None or Some with a value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/option.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\ntype option('a) = None | Some('a)\n```\n\n----------------------------------------\n\nTITLE: JSON Null Decoding Function in ReScript\nDESCRIPTION: Function signature for attempting to decode a JSON value as null. Returns None if the JSON value is not null.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/json.mdx#2025-04-18_snippet_10\n\nLANGUAGE: reason\nCODE:\n```\nlet decodeNull: t => option(Js_null.t('a));\n```\n\n----------------------------------------\n\nTITLE: Partitioning map with uncurried function in MapString module (ReScript)\nDESCRIPTION: Uncurried function to partition a map into two maps based on a predicate.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/map-string.mdx#2025-04-18_snippet_48\n\nLANGUAGE: reason\nCODE:\n```\nlet partitionU: (t('v), [@bs] ((key, 'v) => bool)) => (t('v), t('v));\n```\n\n----------------------------------------\n\nTITLE: TypedArray Type Definitions\nDESCRIPTION: Core type definitions for TypedArray including element type, typed array type and the main type t.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_type-s.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\ntype elt;\ntype typed_array('a);\ntype t = typed_array(elt);\n```\n\n----------------------------------------\n\nTITLE: Regular Expression in ReScript\nDESCRIPTION: Creating a regular expression in ReScript using the %re syntax, which compiles directly to JavaScript's regular expression.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/primitive-types.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\nlet r = %re(\"/b/g\")\n```\n\nLANGUAGE: js\nCODE:\n```\nvar r = /b/g;\n```\n\n----------------------------------------\n\nTITLE: Checking if a Belt.HashMap.String is empty in ReScript\nDESCRIPTION: Determines whether a hash map contains any key-value pairs using the isEmpty function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/hash-map-string.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ReScript\nCODE:\n```\nlet isEmpty: t<'a> => bool\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet hMap = Belt.HashMap.String.fromArray([(\"1\", \"1\")])\nBelt.HashMap.String.isEmpty(hMap) == false\n```\n\n----------------------------------------\n\nTITLE: Removing a key from ReScript mutable map\nDESCRIPTION: Removes the binding for the given key from the map as an in-place modification.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-map-string.mdx#2025-04-18_snippet_37\n\nLANGUAGE: reasonml\nCODE:\n```\nlet remove: (t('a), key) => unit;\n```\n\n----------------------------------------\n\nTITLE: Creating Uint8Array with Length using fromLength in ReScript\nDESCRIPTION: Function signature for fromLength that creates a new Uint8Array with a specified length. May raise a JavaScript exception if the length is invalid.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_55\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromLength: int => t\n```\n\n----------------------------------------\n\nTITLE: Defining binarySearchByU Function\nDESCRIPTION: Uncurried version of binarySearchBy function for performing binary search in an array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/sort-array.mdx#2025-04-18_snippet_10\n\nLANGUAGE: reason\nCODE:\n```\nlet binarySearchByU: (array('a), 'a, [@bs] (('a, 'a) => int)) => int;\n```\n\n----------------------------------------\n\nTITLE: Finding Maximum Value with Undefined Return\nDESCRIPTION: Function that returns the maximum value of the collection as undefined when empty.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/set.mdx#2025-04-18_snippet_36\n\nLANGUAGE: reason\nCODE:\n```\nlet maxUndefined: t('value, 'id) => Js.undefined('value);\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet s0 = Belt.Set.make(~id=(module IntCmp));\nlet s1 = Belt.Set.fromArray([|3,2,1,5|], ~id=(module IntCmp));\n\ns0->Belt.Set.maxUndefined; /* undefined */\ns1->Belt.Set.maxUndefined; /* 5 */\n```\n\n----------------------------------------\n\nTITLE: Merging Multiple Key-Value Pairs into HashMap in ReScript\nDESCRIPTION: Merges multiple key-value pairs into the hash map using Belt.HashMap.String.mergeMany.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-map-string.mdx#2025-04-18_snippet_17\n\nLANGUAGE: rescript\nCODE:\n```\nlet mergeMany: (t<'a>, array<(key, 'a)>) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet hMap = Belt.HashMap.String.make(~hintSize=10)\nBelt.HashMap.String.mergeMany(hMap, [(\"1\", \"value1\"), (\"2\", \"value2\")])\n```\n\n----------------------------------------\n\nTITLE: Changing String Case in ReScript\nDESCRIPTION: Functions for converting strings to lowercase or uppercase, with options for locale-specific conversions.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/string.mdx#2025-04-18_snippet_38\n\nLANGUAGE: ReScript\nCODE:\n```\nlet toLowerCase: t => t;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet toLocaleLowerCase: t => t;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet toUpperCase: t => t;\n```\n\nLANGUAGE: ReScript\nCODE:\n```\nlet toLocaleUpperCase: t => t;\n```\n\n----------------------------------------\n\nTITLE: Example: Stringifying Array to JSON in ReScript\nDESCRIPTION: Example showing how to convert a ReScript string array directly to a JSON string representation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/json.mdx#2025-04-18_snippet_29\n\nLANGUAGE: reason\nCODE:\n```\n/* prints `[\"foo\", \"bar\"]` */\nJs.log(Js.Json.stringifyAny([|\"foo\", \"bar\"|]));\n```\n\n----------------------------------------\n\nTITLE: Manipulating Uint8Array Data in ReScript\nDESCRIPTION: Functions for copying, filling, reversing, and sorting data within a Uint8Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_uint-8-array.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet copyWithin: (~to_: int, t) => t;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet copyWithinFrom: (~to_: int, ~from: int, t) => t;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet copyWithinFromRange: (~to_: int, ~start: int, ~end_: int, t) => t;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fillInPlace: (elt, t) => t;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fillFromInPlace: (elt, ~from: int, t) => t;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fillRangeInPlace: (elt, ~start: int, ~end_: int, t) => t;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet reverseInPlace: t => t;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet sortInPlace: t => t;\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet sortInPlaceWith: ((. elt, elt) => int, t) => t;\n```\n\n----------------------------------------\n\nTITLE: HashSet Creation Function\nDESCRIPTION: Creates a new HashSet with an optional hint size parameter for initial capacity.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/hash-set-string.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet make: (~hintSize: int) => t\n```\n\n----------------------------------------\n\nTITLE: GetWithDefault Function Examples\nDESCRIPTION: Examples showing how to use getWithDefault to provide fallback values for Option types.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/option.mdx#2025-04-18_snippet_6\n\nLANGUAGE: reason\nCODE:\n```\nlet getWithDefault: (option('a), 'a) => 'a;\n```\n\nLANGUAGE: reason\nCODE:\n```\nBelt.Option.getWithDefault(None, \"Banana\"); /* Banana */\n\nBelt.Option.getWithDefault(Some(\"Apple\"), \"Banana\"); /* Apple */\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet greet = (firstName: option(string)) =>\n  Belt.Option.(\"Greetings \" ++ firstName->getWithDefault(\"Anonymous\"));\n\nSome(\"Jane\")->greet; /* \"Greetings Jane\" */\n\nNone->greet; /* \"Greetings Anonymous\" */\n```\n\nLANGUAGE: reason\nCODE:\n```\nBelt.Option.getWithDefault(Some(1812), 1066); /* 1812 */\n\nBelt.Option.getWithDefault(None, 1066); /* 1066 */\n```\n\n----------------------------------------\n\nTITLE: Creating DataView from ArrayBuffer in ReScript\nDESCRIPTION: Functions to create a DataView from an ArrayBuffer, with optional offset and length parameters.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array-2_data-view.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\nlet make: Js_typed_array2.array_buffer => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromBuffer: Js_typed_array2.array_buffer => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromBufferOffset: (Js_typed_array2.array_buffer, int) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromBufferRange: (Js_typed_array2.array_buffer, ~offset: int, ~length: int) => t\n```\n\n----------------------------------------\n\nTITLE: Mapping Vector in ReScript\nDESCRIPTION: Applies a function to each element of a vector, creating a new vector with the results.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/vector.mdx#2025-04-18_snippet_9\n\nLANGUAGE: ReScript\nCODE:\n```\nlet map: ((. 'a) => 'b, t('a)) => t('b);\n```\n\n----------------------------------------\n\nTITLE: Defining Undefined Value for Null_undefined in ReScript\nDESCRIPTION: Function signature for 'undefined', which represents the undefined value of type Js.null_undefined('a).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/null-undefined.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet undefined: t<'a>\n```\n\n----------------------------------------\n\nTITLE: Creating Js.t Objects with Functions in ReScript\nDESCRIPTION: Demonstrates how to declare and use a function that creates Js.t objects, allowing for optional fields and dynamic object creation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/reason-compiler/latest/object-2.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reason\nCODE:\n```\n[@bs.obj] external route: (\n  ~_method:string,\n  ~path:string,\n  ~action:(list(string) => unit),\n  ~options:Js.t({..})=?,\n  unit\n) => _ = \"\";\n\nlet homeRoute = route(~_method=\"GET\", ~path=\"/\", ~action=(_ => Js.log(\"Home\")), ());\n```\n\n----------------------------------------\n\nTITLE: Converting Date to Time String in ReScript\nDESCRIPTION: Converts a Date object to a string with only the time portion in the current locale and time zone. Shows time with timezone information.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/date.mdx#2025-04-18_snippet_76\n\nLANGUAGE: rescript\nCODE:\n```\nlet toTimeString: t => string\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.Date.toTimeString(exampleDate) == \"22:30:54 GMT+0100 (Central European Standard Time)\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Euler's Number in ReScript\nDESCRIPTION: Constant for Euler's number (approximately 2.718281828459045), equivalent to JavaScript's Math.E.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/math.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reasonml\nCODE:\n```\nlet _E: float;\n```\n\n----------------------------------------\n\nTITLE: Compiling Option to JavaScript Undefined\nDESCRIPTION: Shows how ReScript compiles Option types to JavaScript, with None becoming undefined.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/null-undefined-option.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ReScript\nCODE:\n```\nlet x = None\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar x;\n```\n\n----------------------------------------\n\nTITLE: Checking Membership by Reference in ReScript\nDESCRIPTION: Checks if an element exists in a vector using JavaScript's strict equality (===).\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/vector.mdx#2025-04-18_snippet_5\n\nLANGUAGE: ReScript\nCODE:\n```\nlet memByRef: ('a, t('a)) => bool;\n```\n\n----------------------------------------\n\nTITLE: Comparing Option Values in ReScript\nDESCRIPTION: Function to compare two option values using a custom equality function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/option.mdx#2025-04-18_snippet_6\n\nLANGUAGE: reason\nCODE:\n```\nlet equal: ((. 'a, 'b) => bool, option('a), option('b)) => bool;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet clockEqual = (. a, b) => (a mod 12 == b mod 12);\nJs.Option.equal(clockEqual, Some(3), Some(15)) == true;\nJs.Option.equal(clockEqual, Some(3), Some(16)) == false;\nJs.Option.equal(clockEqual, Some(3), None) == false;\nJs.Option.equal(clockEqual, None, Some(15)) == false;\nJs.Option.equal(clockEqual, None, None) == true;\n```\n\n----------------------------------------\n\nTITLE: String Concatenation Operations in ReScript\nDESCRIPTION: Functions for string concatenation with single strings and arrays of strings.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/string.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet concat: (t, t) => t\nlet concatMany: (array<t>, t) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.String.concat(\"bell\", \"cow\") == \"cowbell\"\nJs.String.concatMany([\"2nd\", \"3rd\", \"4th\"], \"1st\") == \"1st2nd3rd4th\"\n```\n\n----------------------------------------\n\nTITLE: Dictionary Creation from Array\nDESCRIPTION: Type signature and example for creating dictionary from array of pairs.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/dict.mdx#2025-04-18_snippet_12\n\nLANGUAGE: res\nCODE:\n```\nlet fromArray: array<(key, 'a)> => t<'a>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet capitals2 = Js.Dict.fromArray([(\"Germany\", \"Berlin\"), (\"Burkina Faso\", \"Ouagadougou\")])\n```\n\n----------------------------------------\n\nTITLE: Converting Undefined to Option in ReScript\nDESCRIPTION: Maps Js.undefined('a) to option('a). a becomes Some(a), and empty becomes None.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/undefined.mdx#2025-04-18_snippet_11\n\nLANGUAGE: reasonml\nCODE:\n```\nlet toOption: t('a) => option('a);\n```\n\n----------------------------------------\n\nTITLE: Checking Any Element (Curried) in ReScript MapInt Module\nDESCRIPTION: Function signature for checking if any element satisfies a curried predicate.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/map-int.mdx#2025-04-18_snippet_18\n\nLANGUAGE: rescript\nCODE:\n```\nlet some: (t<'v>, (key, 'v) => bool) => bool\n```\n\n----------------------------------------\n\nTITLE: Checking if string array is sorted in ReScript\nDESCRIPTION: Function to check if a string array is sorted in non-strict increasing order.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/sort-array-string.mdx#2025-04-18_snippet_2\n\nLANGUAGE: ReScript\nCODE:\n```\nlet isSorted: array(element) => bool;\n```\n\n----------------------------------------\n\nTITLE: Vector Indexed Map Operation\nDESCRIPTION: Maps vector elements with index using a transformation function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/vector.mdx#2025-04-18_snippet_10\n\nLANGUAGE: res\nCODE:\n```\nlet mapi: ((. int, 'a) => 'b, t<'a>) => t<'b>\n```\n\n----------------------------------------\n\nTITLE: ReScript Type Test Function Signature\nDESCRIPTION: Function signature for testing if a value matches a given type.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/types.mdx#2025-04-18_snippet_6\n\nLANGUAGE: reason\nCODE:\n```\nlet test: ('a, t('b)) => bool;\n```\n\n----------------------------------------\n\nTITLE: Dictionary Values Operation\nDESCRIPTION: Type signature and example for getting all values as array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/dict.mdx#2025-04-18_snippet_10\n\nLANGUAGE: res\nCODE:\n```\nlet values: t<'a> => array<'a>\n```\n\nLANGUAGE: res\nCODE:\n```\nJs.Dict.values(ages) == [30, 22, 49]\n```\n\n----------------------------------------\n\nTITLE: Converting a HashSetString to an array\nDESCRIPTION: Creates an array containing all the string keys from the HashSetString.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/hash-set-string.mdx#2025-04-18_snippet_15\n\nLANGUAGE: res\nCODE:\n```\nlet toArray: t => array<key>\n```\n\n----------------------------------------\n\nTITLE: MutableMap Iteration Functions\nDESCRIPTION: Functions for iterating over map contents and transforming elements\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/belt/mutable-map.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet forEachU: (t<'k, 'a, 'id>, (. 'k, 'a) => unit) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet forEach: (t<'k, 'a, 'id>, ('k, 'a) => unit) => unit\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduceU: (t<'k, 'a, 'id>, 'b, (. 'b, 'k, 'a) => 'b) => 'b\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet reduce: (t<'k, 'a, 'id>, 'b, ('b, 'k, 'a) => 'b) => 'b\n```\n\n----------------------------------------\n\nTITLE: Fill Float32Array with Value\nDESCRIPTION: Fills all elements of the Float32Array with the specified value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-32-array.mdx#2025-04-18_snippet_12\n\nLANGUAGE: rescript\nCODE:\n```\nlet fillInPlace: (elt, t) => t;\n```\n\n----------------------------------------\n\nTITLE: Character Code At Position\nDESCRIPTION: Function signature for getting the character code at a specific position.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/string-2.mdx#2025-04-18_snippet_9\n\nLANGUAGE: res\nCODE:\n```\nlet charCodeAt: (t, int) => float\n```\n\n----------------------------------------\n\nTITLE: Simple Option Type Compilation\nDESCRIPTION: Examples showing how simple option types compile to JavaScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/null-undefined-option.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet x = Some(5)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar x = 5;\n```\n\n----------------------------------------\n\nTITLE: Dictionary Set Operation\nDESCRIPTION: Type signature for setting key-value pairs in the dictionary.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/dict.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rescript\nCODE:\n```\nlet set: (t<'a>, key, 'a) => unit\n```\n\n----------------------------------------\n\nTITLE: Slicing TypedArray from Index in ReScript\nDESCRIPTION: Function signature for extracting a section of a Uint8ClampedArray starting from a specified index to the end.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array-2_uint-8-clamped-array.mdx#2025-04-18_snippet_27\n\nLANGUAGE: res\nCODE:\n```\nlet sliceFrom: (int, t) => t\n```\n\n----------------------------------------\n\nTITLE: Stringifying JSON Values in ReScript\nDESCRIPTION: Function signature for converting a JSON value into a string representation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/json.mdx#2025-04-18_snippet_24\n\nLANGUAGE: reason\nCODE:\n```\nlet stringify: t => string;\n```\n\n----------------------------------------\n\nTITLE: Option Type Example Usage\nDESCRIPTION: Example showing how to create an Option type with a string value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/option.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reason\nCODE:\n```\nlet someString: option(string) = Some(\"foo\");\n```\n\n----------------------------------------\n\nTITLE: Defining Promise type in ReScript\nDESCRIPTION: Defines the generic promise type that can hold a value of type 'a.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/promise.mdx#2025-04-18_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\ntype t(+'a);\n```\n\n----------------------------------------\n\nTITLE: Adding JSX v4 Configuration in bsconfig.json\nDESCRIPTION: Configuration to add to bsconfig.json when migrating to JSX v4.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/migrate-react.mdx#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsx\": { \"version\": 4 }\n}\n```\n\n----------------------------------------\n\nTITLE: File Name Accessor\nDESCRIPTION: Function signature for accessing the file name where the exception occurred.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/exn.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rescript\nCODE:\n```\nlet fileName: t => option<string>\n```\n\n----------------------------------------\n\nTITLE: List Count By Function Signature\nDESCRIPTION: Function to count elements in a list that satisfy a predicate function.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/list.mdx#2025-04-18_snippet_18\n\nLANGUAGE: ReScript\nCODE:\n```\nlet countBy: ((. 'a) => bool, list('a)) => int;\n```\n\n----------------------------------------\n\nTITLE: Accessing the Underlying Buffer\nDESCRIPTION: Returns the ArrayBuffer associated with the Uint8Array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-8-array.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rescript\nCODE:\n```\nlet buffer: t => Js_typed_array.array_buffer\n```\n\n----------------------------------------\n\nTITLE: Converting UInt32Array to string\nDESCRIPTION: Defines a function that returns a string representing the typed array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_30\n\nLANGUAGE: rescript\nCODE:\n```\nlet toString: t => string\n```\n\n----------------------------------------\n\nTITLE: Deprecated Ceiling Function in ReScript\nDESCRIPTION: Deprecated function that should be replaced with unsafe_ceil_int.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/math.mdx#2025-04-18_snippet_21\n\nLANGUAGE: reasonml\nCODE:\n```\nlet unsafe_ceil: float => int;\n```\n\n----------------------------------------\n\nTITLE: Basic Array Operations\nDESCRIPTION: Core operations for accessing and modifying array elements\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_1\n\nLANGUAGE: reason\nCODE:\n```\nlet unsafe_get: (t, int) => elt;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet unsafe_set: (t, int, elt) => unit;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet buffer: t => Js_typed_array.array_buffer;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet byteLength: t => int;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet byteOffset: t => int;\n```\n\nLANGUAGE: reason\nCODE:\n```\nlet length: t => int;\n```\n\n----------------------------------------\n\nTITLE: Getting ArrayBuffer Length in ReScript\nDESCRIPTION: Function signature for retrieving the byte length of an ArrayBuffer.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array-2_array-buffer.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet byteLength: t => int\n```\n\n----------------------------------------\n\nTITLE: Creating Int8Array instances in ReScript\nDESCRIPTION: Functions for creating new Int8Array instances from various sources.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_int-8-array.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\nlet _BYTES_PER_ELEMENT: int\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet make: array<elt> => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromBuffer: Js_typed_array.array_buffer => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromBufferOffset: (Js_typed_array.array_buffer, int) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromBufferRange: (Js_typed_array.array_buffer, ~offset: int, ~length: int) => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet fromLength: int => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nlet from: Js_typed_array.array_like<elt> => t\n```\n\n----------------------------------------\n\nTITLE: Using Type Escape Hatch in ReScript\nDESCRIPTION: Shows how to use the type escape hatch in ReScript to perform unsafe type conversions when necessary.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/type.mdx#2025-04-18_snippet_10\n\nLANGUAGE: ReScript\nCODE:\n```\nexternal myShadyConversion: myType1 => myType2 = \"%identity\"\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration for GenType Integration\nDESCRIPTION: Required tsconfig.json settings to ensure TypeScript can work with the generated JavaScript files.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v12.0.0/typescript-integration.mdx#2025-04-18_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"allowJs\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating JSON String Value in ReScript\nDESCRIPTION: Function signature for creating a JSON string value from a ReScript string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/json.mdx#2025-04-18_snippet_12\n\nLANGUAGE: reason\nCODE:\n```\nlet string: string => t;\n```\n\n----------------------------------------\n\nTITLE: Vector Set Element Operation\nDESCRIPTION: Sets an element at a specified index in the vector.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/vector.mdx#2025-04-18_snippet_15\n\nLANGUAGE: res\nCODE:\n```\nlet set: (t<'a>, int, 'a) => unit\n```\n\n----------------------------------------\n\nTITLE: String Concatenation\nDESCRIPTION: Function signature for concatenating two strings.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/string-2.mdx#2025-04-18_snippet_11\n\nLANGUAGE: res\nCODE:\n```\nlet concat: (t, t) => t\n```\n\n----------------------------------------\n\nTITLE: Vector Get Element Operation\nDESCRIPTION: Retrieves an element at a specified index in the vector.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/vector.mdx#2025-04-18_snippet_14\n\nLANGUAGE: res\nCODE:\n```\nlet get: (t<'a>, int) => 'a\n```\n\n----------------------------------------\n\nTITLE: Copying UInt32Array\nDESCRIPTION: Defines a function that creates a copy of the typed array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/typed-array_uint-32-array.mdx#2025-04-18_snippet_26\n\nLANGUAGE: rescript\nCODE:\n```\nlet copy: t => t\n```\n\n----------------------------------------\n\nTITLE: Dictionary Map Operation\nDESCRIPTION: Function signature for mapping dictionary values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/dict.mdx#2025-04-18_snippet_21\n\nLANGUAGE: rescript\nCODE:\n```\nlet map: ((. 'a) => 'b, t<'a>) => t<'b>\n```\n\n----------------------------------------\n\nTITLE: Resolving a Promise in ReScript\nDESCRIPTION: Creates a promise that resolves with the given value.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/promise.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reason\nCODE:\n```\nlet resolve: 'a => t('a);\n```\n\n----------------------------------------\n\nTITLE: Array String Conversion Methods\nDESCRIPTION: Functions to convert the array to string representations.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/typed-array_uint-8-clamped-array.mdx#2025-04-18_snippet_6\n\nLANGUAGE: res\nCODE:\n```\nlet join: t => string\n```\n\nLANGUAGE: res\nCODE:\n```\nlet joinWith: (string, t) => string\n```\n\nLANGUAGE: res\nCODE:\n```\nlet toString: t => string\n```\n\nLANGUAGE: res\nCODE:\n```\nlet toLocaleString: t => string\n```\n\n----------------------------------------\n\nTITLE: Dictionary Unsafe Get Operation\nDESCRIPTION: Type signature for directly retrieving values without safety checks.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/dict.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rescript\nCODE:\n```\nlet unsafeGet: (t<'a>, key) => 'a\n```\n\n----------------------------------------\n\nTITLE: Shuffling Arrays in ReScript\nDESCRIPTION: Randomly re-orders the items in the array in place.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/array.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ReScript\nCODE:\n```\nlet shuffleInPlace: array<'a> => unit\n```\n\n----------------------------------------\n\nTITLE: Rejecting a Promise in ReScript\nDESCRIPTION: Creates a promise that rejects with the given exception.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/promise.mdx#2025-04-18_snippet_4\n\nLANGUAGE: reason\nCODE:\n```\nlet reject: exn => t('a);\n```\n\n----------------------------------------\n\nTITLE: Installing ReScript React Package\nDESCRIPTION: NPM command to install the ReScript React package.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.10.0/installation.mdx#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @rescript/react\n```\n\n----------------------------------------\n\nTITLE: Copy Array\nDESCRIPTION: Creates a new copy of the entire array.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/typed-array-2_float-64-array.mdx#2025-04-18_snippet_26\n\nLANGUAGE: reason\nCODE:\n```\nlet copy: t => t;\n```\n\n----------------------------------------\n\nTITLE: Migrating React.Context from JSX v3 to v4\nDESCRIPTION: Example of how to migrate React.Context usage from JSX v3 to v4.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/v0.11.0/migrate-react.mdx#2025-04-18_snippet_7\n\nLANGUAGE: res\nCODE:\n```\nmodule Context = {\n  let context = React.createContext(() => ())\n\n  module Provider = {\n    let provider = React.Context.provider(context)\n\n    @react.component\n    let make = (~value, ~children) => {\n      React.createElement(provider, {\"value\": value, \"children\": children}) // Error\n    }\n  }\n}\n```\n\nLANGUAGE: res\nCODE:\n```\nmodule Context = {\n  let context = React.createContext(() => ())\n\n  module Provider = {\n    let make = React.Context.provider(context)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JavaScript Object Value Type in ReScript\nDESCRIPTION: Type definition for JavaScript object values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/types.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\ntype obj_val\n```\n\n----------------------------------------\n\nTITLE: Converting Float to Exponential Notation with Custom Precision\nDESCRIPTION: Function that formats a float using exponential notation with a specified number of digits after the decimal point.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/js/float.mdx#2025-04-18_snippet_10\n\nLANGUAGE: re\nCODE:\n```\nlet toExponentialWithPrecision: (float, ~digits: int) => string;\n```\n\n----------------------------------------\n\nTITLE: Compiling a Single ReScript File\nDESCRIPTION: Demonstrates using bsc to compile a single ReScript file to JavaScript. Shows the command and resulting JavaScript output with the Fibonacci implementation.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/try.mdx#2025-04-18_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n❯ bsc MyFile.res\n// Generated by ReScript, PLEASE EDIT WITH CARE\n'use strict';\n\n\nfunction fib(n) {\n  if (n === 0 || n === 1) {\n    return n;\n  } else {\n    return fib(n - 1 | 0) + fib(n - 2 | 0) | 0;\n  }\n}\n\nconsole.log(fib(0));\n\nexports.fib = fib;\n/*  Not a pure module */\n```\n\n----------------------------------------\n\nTITLE: Test Function Signature in ReScript\nDESCRIPTION: Function signature for testing Js.null_undefined values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/null-undefined.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rescript\nCODE:\n```\nlet test: t<'a> => bool\n```\n\n----------------------------------------\n\nTITLE: Key and Value Operations\nDESCRIPTION: Functions for accessing and manipulating map keys and values.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/belt/mutable-map-int.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\nlet minKey: t<'a> => option<key>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet minKeyUndefined: t<'a> => Js.undefined<key>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet maxKey: t<'a> => option<key>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet maxKeyUndefined: t<'a> => Js.undefined<key>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet minimum: t<'a> => option<(key, 'a)>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet minUndefined: t<'a> => Js.undefined<(key, 'a)>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet maximum: t<'a> => option<(key, 'a)>\n```\n\nLANGUAGE: res\nCODE:\n```\nlet maxUndefined: t<'a> => Js.undefined<(key, 'a)>\n```\n\n----------------------------------------\n\nTITLE: Alias for Converting Null_undefined to Option in ReScript\nDESCRIPTION: Function signature for 'to_opt', which is likely an alias for 'toOption'.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/null-undefined.mdx#2025-04-18_snippet_13\n\nLANGUAGE: rescript\nCODE:\n```\nlet to_opt: t<'a> => option<'a>\n```\n\n----------------------------------------\n\nTITLE: Multiple Character Code String Creation\nDESCRIPTION: Function signature for creating a string from multiple character codes.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/string.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\nlet fromCharCodeMany: array<int> => t\n```\n\n----------------------------------------\n\nTITLE: Checking strictly sorted length of string array in ReScript\nDESCRIPTION: Function to determine the strictly sorted length of a string array. Returns a positive integer for increasing order and a negative integer for decreasing order.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/sort-array-string.mdx#2025-04-18_snippet_1\n\nLANGUAGE: ReScript\nCODE:\n```\nlet strictlySortedLength: array(element) => int;\n```\n\n----------------------------------------\n\nTITLE: File-level JSX Configuration\nDESCRIPTION: Example of using @@jsxConfig to set different JSX versions within a file\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/react/latest/migrate-react.mdx#2025-04-18_snippet_3\n\nLANGUAGE: res\nCODE:\n```\n@@jsxConfig({ version: 4, mode: \"automatic\" })\n\nmodule Wrapper = {\n  module R1 = {\n    @react.component  // V4 and new _jsx transform\n    let make = () => body\n  }\n\n  @@jsxConfig({ version: 4, mode: \"classic\" })\n\n  module R2 = {\n    @react.component  // V4 with `React.createElement`\n    let make = () => body\n  }\n}\n\n@@jsxConfig({ version: 3 })\n\n@react.component  // V3\nlet make = () => body\n```\n\n----------------------------------------\n\nTITLE: Multiple Code Points to String\nDESCRIPTION: Function signature for creating a string from multiple Unicode code points.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v10.0.0/api/js/string-2.mdx#2025-04-18_snippet_5\n\nLANGUAGE: res\nCODE:\n```\nlet fromCodePointMany: array<int> => t\n```\n\n----------------------------------------\n\nTITLE: Performing Floating Point Division in ReScript\nDESCRIPTION: This snippet demonstrates the use of the '/.' operator for floating point division in ReScript. It divides 3.0 by 2.5 and assigns the result to a variable.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/operators_float_division.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\nlet result = 3.0 /. 2.5\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar result = 3.0 / 2.5;\n```\n\n----------------------------------------\n\nTITLE: Using toUpperCase function in ReScript\nDESCRIPTION: Converts a string to uppercase using locale-insensitive case mappings. Transforms characters based on the Unicode Character Database rules, which may expand character count.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/string-2.mdx#2025-04-18_snippet_32\n\nLANGUAGE: rescript\nCODE:\n```\nlet toUpperCase: t => t\n```\n\nLANGUAGE: rescript\nCODE:\n```\nJs.String2.toUpperCase(\"abc\") == \"ABC\"\nJs.String2.toUpperCase(`Straße`) == `STRASSE`\nJs.String2.toUpperCase(`πς`) == `ΠΣ`\n```\n\n----------------------------------------\n\nTITLE: Logging Module Name with __MODULE__ in ReScript\nDESCRIPTION: This snippet demonstrates how to use the __MODULE__ special value to log the module name of the current file. It's important to note that __MODULE__ returns the name of the file, not nested modules.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/specialvalues_module.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ReScript\nCODE:\n```\n__MODULE__->Console.log\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nconsole.log(\"Testmodule\");\n```\n\n----------------------------------------\n\nTITLE: Clearing HashMap in ReScript\nDESCRIPTION: Removes all entries from the HashMap.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-map-string.mdx#2025-04-18_snippet_3\n\nLANGUAGE: reasonml\nCODE:\n```\nlet clear: t('b) => unit;\n```\n\nLANGUAGE: reasonml\nCODE:\n```\nlet hMap = Belt.HashMap.String.fromArray([|(\"1\", \"1\")|])  \nBelt.HashMap.String.clear(hMap)\nBelt.HashMap.String.isEmpty(hMap) == true;\n```\n\n----------------------------------------\n\nTITLE: Accessing exception message in ReScript\nDESCRIPTION: Function signature for retrieving the message of a JavaScript exception as an optional string.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/api/js/exn.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rescript\nCODE:\n```\nlet message: t => option<string>\n```\n\n----------------------------------------\n\nTITLE: Global Value Binding in ReScript\nDESCRIPTION: Shows how to bind to global JavaScript values using the @val external decorator.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v9.0.0/interop-cheatsheet.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\n@val external setTimeout: (unit => unit, int) => float = \"setTimeout\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Empty output\n```\n\n----------------------------------------\n\nTITLE: Performing Floating Point Addition in ReScript\nDESCRIPTION: This snippet demonstrates how to add two floating point numbers in ReScript using the +. operator. The result is a floating point number.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/operators_float_addition.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rescript\nCODE:\n```\nlet result = 1.3 +. 0.5\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = 1.3 + 0.5;\n```\n\n----------------------------------------\n\nTITLE: Unsafe Type Casting in ReScript\nDESCRIPTION: Demonstrates the use of the %identity external for unsafe type casting between int and float in ReScript.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/interop-cheatsheet.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rescript\nCODE:\n```\nexternal convertToFloat: int => float = \"%identity\"\nlet age = 10\nlet gpa = 2.1 +. convertToFloat(age)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar age = 10;\nvar gpa = 2.1 + 10;\n```\n\n----------------------------------------\n\nTITLE: Converting Polymorphic Variant to Integer in ReScript\nDESCRIPTION: Shows how to coerce a polymorphic variant bit type to an integer value using the :> operator.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/misc_docs/syntax/operators_type_coercion.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rescript\nCODE:\n```\ntype bit = [#0 | #1]\nlet bit: bit = #1\nlet value = (bit :> int)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar bit = 1;\nvar value = 1;\n```\n\n----------------------------------------\n\nTITLE: React Function Component for Build Configuration Schema Page\nDESCRIPTION: This function component defines the main page for the build configuration schema documentation. It renders the Docson component with a 'master' tag parameter.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/manual/v11.0.0/build-configuration-schema.mdx#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function BuildConfigurationSchemaPage() {\n  return <Docson tag=\"master\" />;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Generator Rules for OCamlYacc in ReScript\nDESCRIPTION: Configuration example showing how to set up OCamlYacc generator in ReScript's build system. Defines the generator command and specifies input/output file relationships for generating parser code from .mly files.\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/pages/docs/reason-compiler/latest/build-advanced.mdx#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"generators\": [\n    {\n      \"name\": \"ocamlyacc\",\n      \"command\": \"ocamlyacc $in\"\n    }\n  ],\n  \"sources\": {\n    \"dir\": \"src\",\n    \"generators\": [\n      {\n        \"name\": \"ocamlyacc\",\n        \"edge\": [\"test.ml\", \"test.mli\", \":\", \"test.mly\"]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing ReScript 10.1\nDESCRIPTION: NPM commands for installing ReScript version 10.1\nSOURCE: https://github.com/rescript-lang/rescript-lang.org.git/blob/master/_blogposts/2023-02-02-release-10-1.mdx#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install rescript\n\n# or\n\nnpm install rescript@10.1\n```"
  }
]