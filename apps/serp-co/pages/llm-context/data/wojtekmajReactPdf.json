[
  {
    "owner": "wojtekmaj",
    "repo": "react-pdf",
    "content": "TITLE: Configuring Next.js for React-PDF\nDESCRIPTION: Configuration for Next.js to resolve canvas alias and handle PDF.js worker in both standard and Turbopack environments.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/README.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  webpack: (config) => {\n    config.resolve.alias.canvas = false;\n\n    return config;\n  },\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  experimental: {\n    turbo: {\n      resolveAlias: {\n        canvas: './empty-module.ts',\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic React-PDF Implementation with Page Navigation in TypeScript/React\nDESCRIPTION: This example demonstrates basic usage of React-PDF components with React hooks to track the number of pages and current page. It renders a PDF document and provides simple navigation information.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/packages/react-pdf/README.md#2025-04-11_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from 'react';\nimport { Document, Page } from 'react-pdf';\n\nfunction MyApp() {\n  const [numPages, setNumPages] = useState<number>();\n  const [pageNumber, setPageNumber] = useState<number>(1);\n\n  function onDocumentLoadSuccess({ numPages }: { numPages: number }): void {\n    setNumPages(numPages);\n  }\n\n  return (\n    <div>\n      <Document file=\"somefile.pdf\" onLoadSuccess={onDocumentLoadSuccess}>\n        <Page pageNumber={pageNumber} />\n      </Document>\n      <p>\n        Page {pageNumber} of {numPages}\n      </p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PDF.js Worker with Import Method in TypeScript\nDESCRIPTION: This code sets up the PDF.js worker by configuring its source using import.meta.url. This is the recommended approach for most applications.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/packages/react-pdf/README.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { pdfjs } from 'react-pdf';\n\npdfjs.GlobalWorkerOptions.workerSrc = new URL(\n  'pdfjs-dist/build/pdf.worker.min.mjs',\n  import.meta.url,\n).toString();\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of React-PDF Components\nDESCRIPTION: Example of using React-PDF components to display a PDF document with page navigation.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/README.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useState } from 'react';\nimport { Document, Page } from 'react-pdf';\n\nfunction MyApp() {\n  const [numPages, setNumPages] = useState<number>();\n  const [pageNumber, setPageNumber] = useState<number>(1);\n\n  function onDocumentLoadSuccess({ numPages }: { numPages: number }): void {\n    setNumPages(numPages);\n  }\n\n  return (\n    <div>\n      <Document file=\"somefile.pdf\" onLoadSuccess={onDocumentLoadSuccess}>\n        <Page pageNumber={pageNumber} />\n      </Document>\n      <p>\n        Page {pageNumber} of {numPages}\n      </p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PDF.js Worker in React-PDF\nDESCRIPTION: Different methods to configure the PDF.js worker, including importing the worker, using external CDN, and supporting legacy browsers.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/README.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { pdfjs } from 'react-pdf';\n\npdfjs.GlobalWorkerOptions.workerSrc = new URL(\n  'pdfjs-dist/build/pdf.worker.min.mjs',\n  import.meta.url,\n).toString();\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { pdfjs } from 'react-pdf';\n\npdfjs.GlobalWorkerOptions.workerSrc = `//unpkg.com/pdfjs-dist@${pdfjs.version}/build/pdf.worker.min.mjs`;\n```\n\nLANGUAGE: typescript\nCODE:\n```\npdfjs.GlobalWorkerOptions.workerSrc = new URL(\n  'pdfjs-dist/legacy/build/pdf.worker.min.mjs',\n  import.meta.url,\n).toString();\n```\n\n----------------------------------------\n\nTITLE: Configuring PDF.js Worker with External CDN in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure the PDF.js worker by loading it from an external CDN (unpkg). This is useful when you don't want to bundle the worker with your application.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/packages/react-pdf/README.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { pdfjs } from 'react-pdf';\n\npdfjs.GlobalWorkerOptions.workerSrc = `//unpkg.com/pdfjs-dist@${pdfjs.version}/build/pdf.worker.min.mjs`;\n```\n\n----------------------------------------\n\nTITLE: React PDF Page Component Basic Usage\nDESCRIPTION: Shows the basic implementation of the Page component within a Document component. The Page component can also work standalone with a pdf prop obtained from Document's onLoadSuccess callback, though some advanced features may be limited.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/packages/react-pdf/README.md#2025-04-11_snippet_39\n\nLANGUAGE: jsx\nCODE:\n```\n<Document>\n  <Page />\n</Document>\n```\n\n----------------------------------------\n\nTITLE: Handling Successful Document Load in React-PDF\nDESCRIPTION: Example of an onLoadSuccess callback function for React-PDF. This function is called when a document is successfully loaded, providing access to the loaded PDF object.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/README.md#2025-04-11_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\n(pdf) => alert('Loaded a file with ' + pdf.numPages + ' pages!')\n```\n\n----------------------------------------\n\nTITLE: Handling Successful PDF Load in React-PDF\nDESCRIPTION: A callback function executed when a PDF document is successfully loaded. It receives the loaded PDF object which contains document information.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/packages/react-pdf/README.md#2025-04-11_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\n(pdf) => alert('Loaded a file with ' + pdf.numPages + ' pages!')\n```\n\n----------------------------------------\n\nTITLE: Configuring cMaps for Non-Latin Characters in React-PDF\nDESCRIPTION: Configuration examples for copying cMaps to support non-Latin characters in PDFs, using Vite and Webpack.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/README.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport path from 'node:path';\nimport { createRequire } from 'node:module';\n\nimport { defineConfig, normalizePath } from 'vite';\nimport { viteStaticCopy } from 'vite-plugin-static-copy';\n\nconst require = createRequire(import.meta.url);\n\nconst pdfjsDistPath = path.dirname(require.resolve('pdfjs-dist/package.json'));\nconst cMapsDir = normalizePath(path.join(pdfjsDistPath, 'cmaps'));\n\nexport default defineConfig({\n  plugins: [\n    viteStaticCopy({\n      targets: [\n        {\n          src: cMapsDir,\n          dest: '',\n        },\n      ],\n    }),\n  ]\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport path from 'node:path';\nimport CopyWebpackPlugin from 'copy-webpack-plugin';\n\nconst pdfjsDistPath = path.dirname(require.resolve('pdfjs-dist/package.json'));\nconst cMapsDir = path.join(pdfjsDistPath, 'cmaps');\n\nmodule.exports = {\n  plugins: [\n    new CopyWebpackPlugin({\n      patterns: [\n        {\n          from: cMapsDir,\n          to: 'cmaps/'\n        },\n      ],\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Specifying PDF File Sources in React-PDF\nDESCRIPTION: Examples of different ways to provide PDF files to the Document component using the file prop, including URL, imported file, or parameter object.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/packages/react-pdf/README.md#2025-04-11_snippet_26\n\nLANGUAGE: jsx\nCODE:\n```\n\"https://example.com/sample.pdf\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport importedPdf from '../static/sample.pdf'\n```\n\nLANGUAGE: jsx\nCODE:\n```\n{ url: 'https://example.com/sample.pdf' }\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for PDF.js cMaps Support\nDESCRIPTION: This configuration adds vite-plugin-static-copy to copy PDF.js cMaps to your build output. This is necessary for properly rendering PDFs with non-latin characters.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/packages/react-pdf/README.md#2025-04-11_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n+import path from 'node:path';\n+import { createRequire } from 'node:module';\n\n-import { defineConfig } from 'vite';\n+import { defineConfig, normalizePath } from 'vite';\n+import { viteStaticCopy } from 'vite-plugin-static-copy';\n\n+const require = createRequire(import.meta.url);\n+\n+const pdfjsDistPath = path.dirname(require.resolve('pdfjs-dist/package.json'));\n+const cMapsDir = normalizePath(path.join(pdfjsDistPath, 'cmaps'));\n\nexport default defineConfig({\n  plugins: [\n+   viteStaticCopy({\n+     targets: [\n+       {\n+         src: cMapsDir,\n+         dest: '',\n+       },\n+     ],\n+   }),\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring PDF.js Options in React-PDF\nDESCRIPTION: An object for passing additional parameters to PDF.js, such as cMapUrl for character maps, custom HTTP headers, and authentication settings.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/packages/react-pdf/README.md#2025-04-11_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\n{ cMapUrl: '/cmaps/' }\n```\n\n----------------------------------------\n\nTITLE: Configuring PDF.js Options in React-PDF\nDESCRIPTION: Example of setting additional PDF.js options in React-PDF. This includes parameters like cMapUrl for character maps and custom HTTP headers for authorization.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/README.md#2025-04-11_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\n{ cMapUrl: '/cmaps/' }\n```\n\n----------------------------------------\n\nTITLE: Handling Load Errors in React-PDF\nDESCRIPTION: Example of an onLoadError callback function for React-PDF. This function is called when an error occurs while loading a document, allowing custom error handling.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/README.md#2025-04-11_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\n(error) => alert('Error while loading document! ' + error.message)\n```\n\n----------------------------------------\n\nTITLE: Importing CSS for PDF Text Layer Support\nDESCRIPTION: This import statement adds the necessary CSS styles to properly display the text layer in PDFs rendered by React-PDF. This is required for text selection functionality.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/packages/react-pdf/README.md#2025-04-11_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'react-pdf/dist/Page/TextLayer.css';\n```\n\n----------------------------------------\n\nTITLE: Handling Page Loading and Rendering Events in React-PDF\nDESCRIPTION: Example callbacks for page loading and rendering events. These functions handle successful page loading, rendering completion, or errors during these processes.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/packages/react-pdf/README.md#2025-04-11_snippet_46\n\nLANGUAGE: JavaScript\nCODE:\n```\n(error) => alert('Error while loading page! ' + error.message)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n(page) => alert('Now displaying a page number ' + page.pageNumber + '!')\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n(error) => alert('Error while loading page! ' + error.message)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n() => alert('Rendered the page!')\n```\n\n----------------------------------------\n\nTITLE: Handling Password-Protected PDFs in React-PDF\nDESCRIPTION: A callback function for when a password-protected PDF is loaded. It receives a callback function that should be called with the password.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/packages/react-pdf/README.md#2025-04-11_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\n(callback) => callback('s3cr3t_p4ssw0rd')\n```\n\n----------------------------------------\n\nTITLE: Handling Text Layer Events in React-PDF\nDESCRIPTION: Example callback functions for text layer loading and rendering events. These functions handle text layer items being successfully loaded, rendering completion, or errors during these processes.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/packages/react-pdf/README.md#2025-04-11_snippet_45\n\nLANGUAGE: JavaScript\nCODE:\n```\n(error) => alert('Error while loading text layer items! ' + error.message)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n({ items, styles }) => alert('Now displaying ' + items.length + ' text layer items!')\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n(error) => alert('Error while rendering text layer! ' + error.message)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n() => alert('Rendered the text layer!')\n```\n\n----------------------------------------\n\nTITLE: Using inputRef with React-PDF Document Component\nDESCRIPTION: Examples of different ways to pass references to the Document component using the inputRef prop with function, createRef, or useRef.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/packages/react-pdf/README.md#2025-04-11_snippet_28\n\nLANGUAGE: jsx\nCODE:\n```\n(ref) => { this.myDocument = ref; }\n```\n\nLANGUAGE: jsx\nCODE:\n```\nthis.ref = createRef();\n...\ninputRef={this.ref}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nconst ref = useRef();\n...\ninputRef={ref}\n```\n\n----------------------------------------\n\nTITLE: Handling Password-Protected PDFs in React-PDF\nDESCRIPTION: Example of an onPassword callback function for React-PDF. This function is called when a password-protected PDF is loaded, allowing custom password handling.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/README.md#2025-04-11_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\n(callback) => callback('s3cr3t_p4ssw0rd')\n```\n\n----------------------------------------\n\nTITLE: Using References with React PDF Components\nDESCRIPTION: Examples of three different ways to use refs with React PDF components: using a callback function, using createRef, and using the useRef hook.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/packages/react-pdf/README.md#2025-04-11_snippet_51\n\nLANGUAGE: jsx\nCODE:\n```\n(ref) => { this.myOutline = ref; }\n```\n\nLANGUAGE: jsx\nCODE:\n```\nthis.ref = createRef();\n...\ninputRef={this.ref}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nconst ref = useRef();\n...\ninputRef={ref}\n```\n\n----------------------------------------\n\nTITLE: React Ref Creation Examples\nDESCRIPTION: Examples showing different ways to create and use refs with the Page component's inputRef and canvasRef props\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/packages/react-pdf/README.md#2025-04-11_snippet_40\n\nLANGUAGE: jsx\nCODE:\n```\n(ref) => { this.myCanvas = ref; }\n\nthis.ref = createRef();\ninputRef={this.ref}\n\nconst ref = useRef();\ninputRef={ref}\n```\n\n----------------------------------------\n\nTITLE: Importing CSS for PDF Annotation Support\nDESCRIPTION: This import statement adds the necessary CSS styles to properly display annotations in PDFs rendered by React-PDF. This is required for features like links to work correctly.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/packages/react-pdf/README.md#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'react-pdf/dist/Page/AnnotationLayer.css';\n```\n\n----------------------------------------\n\nTITLE: Tracking Load Progress in React-PDF\nDESCRIPTION: Example of an onLoadProgress callback function for React-PDF. This function is called multiple times as the document loads, allowing progress tracking.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/README.md#2025-04-11_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\n({ loaded, total }) => alert('Loading a document: ' + (loaded / total) * 100 + '%')\n```\n\n----------------------------------------\n\nTITLE: Tracking PDF Loading Progress in React-PDF\nDESCRIPTION: A callback function that reports the loading progress of a PDF document. It receives an object with loaded and total bytes, allowing calculation of percentage complete.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/packages/react-pdf/README.md#2025-04-11_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\n({ loaded, total }) => alert('Loading a document: ' + (loaded / total) * 100 + '%')\n```\n\n----------------------------------------\n\nTITLE: Importing Stylesheets for React-PDF Features\nDESCRIPTION: Instructions for importing necessary stylesheets to support annotations and text layer in React-PDF.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/README.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'react-pdf/dist/Page/AnnotationLayer.css';\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'react-pdf/dist/Page/TextLayer.css';\n```\n\n----------------------------------------\n\nTITLE: Handling PDF Load Error in React-PDF\nDESCRIPTION: A callback function triggered when an error occurs while loading a PDF document. It receives the error object as a parameter.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/packages/react-pdf/README.md#2025-04-11_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\n(error) => alert('Error while loading document! ' + error.message)\n```\n\n----------------------------------------\n\nTITLE: Handling Source Error in React-PDF\nDESCRIPTION: A callback function triggered when an error occurs while retrieving the document source from the file prop. It receives the error object.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/packages/react-pdf/README.md#2025-04-11_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\n(error) => alert('Error while retrieving document source! ' + error.message)\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Render Mode in React-PDF\nDESCRIPTION: Example of setting a custom render mode for React-PDF. The renderMode prop can be set to 'canvas', 'custom', or 'none', with 'custom' requiring an additional customRenderer prop.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/README.md#2025-04-11_snippet_24\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"custom\"\n```\n\n----------------------------------------\n\nTITLE: Handling Successful Source Retrieval in React-PDF\nDESCRIPTION: A callback function executed when document source is successfully retrieved from the file prop. It takes no parameters.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/packages/react-pdf/README.md#2025-04-11_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\n() => alert('Document source retrieved!')\n```\n\n----------------------------------------\n\nTITLE: Using React PDF Outline Component Event Handler\nDESCRIPTION: Example of implementing the onItemClick callback for the Outline component to handle navigation when a user clicks on an outline item. The callback receives destination information including page index and number.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/packages/react-pdf/README.md#2025-04-11_snippet_47\n\nLANGUAGE: jsx\nCODE:\n```\n({ dest, pageIndex, pageNumber }) => alert('Clicked an item from page ' + pageNumber + '!')\n```\n\n----------------------------------------\n\nTITLE: React PDF Page Rotation Usage\nDESCRIPTION: Demonstrates the rotation property usage in React PDF. The rotate prop accepts degrees (90, 180, 270) to control document orientation. 90 rotates right, 180 flips upside down, and 270 rotates left. This rotation applies globally, overriding individual page rotation settings.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/packages/react-pdf/README.md#2025-04-11_snippet_38\n\nLANGUAGE: jsx\nCODE:\n```\n<Document rotate={90}>\n  <Page />\n</Document>\n```\n\n----------------------------------------\n\nTITLE: React Outline Component Event Handler\nDESCRIPTION: Example of an event handler for when an outline item is clicked in React PDF component. The handler receives page and destination information.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/README.md#2025-04-11_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\n({ dest, pageIndex, pageNumber }) => alert('Clicked an item from page ' + pageNumber + '!')\n```\n\n----------------------------------------\n\nTITLE: Handling Item Click in React-PDF\nDESCRIPTION: A callback function for when an outline item or thumbnail is clicked in a PDF viewer. It receives an object with destination, page index, and page number information.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/packages/react-pdf/README.md#2025-04-11_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\n({ dest, pageIndex, pageNumber }) => alert('Clicked an item from page ' + pageNumber + '!')\n```\n\n----------------------------------------\n\nTITLE: Rendering Event Handlers\nDESCRIPTION: Callback functions for handling various rendering events including annotation layer, text layer, and general page rendering.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/README.md#2025-04-11_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\n() => alert('Rendered the annotation layer!')\n```\n\nLANGUAGE: javascript\nCODE:\n```\n() => alert('Rendered the page!')\n```\n\nLANGUAGE: javascript\nCODE:\n```\n() => alert('Rendered the text layer!')\n```\n\n----------------------------------------\n\nTITLE: Handling Annotation Loading Events in React-PDF\nDESCRIPTION: Example callback functions for handling annotation loading success and error events. These functions are called when annotations are successfully loaded or when errors occur during annotation rendering.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/packages/react-pdf/README.md#2025-04-11_snippet_43\n\nLANGUAGE: JavaScript\nCODE:\n```\n(annotations) => alert('Now displaying ' + annotations.length + ' annotations!')\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n(error) => alert('Error while loading annotation layer! ' + error.message)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n() => alert('Rendered the annotation layer!')\n```\n\n----------------------------------------\n\nTITLE: Error Handler Function\nDESCRIPTION: Example of an error handler function for annotation loading errors\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/packages/react-pdf/README.md#2025-04-11_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\n(error) => alert('Error while loading annotations! ' + error.message)\n```\n\n----------------------------------------\n\nTITLE: Page Loading Event Handlers\nDESCRIPTION: Callback functions for handling page loading success and failure events.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/README.md#2025-04-11_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\n(error) => alert('Error while loading page! ' + error.message)\n```\n\nLANGUAGE: javascript\nCODE:\n```\n(page) => alert('Now displaying a page number ' + page.pageNumber + '!')\n```\n\n----------------------------------------\n\nTITLE: Handling Structure Tree Events in React-PDF\nDESCRIPTION: Example callbacks for structure tree loading success and error events. These functions are invoked when the PDF structure tree is successfully loaded or encounters an error.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/packages/react-pdf/README.md#2025-04-11_snippet_44\n\nLANGUAGE: JavaScript\nCODE:\n```\n(error) => alert('Error while loading structure tree! ' + error.message)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n(structTree) => alert(JSON.stringify(structTree))\n```\n\n----------------------------------------\n\nTITLE: Handling Success Events in React PDF Outline Component\nDESCRIPTION: Example of implementing the onLoadSuccess callback for the Outline component to handle successful retrieval of the document outline. The callback receives the outline object.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/packages/react-pdf/README.md#2025-04-11_snippet_49\n\nLANGUAGE: jsx\nCODE:\n```\n(outline) => alert('The outline has been successfully retrieved.')\n```\n\n----------------------------------------\n\nTITLE: PDF Annotation Loading Callbacks\nDESCRIPTION: Event handler examples for successful and failed annotation loading operations.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/README.md#2025-04-11_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\n(annotations) => alert('Now displaying ' + annotations.length + ' annotations!')\n```\n\n----------------------------------------\n\nTITLE: Handling Error Events in React PDF Outline Component\nDESCRIPTION: Example of implementing the onLoadError callback for the Outline component to handle errors that occur while retrieving the document outline. The callback receives the error object.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/packages/react-pdf/README.md#2025-04-11_snippet_48\n\nLANGUAGE: jsx\nCODE:\n```\n(error) => alert('Error while retrieving the outline! ' + error.message)\n```\n\n----------------------------------------\n\nTITLE: Text Layer Event Handlers\nDESCRIPTION: Callback functions for handling text layer loading success and failure events.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/README.md#2025-04-11_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\n(error) => alert('Error while loading text layer items! ' + error.message)\n```\n\nLANGUAGE: javascript\nCODE:\n```\n({ items, styles }) => alert('Now displaying ' + items.length + ' text layer items!')\n```\n\n----------------------------------------\n\nTITLE: Configuring React-PDF with CDN-hosted cMaps\nDESCRIPTION: Alternative configuration for the Document component that uses cMaps hosted on an external CDN instead of local files.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/packages/react-pdf/README.md#2025-04-11_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// Outside of React component\nimport { pdfjs } from 'react-pdf';\n\nconst options = {\n  cMapUrl: `https://unpkg.com/pdfjs-dist@${pdfjs.version}/cmaps/`,\n};\n\n// Inside of React component\n<Document options={options} />;\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for PDF.js cMaps Support\nDESCRIPTION: This configuration adds copy-webpack-plugin to copy PDF.js cMaps to your build output. This ensures proper rendering of PDFs with non-latin characters in Webpack-based projects.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/packages/react-pdf/README.md#2025-04-11_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n+import path from 'node:path';\n+import CopyWebpackPlugin from 'copy-webpack-plugin';\n\n+const pdfjsDistPath = path.dirname(require.resolve('pdfjs-dist/package.json'));\n+const cMapsDir = path.join(pdfjsDistPath, 'cmaps');\n\nmodule.exports = {\n  plugins: [\n+   new CopyWebpackPlugin({\n+     patterns: [\n+       {\n+         from: cMapsDir,\n+         to: 'cmaps/'\n+       },\n+     ],\n+   }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for PDF.js Standard Fonts\nDESCRIPTION: Vite configuration using vite-plugin-static-copy to copy PDF.js standard fonts to the build output. This ensures proper rendering of PDFs that use standard fonts.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/README.md#2025-04-11_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n+import path from 'node:path';\n+import { createRequire } from 'node:module';\n\n-import { defineConfig } from 'vite';\n+import { defineConfig, normalizePath } from 'vite';\n+import { viteStaticCopy } from 'vite-plugin-static-copy';\n\n+const require = createRequire(import.meta.url);\n+const standardFontsDir = normalizePath(\n+  path.join(path.dirname(require.resolve('pdfjs-dist/package.json')), 'standard_fonts')\n+);\n\nexport default defineConfig({\n  plugins: [\n+   viteStaticCopy({\n+     targets: [\n+       {\n+         src: standardFontsDir,\n+         dest: '',\n+       },\n+     ],\n+   }),\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring React-PDF Document Component with CDN Standard Fonts\nDESCRIPTION: Alternative approach to using standard fonts from an external CDN instead of bundling them with the application. This utilizes the unpkg CDN to serve standard font files from the pdfjs-dist package.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/README.md#2025-04-11_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n// Outside of React component\nimport { pdfjs } from 'react-pdf';\n\nconst options = {\n  standardFontDataUrl: `https://unpkg.com/pdfjs-dist@${pdfjs.version}/standard_fonts/`,\n};\n\n// Inside of React component\n<Document options={options} />;\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for PDF Standard Fonts\nDESCRIPTION: Webpack configuration that uses copy-webpack-plugin to copy standard fonts from pdfjs-dist to the build output directory.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/packages/react-pdf/README.md#2025-04-11_snippet_19\n\nLANGUAGE: diff\nCODE:\n```\n+import path from 'node:path';\n+import CopyWebpackPlugin from 'copy-webpack-plugin';\n\n+const standardFontsDir = path.join(path.dirname(require.resolve('pdfjs-dist/package.json')), 'standard_fonts');\n\nmodule.exports = {\n  plugins: [\n+   new CopyWebpackPlugin({\n+     patterns: [\n+       {\n+         from: standardFontsDir,\n+         to: 'standard_fonts/'\n+       },\n+     ],\n+   }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for PDF Standard Fonts\nDESCRIPTION: Vite configuration that uses vite-plugin-static-copy to copy standard fonts from pdfjs-dist to the build output directory.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/packages/react-pdf/README.md#2025-04-11_snippet_18\n\nLANGUAGE: diff\nCODE:\n```\n+import path from 'node:path';\n+import { createRequire } from 'node:module';\n\n-import { defineConfig } from 'vite';\n+import { defineConfig, normalizePath } from 'vite';\n+import { viteStaticCopy } from 'vite-plugin-static-copy';\n\n+const require = createRequire(import.meta.url);\n+const standardFontsDir = normalizePath(\n+  path.join(path.dirname(require.resolve('pdfjs-dist/package.json')), 'standard_fonts')\n+);\n\nexport default defineConfig({\n  plugins: [\n+   viteStaticCopy({\n+     targets: [\n+       {\n+         src: standardFontsDir,\n+         dest: '',\n+       },\n+     ],\n+   }),\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring React-PDF Document Component with Local cMaps\nDESCRIPTION: Example of setting up the Document component with options to use local cMaps that have been copied to the build output. This ensures proper rendering of PDFs with various character encodings.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/README.md#2025-04-11_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Outside of React component\nconst options = {\n  cMapUrl: '/cmaps/',\n};\n\n// Inside of React component\n<Document options={options} />;\n```\n\n----------------------------------------\n\nTITLE: Configuring React-PDF Document Component with CDN cMaps\nDESCRIPTION: Alternative approach to using cMaps from an external CDN instead of bundling them with the application. This utilizes the unpkg CDN to serve cMaps files from the pdfjs-dist package.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/README.md#2025-04-11_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// Outside of React component\nimport { pdfjs } from 'react-pdf';\n\nconst options = {\n  cMapUrl: `https://unpkg.com/pdfjs-dist@${pdfjs.version}/cmaps/`,\n};\n\n// Inside of React component\n<Document options={options} />;\n```\n\n----------------------------------------\n\nTITLE: Configuring React-PDF with Local Standard Fonts\nDESCRIPTION: Configuration for the Document component with options to use locally hosted standard fonts. Defines options outside the React component to avoid unnecessary re-renders.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/packages/react-pdf/README.md#2025-04-11_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n// Outside of React component\nconst options = {\n  standardFontDataUrl: '/standard_fonts/',\n};\n\n// Inside of React component\n<Document options={options} />;\n```\n\n----------------------------------------\n\nTITLE: Configuring React-PDF with Local cMaps\nDESCRIPTION: Configuration for the Document component with options to use locally hosted cMaps. Defines options outside the React component to avoid unnecessary re-renders.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/packages/react-pdf/README.md#2025-04-11_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// Outside of React component\nconst options = {\n  cMapUrl: '/cmaps/',\n};\n\n// Inside of React component\n<Document options={options} />;\n```\n\n----------------------------------------\n\nTITLE: Configuring React-PDF Document Component with Local Standard Fonts\nDESCRIPTION: Example of setting up the Document component with options to use local standard fonts that have been copied to the build output. This ensures proper rendering of PDFs that use standard fonts.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/README.md#2025-04-11_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n// Outside of React component\nconst options = {\n  standardFontDataUrl: '/standard_fonts/',\n};\n\n// Inside of React component\n<Document options={options} />;\n```\n\n----------------------------------------\n\nTITLE: Configuring React-PDF with CDN-hosted Standard Fonts\nDESCRIPTION: Alternative configuration for the Document component that uses standard fonts hosted on an external CDN instead of local files.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/packages/react-pdf/README.md#2025-04-11_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n// Outside of React component\nimport { pdfjs } from 'react-pdf';\n\nconst options = {\n  standardFontDataUrl: `https://unpkg.com/pdfjs-dist@${pdfjs.version}/standard_fonts/`,\n};\n\n// Inside of React component\n<Document options={options} />;\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for PDF.js Standard Fonts\nDESCRIPTION: Webpack configuration using copy-webpack-plugin to copy PDF.js standard fonts to the build output directory. This ensures proper rendering of PDFs that use standard fonts.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/README.md#2025-04-11_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n+import path from 'node:path';\n+import CopyWebpackPlugin from 'copy-webpack-plugin';\n\n+const standardFontsDir = path.join(path.dirname(require.resolve('pdfjs-dist/package.json')), 'standard_fonts');\n\nmodule.exports = {\n  plugins: [\n+   new CopyWebpackPlugin({\n+     patterns: [\n+       {\n+         from: standardFontsDir,\n+         to: 'standard_fonts/'\n+       },\n+     ],\n+   }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Copying cMaps Files Using Node.js Script\nDESCRIPTION: A Node.js script that copies cMaps from pdfjs-dist to the project's output folder. This script is useful for bundlers that don't have dedicated plugins for file copying.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/packages/react-pdf/README.md#2025-04-11_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport path from 'node:path';\nimport fs from 'node:fs';\n\nconst pdfjsDistPath = path.dirname(require.resolve('pdfjs-dist/package.json'));\nconst cMapsDir = path.join(pdfjsDistPath, 'cmaps');\n\nfs.cpSync(cMapsDir, 'dist/cmaps/', { recursive: true });\n```\n\n----------------------------------------\n\nTITLE: Copying cMaps with Custom Script in Node.js\nDESCRIPTION: A custom Node.js script to copy cMaps from the pdfjs-dist package to the project's output folder. This is useful when using bundlers that don't have direct support for copying assets.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/README.md#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport path from 'node:path';\nimport fs from 'node:fs';\n\nconst pdfjsDistPath = path.dirname(require.resolve('pdfjs-dist/package.json'));\nconst cMapsDir = path.join(pdfjsDistPath, 'cmaps');\n\nfs.cpSync(cMapsDir, 'dist/cmaps/', { recursive: true });\n```\n\n----------------------------------------\n\nTITLE: Copying Standard Fonts with Custom Script in Node.js\nDESCRIPTION: A custom Node.js script to copy standard fonts from the pdfjs-dist package to the project's output folder, necessary for supporting PDFs that use standard fonts.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/README.md#2025-04-11_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport path from 'node:path';\nimport fs from 'node:fs';\n\nconst pdfjsDistPath = path.dirname(require.resolve('pdfjs-dist/package.json'));\nconst standardFontsDir = path.join(pdfjsDistPath, 'standard_fonts');\n\nfs.cpSync(standardFontsDir, 'dist/standard_fonts/', { recursive: true });\n```\n\n----------------------------------------\n\nTITLE: Copying Standard Fonts Using Node.js Script\nDESCRIPTION: A Node.js script that copies standard fonts from pdfjs-dist to the project's output folder. Similar to the cMaps script, this is for bundlers without dedicated copy plugins.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/packages/react-pdf/README.md#2025-04-11_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport path from 'node:path';\nimport fs from 'node:fs';\n\nconst pdfjsDistPath = path.dirname(require.resolve('pdfjs-dist/package.json'));\nconst standardFontsDir = path.join(pdfjsDistPath, 'standard_fonts');\n\nfs.cpSync(standardFontsDir, 'dist/standard_fonts/', { recursive: true });\n```\n\n----------------------------------------\n\nTITLE: Setting Class Names for React PDF Components\nDESCRIPTION: Examples showing two ways to set custom class names for React PDF components - using a string with space-separated class names or an array of class name strings.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/packages/react-pdf/README.md#2025-04-11_snippet_50\n\nLANGUAGE: jsx\nCODE:\n```\n\"custom-class-name-1 custom-class-name-2\"\n```\n\nLANGUAGE: jsx\nCODE:\n```\n[\"custom-class-name-1\", \"custom-class-name-2\"]\n```\n\n----------------------------------------\n\nTITLE: Script for Copying PDF.js Worker to Output Directory\nDESCRIPTION: This Node.js script copies the PDF.js worker file from node_modules to the project's output directory. This is an alternative approach to importing the worker directly.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/packages/react-pdf/README.md#2025-04-11_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport path from 'node:path';\nimport fs from 'node:fs';\n\nconst pdfjsDistPath = path.dirname(require.resolve('pdfjs-dist/package.json'));\nconst pdfWorkerPath = path.join(pdfjsDistPath, 'build', 'pdf.worker.mjs');\n\nfs.cpSync(pdfWorkerPath, './dist/pdf.worker.mjs', { recursive: true });\n```\n\n----------------------------------------\n\nTITLE: Using className prop with String or Array in React-PDF\nDESCRIPTION: Examples of how to set the className prop in the Document component using either a string or an array of strings.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/packages/react-pdf/README.md#2025-04-11_snippet_22\n\nLANGUAGE: jsx\nCODE:\n```\n\"custom-class-name-1 custom-class-name-2\"\n```\n\nLANGUAGE: jsx\nCODE:\n```\n[\"custom-class-name-1\", \"custom-class-name-2\"]\n```\n\n----------------------------------------\n\nTITLE: React Thumbnail Class Name Examples\nDESCRIPTION: Examples showing how to pass class names to the Thumbnail component either as a space-separated string or as an array of strings.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/packages/react-pdf/README.md#2025-04-11_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\n\"custom-class-name-1 custom-class-name-2\"\n[\"custom-class-name-1\", \"custom-class-name-2\"]\n```\n\n----------------------------------------\n\nTITLE: Handling Item Click Events in React-PDF\nDESCRIPTION: Example of an onItemClick callback function for React-PDF. This function is called when an outline item or thumbnail is clicked, allowing custom behavior such as navigation.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/README.md#2025-04-11_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\n({ dest, pageIndex, pageNumber }) => alert('Clicked an item from page ' + pageNumber + '!')\n```\n\n----------------------------------------\n\nTITLE: Customizing Loading State in React-PDF\nDESCRIPTION: Examples of different ways to customize the loading indicator using the loading prop, including string, React element, or function approach.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/packages/react-pdf/README.md#2025-04-11_snippet_29\n\nLANGUAGE: jsx\nCODE:\n```\n\"Please wait!\"\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<p>Please wait!</p>\n```\n\nLANGUAGE: jsx\nCODE:\n```\nthis.renderLoader\n```\n\n----------------------------------------\n\nTITLE: Handling Errors in React-PDF Document Component\nDESCRIPTION: Examples of different ways to handle and display errors using the error prop, including string, React element, or function approach.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/packages/react-pdf/README.md#2025-04-11_snippet_23\n\nLANGUAGE: jsx\nCODE:\n```\n\"An error occurred!\"\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<p>An error occurred!</p>\n```\n\nLANGUAGE: jsx\nCODE:\n```\nthis.renderError\n```\n\n----------------------------------------\n\nTITLE: Handling Thumbnail Item Click in React-PDF\nDESCRIPTION: Example function for handling click events on thumbnail items in React-PDF. The function receives an object containing destination information, page index, and page number, which can be used to navigate to the requested page.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/README.md#2025-04-11_snippet_36\n\nLANGUAGE: JavaScript\nCODE:\n```\n({ dest, pageIndex, pageNumber }) => alert('Clicked an item from page ' + pageNumber + '!')\n```\n\n----------------------------------------\n\nTITLE: Setting External Link Rel Values in React-PDF\nDESCRIPTION: Examples of possible values for the externalLinkRel prop to control the rel attribute of links in PDF annotations.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/packages/react-pdf/README.md#2025-04-11_snippet_24\n\nLANGUAGE: jsx\nCODE:\n```\n\"noopener\"\n```\n\nLANGUAGE: jsx\nCODE:\n```\n\"noreferrer\"\n```\n\nLANGUAGE: jsx\nCODE:\n```\n\"nofollow\"\n```\n\nLANGUAGE: jsx\nCODE:\n```\n\"noopener noreferrer\"\n```\n\n----------------------------------------\n\nTITLE: Setting Image Resources Path in React-PDF\nDESCRIPTION: Example of setting the imageResourcesPath prop to specify the base path for annotation SVG images.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/packages/react-pdf/README.md#2025-04-11_snippet_27\n\nLANGUAGE: jsx\nCODE:\n```\n\"/public/images/\"\n```\n\n----------------------------------------\n\nTITLE: Ref Creation Examples in React\nDESCRIPTION: Multiple approaches to create and use refs with React-PDF components using createRef and useRef hooks.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/README.md#2025-04-11_snippet_26\n\nLANGUAGE: JSX\nCODE:\n```\n// Function ref\n(ref) => { this.myCanvas = ref; }\n\n// CreateRef usage\nthis.ref = createRef();\n//...\ninputRef={this.ref}\n\n// UseRef usage\nconst ref = useRef();\n//...\ninputRef={ref}\n```\n\n----------------------------------------\n\nTITLE: React Thumbnail Click Handler Example\nDESCRIPTION: Example of an onItemClick handler function for the Thumbnail component that shows an alert when a thumbnail is clicked. The function receives an object with dest, pageIndex, and pageNumber properties.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/packages/react-pdf/README.md#2025-04-11_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\n({ dest, pageIndex, pageNumber }) => alert('Clicked an item from page ' + pageNumber + '!')\n```\n\n----------------------------------------\n\nTITLE: Custom Text Renderer Function\nDESCRIPTION: Example of a custom text renderer function that replaces instances of 'ipsum' with marked text\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/packages/react-pdf/README.md#2025-04-11_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\n({ str, itemIndex }) => str.replace(/ipsum/g, value => `<mark>${value}</mark>`)\n```\n\n----------------------------------------\n\nTITLE: React Ref Implementation\nDESCRIPTION: Examples of different ways to implement refs with the Outline component in React PDF, including function refs and createRef/useRef approaches.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/README.md#2025-04-11_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\n(ref) => { this.myOutline = ref; }\n\nthis.ref = createRef();\n...inputRef={this.ref}\n\nconst ref = useRef();\n...inputRef={ref}\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js for React-PDF With Turbopack\nDESCRIPTION: This Next.js configuration handles canvas dependency issues with Turbopack by creating an empty module and resolving the canvas import to it. Requires creating an empty-module.ts file.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/packages/react-pdf/README.md#2025-04-11_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nexport default {};\n```\n\nLANGUAGE: diff\nCODE:\n```\nmodule.exports = {\n+ experimental: {\n+   turbo: {\n+     resolveAlias: {\n+       canvas: './empty-module.ts',\n+     },\n+   },\n+ },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js for React-PDF Without Turbopack\nDESCRIPTION: This Next.js configuration resolves canvas dependency issues when using React-PDF without Turbopack by setting the canvas alias to false in webpack config.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/packages/react-pdf/README.md#2025-04-11_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\nmodule.exports = {\n+ webpack: (config) => {\n+   config.resolve.alias.canvas = false;\n\n+   return config;\n+ },\n}\n```\n\n----------------------------------------\n\nTITLE: React Ref Creation Examples\nDESCRIPTION: Examples of different ways to create and use refs with the Document component\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/README.md#2025-04-11_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n(ref) => { this.myDocument = ref; }\n```\n\nLANGUAGE: javascript\nCODE:\n```\nthis.ref = createRef();\n....\ninputRef={this.ref}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst ref = useRef();\n....\ninputRef={ref}\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js Prior to v15 for React-PDF\nDESCRIPTION: This configuration disables SWC minification in Next.js versions prior to v15.0.0-canary.53, which may be necessary for React-PDF to work correctly.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/packages/react-pdf/README.md#2025-04-11_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\nmodule.exports = {\n+ swcMinify: false,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Parcel 2 for PDF.js Worker\nDESCRIPTION: This modification shows how to adjust the PDF.js worker URL specifically for Parcel 2 bundler by using the npm: protocol in the URL.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/packages/react-pdf/README.md#2025-04-11_snippet_13\n\nLANGUAGE: diff\nCODE:\n```\n pdfjs.GlobalWorkerOptions.workerSrc = new URL(\n-  'pdfjs-dist/build/pdf.worker.min.mjs',\n+  'npm:pdfjs-dist/build/pdf.worker.min.mjs',\n   import.meta.url,\n ).toString();\n```\n\n----------------------------------------\n\nTITLE: Setting External Link Target in React-PDF\nDESCRIPTION: Examples of possible values for the externalLinkTarget prop to control where links in PDF annotations will open.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/packages/react-pdf/README.md#2025-04-11_snippet_25\n\nLANGUAGE: jsx\nCODE:\n```\n\"_self\"\n```\n\nLANGUAGE: jsx\nCODE:\n```\n\"_blank\"\n```\n\nLANGUAGE: jsx\nCODE:\n```\n\"_parent\"\n```\n\nLANGUAGE: jsx\nCODE:\n```\n\"_top\"\n```\n\n----------------------------------------\n\nTITLE: Custom Text Renderer Example in React-PDF\nDESCRIPTION: Example showing how to implement a custom text renderer function that replaces 'ipsum' with marked text.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/README.md#2025-04-11_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\n({ str, itemIndex }) => str.replace(/ipsum/g, value => `<mark>${value}</mark>`)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom NoData Content in React-PDF\nDESCRIPTION: Demonstrates different ways to specify custom content for the noData prop in React-PDF. This prop determines what the component displays when no PDF file is specified.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/README.md#2025-04-11_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"Please select a file.\"\n```\n\nLANGUAGE: JSX\nCODE:\n```\n<p>Please select a file.</p>\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nthis.renderNoData\n```\n\n----------------------------------------\n\nTITLE: Handling Successful Source Retrieval in React-PDF\nDESCRIPTION: Example of an onSourceSuccess callback function for React-PDF. This function is called when the document source is successfully retrieved from the file prop.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/README.md#2025-04-11_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\n() => alert('Document source retrieved!')\n```\n\n----------------------------------------\n\nTITLE: Handling Source Retrieval Errors in React-PDF\nDESCRIPTION: Example of an onSourceError callback function for React-PDF. This function is called when an error occurs while retrieving the document source from the file prop.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/README.md#2025-04-11_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\n(error) => alert('Error while retrieving document source! ' + error.message)\n```\n\n----------------------------------------\n\nTITLE: Modifying Import Path for Legacy PDF.js Worker in TypeScript\nDESCRIPTION: This diff shows how to update the PDF.js worker import path to use the legacy build, which supports older browsers. It replaces the standard build path with the legacy build path.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/packages/react-pdf/README.md#2025-04-11_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n pdfjs.GlobalWorkerOptions.workerSrc = new URL(\n-  'pdfjs-dist/build/pdf.worker.min.mjs',\n+  'pdfjs-dist/legacy/build/pdf.worker.min.mjs',\n   import.meta.url,\n ).toString();\n```\n\n----------------------------------------\n\nTITLE: Modifying CDN URL for Legacy PDF.js Worker in TypeScript\nDESCRIPTION: This diff shows how to update the external CDN URL to use the legacy PDF.js worker build for older browser support. It changes the path from /build/ to /legacy/build/.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/packages/react-pdf/README.md#2025-04-11_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n-pdfjs.GlobalWorkerOptions.workerSrc = `//unpkg.com/pdfjs-dist@${pdfjs.version}/build/pdf.worker.min.mjs`;\n+pdfjs.GlobalWorkerOptions.workerSrc = `//unpkg.com/pdfjs-dist@${pdfjs.version}/legacy/build/pdf.worker.min.mjs`;\n```\n\n----------------------------------------\n\nTITLE: Structure Tree Handler Functions\nDESCRIPTION: Callback functions for handling structure tree loading success and failure events.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/README.md#2025-04-11_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n(error) => alert('Error while loading structure tree! ' + error.message)\n```\n\nLANGUAGE: javascript\nCODE:\n```\n(structTree) => alert(JSON.stringify(structTree))\n```\n\n----------------------------------------\n\nTITLE: React Success Handler Implementation\nDESCRIPTION: Example of a success handler function for when the outline is successfully retrieved in React PDF component.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/README.md#2025-04-11_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\n(outline) => alert('The outline has been successfully retrieved.')\n```\n\n----------------------------------------\n\nTITLE: React Error Handler Implementation\nDESCRIPTION: Example of an error handler function for handling outline retrieval errors in React PDF component.\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/README.md#2025-04-11_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\n(error) => alert('Error while retrieving the outline! ' + error.message)\n```\n\n----------------------------------------\n\nTITLE: React Component Import Example\nDESCRIPTION: Example of importing a PDF file in a React component\nSOURCE: https://github.com/wojtekmaj/react-pdf/blob/main/README.md#2025-04-11_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport importedPdf from '../static/sample.pdf'\n```"
  }
]