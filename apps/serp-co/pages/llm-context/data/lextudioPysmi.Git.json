[
  {
    "owner": "lextudio",
    "repo": "pysmi.git",
    "content": "TITLE: Implementing MIB Compilation with PySMI in Python\nDESCRIPTION: This example demonstrates how to use the MibCompiler to transform ASN.1 MIB files into JSON format. It shows the complete workflow from fetching MIBs over HTTP, parsing them with SmiStarParser, generating JSON with JsonCodeGen, and capturing the output via a callback function.\nSOURCE: https://github.com/lextudio/pysmi.git/blob/main/docs/source/docs/api-reference.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pysmi.reader import HttpReader\nfrom pysmi.searcher import StubSearcher\nfrom pysmi.writer import CallbackWriter\nfrom pysmi.parser import SmiStarParser\nfrom pysmi.codegen import JsonCodeGen\nfrom pysmi.compiler import MibCompiler\n\ninputMibs = ['IF-MIB', 'IP-MIB']\n\nhttpSources = [('mibs.pysnmp.com', 443, '/asn1/@mib@')]\n\n# store compiled MIBs by calling this function\ndef store_mibs(mibName, jsonDoc, cbCtx):\n    print(f'# MIB module {mibName}')\n    print(jsonDoc)\n\nmibCompiler = MibCompiler(\n    SmiStarParser(), JsonCodeGen(), CallbackWriter(store_mibs)\n)\n\n# pull ASN.1 MIBs over HTTP\nmibCompiler.addSources(*[HttpReader(*x) for x in httpSources])\n\n# never recompile MIBs with ASN.1 MACROs\nmibCompiler.addSearchers(StubSearcher(*JsonCodeGen.baseMibs))\n\nstatus = mibCompiler.compile(*inputMibs)\n\nprint(status)\n```\n\n----------------------------------------\n\nTITLE: Compiling SMIv2 MIBs from Text to PySNMP Code in Python\nDESCRIPTION: This Python script demonstrates how to use PySMI to compile SMIv2 MIB definitions from text format into PySNMP-compatible Python code. It sets up the necessary MibBuilder and compiler objects, defines the MIB text, and performs the compilation process.\nSOURCE: https://github.com/lextudio/pysmi.git/blob/main/docs/source/examples/compile-smiv2-mibs-from-text-into-pysnmp-code.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Setup compiler infrastructure\nfrom pysmi.reader import StringReader\nfrom pysmi.searcher import StubSearcher\nfrom pysmi.writer import PyFileWriter\nfrom pysmi.parser import SmiStarParser\nfrom pysmi.codegen import PySnmpCodeGen\nfrom pysmi.compiler import MibCompiler\n\ninputMibs = ['IF-MIB', 'IP-MIB']\nmibSources = [\n    StringReader(\"\"\"\nIF-MIB DEFINITIONS ::= BEGIN\nEND\n\"\"\"),\n    StringReader(\"\"\"\nIP-MIB DEFINITIONS ::= BEGIN\nEND\n\"\"\")\n]\n\noutputDirectory = '.'\n\nmibCompiler = MibCompiler(SmiStarParser(),\n                          PySnmpCodeGen(),\n                          PyFileWriter(outputDirectory))\n\n# Run recursive MIB compilation\nresults = mibCompiler.compile(*inputMibs,\n                              **dict(fuzzyMatching=True,\n                                     mibSources=mibSources,\n                                     dstFormat='pysnmp',\n                                     ignoreErrors=True,\n                                     noDeps=True))\n\nprint('Results: %s' % ', '.join(['%s:%s' % (x, results[x]) for x in results]))\n```\n\n----------------------------------------\n\nTITLE: Including Python Implementation Code\nDESCRIPTION: RST directive to include the implementation code of the MIB compilation script\nSOURCE: https://github.com/lextudio/pysmi.git/blob/main/docs/source/examples/download-and-compile-smistar-mibs-into-json.rst#2025-04-22_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. literalinclude:: /../../examples/download-and-compile-smistar-mibs-into-json.py\n   :start-after: \"\"\"  #\n   :language: python\n```\n\n----------------------------------------\n\nTITLE: Borrowing Precompiled PySNMP Files in Python\nDESCRIPTION: This Python script demonstrates how to utilize precompiled PySNMP files when a standard operation fails. The functionality relies on the PySMI library. The main dependency is the PySMI library (a SNMP SMI/MIB parser and converter). The expected input is a failed SNMP operation, and the output is the use of precompiled files to ensure continuity.\nSOURCE: https://github.com/lextudio/pysmi.git/blob/main/docs/source/examples/borrow-precompiled-pysnmp-files-on-failure.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Python script to borrow precompiled PySNMP files on failure\n# This script relies on PySMI\n# Example script content...\n```\n\n----------------------------------------\n\nTITLE: Enabling PySMI Debugging in Python\nDESCRIPTION: This code snippet shows how to enable debugging in a PySMI application by using specific flags to initialize the Debug logger. It can be customized to enable all or specific subsystem debugging. Required dependencies include the pysmi package, and the main parameter is the list of flags indicating which parts of the application to debug.\nSOURCE: https://github.com/lextudio/pysmi.git/blob/main/docs/source/troubleshooting.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pysmi import debug\n\n# use specific flags for debugging\ndebug.setLogger(debug.Debug('lexer', 'parser', 'compiler'))\n\n# use 'all' for full debugging\ndebug.setLogger(debug.Debug('all'))\n```\n\n----------------------------------------\n\nTITLE: Initializing SMI Parser with parserFactory in PySMI (Python)\nDESCRIPTION: This snippet utilizes the parserFactory function from pysmi.parser.smi to obtain a parser class for a specified SMI dialect (typically SMIv2 or SMIv1). The returned object is a class, so it must be explicitly instantiated before being passed to other system components (such as MibCompiler). Dependencies include the pysmi package and a valid dialect object. The function expects the desired SMI dialect as input and outputs a parser class tailored for that dialect, supporting extensibility for various SNMP MIB parsing requirements. Be cautious to instantiate the class, not pass the class object itself, for subsequent usage.\nSOURCE: https://github.com/lextudio/pysmi.git/blob/main/docs/source/docs/parser/smi/parserfactory.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pysmi.parser.smi import parserFactory\n\n# Get parser class for SMIv2\nSMIv2ParserClass = parserFactory(some_dialect_object)\n\n# Instantiate parser\nparser_instance = SMIv2ParserClass()\n\n# parser_instance can now be used with MibCompiler\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Relaxed SMIv1 Parser in PySMI\nDESCRIPTION: Creates a relaxed SMIv1 parser that allows for common syntax deviations found in production MIBs. This configuration maximizes compatibility with non-standard MIB files found in the wild.\nSOURCE: https://github.com/lextudio/pysmi.git/blob/main/docs/source/docs/parser/smi/dialect.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pysmi.parser.dialect import smiV1Relaxed\nfrom pysmi.parser.smi import parserFactory\n\nRelaxedSmiV1Parser = parserFactory(**smiV1Relaxed)\n```\n\n----------------------------------------\n\nTITLE: Initializing Standard SMIv1 Parser in PySMI\nDESCRIPTION: Creates a standard SMIv1 parser using the parserFactory function with SMIv1 dialect configuration. This setup enforces strict SMIv1 grammar rules for parsing MIB files.\nSOURCE: https://github.com/lextudio/pysmi.git/blob/main/docs/source/docs/parser/smi/dialect.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pysmi.parser.dialect import smiV1\nfrom pysmi.parser.smi import parserFactory\n\nSmiV1Parser = parserFactory(**smiV1)\n```\n\n----------------------------------------\n\nTITLE: Importing JsonCodeGen Class from PySMI Module\nDESCRIPTION: This code snippet demonstrates how to import the JsonCodeGen class from the pysmi.codegen.jsondoc module. The JsonCodeGen class is used for generating JSON documents from SMI data in the PySMI library.\nSOURCE: https://github.com/lextudio/pysmi.git/blob/main/docs/source/docs/codegen/jsondoc/jsoncodegen.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom pysmi.codegen.jsondoc import JsonCodeGen\n```\n\n----------------------------------------\n\nTITLE: Using mibdump Command-Line Tool Bash\nDESCRIPTION: This snippet provides the help command for the mibdump tool, outlining its usage and available options. Key parameters include --mib-source for MIB source location, --destination-format for output format, and --mib-stub for excluding specific MIBs. The tool facilitates the conversion of SNMP MIB files to various formats and supports several options to customize its behavior.\nSOURCE: https://github.com/lextudio/pysmi.git/blob/main/docs/source/docs/mibdump.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ mibdump --help\nSynopsis:\n  SNMP SMI/MIB files conversion tool\nDocumentation:\n  https://www.pysnmp.com/pysmi\nUsage: mibdump [--help]\n      [--version]\n      [--quiet]\n      [--debug=<all|borrower|codegen|compiler|grammar|lexer|parser|reader|searcher|writer>]\n      [--mib-source=<URI>]\n      [--mib-searcher=<PATH|PACKAGE>]\n      [--mib-stub=<MIB-NAME>]\n      [--mib-borrower=<PATH>]\n      [--destination-format=<FORMAT>]\n      [--destination-directory=<DIRECTORY>]\n      [--cache-directory=<DIRECTORY>]\n      [--disable-fuzzy-source]\n      [--no-dependencies]\n      [--no-python-compile]\n      [--python-optimization-level]\n      [--ignore-errors]\n      [--build-index]\n      [--rebuild]\n      [--dry-run]\n      [--no-mib-writes]\n      [--generate-mib-texts]\n      [--keep-texts-layout]\n      <MIB-NAME> [MIB-NAME [...]]]\n```\n\n----------------------------------------\n\nTITLE: Example JSON Output for MIB Module Conversion\nDESCRIPTION: This snippet demonstrates the JSON representation of a MIB module as produced by the mibdump tool. Each MIB object is captured in detail, including properties such as name, oid, class, and maxaccess. It serves to preserve all aspects of the original ASN.1 MIB content.\nSOURCE: https://github.com/lextudio/pysmi.git/blob/main/docs/source/docs/mibdump.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n{\n   \"ifMIB\": {\n       \"name\": \"ifMIB\",\n       \"oid\": \"1.3.6.1.2.1.31\",\n       \"class\": \"moduleidentity\",\n       \"revisions\": [\n         \"2007-02-15 00:00\",\n         \"1996-02-28 21:55\",\n         \"1993-11-08 21:55\"\n       ]\n     },\n\n   ...\n   \"ifTestTable\": {\n     \"name\": \"ifTestTable\",\n     \"oid\": \"1.3.6.1.2.1.31.1.3\",\n     \"class\": \"objecttype\",\n     \"maxaccess\": \"not-accessible\"\n   },\n   \"ifTestEntry\": {\n     \"name\": \"ifTestEntry\",\n     \"oid\": \"1.3.6.1.2.1.31.1.3.1\",\n     \"class\": \"objecttype\",\n     \"maxaccess\": \"not-accessible\",\n     \"augmention\": {\n       \"name\": \"ifTestEntry\",\n       \"module\": \"IF-MIB\",\n       \"object\": \"ifEntry\"\n     }\n   },\n   \"ifTestId\": {\n     \"name\": \"ifTestId\",\n     \"oid\": \"1.3.6.1.2.1.31.1.3.1.1\",\n     \"class\": \"objecttype\",\n     \"syntax\": {\n       \"type\": \"TestAndIncr\",\n       \"class\": \"type\"\n     },\n     \"maxaccess\": \"read-write\"\n   },\n   ...\n}\n```\n\n----------------------------------------\n\nTITLE: Building JSON Index for MIB Modules\nDESCRIPTION: This JSON snippet demonstrates how the PySMI tool builds an index for MIB modules, listing their compliance, identity, and OID information. It requires valid MIB modules and the PySMI tool with necessary configurations. The output is structured JSON indexing which is convenient for querying MIB properties.\nSOURCE: https://github.com/lextudio/pysmi.git/blob/main/docs/source/docs/mibdump.rst#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"compliance\": {\n      \"1.3.6.1.2.1.48.2.1.1\": [\n        \"IP-MIB\"\n      ],\n      \"1.3.6.1.2.1.49.2.1.1\": [\n        \"TCP-MIB\"\n      ],\n      \"1.3.6.1.2.1.50.2.1.1\": [\n        \"UDP-MIB\"\n      ]\n   },\n   \"identity\": {\n       \"1.3.6.1.2.1.48\": [\n         \"IP-MIB\"\n       ],\n       \"1.3.6.1.2.1.49\": [\n         \"TCP-MIB\"\n       ],\n       \"1.3.6.1.2.1.50\": [\n         \"UDP-MIB\"\n       ]\n   },\n   \"oids\": {\n       \"1.3.6.1.2.1.4\": [\n         \"IP-MIB\"\n       ],\n       \"1.3.6.1.2.1.5\": [\n         \"IP-MIB\"\n       ],\n       \"1.3.6.1.2.1.6\": [\n         \"TCP-MIB\"\n       ],\n       \"1.3.6.1.2.1.7\": [\n         \"UDP-MIB\"\n       ],\n       \"1.3.6.1.2.1.49\": [\n         \"TCP-MIB\"\n       ],\n       \"1.3.6.1.2.1.50\": [\n         \"UDP-MIB\"\n       ]\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling MIB Files with mibdump\nDESCRIPTION: Compiles IF-MIB into JSON format using the mibdump utility in a virtual environment. Outputs compiled MIB data to the current directory. Requires a properly configured virtual environment and access to MIB sources.\nSOURCE: https://github.com/lextudio/pysmi.git/blob/main/docs/source/quick-start.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npipenv run mibdump --generate-mib-texts  --destination-format json IF-MIB\n```\n\n----------------------------------------\n\nTITLE: Initializing Python Environment with Pipenv\nDESCRIPTION: Sets up a Python virtual environment using Pipenv, installs PySMI, and lists the installed packages. Assumes Python 3.12 is installed via pyenv. Required dependencies include pipenv and pyenv.\nSOURCE: https://github.com/lextudio/pysmi.git/blob/main/docs/source/quick-start.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd ~\nmkdir test-field\ncd test-field\npyenv local 3.12\npip install pipenv\npipenv install pysmi\npipenv run pip list\n```\n\n----------------------------------------\n\nTITLE: Example JSON Structure for Compiled IF-MIB\nDESCRIPTION: Represents the structure of a compiled MIB file in JSON format with various attributes like name, oid, class, etc. It captures data for MIB tables, entries, and IDs. The snippet shows only a partial view of the complete JSON.\nSOURCE: https://github.com/lextudio/pysmi.git/blob/main/docs/source/quick-start.rst#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"ifMIB\": {\n       \"name\": \"ifMIB\",\n       \"oid\": \"1.3.6.1.2.1.31\",\n       \"class\": \"moduleidentity\",\n       \"revisions\": [\n         \"2007-02-15 00:00\",\n         \"1996-02-28 21:55\",\n         \"1993-11-08 21:55\"\n       ]\n     },\n   // ...\n   \"ifTestTable\": {\n     \"name\": \"ifTestTable\",\n     \"oid\": \"1.3.6.1.2.1.31.1.3\",\n     \"nodetype\": \"table\",\n     \"class\": \"objecttype\",\n     \"maxaccess\": \"not-accessible\"\n   },\n   \"ifTestEntry\": {\n     \"name\": \"ifTestEntry\",\n     \"oid\": \"1.3.6.1.2.1.31.1.3.1\",\n     \"nodetype\": \"row\",\n     \"class\": \"objecttype\",\n     \"maxaccess\": \"not-accessible\",\n     \"augmention\": {\n       \"name\": \"ifTestEntry\",\n       \"module\": \"IF-MIB\",\n       \"object\": \"ifEntry\"\n     }\n   },\n   \"ifTestId\": {\n     \"name\": \"ifTestId\",\n     \"oid\": \"1.3.6.1.2.1.31.1.3.1.1\",\n     \"nodetype\": \"column\",\n     \"class\": \"objecttype\",\n     \"syntax\": {\n       \"type\": \"TestAndIncr\",\n       \"class\": \"type\"\n     },\n     \"maxaccess\": \"read-write\"\n   },\n   // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Index for MIB Modules\nDESCRIPTION: Shows a sample JSON index structure for MIB modules, detailing compliance, identity, and OID relationships. Facilitates quick lookup across numerous MIB files and requires the PySMI library.\nSOURCE: https://github.com/lextudio/pysmi.git/blob/main/docs/source/quick-start.rst#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"compliance\": {\n      \"1.3.6.1.2.1.48.2.1.1\": [\n        \"IP-MIB\"\n      ],\n      \"1.3.6.1.2.1.49.2.1.1\": [\n        \"TCP-MIB\"\n      ],\n      \"1.3.6.1.2.1.50.2.1.1\": [\n        \"UDP-MIB\"\n      ]\n   },\n   \"identity\": {\n       \"1.3.6.1.2.1.48\": [\n         \"IP-MIB\"\n       ],\n       \"1.3.6.1.2.1.49\": [\n         \"TCP-MIB\"\n       ],\n       \"1.3.6.1.2.1.50\": [\n         \"UDP-MIB\"\n       ]\n   },\n   \"oids\": {\n       \"1.3.6.1.2.1.4\": [\n         \"IP-MIB\"\n       ],\n       \"1.3.6.1.2.1.5\": [\n         \"IP-MIB\"\n       ],\n       \"1.3.6.1.2.1.6\": [\n         \"TCP-MIB\"\n       ],\n       \"1.3.6.1.2.1.7\": [\n         \"UDP-MIB\"\n       ],\n       \"1.3.6.1.2.1.49\": [\n         \"TCP-MIB\"\n       ],\n       \"1.3.6.1.2.1.50\": [\n         \"UDP-MIB\"\n       ]\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing PySMI Using pip - Bash\nDESCRIPTION: This snippet demonstrates the recommended way to install the PySMI library, which facilitates SNMP SMI MIB parsing in Python. The installation is performed using pip, Python's package manager, which will automatically fetch and install PySMI along with its dependencies. The expected input is an environment with pip available (typically Python 2.7+ or 3.4+). The output is a completed installation of PySMI. Usage of this command assumes the user has access to the internet and the necessary permissions to install Python packages.\nSOURCE: https://github.com/lextudio/pysmi.git/blob/main/docs/source/download.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install pysmi\n```\n\n----------------------------------------\n\nTITLE: Using mibcopy CLI Tool Help Command\nDESCRIPTION: Demonstrates the help command output for the mibcopy tool, showing available command-line options and usage patterns. Includes options for verbosity, debugging, MIB sources, and error handling.\nSOURCE: https://github.com/lextudio/pysmi.git/blob/main/docs/source/docs/mibcopy.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ mibcopy --help\nSynopsis:\n  SNMP SMI/MIB files copying tool. When given MIB file(s) or\n  directory(ies) on input and a destination directory, the tool\n  parses MIBs to figure out their canonical MIB module name and\n  the latest revision date, then copies MIB module on input\n  into the destination directory under its MIB module name\n  *if* there is no such file already or its revision date is\n  older.\n\nDocumentation:\n  https://www.pysnmp.com/pysmi\nUsage: mibcopy [--help]\n      [--version]\n      [--verbose]\n      [--quiet]\n      [--debug=<all|borrower|codegen|compiler|grammar|lexer|\n                parser|reader|searcher|writer>]\n      [--mib-source=<URI>]\n      [--cache-directory=<DIRECTORY>]\n      [--ignore-errors]\n      [--dry-run]\n      <SOURCE [SOURCE...]> <DESTINATION>\nWhere:\n    URI      - file, zip, http, https schemes are\n               supported. Use @mib@ placeholder token in URI to\n               refer directly to the required MIB module when\n               source does not support directory listing\n               (e.g. HTTP).\n```\n\n----------------------------------------\n\nTITLE: Installing PySMI using pip in Python\nDESCRIPTION: This command demonstrates how to install the PySMI package using pip, the Python package installer. It's a simple one-line command that fetches and installs the latest version of PySMI from PyPI.\nSOURCE: https://github.com/lextudio/pysmi.git/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install pysmi\n```\n\n----------------------------------------\n\nTITLE: Installing PySMI via pip\nDESCRIPTION: Command to install the PySMI library using pip package manager. This is the recommended way to install PySMI for most users.\nSOURCE: https://github.com/lextudio/pysmi.git/blob/main/docs/source/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install pysmi-lextudio\n```\n\n----------------------------------------\n\nTITLE: Including Python Script Documentation Block\nDESCRIPTION: RST directive to include documentation section from a Python script that handles MIB compilation\nSOURCE: https://github.com/lextudio/pysmi.git/blob/main/docs/source/examples/download-and-compile-smistar-mibs-into-json.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: /../../examples/download-and-compile-smistar-mibs-into-json.py\n   :start-after: \"\"\"\n   :end-before: \"\"\"  #\n```\n\n----------------------------------------\n\nTITLE: Download Script Link\nDESCRIPTION: RST directive to create a download link for the complete Python script\nSOURCE: https://github.com/lextudio/pysmi.git/blob/main/docs/source/examples/download-and-compile-smistar-mibs-into-json.rst#2025-04-22_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n:download:`Download</../../examples/download-and-compile-smistar-mibs-into-json.py>` script.\n```\n\n----------------------------------------\n\nTITLE: Generating Automatic Class Documentation with Sphinx\nDESCRIPTION: Sphinx autoclass directive that automatically generates documentation for the HttpReader class including its members. This extracts documentation from the class docstrings.\nSOURCE: https://github.com/lextudio/pysmi.git/blob/main/docs/source/docs/reader/httpclient/httpreader.rst#2025-04-22_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: pysmi.reader.httpclient.HttpReader\n  :members:\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for CallbackWriter using Sphinx\nDESCRIPTION: This reStructuredText directive uses Sphinx's `autoclass` feature to automatically generate documentation for the `pysmi.writer.callback.CallbackWriter` class. The `:members:` option ensures that all public members (methods, attributes) of the class are included in the generated documentation.\nSOURCE: https://github.com/lextudio/pysmi.git/blob/main/docs/source/docs/writer/callback/callbackwriter.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: pysmi.writer.callback.CallbackWriter\n  :members:\n```\n\n----------------------------------------\n\nTITLE: Generating Python Class Documentation using Sphinx Autoclass (rst)\nDESCRIPTION: This reStructuredText directive utilizes Sphinx's `autoclass` feature to automatically generate documentation for the specified Python class, `pysmi.writer.pyfile.PyFileWriter`. The `:members:` option instructs Sphinx to include documentation for all public members (methods, attributes) of the class. This requires a correctly configured Sphinx environment with access to the source code or Python environment containing the `pysmi` package.\nSOURCE: https://github.com/lextudio/pysmi.git/blob/main/docs/source/docs/writer/pyfile/pyfilewriter.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: pysmi.writer.pyfile.PyFileWriter\n  :members:\n```\n\n----------------------------------------\n\nTITLE: Documenting FileWriter Class using reStructuredText\nDESCRIPTION: This snippet uses reStructuredText directives to document the FileWriter class from the pysmi.writer.localfile module. It includes a reference label and uses the autoclass directive to automatically generate class documentation with all members.\nSOURCE: https://github.com/lextudio/pysmi.git/blob/main/docs/source/docs/writer/localfile/filewriter.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _writer.localfile.FileWriter:\n\nFile writer\n-----------\n\n.. autoclass:: pysmi.writer.localfile.FileWriter\n  :members:\n```\n\n----------------------------------------\n\nTITLE: Generating API Documentation for AnyFileBorrower Class in Python\nDESCRIPTION: This reStructuredText snippet uses Sphinx directives to automatically generate documentation for the AnyFileBorrower class from the pysmi.borrower.anyfile module. It includes all members of the class in the generated documentation.\nSOURCE: https://github.com/lextudio/pysmi.git/blob/main/docs/source/docs/borrower/anyfile/anyfileborrower.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: pysmi.borrower.anyfile.AnyFileBorrower\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for PyFileBorrower Class in Python\nDESCRIPTION: This snippet uses Sphinx's autoclass directive to automatically generate documentation for the PyFileBorrower class from the pysmi.borrower.pyfile module. It includes all members of the class in the generated documentation.\nSOURCE: https://github.com/lextudio/pysmi.git/blob/main/docs/source/docs/borrower/pyfile/pyfileborrower.rst#2025-04-22_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: pysmi.borrower.pyfile.PyFileBorrower\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for PySnmpCodeGen using Sphinx (reStructuredText)\nDESCRIPTION: This reStructuredText snippet uses the Sphinx `autoclass` directive to automatically generate documentation for the `pysmi.codegen.pysnmp.PySnmpCodeGen` Python class. The `:members:` option ensures that documentation for all public members (methods, attributes) of the class is included in the output. This directive requires Sphinx and the `pysmi` library to be installed and accessible.\nSOURCE: https://github.com/lextudio/pysmi.git/blob/main/docs/source/docs/codegen/pysnmp/pysnmpcodegen.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: pysmi.codegen.pysnmp.PySnmpCodeGen\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Referencing HttpReader Class in RST Documentation\nDESCRIPTION: ReStructuredText directive that references the HttpReader class from the pysmi.reader.httpclient module. This directive creates a reference anchor for the documentation.\nSOURCE: https://github.com/lextudio/pysmi.git/blob/main/docs/source/docs/reader/httpclient/httpreader.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _reader.httpclient.HttpReader:\n```\n\n----------------------------------------\n\nTITLE: RST Documentation for PyPackageSearcher\nDESCRIPTION: ReStructuredText documentation block that defines the reference and description for the PyPackageSearcher class used for searching MIBs in Python packages.\nSOURCE: https://github.com/lextudio/pysmi.git/blob/main/docs/source/docs/searcher/pypackage/pypackagesearcher.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _searcher.pypackage.PyPackageSearcher:\n\nSearch Python packages\n----------------------\n\nSome MIBs, most frequently the base ones, can be stored at a Python package.\nThere existence can be checked with the *PyPackageSearcher* class instances.\n\n.. autoclass:: pysmi.searcher.pypackage.PyPackageSearcher\n   :members:\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Documentation Reference for NullCodeGen\nDESCRIPTION: ReStructuredText directive that creates a reference anchor and header for the NullCodeGen documentation. Includes an autoclass directive to automatically generate class documentation.\nSOURCE: https://github.com/lextudio/pysmi.git/blob/main/docs/source/docs/codegen/null/nullcodegen.rst#2025-04-22_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. _codegen.null.NullCodeGen:\n\nCode generation stub\n--------------------\n\n.. autoclass:: pysmi.codegen.null.NullCodeGen\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents in reStructuredText\nDESCRIPTION: This snippet uses the reStructuredText `toctree` directive to generate a table of contents for the documentation. The `:maxdepth: 2` option limits the depth of the generated table of contents to two levels. It includes links to specific documentation pages: `mibdump`, `mibcopy`, and `api-reference`.\nSOURCE: https://github.com/lextudio/pysmi.git/blob/main/docs/source/docs/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   /docs/mibdump\n   /docs/mibcopy\n   /docs/api-reference\n```\n\n----------------------------------------\n\nTITLE: Installing Sphinx using pip (Shell)\nDESCRIPTION: This command installs the Sphinx package using the Python package installer, pip. Sphinx is required to build the project's documentation. The preceding text suggests this command should be executed.\nSOURCE: https://github.com/lextudio/pysmi.git/blob/main/docs/README.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# pip sphinx\n```\n\n----------------------------------------\n\nTITLE: Building HTML Documentation with Make (Shell)\nDESCRIPTION: This command executes the `html` target defined in the project's Makefile. It uses the previously installed Sphinx tool to generate the project documentation in HTML format. The '$' indicates a typical shell prompt.\nSOURCE: https://github.com/lextudio/pysmi.git/blob/main/docs/README.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ make html\n```"
  }
]