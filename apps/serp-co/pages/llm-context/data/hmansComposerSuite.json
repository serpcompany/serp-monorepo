[
  {
    "owner": "hmans",
    "repo": "composer-suite",
    "content": "TITLE: Setting up Basic Render Composer Pipeline in React Three Fiber\nDESCRIPTION: A minimal example showing how to set up the basic Render Composer pipeline with React Three Fiber. The example includes the Canvas and RenderPipeline components with a basic scene containing a directional light and a mesh.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/render-composer/README.md#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as RC from \"render-composer\"\n\nfunction App() {\n  return (\n    <RC.Canvas>\n      <RC.RenderPipeline>\n        {/* Just do normal R3F stuff inside. */}\n        <directionalLight position={[30, 10, 10]} intensity={1.5} />\n        <mesh>\n          <icosahedronGeometry />\n          <meshStandardMaterial color=\"hotpink\" />\n        </mesh>\n      </RC.RenderPipeline>\n    </RC.Canvas>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Post-Processing Effects in Render Composer\nDESCRIPTION: Example showing how to add full-screen post-processing effects to a Render Composer pipeline using the EffectPass component and various effect components like SMAA, SelectiveBloom, and Vignette.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/render-composer/README.md#2025-04-11_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as RC from \"render-composer\"\n\nfunction App() {\n  return (\n    <RC.Canvas>\n      <RC.RenderPipeline>\n        <RC.EffectPass>\n          <RC.SMAAEffect />\n          <RC.SelectiveBloomEffect intensity={5} />\n          <RC.VignetteEffect />\n        </RC.EffectPass>\n\n        {/* ...normal R3F stuff here. */}\n      </RC.RenderPipeline>\n    </RC.Canvas>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling a Shader and Applying it to a Material\nDESCRIPTION: Shows how to compile a shader graph into a Three.js compatible shader definition and apply it to a ShaderMaterial instance.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/shader-composer/README.md#2025-04-11_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst [shader] = compileShader(root)\nconst material = new THREE.ShaderMaterial(shader)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Minimal Particle Effect with React Hooks in TSX\nDESCRIPTION: A complete example showing how to create a minimal particle effect using useParticles and useParticleAttribute hooks, demonstrating the component structure and material setup.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/vfx-composer-r3f/CHANGELOG.md#2025-04-11_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst Effect = () => {\n  const particles = useParticles()\n  const velocity = useParticleAttribute(() => new Vector3())\n\n  return (\n    <Particles maxParticles={1_000} safetyBuffer={1_000}>\n      <planeGeometry args={[0.2, 0.2]} />\n\n      <composable.MeshStandardMaterial>\n        <modules.Billboard />\n        <modules.Scale scale={OneMinus(particles.Progress)} />\n        <modules.Velocity velocity={velocity} time={particles.Age} />\n        <modules.Lifetime {...particles} />\n      </composable.MeshStandardMaterial>\n\n      <Emitter\n        rate={20}\n        setup={() => {\n          particles.setLifetime(between(1, 3))\n          velocity.value.set(plusMinus(1), between(1, 3), plusMinus(1))\n        }}\n      />\n    </Particles>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Composable Material API in JSX\nDESCRIPTION: Shows how to use the composable material API in JSX for different Three.js material types. This allows for compositional shader development using standard Three.js materials as a base.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/material-composer/CHANGELOG.md#2025-04-11_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<composable.meshStandardMaterial>\n  {/* Modules */}\n</composable.meshStandardMaterial>\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple ShaderMaterial with Shader Composer\nDESCRIPTION: Demonstrates how to create a basic shader graph using ShaderMaterialMaster with a fixed color. This is the simplest usage pattern of Shader Composer.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/shader-composer/README.md#2025-04-11_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst root = ShaderMaterialMaster({\n  color: new Color(\"hotpink\")\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Layer Components with Blend Operations in TSX\nDESCRIPTION: Examples of using the new Layer feature with different blend operation configurations. Layers can be configured with blend operations either as function references, string names, or custom blend functions with opacity values derived from shader functions like Fresnel.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/material-composer-r3f/CHANGELOG.md#2025-04-11_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<Layer blend={Blend.add}>\n  <modules.Fresnel />\n</Layer>\n\n<Layer opacity={Fresnel()} blend=\"add\">\n  <modules.Color color=\"white\" />\n</Layer>\n\n<Layer blend={(a, b) => Add(a, Mul(b, Fresnel()))}>\n  <modules.Color color=\"white\" />\n</Layer>\n```\n\n----------------------------------------\n\nTITLE: Creating a Dynamic Color Shader with Time Modulation\nDESCRIPTION: Creates a more complex shader graph that multiplies a color by time, demonstrating how to combine units to create dynamic visual effects.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/shader-composer/README.md#2025-04-11_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst root = ShaderMaterialMaster({\n  color: Mul(new Color(\"hotpink\"), Time())\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Particle Effects with useParticles and useParticleAttribute in React Three Fiber\nDESCRIPTION: A minimal example of creating a particle effect using the newly added hooks. The code demonstrates how to set up a particle system with velocity attributes, custom material effects including billboarding and scaling, and a continuous emitter with randomized lifetime and velocity parameters.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/vfx-composer-r3f/CHANGELOG.md#2025-04-11_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst Effect = () => {\n  const particles = useParticles()\n  const velocity = useParticleAttribute(() => new Vector3())\n\n  return (\n    <Particles maxParticles={1_000} safetyBuffer={1_000}>\n      <planeGeometry args={[0.2, 0.2]} />\n\n      <VFXMaterial baseMaterial={MeshStandardMaterial}>\n        <VFX.Billboard />\n        <VFX.Scale scale={OneMinus(particles.Progress)} />\n        <VFX.Velocity velocity={velocity} time={particles.Age} />\n        <VFX.Particles {...particles} />\n      </VFXMaterial>\n\n      <Emitter\n        continuous\n        setup={() => {\n          particles.setLifetime(between(1, 3))\n          velocity.value.set(plusMinus(1), between(1, 3), plusMinus(1))\n        }}\n      />\n    </Particles>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating centralized asset loaders with createLoader in JavaScript\nDESCRIPTION: Example showing how to define a central assets module using createLoader to create loader hooks for various types of assets including 3D models, audio, and textures. This approach triggers preloading at import time.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/hmans-r3f-create-loader/README.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createLoader } from \"@hmans/r3f-create-loader\"\n/* ...import loaders... */\n\nexport const useAsset = {\n  asteroid: createLoader(GLTFLoader, \"/models/asteroid.gltf\"),\n  music: createLoader(AudioLoader, \"/sounds/music.mp3\"),\n  fog: createLoader(TextureLoader, \"/textures/fog.png\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring RenderPipeline with Effects in JSX\nDESCRIPTION: Example of using the render-composer JSX API to set up a render pipeline with multiple post-processing effects including SMAA, selective bloom, and vignette effects.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/render-composer/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as RC from \"render-composer\"\n\nfunction App() {\n  return (\n    <RC.Canvas>\n      <RC.RenderPipeline>\n        <RC.EffectPass>\n          <RC.SMAAEffect />\n          <RC.SelectiveBloomEffect intensity={5} />\n          <RC.VignetteEffect />\n        </RC.EffectPass>\n\n        {/* ...normal R3F stuff here. */}\n      </RC.RenderPipeline>\n    </RC.Canvas>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Depth and Scene Buffers in Render Composer\nDESCRIPTION: Example showing how to use the useRenderPipeline hook to access depth and color textures from the render passes. This is useful for implementing effects like transparent water with refraction or volumetric fog.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/render-composer/README.md#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst StylizedWater = () => {\n  const { depth, color } = useRenderPipeline()\n\n  return <mesh layers-mask={1 << Layers.TransparentFX}>{/* ... */}</mesh>\n}\n```\n\n----------------------------------------\n\nTITLE: Patching Three.js Materials Imperatively\nDESCRIPTION: Example showing how to use the imperative API to compile modules, compile a shader, and patch a material with the resulting shader code.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/material-composer-patch-material/CHANGELOG.md#2025-04-11_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst material = new MeshStandardMaterial({})\nconst root = compileModules(modules)\nconst [shader, shaderMeta] = compileShader(root)\npatchMaterial(material, shader)\n```\n\n----------------------------------------\n\nTITLE: Creating an Attribute Unit for Geometry Attributes\nDESCRIPTION: Demonstrates how to create an Attribute unit for accessing geometry attributes and automatically making their values accessible to the fragment shader via a varying.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/shader-composer/CHANGELOG.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst color = Attribute(\"vec3\", \"color\")\n```\n\n----------------------------------------\n\nTITLE: Creating GLSL Chunks in Shader Composer Units\nDESCRIPTION: Demonstrates how to create a Unit with custom GLSL code chunks for both header and body sections of a fragment shader. This approach should be used sparingly as it can make shader graphs harder to reason about and increase risk of namespace collisions.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/shader-composer/README.md#2025-04-11_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst ImperativelyDoSomething = Unit(\"float\", 0, {\n  fragment: {\n    header: $`vec4 myColor = vec4(1.0, 0.0, 0.0, 1.0);`,\n    body: $`gl_FragColor = myColor;`\n  }\n  /* Also possible for `vertex`, obviously. */\n})\n```\n\n----------------------------------------\n\nTITLE: Writing Particle Attributes with the Updated API in TSX\nDESCRIPTION: Demonstrates how to use the new explicit particle attribute writing approach that replaces the previous implicit system. Shows both lifetime setting and general attribute writing patterns.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/vfx-composer-r3f/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst lifetime = createParticleLifetime()\n\n/* Before: */\nlifetime.setLifetime(duration, offset)\n\n/* Now: */\nlifetime.write(mesh, duration, offset)\n```\n\n----------------------------------------\n\nTITLE: Using MeshPhysicalMaterial with Composable API in JSX\nDESCRIPTION: Example of using the composable API with THREE.MeshPhysicalMaterial. This shows how the API can be used with different material types beyond the standard material.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/material-composer/CHANGELOG.md#2025-04-11_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<composable.meshPhysicalMaterial>\n  {/* Modules */}\n</composable.meshPhysicalMaterial>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Material Components with Shaders in R3F\nDESCRIPTION: Example showing how to use the Custom component wrapper for Three.js materials with custom shaders. Demonstrates applying shaders to both standard and depth materials on a mesh.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/shader-composer-r3f/CHANGELOG.md#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<mesh castShadow receiveShadow>\n  <dodecahedronGeometry args={[2, 5]} />\n\n  <Custom.MeshStandardMaterial\n    {...shader}\n    flatShading\n    metalness={0.5}\n    roughness={0.5}\n  />\n\n  <Custom.MeshDepthMaterial {...depthShader} />\n</mesh>\n```\n\n----------------------------------------\n\nTITLE: Using Composable API with Existing Material Instance in JSX\nDESCRIPTION: Shows how to use the composable API with an existing material instance. This approach allows applying modules to pre-existing material objects.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/material-composer/CHANGELOG.md#2025-04-11_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<composable.material instance={myMaterial}>\n  {/* Modules */}\n</composable.material>\n```\n\n----------------------------------------\n\nTITLE: Creating a useMutableList Hook in TypeScript with React\nDESCRIPTION: Implementation of a custom React hook that provides a mutable list with methods for manipulation. This hook maintains a reference to an array object and exposes methods to modify it while optimizing rendering performance.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/hmans-use-mutable-list/README.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useSyncExternalStore } from \"react\"\n\n/**\n * A React hook that returns a mutable array, with a subscription model\n * that will cause components to re-render when it changes.\n */\nexport function useMutableList<T>(): UseMutableList<T> {\n  /* Create a new array instance that we will never replace. */\n  const array = useMutableValue<T[]>([])\n\n  /* Create and return an object containing both the array\n     as well as a number of useful methods to interact with it. */\n  return {\n    array,\n\n    /* Push a new item into the array. */\n    push(item: T) {\n      array.value.push(item)\n      array.update()\n      return item\n    },\n\n    /* Remove the last item from the array and return it. */\n    pop() {\n      const result = array.value.pop()\n      array.update()\n      return result\n    },\n\n    /* Remove the first item from the array and return it. */\n    shift() {\n      const result = array.value.shift()\n      array.update()\n      return result\n    },\n\n    /* Insert a new item at the beginning of the array. */\n    unshift(item: T) {\n      array.value.unshift(item)\n      array.update()\n      return item\n    },\n\n    /* Remove an item at the specified index from the array. */\n    remove(index: number) {\n      const result = array.value.splice(index, 1)[0]\n      array.update()\n      return result\n    },\n\n    /* Return the first item in the array that matches the predicate, or undefined. */\n    find(predicate: (item: T) => boolean) {\n      return array.value.find(predicate)\n    },\n\n    /* Return the index of the first item in the array that matches the predicate, or -1. */\n    findIndex(predicate: (item: T) => boolean) {\n      return array.value.findIndex(predicate)\n    },\n\n    /* Clear the array. */\n    clear() {\n      array.value.length = 0\n      array.update()\n    },\n\n    /* Get the length of the array. */\n    get length() {\n      return array.value.length\n    }\n  }\n}\n\n/* Types */\n\nexport type UseMutableList<T> = {\n  array: UseMutableValue<T[]>\n  push: (item: T) => T\n  pop: () => T | undefined\n  shift: () => T | undefined\n  unshift: (item: T) => T\n  remove: (index: number) => T\n  find: (predicate: (item: T) => boolean) => T | undefined\n  findIndex: (predicate: (item: T) => boolean) => number\n  clear: () => void\n  length: number\n}\n\n/**\n * A mutable value that can be updated, with a subscription model\n * that will cause components to re-render when it changes.\n */\nexport function useMutableValue<T>(initialValue: T): UseMutableValue<T> {\n  /* A list of subscriptions. */\n  const subscribers = new Set<() => void>()\n\n  /* Our changeable value. */\n  const value = initialValue\n\n  /* Our self-subscribing store. */\n  const store = {\n    value,\n\n    subscribe(callback: () => void) {\n      subscribers.add(callback)\n      return () => subscribers.delete(callback)\n    },\n\n    getSnapshot() {\n      return value\n    },\n\n    update() {\n      subscribers.forEach((callback) => callback())\n    }\n  }\n\n  /* We're returning a tuple of [value, setValue], where the value is actually\n     a reference to the useSyncExternalStore return value.  */\n  return {\n    value: useSyncExternalStore(store.subscribe, () => store.getSnapshot()),\n    update: store.update\n  }\n}\n\nexport type UseMutableValue<T> = {\n  value: T\n  update: () => void\n}\n```\n\n----------------------------------------\n\nTITLE: Imperative Material Composition with Three.js\nDESCRIPTION: Demonstrates the imperative API for compiling modules and patching a Three.js material. This approach is useful for non-JSX contexts or when direct control over the compilation process is needed.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/material-composer/CHANGELOG.md#2025-04-11_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nconst material = new MeshStandardMaterial({})\nconst root = compileModules(modules)\nconst [shader, shaderMeta] = compileShader(root)\npatchMaterial(material, shader)\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a Sampler2D Uniform with Texture2D\nDESCRIPTION: Shows how to replace the deprecated Sampler2D unit by using a Uniform with the sampler2D type and passing it to Texture2D.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/shader-composer/CHANGELOG.md#2025-04-11_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst sampler2D = Uniform(\"sampler2D\", texture)\nconst tex2d = Texture2D(sampler2D)\n```\n\n----------------------------------------\n\nTITLE: Using Functional Composition with pipe() for Cleaner Shader Graphs\nDESCRIPTION: Demonstrates how to use the pipe() function from fp-ts to create a more readable and maintainable shader graph, reducing nesting and improving organization.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/shader-composer/README.md#2025-04-11_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { pipe } from \"fp-ts/function\"\n\nconst ModulateOverTime = (color: Input<\"vec3\">) =>\n  pipe(\n    Time(),\n    (v) => Sin(v),\n    (v) => NormalizePlusMinusOne(v),\n    (v) => Mul(color, v)\n  )\n\nShaderMaterialMaster({\n  color: ModulateOverTime(new Color(\"hotpink\"))\n})\n```\n\n----------------------------------------\n\nTITLE: Composable Material Component in JSX\nDESCRIPTION: Example showing how to use the composable material component in JSX to add shader modules to a Three.js material.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/material-composer-r3f/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<composable.meshStandardMaterial>\n  {/* Modules */}\n</composable.meshStandardMaterial>\n```\n\n----------------------------------------\n\nTITLE: Basic Emitter Usage in React Three Fiber\nDESCRIPTION: The simplest implementation of an Emitter component with default configuration that emits 10 particles per second with no limit.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/vfx-composer-r3f/README.md#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Emitter />\n```\n\n----------------------------------------\n\nTITLE: Physical Material Component Example\nDESCRIPTION: Example demonstrating usage of MeshPhysicalMaterial with the composable material system.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/material-composer-r3f/CHANGELOG.md#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<composable.meshPhysicalMaterial>\n  {/* Modules */}\n</composable.meshPhysicalMaterial>\n```\n\n----------------------------------------\n\nTITLE: Writing ParticleAttribute Values in VFX Composer\nDESCRIPTION: Shows how to write values to ParticleAttribute instances in both the old implicit API and the new explicit API that requires passing the mesh reference and supports both direct values and function callbacks.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/vfx-composer/CHANGELOG.md#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst speed = new ParticleAttribute(() => 0)\nconst velocity = new ParticleAttribute(() => new THREE.Vector3())\n\n/* Before: */\nspeed.value = 5\nvelocity.value.set(x, y, z)\n\n/* Now: */\nspeed.write(mesh, 5)\nvelocity.write(mesh, (v) => v.set(x, y, z))\n```\n\n----------------------------------------\n\nTITLE: Writing ParticleAttribute Values with Different Approaches in TSX\nDESCRIPTION: Examples of how to write to particle attributes using both direct values and callback functions that modify existing objects to improve performance by reducing object creation.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/vfx-composer-r3f/CHANGELOG.md#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst speed = new ParticleAttribute(() => 0)\nconst velocity = new ParticleAttribute(() => new THREE.Vector3())\n\n/* Before: */\nspeed.value = 5\nvelocity.value.set(x, y, z)\n\n/* Now: */\nspeed.write(mesh, 5)\nvelocity.write(mesh, (v) => v.set(x, y, z))\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Time Modulation Shader Unit\nDESCRIPTION: Shows how to create a reusable shader unit that encapsulates a time-based color modulation effect using functional composition.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/shader-composer/README.md#2025-04-11_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst ModulateOverTime = (color: Input<\"vec3\">) =>\n  pipe(\n    Time(),\n    (v) => Sin(v),\n    (v) => NormalizePlusMinusOne(v),\n    (v) => Mul(color, v)\n  )\n```\n\n----------------------------------------\n\nTITLE: Creating a Float Unit with a Function Result\nDESCRIPTION: Demonstrates creating a unit that holds the result of another shader function, showing how units can depend on other units or functions.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/shader-composer/README.md#2025-04-11_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst number = Unit(\"float\", Add(1, 0.5))\n```\n\n----------------------------------------\n\nTITLE: Rendering Components Based on State with Match Component\nDESCRIPTION: Shows how to conditionally render React components based on the current state of a state machine using the Match component. Components can be rendered for a single state or multiple states.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/state-composer/README.md#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { GameState } from \"./state\"\n\nconst Game = () => (\n  <Canvas>\n    <GameState.Match state=\"menu\">\n      <Menu />\n    </GameState.Match>\n\n    {/* The gameplay tree is rendered no matter if the game is paused or not */}\n    <GameState.Match state={[\"gameplay\", \"pause\"]}>\n      <Gameplay />\n    </GameState.Match>\n\n    <GameState.Match state=\"pause\">\n      <Menu />\n    </GameState.Match>\n\n    <GameState.Match state=\"pause\">\n      <Menu />\n    </GameState.Match>\n  </Canvas>\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Emission Rate in React Three Fiber\nDESCRIPTION: Setting a custom emission rate (in particles per second) using the rate prop.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/vfx-composer-r3f/README.md#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Emitter rate={20} />\n```\n\n----------------------------------------\n\nTITLE: Using ShaderMaster with R3F MeshStandardMaterial\nDESCRIPTION: Example of using the ShaderMaster unit with the useShader hook to create custom shaders for Three.js materials. The Shader component applies the shader properties to the material.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/shader-composer-r3f/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MyShadedThingy() {\n  const shader = useShader(() => {\n    return ShaderMaster({\n      color: /* ... */\n      position: /* ... */\n      /* etc. */\n    })\n  }, [])\n\n  return (\n    <mesh>\n      <boxGeometry />\n\n      <meshStandardMaterial>\n        <Shader {...shader} />\n      </meshStandardMaterial>\n    </mesh>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a State Machine in TypeScript\nDESCRIPTION: Demonstrates how to define a type for possible states and create a state machine using the createStateMachine function with an initial state.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/state-composer/README.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/* Define a type of possible states */\ntype State = \"menu\" | \"gameplay\" | \"pause\" | \"gameover\"\n\n/* Create and export the State Machine */\nexport const GameState = createStateMachine<State>(\"menu\")\n```\n\n----------------------------------------\n\nTITLE: Basic R3F Stage Hello World Setup\nDESCRIPTION: Basic implementation of R3F Stage showing how to create a simple 3D scene with a dodecahedron mesh using the Application component.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/r3f-stage/README.md#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Application } from \"r3f-stage\"\n\n/* r3f-stage provides a global stylesheet. Please import it in your application and remove any other global styles you may have defined. */\nimport \"r3f-stage/styles.css\"\n\nfunction App() {\n  return (\n    <Application>\n      <mesh>\n        <dodecahedronGeometry />\n        <meshStandardMaterial />\n      </mesh>\n    </Application>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Lifetime Component in React\nDESCRIPTION: Example of using the Lifetime component to automatically remove children after a specified time period.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/timeline-composer/README.md#2025-04-11_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Lifetime seconds={2.5}>\n  <p>I'm only here for 2.5 seconds. Cya!</p>\n</Lifetime>\n```\n\n----------------------------------------\n\nTITLE: Using Translate Module with Space Parameter in JSX\nDESCRIPTION: Example of using the Translate module with the space parameter set to \"view\". The space parameter determines which reference space the given vector exists in, with options including \"world\", \"local\", and \"view\".\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/material-composer/CHANGELOG.md#2025-04-11_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<modules.Translate\n  offset={Mul(new Vector3(1, 0, 0), Sin(time))}\n  space=\"view\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Initializing Shader Composer with Three.js\nDESCRIPTION: A basic example showing how to import and configure Shader Composer to work with Three.js. It imports the core compiler and Three.js binding configuration, then initializes the Three.js integration.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/shader-composer-three/README.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { compileShader } from \"@shader-composer/core\"\nimport configureThree from \"@shader-composer/three\"\n\nconfigureThree()\n```\n\n----------------------------------------\n\nTITLE: Setting Particle Lifetimes in VFX Composer\nDESCRIPTION: Demonstrates the before and after syntax for setting particle lifetimes within a particle setup callback, showing the transition to the new explicit API that requires passing the mesh reference.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/vfx-composer/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst lifetime = createParticleLifetime()\n\n/* Before: */\nlifetime.setLifetime(duration, offset)\n\n/* Now: */\nlifetime.write(mesh, duration, offset)\n```\n\n----------------------------------------\n\nTITLE: Using Repeat Component with Infinite Repetitions\nDESCRIPTION: Example of using the Repeat component without specifying times parameter, which defaults to Infinity for endless repetition.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/timeline-composer/README.md#2025-04-11_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Repeat seconds={2.5}>\n  <p>I will repeat forever.</p>\n  <p>Have a random number: {Math.random()}</p>\n</Repeat>\n```\n\n----------------------------------------\n\nTITLE: Defining useNullableState React Hook in TypeScript\nDESCRIPTION: A custom React hook that manages a nullable state value with TypeScript generics. The hook returns a tuple containing the current state value and setter functions to update or clear the state.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/hmans-use-nullable-state/README.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport function useNullableState<T>(\n  initialState: T | null = null\n): [T | null, (value: T | null) => void, (value: T) => void, () => void] {\n  const [value, setValue] = useState<T | null>(initialState)\n\n  return [\n    value,\n    setValue,\n    (value: T) => setValue(value),\n    () => setValue(null)\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Color Gradient (JSX)\nDESCRIPTION: Example demonstrating how to define a color gradient using the Gradient unit with multiple color stops and heat values.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/shader-composer/CHANGELOG.md#2025-04-11_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nconst color = Gradient(\n  heat,\n  [new Color(\"#03071E\"), 0],\n  [new Color(\"#03071E\"), 0.3],\n  [new Color(\"#DC2F02\"), 0.5],\n  [new Color(\"#E85D04\"), 0.6],\n  [new Color(\"#FFBA08\").multiplyScalar(2), 0.8],\n  [new Color(\"white\").multiplyScalar(2), 0.9]\n)\n```\n\n----------------------------------------\n\nTITLE: Composing VFX Animation with Timeline Composer\nDESCRIPTION: An example showing how to use Timeline Composer to orchestrate a staggered VFX Composer animation with various effects and delays.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/timeline-composer/README.md#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Lifetime seconds={5}>\n  <SmokeRing />\n  <Fireball />\n\n  <Delay seconds={0.3}>\n    <CameraShake decay />\n    <Fireball />\n\n    <Delay seconds={0.2}>\n      <Rocks />\n      <SmokeCloud />\n    </Delay>\n  </Delay>\n</Lifetime>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Addition Function with GLSL Expressions\nDESCRIPTION: Demonstrates how to create a reusable function that produces a shader unit using GLSL expressions, showcasing the flexibility of mixing JavaScript and GLSL.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/shader-composer/README.md#2025-04-11_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst AddTwoNumbers = (a: Input<\"float\">, b: Input<\"float\">) =>\n  Unit(\"float\", $`${a} + ${b}`)\n```\n\n----------------------------------------\n\nTITLE: Using Custom Material Components with Shaders in React Three Fiber\nDESCRIPTION: Shows how to use the Custom component wrapper for Three.js materials to easily create customized materials with shaders. This example applies custom shaders to both a standard material and a depth material.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/shader-composer-noise/CHANGELOG.md#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<mesh castShadow receiveShadow>\n  <dodecahedronGeometry args={[2, 5]} />\n\n  <Custom.MeshStandardMaterial\n    {...shader}\n    flatShading\n    metalness={0.5}\n    roughness={0.5}\n  />\n\n  <Custom.MeshDepthMaterial {...depthShader} />\n</mesh>\n```\n\n----------------------------------------\n\nTITLE: Using GLSL Expressions in Shader Units\nDESCRIPTION: Shows how to create a shader unit using direct GLSL code through the glsl tagged template literal (alias $), allowing for custom GLSL expressions.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/shader-composer/README.md#2025-04-11_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst number = Unit(\"float\", $`1 + 0.5`)\n```\n\n----------------------------------------\n\nTITLE: Connecting Emitters to Specific Particles Meshes in React Three Fiber\nDESCRIPTION: Explicitly connecting an Emitter to a specific Particles component using a ref, allowing the emitter to exist outside of the Particles component hierarchy.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/vfx-composer-r3f/README.md#2025-04-11_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Emitter particles={particlesRef} />\n```\n\n----------------------------------------\n\nTITLE: Using Composable Material with MeshPhysicalMaterial in JSX\nDESCRIPTION: Example showing how to use the composable.meshPhysicalMaterial component to create a composable material with custom modules in JSX.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/material-composer-patch-material/CHANGELOG.md#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<composable.meshPhysicalMaterial>\n  {/* Modules */}\n</composable.meshPhysicalMaterial>\n```\n\n----------------------------------------\n\nTITLE: Combining Delay, Repeat, and Lifetime Components\nDESCRIPTION: Example demonstrating how to combine multiple Timeline Composer components to create more complex animation patterns, simulating a blinking effect.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/timeline-composer/README.md#2025-04-11_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Lifetime seconds={10}>\n  <Repeat seconds={0.5}>\n    <Lifetime seconds={0.25}>\n      <p>I miss the blink tag!</p>\n    </Lifetime>\n  </Repeat>\n</Lifetime>\n```\n\n----------------------------------------\n\nTITLE: Implementing Shader Update Callbacks\nDESCRIPTION: Shows how to use the update callback provided by compileShader to keep shader uniforms like Time updated in an animation loop.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/shader-composer/README.md#2025-04-11_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst [shader, { update }] = compileShader(root)\nconst material = new THREE.ShaderMaterial(shader)\n\nfunction animate() {\n  requestAnimationFrame(animate)\n  update()\n}\n\nanimate()\n```\n\n----------------------------------------\n\nTITLE: Updating Shader in Render Loop (JavaScript)\nDESCRIPTION: Example showing how to update a compiled shader in the render loop with the new extended signature including deltatime, camera, scene and WebGL renderer parameters.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/shader-composer/CHANGELOG.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst [shader, { update }] = compileShader(root)\n\n/* In your render loop */\nupdate(dt, camera, scene, gl)\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Shader Unit with the Unit() Function\nDESCRIPTION: Demonstrates how to create a custom shader unit with a specific type and value using the Unit() function, which is the fundamental building block for creating shader units.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/shader-composer/README.md#2025-04-11_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst color = Unit(\"vec3\", new Color(\"hotpink\"), {\n  name: \"My favorite color\"\n})\n```\n\n----------------------------------------\n\nTITLE: Basic RenderCanvas and RenderPipeline Setup\nDESCRIPTION: Example showing the basic structure of a render-composer application with RenderCanvas wrapping RenderPipeline, which enables vignette, bloom, and anti-aliasing effects.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/render-composer/CHANGELOG.md#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction App() {\n  return (\n    <RenderCanvas>\n      <RenderPipeline vignette bloom antiAliasing>\n        {/* etc. */}\n      </RenderPipeline>\n    </RenderCanvas>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Waterfall Animations with Nested Delays\nDESCRIPTION: Example of nesting Delay components to create a sequential waterfall animation effect where elements appear one after another.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/timeline-composer/README.md#2025-04-11_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<Delay seconds={1}>\n  <p>One...</p>\n\n  <Delay seconds={0.5}>\n    <p>Two...</p>\n\n    <Delay seconds={0.5}>\n      <p>...three!</p>\n    </Delay>\n  </Delay>\n</Delay>\n```\n\n----------------------------------------\n\nTITLE: Accessing Vector Components in TypeScript\nDESCRIPTION: Demonstrates how to access individual components of Vec2, Vec3, and Vec4 units after removal of SplitVector units. Shows old and new syntax.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/shader-composer/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Before:\nconst [x, y] = SplitVector2(vector)\n\n// Now:\nconst { x, y } = vector\n\n// For Input<\"vec2\"> arguments:\nconst { x, y } = Vec2(aVec2CompatibleInput)\n```\n\n----------------------------------------\n\nTITLE: Using Composable MeshPhysicalMaterial in JSX\nDESCRIPTION: Shows the usage of composable.meshPhysicalMaterial component for creating customizable physical materials in JSX.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/material-composer-patched/CHANGELOG.md#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<composable.meshPhysicalMaterial>\n  {/* Modules */}\n</composable.meshPhysicalMaterial>\n```\n\n----------------------------------------\n\nTITLE: Using Layer with Blend Operations in JSX\nDESCRIPTION: Demonstrates different ways to use the Layer component with blend operations. Layer allows specifying opacity and blend operations that can be defined as a function or using predefined blend functions.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/material-composer/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Layer blend={Blend.add}>\n  <modules.Fresnel />\n</Layer>\n\n<Layer opacity={Fresnel()} blend=\"add\">\n  <modules.Color color=\"white\" />\n</Layer>\n\n<Layer blend={(a, b) => Add(a, Mul(b, Fresnel()))}>\n  <modules.Color color=\"white\" />\n</Layer>\n```\n\n----------------------------------------\n\nTITLE: Creating and Reusing a Time Unit\nDESCRIPTION: Shows how to create a Time unit using the constructor syntax and recommends creating a single instance to reuse throughout the shader.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/shader-composer/CHANGELOG.md#2025-04-11_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst time = Time()\n```\n\n----------------------------------------\n\nTITLE: Using Color Module with String Representation in JavaScript\nDESCRIPTION: Shows how to use the Color module with a THREE.ColorRepresentation string in JavaScript. The module accepts color names as strings for easy color application.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/material-composer/CHANGELOG.md#2025-04-11_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nModules.Color({ color: \"hotpink\" })\n```\n\n----------------------------------------\n\nTITLE: Compiling and Patching Materials Imperatively in JavaScript\nDESCRIPTION: Demonstrates the imperative approach to compiling modules, creating a shader, and patching a material using the new API functions.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/material-composer-patched/CHANGELOG.md#2025-04-11_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst material = new MeshStandardMaterial({})\nconst root = compileModules(modules)\nconst [shader, shaderMeta] = compileShader(root)\npatchMaterial(material, shader)\n```\n\n----------------------------------------\n\nTITLE: Toggling Between Two States with Timeline Components\nDESCRIPTION: Example showing how to repeatedly toggle between two different states using Repeat, Lifetime, and Delay components together.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/timeline-composer/README.md#2025-04-11_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Repeat seconds={1}>\n  <Lifetime seconds={0.5}>\n    <p>See</p>\n  </Lifetime>\n\n  <Delay seconds={0.5}>\n    <p>Saw</p>\n  </Delay>\n</Repeat>\n```\n\n----------------------------------------\n\nTITLE: Using centralized asset loaders in a React component\nDESCRIPTION: Example demonstrating how to use the centralized asset loaders in a React component. This approach prevents URL errors and ensures assets are preloaded when the assets module is imported.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/hmans-r3f-create-loader/README.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useAsset } from \"./assets\"\n\nfunction Asteroid() {\n  /* Equivalent to `useTexture(\"/textures/fog.png\")`, but you can't get the URL\n  wrong and the preloading is triggered at time of importing `assets.ts`. */\n  const fog = useAsset.fog()\n\n  return /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: R3F Stage with Description Component\nDESCRIPTION: Example showing how to add descriptive text to an R3F Stage scene using the Description component.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/r3f-stage/README.md#2025-04-11_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction App() {\n  return (\n    <Application>\n      <mesh>\n        <dodecahedronGeometry />\n        <meshStandardMaterial />\n      </mesh>\n\n      <Description>\n        This is a really simple example. Let's move on to more interesting\n        things!\n      </Description>\n    </Application>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Uniform with useUniform Hook\nDESCRIPTION: Example of using the useUniform hook to create a float uniform with an initial value of 1. The hook manages the uniform's lifecycle and updates.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/shader-composer-r3f/CHANGELOG.md#2025-04-11_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst uniform = useUniform(\"float\", 1)\n```\n\n----------------------------------------\n\nTITLE: Using Composable Material with MeshStandardMaterial in JSX\nDESCRIPTION: Example showing how to use the composable.meshStandardMaterial component to create a composable material with custom modules in JSX.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/material-composer-patch-material/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<composable.meshStandardMaterial>\n  {/* Modules */}\n</composable.meshStandardMaterial>\n```\n\n----------------------------------------\n\nTITLE: Multiple Examples in R3F Stage\nDESCRIPTION: Implementation showing how to create multiple examples with navigation UI using the Example component with different paths and titles.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/r3f-stage/README.md#2025-04-11_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nfunction App() {\n  return (\n    <Application>\n      <Example path=\"one\" title=\"Example 1\" makeDefault>\n        <Description>This is a very simple example.</Description>\n\n        <mesh>\n          <boxGeometry />\n          <meshStandardMaterial color=\"green\" />\n        </mesh>\n      </Example>\n\n      <Example path=\"two\" title=\"Example 2: The Exampling\">\n        <Description>This is also a very simple example.</Description>\n\n        <mesh>\n          <sphereGeometry />\n          <meshStandardMaterial color=\"white\" />\n        </mesh>\n      </Example>\n    </Application>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Reactive Uniform in React Three Fiber\nDESCRIPTION: Example of using the useUniform hook to create a uniform of float type with an initial value of 1. The uniform will update reactively when the value changes.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/shader-composer-noise/CHANGELOG.md#2025-04-11_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst uniform = useUniform(\"float\", 1)\n```\n\n----------------------------------------\n\nTITLE: Using Composable Material with Existing Instance in JSX\nDESCRIPTION: Illustrates how to use the composable.material component with an existing material instance in JSX.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/material-composer-patched/CHANGELOG.md#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<composable.material instance={myMaterial}>\n  {/* Modules */}\n</composable.material>\n```\n\n----------------------------------------\n\nTITLE: Implementing State Transitions with Guards\nDESCRIPTION: Shows how to create a function that transitions between states with checks to ensure the current state is valid before transitioning.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/state-composer/README.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const enterGameplay = () => {\n  /* Check if we're currently in an expected state */\n  if (!GameState.is(\"menu\")) return\n\n  /* Execute some code that should run at the transition */\n  initializeGameplay()\n\n  /* Transition to the next state */\n  GameState.enter(\"gameplay\")\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing TilingUV with ScaleAndOffset in JavaScript\nDESCRIPTION: Demonstrates how to achieve the same functionality as the removed TilingUV unit using ScaleAndOffset with UV input.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/shader-composer/CHANGELOG.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nScaleAndOffset(UV, scale, offset)\n```\n\n----------------------------------------\n\nTITLE: Chaining State Checks and Transitions\nDESCRIPTION: Demonstrates a more concise approach to checking and transitioning states using logical operators to chain functions together.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/state-composer/README.md#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const returnToTitle = () =>\n  GameState.is(\"gameplay\") && GameState.enter(\"title\")\n```\n\n----------------------------------------\n\nTITLE: Imperative Material Compilation\nDESCRIPTION: Example of compiling and patching materials imperatively using the provided utility functions.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/material-composer-r3f/CHANGELOG.md#2025-04-11_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst material = new MeshStandardMaterial({})\nconst root = compileModules(modules)\nconst [shader, shaderMeta] = compileShader(root)\npatchMaterial(material, shader)\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Float Unit with a Numeric Value\nDESCRIPTION: Shows how to create a basic unit of type float with a numerical value, demonstrating the simplest way to create a shader unit.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/shader-composer/README.md#2025-04-11_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst number = Unit(\"float\", 1.5)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Guard Functions for State Transitions\nDESCRIPTION: Shows how to implement guard functions that check specific conditions before transitioning to a new state, using logical operators for chaining.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/state-composer/README.md#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst canStartGame = () => {\n  /* Something that returns true or false */\n}\n\nexport const startGame = () =>\n  GameState.is(\"menu\") && canStartGame && GameState.enter(\"title\")\n```\n\n----------------------------------------\n\nTITLE: Enabling React StrictMode with Render Composer (Manual Approach)\nDESCRIPTION: Example showing how to manually enable React's StrictMode with Render Composer by wrapping the RenderPipeline component in a StrictMode component.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/render-composer/README.md#2025-04-11_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StrictMode } from \"react\"\nimport * as RC from \"render-composer\"\n\nfunction App() {\n  return (\n    <RC.Canvas>\n      <StrictMode>\n        <RC.RenderPipeline>{/* etc. */}</RC.RenderPipeline>\n      </StrictMode>\n    </RC.Canvas>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Integration with Timeline Composer in React Three Fiber\nDESCRIPTION: Using Timeline Composer components to create repeated bursts of particle emissions with controlled lifetime.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/vfx-composer-r3f/README.md#2025-04-11_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Repeat seconds={2} times={5}>\n  <Lifetime seconds={1}>\n    <Emitter rate={50} />\n  </Lifetime>\n</Repeat>\n```\n\n----------------------------------------\n\nTITLE: Customizing Canvas Properties in Render Composer\nDESCRIPTION: Example demonstrating how to customize the Canvas component properties in Render Composer. The example shows how to set the frameloop property to 'demand' while keeping other default settings.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/render-composer/README.md#2025-04-11_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as RC from \"render-composer\"\n\nfunction App() {\n  return (\n    <RC.Canvas frameloop=\"demand\">\n      <RC.RenderPipeline>{/* etc. */}</RC.RenderPipeline>\n    </RC.Canvas>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Vec3 Units with Various Inputs in TypeScript\nDESCRIPTION: Shows how to create Vec3 units using different input types, including arrays and nested arrays with Vector2 objects.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/shader-composer/CHANGELOG.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst v1 = Vec3([1, 2, 3])\nconst v2 = Vec3([new Vector2(1, 2), 3])\n```\n\n----------------------------------------\n\nTITLE: Using Expression Functions in TypeScript\nDESCRIPTION: Demonstrates the new syntax for using expression functions like $vec3, which return GLSL expressions instead of units.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/shader-composer/CHANGELOG.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst vectorExpression = $vec3(1, 2, 3)\n```\n\n----------------------------------------\n\nTITLE: Using Custom Canvas with Render Composer Pipeline\nDESCRIPTION: Example showing how to use a custom Canvas from react-three-fiber with the Render Composer pipeline. It's important to set the 'flat' property on the Canvas for compatibility with Render Composer.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/render-composer/README.md#2025-04-11_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Canvas } from \"@react-three/fiber\"\nimport * as RC from \"render-composer\"\n\nfunction App() {\n  return (\n    <Canvas flat>\n      <RC.RenderPipeline>{/* etc. */}</RC.RenderPipeline>\n    </Canvas>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Unit with Default Expression in TypeScript\nDESCRIPTION: Shows how to create a custom unit with a default vector expression using the new $vec3 function.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/shader-composer/CHANGELOG.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype FooArgs = {\n  position: Input<\"vec3\">\n}\n\nconst Foo = ({ position = $vec3(1, 2, 3) }: FooArgs) => {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Deeply Nested Shader Graph Example\nDESCRIPTION: Demonstrates a more complex nested shader graph that combines multiple operations to create a time-modulated color effect.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/shader-composer/README.md#2025-04-11_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nShaderMaterialMaster({\n  color: Mul(new Color(\"hotpink\"), NormalizePlusMinusOne(Sin(Time())))\n})\n```\n\n----------------------------------------\n\nTITLE: Using Composable Material with Existing Material Instance in JSX\nDESCRIPTION: Example showing how to use the composable.material component with an existing material instance to apply custom modules in JSX.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/material-composer-patch-material/CHANGELOG.md#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<composable.material instance={myMaterial}>\n  {/* Modules */}\n</composable.material>\n```\n\n----------------------------------------\n\nTITLE: Custom Material Instance Component\nDESCRIPTION: Example showing how to use an existing material instance with the composable material system.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/material-composer-r3f/CHANGELOG.md#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<composable.material instance={myMaterial}>\n  {/* Modules */}\n</composable.material>\n```\n\n----------------------------------------\n\nTITLE: Auto-Shadow Material Example\nDESCRIPTION: Example demonstrating the autoShadow property for automatic depth material creation and shadow casting.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/material-composer-r3f/CHANGELOG.md#2025-04-11_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<mesh castShadow>\n  <icosahedronGeometry args={[1, 8]} />\n\n  <composable.meshStandardMaterial autoShadow>\n    <modules.DistortSurface offset={Mul(time, 0.4)} amplitude={0.1} />\n\n    <Lava\n      offset={Mul(vec3(0.1, 0.2, 0.5), time)}\n      scale={0.3}\n      octaves={5}\n      power={1}\n    />\n  </composable.meshStandardMaterial>\n</mesh>\n```\n\n----------------------------------------\n\nTITLE: Combining Rate and Limit in React Three Fiber\nDESCRIPTION: Setting both emission rate and total particle limit for an Emitter component.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/vfx-composer-r3f/README.md#2025-04-11_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Emitter rate={20} limit={100} />\n```\n\n----------------------------------------\n\nTITLE: Using Composable MeshStandardMaterial in JSX\nDESCRIPTION: Demonstrates how to use the new composable.meshStandardMaterial component in JSX for creating customizable materials.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/material-composer-patched/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<composable.meshStandardMaterial>\n  {/* Modules */}\n</composable.meshStandardMaterial>\n```\n\n----------------------------------------\n\nTITLE: Instant Emission with Infinite Rate in React Three Fiber\nDESCRIPTION: Using an infinite rate to immediately emit all particles at once up to the specified limit.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/vfx-composer-r3f/README.md#2025-04-11_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Emitter rate={Infinity} limit={1000} />\n```\n\n----------------------------------------\n\nTITLE: Creating Uniforms with Auto-Generated Names\nDESCRIPTION: Demonstrates the new approach for creating uniforms with automatically generated names instead of manually specifying them.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/shader-composer/CHANGELOG.md#2025-04-11_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst uniform = Uniform(\"vec3\", new Vector3())\n```\n\n----------------------------------------\n\nTITLE: Limiting Total Particles in React Three Fiber\nDESCRIPTION: Setting a maximum limit on the total number of particles to be emitted using the limit prop.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/vfx-composer-r3f/README.md#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Emitter limit={100} />\n```\n\n----------------------------------------\n\nTITLE: Declaring Examples with JSX Components in React Three Fiber\nDESCRIPTION: This snippet demonstrates how to declare examples using JSX and React components in a React Three Fiber application. It shows the usage of the Application and Example components, as well as lazy loading of complex examples.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/r3f-stage/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst IcosahedronExample = React.lazy(() =>\n  import(\"./examples/IcosahedronExample\")\n)\n\nfunction App() {\n  return (\n    <Application>\n      <Example path=\"simple\" title=\"Simple\" makeDefault>\n        <Description>This is a simple example.</Description>\n\n        <mesh>\n          <boxGeometry />\n          <meshStandardMaterial color=\"yellow\" />\n        </mesh>\n      </Example>\n\n      <Example path=\"complex\" title=\"Complex\">\n        <Description>\n          This is a complex example that is being lazy-loaded, yay!\n        </Description>\n\n        <IcosahedronExample />\n      </Example>\n    </Application>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Repeat Component with Limited Repetitions\nDESCRIPTION: Example of using the Repeat component to unmount and re-mount its children a specific number of times with a delay between repetitions.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/timeline-composer/README.md#2025-04-11_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Repeat seconds={2.5} times={3}>\n  <p>\n    I will automatically unmount and re-mount every 2.5 seconds, and stop after showing 3\n    times, because that is clearly enough!\n  </p>\n</Repeat>\n```\n\n----------------------------------------\n\nTITLE: Installing R3F Stage Dependencies\nDESCRIPTION: Commands for installing the R3F Stage library and its TypeScript type definitions using yarn package manager.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/r3f-stage/README.md#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Mandatory\nyarn install r3f-stage\n\n# Types (optional, but very useful)\nyarn install -D @types/three\n```\n\n----------------------------------------\n\nTITLE: Creating a Dynamic Particle Emission Rate in JSX\nDESCRIPTION: Example of using a function to create a time-based dynamic emission rate for particles, allowing the emission rate to vary based on elapsed time.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/vfx-composer-r3f/CHANGELOG.md#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst clock = useThree((s) => s.clock)\n\n<Emitter\n  rate={() => 50 + Math.sin(clock.elapsedTime * 2) * 30}\n  setup={({ position }) => {\n    /* ... */\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Delay Component in React\nDESCRIPTION: Example of using the Delay component to delay rendering children for a specified amount of time.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/timeline-composer/README.md#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Delay seconds={2.5}>\n  <p>I will only render after 2.5 seconds!</p>\n</Delay>\n```\n\n----------------------------------------\n\nTITLE: Using Color Module with String Representation in JSX\nDESCRIPTION: Demonstrates the JSX syntax for the Color module with a string color representation. This provides a simple way to apply named colors in a declarative manner.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/material-composer/CHANGELOG.md#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<modules.Color color=\"hotpink\">\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading with R3F Stage\nDESCRIPTION: Example demonstrating how to implement lazy loading of components in R3F Stage using React.lazy for better performance.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/r3f-stage/README.md#2025-04-11_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst HugeExample = lazy(() => import(\"./HugeExample\"))\n\nfunction App() {\n  return (\n    <Application>\n      <Example path=\"huge\" title=\"Huge Example\">\n        <Description>\n          This is an example that uses a lot of resources and uses a long time\n          to load, which is why we're loading it lazily.\n        </Description>\n\n        <HugeExample />\n      </Example>\n\n      {/* ... */}\n    </Application>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling React StrictMode with Render Composer (Using strict prop)\nDESCRIPTION: Example demonstrating how to enable React's StrictMode with Render Composer using the 'strict' property on the Canvas component, which automatically sets up the StrictMode wrapper.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/render-composer/README.md#2025-04-11_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as RC from \"render-composer\"\n\nfunction App() {\n  return (\n    <RC.Canvas strict>\n      <RC.RenderPipeline>{/* etc. */}</RC.RenderPipeline>\n    </RC.Canvas>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Current State with is Function\nDESCRIPTION: Demonstrates how to check the current state of a state machine in imperative code using the is function.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/state-composer/README.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nif (GameState.is(\"gameplay\")) {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Timeline Composer in a Project\nDESCRIPTION: Commands for installing the Timeline Composer package using various package managers like yarn, npm, or pnpm.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/timeline-composer/README.md#2025-04-11_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add timeline-composer\nnpm add timeline-composer\npnpm add timeline-composer\n```\n\n----------------------------------------\n\nTITLE: Setting Up Development Environment for Timeline Composer\nDESCRIPTION: Shell commands to set up a development environment for Timeline Composer using PNPM package manager.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/timeline-composer/README.md#2025-04-11_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\npnpm install\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Installing and Running VFX Composer Examples\nDESCRIPTION: Commands for cloning the repository, installing dependencies, and running the examples suite for VFX Composer. This allows developers to explore and test the library's capabilities.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/vfx-composer/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn && yarn examples\n```\n\n----------------------------------------\n\nTITLE: MIT License Text\nDESCRIPTION: Standard MIT License text granting permission to use, modify, and distribute the software while limiting liability. The license applies to the Composer Suite project maintained by Hendrik Mans.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/README.md#2025-04-11_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nCopyright (c) 2022 Hendrik Mans\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Implementing Shader Effects with Shader Composer in React\nDESCRIPTION: Example showing how to create a dynamic shader effect using ShaderComposer with React. The shader applies color mixing and fresnel effects to a sphere mesh, demonstrating the composition of shader units and material properties.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/README.md#2025-04-11_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nconst ShaderComposerExample = () => {\n  const shader = useShader(() =>\n    ShaderMaterialMaster({\n      color: pipe(\n        Vec3(new Color(\"red\")),\n        (v) => Mix(v, new Color(\"white\"), NormalizePlusMinusOne(Sin(Time()))),\n        (v) => Add(v, Fresnel())\n      )\n    })\n  )\n\n  return (\n    <mesh>\n      <sphereGeometry />\n      <shaderMaterial {...shader} />\n    </mesh>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Material Composition with Material Composer in React\nDESCRIPTION: Demonstrates the usage of Material Composer to create dynamic material effects. Shows how to combine multiple material modules including color layers, animations, and fresnel effects.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/README.md#2025-04-11_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nconst MaterialComposerExample = () => (\n  <mesh position-y={1.5} castShadow>\n    <sphereGeometry />\n\n    <Composable.MeshStandardMaterial>\n      <Modules.Color color=\"#d62828\" />\n\n      <Layer opacity={NormalizePlusMinusOne(Sin(Time()))}>\n        <Modules.Color color=\"#003049\" />\n      </Layer>\n\n      <Modules.Fresnel intensity={0.2} />\n    </Composable.MeshStandardMaterial>\n  </mesh>\n)\n```\n\n----------------------------------------\n\nTITLE: Using ShaderMaster and Shader Component in React Three Fiber\nDESCRIPTION: Demonstrates how to use the ShaderMaster unit and Shader component to patch Three.js materials in React Three Fiber. The useShader hook initializes a shader with various properties which is then applied to a meshStandardMaterial.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/shader-composer-noise/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MyShadedThingy() {\n  const shader = useShader(() => {\n    return ShaderMaster({\n      color: /* ... */\n      position: /* ... */\n      /* etc. */\n    })\n  }, [])\n\n  return (\n    <mesh>\n      <boxGeometry />\n\n      <meshStandardMaterial>\n        <Shader {...shader} />\n      </meshStandardMaterial>\n    </mesh>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Animation Sequencing with Timeline Composer in React\nDESCRIPTION: Shows how to orchestrate complex animation sequences using Timeline Composer's declarative API. The example demonstrates timing control and component composition for visual effects.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/README.md#2025-04-11_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<Lifetime seconds={5}>\n  <SmokeRing />\n  <Fireball />\n\n  <Delay seconds={0.3}>\n    <CameraShake decay />\n    <Fireball />\n\n    <Delay seconds={0.2}>\n      <Rocks />\n      <SmokeCloud />\n    </Delay>\n  </Delay>\n</Lifetime>\n```\n\n----------------------------------------\n\nTITLE: MIT License text\nDESCRIPTION: The MIT License text applicable to the createLoader utility, granting permissions to use, modify, and distribute the software under specific conditions.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/hmans-r3f-create-loader/README.md#2025-04-11_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nCopyright (c) 2022 Hendrik Mans\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: MIT License Text\nDESCRIPTION: The MIT license text for the shader-composer-three project. It grants permission to use, modify, and distribute the software under certain conditions.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/shader-composer-three/README.md#2025-04-11_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nCopyright (c) 2022 Hendrik Mans\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Importing the Event Class in TypeScript\nDESCRIPTION: Shows how to import the Event class from the @hmans/event package, which is the main component of this event system.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/hmans-event/README.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Event } from \"@hmans/event\"\n```\n\n----------------------------------------\n\nTITLE: VFX Composer MIT License\nDESCRIPTION: The full text of the MIT License under which VFX Composer is distributed. This license grants permission to use, modify, and distribute the software under certain conditions.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/vfx-composer/README.md#2025-04-11_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nCopyright (c) 2022 Hendrik Mans\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Navigation Headings in R3F Stage\nDESCRIPTION: Example showing how to organize examples with headings in the navigation using the Heading component.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/r3f-stage/README.md#2025-04-11_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nfunction App() {\n  return (\n    <Application>\n      <Heading>Main Examples</Heading>\n      <Example />\n      <Example />\n\n      <Heading>Extra Examples</Heading>\n      <Example />\n      <Example />\n      <Example />\n    </Application>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: MIT License Text\nDESCRIPTION: The MIT license text for the Shader Composer library, granting permission to use, modify, and distribute the software under certain conditions.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/shader-composer/README.md#2025-04-11_snippet_13\n\nLANGUAGE: text\nCODE:\n```\nCopyright (c) 2022 Hendrik Mans\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: MIT License for shader-composer-postprocessing\nDESCRIPTION: The project's MIT license text, allowing free use, modification, and distribution of the software with minimal restrictions, provided copyright notices are preserved.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/shader-composer-postprocessing/README.md#2025-04-11_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright (c) 2022 Hendrik Mans\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: MIT License Declaration for Shader Composer\nDESCRIPTION: The full MIT license text for the Shader Composer library, granting permission to use, modify, and distribute the software while disclaiming warranties and liabilities.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/shader-composer-core/README.md#2025-04-11_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright (c) 2022 Hendrik Mans\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Defining MIT License Terms for Composer Suite\nDESCRIPTION: The full text of the MIT License, specifying the terms under which the Composer Suite software can be used, modified, and distributed. It includes copyright information, permissions, conditions, and disclaimers.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/camera-composer/LICENSE.md#2025-04-11_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCopyright (c) 2022 Hendrik Mans\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: MIT License for Audio Composer Project\nDESCRIPTION: The full text of the MIT License applied to the Audio Composer project. It grants permission to use, modify, and distribute the software under certain conditions, including preserving the copyright notice and disclaimer.\nSOURCE: https://github.com/hmans/composer-suite/blob/main/packages/audio-composer/README.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\nCopyright (c) 2022 Hendrik Mans\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n```\n```"
  }
]