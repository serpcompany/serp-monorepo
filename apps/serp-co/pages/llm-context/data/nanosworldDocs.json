[
  {
    "owner": "nanos-world",
    "repo": "docs",
    "content": "TITLE: Managing Character Name Tags using Lua in nanos world (Client-Side)\nDESCRIPTION: This Lua script defines functions to dynamically add and remove name tags (TextRender objects) above player characters in nanos world. The `AddNametag` function creates a TextRender instance with the player's name, sets its properties (scale, color, font, alignment), attaches it above the character's head, and stores a reference. The `RemoveNametag` function retrieves and destroys the existing name tag associated with a player. Event subscriptions for `Character.Possess`, `Character.UnPossess`, and `Player.Spawn` ensure that name tags are appropriately created and removed when players possess/unpossess characters or spawn into the world. It depends on the nanos world Lua API, specifically the `TextRender`, `Vector`, `Rotator`, `Color`, `FontType`, `TextRenderAlignCamera`, `Player`, and `Character` classes and their respective methods/events.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/tutorials-and-examples/name-tags.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Function to add a Nametag to a Player\nfunction AddNametag(player, character)\n    -- Try to get it's character\n    if (character == nil) then\n        character = player:GetControlledCharacter()\n        if (character == nil) then return end\n    end\n\n    -- Spawns the Nametag (TextRender),\n    local nametag = TextRender(\n        Vector(),               -- Any Location\n        Rotator(),              -- Any Rotation\n        player:GetName(),       -- Player Name\n        Vector(0.5, 0.5, 0.5),  -- 50% Scale\n        Color(1, 1, 1),         -- White\n        FontType.Roboto,        -- Roboto Font\n        TextRenderAlignCamera.AlignCameraRotation -- Follow Camera Rotation\n    )\n\n    -- Attaches it to the character and saves it to the player's values\n    nametag:AttachTo(character)\n    nametag:SetRelativeLocation(Vector(0, 0, 250))\n\n    player:SetValue(\"Nametag\", nametag)\nend\n\n-- Function to remove a Nametag from  a Player\nfunction RemoveNametag(player, character)\n    -- Try to get it's character\n    if (character == nil) then\n        character = player:GetControlledCharacter()\n        if (character == nil) then return end\n    end\n\n    -- Gets the Nametag from the player, if any, and destroys it\n    local text_render = player:GetValue(\"Nametag\")\n    if (text_render and text_render:IsValid()) then\n        text_render:Destroy()\n    end\nend\n\n-- Adds a new Nametag to a character which was possessed\nCharacter.Subscribe(\"Possess\", function(character, player)\n    AddNametag(player, character)\nend)\n\n-- Removes the Nametag from a character which was unpossessed\nCharacter.Subscribe(\"UnPossess\", function(character, player)\n    RemoveNametag(player, character)\nend)\n\n-- When a Player is spawned - for when you connect and there is already Player's connected\nPlayer.Subscribe(\"Spawn\", function(player)\n    RemoveNametag(player)\n    AddNametag(player)\nend)\n```\n\n----------------------------------------\n\nTITLE: Spawning Light and StaticMesh Entities in Lua\nDESCRIPTION: This Lua snippet, intended for a server-side script, illustrates how to create instances of `Light` and `StaticMesh` entities within the nanos world environment. It specifies their initial position using `Vector`, rotation using `Rotator`, and assigns properties like color (`Color.RED`) or a specific mesh asset (`nanos-world::SM_Cube_VR_01`). Requires the respective classes and the `nanos-world` asset pack for the mesh.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/essential-concepts.mdx#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal my_light = Light(Vector(0, 100, 100), Rotator(), Color.RED)\nlocal my_static_mesh = StaticMesh(Vector(0, 0, 100), Rotator(), \"nanos-world::SM_Cube_VR_01\")\n```\n\n----------------------------------------\n\nTITLE: Instantiating 3D Text with TextRender - nanos world (Lua)\nDESCRIPTION: This Lua code snippet demonstrates how to create a new TextRender instance, specifying its position in 3D space, initial rotation, display text, scaling, color (using the Color class with RGB values), font type (e.g., OpenSans), and alignment so the text faces the camera. Dependencies include the nanos world game environment and the relevant classes (Vector, Rotator, Color, FontType, TextRenderAlignCamera). The key parameters determine location, appearance, and alignment. The expected output is a 3D text entity that appears in the world as defined, suitable for labels or indicators. Limitations include requiring the nanos world context and available font/material resources.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/classes/text-render.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal my_text_render = TextRender(\n    Vector(-100, 200, 300),\n    Rotator(),\n    \"My Awesome Text\",\n    Vector(1, 1, 1), -- Scale\n    Color(1, 0, 0), -- Red Color\n    FontType.OpenSans,\n    TextRenderAlignCamera.FaceCamera\n)\n```\n\n----------------------------------------\n\nTITLE: Spawning and Configuring a Weapon in Nanos World (Lua)\nDESCRIPTION: Demonstrates how to spawn a Weapon instance with an AK47 model and configure its settings, including ammo, damage, spread, recoil, visual effects, sounds, animations, meshes, and UI crosshair. Requires Nanos World server scripting environment with access to the Weapon class and relevant asset references (e.g., meshes, particles, sounds). Main parameters include position (Vector), rotation (Rotator), and asset strings; outputs a configured Weapon object ready for use or pickup. Constraints: must use valid asset paths and be run server-side with Nanos World API.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/classes/weapon.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Spawning a Weapon with an AK47 model\\nlocal new_weapon = Weapon(\\n    Vector(-900, 185, 215),\\n    Rotator(0, 0, 0),\\n    \"nanos-world::SK_AK47\"\\n)\\n\\n-- Configures Weapon Base Settings\\nnew_weapon:SetAmmoSettings(30, 1000)\\nnew_weapon:SetDamage(30)\\nnew_weapon:SetSpread(30)\\nnew_weapon:SetRecoil(0.25)\\nnew_weapon:SetBulletSettings(1, 20000, 20000, Color(100, 58, 0))\\nnew_weapon:SetCadence(0.1)\\nnew_weapon:SetWallbangSettings(50, 0.75)\\n\\n-- Configures how the Character Grabs and Aims the Weapon\\nnew_weapon:SetHandlingMode(HandlingMode.DoubleHandedWeapon)\\nnew_weapon:SetSightTransform(Vector(0, 0, -1), Rotator(-1.5, 0, 0))\\nnew_weapon:SetLeftHandTransform(Vector(22, 0, 9), Rotator(0, 60, 90))\\nnew_weapon:SetRightHandOffset(Vector(-10, 0, 0))\\n\\n-- Configures Weapon Particles\\nnew_weapon:SetParticlesBulletTrail(\"nanos-world::P_Bullet_Trail\")\\nnew_weapon:SetParticlesBarrel(\"nanos-world::P_Weapon_BarrelSmoke\")\\nnew_weapon:SetParticlesShells(\"nanos-world::P_Weapon_Shells_762x39\")\\n\\n-- Configures Weapon Sounds\\nnew_weapon:SetSoundDry(\"nanos-world::A_Rifle_Dry\")\\nnew_weapon:SetSoundLoad(\"nanos-world::A_Rifle_Load\")\\nnew_weapon:SetSoundUnload(\"nanos-world::A_Rifle_Unload\")\\nnew_weapon:SetSoundZooming(\"nanos-world::A_AimZoom\")\\nnew_weapon:SetSoundAim(\"nanos-world::A_Rattle\")\\nnew_weapon:SetSoundFire(\"nanos-world::A_AK47_Shot\")\\n\\n-- Configures Weapon Animations\\nnew_weapon:SetAnimationFire(\"nanos-world::A_AK47_Fire\")\\nnew_weapon:SetAnimationCharacterFire(\"nanos-world::AM_Mannequin_Sight_Fire\")\\nnew_weapon:SetAnimationReload(\"nanos-world::AM_Mannequin_Reload_Rifle\")\\n\\n-- Configures the Mesh to drop when reloading\\nnew_weapon:SetMagazineMesh(\"nanos-world::SM_AK47_Mag_Empty\")\\n\\n-- Configures the Crosshair Material\\nnew_weapon:SetCrosshairMaterial(\"nanos-world::MI_Crosshair_Regular\")\n```\n\n----------------------------------------\n\nTITLE: Spawning and Possessing Characters on Player Join (Lua)\nDESCRIPTION: This Lua script, added to `Server/Index.lua`, handles spawning characters for players. It defines a `SpawnCharacter` function that creates a `Character` entity and gives control to a specific `Player` using `player:Possess`. It subscribes this function to the `Player.Spawn` event, triggering it when a player joins. It also subscribes to the `Package.Load` event to ensure already connected players receive a character when the package loads or reloads.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/quick-start.mdx#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\n-- Function to spawn a Character and possess it to a Player\nfunction SpawnCharacter(player)\n    -- Spawns a Character at position X=0, Y=0, Z=0 with default constructor parameters\n    local new_character = Character(Vector(0, 0, 0), Rotator(0, 0, 0), \"nanos-world::SK_Male\")\n\n    -- Possess the new Character\n    player:Possess(new_character)\nend\n\n-- Subscribes to an Event which is triggered when Players join the server\n-- (i.e. Player entity spawns)\nPlayer.Subscribe(\"Spawn\", SpawnCharacter)\n\n-- When this Package loads, we don't have any Character spawned and possessed, so\n-- iterates for all already connected Players and give them a Character as well.\n-- This will make sure you also get a Character when you reload the package\nPackage.Subscribe(\"Load\", function()\n\tfor k, player in pairs(Player.GetAll()) do\n\t\tSpawnCharacter(player)\n\tend\nend)\n```\n\n----------------------------------------\n\nTITLE: Spawning Light and StaticMesh Entities in Lua\nDESCRIPTION: This Lua snippet shows how to spawn different types of entities. It creates a 'Light' entity at a specific position and rotation with a red color, and a 'StaticMesh' entity using an asset path ('nanos-world::SM_Cube_VR_01') for its model. Both require position ('Vector') and rotation ('Rotator') arguments.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/essential-concepts.mdx#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n```lua title=\"my-package/Server/Index.lua\" showLineNumbers\nlocal my_light = Light(Vector(0, 100, 100), Rotator(), Color.RED)\nlocal my_static_mesh = StaticMesh(Vector(0, 0, 100), Rotator(), \"nanos-world::SM_Cube_VR_01\")\n```\n```\n\n----------------------------------------\n\nTITLE: Scheduling and Cancelling Timed Functions with Timer - nanos.world - Lua\nDESCRIPTION: Demonstrates scheduling repeated and single-execution Lua functions using Timer.SetInterval and Timer.SetTimeout from nanos.world, along with cancelling intervals via Timer.ClearInterval. Requires access to the nanos.world Timer static class and Console for logging. Key parameters include the callback function to execute, the time interval (in milliseconds), and additional arguments passed to the callback. SetInterval sets up repeated execution, ClearInterval stops it, and SetTimeout schedules a one-time execution. Outputs are log messages to Console, with limitation that the minimum interval depends on the server tick rate (typically 33ms).\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/static-classes/timer.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- creates a Interval to call a function at every 2 seconds\nlocal my_interval = Timer.SetInterval(function(param1, param2)\n    Console.Log(\"Triggered each 2 seconds! Param1: \" .. param1 .. \". Param2: \" .. param2)\nend, 2000, \"awesome param 1\", 456)\n\n-- cancels the Interval\nTimer.ClearInterval(my_interval)\n\n-- creates a Timeout to call my_function in 5 seconds, once - passing a parameter\nTimer.SetTimeout(function(my_param)\n    Console.Log(\"nanos \" .. my_param)\nend, 5000, \"world\")\n```\n\n----------------------------------------\n\nTITLE: Defining and Spawning a Custom Class on Server in Lua\nDESCRIPTION: This server-side Lua script defines a new class `MyNewClass` by inheriting from the base `Prop` class. It subscribes a function to the `Spawn` event of this class, logging a message when an instance is created. Finally, it creates an instance of `MyNewClass`, triggering the spawn event. This demonstrates basic class definition and event handling on the server for client synchronization.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/scripting/inheriting-classes.md#_snippet_18\n\nLANGUAGE: lua\nCODE:\n```\nMyNewClass = Prop.Inherit(\"MyNewClass\")\n\nMyNewClass.Subscribe(\"Spawn\", function(self)\n    Console.Log(\"Spawned MyNewClass: %s\", tostring(self))\nend)\n\nlocal my_entity = MyNewClass()\n\n-- Will output:\n--  Spawned MyNewClass: MyNewClass\n```\n\n----------------------------------------\n\nTITLE: Tracing Player Look Direction with Timer and Trace API in Nanos World (Lua)\nDESCRIPTION: This Lua snippet continually traces from the center of the player's screen into the game world every 100ms, determining what objects or actors the player is looking at. It leverages the nanos-world API, including Timer, Viewport, Trace, Color, and Debug modules. The code uses bitwise operators to specify multiple collision channels and trace modes. It draws a debug line for the trace and a colored debug point indicating if the trace hit an entity or object, and supports further inspection of the hit entity type.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/scripting/traces-and-raycasting.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Traces at each 100ms\\nTimer.SetInterval(function()\\n    -- Gets the middle of the screen\\n    local viewport_2D_center = Viewport.GetViewportSize() / 2\\n\\n    -- Deprojects to get the 3D Location for the middle of the screen\\n    local viewport_3D = Viewport.DeprojectScreenToWorld(viewport_2D_center)\\n\\n    -- Makes a trace with the 3D Location and it's direction multiplied by 5000\\n    -- Meaning it will trace 5000 units in that direction\\n    local trace_max_distance = 5000\\n\\n    local start_location = viewport_3D.Position\\n    local end_location = viewport_3D.Position + viewport_3D.Direction * trace_max_distance\\n\\n    -- Determine at which object we will be tracing for (WorldStatic - StaticMeshes - and PhysicsBody - Props)\\n    local collision_trace = CollisionChannel.WorldStatic | CollisionChannel.PhysicsBody\\n\\n    -- Sets the trace modes (we want it to return Entity and Draws a Debug line)\\n    local trace_mode = TraceMode.ReturnEntity | TraceMode.DrawDebug\\n\\n    -- Last parameter as true means it will draw a Debug Line in the traced segment\\n    local trace_result = Trace.LineSingle(start_location, end_location, collision_trace, trace_mode)\\n\\n    -- If hit something draws a Debug Point at the location\\n    if (trace_result.Success) then\\n\\n        -- Makes the point Red or Green if hit an Actor\\n        local color = Color(1, 0, 0) -- Red\\n\\n        if (trace_result.Entity) then\\n            color = Color(0, 1, 0) -- Green\\n\\n            -- Here you can check which actor you hit like\\n            -- if (trace_result.Entity:GetType() == \\\"Character\\\") then ...\\n        end\\n\\n        -- Draws a Debug Point at the Hit location for 5 seconds with size 10\\n        Debug.DrawPoint(trace_result.Location, color, 5, 10)\\n    end\\nend, 100)\n```\n\n----------------------------------------\n\nTITLE: Configuring VehicleWheeled Entity in nanos-world with Lua\nDESCRIPTION: This Lua snippet demonstrates spawning and fully configuring a VehicleWheeled entity in nanos-world. It initializes a vehicle with a specific mesh and sound, adjusts engine and aerodynamic properties, sets the steering wheel and headlight positions, configures individual wheels and doors with detailed physical and logical parameters, and finalizes physics for efficiency. Required dependencies include the nanos-world scripting environment and appropriate vehicle assets. Key parameters determine the vehicle's structure and behavior, and the output is a fully interactive, customizable vehicle ready for use within the simulation. This setup assumes access to mesh and sound asset references and usage within authorized server-side scripts.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/classes/vehicle-wheeled.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Spawns a Pickup Vehicle\nlocal vehicle = VehicleWheeled(location or Vector(), rotation or Rotator(), \"nanos-world::SK_Pickup\", CollisionType.Normal, true, false, true, \"nanos-world::A_Vehicle_Engine_10\")\n\n-- Configure it's Engine power and Aerodynamics\nvehicle:SetEngineSetup(700, 5000)\nvehicle:SetAerodynamicsSetup(2500)\n\n-- Configure it's Steering Wheel and Headlights location\nvehicle:SetSteeringWheelSetup(Vector(0, 27, 120), 24)\nvehicle:SetHeadlightsSetup(Vector(270, 0, 70))\n\n-- Configures each Wheel\nvehicle:SetWheel(0, \"Wheel_Front_Left\",  27, 18, 45, Vector(), true,  true, false, false, false, 1500, 3000, 1000, 1, 3, 20, 20, 250, 50, 10, 10, 0, 0.5, 0.5)\nvehicle:SetWheel(1, \"Wheel_Front_Right\", 27, 18, 45, Vector(), true,  true, false, false, false, 1500, 3000, 1000, 1, 3, 20, 20, 250, 50, 10, 10, 0, 0.5, 0.5)\nvehicle:SetWheel(2, \"Wheel_Rear_Left\",   27, 18,  0, Vector(), false, true,  true, false, false, 1500, 3000, 1000, 1, 4, 20, 20, 250, 50, 10, 10, 0, 0.5, 0.5)\nvehicle:SetWheel(3, \"Wheel_Rear_Right\",  27, 18,  0, Vector(), false, true,  true, false, false, 1500, 3000, 1000, 1, 4, 20, 20, 250, 50, 10, 10, 0, 0.5, 0.5)\n\n-- Adds 6 Doors/Seats\nvehicle:SetDoor(0, Vector(  50, -75, 105), Vector(   8, -32.5,  95), Rotator(0,  0,  10), 70, -150)\nvehicle:SetDoor(1, Vector(  50,  75, 105), Vector(  25,    50,  90), Rotator(0,  0,   0), 70,  150)\nvehicle:SetDoor(2, Vector( -90, -75, 130), Vector( -90,  -115, 155), Rotator(0,  90, 20), 60, -150)\nvehicle:SetDoor(3, Vector( -90,  75, 130), Vector( -90,   115, 155), Rotator(0, -90, 20), 60,  150)\nvehicle:SetDoor(4, Vector(-195, -75, 130), Vector(-195,  -115, 155), Rotator(0,  90, 20), 60, -150)\nvehicle:SetDoor(5, Vector(-195,  75, 130), Vector(-195,   115, 155), Rotator(0, -90, 20), 60,  150)\n\n-- Make it ready (so clients only create Physics once and not for each function call above)\nvehicle:RecreatePhysics()\n```\n\n----------------------------------------\n\nTITLE: Spawning and Managing Prop Physics with Events in Nanos World (Lua)\nDESCRIPTION: This server-side Lua script spawns various Props and Static Meshes in the game world, initializing their positions and configurations. It listens for remote events from clients: 'PickUp' toggles gravity on objects when players pick up or drop them, and 'UpdateObjectPosition' moves objects to updated positions as requested by clients. Dependencies include access to the Nanos World scripting API with Prop and StaticMesh classes, Events, and object methods like SetGravityEnabled and TranslateTo. It expects proper event triggers from clients identifying target objects by reference.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/tutorials-and-examples/gravity-gun.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Spawns some Props and Static Meshes\n-- (note: Static Meshes don't have physics so they will freeze where released automatically)\nlocal p_sphere = Prop(Vector(200, 0, 200), Rotator(), \"nanos-world::SM_Sphere\")\nlocal p_cone = Prop(Vector(200, 0, 200), Rotator(), \"nanos-world::SM_Cone\")\nlocal sm_cube = StaticMesh(Vector(100, 0, 200), Rotator(), \"nanos-world::SM_Cube\")\nlocal sm_cylinder = StaticMesh(Vector(300, 0, 200), Rotator(), \"nanos-world::SM_Cylinder\")\n\n-- Subscribe for Client's custom event, for when the object is grabbed/dropped\nEvents.SubscribeRemote(\"PickUp\", function(player, object, is_grabbing)\n    object:SetGravityEnabled(not is_grabbing)\n    object:TranslateTo(object:GetLocation(), 0)\nend)\n\n-- Subscribe for Client's custom event, to update the position of the object he is grabbing\nEvents.SubscribeRemote(\"UpdateObjectPosition\", function(player, object, location)\n    object:TranslateTo(location, 0.1)\nend)\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Class on Client for Synchronization in Lua\nDESCRIPTION: This client-side Lua script mirrors the server-side definition of `MyNewClass`, inheriting from `Prop`. It also subscribes to the `Spawn` event. When the server spawns an instance of `MyNewClass`, the client automatically receives the spawn notification and executes its own `Spawn` event handler, demonstrating client-server entity synchronization.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/scripting/inheriting-classes.md#_snippet_19\n\nLANGUAGE: lua\nCODE:\n```\nMyNewClass = Prop.Inherit(\"MyNewClass\")\n\nMyNewClass.Subscribe(\"Spawn\", function(self)\n    -- It was spawned on server and will spawn on Client as a MyNewClass properly\n    Console.Log(\"Spawned MyNewClass: %s\", tostring(self))\nend)\n\n-- Will output:\n--  Spawned MyNewClass: MyNewClass\n```\n\n----------------------------------------\n\nTITLE: Handling Player Lifecycle Events Using nanos world API in Lua\nDESCRIPTION: This snippet demonstrates responding to Player join and leave events in nanos world using Lua. When a Player joins, it spawns a Character and assigns control to the Player using the Possess method. When a Player leaves, it retrieves the controlled Character and destroys it if it exists. No external dependencies are required beyond the standard nanos world server API. Key functions include Player.Subscribe for event binding, Character instantiation with initial position and rotation, and proper resource cleanup during disconnect.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/classes/player.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Spawns and possess a Character when a Player joins the server\\nPlayer.Subscribe(\"Spawn\", function(player)\\n\\tlocal new_char = Character(Vector(), Rotator(), \"nanos-world::SK_Male\")\\n\\tplayer:Possess(new_char)\\nend)\\n\\n-- Destroys the Character when the Player leaves the server\\nPlayer.Subscribe(\"Destroy\", function(player)\\n\\tlocal character = player:GetControlledCharacter()\\n\\tif (character) then\\n\\t\\tcharacter:Destroy()\\n\\tend\\nend)\n```\n\n----------------------------------------\n\nTITLE: Spawning Weapon and Attaching/Configuring Sight in Lua (nanos world)\nDESCRIPTION: This Lua snippet demonstrates server-side logic for spawning an AK47 weapon, attaching a static mesh ('nanos-world::SM_T4_Sight') as a scope to the 'sight_socket' bone, setting the Field of View multiplier for aiming ('SightFOVMultiplier'), and adjusting the Aim Down Sights (ADS) transform ('SetSightTransform') for proper alignment. It depends on the nanos world API, the NanosWorldWeapons.AK47 class, and the specified mesh asset.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/tutorials-and-examples/weapon-scope.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Spawning the AK47\nlocal my_ak47 = NanosWorldWeapons.AK47(Vector(1035, 154, 300), Rotator())\n\n-- Adds a StaticMesh Attached with a RedDot mesh into AK47 on sight_socket bone from AK47 model. As our AK47 model already\n-- have a bone named sight_socket at the right location, we can just attach to it, otherwise we would\n-- need to set it's Attach Location to where the RedDot fits and using bone name as empty \"\"\nmy_ak47:AddStaticMeshAttached(\"sight\", \"nanos-world::SM_T4_Sight\", \"sight_socket\")\n\n-- Makes the FOV multiplier reduces by 0.35x when ADS (aiming)\nmy_ak47.SightFOVMultiplier = 0.35\n\n-- Sets the ADS transform offset to fit the RedDot center position,\n-- each weapon will need a different offset to fit it's sight. AK47 + RedDot best fit is Z = -15.9\nmy_ak47:SetSightTransform(Vector(0, 0, -15.9), Rotator(0, 0, 0))\n```\n\n----------------------------------------\n\nTITLE: Basic Server-Side Event Handling in Lua\nDESCRIPTION: This Lua snippet illustrates server-side event management. It covers subscribing to local events (`Events.Subscribe`) and calling them (`Events.Call`). It also shows subscribing to client-triggered events using `Events.SubscribeRemote` (which includes the originating `player` parameter), calling events on specific clients (`Events.CallRemote`), and broadcasting events to all clients (`Events.BroadcastRemote`). Requires `Events`, `Console`, and `Player` classes.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/static-classes/events.mdx#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n```lua title=\"Server/Index.lua\" showLineNumbers\n-- register for a local Event (local = server only)\nEvents.Subscribe(\"MyLocalEvent\", function(my_text)\n    Console.Log(\"Event received locally! \" .. my_text)\n    -- outputs \"Event received locally! hello nanos world!\"\nend)\n\n-- calls a local Event in all Local Packages\nEvents.Call(\"MyLocalEvent\", \"hello nanos world!\")\n\n-- register for a client Event (remote = client)\nEvents.SubscribeRemote(\"MyServerEvent\", function(player, my_text)\n    Console.Log(player:GetName() .. \" sent an event from client! \" .. my_text)\n    -- outputs \"Syed sent an event from client! hello nanos world!\"\n\n    -- sends an \"answer\" to the player which sent this event\n    Events.CallRemote(\"MyClientEvent\", player, \"hello nanos world! message only for you!\")\nend)\n\n-- sends a remote Event to all Players in all Client Packages\nEvents.BroadcastRemote(\"MyClientEvent\", \"hello nanos world!\")\n```\n```\n\n----------------------------------------\n\nTITLE: Managing Game Events and UI Communication in Lua\nDESCRIPTION: This comprehensive Lua script handles the client-side logic for the HUD. It spawns the WebUI, subscribes to various player and character events (spawn, possess, take damage, death, pickup, drop, fire, reload), retrieves relevant game state (health, ammo), and communicates with the JavaScript UI via custom events ('UpdateWeaponAmmo', 'UpdateHealth') sent to the `main_hud` WebUI instance. Helper functions `UpdateLocalCharacter`, `UpdateAmmo`, and `UpdateHealth` encapsulate the logic for setting up event listeners and triggering UI updates.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/tutorials-and-examples/basic-hud-html.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\n-- Spawns a WebUI with the HTML file you just created\nmain_hud = WebUI(\"Main HUD\", \"file://UI/index.html\")\n\n\n-- When LocalPlayer spawns, sets an event on it to trigger when we possesses a new character, to store the local controlled character locally. This event is only called once, see Package:Subscribe(\"Load\") to load it when reloading a package\nClient.Subscribe(\"SpawnLocalPlayer\", function(local_player)\n    local_player:Subscribe(\"Possess\", function(player, character)\n        UpdateLocalCharacter(character)\n    end)\nend)\n\n-- When package loads, verify if LocalPlayer already exists (eg. when reloading the package), then try to get and store it's controlled character\nPackage.Subscribe(\"Load\", function()\n    local local_player = Client.GetLocalPlayer()\n    if (local_player ~= nil) then\n        UpdateLocalCharacter(local_player:GetControlledCharacter())\n    end\nend)\n\n-- Function to set all needed events on local character (to update the UI when it takes damage or dies)\nfunction UpdateLocalCharacter(character)\n    -- Verifies if character is not nil (eg. when GetControllerCharacter() doesn't return a character)\n    if (character == nil) then return end\n\n    -- Updates the UI with the current character's health\n    UpdateHealth(character:GetHealth())\n\n    -- Sets on character an event to update the health's UI after it takes damage\n    character:Subscribe(\"TakeDamage\", function(charac, damage, type, bone, from_direction, instigator, causer)\n        UpdateHealth(math.max(charac:GetHealth() - damage, 0))\n    end)\n\n    -- Sets on character an event to update the health's UI after it dies\n    character:Subscribe(\"Death\", function(charac)\n        UpdateHealth(0)\n    end)\n\n    -- Try to get if the character is holding any weapon\n    local current_picked_item = character:GetPicked()\n\n    -- If so, update the UI\n    if (current_picked_item and current_picked_item:GetType() == \"Weapon\") then\n        UpdateAmmo(true, current_picked_item:GetAmmoClip(), current_picked_item:GetAmmoBag())\n    end\n\n    -- Sets on character an event to update his grabbing weapon (to show ammo on UI)\n    character:Subscribe(\"PickUp\", function(charac, object)\n        if (object:GetType() == \"Weapon\") then\n            UpdateAmmo(true, object:GetAmmoClip(), object:GetAmmoBag())\n        end\n    end)\n\n    -- Sets on character an event to remove the ammo ui when he drops it's weapon\n    character:Subscribe(\"Drop\", function(charac, object)\n        UpdateAmmo(false)\n    end)\n\n    -- Sets on character an event to update the UI when he fires\n    character:Subscribe(\"Fire\", function(charac, weapon)\n        UpdateAmmo(true, weapon:GetAmmoClip(), weapon:GetAmmoBag())\n    end)\n\n    -- Sets on character an event to update the UI when he reloads the weapon\n    character:Subscribe(\"Reload\", function(charac, weapon, ammo_to_reload)\n        UpdateAmmo(true, weapon:GetAmmoClip(), weapon:GetAmmoBag())\n    end)\nend\n\n-- Function to update the Ammo's UI\nfunction UpdateAmmo(enable_ui, ammo, ammo_bag)\n    main_hud:CallEvent(\"UpdateWeaponAmmo\", {enable_ui, ammo, ammo_bag})\nend\n\n-- Function to update the Health's UI\nfunction UpdateHealth(health)\n    main_hud:CallEvent(\"UpdateHealth\", {health})\nend\n```\n\n----------------------------------------\n\nTITLE: Spawning and Configuring a Custom Monster Truck - Nanos World - Lua\nDESCRIPTION: This Lua code snippet showcases how to use the Nanos World API to programmatically spawn and configure a Monster Truck vehicle in a server-side script. It begins by creating a Pickup vehicle, then customizes the engine, steering, headlights, and visually attaches static mesh wheels to the vehicle's bones. For realism, each wheel's physical properties (such as radius, width, damping, and offset) are finely tuned, and only specific doors/seats are added. Dependencies include the Nanos World game/server environment with relevant assets loaded. Key parameters are supplied directly when creating and setting up the vehicle, making this script easily adaptable for other custom vehicles. The final call to RecreatePhysics initializes the physical body for performance, as auto-creation was disabled initially.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/tutorials-and-examples/monster-truck.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Spawns a Pickup\\nlocal vehicle = Vehicle(Vector(0, 0, 100), Rotator(), \\\"nanos-world::SK_Pickup\\\", 0, true, false, true, \\\"nanos-world::A_Vehicle_Engine_10\\\")\\n\\n-- Configures it\\nvehicle:SetEngineSetup(4500)\\nvehicle:SetSteeringWheelSetup(Vector(0, 27, 120), 24)\\nvehicle:SetHeadlightsSetup(Vector(250, 0, 70))\\n\\n-- Adds 4 Static Mesh wheels attached to each mesh's Wheel Bone (those won't have collision and are visual only)\\nvehicle:AddStaticMeshAttached(\\\"wheel_rear_left\\\",   \\\"nanos-world::SM_Tire_01\\\", \\\"Wheel_Rear_Left\\\",   Vector(0, -35, 0), Rotator(0, -90, 0))\\nvehicle:AddStaticMeshAttached(\\\"wheel_rear_right\\\",  \\\"nanos-world::SM_Tire_01\\\", \\\"Wheel_Rear_Right\\\",  Vector(0,  45, 0), Rotator(0, -90, 0))\\nvehicle:AddStaticMeshAttached(\\\"wheel_front_left\\\",  \\\"nanos-world::SM_Tire_01\\\", \\\"Wheel_Front_Left\\\",  Vector(0, -35, 0), Rotator(0,  90, 0))\\nvehicle:AddStaticMeshAttached(\\\"wheel_front_right\\\", \\\"nanos-world::SM_Tire_01\\\", \\\"Wheel_Front_Right\\\", Vector(0,  45, 0), Rotator(0,  90, 0))\\n\\n-- Configures each \\\"Physical\\\" Wheel, note that as our Wheel Static Mesh has height of 160 and width 60, we configure the wheels to have radius\\n-- of 80 and width 60, also because of SK_Pickup bones are not perfectly aligned, left wheels must be laterally offset a bit\\nvehicle:SetWheel(0, \\\"Wheel_Front_Left\\\",  80, 60, 30, 20, 0.25, 2, 17, 1000, 0, 100, 10, 7, 1, 1500, 3000, true, Vector(0, -80, 0))\\nvehicle:SetWheel(1, \\\"Wheel_Front_Right\\\", 80, 60, 30, 20, 0.25, 2, 17, 1000, 0, 100, 10, 7, 1, 1500, 3000, true, Vector(0,  90, 0))\\nvehicle:SetWheel(2, \\\"Wheel_Rear_Left\\\",   80, 60, 30, 20, 0.25, 2, 17, 1000, 0, 100, 10, 7, 1, 1500, 3000, true, Vector(0, -80, 0))\\nvehicle:SetWheel(3, \\\"Wheel_Rear_Right\\\",  80, 60, 30, 20, 0.25, 2, 17, 1000, 0, 100, 10, 7, 1, 1500, 3000, true, Vector(0,  90, 0))\\n\\n-- Adds only a Passenger and Driver door/seat\\nvehicle:SetDoor(0, Vector(50, -75, 105), Vector( 8, -32.5,  95), Rotator(0, 0, 10), 70, -150)\\nvehicle:SetDoor(1, Vector(50,  75, 105), Vector(25,    50,  90), Rotator(0, 0,  0), 70,  150)\\n\\n-- As we set AutoCreatePhysics = false on the constructor, we need to call this after configuring it (so if there is any player connected, he\\n-- doesn't need to recreate the physics for each function called - improving the performance)\\nvehicle:RecreatePhysics()\n```\n\n----------------------------------------\n\nTITLE: Inheriting a Base Class in Lua\nDESCRIPTION: Demonstrates how to create a new class (`MyNewClass`) that inherits from the built-in `Prop` class using the static `Inherit` method. It also shows how to instantiate the new class using its default constructor, passing necessary arguments like position (Vector), rotation (Rotator), and asset path.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/scripting/inheriting-classes.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Creates a new Class called \"MyNewClass\" inheriting from Prop\n-- and stores it in the variable MyNewClass\nMyNewClass = Prop.Inherit(\"MyNewClass\")\n\n-- Spawn it using the default constructor\nlocal my_new_class_instance = MyNewClass(Vector(), Rotator(), \"nanos-world::SM_Cube\")\n```\n\n----------------------------------------\n\nTITLE: Attaching and Controlling Weapon Flashlight in Nanos World - Lua\nDESCRIPTION: Defines a Lua script for the server which spawns a weapon and a spotlight, attaches the spotlight to the weapon as a flashlight with a specified offset, and manages the flashlight state based on weapon events. Dependencies include the 'default-weapons' package (imported at the start). The flashlight is deactivated (black color) by default, turns on with a light color when the weapon is picked up, and turns off when dropped. Parameters include vectors for placement, color for light states, and event hooks for weapon interaction. Script must run on the server and assumes a valid scripting environment with event subscription support.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/tutorials-and-examples/weapon-flashlight.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- Loads the default-weapons (note: it's recommended to add it to your Package's packages_requirements instead)\\nServer.LoadPackage(\"default-weapons\")\\n\\n-- Spawns a Weapon from default-weapons package\\nmy_weapon = AR4(Vector(), Rotator())\\n\\n-- Spawns a Spot Light (with color Black, to be turned on only when someone picks up it)\\nmy_light = Light(Vector(), Rotator(), Color(0, 0, 0), 1, 1000, 1000, 35)\\n\\n-- Attaches the Light to the Weapon with offset X = 100 (at the weapon's front)\\nmy_light:AttachTo(my_weapon)\\nmy_light:SetRelativeLocation(Vector(100, 0, 0))\\n\\n-- Stores the light on the Weapon\\nmy_weapon:SetValue(\"Light\", my_light)\\n\\n-- Only when someone picks up this weapon, turns on the Flashlight (set it's color)\\nmy_weapon:Subscribe(\"PickUp\", function(weapon, character)\\n    local light = my_weapon:GetValue(\"Light\")\\n    if (light ~= nil) then\\n        light:SetColor(Color(0.73, 0.67, 0.42))\\n    end\\nend)\\n\\n-- When the weapon is dropped, turns off the Flashlight (set it's color to black)\\nmy_weapon:Subscribe(\"Drop\", function(weapon, character)\\n    local light = my_weapon:GetValue(\"Light\")\\n    if (light ~= nil) then\\n        light:SetColor(Color(0, 0, 0))\\n    end\\nend)\n```\n\n----------------------------------------\n\nTITLE: Applying Global Highlight to Characters on Spawn in nanos world (Lua)\nDESCRIPTION: This Lua client-side script defines an orange highlight color using `Color(10, 2.5, 0)` and sets it as the global highlight color for index 0 using `Client.SetHighlightColor`. The highlight mode is set to `HighlightMode.Always`, making it constantly visible. It then subscribes to the 'Spawn' event for the `Character` class and enables this highlight (index 0) for each character instance that spawns using `character:SetHighlightEnabled(true, 0)`.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/tutorials-and-examples/x-ray-and-highlight.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Sets the Global desired Highlight color\n-- Higher color values make it glow (e.g. Color(100, 0, 0))\nlocal highlight_color = Color(10, 2.5, 0)\nClient.SetHighlightColor(highlight_color, 0, HighlightMode.Always)\n\n-- Setting all Characters to highlight\nCharacter.Subscribe(\"Spawn\", function(character)\n    character:SetHighlightEnabled(true, 0)\nend)\n```\n\n----------------------------------------\n\nTITLE: Storing Persistent Data Using Package.SetPersistentData in nanos world (Lua)\nDESCRIPTION: This snippet demonstrates how to persistently store a Lua table to disk in nanos world using the Package.SetPersistentData(key, value) method. The key is a string identifier under which the Lua value, here a table containing an integer and a string, will be stored in PersistentData.toml in TOML format. No explicit dependencies are required and the data is automatically serialized on disk; the function should be called from either Client or Server as needed. The persistent data file is only created if Package.SetPersistentData is called, and stored values must be basic Lua types.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/scripting/persistent-data.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal my_table = {\n    my_id = 123,\n    my_data_02 = \"data\"\n}\n\nPackage.SetPersistentData(\"awesome_table\", my_table)\n\n-- PersistentData.toml will be:\n-- awesome_table = {my_id = 123, my_data_02 = \"data\"}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to a Remote Event (nanos.world Events, Lua)\nDESCRIPTION: This code subscribes to a remote event called 'MyClientEvent' on the client side, enabling the client to react when the event is broadcast by the server. It uses the Events.SubscribeRemote API and requires the nanos.world runtime. The handler receives a parameter (my_text) and prints it to the console. This facilitates client-server messaging and RPC-style callbacks.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/essential-concepts.mdx#_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\n-- Subscribes to a Remote Event on client side\\nEvents.SubscribeRemote(\"MyClientEvent\", function(my_text)\\n    Console.Log(\"Event received from server! \" .. my_text)\\n    -- outputs \"Event received from server! hello nanos world!\"\\nend)\n```\n\n----------------------------------------\n\nTITLE: Creating and Querying a SQLite Database with Nanos World Database API - Lua\nDESCRIPTION: This Lua snippet demonstrates establishing a SQLite connection, creating a table, inserting data, and running SELECT queries using the Nanos World Database API. It shows the use of the Database constructor, parameterized queries (with :0 notation), and result retrieval with NanosTable.Dump. Required dependencies are the Nanos World server/scripting environment with Database class support. Inputs include connection strings and SQL statements; outputs are result tables or the number of affected rows, with errors logged on failure.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/classes/database.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Creates a SQLite connection, using a local file called 'database_filename.db'\nlocal sqlite_db = Database(DatabaseEngine.SQLite, \"db=database_filename.db timeout=2\")\n\n-- Creates a table\nsqlite_db:Execute([[\\n\\tCREATE TABLE IF NOT EXISTS test (\\n\\t\\tid INTEGER,\\n\\t\\tname VARCHAR(100)\\n\\t)\\n]])\n\n-- Insert values in the table\nlocal affected_rows = sqlite_db:Execute(\"INSERT INTO test VALUES (1, 'amazing')\")\nConsole.Log(\"Affected Rows: \" .. tostring(affected_rows))\n-- Will output: 1\n\n-- Selects the data\nlocal rows = sqlite_db:Select(\"SELECT * FROM test\")\nConsole.Log(NanosTable.Dump(rows))\n-- Will output a table with all data from 'test'\n\n-- Selects the data with filter\nlocal rows_filter = sqlite_db:Select(\"SELECT * FROM test WHERE name = :0\", \"amazing\")\nConsole.Log(NanosTable.Dump(rows_filter))\n-- Will output a table with all data from 'test' where name matches 'amazing'\n```\n\n----------------------------------------\n\nTITLE: Instantiating Grenade with nanos-world in Lua\nDESCRIPTION: This Lua code snippet demonstrates how to create a new Grenade object in the nanos-world environment. It initializes a Grenade by passing position (as a Vector), rotation (as a Rotator), a mesh identifier, a special particle identifier, and an explosion audio effect. Dependencies include the nanos-world API, with required classes or functions for Vector and Rotator instantiation. The key parameters are positional and rotational data, asset identifiers for mesh, particle, and audio, and the output is a Grenade entity spawned at the specified position. This snippet requires the proper context provided by the nanos-world scripting environment.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/classes/grenade.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal new_grenade = Grenade(\n\tVector(-900, 185, 215),\n\tRotator(0, 90, 90),\n\t\"nanos-world::SM_Grenade_G67\",\n\t\"nanos-world::P_Grenade_Special\",\n\t\"nanos-world::A_Explosion_Large\"\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Firework Weapon Logic in nanos world (Server-Side Lua)\nDESCRIPTION: This server-side Lua script defines the core logic for the firework weapon. It loads the 'default-weapons' package, spawns a modified Glock (set to zero damage), and subscribes to its 'Fire' event. On firing, it calculates a spawn location, creates an invisible projectile (`Prop`), attaches a firework shell particle ('PS_TS_FireworksShell') from the 'ts-fireworks' asset pack, applies impulse to the projectile, sets network authority, and triggers client-side sounds via `Events.BroadcastRemote`. It then uses `Timer.SetTimeout` to trigger the explosion particle ('PS_TS_Fireworks_Burst_Palm') and sound after a delay, also setting particle parameters like 'BlastColor'. Finally, it schedules the projectile and trail particle for destruction using `SetLifeSpan`. Dependencies include the 'default-weapons' package and the 'ts-fireworks' asset pack.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/tutorials-and-examples/fireworks.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n-- Loads the default-weapons (note: it's recommended to add it to your Package's packages_requirements instead)\nServer.LoadPackage(\"default-weapons\")\n\n-- Let's spawn a Glock from default-weapons package and set it to give no damage, this also avoids it from spawning a trail particle\nlocal weapon = Glock()\nweapon:SetDamage(0)\n\n-- Let's subscribe for 'Fire' event from this weapon, this will be triggered for every fire it shoots\nweapon:Subscribe(\"Fire\", function(weap, shooter)\n    -- We get the position at the front of the weapon\n    local control_rotation = shooter:GetControlRotation()\n    local forward_vector = control_rotation:GetForwardVector()\n    local spawn_location = shooter:GetLocation() + Vector(0, 0, 40) + forward_vector * Vector(400)\n\n    -- We will spawn an empty/invisible Prop, to be our projectile - using our Invisible mesh 'SM_None'\n    local prop = Prop(spawn_location, control_rotation, \"nanos-world::SM_None\")\n\n    -- Spawns the trail/shell particle, this particle is not auto destroyed as it should follow the projectile,\n    -- this way we must destroy it manually after all\n    -- The Asset Pack which we are using to get the particles contains two Shells: 'PS_TS_FireworksShell' and 'PS_TS_FireworksShell_Palm'\n    -- You can use the another one to get more cool effects!\n    local particle = Particle(Vector(), Rotator(), \"ts-fireworks::PS_TS_FireworksShell\", false, true)\n\n    -- Attaches the particle to the projectile prop\n    particle:AttachTo(prop)\n\n    -- Impulses the Projectile forward\n    prop:AddImpulse(forward_vector * Vector(50000), true)\n\n    -- Sets the shooter to be the Network Authority of this Projectile\n    -- This way only the shooter will be reponsible to handle the physics of this object\n    prop:SetNetworkAuthority(shooter:GetPlayer())\n\n    -- Calls the client to spawn the 'Launch' sound\n    Events.BroadcastRemote(\"SpawnFireworkSound\", particle)\n\n    -- After 500 miliseconds, explode the firework\n    Timer.SetTimeout(function(pr)\n        -- Calls the client to spawn the 'Explosion' sound at the projectile location\n        Events.BroadcastRemote(\"ExplodeFireworkSound\", pr:GetLocation())\n\n        -- Spawns the Particle Explosion.\n        -- This Asset Pack also contains the following Particles, feel free to try them!\n        -- 'PS_TS_Fireworks_Burst_Chrys', 'PS_TS_Fireworks_Burst_Circle', 'PS_TS_Fireworks_Burst_Palm',\n        -- 'PS_TS_Fireworks_Burst_Shaped' and 'PS_TS_Fireworks_Burst_ShellsWithinShells'\n        local particle_burst = Particle(pr:GetLocation(), Rotator(), \"ts-fireworks::PS_TS_Fireworks_Burst_Palm\", true, true)\n\n        -- Those particles make it available to tweak some of their properties, let's set the BlastColor to red\n        particle_burst:SetParameterColor(\"BlastColor\", Color(1, 0, 0))\n\n        -- Those particles exposes the following parameters:\n        --  Color: 'BurstColor', 'SparkleColor', 'FlareColor', 'TailColor'\n        --  bool: 'BlastSmoke', 'TailSmoke'\n        --  float: 'BurstMulti', 'SparkleMulti'\n    end, 500, prop)\n\n    -- After 1 second, destroy the particle and the projectile\n    prop:SetLifeSpan(1)\n    particle:SetLifeSpan(1)\nend)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Persistent Data Using Package.GetPersistentData in nanos world (Lua)\nDESCRIPTION: This snippet shows how to retrieve a previously stored Lua table from persistent disk storage using Package.GetPersistentData(). The method returns all persisted data as a Lua table, from which a specific entry (here 'awesome_table') can be accessed and used. The example prints the value of a subfield to the in-game console. This requires that corresponding data has been stored with Package.SetPersistentData previously. Data is automatically loaded into memory on package load.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/scripting/persistent-data.mdx#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal my_table = Package.GetPersistentData().awesome_table\n\nConsole.Log(my_table.my_id)\n\n-- Will print:\n-- 123\n```\n\n----------------------------------------\n\nTITLE: Spawning Character for New Players - nanos world (Lua)\nDESCRIPTION: Lua script for spawning a Character entity and possessing it for players as they join the server in a nanos world package. It defines a function to spawn and possess a character, subscribes this to the Player 'Spawn' event, and ensures all already-connected players receive a character on package load. File: Server/Index.lua. Inputs: Player join events. Outputs: Character controlled by the joining player; side effect: possession.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/quick-start.mdx#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\n```lua\n-- Function to spawn a Character and possess it to a Player\nfunction SpawnCharacter(player)\n    -- Spawns a Character at position X=0, Y=0, Z=0 with default constructor parameters\n    local new_character = Character(Vector(0, 0, 0), Rotator(0, 0, 0), \"nanos-world::SK_Male\")\n\n    -- Possess the new Character\n    player:Possess(new_character)\nend\n\n-- Subscribes to an Event which is triggered when Players join the server\n-- (i.e. Player entity spawns)\nPlayer.Subscribe(\"Spawn\", SpawnCharacter)\n\n-- When this Package loads, we don't have any Character spawned and possessed, so\n-- iterates for all already connected Players and give them a Character as well.\n-- This will make sure you also get a Character when you reload the package\nPackage.Subscribe(\"Load\", function()\n\tfor k, player in pairs(Player.GetAll()) do\n\t\tSpawnCharacter(player)\n\tend\nend)\n```\n```\n\n----------------------------------------\n\nTITLE: Reading and Parsing JSON Configuration Files with File in Lua\nDESCRIPTION: This Lua code snippet demonstrates creating a File object referencing a local configuration file, reading its binary contents, and parsing it as JSON using the JSON global API. It requires the File API (provided by Nanos World) and the JSON parsing functionality to be available. The main parameter is the file path (here: 'my_awesome_configuration.json'). The function reads the full contents of the file and parses it into a Lua table. The approach is limited to files accessible from the permitted server directories and requires all paths to be relative to the server executable folder.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/classes/file.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal configuration_file = File(\"my_awesome_configuration.json\")\n\nlocal configuration_file_json = JSON.parse(configuration_file:Read())\n```\n\n----------------------------------------\n\nTITLE: Spawning and Configuring a Monster Truck Vehicle in Lua\nDESCRIPTION: This Lua script, intended for the server-side (Server/Index.lua) in nanos-world, spawns a pickup truck vehicle (`nanos-world::SK_Pickup`) and extensively configures it to resemble a monster truck. It sets engine parameters (`SetEngineSetup`), steering wheel position (`SetSteeringWheelSetup`), headlight location (`SetHeadlightsSetup`), attaches visual static mesh tires (`nanos-world::SM_Tire_01`) to wheel bones using `AddStaticMeshAttached`, defines the physical characteristics (radius, width, suspension, etc.) for each of the four wheels using `SetWheel`, configures two doors with entry positions using `SetDoor`, and finally calls `RecreatePhysics` to apply all changes. Physics auto-creation was initially disabled (`AutoCreatePhysics = false` in the constructor) for performance optimization during setup.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/tutorials-and-examples/monster-truck.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Spawns a Pickup\nlocal vehicle = Vehicle(Vector(0, 0, 100), Rotator(), \"nanos-world::SK_Pickup\", 0, true, false, true, \"nanos-world::A_Vehicle_Engine_10\")\n\n-- Configures it\nvehicle:SetEngineSetup(4500)\nvehicle:SetSteeringWheelSetup(Vector(0, 27, 120), 24)\nvehicle:SetHeadlightsSetup(Vector(250, 0, 70))\n\n-- Adds 4 Static Mesh wheels attached to each mesh's Wheel Bone (those won't have collision and are visual only)\nvehicle:AddStaticMeshAttached(\"wheel_rear_left\",   \"nanos-world::SM_Tire_01\", \"Wheel_Rear_Left\",   Vector(0, -35, 0), Rotator(0, -90, 0))\nvehicle:AddStaticMeshAttached(\"wheel_rear_right\",  \"nanos-world::SM_Tire_01\", \"Wheel_Rear_Right\",  Vector(0,  45, 0), Rotator(0, -90, 0))\nvehicle:AddStaticMeshAttached(\"wheel_front_left\",  \"nanos-world::SM_Tire_01\", \"Wheel_Front_Left\",  Vector(0, -35, 0), Rotator(0,  90, 0))\nvehicle:AddStaticMeshAttached(\"wheel_front_right\", \"nanos-world::SM_Tire_01\", \"Wheel_Front_Right\", Vector(0,  45, 0), Rotator(0,  90, 0))\n\n-- Configures each \"Physical\" Wheel, note that as our Wheel Static Mesh has height of 160 and width 60, we configure the wheels to have radius\n-- of 80 and width 60, also because of SK_Pickup bones are not perfectly aligned, left wheels must be laterally offset a bit\nvehicle:SetWheel(0, \"Wheel_Front_Left\",  80, 60, 30, 20, 0.25, 2, 17, 1000, 0, 100, 10, 7, 1, 1500, 3000, true, Vector(0, -80, 0))\nvehicle:SetWheel(1, \"Wheel_Front_Right\", 80, 60, 30, 20, 0.25, 2, 17, 1000, 0, 100, 10, 7, 1, 1500, 3000, true, Vector(0,  90, 0))\nvehicle:SetWheel(2, \"Wheel_Rear_Left\",   80, 60, 30, 20, 0.25, 2, 17, 1000, 0, 100, 10, 7, 1, 1500, 3000, true, Vector(0, -80, 0))\nvehicle:SetWheel(3, \"Wheel_Rear_Right\",  80, 60, 30, 20, 0.25, 2, 17, 1000, 0, 100, 10, 7, 1, 1500, 3000, true, Vector(0,  90, 0))\n\n-- Adds only a Passenger and Driver door/seat\nvehicle:SetDoor(0, Vector(50, -75, 105), Vector( 8, -32.5,  95), Rotator(0, 0, 10), 70, -150)\nvehicle:SetDoor(1, Vector(50,  75, 105), Vector(25,    50,  90), Rotator(0, 0,  0), 70,  150)\n\n-- As we set AutoCreatePhysics = false on the constructor, we need to call this after configuring it (so if there is any player connected, he\n-- doesn't need to recreate the physics for each function called - improving the performance)\nvehicle:RecreatePhysics()\n```\n\n----------------------------------------\n\nTITLE: Managing Database Connections and CRUD Operations with Database Class - Lua\nDESCRIPTION: This Lua code demonstrates initializing a connection to a local SQLite database, creating a table, inserting records, and querying data using the Database class in nanos world. Dependencies include the 'Database', 'Console', and 'NanosTable' classes or modules provided by the platform. Key parameters are the database engine type, the connection string (e.g., file name and connection options), and SQL statements passed for execution or selection. The code showcases safe query parameter insertion via placeholders, expects SQL inputs as strings, and outputs results to the game/console log. Errors during connection or execution will be reported as specified elsewhere. Limitations include initial connection blocking on the main thread and the need to handle result sets appropriately.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/classes/database.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal sqlite_db = Database(DatabaseEngine.SQLite, \"db=database_filename.db timeout=2\")\n\n-- Creates a table\nsqlite_db:Execute([[\\n\\tCREATE TABLE IF NOT EXISTS test (\\n\\t\\tid INTEGER,\\n\\t\\tname VARCHAR(100)\\n\\t)\\n]])\n\n-- Insert values in the table\nlocal affected_rows = sqlite_db:Execute(\"INSERT INTO test VALUES (1, 'amazing')\")\nConsole.Log(\"Affected Rows: \" .. tostring(affected_rows))\n-- Will output: 1\n\n-- Selects the data\nlocal rows = sqlite_db:Select(\"SELECT * FROM test\")\nConsole.Log(NanosTable.Dump(rows))\n-- Will output a table with all data from 'test'\n\n-- Selects the data with filter\nlocal rows_filter = sqlite_db:Select(\"SELECT * FROM test WHERE name = :0\", \"amazing\")\nConsole.Log(NanosTable.Dump(rows_filter))\n-- Will output a table with all data from 'test' where name matches 'amazing'\n```\n\n----------------------------------------\n\nTITLE: Calling a Custom Player Method in Lua\nDESCRIPTION: Demonstrates how to call the previously defined custom method `AddScore` on a `Player` instance. It assumes `GetPlayerSomehow()` returns a valid Player object, and then invokes `:AddScore(10)` on it.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/scripting/extending-classes.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal my_player = GetPlayerSomehow()\nmy_player:AddScore(10)\n```\n\n----------------------------------------\n\nTITLE: Setting Synchronized Entity Values on Server (Lua)\nDESCRIPTION: Demonstrates how a server-side script can attach a custom key-value pair (\\\"my_value\\\", 100) to an entity (my_prop) and ensure it's synchronized to all clients by passing `true` as the third argument to SetValue(). This allows clients to access the synchronized value using GetValue(). Requires a server-side entity instance.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/essential-concepts.mdx#_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\n-- Sets a synchronized 'my_value' value to a Prop\nmy_prop:SetValue(\"my_value\", 100, true)\n```\n\n----------------------------------------\n\nTITLE: Declaring Client-Side Spawn Menu Tab Addition Function (Lua)\nDESCRIPTION: Shows the client-side function signature for `SpawnMenu.AddTab`. This function allows developers to add new custom tabs to the Spawn Menu UI. It requires a unique string ID (`id`), a display name (`name`), and image paths (`image_active`, `image_inactive`) for the tab's selected and unselected states respectively.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/explore/sandbox-game-mode/spawn-menu.mdx#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\n```lua\n---@param id string                Unique ID used to identify the tab\n---@param name string              Label of the tab\n---@param image_active string      Image path when the tab is selected\n---@param image_inactive string    Image path when the tab is not selected\nfunction SpawnMenu.AddTab(id, name, image_active, image_inactive)\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Static Meshes in Assets.toml using String Paths (TOML)\nDESCRIPTION: Demonstrates the basic method for listing static mesh assets within an `Assets.toml` file. It uses simple key-value pairs under the `[assets.static_meshes]` table, where the key (e.g., `SM_Flower_01`) serves as the asset identifier for scripting, and the string value represents the relative path to the corresponding `.uasset` file within the Unreal project structure.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/assets.mdx#_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[assets.static_meshes]\n\tSM_Flower_01 = \"MyFolder/SM_Awesome_Flower_01\"\n\tSM_Rock_01 = \"MyFolder/SM_Rock_01\"\n\tSM_MyAsset_01 = \"MyFolder/SM_MyAsset_01\"\n\t# ...\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic WebUI Page with HTML and JavaScript\nDESCRIPTION: This HTML file defines the structure for a simple WebUI page. The embedded JavaScript uses the nanos world 'Events' API to subscribe to an event ('MyAwesomeEvent') triggered by the Lua script, logging the received parameter to the console. It then calls back to the Lua script by triggering another event ('MyAwesomeAnswer') with a message.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/scripting/user-interface.mdx#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<html>\n    <head>\n        <script>\n\t\t\t// Register for \"MyAwesomeEvent\" from Lua\n\t\t\tEvents.Subscribe(\"MyAwesomeEvent\", function(param1) {\n\t\t\t\tconsole.log(\"Triggered! \" + param1);\n\n\t\t\t\t// Triggers \"MyAwesomeAnswer\" on Lua\n\t\t\t\tEvents.Call(\"MyAwesomeAnswer\", \"Hey there!\");\n\t\t\t})\n\t\t</script>\n    </head>\n    <body>\n        Hello World!\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring a Billboard - Nanos World Lua\nDESCRIPTION: This snippet demonstrates how to instantiate a Billboard in a Nanos World client script using Lua, specifying its position, material, size, and a face-camera property. It then sets a texture parameter for the material, referencing a custom image asset. Dependencies include the Nanos World runtime with the Billboard, Vector, and Vector2D classes available. Key parameters: position (Vector), material path (string), size (Vector2D), and a boolean for face-camera. The expected output is a Billboard rendered in-game always facing the user's camera with the assigned material and texture. Constraints: Runs client-side and requires valid material and texture asset references.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/classes/billboard.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal my_billboard = Billboard(\n    Vector(200, 200, 200), -- location\n    \"nanos-world::M_Default_Masked_Lit\", -- material\n    Vector2D(32, 32), -- size\n    true\n)\n\nmy_billboard:SetMaterialTextureParameter(\"Texture\", \"package://my_package/Client/image.jpg\")\n```\n\n----------------------------------------\n\nTITLE: Destroying Characters on Player Leave (Lua)\nDESCRIPTION: This Lua script, appended to `Server/Index.lua`, ensures proper cleanup when a player disconnects. It subscribes a function to the `Player.Destroy` event. Inside the function, it retrieves the character controlled by the disconnecting player using `player:GetControlledCharacter()` and, if a character exists, destroys it using `character:Destroy()`.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/quick-start.mdx#_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\n-- When Player leaves the server, destroy it's possessing Character\nPlayer.Subscribe(\"Destroy\", function(player)\n    local character = player:GetControlledCharacter()\n    if (character) then\n        character:Destroy()\n    end\nend)\n```\n\n----------------------------------------\n\nTITLE: Spawning a Prop Entity using an Asset Pack in Lua\nDESCRIPTION: This Lua snippet shows how to instantiate a `Prop` object at the default Vector (0,0,0) and Rotator (0,0,0), using the \"SM_Cube\" static mesh asset from the built-in \"nanos-world\" Asset Pack. It requires the nanos world Lua scripting environment and access to the `Prop`, `Vector`, and `Rotator` classes.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/essential-concepts.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Using the default 'nanos-world' Asset Pack, which is already natively included in the game\nlocal my_prop = Prop(Vector(), Rotator(), \"nanos-world::SM_Cube\")\n```\n\n----------------------------------------\n\nTITLE: Inheriting a Base Class in Lua\nDESCRIPTION: Demonstrates how to create a new custom class 'MyNewClass' by inheriting from the built-in 'Prop' class using the static `Inherit` method. It then shows how to instantiate the new class using its default constructor.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/scripting/inheriting-classes.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Creates a new Class called \"MyNewClass\" inheriting from Prop\n-- and stores it in the variable MyNewClass\nMyNewClass = Prop.Inherit(\"MyNewClass\")\n\n-- Spawn it using the default constructor\nlocal my_new_class_instance = MyNewClass(Vector(), Rotator(), \"nanos-world::SM_Cube\")\n```\n\n----------------------------------------\n\nTITLE: Creating and Customizing a Decal Instance in Lua\nDESCRIPTION: This Lua snippet demonstrates the creation of a 'Decal' instance using its constructor, specifying initial properties like location (Vector), rotation (Rotator), material path (string), size (Vector), lifespan (number), and fade screen size (number). It then further customizes the decal by setting a specific texture parameter ('Texture') using the 'SetMaterialTextureParameter' method, likely applying a custom image from a package.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/classes/decal.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n```lua title=\"Client/Index.lua\" showLineNumbers\nlocal my_decal = Decal(\n    Vector(100, 200, 0), -- location\n    Rotator(0, 90, 90), -- rotation\n    \"nanos-world::M_Default_Translucent_Lit_Decal\", -- material\n    Vector(128, 256, 256), -- size\n    60, -- lifespan\n    0.01 -- fade screen size\n)\n\nmy_decal:SetMaterialTextureParameter(\"Texture\", \"package://my_package/Client/image.jpg\")\n```\n```\n\n----------------------------------------\n\nTITLE: Structuring a nanos world Asset Pack Directory\nDESCRIPTION: Illustrates the required directory structure for a cooked Asset Pack within the nanos world server's `Assets/` folder. It shows the Asset Pack folder (named in kebab-case), the cooked asset files (`.uasset`, `.uexp`, `.ubulk`), and the mandatory `Assets.toml` configuration file.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/assets-modding/creating-assets/importing-assets.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nAssets/\n├── my-asset-pack/\n│   ├── SM_Cube.uasset\n│   ├── SM_Cube.uexp\n│   ├── SM_Cube.ubulk\n│   ├── SM_Asset_02.uasset\n│   ├── ...\n│   └── Assets.toml\nConfig.toml\nNanosWorldServer.exe\n```\n\n----------------------------------------\n\nTITLE: Integrating Event Handling into React Component (App.js)\nDESCRIPTION: This updated 'App.js' code demonstrates integrating nanos world event handling. It imports the custom 'Events' module and React's 'useState' hook. State variables ('health', 'weaponAmmo', 'weaponBag', 'displayAmmo') are defined to hold UI data. 'Events.Subscribe' is used to listen for 'UpdateWeaponAmmo' and 'UpdateHealth' events from nanos world, updating the component's state accordingly, which triggers UI re-renders.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/tutorials-and-examples/basic-hud-react.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport './App.css';\nimport Events from './Events.js';\nimport { useState } from 'react';\n\n\nfunction App() {\n\n  // Use React State to store the health and ammo values\n  // The values are updated by the events from the server\n  const [health, setHealth] = useState(100);\n  const [weaponAmmo, setWeaponAmmo] = useState(30);\n  const [weaponBag, setWeaponBag] = useState(1000);\n  const [displayAmmo, setDisplayAmmo] = useState(false);\n\n  // Subscribe to the events related to the Ammo and visibility of the Ammo container\n  Events.Subscribe(\"UpdateWeaponAmmo\",(enable, clip, bag) => {\n    setDisplayAmmo(enable);\n    setWeaponAmmo(clip);\n    setWeaponBag(bag);\n  });\n\n  // Subscribe to the events related to the Health\n  Events.Subscribe(\"UpdateHealth\", (health) => {\n    setHealth(health);\n  });\n\n  return (\n    <div >\n      {/* Health container (black background) */}\n        <div id=\"health_container\">\n            <img src=\"./img/health.png\" alt=\"health-cross\"/>\n              <span id=\"health_current\">{health}</span> {/* Health value */}\n        </div>\n\n        {/* Weapon Ammo container (black background) */}\n        {displayAmmo &&\n          <div id=\"weapon_ammo_container\">\n            <span id=\"weapon_ammo_clip\">{weaponAmmo}</span> {/* Ammo Clip value */}\n            <span id=\"weapon_ammo_bag\">/ {weaponBag}</span> {/* Ammo Bag value */}\n        </div>\n        }\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Communicating from Lua to JavaScript (WebUI)\nDESCRIPTION: Shows how to establish communication from a Lua script to the JavaScript environment within a WebUI. It demonstrates calling a JavaScript event (`MyEvent`) with parameters using `my_ui:CallEvent` and subscribing to an event (`MyAnswer`) sent back from JavaScript using `my_ui:Subscribe`.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/classes/webui.mdx#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal my_ui = WebUI(\"Awesome UI\", \"file://UI/index.html\")\n\nlocal param1 = 123\nlocal param2 = \"hello\"\n\n-- Calls a JS event\nmy_ui:CallEvent(\"MyEvent\", param1, param2)\n\n-- Subscribes to receive JS events\nmy_ui:Subscribe(\"MyAnswer\", function(param1)\n    Console.Log(\"Received back! %s\", param1)\n    -- Will output 'Received back! Hey there!'\nend)\n```\n\n----------------------------------------\n\nTITLE: Spawning a Widget3D from a Widget in Lua\nDESCRIPTION: This Lua code demonstrates how to create a basic `Widget` (specifically a `NativeWidget.Text`), set its content using `CallBlueprintEvent`, and then spawn its 3D representation in the game world using the `SpawnWidget3D()` method on the `Widget` instance. The resulting `my_widget_3d` is a `Widget3D` object, which inherits Actor functionalities.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/classes/widget-3d.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Spawns a Widget\nlocal my_text = Widget(NativeWidget.Text)\nmy_text:CallBlueprintEvent(\"SetText\", \"Hello World!\")\n\n-- Spawns the Widget3D directly from a Widget\nlocal my_widget_3d = my_text:SpawnWidget3D()\n```\n\n----------------------------------------\n\nTITLE: Loading and Applying a Texture to a Mesh using nanos world in Lua\nDESCRIPTION: This script demonstrates spawning a mesh and dynamically loading an external texture (image) from an asset/package directory into a 'Texture' material parameter. By setting 'SetMaterialTextureParameter', a specified image file is applied to the mesh. Prerequisites include ensuring the texture exists locally and the target material supports texture input; it highlights the performance caveats and paths used (e.g., 'Client/' folder).\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/tutorials-and-examples/painting-meshes.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\n-- spawns a static mesh cube\\nlocal my_cube = StaticMesh(Vector(300, 0, 100), Rotator(0, 45, 0), \\\"nanos-world::SM_Cube\\\")\\n\\n-- replaces it's materials with the nanos default one\\nmy_cube:SetMaterial(\\\"nanos-world::M_Default_Masked_Lit\\\")\\n\\n-- applies a custom texture to a parameter called \\\"Texture\\\"\\nmy_cube:SetMaterialTextureParameter(\\\"Texture\\\", \\\"package://testing/Client/syed.jpg\\\")\n```\n\n----------------------------------------\n\nTITLE: Basic Server-Side Event Handling in Lua\nDESCRIPTION: Demonstrates fundamental usage of the Events static class on the server side. It covers subscribing to local server events ('MyLocalEvent') and events triggered by clients ('MyServerEvent'). When subscribing to client events (`SubscribeRemote`), the callback function receives the `player` object who triggered the event as the first argument. The example shows calling local events, sending an event back to a specific client (`CallRemote` with player argument), and broadcasting an event to all connected clients (`BroadcastRemote`).\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/static-classes/events.mdx#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n```lua title=\"Server/Index.lua\" showLineNumbers\n-- register for a local Event (local = server only)\nEvents.Subscribe(\"MyLocalEvent\", function(my_text)\n    Console.Log(\"Event received locally! \" .. my_text)\n    -- outputs \"Event received locally! hello nanos world!\"\nend)\n\n-- calls a local Event in all Local Packages\nEvents.Call(\"MyLocalEvent\", \"hello nanos world!\")\n\n-- register for a client Event (remote = client)\nEvents.SubscribeRemote(\"MyServerEvent\", function(player, my_text)\n    Console.Log(player:GetName() .. \" sent an event from client! \" .. my_text)\n    -- outputs \"Syed sent an event from client! hello nanos world!\"\n\n    -- sends an \"answer\" to the player which sent this event\n    Events.CallRemote(\"MyClientEvent\", player, \"hello nanos world! message only for you!\")\nend)\n\n-- sends a remote Event to all Players in all Client Packages\nEvents.BroadcastRemote(\"MyClientEvent\", \"hello nanos world!\")\n```\n```\n\n----------------------------------------\n\nTITLE: Creating and Customizing Characters - nanos world - Lua\nDESCRIPTION: This Lua snippet demonstrates the creation of Character actors using different skeletal meshes in nanos world, showing how to dynamically customize them with clothing, hair, and accessories through both skeletal and static mesh attachments. The script leverages methods like AddSkeletalMeshAttached and AddStaticMeshAttached, which require the nanos world Lua API. Inputs include position vectors, rotators, and asset identifiers for meshes to be attached, while the outputs are customized Character objects placed in the world. Some mesh attachments are restricted to specific genders, and asset names must correspond to valid nanos world content.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/classes/character.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- The following examples are using all Skeletal Meshes which we currently have for examples, including the officials Woman, Man and Mannequin:\nlocal woman = Character(Vector(100, 0, 100), Rotator(0, 0, 0), \"nanos-world::SK_Female\")\nlocal man = Character(Vector(200, 0, 100), Rotator(0, 0, 0), \"nanos-world::SK_Male\")\nlocal mannequin = Character(Vector(300, 0, 100), Rotator(0, 0, 0), \"nanos-world::SK_Mannequin\")\nlocal mannequin_female = Character(Vector(400, 0, 100), Rotator(0, 0, 0), \"nanos-world::SK_Mannequin_Female\")\n\nlocal post_apocalyptic = Character(Vector(400, 0, 100), Rotator(0, 0, 0), \"nanos-world::SK_PostApocalyptic\")\nlocal classic_male = Character(Vector(500, 0, 100), Rotator(0, 0, 0), \"nanos-world::SK_ClassicMale\")\n\n-- Adds Clothes to Man. Note: some Meshes only supports a specific Mesh (Men/Woman)\nman:AddSkeletalMeshAttached(\"shirt\", \"nanos-world::SK_Shirt\") -- Men only\nman:AddSkeletalMeshAttached(\"shirt\", \"nanos-world::SK_Underwear\") -- Men only\nman:AddSkeletalMeshAttached(\"pants\", \"nanos-world::SK_Pants\") -- Men only\nman:AddSkeletalMeshAttached(\"shoes\", \"nanos-world::SK_Shoes_01\")\nman:AddSkeletalMeshAttached(\"tie\", \"nanos-world::SK_Tie\")\n\n-- Adds Clothes to Woman\nwoman:AddSkeletalMeshAttached(\"full\", \"nanos-world::SK_CasualSet\") -- Woman only\nwoman:AddSkeletalMeshAttached(\"shoes\", \"nanos-world::SK_Sneakers\")\n\n-- Adds Beard to Man\nman:AddStaticMeshAttached(\"beard\", \"nanos-world::SM_Beard_Extra\", \"beard\")\nman:AddStaticMeshAttached(\"beard\", \"nanos-world::SM_Beard_Middle\", \"beard\")\nman:AddStaticMeshAttached(\"beard\", \"nanos-world::SM_Beard_Mustache_01\", \"beard\")\nman:AddStaticMeshAttached(\"beard\", \"nanos-world::SM_Beard_Mustache_02\", \"beard\")\nman:AddStaticMeshAttached(\"beard\", \"nanos-world::SM_Beard_Side\", \"beard\")\n\n-- Adds Hair to Man\nman:AddStaticMeshAttached(\"hair\", \"nanos-world::SM_Hair_Long\", \"hair_male\")\nman:AddStaticMeshAttached(\"hair\", \"nanos-world::SM_Hair_Short\", \"hair_male\")\n\n-- Adds Hair to Woman\nwoman:AddStaticMeshAttached(\"hair\", \"nanos-world::SM_Hair_Kwang\", \"hair_female\")\n```\n\n----------------------------------------\n\nTITLE: Declaring Client-Side Spawn Menu Item with SpawnMenu.AddItem (nanos world, Lua)\nDESCRIPTION: Demonstrates adding a new item to the Spawn Menu from the client side by calling SpawnMenu.AddItem, specifying the tab, unique ID, display name, image path, and (optionally) category. No return value; this configures spawn menu visuals. Dependencies include the client-side SpawnMenu API. Parameters are the tab ID, unique item ID, display name, image path, and optional category ID. If the category is nil, it appears under 'uncategorized'.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/explore/sandbox-game-mode/spawn-menu.mdx#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- Example adding an Incredible Tool to spawn Menu (client side)\\nSpawnMenu.AddItem(\\n    \"tools\",\\t\\t\\t\\t-- tab id\\n    \"IncredibleTool\",\\t-- unique id of the item\\n    \"Incredible Tool\",\\t-- name/label\\n    \"assets://nanos-world/Thumbnails/SK_Blaster.jpg\", -- image path\\n    nil\\t\\t\\t\\t\\t-- no category, will display at 'uncategorized'\\n)\n```\n\n----------------------------------------\n\nTITLE: Setting an Actor's Dimension with nanos world API (Lua)\nDESCRIPTION: This snippet demonstrates how to assign an actor to a specific dimension in nanos world using the SetDimension method. It requires an existing actor object and a numerical dimension value, where the dimension argument specifies the target dimension (between 1 and 65535). The operation is essential in isolating actors to different client-side worlds. Returns no explicit output; the actor is moved server-side and handled accordingly on clients.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/scripting/dimensions.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nactor:SetDimension(number)\n```\n\n----------------------------------------\n\nTITLE: Making Asynchronous HTTP Requests - nanos world - Lua\nDESCRIPTION: Demonstrates how to make an asynchronous HTTP request in nanos world using the HTTP.Request method in Lua. The function takes parameters for URL, path, method, body, content-type, a boolean for SSL, headers, and a callback for handling the HTTP response. This code requires the nanos world scripting environment with HTTP module available. Outputs result via the callback function. This usage is subject to breaking changes as discussed (i.e., HTTP.Request becoming HTTP.RequestAsync in future compatibility versions).\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/packages/compatibility-versions.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Make an asynchronous HTTP request\\nHTTP.Request(\\\"https://api.nanos.world/\\\", \\\"store/v1/packages/halloween\\\", \\\"GET\\\", \\\"\\\", \\\"application/json\\\", false, {}, function(status, data)\\n    -- Do something with my data\\nend)\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Prop Entity with Properties in Nanos World (Lua)\nDESCRIPTION: This Lua code sample demonstrates how to create a new Prop object in Nanos World by providing a position (Vector), rotation (Rotator), and a static mesh identifier. The dependencies include the Nanos World API and all referenced classes (Prop, Vector, Rotator) must be available in the environment. The constructor parameters specify the spawn location, rotation angle, and which 3D mesh to use; upon success, a new Prop entity is returned. This snippet should be executed in an environment where entity instantiation is permitted, such as server or appropriate scripting context. Limitations include disabled interactions for client-spawned Props and automatic enabling of CCD for small Props, affecting performance.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/classes/prop.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal my_prop = Prop(\n  Vector(-900, 185, 215),\n  Rotator(0, 90, 90),\n  \"nanos-world::SM_Crate_07\"\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing the WebUI Component in Lua\nDESCRIPTION: This Lua snippet, intended for `Client/Index.lua`, creates a WebUI instance named \"Main HUD\" in the nanos world client environment. It loads the user interface defined in the local `Client/UI/index.html` file using the `file://` protocol, making the HTML-based HUD visible in the game. This is the initial step to integrate the HUD.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/tutorials-and-examples/basic-hud-html.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n-- Spawns a WebUI with the HTML file you just created\nmain_hud = WebUI(\"Main HUD\", \"file://UI/index.html\")\n```\n\n----------------------------------------\n\nTITLE: Spawning Sky and Setting Time of Day in Lua\nDESCRIPTION: This Lua code snippet demonstrates how to use the static 'Sky' class to spawn the Ultra Dynamic Sky actor and set the in-game time of day. It calls `Sky.Spawn()` to initialize the sky system and `Sky.SetTimeOfDay(16, 30)` to set the time to 16:30. This code is intended to run on the client-side, as indicated by the example file path `Client/Index.lua`.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/static-classes/sky.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Spawns a new Ultra Dynamic Sky actor\nSky.Spawn()\n\n-- Sets the time to 16:30\nSky.SetTimeOfDay(16, 30)\n```\n\n----------------------------------------\n\nTITLE: Implementing an Event-Driven Canvas HUD Update in Lua (nanos world)\nDESCRIPTION: This Lua script demonstrates an optimized, event-driven approach for updating a Canvas HUD. It disables automatic repainting by setting `auto_repaint_rate` to -1 in the `Canvas` constructor. The HUD drawing logic remains in the `Update` event subscription, but `HUDCanvas:Repaint()` is called manually only when necessary data changes. Events like player spawning, character possession, taking damage, death, picking up/dropping weapons, firing, reloading, and viewport resizing trigger the repaint, significantly improving performance by avoiding unnecessary redraws.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/tutorials-and-examples/basic-hud-canvas.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n-- We set -1 to never auto repaint\nHUDCanvas = Canvas(true, Color.TRANSPARENT, -1, true)\n\n-- Subscribes for Update event, we can only draw inside this event (as usual)\nHUDCanvas:Subscribe(\"Update\", function(self, width, height)\n    -- Gets the Local Player\n    local local_player = Client.GetLocalPlayer()\n    if (not local_player) then return end\n\n    -- Gets the Local Character (possessed by the Local Player)\n    local local_character = local_player:GetControlledCharacter()\n    if (not local_character) then return end\n\n    -- Draws the Health\n    self:DrawText(tostring(local_character:GetHealth()), Vector2D(100, height - 100), FontType.PoiretOne, 25, Color.WHITE)\n\n    -- Gets the Local Weapon\n    local character_weapon = local_character:GetPicked()\n    if (character_weapon and character_weapon:GetType() == \"Weapon\") then\n        -- Draws the Ammo Clip\n        self:DrawText(tostring(character_weapon:GetAmmoClip()), Vector2D(width - 200, height - 100), FontType.PoiretOne, 25, Color.WHITE)\n\n        -- Draws the Ammo Bag\n        self:DrawText(\"/ \" .. tostring(character_weapon:GetAmmoBag()), Vector2D(width - 140, height - 87), FontType.PoiretOne, 15, Color.WHITE)\n    end\nend)\n\n\n-- Now we subscribe for when we want it to be updated:\n\n-- When LocalPlayer spawns, sets an event on it to trigger when we possesses a new character, to store the local controlled character locally. This event is only called once, see Package.Subscribe(\"Load\") to load it when reloading a package\nClient.Subscribe(\"SpawnLocalPlayer\", function(local_player)\n    local_player:Subscribe(\"Possess\", function(player, character)\n        UpdateLocalCharacter(character)\n    end)\nend)\n\n-- When package loads, verify if LocalPlayer already exists (eg. when reloading the package), then try to get and store it's controlled character\nPackage.Subscribe(\"Load\", function()\n    local local_player = Client.GetLocalPlayer()\n    if (local_player  ~= nil) then\n        UpdateLocalCharacter(local_player:GetControlledCharacter())\n    end\nend)\n\n-- Function to set all needed events on local character (to update the UI when it takes damage or dies)\nfunction UpdateLocalCharacter(character)\n    -- Verifies if character is not nil (eg. when GetControllerCharacter() doesn't return a character)\n    if (character == nil) then return end\n\n    -- Sets on character an event to update the health's UI after it takes damage\n    character:Subscribe(\"TakeDamage\", function(charac, damage, type, bone, from_direction, instigator, causer)\n        HUDCanvas:Repaint()\n    end)\n\n    -- Sets on character an event to update the health's UI after it dies\n    character:Subscribe(\"Death\", function(charac)\n        HUDCanvas:Repaint()\n    end)\n\n    -- Sets on character an event to update his grabbing weapon (to show ammo on UI)\n    character:Subscribe(\"PickUp\", function(charac, object)\n        if (object:GetType() == \"Weapon\") then\n            HUDCanvas:Repaint()\n        end\n    end)\n\n    -- Sets on character an event to remove the ammo ui when he drops it's weapon\n    character:Subscribe(\"Drop\", function(charac, object)\n        HUDCanvas:Repaint()\n    end)\n\n    -- Sets on character an event to update the UI when he fires\n    character:Subscribe(\"Fire\", function(charac, weapon)\n        HUDCanvas:Repaint()\n    end)\n\n    -- Sets on character an event to update the UI when he reloads the weapon\n    character:Subscribe(\"Reload\", function(charac, weapon, ammo_to_reload)\n        HUDCanvas:Repaint()\n    end)\n\n    -- Updates the UI immeditelly\n    HUDCanvas:Repaint()\nend\n\n-- Updates the UI positions when the Viewport (screen) is resized\nClient.Subscribe(\"ViewportResized\", function(NewSize)\n    HUDCanvas:Repaint()\nend)\n```\n\n----------------------------------------\n\nTITLE: Registering and Binding Key Bindings with Input API in Lua\nDESCRIPTION: This Lua snippet demonstrates how to register a new key binding ('SpawnMenu') with a default key ('Q') using the Input class, then bind callback functions to the key's pressed and released events. Dependencies include the 'Input' class (from nanos.world) and use of InputEvent enums for event types. The snippet includes registering the key, subscribing to both press and release events, and outlines spots where menu open/close logic would be placed. Inputs are the binding name and default key; outputs are callback executions on key event triggers. The code should be placed within a Lua script running in the nanos.world environment.\nSOURCE: https://github.com/nanos-world/docs/blob/master/blog/2021-11-03-alpha-released.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Registers the binding_name 'SpawnMenu' with default key 'Q'\n-- This will add 'SpawnMenu' to user KeyBinding Settings automatically\nInput.Register(\"SpawnMenu\", \"Q\")\n\n-- Subscribes for Pressing the key\nInput.Bind(\"SpawnMenu\", InputEvent.Pressed, function()\n    -- Opens the Spawn Menu\nend)\n\n-- Subscribes for Releasing the key\nInput.Bind(\"SpawnMenu\", InputEvent.Released, function()\n    -- Closes the Spawn Menu\nend)\n```\n\n----------------------------------------\n\nTITLE: Defining a Checkbox Context Menu Item in Lua\nDESCRIPTION: Provides the Lua table structure for defining a 'checkbox' type item within the `items` table passed to `ContextMenu.AddItem`. It requires a unique `id` for the item, the `type` set to 'checkbox', a display `label`, and a `callback_event` string which is the name of the event triggered when the checkbox state changes.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/explore/sandbox-game-mode/context-menu.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n{\n\tid = \"id-of-item\",\n\ttype = \"checkbox\",\n\tlabel = \"my check box\",\n\tcallback_event = \"ContextMenu_MyCheckboxSelected\"\n},\n```\n\n----------------------------------------\n\nTITLE: Instantiating and Customizing Nanos World Characters in Lua\nDESCRIPTION: This Lua snippet demonstrates how to instantiate various Character objects in nanos world, assign predefined skeletal meshes, and add different clothing, hair, and beard meshes using available APIs. Dependencies include the nanos world Lua SDK and the required mesh assets (\"nanos-world::*\"). Characters are created using specific coordinates and rotation, and equipped with meshes appropriate to their gender; methods such as AddSkeletalMeshAttached and AddStaticMeshAttached are used for attachments. Inputs include asset names for meshes, while outputs are customized in-game character objects. Only compatible meshes should be attached to each character type to avoid visual or runtime issues.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/classes/character.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- The following examples are using all Skeletal Meshes which we currently have for examples, including the officials Woman, Man and Mannequin:\nlocal woman = Character(Vector(100, 0, 100), Rotator(0, 0, 0), \"nanos-world::SK_Female\")\nlocal man = Character(Vector(200, 0, 100), Rotator(0, 0, 0), \"nanos-world::SK_Male\")\nlocal mannequin = Character(Vector(300, 0, 100), Rotator(0, 0, 0), \"nanos-world::SK_Mannequin\")\nlocal mannequin_female = Character(Vector(400, 0, 100), Rotator(0, 0, 0), \"nanos-world::SK_Mannequin_Female\")\n\nlocal post_apocalyptic = Character(Vector(400, 0, 100), Rotator(0, 0, 0), \"nanos-world::SK_PostApocalyptic\")\nlocal classic_male = Character(Vector(500, 0, 100), Rotator(0, 0, 0), \"nanos-world::SK_ClassicMale\")\n\n-- Adds Clothes to Man. Note: some Meshes only supports a specific Mesh (Men/Woman)\nman:AddSkeletalMeshAttached(\"shirt\", \"nanos-world::SK_Shirt\") -- Men only\nman:AddSkeletalMeshAttached(\"shirt\", \"nanos-world::SK_Underwear\") -- Men only\nman:AddSkeletalMeshAttached(\"pants\", \"nanos-world::SK_Pants\") -- Men only\nman:AddSkeletalMeshAttached(\"shoes\", \"nanos-world::SK_Shoes_01\")\nman:AddSkeletalMeshAttached(\"tie\", \"nanos-world::SK_Tie\")\n\n-- Adds Clothes to Woman\nwoman:AddSkeletalMeshAttached(\"full\", \"nanos-world::SK_CasualSet\") -- Woman only\nwoman:AddSkeletalMeshAttached(\"shoes\", \"nanos-world::SK_Sneakers\")\n\n-- Adds Beard to Man\nman:AddStaticMeshAttached(\"beard\", \"nanos-world::SM_Beard_Extra\", \"beard\")\nman:AddStaticMeshAttached(\"beard\", \"nanos-world::SM_Beard_Middle\", \"beard\")\nman:AddStaticMeshAttached(\"beard\", \"nanos-world::SM_Beard_Mustache_01\", \"beard\")\nman:AddStaticMeshAttached(\"beard\", \"nanos-world::SM_Beard_Mustache_02\", \"beard\")\nman:AddStaticMeshAttached(\"beard\", \"nanos-world::SM_Beard_Side\", \"beard\")\n\n-- Adds Hair to Man\nman:AddStaticMeshAttached(\"hair\", \"nanos-world::SM_Hair_Long\", \"hair_male\")\nman:AddStaticMeshAttached(\"hair\", \"nanos-world::SM_Hair_Short\", \"hair_male\")\n\n-- Adds Hair to Woman\nwoman:AddStaticMeshAttached(\"hair\", \"nanos-world::SM_Hair_Kwang\", \"hair_female\")\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Server Events in Lua\nDESCRIPTION: Demonstrates subscribing to core server events ('Start', 'Stop', 'Tick') using the Server.Subscribe method in Lua. The 'Start' and 'Stop' events log messages upon server initiation and shutdown, while the 'Tick' event logs the delta time periodically. Requires the 'Server' static class and 'Console.Log' function from the nanos-world API.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/static-classes/server.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- prints \"Server started\" when the server is starting\nServer.Subscribe(\"Start\", function()\n    Console.Log(\"Server started\")\nend)\n\n-- prints \"Server stopped\" when the server stops / shutdown\nServer.Subscribe(\"Stop\", function()\n    Console.Log(\"Server stopped\")\nend)\n\n-- prints the delta time about every 33 ms\nServer.Subscribe(\"Tick\", function(delta_time)\n    Console.Log(\"Tick: \" .. delta_time)\nend)\n```\n\n----------------------------------------\n\nTITLE: Tracing Player View Using Nanos World Trace.LineSingle - Lua\nDESCRIPTION: This Lua snippet shows how to perform a periodic line trace (raycast) from the center of the player’s screen using Nanos World API. It sets a timer to trace every 100ms, projects the screen center to a 3D world direction, and performs a trace for 5000 units combining WorldStatic and PhysicsBody collision channels. The result highlights the trace hit location with a debug point, using a color code for entities. Required dependencies: Nanos World scripting API, including Viewport, Trace, CollisionChannel, TraceMode, Timer, Color, and Debug modules. The input parameters include the trace distance, channels, and mode; the trace returns entity hit information and location, visualized with debug points. Limitations: Only works in client-side context and depends on correct setup of Nanos World scripting environment.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/scripting/traces-and-raycasting.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Traces at each 100ms\\nTimer.SetInterval(function()\\n    -- Gets the middle of the screen\\n    local viewport_2D_center = Viewport.GetViewportSize() / 2\\n\\n    -- Deprojects to get the 3D Location for the middle of the screen\\n    local viewport_3D = Viewport.DeprojectScreenToWorld(viewport_2D_center)\\n\\n    -- Makes a trace with the 3D Location and it's direction multiplied by 5000\\n    -- Meaning it will trace 5000 units in that direction\\n    local trace_max_distance = 5000\\n\\n    local start_location = viewport_3D.Position\\n    local end_location = viewport_3D.Position + viewport_3D.Direction * trace_max_distance\\n\\n    -- Determine at which object we will be tracing for (WorldStatic - StaticMeshes - and PhysicsBody - Props)\\n    local collision_trace = CollisionChannel.WorldStatic | CollisionChannel.PhysicsBody\\n\\n    -- Sets the trace modes (we want it to return Entity and Draws a Debug line)\\n    local trace_mode = TraceMode.ReturnEntity | TraceMode.DrawDebug\\n\\n    -- Last parameter as true means it will draw a Debug Line in the traced segment\\n    local trace_result = Trace.LineSingle(start_location, end_location, collision_trace, trace_mode)\\n\\n    -- If hit something draws a Debug Point at the location\\n    if (trace_result.Success) then\\n\\n        -- Makes the point Red or Green if hit an Actor\\n        local color = Color(1, 0, 0) -- Red\\n\\n        if (trace_result.Entity) then\\n            color = Color(0, 1, 0) -- Green\\n\\n            -- Here you can check which actor you hit like\\n            -- if (trace_result.Entity:GetType() == \"Character\") then ...\\n        end\\n\\n        -- Draws a Debug Point at the Hit location for 5 seconds with size 10\\n        Debug.DrawPoint(trace_result.Location, color, 5, 10)\\n    end\\nend, 100)\n```\n\n----------------------------------------\n\nTITLE: Subscribing to ClassRegister Event in Lua\nDESCRIPTION: This Lua code shows how to use `Prop.Subscribe` to listen for the `ClassRegister` event. This event fires whenever a new class inherits from `Prop`. The provided callback function receives the newly registered class (`MyNewClass` in this example) as an argument, allowing access to its static properties, including default values set during inheritance (like `MyNewClass.name`). This is useful for dynamically reacting to new class definitions.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/scripting/inheriting-classes.md#_snippet_23\n\nLANGUAGE: lua\nCODE:\n```\nProp.Subscribe(\"ClassRegister\", function(class)\n\t-- here we see an useful case for the default values\n\t-- as we can access it here\n\tConsole.Log(MyNewClass.name) -- outputs \"My Name\n\t-- now we can do something (add to spawn menu?)\nend)\n\n-- inherits the Class\nMyNewClass = Prop.Inherit(\"MyNewClass\", {\n\tname = \"My Name\",\n\tcategory = \"breakable\",\n\tmy_custom_param = 123\n})\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Events from Server to Clients (Lua)\nDESCRIPTION: Illustrates how a server-side script can broadcast a custom event named \"MyClientEvent\" with associated data (\"hello nanos world!\") to all connected clients using Events.BroadcastRemote(). This complements the client-side subscription example. Requires the Events static class.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/essential-concepts.mdx#_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\n-- Sends a remote Event to all Players in all Client Packages\nEvents.BroadcastRemote(\"MyClientEvent\", \"hello nanos world!\")\n```\n\n----------------------------------------\n\nTITLE: Setting a Synchronized Value on an Entity in Lua\nDESCRIPTION: This Lua snippet shows how to use the `SetValue` method on an entity (e.g., `my_player`) to store data. It sets a value `100` associated with the key `\"my_value\"`. The third parameter `true` enables automatic synchronization of this value to all clients. This method is typically used on the server side. Note that `functions` cannot be stored.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/scripting/entity-values.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n```lua title=\"Server/Index.lua\" showLineNumbers\n-- Sets a synchronized 'my_value' value\nmy_player:SetValue(\"my_value\", 100, true)\n```\n```\n\n----------------------------------------\n\nTITLE: Overriding a Method and Calling the Super Method - nanos world - Lua\nDESCRIPTION: This example builds on overriding SetLocation for the Character class by calling the original base implementation using self:Super(...). It passes a modified new_location argument, demonstrating how to enhance or tweak input parameters while still performing default behavior. The Vector type must be accessible in context, and the snippet presumes nanos world's method resolution allows Super.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/scripting/extending-classes.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nfunction Character:SetLocation(new_location)\n\t-- ... Do something\n    self:Super(new_location + Vector(1, 2, 3))\nend\n```\n\n----------------------------------------\n\nTITLE: Optimizing Canvas HUD with Fixed Repaint Rate in Lua\nDESCRIPTION: This snippet demonstrates a performance optimization for the Canvas HUD by modifying the `Canvas` constructor. Instead of repainting every frame (rate 0), it sets the `auto_repaint_rate` parameter to `0.033`. This limits the HUD updates to approximately 30 frames per second (1 / 0.033 ≈ 30), reducing the performance impact compared to updating every tick.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/tutorials-and-examples/basic-hud-canvas.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- Instead of 0 in the auto_repaint_rate parameter\nHUDCanvas = Canvas(true, Color.TRANSPARENT, 0, true)\n\n-- Use 0.033, so it only updates every 0.033ms (i.e. at 30 fps)\n-- highlight-next-line\nHUDCanvas = Canvas(true, Color.TRANSPARENT, 0.033, true)\n```\n\n----------------------------------------\n\nTITLE: Implementing Gravity Gun Client Logic in Lua (nanos world)\nDESCRIPTION: This client-side Lua script implements the core Gravity Gun interaction logic. It handles mouse input: left-click performs a line trace to pick up or drop objects (Props or StaticMeshes), toggling highlighting and notifying the server via 'PickUp' event. Mouse scroll adjusts the held object's distance. A 'Tick' event handler continuously calculates the desired position for the held object based on camera view and distance, sending updates to the server via 'UpdateObjectPosition' event for smooth movement.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/tutorials-and-examples/gravity-gun.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n```lua title=\"Client/Index.lua\" showLineNumbers\n-- Global Variables\npicking_object = nil\ndistance_trace_object = nil\ndistance = 200\n\n-- Sets the color of Highlighing at index 1\nClient.SetHighlightColor(Color(0, 20, 20, 1.5), 1, HighlightMode.OnlyVisible)\n\n-- When Player clicks\nInput.Subscribe(\"MouseUp\", function(key_name)\n\n    -- If mouse was left button\n    if (key_name == \"LeftMouseButton\") then\n\n        -- If is grabbing something, drop it\n        if (picking_object) then\n            -- Calls server to re-enable gravity (if possible) and update it's last position\n            Events.CallRemote(\"PickUp\", picking_object, false)\n\n            -- Disables the highlight\n            picking_object:SetHighlightEnabled(false)\n\n            picking_object = nil\n            return\n        end\n\n        -- Get the camera location in 3D World Space\n        local viewport_2D_center = Viewport.GetViewportSize() / 2\n        local viewport_3D = Viewport.DeprojectScreenToWorld(viewport_2D_center)\n        local start_location = viewport_3D.Position\n\n        -- Gets the end location of the trace (5000 units ahead)\n        local trace_max_distance = 5000\n        local end_location = viewport_3D.Position + viewport_3D.Direction * trace_max_distance\n\n        -- Determine at which object we will be tracing for (WorldStatic - StaticMeshes - and PhysicsBody - Props)\n        local collision_trace = CollisionChannel.WorldStatic | CollisionChannel.PhysicsBody\n\n        -- Sets the trace modes (we want it to return Entity and Draws a Debug line)\n        local trace_mode = TraceMode.ReturnEntity | TraceMode.DrawDebug\n\n        -- Do the Trace\n        local trace_result = Trace.LineSingle(start_location, end_location, collision_trace, trace_mode)\n\n        -- If hit something and hit an Entity\n        if (trace_result.Success and trace_result.Entity) then\n\n            -- Sets the new picked up object\n            picking_object = trace_result.Entity\n\n            -- Calculates the offset of the hit and the center of the object\n            distance_trace_object = picking_object:GetLocation() - trace_result.Location\n\n            -- Calculates the distance of the object and the camera\n            distance = trace_result.Location:Distance(viewport_3D.Position)\n\n            -- Calls remote to disable gravity of this object (if has)\n            Events.CallRemote(\"PickUp\", picking_object, true)\n\n            -- Enable Highlighting on index 1\n            picking_object:SetHighlightEnabled(true, 1)\n        end\n    elseif (key_name == \"MouseScrollUp\") then\n        -- If mouse scroll, updates the Distance of the object from the camera\n        distance = distance + 25\n    elseif (key_name == \"MouseScrollDown\") then\n        -- If mouse scroll, updates the Distance of the object from the camera\n        distance = distance - 25\n        if (distance < 100) then distance = 100 end\n    end\nend)\n\nClient.Subscribe(\"Tick\", function(delta_time)\n    -- On Tick, updates the Position of the object, based on it's distance and camera rotation\n    if (picking_object == nil) then return end\n\n    local player = Client.GetLocalPlayer()\n    if (player == nil) then return end\n\n    -- Get the camera location in 3D World Space\n    local viewport_2D_center = Viewport.GetViewportSize() / 2\n    local viewport_3D = Viewport.DeprojectScreenToWorld(viewport_2D_center)\n    local start_location = viewport_3D.Position\n\n    -- Gets the new object location\n    -- (camera direction * 'distance' units ahead + object offset from first Hit to keep it relative)\n    local end_location = (viewport_3D.Position + viewport_3D.Direction * distance) + distance_trace_object\n\n    -- Calls remote to update it's location\n    Events.CallRemote(\"UpdateObjectPosition\", picking_object, end_location)\nend)\n```\n```\n\n----------------------------------------\n\nTITLE: Custom __index Metamethod for Player Class - nanos world - Lua\nDESCRIPTION: This snippet adds a custom index method to the Player class, serving as a __index override that logs every property access attempting to fetch a value. The example demonstrates how to intercept property reads for added behavior, such as logging or returning computed values. It assumes the existence of Console.Log and that Player can be extended in this fashion in the script context.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/scripting/extending-classes.md#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nfunction Player:index(key)\n\tConsole.Log(\"Getting %s value: %s\", tostring(self), key)\n    -- ... do something\n    return some_value\nend\n```\n\n----------------------------------------\n\nTITLE: Applying WebUI as a Mesh Material in Lua\nDESCRIPTION: Illustrates how to use a WebUI instance as a dynamic material for a 3D mesh. It involves creating a non-visible WebUI with specific dimensions and then applying it to a StaticMesh using the `SetMaterialFromWebUI` method.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/classes/webui.mdx#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- Spawns a WebUI with is_visible = false, is_transparent = false, auto_resize = false and size of 500x500\nlocal my_ui = WebUI(\"Awesome Site\", \"https://nanos.world\", false, false, false, 500, 500)\n\n-- Spawns a StaticMesh (can be any mesh)\nlocal static_mesh = StaticMesh(Vector(0, 0, 100), Rotator(), \"nanos-world::SM_Cube\")\n\n-- Sets the mesh material to use the WebUI\nstatic_mesh:SetMaterialFromWebUI(my_ui)\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Modifying an Existing Prop Entity in Lua\nDESCRIPTION: This Lua code demonstrates interaction with existing entities. It retrieves a 'Prop' entity using its index (1) via 'Prop.GetByIndex'. Then, it modifies the retrieved prop by changing its mesh using the ':SetMesh' method and providing a new asset path ('nanos-world::SM_Pyramid_VR').\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/essential-concepts.mdx#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n```lua title=\"my-package/Server/Index.lua\" showLineNumbers\nlocal some_prop = Prop.GetByIndex(1)\nsome_prop:SetMesh(\"nanos-world::SM_Pyramid_VR\")\n```\n```\n\n----------------------------------------\n\nTITLE: Spawning Character with Custom Skeletal Mesh using nanos world API (Lua)\nDESCRIPTION: This Lua snippet demonstrates how to instantiate a new Character in nanos world using a custom skeletal mesh that has been imported and configured in the asset pack. The 'Character' constructor receives a position vector, a rotator for orientation, and the asset key of the custom mesh as arguments. Ensure that the referenced asset key (e.g., 'my-asset-pack::MESH_PC_00') is correctly set up in Assets.toml, and that the asset has been processed to use the nanos world skeleton and physics assets. The result is a character in-game with the custom mesh applied. Requires nanos world server scripting environment.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/assets-modding/creating-assets/skeletal-meshes/characters-meshes.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal char = Character(Vector(0, 300, 100), Rotator(), \"my-asset-pack::MESH_PC_00\")\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from All Player Spawn Events - nanos world - Lua\nDESCRIPTION: Shows how to unregister all 'Spawn' event callbacks for the Player class registered within the current Package. This operation is limited to the events registered by the active Package and will not affect other packages or classes. Ensures that no previously registered callbacks for the 'Spawn' event on Player will be fired.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/scripting/events-guide.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- This will unregister from all \"Spawn\" events of Player registered in this Package\nPlayer.Unsubscribe(\"Spawn\")\n```\n\n----------------------------------------\n\nTITLE: Installing SteamCMD on Ubuntu VM (Bash)\nDESCRIPTION: Installs SteamCMD on an Ubuntu-based Google Cloud VM. It enables the multiverse repository, adds i386 architecture support (required by SteamCMD), updates package lists, and installs the `lib32gcc1` dependency and the `steamcmd` package. Requires `sudo` privileges to execute.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/tutorials-and-examples/hosting-server-4free-gcp.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo add-apt-repository multiverse\nsudo dpkg --add-architecture i386\nsudo apt update\nsudo apt install lib32gcc1 steamcmd\n```\n\n----------------------------------------\n\nTITLE: Spawning and Animating a Door with Trigger Events in nanos world (Lua)\nDESCRIPTION: This Lua code configures a door system using nanos world APIs by spawning a door mesh and a hinge, attaching them, and setting up a trigger that detects when characters enter or leave the area. It animates the character and smoothly rotates the door open or closed in response to overlap events. Requires the nanos world Lua scripting API and the appropriate mesh/animation resources. Input is character movement through the trigger; outputs are mesh transformations and animation playback. All positioning, rotation, scaling, and animation details must match your asset and server requirements.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/tutorials-and-examples/doors.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Let's spawn a SM_Plane to be our door, and an empty (SM_None) StaticMesh to be our Hinge.\\n-- As the SM_Plane has it's pivot at the center of the mesh, we need to have a Hinge to make it rotate properly.\\n-- This is not needed if your Door Mesh already has the pivot at the correct Hinge location.\\n\\n-- Spawns the Hinge (which we rotated 90º to stand up)\\nlocal door = StaticMesh(Vector(0, 0, 100), Rotator(0, 0, 90), \\\"nanos-world::SM_None\\\")\\n\\n-- Spawns the Door mesh, scales it to be in the format of a door, and attaches it to the Hinge\\nlocal door_mesh = StaticMesh(Vector(), Rotator(), \\\"nanos-world::SM_Plane\\\")\\ndoor_mesh:SetScale(Vector(1, 2, 1))\\n\\n-- Attaches to the Hinge at a relative location of 50 units (to be at the hinge location)\\ndoor_mesh:AttachTo(door)\\ndoor_mesh:SetRelativeLocation(Vector(50, 0, 0))\\n\\n-- Spawns our trigger at the center of the Door\\nlocal trigger = Trigger(Vector(0, 0, 100), Rotator(), 150)\\n\\n-- Registers the trigger when a Character moves in\\ntrigger:Subscribe(\\\"BeginOverlap\\\", function(trigger, actor)\\n    if (actor:GetType() ~= \\\"Character\\\") then return end\\n\\n    -- Plays an opening door animation on the Character\\n    actor:PlayAnimation(\\\"nanos-world::AM_Mannequin_DoorOpen_01\\\", AnimationSlotType.UpperBody)\\n\\n    -- Rotates the door -90º smoothly\\n    door:RotateTo(Rotator(0, -90, 90), 1)\\nend)\\n\\n-- Registers the trigger when a Character moves out\\ntrigger:Subscribe(\\\"EndOverlap\\\", function(trigger, actor)\\n    if (actor:GetType() ~= \\\"Character\\\") then return end\\n\\n    -- Rotates the door back to original position, smoothly\\n    door:RotateTo(Rotator(0, 0, 90), 1)\\nend)\n```\n\n----------------------------------------\n\nTITLE: Creating and Displaying a Native Text Widget in Lua\nDESCRIPTION: This Lua snippet demonstrates how to create a native Unreal TextBlock widget using `Widget(NativeWidget.Text)`. It then sets the text content to \"Hello World!\" by calling the underlying Unreal `SetText` method via `CallBlueprintEvent` and finally adds the widget to the game's viewport using `AddToViewport`.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/classes/widget.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n```lua title=\"Client/Index.lua\" showLineNumbers\nlocal my_text = Widget(NativeWidget.Text)\nmy_text:CallBlueprintEvent(\"SetText\", \"Hello World!\")\nmy_text:AddToViewport()\n```\n```\n\n----------------------------------------\n\nTITLE: Styling the HUD Elements with CSS (App.css)\nDESCRIPTION: This CSS code provides the styling rules for the HUD elements defined in 'App.js'. It styles the body, positions the health and ammo containers absolutely at the bottom corners, applies background gradients, and defines font styles, sizes, colors, and alignment for the text elements.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/tutorials-and-examples/basic-hud-react.md#_snippet_5\n\nLANGUAGE: css\nCODE:\n```\nbody {\n    font-family: Tahoma, sans-serif;\n    font-size: 14px;\n    margin: 0px;\n    padding: 0px;\n    margin-bottom: 20px;\n}\n\n#weapon_ammo_container {\n    position: absolute;\n    right: 0px;\n    bottom: 0px;\n    width: 200px;\n    height: 50px;\n    background-image: linear-gradient(to right, #00000000, #00000080);\n    text-align: right;\n    line-height: 47px;\n}\n\n#weapon_ammo_bag {\n    color: #ededed;\n    font-weight: bold;\n    font-size: 16px;\n    margin-right: 30px;\n    position: relative;\n    top: -4px;\n}\n\n#weapon_ammo_clip {\n    color: white;\n    font-weight: bold;\n    font-size: 32px;\n}\n\n#health_container {\n    position: absolute;\n    bottom: 0px;\n    width: 200px;\n    height: 50px;\n    background-image: linear-gradient(to left, #00000000, #00000080);\n}\n\n#health_container img {\n    height: 23px;\n    margin: 13px;\n}\n\n#health_current {\n    color: white;\n    font-size: 32px;\n    font-weight: bold;\n    position: absolute;\n    margin-top: 4px;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Synchronized Entity Value on Server (Lua)\nDESCRIPTION: This Lua snippet demonstrates storing a value (100) with the key \"my_value\" on a player entity (`my_player`) on the server side. The third parameter `true` ensures that this key-value pair is automatically synchronized to all connected clients. It utilizes the `:SetValue(key, value, sync)` method available on Entity objects.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/scripting/entity-values.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n```lua title=\"Server/Index.lua\" showLineNumbers\n-- Sets a synchronized 'my_value' value\nmy_player:SetValue(\"my_value\", 100, true)\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Default Weapons Package using Shell CLI\nDESCRIPTION: This shell command utilizes the NanosWorldServer Command Line Interface (CLI) to install the `default-weapons` package. This package provides the base weapon used in the subsequent Lua script and is a prerequisite for the prop shooter functionality.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/tutorials-and-examples/prop-shooter.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# install the default-weapons package\n./NanosWorldServer.exe --cli install package default-weapons\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Custom Event Across Packages - nanos world (Lua)\nDESCRIPTION: Shows how another package subscribes to the same custom event, accessing the sent parameters. Requires nanos world and the Events API. The handler receives all parameters as arguments, allowing flexible data interchange. Outputs received values via Console.Log.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/scripting/communicating-between-packages.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nEvents.Subscribe(\\\"MyAwesomeEvent\\\", function(parameter1, parameter2, parameter3)\\n    Console.Log(\\\"Received \\\" .. parameter1) -- Received 123\\n    Console.Log(\\\"Received \\\" .. parameter2) -- Received hello there\\n    Console.Log(\\\"Received \\\" .. parameter3) -- Received table\\nend)\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Remote Events to a Dimension in nanos world (Lua)\nDESCRIPTION: This snippet uses the BroadcastRemoteDimension function of the Events API to send a custom event to all players within a given dimension. It requires the dimension number, an event name string, and an optional list of parameters to pass with the event. When used, all players in the specified dimension receive the event, facilitating dimension-based communication. Entities not in the destination dimension sent as parameters will be replaced by nil for security and consistency.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/scripting/dimensions.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nEvents.BroadcastRemoteDimension(dimension, event_name, params...)\n```\n\n----------------------------------------\n\nTITLE: Defining Basic HUD Structure in HTML\nDESCRIPTION: This HTML snippet sets up the basic structure for the game HUD. It includes placeholders for health and weapon ammo display, links the required JavaScript files (`jquery-3.5.1.min.js`, `index.js`), the CSS stylesheet (`style.css`), and uses an image (`health.png`) for the health icon. It relies on external JQuery library and associated JS/CSS files being present in the same directory.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/tutorials-and-examples/basic-hud-html.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<html>\n    <head>\n        <!-- Includes all files we created (JS, JQuery and CSS) -->\n        <script src=\"jquery-3.5.1.min.js\"></script>\n        <script src=\"index.js\"></script>\n        <link rel=\"stylesheet\" href=\"style.css\">\n    </head>\n    <body>\n        <!-- Health container (black background) -->\n        <div id=\"health_container\">\n            <img src=\"health.png\">\n            <span id=\"health_current\">100</span> <!-- Health value -->\n        </div>\n\n        <!-- Weapon Ammo container (black background) -->\n        <div id=\"weapon_ammo_container\">\n            <span id=\"weapon_ammo_clip\">30</span> <!-- Ammo Clip value -->\n            <span id=\"weapon_ammo_bag\">/ 1000</span> <!-- Ammo Bag value -->\n        </div>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom 'index' Metamethod in Lua\nDESCRIPTION: Explains how to add a custom `index` method (note the name is `index`, not `__index`) to an inherited class. This method intercepts attempts to get (read) a key from an instance (e.g., `local value = my_entity.something`). It allows for custom logic, such as logging the access or returning a computed/default value.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/scripting/inheriting-classes.md#_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nfunction MyNewClass:index(key)\n\tConsole.Log(\"Getting %s value: %s\", tostring(self), key)\n    -- ... do something\n    return some_value\nend\n```\n\n----------------------------------------\n\nTITLE: Calling Blueprint Custom Event from Lua\nDESCRIPTION: This Lua snippet demonstrates spawning a Blueprint asset (`my-asset-pack::BP_AwesomeBlueprint`) and triggering a custom event named 'MyBlueprintCustomEvent' defined within that Blueprint. It passes boolean, integer, and string parameters to the event using the `CallBlueprintEvent` method on the Blueprint instance. This communication happens exclusively on the client side.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/tutorials-and-examples/blueprint-communication.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Spawns the Blueprint\nlocal blueprint = Blueprint(Vector(), Rotator(), \"my-asset-pack::BP_AwesomeBlueprint\")\n\nlocal param1 = true -- bool parameter\nlocal param2 = 123 -- integer parameter\nlocal param3 = \"hello there!\" -- string parameter\n\n-- Calls the event, passing the parameters\nblueprint:CallBlueprintEvent(\"MyBlueprintCustomEvent\", param1, param2, param3)\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Prop in Lua\nDESCRIPTION: This Lua code snippet demonstrates how to create a new Prop instance by calling its constructor with a position (Vector), rotation (Rotator), and the asset path for the mesh ('nanos-world::SM_Crate_07'). The resulting prop object is stored in the 'my_prop' variable. This requires the Vector and Rotator classes/functions to be available.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/classes/prop.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal my_prop = Prop(\n  Vector(-900, 185, 215),\n  Rotator(0, 90, 90),\n  \"nanos-world::SM_Crate_07\"\n)\n```\n\n----------------------------------------\n\nTITLE: Overriding the Constructor for an Inherited Class in Lua\nDESCRIPTION: Demonstrates defining a custom `Constructor` method for the `MyNewClass`. It shows modifying input parameters (`location`), the mandatory call to the superclass constructor (`self.Super:Constructor`) to finalize spawning, and performing actions after the superclass constructor is called (like setting material color). Spawning uses the new custom constructor signature.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/scripting/inheriting-classes.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n-- Defines my constructor with any parameters you desire\nfunction MyNewClass:Constructor(location, rotation)\n    -- Do any kind of logic here\n    location = location + Vector(0, 0, 100)\n\n    -- Calls Super Constructor to finalize the construction\n    -- This is the original constructor (in this case from Prop)\n    -- This is mandatory, if you don't call it, it will throw an error\n    -- You will only be able to access original and your own class\n    -- methods after calling it, when the class is completely spawned\n    self.Super:Constructor(location, rotation, \"nanos-world::SM_Cube\")\n\n    -- Now it's allowed to class methods\n\tself:SetMaterialColorParameter(\"Tint\", Color.RED)\nend\n\n-- Spawn it using your custom constructor\nlocal my_new_class_instance = MyNewClass(Vector(123, 456, 100), Rotator())\n```\n\n----------------------------------------\n\nTITLE: Spawning and Interacting with Entities in nanos world Lua\nDESCRIPTION: Demonstrates how to instantiate an entity using its constructor and interact with it using OOP method syntax in Lua within the nanos world scripting API. Requires access to the nanos world Lua runtime and appropriate entity classes. Expects no input; outputs an entity reference and shows calling a method on it with the colon syntax. Constraints: methods are accessed with ':', and entity classes must be available in the environment.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/scripting/classes-guide.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Spawning an entity with a Constructor\\nlocal my_entity = Entity()\\n\\n-- Interacting with the entity with it's methods\\nmy_entity:MyFunction()\n```\n\n----------------------------------------\n\nTITLE: Declaring Client-Side Spawn Menu Item Addition Function (Lua)\nDESCRIPTION: Shows the function signature for `SpawnMenu.AddItem` on the client side. This function is used to manually define the visual representation of an item in the Spawn Menu, including its tab ID, unique item ID, display name, image path, and optional category ID. It requires corresponding server-side logic using the same `tab_id` and `id` for the item to be spawnable.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/explore/sandbox-game-mode/spawn-menu.mdx#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n```lua\n-- Adds a new item to the Spawn Menu\n---@param tab_id string         The tab to display this item\n---@param id string             Unique ID used to identify this item\n---@param name string           Display name\n---@param image string          Image path\n---@param category_id? string   The category of this item\nfunction SpawnMenu.AddItem(tab_id, id, name, image, category_id?)\n```\n```\n\n----------------------------------------\n\nTITLE: Setting and Accessing Custom Values on Entities (nanos.world Entity Values, Lua)\nDESCRIPTION: This code sets a custom value ('my_value') on an entity using SetValue and retrieves it again with GetValue. It requires a valid entity instance (e.g., my_prop) supporting the Value API. The key parameters are the string key and value (here, an integer 100). The value is accessible to any package on the same side (server/client), but not automatically synchronized unless specified.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/essential-concepts.mdx#_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\n-- Sets a 'my_value' value to a Prop\\nmy_prop:SetValue(\"my_value\", 100)\\n\\n-- Later on, get the value again\\nlocal my_value = my_prop:GetValue(\"my_value\")\n```\n\n----------------------------------------\n\nTITLE: Playing Imported Mixamo Animation in nanos world (Lua)\nDESCRIPTION: This Lua code demonstrates how to use an imported and packaged Mixamo animation within nanos world. It first creates a new Character instance using `Character()` and then calls the `:PlayAnimation()` method on that character object. The argument passed to `PlayAnimation` is the asset path string, combining the Asset Pack name (`awesome-mixamo-animations`) and the animation asset name (`HipHopDancing4UE4`) separated by `::`. This assumes the corresponding Asset Pack has been correctly created, exported, and loaded by the game.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/assets-modding/creating-assets/animations/characters/mixamo-animations.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n```lua showLineNumbers\nlocal my_character = Character()\nmy_character:PlayAnimation(\"awesome-mixamo-animations::HipHopDancing4UE4\")\n```\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring a Melee Object in Lua\nDESCRIPTION: This Lua snippet demonstrates how to create a Melee object (a crowbar in this case) at a specific location and rotation, using a predefined mesh and collision type. It then configures the melee weapon by setting its scale, assigning a character usage animation, defining damage settings, setting a cooldown period, and specifying its base damage.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/classes/melee.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n```lua showLineNumbers\nlocal crowbar = Melee(\n  Vector(-900, 185, 215),\n  Rotator(0, 90, 90),\n  \"nanos-world::SM_Crowbar_01\",\n  CollisionType.Normal,\n  true,\n  HandlingMode.SingleHandedMelee,\n  \"\"\n)\n\ncrowbar:SetScale(Vector(1.5, 1.5, 1.5))\ncrowbar:AddAnimationCharacterUse(\"nanos-world::AM_Mannequin_Melee_Slash_Attack\")\ncrowbar:SetDamageSettings(0.3, 0.5)\ncrowbar:SetCooldown(1.0)\ncrowbar:SetBaseDamage(40)\n```\n```\n\n----------------------------------------\n\nTITLE: Instantiating Light Objects with Parameters - nanos world (Lua)\nDESCRIPTION: This Lua code demonstrates how to instantiate a Light object in nanos world, specifying position, rotation, color, type, intensity, attenuation, cone angles, draw distance, light falloff, shadow casting, and enablement. It serves as a high-level example for spawning dynamic lighting with detailed control over each property. Dependencies include the nanos world scripting environment and relevant Light, Vector, Rotator, Color, and LightType definitions; expected input parameters are positional/rotational vectors, color values, enumerated light type, numerical properties, and booleans to enable features. The output is a newly created Light object in the game world, with performance caveats for large numbers of dynamic lights.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/classes/light.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal my_light = Light(\n    Vector(-152, 245, 115),\n    Rotator(0, 90, 90), -- Relevant only for Rect and Spot light types\n    Color(1, 0, 0), -- Red Tint\n    LightType.Point, -- Point Light type\n    100, -- Intensity\n    250, -- Attenuation Radius\n    44, -- Cone Angle (Relevant only for Spot light type)\n    0, -- Inner Cone Angle Percent (Relevant only for Spot light type)\n    5000, -- Max Draw Distance (Good for performance - 0 for infinite)\n    true, -- Whether to use physically based inverse squared distance falloff, where Attenuation Radius is only clamping the light's contribution. (Spot and Point types only)\n    true, -- Cast Shadows?\n    true -- Enabled?\n)\n```\n\n----------------------------------------\n\nTITLE: Connecting to Google Cloud VM via SSH (Bash)\nDESCRIPTION: Connects to the Google Cloud virtual machine using the SSH protocol and its external IP address. This command requires a local SSH client and the corresponding private key for the public key added during VM creation. Replace `[YOUR_VM_EXTERNAL_IP]` with the actual external IP address of the instance.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/tutorials-and-examples/hosting-server-4free-gcp.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nssh [YOUR_VM_EXTERNAL_IP]\n```\n\n----------------------------------------\n\nTITLE: Sending Custom Event to Other Packages - nanos world (Lua)\nDESCRIPTION: Demonstrates how to send a custom event to communicate generic data from one package to others using nanos world Events. Requires the nanos world scripting environment. Parameters sent are arbitrary Lua values. Returns nothing; used for inter-package signaling on the same side (server or client).\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/scripting/communicating-between-packages.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal my_parameter1 = 123\\nlocal my_parameter2 = \\\"hello there\\\"\\nlocal my_parameter3 = { important_stuff = \\\"omg!\\\" }\\n\\nEvents.Call(\\\"MyAwesomeEvent\\\", my_parameter1, my_parameter2, my_parameter3)\n```\n\n----------------------------------------\n\nTITLE: Making Synchronous HTTP Requests with nanos world HTTP (Lua)\nDESCRIPTION: This Lua snippet illustrates how to perform a synchronous HTTP GET request using HTTP.Request to an endpoint, specifying various parameters such as server address, path, HTTP method, body, content type, debug flag, and headers. The response contains both status and data properties, which are then logged to the console. This example is dependent on nanos world server-side API and assumes the presence of HTTPMethod constants. Inputs include all the request parameters, and outputs include a structured table with status and request data.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/static-classes/http.mdx#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- Makes a synchronous HTTP Request\\nlocal ret = HTTP.Request(\"127.0.0.1:7777\", \"/\", HTTPMethod.GET, \"\", \"application/json\", false, {})\\n\\nConsole.Log(ret.Status) -- 200\\nConsole.Log(ret.Data) -- \"{\\\"players_count\\\":0,\\\"server_name\\\":\\\"nanos world server\\\"}\"\n```\n\n----------------------------------------\n\nTITLE: Example: Calling a Static Function on an Entity Subclass\nDESCRIPTION: This example, provided within a tip section, demonstrates how to call a static function (`GetAll`) on a specific class (`Character`) that likely derives from the base `Entity` class. It illustrates accessing static members using dot notation.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/classes/base-classes/entity.mdx#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCharacter.GetAll()\n```\n\n----------------------------------------\n\nTITLE: Overriding the Constructor in an Inherited Lua Class\nDESCRIPTION: Shows how to define a custom constructor for an inherited class ('MyNewClass') by implementing the `Constructor` method. It demonstrates modifying input parameters and the mandatory call to the superclass constructor (`self.Super:Constructor`) to finalize object creation. Accessing class methods is only possible after the super constructor call.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/scripting/inheriting-classes.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n-- Defines my constructor with any parameters you desire\nfunction MyNewClass:Constructor(location, rotation)\n    -- Do any kind of logic here\n    location = location + Vector(0, 0, 100)\n\n    -- Calls Super Constructor to finalize the construction\n    -- This is the original constructor (in this case from Prop)\n    -- This is mandatory, if you don't call it, it will throw an error\n    -- You will only be able to access original and your own class\n    -- methods after calling it, when the class is completely spawned\n    self.Super:Constructor(location, rotation, \"nanos-world::SM_Cube\")\n\n    -- Now it's allowed to class methods\n\tself:SetMaterialColorParameter(\"Tint\", Color.RED)\nend\n\n-- Spawn it using your custom constructor\nlocal my_new_class_instance = MyNewClass(Vector(123, 456, 100), Rotator())\n```\n\n----------------------------------------\n\nTITLE: Subscribing to an Entity's EnterVehicle Event in Lua\nDESCRIPTION: Demonstrates how to attach an event listener to a specific entity instance. A 'Character' entity is created, and then a callback is subscribed to its 'EnterVehicle' event using 'my_character:Subscribe'. The callback will only trigger when this specific character enters a vehicle.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/scripting/events-guide.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n```lua showLineNumbers\n-- Spawns a Character\nlocal my_character = Character()\n\nmy_character:Subscribe(\"EnterVehicle\", function(self, vehicle)\n    -- my_character entered vehicle\nend)\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Crouching-Proning Transition Animations in nanos world (Lua)\nDESCRIPTION: Sets the transition animations between crouching and proning states through the `Character.SetAnimationsTransitionCrouchingProning` Lua method. Requires paths to animation sequences for crouching to proning (`anim_crouching_to_proning`) and proning to crouching (`anim_proning_to_crouching`).\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/assets-modding/creating-assets/animations/characters/character-locomotion-animations.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nCharacter.SetAnimationsTransitionCrouchingProning(anim_crouching_to_proning, anim_proning_to_crouching)\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Inheritance in Lua\nDESCRIPTION: Illustrates how to achieve multiple levels of inheritance by creating 'MyNewSubClass' which inherits from the previously defined 'MyNewClass'. It also shows the instantiation of this subclass.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/scripting/inheriting-classes.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- Creates a new Class called \"MyNewSubClass\" inheriting from MyNewClass\nMyNewSubClass = MyNewClass.Inherit(\"MyNewSubClass\")\n\n-- Spawn it using the default constructor\nlocal instance = MyNewSubClass(Vector(), Rotator(), \"nanos-world::SM_Cube\")\n```\n\n----------------------------------------\n\nTITLE: Using 'newindex' to Automatically Call SetValue in Lua\nDESCRIPTION: Provides a practical example where the custom `newindex` method is implemented to automatically call the entity's built-in `SetValue` method whenever a property assignment occurs on an instance. This allows using standard Lua assignment syntax (`my_entity.amazing_value = 123`) to trigger the underlying key-value storage mechanism.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/scripting/inheriting-classes.md#_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nfunction MyNewClass:newindex(key, value)\n    self:SetValue(key, value)\nend\n\n-- Example usage\nlocal my_entity = MyNewClass()\nmy_entity.amazing_value = 123\n```\n\n----------------------------------------\n\nTITLE: Spawning and Configuring a Weapon via Weapon Class in NanosWorld (Lua)\nDESCRIPTION: This snippet shows how to instantiate and fully configure a Weapon object on the server using Lua in the NanosWorld environment. It covers setting up the weapon's initial position, rotation, model, ammo, damage, spread, recoil, visual and sound effects, animations, magazine mesh, and crosshair material. Requires the NanosWorld game server environment where the Weapon API, Vector, Rotator, Color, and HandlingMode classes/enums are available. Inputs are position Rotator and model asset string; outputs include a spawned and configured weapon entity in the game world.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/classes/weapon.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Spawning a Weapon with an AK47 model\\nlocal new_weapon = Weapon(\\n    Vector(-900, 185, 215),\\n    Rotator(0, 0, 0),\\n    \\\"nanos-world::SK_AK47\\\"\\n)\\n\\n-- Configures Weapon Base Settings\\nnew_weapon:SetAmmoSettings(30, 1000)\\nnew_weapon:SetDamage(30)\\nnew_weapon:SetSpread(30)\\nnew_weapon:SetRecoil(0.25)\\nnew_weapon:SetBulletSettings(1, 20000, 20000, Color(100, 58, 0))\\nnew_weapon:SetCadence(0.1)\\nnew_weapon:SetWallbangSettings(50, 0.75)\\n\\n-- Configures how the Character Grabs and Aims the Weapon\\nnew_weapon:SetHandlingMode(HandlingMode.DoubleHandedWeapon)\\nnew_weapon:SetSightTransform(Vector(0, 0, -1), Rotator(-1.5, 0, 0))\\nnew_weapon:SetLeftHandTransform(Vector(22, 0, 9), Rotator(0, 60, 90))\\nnew_weapon:SetRightHandOffset(Vector(-10, 0, 0))\\n\\n-- Configures Weapon Particles\\nnew_weapon:SetParticlesBulletTrail(\\\"nanos-world::P_Bullet_Trail\\\")\\nnew_weapon:SetParticlesBarrel(\\\"nanos-world::P_Weapon_BarrelSmoke\\\")\\nnew_weapon:SetParticlesShells(\\\"nanos-world::P_Weapon_Shells_762x39\\\")\\n\\n-- Configures Weapon Sounds\\nnew_weapon:SetSoundDry(\\\"nanos-world::A_Rifle_Dry\\\")\\nnew_weapon:SetSoundLoad(\\\"nanos-world::A_Rifle_Load\\\")\\nnew_weapon:SetSoundUnload(\\\"nanos-world::A_Rifle_Unload\\\")\\nnew_weapon:SetSoundZooming(\\\"nanos-world::A_AimZoom\\\")\\nnew_weapon:SetSoundAim(\\\"nanos-world::A_Rattle\\\")\\nnew_weapon:SetSoundFire(\\\"nanos-world::A_AK47_Shot\\\")\\n\\n-- Configures Weapon Animations\\nnew_weapon:SetAnimationFire(\\\"nanos-world::A_AK47_Fire\\\")\\nnew_weapon:SetAnimationCharacterFire(\\\"nanos-world::AM_Mannequin_Sight_Fire\\\")\\nnew_weapon:SetAnimationReload(\\\"nanos-world::AM_Mannequin_Reload_Rifle\\\")\\n\\n-- Configures the Mesh to drop when reloading\\nnew_weapon:SetMagazineMesh(\\\"nanos-world::SM_AK47_Mag_Empty\\\")\\n\\n-- Configures the Crosshair Material\\nnew_weapon:SetCrosshairMaterial(\\\"nanos-world::MI_Crosshair_Regular\\\")\n```\n\n----------------------------------------\n\nTITLE: Handling and Broadcasting Custom Remote Events on Server in Lua\nDESCRIPTION: This server-side Lua script defines `MyNewClass` and subscribes to the \"AnotherRemoteEvent\" using `SubscribeRemote`. Note that the server-side handler receives the originating `player` as the first argument. After spawning an instance `p` of `MyNewClass`, it uses `BroadcastRemoteEvent` to trigger \"MyCustomRemoteEvent\" on all client instances of `p`, passing custom arguments.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/scripting/inheriting-classes.md#_snippet_21\n\nLANGUAGE: lua\nCODE:\n```\n-- inherits the Class\nMyNewClass = Prop.Inherit(\"MyNewClass\")\n\n-- Note that server-side received remote events have the 'player as first parameter\nfunction MyNewClass:OnAnotherRemoteEvent(player, a, b)\n    Console.Log(\"OnAnotherRemoteEvent!\", tostring(self), tostring(player), a, b)\nend\n\n-- subscribes for a custom remote event\nMyNewClass.SubscribeRemote(\"AnotherRemoteEvent\", MyNewClass.OnAnotherRemoteEvent)\n\n-- spawns an entity and calls the custom remote event on that entity\nlocal p = MyNewClass(...)\np:BroadcastRemoteEvent(\"MyCustomRemoteEvent\", 123, \"abc\")\n```\n\n----------------------------------------\n\nTITLE: Broadcasting a Chat Message using a Static Class in Lua\nDESCRIPTION: This Lua snippet demonstrates the use of Static Classes in nanos world. It calls the 'BroadcastMessage' function directly from the 'Chat' static class to send a message (\"Hello world!\") to all players connected to the server. No instance of the 'Chat' class is needed.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/essential-concepts.mdx#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\n```lua title=\"my-package/Server/Index.lua\" showLineNumbers\nChat.BroadcastMessage(\"Hello world!\")\n```\n```\n\n----------------------------------------\n\nTITLE: Optimizing Canvas HUD with Event-Driven Repainting in Lua\nDESCRIPTION: This advanced Lua script optimizes the Canvas HUD by disabling automatic repainting (`auto_repaint_rate` set to -1). It retains the drawing logic within the `Update` event but relies on explicit `HUDCanvas:Repaint()` calls triggered by specific game events. Events like player spawn (`Client.Subscribe(\"SpawnLocalPlayer\")`), character possession (`player:Subscribe(\"Possess\")`), package loading (`Package.Subscribe(\"Load\")`), taking damage, death, picking up/dropping items, firing, reloading (`character:Subscribe(...)`), and viewport resizing (`Client.Subscribe(\"ViewportResized\")`) are subscribed to, ensuring the HUD only updates when relevant data changes. The `UpdateLocalCharacter` function centralizes event subscription for the controlled character.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/tutorials-and-examples/basic-hud-canvas.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n-- We set -1 to never auto repaint\nHUDCanvas = Canvas(true, Color.TRANSPARENT, -1, true)\n\n-- Subscribes for Update event, we can only draw inside this event (as usual)\nHUDCanvas:Subscribe(\"Update\", function(self, width, height)\n    -- Gets the Local Player\n    local local_player = Client.GetLocalPlayer()\n    if (not local_player) then return end\n\n    -- Gets the Local Character (possessed by the Local Player)\n    local local_character = local_player:GetControlledCharacter()\n    if (not local_character) then return end\n\n    -- Draws the Health\n    self:DrawText(tostring(local_character:GetHealth()), Vector2D(100, height - 100), FontType.PoiretOne, 25, Color.WHITE)\n\n    -- Gets the Local Weapon\n    local character_weapon = local_character:GetPicked()\n    if (character_weapon and character_weapon:GetType() == \"Weapon\") then\n        -- Draws the Ammo Clip\n        self:DrawText(tostring(character_weapon:GetAmmoClip()), Vector2D(width - 200, height - 100), FontType.PoiretOne, 25, Color.WHITE)\n\n        -- Draws the Ammo Bag\n        self:DrawText(\"/ \" .. tostring(character_weapon:GetAmmoBag()), Vector2D(width - 140, height - 87), FontType.PoiretOne, 15, Color.WHITE)\n    end\nend)\n\n\n-- Now we subscribe for when we want it to be updated:\n\n-- When LocalPlayer spawns, sets an event on it to trigger when we possesses a new character, to store the local controlled character locally. This event is only called once, see Package.Subscribe(\"Load\") to load it when reloading a package\nClient.Subscribe(\"SpawnLocalPlayer\", function(local_player)\n    local_player:Subscribe(\"Possess\", function(player, character)\n        UpdateLocalCharacter(character)\n    end)\nend)\n\n-- When package loads, verify if LocalPlayer already exists (eg. when reloading the package), then try to get and store it's controlled character\nPackage.Subscribe(\"Load\", function()\n    local local_player = Client.GetLocalPlayer()\n    if (local_player  ~= nil) then\n        UpdateLocalCharacter(local_player:GetControlledCharacter())\n    end\nend)\n\n-- Function to set all needed events on local character (to update the UI when it takes damage or dies)\nfunction UpdateLocalCharacter(character)\n    -- Verifies if character is not nil (eg. when GetControllerCharacter() doesn't return a character)\n    if (character == nil) then return end\n\n    -- Sets on character an event to update the health's UI after it takes damage\n    character:Subscribe(\"TakeDamage\", function(charac, damage, type, bone, from_direction, instigator, causer)\n        HUDCanvas:Repaint()\n    end)\n\n    -- Sets on character an event to update the health's UI after it dies\n    character:Subscribe(\"Death\", function(charac)\n        HUDCanvas:Repaint()\n    end)\n\n    -- Sets on character an event to update his grabbing weapon (to show ammo on UI)\n    character:Subscribe(\"PickUp\", function(charac, object)\n        if (object:GetType() == \"Weapon\") then\n            HUDCanvas:Repaint()\n        end\n    end)\n\n    -- Sets on character an event to remove the ammo ui when he drops it's weapon\n    character:Subscribe(\"Drop\", function(charac, object)\n        HUDCanvas:Repaint()\n    end)\n\n    -- Sets on character an event to update the UI when he fires\n    character:Subscribe(\"Fire\", function(charac, weapon)\n        HUDCanvas:Repaint()\n    end)\n\n    -- Sets on character an event to update the UI when he reloads the weapon\n    character:Subscribe(\"Reload\", function(charac, weapon, ammo_to_reload)\n        HUDCanvas:Repaint()\n    end)\n\n    -- Updates the UI immeditelly\n    HUDCanvas:Repaint()\nend\n\n-- Updates the UI positions when the Viewport (screen) is resized\nClient.Subscribe(\"ViewportResized\", function(NewSize)\n    HUDCanvas:Repaint()\nend)\n```\n\n----------------------------------------\n\nTITLE: Starting Nanos World CLI Interactively (Windows)\nDESCRIPTION: Shows the command to start the Nanos World server in interactive Command Line Interface (CLI) mode on a Windows system. The `--cli` argument triggers the interactive prompt instead of starting the game server normally. Requires the `NanosWorldServer.exe` executable in the current directory.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/server-manual/command-line-interface.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./NanosWorldServer.exe --cli\n```\n\n----------------------------------------\n\nTITLE: Spawning and Configuring VehicleWheeled Entities - Nanos World (Lua)\nDESCRIPTION: This Lua snippet demonstrates the complete setup of a VehicleWheeled entity in Nanos World. It covers spawning the vehicle, configuring engine and aerodynamic parameters, setting up the steering wheel and headlights, detailed wheel configuration for multiple axles, specifying doors and seats, and recreating physics for optimization. Required dependencies include the Nanos World game framework with VehicleWheeled class, and supporting asset references. Inputs include vectors, rotators, and config values; output is a fully interactive, driveable vehicle entity. The example assumes availability of referenced assets and correct environment setup.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/classes/vehicle-wheeled.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Spawns a Pickup Vehicle\\nlocal vehicle = VehicleWheeled(location or Vector(), rotation or Rotator(), \\\"nanos-world::SK_Pickup\\\", CollisionType.Normal, true, false, true, \\\"nanos-world::A_Vehicle_Engine_10\\\")\\n\\n-- Configure it's Engine power and Aerodynamics\\nvehicle:SetEngineSetup(700, 5000)\\nvehicle:SetAerodynamicsSetup(2500)\\n\\n-- Configure it's Steering Wheel and Headlights location\\nvehicle:SetSteeringWheelSetup(Vector(0, 27, 120), 24)\\nvehicle:SetHeadlightsSetup(Vector(270, 0, 70))\\n\\n-- Configures each Wheel\\nvehicle:SetWheel(0, \\\"Wheel_Front_Left\\\",  27, 18, 45, Vector(), true,  true, false, false, false, 1500, 3000, 1000, 1, 3, 20, 20, 250, 50, 10, 10, 0, 0.5, 0.5)\\nvehicle:SetWheel(1, \\\"Wheel_Front_Right\\\", 27, 18, 45, Vector(), true,  true, false, false, false, 1500, 3000, 1000, 1, 3, 20, 20, 250, 50, 10, 10, 0, 0.5, 0.5)\\nvehicle:SetWheel(2, \\\"Wheel_Rear_Left\\\",   27, 18,  0, Vector(), false, true,  true, false, false, 1500, 3000, 1000, 1, 4, 20, 20, 250, 50, 10, 10, 0, 0.5, 0.5)\\nvehicle:SetWheel(3, \\\"Wheel_Rear_Right\\\",  27, 18,  0, Vector(), false, true,  true, false, false, 1500, 3000, 1000, 1, 4, 20, 20, 250, 50, 10, 10, 0, 0.5, 0.5)\\n\\n-- Adds 6 Doors/Seats\\nvehicle:SetDoor(0, Vector(  50, -75, 105), Vector(   8, -32.5,  95), Rotator(0,  0,  10), 70, -150)\\nvehicle:SetDoor(1, Vector(  50,  75, 105), Vector(  25,    50,  90), Rotator(0,  0,   0), 70,  150)\\nvehicle:SetDoor(2, Vector( -90, -75, 130), Vector( -90,  -115, 155), Rotator(0,  90, 20), 60, -150)\\nvehicle:SetDoor(3, Vector( -90,  75, 130), Vector( -90,   115, 155), Rotator(0, -90, 20), 60,  150)\\nvehicle:SetDoor(4, Vector(-195, -75, 130), Vector(-195,  -115, 155), Rotator(0,  90, 20), 60, -150)\\nvehicle:SetDoor(5, Vector(-195,  75, 130), Vector(-195,   115, 155), Rotator(0, -90, 20), 60,  150)\\n\\n-- Make it ready (so clients only create Physics once and not for each function call above)\\nvehicle:RecreatePhysics()\n```\n\n----------------------------------------\n\nTITLE: Using 'index' to Handle Calls to Non-Existent Methods in Lua\nDESCRIPTION: Demonstrates using the custom `index` method to intercept calls to potentially non-existent methods or properties. The example shows returning a new function that captures the original parameters passed to the non-existent method, or redirecting the access to another existing member function like `MyClass.SetLocation`.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/scripting/inheriting-classes.md#_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\nfunction MyNewClass:index(key)\n\tConsole.Log(\"%s key not found: %s\", tostring(self), key)\n\n    -- inside the redirected method you will have all the parameters passed originally\n    return function(self, param1, param2...)\n        -- ... do something\n        return \"triggered!\"\n    end\n\n    -- or you can even redirect to other member functions\n    return MyClass.SetLocation\nend\n\nlocal my_entity = MyNewClass()\nmy_entity:NonExistentMethod(123, \"456\")\n```\n\n----------------------------------------\n\nTITLE: Registering and Binding Custom Input Events with nanos world Input StaticClass in Lua\nDESCRIPTION: Demonstrates how to register a custom input action (here named 'SpawnMenu') with a default key binding and subscribe to its Pressed and Released events using the Input static class in nanos world. Dependencies include the nanos world Lua scripting environment and access to the Input global. The script expects the registration of an action with a string name and key, after which function callbacks can be executed on key actions. This approach is fundamental for implementing custom features triggered by specific key inputs in client scripts.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/static-classes/input.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Registers the binding_name 'SpawnMenu' with default key 'Q'\n-- This will add 'SpawnMenu' to user KeyBinding Settings automatically\nInput.Register(\"SpawnMenu\", \"Q\")\n\n-- Subscribes for Pressing the key\nInput.Bind(\"SpawnMenu\", InputEvent.Pressed, function()\n\t-- Opens the Spawn Menu\nend)\n\n-- Subscribes for Releasing the key\nInput.Bind(\"SpawnMenu\", InputEvent.Released, function()\n\t-- Closes the Spawn Menu\nend)\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from a Specific Entity Event Callback - nanos world - Lua\nDESCRIPTION: Shows how to subscribe and unsubscribe specific callback functions for the 'EnterVehicle' event on a Character entity in nanos world. This technique provides granular control, removing only the given callback while leaving others intact. The handler functions receive the character and vehicle parameters as context.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/scripting/events-guide.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\n-- Declares the Callback beforehand\nfunction OnCharacterEnteredVehicle(character, vehicle)\n    -- Entered vehicle!\nend\n\n-- Subscribes the event, passing the Callback\nmy_character:Subscribe(\"EnterVehicle\", OnCharacterEnteredVehicle)\n\n-- Subscribes for the same event, twice\nmy_character:Subscribe(\"EnterVehicle\", function(character, vehicle)\n    -- Entered vehicle again!\nend)\n\n-- Unsubscribes only from the first Callback\nmy_character:Unsubscribe(\"EnterVehicle\", OnCharacterEnteredVehicle)\n```\n\n----------------------------------------\n\nTITLE: Instantiating TextRender in nanos world with Lua\nDESCRIPTION: This snippet demonstrates how to instantiate a TextRender object at a specific 3D position and rotation with custom text, scale, color, font, and alignment. Requires nanos world Lua API and access to Vector, Rotator, Color, FontType, and TextRenderAlignCamera types. Key parameters include the position vector, rotation, the text to display, scale vector, color, font type, and alignment option; the output is a reference to a 3D text entity. Limitations include dependency on engine types and that advanced features (like material replacement) must be handled separately.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/classes/text-render.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal my_text_render = TextRender(\n    Vector(-100, 200, 300),\n    Rotator(),\n    \"My Awesome Text\",\n    Vector(1, 1, 1), -- Scale\n    Color(1, 0, 0), -- Red Color\n    FontType.OpenSans,\n    TextRenderAlignCamera.FaceCamera\n)\n```\n\n----------------------------------------\n\nTITLE: Attaching a Scope to a Weapon Procedurally - nanos world (Lua)\nDESCRIPTION: Demonstrates how to programmatically spawn a weapon and attach a scope using nanos world APIs. Dependencies include the nanos world scripting runtime and assets (such as the weapon and scope mesh). The function calls spawn a weapon, attach a scope mesh with positional offsets for alignment, and adjust sight location for proper first-person aiming. Inputs are the optional weapon spawn position (location, rotation); outputs are the modified Weapon instance prepared for first-person use with attached scope. Only works inside a nanos world server environment with the referenced assets present.\nSOURCE: https://github.com/nanos-world/docs/blob/master/blog/2021-10-06-weapons-improvements.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Spawns a AWP Weapon\\nlocal weapon = Weapon(location or Vector(), rotation or Rotator(), \\\"nanos-world::SK_AWP\\\")\\n\\n-- Attaches a Scope mesh, with configured offset to be perfectly aligned\\nweapon:AddStaticMeshAttached(\\\"sight\\\", \\\"nanos-world::SM_Scope_25x56\\\", \\\"\\\", Vector(20, 0, 11))\\n\\n-- Adjusts Sight Location to put the Sniper at exact location where the scope center will be when ADS\\nweapon:SetSightTransform(Vector(-15, 0, -4.6), Rotator(0, 0, 0))\n```\n\n----------------------------------------\n\nTITLE: Passing Entities and Data Types via Events in Lua\nDESCRIPTION: This Lua snippet demonstrates how to pass various data types, including game entities like `Character` and structures like `Vector`, as arguments when calling events using `Events.Call` (local) or `Events.CallRemote` (remote). It shows how to subscribe to an event and access these arguments. Requires `Events`, `Console`, `Character`, and `Vector` classes.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/static-classes/events.mdx#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n```lua showLineNumbers\n-- register for an Event (remote or local)\nEvents.Subscribe(\"MyAnotherEvent\", function(my_text, my_vector, my_character, my_number)\n    Console.Log(\"Event received! \" .. my_text .. \" \" .. my_vector.X .. \" \" .. my_character:GetViewMode() .. \" \" .. my_number)\n    -- outputs \"Event received! hello nanos world! 123 1 456\"\nend)\n\n-- passing Characters through events\nlocal my_temp_character = Character()\n\n-- calls a local Event in all Local Packages\nEvents.Call(\"MyEvent\", \"hello nanos world!\", Vector(123, 123, 123), my_temp_character, 456)\n\n-- calls a remote Event in all Server Packages\nEvents.CallRemote(\"MyEvent\", \"hello nanos world!\", Vector(123, 123, 123), my_temp_character, 456)\n```\n```\n\n----------------------------------------\n\nTITLE: Making a Mesh Metallic using nanos world in Lua\nDESCRIPTION: This snippet demonstrates how to spawn a static mesh cube, give it a red color, and alter its metallic and glossiness properties. It uses 'SetMaterialScalarParameter' to adjust 'Metallic' and 'Roughness' parameters, simulating physically based rendering material changes. Dependencies include the nanos world runtime and compatible material parameters; the resulting cube appears metallic and glossy with a red tint.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/tutorials-and-examples/painting-meshes.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n-- spawns a static mesh cube\\nlocal my_cube = StaticMesh(Vector(300, 0, 100), Rotator(0, 45, 0), \\\"nanos-world::SM_Cube\\\")\\n-- replaces it's materials with the nanos default one\\nmy_cube:SetMaterial(\\\"nanos-world::M_Default_Masked_Lit\\\")\\n\\n-- paints it red\\nmy_cube:SetMaterialColorParameter(\\\"Tint\\\", Color(1, 0, 0))\\n\\n-- makes it metallic\\nmy_cube:SetMaterialScalarParameter(\\\"Metallic\\\", 0.85)\\n\\n-- makes it glossy\\nmy_cube:SetMaterialScalarParameter(\\\"Roughness\\\", 0)\n```\n\n----------------------------------------\n\nTITLE: Exporting a Table of Functions ('Library') for Global Access - nanos world (Lua)\nDESCRIPTION: Exports an entire table containing functions (acting as a library) for use by other packages on the same side using Package.Export. Requires nanos world API. Allows importing and calling arbitrary methods from the table in another package. Limitations: Only accessible within server or client side (not across network).\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/scripting/communicating-between-packages.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\n-- Defines a table with functions which you want to export\\nMyAwesomeLibrary = {\\n\\tCoolMethod = function(a, b)\\n\\t\\treturn a + b\\n\\tend,\\n\\tAnotherAwesomeImportantMethod = function(c, d)\\n\\t\\treturn c * d\\n\\tend\\n}\\n\\n-- Exports the table to be accessed by other Packages\\nPackage.Export(\\\"MyAwesomeLibrary\\\", MyAwesomeLibrary)\n```\n\n----------------------------------------\n\nTITLE: Adding New Methods to Inherited Lua Classes\nDESCRIPTION: Explains how to add custom functionality to an inherited class ('MyNewClass') by defining a new method ('Explode'). Within the method, `self` refers to the instance of the class.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/scripting/inheriting-classes.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nfunction MyNewClass:Explode()\n    -- Spawns a particle\n    Particle(self:GetLocation(), Rotator(), \"nanos-world::P_Explosion\")\n\n    -- Destroys myself\n    self:Destroy()\nend\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Server Events with nanos world in Lua\nDESCRIPTION: This Lua code demonstrates how to utilize the Server static class in nanos world to register callback handlers for server lifecycle events such as 'Start', 'Stop', and 'Tick'. It requires the nanos world API and assumes the presence of the Server and Console global objects. Event subscriptions are registered via Server.Subscribe with an event name and an anonymous function. The 'Tick' event callback receives a delta_time parameter, indicating the elapsed time between ticks in seconds. All handlers log server status or tick timing to the console, and outputs are generated on the server side only. Limitations include dependency on the correct nanos world server API context.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/static-classes/server.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- prints \"Server started\" when the server is starting\\nServer.Subscribe(\"Start\", function()\\n    Console.Log(\"Server started\")\\nend)\\n\\n-- prints \"Server stopped\" when the server stops / shutdown\\nServer.Subscribe(\"Stop\", function()\\n    Console.Log(\"Server stopped\")\\nend)\\n\\n-- prints the delta time about every 33 ms\\nServer.Subscribe(\"Tick\", function(delta_time)\\n    Console.Log(\"Tick: \" .. delta_time)\\nend)\n```\n\n----------------------------------------\n\nTITLE: Spawning and Synchronizing a Character Entity (nanos.world, Lua)\nDESCRIPTION: This snippet demonstrates spawning a Character entity server-side and setting its location, automatically synchronizing the result to all connected clients. It depends on the nanos.world scripting environment and requires valid usage of the Character and Vector/Rotator APIs. The key parameters include the initial and target locations, with all updates reflected across server and clients via built-in replication.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/essential-concepts.mdx#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\n-- Spawns a Character (on server side)\\nlocal my_character = Character(Vector(0, 0, 0), Rotator(), \"nanos-world::SK_Male\")\\n\\n-- Sets it's location\\nmy_character:SetLocation(Vector(100, 100, 100))\n```\n\n----------------------------------------\n\nTITLE: Calling a Custom Event on the Server in Lua\nDESCRIPTION: Demonstrates how a server-side script in one package (`package-one`) can trigger a custom event ('MyAwesomeEvent') with multiple parameters using `Events.Call`. This event can be subscribed to by other packages running on the same server side.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/scripting/communicating-between-packages.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n```lua title=\"package-one/Server/Index.lua\" showLineNumbers\nlocal my_parameter1 = 123\nlocal my_parameter2 = \"hello there\"\nlocal my_parameter3 = { important_stuff = \"omg!\" }\n\nEvents.Call(\"MyAwesomeEvent\", my_parameter1, my_parameter2, my_parameter3)\n```\n```\n\n----------------------------------------\n\nTITLE: Registering and Binding Custom Input Actions in Nanos World (Lua)\nDESCRIPTION: This Lua code snippet demonstrates how to register a custom key binding, assign it a default key, and subscribe to both press and release events using the Nanos World 'Input' static class. The 'SpawnMenu' action is registered with the 'Q' key and bound to respective event handlers for opening and closing the Spawn Menu. Dependencies include Nanos World Client API access with the Input static class. Inputs are string binding names and InputEvent states; outputs are triggered callback executions. All comments and formatting are preserved.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/static-classes/input.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Registers the binding_name 'SpawnMenu' with default key 'Q'\n-- This will add 'SpawnMenu' to user KeyBinding Settings automatically\nInput.Register(\"SpawnMenu\", \"Q\")\n\n-- Subscribes for Pressing the key\nInput.Bind(\"SpawnMenu\", InputEvent.Pressed, function()\n\t-- Opens the Spawn Menu\nend)\n\n-- Subscribes for Releasing the key\nInput.Bind(\"SpawnMenu\", InputEvent.Released, function()\n\t-- Closes the Spawn Menu\nend)\n```\n\n----------------------------------------\n\nTITLE: Automated Bleeding-Edge Server Installation on Linux (Shell)\nDESCRIPTION: Provides a single command-line instruction for Linux to automatically download/update the bleeding-edge version of the nanos world server using `steamcmd`. It includes the `-beta bleeding-edge` flag, properly quoted, within the `app_update` command.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/server-manual/server-installation.mdx#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nsteamcmd +force_install_dir ~/nanos-world-server +login anonymous +app_update \"1936830 -beta bleeding-edge\" validate +quit\n```\n\n----------------------------------------\n\nTITLE: Handling Native Events in Inherited Lua Classes\nDESCRIPTION: Demonstrates how native events (like 'Spawn') are handled with inherited classes. Subscribing to an event on a parent class (`Prop`) will trigger for instances of all its children (`MyNewClass`, `MyOtherClass`). Subscribing on a child class (`MyNewClass`) triggers only for instances of that specific class and its descendants, receiving the custom entity instance as the parameter.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/scripting/inheriting-classes.md#_snippet_15\n\nLANGUAGE: lua\nCODE:\n```\nProp.Subscribe(\"Spawn\", function(self)\n    Console.Log(\"Spawned Prop: %s\", tostring(self))\nend)\n\nMyNewClass.Subscribe(\"Spawn\", function(self)\n    Console.Log(\"Spawned MyNewClass: %s\", tostring(self))\nend)\n\nlocal my_entity = MyNewClass()\nlocal my_prop = Prop()\nlocal my_other_entity_inherited_from_prop = MyOtherClass()\n\n-- Will output:\n--  Spawned Prop: MyNewClass\n--  Spawned MyNewClass: MyNewClass\n--  Spawned Prop: Prop\n--  Spawned Prop: MyOtherClass\n```\n\n----------------------------------------\n\nTITLE: Spawning Props using Lua in Server Script\nDESCRIPTION: This Lua script, intended for `Packages/my-awesome-package/Server/Index.lua`, demonstrates basic server-side scripting. It first logs a message to the server console using `Console.Log`. Then, it spawns three different Prop entities (a table, a chair, and a tire) at specified Vector coordinates and Rotator orientations using the `Prop` constructor and built-in asset paths.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/quick-start.mdx#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n-- Print a message to the server console\nConsole.Log(\"Loading some Props =D\")\n\n-- Spawn some props in the game world\nlocal prop_table = Prop(Vector(200, 0, 0), Rotator(0, 0, 0), \"nanos-world::SM_WoodenTable\")\nlocal prop_chair = Prop(Vector(400, 200, 0), Rotator(0, 0, 0), \"nanos-world::SM_WoodenChair\")\nlocal prop_tire = Prop(Vector(600, 0, 0), Rotator(0, 0, 0), \"nanos-world::SM_TireLarge\")\n```\n\n----------------------------------------\n\nTITLE: Exporting Table and Functions with Package.Export - nanos world Lua\nDESCRIPTION: Demonstrates how to export variables (such as tables) and functions from a Lua package to the global environment using the new Package.Export function. Dependencies include a running nanos world server with the updated Lua VM integration. The snippet expects definitions of a table (my_table) and a function (DoSomething) which are then exported. Once exported, other packages can directly access these globals.\nSOURCE: https://github.com/nanos-world/docs/blob/master/blog/2022-12-31-december.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal my_table = { 123, 456 }\\n\\nfunction DoSomething(var1)\\n\\treturn var1 + 123\\nend\\n\\nPackage.Export(\"MyTable\", my_table)\\nPackage.Export(\"DoSomething\", DoSomething)\n```\n\n----------------------------------------\n\nTITLE: Overriding an Existing Character Method in Lua\nDESCRIPTION: Shows how to override the built-in `SetLocation` method for the `Character` class. By redefining the function `Character:SetLocation`, subsequent calls to this method on any Character instance will execute the custom code provided within the function body.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/scripting/extending-classes.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nfunction Character:SetLocation(new_location)\n\t-- ... Do something\nend\n```\n\n----------------------------------------\n\nTITLE: Spawning WebUI Component in Lua\nDESCRIPTION: This Lua code snippet demonstrates how to initialize and spawn a WebUI component within the nanos world client. It creates a new WebUI instance named 'Main HUD' and points it to the local `index.html` file created earlier, effectively loading the HTML-based HUD into the game.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/tutorials-and-examples/basic-hud-html.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n-- Spawns a WebUI with the HTML file you just created\nmain_hud = WebUI(\"Main HUD\", \"file://UI/index.html\")\n```\n\n----------------------------------------\n\nTITLE: Replacing Mesh Material with Default Material using nanos world in Lua\nDESCRIPTION: This script demonstrates spawning a static mesh cube and replacing its material with the nanos world default masked material. It utilizes the StaticMesh constructor and SetMaterial method to control mesh appearance. The required dependency is the nanos world scripting environment, and the script expects correct asset references; it outputs a cube mesh with updated materials.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/tutorials-and-examples/painting-meshes.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- spawns a static mesh cube\\nlocal my_cube = StaticMesh(Vector(300, 0, 100), Rotator(0, 45, 0), \\\"nanos-world::SM_Cube\\\")\\n\\n-- replaces it's materials with the nanos default Masked one\\nmy_cube:SetMaterial(\\\"nanos-world::M_Default_Masked_Lit\\\")\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from All Entity EnterVehicle Events in Lua\nDESCRIPTION: Shows how to remove all event listeners previously registered for the 'EnterVehicle' event on a specific 'Character' instance ('my_character') within the current script's package. Calling 'my_character:Unsubscribe(\"EnterVehicle\")' removes all subscriptions made by this package to that event for that specific entity.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/scripting/events-guide.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\n```lua showLineNumbers\n-- This will unregister from all \"EnterVehicle\" events of this specific Character\n-- registered in this Package\nmy_character:Unsubscribe(\"EnterVehicle\")\n```\n```\n\n----------------------------------------\n\nTITLE: Overriding the `__tostring` Metamethod in Lua\nDESCRIPTION: Explains how to customize the string representation of an inherited class instance when used with functions like `tostring()` or `print()`. This is done by defining the `__tostring` method directly on the class.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/scripting/inheriting-classes.md#_snippet_14\n\nLANGUAGE: lua\nCODE:\n```\nfunction MyNewClass:__tostring()\n\treturn \"My Incredible Class!\"\nend\n```\n\n----------------------------------------\n\nTITLE: Composing Widget With Child Elements - Widget API Lua\nDESCRIPTION: This snippet shows how to compose UI hierarchies in Lua using the Widget class. A vertical box container is created and added to the viewport, then text and button widgets are instantiated and added as children. Functionality requires use of Widget and NativeWidget classes. It demonstrates using AddChild for hierarchy creation and AddToViewport for rendering. Intended for nanos world clients using Lua scripting.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/classes/widget.mdx#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal my_vertical_box = Widget(NativeWidget.VerticalBox)\nmy_vertical_box:AddToViewport()\n\nlocal my_text = Widget(NativeWidget.Text)\nmy_text:CallBlueprintEvent(\"SetText\", \"Hello World!\")\n\nlocal my_button = Widget(NativeWidget.Button)\n\nmy_vertical_box:AddChild(my_text)\nmy_vertical_box:AddChild(my_button)\n```\n\n----------------------------------------\n\nTITLE: Creating and Attaching Cable Constraints with Props - nanos world - Lua\nDESCRIPTION: This snippet demonstrates how to instantiate a Cable object, spawn two Prop actors at specific vectors, and attach each end of the Cable to the two props, forming a visual and physical constraint between them. This requires the nanos world framework and proper asset references for 'nanos-world::SM_Cube'. Parameters include Vector and Rotator for transforms and ensure realistic rope behavior between attached objects. The input is the positional/rotational data, and the output is the in-game cable behavior; ensure the Cable and Props exist in the server context before attachment.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/classes/cable.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal my_cable = Cable(Vector())\nlocal cube_01 = Prop(Vector(100, 100, 100), Rotator(), \"nanos-world::SM_Cube\")\nlocal cube_02 = Prop(Vector(200, 0, 100), Rotator(), \"nanos-world::SM_Cube\")\n\nmy_cable:AttachStartTo(cube_01)\nmy_cable:AttachEndTo(cube_02)\n```\n\n----------------------------------------\n\nTITLE: Making Asynchronous HTTP GET Request in Lua using nanos world HTTP\nDESCRIPTION: Demonstrates how to make an asynchronous HTTP GET request using the `HTTP.RequestAsync` static method. It sends a GET request to '127.0.0.1:7777/', specifies the content type, and provides a callback function to handle the response status and data. The example also shows how to parse the JSON response data using `JSON.parse`. This function requires the nanos world server environment and its `HTTP` and `JSON` static classes. The callback function is executed on the main thread.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/static-classes/http.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Makes an asynchronous HTTP Request\nHTTP.RequestAsync(\"127.0.0.1:7777\", \"/\", HTTPMethod.GET, \"\", \"application/json\", false, {}, function(status, data)\n    Console.Log(status) -- 200\n    Console.Log(data) -- \"{\\\"players_count\\\":0,\\\"server_name\\\":\\\"nanos world server\\\"}\"\n\n\t-- TIP: You can parse it if it's a json return as well\n    local json_ret = JSON.parse(data)\nend)\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Player Spawn Event - nanos world - Lua\nDESCRIPTION: Demonstrates how to listen for the 'Spawn' event on the Player class in nanos world, triggering a callback function whenever a Player entity is spawned (e.g., when a player joins the server). Requires the Lua scripting API provided by nanos world, with 'Player' and 'Console' classes available. The event handler receives the Player object as a parameter and logs the player's name.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/scripting/events-guide.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nPlayer.Subscribe(\"Spawn\", function(player)\n    Console.Log(player:GetName() .. \" has joined!\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Colored Chat Messages with Nanos World (Lua)\nDESCRIPTION: This Lua snippet demonstrates sending a colored chat message server-side using the Chat.BroadcastMessage static method. It utilizes in-line markup, specifically the <cyan> tag, to style a portion of the message. Requires the Nanos World game platform and that the Chat static class is accessible from the server script context. The first argument is the message string with optional style tags, and it broadcasts to all connected players. Styles cannot be combined within the same segment.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/static-classes/chat.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nChat.BroadcastMessage(\"Hello with <cyan>Cyan</> text message!\")\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Native Input Bindings with nanos world Input StaticClass in Lua\nDESCRIPTION: Shows how to subscribe to built-in (native) input actions such as 'MoveForward' and 'MoveBackward' using Input.Bind in nanos world. Each subscription listens for the Pressed event, with 'delta' indicating the input strength or press context. This method is critical for responding to player movement or default game actions and is only available within the nanos world Lua API. Input names correspond to established control mappings, enabling intuitive handling of gameplay or UI logic within client scripts.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/static-classes/input.mdx#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- Subscribes for native Bindings\nInput.Bind(\"MoveForward\", InputEvent.Pressed, function(delta)\n\t-- Pressed MoveForward key (usually W)\nend)\n\n-- Subscribes for native Bindings\nInput.Bind(\"MoveBackward\", InputEvent.Pressed, function(delta)\n\t-- Pressed MoveBackward key (usually S)\nend)\n```\n\n----------------------------------------\n\nTITLE: Stopping Main Menu Music from CEF Loading Screen - nanos world JavaScript API\nDESCRIPTION: This JavaScript snippet, intended to be run in the CEF-based loading screen, demonstrates how to trigger an event to stop the main menu music in nanos world. It calls Events.Call with the event name \"StopMenuMusic\". The environment requires access to the nanos world CEF context and the Events JavaScript API. This is typically called in response to UI logic; the method takes the event name as input and does not return a value.\nSOURCE: https://github.com/nanos-world/docs/blob/master/blog/2022-10-05-september.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nEvents.Call(\"StopMenuMusic\");\n```\n\n----------------------------------------\n\nTITLE: Managing HUD State and Events in Lua\nDESCRIPTION: This complete `Client/Index.lua` script manages the HUD's logic. It initializes the WebUI, subscribes to client and player events (`Client.Subscribe`, `player:Subscribe`, `Package.Subscribe`, `character:Subscribe`) to track the local character's state (spawning, possession, health changes, death, weapon pickups, drops, firing, reloading). Helper functions (`UpdateLocalCharacter`, `UpdateAmmo`, `UpdateHealth`) process game state changes and trigger custom events (`UpdateWeaponAmmo`, `UpdateHealth`) on the `main_hud` WebUI instance using `main_hud:CallEvent`, sending data to the JavaScript frontend to update the HUD display.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/tutorials-and-examples/basic-hud-html.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\n-- Spawns a WebUI with the HTML file you just created\nmain_hud = WebUI(\"Main HUD\", \"file://UI/index.html\")\n\n\n-- When LocalPlayer spawns, sets an event on it to trigger when we possesses a new character, to store the local controlled character locally. This event is only called once, see Package:Subscribe(\"Load\") to load it when reloading a package\nClient.Subscribe(\"SpawnLocalPlayer\", function(local_player)\n    local_player:Subscribe(\"Possess\", function(player, character)\n        UpdateLocalCharacter(character)\n    end)\nend)\n\n-- When package loads, verify if LocalPlayer already exists (eg. when reloading the package), then try to get and store it's controlled character\nPackage.Subscribe(\"Load\", function()\n    local local_player = Client.GetLocalPlayer()\n    if (local_player ~= nil) then\n        UpdateLocalCharacter(local_player:GetControlledCharacter())\n    end\nend)\n\n-- Function to set all needed events on local character (to update the UI when it takes damage or dies)\nfunction UpdateLocalCharacter(character)\n    -- Verifies if character is not nil (eg. when GetControllerCharacter() doesn't return a character)\n    if (character == nil) then return end\n\n    -- Updates the UI with the current character's health\n    UpdateHealth(character:GetHealth())\n\n    -- Sets on character an event to update the health's UI after it takes damage\n    character:Subscribe(\"TakeDamage\", function(charac, damage, type, bone, from_direction, instigator, causer)\n        UpdateHealth(math.max(charac:GetHealth() - damage, 0))\n    end)\n\n    -- Sets on character an event to update the health's UI after it dies\n    character:Subscribe(\"Death\", function(charac)\n        UpdateHealth(0)\n    end)\n\n    -- Try to get if the character is holding any weapon\n    local current_picked_item = character:GetPicked()\n\n    -- If so, update the UI\n    if (current_picked_item and current_picked_item:GetType() == \"Weapon\") then\n        UpdateAmmo(true, current_picked_item:GetAmmoClip(), current_picked_item:GetAmmoBag())\n    end\n\n    -- Sets on character an event to update his grabbing weapon (to show ammo on UI)\n    character:Subscribe(\"PickUp\", function(charac, object)\n        if (object:GetType() == \"Weapon\") then\n            UpdateAmmo(true, object:GetAmmoClip(), object:GetAmmoBag())\n        end\n    end)\n\n    -- Sets on character an event to remove the ammo ui when he drops it's weapon\n    character:Subscribe(\"Drop\", function(charac, object)\n        UpdateAmmo(false)\n    end)\n\n    -- Sets on character an event to update the UI when he fires\n    character:Subscribe(\"Fire\", function(charac, weapon)\n        UpdateAmmo(true, weapon:GetAmmoClip(), weapon:GetAmmoBag())\n    end)\n\n    -- Sets on character an event to update the UI when he reloads the weapon\n    character:Subscribe(\"Reload\", function(charac, weapon, ammo_to_reload)\n        UpdateAmmo(true, weapon:GetAmmoClip(), weapon:GetAmmoBag())\n    end)\nend\n\n-- Function to update the Ammo's UI\nfunction UpdateAmmo(enable_ui, ammo, ammo_bag)\n    main_hud:CallEvent(\"UpdateWeaponAmmo\", {enable_ui, ammo, ammo_bag})\nend\n\n-- Function to update the Health's UI\nfunction UpdateHealth(health)\n    main_hud:CallEvent(\"UpdateHealth\", {health})\nend\n```\n\n----------------------------------------\n\nTITLE: Spawning and Updating WebUI in Nanos World Lua Client\nDESCRIPTION: This Lua snippet initializes a WebUI for the main HUD by loading a local HTML file from the UI directory. It subscribes to player and character events (spawn, possess, take damage, die, pick up/drop/ fire/reload weapon) to keep UI elements in sync with the game state. Dependencies include the nanos world client Lua API and a prepared WebUI HTML bundle. It expects local players and characters to invoke updates automatically with proper health and ammo values. Inputs are various character events; outputs are real-time calls to the WebUI. Functions must only be called after the UI and characters are initialized; relies on correct pathing and asset presence.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/tutorials-and-examples/basic-hud-react.md#_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\n-- Spawns a WebUI with the HTML file you just created\nmain_hud = WebUI(\"Main HUD\", \"file://UI/index.html\", 1)\n\n-- When LocalPlayer spawns, sets an event on it to trigger when we possesses a new character, to store the local controlled character locally. This event is only called once, see Package:Subscribe(\"Load\") to load it when reloading a package\nClient.Subscribe(\"SpawnLocalPlayer\", function(local_player)\n    local_player:Subscribe(\"Possess\", function(player, character)\n        UpdateLocalCharacter(character)\n    end)\nend)\n\n-- When package loads, verify if LocalPlayer already exists (eg. when reloading the package), then try to get and store it's controlled character\nPackage.Subscribe(\"Load\", function()\n    local local_player = Client.GetLocalPlayer()\n    if (local_player ~= nil) then\n        UpdateLocalCharacter(local_player:GetControlledCharacter())\n    end\nend)\n\n-- Function to set all needed events on local character (to update the UI when it takes damage or dies)\nfunction UpdateLocalCharacter(character)\n    -- Verifies if character is not nil (eg. when GetControllerCharacter() doesn't return a character)\n    if (character == nil) then\n        return\n    end\n\n    -- Updates the UI with the current character's health\n    UpdateHealth(character:GetHealth())\n\n    -- Sets on character an event to update the health's UI after it takes damage\n    character:Subscribe(\"TakeDamage\", function(charac, damage, type, bone, from_direction, instigator, causer)\n        UpdateHealth(math.max(charac:GetHealth() - damage, 0))\n    end)\n\n    -- Sets on character an event to update the health's UI after it dies\n    character:Subscribe(\"Death\", function(charac)\n        UpdateHealth(0)\n    end)\n\n    -- Try to get if the character is holding any weapon\n    local current_picked_item = character:GetPicked()\n\n    -- If so, update the UI\n    if (current_picked_item and current_picked_item:GetClass():GetName() == \"Weapon\") then\n        UpdateAmmo(true, current_picked_item:GetAmmoClip(), current_picked_item:GetAmmoBag())\n    end\n\n    -- Sets on character an event to update his grabbing weapon (to show ammo on UI)\n    character:Subscribe(\"PickUp\", function(charac, object)\n        if (object.Super:GetClass():GetName() == \"Weapon\") then\n            UpdateAmmo(true, object:GetAmmoClip(), object:GetAmmoBag())\n        end\n    end)\n\n    -- Sets on character an event to remove the ammo ui when he drops it's weapon\n    character:Subscribe(\"Drop\", function(charac, object)\n        UpdateAmmo(false)\n    end)\n\n    -- Sets on character an event to update the UI when he fires\n    character:Subscribe(\"Fire\", function(charac, weapon)\n        UpdateAmmo(true, weapon:GetAmmoClip(), weapon:GetAmmoBag())\n    end)\n\n    -- Sets on character an event to update the UI when he reloads the weapon\n    character:Subscribe(\"Reload\", function(charac, weapon, ammo_to_reload)\n        UpdateAmmo(true, weapon:GetAmmoClip(), weapon:GetAmmoBag())\n    end)\nend\n\n-- Function to update the Ammo's UI\nfunction UpdateAmmo(enable_ui, ammo, ammo_bag)\n    main_hud:CallEvent(\"UpdateWeaponAmmo\",enable_ui, ammo, ammo_bag)\nend\n\n-- Function to update the Health's UI\nfunction UpdateHealth(health)\n    main_hud:CallEvent(\"UpdateHealth\",health)\nend\n```\n\n----------------------------------------\n\nTITLE: Creating and Attaching a Cable Between Two Props in Lua\nDESCRIPTION: This Lua code snippet demonstrates the creation of a `Cable` instance at the world origin. It then spawns two `Prop` instances (cubes) at specified locations. Finally, it attaches the start point of the cable to the first cube (`cube_01`) and the end point to the second cube (`cube_02`), effectively linking them with a physics-based cable. This example is intended for server-side execution (`Server/Index.lua`).\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/classes/cable.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n```lua title=\"Server/Index.lua\" showLineNumbers\nlocal my_cable = Cable(Vector())\nlocal cube_01 = Prop(Vector(100, 100, 100), Rotator(), \"nanos-world::SM_Cube\")\nlocal cube_02 = Prop(Vector(200, 0, 100), Rotator(), \"nanos-world::SM_Cube\")\n\nmy_cable:AttachStartTo(cube_01)\nmy_cable:AttachEndTo(cube_02)\n```\n```\n\n----------------------------------------\n\nTITLE: Broadcasting and Sending Remote Events over Network - nanos world (Lua)\nDESCRIPTION: Demonstrates sending events from the server to client(s) using Events.BroadcastRemote and Events.CallRemote in nanos world. Requires proper networking setup and player objects. Broadcast sends data to all clients; CallRemote targets a specific player. No return values; used for server-to-client communication.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/scripting/communicating-between-packages.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal my_parameter1 = \\\"cool data from network\\\"\\n\\n-- Call this event to all Players\\nEvents.BroadcastRemote(\\\"GetThisFromServer\\\", my_parameter1)\\n\\nlocal player_02 = GetPlayerSomehow()\\n\\n-- Or call this event to a specific player\\nEvents.CallRemote(\\\"GetThisFromServer\\\", player_02, my_parameter1)\n```\n\n----------------------------------------\n\nTITLE: Getting a Value from an Entity with Fallback in Lua\nDESCRIPTION: This Lua snippet demonstrates retrieving a value from an entity (`my_player`) using the `GetValue` method. It attempts to get the value associated with the key `\"my_value\"`. If the key does not exist or has no value set, the method returns the provided fallback value, which is `0` in this example. This can be used on both client and server sides (assuming the value was synchronized if accessed on the client).\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/scripting/entity-values.mdx#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n```lua showLineNumbers\n-- Gets 'my_value' value, or returns '0' if no value is set\nlocal my_value = my_player:GetValue(\"my_value\", 0)\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Player Discord Rich Presence in Lua\nDESCRIPTION: Demonstrates how to update a player's Discord activity (Rich Presence) using the `Client.SetDiscordActivity` function in nanos world on the client side. It sets the state, details, large image key, and large image text displayed in the player's Discord status. Requires the nanos world client environment.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/scripting/discord-integration.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n```lua title=\"Client/Index.lua\" showLineNumbers\nlocal state = \"Working as Truck Driver\"\nlocal details = \"Awesome Roleplay\"\nlocal large_text = \"Honk!\"\nlocal large_image = \"nanos-world-full-world\"\n\nClient.SetDiscordActivity(state, details, large_image, large_text)\n```\n```\n\n----------------------------------------\n\nTITLE: Overriding the `__index` Metamethod in Lua\nDESCRIPTION: Demonstrates how to define custom behavior when getting a property from an instance of an inherited class. This requires implementing a method named `index` (not `__index`) which receives the key being accessed and should return the desired value.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/scripting/inheriting-classes.md#_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nfunction MyNewClass:index(key)\n\tConsole.Log(\"Getting %s value: %s\", tostring(self), key)\n    -- ... do something\n    return some_value\nend\n```\n\n----------------------------------------\n\nTITLE: Initializing and Updating React WebUI in nanos world Client (Lua)\nDESCRIPTION: This Lua script initializes a WebUI element using a local HTML file (`UI/index.html`) generated from a React application. It subscribes to various nanos world client, package, player, and character events (like spawning, taking damage, dying, weapon interactions) to keep the UI synchronized with the game state. Helper functions trigger specific JavaScript events within the WebUI to update health and ammo displays.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/tutorials-and-examples/basic-hud-react.md#_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\n-- Spawns a WebUI with the HTML file you just created\nmain_hud = WebUI(\"Main HUD\", \"file://UI/index.html\", 1)\n\n-- When LocalPlayer spawns, sets an event on it to trigger when we possesses a new character, to store the local controlled character locally. This event is only called once, see Package:Subscribe(\"Load\") to load it when reloading a package\nClient.Subscribe(\"SpawnLocalPlayer\", function(local_player)\n    local_player:Subscribe(\"Possess\", function(player, character)\n        UpdateLocalCharacter(character)\n    end)\nend)\n\n-- When package loads, verify if LocalPlayer already exists (eg. when reloading the package), then try to get and store it's controlled character\nPackage.Subscribe(\"Load\", function()\n    local local_player = Client.GetLocalPlayer()\n    if (local_player ~= nil) then\n        UpdateLocalCharacter(local_player:GetControlledCharacter())\n    end\nend)\n\n-- Function to set all needed events on local character (to update the UI when it takes damage or dies)\nfunction UpdateLocalCharacter(character)\n    -- Verifies if character is not nil (eg. when GetControllerCharacter() doesn't return a character)\n    if (character == nil) then\n        return\n    end\n\n    -- Updates the UI with the current character's health\n    UpdateHealth(character:GetHealth())\n\n    -- Sets on character an event to update the health's UI after it takes damage\n    character:Subscribe(\"TakeDamage\", function(charac, damage, type, bone, from_direction, instigator, causer)\n        UpdateHealth(math.max(charac:GetHealth() - damage, 0))\n    end)\n\n    -- Sets on character an event to update the health's UI after it dies\n    character:Subscribe(\"Death\", function(charac)\n        UpdateHealth(0)\n    end)\n\n    -- Try to get if the character is holding any weapon\n    local current_picked_item = character:GetPicked()\n\n    -- If so, update the UI\n    if (current_picked_item and current_picked_item:GetClass():GetName() == \"Weapon\") then\n        UpdateAmmo(true, current_picked_item:GetAmmoClip(), current_picked_item:GetAmmoBag())\n    end\n\n    -- Sets on character an event to update his grabbing weapon (to show ammo on UI)\n    character:Subscribe(\"PickUp\", function(charac, object)\n        if (object.Super:GetClass():GetName() == \"Weapon\") then\n            UpdateAmmo(true, object:GetAmmoClip(), object:GetAmmoBag())\n        end\n    end)\n\n    -- Sets on character an event to remove the ammo ui when he drops it's weapon\n    character:Subscribe(\"Drop\", function(charac, object)\n        UpdateAmmo(false)\n    end)\n\n    -- Sets on character an event to update the UI when he fires\n    character:Subscribe(\"Fire\", function(charac, weapon)\n        UpdateAmmo(true, weapon:GetAmmoClip(), weapon:GetAmmoBag())\n    end)\n\n    -- Sets on character an event to update the UI when he reloads the weapon\n    character:Subscribe(\"Reload\", function(charac, weapon, ammo_to_reload)\n        UpdateAmmo(true, weapon:GetAmmoClip(), weapon:GetAmmoBag())\n    end)\nend\n\n-- Function to update the Ammo's UI\nfunction UpdateAmmo(enable_ui, ammo, ammo_bag)\n    main_hud:CallEvent(\"UpdateWeaponAmmo\",enable_ui, ammo, ammo_bag)\nend\n\n-- Function to update the Health's UI\nfunction UpdateHealth(health)\n    main_hud:CallEvent(\"UpdateHealth\",health)\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Native Events on Inherited Classes in Lua\nDESCRIPTION: Shows how subscribing to an event (e.g., \"Spawn\") on both a parent class (`Prop`) and an inherited class (`MyNewClass`) works. When an instance of the inherited class (`MyNewClass`) is spawned, both the `MyNewClass` event handler and the `Prop` event handler are triggered. The `self` parameter in the handler refers to the specific custom entity instance that triggered the event.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/scripting/inheriting-classes.md#_snippet_15\n\nLANGUAGE: lua\nCODE:\n```\nProp.Subscribe(\"Spawn\", function(self)\n    Console.Log(\"Spawned Prop: %s\", tostring(self))\nend)\n\nMyNewClass.Subscribe(\"Spawn\", function(self)\n    Console.Log(\"Spawned MyNewClass: %s\", tostring(self))\nend)\n\nlocal my_entity = MyNewClass()\nlocal my_prop = Prop()\nlocal my_other_entity_inherited_from_prop = MyOtherClass()\n\n-- Will output:\n--  Spawned Prop: MyNewClass\n--  Spawned MyNewClass: MyNewClass\n--  Spawned Prop: Prop\n--  Spawned Prop: MyOtherClass\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Dependencies in TOML for nanos world\nDESCRIPTION: This TOML configuration snippet defines metadata for a nanos world package, including its name, author, version, and type. Crucially, it specifies the required 'ts-fireworks' Asset Pack under `assets_requirements`, ensuring the necessary firework particle effects are loaded when the package runs.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/tutorials-and-examples/fireworks.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n# Package Configurations\n[package]\n    # Package Name\n    name =                  \"My Awesome Firework Package\"\n    # Contributors\n    author =                \"SyedMuhammad\"\n    # Version\n    version =               \"1.0.0\"\n    # Image URL\n    image =                 \"https://i.imgur.com/tQXi0xt.webp\"\n    # Package Type: 'executable' (normal package) | 'library' (doesn't run - useful for code library)\n    type =                  \"executable\"\n    # Whether to force the Custom Map Script to do NOT load\n    force_no_map_script =   false\n    # Auto Destroy all entities spawned by this package when it unloads\n    auto_cleanup =          true\n    # Asset Packs Requirements\n    assets_requirements = [\n        \"ts-fireworks\",\n    ]\n```\n\n----------------------------------------\n\nTITLE: Creating a 2D Sound from a Package OGG File in Lua\nDESCRIPTION: This Lua code snippet shows how to create a 2D sound instance using a custom `.ogg` file located within a specific game package. It calls the `Sound` constructor with an empty `Vector` (suitable for non-positional 2D sounds), the path to the `.ogg` file using the `package://` scheme, and `true` to designate it as a 2D sound. This example illustrates loading custom audio resources.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/classes/sound.mdx#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n```lua showLineNumbers\n-- Spawning a ogg sound located in a Package\nlocal ogg_sound = Sound(Vector(), \"package://my-package/Client/awesome_beep.ogg\", true)\n```\n```\n\n----------------------------------------\n\nTITLE: Overriding the `__newindex` Metamethod in Lua\nDESCRIPTION: Shows how to define custom behavior when setting a property on an instance of an inherited class. This is achieved by implementing a method named `newindex` (not `__newindex`) which receives the key and value being set.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/scripting/inheriting-classes.md#_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nfunction MyNewClass:newindex(key, value)\n\tConsole.Log(\"Setting a %s value: %s = %s\", tostring(self), key, tostring(value))\nend\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Color Object in Lua\nDESCRIPTION: This example demonstrates how to create an instance of the Color struct in Lua. It initializes a local variable `grey_color` with RGBA values (0.5, 0.5, 0.5, 1.0), representing a shade of grey with full opacity. This requires the Color struct definition to be accessible.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/structs/color.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal grey_color = Color(0.5, 0.5, 0.5, 1)\n```\n\n----------------------------------------\n\nTITLE: Installing Default-Weapons Package via Terminal - Shell\nDESCRIPTION: Installs the 'default-weapons' package necessary for weapon functions in Nanos World using the server command-line interface. This must be executed before running any Lua scripts that utilize the package and is typically performed in the Terminal from the NanosWorldServer directory. If the package is required for multiple scripts, it is recommended to add it to your package requirements file.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/tutorials-and-examples/weapon-flashlight.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# install the default-weapons package\\n./NanosWorldServer.exe --cli install package default-weapons\n```\n\n----------------------------------------\n\nTITLE: Listing Available CLI Commands in Session - Nanos Console - General\nDESCRIPTION: Displays the CLI welcome message and a listing of available server management commands. This output is shown after entering the 'help' command in the interactive CLI session. It is used to view all possible CLI operations such as install, update, upload, add, check, help, and stop. No parameters are required; simply type 'help' in the CLI prompt to retrieve this information.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/server-manual/command-line-interface.mdx#_snippet_2\n\nLANGUAGE: nanos-console\nCODE:\n```\n```nanos-console\nINFO  Starting nanos world CLI - Command Line Interface (beta)\nnanos world cli> help\nINFO  Available commands:\n\t- stop\n\t- help\n\t- update [package|assets] NAME1, NAME2...\n\t- install [package|assets] NAME1, NAME2...\n\t- upload [package|assets] NAME\n\t- add [package|assets] NAME\n\t- check\n\nnanos world cli>\n```\n```\n\n----------------------------------------\n\nTITLE: Handling and Calling Custom Remote Events on Client in Lua\nDESCRIPTION: This client-side Lua script defines `MyNewClass` and adds a custom method `OnMyCustomRemoteEvent`. It uses `SubscribeRemote` to listen for the \"MyCustomRemoteEvent\" sent from the server. Upon receiving this event, the method logs details and uses `CallRemoteEvent` to trigger \"AnotherRemoteEvent\" on the corresponding server instance, passing data back.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/scripting/inheriting-classes.md#_snippet_20\n\nLANGUAGE: lua\nCODE:\n```\n-- inherits the Class\nMyNewClass = Prop.Inherit(\"MyNewClass\")\n\n-- defines a custom method\nfunction MyNewClass:OnMyCustomRemoteEvent(a, b)\n    Console.Log(\"OnMyCustomRemoteEvent!\", tostring(self), a, b)\n    self:CallRemoteEvent(\"AnotherRemoteEvent\", 456, \"def\")\nend\n\n-- subscribes for a custom remote event\nMyNewClass.SubscribeRemote(\"MyCustomRemoteEvent\", MyNewClass.OnMyCustomRemoteEvent)\n```\n\n----------------------------------------\n\nTITLE: Playing Imported Mixamo Animation in nanos world (Lua)\nDESCRIPTION: This Lua script demonstrates how to apply a previously imported and packaged Mixamo animation to a Character object in nanos world. It assumes an asset pack named 'awesome-mixamo-animations' has been created containing the animation 'HipHopDancing4UE4' processed according to the guide. The script calls the `:PlayAnimation()` method on a character instance, referencing the animation by its asset path (AssetName::AnimationName).\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/assets-modding/creating-assets/animations/characters/mixamo-animations.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n```lua showLineNumbers\nlocal my_character = Character()\nmy_character:PlayAnimation(\"awesome-mixamo-animations::HipHopDancing4UE4\")\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Prop Rain on Character Trigger Entry using Lua\nDESCRIPTION: This Lua script initializes a Trigger volume in nanos-world. Upon a Character entering the trigger ('BeginOverlap'), it starts a timer ('Timer.SetInterval') that spawns a crate prop ('nanos-world::SM_Crate_07') every 100ms at random locations and rotations above the trigger. When the Character leaves the trigger ('EndOverlap'), the timer is stopped ('Timer.ClearTimeout'), halting the prop spawning. It depends on the nanos-world Lua API for Trigger, Actor, Vector, Rotator, Timer, and Prop objects.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/tutorials-and-examples/prop-rain.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Spawns a Trigger\nmy_trigger = Trigger(Vector(200, 200, 0), 200)\n\n-- Defines my_timer globally to be used to store Timer\nmy_timer = nil\n\n-- Sets BeginOverlap event\nmy_trigger:Subscribe(\"BeginOverlap\", function(trigger, actor_triggering)\n    -- Only activates if a Character enters it\n    if (actor_triggering:GetType() ~= \"Character\") then\n        return\n    end\n\n    -- Sets a Timer at each 100ms to spawn a Prop\n    my_timer = Timer.SetInterval(function()\n        -- Gets random Location and Rotation\n        local prop_spawn_location = Vector(math.random(100, 300), math.random(100, 300), math.random(800, 1200))\n        local prop_spawn_rotation = Rotator(math.random(0, 360), math.random(0, 360), math.random(0, 360))\n\n        -- Spawns a Crate\n        Prop(prop_spawn_location, prop_spawn_rotation, \"nanos-world::SM_Crate_07\")\n    end, 100)\nend)\n\n-- Sets EndOverlap event\nmy_trigger:Subscribe(\"EndOverlap\", function(trigger, actor_triggering)\n    -- Only deactivates if a Character leaves it\n    if (actor_triggering:GetType() ~= \"Character\") then\n        return\n    end\n\n    -- Stops/Clear the Timer\n    if (my_timer ~= nil) then\n        Timer.ClearTimeout(my_timer)\n    end\nend)\n```\n\n----------------------------------------\n\nTITLE: Accessing Map Spawn Points and Configuration Data in Lua\nDESCRIPTION: This Lua code, executed on the server (`Server/Index.lua`), demonstrates how to retrieve map-specific information. It uses functions from the `Server` static class: `GetMapSpawnPoints()` returns an array of spawn point locations defined in the map's `Package.toml`, and `GetMapConfig()` retrieves any custom data defined under the `custom_data` key in the same configuration file.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/essential-concepts.mdx#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal spawn_points = Server.GetMapSpawnPoints()\nlocal custom_data = Server.GetMapConfig()\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Local Entity Values (Lua)\nDESCRIPTION: Shows how to attach a custom key-value pair (\\\"my_value\\\", 100) to an entity (my_prop) using SetValue(). The value can be retrieved later on the same side (server or client) using GetValue(). This value is local to the side it was set on and is not automatically synchronized across the network.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/essential-concepts.mdx#_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\n-- Sets a 'my_value' value to a Prop\nmy_prop:SetValue(\"my_value\", 100)\n\n-- Later on, get the value again\nlocal my_value = my_prop:GetValue(\"my_value\")\n```\n\n----------------------------------------\n\nTITLE: Defining a Button Context Menu Item in Lua\nDESCRIPTION: Illustrates the Lua table structure for adding a 'button' type item to the Context Menu. This structure requires a unique `id`, the `type` set to 'button', a display `label` for the button text, and a `callback_event` string naming the event triggered when the button is pressed.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/explore/sandbox-game-mode/context-menu.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n{\n\tid = \"id-of-item\",\n\ttype = \"button\",\n\tlabel = \"press me\",\n\tcallback_event = \"ContextMenu_MyButtonPressed\"\n},\n```\n\n----------------------------------------\n\nTITLE: Listing Damageable Class Functions in Markdown (JSX)\nDESCRIPTION: This snippet embeds a JSX-style <FunctionsDeclaration> component to mark where the Damageable class's functions should be included in the documentation. It is used within a markdown file and depends on a custom documentation renderer that processes these components. The parameters are type ('Class') and name ('Damageable'). No concrete input or output values are present, as this is a documentation placeholder.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/classes/base-classes/damageable.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<FunctionsDeclaration type=\\\"Class\\\" name=\\\"Damageable\\\" />\n```\n\n----------------------------------------\n\nTITLE: Applying a Custom Texture to a Mesh Parameter in nanos world (Lua)\nDESCRIPTION: This Lua snippet shows how to load an image file from a package's Client folder and apply it as a texture to a StaticMesh. It uses the `SetMaterialTextureParameter` method, specifying the parameter name ('Texture') and the path to the image file ('package://testing/Client/syed.jpg'). This requires the material to have a texture parameter named 'Texture' and the image file to exist at the specified path. Note the performance caution regarding loading raw images.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/tutorials-and-examples/painting-meshes.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\n-- spawns a static mesh cube\nlocal my_cube = StaticMesh(Vector(300, 0, 100), Rotator(0, 45, 0), \"nanos-world::SM_Cube\")\n\n-- replaces it's materials with the nanos default one\nmy_cube:SetMaterial(\"nanos-world::M_Default_Masked_Lit\")\n\n-- applies a custom texture to a parameter called \"Texture\"\nmy_cube:SetMaterialTextureParameter(\"Texture\", \"package://testing/Client/syed.jpg\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Data Using Package.GetPersistentData in Lua\nDESCRIPTION: This Lua snippet shows how to retrieve persistent data previously stored. It uses `Package.GetPersistentData()` to get the entire data store, accesses the table associated with the key \"awesome_table\", and then prints the value of `my_id` from that table using `Console.Log`. The expected output (123) is included as a comment.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/scripting/persistent-data.mdx#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n```lua showLineNumbers\nlocal my_table = Package.GetPersistentData().awesome_table\n\nConsole.Log(my_table.my_id)\n\n-- Will print:\n-- 123\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Prop-Shooting Weapon Logic (Lua)\nDESCRIPTION: This Lua script defines the server-side logic for a weapon that shoots props. It loads the 'default-weapons' package, spawns an AR4 weapon, sets its damage to zero, and subscribes to its 'Fire' event. When fired, instead of a bullet, it spawns a teapot Prop slightly in front of the shooter and applies an impulse to launch it forward.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/tutorials-and-examples/prop-shooter.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- Loads the default-weapons (note: it's recommended to add it to your Package's packages_requirements instead)\nServer.LoadPackage(\"default-weapons\")\n\n-- Spawns a Weapon from default-weapons package\nlocal my_weap = AR4(Vector(-2250, 9153, 192), Rotator(0, 90, 90))\nmy_weap:SetDamage(0)\n\nmy_weap:Subscribe(\"Fire\", function(weapon, shooter)\n    local control_rotation = shooter:GetControlRotation()\n    local forward_vector = control_rotation:GetForwardVector()\n    local spawn_location = shooter:GetLocation() + Vector(0, 0, 40) + forward_vector * Vector(200)\n\n    local prop = Prop(spawn_location, control_rotation, \"nanos-world::SM_TeaPot_Interior\", 1)\n    prop:AddImpulse(forward_vector * Vector(10000), true)\nend)\n```\n\n----------------------------------------\n\nTITLE: Automated nanos world Server Installation on Windows (Shell)\nDESCRIPTION: Provides a single command-line instruction for Windows to automatically download/update the stable nanos world server using `steamcmd.exe`. It sets the install directory, logs in anonymously, updates the app (validating files), and quits SteamCMD.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/server-manual/server-installation.mdx#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nsteamcmd.exe +force_install_dir C:/nanos-world-server +login anonymous +app_update 1936830 validate +quit\n```\n\n----------------------------------------\n\nTITLE: Defining Static Mesh Assets with Meta Data in TOML\nDESCRIPTION: Demonstrates the new method for defining static mesh assets in `Assets.toml` using inline tables. This allows associating custom metadata (key-value pairs like `my_tag`, `something`, `thumbnail`) with each asset, in addition to its required `path`. This enables richer asset description and categorization.\nSOURCE: https://github.com/nanos-world/docs/blob/master/blog/2023-06-07-may.md#_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n```toml title=\"Assets.toml\"\n[assets.static_meshes]\n\tSM_Flower_01 = { path = \"MyFolder/SM_Awesome_Flower_01\", my_tag = \"Wonderful\", something = 123, thumbnail = \"Thumbnails/SM_Flower_01.jpg\" }\n\tSM_Rock_01 = { path = \"MyFolder/SM_Rock_01\", my_tag = \"Wonderful\", something = 123, thumbnail = \"Thumbnails/SM_Rock_01.jpg\" }\n\tSM_MyAsset_01 = { path = \"MyFolder/SM_MyAsset_01\", my_tag = \"Wonderful\", something = 123, thumbnail = \"Thumbnails/SM_MyAsset_01.jpg\" }\n\t# ...\n```\n```\n\n----------------------------------------\n\nTITLE: Context Menu Item Format: Button Type in Lua\nDESCRIPTION: Demonstrates declaring a 'button' type entry for the Context Menu, wrapped in a Lua table. The 'callback_event' fires when the button is pressed. Used inside the items array for custom categories.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/explore/sandbox-game-mode/context-menu.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n{\\n\\tid = \\\"id-of-item\\\",\\n\\ttype = \\\"button\\\",\\n\\tlabel = \\\"press me\\\",\\n\\tcallback_event = \\\"ContextMenu_MyButtonPressed\\\"\\n},\\n\n```\n\n----------------------------------------\n\nTITLE: Broadcasting a Remote Event to All Clients (nanos.world Events, Lua)\nDESCRIPTION: This snippet uses Events.BroadcastRemote to send a remote event named 'MyClientEvent' from the server to all connected players' client packages. It demonstrates server-to-client communication, broadcasting the string 'hello nanos world!'. The method requires the nanos.world scripting environment and functions as an RPC broadcaster for one-way messages.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/essential-concepts.mdx#_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\n-- Sends a remote Event to all Players in all Client Packages\\nEvents.BroadcastRemote(\"MyClientEvent\", \"hello nanos world!\")\n```\n\n----------------------------------------\n\nTITLE: Instantiating Vector2D Object in Lua\nDESCRIPTION: Demonstrates how to create a new instance of the Vector2D class with floating-point X and Y components. No external dependencies are required beyond the Vector2D struct being available in the environment. The parameters 1452.5 and 512 represent the X and Y coordinates respectively, returning a Vector2D object ready for arithmetic or HUD usage.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/structs/vector2d.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal new_vector = Vector2D(1452.5, 512)\n```\n\n----------------------------------------\n\nTITLE: Binding to a Native Button Click Event in Lua\nDESCRIPTION: This Lua example demonstrates creating a `Button` widget, adding a `Text` widget as its child to display \"Press Me!\". It then binds a Lua function to the button's native `OnClicked` dispatcher using `BindBlueprintEventDispatcher`. The provided function logs \"clicked!\" to the console when the button is pressed. Finally, the button is added to the viewport.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/classes/widget.mdx#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n```lua title=\"Client/Index.lua\" showLineNumbers\nlocal my_button = Widget(NativeWidget.Button)\n\n-- Puts a text inside of it\nlocal my_text = Widget(NativeWidget.Text)\nmy_text:CallBlueprintEvent(\"SetText\", \"Press Me!\")\nmy_button:AddChild(my_text)\n\n-- Binds the native OnClicked dispatcher\nmy_button:BindBlueprintEventDispatcher(\"OnClicked\", function()\n\tConsole.Log(\"clicked!\")\nend)\n\n-- Adds the button to viewport (will fill the whole screen)\nmy_button:AddToViewport()\n```\n```\n\n----------------------------------------\n\nTITLE: Using `index` for Automatic `GetValue` in Lua\nDESCRIPTION: Provides a practical example of overriding `index` to automatically call the entity's `GetValue` method whenever a property is accessed using dot notation (`local val = my_entity.key`).\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/scripting/inheriting-classes.md#_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\nfunction MyNewClass:index(key)\n    return self:GetValue(key)\nend\n\nlocal my_entity = MyNewClass()\nlocal amazing_value = my_entity.amazing_value\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Custom UserWidget from an Asset Pack in Lua\nDESCRIPTION: Shows how to create an instance of a custom UserWidget (`WBP_CustomWidget`) defined within an Asset Pack (`my-asset-pack`) using the `Widget` class constructor by providing the asset path as a string. This allows leveraging pre-designed UI elements from Unreal Engine projects.\nSOURCE: https://github.com/nanos-world/docs/blob/master/blog/2023-03-08-february.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n```lua title=Client/Index.lua\nlocal my_custom_widget = Widget(\"my-asset-pack::WBP_CustomWidget\")\n```\n```\n\n----------------------------------------\n\nTITLE: Handling UI Updates with JavaScript and JQuery\nDESCRIPTION: This JavaScript code uses JQuery to dynamically update the HUD's HTML content. It subscribes to custom events ('UpdateWeaponAmmo', 'UpdateHealth') triggered from the Lua script. When these events occur, the functions update the corresponding HTML elements (`#weapon_ammo_clip`, `#weapon_ammo_bag`, `#health_current`) with new data (ammo counts, health value) received from Lua. It also includes logic to show/hide the ammo container and change the health container's background color based on health level.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/tutorials-and-examples/basic-hud-html.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Register for UpdateWeaponAmmo custom event (from Lua)\nEvents.Subscribe(\"UpdateWeaponAmmo\", function(enable, clip, bag) {\n    if (enable)\n        $(\"#weapon_ammo_container\").show();\n    else\n        $(\"#weapon_ammo_container\").hide();\n\n    // Using JQuery, overrides the HTML content of these SPANs with the new Ammo values\n    $(\"#weapon_ammo_clip\").html(clip);\n    $(\"#weapon_ammo_bag\").html(\"/ \" + bag);\n});\n\n// Register for UpdateHealth custom event (from Lua)\nEvents.Subscribe(\"UpdateHealth\", function(health) {\n    // Using JQuery, overrides the HTML content of the SPAN with the new health value\n    $(\"#health_current\").html(health);\n\n    // Bonus: make the background red when health below 25\n    if (health <= 25)\n        $(\"#health_container\").css(\"background-image\", \"linear-gradient(to left, #0000, #d00c)\");\n    else\n        $(\"#health_container\").css(\"background-image\", \"linear-gradient(to left, #00000000, #00000080)\");\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Firework Weapon Logic on Server (Lua)\nDESCRIPTION: This server-side Lua script defines the core logic for the firework shooter. It loads the `default-weapons` package, spawns a Glock, disables its damage, and subscribes to its `Fire` event. When fired, it calculates a spawn location, creates an invisible projectile (`Prop`), attaches a firework trail particle (`Particle`) from the `ts-fireworks` pack, adds impulse to the projectile, sets network authority, broadcasts an event for the client sound, and sets timers to trigger the explosion particle/sound and clean up the projectile/trail particle. It highlights available particle parameters like `BlastColor`.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/tutorials-and-examples/fireworks.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n-- Loads the default-weapons (note: it's recommended to add it to your Package's packages_requirements instead)\nServer.LoadPackage(\"default-weapons\")\n\n-- Let's spawn a Glock from default-weapons package and set it to give no damage, this also avoids it from spawning a trail particle\nlocal weapon = Glock()\nweapon:SetDamage(0)\n\n-- Let's subscribe for 'Fire' event from this weapon, this will be triggered for every fire it shoots\nweapon:Subscribe(\"Fire\", function(weap, shooter)\n    -- We get the position at the front of the weapon\n    local control_rotation = shooter:GetControlRotation()\n    local forward_vector = control_rotation:GetForwardVector()\n    local spawn_location = shooter:GetLocation() + Vector(0, 0, 40) + forward_vector * Vector(400)\n\n    -- We will spawn an empty/invisible Prop, to be our projectile - using our Invisible mesh 'SM_None'\n    local prop = Prop(spawn_location, control_rotation, \"nanos-world::SM_None\")\n\n    -- Spawns the trail/shell particle, this particle is not auto destroyed as it should follow the projectile,\n    -- this way we must destroy it manually after all\n    -- The Asset Pack which we are using to get the particles contains two Shells: 'PS_TS_FireworksShell' and 'PS_TS_FireworksShell_Palm'\n    -- You can use the another one to get more cool effects!\n    local particle = Particle(Vector(), Rotator(), \"ts-fireworks::PS_TS_FireworksShell\", false, true)\n\n    -- Attaches the particle to the projectile prop\n    particle:AttachTo(prop)\n\n    -- Impulses the Projectile forward\n    prop:AddImpulse(forward_vector * Vector(50000), true)\n\n    -- Sets the shooter to be the Network Authority of this Projectile\n    -- This way only the shooter will be reponsible to handle the physics of this object\n    prop:SetNetworkAuthority(shooter:GetPlayer())\n\n    -- Calls the client to spawn the 'Launch' sound\n    Events.BroadcastRemote(\"SpawnFireworkSound\", particle)\n\n    -- After 500 miliseconds, explode the firework\n    Timer.SetTimeout(function(pr)\n        -- Calls the client to spawn the 'Explosion' sound at the projectile location\n        Events.BroadcastRemote(\"ExplodeFireworkSound\", pr:GetLocation())\n\n        -- Spawns the Particle Explosion.\n        -- This Asset Pack also contains the following Particles, feel free to try them!\n        -- 'PS_TS_Fireworks_Burst_Chrys', 'PS_TS_Fireworks_Burst_Circle', 'PS_TS_Fireworks_Burst_Palm',\n        -- 'PS_TS_Fireworks_Burst_Shaped' and 'PS_TS_Fireworks_Burst_ShellsWithinShells'\n        local particle_burst = Particle(pr:GetLocation(), Rotator(), \"ts-fireworks::PS_TS_Fireworks_Burst_Palm\", true, true)\n\n        -- Those particles make it available to tweak some of their properties, let's set the BlastColor to red\n        particle_burst:SetParameterColor(\"BlastColor\", Color(1, 0, 0))\n\n        -- Those particles exposes the following parameters:\n        --  Color: 'BurstColor', 'SparkleColor', 'FlareColor', 'TailColor'\n        --  bool: 'BlastSmoke', 'TailSmoke'\n        --  float: 'BurstMulti', 'SparkleMulti'\n    end, 500, prop)\n\n    -- After 1 second, destroy the particle and the projectile\n    prop:SetLifeSpan(1)\n    particle:SetLifeSpan(1)\nend)\n```\n\n----------------------------------------\n\nTITLE: Referencing Default Nanos World Particle Assets\nDESCRIPTION: This example demonstrates the format used to reference default particle assets included in the nanos world base game. These assets, like `P_Beam`, are part of the 'nanos-world' default asset pack and can be directly used in scripts or configurations by prefixing their name with 'nanos-world::'.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/assets-modding/default-asset-pack/default-particles.mdx#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnanos-world::P_Beam\n```\n\n----------------------------------------\n\nTITLE: Illustrating Multiple Constructors for Sound Class in Lua\nDESCRIPTION: This Lua code snippet demonstrates the planned introduction of multiple constructors using the `Sound` class as an example. It shows the current single constructor and proposed separate constructors for creating 2D and 3D sounds, simplifying object instantiation by providing tailored parameter lists.\nSOURCE: https://github.com/nanos-world/docs/blob/master/blog/2022-11-09-october.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n-- Current Constructor\nSound(location, asset, is_2D_sound, auto_destroy, sound_type, volume, pitch, inner_radius, falloff_distance, attenuation_function, keep_playig_when_silent, loop_mode)\n\n-- New 2D Sound Constructor\nSound(asset, auto_destroy, sound_type, volume, pitch, loop_mode)\n\n-- New 3D Sound Constructor\nSound(location, asset, auto_destroy, sound_type, volume, pitch, inner_radius, falloff_distance, attenuation_function, keep_playig_when_silent, loop_mode)\n```\n\n----------------------------------------\n\nTITLE: Passing Enum Value to Constructor in Lua\nDESCRIPTION: Shows how to instantiate a 'Light' object, passing the 'LightType.Point' Enum value as the light type parameter to the constructor. This uses the nanos world API for creating lights.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/glossary/enums.mdx#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n```lua showLineNumbers\n-- Using Enums to pass a Light Type to the constructor\nlocal my_light = Light(Vector(-5, 0, 50), Rotator(), Color.RED, LightType.Point)\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring a Game Mode Package in TOML\nDESCRIPTION: Shows the `Package.toml` format for a 'game-mode' package type. Game modes function similarly to 'script' packages but are exclusive; only one 'game-mode' can be loaded at a time. They are intended for comprehensive game modifications and are specified by the `game_mode` setting in the server `Config.toml`.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/packages/packages-guide.md#_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n# Inherit default settings from _meta.toml\n\n[meta]\n# title = \"\"\n# author = \"\"\n# version = \"1.0.0\"\n\n[settings]\n# Enabling this will force the map package (if any) to do NOT load\n# force_no_map_package = false\n\n# Enabling this will destroy all entities spawned by this Package when it unloads\n# auto_cleanup = true\n\n# The game version (major.minor) at the time this package was created, for granting backwards compatibility between breaking changes.\n# compatibility_version = \"1.0\"\n\n# List of Packages dependencies used by this Package which need to be loaded first\n# packages_requirements = []\n\n# List of Asset Packs to be loaded when this package loads\n# assets_requirements = []\n\n# List of Maps compatible/recommended to work with this Game Mode\n# compatible_maps = []\n\n[custom_settings]\n# List of Custom Settings which can be set when starting a new game or passed through command line to the server\n\n# Example:\n# [custom_settings.my_checkbox]\n# \tlabel = \"My Checkbox\"\n# \ttype = \"boolean\"\n# \tdefault = false\n\n# [custom_settings.my_integer]\n# \tlabel = \"My Integer\"\n# \ttype = \"integer\"\n# \tdefault = 10\n# \tmin = 0\n# \tmax = 100\n\n# [custom_settings.my_float]\n# \tlabel = \"My Floating\"\n# \ttype = \"floating\"\n# \tdefault = 5.0\n# \tmin = 0.0\n# \tmax = 10.0\n\n# [custom_settings.my_select]\n# \tlabel = \"My Select\"\n# \ttype = \"select\"\n# \tvalues = [\"Option A\", \"Option B\", \"Option C\"]\n# \tdefault = \"Option A\"\n\n# [custom_settings.my_text]\n# \tlabel = \"My Text\"\n# \ttype = \"text\"\n# \tdefault = \"Hello\"\n```\n\n----------------------------------------\n\nTITLE: Initializing a Vector Instance in Lua\nDESCRIPTION: This Lua code snippet demonstrates the basic instantiation of a `Vector` struct by providing X, Y, and Z floating-point coordinates (1452.5, 512, 943.1) to its constructor. The resulting `new_vector` variable holds the created vector object.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/structs/vector.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal new_vector = Vector(1452.5, 512, 943.1)\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Rotator in Lua\nDESCRIPTION: This Lua example demonstrates how to create a new instance of the `Rotator` structure. It calls the constructor with specific values for Pitch (-90 degrees), Yaw (153 degrees), and Roll (24.5 degrees). The `Rotator` structure itself is expected to be defined elsewhere within the nanos-world environment.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/structs/rotator.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n```lua showLineNumbers\nlocal new_rotator = Rotator(-90, 153, 24.5)\n```\n```\n\n----------------------------------------\n\nTITLE: Accessing the Global Registry of Inherited Classes (Lua)\nDESCRIPTION: Illustrates querying the registry of all custom classes derived from a parent to dynamically enumerate, instantiate, or manage inherited types. Utilizes the GetInheritedClasses() utility on a parent class, enabling programmatic discovery for modular spawn menus or registries. Requires an initialized Nanos World class registry system.\nSOURCE: https://github.com/nanos-world/docs/blob/master/blog/2022-12-07-november.md#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal children_classes = ToolGun.GetInheritedClasses()\\nfor _, class in pairs(children_classes) do\\n    -- 'class' is a custom inherited class! we can spawn it\\n    local p = class()\\nend\n```\n\n----------------------------------------\n\nTITLE: Retrieving Inherited Classes from a Parent Class in Lua\nDESCRIPTION: Illustrates how to use the `GetInheritedClasses` static method (e.g., on `ToolGun`) to get a table containing all custom classes that directly or indirectly inherit from it. The example iterates through this list and spawns an instance of each retrieved custom class using its default constructor.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/scripting/inheriting-classes.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal children_classes = ToolGun.GetInheritedClasses()\nfor _, class in pairs(children_classes) do\n    -- 'class' is a custom inherited class! we can spawn it\n    local p = class()\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Pack Dependency in Package Manifest (TOML)\nDESCRIPTION: This TOML snippet defines the configuration for a Nanos World package. It specifies package metadata like name, author, and version, and crucially declares a dependency on the `ts-fireworks` asset pack within the `assets_requirements` array, ensuring the necessary firework particle effects are available.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/tutorials-and-examples/fireworks.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n# Package Configurations\n[package]\n    # Package Name\n    name =                  \"My Awesome Firework Package\"\n    # Contributors\n    author =                \"SyedMuhammad\"\n    # Version\n    version =               \"1.0.0\"\n    # Image URL\n    image =                 \"https://i.imgur.com/tQXi0xt.webp\"\n    # Package Type: 'executable' (normal package) | 'library' (doesn't run - useful for code library)\n    type =                  \"executable\"\n    # Whether to force the Custom Map Script to do NOT load\n    force_no_map_script =   false\n    # Auto Destroy all entities spawned by this package when it unloads\n    auto_cleanup =          true\n    # Asset Packs Requirements\n    assets_requirements = [\n        \"ts-fireworks\",\n    ]\n```\n\n----------------------------------------\n\nTITLE: Overriding Parent Class Methods in Lua\nDESCRIPTION: Demonstrates how to override an existing method (`SetLocation`) inherited from the parent class (`Prop`) in the custom `MyNewClass`. The overridden method performs custom logic (modifying the location) and then calls the original parent method implementation using `self.Super:SetLocation` to apply the final location.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/scripting/inheriting-classes.md#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nfunction MyNewClass:SetLocation(new_location)\n    -- Do any kind of logic here\n    new_location = new_location + Vector(0, 0, 100)\n\n    -- Call Super to set the location to the parent Prop\n    self.Super:SetLocation(new_location)\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-Side Character Name Tags (Lua)\nDESCRIPTION: This Lua script runs on the client-side and defines functions to create (`AddNametag`) and destroy (`RemoveNametag`) TextRender objects representing player name tags. It attaches these tags above the character's head when a player possesses a character and removes them upon unpossession or player spawn. The script utilizes the nanos world API for player/character objects, text rendering, vector/rotation manipulation, and event subscription.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/tutorials-and-examples/name-tags.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n```lua title=\"Client/Index.lua\" showLineNumbers\n-- Function to add a Nametag to a Player\nfunction AddNametag(player, character)\n    -- Try to get it's character\n    if (character == nil) then\n        character = player:GetControlledCharacter()\n        if (character == nil) then return end\n    end\n\n    -- Spawns the Nametag (TextRender),\n    local nametag = TextRender(\n        Vector(),               -- Any Location\n        Rotator(),              -- Any Rotation\n        player:GetName(),       -- Player Name\n        Vector(0.5, 0.5, 0.5),  -- 50% Scale\n        Color(1, 1, 1),         -- White\n        FontType.Roboto,        -- Roboto Font\n        TextRenderAlignCamera.AlignCameraRotation -- Follow Camera Rotation\n    )\n\n    -- Attaches it to the character and saves it to the player's values\n    nametag:AttachTo(character)\n    nametag:SetRelativeLocation(Vector(0, 0, 250))\n\n    player:SetValue(\"Nametag\", nametag)\nend\n\n-- Function to remove a Nametag from  a Player\nfunction RemoveNametag(player, character)\n    -- Try to get it's character\n    if (character == nil) then\n        character = player:GetControlledCharacter()\n        if (character == nil) then return end\n    end\n\n    -- Gets the Nametag from the player, if any, and destroys it\n    local text_render = player:GetValue(\"Nametag\")\n    if (text_render and text_render:IsValid()) then\n        text_render:Destroy()\n    end\nend\n\n-- Adds a new Nametag to a character which was possessed\nCharacter.Subscribe(\"Possess\", function(character, player)\n    AddNametag(player, character)\nend)\n\n-- Removes the Nametag from a character which was unpossessed\nCharacter.Subscribe(\"UnPossess\", function(character, player)\n    RemoveNametag(player, character)\nend)\n\n-- When a Player is spawned - for when you connect and there is already Player's connected\nPlayer.Subscribe(\"Spawn\", function(player)\n    RemoveNametag(player)\n    AddNametag(player)\nend)\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring a Loading Screen Package in TOML\nDESCRIPTION: Illustrates the `Package.toml` structure for a 'loading-screen' package. This special package type is loaded while a player connects to display custom HTML content. It requires an `index.html` file in the package root and is specified by the `loading_screen` setting in the server `Config.toml`.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/packages/packages-guide.md#_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n# Inherit default settings from _meta.toml\n\n[meta]\n# title = \"\"\n# author = \"\"\n# version = \"1.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Package Via CLI - nanos world (bash)\nDESCRIPTION: Executes the nanos world server with CLI arguments to add a new package named 'my-awesome-package'. This command initializes the package creation process interactively, prompting for details such as title, author, and type. Required: nanos world server executable and proper working directory. Inputs: CLI command. Outputs: Prompts and new package folder. Windows variant.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/quick-start.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n```bash\n./NanosWorldServer.exe --cli add package my-awesome-package\n```\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Gizmo Transform Event in Nanos World - Lua\nDESCRIPTION: Demonstrates how to use the new Gizmo class to manipulate a Prop's transform interactively by subscribing to its Transform event. Requires the Nanos World Lua API (Prop, Gizmo classes) with the game running in client mode. The snippet creates a Prop and a Gizmo, and updates the Prop's location, rotation, and scale in response to user-driven Gizmo transformations. Inputs are the transform parameters from the event, and outputs are the Prop's updated state; proper event subscription is crucial for real-time behavior.\nSOURCE: https://github.com/nanos-world/docs/blob/master/blog/2023-08-16-july.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal my_prop = Prop(Vector(), Rotator(), \"nanos-world::SM_Cube\")\n\nlocal gizmo = Gizmo()\n\n-- To get the Gizmo location, we just subscribe to it's Transform event\ngizmo:Subscribe(\"Transform\", function(self, location, rotation, scale)\n\tmy_prop:TranslateTo(location, 0.02)\n\tmy_prop:RotateTo(rotation, 0.02)\n\tmy_prop:SetScale(scale)\nend)\n```\n\n----------------------------------------\n\nTITLE: Integrating WebUI for Event-Driven UI in nanos world (Lua)\nDESCRIPTION: This Lua snippet demonstrates how to spawn a WebUI object linked to a local HTML file, and establishes two-way event communication between the Lua package and the web UI. It subscribes to the \"Ready\" event to trigger an event in the HTML page and listens for responses. Dependencies include the WebUI class and a properly structured HTML file referenced by file path. Parameters include the WebUI name, file path, triggered events, and the subscription callback functions. Input is user interaction in the HTML; output is console and WebUI messages as defined in event handlers.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/scripting/user-interface.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Spawns a WebUI with the HTML file you just created\\nMyUI = WebUI(\"My UI\", \"file://UI/index.html\")\\n\\n-- When the HTML is ready, triggers an Event in there\\nMyUI:Subscribe(\"Ready\", function()\\n    MyUI:CallEvent(\"MyAwesomeEvent\", \"Hello! You are ready!\")\\nend)\\n\\nMyUI:Subscribe(\"MyAwesomeAnswer\", function(param1)\\n    Console.Log(\"Received an answer! Message: \" .. param1)\\nend)\n```\n\n----------------------------------------\n\nTITLE: Handling User Input and Object Manipulation for Gravity Gun (Lua, Client-Side)\nDESCRIPTION: This client-side Lua script handles user input (mouse clicks and scrolls) to pick up and move objects with the Gravity Gun. It casts a line trace from the camera to select entities, manages highlighting, tracks the distance and offset to the object, and communicates with the server using remote events for picking up, dropping, and updating the held object's position. Requires Nanos World client scripting, use of Input, Client, Events, and Viewport APIs. Inputs are mouse events and the held object is manipulated accordingly; expected outputs are updates to both the local visual feedback and actual game state via server interaction.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/tutorials-and-examples/gravity-gun.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- Global Variables\npicking_object = nil\ndistance_trace_object = nil\ndistance = 200\n\n-- Sets the color of Highlighing at index 1\nClient.SetHighlightColor(Color(0, 20, 20, 1.5), 1, HighlightMode.OnlyVisible)\n\n-- When Player clicks\nInput.Subscribe(\"MouseUp\", function(key_name)\n\n    -- If mouse was left button\n    if (key_name == \"LeftMouseButton\") then\n\n        -- If is grabbing something, drop it\n        if (picking_object) then\n            -- Calls server to re-enable gravity (if possible) and update it's last position\n            Events.CallRemote(\"PickUp\", picking_object, false)\n\n            -- Disables the highlight\n            picking_object:SetHighlightEnabled(false)\n\n            picking_object = nil\n            return\n        end\n\n        -- Get the camera location in 3D World Space\n        local viewport_2D_center = Viewport.GetViewportSize() / 2\n        local viewport_3D = Viewport.DeprojectScreenToWorld(viewport_2D_center)\n        local start_location = viewport_3D.Position\n\n        -- Gets the end location of the trace (5000 units ahead)\n        local trace_max_distance = 5000\n        local end_location = viewport_3D.Position + viewport_3D.Direction * trace_max_distance\n\n        -- Determine at which object we will be tracing for (WorldStatic - StaticMeshes - and PhysicsBody - Props)\n        local collision_trace = CollisionChannel.WorldStatic | CollisionChannel.PhysicsBody\n\n        -- Sets the trace modes (we want it to return Entity and Draws a Debug line)\n        local trace_mode = TraceMode.ReturnEntity | TraceMode.DrawDebug\n\n        -- Do the Trace\n        local trace_result = Trace.LineSingle(start_location, end_location, collision_trace, trace_mode)\n\n        -- If hit something and hit an Entity\n        if (trace_result.Success and trace_result.Entity) then\n\n            -- Sets the new picked up object\n            picking_object = trace_result.Entity\n\n            -- Calculates the offset of the hit and the center of the object\n            distance_trace_object = picking_object:GetLocation() - trace_result.Location\n\n            -- Calculates the distance of the object and the camera\n            distance = trace_result.Location:Distance(viewport_3D.Position)\n\n            -- Calls remote to disable gravity of this object (if has)\n            Events.CallRemote(\"PickUp\", picking_object, true)\n\n            -- Enable Highlighting on index 1\n            picking_object:SetHighlightEnabled(true, 1)\n        end\n    elseif (key_name == \"MouseScrollUp\") then\n        -- If mouse scroll, updates the Distance of the object from the camera\n        distance = distance + 25\n    elseif (key_name == \"MouseScrollDown\") then\n        -- If mouse scroll, updates the Distance of the object from the camera\n        distance = distance - 25\n        if (distance < 100) then distance = 100 end\n    end\nend)\n\nClient.Subscribe(\"Tick\", function(delta_time)\n    -- On Tick, updates the Position of the object, based on it's distance and camera rotation\n    if (picking_object == nil) then return end\n\n    local player = Client.GetLocalPlayer()\n    if (player == nil) then return end\n\n    -- Get the camera location in 3D World Space\n    local viewport_2D_center = Viewport.GetViewportSize() / 2\n    local viewport_3D = Viewport.DeprojectScreenToWorld(viewport_2D_center)\n    local start_location = viewport_3D.Position\n\n    -- Gets the new object location\n    -- (camera direction * 'distance' units ahead + object offset from first Hit to keep it relative)\n    local end_location = (viewport_3D.Position + viewport_3D.Direction * distance) + distance_trace_object\n\n    -- Calls remote to update it's location\n    Events.CallRemote(\"UpdateObjectPosition\", picking_object, end_location)\nend)\n```\n\n----------------------------------------\n\nTITLE: Retrieving an Entity Value with Fallback (Lua)\nDESCRIPTION: This Lua snippet shows how to retrieve a value associated with the key \"my_value\" from an entity (`my_player`). If the key exists, its corresponding value is returned; otherwise, the provided fallback value (`0`) is returned. This uses the `:GetValue(key, fallback)` method, accessible on both server and client sides.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/scripting/entity-values.mdx#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n```lua showLineNumbers\n-- Gets 'my_value' value, or returns '0' if no value is set\nlocal my_value = my_player:GetValue(\"my_value\", 0)\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Sky Time of Day Using Static Class (nanos world, Lua)\nDESCRIPTION: Demonstrates use of a static class method to modify world's sky settings on the client side in nanos world. This code directly calls the static 'SetTimeOfDay' method on the Sky class to update the in-game time to 9:25 AM. The snippet assumes the Sky static class is available and should be run on the client. Input parameters specify the hour and minute; valid ranges depend on the engine implementation.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/scripting/classes-guide.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n-- Makes it 9:25 AM\\nSky.SetTimeOfDay(9, 25)\n```\n\n----------------------------------------\n\nTITLE: Constructing a Vector in nanos.world using Lua\nDESCRIPTION: This snippet demonstrates how to create a new Vector instance in Lua for nanos.world by specifying X, Y, and Z floating-point components. No extra dependencies beyond the Vector struct/class itself are required. The main parameters are numeric values for each component, and the resulting object supports mathematical operations and network compression as described in the documentation.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/structs/vector.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal new_vector = Vector(1452.5, 512, 943.1)\n```\n\n----------------------------------------\n\nTITLE: Embedding Damageable Class Events in Markdown (JSX)\nDESCRIPTION: This code snippet inserts a JSX-style <EventsDeclaration> component to indicate where the list of events for the Damageable class should be rendered. Meant for environments with custom component support in markdown, it takes parameters for type ('Class') and name ('Damageable'). It acts solely as a documentation meta-marker and does not process logic or data directly.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/classes/base-classes/damageable.mdx#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<EventsDeclaration type=\\\"Class\\\" name=\\\"Damageable\\\" />\n```\n\n----------------------------------------\n\nTITLE: Placeholder Lua Example for Client-Side Tracing\nDESCRIPTION: This is a commented-out placeholder for a Lua code example intended to demonstrate how to use the `Trace` static class functions within a client-side script (`Client/Index.lua`) in the nanos-world environment. It currently contains no executable code.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/static-classes/trace.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n```lua title=\"Client/Index.lua\"\n\n```\n```\n\n----------------------------------------\n\nTITLE: Exporting a Collapsible Details Component in React JavaScript\nDESCRIPTION: This JavaScript snippet defines and exports a stateless React component named Details, which wraps its content within a <details> tag. It takes a summary prop to display as the <summary> and renders any passed child elements within the details section. React must be available as a dependency, and props 'summary' (string or node) and 'children' (node) are expected. Useful for documentation sites and UIs requiring collapsible content; input/returned data is always React nodes.\nSOURCE: https://github.com/nanos-world/docs/blob/master/src/components/MarkdownUtils.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const Details = ({ summary, children }) => (\n\t<details>\n\t\t<summary>{ summary }</summary>\n\t\t{ children }\n\t</details>\n);\n```\n\n----------------------------------------\n\nTITLE: Reading and Parsing JSON File with File API in Lua\nDESCRIPTION: This snippet demonstrates how to use the Nanos World File class to open a JSON configuration file and parse its contents using the JSON library. It requires both the File and JSON modules/classes to be available in the runtime. The first parameter to File specifies the relative path to the file (relative to the server or client's default directory, depending on environment). The output is the parsed JSON object, and all files are opened in binary mode by default. File access is sandboxed, and unauthorized paths will result in errors.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/classes/file.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal configuration_file = File(\"my_awesome_configuration.json\")\\n\\nlocal configuration_file_json = JSON.parse(configuration_file:Read())\n```\n\n----------------------------------------\n\nTITLE: Spawning a Character Entity via Constructor (nanos world, Lua)\nDESCRIPTION: Shows the straightforward instantiation of a Character entity via its constructor for use in nanos world. This snippet is intended to run on the server and assumes the Character class is available. The resulting object can be managed and manipulated via additional instance methods.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/scripting/classes-guide.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal my_character = Character()\n```\n\n----------------------------------------\n\nTITLE: CLI Package Creation Prompts - nanos world (nanos-console)\nDESCRIPTION: Example output from nanos world CLI after running the package creation command. It provides prompts for the user to enter package metadata such as title, author, and type. This output is informational and assists the user in confirming the creation process. No dependencies other than running the prior shell command. Inputs: user responses. Outputs: Console info lines.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/quick-start.mdx#_snippet_2\n\nLANGUAGE: nanos-console\nCODE:\n```\n```nanos-console\nINFO  Please enter the Package Title: (my-awesome-package)\nINFO  Please enter the Package Author: ()\nINFO  Please enter the Package Type: (game-mode)\n```\n```\n\n----------------------------------------\n\nTITLE: Starting the Server - nanos world (bash)\nDESCRIPTION: Shell command to start the nanos world server on Windows systems. This command launches the server application using the executable in the current directory. Prerequisite: server installed, and optionally configured to load the desired packages. There are no arguments required for default launch. Outputs: runs server, opens terminal window.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/quick-start.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n```bash\n./NanosWorldServer.exe\n```\n```\n\n----------------------------------------\n\nTITLE: Listing Community Game-Modes with CardLink (JSX/React)\nDESCRIPTION: This snippet lists community-contributed game-modes by rendering CardLink React components within a container div. Dependencies include the CardLink component and React. Each card conveys a title, description, image, and link unique to each game-mode, meant for display on a documentation site or catalogue. Inputs must be valid URLs and trusted descriptions, with the output being a visually organized set of cards.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/explore/game-modes-and-packages.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\\\"card-links\\\">\\n\\n<CardLink\\n\\ttitle=\\\"VZombies\\\"\\n\\tdescription=\\\"Game-mode Inspired by COD:Zombies by Voltaism\\\"\\n\\timage_src=\\\"https://user-images.githubusercontent.com/43786647/189530743-43c478bd-89b2-4eac-a223-724a74c312b8.jpg\\\"\\n\\thref=\\\"https://github.com/vugi99/nanos-vzombies\\\"\\n/>\\n\\n<CardLink\\n\\ttitle=\\\"Bottlefield\\\"\\n\\tdescription=\\\"Throw bottles to your enemies by Voltaism\\\"\\n\\timage_src=\\\"https://user-images.githubusercontent.com/43786647/189530846-2862ccf1-62dd-41e9-afd1-1c36922dd8ed.jpg\\\"\\n\\thref=\\\"https://github.com/vugi99/nanos-bottlefield\\\"\\n/>\\n\\n<CardLink\\n\\ttitle=\\\"Murder\\\"\\n\\tdescription=\\\"Game-mode of deception and murder, based off of Murder in the Dark by Timmy\\\"\\n\\timage_src=\\\"https://nanos-marketplace-public.s3.eu-central-003.backblazeb2.com/resources-header-images/assets/murder-underground/tudpuobtga9w41nx-460x230.webp\\\"\\n\\thref=\\\"https://github.com/Timmy-the-nobody/Murder\\\"\\n/>\\n\\n</div>\\n\n```\n\n----------------------------------------\n\nTITLE: Invoking a Custom Method on Player Instance - nanos world - Lua\nDESCRIPTION: This snippet shows how to invoke the previously defined AddScore method on a Player instance within nanos world. It assumes GetPlayerSomehow() returns a valid Player object and demonstrates adding 10 points to the Player's score. This usage exemplifies normal OOP method-call conventions in Lua within nanos world script contexts.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/scripting/extending-classes.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal my_player = GetPlayerSomehow()\nmy_player:AddScore(10)\n```\n\n----------------------------------------\n\nTITLE: Setting Crouching/Proning Transition Animations in Lua\nDESCRIPTION: This Lua code snippet sets the transition animations between crouching and proning states. It calls the `SetAnimationsTransitionCrouchingProning` method on a Character object, specifying the animation asset paths for the crouching-to-proning and proning-to-crouching transitions.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/assets-modding/creating-assets/animations/characters/character-locomotion-animations.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nCharacter.SetAnimationsTransitionCrouchingProning(anim_crouching_to_proning, anim_proning_to_crouching)\n```\n\n----------------------------------------\n\nTITLE: Destroying Player Character on Disconnect - nanos world (Lua)\nDESCRIPTION: Appends code to Server/Index.lua to subscribe to player 'Destroy' events. When a player leaves, it checks if they possess a character entity and destroys it to clean up. Dependency: nanos world entity event system. Inputs: Player disconnect/Destroy event. Outputs: removal of controlled Character entities, preventing resource leaks.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/quick-start.mdx#_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\n```lua\n-- When Player leaves the server, destroy it's possessing Character\nPlayer.Subscribe(\"Destroy\", function(player)\n    local character = player:GetControlledCharacter()\n    if (character) then\n        character:Destroy()\n    end\nend)\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Prop Shooter Weapon Logic in Lua\nDESCRIPTION: This server-side Lua script demonstrates how to create a prop shooter weapon. It loads the `default-weapons` package, spawns an AR4, disables its damage, and subscribes to its 'Fire' event. On firing, it calculates a spawn position in front of the shooter, spawns a teapot prop, and applies forward impulse to launch it.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/tutorials-and-examples/prop-shooter.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- Loads the default-weapons (note: it's recommended to add it to your Package's packages_requirements instead)\nServer.LoadPackage(\"default-weapons\")\n\n-- Spawns a Weapon from default-weapons package\nlocal my_weap = AR4(Vector(-2250, 9153, 192), Rotator(0, 90, 90))\nmy_weap:SetDamage(0)\n\nmy_weap:Subscribe(\"Fire\", function(weapon, shooter)\n    local control_rotation = shooter:GetControlRotation()\n    local forward_vector = control_rotation:GetForwardVector()\n    local spawn_location = shooter:GetLocation() + Vector(0, 0, 40) + forward_vector * Vector(200)\n\n    local prop = Prop(spawn_location, control_rotation, \"nanos-world::SM_TeaPot_Interior\", 1)\n    prop:AddImpulse(forward_vector * Vector(10000), true)\nend)\n```\n\n----------------------------------------\n\nTITLE: Creating a SceneCapture and Applying to a Prop Material (Lua)\nDESCRIPTION: This Lua code demonstrates how to instantiate a SceneCapture actor with specific position (Vector), rotation (Rotator), dimensions (width, height), view range (min, max), and render rate. It then creates a Prop actor and uses the 'SetMaterialFromSceneCapture' method to apply the live texture generated by the SceneCapture to the Prop's material.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/classes/scene-capture.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n```lua title=\"Client/Index.lua\" showLineNumbers\nlocal scene_capture = SceneCapture(\n  Vector(0, 0, 200),\n  Rotator(-15, 0, 0),\n  256,\n  256,\n  0,\n  5000,\n  100\n)\n\n-- Paints the Prop with the SceneCapture output\nlocal my_prop = Prop(Vector(200, 200, 100), Rotator(), \"nanos-world::SM_Cube\")\nmy_prop:SetMaterialFromSceneCapture(scene_capture)\n```\n```\n\n----------------------------------------\n\nTITLE: Example Asynchronous HTTP Request (Hypothetical Pre-Change) in Lua\nDESCRIPTION: Demonstrates making an asynchronous HTTP GET request using `HTTP.Request` with a callback function. This example illustrates Lua code that might break in a future hypothetical update (e.g., version 9.99) without the compatibility version system ensuring backward compatibility. It relies on the nanos-world HTTP API.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/packages/compatibility-versions.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Make an asynchronous HTTP request\nHTTP.Request(\"https://api.nanos.world/\", \"store/v1/packages/halloween\", \"GET\", \"\", \"application/json\", false, {}, function(status, data)\n    -- Do something with my data\nend)\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Remote Events on the Client - nanos world (Lua)\nDESCRIPTION: Shows how a client-side script subscribes to a remote event sent by the server, handling synchronization of data sent in network communication. Requires nanos world client scripting environment. Parameters correspond to those sent by Events.BroadcastRemote or Events.CallRemote.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/scripting/communicating-between-packages.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nEvents.SubscribeRemote(\\\"GetThisFromServer\\\", function(parameter1, parameter2, parameter3)\\n    Console.Log(\\\"Received \\\" .. parameter1) -- Received cool data from network\\nend)\n```\n\n----------------------------------------\n\nTITLE: Calling Blueprint Custom Event from Lua\nDESCRIPTION: This Lua snippet demonstrates spawning a Blueprint asset ('my-asset-pack::BP_AwesomeBlueprint') and then invoking a custom event named 'MyBlueprintCustomEvent' within that Blueprint. It passes three parameters (boolean, integer, string) to the Blueprint event using the `CallBlueprintEvent` method. This functionality is intended for client-side scripting.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/tutorials-and-examples/blueprint-communication.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n```lua title=\"Client/Index.lua\" showLineNumbers\n-- Spawns the Blueprint\nlocal blueprint = Blueprint(Vector(), Rotator(), \"my-asset-pack::BP_AwesomeBlueprint\")\n\nlocal param1 = true -- bool parameter\nlocal param2 = 123 -- integer parameter\nlocal param3 = \"hello there!\" -- string parameter\n\n-- Calls the event, passing the parameters\nblueprint:CallBlueprintEvent(\"MyBlueprintCustomEvent\", param1, param2, param3)\n```\n```\n\n----------------------------------------\n\nTITLE: Spawning and Equipping an AK47 via Default Weapons Package (Lua)\nDESCRIPTION: Demonstrates loading the default-weapons package and spawning a pre-configured AK47 weapon, then assigning it to a character. Requires the default-weapons package already installed and accessible on the server, plus a character object available as my_character. Uses Server.LoadPackage to load the asset and AK47() to instantiate the weapon at a specific position and rotation. Inputs: Vector and Rotator for weapon spawn location; outputs: Weapon instance picked up by the character. Constraints: must call within a valid Nanos World Lua runtime with the necessary package installed.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/classes/weapon.mdx#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n-- Loads the default-weapons (note: it's recommended to add it to your Package's packages_requirements instead)\\nServer.LoadPackage(\"default-weapons\")\\n\\n-- Spawning the AK47 from default-weapons package\\nlocal my_ak47 = AK47(Vector(1035, 154, 300), Rotator())\\n\\n-- Giving the Weapon to a Character\\nmy_character:PickUp(my_ak47)\n```\n\n----------------------------------------\n\nTITLE: Defining and Inheriting Custom Classes - nanos world Lua\nDESCRIPTION: Illustrates the updated pattern for creating a globally available class that inherits from Prop using the Inherit method. The Inherit function is called with a class name and an optional table of custom values, which makes the class and its data accessible globally. Users can retrieve custom fields directly, and global class registration ensures visibility across all packages.\nSOURCE: https://github.com/nanos-world/docs/blob/master/blog/2022-12-31-december.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n-- Note we are assigning the return of Inherit to a variable called\\n-- MyPropClassLocal, but also MyPropClass will be defined globally\\n-- as being our class, both variables points to the same Class table\\nMyPropClassLocal = Prop.Inherit(\"MyPropClass\", {\\n\\t\"my_custom_value\" = 123,\\n\\t\"my_another_value\" = \"hello\"\\n})\\n\\nlocal val = MyPropClass.my_custom_value\\n-- val == 123\n```\n\n----------------------------------------\n\nTITLE: Starting the Server (Linux) - nanos world (bash)\nDESCRIPTION: Shell command to start the nanos world server on Linux systems using the provided shell script. It requires that you have executable permissions and the script in your working directory. Running this starts the server as configured in the Config.toml. Output: server console launched.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/quick-start.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n```bash\n./NanosWorldServer.sh\n```\n```\n\n----------------------------------------\n\nTITLE: Spawning CharacterSimple in nanos world using Lua\nDESCRIPTION: Demonstrates how to instantiate a CharacterSimple object in nanos world at a specific location and rotation, assign a skeletal mesh and animation blueprint, and configure movement speed settings. Requires nanos world to be set up and available Lua APIs; uses the CharacterSimple class, Vector, and Rotator objects, and expects asset references for mesh and animation. Inputs include position, rotation, mesh, and animation strings, and speed values; outputs a configured CharacterSimple instance.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/classes/character-simple.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Spawns a Stack-O-Bot Character\\nlocal stack_o_bot = CharacterSimple(Vector(100, 0, 100), Rotator(0, 0, 0), \\\"nanos-world::SK_StackOBot\\\", \\\"nanos-world::ABP_StackOBot\\\")\\nstack_o_bot:SetSpeedSettings(275, 150)\n```\n\n----------------------------------------\n\nTITLE: Lua–JavaScript Bidirectional Events with WebUI - Lua\nDESCRIPTION: This snippet details how to send and subscribe to JavaScript events from Lua within a WebUI. It demonstrates initializing a WebUI, calling JS events with arguments, and registering Lua handlers for responses from JavaScript. Requires an accompanying JavaScript event system in the HTML, and the WebUI object. Inputs are event names and parameters. Outputs are triggered events in JS and recorded messages in Lua's console.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/classes/webui.mdx#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal my_ui = WebUI(\\\"Awesome UI\\\", \\\"file://UI/index.html\\\")\\n\\nlocal param1 = 123\\nlocal param2 = \\\"hello\\\"\\n\\n-- Calls a JS event\\nmy_ui:CallEvent(\\\"MyEvent\\\", param1, param2)\\n\\n-- Subscribes to receive JS events\\nmy_ui:Subscribe(\\\"MyAnswer\\\", function(param1)\\n    Console.Log(\\\"Received back! %s\\\", param1)\\n    -- Will output 'Received back! Hey there!'\\nend)\n```\n\n----------------------------------------\n\nTITLE: Removing Items from Sandbox Context Menu using Lua\nDESCRIPTION: Presents the function prototype for removing categories from the Context Menu in Sandbox via Lua scripting. Accepts a category ID string to identify which items to remove. Requires that the ID matches one used in a previous ContextMenu.AddItem call.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/explore/sandbox-game-mode/context-menu.md#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\n-- Removes the items from the Context Menu\\n---@param id string             Unique ID used to identify this category\\nfunction ContextMenu.RemoveItems(id)\\n\n```\n\n----------------------------------------\n\nTITLE: Removing Context Menu Items in Lua\nDESCRIPTION: Defines the Lua function `ContextMenu.RemoveItems` used to remove a category and all its associated items from the Sandbox Context Menu. It takes a single parameter, the string `id`, which must match the unique ID used when the category was initially added with `ContextMenu.AddItem`.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/explore/sandbox-game-mode/context-menu.md#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\n-- Removes the items from the Context Menu\n---@param id string             Unique ID used to identify this category\nfunction ContextMenu.RemoveItems(id)\n```\n\n----------------------------------------\n\nTITLE: Binding Blueprint Event Dispatcher in Lua\nDESCRIPTION: This Lua code snippet shows how to subscribe a Lua function to a Blueprint Event Dispatcher named 'GorgeousDispatcher'. It first spawns the relevant Blueprint ('my-asset-pack::BP_AwesomeBlueprint') and then uses the `BindBlueprintEventDispatcher` method. The provided Lua function will be executed whenever the 'GorgeousDispatcher' is called from within the Blueprint, receiving any arguments passed (a string and an integer in this example). This binding occurs on the client side.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/tutorials-and-examples/blueprint-communication.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n```lua title=\"Client/Index.lua\" showLineNumbers\n-- Spawns the Blueprint\nlocal blueprint = Blueprint(Vector(), Rotator(), \"my-asset-pack::BP_AwesomeBlueprint\",)\n\n-- Subscribes to a Blueprint Event Dispatcher\nblueprint:BindBlueprintEventDispatcher(\"GorgeousDispatcher\", function(self, arg1, arg2)\n    -- arg1 is a string and arg2 is an integer\n    Console.Log(\"Called from Blueprint!\", arg1, arg2)\nend)\n```\n```\n\n----------------------------------------\n\nTITLE: Starting nanos world Server with Auto-Download and CLI Config - Shell\nDESCRIPTION: This shell script provides a concise example for launching the nanos world server with a full configuration using command line parameters, enabling automatic download of required packages and assets. It sets the server name, description, map, game mode, packages, ports, maximum players, and logo, plus the auto_download flag for streamlined setup. It assumes NanosWorldServer.sh is in the system path and is executable. The output is a running server instance with all specified options applied.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/server-manual/server-configuration.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# Starts the server with all configs set and auto downloads the packages and assets if needed\n./NanosWorldServer.sh --name \"nanos world Amazing Sandbox\" --description \"Awesome Sandbox Server\" --map \"nanos-world::TestingMap\" --game_mode \"sandbox\" --packages \"battlefield-kill-ui,ts-fireworks-tools\" --port 7777 --query_port 7778 --max_players 32 --auto_download 1 --logo \"https://i.imgur.com/vnB8CB5.jpg\"\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Player and Prop Spawn Events in Lua\nDESCRIPTION: This Lua code illustrates how to use the event subscription system in nanos world. It subscribes to the 'Spawn' event for both 'Player' and 'Prop' classes. When a player joins or a prop is spawned, the respective callback function is executed, logging a message to the server console using 'Console.Log'.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/essential-concepts.mdx#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n```lua title=\"my-package/Server/Index.lua\" showLineNumbers\n-- Subscribes when a Player joins the server\nPlayer.Subscribe(\"Spawn\", function(player)\n\tConsole.Log(\"The player %s has joined the server!\", player:GetName())\nend)\n\n-- Subscribes when a Prop is spawned\nProp.Subscribe(\"Spawn\", function(prop)\n\tConsole.Log(\"A prop just spawned!\")\nend)\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring SceneCapture for Selective Actor Rendering (Lua)\nDESCRIPTION: This Lua snippet shows how to create a SceneCapture actor and configure it to only render specific actors using 'AddRenderActor'. It also demonstrates modifying rendering flags by disabling the atmosphere rendering with 'SetShowFlag', allowing for customization of the captured scene output.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/classes/scene-capture.mdx#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n```lua title=\"Client/Index.lua\" showLineNumbers\nlocal scene_capture = SceneCapture(\n  Vector(0, 0, 200),\n  Rotator(-15, 0, 0),\n  256,\n  256,\n  0,\n  5000,\n  100\n)\n\n-- Make a SceneCapture to only render a specific actor\nlocal my_prop = Prop(Vector(200, 200, 100), Rotator(), \"nanos-world::SM_Cube\")\nscene_capture:AddRenderActor(my_prop)\nscene_capture:SetShowFlag(\"Atmosphere\", false)\n```\n```\n\n----------------------------------------\n\nTITLE: Automating Bleeding-Edge Branch Install (Linux) - Shell\nDESCRIPTION: This shell command automates installation and validation of the nanos world server bleeding-edge branch on Linux. Notice the app_update parameter includes both the ID and branch specification with quotes, as required for bash parsing. Prerequisite: steamcmd accessible in shell. Outputs all process results.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/server-manual/server-installation.mdx#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nsteamcmd +force_install_dir ~/nanos-world-server +login anonymous +app_update \\\"1936830 -beta bleeding-edge\\\" validate +quit\n```\n\n----------------------------------------\n\nTITLE: Making Server Script Executable and Running nanos world Server (Bash)\nDESCRIPTION: First, uses `chmod +x` to grant execute permissions to the server's startup script (`NanosWorldServer.sh`). Then, executes the script `./NanosWorldServer.sh` to start the nanos world dedicated server. Assumes the user is in the directory where the server was installed (e.g., `nanos-world-server`).\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/tutorials-and-examples/hosting-server-4free-gcp.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nchmod +x ./NanosWorldServer.sh\n./NanosWorldServer.sh\n```\n\n----------------------------------------\n\nTITLE: Making Server Executable and Running it using Bash\nDESCRIPTION: These commands are run in the VM's shell after exiting SteamCMD and navigating to the server directory. The first command (`chmod +x`) grants execute permissions to the server start script. The second command (`./NanosWorldServer.sh`) executes the script to start the nanos world server.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/tutorials-and-examples/hosting-server-4free-gcp.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nchmod +x ./NanosWorldServer.sh\n./NanosWorldServer.sh\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Player and Prop Spawn Events in Lua\nDESCRIPTION: This Lua code demonstrates subscribing to game events within a server-side script (`Server/Index.lua`). It registers a callback function for the `Player.Spawn` event, logging the joining player's name via `player:GetName()`, and another for the `Prop.Spawn` event, logging a generic message. It utilizes the `Subscribe` method on nanos world classes (`Player`, `Prop`) and the `Console.Log` static function.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/essential-concepts.mdx#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- Subscribes when a Player joins the server\nPlayer.Subscribe(\"Spawn\", function(player)\n\tConsole.Log(\"The player %s has joined the server!\", player:GetName())\nend)\n\n-- Subscribes when a Prop is spawned\nProp.Subscribe(\"Spawn\", function(prop)\n\tConsole.Log(\"A prop just spawned!\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Creating Sphere and Box Triggers and Subscribing to Overlap Events in Lua\nDESCRIPTION: This Lua snippet demonstrates how to create two types of Triggers: a sphere and a box. It initializes a `sphere_trigger` using `Trigger(Vector, Rotator, Vector, TriggerType.Sphere, ...)` and subscribes to its `BeginOverlap` event to log a message. It also creates a `box_trigger` using `Trigger(Vector, Rotator, Vector, TriggerType.Box, ...)` and subscribes to both its `BeginOverlap` and `EndOverlap` events. This illustrates how to detect when entities enter or leave defined spatial areas. Dependencies include `Vector`, `Rotator`, `TriggerType`, `Color`, and `Console`.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/classes/trigger.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n```lua showLineNumbers\nlocal sphere_trigger = Trigger(Vector(-200, 100, 500), Rotator(), Vector(100), TriggerType.Sphere, true, Color(1, 0, 0))\n\nsphere_trigger:Subscribe(\"BeginOverlap\", function(trigger, actor_triggering)\n    Console.Log(\"Something entered my Sphere Trigger\")\nend)\n\nlocal box_trigger = Trigger(Vector(300, 200, 500), Rotator(0, 45, 0), Vector(150, 150, 150), TriggerType.Box, true, Color(0, 1, 0))\n\nbox_trigger:Subscribe(\"BeginOverlap\", function(trigger, actor_triggering)\n    Console.Log(\"Something entered my Box Trigger\")\nend)\n\nbox_trigger:Subscribe(\"EndOverlap\", function(trigger, actor_triggering)\n    Console.Log(\"Something left my Box Trigger\")\nend)\n```\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Tab to the Spawn Menu (Lua)\nDESCRIPTION: Example demonstrating how to add a new \"consumables\" tab to the Spawn Menu using `SpawnMenu.AddTab` on the client side. It specifies the tab's unique ID (`consumables`), label (`consumables`), and paths to the images (`food.png`, `food_inactive.png`) within the package for its active and inactive states. The code is placed inside `Package.Subscribe(\"Load\", ...)` to ensure it executes when the package loads.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/explore/sandbox-game-mode/spawn-menu.mdx#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\n```lua showLineNumbers title=\"your-package/Client/Index.lua\"\nPackage.Subscribe(\"Load\", function()\n    -- Adds a new tab\n    SpawnMenu.AddTab(\n        \"consumables\",\n        \"consumables\",\n        \"package://your-package/food.png\",\n        \"package://your-package/food_inactive.png\"\n    )\nend)\n```\n```\n\n----------------------------------------\n\nTITLE: Referencing the nanos world Config.toml Reference File - TOML\nDESCRIPTION: This snippet provides a TOML code reference for the server Config.toml file that is auto-generated and used to configure server behavior and features. Dependencies include the nanos world server, and the file is rewritten every server launch. Users should refer to the linked TOML file for parameter structure and syntax. The snippet does not contain inline TOML settings, but it is a direct reference to the main configuration template.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/server-manual/server-configuration.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nreference\nhttps://github.com/nanos-world/nanos-world-server/blob/main/Config.toml\n```\n\n----------------------------------------\n\nTITLE: Setting Sky Time Using Static Class Method in nanos world Lua\nDESCRIPTION: Demonstrates how to use a static class (Sky) to change the world's time of day with a direct method call in nanos world Lua scripting. Requires nanos world Lua environment and the Sky static class. Expects hour and minute as parameters; modifies the current sky time accordingly. No entity instantiation is needed, and this is typically performed client-side.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/scripting/classes-guide.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n-- Makes it 9:25 AM\\nSky.SetTimeOfDay(9, 25)\n```\n\n----------------------------------------\n\nTITLE: Setting Character Property with Enum in Lua\nDESCRIPTION: Illustrates setting the view mode of a character object by calling the 'SetViewMode' method and passing the 'ViewMode.FPS' Enum value as the desired mode.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/glossary/enums.mdx#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n```lua showLineNumbers\n-- Using Enums to set the Character View Mode\ncharacter:SetViewMode(ViewMode.FPS)\n```\n```\n\n----------------------------------------\n\nTITLE: Spawning a Prop Entity using an Asset Pack in Lua\nDESCRIPTION: This Lua snippet demonstrates how to spawn a 'Prop' entity in nanos world. It utilizes the 'Prop' constructor, passing a 'Vector' for position, a 'Rotator' for rotation, and a string representing the asset path ('nanos-world::SM_Cube') from the default 'nanos-world' Asset Pack. This is typically done within a server-side script (`Server/Index.lua`).\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/essential-concepts.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n```lua title=\"my-package/Server/Index.lua\" showLineNumbers\n-- Using the default 'nanos-world' Asset Pack, which is already natively included in the game\nlocal my_prop = Prop(Vector(), Rotator(), \"nanos-world::SM_Cube\")\n```\n```\n\n----------------------------------------\n\nTITLE: Defining and Inheriting VehicleWater Class in Lua\nDESCRIPTION: This Lua snippet demonstrates how to define a new vehicle class that inherits from VehicleWater, specifically to create a 'Boat' entity with custom properties. The constructor initializes the superclass with specific location and rotation parameters and assigns a default model. It also configures a door component for the boat using SetDoor, setting position, rotation, and constraint values for the physics simulation. Dependencies include the nanos-world engine with its VehicleWater class, and the code assumes access to Vector and Rotator primitives. Inputs are location and rotation vectors; outputs are the initialized Boat entity with properties set. Proper inheritance and resource paths are required for assets, and the code should be executed within the server-side scripting context.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/classes/vehicle-water.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nBoat = VehicleWater.Inherit(\"Boat\")\nBoat.name = \"Boat\"\nBoat.image = \"assets://nanos-world/Thumbnails/SK_Motorboat.jpg\"\nBoat.category = \"water\"\n\nfunction Boat:Constructor(location, rotation)\n\tself.Super:Constructor(location or Vector(), rotation or Rotator(), \"nanos-world::SK_Motorboat\")\n\n\tself:SetDoor(0, Vector(0, 0, 0), Vector(-120, 0, 55), Rotator(-10, 0, 0), 200, -100)\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Player Spawn and Destroy Events in Lua\nDESCRIPTION: This Lua script demonstrates subscribing to the Player 'Spawn' and 'Destroy' events. When a player spawns (connects), it creates a new Character instance at the origin (Vector(), Rotator()) using the 'nanos-world::SK_Male' model and makes the player possess it. Conversely, when a player is destroyed (disconnects), it retrieves the character currently controlled by the player and destroys that character entity, ensuring cleanup.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/classes/player.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Spawns and possess a Character when a Player joins the server\nPlayer.Subscribe(\"Spawn\", function(player)\n\tlocal new_char = Character(Vector(), Rotator(), \"nanos-world::SK_Male\")\n\tplayer:Possess(new_char)\nend)\n\n-- Destroys the Character when the Player leaves the server\nPlayer.Subscribe(\"Destroy\", function(player)\n\tlocal character = player:GetControlledCharacter()\n\tif (character) then\n\t\tcharacter:Destroy()\n\tend\nend)\n```\n\n----------------------------------------\n\nTITLE: Starting Interactive CLI Session - Shell - Windows\nDESCRIPTION: This snippet demonstrates how to launch the server in CLI interactive mode on Windows. It requires access to the NanosWorldServer.exe binary and the server's working directory. It takes the --cli argument to enable the CLI mode, allowing users to execute further commands within an interactive prompt.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/server-manual/command-line-interface.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n```shell\n./NanosWorldServer.exe --cli\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Discord Rich Presence Activity with nanos world (Lua)\nDESCRIPTION: Updates a player's Discord Rich Presence activity using nanos world API. Requires the nanos world Client API and optionally a custom Discord Application ID. The 'Client.SetDiscordActivity' method takes parameters for state, details, large image, and large text, which define the appearance of the presence. Inputs include activity strings and image keys; the function has to be called on the client side. Outputs are reflected in the user's Discord Rich Presence display.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/scripting/discord-integration.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal state = \"Working as Truck Driver\"\nlocal details = \"Awesome Roleplay\"\nlocal large_text = \"Honk!\"\nlocal large_image = \"nanos-world-full-world\"\n\nClient.SetDiscordActivity(state, details, large_image, large_text)\n```\n\n----------------------------------------\n\nTITLE: Attaching and Configuring a Weapon Sight in nanos world (Lua)\nDESCRIPTION: This Lua script spawns an AK47 weapon, attaches a 'RedDot' static mesh ('nanos-world::SM_T4_Sight') to its 'sight_socket' bone, sets the field of view multiplier for aiming down sights (ADS) to 0.35x, and adjusts the ADS camera transform offset (Vector(0, 0, -15.9)) for proper alignment with the attached sight. Dependencies include the NanosWorld API and the specified weapon and mesh assets.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/tutorials-and-examples/weapon-scope.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Spawning the AK47\nlocal my_ak47 = NanosWorldWeapons.AK47(Vector(1035, 154, 300), Rotator())\n\n-- Adds a StaticMesh Attached with a RedDot mesh into AK47 on sight_socket bone from AK47 model. As our AK47 model already\n-- have a bone named sight_socket at the right location, we can just attach to it, otherwise we would\n-- need to set it's Attach Location to where the RedDot fits and using bone name as empty \"\"\nmy_ak47:AddStaticMeshAttached(\"sight\", \"nanos-world::SM_T4_Sight\", \"sight_socket\")\n\n-- Makes the FOV multiplier reduces by 0.35x when ADS (aiming)\nmy_ak47.SightFOVMultiplier = 0.35\n\n-- Sets the ADS transform offset to fit the RedDot center position,\n-- each weapon will need a different offset to fit it's sight. AK47 + RedDot best fit is Z = -15.9\nmy_ak47:SetSightTransform(Vector(0, 0, -15.9), Rotator(0, 0, 0))\n```\n\n----------------------------------------\n\nTITLE: Installing or Updating nanos world Server by App ID - Bash\nDESCRIPTION: This SteamCMD command installs or updates the nanos world server using its app ID ('1936830'). When executed at the SteamCMD prompt, it downloads or updates the server files as needed. Prerequisites: The user must be logged in and have a valid installation directory set. Outputs include download progress and status messages.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/server-manual/server-installation.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nSteam> app_update 1936830\n```\n\n----------------------------------------\n\nTITLE: Binding Native Input Actions in Nanos World (Lua)\nDESCRIPTION: This snippet illustrates subscribing to native key binding events using Nanos World’s Lua API. It binds to 'MoveForward' and 'MoveBackward' actions (typically 'W' and 'S' keys), responding to key presses with corresponding callback functions. Required dependencies are the Nanos World Input static class and an understanding of available native binding names. Parameters include the binding action name, input event state, and an optional function argument (delta). This usage pattern is essential for responding to player movement controls without redefining the keys themselves.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/static-classes/input.mdx#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- Subscribes for native Bindings\nInput.Bind(\"MoveForward\", InputEvent.Pressed, function(delta)\n\t-- Pressed MoveForward key (usually W)\nend)\n\n-- Subscribes for native Bindings\nInput.Bind(\"MoveBackward\", InputEvent.Pressed, function(delta)\n\t-- Pressed MoveBackward key (usually S)\nend)\n```\n\n----------------------------------------\n\nTITLE: Rendering Card Links with React Components (JSX)\nDESCRIPTION: This snippet demonstrates how to render a list of game-mode cards using the custom CardLink React component, passing props such as title, description, image_src, and href. It requires the CardLink component (imported from '@site/src/components/_nanos') and React to function. Each card is rendered within a containing div with the className 'card-links', enabling styling and grouping. The inputs are statically defined and presented to inform users about different game-modes, with output being the visually formatted cards. The approach is easily extensible but relies on consistent prop names and valid links.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/explore/game-modes-and-packages.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\\\"card-links\\\">\\n\\n<CardLink\\n\\ttitle=\\\"Sandbox\\\"\\n\\tdescription=\\\"Game-mode inspired by Garry's Mod, features Spawn Menu, Tool Guns, NPCs and several funny custom entities\\\"\\n\\timage_src=\\\"https://user-images.githubusercontent.com/6226807/121760112-7d254d80-caff-11eb-968e-20f77aa3c7d3.png\\\"\\n\\thref=\\\"https://github.com/nanos-world/nanos-world-sandbox\\\"\\n/>\\n\\n<CardLink\\n\\ttitle=\\\"Deathmatch\\\"\\n\\tdescription=\\\"Deathmatch PVP game-mode inspired by CS:GO and Unreal Tournament, Ranking, Scoreboard and Power-Ups\\\"\\n\\timage_src=\\\"https://user-images.githubusercontent.com/6226807/121760221-ec02a680-caff-11eb-8b2a-c0aea9168e41.jpg\\\"\\n\\thref=\\\"https://github.com/nanos-world/nanos-world-deathmatch\\\"\\n/>\\n\\n<CardLink\\n\\ttitle=\\\"Halloween\\\"\\n\\tdescription=\\\"Special PVP game-mode inspired by Dead by Daylight, fight for your life to find the exit against the Horsemen\\\"\\n\\timage_src=\\\"https://user-images.githubusercontent.com/6226807/121760299-60d5e080-cb00-11eb-8809-6197d3c98c85.png\\\"\\n\\thref=\\\"https://github.com/gtnardy/nanos-world-halloween\\\"\\n/>\\n\\n</div>\\n\n```\n\n----------------------------------------\n\nTITLE: Exporting a Global Function from a Server Package in Lua\nDESCRIPTION: Shows how to define a server-side function (`SpawnCoolWeapon`) within one package and make it globally accessible to other server-side packages using `Package.Export`. Exported functions can return values but are only accessible on the same side (Server or Client). The function takes optional location and rotation parameters.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/scripting/communicating-between-packages.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\n```lua title=\"package-one/Server/Index.lua\" showLineNumbers\n-- Defines a function which you want to export\nfunction SpawnCoolWeapon(location, rotation)\n    local cool_weapon = Weapon(location or Vector(), rotation or Rotator(), ...)\n    return cool_weapon\nend\n\n-- Exports the function to be called by other Packages\nPackage.Export(\"SpawnCoolWeapon\", SpawnCoolWeapon)\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Map Asset in Assets.toml (TOML)\nDESCRIPTION: Defines the map asset 'MyAwesomeMap' within the Asset Pack's configuration file (Assets.toml). This entry under the '[assets.maps]' table maps the logical asset name 'MyAwesomeMap' to the corresponding cooked Unreal map file (MyAwesomeMap.umap), making it loadable in nanos world.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/assets-modding/creating-assets/maps-and-levels/importing-maps.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n# maps\n[assets.maps]\n    MyAwesomeMap = \"MyAwesomeMap\"\n```\n\n----------------------------------------\n\nTITLE: Referencing Nanos-world Default Asset Pack - TOML\nDESCRIPTION: This snippet provides a TOML reference to the DefaultAssetPack file hosted on GitHub. It is intended for users seeking to access or configure the default asset pack for nanos-world. The code is in TOML format and may be used as a reference or included in server configuration workflows; it requires network access to GitHub and assumes nanos-world standard modding infrastructure. No input parameters are needed; it serves as a direct static reference.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/assets-modding/default-asset-pack/default-assets-list.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nhttps://github.com/nanos-world/nanos-world-server/blob/main/DefaultAssetPack.toml\n```\n\n----------------------------------------\n\nTITLE: Checking Character Stance with Enums in Lua\nDESCRIPTION: Demonstrates subscribing to the 'StanceModeChange' event for a Character and using the 'StanceMode' Enum to compare the new stance value within the callback function. This improves readability compared to using raw numbers.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/glossary/enums.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n```lua showLineNumbers\n-- Using Enums to figure out which StanceMode the Character is\nCharacter.Subscribe(\"StanceModeChange\", function(character, old_stance, new_stance)\n\tif (new_stance == StanceMode.Standing) then\n\t\tConsole.Log(\"I'm Standing!\")\n\telse if (new_stance == StanceMode.Crouching) then\n\t\tConsole.Log(\"I'm Crouching!\")\n\tend\nend)\n```\n```\n\n----------------------------------------\n\nTITLE: Standard Folder Structure for a nanos world Scripting Package\nDESCRIPTION: This diagram represents the typical folder structure for a nanos world Package designed for scripting (`script`, `game-mode`, or `map` types). It includes separate folders for server-side (`Server/`), client-side (`Client/`), and shared (`Shared/`) Lua scripts, each with an entry point `Index.lua` responsible for loading other `.lua` files. The root contains the mandatory `Package.toml` configuration file.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/essential-concepts.mdx#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nmy-package/\n├── Server/\n│   ├── Index.lua\n│   └── *.lua\n├── Client/\n│   ├── Index.lua\n│   └── *.lua\n├── Shared/\n│   ├── Index.lua\n│   └── *.lua\n└── Package.toml\n```\n\n----------------------------------------\n\nTITLE: Spawning a Widget3D from a Widget in Lua\nDESCRIPTION: This Lua code demonstrates how to create a Widget3D. First, it instantiates a standard Widget of type NativeWidget.Text. Then, it modifies the widget's text content using CallBlueprintEvent. Finally, it spawns the Widget3D representation of this widget in the game world by calling the SpawnWidget3D() method on the Widget instance.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/classes/widget-3d.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n```lua title=\"Client/Index.lua\" showLineNumbers\n-- Spawns a Widget\nlocal my_text = Widget(NativeWidget.Text)\nmy_text:CallBlueprintEvent(\"SetText\", \"Hello World!\")\n\n-- Spawns the Widget3D directly from a Widget\nlocal my_widget_3d = my_text:SpawnWidget3D()\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Categories to Spawn Menu Tabs (Lua)\nDESCRIPTION: Example demonstrating how to add custom categories to Spawn Menu tabs using `SpawnMenu.AddCategory` on the client side. It adds a \"low-poly\" category (ID: `low-poly`, label: `low poly`) to the \"props\" tab and a \"world-war\" category (ID: `world-war`, label: `world war`) to the \"weapons\" tab, specifying respective image paths within the package. This code should run during package load, typically within `Package.Subscribe(\"Load\", ...)`, to ensure the categories are available.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/explore/sandbox-game-mode/spawn-menu.mdx#_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\n```lua showLineNumbers title=\"your-package/Client/Index.lua\"\nPackage.Subscribe(\"Load\", function()\n    -- Adds a new category to Props tab\n    SpawnMenu.AddCategory(\n        \"props\",\n        \"low-poly\",\n        \"low poly\",\n        \"package://your-package/low-poly.png\",\n        \"package://your-package/low-poly_inactive.png\"\n    )\n\n    -- Adds a new category to Weapons tab\n    SpawnMenu.AddCategory(\n        \"weapons\",\n        \"world-war\",\n        \"world war\",\n        \"package://your-package/ww.png\",\n        \"package://your-package/ww_inactive.png\"\n    )\nend)\n```\n```\n\n----------------------------------------\n\nTITLE: Spawning and Configuring WebUI Interfaces - Lua\nDESCRIPTION: This snippet demonstrates how to instantiate WebUI objects in nanos world using Lua for various sources, such as local HTML files or remote web URLs and from different package paths. It shows setting names, file paths/URLs, and widget visibility. Required dependencies include nanos world and relevant UI files. Inputs include the UI name, file/URL, and visibility state, and outputs are WebUI object instances. Limitations: path must exist and URLs must be accessible from the client.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/classes/webui.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Loading a local file\\nlocal my_ui = WebUI(\\n    \\\"Awesome UI\\\",            -- Name\\n    \\\"file://UI/index.html\\\",  -- Path relative to this package (Client/)\\n    WidgetVisibility.Visible  -- Is Visible on Screen\\n)\\n\\n-- Loading a Web URL\\nlocal my_browser = WebUI(\\n    \\\"Awesome Site\\\",          -- Name\\n    \\\"https://nanos.world\\\",   -- Web's URL\\n    WidgetVisibility.Visible  -- Is Visible on Screen\\n)\\n\\n-- Loading a local file from other package\\nlocal my_ui = WebUI(\\n    \\\"Awesome Other UI\\\",      -- Name\\n    \\\"file://other-package/Client/UI/index.html\\\",\\n    WidgetVisibility.Visible  -- Is Visible on Screen\\n)\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Light Object in Lua\nDESCRIPTION: This Lua code demonstrates how to create a new Light object in nanos world. It specifies the light's position (Vector), rotation (Rotator, relevant for Spot/Rect), color tint (Color), type (LightType enum), intensity, attenuation radius, cone angles (for Spot), max draw distance, inverse squared falloff setting, shadow casting, and initial enabled state. Comments explain each parameter.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/classes/light.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal my_light = Light(\n    Vector(-152, 245, 115),\n    Rotator(0, 90, 90), -- Relevant only for Rect and Spot light types\n    Color(1, 0, 0), -- Red Tint\n    LightType.Point, -- Point Light type\n    100, -- Intensity\n    250, -- Attenuation Radius\n    44, -- Cone Angle (Relevant only for Spot light type)\n    0, -- Inner Cone Angle Percent (Relevant only for Spot light type)\n    5000, -- Max Draw Distance (Good for performance - 0 for infinite)\n    true, -- Whether to use physically based inverse squared distance falloff, where Attenuation Radius is only clamping the light's contribution. (Spot and Point types only)\n    true, -- Cast Shadows?\n    true -- Enabled?\n)\n```\n\n----------------------------------------\n\nTITLE: Instantiating Vector2D for HUD/Drawing - Lua\nDESCRIPTION: Demonstrates instantiating a Vector2D with specific X and Y floating point values using its constructor in Lua. This example assumes that the Vector2D structure is properly imported or available in the current namespace, as per the nanos-world documentation. Users supply X and Y as floating point numbers; the constructor returns a new Vector2D instance. This is fundamental for HUD positioning or screen-space drawing. No external dependencies beyond Vector2D itself are needed.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/structs/vector2d.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal new_vector = Vector2D(1452.5, 512)\n```\n\n----------------------------------------\n\nTITLE: Using Enums for Event Handling and Method Calls in Lua\nDESCRIPTION: This Lua snippet demonstrates the practical application of Enums in nanos world scripting. It shows how to use the `StanceMode` Enum within an event callback (`Character.Subscribe`), the `LightType` Enum when constructing a `Light` object, and the `ViewMode` Enum when calling the `SetViewMode` method on a character. Using Enums like `StanceMode.Standing`, `LightType.Point`, and `ViewMode.FPS` makes the code more readable and maintainable compared to using their underlying numerical values. It relies on the nanos world API for Character events, Light creation, and character state modification.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/glossary/enums.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n```lua showLineNumbers\n-- Using Enums to figure out which StanceMode the Character is\nCharacter.Subscribe(\"StanceModeChange\", function(character, old_stance, new_stance)\n\tif (new_stance == StanceMode.Standing) then\n\t\tConsole.Log(\"I'm Standing!\")\n\telse if (new_stance == StanceMode.Crouching) then\n\t\tConsole.Log(\"I'm Crouching!\")\n\tend\nend)\n\n-- Using Enums to pass a Light Type to the constructor\nlocal my_light = Light(Vector(-5, 0, 50), Rotator(), Color.RED, LightType.Point)\n\n-- Using Enums to set the Character View Mode\ncharacter:SetViewMode(ViewMode.FPS)\n```\n```\n\n----------------------------------------\n\nTITLE: Overriding Character Method and Calling Super in Lua\nDESCRIPTION: Illustrates overriding the `Character:SetLocation` method while also executing the original, overridden method. The custom logic is executed first, and then `self:Super(new_location + Vector(1, 2, 3))` calls the original `SetLocation` implementation, passing a modified location vector.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/scripting/extending-classes.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nfunction Character:SetLocation(new_location)\n\t-- ... Do something\n    self:Super(new_location + Vector(1, 2, 3))\nend\n```\n\n----------------------------------------\n\nTITLE: Documenting Actor Class Methods via FunctionsDeclaration (JSX/Markdown)\nDESCRIPTION: This JSX-like component inserts documentation for all member functions of the Actor class. The documentation framework dynamically replaces <FunctionsDeclaration> with the relevant methods and, likely, their descriptions and signatures. It requires a system capable of parsing this custom tag.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/classes/base-classes/actor.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<FunctionsDeclaration type=\\\"Class\\\" name=\\\"Actor\\\" />\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing a Specific Player Spawn Callback in Lua\nDESCRIPTION: Illustrates subscribing multiple functions to the 'Player' 'Spawn' event and selectively unsubscribing one. A named function 'OnSpawnPlayer' is subscribed, then an anonymous function is subscribed. Finally, 'Player.Unsubscribe(\"Spawn\", OnSpawnPlayer)' removes only the subscription associated with the 'OnSpawnPlayer' function, leaving the anonymous function's subscription active.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/scripting/events-guide.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n```lua\n-- Declares the Callback beforehand\nfunction OnSpawnPlayer(player)\n    Console.Log(player:GetName() .. \" has joined!\")\nend\n\n-- Subscribes the event, passing the Callback\nPlayer.Subscribe(\"Spawn\", OnSpawnPlayer)\n\n-- Subscribes for the same event, twice\nPlayer.Subscribe(\"Spawn\", function(player)\n    Console.Log(player:GetName() .. \" has joined again!\")\nend)\n\n-- Unsubscribes only from the first Callback\nPlayer.Unsubscribe(\"Spawn\", OnSpawnPlayer)\n\n-- This will keep triggering \"player has joined again\" but will not trigger\n-- \"player has joined\" anymore\n```\n```\n\n----------------------------------------\n\nTITLE: Making Synchronous HTTP GET Request in Lua using nanos world HTTP\nDESCRIPTION: Shows how to perform a synchronous HTTP GET request using the `HTTP.Request` static method. The request is sent to '127.0.0.1:7777/', and the function blocks until the response is received. The return value is a table containing the response status (`Status`) and data (`Data`). This example requires the nanos world server environment and its `HTTP` static class. Like the asynchronous version, this is thread-safe.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/static-classes/http.mdx#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- Makes a synchronous HTTP Request\nlocal ret = HTTP.Request(\"127.0.0.1:7777\", \"/\", HTTPMethod.GET, \"\", \"application/json\", false, {})\n\nConsole.Log(ret.Status) -- 200\nConsole.Log(ret.Data) -- \"{\\\"players_count\\\":0,\\\"server_name\\\":\\\"nanos world server\\\"}\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Constructors for Inherited Entities (Lua)\nDESCRIPTION: Shows how to override or extend the constructor of an inherited Nanos World entity class in Lua for custom logic during instantiation. The child constructor can manipulate arguments before calling its parent (super) constructor. Inputs are the desired construction parameters, output is a newly constructed entity with custom initialization steps.\nSOURCE: https://github.com/nanos-world/docs/blob/master/blog/2022-12-07-november.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n-- Creates a new Class called \"MyCube\" inheriting from Prop\\nMyCube = Prop.Inherit(\"MyCube\")\\n\\n-- Defines my constructor with any parameters you desire\\nfunction MyCube:Constructor(loc, rot)\\n    -- Do any kind of logic here\\n    loc = loc + Vector(0, 0, 100)\\n\\n    -- Calls Super Constructor to finalize the construction\\n    self.Super:Constructor(loc, rot, \"nanos-world::SM_Cube\")\\nend\\n\\n-- Spawn it using your custom constructor\\nlocal cube = MyCube(Vector(123, 456, 100), Rotator())\n```\n\n----------------------------------------\n\nTITLE: Referencing Repository Asset Pack Configuration - TOML Example\nDESCRIPTION: This TOML code snippet gives a direct reference to the standard Asset Pack configuration file as maintained on GitHub. It is intended to show where users can view or acquire the latest official configuration format for Asset Packs in nanos world servers. Dependency is a TOML-compatible editor for editing the configuration file. The key input is the configuration's GitHub URL; the output is user reference.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/assets.mdx#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\nhttps://github.com/nanos-world/nanos-world-server/blob/main/Assets.toml\n```\n\n----------------------------------------\n\nTITLE: Defining and Handling Remote Events on Custom Entity Classes (Lua, Client)\nDESCRIPTION: Shows how to define a remote event handler method on a Lua-inherited entity class and subscribe to it for networked calls from the client side. Also demonstrates invoking a custom remote event. Dependencies: the Nanos World event system, networked classes, remote event infrastructure. Inputs: event parameters, outputs: remote event triggers and console logging.\nSOURCE: https://github.com/nanos-world/docs/blob/master/blog/2022-12-07-november.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nfunction MyCube:OnMyAnotherEvent(my_param)\\n    Console.Log(my_param)\\nend\\n\\nMyCube.SubscribeRemote(\"MyAnotherEvent\", MyCube.OnMyAnotherEvent)\\n\\nlocal my_cube = MyCube()\\nmy_cube:CallRemoteEvent(\"MyCustomEvent\", 123)\n```\n\n----------------------------------------\n\nTITLE: New Key Bindings Format With Multiple Keys - nanos world - Lua\nDESCRIPTION: Demonstrates the new table format for key bindings since version 1.33 of nanos world, where each action is mapped to an array of key strings, allowing multiple keys per action. Used with Input.GetScriptingKeyBindings or Input.GetGameKeyBindings. Requires nanos world 1.33+.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/packages/compatibility-versions.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\n-- KeyBinding = { Key, Key, ... }\\n{\\n\\t\\\"Jump\\\" = { \\\"Spacebar\\\", \\\"O\\\" },\\n\\t\\\"Crouch\\\" = { \\\"Control\\\" },\\n\\t\\\"Fire\\\" = { \\\"LeftMouse\\\", \\\"Return\\\" },\\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Server-Side Spawn Menu Item Addition Function (Lua)\nDESCRIPTION: Shows the function signature for `SpawnMenu.AddItem` on the server side. This function associates a unique item ID (`id`) within a specific tab (`tab`) with a `spawn_function`. This function defines how the item is created in the game world when selected from the menu and must match the `tab` and `id` used on the client side.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/explore/sandbox-game-mode/spawn-menu.mdx#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n```lua\n-- Adds a new item to the Spawn Menu\n---@param tab string                Tab of this item\n---@param id string                 Unique ID used to identify this item\n---@param spawn_function function\tSpawn function\nfunction SpawnMenu.AddItem(tab, id, spawn_function)\n```\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing a Specific Entity Event Callback in Lua\nDESCRIPTION: Illustrates subscribing multiple functions to a specific entity's 'EnterVehicle' event and selectively unsubscribing one. A named function 'OnCharacterEnteredVehicle' and an anonymous function are subscribed using 'my_character:Subscribe'. Then, 'my_character:Unsubscribe(\"EnterVehicle\", OnCharacterEnteredVehicle)' removes only the subscription associated with the named function, leaving the anonymous function's subscription active for that entity.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/scripting/events-guide.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\n```lua showLineNumbers\n-- Declares the Callback beforehand\nfunction OnCharacterEnteredVehicle(character, vehicle)\n    -- Entered vehicle!\nend\n\n-- Subscribes the event, passing the Callback\nmy_character:Subscribe(\"EnterVehicle\", OnCharacterEnteredVehicle)\n\n-- Subscribes for the same event, twice\nmy_character:Subscribe(\"EnterVehicle\", function(character, vehicle)\n    -- Entered vehicle again!\nend)\n\n-- Unsubscribes only from the first Callback\nmy_character:Unsubscribe(\"EnterVehicle\", OnCharacterEnteredVehicle)\n```\n```\n\n----------------------------------------\n\nTITLE: Calling Blueprint Custom Events from Lua\nDESCRIPTION: Demonstrates how to instantiate an Unreal Blueprint actor using the `Blueprint` class and then call a custom event defined within that Blueprint from a Lua script. Parameters can be passed from Lua to the Blueprint event.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/classes/blueprint.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Spawns the Blueprint\nlocal blueprint = Blueprint(Vector(), Rotator(), \"my-asset-pack::BP_MyBlueprint\")\n\nlocal param1 = 123\nlocal param2 = \"hello there!\"\n\n-- Calls the event, passing any parameters\nblueprint:CallBlueprintEvent(\"MyBlueprintCustomEvent\", param1, param2)\n```\n\n----------------------------------------\n\nTITLE: Accessing Methods from an Exported Table - nanos world (Lua)\nDESCRIPTION: Shows how to access and invoke methods from a previously exported library table in another package after using Package.Export. Table entries are called as usual Lua methods. Returns whatever is implemented in those methods.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/scripting/communicating-between-packages.md#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\n-- Calls the exported table\\nlocal awesome_result = MyAwesomeLibrary.CoolMethod(123, 456)\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Inheritance Levels in Lua\nDESCRIPTION: Shows how to achieve multiple levels of inheritance by creating a new class (`MyNewSubClass`) that inherits from another custom inherited class (`MyNewClass`), which itself inherits from `Prop`. It includes spawning an instance of the subclass using its default constructor.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/scripting/inheriting-classes.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- Creates a new Class called \"MyNewSubClass\" inheriting from MyNewClass\nMyNewSubClass = MyNewClass.Inherit(\"MyNewSubClass\")\n\n-- Spawn it using the default constructor\nlocal instance = MyNewSubClass(Vector(), Rotator(), \"nanos-world::SM_Cube\")\n```\n\n----------------------------------------\n\nTITLE: Configuring a 'map' Type Package in Package.toml for nanos world\nDESCRIPTION: Represents the configuration file ('Package.toml') structure for a 'map' package. This type combines scripting capabilities similar to 'script' packages with map-specific configurations, including defining the map asset to load, native spawn points, and custom map data. Detailed configuration parameters are specified in an external reference.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/packages/packages-guide.md#_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Setting Mesh Material Color Parameter in nanos world (Lua)\nDESCRIPTION: This Lua code snippet shows how to change the color tint of a StaticMesh. After spawning a cube and setting its material, it uses the `SetMaterialColorParameter` method to set the 'Tint' parameter to red (RGB: 1, 0, 0). This assumes the applied material has a color parameter named 'Tint'.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/tutorials-and-examples/painting-meshes.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- spawns a static mesh cube\nlocal my_cube = StaticMesh(Vector(300, 0, 100), Rotator(0, 45, 0), \"nanos-world::SM_Cube\")\n-- replaces it's materials with the nanos default Masked one\nmy_cube:SetMaterial(\"nanos-world::M_Default_Masked_Lit\")\n\n-- paints it red\nmy_cube:SetMaterialColorParameter(\"Tint\", Color(1, 0, 0))\n```\n\n----------------------------------------\n\nTITLE: Initializing Custom Discord Application in Lua\nDESCRIPTION: Shows how to initialize the Discord integration with a custom Application ID using the `Client.InitializeDiscord` function on the client side in nanos world. This allows for custom images and configuration in the Rich Presence. The `client_id` parameter should be replaced with the specific Discord Application ID. This must be called before using `Client.SetDiscordActivity` if a custom application is desired.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/scripting/discord-integration.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n```lua title=\"Client/Index.lua\"\nClient.InitializeDiscord(client_id)\n```\n```\n\n----------------------------------------\n\nTITLE: Manually Adding a Spawn Menu Item on Server (Lua)\nDESCRIPTION: Illustrates how to add a custom spawnable item on the server side using `SpawnMenu.AddItem`. It defines a custom function `SpawnMyIncredibleEntity` which handles the actual instantiation of `MyEntity` using location and rotation parameters automatically passed by the Spawn Menu. This function is then registered with `SpawnMenu.AddItem` for the \"tools\" tab and item ID \"IncredibleEntity\" within the `Package.Subscribe(\"Load\", ...)` event. The spawn function must return the spawned item.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/explore/sandbox-game-mode/spawn-menu.mdx#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\n```lua title=\"your-package/Server/Index.lua\" showLineNumbers\n-- Function which spawns an entity\n-- The parameters location, rotation, tab and id will be automatically\n-- passed by the Spawn Menu\nfunction SpawnMyIncredibleEntity(location, rotation, tab, id)\n    local my_stuff = MyEntity(location, rotation)\n\n    -- configure stuff...\n\t-- my_stuff:SetSomething(...)\n\n\t-- We must return the spawned item from this function\n    return my_stuff\nend\n\nPackage.Subscribe(\"Load\", function()\n    -- Adds this to spawn Menu (server side)\n   \tSpawnMenu.AddItem(\n\t\t\"tools\",\t\t\t\t-- tab id\n\t\t\"IncredibleEntity\",\t\t-- item id\n\t\tSpawnMyIncredibleEntity\t-- function which spawns and returns the item\n\t)\nend)\n```\n```\n\n----------------------------------------\n\nTITLE: Referencing Asset Files with SpecialPath URLs - Markdown\nDESCRIPTION: These code snippets demonstrate how to use nanos world's SpecialPath syntax to reference files within asset packs or other packages, supporting relative and conventional file paths as well. No code dependencies are required as these are passed as string parameters to engine APIs. Important parameters are the asset or package identifier and the internal path to the file, with support formats such as 'assets://', 'package://', and file-specific examples shown.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/glossary/basic-types.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`assets://[ASSET_PACK_PATH]/[PATH/TO/FILE.jpg]`\n```\n\nLANGUAGE: markdown\nCODE:\n```\n`package://[PACKAGE_PATH]/[PATH/TO/FILE.jpg]`\n```\n\nLANGUAGE: markdown\nCODE:\n```\n`assets://quaternius/Thumbnails/SK_Revolver_01.jpg`\n```\n\nLANGUAGE: markdown\nCODE:\n```\n`package://sandbox/Client/my_awesome_audio.ogg`\n```\n\nLANGUAGE: markdown\nCODE:\n```\n`package://my-fonts/Client/Roboto.ttf`\n```\n\n----------------------------------------\n\nTITLE: Styling HUD Elements with CSS\nDESCRIPTION: This CSS code defines the visual appearance and layout for the HUD elements specified in `index.html`. It sets font styles, sizes, colors, and positions the health and ammo containers at the bottom of the screen using absolute positioning. It includes background gradients and initially hides the weapon ammo container.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/tutorials-and-examples/basic-hud-html.md#_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nbody {\n    font-family: Tahoma, sans-serif;\n    font-size: 14px;\n    margin: 0px;\n    padding: 0px;\n    margin-bottom: 20px;\n}\n\n#weapon_ammo_container {\n    display: none;\n    position: absolute;\n    right: 0px;\n    bottom: 0px;\n    width: 200px;\n    height: 50px;\n    background-image: linear-gradient(to right, #00000000, #00000080);\n    text-align: right;\n    line-height: 47px;\n}\n\n#weapon_ammo_bag {\n    color: #ededed;\n    font-weight: bold;\n    font-size: 16px;\n    margin-right: 30px;\n    position: relative;\n    top: -4px;\n}\n\n#weapon_ammo_clip {\n    color: white;\n    font-weight: bold;\n    font-size: 32px;\n}\n\n#health_container {\n    position: absolute;\n    bottom: 0px;\n    width: 200px;\n    height: 50px;\n    background-image: linear-gradient(to left, #00000000, #00000080);\n}\n\n#health_container img {\n    height: 23px;\n    margin: 13px;\n}\n\n#health_current {\n    color: white;\n    font-size: 32px;\n    font-weight: bold;\n    position: absolute;\n    margin-top: 4px;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Color Picker Context Menu Item in Lua\nDESCRIPTION: Shows the Lua table structure for adding a 'color' picker item to the Context Menu. It includes a unique `id`, `type` as 'color', a display `label`, a `callback_event` triggered when the color changes, and an initial `value`. The initial color value should be provided as a hex string (e.g., using `Color.RED:ToHex(false)`).\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/explore/sandbox-game-mode/context-menu.md#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\n{\n\tid = \"id-of-item\",\n\ttype = \"color\",\n\tlabel = \"selec the color\",\n\tcallback_event = \"ContextMenu_MyButtonPressed\",\n\tvalue = Color.RED:ToHex(false)\n},\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Particle Effect in Lua\nDESCRIPTION: Creates a new instance of the Particle class at a specified Vector location and Rotator orientation. It uses the 'nanos-world::P_Explosion' particle asset and sets the 'auto_destroy' and 'auto_activate' flags to true. Requires `Vector`, `Rotator`, and `Particle` classes to be available in the environment.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/classes/particle.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n```lua showLineNumbers\nlocal my_particle = Particle(\n    Vector(-200, 100, 100),\n    Rotator(0, 0, 0),\n    \"nanos-world::P_Explosion\",\n    true, -- Auto Destroy?\n    true -- Auto Activate?\n)\n```\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Modifying a Prop Entity in Lua\nDESCRIPTION: This Lua code snippet, for a server-side script, demonstrates interacting with existing game entities. It retrieves the `Prop` entity with index 1 using the static method `Prop.GetByIndex(1)` and then modifies its visual appearance by calling the instance method `SetMesh` with a new asset path (\"nanos-world::SM_Pyramid_VR\") from the default asset pack.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/essential-concepts.mdx#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal some_prop = Prop.GetByIndex(1)\nsome_prop:SetMesh(\"nanos-world::SM_Pyramid_VR\")\n```\n\n----------------------------------------\n\nTITLE: Sending Network Events from Server to Clients in Lua\nDESCRIPTION: Illustrates sending data from a server-side script to clients using network events. `Events.BroadcastRemote` sends the event ('GetThisFromServer') and its data to all connected clients, while `Events.CallRemote` targets a specific player. Requires a valid Player object reference for `Events.CallRemote`.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/scripting/communicating-between-packages.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n```lua title=\"Server/Index.lua\" showLineNumbers\nlocal my_parameter1 = \"cool data from network\"\n\n-- Call this event to all Players\nEvents.BroadcastRemote(\"GetThisFromServer\", my_parameter1)\n\nlocal player_02 = GetPlayerSomehow()\n\n-- Or call this event to a specific player\nEvents.CallRemote(\"GetThisFromServer\", player_02, my_parameter1)\n```\n```\n\n----------------------------------------\n\nTITLE: Calling Exported Function from Another Package - nanos world (Lua)\nDESCRIPTION: Demonstrates calling a globally exported function defined in another package using the function's global name (as provided to Package.Export). The function returns any value defined in its implementation. Assumes the export has completed on the same script side.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/scripting/communicating-between-packages.md#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\n-- Calls the exported function\\nlocal cool_weapon = SpawnCoolWeapon(Vector(), Rotator())\n```\n\n----------------------------------------\n\nTITLE: Creating a Mirror Effect on a Mesh in nanos world (Lua)\nDESCRIPTION: This Lua code demonstrates how to create a mirror-like effect on a StaticMesh. By setting the 'Metallic' parameter to 1 (fully metallic) and the 'Roughness' parameter to 0 (perfectly smooth) using `SetMaterialScalarParameter`, the material becomes highly reflective.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/tutorials-and-examples/painting-meshes.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n-- spawns a static mesh cube\nlocal my_cube = StaticMesh(Vector(300, 0, 100), Rotator(0, 45, 0), \"nanos-world::SM_Cube\")\n\n-- replaces it's materials with the nanos default one\nmy_cube:SetMaterial(\"nanos-world::M_Default_Masked_Lit\")\n\n-- makes it fully metallic and glossy\nmy_cube:SetMaterialScalarParameter(\"Metallic\", 1)\nmy_cube:SetMaterialScalarParameter(\"Roughness\", 0)\n```\n\n----------------------------------------\n\nTITLE: Defining a Dropdown Selection Context Menu Item in Lua\nDESCRIPTION: Outlines the Lua table structure for a 'select' (dropdown) item in the Context Menu. Requires fields such as `id`, `type` as 'select', a display `label`, a `callback_event` triggered on selection change, the `id` of the initially `selected` option, and an `options` table where each entry has a unique `id` and a display `name`.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/explore/sandbox-game-mode/context-menu.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\n{\n\tid = \"id-of-item\",\n\ttype = \"select\",\n\tlabel = \"select the option\",\n\tcallback_event = \"SelectDropDownOption\",\n\tselected = \"id-opt-1\",\n\toptions = {\n\t\t{ id = \"id-opt-01\", name = \"Opt 01\" },\n\t\t{ id = \"id-opt-02\", name = \"Opt 02\" },\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Debian Testing Repository Sources\nDESCRIPTION: Configuration lines to be added to `/etc/apt/sources.list` on a Debian system. This allows the package manager (`apt`) to access packages from the 'testing' distribution channel, which is necessary for installing newer library versions like `libstdc++6` required by nanos-world.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/server-manual/server-linux-arm.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ndeb http://ftp.fr.debian.org/debian/ testing main contrib non-free\ndeb-src http://ftp.fr.debian.org/debian/ testing main contrib non-free\n```\n\n----------------------------------------\n\nTITLE: Defining Loading Screen Package Structure\nDESCRIPTION: Illustrates the required directory structure for a custom loading screen package within the 'Packages/' directory. A `Package.toml` manifest file and an `index.html` entry point are necessary at the root of the package folder, alongside any other required assets like CSS or JS files. The package type must be 'loading-screen'.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/packages/loading-screen.md#_snippet_0\n\nLANGUAGE: folder-structure\nCODE:\n```\n```folder-structure\nPackages/\n└── my-loading-screen/\n    ├── Package.toml\n    ├── index.html\n    ├── style.css\n    └── ...\n```\n```\n\n----------------------------------------\n\nTITLE: Subscribing to a Custom Event on the Server in Lua\nDESCRIPTION: Shows how a server-side script in a different package (`package-two`) subscribes to a custom event ('MyAwesomeEvent') using `Events.Subscribe`. The provided callback function receives the parameters sent by the calling package and logs them. This script listens for the event triggered in the previous example.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/scripting/communicating-between-packages.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n```lua title=\"package-two/Server/Index.lua\" showLineNumbers\nEvents.Subscribe(\"MyAwesomeEvent\", function(parameter1, parameter2, parameter3)\n    Console.Log(\"Received \" .. parameter1) -- Received 123\n    Console.Log(\"Received \" .. parameter2) -- Received hello there\n    Console.Log(\"Received \" .. parameter3) -- Received table\nend)\n```\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Tool Gun Class with Visual and Behavior Parameters - Lua\nDESCRIPTION: This Lua snippet demonstrates how to define a new ToolGun class ('MyToolGun') by inheriting from the Sandbox game-mode's base ToolGun class. The class is initialized with custom parameters for menu display (name, image, category), in-game tutorials, and crosshair trace debugging settings. This structure enables the ToolGun to have its own visual identification and user guidance, as well as customized collision detection behavior when aiming. Dependencies include the 'ToolGun' base class (provided by nanos world Sandbox) and valid image and category references. All parameters, while optional, enhance the user experience and are processed client-side only.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/explore/sandbox-game-mode/tool-guns.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nMyToolGun = ToolGun.Inherit(\"MyToolGun\", {\n\t-- Spawn Menu\n\tname = \"My Tool Gun\",\n\timage = \"package://my-package/MyToolGun.webp\",\n\tcategory = \"special\",\n\n\t-- Tool Gun Tutorials which will display on Top Left\n\ttutorials = {\n\t\t{ key = \"LeftClick\", text = \"spawn balloon\" },\n\t\t{ key = \"Undo\", text = \"undo spawn\" },\n\t\t{ key = \"ContextMenu\", text = \"balloon settings\" },\n\t}\n\n\t-- Tool Gun Crosshair Trace Debug Settings which will display on World when aiming\n\tcrosshair_trace = {\n\t\t-- Which Collision Channel to trace\n\t\tcollision_channel = CollisionChannel.WorldStatic | CollisionChannel.WorldDynamic,\n\t\t-- Which Color to display when it traces an entity\n\t\tcolor_entity = Color.GREEN,\n\t\t-- Which Color to display when it traces anything else\n\t\tcolor_no_entity = Color.RED,\n\t}\n})\n```\n\n----------------------------------------\n\nTITLE: Example Asset Pack Directory Structure - Plaintext\nDESCRIPTION: Visual representation of the correct way to arrange asset and configuration files for a nanos world asset pack. Structure shows cooked asset placement and mandatory inclusion of an Assets.toml at the root. Inputs: actual asset files (e.g., .uasset, .uexp, .ubulk) and the config TOML file. Output: ready-to-use asset pack directory for deployment. Folders and files must match this structure for the assets to load correctly.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/assets-modding/creating-assets/importing-assets.md#_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nAssets/\\n├── my-asset-pack/\\n│   ├── SM_Cube.uasset\\n│   ├── SM_Cube.uexp\\n│   ├── SM_Cube.ubulk\\n│   ├── SM_Asset_02.uasset\\n│   ├── ...\\n│   └── Assets.toml\\nConfig.toml\\nNanosWorldServer.exe\n```\n\n----------------------------------------\n\nTITLE: Setting Standing Locomotion Animation in nanos world (Lua)\nDESCRIPTION: Sets the BlendSpace animation for the character's standing locomotion state (idle, walk, run) using the `Character.SetAnimationIdleWalkRunStanding` Lua method. Requires the path to a valid BlendSpace asset (`anim_path`) and optionally enables/disables the built-in Turn In Place feature (`enable_tip`).\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/assets-modding/creating-assets/animations/characters/character-locomotion-animations.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nCharacter.SetAnimationIdleWalkRunStanding(anim_path, enable_tip)\n```\n\n----------------------------------------\n\nTITLE: Creating Automatic Door Interactions Using nanos-world in Lua\nDESCRIPTION: This Lua snippet sets up an automatic door mechanism in a nanos-world server by spawning a door mesh and a hinge, attaching them with correct pivot logic, and configuring a trigger that detects when player-controlled characters move nearby. It responds to entry and exit events by smoothly rotating the door mesh and playing a corresponding animation on the character. Dependencies include the nanos-world scripting API (StaticMesh, Trigger, Rotator, Vector, etc.), and the script is intended for server-side use. Inputs are triggered automatically by player proximity, with outputs being animated door movement and character actions; meshes must be appropriately named and available, and the door mesh pivot should be considered for realistic hinges.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/tutorials-and-examples/doors.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Let\\'s spawn a SM_Plane to be our door, and an empty (SM_None) StaticMesh to be our Hinge.\\n-- As the SM_Plane has it\\'s pivot at the center of the mesh, we need to have a Hinge to make it rotate properly.\\n-- This is not needed if your Door Mesh already has the pivot at the correct Hinge location.\\n\\n-- Spawns the Hinge (which we rotated 90º to stand up)\\nlocal door = StaticMesh(Vector(0, 0, 100), Rotator(0, 0, 90), \\\"nanos-world::SM_None\\\")\\n\\n-- Spawns the Door mesh, scales it to be in the format of a door, and attaches it to the Hinge\\nlocal door_mesh = StaticMesh(Vector(), Rotator(), \\\"nanos-world::SM_Plane\\\")\\ndoor_mesh:SetScale(Vector(1, 2, 1))\\n\\n-- Attaches to the Hinge at a relative location of 50 units (to be at the hinge location)\\ndoor_mesh:AttachTo(door)\\ndoor_mesh:SetRelativeLocation(Vector(50, 0, 0))\\n\\n-- Spawns our trigger at the center of the Door\\nlocal trigger = Trigger(Vector(0, 0, 100), Rotator(), 150)\\n\\n-- Registers the trigger when a Character moves in\\ntrigger:Subscribe(\\\"BeginOverlap\\\", function(trigger, actor)\\n    if (actor:GetType() ~= \\\"Character\\\") then return end\\n\\n    -- Plays an opening door animation on the Character\\n    actor:PlayAnimation(\\\"nanos-world::AM_Mannequin_DoorOpen_01\\\", AnimationSlotType.UpperBody)\\n\\n    -- Rotates the door -90º smoothly\\n    door:RotateTo(Rotator(0, -90, 90), 1)\\nend)\\n\\n-- Registers the trigger when a Character moves out\\ntrigger:Subscribe(\\\"EndOverlap\\\", function(trigger, actor)\\n    if (actor:GetType() ~= \\\"Character\\\") then return end\\n\\n    -- Rotates the door back to original position, smoothly\\n    door:RotateTo(Rotator(0, 0, 90), 1)\\nend)\\n\n```\n\n----------------------------------------\n\nTITLE: Initializing WebUI Instances in Lua\nDESCRIPTION: Demonstrates creating WebUI instances in Lua for different sources. It shows loading from a local file within the current package's Client/ directory, loading a remote web URL, and loading a local file from a different package.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/classes/webui.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Loading a local file\nlocal my_ui = WebUI(\n    \"Awesome UI\",            -- Name\n    \"file://UI/index.html\",  -- Path relative to this package (Client/)\n    WidgetVisibility.Visible  -- Is Visible on Screen\n)\n\n-- Loading a Web URL\nlocal my_browser = WebUI(\n    \"Awesome Site\",          -- Name\n    \"https://nanos.world\",   -- Web's URL\n    WidgetVisibility.Visible  -- Is Visible on Screen\n)\n\n-- Loading a local file from other package\nlocal my_ui = WebUI(\n    \"Awesome Other UI\",      -- Name\n    \"file://other-package/Client/UI/index.html\",\n    WidgetVisibility.Visible  -- Is Visible on Screen\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Sphere and Box Triggers and Handling Overlap Events in Lua\nDESCRIPTION: This Lua snippet demonstrates the creation of two types of triggers: a Sphere trigger and a Box trigger using the `Trigger` constructor with specific parameters like position (`Vector`), rotation (`Rotator`), size (`Vector`), type (`TriggerType`), visibility (boolean), and color (`Color`). It also shows how to subscribe callback functions to the `BeginOverlap` and `EndOverlap` events using the `Subscribe` method to log messages via `Console.Log` when an entity interacts with the trigger area. This relies on the nanos-world API.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/classes/trigger.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n```lua showLineNumbers\nlocal sphere_trigger = Trigger(Vector(-200, 100, 500), Rotator(), Vector(100), TriggerType.Sphere, true, Color(1, 0, 0))\n\nsphere_trigger:Subscribe(\"BeginOverlap\", function(trigger, actor_triggering)\n    Console.Log(\"Something entered my Sphere Trigger\")\nend)\n\nlocal box_trigger = Trigger(Vector(300, 200, 500), Rotator(0, 45, 0), Vector(150, 150, 150), TriggerType.Box, true, Color(0, 1, 0))\n\nbox_trigger:Subscribe(\"BeginOverlap\", function(trigger, actor_triggering)\n    Console.Log(\"Something entered my Box Trigger\")\nend)\n\nbox_trigger:Subscribe(\"EndOverlap\", function(trigger, actor_triggering)\n    Console.Log(\"Something left my Box Trigger\")\nend)\n```\n```\n\n----------------------------------------\n\nTITLE: Automated Bleeding-Edge Server Installation on Windows (Shell)\nDESCRIPTION: Provides a single command-line instruction for Windows to automatically download/update the bleeding-edge version of the nanos world server using `steamcmd.exe`. It includes the `-beta bleeding-edge` flag in the `app_update` command.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/server-manual/server-installation.mdx#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nsteamcmd.exe +force_install_dir C:/nanos-world-server +login anonymous +app_update 1936830 -beta bleeding-edge validate +quit\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Loading Progress Updates in JavaScript\nDESCRIPTION: Demonstrates how to subscribe to the 'UpdateScreen' event within the loading screen's JavaScript (e.g., `index.js`). This event provides real-time updates on the loading/downloading progress, including status messages (`message`, `message_secondary`), progress values (`progress_small`, `progress_small_total`, `progress`, `progress_total`), and the current stage (`current_stage`). These parameters allow dynamic updates to the loading screen's HTML, such as filling progress bars.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/packages/loading-screen.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript title=\"Packages/my-loading-screen/index.js\" showLineNumbers\nEvents.Subscribe(\"UpdateScreen\", function(message, message_secondary, progress_small, progress_small_total, progress, progress_total, current_stage) {\n    // Update your HTML here\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Pack Unreal Engine Settings - TOML\nDESCRIPTION: Defines the core Unreal Engine parameters in the Assets.toml to ensure assets are referenced and loaded correctly by nanos world. Dependencies: must be placed in the root of each asset pack (Asset.toml). Key parameters include 'unreal_folder' (asset root reference name), 'unreal_version' (engine version used for export), and 'is_plugin_content' (asset pack type). Inputs: set strings/bools as per your project setup. Outputs: guides asset referencing and compatibility in-game. Must not be omitted or misconfigured.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/assets-modding/creating-assets/importing-assets.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n# unreal engine configurations\\n[unreal]\\n    # unreal engine folder - the name of the root folder (the one inside UnrealProject/Content/) which the assets will have references to each other\\n    unreal_folder =     \\\"MyAssetPack\\\"\\n    # unreal engine version - unreal version this asset pack was compiled on\\n    unreal_version =    \\\"5.0.3\\\"\\n    # whether this asset pack was created as a plugin content\\n    is_plugin_content = false\n```\n\n----------------------------------------\n\nTITLE: Server Startup Output - nanos world (nanos-console)\nDESCRIPTION: Typical console output after launching the nanos world server, showing version, loaded packages, and server status. Contains information about package loading, including scripted print output. Aids in debugging and confirming package/server initialization. Produced automatically by server on launch; input: none, output: info lines in server console.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/quick-start.mdx#_snippet_6\n\nLANGUAGE: nanos-console\nCODE:\n```\n```nanos-console\n  INFO  nanos world (C) Copyright nanos. All Rights Reserved.\n  INFO  Starting Server at Port: 7777. Version: 0.0.0. Map: 'default-blank-map'.\n  INFO  Loading Package 'my-awesome-package'...\nSCRIPT  Loading some Props =D\n  INFO  Package 'my-awesome-package' loaded.\n  INFO  Loading Package 'default-blank-map'...\n  INFO  Package 'default-blank-map' loaded.\n```\n```\n\n----------------------------------------\n\nTITLE: Adding nanos world Event Handling to React App (Events.js) - JavaScript\nDESCRIPTION: This JavaScript code exports an Events object to bridge between the React app and the nanos world game's native event system. It defines 'Call' and 'Subscribe' methods that safely access 'window.Events', enabling components to trigger or listen to game-side events. This file is required as a dependency in React components that communicate with the game's event system. It should be imported wherever nanos world events are needed.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/tutorials-and-examples/basic-hud-react.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst Events = {};\n\nEvents.Call = function (sEventName, ...args) {\n    if (typeof (window.Events) == \"undefined\") return;\n    window.Events.Call(sEventName, ...args);\n}\n\nEvents.Subscribe = function (sEventName, callback) {\n    if (typeof (window.Events) == \"undefined\") return;\n    window.Events.Subscribe(sEventName, callback);\n}\n\nexport default Events;\n```\n\n----------------------------------------\n\nTITLE: Creating a Character-Triggered Prop Rain Effect in Lua\nDESCRIPTION: This Lua script initializes a Trigger zone. It subscribes to the 'BeginOverlap' event to start a timer when a Character enters, spawning Props ('nanos-world::SM_Crate_07') every 100ms at random locations above the trigger. The 'EndOverlap' event stops the timer and prop spawning when the Character leaves. Depends on nanos-world API functions like Trigger, Vector, Timer, Prop, and Character types.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/tutorials-and-examples/prop-rain.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Spawns a Trigger\nmy_trigger = Trigger(Vector(200, 200, 0), 200)\n\n-- Defines my_timer globally to be used to store Timer\nmy_timer = nil\n\n-- Sets BeginOverlap event\nmy_trigger:Subscribe(\"BeginOverlap\", function(trigger, actor_triggering)\n    -- Only activates if a Character enters it\n    if (actor_triggering:GetType() ~= \"Character\") then\n        return\n    end\n\n    -- Sets a Timer at each 100ms to spawn a Prop\n    my_timer = Timer.SetInterval(function()\n        -- Gets random Location and Rotation\n        local prop_spawn_location = Vector(math.random(100, 300), math.random(100, 300), math.random(800, 1200))\n        local prop_spawn_rotation = Rotator(math.random(0, 360), math.random(0, 360), math.random(0, 360))\n\n        -- Spawns a Crate\n        Prop(prop_spawn_location, prop_spawn_rotation, \"nanos-world::SM_Crate_07\")\n    end, 100)\nend)\n\n-- Sets EndOverlap event\nmy_trigger:Subscribe(\"EndOverlap\", function(trigger, actor_triggering)\n    -- Only deactivates if a Character leaves it\n    if (actor_triggering:GetType() ~= \"Character\") then\n        return\n    end\n\n    -- Stops/Clear the Timer\n    if (my_timer ~= nil) then\n        Timer.ClearTimeout(my_timer)\n    end\nend)\n```\n\n----------------------------------------\n\nTITLE: Importing Classes Component for Material Customization - React - JavaScript\nDESCRIPTION: Imports the Classes component from local project components for use within the documentation, enabling usage of Paintable-related React components. The import statement is necessary for rendering UI elements or interactive documentation pieces related to materials. It assumes the environment is set up with the appropriate project structure and uses ES module syntax.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/assets-modding/default-asset-pack/default-materials.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Classes } from '@site/src/components/_nanos';\n```\n\n----------------------------------------\n\nTITLE: Basic Client-Side Event Handling in Lua\nDESCRIPTION: This Lua snippet demonstrates how a client script can subscribe to local events using `Events.Subscribe` and call them using `Events.Call`. It also shows how to subscribe to events triggered by the server using `Events.SubscribeRemote` and trigger events on the server using `Events.CallRemote`. Requires the `Events` and `Console` static classes.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/static-classes/events.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n```lua title=\"Client/Index.lua\" showLineNumbers\n-- register for a local Event (local = client only)\nEvents.Subscribe(\"MyLocalEvent\", function(my_text)\n    Console.Log(\"Event received locally! \" .. my_text)\n    -- outputs \"Event received locally! hello nanos world!\"\nend)\n\n-- calls a local Event in all Local Packages\nEvents.Call(\"MyLocalEvent\", \"hello nanos world!\")\n\n-- register for a server Event (remote = server)\nEvents.SubscribeRemote(\"MyClientEvent\", function(my_text)\n    Console.Log(\"Event received from server! \" .. my_text)\n    -- outputs \"Event received from server! hello nanos world!\"\nend)\n\n-- calls a remote Event in all Server Packages\nEvents.CallRemote(\"MyServerEvent\", \"hello nanos world!\")\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Widget Image Brush from WebUI - Widget and WebUI Lua\nDESCRIPTION: Demonstrates assigning a WebUI as a brush for an Image widget using the Widget class in Lua. A WebUI with a hidden initial state is created for a URL, then associated with an Image widget through the SetBrushFromMaterial blueprint event. This approach requires WebUI, Widget, and NativeWidget classes and expects integration with Unreal Engine's material system. Key parameters involve WebUI initialization and mapping to widget brushes. Output is an image widget displaying the web content as its brush material.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/classes/widget.mdx#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal webui = WebUI(\"mywebui\", \"https://google.com\", WidgetVisibility.Hidden)\n\nlocal my_image = Widget(NativeWidget.Image)\nmy_image:CallBlueprintEvent(\"SetBrushFromMaterial\", webui)\nmy_image:AddToViewport()\n```\n\n----------------------------------------\n\nTITLE: Configuring SceneCapture to Render Specific Actors (Lua)\nDESCRIPTION: This Lua code shows how to instantiate a `SceneCapture` and configure it to render only specific actors. After creating the `SceneCapture` and a `Prop`, it uses `AddRenderActor` to specify that only `my_prop` should be included in the capture. It also demonstrates disabling the rendering of the atmosphere within the captured scene using `SetShowFlag(\"Atmosphere\", false)`. Dependencies include `SceneCapture`, `Vector`, `Rotator`, and `Prop`.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/classes/scene-capture.mdx#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal scene_capture = SceneCapture(\n  Vector(0, 0, 200),\n  Rotator(-15, 0, 0),\n  256,\n  256,\n  0,\n  5000,\n  100\n)\n\n-- Make a SceneCapture to only render a specific actor\nlocal my_prop = Prop(Vector(200, 200, 100), Rotator(), \"nanos-world::SM_Cube\")\nscene_capture:AddRenderActor(my_prop)\nscene_capture:SetShowFlag(\"Atmosphere\", false)\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a Quat Instance in Lua\nDESCRIPTION: This Lua snippet demonstrates how to create a new `Quat` instance with specified components (w, x, y, z are typically represented, though the order here might depend on the specific implementation, likely x, y, z, w based on common conventions) and then call the `Rotator()` method on it to potentially convert it to a different rotation representation. Note the typo 'new_quaterion' in the original example's second line.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/structs/quat.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n```lua showLineNumbers\nlocal new_quaternion = Quat(0.5, 0.5, 1, -1)\nlocal rotation = new_quaterion:Rotator()\n```\n```\n\n----------------------------------------\n\nTITLE: Declaring Server-Side Spawn Item with SpawnMenu.AddItem and Spawn Function (nanos world, Lua)\nDESCRIPTION: Defines a server-side spawn function that creates and returns an entity; registers this function as a spawner for a specific item in the Spawn Menu using SpawnMenu.AddItem. Runs in response to the 'Load' event in the package system. Dependencies include the nanos world package system, entity constructors, and SpawnMenu server-side API. Key parameters include tab ID, item ID, and spawn function which receives position, rotation, tab, and id. Output is the spawned entity instance.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/explore/sandbox-game-mode/spawn-menu.mdx#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n-- Function which spawns an entity\\n-- The parameters location, rotation, tab and id will be automatically\\n-- passed by the Spawn Menu\\nfunction SpawnMyIncredibleEntity(location, rotation, tab, id)\\n    local my_stuff = MyEntity(location, rotation)\\n\\n    -- configure stuff...\\n\\t-- my_stuff:SetSomething(...)\\n\\n\\t-- We must return the spawned item from this function\\n    return my_stuff\\nend\\n\\nPackage.Subscribe(\"Load\", function()\\n    -- Adds this to spawn Menu (server side)\\n   \\tSpawnMenu.AddItem(\\n\\t\\t\"tools\",\\t\\t\\t\\t\\t-- tab id\\n\\t\\t\"IncredibleEntity\",\\t\\t-- item id\\n\\t\\tSpawnMyIncredibleEntity\\t-- function which spawns and returns the item\\n\\t)\\nend)\n```\n\n----------------------------------------\n\nTITLE: Context Menu Item Format: Checkbox Type in Lua\nDESCRIPTION: Provides a Lua table structure for a 'checkbox' item in the Context Menu. Must be included in the items array when adding a category via ContextMenu.AddItem. The 'id' distinguishes the item, 'type' must be 'checkbox', 'label' is the display name, and 'callback_event' triggers when toggled.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/explore/sandbox-game-mode/context-menu.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n{\\n\\tid = \\\"id-of-item\\\",\\n\\ttype = \\\"checkbox\\\",\\n\\tlabel = \\\"my check box\\\",\\n\\tcallback_event = \\\"ContextMenu_MyCheckboxSelected\\\"\\n},\\n\n```\n\n----------------------------------------\n\nTITLE: Stopping Menu Music via Loading Screen (Events.Call in JavaScript)\nDESCRIPTION: This JavaScript snippet calls the 'StopMenuMusic' event using the nanos world event system. It is intended to turn off the default background menu music when the custom loading screen is active. Usage requires a running WebUI JavaScript context and access to the Events API; it takes no input arguments and produces no output, serving only to signal the central game system to halt music playback.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/packages/loading-screen.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nEvents.Call(\"StopMenuMusic\")\\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Player and Server Information (JavaScript Variable Definition)\nDESCRIPTION: This JavaScript object outlines the globally accessible 'LoadingScreen' variable, containing player and server information. It acts as a runtime data source for scripts running within the loading screen WebUI context. Properties include server IP/name/description/port as well as the player's nanos id and username, making this object accessible for frontend personalization or display. No external dependencies are required, but correct context (the loading screen environment) is necessary.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/packages/loading-screen.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar LoadingScreen = {\\n  server_ip,\\n  server_name,\\n  server_description,\\n  server_port,\\n  player_nanos_id,\\n  player_nanos_username\\n};\\n\n```\n\n----------------------------------------\n\nTITLE: Adding Items to Sandbox Context Menu using Lua\nDESCRIPTION: Defines the Lua function for registering new categories and items in the Sandbox Context Menu in the Sandbox game mode. Requires the Sandbox Lua environment, with ContextMenu available globally. Parameters include a unique category ID, a title string, and an array-like table of menu item definitions. Items added will appear in the menu and respond to the provided callback events accordingly.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/explore/sandbox-game-mode/context-menu.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Adds new items to the Context Menu\\n---@param id string             Unique ID used to identify this category\\n---@param title string          Category title\\n---@param items table           Table of items\\nfunction ContextMenu.AddItem(id, title, items)\\n\n```\n\n----------------------------------------\n\nTITLE: Spawning and Drawing with Canvas - nanos world Scripting - Lua\nDESCRIPTION: This Lua snippet demonstrates the initialization and use of the new Canvas class in nanos world. It shows how to create a Canvas, subscribe to its Update event, and utilize drawing methods such as DrawText and DrawLine to render custom UI elements or overlays. Required dependencies include access to the Canvas class, Color, and Vector2D types. Key parameters are transparency, update flags, and coordinates for drawing operations. The code must run inside a compatible nanos world scripting environment, and expects width and height values provided by the framework. Outputs are rendered graphics on the Canvas surface.\nSOURCE: https://github.com/nanos-world/docs/blob/master/blog/2022-02-09-january.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Spawns a Canvas\\nlocal canvas = Canvas(true, Color.TRANSPARENT, 0, true)\\n\\n-- Subscribes for Update, we can only Draw inside this event\\ncanvas:Subscribe(\"Update\", function(self, width, height)\\n  -- Draws a Text in the middle of the screen\\n  self:DrawText(\"Hello World!\", Vector2D(width / 2, height / 2))\\n\\n  -- Draws a red line Horizontally\\n  self:DrawLine(Vector2D(0, height / 2), Vector2D(width, height / 2), 10, Color.RED)\\nend)\n```\n\n----------------------------------------\n\nTITLE: Using Gizmo to Transform Entities in nanos-world (Lua)\nDESCRIPTION: This Lua code demonstrates how to integrate and control a Gizmo for manipulating a mesh entity's position, rotation, and scale dynamically in nanos-world. Dependencies include the nanos-world framework and access to the Gizmo, StaticMesh, Input, and related classes. Key parameters are instances of the mesh and Gizmo, with input event subscriptions to tie user mouse actions to transformation activation and pointer state. The snippet listens for transformation updates and applies them smoothly, requiring event-driven handling and assumes the context of a running nanos-world Lua environment.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/classes/gizmo.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Disable input and enable mouse cursor\\nInput.SetInputEnabled(false)\\nInput.SetMouseEnabled(true)\\n\\n-- Spawn a mesh to interact with\\nlocal my_entity = StaticMesh(Vector(0, 0, 100), Rotator(), \"nanos-world::SM_Cube\")\\n\\n-- Spawn the gizmo\\nlocal my_gizmo = Gizmo()\\n\\n-- Activate the gizmo, at the location of the mesh\\nmy_gizmo:Activate(my_entity:GetLocation(), my_entity:GetRotation(), my_entity:GetScale())\\n\\n-- Subscribes on Gizmo updates\\nmy_gizmo:Subscribe(\"Transform\", function(self, location, rotation, scale)\\n\\tmy_entity:TranslateTo(location, 0.02)\\n\\tmy_entity:RotateTo(rotation, 0.02)\\n\\tmy_entity:SetScale(scale)\\nend)\\n\\n-- When Mouse click, trigger Gizmo inputs\\nInput.Subscribe(\"MouseDown\", function(key)\\n\\tif (key == \"LeftMouseButton\") then\\n\\t\\tmy_gizmo:PressPointer()\\n\\tend\\nend)\\n\\n-- When Mouse release, trigger Gizmo inputs\\nInput.Subscribe(\"MouseUp\", function (key, b, c)\\n\\tif (key == \"LeftMouseButton\") then\\n\\t\\tmy_gizmo:ReleasePointer()\\n\\tend\\nend)\n```\n\n----------------------------------------\n\nTITLE: Spawning and Configuring CharacterSimple in Lua\nDESCRIPTION: This Lua snippet demonstrates how to instantiate a `CharacterSimple` object on the server. It creates a 'Stack-O-Bot' character at a specific location (Vector) and rotation (Rotator), assigning it a skeletal mesh and an animation blueprint. Subsequently, it configures the character's movement speeds using the `SetSpeedSettings` method, likely setting walk and crouch speeds.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/classes/character-simple.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Spawns a Stack-O-Bot Character\nlocal stack_o_bot = CharacterSimple(Vector(100, 0, 100), Rotator(0, 0, 0), \"nanos-world::SK_StackOBot\", \"nanos-world::ABP_StackOBot\")\nstack_o_bot:SetSpeedSettings(275, 150)\n```\n\n----------------------------------------\n\nTITLE: Creating a Decal and Setting Texture in Lua (nanos-world)\nDESCRIPTION: This Lua snippet demonstrates how to instantiate a `Decal` object in nanos-world on the client side. It specifies the decal's location (Vector), rotation (Rotator), base material path, size (Vector), lifespan (in seconds), and fade screen size. Subsequently, it calls `SetMaterialTextureParameter` to apply a custom texture from a package to the 'Texture' parameter of the decal's material. This requires the nanos-world Lua API and potentially a custom package (`my_package`) containing the specified image.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/classes/decal.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n```lua title=\"Client/Index.lua\" showLineNumbers\nlocal my_decal = Decal(\n    Vector(100, 200, 0), -- location\n    Rotator(0, 90, 90), -- rotation\n    \"nanos-world::M_Default_Translucent_Lit_Decal\", -- material\n    Vector(128, 256, 256), -- size\n    60, -- lifespan\n    0.01 -- fade screen size\n)\n\nmy_decal:SetMaterialTextureParameter(\"Texture\", \"package://my_package/Client/image.jpg\")\n```\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Assets Before Meta Data Change - nanos world - Lua\nDESCRIPTION: Shows how to iterate over static mesh assets prior to the Assets.GetX() interface change in nanos world, where each asset is returned as a string key. No additional asset metadata is directly available. Requires the nanos world API providing Assets.GetStaticMeshes. Loops through each returned string key.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/packages/compatibility-versions.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nfor _, asset in pairs(Assets.GetStaticMeshes(\\\"nanos-world\\\")) do\\n\\tlocal key = asset\\nend\n```\n\n----------------------------------------\n\nTITLE: Adding a New Method to Player Class - nanos world - Lua\nDESCRIPTION: This snippet demonstrates how to add a custom method AddScore to the Player class using Lua. It utilizes existing Player methods SetValue and GetValue to incrementally update a score property. No extra dependencies are needed besides basic nanos world class access. The method expects an integer score as its parameter and updates the player's score accordingly. The function must be defined in the appropriate Package and folder (Client, Server, or Shared) for desired scope.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/scripting/extending-classes.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nfunction Player:AddScore(score)\n\tself:SetValue(\"score\", self:GetValue(\"score\", 0) + score)\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Context Menu Items in Lua\nDESCRIPTION: Defines the Lua function `ContextMenu.AddItem` used to add new categories and items to the Sandbox Context Menu. It requires a unique string `id` to identify the category, a string `title` for display, and a table `items` containing the definitions for each menu item within that category.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/explore/sandbox-game-mode/context-menu.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Adds new items to the Context Menu\n---@param id string             Unique ID used to identify this category\n---@param title string          Category title\n---@param items table           Table of items\nfunction ContextMenu.AddItem(id, title, items)\n```\n\n----------------------------------------\n\nTITLE: Installing Default Weapons Package via CLI (Shell)\nDESCRIPTION: Shows how to install the default-weapons package using the Nanos World server CLI. Prerequisite: access to NanosWorldServer.exe executable and the CLI interface. Executes a shell command that downloads and installs the weapon package, which extends the range of weapons available in scripting. No parameters required; outputs an installation process in the terminal. Must be run from the directory containing the server executable.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/classes/weapon.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# install the default-weapons package\\n./NanosWorldServer.exe --cli install package default-weapons\n```\n\n----------------------------------------\n\nTITLE: Changing TextRender Material for Wall Visibility in nanos world with Lua\nDESCRIPTION: This snippet (referenced in documentation text) illustrates how to make a TextRender object visible through walls by setting its material to nanos-world's Default TranslucentDepth material. Intended for use in Lua scripts within the nanos world environment after creating a TextRender instance. Requires access to the SetMaterial method and knowledge of nanos world material asset naming. Input is the material name string; effect is a visual change for better wall visibility.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/classes/text-render.mdx#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nSetMaterial(\"nanos-world::M_Default_Translucent_Lit_Depth\")\n```\n\n----------------------------------------\n\nTITLE: Handling UI Updates with JavaScript and jQuery\nDESCRIPTION: This JavaScript code, intended for `Client/UI/index.js`, subscribes to custom events (`UpdateWeaponAmmo`, `UpdateHealth`) emitted from the Lua side via the nanos world `Events` interface. It uses jQuery selectors (`$()`) to find specific HTML elements by ID and updates their content (`.html()`) with the received data (ammo counts, health value). It also controls the visibility of the ammo container (`.show()`, `.hide()`) and dynamically changes the health container's background CSS based on the player's health level. Requires jQuery library.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/tutorials-and-examples/basic-hud-html.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Register for UpdateWeaponAmmo custom event (from Lua)\nEvents.Subscribe(\"UpdateWeaponAmmo\", function(enable, clip, bag) {\n    if (enable)\n        $(\"#weapon_ammo_container\").show();\n    else\n        $(\"#weapon_ammo_container\").hide();\n\n    // Using JQuery, overrides the HTML content of these SPANs with the new Ammo values\n    $(\"#weapon_ammo_clip\").html(clip);\n    $(\"#weapon_ammo_bag\").html(\"/ \" + bag);\n});\n\n// Register for UpdateHealth custom event (from Lua)\nEvents.Subscribe(\"UpdateHealth\", function(health) {\n    // Using JQuery, overrides the HTML content of the SPAN with the new health value\n    $(\"#health_current\").html(health);\n\n    // Bonus: make the background red when health below 25\n    if (health <= 25)\n        $(\"#health_container\").css(\"background-image\", \"linear-gradient(to left, #0000, #d00c)\");\n    else\n        $(\"#health_container\").css(\"background-image\", \"linear-gradient(to left, #00000000, #00000080)\");\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Input Key Bindings (After v1.33) in Lua\nDESCRIPTION: Displays the data structure returned by `Input.GetScriptingKeyBindings()` and `Input.GetGameKeyBindings()` from version 1.33 onwards. The format is now a Lua table mapping key binding action names (strings) to a table containing an array of assigned key names (strings), allowing multiple keys per binding. Requires the nanos-world Input API.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/packages/compatibility-versions.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\n-- KeyBinding = { Key, Key, ... }\n{\n\t\"Jump\" = { \"Spacebar\", \"O\" },\n\t\"Crouch\" = { \"Control\" },\n\t\"Fire\" = { \"LeftMouse\", \"Return\" },\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Standing-Crouching Transition Animations in nanos world (Lua)\nDESCRIPTION: Defines the transition animations between standing and crouching states using the `Character.SetAnimationsTransitionStandingCrouching` Lua function. It accepts two animation sequence asset paths: one for transitioning from standing to crouching (`anim_standing_to_crouching`) and one for crouching to standing (`anim_crouching_to_standing`).\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/assets-modding/creating-assets/animations/characters/character-locomotion-animations.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nCharacter.SetAnimationsTransitionStandingCrouching(anim_standing_to_crouching, anim_crouching_to_standing)\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Boat Class Inheriting from VehicleWater in Lua\nDESCRIPTION: This Lua snippet demonstrates creating a new vehicle class named 'Boat' by inheriting from the base 'VehicleWater' class. It sets properties like name, image, and category. The constructor initializes the boat with an optional location and rotation, specifies the 3D model ('nanos-world::SK_Motorboat'), and configures a vehicle door using the 'SetDoor' method with specific position, size, rotation, distance, and angle parameters. This example is intended for server-side scripting (Server/Index.lua).\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/classes/vehicle-water.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n```lua title=\"Server/Index.lua\" showLineNumbers\nBoat = VehicleWater.Inherit(\"Boat\")\nBoat.name = \"Boat\"\nBoat.image = \"assets://nanos-world/Thumbnails/SK_Motorboat.jpg\"\nBoat.category = \"water\"\n\nfunction Boat:Constructor(location, rotation)\n\tself.Super:Constructor(location or Vector(), rotation or Rotator(), \"nanos-world::SK_Motorboat\")\n\n\tself:SetDoor(0, Vector(0, 0, 0), Vector(-120, 0, 55), Rotator(-10, 0, 0), 200, -100)\nend\n```\n```\n\n----------------------------------------\n\nTITLE: Spawning Props in Server Script - nanos world (Lua)\nDESCRIPTION: Basic server-side Lua script for nanos world packages to print a message and spawn several props (table, chair, tire) at specified world coordinates. Requires nanos world server, and is to be placed in Packages/my-awesome-package/Server/Index.lua. Key parameters: Vector (location), Rotator (rotation), and model asset string. Inputs: none (runs on load). Outputs: Printed message and spawned props visible in the game.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/quick-start.mdx#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n```lua\n-- Print a message to the server console\nConsole.Log(\"Loading some Props =D\")\n\n-- Spawn some props in the game world\nlocal prop_table = Prop(Vector(200, 0, 0), Rotator(0, 0, 0), \"nanos-world::SM_WoodenTable\")\nlocal prop_chair = Prop(Vector(400, 200, 0), Rotator(0, 0, 0), \"nanos-world::SM_WoodenChair\")\nlocal prop_tire = Prop(Vector(600, 0, 0), Rotator(0, 0, 0), \"nanos-world::SM_TireLarge\")\n```\n```\n\n----------------------------------------\n\nTITLE: Binding Input Actions with Enhanced Input System in Nanos World Lua\nDESCRIPTION: This Lua code snippet shows the updated method for binding keyboard inputs using Unreal's Enhanced Input System in Nanos World. Separate bindings are required for distinct actions like 'MoveForward' and 'MoveBackward'. Each binding now passes a delta value ranging from 0.0 to 1.0, representing the press intensity, requiring separate logic for opposite movements. This change is necessary due to the engine upgrade.\nSOURCE: https://github.com/nanos-world/docs/blob/master/blog/2025-01-08-january.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n```lua title=\"Client/Input.lua\"\nInput.Bind(\"MoveForward\", InputEvent.Pressed, function(delta)\n\t-- Now it returns delta from 0.0 to 1.0\n\tConsole.Log(\"MoveForward: \", delta)\nend)\n\nInput.Bind(\"MoveBackward\", InputEvent.Pressed, function(delta)\n\t-- Now it returns delta from 0.0 to 1.0\n\tConsole.Log(\"MoveBackward: \", delta)\nend)\n```\n```\n\n----------------------------------------\n\nTITLE: Checking GLIBCXX Version in Libstdc++.so.6 File - Bash\nDESCRIPTION: This command sequence inspects a given libstdc++.so.6 shared library file to verify it contains at least the required GLIBCXX symbol version (v3.4.26 or higher). Used as a prerequisite check when swapping libstdc++ libraries to satisfy Nanos World server's gcc 11 requirements under Box64 emulation. The command outputs any matching GLIBCXX entries found in the file.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/server-manual/server-linux-arm.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nstrings libstdc++.so.6 | grep LIBCXX\n```\n\n----------------------------------------\n\nTITLE: Calling Intermediate Parent Methods in Nested Inheritance in Lua\nDESCRIPTION: Shows a nested inheritance structure (`Prop` -> `MyNewClass` -> `MyNewSubClass`). It demonstrates how `MyNewSubClass` overrides `SetScale` and calls the `SetScale` method specifically from its direct parent (`MyNewClass`) using the `PARENT_CLASS.METHOD_NAME(self, ...)` syntax (`MyNewClass.SetScale(self, scale)`). This is distinct from using `self.Super` which would call the original `Prop` method.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/scripting/inheriting-classes.md#_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\n-- Inherits Prop\nMyNewClass = Prop.Inherit(\"MyNewClass\")\n\nfunction MyNewClass:SetScale(scale)\n    -- Does some logic\n    scale = scale * 2\n\n    -- Calls Super (original Prop method)\n    self.Super:SetScale(scale) * 2\nend\n\n-- Inherits MyNewClass\nMyNewSubClass = MyNewClass.Inherit(\"MyNewSubClass\")\n\nfunction MyNewSubClass:SetScale(scale)\n    -- Does some logic\n    scale = scale + Vector(2, 2, 2)\n\n    -- Calls Parent MyNewClass method with special syntax\n    MyNewClass.SetScale(self, scale)\nend\n```\n\n----------------------------------------\n\nTITLE: Event Propagation in Multi-Level Inheritance in Lua\nDESCRIPTION: Sets up a multi-level inheritance chain (`Prop` -> `MyNewClass` -> `MyNewSubClass`) and subscribes to the \"Spawn\" event at each level (`Prop`, `MyNewClass`, `MyNewSubClass`). It demonstrates that when an instance of the deepest class (`MyNewSubClass`) is spawned, the \"Spawn\" event handlers for the instance's own class and all its parent classes (`MyNewSubClass`, `MyNewClass`, `Prop`) are triggered.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/scripting/inheriting-classes.md#_snippet_17\n\nLANGUAGE: lua\nCODE:\n```\nMyNewClass = Prop.Inherit(\"MyNewClass\")\nMyNewSubClass = MyNewClass.Inherit(\"MyNewSubClass\")\nMyNewOtherSubClass = MyNewClass.Inherit(\"MyNewOtherSubClass\")\n\nProp.Subscribe(\"Spawn\", function(self)\n    Console.Log(\"Spawned Prop: %s\", tostring(self))\nend)\n\nMyNewClass.Subscribe(\"Spawn\", function(self)\n    Console.Log(\"Spawned MyNewClass: %s\", tostring(self))\nend)\n\nMyNewSubClass.Subscribe(\"Spawn\", function(self)\n    Console.Log(\"Spawned MyNewSubClass: %s\", tostring(self))\nend)\n\nMyNewOtherSubClass.Subscribe(\"Spawn\", function(self)\n    Console.Log(\"Spawned MyNewOtherSubClass: %s\", tostring(self))\nend)\n\nlocal my_entity = MyNewSubClass()\n\n-- Will output:\n--  Spawned Prop: MyNewClass\n--  Spawned MyNewClass: MyNewClass\n--  Spawned MyNewSubClass: MyNewClass\n```\n\n----------------------------------------\n\nTITLE: Spawning an AK47 from Default-Weapons Package and Giving to Character (Lua)\nDESCRIPTION: This Lua script loads the 'default-weapons' external package, spawns an AK47 weapon using the provided constructor, and gives it to a Character object via the PickUp method. It demonstrates integrating external packages into custom server logic, assuming Server, AK47, and my_character objects are defined in the NanosWorld environment. Inputs include asset position, rotation, and character references; the output is an equipped character with a spawned AK47.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/classes/weapon.mdx#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n-- Loads the default-weapons (note: it's recommended to add it to your Package's packages_requirements instead)\\nServer.LoadPackage(\\\"default-weapons\\\")\\n\\n-- Spawning the AK47 from default-weapons package\\nlocal my_ak47 = AK47(Vector(1035, 154, 300), Rotator())\\n\\n-- Giving the Weapon to a Character\\nmy_character:PickUp(my_ak47)\n```\n\n----------------------------------------\n\nTITLE: Formatting Escape Menu Text Using Rich Text Tags - HTML - Markdown\nDESCRIPTION: This snippet demonstrates how to use supported HTML rich text tags (such as <h1>, <h2>, <h3>, and <strong>) for customizing the Escape Menu window in the game. These tags format visible text and can be set via `Client.SetEscapeMenuText()`. Inputs are HTML text strings, and output is the styled menu content. No external dependencies are needed other than the menu system supporting these tags.\nSOURCE: https://github.com/nanos-world/docs/blob/master/blog/2023-04-05-march.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<h1>Header 1!</>\n<h2>Header 2!</>\n<h3>Header 3!</>\n<strong>Strong Text</>\nNormal Text\n```\n\n----------------------------------------\n\nTITLE: Automating Server Install/Update with Windows One-Liner - Shell\nDESCRIPTION: This shell one-liner for Windows automates installation or updating of the nanos world server using steamcmd.exe. It performs directory setup, anonymous login, app installation/update and validation in a single command. Prerequisite: steamcmd.exe must be in the system PATH. Outputs the progress and validation status.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/server-manual/server-installation.mdx#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nsteamcmd.exe +force_install_dir C:/nanos-world-server +login anonymous +app_update 1936830 validate +quit\n```\n\n----------------------------------------\n\nTITLE: Calling Native Methods from Overridden Lua Methods\nDESCRIPTION: Illustrates how to access and call the original, native implementation of a method from within its overridden version in an inherited class. This is done using the `self.Super` table (e.g., `self.Super:GetRotation()`).\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/scripting/inheriting-classes.md#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nfunction MyNewClass:GetRotation()\n    -- Calls original GetRotation and adds 90 to yaw\n    return self.Super:GetRotation() + Rotator(0, 90, 0)\nend\n```\n\n----------------------------------------\n\nTITLE: Attaching and Managing Weapon Flashlight in NanosWorld using Lua\nDESCRIPTION: Loads the required weapon package, spawns a weapon and a spot light, and attaches the light as a flashlight to the weapon in NanosWorld. The Lua script subscribes to 'PickUp' and 'Drop' events to activate or deactivate the flashlight effect by changing the light color. Prerequisites include having the 'default-weapons' package installed and being run on the server side. The script demonstrates usage of the entity system, attaching components, and handling runtime events.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/tutorials-and-examples/weapon-flashlight.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- Loads the default-weapons (note: it's recommended to add it to your Package's packages_requirements instead)\\nServer.LoadPackage(\"default-weapons\")\\n\\n-- Spawns a Weapon from default-weapons package\\nmy_weapon = AR4(Vector(), Rotator())\\n\\n-- Spawns a Spot Light (with color Black, to be turned on only when someone picks up it)\\nmy_light = Light(Vector(), Rotator(), Color(0, 0, 0), 1, 1000, 1000, 35)\\n\\n-- Attaches the Light to the Weapon with offset X = 100 (at the weapon's front)\\nmy_light:AttachTo(my_weapon)\\nmy_light:SetRelativeLocation(Vector(100, 0, 0))\\n\\n-- Stores the light on the Weapon\\nmy_weapon:SetValue(\"Light\", my_light)\\n\\n-- Only when someone picks up this weapon, turns on the Flashlight (set it's color)\\nmy_weapon:Subscribe(\"PickUp\", function(weapon, character)\\n    local light = my_weapon:GetValue(\"Light\")\\n    if (light ~= nil) then\\n        light:SetColor(Color(0.73, 0.67, 0.42))\\n    end\\nend)\\n\\n-- When the weapon is dropped, turns off the Flashlight (set it's color to black)\\nmy_weapon:Subscribe(\"Drop\", function(weapon, character)\\n    local light = my_weapon:GetValue(\"Light\")\\n    if (light ~= nil) then\\n        light:SetColor(Color(0, 0, 0))\\n    end\\nend)\n```\n\n----------------------------------------\n\nTITLE: Defining and Customizing a ToolGun on the Client (Lua, Client)\nDESCRIPTION: Client-side, this snippet defines the BalloonGun class, assigns metadata such as name, image, and tutorial bindings for UI integration, and subscribes to the Fire event for remote invocation. It supports seamless menu and tool customization in the Nanos World sandbox setup. Requires the core ToolGun class, client scripting, and event communication capabilities.\nSOURCE: https://github.com/nanos-world/docs/blob/master/blog/2022-12-07-november.md#_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nBalloonGun = ToolGun.Inherit(\"BalloonGun\")\\n\\n-- Defines some properties used by ToolGun and SpawnMenu\\nBalloonGun.name = \"Balloon\"\\nBalloonGun.image = \"package://sandbox/Client/Tools/BalloonGun.webp\"\\nBalloonGun.tutorials = {\\n\\t{ key = \"LeftClick\", text = \"spawn balloon\" },\\n\\t{ key = \"Undo\", text = \"undo spawn\" },\\n\\t{ key = \"ContextMenu\", text = \"balloon settings\" },\\n}\\n\\nfunction BalloonGun:OnFire(shooter)\\n    -- Do the original logic here...\\n    ...\\n\\n    -- Calls remote to spawn the Balloon\\n    self:CallRemoteEvent(\"SpawnBalloon\", location, rotation, ...)\\nend\\n\\nBalloonGun.Subscribe(\"Fire\", BalloonGun.OnFire)\n```\n\n----------------------------------------\n\nTITLE: Initializing a Rotator Struct in Lua\nDESCRIPTION: This Lua code snippet demonstrates the creation of a new `Rotator` instance. The constructor takes three numerical arguments representing pitch (-90), yaw (153), and roll (24.5), all specified in degrees. It illustrates the basic way to define a rotation using this struct.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/structs/rotator.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n```lua showLineNumbers\nlocal new_rotator = Rotator(-90, 153, 24.5)\n```\n```\n\n----------------------------------------\n\nTITLE: Declaring Damageable Class Header in Markdown (JSX)\nDESCRIPTION: This snippet uses a JSX-style component to declare the header for the Damageable class in the documentation. It is intended for a custom documentation pipeline that renders <HeaderDeclaration> elements, and requires an environment that recognizes these components. The primary parameters are type ('Class') and name ('Damageable'). There are no input/output values as this is for documentation rendering.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/classes/base-classes/damageable.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<HeaderDeclaration type=\\\"Class\\\" name=\\\"Damageable\\\" />\n```\n\n----------------------------------------\n\nTITLE: Calling an Exported Global Function in Lua\nDESCRIPTION: Illustrates how a server-side script in a different package (`package-two`) can directly call a globally exported function (`SpawnCoolWeapon`) defined and exported in another package. Requires the function to have been previously exported using `Package.Export`.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/scripting/communicating-between-packages.md#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\n```lua title=\"package-two/Server/Index.lua\" showLineNumbers\n-- Calls the exported function\nlocal cool_weapon = SpawnCoolWeapon(Vector(), Rotator())\n```\n```\n\n----------------------------------------\n\nTITLE: Displaying Available Nanos World CLI Commands\nDESCRIPTION: Demonstrates the output received after starting the Nanos World interactive CLI and entering the `help` command. It lists all available commands like `stop`, `help`, `update`, `install`, `upload`, `add`, and `check`, along with their basic syntax for managing packages and assets via the CLI.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/server-manual/command-line-interface.mdx#_snippet_2\n\nLANGUAGE: nanos-console\nCODE:\n```\nINFO  Starting nanos world CLI - Command Line Interface (beta)\nnanos world cli> help\nINFO  Available commands:\n\t- stop\n\t- help\n\t- update [package|assets] NAME1, NAME2...\n\t- install [package|assets] NAME1, NAME2...\n\t- upload [package|assets] NAME\n\t- add [package|assets] NAME\n\t- check\n\nnanos world cli> \n```\n\n----------------------------------------\n\nTITLE: Describing Asset Pack Directory Layout - Folder Structure\nDESCRIPTION: This code snippet presents an example directory layout for a nanos world server, illustrating how Asset Packs and their respective assets are organized under the server's Assets/ directory. It visually explains where to place packed content such as .uasset, .umap, and Assets.toml files. No dependencies are required, but correct directory structure is essential for asset loading. Inputs are folder and file organization, output is correct resource recognition by nanos world.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/assets.mdx#_snippet_0\n\nLANGUAGE: folder-structure\nCODE:\n```\nNanosWorldServer.exe\nAssets/\n├── my-asset-pack-01/\n│   ├── MyAsset_01.uasset\n│   ├── MyAsset_02.uasset\n│   ├── MyBigMap.umap\n│   │    ...\n│   └── Assets.toml\n├── awesome-weapons/\n│   ├── BigFuckingGun.uasset\n│   │   ...\n│   └── Assets.toml\nPackages/\nConfig.toml\n```\n\n----------------------------------------\n\nTITLE: Defining Basic HUD Structure in React Component (App.js)\nDESCRIPTION: This JavaScript (JSX) code defines the initial structure of the 'App' functional component. It sets up basic HTML elements for the health and ammo displays, including placeholders for values and an image for the health icon. It imports the associated CSS file for styling.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/tutorials-and-examples/basic-hud-react.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport './App.css';\n\nfunction App() {\n  return (\n    <div >\n      {/* Health container (black background) */}\n        <div id=\"health_container\">\n            <img src=\"./img/health.png\" alt=\"health-cross\"/>\n              <span id=\"health_current\">100</span> {/* Health value */}\n        </div>\n\n        {/* Weapon Ammo container (black background) */}\n        <div id=\"weapon_ammo_container\">\n            <span id=\"weapon_ammo_clip\">30</span> {/* Ammo Clip value */}\n            <span id=\"weapon_ammo_bag\">/ 1000</span> {/* Ammo Bag value */}\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Calling Custom Methods on Inherited Lua Class Instances\nDESCRIPTION: Shows how to invoke a custom method ('Explode') defined on an instance ('my_new_class_instance') of an inherited class.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/scripting/inheriting-classes.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nmy_new_class_instance:Explode()\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Class Registration Events (nanos world, Lua)\nDESCRIPTION: Illustrates subscribing to the ClassRegister event on a base class (Prop) to react when new classes are registered, such as enumerating default values or updating GUIs. The snippet highlights accessing default values within the event handler, aiding advanced customization or menu integration. Depends on event system supporting ClassRegister event; requires consistent inheritance and parameter passing for default fields.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/scripting/inheriting-classes.md#_snippet_21\n\nLANGUAGE: lua\nCODE:\n```\nProp.Subscribe(\"ClassRegister\", function(class)\\n\\t-- here we see an useful case for the default values\\n\\t-- as we can access it here\\n\\tConsole.Log(MyNewClass.name) -- outputs \"My Name\\n\\t-- now we can do something (add to spawn menu?)\\nend)\\n\\n-- inherits the Class\\nMyNewClass = Prop.Inherit(\"MyNewClass\", {\\n\\tname = \"My Name\",\\n\\tcategory = \"breakable\",\\n\\tmy_custom_param = 123\\n})\n```\n\n----------------------------------------\n\nTITLE: Using 'index' to Automatically Call GetValue in Lua\nDESCRIPTION: Provides a practical example where the custom `index` method is implemented to automatically call the entity's built-in `GetValue` method whenever a property access occurs on an instance. This allows using standard Lua access syntax (`local amazing_value = my_entity.amazing_value`) to retrieve values from the underlying key-value storage.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/scripting/inheriting-classes.md#_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\nfunction MyNewClass:index(key)\n    return self:GetValue(key)\nend\n\nlocal my_entity = MyNewClass()\nlocal amazing_value = my_entity.amazing_value\n```\n\n----------------------------------------\n\nTITLE: Adding a New Method to Player Class in Lua\nDESCRIPTION: Defines a new method `AddScore` for the nanos world `Player` class. This method increments a 'score' value stored on the player entity using `self:SetValue`. The `self` keyword refers to the specific Player instance the method is called on. It retrieves the current score using `self:GetValue`, providing 0 as a default if 'score' doesn't exist.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/scripting/extending-classes.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nfunction Player:AddScore(score)\n\tself:SetValue(\"score\", self:GetValue(\"score\", 0) + score)\nend\n```\n\n----------------------------------------\n\nTITLE: Defining FSlateFontInfo Unreal Struct with Lua Table\nDESCRIPTION: Shows the structure for FSlateFontInfo used in UI rendering, represented as a Lua table that mimics Unreal's struct fields (font family, material, outline, typeface, size, letter spacing, skew, and monospacing). Asset paths and font assets must be valid and accessible by nanos world and Unreal. Facilitates passing complex text style information from Lua to Blueprint.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/classes/blueprint.mdx#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\n{\\n\\t[\\\"FontFamily\\\"] = \\\"package://my-package/Client/my_font.ttf\\\", -- Special Path\\n\\t[\\\"FontMaterial\\\"] = \\\"my-asset-pack::M_MyMaterial\\\", -- Material Path\\n\\t[\\\"OutlineSettings\\\"] = {} -- FSlateBrushOutlineSettings\\n\\t[\\\"Typeface\\\"] = \\\"\\\", -- string\\n\\t[\\\"Size\\\"] = 24,\\n\\t[\\\"LetterSpacing\\\"] = 0,\\n\\t[\\\"SkewAmount\\\"] = 0.0,\\n\\t[\\\"Monospacing\\\"] = false,\\n\\t[\\\"MonospacedWidth\\\"] = 1.0\\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Custom Methods on Inherited Class Instances in Lua\nDESCRIPTION: Provides a simple example of invoking the previously defined custom `Explode` method on an instance (`my_new_class_instance`) of the inherited `MyNewClass`.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/scripting/inheriting-classes.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nmy_new_class_instance:Explode()\n```\n\n----------------------------------------\n\nTITLE: Triggering and Handling Custom Remote Events (nanos world, Lua)\nDESCRIPTION: Implements custom remote event functionality for classes inheriting from Prop, allowing communication between client and server instances. Uses CallRemoteEvent and BroadcastRemoteEvent to trigger events such as MyCustomRemoteEvent and AnotherRemoteEvent, showing how to define and subscribe to remote events in both client and server contexts. Dependencies include base class Prop, remote event system, and Console logging; parameters passed demonstrate support for multiple data types and client/server player context.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/scripting/inheriting-classes.md#_snippet_19\n\nLANGUAGE: lua\nCODE:\n```\n-- inherits the Class\\nMyNewClass = Prop.Inherit(\"MyNewClass\")\\n\\n-- defines a custom method\\nfunction MyNewClass:OnMyCustomRemoteEvent(a, b)\\n    Console.Log(\"OnMyCustomRemoteEvent!\", tostring(self), a, b)\\n    self:CallRemoteEvent(\"AnotherRemoteEvent\", 456, \"def\")\\nend\\n\\n-- subscribes for a custom remote event\\nMyNewClass.SubscribeRemote(\"MyCustomRemoteEvent\", MyNewClass.OnMyCustomRemoteEvent)\n```\n\nLANGUAGE: lua\nCODE:\n```\n-- inherits the Class\\nMyNewClass = Prop.Inherit(\"MyNewClass\")\\n\\n-- Note that server-side received remote events have the 'player as first parameter\\nfunction MyNewClass:OnAnotherRemoteEvent(player, a, b)\\n    Console.Log(\"OnAnotherRemoteEvent!\", tostring(self), tostring(player), a, b)\\nend\\n\\n-- subscribes for a custom remote event\\nMyNewClass.SubscribeRemote(\"AnotherRemoteEvent\", MyNewClass.OnAnotherRemoteEvent)\\n\\n-- spawns an entity and calls the custom remote event on that entity\\nlocal p = MyNewClass(...)\\np:BroadcastRemoteEvent(\"MyCustomRemoteEvent\", 123, \"abc\")\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a Quaternion in Lua\nDESCRIPTION: Demonstrates how to construct a quaternion using the Quat constructor, and how to convert it to a Rotator for 3D rotation purposes. Assumes the Quat struct and its Rotator method are available in the runtime, with no additional dependencies required. Inputs are floating point numbers representing the quaternion components, output is a Rotator object expressing the equivalent rotation.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/structs/quat.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal new_quaternion = Quat(0.5, 0.5, 1, -1)\nlocal rotation = new_quaterion:Rotator()\n```\n\n----------------------------------------\n\nTITLE: Binding Lua Functions to Blueprint Event Dispatchers\nDESCRIPTION: Shows how to subscribe a Lua function to an event dispatcher defined within an Unreal Blueprint actor. The Lua function is executed when the Blueprint triggers the corresponding event dispatcher, receiving any arguments passed from it.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/classes/blueprint.mdx#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- Spawns the Blueprint\nlocal blueprint = Blueprint(Vector(), Rotator(), \"my-asset-pack::BP_MyBlueprint\")\n\n-- Subscribes to a Blueprint Event Dispatcher\nblueprint:BindBlueprintEventDispatcher(\"MyBlueprintDispatcher\", function(self, arg1, arg2)\n    Console.Log(\"Called from Blueprint!\", arg1, arg2)\nend)\n```\n\n----------------------------------------\n\nTITLE: Triggering Internal Reload Logic with `Reload_Load` Notify\nDESCRIPTION: This Animation Notify name, `Reload_Load`, when used within an Unreal Engine Animation Montage for a nanos world weapon, triggers the core internal reload function. This action updates the weapon's ammunition count and destroys any Magazine StaticMesh currently attached to the character's left hand.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/assets-modding/creating-assets/animations/weapon-reload-animations.md#_snippet_0\n\nLANGUAGE: Identifier\nCODE:\n```\nReload_Load\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Entity Events with Inherited Classes (Lua)\nDESCRIPTION: Demonstrates subscribing to generic entity events for an inherited class hierarchy. It conditionally handles the event based on runtime type, using a recursive type check utility (NanosUtils.IsA). Requires the Nanos World event system, class inheritance, and IsA function. Receives event parameters including the entity, and executes logic based on its lineage.\nSOURCE: https://github.com/nanos-world/docs/blob/master/blog/2022-12-07-november.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- This will trigger for all Props and it's descendents,\\n-- and the value of 'prop' will be the children itself\\nProp.Subscribe(\"Destroy\", function(prop)\\n    -- You can check if an entity is from a inherited Class type!\\n    -- IsA checks recursively if any parent is from that type\\n    if (NanosUtils.IsA(prop, MyCube)) then\\n        -- prop is of type MyCube\\n    end\\nend)\n```\n\n----------------------------------------\n\nTITLE: Launching SteamCMD Console - Bash\nDESCRIPTION: This snippet illustrates entering the SteamCMD interactive console, shown as the command prompt after launching the SteamCMD executable. No parameters are needed; upon running 'steamcmd', the prompt changes to 'Steam>', indicating readiness to receive commands. This prompt serves as a user interface for later administrative installation commands.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/server-manual/server-installation.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nSteam>\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Meshes in nanos world Assets.toml (TOML)\nDESCRIPTION: This TOML configuration snippet demonstrates how to register exported Static Meshes in the `Assets.toml` file for a nanos world Asset Pack. It defines entries under the `[assets.static_meshes]` section, mapping a unique identifier (key, e.g., `SM_MoneyRoll`) to the specific Unreal Engine asset name (value, e.g., `\"SM_MoneyRoll\"`). This registration makes the static meshes accessible within the game via scripting or through menus like the Sandbox Spawn Menu.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/assets-modding/creating-assets/static-meshes/static-meshes.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n# static meshes\n[assets.static_meshes]\n    SM_MoneyRoll = \"SM_MoneyRoll\"\n    SM_MoneyStack = \"SM_MoneyStack\"\n```\n\n----------------------------------------\n\nTITLE: Dropping Held Magazine with `Reload_DropMagazine` Notify\nDESCRIPTION: The `Reload_DropMagazine` Animation Notify specifically triggers the action of detaching (dropping) the Magazine StaticMesh that is currently attached to the character's left hand.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/assets-modding/creating-assets/animations/weapon-reload-animations.md#_snippet_4\n\nLANGUAGE: Identifier\nCODE:\n```\nReload_DropMagazine\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from All Player Spawn Events in Lua\nDESCRIPTION: Shows how to remove all event listeners previously registered for the 'Spawn' event on the 'Player' class within the current script's package. Calling 'Player.Unsubscribe(\"Spawn\")' without a specific function reference removes all subscriptions made by this package to that event.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/scripting/events-guide.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n```lua showLineNumbers\n-- This will unregister from all \"Spawn\" events of Player registered in this Package\nPlayer.Unsubscribe(\"Spawn\")\n```\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Console Commands in Lua\nDESCRIPTION: This Lua snippet demonstrates registering a custom console command using the `Console.RegisterCommand` static function. It defines a command named 'myawesomecommand', provides a callback function that accepts two parameters, includes a description for the 'help' command, and specifies the names for the parameters. This functionality allows developers to extend the in-game console with custom actions.\nSOURCE: https://github.com/nanos-world/docs/blob/master/blog/2023-02-01-january.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n```lua\nConsole.RegisterCommand(\"myawesomecommand\",\n\tfunction(parameter_one, parameter_two)\n\t\t-- Do something with parameter_one and parameter_two\n\tend,\n\t\"this command executes awesome codes\",\t-- Description\n\t{ \"parameter one\", \"parameter two\" }\t-- Parameters\n)\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Crouching Locomotion Animation in nanos world (Lua)\nDESCRIPTION: Configures the BlendSpace animation for the character's crouching locomotion state (idle, walk, run) via the `Character.SetAnimationIdleWalkRunCrouching` Lua function. Takes the BlendSpace asset path (`anim_path`) and a boolean (`enable_tip`) to control the Turn In Place feature.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/assets-modding/creating-assets/animations/characters/character-locomotion-animations.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nCharacter.SetAnimationIdleWalkRunCrouching(anim_path, enable_tip)\n```\n\n----------------------------------------\n\nTITLE: Creating a Nanos World Package via CLI (Linux)\nDESCRIPTION: This command utilizes the Nanos World server executable's Command Line Interface (CLI) on Linux to create a new package structure named 'my-awesome-package'. It automates the creation of necessary folders (Server, Client, Shared) and the Package.toml configuration file.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/quick-start.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./NanosWorldServer.sh --cli add package my-awesome-package\n```\n\n----------------------------------------\n\nTITLE: Using Custom __newindex for Automatic SetValue in Lua\nDESCRIPTION: Provides a practical use case for overriding `__newindex` on the `Player` class. The `Player:newindex` function is defined to automatically call `self:SetValue(key, value)`, allowing direct property assignment syntax (`my_player.amazing_value = 123`) to store data on the entity.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/scripting/extending-classes.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nfunction Player:newindex(key, value)\n    self:SetValue(key, value)\nend\n\nlocal my_player = GetPlayerSomehow()\nmy_player.amazing_value = 123\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom ToolGun with Remote Event Handling (Lua, Server)\nDESCRIPTION: Implements a custom BalloonGun by inheriting from the ToolGun base, setting up a constructor and remote event handling. Server-side, it initializes entity color, and when a remote spawn balloon event fires, it instantiates a balloon with custom parameters. Relies on Nanos World event APIs, asset references, and server entity control.\nSOURCE: https://github.com/nanos-world/docs/blob/master/blog/2022-12-07-november.md#_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nBalloonGun = ToolGun.Inherit(\"BalloonGun\")\\n\\nfunction BalloonGun:Constructor(location, rotation)\\n\\t-- Calls parent ToolGun constructor\\n\\tToolGun.Constructor(self, location, rotation, Color.VIOLET)\\nend\\n\\nfunction BalloonGun:OnSpawnBalloon(player, location, ...)\\n    -- Do the original logic here...\\n    ...\\n\\n    -- Spawns a Balloon entity!\\n\\tlocal balloon = Balloon(location, rotation, ...)\\nend\\n\\nBalloonGun.SubscribeRemote(\"SpawnBalloon\", BalloonGun.OnSpawnBalloon)\n```\n\n----------------------------------------\n\nTITLE: Precaching Asset Files - nanos world Lua API\nDESCRIPTION: This Lua method demonstrates how to precache assets before gameplay to ensure smooth loading in nanos world. The Assets.Precache function takes a string asset path as an argument and preloads the asset into memory. It is especially useful for dynamically loaded or future-required assets, preventing runtime FPS spikes. Dependencies include reference to the nanos world asset management API; there are no direct outputs.\nSOURCE: https://github.com/nanos-world/docs/blob/master/blog/2022-10-05-september.md#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nAssets.Precache(asset_path)\n```\n\n----------------------------------------\n\nTITLE: Running Nanos World CLI Directly for Package Update (Windows)\nDESCRIPTION: Example command to run the Nanos World CLI in direct (one-liner) mode on Windows to update a specific package named 'sandbox'. The command `update package sandbox` is passed directly as an argument following `--cli`, executing the update action without entering the interactive prompt. Requires `NanosWorldServer.exe`.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/server-manual/command-line-interface.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n./NanosWorldServer.exe --cli update package sandbox\n```\n\n----------------------------------------\n\nTITLE: Starting Local Docusaurus Development Server - Console\nDESCRIPTION: Runs the local development server for the Docusaurus website using Yarn, automatically opening a browser window and providing hot-reloading for live changes. Requires prior installation of dependencies. Terminal input with this command in the project root starts the dev server; output is an interactive, auto-refreshing website preview.\nSOURCE: https://github.com/nanos-world/docs/blob/master/README.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Using `newindex` for Automatic `SetValue` in Lua\nDESCRIPTION: Provides a practical example of overriding `newindex` to automatically call the entity's `SetValue` method whenever a property is assigned using dot notation (`my_entity.key = value`).\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/scripting/inheriting-classes.md#_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nfunction MyNewClass:newindex(key, value)\n    self:SetValue(key, value)\nend\n\n-- Example usage\nlocal my_entity = MyNewClass()\nmy_entity.amazing_value = 123\n```\n\n----------------------------------------\n\nTITLE: Representing FMargin Struct in Lua\nDESCRIPTION: Defines the Lua table structure for the Unreal Engine `FMargin` struct, typically used within other UI structs like `FSlateBrush`. It specifies padding values with 'Bottom', 'Left', 'Right', and 'Top' fields.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/classes/blueprint.mdx#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\n{\n\t[\"Bottom\"] = 0.0,\n\t[\"Left\"] = 0.0,\n\t[\"Right\"] = 0.0,\n\t[\"Top\"] = 0.0\n}\n```\n\n----------------------------------------\n\nTITLE: Installing SteamCMD on Ubuntu using Bash\nDESCRIPTION: These commands update the package list and install SteamCMD along with its necessary dependencies on an Ubuntu system. It first adds the 'multiverse' repository, enables the i386 architecture (required by SteamCMD), updates the package lists, and finally installs the `lib32gcc1` library and `steamcmd` package using apt.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/tutorials-and-examples/hosting-server-4free-gcp.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo add-apt-repository multiverse\nsudo dpkg --add-architecture i386\nsudo apt update\nsudo apt install lib32gcc1 steamcmd\n```\n\n----------------------------------------\n\nTITLE: Starting the Nanos World Server (Linux)\nDESCRIPTION: This command executes the Nanos World server application on Linux. Running this script starts the game server process, loads the configured packages (including 'my-awesome-package' if added to Config.toml), and makes the server available for clients to connect.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/quick-start.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./NanosWorldServer.sh\n```\n\n----------------------------------------\n\nTITLE: Manually Downloading and Extracting SteamCMD - Bash\nDESCRIPTION: This snippet downloads and extracts the SteamCMD installer for Linux using curl and pipes it into tar for immediate extraction. It is designed for ARM environments using emulators, where apt-based SteamCMD installation is not applicable. Command outputs files in the current directory and requires standard Linux command-line tools.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/server-manual/server-linux-arm.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sqL \\\"https://steamcdn-a.akamaihd.net/client/installer/steamcmd_linux.tar.gz\\\" | tar zxvf -\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom 'newindex' Metamethod in Lua\nDESCRIPTION: Explains how to add a custom `newindex` method (note the name is `newindex`, not `__newindex`) to an inherited class like `MyNewClass`. This method intercepts attempts to set a new key-value pair on an instance (e.g., `my_entity.something = 123`), allowing custom logic such as logging the operation.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/scripting/inheriting-classes.md#_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nfunction MyNewClass:newindex(key, value)\n\tConsole.Log(\"Setting a %s value: %s = %s\", tostring(self), key, tostring(value))\nend\n```\n\n----------------------------------------\n\nTITLE: Spawning a Custom Asset using Lua in nanos world\nDESCRIPTION: Provides a Lua code example for spawning a custom prop in nanos world. It uses the `Prop` function, passing the position, rotation, and the asset identifier string (`my-asset-pack::SM_Cube`). This identifier combines the Asset Pack folder name and the asset key defined in `Assets.toml`.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/assets-modding/creating-assets/importing-assets.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nProp(Vector(0, 0, 0), Rotator(0, 0, 0), \"my-asset-pack::SM_Cube\")\n```\n\n----------------------------------------\n\nTITLE: Downloading and Executing Debian 11 Fix Script using Bash\nDESCRIPTION: Fetches a script using `wget` from a GitHub repository and pipes its content directly to `bash` for execution. This script aims to resolve `GLIBCXX` and `GLIBC` version incompatibilities required by nanos-world on Debian 11 by potentially adding repositories or installing specific library versions. Requires internet access and root privileges.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/server-manual/server-linux-arm.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwget -O - https://raw.githubusercontent.com/Falaxir/nanos-world_yolks-game-panels/master/docker-oses/debian/fixglibcxx.sh | bash\n```\n\n----------------------------------------\n\nTITLE: Spawning and Positioning a Character on Server (Lua)\nDESCRIPTION: Shows how to create a Character instance on the server using specified coordinates and rotation, and then update its location. These actions are automatically replicated to all connected clients due to the engine's synchronization system. Depends on the Character, Vector, and Rotator classes/types.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/essential-concepts.mdx#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\n-- Spawns a Character (on server side)\nlocal my_character = Character(Vector(0, 0, 0), Rotator(), \"nanos-world::SK_Male\")\n\n-- Sets it's location\nmy_character:SetLocation(Vector(100, 100, 100))\n```\n\n----------------------------------------\n\nTITLE: Loading and Calling a C Module Function in Lua\nDESCRIPTION: This Lua code snippet demonstrates how to interact with a loaded C module named 'example'. It calls the 'test' function, which is defined within the C++ module, and prints its return value ('Hello World' in the example scenario) to the nanos world server console using `Console.Log`. This assumes the package containing the 'example' binary has been loaded correctly.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/packages/c-module.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n```lua showLineNumbers\n-- Calls the module function 'test'\n-- Will print 'Hello World' on console\nConsole.Log(example.test())\n```\n```\n\n----------------------------------------\n\nTITLE: Spawning and Interacting with Entities via OOP (nanos world, Lua)\nDESCRIPTION: Demonstrates how to spawn an entity using its constructor and interact with it through instance methods using OOP conventions in Lua. No explicit imports are needed at the script level, as relevant constructors and methods are globally available via the engine. The instance is assigned to a variable, and its methods are invoked using the colon operator. Expects that the relevant entity types and methods (here: \"Entity\" and \"MyFunction\") are supported in the current game engine environment.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/scripting/classes-guide.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Spawning an entity with a Constructor\\nlocal my_entity = Entity()\\n\\n-- Interacting with the entity with it\\'s methods\\nmy_entity:MyFunction()\n```\n\n----------------------------------------\n\nTITLE: Declaring Actor Class Header in nanos-world Docs (JSX/Markdown)\nDESCRIPTION: This snippet declares the header section for the Actor class documentation using a custom JSX-like component. It sets up the class name and type metadata, facilitating dynamic or framework-driven rendering of documentation headers. Dependencies include the docsite framework that supports <HeaderDeclaration> elements.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/classes/base-classes/actor.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<HeaderDeclaration type=\\\"Class\\\" name=\\\"Actor\\\" />\n```\n\n----------------------------------------\n\nTITLE: Listing Community Packages & Libraries with CardLink (JSX/React)\nDESCRIPTION: This snippet organizes and displays a set of community-developed packages and libraries for Nanos World using CardLink React components within a styled div. Inputs include title, description, image_src, and href for each community resource, and dependencies are identical to other snippets (React and CardLink). This is structured for easy extension as new community packages emerge, but requires manual updating when adding more cards.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/explore/game-modes-and-packages.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\\\"card-links\\\">\\n\\n<CardLink\\n\\ttitle=\\\"Battlefield Kill UI\\\"\\n\\tdescription=\\\"Battlefield-like Kill and Feed UI by SyedMuhammad\\\"\\n\\timage_src=\\\"/img/docs/battlefield-kill-ui.webp\\\"\\n\\thref=\\\"https://github.com/gtnardy/nanos-world-battlefield-kill-ui/\\\"\\n/>\\n\\n<CardLink\\n\\ttitle=\\\"WebUI3d2d\\\"\\n\\tdescription=\\\"A library to spawn dynamic and usable WebUIs in the 3D world by Timmy\\\"\\n\\timage_src=\\\"/img/docs/webui3d2d.webp\\\"\\n\\thref=\\\"https://github.com/Timmy-the-nobody/WebUI3d2d\\\"\\n/>\\n\\n<CardLink\\n\\ttitle=\\\"WGUI\\\"\\n\\tdescription=\\\"A framework to make User Interfaces with Widgets by NegativeName\\\"\\n\\timage_src=\\\"/img/docs/wgui.webp\\\"\\n\\thref=\\\"https://github.com/NegativeNameNGT/wgui\\\"\\n/>\\n\\n<CardLink\\n\\ttitle=\\\"UI Framework\\\"\\n\\tdescription=\\\"A powerful UI framework ported by Voltaism\\\"\\n\\timage_src=\\\"https://github.com/vugi99/nanos-uiframework/raw/master/screenshots/UIFrameworkLogo2_1000x500.png\\\"\\n\\thref=\\\"https://github.com/vugi99/nanos-uiframework\\\"\\n/>\\n\\n<CardLink\\n\\ttitle=\\\"EGUI\\\"\\n\\tdescription=\\\"Framework for creating User Interfaces by MegaThorx\\\"\\n\\timage_src=\\\"https://nanos-world.github.io/egui-docs/assets/images/tab-panel-2c678b43d0cc8a3fec78e8507eaebac1.png\\\"\\n\\thref=\\\"https://github.com/nanos-world/egui\\\"\\n/>\\n\\n<CardLink\\n\\ttitle=\\\"Discord Package\\\"\\n\\tdescription=\\\"Discord Webhook integration by SyedMuhammad\\\"\\n\\timage_src=\\\"https://nanos-marketplace-public.s3.eu-central-003.backblazeb2.com/resources-header-images/packages/discord/xkuz7vuebmy4mshj-460x230.webp\\\"\\n\\thref=\\\"https://github.com/nanos-world/nanos-world-discord\\\"\\n/>\\n\\n<CardLink\\n\\ttitle=\\\"ClassLib\\\"\\n\\tdescription=\\\"Powerful Lua Object-Oriented Programming (OOP) library by Timmy\\\"\\n\\timage_src=\\\"https://raw.githubusercontent.com/Timmy-the-nobody/ClassLib/main/media/classlib_github_social_preview.jpg\\\"\\n\\thref=\\\"https://github.com/Timmy-the-nobody/ClassLib\\\"\\n/>\\n\\n</div>\\n\n```\n\n----------------------------------------\n\nTITLE: Context Menu Item Format: Select Type in Lua\nDESCRIPTION: Specifies a Lua table for a 'select' (dropdown) item in the Context Menu. The options property lists available choices with IDs and display names. Ideal for user selections; emits the associated callback when the choice changes.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/explore/sandbox-game-mode/context-menu.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\n{\\n\\tid = \\\"id-of-item\\\",\\n\\ttype = \\\"select\\\",\\n\\tlabel = \\\"select the option\\\",\\n\\tcallback_event = \\\"SelectDropDownOption\\\",\\n\\tselected = \\\"id-opt-1\\\",\\n\\toptions = {\\n\\t\\t{ id = \\\"id-opt-01\\\", name = \\\"Opt 01\\\" },\\n\\t\\t{ id = \\\"id-opt-02\\\", name = \\\"Opt 02\\\" },\\n\\t}\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Defining Static Meshes with Metadata in Assets.toml (TOML)\nDESCRIPTION: Illustrates an advanced method for defining static mesh assets in `Assets.toml` by using TOML tables instead of simple string values. This approach allows associating custom metadata (like `my_tag`, `something`, `thumbnail`) with each asset, in addition to the mandatory `path` key which specifies the asset's location. This metadata can be accessed through scripting.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/assets.mdx#_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[assets.static_meshes]\n\tSM_Flower_01 = { path = \"MyFolder/SM_Awesome_Flower_01\", my_tag = \"Wonderful\", something = 123, thumbnail = \"Thumbnails/SM_Flower_01.jpg\" }\n\tSM_Rock_01 = { path = \"MyFolder/SM_Rock_01\", my_tag = \"Wonderful\", something = 123, thumbnail = \"Thumbnails/SM_Rock_01.jpg\" }\n\tSM_MyAsset_01 = { path = \"MyFolder/SM_MyAsset_01\", my_tag = \"Wonderful\", something = 123, thumbnail = \"Thumbnails/SM_MyAsset_01.jpg\" }\n\t# ...\n```\n\n----------------------------------------\n\nTITLE: Illustrating Package Directory Structure for nanos world Server\nDESCRIPTION: Defines the standard folder organization for a nanos world package within the server's 'Packages/' directory. It highlights the 'Server', 'Client', and 'Shared' folders, specifying that only 'Client' and 'Shared' contents are distributed to players. The structure mandates an 'Index.lua' entry point within script-containing folders and the central 'Package.toml' configuration file.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/packages/packages-guide.md#_snippet_0\n\nLANGUAGE: folder-structure\nCODE:\n```\nNanosWorldServer.exe\nPackages/\n├── my-package-01/\n│\t├── Server/\n│\t│   ├── Index.lua\n│\t│   └── *.lua\n│\t├── Client/\n│\t│   └── *.lua\n│\t├── Shared/\n│\t│   └── *.lua\n│\t└── Package.toml\n├── my-package-02/\n│\t├── Package.toml\n│\t└── ...\n├── my-package-loading-screen-01/\n│\t├── Index.html\n│\t├── Package.toml\n│\t└── ...\nAssets/\nConfig.toml\n```\n\n----------------------------------------\n\nTITLE: Assigning Custom Default Values to Inherited Classes (nanos world, Lua)\nDESCRIPTION: Shows how to provide a table of default property values (such as name, category, and custom parameters) when inheriting a new class from Prop. These default values are accessible during runtime and can influence class behavior or metadata display. Dependencies: Prop base class; requires object construction supporting parameterized inheritance; produces Console log output demonstrating access to set defaults.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/scripting/inheriting-classes.md#_snippet_20\n\nLANGUAGE: lua\nCODE:\n```\n-- inherits the Class\\nMyNewClass = Prop.Inherit(\"MyNewClass\", {\\n\\tname = \"My Name\",\\n\\tcategory = \"breakable\",\\n\\tmy_custom_param = 123\\n})\\n\\nConsole.Log(MyNewClass.category)\\n-- outputs \"breakable\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Input Key Bindings (Before v1.33) in Lua\nDESCRIPTION: Displays the data structure returned by `Input.GetScriptingKeyBindings()` and `Input.GetGameKeyBindings()` before version 1.33. The format was a Lua table mapping key binding action names (strings) directly to the corresponding single key name (string). Requires the nanos-world Input API.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/packages/compatibility-versions.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\n-- KeyBinding = Key\n{\n\t\"Jump\" = \"Spacebar\",\n\t\"Crouch\" = \"Control\",\n\t\"Fire\" = \"LeftMouse\",\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Unreal Engine Details in Assets.toml\nDESCRIPTION: Shows the `[unreal]` section of the `Assets.toml` file. This section configures essential metadata about the Unreal Engine project used to create the assets, including the `unreal_folder` (root folder within the Unreal project's Content directory), the `unreal_version` it was compiled with, and a boolean `is_plugin_content` indicating if the Plugin Content method was used.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/assets-modding/creating-assets/importing-assets.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n# unreal engine configurations\n[unreal]\n    # unreal engine folder - the name of the root folder (the one inside UnrealProject/Content/) which the assets will have references to each other\n    unreal_folder =     \"MyAssetPack\"\n    # unreal engine version - unreal version this asset pack was compiled on\n    unreal_version =    \"5.0.3\"\n    # whether this asset pack was created as a plugin content\n    is_plugin_content = false\n```\n\n----------------------------------------\n\nTITLE: Installing, Updating, and Starting nanos world Server via Shell - Shell\nDESCRIPTION: This shell script snippet demonstrates a complete workflow to install or update the nanos world server using SteamCMD, install required packages and assets, and then start the server with customized parameters. Prerequisites include SteamCMD, network access, and executable permission for NanosWorldServer.sh. Key parameters set the server name, description, map, game mode, packages, port numbers, player limit, and logo. Input to each step is in the form of CLI arguments; output is server installation, package setup, and a running server process. The snippet is designed for a Linux environment.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/server-manual/server-configuration.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Installs/Updates the server through SteamCMD\nsteamcmd +force_install_dir /home/nanos-world-server +login anonymous +app_update \"1936830 -beta bleeding-edge\" validate +quit\n\n# Installs all needed Packages (this will install needed Assets as well)\n./NanosWorldServer.sh --cli install package sandbox battlefield-kill-ui ts-fireworks-tools\n\n# Starts the server with all configs set\n./NanosWorldServer.sh --name \"nanos world Amazing Sandbox\" --description \"Awesome Sandbox Server\" --map \"nanos-world::TestingMap\" --game_mode \"sandbox\" --packages \"battlefield-kill-ui,ts-fireworks-tools\" --port 7777 --query_port 7778 --max_players 32 --logo \"https://i.imgur.com/vnB8CB5.jpg\"\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Class Registration Events - nanos world Lua\nDESCRIPTION: Demonstrates subscription to the ClassRegister static event for inherited classes in nanos world. Whenever a new class is registered through Inherit, this event is triggered, passing the class as an argument for possible additional initialization or integration. Expects Prop static class to exist with Subscribe support as per the latest API.\nSOURCE: https://github.com/nanos-world/docs/blob/master/blog/2022-12-31-december.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nProp.Subscribe(\"ClassRegister\", function(class)\\n\\t-- Do something with the new class\\nend)\n```\n\n----------------------------------------\n\nTITLE: Context Menu Item Format: Color Type in Lua\nDESCRIPTION: Declares the format for a 'color' picker item in the Context Menu as a Lua table. The 'value' key expects a hexadecimal color code, and selecting a color fires the specified callback event. This item is included in the items array of a new category.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/explore/sandbox-game-mode/context-menu.md#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\n{\\n\\tid = \\\"id-of-item\\\",\\n\\ttype = \\\"color\\\",\\n\\tlabel = \\\"selec the color\\\",\\n\\tcallback_event = \\\"ContextMenu_MyButtonPressed\\\",\\n\\tvalue = Color.RED:ToHex(false)\\n},\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing nanos world Event Bridge in JavaScript\nDESCRIPTION: This JavaScript code defines an 'Events' object with 'Call' and 'Subscribe' methods. These methods act as a bridge, forwarding calls to the native 'window.Events' object provided by the nanos world environment, allowing React components to interact with game events. It checks if 'window.Events' exists before attempting to use it.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/tutorials-and-examples/basic-hud-react.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst Events = {};\n\nEvents.Call = function (sEventName, ...args) {\n    if (typeof (window.Events) == \"undefined\") return;\n    window.Events.Call(sEventName, ...args);\n}\n\nEvents.Subscribe = function (sEventName, callback) {\n    if (typeof (window.Events) == \"undefined\") return;\n    window.Events.Subscribe(sEventName, callback);\n}\n\nexport default Events;\n```\n\n----------------------------------------\n\nTITLE: Communicating from JavaScript (WebUI) to Lua\nDESCRIPTION: Provides the corresponding JavaScript code for handling events from Lua and sending events back. It uses `Events.Subscribe` to listen for the `MyEvent` triggered from Lua, processes the received parameters, and uses `Events.Call` to trigger the `MyAnswer` event in the Lua environment. It also shows how to stop listening using `Events.Unsubscribe`.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/classes/webui.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Register for \"MyEvent\" from Lua\nEvents.Subscribe(\"MyEvent\", function(param1, param2) {\n    console.log(\"Triggered! \" + param1 + \" \" + param2);\n    // Will output 'Triggered! 123 hello'\n\n    // Triggers \"MyAnswer\" on Lua\n    Events.Call(\"MyAnswer\", \"Hey there!\");\n});\n\n// It is also possible to unsubscribe from an event to make it stop triggering\nEvents.Unsubscribe(\"MyEvent\");\n```\n\n----------------------------------------\n\nTITLE: Binding Menu Input Event with Escape Key - Lua\nDESCRIPTION: Demonstrates registering a handler for the Escape (ESC) key in a nanos world Lua script using the Input.Bind function. This enables custom menu management and allows developers to intercept menu close actions before the default game menu appears. It requires nanos world scripting environment with access to the Input API. The key parameter 'Menu' represents the ESC key, and the function checks the state of 'is_my_menu_open' to conditionally close a custom menu. InputEvent.Pressed triggers the callback on press. Returns false to indicate early handling, and holding the ESC key still opens the default menu by design.\nSOURCE: https://github.com/nanos-world/docs/blob/master/blog/2025-04-09-april.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nInput.Bind(\"Menu\", InputEvent.Pressed, function()\n\t-- Example code of usage\n\tif (is_my_menu_open) then\n\t\tCloseCustomMenu()\n\t\treturn false\n\tend\nend)\n```\n\n----------------------------------------\n\nTITLE: Adding Actor Class Events via EventsDeclaration Component (JSX/Markdown)\nDESCRIPTION: This snippet adds a section for Actor class events using a JSX-like documentation tag. Event signatures and details will be automatically rendered by the documentation system based on this declaration. A compatible static site generator is necessary to render the output.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/classes/base-classes/actor.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<EventsDeclaration type=\\\"Class\\\" name=\\\"Actor\\\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Character Animation Blend Spaces - nanos world Lua API\nDESCRIPTION: These Lua functions are used for customizing animation blend spaces and animation transitions for character movement states (Standing, Crouching, Proning) in nanos world. The functions require a character object and paths to animation assets; some accept an optional 'enable_tip' boolean parameter. They allow modders to override default locomotion animations, enhancing character customizability. Outputs are applied to the character's animation system; improper usage may cause animation errors.\nSOURCE: https://github.com/nanos-world/docs/blob/master/blog/2022-10-05-september.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nCharacter.SetAnimationIdleWalkRunStanding(anim_path, enable_tip)\nCharacter.SetAnimationIdleWalkRunCrouching(anim_path, enable_tip)\nCharacter.SetAnimationIdleWalkRunProning(anim_path)\n\nCharacter.SetAnimationsTransitionStandingCrouching(anim_standing_to_crouching, anim_crouching_to_standing)\nCharacter.SetAnimationsTransitionCrouchingProning(anim_crouching_to_proning, anim_proning_to_crouching)\n```\n\n----------------------------------------\n\nTITLE: Defining Common Metadata in Package.toml for nanos world Packages\nDESCRIPTION: Specifies the mandatory '[meta]' section required at the beginning of every 'Package.toml' file for all nanos world package types. This section defines essential metadata: 'title' for the package's display name, 'author' identifying the creator(s), and 'version' indicating the package version according to the SemVer (X.Y.Z) format. This metadata is used for identification and management.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/packages/packages-guide.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[meta]\ntitle = \"My Package\"\nauthor = \"nanos world\"\nversion = \"1.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Level Class in Client-Side Lua\nDESCRIPTION: This commented-out snippet serves as a placeholder for demonstrating the usage of the `Level` static class within a client-side Lua script (`Client/Index.lua`) in the 'nanos-world' environment. The specific example code is omitted in the comment.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/static-classes/level.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n```lua title=\"Client/Index.lua\"\n\n```\n```\n\n----------------------------------------\n\nTITLE: Customizing Static Mesh Asset Meta Data - TOML Table in Assets.toml\nDESCRIPTION: This TOML snippet illustrates how to define static mesh assets using tables, allowing custom meta data fields alongside the required path, such as tags, numeric values, or preview thumbnails. Dependencies are that the 'path' field is always present and custom keys are optional and accessible from scripts. Users should ensure custom fields are unique to prevent conflicts. Input is a key/table asset declaration, output is enriched asset registration.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/assets.mdx#_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[assets.static_meshes]\n\tSM_Flower_01 = { path = \"MyFolder/SM_Awesome_Flower_01\", my_tag = \"Wonderful\", something = 123, thumbnail = \"Thumbnails/SM_Flower_01.jpg\" }\n\tSM_Rock_01 = { path = \"MyFolder/SM_Rock_01\", my_tag = \"Wonderful\", something = 123, thumbnail = \"Thumbnails/SM_Rock_01.jpg\" }\n\tSM_MyAsset_01 = { path = \"MyFolder/SM_MyAsset_01\", my_tag = \"Wonderful\", something = 123, thumbnail = \"Thumbnails/SM_MyAsset_01.jpg\" }\n\t# ...\n```\n\n----------------------------------------\n\nTITLE: Installing Default Weapons Package via CLI (Shell)\nDESCRIPTION: This shell command uses the Nanos World server executable (`NanosWorldServer.exe`) with the `--cli` flag to install the `default-weapons` package. This package provides base weapon functionality that the subsequent Lua script leverages.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/tutorials-and-examples/fireworks.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# install the default-weapons package\n./NanosWorldServer.exe --cli install package default-weapons\n```\n\n----------------------------------------\n\nTITLE: Installing nanos world Package via CLI\nDESCRIPTION: This shell command uses the nanos world server executable's command-line interface (`--cli`) to install the 'default-weapons' package. This package provides base weapon functionalities, like the Glock used in the subsequent Lua script.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/tutorials-and-examples/fireworks.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# install the default-weapons package\n./NanosWorldServer.exe --cli install package default-weapons\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions for nanos world Store Publishing (YML)\nDESCRIPTION: This YAML configuration defines a GitHub Actions workflow named 'nanos world Store Publish'. It triggers automatically whenever a new release is published on the GitHub repository (`on: release: types: [published]`). The workflow runs on an Ubuntu environment, checks out the repository code using `actions/checkout@v2`, and then utilizes the `nanos-world/nanos-store-action@v2.0` to upload the package or asset pack to the nanos world Store. Key parameters include `folder` (location of the resource files), `name` (unique name of the resource), and `token` (a nanos world Store API token stored securely as a GitHub secret named `STORE_SECRET`).\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/vault-and-store/store.md#_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\nname: nanos world Store Publish\n\non:\n  release:\n    types: [published]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    name: Publish package\n    steps:\n      - uses: actions/checkout@v2\n      - name: Nanos Store Action\n        uses: nanos-world/nanos-store-action@v2.0\n        env:\n          GITHUB_TOKEN: ${{ github.token }}\n        with:\n          # folder which contains the asset/package - if it's on root, leave it blank\n          folder: ''\n          # name of the asset/package\n          name: 'name-of-the-package-or-asset'\n          # API token - generate at https://store.nanos.world/settings/tokens/ and set under Settings -> Secrets -> Actions with name STORE_SECRET\n          token: ${{ secrets.STORE_SECRET }}\n```\n\n----------------------------------------\n\nTITLE: Optimizing Canvas HUD Repaint Rate in Lua (nanos world)\nDESCRIPTION: This snippet shows how to optimize the basic Canvas HUD by limiting its repaint frequency. Instead of redrawing every frame (auto_repaint_rate = 0), the `Canvas` constructor is used with a specific repaint rate (e.g., 0.033 milliseconds, equivalent to roughly 30 frames per second). This reduces the performance impact compared to updating on every single tick.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/tutorials-and-examples/basic-hud-canvas.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- Instead of 0 in the auto_repaint_rate parameter\nHUDCanvas = Canvas(true, Color.TRANSPARENT, 0, true)\n\n-- Use 0.033, so it only updates every 0.033ms (i.e. at 30 fps)\n-- highlight-next-line\nHUDCanvas = Canvas(true, Color.TRANSPARENT, 0.033, true)\n```\n\n----------------------------------------\n\nTITLE: Setting TopDown View Mode for a Character in Lua\nDESCRIPTION: This Lua code snippet shows how to set the player's view mode to the new native TopDown perspective. Calling the 'SetViewMode' method on a Character instance with the 'ViewMode.TopDown' enum changes the camera perspective and associated game mechanics like aiming and interaction.\nSOURCE: https://github.com/nanos-world/docs/blob/master/blog/2021-12-01-unreal-engine-5.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nmy_character:SetViewMode(ViewMode.TopDown)\n```\n\n----------------------------------------\n\nTITLE: Defining the Initial HUD UI as a React Component (App.js) - JavaScript\nDESCRIPTION: This React component defines the base structure for the HUD, rendering health and ammo sections using divs, spans, and an image. Static values are shown for demonstration. The component imports styles and is set up for future DOM event updates. The Ammo and Health sections are visually separated, anticipating dynamic updates through state and events.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/tutorials-and-examples/basic-hud-react.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport './App.css';\n\nfunction App() {\n  return (\n    <div >\n      {/* Health container (black background) */}\n        <div id=\"health_container\">\n            <img src=\"./img/health.png\" alt=\"health-cross\"/>\n              <span id=\"health_current\">100</span> {/* Health value */}\n        </div>\n\n        {/* Weapon Ammo container (black background) */}\n        <div id=\"weapon_ammo_container\">\n            <span id=\"weapon_ammo_clip\">30</span> {/* Ammo Clip value */}\n            <span id=\"weapon_ammo_bag\">/ 1000</span> {/* Ammo Bag value */}\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Starting the Nanos World Server (Windows)\nDESCRIPTION: This command executes the Nanos World server application on Windows. Running this executable starts the game server process, loads the configured packages (including 'my-awesome-package' if added to Config.toml), and makes the server available for clients to connect.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/quick-start.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./NanosWorldServer.exe\n```\n\n----------------------------------------\n\nTITLE: Creating a Nanos World Package via CLI (Windows)\nDESCRIPTION: This command utilizes the Nanos World server executable's Command Line Interface (CLI) on Windows to create a new package structure named 'my-awesome-package'. It automates the creation of necessary folders (Server, Client, Shared) and the Package.toml configuration file.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/quick-start.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./NanosWorldServer.exe --cli add package my-awesome-package\n```\n\n----------------------------------------\n\nTITLE: Override __index to GetValue Automatically - nanos world - Lua\nDESCRIPTION: This example overrides __index for the Player class so that all property retrievals are routed through the GetValue method, ensuring a consistent mechanism for reading custom data. The code includes both the index method and a usage example where an arbitrary property is accessed on a Player instance. Prerequisites are that Player is a class with GetValue and is accessible from GetPlayerSomehow.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/scripting/extending-classes.md#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nfunction Player:index(key)\n    return self:GetValue(key)\nend\n\nlocal my_player = GetPlayerSomehow()\nlocal amazing_value = my_player.amazing_value\n```\n\n----------------------------------------\n\nTITLE: Setting Default Values for Inherited Classes in Lua\nDESCRIPTION: This Lua snippet demonstrates how to assign default values to properties of a custom class during its definition. By passing a table as the second argument to `Prop.Inherit`, properties like `name`, `category`, and `my_custom_param` are automatically set for the `MyNewClass` class definition itself, accessible later via `MyNewClass.propertyName`.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/scripting/inheriting-classes.md#_snippet_22\n\nLANGUAGE: lua\nCODE:\n```\n-- inherits the Class\nMyNewClass = Prop.Inherit(\"MyNewClass\", {\n\tname = \"My Name\",\n\tcategory = \"breakable\",\n\tmy_custom_param = 123\n})\n\nConsole.Log(MyNewClass.category)\n-- outputs \"breakable\"\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Colored Messages with NanosWorld Chat in Lua\nDESCRIPTION: This snippet demonstrates how to broadcast a chat message containing colored text using the Chat.BroadcastMessage method from the nanos world scripting API. The string includes an inline style tag (e.g., <cyan>) to render the specified portion of the message with the desired color. Requires the Chat static class available in the nanos world server-side environment. Parameter is the message string supporting style tags; no return value is expected, but the message will appear in all connected clients' chat interfaces. Combination of multiple styles (e.g., <bold> plus <red>) is not supported.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/static-classes/chat.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nChat.BroadcastMessage(\"Hello with <cyan>Cyan</> text message!\")\n```\n\n----------------------------------------\n\nTITLE: Accessing Static Mesh Bounds Metadata in Lua (Server-Side)\nDESCRIPTION: This server-side Lua script demonstrates how to retrieve and utilize the bounds metadata (origin, box extent, sphere radius) for static mesh assets defined in `Assets.toml`. It uses the `Assets.GetStaticMeshes` function to iterate through assets in the \"nanos-world\" pack and logs the bounds information for each asset. Requires the `Assets.toml` file to contain the bounds data for the accessed assets.\nSOURCE: https://github.com/nanos-world/docs/blob/master/blog/2023-07-12-june.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n```lua title=Server/Index.lua\nfor _, asset in pairs(Assets.GetStaticMeshes(\"nanos-world\")) do\n\tlocal bounds = asset.bounds\n\tConsole.Log(bounds.origin) -- Vector(0.000, 0.000, 0.000)\n\tConsole.Log(bounds.box_extent) -- Vector(50.000, 50.000, 50.000)\n\tConsole.Log(bounds.sphere_radius) -- 86.602539\nend\n```\n```\n\n----------------------------------------\n\nTITLE: Binding Input Actions (Legacy Method) in Nanos World Lua\nDESCRIPTION: This Lua code snippet demonstrates the previous method for binding keyboard inputs in Nanos World scripting. It binds the 'MoveForward' action, which handled both forward and backward movement, passing a delta value ranging from -1.0 (backward) to 1.0 (forward) to the callback function upon key press.\nSOURCE: https://github.com/nanos-world/docs/blob/master/blog/2025-01-08-january.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n```lua title=\"Client/Input.lua\"\nInput.Bind(\"MoveForward\", InputEvent.Pressed, function(delta)\n\t-- Before it returned delta from -1.0 (backwards) to 1.0 (forward)\n\tConsole.Log(\"MoveForward: \", delta)\nend)\n```\n```\n\n----------------------------------------\n\nTITLE: Handling Health and Ammo Events in the HUD UI (App.js) - JavaScript\nDESCRIPTION: This React component finalizes the HUD by connecting nanos world event subscriptions with React state hooks to update health and ammo in real-time. The component imports both styles and the custom Events module, and defines states for health, ammo in clip, ammo bag, and ammo display toggle. The use of Events.Subscribe links game-side changes to UI updates, and the display of the ammo container is conditionally rendered based on current weapon state.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/tutorials-and-examples/basic-hud-react.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport './App.css';\nimport Events from './Events.js';\nimport { useState } from 'react';\n\n\nfunction App() {\n\n  // Use React State to store the health and ammo values\n  // The values are updated by the events from the server\n  const [health, setHealth] = useState(100);\n  const [weaponAmmo, setWeaponAmmo] = useState(30);\n  const [weaponBag, setWeaponBag] = useState(1000);\n  const [displayAmmo, setDisplayAmmo] = useState(false);\n\n  // Subscribe to the events related to the Ammo and visibility of the Ammo container\n  Events.Subscribe(\"UpdateWeaponAmmo\",(enable, clip, bag) => {\n    setDisplayAmmo(enable);\n    setWeaponAmmo(clip);\n    setWeaponBag(bag);\n  });\n\n  // Subscribe to the events related to the Health\n  Events.Subscribe(\"UpdateHealth\", (health) => {\n    setHealth(health);\n  });\n\n  return (\n    <div >\n      {/* Health container (black background) */}\n        <div id=\"health_container\">\n            <img src=\"./img/health.png\" alt=\"health-cross\"/>\n              <span id=\"health_current\">{health}</span> {/* Health value */}\n        </div>\n\n        {/* Weapon Ammo container (black background) */}\n        {displayAmmo &&\n          <div id=\"weapon_ammo_container\">\n            <span id=\"weapon_ammo_clip\">{weaponAmmo}</span> {/* Ammo Clip value */}\n            <span id=\"weapon_ammo_bag\">/ {weaponBag}</span> {/* Ammo Bag value */}\n        </div>\n        }\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Rendering Package & Library Card Links with React Components (JSX)\nDESCRIPTION: This snippet renders a set of package and library entries using the CardLink React component, organized within a div for presentation. It requires the CardLink component (from '@site/src/components/_nanos') and assumes image and href props are valid. Each CardLink uses title, description, image_src, and href props to display concise information about official resources, focusing on default assets and libraries. Suitable for static listings; changes to content require code modification.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/explore/game-modes-and-packages.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\\\"card-links\\\">\\n\\n<CardLink\\n\\ttitle=\\\"Default Vehicles\\\"\\n\\tdescription=\\\"Default Vehicle Pack included in the game, ready to use\\\"\\n\\timage_src=\\\"/img/docs/vehicles-pack.webp\\\"\\n\\thref=\\\"https://github.com/nanos-world/nanos-world-vehicles\\\"\\n/>\\n\\n<CardLink\\n\\ttitle=\\\"Default Weapons\\\"\\n\\tdescription=\\\"Default Weapon Pack included in the game, ready to use\\\"\\n\\timage_src=\\\"/img/docs/weapons-pack.webp\\\"\\n\\thref=\\\"https://github.com/nanos-world/nanos-world-weapons\\\"\\n/>\\n\\n<CardLink\\n\\ttitle=\\\"Official Community Lua Library\\\"\\n\\tdescription=\\\"All definition of our basic structs (Vector, Rotator), math and helper methods\\\"\\n\\timage_src=\\\"/img/docs/nanos-world-background.webp\\\"\\n\\thref=\\\"https://github.com/nanos-world/nanos-world-lua-lib\\\"\\n/>\\n\\n</div>\\n\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Player Spawn Event in Lua\nDESCRIPTION: Demonstrates how to register a callback function for the 'Spawn' event on the 'Player' class using the 'Subscribe' method. The provided callback logs a message to the console indicating that a player has joined, including their name. This event triggers whenever a new player entity is spawned.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/scripting/events-guide.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n```lua showLineNumbers\nPlayer.Subscribe(\"Spawn\", function(player)\n    Console.Log(player:GetName() .. \" has joined!\")\nend)\n```\n```\n\n----------------------------------------\n\nTITLE: Making a Mesh a Mirror using nanos world in Lua\nDESCRIPTION: This example shows how to create a fully reflective—mirror-like—static mesh by maximizing the 'Metallic' parameter and minimizing 'Roughness'. It builds on spawning and basic material assignment, then sets both scalar parameters via 'SetMaterialScalarParameter'. Requires a compatible default material and parameter support; will result in a mesh that behaves visually as a mirror.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/tutorials-and-examples/painting-meshes.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n-- spawns a static mesh cube\\nlocal my_cube = StaticMesh(Vector(300, 0, 100), Rotator(0, 45, 0), \\\"nanos-world::SM_Cube\\\")\\n\\n-- replaces it's materials with the nanos default one\\nmy_cube:SetMaterial(\\\"nanos-world::M_Default_Masked_Lit\\\")\\n\\n-- makes it fully metallic and glossy\\nmy_cube:SetMaterialScalarParameter(\\\"Metallic\\\", 1)\\nmy_cube:SetMaterialScalarParameter(\\\"Roughness\\\", 0)\n```\n\n----------------------------------------\n\nTITLE: Setting Actor Dimension in Lua\nDESCRIPTION: This snippet demonstrates how to move an actor (represented by the 'actor' variable) to a different dimension using the `SetDimension` method. The 'number' parameter specifies the target dimension ID (an integer between 1 and 65,535). Moving an actor also affects its attached children according to the actor hierarchy rules.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/scripting/dimensions.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nactor:SetDimension(number)\n```\n\n----------------------------------------\n\nTITLE: Generating Actor Events Documentation\nDESCRIPTION: This custom component tag is responsible for rendering the documentation section that lists and describes the events associated with the 'Actor' class. It specifies the target type as 'Class' and the name as 'Actor'.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/classes/base-classes/actor.mdx#_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n<EventsDeclaration type=\"Class\" name=\"Actor\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Apt Pinning Preferences for Package Selection - Text\nDESCRIPTION: This snippet is to be added to /etc/apt/preferences. It defines pin priorities for stable and testing releases, ensuring the apt package manager defaults to stable packages unless otherwise specified. This prevents unintentional upgrades to testing versions, a key constraint when pulling selected newer libraries for Nanos World server compatibility.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/server-manual/server-linux-arm.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nPackage: *\\nPin: release a=stable\\nPin-Priority: 900\\n\\nPackage: *\\nPin: release a=testing\\nPin-Priority: 400\n```\n\n----------------------------------------\n\nTITLE: Defining Exported Assets in Assets.toml\nDESCRIPTION: Demonstrates how to list exported assets within the `[assets]` section of `Assets.toml`. This example specifically shows defining a static mesh under `[assets.static_meshes]`, mapping a scripting key (`SM_Cube`) to its relative path within the Asset Pack (`MySubFolder/SM_Cube`). This allows the asset to be referenced in game scripts.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/assets-modding/creating-assets/importing-assets.md#_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n# assets files\n[assets]\n    # ...\n\n    # static meshes\n    [assets.static_meshes]\n        # Key = Path\n        SM_Cube = \"MySubFolder/SM_Cube\"\n        # ...\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from a Specific Player Spawn Event Callback - nanos world - Lua\nDESCRIPTION: Illustrates registering multiple callbacks to the 'Spawn' event and selectively unsubscribing a specific function ('OnSpawnPlayer') from Player's 'Spawn' event. Relies on Lua function references and the nanos world API for event subscription management. Only the targeted callback is removed; other event callbacks remain active.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/scripting/events-guide.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n-- Declares the Callback beforehand\nfunction OnSpawnPlayer(player)\n    Console.Log(player:GetName() .. \" has joined!\")\nend\n\n-- Subscribes the event, passing the Callback\nPlayer.Subscribe(\"Spawn\", OnSpawnPlayer)\n\n-- Subscribes for the same event, twice\nPlayer.Subscribe(\"Spawn\", function(player)\n    Console.Log(player:GetName() .. \" has joined again!\")\nend)\n\n-- Unsubscribes only from the first Callback\nPlayer.Unsubscribe(\"Spawn\", OnSpawnPlayer)\n\n-- This will keep triggering \"player has joined again\" but will not trigger\n-- \"player has joined\" anymore\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Melee Entity with Inheritance and Initialization (Lua, Server)\nDESCRIPTION: Defines a new Torch entity by subclassing Melee, implementing a full constructor that sets up animations, effects, and sounds, and attaches light and particle entities. Used primarily server-side for sandbox games, dependencies include Nanos World entity APIs and asset references. Inputs: location and rotation; output: a configured Torch entity.\nSOURCE: https://github.com/nanos-world/docs/blob/master/blog/2022-12-07-november.md#_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nTorch = Melee.Inherit(\"Torch\")\\n\\nfunction Torch:Constructor(location, rotation)\\n\\tself.Super:Constructor(location or Vector(), rotation or Rotator(), \"nanos-world::SM_Torch\")\\n\\tself:AddAnimationCharacterUse(\"nanos-world::AM_Mannequin_Torch_Attack\")\\n\\tself:SetImpactSound(SurfaceType.Flesh, \"nanos-world::A_Punch_Cue\")\\n\\tself:SetDamageSettings(0.5, 0.25)\\n\\tself:SetCooldown(1.5)\\n\\tself:SetBaseDamage(25)\\n\\n\\tlocal light = Light(Vector(), Rotator(), Color(1, 0.7, 0.4), LightType.Point, 100, 1000)\\n\\tlight:AttachTo(self, AttachmentRule.SnapToTarget, \"\", 0)\\n\\tlight:SetRelativeLocation(Vector(0, 0, 75))\\n\\n\\tlocal particle = Particle(Vector(), Rotator(), \"nanos-world::P_Fire\", false)\\n\\tparticle:AttachTo(self, AttachmentRule.SnapToTarget, \"\", 0)\\n\\tparticle:SetRelativeLocation(Vector(0, 0, 50))\\nend\n```\n\n----------------------------------------\n\nTITLE: Using `index` to Return Functions or Redirect Calls in Lua\nDESCRIPTION: Shows advanced usage of the overridden `index` method. It can be used to dynamically return a function when an unknown key is accessed (effectively handling non-existent method calls) or redirect the call to another existing member function.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/scripting/inheriting-classes.md#_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\nfunction MyNewClass:index(key)\n\tConsole.Log(\"%s key not found: %s\", tostring(self), key)\n\n    -- inside the redirected method you will have all the parameters passed originally\n    return function(self, param1, param2...)\n        -- ... do something\n        return \"triggered!\"\n    end\n\n    -- or you can even redirect to other member functions\n    return MyClass.SetLocation\nend\n\nlocal my_entity = MyNewClass()\nmy_entity:NonExistentMethod(123, \"456\")\n```\n\n----------------------------------------\n\nTITLE: Declaring Base Paintable Class Header in MarkDown/JSX - Markdown\nDESCRIPTION: This snippet utilizes a custom HeaderDeclaration component to declare the existence and basic identity of the Paintable class in the documentation. Dependencies include the project's documentation site generation system that can interpret JSX within Markdown. No parameters are explicitly passed, but type ('Class') and name ('Paintable') are defined as props. Inputs are static JSX component attributes; output is a rendered header section in the generated documentation. Requires that the documentation build system supports such embedded JSX components.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/classes/base-classes/paintable.mdx#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n<HeaderDeclaration type=\\\"Class\\\" name=\\\"Paintable\\\" />\n```\n\n----------------------------------------\n\nTITLE: Composing Multiple Inheritance Chains with Classes (Lua)\nDESCRIPTION: Demonstrates how to create a hierarchy of classes by repeatedly inheriting from prior inherited classes. Each class extends the previous one, enabling shared and overridden behaviors through the class chain. The system presumes the inheritance framework supports multi-level extension and construction.\nSOURCE: https://github.com/nanos-world/docs/blob/master/blog/2022-12-07-november.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nMyCube = Prop.Inherit(\"MyCube\")\\nMyMiniCube = MyCube.Inherit(\"MyMiniCube\")\\nMySuperMiniCube = MyMiniCube.Inherit(\"MySuperMiniCube\")\n```\n\n----------------------------------------\n\nTITLE: Defining Common Package Metadata in TOML\nDESCRIPTION: Displays the standard `[meta]` section required in all `Package.toml` files. This section is used to define essential metadata for the package, including its user-friendly `title`, the `author`(s), and the package `version` following the SemVer (Semantic Versioning) format (X.Y.Z).\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/packages/packages-guide.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[meta]\n# title = \"\"\n# author = \"\"\n# version = \"1.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Configuring a 'script' Type Package in Package.toml for nanos world\nDESCRIPTION: Represents the configuration file ('Package.toml') structure specifically for a 'script' type package in nanos world. Script packages are intended for general Lua scripting functionalities, and multiple 'script' packages can be loaded concurrently by the server. The specific configuration settings for this type are defined externally and referenced here.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/packages/packages-guide.md#_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Server to Use Custom Loading Screen in TOML\nDESCRIPTION: Shows the necessary configuration setting within the server's 'Config.toml' file to enable a custom loading screen. The 'loading_screen' key must be set to the string name of the custom loading screen package directory (e.g., \"my-loading-screen\"). This configuration is essential for dedicated servers to display the custom screen when players join.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/packages/loading-screen.md#_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n```toml title=\"Server/Config.toml\"\n# loading-screen package to load (the loading screen will be displayed when players join your server)\nloading_screen = \"my-loading-screen\"\n```\n```\n\n----------------------------------------\n\nTITLE: Adjusting Mesh Metallic and Roughness Parameters in nanos world (Lua)\nDESCRIPTION: This Lua snippet demonstrates modifying the surface properties of a StaticMesh to make it appear metallic and glossy. It uses `SetMaterialScalarParameter` to set the 'Metallic' parameter to 0.85 (mostly metallic) and the 'Roughness' parameter to 0 (perfectly smooth/glossy). This requires the material to have 'Metallic' and 'Roughness' scalar parameters.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/tutorials-and-examples/painting-meshes.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n-- spawns a static mesh cube\nlocal my_cube = StaticMesh(Vector(300, 0, 100), Rotator(0, 45, 0), \"nanos-world::SM_Cube\")\n-- replaces it's materials with the nanos default one\nmy_cube:SetMaterial(\"nanos-world::M_Default_Masked_Lit\")\n\n-- paints it red\nmy_cube:SetMaterialColorParameter(\"Tint\", Color(1, 0, 0))\n\n-- makes it metallic\nmy_cube:SetMaterialScalarParameter(\"Metallic\", 0.85)\n\n-- makes it glossy\nmy_cube:SetMaterialScalarParameter(\"Roughness\", 0)\n```\n\n----------------------------------------\n\nTITLE: Alternative Event Subscription Using Class Methods in Lua\nDESCRIPTION: Illustrates an alternative pattern for event handling where the event handler logic is defined as a class method (`MyNewClass:OnSpawn`). This method implicitly receives `self`. The `Subscribe` method is then called passing the class and the method reference (`MyNewClass.Subscribe(\"Spawn\", MyNewClass.OnSpawn)`).\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/scripting/inheriting-classes.md#_snippet_16\n\nLANGUAGE: lua\nCODE:\n```\nfunction MyNewClass:OnSpawn()\n    -- self is present is this context automatically\n    Console.Log(\"Spawned MyNewClass: %s\", tostring(self))\nend\n\nMyNewClass.Subscribe(\"Spawn\", MyNewClass.OnSpawn)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Canvas HUD in Lua (nanos world)\nDESCRIPTION: This Lua script demonstrates the creation of a basic Heads-Up Display (HUD) using the `Canvas` object. It initializes a transparent canvas and subscribes to the `Update` event, which fires every frame. Inside the event handler, it retrieves the local player and character, then draws the character's health and the equipped weapon's ammo count onto the canvas using `DrawText`. This implementation redraws the HUD elements every frame.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/tutorials-and-examples/basic-hud-canvas.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Spawns the Canvas\nHUDCanvas = Canvas(true, Color.TRANSPARENT, 0, true)\n\n-- Subscribes for Update event, we can only draw inside this event\nHUDCanvas:Subscribe(\"Update\", function(self, width, height)\n    -- Gets the Local Player\n    local local_player = Client.GetLocalPlayer()\n    if (not local_player) then return end\n\n    -- Gets the Local Character (possessed by the Local Player)\n    local local_character = local_player:GetControlledCharacter()\n    if (not local_character) then return end\n\n    -- Draws the Health\n    self:DrawText(tostring(local_character:GetHealth()), Vector2D(100, height - 100), FontType.PoiretOne, 25, Color.WHITE)\n\n    -- Gets the Local Weapon\n    local character_weapon = local_character:GetPicked()\n    if (character_weapon and character_weapon:GetType() == \"Weapon\") then\n        -- Draws the Ammo Clip\n        self:DrawText(tostring(character_weapon:GetAmmoClip()), Vector2D(width - 200, height - 100), FontType.PoiretOne, 25, Color.WHITE)\n\n        -- Draws the Ammo Bag\n        self:DrawText(\"/ \" .. tostring(character_weapon:GetAmmoBag()), Vector2D(width - 140, height - 87), FontType.PoiretOne, 15, Color.WHITE)\n    end\nend)\n```\n\n----------------------------------------\n\nTITLE: Setting the Loading Screen Package in Server Config (TOML)\nDESCRIPTION: This TOML snippet is a configuration entry for the nanos world server, instructing it to load a specific loading screen package. The file, typically named 'Config.toml', must set the 'loading_screen' parameter to the desired package folder ('my-loading-screen') for the loading screen to be shown to connecting players. It functions only for dedicated servers and is a direct server-side setting with no code execution.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/packages/loading-screen.md#_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n# loading-screen package to load (the loading screen will be displayed when players join your server)\\nloading_screen = \"my-loading-screen\"\\n\n```\n\n----------------------------------------\n\nTITLE: Listing Vehicle Class Events - Markdown\nDESCRIPTION: This component renders all events available for the Vehicle class using markdown syntax and custom documentation tooling. The type and name attributes define context; the output affects only the visual documentation, not runtime behavior. Prerequisites are usage within the documentation framework that supports these custom components.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/classes/base-classes/vehicle.mdx#_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<EventsDeclaration type=\"Class\" name=\"Vehicle\" />\n```\n\n----------------------------------------\n\nTITLE: Embedding FunctionsDeclaration for Paintable Class Methods - Markdown\nDESCRIPTION: This snippet inserts a FunctionsDeclaration component, indicating where method/function documentation for the Paintable class will be injected. The snippet is a placeholder for autogenerated or manually written function documentation. It relies on the documentation system's ability to interpret the JSX-like component, with 'type' and 'name' attributes specifying which class's functions to showcase. No runtime input is required; output is a rendered section detailing the Paintable class methods. Requires docs system support for the custom JSX component.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/classes/base-classes/paintable.mdx#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n<FunctionsDeclaration type=\\\"Class\\\" name=\\\"Paintable\\\" />\n```\n\n----------------------------------------\n\nTITLE: Spawning Custom Inherited Entities (Torch) (Lua, Server)\nDESCRIPTION: Provides a simple example of instantiating a custom entity (Torch) that inherits from Melee, by supplying the expected constructor parameters. Useful in spawn menus or game initialization logic. Input: location and rotation; output: the spawned custom Torch entity.\nSOURCE: https://github.com/nanos-world/docs/blob/master/blog/2022-12-07-november.md#_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nlocal my_torch = Torch(Vector(), Rotator())\n```\n\n----------------------------------------\n\nTITLE: Batch Installation/Update Using CLI - Shell - General\nDESCRIPTION: Shows how to install or update multiple packages or assets in a single CLI command. The example command, 'install package sandbox battlefield-kill-ui', installs both 'sandbox' and 'battlefield-kill-ui' packages. Space-separated package or asset names are supported, and the snippet applies to any CLI terminal context where the CLI is active.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/server-manual/command-line-interface.mdx#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n```shell\ninstall package sandbox battlefield-kill-ui\n```\n```\n\n----------------------------------------\n\nTITLE: Starting the React Development Server\nDESCRIPTION: This command uses npm (Node Package Manager) to run the 'start' script defined in the project's 'package.json'. This typically launches a local development server, allowing the developer to view and interact with the React application in a web browser, usually with hot-reloading enabled.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/tutorials-and-examples/basic-hud-react.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Downloading/Updating nanos world Server via SteamCMD\nDESCRIPTION: This command is executed within the SteamCMD interface. It downloads or updates the nanos world dedicated server files using its Steam Application ID (1936830). The files will be placed in the directory specified by `force_install_dir`.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/tutorials-and-examples/hosting-server-4free-gcp.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nSteam> app_update 1936830\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Methods to an Inherited Class in Lua\nDESCRIPTION: Shows how to define a new method (`Explode`) for the custom `MyNewClass`. The method uses `self` to access the instance's state and methods, such as getting its location (`self:GetLocation()`) to spawn a particle effect and destroying the instance itself (`self:Destroy()`).\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/scripting/inheriting-classes.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nfunction MyNewClass:Explode()\n    -- Spawns a particle\n    Particle(self:GetLocation(), Rotator(), \"nanos-world::P_Explosion\")\n\n    -- Destroys myself\n    self:Destroy()\nend\n```\n\n----------------------------------------\n\nTITLE: Running Nanos World CLI Directly for Package Update (Linux)\nDESCRIPTION: Example command to run the Nanos World CLI in direct (one-liner) mode on Linux to update a specific package named 'sandbox'. The command `update package sandbox` is passed directly as an argument following `--cli`. Requires the `NanosWorldServer.sh` script and execute permissions.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/server-manual/command-line-interface.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n./NanosWorldServer.sh --cli update package sandbox\n```\n\n----------------------------------------\n\nTITLE: Running Direct CLI Command - Shell - Windows\nDESCRIPTION: Demonstrates single-line, direct execution of a CLI command for updating a specific package ('sandbox') on Windows. This method combines starting the CLI and executing the command in one call. Requires NanosWorldServer.exe and the appropriate CLI command syntax.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/server-manual/command-line-interface.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n```shell\n./NanosWorldServer.exe --cli update package sandbox\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing Custom Discord Application ID with nanos world (Lua)\nDESCRIPTION: Initializes a custom Discord Application ID on the client, enabling personalized Rich Presence assets and settings in nanos world. Depends on the nanos world Client API and requires a valid 'client_id' string for the Discord Application. Call 'Client.InitializeDiscord(client_id)' before updating activities via 'Client.SetDiscordActivity'. No output is returned, but the Rich Presence will utilize the specified Discord Application.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/scripting/discord-integration.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nClient.InitializeDiscord(client_id)\n```\n\n----------------------------------------\n\nTITLE: Installing SteamCMD and Dependencies on Ubuntu/Debian - Shell\nDESCRIPTION: This snippet demonstrates how to set up the 32-bit architecture, add the multiverse repository, and install SteamCMD with required dependencies on an Ubuntu/Debian Linux system. Prerequisites include sudo access and an internet connection. The commands prepare the environment to download and run nanos world server; inputs are not required beyond invocation. Outputs include installed system packages; errors may occur if repositories or dependencies are unavailable.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/server-manual/server-installation.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo add-apt-repository multiverse\\nsudo dpkg --add-architecture i386\\nsudo apt update\\nsudo apt install lib32gcc1 steamcmd\n```\n\n----------------------------------------\n\nTITLE: Overriding the __tostring Metamethod in Lua\nDESCRIPTION: Demonstrates defining the standard `__tostring` metamethod for the inherited `MyNewClass`. This allows providing a custom string representation for instances of the class when they are converted to strings, for example, by using `tostring()` or `print()`.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/scripting/inheriting-classes.md#_snippet_14\n\nLANGUAGE: lua\nCODE:\n```\nfunction MyNewClass:__tostring()\n\treturn \"My Incredible Class!\"\nend\n```\n\n----------------------------------------\n\nTITLE: Automating Bleeding-Edge Branch Install (Windows) - Shell\nDESCRIPTION: This one-liner command for Windows installs or updates the nanos world server using the 'bleeding-edge' branch by specifying the '-beta bleeding-edge' option. All actions (directory setup, login, branch selection, validation) occur in one call. Prerequisite: steamcmd.exe in PATH. Useful for advanced users requiring early access updates.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/server-manual/server-installation.mdx#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nsteamcmd.exe +force_install_dir C:/nanos-world-server +login anonymous +app_update 1936830 -beta bleeding-edge validate +quit\n```\n\n----------------------------------------\n\nTITLE: Defining and Handling Remote Events on Custom Entity Classes (Lua, Server)\nDESCRIPTION: Demonstrates registering and reacting to a networked custom remote event on the server side for an inherited entity class in Nanos World. The method reacts to a remote call, then broadcasts another event in response. Requires event subscription infrastructure and class system. Parameters include the sender (player) and custom event data.\nSOURCE: https://github.com/nanos-world/docs/blob/master/blog/2022-12-07-november.md#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nfunction MyCube:OnMyCustomEvent(player, my_param)\\n    self:BroadcastRemoteEvent(\"MyAnotherCustomEvent\", \"hello\")\\nend\\n\\nMyCube.SubscribeRemote(\"MyCustomEvent\", MyCube.OnMyCustomEvent)\n```\n\n----------------------------------------\n\nTITLE: Updating Package Lists Using Apt - Bash\nDESCRIPTION: This shell command updates the apt package index, ensuring the system recognizes new package sources just added to the configuration (including the testing repo). Intended to be run after modifying sources.list or preferences, it requires sudo privileges and outputs status and update details to the console.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/server-manual/server-linux-arm.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\n```\n\n----------------------------------------\n\nTITLE: Loading a C Module Package via Server Configuration in TOML\nDESCRIPTION: Demonstrates how to load the created C Module package (`my-module`) by adding its name to the `packages` array within the server's `Config.toml` file, under the `[game]` section. This ensures the server loads the specified package and its associated C modules upon startup.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/packages/c-module.md#_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n...\n# game configurations\n[game]\n    # default startup map\n    map =               \"default-blank-map\"\n    # game-mode package to load (set the main game-mode package to load - you can load only one 'game-mode' package type at once)\n    game_mode =         \"\"\n    # packages list (set the packages you want to load)\n    packages = [\n                        # highlight-next-line\n                        \"my-module\",\n    ]\n...\n```\n\n----------------------------------------\n\nTITLE: Binding to Widget Dispatcher Events - Widget API Lua\nDESCRIPTION: This Lua example demonstrates subscribing to a native UButton's OnClicked dispatcher event using the Widget class. It creates a button, adds a text child with 'Press Me!', binds an event handler using BindBlueprintEventDispatcher, and finally renders the button in the viewport. Key dependencies are Widget, NativeWidget, and the Console module for logging. Parameters include dispatcher name and callback function. This enables interactive UI elements that trigger Lua callbacks on user actions.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/classes/widget.mdx#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal my_button = Widget(NativeWidget.Button)\n\n-- Puts a text inside of it\nlocal my_text = Widget(NativeWidget.Text)\nmy_text:CallBlueprintEvent(\"SetText\", \"Press Me!\")\nmy_button:AddChild(my_text)\n\n-- Binds the native OnClicked dispatcher\nmy_button:BindBlueprintEventDispatcher(\"OnClicked\", function()\n\tConsole.Log(\"clicked!\")\nend)\n\n-- Adds the button to viewport (will fill the whole screen)\nmy_button:AddToViewport()\n```\n\n----------------------------------------\n\nTITLE: Installing Bleeding-Edge nanos world Server via SteamCMD (Bash)\nDESCRIPTION: Installs or updates the bleeding-edge (beta) version of the nanos world server using the `app_update` command with the `-beta bleeding-edge` flag within the SteamCMD console. The App ID is `1936830`.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/server-manual/server-installation.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nSteam> app_update 1936830 -beta bleeding-edge\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Network Events on the Client in Lua\nDESCRIPTION: Demonstrates how a client-side script subscribes to a networked event ('GetThisFromServer') sent from the server using `Events.SubscribeRemote`. The callback function receives the data parameter sent from the server and logs it.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/scripting/communicating-between-packages.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n```lua title=\"Client/Index.lua\" showLineNumbers\nEvents.SubscribeRemote(\"GetThisFromServer\", function(parameter1, parameter2, parameter3)\n    Console.Log(\"Received \" .. parameter1) -- Received cool data from network\nend)\n```\n```\n\n----------------------------------------\n\nTITLE: Logging into SteamCMD Anonymously - Bash\nDESCRIPTION: This snippet logs into the SteamCMD service using anonymous credentials, allowing public access to dedicated server tools. The command 'login anonymous' is run at the 'Steam>' prompt. Dependencies include an internet connection. Successful login is needed for further commands.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/server-manual/server-installation.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nSteam> login anonymous\n```\n\n----------------------------------------\n\nTITLE: Configuring a Map Package in TOML\nDESCRIPTION: Displays the `Package.toml` configuration for a 'map' package type. This package defines a map entry for the server, specified by the `map` setting in `Config.toml`. It includes all functionalities of a 'script' package (can run Lua) and adds map-specific configurations like the `map_asset` path, `spawn_points`, and `custom_data`.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/packages/packages-guide.md#_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n# Inherit default settings from _meta.toml\n\n[meta]\n# title = \"\"\n# author = \"\"\n# version = \"1.0.0\"\n\n[settings]\n# Enabling this will destroy all entities spawned by this Package when it unloads\n# auto_cleanup = true\n\n# The game version (major.minor) at the time this package was created, for granting backwards compatibility between breaking changes.\n# compatibility_version = \"1.0\"\n\n# List of Packages dependencies used by this Package which need to be loaded first\n# packages_requirements = []\n\n# List of Asset Packs to be loaded when this package loads\n# assets_requirements = []\n\n# List of Game Modes compatible/recommended to work with this Package\n# compatible_game_modes = []\n\n[map]\n# Asset Path to the Map Asset\n# map_asset = \"\"\n\n# List of Spawn Points\n# spawn_points = [\n# \t{ location = \"(X=0,Y=0,Z=0)\", rotation = \"(Pitch=0,Yaw=0,Roll=0)\" },\n# ]\n\n[custom_data]\n# List of Custom Data which can be accessed when this Map is loaded\n```\n\n----------------------------------------\n\nTITLE: Referencing the Default Assets.toml Structure for nanos world\nDESCRIPTION: Provides a reference link to the standard `Assets.toml` configuration file structure used for defining Asset Packs in nanos world. This file is crucial for organizing Asset Pack metadata (like title, author, version) and listing all included assets categorized by type (maps, static meshes, etc.).\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/assets.mdx#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\nhttps://github.com/nanos-world/nanos-world-server/blob/main/Assets.toml\n```\n\n----------------------------------------\n\nTITLE: Calling Original Native Methods Using self.Super in Lua\nDESCRIPTION: Illustrates overriding the `GetRotation` method in `MyNewClass`. Inside the overridden method, `self.Super:GetRotation()` is used to call the original, native `GetRotation` method of the parent `Prop` class. The example then modifies the returned rotation before returning it.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/scripting/inheriting-classes.md#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nfunction MyNewClass:GetRotation()\n    -- Calls original GetRotation and adds 90 to yaw\n    return self.Super:GetRotation() + Rotator(0, 90, 0)\nend\n```\n\n----------------------------------------\n\nTITLE: Using Custom String Helper Methods in Nanos World - Lua\nDESCRIPTION: This Lua code snippet demonstrates the new custom helper methods added to the built-in String class in the Nanos World engine, specifically the StartsWith method. It shows instantiating a local string, then checking if it begins with a certain prefix using the new pascal-cased StartsWith convenience method. These helper methods require Nanos World with the latest update since they extend base Lua types; users should ensure the underlying game engine is up to date. The parameter to StartsWith is the string prefix to match, and the function returns a boolean indicating if the local string matches at the start. Only strings extended by the game engine support these methods.\nSOURCE: https://github.com/nanos-world/docs/blob/master/blog/2023-05-10-april.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal my_string = \"Hello Mom!\"\nlocal starts = my_string:StartsWith(\"Hello\")\n```\n\n----------------------------------------\n\nTITLE: Referencing the Server Configuration File in TOML\nDESCRIPTION: Reference to the official nanos world server `Config.toml` file on GitHub. This TOML file contains all server settings like name, description, ports, packages, map, etc., and is automatically generated on the first launch. It uses the TOML syntax.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/server-manual/server-configuration.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n```toml reference\nhttps://github.com/nanos-world/nanos-world-server/blob/main/Config.toml\n```\n```\n\n----------------------------------------\n\nTITLE: Declaring Custom Game-mode Settings in Package.toml - nanos world TOML\nDESCRIPTION: Defines custom settings for a game-mode via the [custom_settings] table in the Package.toml configuration file. Each setting entry contains label, type, description, and default value, allowing server operators or UI to dynamically display and utilize these options. Requires nanos world server adhering to the new TOML spec; settings can be strings or booleans, and are parsed via Server.GetCustomSettings().\nSOURCE: https://github.com/nanos-world/docs/blob/master/blog/2022-12-31-december.md#_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n# game-mode custom settings configurations\\n[custom_settings]\\n    my_toggle = { label = \"enable PVP\", type = \"boolean\", description = \"whether to enable PVP or not\", default = true }\\n    my_text_input = { label = \"type anything\", type = \"text\", description = \"custom text!\", default = \"hello world!\" }\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from All EnterVehicle Events on an Entity - nanos world - Lua\nDESCRIPTION: Explains how to unregister all 'EnterVehicle' event callbacks from a specific Character entity, impacting only the current Package's registrations. This approach is scoped to the specified entity object, ensuring that future 'EnterVehicle' events do not trigger callbacks registered by the package. Best used when cleaning up event handlers for dynamically spawned entities.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/scripting/events-guide.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\n-- This will unregister from all \"EnterVehicle\" events of this specific Character\n-- registered in this Package\nmy_character:Unsubscribe(\"EnterVehicle\")\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring a Native Button Widget in Lua\nDESCRIPTION: Demonstrates creating a native Button widget using the `Widget` class, setting its text content with a Text widget, binding the `OnClicked` event dispatcher to log a message using `BindBlueprintEventDispatcher`, adding the button to the viewport with `AddToViewport`, and centering its layout using `SetCanvasLayout`. Requires the nanos world client environment.\nSOURCE: https://github.com/nanos-world/docs/blob/master/blog/2023-03-08-february.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n```lua title=Client/Index.lua\nlocal my_button = Widget(NativeWidget.Button)\n\n-- Puts a text inside of it\nlocal my_text = Widget(NativeWidget.Text)\nmy_text:CallBlueprintEvent(\"SetText\", \"Press Me!\")\nmy_button:AddChild(my_text)\n\n-- Binds the native OnClicked dispatcher\nmy_button:BindBlueprintEventDispatcher(\"OnClicked\", function()\n\tConsole.Log(\"Clicked!\")\nend)\n\n-- Adds the button to viewport\nmy_button:AddToViewport()\n\n-- Adjusts the layout, making it centered\nmy_button:SetCanvasLayout(Vector2D(0, 0), Vector2D(0, 0), Vector2D(0.5, 0.5), Vector2D(0.5, 0.5), Vector2D(0.5, 0.5))\n```\n```\n\n----------------------------------------\n\nTITLE: Overriding ToolGun Client Event Methods for Custom Tool Behavior - Lua\nDESCRIPTION: This Lua code snippet shows how to override key client-side methods in a custom ToolGun class (e.g., 'MyToolGun') to implement behavior for specific player interactions: firing the tool, picking it up, or dropping it. Each function can be customized to perform tracing, UI updates, or clean-up actions. These methods receive the 'character' parameter representing the player, and can interact with both in-game mechanics and UI elements. There are no external dependencies beyond inheriting from ToolGun. All logic within these methods runs solely on the client, enabling responsive and interactive tool experiences.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/explore/sandbox-game-mode/tool-guns.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- Called when you Fire with it\nfunction MyToolGun:OnLocalPlayerFire(character)\n\t-- Do something\n\n\t-- Something useful to do here is tracing for where the Player fire\n\t-- and send that coordinate to server to spawn something at that location\nend\n\n-- Called when you Pick Up it\nfunction MyToolGun:OnLocalPlayerPickUp(character)\n\t-- Do something\n\n\t-- Something useful to do here is adding a new entry to Context Menu\n\t-- when picking it up (see Sandbox's BalloonGun example)\nend\n\n-- Called when you Drop it\nfunction MyToolGun:OnLocalPlayerDrop(character)\n\t-- Do something\n\n\t-- You will much likely want to disable any effect or similar thing when\n\t-- you drop your Tool\nend\n```\n\n----------------------------------------\n\nTITLE: Installing nanos world Server (Bleeding-Edge Branch) - Bash\nDESCRIPTION: This SteamCMD command installs or updates the nanos world server specifying the 'bleeding-edge' branch using the '-beta' option. Intended for users who want to access the latest pre-release features or updates. Prerequisites: Proper login and directory must be set. Outputs status updates during download and installation.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/server-manual/server-installation.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nSteam> app_update 1936830 -beta bleeding-edge\n```\n\n----------------------------------------\n\nTITLE: Accessing Inherited Classes via Global Registry in Lua\nDESCRIPTION: Demonstrates retrieving a list of all classes that inherit from a specific parent class (e.g., 'ToolGun') using the `GetInheritedClasses` static method. It then iterates through the returned list to potentially instantiate each custom inherited class.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/scripting/inheriting-classes.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal children_classes = ToolGun.GetInheritedClasses()\nfor _, class in pairs(children_classes) do\n    -- 'class' is a custom inherited class! we can spawn it\n    local p = class()\nend\n```\n\n----------------------------------------\n\nTITLE: Game-mode Package Configuration File Reference - nanos world TOML\nDESCRIPTION: Reference link showing the new format distinguishing different package types in Package.toml via dedicated blocks (e.g., [game_mode], [script]). The provided TOML file details the keys and values required for game-mode packages, standardizing type identification and options. No code is presented inline; snippet points to canonical structure for implementation.\nSOURCE: https://github.com/nanos-world/docs/blob/master/blog/2022-12-31-december.md#_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\nreference\\nhttps://github.com/nanos-world/nanos-world-server/blob/main/_game_mode.toml\n```\n\n----------------------------------------\n\nTITLE: Installing Nanos World Package via CLI (Shell)\nDESCRIPTION: This command uses the NanosWorldServer Command Line Interface (CLI) to install the 'default-weapons' package. This package is a prerequisite for the Lua script that follows, providing the base weapon assets.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/tutorials-and-examples/prop-shooter.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# install the default-weapons package\n./NanosWorldServer.exe --cli install package default-weapons\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom __index Metamethod for Player in Lua\nDESCRIPTION: Defines a custom handler for the `__index` metamethod on the `Player` class by creating a function named `Player:index`. This function intercepts attempts to read a value from a Player instance (e.g., `local val = my_player.some_key`). This example logs the access attempt and requires returning the intended value (`some_value`).\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/scripting/extending-classes.md#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nfunction Player:index(key)\n\tConsole.Log(\"Getting %s value: %s\", tostring(self), key)\n    -- ... do something\n    return some_value\nend\n```\n\n----------------------------------------\n\nTITLE: Broadcasting a Chat Message using a Static Class in Lua\nDESCRIPTION: This Lua snippet shows the usage of static classes in the nanos world API, specifically within a server script. It calls the `BroadcastMessage` function directly on the `Chat` static class to send a message (\"Hello world!\") to all connected players, without needing to instantiate a `Chat` object.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/essential-concepts.mdx#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nChat.BroadcastMessage(\"Hello world!\")\n```\n\n----------------------------------------\n\nTITLE: Logging into Steam Anonymously via SteamCMD\nDESCRIPTION: Logs into the Steam platform anonymously using the SteamCMD console. This method is sufficient for downloading most public dedicated server files, including the nanos world server. This command must be run within the SteamCMD interactive prompt.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/tutorials-and-examples/hosting-server-4free-gcp.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nSteam> login anonymous\n```\n\n----------------------------------------\n\nTITLE: Configuring APT Pinning Preferences for Debian\nDESCRIPTION: APT preference configuration to be placed in `/etc/apt/preferences`. It assigns a higher priority (900) to packages from the 'stable' release and a lower priority (400) to packages from the 'testing' release. This ensures that the system defaults to stable packages unless a package from testing is explicitly requested, preventing an full system upgrade to testing.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/server-manual/server-linux-arm.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nPackage: *\nPin: release a=stable\nPin-Priority: 900\n\nPackage: *\nPin: release a=testing\nPin-Priority: 400\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Testing Package Version for Libstdc++6 - Bash\nDESCRIPTION: This command installs the libstdc++6 library from the testing repository, bypassing usual defaults set by pin priorities. This allows compatibility with gcc 11, which is required by Nanos World server on older Debian versions. Must be run with sudo and requires the testing repository to be enabled and apt preferences configured correctly.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/server-manual/server-linux-arm.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get --target-release testing install libstdc++6\n```\n\n----------------------------------------\n\nTITLE: Configuring a Map Package with Package.toml - TOML - nanos world Server\nDESCRIPTION: This code block references the structure of a 'Package.toml' file used to define a Map Package in nanos world. It contains new keys like `map_asset`, `spawn_points`, and `custom_data`, which specify the map file, spawn locations, and custom metadata, respectively. This configuration is required for correctly registering maps as packages with associated scripts and assets. The actual content is referenced from the game's GitHub repository and must conform to TOML syntax.\nSOURCE: https://github.com/nanos-world/docs/blob/master/blog/2023-04-05-march.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n```toml title=\\\"Package.toml\\\" reference\nhttps://github.com/nanos-world/nanos-world-server/blob/main/_map.toml\n```\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Remote-Only Events in Lua\nDESCRIPTION: This Lua code snippet introduces the upcoming `Events.SubscribeRemote()` function as part of the API refactoring. This function allows scripts to subscribe specifically to events triggered remotely using `Events.CallRemote()`, distinct from locally subscribed events using `Events.Subscribe()`.\nSOURCE: https://github.com/nanos-world/docs/blob/master/blog/2022-11-09-october.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nEvents.SubscribeRemote()\n```\n\n----------------------------------------\n\nTITLE: Declaring Vehicle Class API Header - Markdown\nDESCRIPTION: This code snippet utilizes a custom markdown component to declare the API header for the Vehicle class. It serves as a visual header in the generated documentation, displaying the class name and type (Class). No external dependencies beyond the custom documentation generators are needed. There are no parameters or outputs, as this component primarily controls layout and display in the documentation site.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/classes/base-classes/vehicle.mdx#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<HeaderDeclaration type=\"Class\" name=\"Vehicle\" />\n```\n\n----------------------------------------\n\nTITLE: Declaring Static Functions Section for Assets StaticClass in Markdown\nDESCRIPTION: This code block demonstrates use of the <StaticFunctionsDeclaration> tag to create a placeholder for listing all static functions associated with the Assets static class. This markup is intended for documentation processors to identify and generate the relevant API descriptions. No external dependencies or parameters are involved. The output is structure for static documentation; not executable.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/static-classes/assets.mdx#_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<StaticFunctionsDeclaration type=\\\"StaticClass\\\" name=\\\"Assets\\\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Standing/Crouching Transition Animations in Lua\nDESCRIPTION: This Lua code snippet demonstrates setting the transition animations between standing and crouching states. It uses the `SetAnimationsTransitionStandingCrouching` method on a Character object, providing the animation asset paths for both the standing-to-crouching and crouching-to-standing transitions.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/assets-modding/creating-assets/animations/characters/character-locomotion-animations.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nCharacter.SetAnimationsTransitionStandingCrouching(anim_standing_to_crouching, anim_crouching_to_standing)\n```\n\n----------------------------------------\n\nTITLE: Creating Native Text Widget and Adding to Viewport - Widget API Lua\nDESCRIPTION: This Lua snippet creates a native text widget using the Widget class and adds it to the viewport. Text is set using CallBlueprintEvent with 'SetText', which delegates to the UTextBlock component's function. This method requires nanos world's Widget and NativeWidget modules and expects the script to run in the client environment. Key parameters include the native widget type and the text content. Returns a UI element with 'Hello World!' displayed on screen.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/classes/widget.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal my_text = Widget(NativeWidget.Text)\nmy_text:CallBlueprintEvent(\"SetText\", \"Hello World!\")\nmy_text:AddToViewport()\n```\n\n----------------------------------------\n\nTITLE: Styling the HUD Elements with CSS\nDESCRIPTION: This CSS code styles the HUD components defined in `index.html`. It sets the overall font, positions the health and ammo containers at the bottom of the screen using absolute positioning, applies background gradients, styles text elements (color, size, weight), and initially hides the weapon ammo container (`display: none`). It depends on the HTML structure defined in `index.html`.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/tutorials-and-examples/basic-hud-html.md#_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nbody {\n    font-family: Tahoma, sans-serif;\n    font-size: 14px;\n    margin: 0px;\n    padding: 0px;\n    margin-bottom: 20px;\n}\n\n#weapon_ammo_container {\n    display: none;\n    position: absolute;\n    right: 0px;\n    bottom: 0px;\n    width: 200px;\n    height: 50px;\n    background-image: linear-gradient(to right, #00000000, #00000080);\n    text-align: right;\n    line-height: 47px;\n}\n\n#weapon_ammo_bag {\n    color: #ededed;\n    font-weight: bold;\n    font-size: 16px;\n    margin-right: 30px;\n    position: relative;\n    top: -4px;\n}\n\n#weapon_ammo_clip {\n    color: white;\n    font-weight: bold;\n    font-size: 32px;\n}\n\n#health_container {\n    position: absolute;\n    bottom: 0px;\n    width: 200px;\n    height: 50px;\n    background-image: linear-gradient(to left, #00000000, #00000080);\n}\n\n#health_container img {\n    height: 23px;\n    margin: 13px;\n}\n\n#health_current {\n    color: white;\n    font-size: 32px;\n    font-weight: bold;\n    position: absolute;\n    margin-top: 4px;\n}\n```\n\n----------------------------------------\n\nTITLE: Binding to Blueprint Event Dispatchers - nanos world Lua API\nDESCRIPTION: This Lua snippet shows how to spawn a Blueprint actor and bind a Lua callback function to a Blueprint Event Dispatcher, enabling event-driven communication from Blueprint to Lua. Requires the nanos world API, access to a relevant Blueprint asset, and knowledge of dispatcher names and parameter types. Function arguments such as arg1 and arg2 are passed from the dispatcher; this enables dynamic interaction between Blueprints and Lua scripts. Inputs are dispatcher name and callback function; outputs depend on the callback's implementation.\nSOURCE: https://github.com/nanos-world/docs/blob/master/blog/2022-10-05-september.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n-- Spawns the Blueprint\nlocal blueprint = Blueprint(Vector(), Rotator(), \"my-asset-pack::BP_AwesomeBlueprint\",)\n\n-- Subscribes to a Blueprint Event Dispatcher\nblueprint:BindBlueprintEventDispatcher(\"GorgeousDispatcher\", function(self, arg1, arg2)\n\t-- arg1 is a string and arg2 is an integer\n\tConsole.Log(\"Called from Blueprint!\", arg1, arg2)\nend)\n```\n\n----------------------------------------\n\nTITLE: Launching SteamCMD Client using Bash\nDESCRIPTION: This command executes the installed SteamCMD client, opening its interactive command-line interface. It should be run after successfully installing SteamCMD on the VM.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/tutorials-and-examples/hosting-server-4free-gcp.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsteamcmd\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Loading Screen Update Event (Events.Subscribe in JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to subscribe to the 'UpdateScreen' event in nanos world, receiving parameters that detail the current loading state, progress values, and current operation. Dependencies include the nanos world event system and the WebUI runtime. The function parameters provide status messages, progress as both main and secondary bars, and the active stage, suitable for updating the frontend display. The input parameters must be used to dynamically update HTML content, enabling real-time loading feedback.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/packages/loading-screen.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nEvents.Subscribe(\"UpdateScreen\", function(message, message_secondary, progress_small, progress_small_total, progress, progress_total, current_stage) {\\n    // Update your HTML here\\n});\\n\n```\n\n----------------------------------------\n\nTITLE: Creating a React Application via npx\nDESCRIPTION: This command uses npx (Node Package Execute) to run the 'create-react-app' package, scaffolding a new React project named 'basic-hud' in the current directory. It requires Node.js and npm (or yarn) to be installed.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/tutorials-and-examples/basic-hud-react.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-react-app basic-hud\n```\n\n----------------------------------------\n\nTITLE: Uploading a Package via CLI in Shell\nDESCRIPTION: Demonstrates using the NanosWorldServer executable via the command line interface (CLI) to upload a new version of a package named 'default-weapons'. The `--cli` flag initiates CLI mode, followed by the `upload package` command and the package name.\nSOURCE: https://github.com/nanos-world/docs/blob/master/blog/2023-06-07-may.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n```shell title=\"Terminal\"\n./NanosWorldServer.exe --cli upload package default-weapons\n```\n```\n\n----------------------------------------\n\nTITLE: Spawning a Character in nanos world Lua\nDESCRIPTION: Shows how to spawn a Character entity in nanos world using Lua. Dependencies: nanos world Lua API with the Character class available. This one-line snippet instantiates a Character, storing it in the my_character variable. Input: none. Output: a reference to the spawned Character entity. Limitations: certain classes can only be spawned on the Server or Client, as documented.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/scripting/classes-guide.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal my_character = Character()\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Events to Specific Dimensions - nanos world Lua API\nDESCRIPTION: This Lua example shows the use of Events.BroadcastRemoteDimension to send a remote event to all players within a specified dimension. Dependencies are the nanos world Lua API with event support. The method takes a dimension identifier, event name, and event parameters as arguments, allowing for targeted remote procedure calls. If an entity is sent in the event that does not exist in the dimension, it will be replaced with nil and a warning is generated.\nSOURCE: https://github.com/nanos-world/docs/blob/master/blog/2022-10-05-september.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nEvents.BroadcastRemoteDimension(dimension, event_name, params...)\n```\n\n----------------------------------------\n\nTITLE: Defining FTransform Unreal Struct with Lua Table\nDESCRIPTION: Provides the structure of an FTransform Unreal Engine struct as a Lua table for parameter passing between Lua and Blueprint. Each key corresponds to a struct property, with Vector and Rotator types representing translation, rotation, and scale. Requires Vector() and Rotator() constructors from nanos world and matches Unreal's expected property types.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/classes/blueprint.mdx#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n{\\n\\t[\\\"Translation\\\"] = Vector(),\\n\\t[\\\"Rotation\\\"] = Rotator(),\\n\\t[\\\"Scale\\\"] = Vector()\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Widgets with VerticalBox in Lua\nDESCRIPTION: This Lua code shows how to create a parent `VerticalBox` widget and add child widgets (a `Text` widget and a `Button` widget) to it using the `AddChild` method. The parent `VerticalBox` is added to the viewport, organizing the child widgets vertically.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/classes/widget.mdx#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n```lua title=\"Client/Index.lua\" showLineNumbers\nlocal my_vertical_box = Widget(NativeWidget.VerticalBox)\nmy_vertical_box:AddToViewport()\n\nlocal my_text = Widget(NativeWidget.Text)\nmy_text:CallBlueprintEvent(\"SetText\", \"Hello World!\")\n\nlocal my_button = Widget(NativeWidget.Button)\n\nmy_vertical_box:AddChild(my_text)\nmy_vertical_box:AddChild(my_button)\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Multiple Packages Directly with Nanos World CLI (Shell)\nDESCRIPTION: Illustrates how to use the Nanos World CLI in direct mode to install multiple packages ('sandbox' and 'battlefield-kill-ui') in a single command execution. Package names are listed separated by spaces after the `install package` keyword. This command would typically be appended after the server executable and the `--cli` flag (e.g., `./NanosWorldServer --cli install package sandbox battlefield-kill-ui`).\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/server-manual/command-line-interface.mdx#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ninstall package sandbox battlefield-kill-ui\n```\n\n----------------------------------------\n\nTITLE: Override __newindex to SetValue Automatically - nanos world - Lua\nDESCRIPTION: This snippet overrides __newindex for the Player class to automatically use SetValue on property assignment, thereby storing all new properties via nanos world's value system. It includes a usage example where a custom property is set, ensuring direct property assignments are consistently managed. Relies on SetValue method existing on the Player and GetPlayerSomehow returning a valid Player instance.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/scripting/extending-classes.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nfunction Player:newindex(key, value)\n    self:SetValue(key, value)\nend\n\nlocal my_player = GetPlayerSomehow()\nmy_player.amazing_value = 123\n```\n\n----------------------------------------\n\nTITLE: Binding Blueprint Event Dispatchers in Lua\nDESCRIPTION: Illustrates binding to an Unreal Engine Blueprint Event Dispatcher from Lua after spawning a Blueprint Actor. Uses nanos world Blueprint API and accepts dispatcher name and callback function with arbitrary parameters. When the dispatcher is triggered in Blueprint, the provided Lua function executes, logging received arguments. Requires dispatcher to be set up in the Blueprint and correct function signature in Lua.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/classes/blueprint.mdx#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- Spawns the Blueprint\\nlocal blueprint = Blueprint(Vector(), Rotator(), \\\"my-asset-pack::BP_MyBlueprint\\\")\\n\\n-- Subscribes to a Blueprint Event Dispatcher\\nblueprint:BindBlueprintEventDispatcher(\\\"MyBlueprintDispatcher\\\", function(self, arg1, arg2)\\n    Console.Log(\\\"Called from Blueprint!\\\", arg1, arg2)\\nend)\n```\n\n----------------------------------------\n\nTITLE: Configuring a C Module Package in TOML\nDESCRIPTION: Shows the `Package.toml` structure for a 'c-module' package. This specialized package type enables the loading of compiled binary C modules directly into the Lua virtual machine, allowing for performance-critical extensions or integration with C libraries.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/packages/packages-guide.md#_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n# Inherit default settings from _meta.toml\n\n[meta]\n# title = \"\"\n# author = \"\"\n# version = \"1.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Map Configuration Data from Server Script in Lua\nDESCRIPTION: This Lua snippet shows how to retrieve map-specific configuration data within a server script. It uses the 'Server' static class functions 'GetMapSpawnPoints()' to get defined spawn points and 'GetMapConfig()' to access custom data defined in the map's 'Package.toml' file.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/essential-concepts.mdx#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\n```lua title=\"my-package/Server/Index.lua\" showLineNumbers\nlocal spawn_points = Server.GetMapSpawnPoints()\nlocal custom_data = Server.GetMapConfig()\n```\n```\n\n----------------------------------------\n\nTITLE: Styling the HUD Components for React App (App.css) - CSS\nDESCRIPTION: This CSS stylesheet defines the visual layout and styles for the HUD components, including font settings, health and ammo containers, color schemes, position, and image sizing. It ensures that the HUD appears fixed in the corners, with gradients and bold fonts, providing a polished in-game overlay. The stylesheet should be imported into React components using 'import \\\"./App.css\\\";'.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/tutorials-and-examples/basic-hud-react.md#_snippet_5\n\nLANGUAGE: css\nCODE:\n```\nbody {\n    font-family: Tahoma, sans-serif;\n    font-size: 14px;\n    margin: 0px;\n    padding: 0px;\n    margin-bottom: 20px;\n}\n\n#weapon_ammo_container {\n    position: absolute;\n    right: 0px;\n    bottom: 0px;\n    width: 200px;\n    height: 50px;\n    background-image: linear-gradient(to right, #00000000, #00000080);\n    text-align: right;\n    line-height: 47px;\n}\n\n#weapon_ammo_bag {\n    color: #ededed;\n    font-weight: bold;\n    font-size: 16px;\n    margin-right: 30px;\n    position: relative;\n    top: -4px;\n}\n\n#weapon_ammo_clip {\n    color: white;\n    font-weight: bold;\n    font-size: 32px;\n}\n\n#health_container {\n    position: absolute;\n    bottom: 0px;\n    width: 200px;\n    height: 50px;\n    background-image: linear-gradient(to left, #00000000, #00000080);\n}\n\n#health_container img {\n    height: 23px;\n    margin: 13px;\n}\n\n#health_current {\n    color: white;\n    font-size: 32px;\n    font-weight: bold;\n    position: absolute;\n    margin-top: 4px;\n}\n```\n\n----------------------------------------\n\nTITLE: WebUI Console Output Example (nanos world, Text)\nDESCRIPTION: This plain text snippet illustrates the expected output when events are triggered between Lua and the WebUI JavaScript. No dependencies beyond performing the example; demonstrates successful communication between components. Inputs and outputs directly correspond to Lua and JavaScript event handlers. Useful for verifying setup and expected behavior.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/scripting/user-interface.mdx#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n[WebUI]  Triggered! Hello! You are ready!\\n[Script] Received an answer! Message: Hey there!\n```\n\n----------------------------------------\n\nTITLE: Overriding an Existing Method on Character Class - nanos world - Lua\nDESCRIPTION: This code shows how to override the SetLocation method of the Character class. By redefining the method, developers can inject custom logic when a character's location is set. All parameters and calls to the method are preserved; additional behavior can be added as desired. This pattern is essential for customizing default behavior on entity methods.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/scripting/extending-classes.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nfunction Character:SetLocation(new_location)\n\t-- ... Do something\nend\n```\n\n----------------------------------------\n\nTITLE: Referencing Example C Module Source Code in C++\nDESCRIPTION: Points to the `example.cpp` file within the official `module-example` GitHub repository. This file serves as the reference implementation and starting point for understanding how to structure and write the C++ code for a custom nanos world module.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/packages/c-module.md#_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nhttps://github.com/nanos-world-modules/module-example/blob/main/src/example.cpp\n```\n\n----------------------------------------\n\nTITLE: Storing Data Using Package.SetPersistentData in Lua\nDESCRIPTION: This Lua snippet demonstrates storing a Lua table named `my_table` into the package's persistent data store under the key \"awesome_table\" using the `Package.SetPersistentData` function. The comment indicates how this data will be represented in the `PersistentData.toml` file.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/scripting/persistent-data.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n```lua showLineNumbers\nlocal my_table = {\n    my_id = 123,\n    my_data_02 = \"data\"\n}\n\nPackage.SetPersistentData(\"awesome_table\", my_table)\n\n-- PersistentData.toml will be:\n-- awesome_table = {my_id = 123, my_data_02 = \"data\"}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring a Script Package in TOML\nDESCRIPTION: Provides the reference configuration structure (`Package.toml`) for a standard 'script' package type. Script packages are used for loading Lua scripts and multiple 'script' packages can be active simultaneously on the server. They are defined in the `packages` list within the main server `Config.toml`.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/packages/packages-guide.md#_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n# Inherit default settings from _meta.toml\n\n[meta]\n# title = \"\"\n# author = \"\"\n# version = \"1.0.0\"\n\n[settings]\n# Enabling this will force the map package (if any) to do NOT load\n# force_no_map_package = false\n\n# Enabling this will destroy all entities spawned by this Package when it unloads\n# auto_cleanup = true\n\n# The game version (major.minor) at the time this package was created, for granting backwards compatibility between breaking changes.\n# compatibility_version = \"1.0\"\n\n# List of Packages dependencies used by this Package which need to be loaded first\n# packages_requirements = []\n\n# List of Asset Packs to be loaded when this package loads\n# assets_requirements = []\n\n# List of Game Modes compatible/recommended to work with this Package\n# compatible_game_modes = []\n```\n\n----------------------------------------\n\nTITLE: Simulating Prop Possession with Character Entity - Nanos World (Lua)\nDESCRIPTION: This snippet exemplifies how to spawn a character with an invisible mesh, adjust its collision capsule for fitting small props, and attach a static mesh to visually represent the desired prop. It disables picking up objects, grabbing, crouching, and sets the camera to third person to restrict first-person and crouch/prone abilities, optimizing the experience for a Prop Hunt game mode. The script depends on Nanos World's server-side Lua API, requiring assets like 'nanos-world::SK_None' and 'nanos-world::SM_WoodenChair' to be available and exposes functions for further customization.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/tutorials-and-examples/play-as-prop.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Spawns a Character using SK_None mesh (an invisible mesh)\nlocal new_char = Character(Vector(0, 0, 0), Rotator(), \"nanos-world::SK_None\")\n\n-- Adjusts the Capsule of this character. For small props it's recommended to use small capsule size\n-- (A capsule is used to handle Character's collision, this will also adjust camera height location)\n-- It's important to adjust the Capsule Size before adding a StaticMesh, as it will be adjusted based on Capsule Size\nnew_char:SetCapsuleSize(32, 64)\n\n-- Attaches a Static Mesh on the character - which will be the Prop it will possess\nnew_char:AddStaticMeshAttached(\"prop\", \"nanos-world::SM_WoodenChair\")\n\n-- Disables some functionalities from the Character (picking up stuff, ability to crouch/prone, FPS camera...)\nnew_char:SetCanPickupPickables(false)\nnew_char:SetCanGrabProps(false)\nnew_char:SetCanCrouch(false)\nnew_char:SetCameraMode(2) -- Allows only Third Person\n```\n\n----------------------------------------\n\nTITLE: Calling Methods from an Exported Global Table in Lua\nDESCRIPTION: Shows how a server-side script (`package-two`) accesses and calls a method (`CoolMethod`) within a globally exported table (`MyAwesomeLibrary`). Requires the table to have been previously exported using `Package.Export` by another package.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/scripting/communicating-between-packages.md#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\n```lua title=\"package-two/Server/Index.lua\" showLineNumbers\n-- Calls the exported table\nlocal awesome_result = MyAwesomeLibrary.CoolMethod(123, 456)\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Proning Locomotion Animation in nanos world (Lua)\nDESCRIPTION: Assigns the BlendSpace animation for the character's proning locomotion state using the `Character.SetAnimationIdleWalkRunProning` Lua method. It requires the path to the BlendSpace asset (`anim_path`).\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/assets-modding/creating-assets/animations/characters/character-locomotion-animations.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nCharacter.SetAnimationIdleWalkRunProning(anim_path)\n```\n\n----------------------------------------\n\nTITLE: Using Steam Avatar URLs with steam-avatar:// - Markdown\nDESCRIPTION: This snippet illustrates usage of the steam-avatar URL scheme to load a Steam user's avatar image in WebUI or Widget contexts. The string uses the format 'steam-avatar://player_steam_id' where the parameter is the specific Steam ID of the player. This URL string can be obtained from Player:GetAccountIconURL() in Lua scripting and is intended to be used as an image input source. The format is not file-based but is interpreted by the engine for avatar retrieval.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/glossary/basic-types.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n`steam-avatar://player_steam_id`\n```\n\n----------------------------------------\n\nTITLE: Overriding Client Methods in Custom Tool Gun - nanos world ToolGun - Lua\nDESCRIPTION: This snippet shows how to override client-side methods in a custom Tool Gun class for nanos world, using Lua. The methods OnLocalPlayerFire, OnLocalPlayerPickUp, and OnLocalPlayerDrop can be redefined to implement actions when the player fires, picks up, or drops the tool. Dependencies include the existence of a class MyToolGun derived from ToolGun. Key parameters are the character object, and all methods can trigger additional logic or network interaction. These overrides are only effective on the client side.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/explore/sandbox-game-mode/tool-guns.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- Called when you Fire with it\nfunction MyToolGun:OnLocalPlayerFire(character)\n\t-- Do something\n\n\t-- Something useful to do here is tracing for where the Player fire\n\t-- and send that coordinate to server to spawn something at that location\nend\n\n-- Called when you Pick Up it\nfunction MyToolGun:OnLocalPlayerPickUp(character)\n\t-- Do something\n\n\t-- Something useful to do here is adding a new entry to Context Menu\n\t-- when picking it up (see Sandbox's BalloonGun example)\nend\n\n-- Called when you Drop it\nfunction MyToolGun:OnLocalPlayerDrop(character)\n\t-- Do something\n\n\t-- You will much likely want to disable any effect or similar thing when\n\t-- you drop your Tool\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Pack Static Mesh References - TOML\nDESCRIPTION: This TOML snippet is used to register static meshes within a nanos world Asset Pack by adding entries to the [assets.static_meshes] section. Each key (e.g., SM_MoneyRoll) maps to a mesh asset name that can be referenced in scripting and is loaded in-game. The file must be placed in the Asset Pack's configuration, with each entry corresponding to imported Unreal Engine static meshes. Only mesh assets declared here become available for scripting and in Sandbox game-mode; ensure the asset names match those generated and imported.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/assets-modding/creating-assets/static-meshes/static-meshes.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n# static meshes\\n[assets.static_meshes]\\n    SM_MoneyRoll = \\\"SM_MoneyRoll\\\"\\n    SM_MoneyStack = \\\"SM_MoneyStack\\\"\\n\n```\n\n----------------------------------------\n\nTITLE: Building the React Application for Production - Bash\nDESCRIPTION: This Bash command builds the React application for production using 'npm run build'. It generates a static, optimized set of files in the 'build' directory, ready for deployment or integration into the nanos world package. Running this is the final step before publishing or distributing the frontend.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/tutorials-and-examples/basic-hud-react.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Creating a 3D Sound Instance using Asset Path in Lua\nDESCRIPTION: This snippet demonstrates how to instantiate a 3D sound using the 'Sound' constructor in Lua. It specifies the sound's location using a Vector, uses a built-in asset path ('nanos-world::A_VR_Confirm'), sets it as a 3D sound (false), enables auto-destruction after playing, defines the sound type as SFX, and sets the volume and pitch.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/classes/sound.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n```lua showLineNumbers\nlocal my_sound = Sound(\n    Vector(-510, 145, 63), -- Location (if a 3D sound)\n    \"nanos-world::A_VR_Confirm\", -- Asset Path\n    false, -- Is 2D Sound\n    true, -- Auto Destroy (if to destroy after finished playing)\n    SoundType.SFX,\n    1, -- Volume\n    1 -- Pitch\n)\n```\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring Melee Entity - nanos world - Lua\nDESCRIPTION: Demonstrates how to instantiate a new Melee entity with specific position, rotation, mesh, and behavior settings in nanos world using Lua. The snippet creates a crowbar melee weapon, sets its scale, assigns an attack animation, and customizes its damage parameters and attack cooldown. This requires the nanos world Lua API, and expects Vector, Rotator, and HandlingMode enums; the Melee constructor and associated setter methods must be available. Inputs include spatial parameters, asset references, and handling/mode options; output is the configured Melee entity. Not suitable for engines outside nanos world.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/classes/melee.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal crowbar = Melee(\n  Vector(-900, 185, 215),\n  Rotator(0, 90, 90),\n  \"nanos-world::SM_Crowbar_01\",\n  CollisionType.Normal,\n  true,\n  HandlingMode.SingleHandedMelee,\n  \"\"\n)\n\ncrowbar:SetScale(Vector(1.5, 1.5, 1.5))\ncrowbar:AddAnimationCharacterUse(\"nanos-world::AM_Mannequin_Melee_Slash_Attack\")\ncrowbar:SetDamageSettings(0.3, 0.5)\ncrowbar:SetCooldown(1.0)\ncrowbar:SetBaseDamage(40)\n```\n\n----------------------------------------\n\nTITLE: Automated Installation of Required Libraries Using Bash Script - Bash\nDESCRIPTION: This snippet automates the process of downloading and executing a shell script to install the required Nanos World server dependencies for Debian systems. It specifically targets updating and fixing GLIBCXX compatibility issues using an online script. Requires root privileges and networking to fetch the script. The expected input is the remote script's URL; outputs are shown in the shell and result in updated system libraries. This script should be manually reviewed before execution to ensure safety.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/server-manual/server-linux-arm.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwget -O - https://raw.githubusercontent.com/Falaxir/nanos-world_yolks-game-panels/master/docker-oses/debian/fixglibcxx.sh | bash\n```\n\n----------------------------------------\n\nTITLE: Creating a 2D Sound Instance from a Package .ogg File in Lua\nDESCRIPTION: This Lua snippet shows how to create a 2D sound instance by loading a raw '.ogg' file directly from a game package. It utilizes the 'Sound' constructor, providing an empty Vector for location (as it's 2D), the package path to the sound file ('package://my-package/Client/awesome_beep.ogg'), and sets the 'Is 2D Sound' flag to true.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/classes/sound.mdx#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n```lua showLineNumbers\n-- Spawning a ogg sound located in a Package\nlocal ogg_sound = Sound(Vector(), \"package://my-package/Client/awesome_beep.ogg\", true)\n```\n```\n\n----------------------------------------\n\nTITLE: Accessing Asset Metadata (After v1.55) in Lua\nDESCRIPTION: Demonstrates the current method (version 1.55 and later) of iterating through assets retrieved by `Assets.GetStaticMeshes`. The function now returns an array of tables, each containing the asset `key` and potentially other custom metadata fields. This code requires the nanos-world Assets API.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/packages/compatibility-versions.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nfor _, asset in pairs(Assets.GetStaticMeshes(\"nanos-world\")) do\n\tlocal key = asset.key\n\tlocal my_meta_data = asset.my_meta_data\n\tlocal my_random_value = asset.my_random_value\n\t...\nend\n```\n\n----------------------------------------\n\nTITLE: Checking GLIBCXX Version in libstdc++.so.6 using Bash\nDESCRIPTION: Uses the `strings` command to extract printable strings from a specified `libstdc++.so.6` library file and pipes the output to `grep` to filter for lines containing `LIBCXX`. This command is used to verify if the library supports the required GLIBCXX ABI version (e.g., v3.4.26) needed for Box64 emulation of the nanos-world server.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/server-manual/server-linux-arm.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nstrings libstdc++.so.6 | grep LIBCXX\n```\n\n----------------------------------------\n\nTITLE: Updating Debian Sources List to Add Testing Repository - Text\nDESCRIPTION: This snippet provides lines to be added to the Debian system's /etc/apt/sources.list file to include the 'testing' repository. This is essential for installing newer versions of packages (like libstdc++6) required by Nanos World server. The user must manually append these lines to ensure the apt package manager can retrieve newer packages from the testing stream.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/server-manual/server-linux-arm.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ndeb http://ftp.fr.debian.org/debian/ testing main contrib non-free\\ndeb-src http://ftp.fr.debian.org/debian/ testing main contrib non-free\n```\n\n----------------------------------------\n\nTITLE: Logging Serialized Table Data with NanosTable.Dump - Lua\nDESCRIPTION: Demonstrates the improved Table.Dump utility in nanos world, which now outputs Lua-compatible table syntax for easy copy-pasting and reuse. Requires the Console.Log and NanosTable.Dump functions, as well as Server.GetMaps, which provides the maps table. Input is a table of map data; output is a pretty-printed string. Intended for debugging, logging, or configuration copying.\nSOURCE: https://github.com/nanos-world/docs/blob/master/blog/2023-11-15-october.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nConsole.Log(NanosTable.Dump(Server.GetMaps()))\n```\n\n----------------------------------------\n\nTITLE: Example Server Console Output on Startup (Nanos Console)\nDESCRIPTION: Illustrates the typical console output when the Nanos World server starts successfully. It shows information logs including server version, port, map, the loading sequence of packages (like 'my-awesome-package' and 'default-blank-map'), and any script output (like \"Loading some Props =D\" from the Lua script).\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/quick-start.mdx#_snippet_6\n\nLANGUAGE: nanos-console\nCODE:\n```\n  INFO  nanos world (C) Copyright nanos. All Rights Reserved.\n  INFO  Starting Server at Port: 7777. Version: 0.0.0. Map: 'default-blank-map'.\n  INFO  Loading Package 'my-awesome-package'...\nSCRIPT  Loading some Props =D\n  INFO  Package 'my-awesome-package' loaded.\n  INFO  Loading Package 'default-blank-map'...\n  INFO  Package 'default-blank-map' loaded.\n```\n\n----------------------------------------\n\nTITLE: Declaring Client-Side Spawn Menu Category Addition Function (Lua)\nDESCRIPTION: Shows the client-side function signature for `SpawnMenu.AddCategory`. This function enables adding custom categories within existing or new Spawn Menu tabs. It requires the target tab's ID (`tab_id`), a unique string ID for the category (`id`), a display label (`label`), and image paths (`image_active`, `image_inactive`) for the category's selected and unselected states.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/explore/sandbox-game-mode/spawn-menu.mdx#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\n```lua\n---@param tab_id string                Tab ID\n---@param id string                    Unique ID used to identify the category\n---@param label string                 Label of the tab\n---@param image_active string          Image path when the category is selected\n---@param image_inactive string        Image path when the category is not selected\nfunction SpawnMenu.AddCategory(tab_id, id, label, image_active, image_inactive)\n```\n```\n\n----------------------------------------\n\nTITLE: Entering the SteamCMD Console (Bash)\nDESCRIPTION: Shows the command prompt presented by the SteamCMD tool after it has been successfully launched. This indicates that SteamCMD is ready to accept commands.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/server-manual/server-installation.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nSteam>\n```\n\n----------------------------------------\n\nTITLE: Installing NanosWorld Default Weapons Package via Shell\nDESCRIPTION: Installs the 'default-weapons' package required for weapon functionalities in NanosWorld. Run this shell command in the terminal where your NanosWorld server is installed. This step is required before executing the Lua sample to ensure all weapon-related classes and scripts are available. The command uses the NanosWorldServer executable to invoke the CLI and install the package.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/tutorials-and-examples/weapon-flashlight.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# install the default-weapons package\\n./NanosWorldServer.exe --cli install package default-weapons\n```\n\n----------------------------------------\n\nTITLE: Spawning an Exported Asset in nanos world Server Script - Lua\nDESCRIPTION: Demonstrates spawning a prop using a previously exported static mesh from an asset pack in a nanos world Server Lua script. Dependencies: proper asset export and correct Assets.toml mapping. Inputs: world spawn position (Vector), rotation (Rotator), and asset identifier string in 'asset-pack::AssetName' format. Output: prop instance in the world. Incorrect referencing or configuration in Assets.toml will result in failed asset loading.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/assets-modding/creating-assets/importing-assets.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nProp(Vector(0, 0, 0), Rotator(0, 0, 0), \\\"my-asset-pack::SM_Cube\\\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Canvas HUD with Per-Frame Update in Lua\nDESCRIPTION: This Lua script creates a basic Heads-Up Display (HUD) using the `Canvas` object in nanos world. It initializes a transparent canvas (`HUDCanvas`) that updates every frame (`auto_repaint_rate` is 0). Inside the `Update` event callback, it retrieves the local player and character, then draws the character's health and the current weapon's ammo (clip and bag) using `DrawText`. This approach is simple but potentially inefficient as it redraws constantly. Dependencies include the nanos world Client and Character APIs.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/tutorials-and-examples/basic-hud-canvas.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Spawns the Canvas\nHUDCanvas = Canvas(true, Color.TRANSPARENT, 0, true)\n\n-- Subscribes for Update event, we can only draw inside this event\nHUDCanvas:Subscribe(\"Update\", function(self, width, height)\n    -- Gets the Local Player\n    local local_player = Client.GetLocalPlayer()\n    if (not local_player) then return end\n\n    -- Gets the Local Character (possessed by the Local Player)\n    local local_character = local_player:GetControlledCharacter()\n    if (not local_character) then return end\n\n    -- Draws the Health\n    self:DrawText(tostring(local_character:GetHealth()), Vector2D(100, height - 100), FontType.PoiretOne, 25, Color.WHITE)\n\n    -- Gets the Local Weapon\n    local character_weapon = local_character:GetPicked()\n    if (character_weapon and character_weapon:GetType() == \"Weapon\") then\n        -- Draws the Ammo Clip\n        self:DrawText(tostring(character_weapon:GetAmmoClip()), Vector2D(width - 200, height - 100), FontType.PoiretOne, 25, Color.WHITE)\n\n        -- Draws the Ammo Bag\n        self:DrawText(\"/ \" .. tostring(character_weapon:GetAmmoBag()), Vector2D(width - 140, height - 87), FontType.PoiretOne, 15, Color.WHITE)\n    end\nend)\n```\n\n----------------------------------------\n\nTITLE: Inheriting Weapon Class for Spawn Menu (nanos world, Lua)\nDESCRIPTION: Defines a custom Weapon class that is recognizable by the Spawn Menu by providing specific attributes, allowing the custom weapon to appear within the Spawn Menu. Dependencies include nanos world base classes and the Spawn Menu system. The attributes 'name', 'image', and 'category' help organize the item in the Spawn Menu. Inputs are class definition parameters; outputs are automatic registration in the menu on both client and server.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/explore/sandbox-game-mode/spawn-menu.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Inherits from Weapon defining custom values which will be read from Spawn Menu\\nWeapon.Inherit(\"AwesomeGun\", {\\n\\tname = \"Awesome Gun\",\\n\\timage = \"assets://nanos-world/Thumbnails/SK_FlareGun.jpg\",\\n\\tcategory = \"special\"\\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Git Submodules Recursively - Console\nDESCRIPTION: Initializes and updates all git submodules recursively, ensuring that all dependencies and nested repositories are retrieved before running the Docusaurus website. This is necessary if the project uses git submodules for themes, plugins, or additional content. Expected input is a terminal with git installed; output is updated submodules in the repository. No additional parameters required.\nSOURCE: https://github.com/nanos-world/docs/blob/master/README.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ngit submodule update --init --recursive\n```\n\n----------------------------------------\n\nTITLE: Automating Server Setup and Launch using Shell (Linux)\nDESCRIPTION: A Shell script demonstrating a complete server setup process on Linux. It uses SteamCMD to install/update the server, the server's CLI to install packages (which also handles asset dependencies), and then starts the server using command-line parameters to override default configurations like name, description, map, game mode, packages, ports, and logo.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/server-manual/server-configuration.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n```shell title=\"Shell/Linux\"\n# Installs/Updates the server through SteamCMD\nsteamcmd +force_install_dir /home/nanos-world-server +login anonymous +app_update \"1936830 -beta bleeding-edge\" validate +quit\n\n# Installs all needed Packages (this will install needed Assets as well)\n./NanosWorldServer.sh --cli install package sandbox battlefield-kill-ui ts-fireworks-tools\n\n# Starts the server with all configs set\n./NanosWorldServer.sh --name \"nanos world Amazing Sandbox\" --description \"Awesome Sandbox Server\" --map \"nanos-world::TestingMap\" --game_mode \"sandbox\" --packages \"battlefield-kill-ui,ts-fireworks-tools\" --port 7777 --query_port 7778 --max_players 32 --logo \"https://i.imgur.com/vnB8CB5.jpg\"\n```\n```\n\n----------------------------------------\n\nTITLE: Defining FVector4 Unreal Struct with Lua Table\nDESCRIPTION: Supplies the FVector4 struct fields as a Lua table to enable passing four-component vector data from Lua to Blueprint. Each property (W, X, Y, Z) accepts floating-point values and is required for operations expecting a FVector4 in Unreal.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/classes/blueprint.mdx#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\n{\\n\\t[\\\"W\\\"] = 0.0,\\n\\t[\\\"X\\\"] = 0.0,\\n\\t[\\\"Y\\\"] = 0.0,\\n\\t[\\\"Z\\\"] = 0.0\\n}\n```\n\n----------------------------------------\n\nTITLE: Adding and Clearing Render Actors for SceneCapture - nanos world Lua API - Lua\nDESCRIPTION: This group of snippets showcases three methods for manipulating SceneCapture rendering: adding, removing, and clearing specific actors from the render set. These functions require an Actor reference and allow selective inclusion/exclusion of entities, which is essential for rendering scenes (e.g., for thumbnails) with transparent backgrounds. These methods require the nanos world scripting environment and appropriate Actor instances. Inputs are actor references; outputs affect which actors are visible through SceneCapture, supporting customized scene rendering.\nSOURCE: https://github.com/nanos-world/docs/blob/master/blog/2022-09-02-august.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nSceneCapture.AddRenderActor(actor)\\nSceneCapture.RemoveRenderActor(actor)\\nSceneCapture.ClearRenderActors()\n```\n\n----------------------------------------\n\nTITLE: Defining FSlateBrush Unreal Struct with Lua Table\nDESCRIPTION: Details the Lua representation of the FSlateBrush struct for communication with Unreal Blueprints. Incorporates both primitives and special asset path fields, requiring valid values for draw, tiling, mirroring, image size, color, and image path. Useful for customizing UI elements, and must follow Unreal's property types and accepted value ranges.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/classes/blueprint.mdx#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n{\\n\\t[\\\"DrawAs\\\"] = 0, -- ESlateBrushDrawType\\n\\t[\\\"Tiling\\\"] = 0, -- ESlateBrushTileType\\n\\t[\\\"Mirroring\\\"] = 0, -- ESlateBrushMirrorType\\n\\t[\\\"ImageSize\\\"] = Vector2D(),\\n\\t[\\\"Tint\\\"] = Color(),\\n\\t[\\\"Image\\\"] = \\\"package://sandbox/Client/my_image.jpg\\\", -- Special Path, or Canvas, WebUI, SceneCapture\\n\\t[\\\"Margin\\\"] = {}, -- FMargin\\n\\t[\\\"OutlineSettings\\\"] = {} -- FSlateBrushOutlineSettings\\n}\n```\n\n----------------------------------------\n\nTITLE: Success Output after Creating React App\nDESCRIPTION: Displays the confirmation message and common commands available within the newly created React project directory ('basic-hud'). It confirms successful setup and lists commands like 'npm start' for development and 'npm run build' for production bundling.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/tutorials-and-examples/basic-hud-react.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nSuccess! Created basic-hud at F:\\Nanos\\Documentation\\basic-hud\nInside that directory, you can run several commands:\n\nnpm start\nStarts the development server.\n\nnpm run build\nBundles the app into static files for production.\n\nnpm test\nStarts the test runner.\n\nnpm run eject\nRemoves this tool and copies build dependencies, configuration files\nand scripts into the app directory. If you do this, you can’t go back!\n\nWe suggest that you begin by typing:\n\ncd basic-hud\nnpm start\n\nHappy hacking!\n```\n\n----------------------------------------\n\nTITLE: Retrieving Detailed Package Information (After v1.49) in Lua\nDESCRIPTION: Shows how to call `Package.GetPackages` (introduced in version 1.49, replacing the older behavior of `Server.GetPackages`) with optional filters (`only_loaded`, `package_type_filter`). It illustrates the structure of the returned array of tables, where each table provides detailed information about a package, including its title, name, type, version, and author. Requires the nanos-world Package API.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/packages/compatibility-versions.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal packages = Package.GetPackages(only_loaded, package_type_filter)\n--[[\n\t{\n\t\t{\n\t\t\t[\"title\"] = \"Awesome Package\",\n\t\t\t[\"name\"] = \"awesome-package\",\n\t\t\t[\"type\"] = PackageType.Script,\n\t\t\t[\"version\"] = \"1.0.0\",\n\t\t\t[\"author\"] = \"Myself\",\n\t\t},\n\t\t...\n\t}\n--]]\n```\n\n----------------------------------------\n\nTITLE: Interactive Package Creation Prompts (Nanos Console)\nDESCRIPTION: Shows the expected output and interactive prompts when using the Nanos World CLI (`--cli add package`) to create a new package. The user is prompted to enter the package title, author, and type (e.g., game-mode), with default suggestions provided.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/quick-start.mdx#_snippet_2\n\nLANGUAGE: nanos-console\nCODE:\n```\nINFO  Please enter the Package Title: (my-awesome-package)\nINFO  Please enter the Package Author: ()\nINFO  Please enter the Package Type: (game-mode)\n```\n\n----------------------------------------\n\nTITLE: Styling WebUI Scrollbars with CSS\nDESCRIPTION: A CSS snippet to improve the default appearance of scrollbars within the Chromium Embedded Framework (CEF) used by WebUI. It styles the scrollbar width and thumb appearance using `-webkit-` pseudo-elements and ensures stable gutter spacing.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/classes/webui.mdx#_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n::-webkit-scrollbar {\n    width: 6px;\n}\n\n::-webkit-scrollbar-thumb {\n    border-radius: 10px;\n    background-color: #494949;\n}\n\nbody {\n    scrollbar-gutter: stable both-edges;\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Scrollbars with CSS for WebUI\nDESCRIPTION: This CSS snippet refines scrollbar appearance by emulating Webkit-style scrollbars for consistency in CEF-based WebUIs. Defines slimmer scrollbar tracks, rounded thumbs, darker color themes, and stabilizes scrollbar gutter rendering. Requires a CEF-based browser context (such as nanos world's WebUI). Apply to the main stylesheet for WebUI HTML. Inputs: CSS selectors. Outputs: enhanced visual scrollbars affecting rendered UI.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/classes/webui.mdx#_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n::-webkit-scrollbar {\\n    width: 6px;\\n}\\n\\n::-webkit-scrollbar-thumb {\\n    border-radius: 10px;\\n    background-color: #494949;\\n}\\n\\nbody {\\n    scrollbar-gutter: stable both-edges;\\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Utility Class Sections in Markdown for NanosWorld Documentation - Markdown\nDESCRIPTION: This snippet demonstrates the usage of custom markdown and JSX-like declaration components to structure the documentation for a utility class (NanosMath) in NanosWorld. It covers how to set the file's metadata, declare the utility class header, and add sections for examples and static function listings. This pattern relies on a documentation pipeline that interprets these special tags (e.g., <HeaderDeclaration>, <ExamplesDeclaration>, <StaticFunctionsDeclaration>), so it requires the NanosWorld documentation build process and support for these custom components. Inputs include the class name and type, while outputs are formatted documentation sections; proper rendering depends on the downstream tools.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/utility-libraries/nanosmath.mdx#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: NanosMath\ndescription: A table containing useful and aux Math functions\ntags: [utility-class]\nsidebar_position: 2\n---\n\n<HeaderDeclaration type=\"UtilityClass\" name=\"NanosMath\" open_source_url=\"NanosMath.lua\" is_static />\n\n\n## 🎒 Examples\n\n<ExamplesDeclaration type=\"UtilityClass\" name=\"NanosMath\" />\n\n\n## 🗿 Static Functions\n\n<StaticFunctionsDeclaration type=\"UtilityClass\" name=\"NanosMath\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Spawn Menu Item Properties via Class Inheritance (Lua)\nDESCRIPTION: Demonstrates how to make a custom weapon class appear automatically in the Spawn Menu by inheriting from the `Weapon` base class and defining the `name`, `image`, and `category` properties on the client side. This method simplifies adding items derived from standard base classes like Weapon, Vehicle, Character, or ToolGun.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/explore/sandbox-game-mode/spawn-menu.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n```lua showLineNumbers title=\"Client/Index.lua\"\n-- Inherits from Weapon defining custom values which will be read from Spawn Menu\nWeapon.Inherit(\"AwesomeGun\", {\n\tname = \"Awesome Gun\",\n\timage = \"assets://nanos-world/Thumbnails/SK_FlareGun.jpg\",\n\tcategory = \"special\"\n})\n```\n```\n\n----------------------------------------\n\nTITLE: Attaching Meshes with Parent Bounds Control in Lua\nDESCRIPTION: These Lua code lines demonstrate the updated `AddStaticMeshAttached` and `AddSkeletalMeshAttached` methods for a `character` object. The new final boolean parameter (`true` or `false`) determines whether the attached mesh should inherit and use the parent entity's bounding box, which can help resolve flickering issues when attaching meshes to entities with small base meshes.\nSOURCE: https://github.com/nanos-world/docs/blob/master/blog/2023-07-12-june.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n```lua\ncharacter:AddStaticMeshAttached(\"hair\", \"nanos-world::SM_Hair_Long\", \"hair_male\", true)\ncharacter:AddSkeletalMeshAttached(\"tie\", \"nanos-world::SK_Tie\", false)\n```\n```\n\n----------------------------------------\n\nTITLE: Declaring Pawn Class Reference in nanos world Docs - Markdown\nDESCRIPTION: This snippet uses custom JSX-like tags within Markdown to designate sections of the documentation. The <HeaderDeclaration>, <FunctionsDeclaration>, and <EventsDeclaration> tags specify the class name and placeholders for auto-generated or detailed documentation expansion. Dependencies include the documentation site generation tooling that interprets these tags. There are no direct parameters or outputs, as this file is for structuring developer-facing docs; limitations are that detailed content is not included directly in this snippet.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/classes/base-classes/pawn.mdx#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\\ntitle: Base Pawn\\ndescription: Base class for all Characters\\ntags: [base-class]\\n---\\n\\n<HeaderDeclaration type=\\\"Class\\\" name=\\\"Pawn\\\" />\\n\\n\\n## 🦠\\u00a0Functions\\n\\n<FunctionsDeclaration type=\\\"Class\\\" name=\\\"Pawn\\\" />\\n\\n\\n## 🚀\\u00a0Events\\n\\n<EventsDeclaration type=\\\"Class\\\" name=\\\"Pawn\\\" />\n```\n\n----------------------------------------\n\nTITLE: Hiding, Spawning, and Detaching Magazine with `Reload_UnloadAndDetach` Notify\nDESCRIPTION: The `Reload_UnloadAndDetach` Animation Notify performs three actions in sequence: it hides the weapon's `b_gun_mag` bone, spawns the designated Magazine StaticMesh at the bone's current location, and immediately detaches the spawned mesh, allowing it to fall or be affected by physics.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/assets-modding/creating-assets/animations/weapon-reload-animations.md#_snippet_2\n\nLANGUAGE: Identifier\nCODE:\n```\nReload_UnloadAndDetach\n```\n\n----------------------------------------\n\nTITLE: Configuring C Module Binaries in Package.toml\nDESCRIPTION: This TOML configuration snippet specifies how to define C module settings within a `Package.toml` file. The `c_module.binaries` array lists the base names (without file extensions like .dll or .so) of the compiled binary files that should be loaded by the nanos world server when this package is included.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/packages/c-module.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n```toml\n# c module configurations\n[c_module]\n    # list of binaries paths to load (without extension)\n    binaries = [\n                            \"example\",\n    ]\n```\n```\n\n----------------------------------------\n\nTITLE: Hiding Weapon Magazine and Attaching Spawned Magazine with `Reload_Unload` Notify\nDESCRIPTION: Using the `Reload_Unload` Animation Notify hides the visibility of the weapon's `b_gun_mag` bone and spawns a specified Magazine StaticMesh, attaching it to the character's left hand socket. The mesh to be spawned can be configured using the `Weapon:SetMagazineMesh()` function.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/assets-modding/creating-assets/animations/weapon-reload-animations.md#_snippet_1\n\nLANGUAGE: Identifier\nCODE:\n```\nReload_Unload\n```\n\n----------------------------------------\n\nTITLE: Initializing and Interacting with WebUI in Lua\nDESCRIPTION: This Lua script demonstrates how to create a new WebUI instance, loading a local HTML file (`UI/index.html`). It subscribes to a 'Ready' event from the HTML to know when it's loaded, then calls a JavaScript function ('MyAwesomeEvent') within the HTML. It also subscribes to an event ('MyAwesomeAnswer') originating from the JavaScript to receive data back.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/scripting/user-interface.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Spawns a WebUI with the HTML file you just created\nMyUI = WebUI(\"My UI\", \"file://UI/index.html\")\n\n-- When the HTML is ready, triggers an Event in there\nMyUI:Subscribe(\"Ready\", function()\n    MyUI:CallEvent(\"MyAwesomeEvent\", \"Hello! You are ready!\")\nend)\n\nMyUI:Subscribe(\"MyAwesomeAnswer\", function(param1)\n    Console.Log(\"Received an answer! Message: \" .. param1)\nend)\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with Yarn - Console\nDESCRIPTION: Installs all JavaScript dependencies defined in the project's package.json using Yarn, a package manager. This prepares the environment for development or build steps. Requires Node.js and Yarn to be pre-installed. Input is a terminal in the project root directory; output is a node_modules directory with installed packages.\nSOURCE: https://github.com/nanos-world/docs/blob/master/README.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Listing Vehicle Class Functions - Markdown\nDESCRIPTION: This snippet employs a custom component to list all functions available on the Vehicle class within the documentation. It streamlines function presentation using the type and name parameters for content generation. No direct code execution is implied, and its effect is limited to structured representation in the site.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/classes/base-classes/vehicle.mdx#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<FunctionsDeclaration type=\"Class\" name=\"Vehicle\" />\n```\n\n----------------------------------------\n\nTITLE: Handling Firework Sounds on Client (Lua)\nDESCRIPTION: This client-side Lua script handles the audio aspects of the firework weapon. It subscribes to server-sent events: `SpawnFireworkSound` triggers spawning and attaching a launch sound to the firework projectile, and `ExplodeFireworkSound` triggers spawning an explosion sound at the given location. Both sounds utilize assets from the `ts-fireworks` pack.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/tutorials-and-examples/fireworks.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n-- Subscribes to spawn and attach the Firework launch sound\nEvents.Subscribe(\"SpawnFireworkSound\", function(firework)\n    local sound = Sound(Vector(), \"ts-fireworks::A_Firework_Launch\", false, true, SoundType.SFX, 1, 1, 400, 100000)\n    sound:AttachTo(firework)\nend)\n\n-- Subscribes to spawn the Firework explosion sound\nEvents.Subscribe(\"ExplodeFireworkSound\", function(location)\n    Sound(location, \"ts-fireworks::A_Firework_Explosion_Fizz\", false, true, SoundType.SFX, 3, 1, 400, 100000)\nend)\n```\n\n----------------------------------------\n\nTITLE: Exporting a Global Table (Library) from a Server Package in Lua\nDESCRIPTION: Demonstrates defining a Lua table (`MyAwesomeLibrary`) containing multiple functions and exporting the entire table globally using `Package.Export`. This allows other server-side packages to access its functions (e.g., `MyAwesomeLibrary.CoolMethod`) as if it were a shared library.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/scripting/communicating-between-packages.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\n```lua title=\"package-one/Server/Index.lua\" showLineNumbers\n-- Defines a table with functions which you want to export\nMyAwesomeLibrary = {\n\tCoolMethod = function(a, b)\n\t\treturn a + b\n\tend,\n\tAnotherAwesomeImportantMethod = function(c, d)\n\t\treturn c * d\n\tend\n}\n\n-- Exports the table to be accessed by other Packages\nPackage.Export(\"MyAwesomeLibrary\", MyAwesomeLibrary)\n```\n```\n\n----------------------------------------\n\nTITLE: Handling Firework Sounds in nanos world (Client-Side Lua)\nDESCRIPTION: This client-side Lua script handles the audio aspects of the firework weapon triggered by the server. It subscribes to 'SpawnFireworkSound' events (receiving the particle/firework entity as an argument) to create, play, and attach the launch sound ('A_Firework_Launch') to the firework projectile. It also subscribes to 'ExplodeFireworkSound' events (receiving the location vector as an argument) to create and play the explosion sound ('A_Firework_Explosion_Fizz') at the specified location. Both sounds are sourced from the 'ts-fireworks' asset pack and configured with specific ranges and volumes.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/tutorials-and-examples/fireworks.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n-- Subscribes to spawn and attach the Firework launch sound\nEvents.Subscribe(\"SpawnFireworkSound\", function(firework)\n    local sound = Sound(Vector(), \"ts-fireworks::A_Firework_Launch\", false, true, SoundType.SFX, 1, 1, 400, 100000)\n    sound:AttachTo(firework)\nend)\n\n-- Subscribes to spawn the Firework explosion sound\nEvents.Subscribe(\"ExplodeFireworkSound\", function(location)\n    Sound(location, \"ts-fireworks::A_Firework_Explosion_Fizz\", false, true, SoundType.SFX, 3, 1, 400, 100000)\nend)\n```\n\n----------------------------------------\n\nTITLE: Referencing Example C++ Module Code\nDESCRIPTION: This line references the source code file (`example.cpp`) for the example C module available on GitHub. The actual C++ code in this file defines the functions intended to be exposed to the Lua scripting environment in nanos world, utilizing the nanos world module SDK.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/packages/c-module.md#_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n```cpp reference\nhttps://github.com/nanos-world-modules/module-example/blob/main/src/example.cpp\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering Static Functions Component for Actor Class (JSX/Markdown)\nDESCRIPTION: This code includes a custom component to render the static functions available on the Actor class. It relies on documentation tooling that interprets <StaticFunctionsDeclaration> tags to dynamically generate static API reference sections. The snippet must be processed by a markdown system or SSG with JSX-like extensions.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/classes/base-classes/actor.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<StaticFunctionsDeclaration type=\\\"Class\\\" name=\\\"Actor\\\" />\n```\n\n----------------------------------------\n\nTITLE: Displaying Theme-aware Crosshair Images Using ThemedImage in MDX\nDESCRIPTION: Presents a MDX code block rendering a theme-sensitive illustration of available crosshair materials. This snippet uses the ThemedImage component, specifying different image sources for light and dark site themes to ensure UI consistency. Required dependency: '@theme/ThemedImage'. Input 'sources' must map theme keys to image paths; the output is a themed image element displaying the crosshair options.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/classes/base-classes/pickable.mdx#_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<ThemedImage\n    alt=\"All available Crosshairs\"\n    sources={{\n        light: '/img/docs/crosshairs_light.webp',\n        dark: '/img/docs/crosshairs_dark.webp',\n    }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Crouching Locomotion Animation in Lua\nDESCRIPTION: This Lua code snippet shows how to assign a custom BlendSpace animation for a character's crouching idle, walk, and run states. It uses the `SetAnimationIdleWalkRunCrouching` method on a Character object, providing the animation asset path and a boolean flag for the 'Turn In Place' feature.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/assets-modding/creating-assets/animations/characters/character-locomotion-animations.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nCharacter.SetAnimationIdleWalkRunCrouching(anim_path, enable_tip)\n```\n\n----------------------------------------\n\nTITLE: Connecting to Google Cloud VM via SSH using Bash\nDESCRIPTION: This command connects to the created Google Cloud Virtual Machine using the Secure Shell (SSH) protocol. Replace '[YOUR_VM_EXTERNAL_IP]' with the actual external IP address of the VM instance. An SSH client must be available on the local machine, and the user's public SSH key should have been added to the VM during creation.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/tutorials-and-examples/hosting-server-4free-gcp.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nssh [YOUR_VM_EXTERNAL_IP]\n```\n\n----------------------------------------\n\nTITLE: Configuring a 'c-module' Package in Package.toml for nanos world\nDESCRIPTION: Represents the configuration file ('Package.toml') structure for a 'c-module' package. This advanced package type allows loading pre-compiled binary C modules directly into the server's Lua virtual machine, enabling extended functionality beyond standard Lua scripting. The specific configuration details are defined in an external reference.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/packages/packages-guide.md#_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Spawning and Attaching Magazine to Hand with `Reload_SpawnMagazine` Notify\nDESCRIPTION: This Animation Notify, `Reload_SpawnMagazine`, is used solely to spawn the specified Magazine StaticMesh and attach it directly to the character's left hand socket.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/assets-modding/creating-assets/animations/weapon-reload-animations.md#_snippet_3\n\nLANGUAGE: Identifier\nCODE:\n```\nReload_SpawnMagazine\n```\n\n----------------------------------------\n\nTITLE: Referencing the Default Asset Pack TOML File\nDESCRIPTION: This TOML snippet uses a reference directive to link to the `DefaultAssetPack.toml` file located in the nanos world server repository on GitHub. This external file likely contains the definitions and configuration details for the default assets available in the game.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/assets-modding/default-asset-pack/default-assets-list.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n```toml reference\nhttps://github.com/nanos-world/nanos-world-server/blob/main/DefaultAssetPack.toml\n```\n```\n\n----------------------------------------\n\nTITLE: Defining HUD Structure in HTML\nDESCRIPTION: This HTML code sets up the basic layout for the game HUD. It includes references to external jQuery, JavaScript (`index.js`), and CSS (`style.css`) files. It defines `div` containers for health and ammo, using `span` elements with specific IDs (`health_current`, `weapon_ammo_clip`, `weapon_ammo_bag`) to hold dynamic values, and includes an image (`health.png`) for the health icon. Dependencies include `jquery-3.5.1.min.js`, `index.js`, `style.css`, and `health.png` in the same directory.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/tutorials-and-examples/basic-hud-html.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<html>\n    <head>\n        <!-- Includes all files we created (JS, JQuery and CSS) -->\n        <script src=\"jquery-3.5.1.min.js\"></script>\n        <script src=\"index.js\"></script>\n        <link rel=\"stylesheet\" href=\"style.css\">\n    </head>\n    <body>\n        <!-- Health container (black background) -->\n        <div id=\"health_container\">\n            <img src=\"health.png\">\n            <span id=\"health_current\">100</span> <!-- Health value -->\n        </div>\n\n        <!-- Weapon Ammo container (black background) -->\n        <div id=\"weapon_ammo_container\">\n            <span id=\"weapon_ammo_clip\">30</span> <!-- Ammo Clip value -->\n            <span id=\"weapon_ammo_bag\">/ 1000</span> <!-- Ammo Bag value -->\n        </div>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Binding Blueprint Event Dispatcher from Lua\nDESCRIPTION: This Lua code shows how to subscribe to a Blueprint Event Dispatcher named 'GorgeousDispatcher'. It first spawns the Blueprint instance (`my-asset-pack::BP_AwesomeBlueprint`) and then uses the `BindBlueprintEventDispatcher` method, providing the dispatcher name and a Lua callback function. This function will be executed on the client side whenever the 'GorgeousDispatcher' is called within the Blueprint, receiving any arguments (string, integer in this example) passed from the Blueprint.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/tutorials-and-examples/blueprint-communication.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- Spawns the Blueprint\nlocal blueprint = Blueprint(Vector(), Rotator(), \"my-asset-pack::BP_AwesomeBlueprint\",)\n\n-- Subscribes to a Blueprint Event Dispatcher\nblueprint:BindBlueprintEventDispatcher(\"GorgeousDispatcher\", function(self, arg1, arg2)\n    -- arg1 is a string and arg2 is an integer\n    Console.Log(\"Called from Blueprint!\", arg1, arg2)\nend)\n```\n\n----------------------------------------\n\nTITLE: Composing Trace Mode Bitwise Flags - nanos world Trace API - Lua\nDESCRIPTION: The snippet demonstrates the composition of multiple TraceMode flags using the bitwise OR operator, applicable in nanos world's Trace.LineSingle or Trace.LineMulti calls. This allows developers to specify collision, result behavior, and debugging features flexibly. Dependencies include defined TraceMode enum values, and inputs are selected TraceMode members combined by bitwise or (|). The returned value is a combined integer flag used in trace methods; improper combinations or missing TraceMode constants may cause unexpected trace behavior.\nSOURCE: https://github.com/nanos-world/docs/blob/master/blog/2022-09-02-august.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n-- Traces complex collisions, returns the entity as the Entity table value and draws a debug line in the world.\\nTraceMode.TraceComplex | TraceMode.ReturnEntity | TraceMode.DrawDebug\n```\n\n----------------------------------------\n\nTITLE: Overriding Existing Methods in Inherited Lua Classes\nDESCRIPTION: Demonstrates how to override a method inherited from a parent class (e.g., 'SetLocation' from 'Prop') by redefining it in the child class ('MyNewClass'). It includes custom logic and calling the original parent implementation using `self.Super:MethodName(...)`.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/scripting/inheriting-classes.md#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nfunction MyNewClass:SetLocation(new_location)\n    -- Do any kind of logic here\n    new_location = new_location + Vector(0, 0, 100)\n\n    -- Call Super to set the location to the parent Prop\n    self.Super:SetLocation(new_location)\nend\n```\n\n----------------------------------------\n\nTITLE: Rendering CardLink Components in React/JSX\nDESCRIPTION: This snippet demonstrates how to use the CardLink component in React/JSX to display information cards within categorized sections for the documentation site. Each CardLink receives props such as title, description, image source, and link. It requires the CardLink component from '@site/src/components/_nanos', and assumes integration with a documentation framework that supports JSX/MDX syntax. Expected input includes React props for each card, and output is a visually organized set of cards.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/explore/game-modes-and-packages.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"card-links\">\n\n<CardLink\n\ttitle=\"Sandbox\"\n\tdescription=\"Game-mode inspired by Garry's Mod, features Spawn Menu, Tool Guns, NPCs and several funny custom entities\"\n\timage_src=\"https://user-images.githubusercontent.com/6226807/121760112-7d254d80-caff-11eb-968e-20f77aa3c7d3.png\"\n\thref=\"https://github.com/nanos-world/nanos-world-sandbox\"\n/>\n\n<CardLink\n\ttitle=\"Deathmatch\"\n\tdescription=\"Deathmatch PVP game-mode inspired by CS:GO and Unreal Tournament, Ranking, Scoreboard and Power-Ups\"\n\timage_src=\"https://user-images.githubusercontent.com/6226807/121760221-ec02a680-caff-11eb-8b2a-c0aea9168e41.jpg\"\n\thref=\"https://github.com/nanos-world/nanos-world-deathmatch\"\n/>\n\n<CardLink\n\ttitle=\"Halloween\"\n\tdescription=\"Special PVP game-mode inspired by Dead by Daylight, fight for your life to find the exit against the Horsemen\"\n\timage_src=\"https://user-images.githubusercontent.com/6226807/121760299-60d5e080-cb00-11eb-8809-6197d3c98c85.png\"\n\thref=\"https://github.com/gtnardy/nanos-world-halloween\"\n/>\n\n</div>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"card-links\">\n\n<CardLink\n\ttitle=\"Default Vehicles\"\n\tdescription=\"Default Vehicle Pack included in the game, ready to use\"\n\timage_src=\"/img/docs/vehicles-pack.webp\"\n\thref=\"https://github.com/nanos-world/nanos-world-vehicles\"\n/>\n\n<CardLink\n\ttitle=\"Default Weapons\"\n\tdescription=\"Default Weapon Pack included in the game, ready to use\"\n\timage_src=\"/img/docs/weapons-pack.webp\"\n\thref=\"https://github.com/nanos-world/nanos-world-weapons\"\n/>\n\n<CardLink\n\ttitle=\"Official Community Lua Library\"\n\tdescription=\"All definition of our basic structs (Vector, Rotator), math and helper methods\"\n\timage_src=\"/img/docs/nanos-world-background.webp\"\n\thref=\"https://github.com/nanos-world/nanos-world-lua-lib\"\n/>\n\n</div>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"card-links\">\n\n<CardLink\n\ttitle=\"VZombies\"\n\tdescription=\"Game-mode Inspired by COD:Zombies by Voltaism\"\n\timage_src=\"https://user-images.githubusercontent.com/43786647/189530743-43c478bd-89b2-4eac-a223-724a74c312b8.jpg\"\n\thref=\"https://github.com/vugi99/nanos-vzombies\"\n/>\n\n<CardLink\n\ttitle=\"Bottlefield\"\n\tdescription=\"Throw bottles to your enemies by Voltaism\"\n\timage_src=\"https://user-images.githubusercontent.com/43786647/189530846-2862ccf1-62dd-41e9-afd1-1c36922dd8ed.jpg\"\n\thref=\"https://github.com/vugi99/nanos-bottlefield\"\n/>\n\n<CardLink\n\ttitle=\"Murder\"\n\tdescription=\"Game-mode of deception and murder, based off of Murder in the Dark by Timmy\"\n\timage_src=\"https://nanos-marketplace-public.s3.eu-central-003.backblazeb2.com/resources-header-images/assets/murder-underground/tudpuobtga9w41nx-460x230.webp\"\n\thref=\"https://github.com/Timmy-the-nobody/Murder\"\n/>\n\n</div>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"card-links\">\n\n<CardLink\n\ttitle=\"Battlefield Kill UI\"\n\tdescription=\"Battlefield-like Kill and Feed UI by SyedMuhammad\"\n\timage_src=\"/img/docs/battlefield-kill-ui.webp\"\n\thref=\"https://github.com/gtnardy/nanos-world-battlefield-kill-ui/\"\n/>\n\n<CardLink\n\ttitle=\"WebUI3d2d\"\n\tdescription=\"A library to spawn dynamic and usable WebUIs in the 3D world by Timmy\"\n\timage_src=\"/img/docs/webui3d2d.webp\"\n\thref=\"https://github.com/Timmy-the-nobody/WebUI3d2d\"\n/>\n\n<CardLink\n\ttitle=\"WGUI\"\n\tdescription=\"A framework to make User Interfaces with Widgets by NegativeName\"\n\timage_src=\"/img/docs/wgui.webp\"\n\thref=\"https://github.com/NegativeNameNGT/wgui\"\n/>\n\n<CardLink\n\ttitle=\"UI Framework\"\n\tdescription=\"A powerful UI framework ported by Voltaism\"\n\timage_src=\"https://github.com/vugi99/nanos-uiframework/raw/master/screenshots/UIFrameworkLogo2_1000x500.png\"\n\thref=\"https://github.com/vugi99/nanos-uiframework\"\n/>\n\n<CardLink\n\ttitle=\"EGUI\"\n\tdescription=\"Framework for creating User Interfaces by MegaThorx\"\n\timage_src=\"https://nanos-world.github.io/egui-docs/assets/images/tab-panel-2c678b43d0cc8a3fec78e8507eaebac1.png\"\n\thref=\"https://github.com/nanos-world/egui\"\n/>\n\n<CardLink\n\ttitle=\"Discord Package\"\n\tdescription=\"Discord Webhook integration by SyedMuhammad\"\n\timage_src=\"https://nanos-marketplace-public.s3.eu-central-003.backblazeb2.com/resources-header-images/packages/discord/xkuz7vuebmy4mshj-460x230.webp\"\n\thref=\"https://github.com/nanos-world/nanos-world-discord\"\n/>\n\n<CardLink\n\ttitle=\"ClassLib\"\n\tdescription=\"Powerful Lua Object-Oriented Programming (OOP) library by Timmy\"\n\timage_src=\"https://raw.githubusercontent.com/Timmy-the-nobody/ClassLib/main/media/classlib_github_social_preview.jpg\"\n\thref=\"https://github.com/Timmy-the-nobody/ClassLib\"\n/>\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: Spawning a Widget3D from a Widget in Lua\nDESCRIPTION: Illustrates how to create a standard UI Widget (an Image widget in this case), set its texture using a Blueprint event, and then spawn a 3D representation of it (Widget3D) in the game world at a specified location and rotation using the `:SpawnWidget3D()` method. This code runs on the client side.\nSOURCE: https://github.com/nanos-world/docs/blob/master/blog/2023-06-07-may.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n```lua title=\"Client/Index.lua\"\n-- Spawns and configures a Widget\nlocal my_widget = Widget(NativeWidget.Image)\nmy_widget:CallBlueprintEvent(\"SetBrushFromTexture\", \"package://testing/Client/MyImage.jpg\")\n\n-- Spawns the Widget3D from the Widget\nlocal my_widget_3d = my_widget:SpawnWidget3D(Vector(0, 0, 200), Rotator(0, 90, 0))\n```\n```\n\n----------------------------------------\n\nTITLE: Representing FTransform Struct in Lua\nDESCRIPTION: Illustrates the Lua table structure required to represent an Unreal Engine `FTransform` struct when passing data between Lua and Blueprints. It consists of Translation (Vector), Rotation (Rotator), and Scale (Vector) fields.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/classes/blueprint.mdx#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n{\n\t[\"Translation\"] = Vector(),\n\t[\"Rotation\"] = Rotator(),\n\t[\"Scale\"] = Vector()\n}\n```\n\n----------------------------------------\n\nTITLE: Representing FSlateBrush Struct in Lua\nDESCRIPTION: Defines the Lua table structure corresponding to the Unreal Engine `FSlateBrush` struct, used for UI elements. It includes fields for draw type, tiling, mirroring, image size, tint, image resource path (or dynamic material), margin, and outline settings.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/classes/blueprint.mdx#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n{\n\t[\"DrawAs\"] = 0, -- ESlateBrushDrawType\n\t[\"Tiling\"] = 0, -- ESlateBrushTileType\n\t[\"Mirroring\"] = 0, -- ESlateBrushMirrorType\n\t[\"ImageSize\"] = Vector2D(),\n\t[\"Tint\"] = Color(),\n\t[\"Image\"] = \"package://sandbox/Client/my_image.jpg\", -- Special Path, or Canvas, WebUI, SceneCapture\n\t[\"Margin\"] = {}, -- FMargin\n\t[\"OutlineSettings\"] = {} -- FSlateBrushOutlineSettings\n}\n```\n\n----------------------------------------\n\nTITLE: Installing the Default-Weapons Package using CLI in NanosWorld (Shell)\nDESCRIPTION: This shell command demonstrates how to install the 'default-weapons' package into the NanosWorld server environment using the CLI tool. The prerequisite is a functional NanosWorldServer.exe, and it must be invoked from the correct working directory. The input is the package name as an argument; when executed, the command installs the external package, making new weapon assets/functions available for use in server scripts.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/classes/weapon.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# install the default-weapons package\\n./NanosWorldServer.exe --cli install package default-weapons\n```\n\n----------------------------------------\n\nTITLE: Configuring and Enabling Highlight Effects - Nanos World - Lua\nDESCRIPTION: This snippet shows how to set a global highlight color for a specific index and enables the highlight effect for all characters as they spawn in Nanos World. It uses Client.SetHighlightColor to assign a custom color (with higher color values increasing glow intensity) for a chosen highlight index and HighlightMode. Characters are then set to highlight by subscribing to their spawn event and setting the highlight enabled status. Requires the Nanos World Lua API, and assumes valid HighlightMode and Color APIs are available. The highlight can only use indices 0, 1, or 2, with colors set globally per index.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/tutorials-and-examples/x-ray-and-highlight.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Sets the Global desired Highlight color\\n-- Higher color values make it glow (e.g. Color(100, 0, 0))\\nlocal highlight_color = Color(10, 2.5, 0)\\nClient.SetHighlightColor(highlight_color, 0, HighlightMode.Always)\\n\\n-- Setting all Characters to highlight\\nCharacter.Subscribe(\"Spawn\", function(character)\\n    character:SetHighlightEnabled(true, 0)\\nend)\n```\n\n----------------------------------------\n\nTITLE: Stopping Built-in Menu Music from JavaScript\nDESCRIPTION: Illustrates how to call the 'StopMenuMusic' event from the loading screen's JavaScript (e.g., `index.js`). Triggering this event allows the custom loading screen to disable the default background music that plays during the game's menu and loading sequences.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/packages/loading-screen.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript title=\"Packages/my-loading-screen/index.js\" showLineNumbers\nEvents.Call(\"StopMenuMusic\")\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Inherited Classes with Nanos World (Lua)\nDESCRIPTION: Shows how to define a new Lua class that inherits from an existing Nanos World entity (Prop), then instantiate it using standard constructors. Requires Nanos World scripting environment; Prop and Vector must be globally available. Inputs are class names and construction parameters, producing a spawned entity object supporting inherited methods.\nSOURCE: https://github.com/nanos-world/docs/blob/master/blog/2022-12-07-november.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Creates a new Class called \"MyNewClass\" inheriting from Prop\\nMyNewClass = Prop.Inherit(\"MyNewClass\")\\n\\n-- Spawn it using the default constructor\\nlocal ent = MyNewClass(Vector(), Rotator(), \"nanos-world::SM_Cube\")\n```\n\n----------------------------------------\n\nTITLE: Logging into Steam Anonymously via SteamCMD\nDESCRIPTION: This command is executed within the SteamCMD interface. It logs the user into the Steam public servers anonymously, which is sufficient for downloading most game server files, including nanos world.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/tutorials-and-examples/hosting-server-4free-gcp.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nSteam> login anonymous\n```\n\n----------------------------------------\n\nTITLE: Placeholder Client-Side Debug Example (Lua)\nDESCRIPTION: A commented-out Lua code block intended as a placeholder for a client-side example (Client/Index.lua) demonstrating the usage of the Debug class. The block is currently empty but resides within HTML comments in the original source file.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/static-classes/debug.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n```lua title=\"Client/Index.lua\"\n\n```\n```\n\n----------------------------------------\n\nTITLE: Launching SteamCMD Console (Bash)\nDESCRIPTION: Executes the `steamcmd` command to start the Steam Command-Line Interface. This tool is used for downloading and updating Steam-based game servers like nanos world. Requires SteamCMD to be installed and accessible in the system's PATH or current directory.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/tutorials-and-examples/hosting-server-4free-gcp.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsteamcmd\n```\n\n----------------------------------------\n\nTITLE: Handling Events in WebUI with JavaScript (nanos world, HTML)\nDESCRIPTION: This HTML and JavaScript snippet sets up the front-end counterpart for the nanos world WebUI system. The script subscribes to \"MyAwesomeEvent\" from the Lua backend and logs its parameter, then responds by calling back to Lua using \"MyAwesomeAnswer\". Required dependencies are the nanos world in-game JavaScript environment and the Events API. The key input is event parameters from Lua, and the output consists of console messages and triggered return events. HTML structure is simple, with the logic located in the head script.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/scripting/user-interface.mdx#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<html>\\n    <head>\\n        <script>\\n\\t\\t\\t// Register for \"MyAwesomeEvent\" from Lua\\n\\t\\t\\tEvents.Subscribe(\"MyAwesomeEvent\", function(param1) {\\n\\t\\t\\t\\tconsole.log(\"Triggered! \" + param1);\\n\\n\\t\\t\\t\\t// Triggers \"MyAwesomeAnswer\" on Lua\\n\\t\\t\\t\\tEvents.Call(\"MyAwesomeAnswer\", \"Hey there!\");\\n\\t\\t\\t})\\n\\t\\t</script>\\n    </head>\\n    <body>\\n        Hello World!\\n    </body>\\n</html>\n```\n\n----------------------------------------\n\nTITLE: Illustrating Asset Pack Folder Structure in nanos world Server\nDESCRIPTION: Shows the typical directory layout for a nanos world server. Asset Packs (e.g., 'my-asset-pack-01', 'awesome-weapons') are placed within the main 'Assets/' directory. Each Asset Pack folder contains its specific asset files (.uasset, .umap) and a mandatory 'Assets.toml' configuration file.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/assets.mdx#_snippet_0\n\nLANGUAGE: folder-structure\nCODE:\n```\nNanosWorldServer.exe\nAssets/\n├── my-asset-pack-01/\n│   ├── MyAsset_01.uasset\n│   ├── MyAsset_02.uasset\n│   ├── MyBigMap.umap\n│   │    ...\n│   └── Assets.toml\n├── awesome-weapons/\n│   ├── BigFuckingGun.uasset\n│   │   ...\n│   └── Assets.toml\nPackages/\nConfig.toml\n```\n\n----------------------------------------\n\nTITLE: Starting Nanos World CLI Interactively (Linux)\nDESCRIPTION: Shows the command to start the Nanos World server in interactive Command Line Interface (CLI) mode on a Linux system. The `--cli` argument triggers the interactive prompt. Requires the `NanosWorldServer.sh` script in the current directory and execute permissions.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/server-manual/command-line-interface.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./NanosWorldServer.sh --cli\n```\n\n----------------------------------------\n\nTITLE: Defining Map Configuration - nanos world Maps - TOML\nDESCRIPTION: This TOML snippet provides a template for configuring maps within nanos world using a Map.toml file. It defines compatible game modes, a list of spawn points (each with specific location and rotation), and a section for custom data. Dependencies include the use of the TOML format and knowledge of supported keys such as map, compatible_game_modes, spawn_points, and custom_data. Parameters involve specifying valid game mode strings and vector/rotator values in serialized form. The file should be placed in the map's directory to be recognized, producing configuration data consumed by nanos world on map load. Potential limitations include the need for correct vector/rotator formatting and adherence to syntactic structure.\nSOURCE: https://github.com/nanos-world/docs/blob/master/blog/2022-02-09-january.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n# map configurations\\n[map]\\n    # compatible game-modes\\n    compatible_game_modes = [\\n        \"sandbox\",\\n        \"deathmatch\"\\n    ]\\n\\n    # list of spawn points\\n    spawn_points = [\\n        { location = \"Vector(100, 200, 100)\", rotation = \"Rotator(0, 90, 0)\" },\\n        { location = \"Vector(200, 300, 100)\", rotation = \"Rotator(0, 90, 0)\" },\\n    ]\\n\\n[custom_data]\\n    whatever = \"anything\"\\n\n```\n\n----------------------------------------\n\nTITLE: Using Timer for Intervals and Timeouts in Lua\nDESCRIPTION: This Lua snippet demonstrates the usage of the Timer static class. It first creates a recurring timer using `Timer.SetInterval` that logs a message with parameters every 2 seconds. It then shows how to cancel this interval using `Timer.ClearInterval`. Finally, it sets a one-time timeout using `Timer.SetTimeout` to log a different message with a parameter after 5 seconds.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/static-classes/timer.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- creates a Interval to call a function at every 2 seconds\nlocal my_interval = Timer.SetInterval(function(param1, param2)\n    Console.Log(\"Triggered each 2 seconds! Param1: \" .. param1 .. \". Param2: \" .. param2)\nend, 2000, \"awesome param 1\", 456)\n\n-- cancels the Interval\nTimer.ClearInterval(my_interval)\n\n-- creates a Timeout to call my_function in 5 seconds, once - passing a parameter\nTimer.SetTimeout(function(my_param)\n    Console.Log(\"nanos \" .. my_param)\nend, 5000, \"world\")\n```\n\n----------------------------------------\n\nTITLE: Installing SteamCMD Dependencies on Debian/Ubuntu (Shell)\nDESCRIPTION: Installs SteamCMD and its necessary 32-bit libraries on Debian-based Linux distributions (like Ubuntu). It adds the multiverse repository, enables the i386 architecture, updates the package list, and installs the `lib32gcc1` and `steamcmd` packages.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/server-manual/server-installation.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo add-apt-repository multiverse\nsudo dpkg --add-architecture i386\nsudo apt update\nsudo apt install lib32gcc1 steamcmd\n```\n\n----------------------------------------\n\nTITLE: Reading JSON Files Natively - nanos world Lua API\nDESCRIPTION: These two Lua methods illustrate how to synchronously and asynchronously read JSON files into native Lua tables using the File entity. File.ReadJSONAsync performs an asynchronous read, while File.ReadJSON is synchronous. Both require a valid file object referencing a JSON file within the server filesystem. The output is a Lua table parsed from the JSON, significantly improving performance compared to manual parsing with third-party libraries.\nSOURCE: https://github.com/nanos-world/docs/blob/master/blog/2022-10-05-september.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nFile.ReadJSONAsync()\nFile.ReadJSON()\n```\n\n----------------------------------------\n\nTITLE: Configuring Breakable Props with Nanos World API - Lua\nDESCRIPTION: This Lua snippet demonstrates how to configure a specific prop (a watermelon) to be breakable in the Sandbox game-mode using the Nanos World scripting API. It calls SetBreakableProp with the prop mesh name, hit points, and a table describing the debris parts and their rotations. Prerequisites include the presence of the targeted prop assets in the game and scripting capability enabled. The key parameters are the prop mesh identifier, a hit points threshold (700), and an array of debris definitions, enabling the prop to visually break into several mesh pieces upon taking sufficient damage or being hit. The function must be executed within the server or game logic context, and only supports props for which breakable debris meshes are available.\nSOURCE: https://github.com/nanos-world/docs/blob/master/blog/2021-10-01-sandbox-improvements.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nSetBreakableProp(\"nanos-world::SM_Fruit_Watermelon_01\", 700, {\n\t{ mesh = \"nanos-world::SM_Fruit_Watermelon_01_Half_01\", rotation = Rotator() },\n\t{ mesh = \"nanos-world::SM_Fruit_Watermelon_01_Half_01\", rotation = Rotator(180, 0, 0) },\n\t{ mesh = \"nanos-world::SM_Fruit_Watermelon_01_Crust_01\" },\n\t{ mesh = \"nanos-world::SM_Fruit_Watermelon_01_Slice_01\" },\n\t{ mesh = \"nanos-world::SM_Fruit_Watermelon_01_Slice_01\" },\n})\n```\n\n----------------------------------------\n\nTITLE: Downloading and Extracting SteamCMD using Bash\nDESCRIPTION: Downloads the SteamCMD archive for Linux using `curl` (silently `-s`, follow redirects `-L`, fail fast `-q`) from its official CDN URL and pipes the downloaded archive directly to `tar` to extract (`x`) its contents (`f -`) verbosely (`v`) while handling gzip compression (`z`) into the current directory. SteamCMD is required to download and update the nanos-world server files.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/server-manual/server-linux-arm.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sqL \"https://steamcdn-a.akamaihd.net/client/installer/steamcmd_linux.tar.gz\" | tar zxvf -\n```\n\n----------------------------------------\n\nTITLE: Declaring Damageable Class Reference in nanos world Documentation (Markdown)\nDESCRIPTION: Declares the Damageable class using a custom HeaderDeclaration component within a Markdown file. This component is intended for documentation purposes within the nanos world framework, likely processed by a static site generator to include class metadata. The class name is provided via the name attribute, and no direct code logic is included.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/classes/base-classes/damageable.mdx#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n<HeaderDeclaration type=\\\"Class\\\" name=\\\"Damageable\\\" />\n```\n\n----------------------------------------\n\nTITLE: Calling a C Module Function from Lua Script\nDESCRIPTION: Provides a Lua code example showing how to invoke a function defined within a loaded C module. It calls the `test()` function from the `example` module (which was loaded via the package configuration) and uses `Console.Log` to print the function's return value to the server console.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/packages/c-module.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\n-- Calls the module function 'test'\n-- Will print 'Hello World' on console\nConsole.Log(example.test())\n```\n\n----------------------------------------\n\nTITLE: Exporting a Function for Other Packages - nanos world (Lua)\nDESCRIPTION: Exports a Lua function so it becomes globally accessible to other packages on the same side (server or client) using Package.Export. Requires nanos world API. Exported functions can return values to callers but are not available across server/client boundary. Parameters are implementation-specific.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/scripting/communicating-between-packages.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\n-- Defines a function which you want to export\\nfunction SpawnCoolWeapon(location, rotation)\\n    local cool_weapon = Weapon(location or Vector(), rotation or Rotator(), ...)\\n    return cool_weapon\\nend\\n\\n-- Exports the function to be called by other Packages\\nPackage.Export(\\\"SpawnCoolWeapon\\\", SpawnCoolWeapon)\n```\n\n----------------------------------------\n\nTITLE: Importing UI Components in nanos world Docs - JavaScript\nDESCRIPTION: This snippet imports the Classes utility and ThemedImage React component to enable themed image rendering and class declarations within the documentation. These imports are required for the file to use standardized UI elements and themed resources when rendering the documentation for the Pickable base class.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/classes/base-classes/pickable.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Classes } from '@site/src/components/_nanos';\nimport ThemedImage from '@theme/ThemedImage';\n```\n\n----------------------------------------\n\nTITLE: Downloading/Updating nanos world Server via SteamCMD\nDESCRIPTION: Uses the `app_update` command within SteamCMD to download or update the nanos world dedicated server, identified by its Steam App ID (1936830). This command must be run within the SteamCMD interactive prompt after logging in and setting an installation directory.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/tutorials-and-examples/hosting-server-4free-gcp.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nSteam> app_update 1936830\n```\n\n----------------------------------------\n\nTITLE: Example Client-Side Discord Usage Placeholder in Lua\nDESCRIPTION: This commented-out example serves as a placeholder to demonstrate potential usage of the Discord static class within a client-side Lua script (Client/Index.lua). Although the code itself is empty in this snippet, it indicates where client-side Discord integration logic would typically reside.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/static-classes/discord.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n```lua title=\"Client/Index.lua\"\n\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Server Install Directory in SteamCMD\nDESCRIPTION: Sets the target installation directory for the game server within the SteamCMD console. This command specifies that the nanos world server files should be placed in the `nanos-world-server` subdirectory relative to the current working directory where SteamCMD was launched. This command must be run within the SteamCMD interactive prompt.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/tutorials-and-examples/hosting-server-4free-gcp.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nSteam> force_install_dir ./nanos-world-server\n```\n\n----------------------------------------\n\nTITLE: Using ReferenceLink Component for External Links (JSX/MDX)\nDESCRIPTION: Demonstrates the usage of the imported `ReferenceLink` component within an MDX file to create styled hyperlinks pointing to external resources. The `href` attribute specifies the target URL, and the content within the tags becomes the clickable link text. These examples link to the official issue tracker, feedback hub, and roadmap page for the 'nanos world' project.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/roadmap.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ReferenceLink href=\"https://issues.nanos.world\">🐛 Official Issue Tracker</ReferenceLink>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<ReferenceLink href=\"https://docs.nanos.world/feedback\">💡 Official Feedback Hub</ReferenceLink>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<ReferenceLink href=\"https://docs.nanos.world/roadmap\">🛣️ Features & Roadmap Page</ReferenceLink>\n```\n\n----------------------------------------\n\nTITLE: Enabling armhf Architecture and Installing Libraries for Box86 on ARM64 using Bash\nDESCRIPTION: A sequence of commands for ARM64 systems (e.g., Armbian Bullseye 64bits) to enable multi-arch support and install necessary 32-bit libraries. `dpkg --add-architecture armhf` adds the 32-bit ARM hard-float architecture, `apt update` refreshes package lists, and `apt install` fetches essential 32-bit libraries (`libc6`, `libncurses5`, `libstdc++6`) required for the Box86 x86 emulator to function correctly.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/server-manual/server-linux-arm.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo dpkg --add-architecture armhf\nsudo apt update\nsudo apt install libc6:armhf libncurses5:armhf libstdc++6:armhf\n```\n\n----------------------------------------\n\nTITLE: Updating APT Package Index using Bash\nDESCRIPTION: Executes the `apt update` command with `sudo` to refresh the local list of available packages from all configured repositories, including the newly added 'testing' repository. This step is necessary after modifying package sources or preferences before attempting to install or upgrade packages.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/server-manual/server-linux-arm.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\n```\n\n----------------------------------------\n\nTITLE: Accessing Asset Keys (Before v1.55) in Lua\nDESCRIPTION: Shows the previous method (before version 1.55) of iterating through assets retrieved by `Assets.GetStaticMeshes`. In this older version, the function returned an array of strings, where each string represented an asset key. This code requires the nanos-world Assets API.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/packages/compatibility-versions.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nfor _, asset in pairs(Assets.GetStaticMeshes(\"nanos-world\")) do\n\tlocal key = asset\nend\n```\n\n----------------------------------------\n\nTITLE: Importing CardLink Component in React - JavaScript\nDESCRIPTION: This snippet imports the CardLink component from a local module '@site/src/components/_nanos'. It is a prerequisite for rendering CardLink cards throughout the documentation. This import should appear at the top of the file before any JSX usage of the CardLink component. The expected output is a ready-to-use CardLink component available for rendering individual cards.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/explore/game-modes-and-packages.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { CardLink } from '@site/src/components/_nanos';\n```\n\n----------------------------------------\n\nTITLE: Accessing Default Asset Category Metadata in Lua\nDESCRIPTION: This Lua script demonstrates how to retrieve the `category` metadata added to default nanos-world assets. It iterates through static meshes using `Assets.GetStaticMeshes` and logs the category string (e.g., \"furniture\") for each asset, enabling programmatic categorization based on the asset pack's metadata.\nSOURCE: https://github.com/nanos-world/docs/blob/master/blog/2023-07-12-june.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n```lua title=Index.lua\nfor _, asset in pairs(Assets.GetStaticMeshes(\"nanos-world\")) do\n\tConsole.Log(asset.category) -- e.g. \"furniture\"\nend\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring a Character as a Possessed Prop in nanos-world (Lua)\nDESCRIPTION: This server-side Lua script demonstrates how to set up a character to behave like a prop. It spawns an invisible character using 'SK_None', adjusts its collision capsule size for potentially small props, attaches a visible static mesh (like a chair) to it, and disables functionalities such as picking up items, grabbing props, crouching, and restricts the camera to third-person mode. This setup is typical for game modes like Prop Hunt.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/tutorials-and-examples/play-as-prop.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Spawns a Character using SK_None mesh (an invisible mesh)\nlocal new_char = Character(Vector(0, 0, 0), Rotator(), \"nanos-world::SK_None\")\n\n-- Adjusts the Capsule of this character. For small props it's recommended to use small capsule size\n-- (A capsule is used to handle Character's collision, this will also adjust camera height location)\n-- It's important to adjust the Capsule Size before adding a StaticMesh, as it will be adjusted based on Capsule Size\nnew_char:SetCapsuleSize(32, 64)\n\n-- Attaches a Static Mesh on the character - which will be the Prop it will possess\nnew_char:AddStaticMeshAttached(\"prop\", \"nanos-world::SM_WoodenChair\")\n\n-- Disables some functionalities from the Character (picking up stuff, ability to crouch/prone, FPS camera...)\nnew_char:SetCanPickupPickables(false)\nnew_char:SetCanGrabProps(false)\nnew_char:SetCanCrouch(false)\nnew_char:SetCameraMode(2) -- Allows only Third Person\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Melee Animation and Impact Sound - nanos world Lua API - Lua\nDESCRIPTION: This snippet provides two methods from the Melee class in nanos world: one to add attack animations for character use, and another to assign custom impact sounds based on surface type. Key parameters include asset_path, play_rate, slot_Type, surface_type, volume, and pitch. These functions allow developers to extend melee weapon functionality with custom animations and sounds for richer gameplay. Valid asset references are required, and mismatched parameters may lead to audio or animation errors.\nSOURCE: https://github.com/nanos-world/docs/blob/master/blog/2022-09-02-august.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nMelee.AddAnimationCharacterUse(asset_path, play_rate, slot_Type)\\nMelee.SetImpactSound(surface_type, asset_path, volume, pitch)\n```\n\n----------------------------------------\n\nTITLE: Installing libstdc++6 from Testing Repository using Bash\nDESCRIPTION: Uses `apt-get` with `sudo` to install the `libstdc++6` package specifically from the Debian 'testing' repository. The `--target-release testing` flag ensures that the newer version from testing is installed, fulfilling the dependency requirement for nanos-world on systems like Debian 11.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/server-manual/server-linux-arm.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get --target-release testing install libstdc++6\n```\n\n----------------------------------------\n\nTITLE: Documenting TODO Example for Lua table Library\nDESCRIPTION: This placeholder snippet is intended to showcase examples for using the Lua 'table' standard library. It does not implement any functionality but serves as a marker for where real usage examples should be added. No dependencies are required and there are no parameters, inputs, or outputs; future implementations should demonstrate typical use cases and constraints.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/standard-libraries/table.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nTODO Examples\n```\n\n----------------------------------------\n\nTITLE: Automating Server Install/Update with Linux One-Liner - Shell\nDESCRIPTION: This shell command automates the download, installation, or update of the nanos world server on Linux. It uses 'steamcmd' with chained parameters for installation directory, anonymous login, app update and validation, followed by quitting. Prerequisite: steamcmd available in PATH. Outputs status logs during process.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/server-manual/server-installation.mdx#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nsteamcmd +force_install_dir ~/nanos-world-server +login anonymous +app_update 1936830 validate +quit\n```\n\n----------------------------------------\n\nTITLE: Initializing a React Application Using create-react-app - Bash\nDESCRIPTION: This code snippet shows how to initialize a new React project named 'basic-hud' using the 'npx create-react-app' command in Bash. It bootstraps a new React application directory, automatically configuring dependencies and scripts required for frontend development. This is the foundational step before any project customization or code implementation.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/tutorials-and-examples/basic-hud-react.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-react-app basic-hud\n```\n\n----------------------------------------\n\nTITLE: Setting Server Installation Directory in SteamCMD - Bash\nDESCRIPTION: This command within the SteamCMD console sets a specific folder for installing the nanos world server. It requires specifying the 'force_install_dir' property followed by the target directory path. In this example, it uses a Windows path ('C:/nanos-world-server/'). Prerequisite: A valid directory path must be provided. No output beyond setting the install context.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/server-manual/server-installation.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nSteam> force_install_dir C:/nanos-world-server/\n```\n\n----------------------------------------\n\nTITLE: Displaying Tutorial Links using React CardLink Component\nDESCRIPTION: This JSX code uses a custom `CardLink` component, imported from '@site/src/components/_nanos', to render a grid of cards within a div container styled with the class `card-links`. Each card represents a tutorial for 'nanos world', displaying its title, description, preview image (`image_src`), and a link (`href`) to the full tutorial page.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/tutorials-and-examples/tutorials-and-examples.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CardLink } from '@site/src/components/_nanos';\n\n<div className=\"card-links\">\n\n<CardLink\n\ttitle=\"Basic HUD (Canvas)\"\n\tdescription=\"How to add a basic HUD using Render’s Canvas features, to display the character’s Health and Ammo.\"\n\timage_src=\"/img/docs/tutorials/canvas.webp\"\n\thref=\"getting-started/tutorials-and-examples/basic-hud-canvas\"\n/>\n\n<CardLink\n\ttitle=\"Basic HUD (HTML)\"\n\tdescription=\"How to add a basic HUD using HTML + JavaScript + CSS to display the character’s Health and Ammo based on CS:GO HUD.\"\n\timage_src=\"/img/docs/tutorials/html-01.webp\"\n\thref=\"getting-started/tutorials-and-examples/basic-hud-html\"\n/>\n\n<CardLink\n\ttitle=\"Doors\"\n\tdescription=\"How to create a simple and automatic door when Characters move in.\"\n\timage_src=\"/img/docs/tutorials/doors.webp\"\n\thref=\"getting-started/tutorials-and-examples/doors\"\n/>\n\n<CardLink\n\ttitle=\"Fireworks\"\n\tdescription=\"How to create a Firework-shooter weapon using the Fireworks Particle Effects Asset Pack from our Vault!\"\n\timage_src=\"/img/docs/tutorials/fireworks-01.webp\"\n\thref=\"getting-started/tutorials-and-examples/fireworks\"\n/>\n\n<CardLink\n\ttitle=\"Gravity Gun\"\n\tdescription=\"How to create a simple Gravity Gun to move Props around.\"\n\timage_src=\"/img/docs/tutorials/gravity-gun.webp\"\n\thref=\"getting-started/tutorials-and-examples/gravity-gun\"\n/>\n\n<CardLink\n\ttitle=\"Hosting Server 4Free - Google Cloud\"\n\tdescription=\"How to create a Linux virtual machine instance on Compute Engine using the Google Cloud Console within the Free Tier.\"\n\timage_src=\"/img/docs/tutorials/hosting-4free-01.webp\"\n\thref=\"getting-started/tutorials-and-examples/hosting-server-4free-gcp\"\n/>\n\n<CardLink\n\ttitle=\"Monster Truck\"\n\tdescription=\"How to create a Monster Truck using the Vehicle system.\"\n\timage_src=\"/img/docs/tutorials/monster-truck.webp\"\n\thref=\"getting-started/tutorials-and-examples/monster-truck\"\n/>\n\n<CardLink\n\ttitle=\"Nametags\"\n\tdescription=\"How to add Name Tags to Characters.\"\n\timage_src=\"/img/docs/tutorials/nametag.webp\"\n\thref=\"getting-started/tutorials-and-examples/name-tags\"\n/>\n\n<CardLink\n\ttitle=\"Painting Meshes\"\n\tdescription=\"How to use the new Material customization methods available to use.\"\n\timage_src=\"/img/docs/tutorials/painting-meshes-01.webp\"\n\thref=\"getting-started/tutorials-and-examples/painting-meshes\"\n/>\n\n<CardLink\n\ttitle=\"Play as Prop\"\n\tdescription=\"How to simulate a Prop possessing using a Character. This can be used for Prop Hunt game-modes!\"\n\timage_src=\"/img/docs/tutorials/play-as-prop.webp\"\n\thref=\"getting-started/tutorials-and-examples/play-as-prop\"\n/>\n\n<CardLink\n\ttitle=\"Weapon Flashlight\"\n\tdescription=\"This sample code attaches a Light to a Weapon to make a Flashlight attachment.\"\n\timage_src=\"/img/docs/tutorials/weapon-flashlight.webp\"\n\thref=\"getting-started/tutorials-and-examples/weapon-flashlight\"\n/>\n\n<CardLink\n\ttitle=\"Weapon Scope\"\n\tdescription=\"This sample code shows how to attach custom sights meshes into a Weapon and work as real scopes.\"\n\timage_src=\"/img/docs/tutorials/weapon-scope.webp\"\n\thref=\"getting-started/tutorials-and-examples/weapon-scope\"\n/>\n\n<CardLink\n\ttitle=\"X-Ray & Highlight\"\n\tdescription=\"This sample code shows how to set Actors to be highlighted when behind walls, or always highlighted!\"\n\timage_src=\"/img/docs/tutorials/xray.webp\"\n\thref=\"getting-started/tutorials-and-examples/x-ray-and-highlight\"\n/>\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Console.Error Stack Trace Output in Lua\nDESCRIPTION: This Lua snippet demonstrates the enhanced functionality of `Console.Error` (and `Console.Warn`) which now includes a stack trace in the output. The code defines a function `MyError` that calls `Console.Error`, and then calls this function, resulting in an error message along with the script call stack being printed to the console, aiding in debugging.\nSOURCE: https://github.com/nanos-world/docs/blob/master/blog/2024-10-20-october.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n```lua title=\"testing/Server/Index.lua\"\nfunction MyError()\n\tConsole.Error(\"error from scripting\")\nend\n\nMyError()\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Whitelisted Trigger - nanos world Lua API - Lua\nDESCRIPTION: This snippet demonstrates how to instantiate a Trigger object in nanos world that only activates for specific class types (\"Character\" and \"Vehicle\"). The constructor parameters include location, rotation, extent, trigger type, visibility, color, and a Lua table specifying whitelisted overlap class names. Dependencies include the nanos world runtime, and input parameters must match the required vector and enum types. The output is a Trigger instance configured for performance-optimized overlap filtering; passing incorrect types or classes will result in the trigger not activating for those entities.\nSOURCE: https://github.com/nanos-world/docs/blob/master/blog/2022-09-02-august.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Triggers only Characters and Vehicles\\nlocal trigger = Trigger(\\n  Vector(),                   -- location\\n  Rotator(),                  -- rotation\\n  Vector(100),                -- extent\\n  TriggerType.Sphere,         -- trigger_type\\n  true,                       -- is_visible\\n  Color(1, 0, 0),             -- color\\n  { \\\"Character\\\", \\\"Vehicle\\\" }  -- overlap_only_classes\\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Homepage Path in package.json\nDESCRIPTION: This JSON snippet shows how to add the 'homepage' property to the project's 'package.json' file. Setting it to './' ensures that resource paths in the built application are relative, which is necessary for correct loading within the nanos world environment.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/tutorials-and-examples/basic-hud-react.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"homepage\": \"./\"\n```\n\n----------------------------------------\n\nTITLE: Documenting StaticMesh Entity Structure and Usage - Markdown\nDESCRIPTION: This snippet uses Markdown/MDX syntax to document the StaticMesh class for nanos world, including its description, tips for usage, and code components for API references. Dependencies include the documentation rendering pipeline that interprets <HeaderDeclaration>, <ConstructorDeclaration>, and similar tags. Inputs are Markdown-formatted documentation, expected to display class info, constructor details, and automatically-loaded mesh behavior; outputs are a navigable developer documentation page. Limitations are that actual code implementations are not included; the page is mainly informative and serves as a reference.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/classes/static-mesh.mdx#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# StaticMesh\n\ndescription: A StaticMesh entity represents a Mesh which can be spawned in the world, can't move and is more optimized for using in decorating the world.\nsidebar_position: 0\ntags: [class]\n\n<HeaderDeclaration type=\"Class\" name=\"StaticMesh\" image=\"/img/docs/static-mesh.webp\" />\n\n\nStatic Meshes are like Props, but with fewer interaction options. Static Meshes are aimed to offer better performance on spawning Static \"objects\" in the world than Props.\n\n:::tip\n\nAutomatically all StaticMeshActors present in the Level will be loaded as a StaticMesh entity in the client side.\n\n:::\n\n\n## 🛠 Constructors\n\n<ConstructorDeclaration type=\"Class\" name=\"StaticMesh\" />\n\n\n## 🗿 Static Functions\n\n<StaticFunctionsDeclaration type=\"Class\" name=\"StaticMesh\" />\n\n\n## 🦠 Functions\n\n<FunctionsDeclaration type=\"Class\" name=\"StaticMesh\" />\n\n\n## 🚀 Events\n\n<EventsDeclaration type=\"Class\" name=\"StaticMesh\" />\n```\n\n----------------------------------------\n\nTITLE: Sample Output of Table.Dump Serializing Server Maps - Lua\nDESCRIPTION: Shows the output produced by Table.Dump when serializing the maps table, illustrating the Lua-compatible format generated by the utility. Useful as an example of expected output structure and format. Output is a descriptive table containing author, compatible_game_modes, and key for each map entry.\nSOURCE: https://github.com/nanos-world/docs/blob/master/blog/2023-11-15-october.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n{\n    [1] = {\n        [\"author\"] = \"nanos™\",\n        [\"compatible_game_modes\"] = {\n            [1] = \"sandbox\",\n        },\n        [\"key\"] = \"nanos-world::BlankMap\",\n    },\n    [2] = {\n        [\"author\"] = \"nanos™\",\n        [\"compatible_game_modes\"] = {},\n        [\"key\"] = \"nanos-world::EmptyMap\",\n    },\n    [3] = {\n        [\"author\"] = \"nanos™\",\n        [\"compatible_game_modes\"] = {\n            [1] = \"sandbox\",\n        },\n        [\"key\"] = \"nanos-world::OceanMap\",\n    },\n    [4] = {\n        [\"author\"] = \"nanos™\",\n        [\"compatible_game_modes\"] = {\n            [1] = \"sandbox\",\n        },\n        [\"key\"] = \"nanos-world::TestingMap\",\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Examples Section for StaticClass in Nano's World Markdown Docs\nDESCRIPTION: Illustrates how to use a custom <ExamplesDeclaration> tag in Markdown to denote the examples section related to the Assets static class. This provides a structured placeholder for documentation generators to later insert example code. Inputs are static attributes, and outputs are handled during the documentation site build. No functional dependencies or runtime output.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/static-classes/assets.mdx#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<ExamplesDeclaration type=\\\"StaticClass\\\" name=\\\"Assets\\\" />\n```\n\n----------------------------------------\n\nTITLE: Automating nanos world Releases with GitHub Actions Workflow (YAML)\nDESCRIPTION: This YAML code defines a GitHub Actions workflow named 'nanos world Store Publish' which triggers on GitHub release events and automates the upload of a nanos world Package or Asset Pack using nanos-store-action. It requires dependencies such as a valid GitHub repository, nanos-store-action v2.0, and a Store API token set as a GitHub secret ('STORE_SECRET'). Key parameters include 'folder' for specifying the location of your asset/package, 'name' for the package/asset folder name, and 'token' for authorization. It expects new release events as input and publishes a draft version to nanos world Store as output, requiring additional manual steps to complete the release. Limitations include the need to pre-generate/store the token and correct repository/workflow configuration.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/vault-and-store/store.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nname: nanos world Store Publish\\n\\non:\\n  release:\\n    types: [published]\\n\\njobs:\\n  build:\\n    runs-on: ubuntu-latest\\n    name: Publish package\\n    steps:\\n      - uses: actions/checkout@v2\\n      - name: Nanos Store Action\\n        uses: nanos-world/nanos-store-action@v2.0\\n        env:\\n          GITHUB_TOKEN: ${{ github.token }}\\n        with:\\n          # folder which contains the asset/package - if it's on root, leave it blank\\n          folder: ''\\n          # name of the asset/package\\n          name: 'name-of-the-package-or-asset'\\n          # API token - generate at https://store.nanos.world/settings/tokens/ and set under Settings -> Secrets -> Actions with name STORE_SECRET\\n          token: ${{ secrets.STORE_SECRET }}\\n\n```\n\n----------------------------------------\n\nTITLE: Declaring a StaticClass Header with Assets in Markdown\nDESCRIPTION: This Markdown snippet demonstrates how to declare a static class header for the Assets class using a custom documentation tag. It utilizes the <HeaderDeclaration> tag with attributes specifying the type, name, and static nature of the class. This tag serves as metadata for documentation processors and does not execute any code. There are no dependencies; its input is static markup, and its output is interpreted by the documentation rendering engine. Not intended for runtime usage.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/static-classes/assets.mdx#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<HeaderDeclaration type=\\\"StaticClass\\\" name=\\\"Assets\\\" is_static />\n```\n\n----------------------------------------\n\nTITLE: Spawning a Character with a Custom Skeletal Mesh in Lua\nDESCRIPTION: This Lua script demonstrates how to instantiate a nanos world `Character` using a custom skeletal mesh asset previously imported and configured. It requires the asset pack (`my-asset-pack`) containing the mesh (`MESH_PC_00`) to be properly exported and defined in `Assets.toml`. The `Character` function is invoked with positional coordinates (Vector), rotation (Rotator), and the specific asset key string ('my-asset-pack::MESH_PC_00') to load the desired mesh.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/assets-modding/creating-assets/skeletal-meshes/characters-meshes.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n```lua title=\"Server/Index.lua\" showLineNumbers\nlocal char = Character(Vector(0, 300, 100), Rotator(), \"my-asset-pack::MESH_PC_00\")\n```\n```\n\n----------------------------------------\n\nTITLE: Event Propagation in Multiple Inheritance Levels (Lua)\nDESCRIPTION: Illustrates event propagation through multiple levels of inheritance. An event triggered on an instance of a subclass (`MyNewSubClass`) will trigger handlers subscribed on that class itself and all its parent classes (`MyNewClass`, `Prop`).\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/scripting/inheriting-classes.md#_snippet_17\n\nLANGUAGE: lua\nCODE:\n```\nMyNewClass = Prop.Inherit(\"MyNewClass\")\nMyNewSubClass = MyNewClass.Inherit(\"MyNewSubClass\")\nMyNewOtherSubClass = MyNewClass.Inherit(\"MyNewOtherSubClass\")\n\nProp.Subscribe(\"Spawn\", function(self)\n    Console.Log(\"Spawned Prop: %s\", tostring(self))\nend)\n\nMyNewClass.Subscribe(\"Spawn\", function(self)\n    Console.Log(\"Spawned MyNewClass: %s\", tostring(self))\nend)\n\nMyNewSubClass.Subscribe(\"Spawn\", function(self)\n    Console.Log(\"Spawned MyNewSubClass: %s\", tostring(self))\nend)\n\nMyNewOtherSubClass.Subscribe(\"Spawn\", function(self)\n    Console.Log(\"Spawned MyNewOtherSubClass: %s\", tostring(self))\nend)\n\nlocal my_entity = MyNewSubClass()\n\n-- Will output:\n--  Spawned Prop: MyNewClass\n--  Spawned MyNewClass: MyNewClass\n--  Spawned MyNewSubClass: MyNewClass\n```\n\n----------------------------------------\n\nTITLE: Context Menu Item Format: Range Type in Lua\nDESCRIPTION: Shows how to define a 'range' slider item for the Context Menu using a Lua table. The 'range' item must specify a callback event, a minimum and maximum value, a starting value, and whether the label auto-updates. Use within the 'items' parameter of ContextMenu.AddItem.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/explore/sandbox-game-mode/context-menu.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n{\\n\\tid = \\\"id-of-item\\\",\\n\\ttype = \\\"range\\\",\\n\\tlabel = \\\"slide me!\\\",\\n\\tcallback_event = \\\"ContextMenu_MyRangeChanged\\\"\\n\\tmin = 0,\\n\\tmax = 1440,\\n\\tvalue = 720,\\n\\tauto_update_label = false,\\n},\\n\n```\n\n----------------------------------------\n\nTITLE: Referencing Default Materials in nanos world Assets\nDESCRIPTION: This snippet demonstrates the format for referencing default materials included in the nanos world base game asset pack. The example shows how to reference 'M_Default_Masked_Lit' using the 'nanos-world::' prefix. This pattern applies to all default materials listed in the documentation, which are part of the Default nanos world Asset Pack.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/assets-modding/default-asset-pack/default-materials.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnanos-world::M_Default_Masked_Lit\n```\n\n----------------------------------------\n\nTITLE: Configuring a 'game-mode' Type Package in Package.toml for nanos world\nDESCRIPTION: Represents the configuration file ('Package.toml') structure for a 'game-mode' package. While similar to 'script' packages in allowing Lua scripts, 'game-mode' packages are designed for comprehensive game logic, and only one such package can be active on the server at any given time. Detailed configuration options are specified in an external reference.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/packages/packages-guide.md#_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Defining Static Mesh Assets (Legacy) in TOML\nDESCRIPTION: Shows the previous method for defining static mesh assets within an `Assets.toml` file. Each asset is identified by a key (e.g., `SM_Flower_01`) and its value is a string representing the path to the asset file.\nSOURCE: https://github.com/nanos-world/docs/blob/master/blog/2023-06-07-may.md#_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n```toml title=\"Assets.toml\"\n[assets.static_meshes]\n\tSM_Flower_01 = \"MyFolder/SM_Awesome_Flower_01\"\n\tSM_Rock_01 = \"MyFolder/SM_Rock_01\"\n\tSM_MyAsset_01 = \"MyFolder/SM_MyAsset_01\"\n\t# ...\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Data in Package.toml for nanos world Map Packages\nDESCRIPTION: Provides a usage example demonstrating how to define custom key-value pairs and arrays within the '[custom_data]' section of a map package's 'Package.toml'. This arbitrary data is associated with the map and becomes accessible server-side via the 'Server.GetMapConfig()' function when the map package is loaded, allowing for map-specific configurations or metadata.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/packages/packages-guide.md#_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n[custom_data]\n\tmy_key = 123\n\tmy_another_key = \"hello world!\"\n\tmy_array = [ \"whoa\", \"yeah\", 123 ]\n```\n\n----------------------------------------\n\nTITLE: Specifying Server Logo via Command Line (CLI)\nDESCRIPTION: This command-line argument is used when starting a nanos world server. The `--logo` flag allows specifying a URL for the server's logo. This logo is now downloaded in-memory for display in the server list, resolving issues where multiple server instances would overwrite the same local `Server.jpg` file.\nSOURCE: https://github.com/nanos-world/docs/blob/master/blog/2023-04-05-march.md#_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n--logo\n```\n\n----------------------------------------\n\nTITLE: Calling Parent Class Methods in Nested Lua Inheritance\nDESCRIPTION: Explains how to call a method from an intermediate parent class (not the original native class) within a nested inheritance structure. It uses the Lua syntax `PARENT_CLASS.METHOD_NAME(self, ...)` to explicitly call the desired parent's implementation, passing `self` as the first argument.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/scripting/inheriting-classes.md#_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\n-- Inherits Prop\nMyNewClass = Prop.Inherit(\"MyNewClass\")\n\nfunction MyNewClass:SetScale(scale)\n    -- Does some logic\n    scale = scale * 2\n\n    -- Calls Super (original Prop method)\n    self.Super:SetScale(scale) * 2\nend\n\n-- Inherits MyNewClass\nMyNewSubClass = MyNewClass.Inherit(\"MyNewSubClass\")\n\nfunction MyNewSubClass:SetScale(scale)\n    -- Does some logic\n    scale = scale + Vector(2, 2, 2)\n\n    -- Calls Parent MyNewClass method with special syntax\n    MyNewClass.SetScale(self, scale)\nend\n```\n\n----------------------------------------\n\nTITLE: Extending Player Class with a New Method in Lua\nDESCRIPTION: This Lua snippet demonstrates the experimental feature of extending existing nanos world classes. It adds a new method 'AddScore' to the 'Player' class, which increments a custom 'score' value stored on the player instance using 'SetValue' and 'GetValue'. The subsequent line shows how to call this newly added method on a player object.\nSOURCE: https://github.com/nanos-world/docs/blob/master/blog/2021-12-01-unreal-engine-5.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- Adding a new method 'AddScore' to Player class\nfunction Player:AddScore(score)\n    self:SetValue(\"score\", self:GetValue(\"score\", 0) + score)\nend\n\n-- Using it\nmy_player:AddScore(10)\n```\n\n----------------------------------------\n\nTITLE: Configuring a 'loading-screen' Package in Package.toml for nanos world\nDESCRIPTION: Represents the configuration file ('Package.toml') structure for a 'loading-screen' package. This specialized package type enables the display of custom HTML-based loading screens to players during connection. It requires an 'index.html' file located in the package's root directory. The specific TOML settings are defined in an external reference.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/packages/packages-guide.md#_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Context Menu Item Format: Select Image Type in Lua\nDESCRIPTION: Illustrates the structure of a 'select_image' item in the Context Menu. The item allows choosing from a list of image options defined by their ids, names, and image paths. Selection triggers the specified callback event; the 'selected' property sets the default choice.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/explore/sandbox-game-mode/context-menu.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\n{\\n\\tid = \\\"id-of-item\\\",\\n\\ttype = \\\"select_image\\\",\\n\\tlabel = \\\"select the image\\\",\\n\\tcallback_event = \\\"SelectBalloonAsset\\\",\\n\\tselected = \\\"id-opt-1\\\",\\n\\toptions = {\\n\\t\\t{ id = \\\"id-opt-01\\\", name = \\\"Opt 01\\\", image = \\\"package://your-package/01.jpg\\\" },\\n\\t\\t{ id = \\\"id-opt-02\\\", name = \\\"Opt 02\\\", image = \\\"package://your-package/02.jpg\\\" },\\n\\t}\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Inheriting and Configuring a Custom Tool Gun - nanos world ToolGun - Lua\nDESCRIPTION: This snippet demonstrates how to define a new Tool Gun class by inheriting from the Sandbox game-mode's ToolGun base class in Lua. It highlights required parameters like name, image, and category for displaying the tool in the Spawn Menu and optional parameters for tutorials and crosshair trace debugging. All options are set via a configuration table, affecting client-side behavior. A prerequisite is that the ToolGun base class must be available and loaded from nanos world Sandbox. Inputs are the class name and configuration table; the output is a new ToolGun-derived class.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/explore/sandbox-game-mode/tool-guns.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nMyToolGun = ToolGun.Inherit(\"MyToolGun\", {\n\t-- Spawn Menu\n\tname = \"My Tool Gun\",\n\timage = \"package://my-package/MyToolGun.webp\",\n\tcategory = \"special\",\n\n\t-- Tool Gun Tutorials which will display on Top Left\n\ttutorials = {\n\t\t{ key = \"LeftClick\", text = \"spawn balloon\" },\n\t\t{ key = \"Undo\", text = \"undo spawn\" },\n\t\t{ key = \"ContextMenu\", text = \"balloon settings\" },\n\t}\n\n\t-- Tool Gun Crosshair Trace Debug Settings which will display on World when aiming\n\tcrosshair_trace = {\n\t\t-- Which Collision Channel to trace\n\t\tcollision_channel = CollisionChannel.WorldStatic | CollisionChannel.WorldDynamic,\n\t\t-- Which Color to display when it traces an entity\n\t\tcolor_entity = Color.GREEN,\n\t\t-- Which Color to display when it traces anything else\n\t\tcolor_no_entity = Color.RED,\n\t}\n})\n```\n\n----------------------------------------\n\nTITLE: Triggering Hot Reload for Packages using Bash\nDESCRIPTION: This Bash command triggers the hot reload feature for nanos world packages. Use '[PACKAGE_NAME]' to reload a specific package or 'all' to reload all packages. This updates client scripts with newer versions and reloads 'Index.lua' files while preserving the current memory state, though it unsubscribes events registered by the package.\nSOURCE: https://github.com/nanos-world/docs/blob/master/blog/2021-12-01-unreal-engine-5.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npackage hotreload [PACKAGE_NAME|all]\n```\n\n----------------------------------------\n\nTITLE: Generating Actor Instance Functions Documentation\nDESCRIPTION: This custom component tag generates the documentation section for instance methods (non-static functions) of the 'Actor' class. It targets the 'Class' named 'Actor'. A preceding caution advises that some methods may not be applicable to all subclasses.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/classes/base-classes/actor.mdx#_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<FunctionsDeclaration type=\"Class\" name=\"Actor\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Runtime Object Manipulation with Gizmo in Lua\nDESCRIPTION: This Lua script demonstrates how to use the Gizmo class to interactively transform a StaticMesh object. It first disables standard player input and enables mouse control, then spawns a cube mesh and a Gizmo. The Gizmo is activated at the mesh's position, and an event listener updates the mesh's location, rotation, and scale whenever the Gizmo is transformed. Mouse click events are subscribed to trigger the Gizmo's press and release actions.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/classes/gizmo.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Disable input and enable mouse cursor\nInput.SetInputEnabled(false)\nInput.SetMouseEnabled(true)\n\n-- Spawn a mesh to interact with\nlocal my_entity = StaticMesh(Vector(0, 0, 100), Rotator(), \"nanos-world::SM_Cube\")\n\n-- Spawn the gizmo\nlocal my_gizmo = Gizmo()\n\n-- Activate the gizmo, at the location of the mesh\nmy_gizmo:Activate(my_entity:GetLocation(), my_entity:GetRotation(), my_entity:GetScale())\n\n-- Subscribes on Gizmo updates\nmy_gizmo:Subscribe(\"Transform\", function(self, location, rotation, scale)\n\tmy_entity:TranslateTo(location, 0.02)\n\tmy_entity:RotateTo(rotation, 0.02)\n\tmy_entity:SetScale(scale)\nend)\n\n-- When Mouse click, trigger Gizmo inputs\nInput.Subscribe(\"MouseDown\", function(key)\n\tif (key == \"LeftMouseButton\") then\n\t\tmy_gizmo:PressPointer()\n\tend\nend)\n\n-- When Mouse release, trigger Gizmo inputs\nInput.Subscribe(\"MouseUp\", function (key, b, c)\n\tif (key == \"LeftMouseButton\") then\n\t\tmy_gizmo:ReleasePointer()\n\tend\nend)\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Entity-Specific EnterVehicle Event - nanos world - Lua\nDESCRIPTION: Demonstrates spawning a Character entity and subscribing to its 'EnterVehicle' event. The callback only triggers when the specified Character enters a vehicle, using the nanos world Lua API. The event handler receives both the entity ('self') and the vehicle object as parameters. Useful for handling entity-scoped events with automatic event cleanup on entity destruction.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/scripting/events-guide.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n-- Spawns a Character\nlocal my_character = Character()\n\nmy_character:Subscribe(\"EnterVehicle\", function(self, vehicle)\n    -- my_character entered vehicle\nend)\n```\n\n----------------------------------------\n\nTITLE: Configuring Map Asset Registration - TOML\nDESCRIPTION: Registers a custom map ('MyAwesomeMap') in the [assets.maps] section of the Assets.toml used by nanos world servers. This entry allows the map asset to be referenced by its name and loaded in-game via the config. Dependencies include a properly exported Unreal Level (umap) and a correctly structured Asset Pack directory. The key represents the friendly map name, with the value being the actual umap file stem. Only TOML syntax is required, with indentation as shown.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/assets-modding/creating-assets/maps-and-levels/importing-maps.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n# maps\\n[assets.maps]\\n    MyAwesomeMap = \\\"MyAwesomeMap\\\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Homepage Path in React's package.json - JSON\nDESCRIPTION: This JSON fragment demonstrates how to set the 'homepage' property in React's package.json file. Properly specifying 'homepage' ensures static assets and links are resolved relative to the build folder, preventing path issues after deployment. This configuration is crucial for building compatible UIs for nanos world that expect resources in the root directory.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/tutorials-and-examples/basic-hud-react.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"homepage\": \"./\"\n```\n\n----------------------------------------\n\nTITLE: Spawning and Customizing Ultra Dynamic Sky - nanos world Lua\nDESCRIPTION: Demonstrates how to create an Ultra Dynamic Sky actor and change the time of day using the static Sky class in nanos world. The snippet requires nanos world with the Ultra Dynamic Sky asset and access to the Sky class API. The first function, Sky.Spawn(), initializes the sky actor, and the second, Sky.SetTimeOfDay(16, 30), sets the scene time to 16:30. Inputs are function calls via Lua; effects are immediate in the in-game environment. These static methods must be called on the client in an active game context.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/static-classes/sky.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Spawns a new Ultra Dynamic Sky actor\\nSky.Spawn()\\n\\n-- Sets the time to 16:30\\nSky.SetTimeOfDay(16, 30)\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring a Billboard - nanos world - Lua\nDESCRIPTION: This snippet demonstrates how to instantiate a Billboard object at a specific 3D location with a chosen 2D material and size, and configure its material texture parameter in nanos world using Lua. It requires the nanos world game engine and assumes the presence of a valid material and image. Parameters include position (Vector), material asset name (string), size (Vector2D), and an initial visibility flag (boolean). The 'SetMaterialTextureParameter' function sets the texture for the material to an image located in the package directory. Input: specific coordinates, material name, size, and image path; output: a Billboard entity rendered in the world facing the camera. This operation is client-side only.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/classes/billboard.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal my_billboard = Billboard(\n    Vector(200, 200, 200), -- location\n    \"nanos-world::M_Default_Masked_Lit\", -- material\n    Vector2D(32, 32), -- size\n    true\n)\n\nmy_billboard:SetMaterialTextureParameter(\"Texture\", \"package://my_package/Client/image.jpg\")\n```\n\n----------------------------------------\n\nTITLE: Creating and Drawing on a Canvas in Lua (nanos-world)\nDESCRIPTION: This Lua snippet demonstrates initializing a `Canvas` object, subscribing to its `Update` event to perform drawing actions like `DrawText` and `DrawLine`, forcing the canvas to redraw using `Repaint()`, and applying the resulting texture as a material to a `Prop` entity using `SetMaterialFromCanvas()`. It relies on the nanos-world API, including `Canvas`, `Color`, `Vector2D`, and interaction with `Prop` objects.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/classes/canvas.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Spawns a Canvas\nlocal my_canvas = Canvas(\n  true,\n  Color.TRANSPARENT,\n  0,\n  true\n)\n\n-- Subscribes for Update, we can only Draw inside this event\nmy_canvas:Subscribe(\"Update\", function(self, width, height)\n  -- Draws a Text in the middle of the screen\n  self:DrawText(\"Hello World!\", Vector2D(width / 2, height / 2))\n\n  -- Draws a red line Horizontally\n  self:DrawLine(Vector2D(0, height / 2), Vector2D(width, height / 2), 10, Color.RED)\nend)\n\n-- Forces the canvas to repaint, this will make it trigger the Update event\nmy_canvas:Repaint()\n\n-- Applies the Canvas material into a Prop\nany_prop:SetMaterialFromCanvas(my_canvas)\n```\n\n----------------------------------------\n\nTITLE: Providing Example Placeholders for Lua Table Library\nDESCRIPTION: This snippet serves as a placeholder for examples demonstrating the use of the table standard library in Lua. No concrete code is present, indicating that examples are to be added. The section is intended to show how functions in the table library can be used, but users must replace 'TODO Examples' with actual code for instructional value.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/standard-libraries/table.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nTODO Examples\n```\n\n----------------------------------------\n\nTITLE: Importing Framework Components for Documentation Rendering in JavaScript\nDESCRIPTION: Imports essential components from the nanos world documentation framework to enable specialized UI rendering. The 'Classes' import is used for listing API class details, and 'ThemedImage' is utilized later for theme-aware image display. These imports are prerequisites for rendering Markdown or MDX documentation sources for the Pickable class.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/classes/base-classes/pickable.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Classes } from '@site/src/components/_nanos';\nimport ThemedImage from '@theme/ThemedImage';\n```\n\n----------------------------------------\n\nTITLE: Making Asynchronous HTTP Requests with nanos world HTTP (Lua)\nDESCRIPTION: This Lua code snippet demonstrates how to send an asynchronous HTTP GET request using the static HTTP.RequestAsync function. It specifies the target server address, path, HTTP method, request body, content type, debug flag, optional headers, and a callback function to handle the response. The callback logs the status code and data, and also shows how to parse a JSON response using the JSON.parse method. Dependencies include the nanos world server environment and JSON parsing support. The function parameters allow full customization of the HTTP request, and the callback is guaranteed to run on the main thread.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/static-classes/http.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Makes an asynchronous HTTP Request\\nHTTP.RequestAsync(\"127.0.0.1:7777\", \"/\", HTTPMethod.GET, \"\", \"application/json\", false, {}, function(status, data)\\n    Console.Log(status) -- 200\\n    Console.Log(data) -- \"{\\\"players_count\\\":0,\\\"server_name\\\":\\\"nanos world server\\\"}\"\\n\\n\\t-- TIP: You can parse it if it's a json return as well\\n    local json_ret = JSON.parse(data)\\nend)\n```\n\n----------------------------------------\n\nTITLE: Instantiating Particle Systems with Nanos World in Lua\nDESCRIPTION: This Lua code snippet demonstrates the instantiation of a Particle class object in Nanos World to spawn particle effects at a specified position and rotation. It requires Nanos World scripting support and Particle, Vector, and Rotator classes functionalities. The required parameters are a Vector for position, a Rotator for orientation, a string for the particle system asset (such as 'nanos-world::P_Explosion'), and two boolean flags indicating auto destruction and activation. The Particle object will be created at the specified location and can be set to auto-destroy and auto-activate upon creation. Ensure that the asset name corresponds to a valid, registered particle system and that the script runs in an environment with access to the Nanos World API.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/classes/particle.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal my_particle = Particle(\n    Vector(-200, 100, 100),\n    Rotator(0, 0, 0),\n    \"nanos-world::P_Explosion\",\n    true, -- Auto Destroy?\n    true -- Auto Activate?\n)\n```\n\n----------------------------------------\n\nTITLE: Adding New Tab to Spawn Menu with SpawnMenu.AddTab (nanos world, Lua)\nDESCRIPTION: Illustrates adding a custom tab to the Spawn Menu by invoking SpawnMenu.AddTab on the client side, typically in a package's load event callback. Required parameters are the tab's unique ID, display label, image path for active state, and image path for inactive state. Depends on client-side access to the SpawnMenu API and the package system; the images must be available at the given paths. No return value; effect is visual.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/explore/sandbox-game-mode/spawn-menu.mdx#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nPackage.Subscribe(\"Load\", function()\\n    -- Adds a new tab\\n    SpawnMenu.AddTab(\\n        \"consumables\",\\n        \"consumables\",\\n        \"package://your-package/food.png\",\\n        \"package://your-package/food_inactive.png\"\\n    )\\nend)\n```\n\n----------------------------------------\n\nTITLE: Declaring Exported Assets for Scripting Reference - TOML\nDESCRIPTION: Lists and maps exported Unreal assets in the Assets.toml so they can be referenced via scripting. Dependencies: must be inside the same Assets.toml. '[assets.static_meshes]' maps script-accessible names (keys) to their asset paths. Inputs: asset export names and relative folder paths. Outputs: enables asset spawning by scripters using these names. Paths must match cooked asset structure; keys are case sensitive.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/assets-modding/creating-assets/importing-assets.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n# assets files\\n[assets]\\n    # ...\\n\\n    # static meshes\\n    [assets.static_meshes]\\n        # Key = Path\\n        SM_Cube = \\\"MySubFolder/SM_Cube\\\"\\n        # ...\n```\n\n----------------------------------------\n\nTITLE: Initializing Gravity Gun Server Logic in Lua (nanos world)\nDESCRIPTION: This server-side Lua script initializes the environment by spawning several Prop and StaticMesh objects. It subscribes to remote events triggered by clients: 'PickUp' to toggle the grabbed object's gravity and reset its physics state, and 'UpdateObjectPosition' to smoothly translate the object based on client input. Static Meshes lack physics and remain fixed when released.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/tutorials-and-examples/gravity-gun.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n```lua title=\"Server/Index.lua\" showLineNumbers\n-- Spawns some Props and Static Meshes\n-- (note: Static Meshes don't have physics so they will freeze where released automatically)\nlocal p_sphere = Prop(Vector(200, 0, 200), Rotator(), \"nanos-world::SM_Sphere\")\nlocal p_cone = Prop(Vector(200, 0, 200), Rotator(), \"nanos-world::SM_Cone\")\nlocal sm_cube = StaticMesh(Vector(100, 0, 200), Rotator(), \"nanos-world::SM_Cube\")\nlocal sm_cylinder = StaticMesh(Vector(300, 0, 200), Rotator(), \"nanos-world::SM_Cylinder\")\n\n-- Subscribe for Client's custom event, for when the object is grabbed/dropped\nEvents.SubscribeRemote(\"PickUp\", function(player, object, is_grabbing)\n    object:SetGravityEnabled(not is_grabbing)\n    object:TranslateTo(object:GetLocation(), 0)\nend)\n\n-- Subscribe for Client's custom event, to update the position of the object he is grabbing\nEvents.SubscribeRemote(\"UpdateObjectPosition\", function(player, object, location)\n    object:TranslateTo(location, 0.1)\nend)\n```\n```\n\n----------------------------------------\n\nTITLE: Using WebUI as Material on Meshes - Lua\nDESCRIPTION: This Lua snippet shows how to spawn a WebUI with advanced configuration (visibility, transparency, auto-resize, and size), attach it as a material to a 3D mesh, and integrate UI-driven textures into nanos world's 3D static meshes. Dependencies include mesh assets, nanos world, and WebUI-enabled HTML. Parameters configure UI appearance, mesh position/rotation, and resource linkage. Input: WebUI properties and mesh definition; Output: mesh with a WebUI texture. Ensure the WebUI is set up before binding it to the mesh.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/classes/webui.mdx#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- Spawns a WebUI with is_visible = false, is_transparent = false, auto_resize = false and size of 500x500\\nlocal my_ui = WebUI(\\\"Awesome Site\\\", \\\"https://nanos.world\\\", false, false, false, 500, 500)\\n\\n-- Spawns a StaticMesh (can be any mesh)\\nlocal static_mesh = StaticMesh(Vector(0, 0, 100), Rotator(), \\\"nanos-world::SM_Cube\\\")\\n\\n-- Sets the mesh material to use the WebUI\\nstatic_mesh:SetMaterialFromWebUI(my_ui)\n```\n\n----------------------------------------\n\nTITLE: Configuring C Module Package Metadata and Modules in TOML\nDESCRIPTION: Shows an example `Package.toml` file for a C Module package. It defines metadata such as title, author, and version under the `[meta]` section. The `[c_module]` section specifies the list of module library names (without file extensions) that the package provides, highlighted here with \"example\".\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/packages/c-module.md#_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n# vault configurations\n[meta]\n    # friendly name\n    title =                 \"My Awesome C Module\"\n    # contributors\n    author =                \"Contributor Names\"\n    # version\n    version =               \"0.1.0\"\n\n# c module configurations\n[c_module]\n    # list of modules to load (without file extension)\n    modules = [\n                            # highlight-next-line\n                            \"example\",\n    ]\n```\n\n----------------------------------------\n\nTITLE: Adding New Categories to Tabs with SpawnMenu.AddCategory (nanos world, Lua)\nDESCRIPTION: Shows how to add custom categories to any tab within the Spawn Menu by calling SpawnMenu.AddCategory on the client side, generally within a package's load event. This process requires specifying the tab ID, category ID, label, active image path, and inactive image path for each new category. The correct images must be provided. No return value; the new categories are integrated into the menu's organization structure.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/explore/sandbox-game-mode/spawn-menu.mdx#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nPackage.Subscribe(\"Load\", function()\\n    -- Adds a new category to Props tab\\n    SpawnMenu.AddCategory(\\n        \"props\",\\n        \"low-poly\",\\n        \"low poly\",\\n        \"package://your-package/low-poly.png\",\\n        \"package://your-package/low-poly_inactive.png\"\\n    )\\n\\n    -- Adds a new category to Weapons tab\\n    SpawnMenu.AddCategory(\\n        \"weapons\",\\n        \"world-war\",\\n        \"world war\",\\n        \"package://your-package/ww.png\",\\n        \"package://your-package/ww_inactive.png\"\\n    )\\nend)\n```\n\n----------------------------------------\n\nTITLE: Structuring a C Module Package Directory\nDESCRIPTION: Illustrates the standard directory layout for a nanos world C Module Package. It shows that the package's root directory should contain the `Package.toml` manifest file along with the compiled module binaries for different platforms (e.g., `example.dll` for Windows, `libexample.so` for Linux).\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/packages/c-module.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nPackages/\n└── my-module/\n    ├── Package.toml\n    ├── example.dll\n    └── libexample.so\n```\n\n----------------------------------------\n\nTITLE: Documenting Entity Base Class in Markdown - Markdown\nDESCRIPTION: This snippet is a template for documenting the 'Entity' base class in nanos world using markdown. It includes sections for static functions, functions, and events, making use of embedded UI components such as HeaderDeclaration, StaticFunctionsDeclaration, FunctionsDeclaration, and EventsDeclaration for structured autogeneration of documentation. Users reference static functions with a class name and dot notation. No programming code is included within the snippet; instead, documentation and UI rendering are generated from the tags.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/classes/base-classes/entity.mdx#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\\ntitle: Base Entity\\ndescription: Base class for all Entity entities\\ntags: [base-class]\\n---\\n\\n<HeaderDeclaration type=\\\"Class\\\" name=\\\"Entity\\\" />\\n\\n\\n## \\ud83d\\udddf\\ufe0f\\u00a0Static Functions\\n\\n:::tip\\n\\nThe following functions are accessed statically using the specific **class** with a **dot**. Example: `Character.GetAll()`.\\n\\n:::\\n\\n<StaticFunctionsDeclaration type=\\\"Class\\\" name=\\\"Entity\\\" />\\n\\n\\n## \\ud83e\\udda0\\u00a0Functions\\n\\n<FunctionsDeclaration type=\\\"Class\\\" name=\\\"Entity\\\" />\\n\\n\\n## \\ud83d\\ude80\\u00a0Events\\n\\n<EventsDeclaration type=\\\"Class\\\" name=\\\"Entity\\\" />\\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Range Slider Context Menu Item in Lua\nDESCRIPTION: Shows the Lua table structure for defining a 'range' (slider) type item for the Context Menu. It includes a unique `id`, `type` as 'range', a display `label`, a `callback_event` triggered on value change, `min` and `max` values for the range, an initial `value`, and an optional boolean `auto_update_label` (defaults to false).\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/explore/sandbox-game-mode/context-menu.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n{\n\tid = \"id-of-item\",\n\ttype = \"range\",\n\tlabel = \"slide me!\",\n\tcallback_event = \"ContextMenu_MyRangeChanged\"\n\tmin = 0,\n\tmax = 1440,\n\tvalue = 720,\n\tauto_update_label = false,\n},\n```\n\n----------------------------------------\n\nTITLE: Importing ReferenceLink Component in MDX (JavaScript)\nDESCRIPTION: Imports the `ReferenceLink` component from a site-specific components directory (`@site/src/components/_nanos`). This component is intended for use within the MDX page to render styled hyperlinks, enhancing the standard Markdown link functionality.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/roadmap.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ReferenceLink } from '@site/src/components/_nanos';\n```\n\n----------------------------------------\n\nTITLE: Manually Adding a Spawn Menu Item on Client (Lua)\nDESCRIPTION: Provides a client-side example using `SpawnMenu.AddItem` to add a custom \"Incredible Tool\" item to the \"tools\" tab. It specifies the item's unique ID (`IncredibleTool`), display name (`Incredible Tool`), and thumbnail image path. The `category_id` is `nil`, placing it in the default 'uncategorized' section within the specified tab.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/explore/sandbox-game-mode/spawn-menu.mdx#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n```lua title=\"your-package/Client/Index.lua\" showLineNumbers\n-- Example adding an Incredible Tool to spawn Menu (client side)\nSpawnMenu.AddItem(\n    \"tools\",\t\t\t-- tab id\n    \"IncredibleTool\",\t-- unique id of the item\n    \"Incredible Tool\",\t-- name/label\n    \"assets://nanos-world/Thumbnails/SK_Blaster.jpg\", -- image path\n    nil\t\t\t\t\t-- no category, will display at 'uncategorized'\n)\n```\n```\n\n----------------------------------------\n\nTITLE: Running Direct CLI Command - Shell - Linux\nDESCRIPTION: Illustrates single-line usage for updating a package ('sandbox') directly while starting the server's CLI on Linux. The snippet must be executed in the relevant directory and assumes all necessary binaries are present. No interactive input is required; the command runs to completion.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/server-manual/command-line-interface.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n```shell\n./NanosWorldServer.sh --cli update package sandbox\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Static Mesh Assets by Path - TOML in Assets.toml\nDESCRIPTION: This code snippet shows how static mesh assets are declared in an Asset Pack's Assets.toml as key-value string pairs. Each key identifies the asset and the value specifies its relative path inside the pack. Prerequisite is that the asset files exist and paths are correct. Key parameters are asset keys and their respective Unreal project folder paths. Input is declaration blocks in TOML, output is asset registration for use in scripting.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/assets.mdx#_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[assets.static_meshes]\n\tSM_Flower_01 = \"MyFolder/SM_Awesome_Flower_01\"\n\tSM_Rock_01 = \"MyFolder/SM_Rock_01\"\n\tSM_MyAsset_01 = \"MyFolder/SM_MyAsset_01\"\n\t# ...\n```\n\n----------------------------------------\n\nTITLE: Exiting SteamCMD Console (Bash)\nDESCRIPTION: Exits the SteamCMD interactive console using the `quit` command.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/server-manual/server-installation.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nSteam> quit\n```\n\n----------------------------------------\n\nTITLE: Displaying Warning for Actor Method Compatibility (Markdown)\nDESCRIPTION: This segment wraps a cautionary block inside a markdown file to inform users that some methods may not be available on particular Actor subclasses. It uses a :::caution directive, which may be interpreted by markdown frameworks supporting admonitions. No dependencies beyond markdown parsing are required.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/classes/base-classes/actor.mdx#_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n:::caution\\n\\nSome of the following methods may not work on certain Actor classes.\\n\\n:::\n```\n\n----------------------------------------\n\nTITLE: Receiving and Unsubscribing from Lua Events in WebUI - JavaScript\nDESCRIPTION: This JavaScript snippet illustrates handling events sent from Lua, processing received parameters, logging output, and sending events back to Lua. Unsubscribing from events is demonstrated to prevent further triggers. Depends on the nanos world Events API available in the WebUI context. Inputs: event names and parameters from Lua; outputs: logged messages and callback invocations. Must be placed in a script loaded by the WebUI HTML.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/classes/webui.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Register for \\\"MyEvent\\\" from Lua\\nEvents.Subscribe(\\\"MyEvent\\\", function(param1, param2) {\\n    console.log(\\\"Triggered! \\\" + param1 + \\\" \\\" + param2);\\n    // Will output 'Triggered! 123 hello'\\n\\n    // Triggers \\\"MyAnswer\\\" on Lua\\n    Events.Call(\\\"MyAnswer\\\", \\\"Hey there!\\\");\\n});\\n\\n// It is also possible to unsubscribe from an event to make it stop triggering\\nEvents.Unsubscribe(\\\"MyEvent\\\");\n```\n\n----------------------------------------\n\nTITLE: Passing Entities and Data Types via Events in Lua\nDESCRIPTION: Illustrates how to pass various data types, including game entities like Characters and Vectors, as arguments when calling events using `Events.Call` or `Events.CallRemote`. The receiving `Events.Subscribe` callback function can then access these arguments directly. This example demonstrates passing a string, a Vector, a Character object, and a number.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/static-classes/events.mdx#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n```lua showLineNumbers\n-- register for an Event (remote or local)\nEvents.Subscribe(\"MyAnotherEvent\", function(my_text, my_vector, my_character, my_number)\n    Console.Log(\"Event received! \" .. my_text .. \" \" .. my_vector.X .. \" \" .. my_character:GetViewMode() .. \" \" .. my_number)\n    -- outputs \"Event received! hello nanos world! 123 1 456\"\nend)\n\n-- passing Characters through events\nlocal my_temp_character = Character()\n\n-- calls a local Event in all Local Packages\nEvents.Call(\"MyEvent\", \"hello nanos world!\", Vector(123, 123, 123), my_temp_character, 456)\n\n-- calls a remote Event in all Server Packages\nEvents.CallRemote(\"MyEvent\", \"hello nanos world!\", Vector(123, 123, 123), my_temp_character, 456)\n```\n```\n\n----------------------------------------\n\nTITLE: Creating SceneCapture and Applying Output to Prop (Lua)\nDESCRIPTION: This Lua snippet demonstrates how to create a `SceneCapture` instance with specific position (Vector), rotation (Rotator), texture width/height, near/far clip planes, and render rate. It then creates a `Prop` (a cube) and applies the texture generated by the `SceneCapture` to the prop's material using the `SetMaterialFromSceneCapture` method. Dependencies include `SceneCapture`, `Vector`, `Rotator`, and `Prop` classes from the nanos-world API.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/classes/scene-capture.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal scene_capture = SceneCapture(\n  Vector(0, 0, 200),\n  Rotator(-15, 0, 0),\n  256,\n  256,\n  0,\n  5000,\n  100\n)\n\n-- Paints the Prop with the SceneCapture output\nlocal my_prop = Prop(Vector(200, 200, 100), Rotator(), \"nanos-world::SM_Cube\")\nmy_prop:SetMaterialFromSceneCapture(scene_capture)\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Grenade Object in Lua\nDESCRIPTION: This Lua code snippet demonstrates how to create a new `Grenade` instance in nanos world. It calls the `Grenade` constructor, providing the initial position (`Vector`), rotation (`Rotator`), mesh asset path (`nanos-world::SM_Grenade_G67`), particle effect path (`nanos-world::P_Grenade_Special`), and explosion sound asset path (`nanos-world::A_Explosion_Large`). The `nanos-world::P_Grenade_Special` is a unique identifier for a particle effect that adapts to the surface of explosion and whether it's underwater.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/classes/grenade.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n```lua showLineNumbers\nlocal new_grenade = Grenade(\n\tVector(-900, 185, 215),\n\tRotator(0, 90, 90),\n\t\"nanos-world::SM_Grenade_G67\",\n\t\"nanos-world::P_Grenade_Special\",\n\t\"nanos-world::A_Explosion_Large\"\n)\n```\n```\n\n----------------------------------------\n\nTITLE: Creating and Drawing on a Canvas (Lua)\nDESCRIPTION: This Lua script demonstrates initializing a `Canvas` object, subscribing to its `Update` event to perform drawing operations like `DrawText` and `DrawLine` using `Vector2D` coordinates and `Color` values. It also shows how to force the canvas to update using `Repaint()` and apply the resulting canvas texture as a material to another Prop using `SetMaterialFromCanvas`.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/classes/canvas.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Spawns a Canvas\nlocal my_canvas = Canvas(\n  true,\n  Color.TRANSPARENT,\n  0,\n  true\n)\n\n-- Subscribes for Update, we can only Draw inside this event\nmy_canvas:Subscribe(\"Update\", function(self, width, height)\n  -- Draws a Text in the middle of the screen\n  self:DrawText(\"Hello World!\", Vector2D(width / 2, height / 2))\n\n  -- Draws a red line Horizontally\n  self:DrawLine(Vector2D(0, height / 2), Vector2D(width, height / 2), 10, Color.RED)\nend)\n\n-- Forces the canvas to repaint, this will make it trigger the Update event\nmy_canvas:Repaint()\n\n-- Applies the Canvas material into a Prop\nany_prop:SetMaterialFromCanvas(my_canvas)\n```\n\n----------------------------------------\n\nTITLE: Illustrating Package Folder Structure\nDESCRIPTION: Shows the standard directory layout for a nanos world package located within the server's `Packages/` directory. It highlights the separation of code into `Server`, `Client`, and `Shared` folders, the necessity of an `Index.lua` file for script execution, and the presence of the `Package.toml` configuration file. Only Client and Shared folders are distributed to connecting players.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/packages/packages-guide.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nNanosWorldServer.exe\nPackages/\n├── my-package-01/\n│\t├── Server/\n│\t│   ├── Index.lua\n│\t│   └── *.lua\n│\t├── Client/\n│\t│   └── *.lua\n│\t├── Shared/\n│\t│   └── *.lua\n│\t└── Package.toml\n├── my-package-02/\n│\t├── Package.toml\n│\t└── ...\n├── my-package-loading-screen-01/\n│\t├── Index.html\n│\t├── Package.toml\n│\t└── ...\nAssets/\nConfig.toml\n```\n\n----------------------------------------\n\nTITLE: Painting Mesh with Red Tint using nanos world in Lua\nDESCRIPTION: This example script demonstrates how to spawn a static mesh cube and set its 'Tint' parameter to display a red color. The 'SetMaterialColorParameter' method assigns a Color value to the material's Tint, which affects the base color property. It relies on predefined parameter naming and expects the nanos world default masked material to be compatible with the 'Tint' parameter; outputs a red-tinted mesh.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/tutorials-and-examples/painting-meshes.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- spawns a static mesh cube\\nlocal my_cube = StaticMesh(Vector(300, 0, 100), Rotator(0, 45, 0), \\\"nanos-world::SM_Cube\\\")\\n-- replaces it's materials with the nanos default Masked one\\nmy_cube:SetMaterial(\\\"nanos-world::M_Default_Masked_Lit\\\")\\n\\n-- paints it red\\nmy_cube:SetMaterialColorParameter(\\\"Tint\\\", Color(1, 0, 0))\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Events to Specific Dimensions in Lua\nDESCRIPTION: This code snippet shows how to use the `Events.BroadcastRemoteDimension` method to send a remote event exclusively to players currently present in a specified dimension. The 'dimension' parameter indicates the target dimension number, 'event_name' is the string identifier for the event, and 'params...' represents any additional arguments to be passed with the event. Note that if an entity argument is passed that does not reside in the target player's dimension, it will be replaced with `nil` on the client-side.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/scripting/dimensions.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nEvents.BroadcastRemoteDimension(dimension, event_name, params...)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Package Information - nanos world - Lua\nDESCRIPTION: Shows how to retrieve package information using the updated Package.GetPackages method in nanos world. The method takes 'only_loaded' and 'package_type_filter' parameters and returns a list of tables with fields such as title, name, type, version, and author for each package. This code demonstrates expected input and output structure post-update. Requires nanos world scripting API 1.49+.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/packages/compatibility-versions.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal packages = Package.GetPackages(only_loaded, package_type_filter)\\n--[[\\n\\t{\\n\\t\\t{\\n\\t\\t\\t[\\\"title\\\"] = \\\"Awesome Package\\\",\\n\\t\\t\\t[\\\"name\\\"] = \\\"awesome-package\\\",\\n\\t\\t\\t[\\\"type\\\"] = PackageType.Script,\\n\\t\\t\\t[\\\"version\\\"] = \\\"1.0.0\\\",\\n\\t\\t\\t[\\\"author\\\"] = \\\"Myself\\\",\\n\\t\\t},\\n\\t\\t...\\n\\t}\\n--]]\n```\n\n----------------------------------------\n\nTITLE: Defining and Synchronizing Custom Entities (nanos world, Lua)\nDESCRIPTION: Demonstrates the definition of a new class inheriting from Prop on both the server and client, with subscriptions to the Spawn event. Ensures that custom entities are properly synchronized across server and client, maintaining consistent behavior and event triggering. Dependencies: Prop base class and Console logging; expects an entity system supporting inheritance and event subscription; outputs Spawned logs when entities are instantiated.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/scripting/inheriting-classes.md#_snippet_18\n\nLANGUAGE: lua\nCODE:\n```\nMyNewClass = Prop.Inherit(\"MyNewClass\")\\n\\nMyNewClass.Subscribe(\"Spawn\", function(self)\\n    Console.Log(\"Spawned MyNewClass: %s\", tostring(self))\\nend)\\n\\nlocal my_entity = MyNewClass()\\n\\n-- Will output:\\n--  Spawned MyNewClass: MyNewClass\n```\n\nLANGUAGE: lua\nCODE:\n```\nMyNewClass = Prop.Inherit(\"MyNewClass\")\\n\\nMyNewClass.Subscribe(\"Spawn\", function(self)\\n    -- It was spawned on server and will spawn on Client as a MyNewClass properly\\n    Console.Log(\"Spawned MyNewClass: %s\", tostring(self))\\nend)\\n\\n-- Will output:\\n--  Spawned MyNewClass: MyNewClass\n```\n\n----------------------------------------\n\nTITLE: Creating a 3D Sound Instance in Lua\nDESCRIPTION: This Lua snippet demonstrates instantiating the `Sound` class to play a 3D sound effect. It provides the sound's location using a `Vector`, specifies the asset path (`nanos-world::A_VR_Confirm`), indicates it's a 3D sound (`false`), enables automatic destruction after playing (`true`), sets the type to `SoundType.SFX`, and defines the volume and pitch. This is a common way to spawn positional audio linked to an in-game asset.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/classes/sound.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n```lua showLineNumbers\nlocal my_sound = Sound(\n    Vector(-510, 145, 63), -- Location (if a 3D sound)\n    \"nanos-world::A_VR_Confirm\", -- Asset Path\n    false, -- Is 2D Sound\n    true, -- Auto Destroy (if to destroy after finished playing)\n    SoundType.SFX,\n    1, -- Volume\n    1 -- Pitch\n)\n```\n```\n\n----------------------------------------\n\nTITLE: Quitting SteamCMD Console - Bash\nDESCRIPTION: This code snippet exits the SteamCMD interactive shell and terminates the current session. Necessary after completing server installation or updates. No input parameters; result is a terminated console process.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/server-manual/server-installation.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nSteam> quit\n```\n\n----------------------------------------\n\nTITLE: Calling Blueprint Events from Unreal Blueprint in Lua\nDESCRIPTION: Demonstrates how to spawn a Blueprint Actor and call a custom event defined in the Blueprint from Lua. Relies on the nanos world API, specifically the Blueprint, Vector, and Rotator constructors. Expects the asset path of an existing Blueprint and event name as parameters. Outputs the result of the event fired in the Blueprint, with any additional parameters passed as arguments. Requires correct setup of Blueprint event within Unreal and asset registration in nanos world.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/classes/blueprint.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Spawns the Blueprint\\nlocal blueprint = Blueprint(Vector(), Rotator(), \\\"my-asset-pack::BP_MyBlueprint\\\")\\n\\nlocal param1 = 123\\nlocal param2 = \\\"hello there!\\\"\\n\\n-- Calls the event, passing any parameters\\nblueprint:CallBlueprintEvent(\\\"MyBlueprintCustomEvent\\\", param1, param2)\n```\n\n----------------------------------------\n\nTITLE: Destroying a Spawned Entity (nanos world, Lua)\nDESCRIPTION: Illustrates how to destroy an entity instance (here, a character) using the Destroy method in nanos world. This action triggers entity cleanup procedures including event emission and detachment of attached entities. The snippet must be run on the server, and assumes 'my_character' is a valid actor instance. After invocation, the entity and its eligible attachments are permanently removed from the world; the Player class is not destroyable by this method.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/scripting/classes-guide.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nmy_character:Destroy()\n```\n\n----------------------------------------\n\nTITLE: Basic Client-Side Event Handling in Lua\nDESCRIPTION: Demonstrates fundamental usage of the Events static class on the client side. It shows how to subscribe to an event triggered locally ('MyLocalEvent') and an event triggered by the server ('MyClientEvent'). It also shows how to call a local event and trigger an event on the server ('MyServerEvent'). The example uses `Console.Log` to output messages upon receiving events.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/static-classes/events.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n```lua title=\"Client/Index.lua\" showLineNumbers\n-- register for a local Event (local = client only)\nEvents.Subscribe(\"MyLocalEvent\", function(my_text)\n    Console.Log(\"Event received locally! \" .. my_text)\n    -- outputs \"Event received locally! hello nanos world!\"\nend)\n\n-- calls a local Event in all Local Packages\nEvents.Call(\"MyLocalEvent\", \"hello nanos world!\")\n\n-- register for a server Event (remote = server)\nEvents.SubscribeRemote(\"MyClientEvent\", function(my_text)\n    Console.Log(\"Event received from server! \" .. my_text)\n    -- outputs \"Event received from server! hello nanos world!\"\nend)\n\n-- calls a remote Event in all Server Packages\nEvents.CallRemote(\"MyServerEvent\", \"hello nanos world!\")\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Actor Dimensions - nanos world Lua API\nDESCRIPTION: This Lua snippet demonstrates how to set the dimension (an isolated world instance) for an actor using the SetDimension method. It requires an actor entity and a numerical value indicating the dimension. Changing the dimension separates or merges an entity and its children in relation to other actors. Inputs are the actor object and the target dimension; there is no output, but the game world state is affected. Requires nanos world environment with properly referenced actor objects.\nSOURCE: https://github.com/nanos-world/docs/blob/master/blog/2022-10-05-september.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nactor:SetDimension(number)\n```\n\n----------------------------------------\n\nTITLE: Starting Server with Auto-Download using Shell (Linux)\nDESCRIPTION: A concise Shell script example for launching the nanos world server on Linux. It configures various settings via command-line parameters (name, description, map, game mode, packages, ports, max players, logo) and includes the `--auto_download 1` flag to automatically fetch required packages and assets if they are missing.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/server-manual/server-configuration.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n```shell title=\"Shell/Linux\"\n# Starts the server with all configs set and auto downloads the packages and assets if needed\n./NanosWorldServer.sh --name \"nanos world Amazing Sandbox\" --description \"Awesome Sandbox Server\" --map \"nanos-world::TestingMap\" --game_mode \"sandbox\" --packages \"battlefield-kill-ui,ts-fireworks-tools\" --port 7777 --query_port 7778 --max_players 32 --auto_download 1 --logo \"https://i.imgur.com/vnB8CB5.jpg\"\n```\n```\n\n----------------------------------------\n\nTITLE: Defining an Image Selection Context Menu Item in Lua\nDESCRIPTION: Details the Lua table format for a 'select_image' item in the Context Menu. It requires an `id`, `type` as 'select_image', a `label`, a `callback_event` triggered on selection change, the `id` of the initially `selected` option, and an `options` table. Each entry in `options` must have an `id`, a `name`, and an `image` path (e.g., using 'package://').\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/explore/sandbox-game-mode/context-menu.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\n{\n\tid = \"id-of-item\",\n\ttype = \"select_image\",\n\tlabel = \"select the image\",\n\tcallback_event = \"SelectBalloonAsset\",\n\tselected = \"id-opt-1\",\n\toptions = {\n\t\t{ id = \"id-opt-01\", name = \"Opt 01\", image = \"package://your-package/01.jpg\" },\n\t\t{ id = \"id-opt-02\", name = \"Opt 02\", image = \"package://your-package/02.jpg\" },\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Values on Entities Globally (nanos.world Entity Values, Lua)\nDESCRIPTION: This snippet sets a synchronized value ('my_value') on an entity (e.g., my_prop) using SetValue with the 'sync' parameter set to true. When run server-side, this ensures the value is propagated and updated on all clients. It requires the target entity and takes a key, value, and sync flag. This mechanism is crucial for sharing state between server and all clients.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/essential-concepts.mdx#_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\n-- Sets a synchronized 'my_value' value to a Prop\\nmy_prop:SetValue(\"my_value\", 100, true)\n```\n\n----------------------------------------\n\nTITLE: Example Assets.toml Entry with Mesh Bounds (TOML)\nDESCRIPTION: This TOML snippet illustrates the structure of an entry in `Assets.toml` generated by the updated ADK tool. It shows how metadata for a static mesh (`SM_Cube`) includes its path and calculated bounds information (`origin`, `box_extent`, `sphere_radius`), which can be accessed via scripting.\nSOURCE: https://github.com/nanos-world/docs/blob/master/blog/2023-07-12-june.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n```toml title=Assets.toml\n[assets.static_meshes]\n\tSM_Cube = { path = \"Meshes/SM_Cube\", bounds = { origin = \"Vector(0.000, 0.000, 0.000)\", box_extent = \"Vector(50.000, 50.000, 50.000)\", sphere_radius = 86.602539 } }\n```\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Assets With Meta Data - nanos world - Lua\nDESCRIPTION: Demonstrates iterating over static mesh assets after the meta data update in nanos world. Assets.GetStaticMeshes returns a table with at least a key field and potentially custom meta data fields. The code retrieves multiple fields (key, my_meta_data, my_random_value) for each asset. Requires nanos world scripting API version 1.55 or later and proper asset meta data configuration.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/packages/compatibility-versions.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nfor _, asset in pairs(Assets.GetStaticMeshes(\\\"nanos-world\\\")) do\\n\\tlocal key = asset.key\\n\\tlocal my_meta_data = asset.my_meta_data\\n\\tlocal my_random_value = asset.my_random_value\\n\\t...\\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Vehicle Light Material Parameters Table - Markdown\nDESCRIPTION: This snippet lists required Unreal Engine vehicle material parameters for head and tail lights in table form. It explains each parameter's type, name, and description for correct setup in the vehicle's material instance. The table includes guidance for scalar and vector parameters representing different light states and colors.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/assets-modding/creating-assets/skeletal-meshes/vehicles-meshes.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Type | Parameter Name | Description |\n| :--- | :--- | :--- |\n| `Scalar` | **`LightsEnabled`** | A scalar which will be toggled `0` and `1` to turn ALL lights ON and OFF (e.g. when Vehicle Engine is ON/OFF) |\n| `Vector` | **`HeadLightsColor`** | The Head Lights color |\n| `Vector` | **`BrakeLightsColor`** | The Brake Lights color |\n| `Vector` | **`ReverseLightsColor`** | The Reverse Lights color |\n```\n\n----------------------------------------\n\nTITLE: Representing FSlateFontInfo Struct in Lua\nDESCRIPTION: Shows the Lua table structure equivalent to the Unreal Engine `FSlateFontInfo` struct, used for defining font properties in UI. It includes fields for font family path, material path, outline settings, typeface, size, letter spacing, skew, and monospacing properties.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/classes/blueprint.mdx#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\n{\n\t[\"FontFamily\"] = \"package://my-package/Client/my_font.ttf\", -- Special Path\n\t[\"FontMaterial\"] = \"my-asset-pack::M_MyMaterial\", -- Material Path\n\t[\"OutlineSettings\"] = {} -- FSlateBrushOutlineSettings\n\t[\"Typeface\"] = \"\", -- string\n\t[\"Size\"] = 24,\n\t[\"LetterSpacing\"] = 0,\n\t[\"SkewAmount\"] = 0.0,\n\t[\"Monospacing\"] = false,\n\t[\"MonospacedWidth\"] = 1.0\n}\n```\n\n----------------------------------------\n\nTITLE: Custom __newindex Metamethod for Player Class - nanos world - Lua\nDESCRIPTION: This code example demonstrates how to add a custom newindex method to the Player class, effectively overriding __newindex behavior. Whenever a property is set on a Player instance, a log message is generated showing the entity and property being set. Requires access to the Console.Log function and assumes Player is a valid class in the scripting scope.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/scripting/extending-classes.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nfunction Player:newindex(key, value)\n\tConsole.Log(\"Setting a %s value: %s = %s\", tostring(self), key, tostring(value))\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Package Via CLI - nanos world (bash/linux)\nDESCRIPTION: Executes the nanos world server shell script with CLI arguments to interactively add a new package called 'my-awesome-package'. It sets up the package structure after user prompts regarding title, author, and type. Requirement: nanos world dedicated server installed and in current path. Inputs: CLI command. Outputs: Prompts and folder structure. Linux variant.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/quick-start.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n```bash\n./NanosWorldServer.sh --cli add package my-awesome-package\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering a Themed Crosshair Preview - React JSX\nDESCRIPTION: This snippet demonstrates rendering a ThemedImage component to display available crosshairs with light and dark theme support. It accepts an alt text and specifies separate sources for light and dark modes. This is used for visualizing crosshair assets within the documentation, requiring the ThemedImage component and correct image paths.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/classes/base-classes/pickable.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ThemedImage\n    alt=\"All available Crosshairs\"\n    sources={{\n        light: '/img/docs/crosshairs_light.webp',\n        dark: '/img/docs/crosshairs_dark.webp',\n    }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Destroying an Entity in nanos world Lua\nDESCRIPTION: Illustrates destroying an entity via its Destroy method in Lua for nanos world. Requires an entity object (e.g., a Character) previously instantiated. The method triggers relevant destruction events and detaches any attached entities as per the engine's behavior. Input: the entity variable; Output: triggers destruction lifecycle of the entity. Limitation: Player objects cannot be destroyed using this method.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/scripting/classes-guide.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nmy_character:Destroy()\n```\n\n----------------------------------------\n\nTITLE: Starting Interactive CLI Session - Shell - Linux\nDESCRIPTION: This snippet shows how to start the server's CLI in interactive mode under Linux. The user must have permissions to execute NanosWorldServer.sh. Providing the --cli argument starts the CLI, ready for interactive package/asset management commands.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/server-manual/command-line-interface.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n```shell\n./NanosWorldServer.sh --cli\n```\n```\n\n----------------------------------------\n\nTITLE: Accessing Exported Globals in Another Package - nanos world Lua\nDESCRIPTION: Shows how to directly access tables and functions exported by another package in nanos world. This code assumes that the relevant values are already exported to the global environment. It uses Console.Log to display elements and results, with inputs being the global table and function and outputs being printed numeric results.\nSOURCE: https://github.com/nanos-world/docs/blob/master/blog/2022-12-31-december.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nConsole.Log(MyTable[1])\\n-- 123\\n\\nConsole.Log(DoSomething(456))\\n-- 579\n```\n\n----------------------------------------\n\nTITLE: Using WebUI as an Image Brush Material in Lua\nDESCRIPTION: This Lua snippet illustrates creating a `WebUI` instance (hidden) and using it as a brush for a native `Image` widget. It calls the Unreal `SetBrushFromMaterial` method via `CallBlueprintEvent`, passing the `WebUI` object which is automatically converted to a `MaterialInstance`. The image widget is then added to the viewport.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/classes/widget.mdx#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n```lua title=\"Client/Index.lua\" showLineNumbers\nlocal webui = WebUI(\"mywebui\", \"https://google.com\", WidgetVisibility.Hidden)\n\nlocal my_image = Widget(NativeWidget.Image)\nmy_image:CallBlueprintEvent(\"SetBrushFromMaterial\", webui)\nmy_image:AddToViewport()\n```\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Server Events on Client (Lua)\nDESCRIPTION: Demonstrates how a client-side script subscribes to a custom event named \"MyClientEvent\" using Events.SubscribeRemote(). When the server triggers this event, the provided callback function executes, logging the received text data. Requires the Events and Console static classes.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/essential-concepts.mdx#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\n-- Subscribes to a Remote Event on client side\nEvents.SubscribeRemote(\"MyClientEvent\", function(my_text)\n    Console.Log(\"Event received from server! \" .. my_text)\n    -- outputs \"Event received from server! hello nanos world!\"\nend)\n```\n\n----------------------------------------\n\nTITLE: Initializing a Static Mesh and Setting Default Material in nanos world (Lua)\nDESCRIPTION: This Lua snippet demonstrates how to spawn a 'StaticMesh' object (a cube) at a specific location and rotation, and then replaces its default material with the 'nanos-world::M_Default_Masked_Lit' material using the `SetMaterial` method. This prepares the mesh for further customization.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/tutorials-and-examples/painting-meshes.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- spawns a static mesh cube\nlocal my_cube = StaticMesh(Vector(300, 0, 100), Rotator(0, 45, 0), \"nanos-world::SM_Cube\")\n\n-- replaces it's materials with the nanos default Masked one\nmy_cube:SetMaterial(\"nanos-world::M_Default_Masked_Lit\")\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Map Data in TOML\nDESCRIPTION: Demonstrates how to define arbitrary key-value data within the `[custom_data]` section of a map package's `Package.toml` file. This data is loaded when the map package is active and can be retrieved on the server using the `Server.GetMapConfig()` function. Supports basic types like numbers, strings, and arrays.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/packages/packages-guide.md#_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n[custom_data]\n\tmy_key = 123\n\tmy_another_key = \"hello world!\"\n\tmy_array = [ \"whoa\", \"yeah\", 123 ]\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Methods on Inherited Classes (Lua)\nDESCRIPTION: Illustrates how to extend a Lua-inherited entity class with custom methods. The example attaches 'MyMethod' to 'MyNewClass', allowing instances to access additional features. Dependencies: Nanos World with class system enabled. Output: an augmented class with new behaviors accessible from instances.\nSOURCE: https://github.com/nanos-world/docs/blob/master/blog/2022-12-07-november.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nMyNewClass = Prop.Inherit(\"MyNewClass\")\\n\\nfunction MyNewClass:MyMethod()\\n    -- Do something\\nend\n```\n\n----------------------------------------\n\nTITLE: Changing Server Password via Console Command (Shell)\nDESCRIPTION: This console command allows server administrators to change the server's access password while the server is running. It is entered directly into the server console.\nSOURCE: https://github.com/nanos-world/docs/blob/master/blog/2024-02-28-february.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npassword\n```\n\n----------------------------------------\n\nTITLE: Listing Damageable Class Functions in nanos world Documentation (Markdown)\nDESCRIPTION: Lists all functions belonging to the Damageable class via the FunctionsDeclaration custom component. Used within the documentation system of nanos world, this tag expands to display all function documentation for inheritance and reference. Input parameters include the type (Class) and the class name (Damageable); no direct code logic is present.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/classes/base-classes/damageable.mdx#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n<FunctionsDeclaration type=\\\"Class\\\" name=\\\"Damageable\\\" />\n```\n\n----------------------------------------\n\nTITLE: Accessing Server and Player Information in JavaScript\nDESCRIPTION: Shows the structure of the globally available 'LoadingScreen' JavaScript object within the loading screen's context. This object provides access to key server details (IP, name, description, port) and the connecting player's information (nanos ID, username), which can be displayed on the loading screen.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/packages/loading-screen.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nvar LoadingScreen = {\n  server_ip,\n  server_name,\n  server_description,\n  server_port,\n  player_nanos_id,\n  player_nanos_username\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom __newindex Metamethod for Player in Lua\nDESCRIPTION: Defines a custom handler for the `__newindex` metamethod on the `Player` class by creating a function named `Player:newindex`. This function is triggered whenever an attempt is made to set a new key-value pair on a Player instance (e.g., `my_player.some_key = value`). This example logs the assignment using `Console.Log`.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/scripting/extending-classes.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nfunction Player:newindex(key, value)\n\tConsole.Log(\"Setting a %s value: %s = %s\", tostring(self), key, tostring(value))\nend\n```\n\n----------------------------------------\n\nTITLE: Using Custom __index for Automatic GetValue in Lua\nDESCRIPTION: Demonstrates a practical use case for overriding `__index` on the `Player` class. The `Player:index` function automatically calls `self:GetValue(key)`, enabling direct property access syntax (`local amazing_value = my_player.amazing_value`) to retrieve data stored on the entity via `GetValue`.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/scripting/extending-classes.md#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nfunction Player:index(key)\n    return self:GetValue(key)\nend\n\nlocal my_player = GetPlayerSomehow()\nlocal amazing_value = my_player.amazing_value\n```\n\n----------------------------------------\n\nTITLE: Setting Standing Locomotion Animation in Lua\nDESCRIPTION: This Lua code snippet demonstrates how to set the custom BlendSpace animation for a character's standing idle, walk, and run states. It calls the `SetAnimationIdleWalkRunStanding` method on a Character object, passing the animation asset path and a boolean to enable or disable the built-in 'Turn In Place' feature.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/assets-modding/creating-assets/animations/characters/character-locomotion-animations.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nCharacter.SetAnimationIdleWalkRunStanding(anim_path, enable_tip)\n```\n\n----------------------------------------\n\nTITLE: Listing Damageable Class Events in nanos world Documentation (Markdown)\nDESCRIPTION: Declares and enumerates all events available for the Damageable class using the EventsDeclaration component. This excerpt is purely structural and meant for generating readable documentation output about the class's events. It relies on downstream processing to populate event details based on the provided class name.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/classes/base-classes/damageable.mdx#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n<EventsDeclaration type=\\\"Class\\\" name=\\\"Damageable\\\" />\n```\n\n----------------------------------------\n\nTITLE: Logging into SteamCMD Anonymously (Bash)\nDESCRIPTION: Logs into the Steam servers anonymously using the `login anonymous` command within the SteamCMD console. This is typically sufficient for downloading public dedicated server files.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/server-manual/server-installation.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nSteam> login anonymous\n```\n\n----------------------------------------\n\nTITLE: Defining FMargin Unreal Struct with Lua Table\nDESCRIPTION: Describes the FMargin Unreal struct as a Lua table, representing UI margin properties with four numeric keys (Bottom, Left, Right, Top). Values specify margin thickness on each side, and are interpreted directly in UI or style contexts within Unreal Blueprints.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/classes/blueprint.mdx#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\n{\\n\\t[\\\"Bottom\\\"] = 0.0,\\n\\t[\\\"Left\\\"] = 0.0,\\n\\t[\\\"Right\\\"] = 0.0,\\n\\t[\\\"Top\\\"] = 0.0\\n}\n```\n\n----------------------------------------\n\nTITLE: Automated nanos world Server Installation on Linux (Shell)\nDESCRIPTION: Provides a single command-line instruction for Linux to automatically download/update the stable nanos world server using `steamcmd`. It sets the install directory within the user's home (`~/nanos-world-server`), logs in anonymously, updates the app (validating files), and quits SteamCMD.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/server-manual/server-installation.mdx#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nsteamcmd +force_install_dir ~/nanos-world-server +login anonymous +app_update 1936830 validate +quit\n```\n\n----------------------------------------\n\nTITLE: Setting Proning Locomotion Animation in Lua\nDESCRIPTION: This Lua code snippet assigns a custom BlendSpace animation for a character's proning idle, walk, and run states. It calls the `SetAnimationIdleWalkRunProning` method on a Character object, specifying the path to the animation asset. Note that this method does not have the `enable_tip` parameter.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/assets-modding/creating-assets/animations/characters/character-locomotion-animations.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nCharacter.SetAnimationIdleWalkRunProning(anim_path)\n```\n\n----------------------------------------\n\nTITLE: Alternative Native Event Subscription Syntax in Lua\nDESCRIPTION: Shows an alternative way to subscribe to native events by defining a named method (e.g., 'OnSpawn') on the class first, where `self` is implicitly available. Then, subscribe using the class name and the method reference (`MyNewClass.Subscribe(\"Spawn\", MyNewClass.OnSpawn)`).\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/scripting/inheriting-classes.md#_snippet_16\n\nLANGUAGE: lua\nCODE:\n```\nfunction MyNewClass:OnSpawn()\n    -- self is present is this context automatically\n    Console.Log(\"Spawned MyNewClass: %s\", tostring(self))\nend\n\nMyNewClass.Subscribe(\"Spawn\", MyNewClass.OnSpawn)\n```\n\n----------------------------------------\n\nTITLE: Building the React Application for Production\nDESCRIPTION: This command uses npm to run the 'build' script defined in 'package.json'. This process compiles and optimizes the React application, including JSX, CSS, and JavaScript, into static files suitable for deployment. The output is typically placed in a 'build' directory.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/getting-started/tutorials-and-examples/basic-hud-react.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Setting Server Installation Directory in SteamCMD\nDESCRIPTION: This command is executed within the SteamCMD interface. It sets the target directory where the nanos world server files will be downloaded. './nanos-world-server' specifies a relative path.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/tutorials-and-examples/hosting-server-4free-gcp.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nSteam> force_install_dir ./nanos-world-server\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Directory in SteamCMD (Bash)\nDESCRIPTION: Specifies the target directory where the nanos world server files will be installed using the `force_install_dir` command within the SteamCMD console. This example sets the directory to `C:/nanos-world-server/`.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/server-manual/server-installation.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nSteam> force_install_dir C:/nanos-world-server/\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Color Object in Lua\nDESCRIPTION: This Lua snippet demonstrates creating an instance of the `Color` struct. It initializes a local variable `grey_color` with a specific color defined by its Red (0.5), Green (0.5), Blue (0.5), and Alpha (1) components using the `Color` constructor.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/structs/color.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal grey_color = Color(0.5, 0.5, 0.5, 1)\n```\n\n----------------------------------------\n\nTITLE: Starting the React Development Server - Bash\nDESCRIPTION: This Bash command starts the React development server using npm. It launches a live-reloading local server, typically accessible at http://localhost:3000, allowing you to view and test your application during development.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/tutorials-and-examples/basic-hud-react.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Representing FVector4 Struct in Lua\nDESCRIPTION: Illustrates the Lua table structure required to represent an Unreal Engine `FVector4` struct when passing data between Lua and Blueprints. It includes 'W', 'X', 'Y', and 'Z' component fields.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/classes/blueprint.mdx#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\n{\n\t[\"W\"] = 0.0,\n\t[\"X\"] = 0.0,\n\t[\"Y\"] = 0.0,\n\t[\"Z\"] = 0.0\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Actor Static Functions Documentation\nDESCRIPTION: This custom component tag renders the section detailing static functions for the 'Actor' class. It identifies the target as a 'Class' named 'Actor', presumably fetching and displaying relevant static method information.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/classes/base-classes/actor.mdx#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<StaticFunctionsDeclaration type=\"Class\" name=\"Actor\" />\n```\n\n----------------------------------------\n\nTITLE: Placeholder for Math Library Examples in Lua\nDESCRIPTION: This snippet is a placeholder within the documentation, indicating that code examples demonstrating the usage of the 'math' standard library in Lua are planned but currently missing. It resides in the 'Examples' section.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/standard-libraries/math.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n```lua\nTODO Examples\n```\n```\n\n----------------------------------------\n\nTITLE: Example Client-Side Trace Usage Structure (Lua)\nDESCRIPTION: This snippet shows the structure for a client-side Lua script (`Client/Index.lua`) intended to demonstrate usage of the Trace class. However, the example implementation code is missing within the block.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/static-classes/trace.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n```lua title=\"Client/Index.lua\"\n\n```\n```\n\n----------------------------------------\n\nTITLE: Installing/Updating nanos world Server via SteamCMD (Bash)\nDESCRIPTION: Uses the `app_update` command within the SteamCMD console to download or update the nanos world dedicated server. It requires the application ID `1936830`.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/server-manual/server-installation.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nSteam> app_update 1936830\n```\n\n----------------------------------------\n\nTITLE: Example Client-Side Lua Script Placeholder\nDESCRIPTION: This commented-out snippet shows the intended location and file name (`Client/Index.lua`) for client-side Lua scripts interacting with the `Client` static class. Although empty, it serves as a structural example within the documentation.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/scripting-reference/static-classes/client.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n```lua title=\"Client/Index.lua\"\n\n```\n```\n\n----------------------------------------\n\nTITLE: Configuration File Meta Block Reference - nanos world TOML\nDESCRIPTION: Shows a reference to the standard format for the [meta] block header required by both Assets.toml and Package.toml. The block centralizes general configuration metadata, easing store integration and consistency between assets and packages. Requires referencing an up-to-date TOML file hosted on the public nanos world repository.\nSOURCE: https://github.com/nanos-world/docs/blob/master/blog/2022-12-31-december.md#_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\nreference\\nhttps://github.com/nanos-world/nanos-world-server/blob/main/_meta.toml\n```\n\n----------------------------------------\n\nTITLE: Example Console Output from WebUI Interaction\nDESCRIPTION: Shows the console output resulting from the interaction between the Lua and HTML/JavaScript WebUI example. The first line originates from the JavaScript `console.log` within the WebUI, and the second line comes from the Lua `Console.Log` upon receiving the 'MyAwesomeAnswer' event.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/scripting/user-interface.mdx#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n[WebUI]  Triggered! Hello! You are ready!\n[Script] Received an answer! Message: Hey there!\n```\n\n----------------------------------------\n\nTITLE: Defining Loading Screen Package Structure (folder-structure)\nDESCRIPTION: This snippet outlines the required directory and file structure for a custom nanos world loading screen package. The root should contain a 'Package.toml' (metadata), 'index.html' (main UI entry point), other static assets like 'style.css', and any additional resources. The presence and correct naming of 'index.html' is mandatory for the loading screen to function.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/packages/loading-screen.md#_snippet_0\n\nLANGUAGE: folder-structure\nCODE:\n```\nPackages/\\n└── my-loading-screen/\\n    ├── Package.toml\\n    ├── index.html\\n    ├── style.css\\n    └── ...\\n\n```\n\n----------------------------------------\n\nTITLE: Installing Multiarch Libraries for Box86 Compatibility - Bash\nDESCRIPTION: This snippet adds armhf architecture support and installs several 32-bit ARM libraries required for Box86 emulator operations on 64-bit systems. It is essential when running x86 code under emulation on ARM boards, as required for certain Nanos World server use cases. Each command requires sudo and may prompt for confirmation or additional package downloads.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/server-manual/server-linux-arm.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo dpkg --add-architecture armhf\\nsudo apt update\\nsudo apt install libc6:armhf libncurses5:armhf libstdc++6:armhf\n```\n\n----------------------------------------\n\nTITLE: Old Key Bindings Format - nanos world - Lua\nDESCRIPTION: Shows the earlier structure for key bindings returned by Input.GetScriptingKeyBindings or Input.GetGameKeyBindings in nanos world, mapping action names to a single key string. The table associates actions (e.g., Jump, Fire) to a corresponding key. Used prior to version 1.33 update.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/core-concepts/packages/compatibility-versions.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\n-- KeyBinding = Key\\n{\\n\\t\\\"Jump\\\" = \\\"Spacebar\\\",\\n\\t\\\"Crouch\\\" = \\\"Control\\\",\\n\\t\\\"Fire\\\" = \\\"LeftMouse\\\",\\n}\n```\n\n----------------------------------------\n\nTITLE: React Application Creation Success Output - Bash\nDESCRIPTION: This terminal output snippet illustrates the success message generated after creating the React application with create-react-app. It details next steps for starting, building, and testing the app, including command usages. This output helps verify successful project setup and provides essential navigation and management commands.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/getting-started/tutorials-and-examples/basic-hud-react.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nSuccess! Created basic-hud at F:\\\\Nanos\\\\Documentation\\\\basic-hud\nInside that directory, you can run several commands:\n\nnpm start\nStarts the development server.\n\nnpm run build\nBundles the app into static files for production.\n\nnpm test\nStarts the test runner.\n\nnpm run eject\nRemoves this tool and copies build dependencies, configuration files\nand scripts into the app directory. If you do this, you can’t go back!\n\nWe suggest that you begin by typing:\n\ncd basic-hud\nnpm start\n\nHappy hacking!\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Native vs Lua JSON Parser Performance\nDESCRIPTION: This text output shows benchmark results comparing the performance of the old Lua-based JSON parser against the new native C++ implementation. The native parser demonstrates significantly faster performance (approximately 10x) when parsing a 9.5 MB JSON file.\nSOURCE: https://github.com/nanos-world/docs/blob/master/blog/2022-11-09-october.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nBenchmark comparison: (9.5 MB JSON file)\nBenchmark 'Lua JSON Parser' (x10) took 9964ms.\nBenchmark 'Native JSON Parser' (x10) took 1057ms.\n```\n\n----------------------------------------\n\nTITLE: Building Static Docusaurus Website - Console\nDESCRIPTION: Generates static files for the website using Yarn, placing the output in the 'build' directory. Suited for production deployment to static hosting services. Prerequisites include all dependencies installed and code ready for production. Input is the terminal command; output is the 'build' directory with site assets.\nSOURCE: https://github.com/nanos-world/docs/blob/master/README.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Deploying Docusaurus Website to GitHub Pages via SSH - Console\nDESCRIPTION: Builds and deploys the static website to the gh-pages branch of a GitHub repository using Yarn and SSH authentication, with the GIT_USER environment variable specifying the GitHub username. Requires prior build artifacts, configured repository, and permissions for pushing to the remote. Input is the terminal command with personalized environment variable; output is an updated GitHub Pages deployment.\nSOURCE: https://github.com/nanos-world/docs/blob/master/README.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nGIT_USER=<Your GitHub username> USE_SSH=true yarn deploy\n```\n\n----------------------------------------\n\nTITLE: Importing Authority Markup Components in nanos world Docs (JavaScript/JSX)\nDESCRIPTION: Imports JSX components used for structuring API documentation and rendering semantic UI blocks. Required for injecting authority type badges (e.g., server-only, client-only) and for referencing classes and methods interactively within Markdown. Dependencies: @site/src/components/_nanos, Docusaurus environment with MDX support. No direct inputs/outputs; these imports must be present at the top of the MDX/JSX-Markdown file.\nSOURCE: https://github.com/nanos-world/docs/blob/master/versioned_docs/version-latest/core-concepts/scripting/authority-concepts.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Structs, BasicType, AuthorityType, Classes } from '@site/src/components/_nanos';\n```\n\n----------------------------------------\n\nTITLE: Generating Actor Class Header Documentation\nDESCRIPTION: This custom component tag is used within a markdown file to dynamically generate the header section for the 'Actor' class documentation. It specifies the documentation target type as 'Class' and the name as 'Actor'.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/classes/base-classes/actor.mdx#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<HeaderDeclaration type=\"Class\" name=\"Actor\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Example Code Section for Lua Math Library Documentation\nDESCRIPTION: This code snippet provides a placeholder for examples within the documentation of the Lua math standard library. It uses a fenced code block in Markdown, tagged as 'lua', to indicate that code examples relating to the math library will be placed here. There are currently no actual examples, as indicated by the 'TODO Examples' comment, highlighting the need for further completion. No dependencies are required at this stage, and it anticipates future input and output demonstration code relevant to standard math operations in Lua.\nSOURCE: https://github.com/nanos-world/docs/blob/master/docs/scripting-reference/standard-libraries/math.mdx#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nTODO Examples\n```"
  }
]