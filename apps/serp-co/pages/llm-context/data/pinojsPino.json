[
  {
    "owner": "pinojs",
    "repo": "pino",
    "content": "TITLE: Handling Level Change Events with Child Logger Filtering in Pino\nDESCRIPTION: Shows how to handle level change events while ignoring events from child loggers, which is useful for avoiding unwanted event triggers due to a known bug with child loggers.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/api.md#2025-04-20_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nconst logger = require('pino')()\nlogger.on('level-change', function (lvl, val, prevLvl, prevVal, instance) {\n  if (logger !== instance) {\n    return\n  }\n  console.log('%s (%d) was changed to %s (%d)', prevLvl, prevVal, lvl, val)\n})\nlogger.child({}); // trigger an event by creating a child instance, notice no console.log\nlogger.level = 'trace' // trigger event using actual value change, notice console.log\n```\n\n----------------------------------------\n\nTITLE: Creating Pino Logger with Multiple Transport Targets\nDESCRIPTION: Demonstrates how to configure a Pino logger to send different log levels to different transport destinations, allowing for sophisticated log routing based on severity.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/api.md#2025-04-20_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nconst pino = require('pino')\nconst transport = pino.transport({\n  targets: [{\n    level: 'info',\n    target: 'pino-pretty' // must be installed separately\n  }, {\n    level: 'trace',\n    target: 'pino/file',\n    options: { destination: '/path/to/store/logs' }\n  }]\n})\npino(transport)\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Redaction in Child Loggers in Pino\nDESCRIPTION: Shows how to override parent redaction settings in child loggers. This allows sensitive data to be automatically redacted from log output based on field names.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/api.md#2025-04-20_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst logger = require('pino')({ redact: ['hello'] })\nlogger.info({ hello: 'world' })\n// {\"level\":30,\"time\":1625794363403,\"pid\":67930,\"hostname\":\"x\",\"hello\":\"[Redacted]\"}\nconst child = logger.child({ foo: 'bar' }, { redact: ['foo'] })\nlogger.info({ hello: 'world' })\n// {\"level\":30,\"time\":1625794553558,\"pid\":67930,\"hostname\":\"x\",\"hello\":\"world\", \"foo\": \"[Redacted]\" }\n```\n\n----------------------------------------\n\nTITLE: Configuring Pino with Transport Streams\nDESCRIPTION: Shows how to create a Pino logger that routes logs to a worker thread using a transport. This approach allows sending logs to external processing tools while maintaining high performance.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/api.md#2025-04-20_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nconst pino = require('pino')\nconst transport = pino.transport({\n  target: 'some-transport',\n  options: { some: 'options for', the: 'transport' }\n})\npino(transport)\n```\n\n----------------------------------------\n\nTITLE: Creating Child Loggers with Pinned Key-Value Pairs in Pino\nDESCRIPTION: Demonstrates how to create a child logger with permanently pinned key-value pairs that will appear in every log line. Child loggers inherit the parent's log level at creation time.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/api.md#2025-04-20_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst child = logger.child({ MIX: {IN: 'always'} })\nchild.info('hello')\n// {\"level\":30,\"time\":1531258616689,\"msg\":\"hello\",\"pid\":64849,\"hostname\":\"x\",\"MIX\":{\"IN\":\"always\"}}\nchild.info('child!')\n// {\"level\":30,\"time\":1531258617401,\"msg\":\"child!\",\"pid\":64849,\"hostname\":\"x\",\"MIX\":{\"IN\":\"always\"}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pino Logger Stream Write Hook in JavaScript\nDESCRIPTION: Shows how to set up a streamWrite hook for Pino logger to manipulate stringified JSON log data before writing to transports.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/api.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst hooks = {\n  streamWrite (s) {\n    return s.replaceAll('sensitive-api-key', 'XXX')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Pino Logger Usage in JavaScript\nDESCRIPTION: Demonstrates how to create a Pino logger instance, log a message, and create a child logger with additional properties.\nSOURCE: https://github.com/pinojs/pino/blob/main/README.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst logger = require('pino')()\n\nlogger.info('hello world')\n\nconst child = logger.child({ a: 'property' })\nchild.info('hello child!')\n```\n\n----------------------------------------\n\nTITLE: Error Serialization in Pino Logging\nDESCRIPTION: Examples of how errors are serialized in Pino logs, both as the direct parameter and as a property of a merging object. Errors are automatically formatted with message and stack trace.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/api.md#2025-04-20_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nlogger.info(new Error(\"test\"))\n// {\"level\":30,\"time\":1531257618044,\"msg\":\"test\",\"stack\":\"...\",\"type\":\"Error\",\"pid\":55956,\"hostname\":\"x\"}\n\nlogger.info({ err: new Error(\"test\"), otherkey: 123 }, \"some text\")\n// {\"level\":30,\"time\":1531257618044,\"err\":{\"msg\": \"test\", \"stack\":\"...\",\"type\":\"Error\"},\"msg\":\"some text\",\"pid\":55956,\"hostname\":\"x\",\"otherkey\":123}\n```\n\n----------------------------------------\n\nTITLE: Integrating Pino with NestJS\nDESCRIPTION: TypeScript example showing how to integrate Pino with NestJS using the nestjs-pino package. Demonstrates importing the LoggerModule and injecting the Logger service into a controller.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/web.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NestFactory } from '@nestjs/core'\nimport { Controller, Get, Module } from '@nestjs/common'\nimport { LoggerModule, Logger } from 'nestjs-pino'\n\n@Controller()\nexport class AppController {\n  constructor(private readonly logger: Logger) {}\n\n  @Get()\n  getHello() {\n    this.logger.log('something')\n    return `Hello world`\n  }\n}\n\n@Module({\n  controllers: [AppController],\n  imports: [LoggerModule.forRoot()]\n})\nclass MyModule {}\n\nasync function bootstrap() {\n  const app = await NestFactory.create(MyModule)\n  await app.listen(3000)\n}\nbootstrap()\n```\n\n----------------------------------------\n\nTITLE: Configuring Logger Destinations in Pino\nDESCRIPTION: Examples of different ways to configure the destination for Pino logs, including stdout (default), files, stderr, and asynchronous logging. The destination parameter affects where log output is written.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/api.md#2025-04-20_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// pino.destination(1) by default\nconst stdoutLogger = require('pino')()\n\n// destination param may be in first position when no options:\nconst fileLogger = require('pino')( pino.destination('/log/path'))\n\n// use the stderr file handle to log to stderr:\nconst opts = {name: 'my-logger'}\nconst stderrLogger = require('pino')(opts, pino.destination(2))\n\n// automatic wrapping in pino.destination\nconst fileLogger = require('pino')('/log/path')\n\n// Asynchronous logging\nconst fileLogger = pino(pino.destination({ dest: '/log/path', sync: false }))\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Logging Levels in Pino\nDESCRIPTION: Demonstrates how to define and use custom logging levels in Pino logger.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/api.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst logger = pino({\n  customLevels: {\n    foo: 35\n  }\n})\nlogger.foo('hi')\n```\n\n----------------------------------------\n\nTITLE: Integrating Pino with Fastify\nDESCRIPTION: Example of using Pino logger with Fastify, which comes bundled with Pino by default. This demonstrates enabling the logger and using request.log for request-scoped logging.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/web.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst fastify = require('fastify')({\n  logger: true\n})\n\nfastify.get('/', async (request, reply) => {\n  request.log.info('something')\n  return { hello: 'world' }\n})\n\nfastify.listen({ port: 3000 }, (err) => {\n  if (err) {\n    fastify.log.error(err)\n    process.exit(1)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Pino Logger Instances with Custom Destinations\nDESCRIPTION: Demonstrates how to create Pino logger instances with different destination configurations using pino.destination(). Options include file output, stdout, buffer configuration, and synchronous/asynchronous logging modes.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/api.md#2025-04-20_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nconst pino = require('pino')\nconst logger = pino(pino.destination('./my-file'))\nconst logger2 = pino(pino.destination())\nconst logger3 = pino(pino.destination({\n  dest: './my-file',\n  minLength: 4096, // Buffer before writing\n  sync: false // Asynchronous logging, the default\n}))\nconst logger4 = pino(pino.destination({\n  dest: './my-file2',\n  sync: true // Synchronous logging\n}))\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Transport for Pino (JavaScript)\nDESCRIPTION: Shows how to create a custom transport for Pino using Node.js streams. This example transforms incoming JSON logs to uppercase and outputs them to STDOUT.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/transports.md#2025-04-20_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst { pipeline, Writable } = require('node:stream')\nconst split = require('split2')\n\nconst myTransportStream = new Writable({\n  write (chunk, enc, cb) {\n  // apply a transform and send to STDOUT\n  console.log(chunk.toString().toUpperCase())\n  cb()\n  }\n})\n\npipeline(process.stdin, split(JSON.parse), myTransportStream)\n```\n\n----------------------------------------\n\nTITLE: Integrating Pino with Express\nDESCRIPTION: Example showing how to use pino-http middleware with Express. This sets up Pino logging for all HTTP requests and demonstrates request-scoped logging.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/web.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst app = require('express')()\nconst pino = require('pino-http')()\n\napp.use(pino)\n\napp.get('/', function (req, res) {\n  req.log.info('something')\n  res.send('hello world')\n})\n\napp.listen(3000)\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-Stream Pino Logger\nDESCRIPTION: Demonstrates how to create a Pino logger that writes to multiple output streams, with each stream potentially handling different log levels. This enables routing logs to different destinations based on severity.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/api.md#2025-04-20_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nvar fs = require('node:fs')\nvar pino = require('pino')\nvar pretty = require('pino-pretty')\nvar streams = [\n  {stream: fs.createWriteStream('/tmp/info.stream.out')},\n  {stream: pretty() },\n  {level: 'debug', stream: fs.createWriteStream('/tmp/debug.stream.out')},\n  {level: 'fatal', stream: fs.createWriteStream('/tmp/fatal.stream.out')}\n]\n\nvar log = pino({\n  level: 'debug' // this MUST be set at the lowest level of the\n                 // destinations\n}, pino.multistream(streams))\n\nlog.debug('this will be written to /tmp/debug.stream.out')\nlog.info('this will be written to /tmp/debug.stream.out and /tmp/info.stream.out')\nlog.fatal('this will be written to /tmp/debug.stream.out, /tmp/info.stream.out and /tmp/fatal.stream.out')\n```\n\n----------------------------------------\n\nTITLE: Customizing Pino Logger Formatters in JavaScript\nDESCRIPTION: Illustrates how to configure custom formatters for Pino logger to modify the shape of log levels, bindings, and log objects.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/api.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst formatters = {\n  level (label, number) {\n    return { level: number }\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst formatters = {\n  bindings (bindings) {\n    return { pid: bindings.pid, hostname: bindings.hostname }\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst formatters = {\n  log (object) {\n    return object\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Pino Transport\nDESCRIPTION: Example of handling transport errors in Pino using event listeners.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/transports.md#2025-04-20_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\nconst transport = pino.transport({\n  target: './transport.js'\n})\n\ntransport.on('error', err => {\n  console.error('error caught', err)\n})\n\nconst log = pino(transport)\n```\n\n----------------------------------------\n\nTITLE: Using Pino Multi-Stream with Deduplication\nDESCRIPTION: Shows how to configure a Pino logger with multiple streams and deduplication enabled, which sends logs only to the stream with the highest level. This example routes errors to stderr and other logs to stdout.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/api.md#2025-04-20_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nvar pino = require('pino')\nvar multistream = pino.multistream\nvar streams = [\n  {level: 'debug', stream: process.stdout},\n  {level: 'error', stream: process.stderr},\n]\n\nvar opts = {\n    levels: {\n        silent: Infinity,\n        fatal: 60,\n        error: 50,\n        warn: 50,\n        info: 30,\n        debug: 20,\n        trace: 10\n    },\n    dedupe: true,\n}\n\nvar log = pino({\n  level: 'debug' // this MUST be set at the lowest level of the\n                // destinations\n}, multistream(streams, opts))\n\nlog.debug('this will be written ONLY to process.stdout')\nlog.info('this will be written ONLY to process.stdout')\nlog.error('this will be written ONLY to process.stderr')\nlog.fatal('this will be written ONLY to process.stderr')\n```\n\n----------------------------------------\n\nTITLE: Initializing Pino Logger with pino-pretty Transport in JavaScript\nDESCRIPTION: This snippet demonstrates how to instantiate a Pino logger with the 'pino-pretty' transport target. It sets up the logger to use prettified output instead of the default JSON format.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/pretty.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst pino = require('pino')\nconst logger = pino({\n  transport: {\n    target: 'pino-pretty'\n  },\n})\n\nlogger.info('hi')\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Log Level for Child Loggers in Pino\nDESCRIPTION: Shows how to create a child logger with a different log level than its parent. This allows for more granular control over logging verbosity in different parts of an application.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/api.md#2025-04-20_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst logger = pino()\nlogger.debug('nope') // will not log, since default level is info\nconst child = logger.child({foo: 'bar'}, {level: 'debug'})\nchild.debug('debug!') // will log as the `level` property set the level to debug\n```\n\n----------------------------------------\n\nTITLE: Transport Configuration Examples\nDESCRIPTION: Various examples of configuring transports with Pino, including multiple targets and custom levels.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/transports.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst pino = require('pino')\nconst transport = pino.transport({\n  target: 'some-file-transport',\n  options: { destination: '/dev/null' }\n})\npino(transport)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst pino = require('pino')\nconst transport = pino.transport({\n  targets: [\n    { target: '/absolute/path/to/my-transport.mjs', level: 'error' },\n    { target: 'some-file-transport', options: { destination: '/dev/null' }}\n  ]\n})\npino(transport)\n```\n\n----------------------------------------\n\nTITLE: Configuring Pino with Multiple Targets Including Pipelines\nDESCRIPTION: Demonstrates a complex Pino configuration that combines multiple transport targets with different log levels and a processing pipeline, allowing for sophisticated log routing and transformation.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/api.md#2025-04-20_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nconst pino = require('pino')\nconst transport = pino.transport({\n  targets: [{\n    level: 'info',\n    target: 'pino-pretty' // must be installed separately\n  }, {\n    level: 'trace',\n    target: 'pino/file',\n    options: { destination: '/path/to/store/logs' }\n  }, {\n    pipeline: [{\n      target: 'pino-syslog' // must be installed separately\n    }, {\n      target: 'pino-socket' // must be installed separately\n    }]\n  }\n  ]\n})\npino(transport)\n```\n\n----------------------------------------\n\nTITLE: Forwarding Pino logs to Grafana Loki using pino-loki\nDESCRIPTION: Demonstrates using the pino-loki transport to forward logs from a Pino-enabled application to Grafana Loki. Shows both CLI usage and usage as a dedicated worker in a Pino v7+ application.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/transports.md#2025-04-20_snippet_35\n\nLANGUAGE: sh\nCODE:\n```\nnode app.js | pino-loki --hostname localhost:3100 --labels='{ \"application\": \"my-application\"}' --user my-username --password my-password\n```\n\nLANGUAGE: js\nCODE:\n```\nconst pino = require('pino')\nconst transport = pino.transport({\n  target: 'pino-loki',\n  options: { host: 'localhost:3100' }\n})\npino(transport)\n```\n\n----------------------------------------\n\nTITLE: Implementing Mixin Function in Pino Logger\nDESCRIPTION: Examples showing different ways to use the mixin function for adding custom properties to log messages.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/api.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlet n = 0\nconst logger = pino({\n  mixin () {\n    return { line: ++n }\n  }\n})\nlogger.info('hello')\nlogger.info('world')\n```\n\n----------------------------------------\n\nTITLE: Handling Asynchronous Transport Startup in Pino (JavaScript)\nDESCRIPTION: Demonstrates how to properly handle process exit when using asynchronous transports to ensure logs are delivered before the process terminates.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/transports.md#2025-04-20_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst pino = require('pino')\nconst transport = pino.transport({\n  targets: [\n    { target: '/absolute/path/to/my-transport.mjs', level: 'error' },\n    { target: 'some-file-transport', options: { destination: '/dev/null' } }\n  ]\n})\nconst logger = pino(transport)\n\nlogger.info('hello')\n\n// If logs are printed before the transport is ready when process.exit(0) is called,\n// they will be lost.\ntransport.on('ready', function () {\n  process.exit(0)\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Bundler Path Overrides for Pino\nDESCRIPTION: Example of injecting the required __bundlerPathsOverrides configuration into the globalThis object. This maps essential Pino files to their relative paths for proper bundling. Required for any bundler to correctly handle Pino's Worker Threads architecture.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/bundling.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Inject this using your bundle plugin\nglobalThis.__bundlerPathsOverrides = {\n  'thread-stream-worker': pinoWebpackAbsolutePath('./thread-stream-worker.js')\n  'pino/file': pinoWebpackAbsolutePath('./pino-file.js'),\n  'pino-worker': pinoWebpackAbsolutePath('./pino-worker.js'),\n  'pino-pretty': pinoWebpackAbsolutePath('./pino-pretty.js'),\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Serializers in Child Loggers in Pino\nDESCRIPTION: Demonstrates how to override parent serializers in child loggers. Serializers transform specific properties before they are logged, allowing for custom formatting of log data.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/api.md#2025-04-20_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst logger = require('pino')()\nlogger.info({test: 'will appear'})\n// {\"level\":30,\"time\":1531259759482,\"pid\":67930,\"hostname\":\"x\",\"test\":\"will appear\"}\nconst child = logger.child({}, {serializers: {test: () => `child-only serializer`}})\nchild.info({test: 'will be overwritten'})\n// {\"level\":30,\"time\":1531259784008,\"pid\":67930,\"hostname\":\"x\",\"test\":\"child-only serializer\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring Asynchronous Logging with Pino in JavaScript\nDESCRIPTION: Demonstrates how to initialize Pino logger with asynchronous logging configuration. The code shows setting up a file destination with buffering and async writing enabled through the pino.destination() function.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/asynchronous.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst pino = require('pino')\nconst logger = pino(pino.destination({\n  dest: './my-file', // omit for stdout\n  minLength: 4096, // Buffer before writing\n  sync: false // Asynchronous logging\n}))\n```\n\n----------------------------------------\n\nTITLE: Implementing Log File Reopening in Pino for Log Rotation\nDESCRIPTION: Code example showing how to set up signal handlers to reopen log files after rotation, used when copytruncate is not available.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/help.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// write the process pid to a well known location for later\nconst fs = require('node:fs')\nfs.writeFileSync('/var/run/myapp.pid', process.pid)\n\nconst dest = pino.destination('/log/file')\nconst logger = require('pino')(dest)\nprocess.on('SIGHUP', () => dest.reopen())\n```\n\n----------------------------------------\n\nTITLE: Configuring Pino Logger Hooks in JavaScript\nDESCRIPTION: Demonstrates how to configure custom hook functions for Pino logger, specifically the logMethod hook to manipulate log method parameters.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/api.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst hooks = {\n  logMethod (inputArgs, method, level) {\n    if (inputArgs.length >= 2) {\n      const arg1 = inputArgs.shift()\n      const arg2 = inputArgs.shift()\n      return method.apply(this, [arg2, arg1, ...inputArgs])\n    }\n    return method.apply(this, inputArgs)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Key Removal Redaction in Pino\nDESCRIPTION: Demonstrates how to completely remove sensitive keys and their values from the log output using the remove option.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/redaction.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst logger = require('.')({\\n  redact: {\\n    paths: ['key', 'path.to.key', 'stuff.thats[*].secret'],\\n    remove: true\\n  }\\n})\\n\\nlogger.info({\\n  key: 'will be redacted',\\n  path: {\\n    to: {key: 'sensitive', another: 'thing'}\\n  },\\n  stuff: {\\n    thats: [\\n      {secret: 'will be redacted', logme: 'will be logged'},\\n      {secret: 'as will this', logme: 'as will this'}\\n    ]\\n  }\\n})\n```\n\n----------------------------------------\n\nTITLE: Integrating Pino with Restify\nDESCRIPTION: Example showing how to use restify-pino-logger middleware with Restify. Demonstrates setup and request-scoped logging.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/web.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst server = require('restify').createServer({name: 'server'})\nconst pino = require('restify-pino-logger')()\n\nserver.use(pino)\n\nserver.get('/', function (req, res) {\n  req.log.info('something')\n  res.send('hello world')\n})\n\nserver.listen(3000)\n```\n\n----------------------------------------\n\nTITLE: Using Only Custom Levels in Pino Logger\nDESCRIPTION: Shows how to configure Pino to use only custom logging levels while omitting default levels.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/api.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst logger = pino({\n  customLevels: {\n    foo: 35\n  },\n  useOnlyCustomLevels: true,\n  level: 'foo'\n})\nlogger.foo('hi')\nlogger.info('hello') // Will throw an error saying info is not found in logger object\n```\n\n----------------------------------------\n\nTITLE: Using Message Prefixes with Child Loggers in Pino\nDESCRIPTION: Demonstrates how to add message prefixes to loggers, which prepend text to every log message. Child loggers can have their own prefixes that get appended to parent prefixes.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/api.md#2025-04-20_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst logger = pino({\n  msgPrefix: '[HTTP] '\n})\nlogger.info('got new request!')\n// >  [HTTP] got new request!\n\nconst child = logger.child({avengers: 'assemble'}, {msgPrefix: '[Proxy] '})\nchild.info('message proxied!')\n// >  [HTTP] [Proxy] message proxied!\n```\n\n----------------------------------------\n\nTITLE: Integrating Pino with Koa\nDESCRIPTION: Example of using koa-pino-logger middleware with Koa. Shows how to set up Pino logging and access the logger through the context object.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/web.md#2025-04-20_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst Koa = require('koa')\nconst app = new Koa()\nconst pino = require('koa-pino-logger')()\n\napp.use(pino)\n\napp.use((ctx) => {\n  ctx.log.info('something else')\n  ctx.body = 'hello world'\n})\n\napp.listen(3000)\n```\n\n----------------------------------------\n\nTITLE: Transport Pipeline Implementation\nDESCRIPTION: Example of creating a transport pipeline that transforms log entries using Node.js streams.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/transports.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport build from 'pino-abstract-transport'\nimport { pipeline, Transform } from 'node:stream'\nexport default async function (options) {\n  return build(function (source) {\n    const myTransportStream = new Transform({\n      autoDestroy: true,\n      objectMode: true,\n      transform (chunk, enc, cb) {\n        chunk.service = 'pino'\n        this.push(`${JSON.stringify(chunk)}\\n`)\n        cb()\n      }\n    })\n    pipeline(source, myTransportStream, () => {})\n    return myTransportStream\n  }, {\n    enablePipelining: true\n  })\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport pino from 'pino'\n\nconst logger = pino({\n  transport: {\n    pipeline: [{\n      target: './my-transform.js'\n    }, {\n      target: 'pino/file',\n      options: { destination: 1 }\n    }]\n  }\n})\n\nlogger.info('hello world')\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Pino Transport Pipeline\nDESCRIPTION: Shows how to create a pipeline of transports to transform log lines before sending them. This allows for pre-processing logs through multiple stages before final output.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/api.md#2025-04-20_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nconst pino = require('pino')\nconst transport = pino.transport({\n  pipeline: [{\n    target: 'pino-syslog' // must be installed separately\n  }, {\n    target: 'pino-socket' // must be installed separately\n  }]\n})\npino(transport)\n```\n\n----------------------------------------\n\nTITLE: Integrating Pino with Hono\nDESCRIPTION: TypeScript example showing how to integrate Pino with the Hono framework. Demonstrates extending the context variables with a logger and adapting pino-http middleware for Hono's middleware pattern.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/web.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpBindings, serve } from '@hono/node-server';\nimport { Hono } from 'hono';\nimport { requestId } from 'hono/request-id';\nimport { pino } from 'pino';\nimport { pinoHttp } from 'pino-http';\n\ndeclare module 'hono' {\n  interface ContextVariableMap {\n    logger: pino.Logger;\n  }\n}\n\nconst app = new Hono<{ Bindings: HttpBindings }>();\napp.use(requestId());\napp.use(async (c, next) => {\n  // pass hono's request-id to pino-http\n  c.env.incoming.id = c.var.requestId;\n\n  // map express style middleware to hono\n  await new Promise<void>((resolve) => pinoHttp()(c.env.incoming, c.env.outgoing, () => resolve()));\n\n  c.set('logger', c.env.incoming.log);\n\n  await next();\n});\n\napp.get('/', (c) => {\n  c.var.logger.info('something');\n\n  return c.text('Hello Node.js!');\n});\n\nserve(app);\n```\n\n----------------------------------------\n\nTITLE: Using Fingers Crossed Transport with Pino (JavaScript)\nDESCRIPTION: Demonstrates how to use the fingers-crossed transport, which buffers logs until a specific log level is reached, then releases the buffered logs.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/transports.md#2025-04-20_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst pino = require('pino');\nconst { default: fingersCrossed, enable } = require('@macfja/pino-fingers-crossed')\n\nconst logger = pino(fingersCrossed());\n\nlogger.info('Will appear immedialty')\nlogger.error('Will appear immedialty')\n\nlogger.setBindings({ [enable]: 50 })\nlogger.info('Will NOT appear immedialty')\nlogger.info('Will NOT appear immedialty')\nlogger.error('Will appear immedialty as well as the 2 previous messages') // error log are level 50\nlogger.info('Will NOT appear')\nlogger.info({ [enable]: false }, 'Will appear immedialty')\nlogger.info('Will NOT appear')\n```\n\n----------------------------------------\n\nTITLE: Configuring Pretty Logs Transport in Pino (JavaScript)\nDESCRIPTION: Shows how to use the pino-pretty transport to create human-readable logs. This example redirects the prettified logs to a specific file descriptor.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/transports.md#2025-04-20_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst pino = require('pino')\nconst transport = pino.transport({\n  target: 'pino-pretty',\n  options: { destination: 1 } // use 2 for stderr\n})\npino(transport)\n```\n\n----------------------------------------\n\nTITLE: Configuring Seq Transport in Pino\nDESCRIPTION: JavaScript setup for forwarding Pino logs to Seq using a dedicated transport worker.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/transports.md#2025-04-20_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nconst pino = require('pino')\nconst transport = pino.transport({\n  target: '@autotelic/pino-seq-transport',\n  options: { serverUrl: 'http://localhost:5341' }\n})\npino(transport)\n```\n\n----------------------------------------\n\nTITLE: Configuring Pino Logger with pino-pretty Options in JavaScript\nDESCRIPTION: This snippet shows how to initialize a Pino logger with 'pino-pretty' transport and additional options. It demonstrates setting the 'colorize' option to true, which enables colored output in the prettified logs.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/pretty.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst pino = require('pino')\nconst logger = pino({\n  transport: {\n    target: 'pino-pretty',\n    options: {\n      colorize: true\n    }\n  }\n})\n\nlogger.info('hi')\n```\n\n----------------------------------------\n\nTITLE: Configuring Pino to Log to Multiple Streams\nDESCRIPTION: Setting up Pino to log to different streams based on log level, targeting stderr for errors and stdout for other levels.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/help.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst pino = require('pino')\nvar streams = [\n  {level: 'debug', stream: process.stdout},\n  {level: 'error', stream: process.stderr},\n  {level: 'fatal', stream: process.stderr}\n]\n\nconst logger = pino({\n  name: 'my-app',\n  level: 'debug', // must be the lowest level of all streams\n}, pino.multistream(streams))\n```\n\n----------------------------------------\n\nTITLE: Configuring Pino with asObjectBindingsOnly Option in Browser\nDESCRIPTION: Initializes Pino with the asObjectBindingsOnly option, which keeps the message arguments unformatted to allow browser dev tools to handle formatting.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/browser.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst pino = require('pino')({browser: {asObjectBindingsOnly: true}})\n```\n\n----------------------------------------\n\nTITLE: Configuring Pino Logger for Optimal stdout Performance\nDESCRIPTION: This code example shows the recommended default configuration for maximizing Pino's logging performance to stdout. The default configuration is usually the most performant option unless there are specific logging requirements.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/help.md#2025-04-20_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst log = require('pino')();\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Level Comparison in Pino Logger\nDESCRIPTION: Examples showing how to customize level ordering in Pino logger using either 'DESC' ordering or a custom comparison function.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/api.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst logger = pino({\n  levelComparison: 'DESC',\n  customLevels: {\n    foo: 20, // `foo` is more valuable than `bar`\n    bar: 10\n  },\n})\n\n// OR\n\nconst logger = pino({\n  levelComparison: function(current, expected) {\n    return current >= expected;\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Pino with Level-Specific Write Functions in Browser\nDESCRIPTION: Configures Pino with different write functions for specific log levels, allowing for customized handling of logs based on their severity.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/browser.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst pino = require('pino')({\n  browser: {\n    write: {\n      info: function (o) {\n        //process info log object\n      },\n      error: function (o) {\n        //process error log object\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Path-based Redaction in Pino\nDESCRIPTION: Demonstrates basic redaction using an array of paths to sensitive data. Supports nested objects, arrays, and hyphenated property names.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/redaction.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst logger = require('.')({\\n  redact: ['key', 'path.to.key', 'stuff.thats[*].secret', 'path[\"with-hyphen\"]']\\n})\\n\\nlogger.info({\\n  key: 'will be redacted',\\n  path: {\\n    to: {key: 'sensitive', another: 'thing'}\\n  },\\n  stuff: {\\n    thats: [\\n      {secret: 'will be redacted', logme: 'will be logged'},\\n      {secret: 'as will this', logme: 'as will this'}\\n    ]\\n  }\\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Mixin Merge Strategies in Pino\nDESCRIPTION: Examples demonstrating different mixin merge strategies for handling property conflicts in log messages.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/api.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst logger = pino({\n    mixin() {\n        return { tag: 'docker' }\n    },\n    // mixinMergeStrategy(mergeObject, mixinObject) {\n    //     return Object.assign(mixinMeta, mergeObject)\n    // }\n})\n\nlogger.info({\n  tag: 'local'\n}, 'Message')\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Transmission of Logs in Browser\nDESCRIPTION: Sets up Pino to transmit logs remotely based on log level, with custom handling for different severity levels using the transmit.send function.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/browser.md#2025-04-20_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst pino = require('pino')({\n  browser: {\n    transmit: {\n      level: 'warn',\n      send: function (level, logEvent) {\n        if (level === 'warn') {\n          // maybe send the logEvent to a separate endpoint\n          // or maybe analyze the messages further before sending\n        }\n        // we could also use the `logEvent.level.value` property to determine\n        // numerical value\n        if (logEvent.level.value >= 50) { // covers error and fatal\n\n          // send the logEvent somewhere\n        }\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Integrating Pino within a Framework\nDESCRIPTION: Shows how to make Pino aware of the calling script when embedding or integrating it within a framework, using the get-caller-file package to identify the caller.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/api.md#2025-04-20_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nconst pino = require('pino')\nconst getCaller = require('get-caller-file')\n\nmodule.exports = function build () {\n  const logger = pino({\n    transport: {\n      caller: getCaller(),\n      target: 'transport',\n      options: { destination: './destination' }\n    }\n  })\n  return logger\n}\n```\n\n----------------------------------------\n\nTITLE: Using Pino Metadata Symbol to Access Log Details\nDESCRIPTION: Example of using Symbol.for('pino.metadata') to access log metadata like level, message, object, and timestamp after logging. This feature allows accessing the last logged information from the destination object.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/api.md#2025-04-20_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst dest = pino.destination('/dev/null')\ndest[Symbol.for('pino.metadata')] = true\nconst logger = pino(dest)\nlogger.info({a: 1}, 'hi')\nconst { lastMsg, lastLevel, lastObj, lastTime} = dest\nconsole.log(\n  'Logged message \"%s\" at level %d with object %o at time %s',\n  lastMsg, lastLevel, lastObj, lastTime\n) // Logged message \"hi\" at level 30 with object { a: 1 } at time 1531590545089\n```\n\n----------------------------------------\n\nTITLE: Sending Pino logs to Logflare using pino-logflare\nDESCRIPTION: Demonstrates using the pino-logflare transport to send logs from a Pino-enabled application to a Logflare source. Requires specifying the Logflare key and source.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/transports.md#2025-04-20_snippet_33\n\nLANGUAGE: sh\nCODE:\n```\n$ node index.js | pino-logflare --key YOUR_KEY --source YOUR_SOURCE\n```\n\n----------------------------------------\n\nTITLE: Abstract Transport Implementation with CommonJS\nDESCRIPTION: Example of implementing a transport using pino-abstract-transport with Node.js streams in CommonJS.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/transports.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict'\n\nconst build = require('pino-abstract-transport')\nconst SonicBoom = require('sonic-boom')\n\nmodule.exports = function (opts) {\n  const destination = new SonicBoom({ dest: opts.destination || 1, sync: false })\n  return build(function (source) {\n    source.pipe(destination)\n  }, {\n    close (err, cb) {\n      destination.end()\n      destination.on('close', cb.bind(null, err))\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Pino with Hapi\nDESCRIPTION: Example of using Pino with Hapi framework by registering the hapi-pino plugin. Shows multiple ways to access the logger: through request.log, request.logger, server.logger, and server.log.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/web.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict'\n\nconst Hapi = require('@hapi/hapi')\nconst Pino = require('hapi-pino');\n\nasync function start () {\n  // Create a server with a host and port\n  const server = Hapi.server({\n    host: 'localhost',\n    port: 3000\n  })\n\n  // Add the route\n  server.route({\n    method: 'GET',\n    path: '/',\n    handler: async function (request, h) {\n      // request.log is HAPI's standard way of logging\n      request.log(['a', 'b'], 'Request into hello world')\n\n      // a pino instance can also be used, which will be faster\n      request.logger.info('In handler %s', request.path)\n\n      return 'hello world'\n    }\n  })\n\n  await server.register(Pino)\n\n  // also as a decorated API\n  server.logger.info('another way for accessing it')\n\n  // and through Hapi standard logging system\n  server.log(['subsystem'], 'third way for accessing it')\n\n  await server.start()\n\n  return server\n}\n\nstart().catch((err) => {\n  console.log(err)\n  process.exit(1)\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Child Logger in Pino\nDESCRIPTION: Example showing how to create a child logger to add module-specific context to logs. This snippet imports a parent logger and creates a child logger with a 'module' property set to 'foo'.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/child-loggers.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict'\n// imports a pino logger instance of `require('pino')()`\nconst parentLogger = require('./lib/logger')\nconst log = parentLogger.child({module: 'foo'})\n\nfunction doSomething () {\n  log.info('doSomething invoked')\n}\n\nmodule.exports = {\n  doSomething\n}\n```\n\n----------------------------------------\n\nTITLE: Abstract Transport Implementation with ESM\nDESCRIPTION: Example of implementing a transport using pino-abstract-transport with async iterators in ESM.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/transports.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport build from 'pino-abstract-transport'\nimport SonicBoom from 'sonic-boom'\nimport { once } from 'events'\n\nexport default async function (opts) {\n  const destination = new SonicBoom({ dest: opts.destination || 1, sync: false })\n  await once(destination, 'ready')\n\n  return build(async function (source) {\n    for await (let obj of source) {\n      const toDrain = !destination.write(obj.msg.toUpperCase() + '\\n')\n      if (toDrain) {\n        await once(destination, 'drain')\n      }\n    }\n  }, {\n    async close (err) {\n      destination.end()\n      await once(destination, 'close')\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Pino Log Levels as Text Labels\nDESCRIPTION: Using Pino's formatters option to display log levels as text strings rather than numeric values in JSON output.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/help.md#2025-04-20_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst pino = require('pino')\n\nconst log = pino({\n  formatters: {\n    level: (label) => {\n      return {\n        level: label\n      }\n    }\n  }\n})\n\nlog.info('message')\n\n// {\"level\":\"info\",\"time\":1661632832200,\"pid\":18188,\"hostname\":\"foo\",\"msg\":\"message\"}\n```\n\n----------------------------------------\n\nTITLE: Sending Pino logs to a specified URL using pino-http-send\nDESCRIPTION: Shows how to use the pino-http-send transport to batch logs from a Pino-enabled application and send them to a specified URL.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/transports.md#2025-04-20_snippet_30\n\nLANGUAGE: sh\nCODE:\n```\n$ node app.js | pino-http-send -u http://localhost:8080/logs\n```\n\n----------------------------------------\n\nTITLE: Basic Transport Implementation in ESM\nDESCRIPTION: Simple example of implementing a basic transport module that returns a writable stream using ESM syntax.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/transports.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWriteStream } from 'node:fs'\n\nexport default (options) => {\n  return createWriteStream(options.destination)\n}\n```\n\n----------------------------------------\n\nTITLE: Custom logMethod Hook for Parameter Handling in Pino\nDESCRIPTION: Implementation of a custom logMethod hook to modify how multiple parameters are handled in Pino. This example concatenates the first two parameters.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/api.md#2025-04-20_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst pinoOptions = {\n  hooks: { logMethod }\n}\n\nfunction logMethod (args, method) {\n  if (args.length === 2) {\n    args[0] = `${args[0]} %j`\n  }\n  method.apply(this, args)\n}\n\nconst logger = pino(pinoOptions)\n```\n\n----------------------------------------\n\nTITLE: Running Pino with Transports in systemd Services\nDESCRIPTION: Configuration pattern for systemd service files to properly pipe Pino logs through transport modules.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/help.md#2025-04-20_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nExecStart=/bin/sh -c '/path/to/node app.js | pino-transport'\n```\n\n----------------------------------------\n\nTITLE: Handling Level Change Events in Pino Logger\nDESCRIPTION: Demonstrates how to listen for level change events on a logger instance. The event provides details about the old and new log levels, allowing for custom reactions to log level changes.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/api.md#2025-04-20_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nconst logger = require('pino')()\nlogger.on('level-change', (lvl, val, prevLvl, prevVal) => {\n  console.log('%s (%d) was changed to %s (%d)', prevLvl, prevVal, lvl, val)\n})\nlogger.level = 'trace' // trigger event\n```\n\n----------------------------------------\n\nTITLE: Custom Censoring in Pino Redaction\nDESCRIPTION: Shows how to customize the redaction censor text using an object configuration with a custom censor message.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/redaction.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst logger = require('.')({\\n  redact: {\\n    paths: ['key', 'path.to.key', 'stuff.thats[*].secret'],\\n    censor: '**GDPR COMPLIANT**'\\n  }\\n})\\n\\nlogger.info({\\n  key: 'will be redacted',\\n  path: {\\n    to: {key: 'sensitive', another: 'thing'}\\n  },\\n  stuff: {\\n    thats: [\\n      {secret: 'will be redacted', logme: 'will be logged'},\\n      {secret: 'as will this', logme: 'as will this'}\\n    ]\\n  }\\n})\n```\n\n----------------------------------------\n\nTITLE: Sending Pino logs over a message bus using pino-mq\nDESCRIPTION: Shows how to use the pino-mq transport to send logs from a Pino-enabled application over a message bus using JSON serialization. Demonstrates usage with command-line options and a configuration file.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/transports.md#2025-04-20_snippet_36\n\nLANGUAGE: sh\nCODE:\n```\nnode app.js | pino-mq -u \"amqp://guest:guest@localhost/\" -q \"pino-logs\"\n```\n\nLANGUAGE: sh\nCODE:\n```\nnode app.js | pino-mq -c pino-mq.json\n```\n\n----------------------------------------\n\nTITLE: Creating Directory for File Transport in Pino (JavaScript)\nDESCRIPTION: Shows how to configure the pino/file transport to create the destination directory if it doesn't exist using the mkdir option.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/transports.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst pino = require('pino')\nconst transport = pino.transport({\n  target: 'pino/file',\n  options: { destination: '/path/to/file', mkdir: true }\n})\npino(transport)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Bindings from Pino Loggers\nDESCRIPTION: Shows how to retrieve the current bindings (pinned key-value pairs) from a logger instance. This returns all bindings inherited from parent loggers plus any added at the current level.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/api.md#2025-04-20_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nconst child = logger.child({ foo: 'bar' })\nconsole.log(child.bindings())\n// { foo: 'bar' }\nconst anotherChild = child.child({ MIX: { IN: 'always' } })\nconsole.log(anotherChild.bindings())\n// { foo: 'bar', MIX: { IN: 'always' } }\n```\n\n----------------------------------------\n\nTITLE: Sending Pino logs to Graylog using pino-gelf\nDESCRIPTION: Shows how to use the pino-gelf transport to transform Pino logs into GELF format and send them to a remote Graylog server via UDP.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/transports.md#2025-04-20_snippet_28\n\nLANGUAGE: sh\nCODE:\n```\n$ node your-app.js | pino-gelf log\n```\n\n----------------------------------------\n\nTITLE: Logging with Message String in Pino\nDESCRIPTION: Example showing how to log a simple message string with Pino. The message is included in the JSON output under the 'msg' key.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/api.md#2025-04-20_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nlogger.info('hello world')\n// {\"level\":30,\"time\":1531257112193,\"msg\":\"hello world\",\"pid\":55956,\"hostname\":\"x\"}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Pino Logger with Message Prefix in JavaScript\nDESCRIPTION: Demonstrates how to configure a Pino logger instance with a message prefix for all log messages.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/api.md#2025-04-20_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst logger = pino({\n  msgPrefix: '[HTTP] '\n})\nlogger.info('got new request!')\n// >  [HTTP] got new request!\n\nconst child = logger.child({})\nchild.info('User authenticated!')\n// >  [HTTP] User authenticated!\n```\n\n----------------------------------------\n\nTITLE: Configuring Pino Logger with Transport Option in JavaScript\nDESCRIPTION: Demonstrates how to set up a Pino logger with custom transport options for single or multiple targets.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/api.md#2025-04-20_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('pino')({\n  transport: {\n    target: '/absolute/path/to/my-transport.mjs'\n  }\n})\n\n// or multiple transports\nrequire('pino')({\n  transport: {\n    targets: [\n      { target: '/absolute/path/to/my-transport.mjs', level: 'error' },\n      { target: 'some-file-transport', options: { destination: '/dev/null' }\n    ]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: String Interpolation in Pino Log Messages\nDESCRIPTION: Example of using printf-style placeholders (%s, %d, %o) in Pino log messages for string interpolation. This demonstrates how values are substituted into the message template.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/api.md#2025-04-20_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nlogger.info('%o hello %s', {worldly: 1}, 'world')\n// {\"level\":30,\"time\":1531257826880,\"msg\":\"{\\\"worldly\\\":1} hello world\",\"pid\":55956,\"hostname\":\"x\"}\n```\n\n----------------------------------------\n\nTITLE: Mapping Pino Log Levels to Google Cloud Logging Severity Levels\nDESCRIPTION: Configuration to map Pino log levels to Google Cloud Logging severity levels and adjust message formatting for proper integration.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/help.md#2025-04-20_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst pino = require('pino')\n\n// https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#logseverity\nconst PinoLevelToSeverityLookup = {\n  trace: 'DEBUG',\n  debug: 'DEBUG',\n  info: 'INFO',\n  warn: 'WARNING',\n  error: 'ERROR',\n  fatal: 'CRITICAL',\n};\n\nconst defaultPinoConf = {\n  messageKey: 'message',\n  formatters: {\n    level(label, number) {\n      return {\n        severity: PinoLevelToSeverityLookup[label] || PinoLevelToSeverityLookup['info'],\n        level: number,\n      }\n    }\n  },\n}\n\nmodule.exports = function createLogger(options) {\n  return pino(Object.assign({}, options, defaultPinoConf))\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Transport in Pino\nDESCRIPTION: Sets up Pino logging with OpenTelemetry transport to forward logs to an OpenTelemetry collector with service name and version attributes.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/transports.md#2025-04-20_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nconst pino = require('pino')\n\nconst transport = pino.transport({\n  target: 'pino-opentelemetry-transport',\n  options: {\n    resourceAttributes: {\n      'service.name': 'test-service',\n      'service.version': '1.0.0'\n    }\n  }\n})\n\npino(transport)\n```\n\n----------------------------------------\n\nTITLE: Logging with Object Parameters in Pino\nDESCRIPTION: Demonstration of using mergingObject parameter with Pino logging methods. The object properties are merged into the JSON log output.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/api.md#2025-04-20_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nlogger.info({MIX: {IN: true}})\n// {\"level\":30,\"time\":1531254555820,\"pid\":55956,\"hostname\":\"x\",\"MIX\":{\"IN\":true}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pino Logger with Nested Key in JavaScript\nDESCRIPTION: Shows how to set up a Pino logger with a nested key to avoid property conflicts in logged objects.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/api.md#2025-04-20_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst logger = require('pino')({\n  nestedKey: 'payload'\n})\n\nconst thing = { level: 'hi', time: 'never', foo: 'bar'} // has pino-conflicting properties!\nlogger.info(thing)\n\n// logs the following:\n// {\"level\":30,\"time\":1578357790020,\"pid\":91736,\"hostname\":\"x\",\"payload\":{\"level\":\"hi\",\"time\":\"never\",\"foo\":\"bar\"}}\n```\n\n----------------------------------------\n\nTITLE: Formatting Pino logs to logfmt using pino-logfmt\nDESCRIPTION: Shows how to use the pino-logfmt transport with a Pino v7+ enabled application to format logs into logfmt format. The formatted logs can be output to stdout or a file.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/transports.md#2025-04-20_snippet_34\n\nLANGUAGE: js\nCODE:\n```\nimport pino from 'pino'\n\nconst logger = pino({\n  transport: {\n    target: 'pino-logfmt'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing logMethod Hook to Avoid Message Conflicts in Pino Logger\nDESCRIPTION: This snippet demonstrates how to use Pino's logMethod hook to prevent message conflicts when logging objects with a 'msg' property. It preserves the original message by copying it to an 'originalMsg' property before the standard logging method is applied.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/help.md#2025-04-20_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict'\n\nconst log = require('pino')({\n  level: 'debug',\n  hooks: {\n    logMethod (inputArgs, method) {\n      if (inputArgs.length === 2 && inputArgs[0].msg) {\n       inputArgs[0].originalMsg = inputArgs[0].msg\n      }\n      return method.apply(this, inputArgs)\n    }\n  }\n})\n\nlog.info('no original message')\nlog.info({ msg: 'mapped to originalMsg' }, 'a message')\n\n// {\"level\":30,\"time\":1596313323106,\"pid\":63739,\"hostname\":\"foo\",\"msg\":\"no original message\"}\n// {\"level\":30,\"time\":1596313323107,\"pid\":63739,\"hostname\":\"foo\",\"msg\":\"a message\",\"originalMsg\":\"mapped to originalMsg\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring File Transport in Pino (JavaScript)\nDESCRIPTION: Demonstrates how to configure the pino/file transport which routes logs to a file. The destination property specifies the target file path.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/transports.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst pino = require('pino')\nconst transport = pino.transport({\n  target: 'pino/file',\n  options: { destination: '/path/to/file' }\n})\npino(transport)\n```\n\n----------------------------------------\n\nTITLE: Configuring Pino with Custom Write Function in Browser\nDESCRIPTION: Sets up Pino with a custom write function that receives all log objects, allowing for custom handling instead of using console methods.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/browser.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst pino = require('pino')({\n  browser: {\n    write: (o) => {\n      // do something with o\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Axiom Transport with Pino (JavaScript)\nDESCRIPTION: Demonstrates how to set up the official Axiom transport for Pino, which sends logs to the Axiom logging platform.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/transports.md#2025-04-20_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport pino from 'pino';\n\nconst logger = pino(\n  { level: 'info' },\n  pino.transport({\n    target: '@axiomhq/pino',\n    options: {\n      dataset: process.env.AXIOM_DATASET,\n      token: process.env.AXIOM_TOKEN,\n    },\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Async Transport Implementation\nDESCRIPTION: Example of an async transport implementation that waits for stream to open before returning.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/transports.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport fs from 'node:fs'\nimport { once } from 'events'\nexport default async (options) => {\n  const stream = fs.createWriteStream(options.destination)\n  await once(stream, 'open')\n  return stream\n}\n```\n\n----------------------------------------\n\nTITLE: Usage Example of asObject Option in Browser\nDESCRIPTION: Demonstrates how the asObject option affects log output by creating a structured object with message, level, and timestamp.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/browser.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\npino.info('hi') // creates and logs {msg: 'hi', level: 30, time: <ts>}\n```\n\n----------------------------------------\n\nTITLE: Uploading Pino logs to CouchDB using pino-couch\nDESCRIPTION: Shows how to use the pino-couch module to upload each log line from a Pino-enabled application as a document in CouchDB. Specifies the CouchDB server URL and database name.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/transports.md#2025-04-20_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\n$ node app.js | pino-couch -U https://couch-server -d mylogs\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Level Formatters in Browser\nDESCRIPTION: Defines a custom formatter function for log levels which allows customizing the shape of level data in log objects.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/browser.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst formatters = {\n  level (label, number) {\n    return { level: number }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling All Serializers in Browser\nDESCRIPTION: Configures Pino to enable all serializers in the browser environment, which are disabled by default since browser console has built-in inspection capabilities.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/browser.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst pino = require('pino')({\n  browser: {\n    serialize: true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Forwarding Pino logs to Discord using pino-discord-webhook\nDESCRIPTION: Shows how to use the pino-discord-webhook transport to forward log events from a Pino v7+ enabled application to a Discord webhook from a dedicated worker. Requires specifying the Discord webhook URL.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/transports.md#2025-04-20_snippet_26\n\nLANGUAGE: js\nCODE:\n```\nimport pino from 'pino'\n\nconst logger = pino({\n  transport: {\n    target: 'pino-discord-webhook',\n    options: {\n      webhookUrl: 'https://discord.com/api/webhooks/xxxx/xxxx',\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Multiple Parameters Behavior in Pino v6+\nDESCRIPTION: Shows how multiple string parameters are handled in Pino v6 and later. By default, only the first parameter is used as the message.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/api.md#2025-04-20_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nlogger.info('hello', 'world')\n// {\"level\":30,\"time\":1531257618044,\"msg\":\"hello\",\"pid\":55956,\"hostname\":\"x\"}\n// world is missing\n```\n\n----------------------------------------\n\nTITLE: Disabling Standard Error Serializer in Browser\nDESCRIPTION: Demonstrates how to enable custom serializers while explicitly disabling the standard error serializer by using the special prefix notation.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/browser.md#2025-04-20_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst pino = require('pino')({\n  serializers: {\n    custom: myCustomSerializer,\n    another: anotherSerializer\n  },\n  browser: {\n    serialize: ['!stdSerializers.err', 'custom'] //will not serialize Errors, will serialize `custom` keys\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Uploading Pino logs to Elasticsearch using pino-elasticsearch\nDESCRIPTION: Demonstrates using the pino-elasticsearch module to upload log lines in bulk from a Pino-enabled application to Elasticsearch. Shows basic usage and connecting to an external Elasticsearch instance.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/transports.md#2025-04-20_snippet_27\n\nLANGUAGE: sh\nCODE:\n```\n$ node app.js | pino-elasticsearch\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ node app.js | pino-elasticsearch --node http://192.168.1.42:9200\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Basic Logging in Node.js\nDESCRIPTION: Performance comparison of various logging libraries for a simple 'hello world' log message. Pino shows the fastest performance, especially with minimum length configuration.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/benchmarks.md#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nBASIC benchmark averages\nBunyan average: 377.434ms\nWinston average: 270.249ms\nBole average: 172.690ms\nDebug average: 220.527ms\nLogLevel average: 222.802ms\nPino average: 114.801ms\nPinoMinLength average: 70.968ms\nPinoNodeStream average: 159.192ms\n```\n\n----------------------------------------\n\nTITLE: Configuring Pino with asObject Option in Browser\nDESCRIPTION: Initializes Pino with the asObject option enabled, which creates a structured log object instead of passing arguments directly to console methods.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/browser.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst pino = require('pino')({browser: {asObject: true}})\n```\n\n----------------------------------------\n\nTITLE: Sending Pino logs to Apache Kafka using pino-kafka\nDESCRIPTION: Demonstrates using the pino-kafka transport to send logs from a Pino-enabled application to Apache Kafka. Requires specifying the Kafka broker and topic.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/transports.md#2025-04-20_snippet_31\n\nLANGUAGE: sh\nCODE:\n```\n$ node index.js | pino-kafka -b 10.10.10.5:9200 -d mytopic\n```\n\n----------------------------------------\n\nTITLE: Piping Pino Logs to a Transport Process (Shell)\nDESCRIPTION: Shows how to consume Pino logs using shell piping, directing the application's stdout to a transport process.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/transports.md#2025-04-20_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nnode my-app-which-logs-stuff-to-stdout.js | node my-transport-process.js\n```\n\n----------------------------------------\n\nTITLE: Setting up Telegram Webhook Transport\nDESCRIPTION: JavaScript configuration for sending Pino logs to Telegram using bot token and chat ID.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/transports.md#2025-04-20_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\nconst pino = require('pino');\n\nconst logger = pino({\n  transport: {\n    target: 'pino-telegram-webhook',\n    level: 'error',\n    options: {\n      chatId: -1234567890,\n      botToken: \"123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11\",\n      extra: {\n              parse_mode: \"HTML\",\n            },\n    },\n  },\n})\n\nlogger.error('<b>test log!</b>');\n```\n\n----------------------------------------\n\nTITLE: Sending Pino logs to LogDNA using pino-logdna\nDESCRIPTION: Shows how to use the pino-logdna transport to send logs from a Pino-enabled application to LogDNA. Requires specifying the LogDNA ingestion key.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/transports.md#2025-04-20_snippet_32\n\nLANGUAGE: sh\nCODE:\n```\n$ node index.js | pino-logdna --key YOUR_INGESTION_KEY\n```\n\n----------------------------------------\n\nTITLE: Filtering Pino Logs with jq\nDESCRIPTION: Using jq to filter Pino JSON logs by selecting only ERROR level logs with more advanced JSON processing.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/help.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ # View all \"ERROR\" level logs\n$ node app.js | jq 'select(.level == 50)'\n```\n\n----------------------------------------\n\nTITLE: Configuring Slack Webhook Transport\nDESCRIPTION: JavaScript configuration for sending Pino logs to Slack using webhook integration.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/transports.md#2025-04-20_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nconst pino = require('pino')\nconst transport = pino.transport({\n  target: '@youngkiu/pino-slack-webhook',\n  options: {\n    webhookUrl: 'https://hooks.slack.com/services/xxx/xxx/xxx',\n    channel: '#pino-log',\n    username: 'webhookbot',\n    icon_emoji: ':ghost:'\n  }\n})\npino(transport)\n```\n\n----------------------------------------\n\nTITLE: Loading Pino logs into MySQL/MariaDB using pino-mysql\nDESCRIPTION: Demonstrates using the pino-mysql module to load logs from a Pino-enabled application into MySQL or MariaDB. Requires specifying a database configuration file.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/transports.md#2025-04-20_snippet_37\n\nLANGUAGE: sh\nCODE:\n```\n$ node app.js | pino-mysql -c db-configuration.json\n```\n\n----------------------------------------\n\nTITLE: Nested Child Logger Performance Benchmarks\nDESCRIPTION: Benchmark results comparing the logging performance through nested child loggers (child of a child) across different logging libraries. Shows minimal overhead for this operation in Pino.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/child-loggers.md#2025-04-20_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nbenchBunyanChildChild*10000: 559.082ms\nbenchPinoChildChild*10000: 229.264ms\nbenchPinoExtremeChildChild*10000: 127.753ms\n```\n\n----------------------------------------\n\nTITLE: Logging to a File with Node.js\nDESCRIPTION: Basic example of redirecting Node.js application logs to a file using shell redirection.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/help.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ node server.js > /var/log/myapp.log\n```\n\n----------------------------------------\n\nTITLE: Setting up Sentry Transport Programmatically\nDESCRIPTION: JavaScript configuration for using Pino Sentry transport to forward logs to Sentry from a dedicated worker.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/transports.md#2025-04-20_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nconst pino = require('pino')\nconst transport = pino.transport({\n  target: 'pino-sentry-transport',\n  options: {\n    sentry: {\n      dsn: 'https://******@sentry.io/12345',\n    }\n  }\n})\npino(transport)\n```\n\n----------------------------------------\n\nTITLE: Disabling Append Mode in File Transport for Pino (JavaScript)\nDESCRIPTION: Demonstrates how to disable append mode for the pino/file transport by setting the append option to false, which will truncate the file when opening it.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/transports.md#2025-04-20_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst pino = require('pino')\nconst transport = pino.transport({\n  target: 'pino/file',\n  options: { destination: '/path/to/file', append: false }\n})\npino(transport)\n```\n\n----------------------------------------\n\nTITLE: Configuring Sentry Transport with CLI\nDESCRIPTION: Command to forward Pino logs to Sentry using the DSN configuration.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/transports.md#2025-04-20_snippet_40\n\nLANGUAGE: shell\nCODE:\n```\n$ node app.js | pino-sentry --dsn=https://******@sentry.io/12345\n```\n\n----------------------------------------\n\nTITLE: Configuring Yandex Cloud Transport\nDESCRIPTION: JavaScript setup for sending Pino logs to Yandex Cloud Logging service.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/transports.md#2025-04-20_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\nconst pino = require(\"pino\");\n\nconst config = {\n  level: \"debug\",\n  transport: {\n    target: \"pino-yc-transport\",\n  },\n};\n\nconst logger = pino(config);\n\nlogger.debug(\"some message\")\nlogger.debug({ foo: \"bar\" });\nlogger.debug(\"some message %o, %s\", { foo: \"bar\" }, \"baz\");\nlogger.info(\"info\");\nlogger.warn(\"warn\");\nlogger.error(\"error\");\nlogger.error(new Error(\"error\"));\nlogger.fatal(\"fatal\");\n```\n\n----------------------------------------\n\nTITLE: Uploading Pino logs to Logstash using pino-socket\nDESCRIPTION: Demonstrates using the pino-socket module to upload logs from a Pino-enabled application to Logstash via TCP. Specifies the Logstash host and port.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/transports.md#2025-04-20_snippet_25\n\nLANGUAGE: sh\nCODE:\n```\n$ node app.js | pino-socket -a 127.0.0.1 -p 5000 -m tcp\n```\n\n----------------------------------------\n\nTITLE: Using Pino Redis Transport\nDESCRIPTION: Command to pipe Pino logs to Redis using authentication credentials.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/transports.md#2025-04-20_snippet_39\n\nLANGUAGE: shell\nCODE:\n```\n$ node app.js | pino-redis -U redis://username:password@localhost:6379\n```\n\n----------------------------------------\n\nTITLE: Disabling Pino Logging in Browser\nDESCRIPTION: Configures Pino with the disabled option set to true, which completely disables logging in the browser environment while maintaining the API interface.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/browser.md#2025-04-20_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst pino = require('pino')({browser: {disabled: true}})\n```\n\n----------------------------------------\n\nTITLE: Sending Pino logs to Azure Table Storage using pino-azuretable\nDESCRIPTION: Uses the pino-azuretable module to forward logs from a Pino-enabled application to Azure Table Storage. Requires specifying the storage account and key.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/transports.md#2025-04-20_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\n$ node foo | pino-azuretable --account storageaccount --key blablabla\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Deep Object Logging in Node.js\nDESCRIPTION: Performance comparison of logging libraries when logging a large, deeply nested object. Pino maintains its performance advantage, with Bunyan also showing good results for this scenario.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/benchmarks.md#2025-04-20_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nDEEP-OBJECT benchmark averages\nBunyanDeepObj average: 1.839ms\nWinstonDeepObj average: 5.604ms\nBoleDeepObj average: 3.422ms\nLogLevelDeepObj average: 11.716ms\nPinoDeepObj average: 2.256ms\nPinoMinLengthDeepObj average: 2.240ms\nPinoNodeStreamDeepObj average: 2.595ms\n```\n\n----------------------------------------\n\nTITLE: Usage Example of asObjectBindingsOnly Option in Browser\nDESCRIPTION: Shows how the asObjectBindingsOnly option preserves formatting placeholders when logging, allowing browsers to apply their own formatting.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/browser.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\npino.info('hello %s', 'world') // creates and logs {level: 30, time: <ts>}, 'hello %s', 'world'\n```\n\n----------------------------------------\n\nTITLE: Forwarding Pino logs to Amazon CloudWatch using pino-cloudwatch\nDESCRIPTION: Demonstrates using the pino-cloudwatch transport to buffer and forward logs from a Pino-enabled application to Amazon CloudWatch. Specifies the CloudWatch log group.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/transports.md#2025-04-20_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\n$ node app.js | pino-cloudwatch --group my-log-group\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Object Logging in Node.js\nDESCRIPTION: Performance comparison of logging libraries when logging a simple object. Pino again demonstrates superior performance, particularly with minimum length configuration.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/benchmarks.md#2025-04-20_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nOBJECT benchmark averages\nBunyanObj average: 410.379ms\nWinstonObj average: 273.120ms\nBoleObj average: 185.069ms\nLogLevelObject average: 433.425ms\nPinoObj average: 119.315ms\nPinoMinLengthObj average: 76.968ms\nPinoNodeStreamObj average: 164.268ms\n```\n\n----------------------------------------\n\nTITLE: Integrating Pino with Node core HTTP\nDESCRIPTION: Example of using pino-http with Node's core HTTP module. Shows how to manually apply the logger middleware to each request-response pair.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/web.md#2025-04-20_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst http = require('http')\nconst server = http.createServer(handle)\nconst logger = require('pino-http')()\n\nfunction handle (req, res) {\n  logger(req, res)\n  req.log.info('something else')\n  res.end('hello world')\n}\n\nserver.listen(3000)\n```\n\n----------------------------------------\n\nTITLE: Forwarding Pino logs to Datadog using pino-datadog\nDESCRIPTION: Demonstrates using the pino-datadog transport to forward logs from a Pino-enabled application to Datadog through its API. Requires specifying the Datadog API key.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/transports.md#2025-04-20_snippet_23\n\nLANGUAGE: sh\nCODE:\n```\n$ node foo | pino-datadog --key blablabla\n```\n\n----------------------------------------\n\nTITLE: Child Logger Performance Benchmarks\nDESCRIPTION: Benchmark results comparing the logging performance through child loggers across different logging libraries. Shows that Pino and Pino Extreme outperform Bunyan and Bole.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/child-loggers.md#2025-04-20_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nbenchBunyanChild*10000: 556.275ms\nbenchBoleChild*10000: 288.124ms\nbenchPinoChild*10000: 231.695ms\nbenchPinoExtremeChild*10000: 122.117ms\n```\n\n----------------------------------------\n\nTITLE: Integrating Pino with H3\nDESCRIPTION: JavaScript module example showing how to use pino-http with the H3 framework. Demonstrates using fromNodeMiddleware to adapt the Express-style middleware for H3.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/web.md#2025-04-20_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp, createRouter, eventHandler, fromNodeMiddleware } from \"h3\";\nimport pino from 'pino-http'\n\nexport const app = createApp();\n\nconst router = createRouter();\napp.use(router);\napp.use(fromNodeMiddleware(pino()))\n\napp.use(eventHandler((event) => {\n  event.node.req.log.info('something')\n  return 'hello world'\n}))\n\nrouter.get(\n  \"/\",\n  eventHandler((event) => {\n    return { path: event.path, message: \"Hello World!\" };\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Sending Pino logs to Datadog using pino-datadog-transport\nDESCRIPTION: Shows how to use the pino-datadog-transport module as a Pino v7+ compatible transport to forward log events to Datadog from a dedicated worker. Requires configuring the Datadog client with an API key.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/transports.md#2025-04-20_snippet_24\n\nLANGUAGE: js\nCODE:\n```\nconst pino = require('pino')\nconst transport = pino.transport({\n  target: 'pino-datadog-transport',\n  options: {\n    ddClientConf: {\n      authMethods: {\n        apiKeyAuth: <your datadog API key>\n      }\n    },\n  },\n  level: \"error\", // minimum log level that should be sent to datadog\n})\npino(transport)\n```\n\n----------------------------------------\n\nTITLE: Defining Level Type in TypeScript\nDESCRIPTION: Defines the Level type as a union of string literals representing different log levels.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/api.md#2025-04-20_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\ntype Level = \"fatal\" | \"error\" | \"warn\" | \"info\" | \"debug\" | \"trace\";\n```\n\n----------------------------------------\n\nTITLE: Logrotate Configuration for Node.js Application Logs\nDESCRIPTION: Example logrotate configuration file for rotating Node.js application logs using copytruncate to avoid log loss.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/help.md#2025-04-20_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n/var/log/myapp.log {\n       su root\n       daily\n       rotate 7\n       delaycompress\n       compress\n       notifempty\n       missingok\n       copytruncate\n}\n```\n\n----------------------------------------\n\nTITLE: Selectively Enabling Serializers in Browser\nDESCRIPTION: Configures Pino to selectively enable specific serializers in the browser by providing an array of serializer names to use.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/browser.md#2025-04-20_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst pino = require('pino')({\n  serializers: {\n    custom: myCustomSerializer,\n    another: anotherSerializer\n  },\n  browser: {\n    serialize: ['custom']\n  }\n})\n// following will apply myCustomSerializer to the custom property,\n// but will not apply anotherSerializer to another key\npino.info({custom: 'a', another: 'b'})\n```\n\n----------------------------------------\n\nTITLE: Defining DestinationStream Interface in TypeScript\nDESCRIPTION: Defines the DestinationStream interface with a write method that takes a string message.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/api.md#2025-04-20_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\ninterface DestinationStream {\n  write(msg: string): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Logrotate Configuration with Signal Handling for Log Reopening\nDESCRIPTION: Logrotate configuration that sends a SIGHUP signal to the application after rotating logs, allowing for safe log reopening.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/help.md#2025-04-20_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n/var/log/myapp.log {\n       su root\n       daily\n       rotate 7\n       delaycompress\n       compress\n       notifempty\n       missingok\n       postrotate\n           kill -HUP `cat /var/run/myapp.pid`\n       endscript\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Pino Logs with grep\nDESCRIPTION: Using grep to filter Pino JSON logs by log level to view only INFO level logs.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/help.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ # View all \"INFO\" level logs\n$ node app.js | grep '\"level\":30'\n```\n\n----------------------------------------\n\nTITLE: Defining StreamEntry Interface in TypeScript\nDESCRIPTION: Defines the StreamEntry interface with a stream property of type DestinationStream and an optional level property.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/api.md#2025-04-20_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\ninterface StreamEntry {\n  stream: DestinationStream;\n  level?: Level;\n}\n```\n\n----------------------------------------\n\nTITLE: Using pino-debug with Debug Module\nDESCRIPTION: Command to enable pino-debug module, which captures calls to the debug module and runs them through Pino for better performance.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/help.md#2025-04-20_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i pino-debug\n$ DEBUG=* node -r pino-debug app.js\n```\n\n----------------------------------------\n\nTITLE: Setting Up Airbrake Transport for Pino (JavaScript)\nDESCRIPTION: Demonstrates how to configure the Airbrake transport for Pino to forward error logs to the Airbrake error monitoring service.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/transports.md#2025-04-20_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst pino = require('pino')\nconst transport = pino.transport({\n  target: 'pino-airbrake-transport',\n  options: {\n    airbrake: {\n      projectId: 1,\n      projectKey: \"REPLACE_ME\",\n      environment: \"production\",\n      // additional options for airbrake\n      performanceStats: false,\n    },\n  },\n  level: \"error\", // minimum log level that should be sent to airbrake\n})\npino(transport)\n```\n\n----------------------------------------\n\nTITLE: Duplicate Keys Example in Pino Child Loggers\nDESCRIPTION: Example demonstrating potential namespace conflicts when using nested child loggers with the same property names. Shows how Pino handles duplicate keys in the log output.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/child-loggers.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst pino = require('pino')\npino(pino.destination('./my-log'))\n  .child({a: 'property'})\n  .child({a: 'prop'})\n  .info('howdy')\n```\n\n----------------------------------------\n\nTITLE: Saving Pino logs to SAP HANA using pino-hana\nDESCRIPTION: Demonstrates using the pino-hana transport to save logs from a Pino v7+ enabled application to a SAP HANA database. Requires specifying the database connection options, schema, and table.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/transports.md#2025-04-20_snippet_29\n\nLANGUAGE: js\nCODE:\n```\nconst pino = require('pino')\nconst logger = pino({\n  transport: {\n    target: 'pino-hana',\n    options: {\n      connectionOptions: {\n        host: <hana db host>,\n        port: <hana db port>,\n        user: <hana db user>,\n        password: <hana db password>,\n      },\n      schema: <schema of the table in which you want to save the logs>,\n      table: <table in which you want to save the logs>,\n    },\n  },\n})\n\nlogger.info('hi') // this log will be saved into SAP HANA\n```\n\n----------------------------------------\n\nTITLE: Using Application Insights Transport for Pino (Shell)\nDESCRIPTION: Shows how to forward Pino logs to Azure Application Insights using the pino-applicationinsights transport via command line.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/transports.md#2025-04-20_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\n$ node foo | pino-applicationinsights --key blablabla\n```\n\n----------------------------------------\n\nTITLE: Processing Logs with Duplicate Keys using JSON.parse\nDESCRIPTION: Shell command demonstrating how JSON.parse resolves duplicate keys by using the last value assigned to the key. This shows how log processing typically handles the duplicate keys from nested child loggers.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/child-loggers.md#2025-04-20_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ cat my-log | node -e \"process.stdin.once('data', (line) => console.log(JSON.stringify(JSON.parse(line))))\"\n{\"pid\":95469,\"hostname\":\"MacBook-Pro-3.home\",\"level\":30,\"msg\":\"howdy\",\"time\":\"2016-04-01T18:08:34.473Z\",\"a\":\"prop\"}\n```\n\n----------------------------------------\n\nTITLE: Installing koa-pino-logger\nDESCRIPTION: Command to install koa-pino-logger package for Koa framework integration.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/web.md#2025-04-20_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnpm install koa-pino-logger\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenObserve Transport for Pino (JavaScript)\nDESCRIPTION: Shows how to configure the OpenObserve transport to send logs to an OpenObserve server instance with authentication details.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/transports.md#2025-04-20_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst pino = require('pino');\nconst OpenobserveTransport = require('@openobserve/pino-openobserve');\n\nconst logger = pino({\n  level: 'info',\n  transport: {\n    target: OpenobserveTransport,\n    options: {\n      url: 'https://your-openobserve-server.com',\n      organization: 'your-organization',\n      streamName: 'your-stream',\n      auth: {\n        username: 'your-username',\n        password: 'your-password',\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing pino-http for Express\nDESCRIPTION: Command to install pino-http package for use with Express framework.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/web.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install pino-http\n```\n\n----------------------------------------\n\nTITLE: Installing nestjs-pino\nDESCRIPTION: Command to install nestjs-pino package for NestJS framework integration.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/web.md#2025-04-20_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nnpm install nestjs-pino\n```\n\n----------------------------------------\n\nTITLE: Configuring Axiom Transport for Pino (JavaScript)\nDESCRIPTION: Demonstrates how to set up the pino-axiom transport to forward logs to the Axiom logging platform with organization ID, token, and dataset configuration.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/transports.md#2025-04-20_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst pino = require('pino')\nconst transport = pino.transport({\n  target: 'pino-axiom',\n  options: {\n    orgId: 'YOUR-ORG-ID', \n    token: 'YOUR-TOKEN', \n    dataset: 'YOUR-DATASET', \n  },\n})\npino(transport)\n```\n\n----------------------------------------\n\nTITLE: Installing hapi-pino\nDESCRIPTION: Command to install hapi-pino package for Hapi framework integration.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/web.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm install hapi-pino\n```\n\n----------------------------------------\n\nTITLE: Installing pino-http for H3\nDESCRIPTION: Command to install pino-http and h3 packages for H3 framework integration.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/web.md#2025-04-20_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nnpm install pino-http h3\n```\n\n----------------------------------------\n\nTITLE: Child Logger Creation Performance Benchmarks\nDESCRIPTION: Benchmark results comparing the creation time of child loggers across different logging libraries. Shows that Pino and Pino Extreme are faster than Bunyan and Bole.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/child-loggers.md#2025-04-20_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nbenchBunyanCreation*10000: 564.514ms\nbenchBoleCreation*10000: 283.276ms\nbenchPinoCreation*10000: 258.745ms\nbenchPinoExtremeCreation*10000: 150.506ms\n```\n\n----------------------------------------\n\nTITLE: Installing restify-pino-logger\nDESCRIPTION: Command to install restify-pino-logger package for Restify framework integration.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/web.md#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpm install restify-pino-logger\n```\n\n----------------------------------------\n\nTITLE: Installing packages for Hono integration\nDESCRIPTION: Command to install pino, pino-http, and hono packages for Hono framework integration.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/web.md#2025-04-20_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nnpm install pino pino-http hono\n```\n\n----------------------------------------\n\nTITLE: Using Logger with Axiom Transport (JavaScript)\nDESCRIPTION: Shows the basic usage of a Pino logger configured with the Axiom transport.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/transports.md#2025-04-20_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nlogger.info('Hello from pino!');\n```\n\n----------------------------------------\n\nTITLE: Git Commands to Avoid in Pino Project\nDESCRIPTION: Git command that should not be used on the master branch to preserve history integrity.\nSOURCE: https://github.com/pinojs/pino/blob/main/CONTRIBUTING.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--force\n```\n\n----------------------------------------\n\nTITLE: Defining MultiStreamRes Interface in TypeScript\nDESCRIPTION: Defines the MultiStreamRes interface with methods for writing data, adding streams, flushing, and cloning. It also includes properties for minimum level and current streams.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/api.md#2025-04-20_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\ninterface MultiStreamRes {\n  write(data: Object | string): void;\n  add(dest: StreamEntry | DestinationStream): MultiStreamRes;\n  flushSync(): undefined;\n  minLevel: number;\n  streams: StreamEntry[];\n  clone(level: Level): MultiStreamRes;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Pino using NPM\nDESCRIPTION: Command to install Pino logger using NPM package manager.\nSOURCE: https://github.com/pinojs/pino/blob/main/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install pino\n```\n\n----------------------------------------\n\nTITLE: Installing Pino using Yarn\nDESCRIPTION: Command to install Pino logger using Yarn package manager.\nSOURCE: https://github.com/pinojs/pino/blob/main/README.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ yarn add pino\n```\n\n----------------------------------------\n\nTITLE: Viewing Raw Log Output with Duplicate Keys\nDESCRIPTION: Shell command showing the raw log output that contains duplicate keys when using nested child loggers with the same property names.\nSOURCE: https://github.com/pinojs/pino/blob/main/docs/child-loggers.md#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ cat my-log\n{\"pid\":95469,\"hostname\":\"MacBook-Pro-3.home\",\"level\":30,\"msg\":\"howdy\",\"time\":1459534114473,\"a\":\"property\",\"a\":\"prop\"}\n```"
  }
]