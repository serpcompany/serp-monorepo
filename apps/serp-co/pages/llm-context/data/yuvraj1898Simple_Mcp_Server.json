[
  {
    "owner": "yuvraj1898",
    "repo": "simple_mcp_server",
    "content": "TITLE: Solving a Mixed-Integer Programming Problem with CVXPY\nDESCRIPTION: Implements a mixed-integer programming problem using CVXPY. Creates binary variables, defines constraints, sets up an objective function to maximize, and solves the optimization problem. Then prints the results, including the status, optimal value, and variable assignments.\nSOURCE: https://github.com/yuvraj1898/simple_mcp_server/blob/main/mcpclient/README.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Define the variables\nx = cp.Variable(4, boolean=True)  # x[i] = 1 if facility i is opened, 0 otherwise\n\n# Define the constraints\nconstraints = [\n    x[0] + x[1] >= 1,  # At least one of facilities 0 or 1 must be opened\n    x[2] + x[3] >= 1,  # At least one of facilities 2 or 3 must be opened\n    x[0] + x[2] <= 1,  # Facilities 0 and 2 cannot both be opened\n    cp.sum(x) <= 3      # At most 3 facilities can be opened\n]\n\n# Define the objective\nrevenues = np.array([10, 7, 12, 9])  # Revenues from opening each facility\nobjective = cp.Maximize(revenues @ x)\n\n# Define the problem\nproblem = cp.Problem(objective, constraints)\n\n# Solve the problem\nproblem.solve(solver=cp.GLPK_MI)\n\n# Print the results\nprint(\"Status:\", problem.status)\nprint(\"Optimal value:\", problem.value)\nprint(\"Optimal x:\", x.value)\n```\n\n----------------------------------------\n\nTITLE: Custom MCP Client Implementation\nDESCRIPTION: Python implementation of a custom MCP client using the mcpclient library with Groq LLM integration.\nSOURCE: https://github.com/yuvraj1898/simple_mcp_server/blob/main/README.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport os\nfrom dotenv import load_dotenv\nfrom langchain_groq import ChatGroq\nfrom mcp_use import MCPAgent, MCPClient\n\nasync def main():\n    # Load environment variables (e.g., GROQ_API_KEY)\n    load_dotenv()\n\n    # Define the MCP server config\n    config = {\n        \"mcpServers\": {\n            \"info-server\": {\n                \"command\": \"/Users/yuvrajfirodiya/.local/bin/uv\",\n                \"args\": [\n                    \"--directory\",\n                    \"/Users/yuvrajfirodiya/Source/Python-Langchain-Projects/simple_mcp_server\",\n                    \"run\",\n                    \"server.py\"\n                ],\n                \"env\": {\n                    \"DISPLAY\": \":1\"\n                }\n            }\n        }\n    }\n\n    # Initialize the client\n    client = MCPClient.from_dict(config)\n\n    # Initialize the Groq LLM (Llama 3)\n    llm = ChatGroq(\n        model_name=\"Llama3-8b-8192\",\n        streaming=True\n    )\n\n    # Build your agent\n    agent = MCPAgent(llm=llm, client=client, max_steps=30)\n\n    # Ask a question\n    result = await agent.run(\"tell me about donald trump\")\n    print(f\"\\nResult: {result}\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies\nDESCRIPTION: Commands to install necessary Python packages including MCP, LangChain Community, Wikipedia, and Arxiv libraries.\nSOURCE: https://github.com/yuvraj1898/simple_mcp_server/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nuv add \"mcp[cli]\"\nuv add langchain_community\nuv add wikipedia\nuv add arxiv\n```\n\n----------------------------------------\n\nTITLE: Importing Required Packages for CVXPY Implementation\nDESCRIPTION: Imports the necessary Python packages for solving a mixed-integer programming problem, including CVXPY for optimization modeling and NumPy for numerical operations.\nSOURCE: https://github.com/yuvraj1898/simple_mcp_server/blob/main/mcpclient/README.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport cvxpy as cp\nimport numpy as np\n```\n\n----------------------------------------\n\nTITLE: Initializing Project Environment with UV\nDESCRIPTION: Commands to set up the initial project environment using UV package manager and create a virtual environment.\nSOURCE: https://github.com/yuvraj1898/simple_mcp_server/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuv init simple_mcp_server\ncd simple_mcp_server\nuv venv\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Claude Desktop MCP Server Configuration\nDESCRIPTION: JSON configuration for setting up the MCP server in Claude Desktop settings.\nSOURCE: https://github.com/yuvraj1898/simple_mcp_server/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"info-server\": {\n      \"command\": \"/Users/yuvrajfirodiya/.local/bin/uv\",\n      \"args\": [\n        \"--directory\",\n        \"/Users/yuvrajfirodiya/Source/Python-Langchain-Projects/simple_mcp_server\",\n        \"run\",\n        \"server.py\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running the MCP Server\nDESCRIPTION: Command to start the FastMCP server using UV.\nSOURCE: https://github.com/yuvraj1898/simple_mcp_server/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nuv run server.py\n```\n\n----------------------------------------\n\nTITLE: Opening Claude Desktop Config\nDESCRIPTION: Command to open the Claude Desktop configuration file in VS Code.\nSOURCE: https://github.com/yuvraj1898/simple_mcp_server/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncode ~/Library/Application\\ Support/Claude/claude_desktop_config.json\n```"
  }
]