[
  {
    "owner": "livekit",
    "repo": "python-sdks",
    "content": "TITLE: Connecting to a LiveKit Room and Handling Events\nDESCRIPTION: Example showing how to connect to a LiveKit room, handle participant connection events, and process video frames from subscribed tracks. This demonstrates the event-driven architecture of the SDK.\nSOURCE: https://github.com/livekit/python-sdks/blob/main/README.md#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom livekit import rtc\n\nasync def main():\n    room = rtc.Room()\n\n    @room.on(\"participant_connected\")\n    def on_participant_connected(participant: rtc.RemoteParticipant):\n        logging.info(\n            \"participant connected: %s %s\", participant.sid, participant.identity)\n\n    async def receive_frames(stream: rtc.VideoStream):\n        async for frame in stream:\n            # received a video frame from the track, process it here\n            pass\n\n    # track_subscribed is emitted whenever the local participant is subscribed to a new track\n    @room.on(\"track_subscribed\")\n    def on_track_subscribed(track: rtc.Track, publication: rtc.RemoteTrackPublication, participant: rtc.RemoteParticipant):\n        logging.info(\"track subscribed: %s\", publication.sid)\n        if track.kind == rtc.TrackKind.KIND_VIDEO:\n            video_stream = rtc.VideoStream(track)\n            asyncio.ensure_future(receive_frames(video_stream))\n\n    # By default, autosubscribe is enabled. The participant will be subscribed to\n    # all published tracks in the room\n    await room.connect(URL, TOKEN)\n    logging.info(\"connected to room %s\", room.name)\n\n    # participants and tracks that are already available in the room\n    # participant_connected and track_published events will *not* be emitted for them\n    for identity, participant in room.remote_participants.items():\n        print(f\"identity: {identity}\")\n        print(f\"participant: {participant}\")\n        for tid, publication in participant.track_publications.items():\n            print(f\"\\ttrack id: {publication}\")\n```\n\n----------------------------------------\n\nTITLE: Accessing Different LiveKit API Services\nDESCRIPTION: Shows how to access various LiveKit API services through the LiveKitAPI object, including Room, Egress, Ingress, SIP, and Agent Dispatch services.\nSOURCE: https://github.com/livekit/python-sdks/blob/main/README.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nlkapi = api.LiveKitAPI(\"https://my-project.livekit.cloud\")\n\n# Room Service\nroom_svc = lkapi.room\n\n# Egress Service\negress_svc = lkapi.egress\n\n# Ingress Service\ningress_svc = lkapi.ingress\n\n# Sip Service\nsip_svc = lkapi.sip\n\n# Agent Dispatch\ndispatch_svc = lkapi.agent_dispatch\n```\n\n----------------------------------------\n\nTITLE: Creating a Room with LiveKit API\nDESCRIPTION: Demonstrates how to use asyncio with LiveKit's RoomService to create a room and list existing rooms. The example showcases the async nature of the API calls.\nSOURCE: https://github.com/livekit/python-sdks/blob/main/README.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom livekit import api\nimport asyncio\n\nasync def main():\n    lkapi = api.LiveKitAPI(\"https://my-project.livekit.cloud\")\n    room_info = await lkapi.room.create_room(\n        api.CreateRoomRequest(name=\"my-room\"),\n    )\n    print(room_info)\n    results = await lkapi.room.list_rooms(api.ListRoomsRequest())\n    print(results)\n    await lkapi.aclose()\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Generating an Access Token with LiveKit API\nDESCRIPTION: Example demonstrating how to create an access token using the LiveKit API. This token can be used to authenticate and authorize a participant to join a room with specific permissions.\nSOURCE: https://github.com/livekit/python-sdks/blob/main/README.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom livekit import api\nimport os\n\n# will automatically use the LIVEKIT_API_KEY and LIVEKIT_API_SECRET env vars\ntoken = api.AccessToken() \\\n    .with_identity(\"python-bot\") \\\n    .with_name(\"Python Bot\") \\\n    .with_grants(api.VideoGrants(\n        room_join=True,\n        room=\"my-room\",\n    )).to_jwt()\n```\n\n----------------------------------------\n\nTITLE: Performing an RPC Request in LiveKit\nDESCRIPTION: Demonstrates how to initiate a Remote Procedure Call (RPC) to another participant in a LiveKit room. Includes error handling for failed RPC calls.\nSOURCE: https://github.com/livekit/python-sdks/blob/main/README.md#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ntry:\n  response = await room.local_participant.perform_rpc(\n    destination_identity='recipient-identity',\n    method='greet',\n    payload='Hello from RPC!'\n  )\n  print(f\"RPC response: {response}\")\nexcept Exception as e:\n  print(f\"RPC call failed: {e}\")\n```\n\n----------------------------------------\n\nTITLE: Registering an RPC Method in LiveKit\nDESCRIPTION: Shows how to register a Remote Procedure Call (RPC) method in LiveKit. This allows a participant to implement methods that can be called by other participants in the room.\nSOURCE: https://github.com/livekit/python-sdks/blob/main/README.md#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@room.local_participant.register_rpc_method(\"greet\")\nasync def handle_greet(data: RpcInvocationData):\n    print(f\"Received greeting from {data.caller_identity}: {data.payload}\")\n    return f\"Hello, {data.caller_identity}!\"\n```\n\n----------------------------------------\n\nTITLE: Installing Requirements and Setting Up Face Landmark Detection Demo in LiveKit\nDESCRIPTION: Instructions for setting up a face landmark detection demo using the LiveKit Python SDK. The process includes installing dependencies, downloading the MediaPipe face landmarker model, configuring the connection parameters, and connecting to a LiveKit room from another client.\nSOURCE: https://github.com/livekit/python-sdks/blob/main/examples/face_landmark/README.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## FaceLandmark example\n\nTo run this demo:\n\n1. pip install -r requirements.txt\n2. Download a model from https://developers.google.com/mediapipe/solutions/vision/face_landmarker#models\n3. Rename it to `face_landmarker.task` (as referenced by the code)\n4. Change the URL and TOKEN inside the script\n5. Connect to the same room from [another client](https://meet.livekit.io/?tab=custom)\n```\n\n----------------------------------------\n\nTITLE: Initializing AVSynchronizer in Python\nDESCRIPTION: Demonstrates basic setup and usage of AVSynchronizer for maintaining sync between video and audio frames. The synchronizer takes audio and video sources as input, along with configurable FPS and queue size parameters.\nSOURCE: https://github.com/livekit/python-sdks/blob/main/examples/video-stream/README.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nav_sync = AVSynchronizer(\n    audio_source=audio_source,\n    video_source=video_source,\n    video_fps=30.0,\n    video_queue_size_ms=100\n)\n\n# Push frames to synchronizer\nawait av_sync.push(video_frame)\nawait av_sync.push(audio_frame)\n```\n\n----------------------------------------\n\nTITLE: LiveKit Server APIs Documentation\nDESCRIPTION: Markdown header and description for LiveKit server API documentation explaining the main purpose of accessing server APIs and generating access tokens.\nSOURCE: https://github.com/livekit/python-sdks/blob/main/livekit-api/README.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# LiveKit Server APIs\n\nAccess LiveKit server APIs and generate access tokens.\n```\n\n----------------------------------------\n\nTITLE: Installing LiveKit Real-time SDK with pip\nDESCRIPTION: Command to install the livekit package using pip, which provides the real-time SDK for connecting to LiveKit as a participant.\nSOURCE: https://github.com/livekit/python-sdks/blob/main/README.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ pip install livekit\n```\n\n----------------------------------------\n\nTITLE: Installing LiveKit API Package with pip\nDESCRIPTION: Command to install the livekit-api package using pip, which provides access token generation and server APIs for LiveKit.\nSOURCE: https://github.com/livekit/python-sdks/blob/main/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ pip install livekit-api\n```\n\n----------------------------------------\n\nTITLE: Video Playback Script Execution Command\nDESCRIPTION: Command line usage example for the video playback script that demonstrates synchronized playback of video and audio streams from a media file.\nSOURCE: https://github.com/livekit/python-sdks/blob/main/examples/video-stream/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython video_play.py <room-name> </path/to/video>\n```\n\n----------------------------------------\n\nTITLE: Python Package Dependencies List\nDESCRIPTION: Comprehensive list of Python package dependencies required for the LiveKit Python SDK project. Includes core dependencies like requests, build tools like wheel and setuptools, testing frameworks like pytest, and data processing libraries like numpy and matplotlib. Conditional dependency auditwheel is included only for Linux platforms.\nSOURCE: https://github.com/livekit/python-sdks/blob/main/dev-requirements.txt#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# download binaries\nrequests\n\n# build wheels\nwheel\nsetuptools\ntwine\nauditwheel; sys_platform == 'linux'\ncibuildwheel\n\npytest\npytest-asyncio\n\nmatplotlib\npydantic\nnumpy\n```\n\n----------------------------------------\n\nTITLE: Specifying PyGObject Dependency for Python\nDESCRIPTION: Defines a dependency on PyGObject version 3.46.0. PyGObject is a Python package that provides bindings for GObject-based libraries like GTK.\nSOURCE: https://github.com/livekit/python-sdks/blob/main/livekit-protocol/livekit/requirements.txt#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nPyGObject==3.46.0\n```\n\n----------------------------------------\n\nTITLE: Adding React-Specific ESLint Plugins\nDESCRIPTION: Implementation of React-specific lint rules using eslint-plugin-react-x and eslint-plugin-react-dom plugins. Shows how to configure these plugins with their recommended TypeScript rules.\nSOURCE: https://github.com/livekit/python-sdks/blob/main/livekit-rtc/jupyter-html/README.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport reactX from 'eslint-plugin-react-x'\nimport reactDom from 'eslint-plugin-react-dom'\n\nexport default tseslint.config({\n  plugins: {\n    // Add the react-x and react-dom plugins\n    'react-x': reactX,\n    'react-dom': reactDom,\n  },\n  rules: {\n    // other rules...\n    // Enable its recommended typescript rules\n    ...reactX.configs['recommended-typescript'].rules,\n    ...reactDom.configs.recommended.rules,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint with TypeScript Type Checking\nDESCRIPTION: Configuration setup for enabling type-aware lint rules in a TypeScript React project. Includes parser options for TypeScript configuration files and various recommended rule sets.\nSOURCE: https://github.com/livekit/python-sdks/blob/main/livekit-rtc/jupyter-html/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default tseslint.config({\n  extends: [\n    // Remove ...tseslint.configs.recommended and replace with this\n    ...tseslint.configs.recommendedTypeChecked,\n    // Alternatively, use this for stricter rules\n    ...tseslint.configs.strictTypeChecked,\n    // Optionally, add this for stylistic rules\n    ...tseslint.configs.stylisticTypeChecked,\n  ],\n  languageOptions: {\n    // other options...\n    parserOptions: {\n      project: ['./tsconfig.node.json', './tsconfig.app.json'],\n      tsconfigRootDir: import.meta.dirname,\n    },\n  },\n})\n```"
  }
]