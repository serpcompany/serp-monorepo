[
  {
    "owner": "bhaleraosaurabh",
    "repo": "react-aria-components",
    "content": "TITLE: Rendering a Searchable Select Autocomplete Component - React Aria Components (TypeScript)\nDESCRIPTION: Implements a fully functional Select component with autocomplete filtering, combining React Aria Components such as Select, Autocomplete, SearchField, ListBox, and supporting icons (from lucide-react). The main component uses the useFilter hook to provide case-insensitive text filtering, and renders a styled input, trigger button, results popover, and a custom ListBoxItem (SelectItem) with an active selection indicator. Dependencies include react-aria-components, lucide-react for icons, and Tailwind CSS for styling. This code expects the 'languages' array as a prop or in scope. It is designed for accessibility, with ARIA tags and keyboard navigation, and assumes that all imports are installed and Tailwind CSS is properly configured in the project.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/searchable-select.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type {ListBoxItemProps} from 'react-aria-components';\nimport {Autocomplete, Select, Label, Button, SelectValue, Popover, ListBox, ListBoxItem, SearchField, Input, useFilter} from 'react-aria-components';\nimport {ChevronsUpDownIcon, CheckIcon, CheckIcon, SearchIcon, XIcon} from 'lucide-react';\n\nfunction SelectExample() {\n  let {contains} = useFilter({sensitivity: 'base'});\n\n  return (\n    <div className=\"bg-linear-to-br from-cyan-200 to-blue-400 p-8 sm:h-[350px] rounded-lg flex justify-center\">\n      <Select className=\"flex flex-col gap-1 w-[200px]\">\n        <Label className=\"text-black cursor-default\">Language</Label>\n        <Button className=\"flex items-center cursor-default rounded-lg border-0 bg-white/90 pressed:bg-white transition py-2 pl-5 pr-2 text-base text-left leading-normal ring-1 ring-black/5 shadow-md text-gray-700 focus:outline-hidden focus-visible:outline-2 outline-black outline-offset-3 focus-visible:ring-black/25\">\n          <SelectValue className=\"flex-1 truncate\" />\n          <ChevronsUpDownIcon className=\"w-4 h-4\" />\n        </Button>\n        <Popover className=\"!max-h-80 w-(--trigger-width) flex flex-col rounded-md bg-white text-base shadow-lg ring-1 ring-black/5 entering:animate-in entering:fade-in exiting:animate-out exiting:fade-out\">\n          <Autocomplete filter={contains}>\n            <SearchField aria-label=\"Search\" autoFocus className=\"group flex items-center bg-white forced-colors:bg-[Field] border-2 border-gray-300 has-focus:border-sky-600 rounded-full m-1\">\n              <SearchIcon aria-hidden className=\"w-4 h-4 ml-2 text-gray-600 forced-colors:text-[ButtonText]\" />\n              <Input placeholder=\"Search languages\" className=\"px-2 py-1 flex-1 min-w-0 border-none outline outline-0 bg-white text-base text-gray-800 placeholder-gray-500 font-[inherit] [&::-webkit-search-cancel-button]:hidden\" />\n              <Button className=\"text-sm text-center transition rounded-full border-0 p-1 flex items-center justify-center text-gray-600 bg-transparent hover:bg-black/[5%] pressed:bg-black/10 mr-1 w-6 group-empty:invisible\">\n                <XIcon aria-hidden className=\"w-4 h-4\" />\n              </Button>\n            </SearchField>\n            <ListBox items={languages} className=\"outline-hidden p-1 overflow-auto flex-1 scroll-pb-1\">\n              {item => <SelectItem>{item.name}</SelectItem>}\n            </ListBox>\n          </Autocomplete>\n        </Popover>\n      </Select>\n    </div>\n  );\n}\n\nfunction SelectItem(props: ListBoxItemProps & {children: string}) {\n  return (\n    <ListBoxItem\n      {...props}\n      textValue={props.children}\n      className=\"group flex items-center gap-2 cursor-default select-none py-2 px-4 outline-hidden rounded-sm text-gray-900 focus:bg-sky-600 focus:text-white\">\n      {({ isSelected }) => (\n        <>\n          <span className=\"flex-1 flex items-center gap-2 truncate font-normal group-selected:font-medium\">{props.children}</span>\n          <span className=\"w-5 flex items-center text-sky-600 group-focus:text-white\">\n            {isSelected && <CheckIcon size=\"S\" />}\n          </span>\n        </>\n      )}\n    </ListBoxItem>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining File System Data Structure with Nested Children - TypeScript\nDESCRIPTION: This snippet initializes a static mock file system as a deeply nested array of objects, each representing files or directories. It is used as input data for the Tree component in React, featuring up to 4 levels of children. No external dependencies are required apart from TypeScript/JavaScript support. The filesystem is organized with key properties: 'id', 'name', and optional 'children', and is expected to be imported or present in the rendering scope.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/file-system.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport './tailwind.global.css';\n\nconst filesystem = [\n  // mock up a file system with 50 items total and nested children up to 4 levels deep\n  {'id': 'documents', name: 'Documents', children: [\n    {'id': 'photos', name: 'Photos', children: [\n      {'id': 'summer', name: 'Summer', children: [\n        {'id': 'beach', name: 'Beach'},\n        {'id': 'mountains', name: 'Mountains'},\n        {'id': 'forest', name: 'Forest'},\n        {'id': 'desert', name: 'Desert'}\n      ]},\n      {'id': 'winter', name: 'Winter', children: [\n        {'id': 'skiing', name: 'Skiing'},\n        {'id': 'snowboarding', name: 'Snowboarding'},\n        {'id': 'snowmobiling', name: 'Snowmobiling'},\n        {'id': 'snowshoeing', name: 'Snowshoeing'}\n      ]}\n    ]},\n    {'id': 'videos', name: 'Videos', children: [\n      {'id': 'family', name: 'Family'},\n      {'id': 'friends', name: 'Friends'},\n      {'id': 'pets', name: 'Pets'},\n      {'id': 'vacations', name: 'Vacations'}\n    ]},\n    {'id': 'music', name: 'Music', children: [\n      {'id': 'rock', name: 'Rock', children: [\n        {'id': 'classic', name: 'Classic'},\n        {'id': 'alternative', name: 'Alternative'},\n        {'id': 'punk', name: 'Punk'},\n        {'id': 'metal', name: 'Metal'}\n      ]},\n      {'id': 'pop', name: 'Pop', children: [\n        {'id': 'dance', name: 'Dance'},\n        {'id': 'hip-hop', name: 'Hip Hop'},\n        {'id': 'r&b', name: 'R&B'},\n        {'id': 'soul', name: 'Soul'}\n      ]}\n    ]},\n    {'id': 'movies', name: 'Movies', children: [\n      {'id': 'action', name: 'Action'},\n      {'id': 'comedy', name: 'Comedy'},\n      {'id': 'drama', name: 'Drama'},\n      {'id': 'horror', name: 'Horror'}\n    ]}\n  ]}\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Accessible Tabs with React Aria Components and Tailwind CSS\nDESCRIPTION: Defines the main `TabsExample` component which showcases an accessible tab interface using `Tabs`, `TabList`, `Tab`, and `TabPanel` from `react-aria-components`. It includes custom styled components `MyTab`, `MyTabPanel`, and `Article`, utilizing Tailwind CSS utility classes for layout and appearance. The example displays different article lists based on the selected tab (Blog, Releases, Docs).\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/category-tabs.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Tabs, TabList, Tab, TabPanel, Link} from 'react-aria-components';\nimport type {TabProps, TabPanelProps} from 'react-aria-components';\n\nfunction TabsExample() {\n  return (\n    <div className=\"bg-linear-to-r from-lime-600 to-emerald-600 py-8 px-2 sm:px-8 rounded-lg flex justify-center\">\n      <Tabs className=\"w-full max-w-[300px]\">\n        <TabList aria-label=\"Feeds\" className=\"flex space-x-1 rounded-full bg-green-900/40 bg-clip-padding p-1 border border-solid border-white/30\">\n          <MyTab id=\"blog\">Blog</MyTab>\n          <MyTab id=\"releases\">Releases</MyTab>\n          <MyTab id=\"docs\">Docs</MyTab>\n        </TabList>\n        <MyTabPanel id=\"blog\">\n          <div className=\"flex flex-col\">\n            <Article title=\"Taming the dragon: Accessible drag and drop\" summary=\"We are excited to announce the release of drag and drop support in React Aria and React Spectrum! This includes a suite of hooks for implementing drag and drop interactions, with support for both mouse and touch, as well as full parity for keyboard and screen reader input.\" />\n            <Article title=\"Date and Time Pickers for All\" summary=\"We are very excited to announce the release of the React Aria and React Spectrum date and time picker components! This includes a full suite of fully featured components and hooks including calendars, date and time fields, and range pickers, all with a focus on internationalization and accessibility. It also includes @internationalized/date, a brand new framework-agnostic library for locale-aware date and time manipulation.\" />\n            <Article title=\"Creating an accessible autocomplete experience\" summary=\"After many months of research, development, and testing, we’re excited to announce that the React Spectrum ComboBox component and React Aria useComboBox hook are now available! In this post we'll take a deeper look into some of the challenges we faced when building an accessible and mobile friendly ComboBox.\" />\n          </div>\n        </MyTabPanel>\n        <MyTabPanel id=\"releases\">\n          <div className=\"flex flex-col\">\n            <Article title=\"February 23, 2023 Release\" summary=\"In this release, we have added support for Node ESM to all of our packages. We have also been busy at work on our pre-releases and improving our focus management in collections.\" />\n            <Article title=\"December 16, 2022 Release\" summary=\"It is our last release of the year and we are happy to share a new TableView feature, now in beta. Using the new allowsResizing prop on a Column in TableView gives users the ability to dynamically adjust the width of that column. TableView column resizing supports mouse, keyboard, touch, and screen reader interactions to allow all users to take advantage of a customizable table.\" />\n            <Article title=\"November 15, 2022 Release\" summary=\"We are excited to announce the release of drag and drop support in React Aria and React Spectrum! This includes a suite of hooks for implementing drag and drop interactions. There is also an update to all Spectrum colors, aligning React Spectrum with the latest Spectrum designs. Finally, React Aria includes a new simplified API for overlays such as popovers and modals.\" />\n          </div>\n        </MyTabPanel>\n        <MyTabPanel id=\"docs\">\n          <div className=\"flex flex-col\">\n            <Article title=\"React Stately\" summary=\"A library of React Hooks that provides cross-platform state management for your design system.\" />\n            <Article title=\"React Aria\" summary=\"A library of React Hooks that provides accessible UI primitives for your design system.\" />\n            <Article title=\"React Spectrum\" summary=\"A React implementation of Spectrum, Adobe’s design system.\" />\n          </div>\n        </MyTabPanel>\n      </Tabs>\n    </div>\n  );\n}\n\nfunction MyTab(props: TabProps) {\n  return (\n    <Tab\n      {...props}\n      className={({isSelected}) => `\n        w-full rounded-full py-2.5 font-medium text-[1.1em] text-center cursor-default ring-black outline-hidden transition-colors focus-visible:ring-2\n        ${isSelected ? 'text-emerald-700 bg-white shadow-sm' : 'text-white hover:bg-white/10 pressed:bg-white/10'}\n      `} />\n  );\n}\n\nfunction MyTabPanel(props: TabPanelProps) {\n  return <TabPanel {...props} className=\"mt-2 text-gray-700 font-serif rounded-2xl bg-white p-2 shadow-sm ring-black outline-hidden focus-visible:ring-2\" />;\n}\n\nfunction Article({title, summary}: {title: string, summary: string}) {\n  return (\n    <Link href=\"#\" className=\"p-2 rounded-lg hover:bg-gray-100 pressed:bg-gray-100 text-[inherit] no-underline outline-hidden focus-visible:ring-2 ring-emerald-500\">\n      <h3 className=\"text-base mt-0 mb-0.5 font-semibold overflow-hidden text-ellipsis whitespace-nowrap\">{title}</h3>\n      <p className=\"text-sm m-0 overflow-hidden text-ellipsis line-clamp-2\">{summary}</p>\n    </Link>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Contact List Component with React Aria Components and Tailwind CSS\nDESCRIPTION: This snippet defines three React components: `ContactListExample`, `ContactSection`, and `Contact`. It uses `ListBox`, `ListBoxItem`, `ListBoxSection`, `Header`, `Collection`, and `Text` from `react-aria-components` to build an accessible contact list. Tailwind CSS utility classes are heavily used for styling, creating a layout with sticky headers, multiple selection behavior, and visual feedback for selected items. The component consumes the `favorites` and `people` data arrays.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/contact-list.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ListBox, ListBoxItem, ListBoxSection, Header, Collection, Text} from 'react-aria-components';\n\nfunction ContactListExample() {\n  return (\n    <div className=\"bg-linear-to-r from-blue-500 to-sky-500 p-8 rounded-lg flex justify-center\">\n      <ListBox aria-label=\"Contacts\" selectionMode=\"multiple\" selectionBehavior=\"replace\" className=\"w-72 max-h-[290px] overflow-auto outline-hidden bg-white text-gray-700 p-2 flex flex-col gap-2 rounded-lg shadow-sm scroll-pb-2 scroll-pt-7\">\n        <ContactSection title=\"Favorites\" items={favorites}>\n          {item => <Contact item={item} />}\n        </ContactSection>\n        <ContactSection title=\"All Contacts\" items={people}>\n          {item => <Contact item={item} />}\n        </ContactSection>\n      </ListBox>\n    </div>\n  );\n}\n\nfunction ContactSection({title, children, items}) {\n  return (\n    <ListBoxSection>\n      <Header className=\"sticky -top-2 bg-white z-10 font-bold font-serif px-2 mb-1 text-slate-700\">{title}</Header>\n      <Collection items={items}>\n        {children}\n      </Collection>\n    </ListBoxSection>\n  );\n}\n\nfunction Contact({item}) {\n  return (\n    <ListBoxItem id={item.id} textValue={item.name} className=\"group relative py-1 px-2 outline-hidden cursor-default grid grid-rows-2 grid-flow-col auto-cols-max gap-x-3 rounded-sm selected:bg-blue-500 text-slate-700 selected:text-white [&:has(+[data-selected])]:selected:rounded-b-none [&[data-selected]+[data-selected]]:rounded-t-none focus-visible:ring-2 ring-offset-2 ring-blue-500\">\n      <img src={item.avatar} alt=\"\" className=\"row-span-2 place-self-center h-8 w-8 rounded-full\" />\n      <Text slot=\"label\" className=\"font-semibold truncate\">{item.name}</Text>\n      <Text slot=\"description\" className=\"truncate text-sm text-slate-600 group-selected:text-white\">{item.username}</Text>\n      <div className=\"absolute left-12 right-2 bottom-0 h-px bg-gray-200 group-selected:bg-blue-400 [.group[data-selected]:has(+:not([data-selected]))_&]:hidden [.group:not([data-selected]):has(+[data-selected])_&]:hidden [.group[data-selected]:last-child_&]:hidden\" />\n    </ListBoxItem>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Using a Reusable Wrapper ComboBox in React Aria (TypeScript)\nDESCRIPTION: Defines a reusable ComboBox component (`MyComboBox`) and corresponding item renderer (`MyItem`) that encapsulate structure, styling, accessibility, and validation in React Aria with TypeScript. Leverages generic props, slot-based rendering, and composition to centralize behaviors across usages. Dependencies include 'react-aria-components' (for components and types), 'React', and styled CSS classes ('my-combobox-container', 'my-item'). Users specify options as children and may pass label, description, and error messages. Input props are typed for safety and extensibility. Example usage shows rendering with labeled items. Custom rendering, slots, and item state stylings are demonstrated. Inputs are option JSX or render functions, outputs are fully accessible ComboBox UIs. This pattern is recommended for enforcing consistent logic and styling throughout an application.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ComboBox.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {ComboBoxProps, ListBoxItemProps, ValidationResult} from 'react-aria-components';\nimport {Text, FieldError} from 'react-aria-components';\n\ninterface MyComboBoxProps<T extends object> extends Omit<ComboBoxProps<T>, 'children'> {\n  label?: string,\n  description?: string | null,\n  errorMessage?: string | ((validation: ValidationResult) => string),\n  children: React.ReactNode | ((item: T) => React.ReactNode)\n}\n\nfunction MyComboBox<T extends object>({label, description, errorMessage, children, ...props}: MyComboBoxProps<T>) {\n  return (\n    <ComboBox {...props}>\n      <Label>{label}</Label>\n      <div className=\"my-combobox-container\">\n        <Input />\n        <Button>▼</Button>\n      </div>\n      {description && <Text slot=\"description\">{description}</Text>}\n      <FieldError>{errorMessage}</FieldError>\n      <Popover>\n        <ListBox>\n          {children}\n        </ListBox>\n      </Popover>\n    </ComboBox>\n  );\n}\n\nfunction MyItem(props: ListBoxItemProps) {\n  return <ListBoxItem {...props} className={({isFocused, isSelected}) => `my-item ${isFocused ? 'focused' : ''} ${isSelected ? 'selected' : ''}`} />\n}\n\n<MyComboBox label=\"Ice cream flavor\">\n  <MyItem>Chocolate</MyItem>\n  <MyItem>Mint</MyItem>\n  <MyItem>Strawberry</MyItem>\n  <MyItem>Vanilla</MyItem>\n</MyComboBox>\n```\n\n----------------------------------------\n\nTITLE: Using Render Props for Dynamic Styling in React Aria Components\nDESCRIPTION: Demonstrates how to use render props to dynamically apply classes based on component states like selection status.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/styling.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<ListBoxItem className={({isSelected}) => isSelected ? 'selected' : 'unselected'}>\n  Item\n</ListBoxItem>\n```\n\n----------------------------------------\n\nTITLE: DatePicker Basic Implementation in React\nDESCRIPTION: A basic implementation of the DatePicker component showing the core components including Label, Group, DateInput, DateSegment, Button, Popover, Dialog, Calendar, CalendarGrid, and CalendarCell.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DatePicker.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {DatePicker, Label, Group, Popover, Dialog, Calendar, CalendarGrid, CalendarCell, Button, Heading, DateInput, DateSegment} from 'react-aria-components';\n\n<DatePicker>\n  <Label>Date</Label>\n  <Group>\n    <DateInput>\n      {segment => <DateSegment segment={segment} />}\n    </DateInput>\n    <Button>▼</Button>\n  </Group>\n  <Popover>\n    <Dialog>\n      <Calendar>\n        <header>\n          <Button slot=\"previous\">◀</Button>\n          <Heading />\n          <Button slot=\"next\">▶</Button>\n        </header>\n        <CalendarGrid>\n          {date => <CalendarCell date={date} />}\n        </CalendarGrid>\n      </Calendar>\n    </Dialog>\n  </Popover>\n</DatePicker>\n```\n\n----------------------------------------\n\nTITLE: Implementing Shipping Radio Group Component\nDESCRIPTION: Creates a radio group component for shipping options with custom styling using Tailwind CSS. Includes a main RadioGroup component and a ShippingOption subcomponent with conditional styling based on selection states.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/shipping-radio.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {RadioGroup, Radio, Label} from 'react-aria-components';\nimport CheckCircleIcon from '@spectrum-icons/workflow/CheckmarkCircle';\n\nfunction RadioGroupExample() {\n  return (\n    <div className=\"bg-linear-to-r from-blue-300 to-indigo-300 p-2 sm:p-8 rounded-lg flex justify-center\">\n      <RadioGroup className=\"flex flex-col gap-2 w-full max-w-[300px]\" defaultValue=\"Standard\">\n        <Label className=\"text-xl text-slate-900 font-semibold font-serif\">Shipping</Label>\n        <ShippingOption name=\"Standard\" time=\"4-10 business days\" price=\"$4.99\" />\n        <ShippingOption name=\"Express\" time=\"2-5 business days\" price=\"$15.99\" />\n        <ShippingOption name=\"Lightning\" time=\"1 business day\" price=\"$24.99\" />\n      </RadioGroup>\n    </div>\n  );\n}\n\nfunction ShippingOption({name, time, price}) {\n  return (\n    <Radio value={name} className={({isFocusVisible, isSelected, isPressed}) => `\n      group relative flex cursor-default rounded-lg px-4 py-3 shadow-lg outline-hidden bg-clip-padding border border-solid\n      ${isFocusVisible ? 'ring-2 ring-blue-600 ring-offset-1 ring-offset-white/80' : ''}\n      ${isSelected ? 'bg-blue-600 border-white/30 text-white' : 'border-transparent'}\n      ${isPressed && !isSelected ? 'bg-blue-50' : ''}\n      ${!isSelected && !isPressed ? 'bg-white' : ''}\n    `}>\n      <div className=\"flex w-full items-center justify-between gap-3\">\n        <div className=\"flex items-center shrink-0 text-blue-100 group-selected:text-white\">\n          <CheckCircleIcon size=\"M\" />\n        </div>\n        <div className=\"flex flex-1 flex-col\">\n          <div className=\"text-lg font-serif font-semibold text-gray-900 group-selected:text-white\">{name}</div>\n          <div className=\"inline text-gray-500 group-selected:text-sky-100\">\n            {time}\n          </div>\n        </div>\n        <div className=\"font-medium font-mono text-gray-900 group-selected:text-white\">{price}</div>\n      </div>\n    </Radio>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: ComboBox Component Structure and Anatomy\nDESCRIPTION: This code example demonstrates the full component structure of a ComboBox, showing how to compose it with Label, Input, Button, Popover, ListBox, and other components for descriptions and errors.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ComboBox.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ComboBox, Label, Input, Button, Popover, ListBox, ListBoxItem, ListBoxSection, Header, Text, FieldError} from 'react-aria-components';\n\n<ComboBox>\n  <Label />\n  <Input />\n  <Button />\n  <Text slot=\"description\" />\n  <FieldError />\n  <Popover>\n    <ListBox>\n      <ListBoxItem>\n        <Text slot=\"label\" />\n        <Text slot=\"description\" />\n      </ListBoxItem>\n      <ListBoxSection>\n        <Header />\n        <ListBoxItem />\n      </ListBoxSection>\n    </ListBox>\n  </Popover>\n</ComboBox>\n```\n\n----------------------------------------\n\nTITLE: Rendering Dynamic Tree Content in TSX\nDESCRIPTION: This snippet defines a `FileTree` component that renders a `Tree` using dynamic data provided via the `items` prop and a render function. It demonstrates recursive rendering of child items using the `Collection` component and the render function itself.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Tree.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example export=true\nimport type {TreeProps} from 'react-aria-components';\nimport {MyCheckbox} from './Checkbox';\n\nlet items = [\n  {id: 1, title: 'Documents', children: [\n    {id: 2, title: 'Project', children: [\n      {id: 3, title: 'Weekly Report', children: []}\n    ]}\n  ]},\n  {id: 4, title: 'Photos', children: [\n    {id: 5, title: 'Image 1', children: []},\n    {id: 6, title: 'Image 2', children: []}\n  ]}\n];\n\ninterface FileType {\n  id: number,\n  title: string,\n  children: FileType[]\n}\n\nfunction FileTree(props: TreeProps<FileType>) {\n  return (\n    <Tree\n      aria-label=\"Files\"\n      defaultExpandedKeys={[1, 4]}\n      /*- begin highlight -*/\n      items={items}\n      /*- end highlight -*/\n      selectionMode=\"multiple\"\n      {...props}>\n      {/*- begin highlight -*/}\n      {function renderItem(item) {\n        ///- end highlight -///\n        return (\n          <TreeItem textValue={item.title}>\n            <MyTreeItemContent>\n              {item.title}\n              <Button\n                aria-label=\"Info\"\n                onPress={() => alert(`Info for ${item.title}...`)}>\n                ⓘ\n              </Button>\n            </MyTreeItemContent>\n            <Collection items={item.children}>\n              {/*- begin highlight -*/}\n              {/* recursively render children */}\n              {renderItem}\n              {/*- end highlight -*/}\n            </Collection>\n          </TreeItem>\n        );\n      }}\n    </Tree>\n  )\n}\n\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Selection in Menu using React Aria Components in TypeScript/JSX\nDESCRIPTION: This React example demonstrates a Menu with multiple selection capability. It uses a controlled selection state array managed by React.useState, and updates the selection through onSelectionChange. Menu items are defined with unique ids. The MenuButton receives selectionMode set to 'multiple'. Requires React and React Aria Components.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Menu.mdx#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Selection} from 'react-aria-components';\\n\\nfunction Example() {\\n  let [selected, setSelected] = React.useState<Selection>(new Set(['sidebar', 'console']));\\n\\n  return (\\n    <>\\n      <MyMenuButton label=\\\"View\\\" selectionMode=\\\"multiple\\\" selectedKeys={selected} onSelectionChange={setSelected}>\\n        <MenuItem id='sidebar'>Sidebar</MenuItem>\\n        <MenuItem id='searchbar'>Searchbar</MenuItem>\\n        <MenuItem id='tools'>Tools</MenuItem>\\n        <MenuItem id='console'>Console</MenuItem>\\n      </MyMenuButton>\\n      <p>Current selection (controlled): {selected === 'all' ? 'all' : [...selected].join(', ')}</p>\\n    </>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Bidirectional Drag and Drop Between React Tables\nDESCRIPTION: This comprehensive example demonstrates how to implement bidirectional drag and drop between two tables, including reordering within the same table. It covers custom drag previews, data formatting, drop handling, and item removal from the source list.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Table.mdx#2025-04-23_snippet_42\n\nLANGUAGE: tsx\nCODE:\n```\nimport {isTextDropItem} from 'react-aria-components';\n\ninterface FileItem {\n  id: string,\n  name: string,\n  type: string\n}\n\ninterface DndTableProps {\n  initialItems: FileItem[],\n  'aria-label': string\n}\n\nfunction DndTable(props: DndTableProps) {\n  let list = useListData({\n    initialItems: props.initialItems\n  });\n\n  let { dragAndDropHooks } = useDragAndDrop({\n    renderDragPreview(items) {\n      return (\n        <div className=\"drag-preview\">\n          {items[0]['text/plain']}\n          <span className=\"badge\">{items.length}</span>\n        </div>\n      );\n    },\n    getItems(keys) {\n      return [...keys].map((key) => {\n        let item = list.getItem(key);\n        return {\n          'custom-app-type': JSON.stringify(item),\n          'text/plain': item.name\n        };\n      });\n    },\n    acceptedDragTypes: ['custom-app-type'],\n    getDropOperation: () => 'move',\n    async onInsert(e) {\n      let processedItems = await Promise.all(\n        e.items\n          .filter(isTextDropItem)\n          .map(async item => JSON.parse(await item.getText('custom-app-type')))\n      );\n      if (e.target.dropPosition === 'before') {\n        list.insertBefore(e.target.key, ...processedItems);\n      } else if (e.target.dropPosition === 'after') {\n        list.insertAfter(e.target.key, ...processedItems);\n      }\n    },\n    async onRootDrop(e) {\n      let processedItems = await Promise.all(\n        e.items\n          .filter(isTextDropItem)\n          .map(async item => JSON.parse(await item.getText('custom-app-type')))\n      );\n      list.append(...processedItems);\n    },\n    onReorder(e) {\n      if (e.target.dropPosition === 'before') {\n        list.moveBefore(e.target.key, e.keys);\n      } else if (e.target.dropPosition === 'after') {\n        list.moveAfter(e.target.key, e.keys);\n      }\n    },\n    onDragEnd(e) {\n      if (e.dropOperation === 'move' && !e.isInternal) {\n        list.remove(...e.keys);\n      }\n    }\n  });\n\n  return (\n    <Table\n      aria-label={props['aria-label']}\n      selectionMode=\"multiple\"\n      selectedKeys={list.selectedKeys}\n      onSelectionChange={list.setSelectedKeys}\n      dragAndDropHooks={dragAndDropHooks}>\n      <TableHeader>\n        <Column />\n        <Column><MyCheckbox slot=\"selection\" /></Column>\n        <Column>ID</Column>\n        <Column isRowHeader>Name</Column>\n        <Column>Type</Column>\n      </TableHeader>\n      <TableBody items={list.items} renderEmptyState={() => 'Drop items here'}>\n        {item => (\n          <Row>\n            <Cell><Button slot=\"drag\">≡</Button></Cell>\n            <Cell><MyCheckbox slot=\"selection\" /></Cell>\n            <Cell>{item.id}</Cell>\n            <Cell>{item.name}</Cell>\n            <Cell>{item.type}</Cell>\n          </Row>\n        )}\n      </TableBody>\n    </Table>\n  );\n}\n\n<div style={{display: 'flex', gap: 12, flexWrap: 'wrap'}}>\n  <DndTable\n    initialItems={[\n      { id: '1', type: 'file', name: 'Adobe Photoshop' },\n      { id: '2', type: 'file', name: 'Adobe XD' },\n      { id: '3', type: 'folder', name: 'Documents' },\n      { id: '4', type: 'file', name: 'Adobe InDesign' },\n      { id: '5', type: 'folder', name: 'Utilities' },\n      { id: '6', type: 'file', name: 'Adobe AfterEffects' }\n    ]}\n    aria-label=\"First Table\"\n  />\n  <DndTable\n    initialItems={[\n      { id: '7', type: 'folder', name: 'Pictures' },\n      { id: '8', type: 'file', name: 'Adobe Fresco' },\n      { id: '9', type: 'folder', name: 'Apps' },\n      { id: '10', type: 'file', name: 'Adobe Illustrator' },\n      { id: '11', type: 'file', name: 'Adobe Lightroom' },\n      { id: '12', type: 'file', name: 'Adobe Dreamweaver' }\n    ]}\n    aria-label=\"Second Table\"\n  />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Status Select Component Implementation\nDESCRIPTION: Implements a custom status select dropdown with Tailwind CSS styling. The component includes a button trigger, popover, and listbox with status items featuring color indicators and selection states.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/status-select.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Select, Label, Button, SelectValue, Popover, ListBox, ListBoxItem} from 'react-aria-components';\nimport type {ListBoxItemProps} from 'react-aria-components';\nimport ChevronUpDownIcon from '@spectrum-icons/workflow/ChevronUpDown';\nimport CheckIcon from '@spectrum-icons/workflow/Checkmark';\n\nfunction SelectExample() {\n  return (\n    <div className=\"bg-linear-to-tl from-amber-500 to-rose-700 p-8 sm:h-[250px] rounded-lg flex justify-center\">\n      <Select className=\"flex flex-col gap-1 w-[200px]\">\n        <Label className=\"text-white cursor-default\">Status</Label>\n        <Button className=\"flex items-center cursor-default rounded-lg border-0 bg-white/90 pressed:bg-white transition py-2 pl-5 pr-2 text-base text-left leading-normal shadow-md text-gray-700 focus:outline-hidden focus-visible:ring-2 ring-white ring-offset-2 ring-offset-rose-700\">\n          <SelectValue className=\"flex-1 truncate placeholder-shown:italic\" />\n          <ChevronUpDownIcon size=\"XS\" />\n        </Button>\n        <Popover className=\"max-h-60 w-(--trigger-width) overflow-auto rounded-md bg-white text-base shadow-lg ring-1 ring-black/5 entering:animate-in entering:fade-in exiting:animate-out exiting:fade-out\">\n          <ListBox className=\"outline-hidden p-1\">\n            <StatusItem textValue=\"Backlog\">\n              <Status className=\"bg-gray-500\" />\n              Backlog\n            </StatusItem>\n            <StatusItem textValue=\"In Progress\">\n              <Status className=\"bg-blue-500\" />\n              In Progress\n            </StatusItem>\n            <StatusItem textValue=\"In Review\">\n              <Status className=\"bg-yellow-500\" />\n              In Review\n            </StatusItem>\n            <StatusItem textValue=\"Done\">\n              <Status className=\"bg-green-500\" />\n              Done\n            </StatusItem>\n            <StatusItem textValue=\"Won't Do\">\n              <Status className=\"bg-red-500\" />\n              Won't Do\n            </StatusItem>\n          </ListBox>\n        </Popover>\n      </Select>\n    </div>\n  );\n}\n\nfunction StatusItem(props: ListBoxItemProps & {children: React.ReactNode}) {\n  return (\n    <ListBoxItem\n      {...props}\n      className=\"group flex items-center gap-2 cursor-default select-none py-2 px-4 outline-hidden rounded-sm text-gray-900 focus:bg-rose-600 focus:text-white\">\n      {({ isSelected }) => (\n        <>\n          <span className=\"flex-1 flex items-center gap-2 truncate font-normal group-selected:font-medium\">{props.children}</span>\n          <span className=\"w-5 flex items-center text-rose-600 group-focus:text-white\">\n            {isSelected && <CheckIcon size=\"S\" />}\n          </span>\n        </>\n      )}\n    </ListBoxItem>\n  );\n}\n\nfunction Status({className}: {className: string}) {\n  return <span className={`w-3 h-3 rounded-full border border-solid border-white ${className}`} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Sortable and Resizable Table with Custom Column Component\nDESCRIPTION: This example demonstrates how to use the custom ResizableTableColumn component to create a table with sortable and resizable columns. It includes sorting functionality and uses the React Aria Components Table structure.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Table.mdx#2025-04-23_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {SortDescriptor} from 'react-aria-components';\n\nfunction Example() {\n  let [sortDescriptor, setSortDescriptor] = React.useState<SortDescriptor>({\n    column: 'file',\n    direction: 'ascending'\n  });\n\n  let items = [\n    // ...\n    ///- begin collapse -////\n    {\n      id: 1,\n      file: '2022-Roadmap-Proposal-Revision-012822-Copy(2)',\n      size: '214 KB',\n      date: 'November 27, 2022 at 4:56PM'\n    },\n    {\n      id: 2,\n      file: '62259692_p0_master1200',\n      size: '120 KB',\n      date: 'January 27, 2021 at 1:56AM'\n    }\n    ///- end collapse -///\n  ].sort((a, b) => {\n    let d = a[sortDescriptor.column].localeCompare(b[sortDescriptor.column]);\n    return sortDescriptor.direction === 'descending' ? -d : d;\n  });\n\n  return (\n    <ResizableTableContainer>\n      <Table aria-label=\"Table with resizable columns\" sortDescriptor={sortDescriptor} onSortChange={setSortDescriptor}>\n        <TableHeader>\n          <ResizableTableColumn id=\"file\" isRowHeader allowsSorting>File Name</ResizableTableColumn>\n          <ResizableTableColumn id=\"size\" allowsSorting>Size</ResizableTableColumn>\n          <ResizableTableColumn id=\"date\" allowsSorting>Date Modified</ResizableTableColumn>\n        </TableHeader>\n        <TableBody items={items}>\n          {item => (\n            <Row>\n              <Cell>{item.file}</Cell>\n              <Cell>{item.size}</Cell>\n              <Cell>{item.date}</Cell>\n            </Row>\n          )}\n        </TableBody>\n      </Table>\n    </ResizableTableContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing an Action Menu with React Aria Components and Tailwind CSS\nDESCRIPTION: Provides a complete example of an Action Menu component using React Aria Components. It utilizes `MenuTrigger`, `Button`, `Popover`, `Menu`, `MenuItem`, and `Separator` to build the structure and functionality. Tailwind CSS classes are applied directly for styling, including animations managed by the `tailwindcss-animate` plugin (e.g., `entering:`, `exiting:` classes). A custom `ActionItem` component wraps `MenuItem` for consistent styling.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/action-menu.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {MenuTrigger, Button, Popover, Menu, MenuItem, Separator} from 'react-aria-components';\nimport type {MenuItemProps} from 'react-aria-components';\nimport RailIcon from '@spectrum-icons/workflow/Rail';\n\nfunction MenuExample() {\n  return (\n    <div className=\"bg-linear-to-r to-blue-500 from-violet-500 p-8 h-[250px] rounded-lg\">\n      <MenuTrigger>\n        <Button aria-label=\"Menu\" className=\"inline-flex items-center justify-center rounded-md bg-black/20 bg-clip-padding border border-white/20 px-3 py-2 text-white hover:bg-black/30 pressed:bg-black/40 transition-colors cursor-default outline-hidden focus-visible:ring-2 focus-visible:ring-white/75\"><RailIcon size=\"S\" /></Button>\n        <Popover className=\"p-1 w-56 overflow-auto rounded-md bg-white shadow-lg ring-1 ring-black/5 entering:animate-in entering:fade-in entering:zoom-in-95 exiting:animate-out exiting:fade-out exiting:zoom-out-95 fill-mode-forwards origin-top-left\">\n          <Menu className=\"outline-hidden\">\n            <ActionItem id=\"new\">New…</ActionItem>\n            <ActionItem id=\"open\">Open…</ActionItem>\n            <Separator className=\"bg-gray-300 h-[1px] mx-3 my-1\" />\n            <ActionItem id=\"save\">Save</ActionItem>\n            <ActionItem id=\"save-as\">Save as…</ActionItem>\n            <Separator className=\"bg-gray-300 h-[1px] mx-3 my-1\" />\n            <ActionItem id=\"print\">Print…</ActionItem>\n          </Menu>\n        </Popover>\n      </MenuTrigger>\n    </div>\n  );\n}\n\nfunction ActionItem(props: MenuItemProps) {\n  return <MenuItem {...props} className=\"group flex w-full items-center rounded-md px-3 py-2 box-border outline-hidden cursor-default text-gray-900 focus:bg-violet-500 focus:text-white\" />;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Reusable Select Component in React Aria\nDESCRIPTION: This snippet demonstrates how to create a reusable Select component wrapper using React Aria components. It includes handling for labels, descriptions, error messages, and custom styling for items.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Select.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {SelectProps, ListBoxItemProps, ValidationResult} from 'react-aria-components';\nimport {Text, FieldError} from 'react-aria-components';\n\ninterface MySelectProps<T extends object> extends Omit<SelectProps<T>, 'children'> {\n  label?: string,\n  description?: string,\n  errorMessage?: string | ((validation: ValidationResult) => string),\n  items?: Iterable<T>,\n  children: React.ReactNode | ((item: T) => React.ReactNode)\n}\n\nexport function MySelect<T extends object>({label, description, errorMessage, children, items, ...props}: MySelectProps<T>) {\n  return (\n    <Select {...props}>\n      <Label>{label}</Label>\n      <Button>\n        <SelectValue />\n        <span aria-hidden=\"true\">▼</span>\n      </Button>\n      {description && <Text slot=\"description\">{description}</Text>}\n      <FieldError>{errorMessage}</FieldError>\n      <Popover>\n        <ListBox items={items}>\n          {children}\n        </ListBox>\n      </Popover>\n    </Select>\n  );\n}\n\nexport function MyItem(props: ListBoxItemProps) {\n  return <ListBoxItem {...props} className={({isFocused, isSelected}) => `my-item ${isFocused ? 'focused' : ''} ${isSelected ? 'selected' : ''}`} />\n}\n\n<MySelect label=\"Ice cream flavor\">\n  <MyItem>Chocolate</MyItem>\n  <MyItem>Mint</MyItem>\n  <MyItem>Strawberry</MyItem>\n  <MyItem>Vanilla</MyItem>\n</MySelect>\n```\n\n----------------------------------------\n\nTITLE: Implementing the Async Image Grid Component (TypeScript)\nDESCRIPTION: This React component demonstrates an asynchronous image grid. It uses `useAsyncList` from `react-stately` to fetch image data from the Unsplash API. The images are displayed in a `ListBox` from `react-aria-components`, allowing multiple selections. A custom `ProgressCircle` component, built using `ProgressBar`, indicates the loading state. Styling is primarily handled by Tailwind CSS classes.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/image-grid.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ListBox, ListBoxItem, Text, ProgressBar} from 'react-aria-components';\nimport {useAsyncList} from 'react-stately';\nimport CheckCircleIcon from '@spectrum-icons/workflow/CheckmarkCircle';\n\ntype Item = {\n  user: { name: string },\n  urls: { regular: string },\n  alt_description: string\n};\n\nfunction ImageGridExample() {\n  let list = useAsyncList<Item, number>({\n    async load({ signal, cursor }) {\n      let page = cursor || 1;\n      let res = await fetch(\n        `https://api.unsplash.com/photos?page=${page}&per_page=25&client_id=AJuU-FPh11hn7RuumUllp4ppT8kgiLS7LtOHp_sp4nc`,\n        { signal }\n      );\n      let items = await res.json();\n      return { items, cursor: page + 1 };\n    }\n  });\n\n  let renderEmptyState = () => {\n    if (list.isLoading) {\n      return <ProgressCircle />;\n    }\n  };\n\n  return (\n    <div className=\"bg-linear-to-r from-sky-500 to-teal-500 p-2 sm:p-8 rounded-lg flex justify-center\">\n      <ListBox aria-label=\"Images\" items={list.items} selectionMode=\"multiple\" layout=\"grid\" renderEmptyState={renderEmptyState} className=\"overflow-auto outline-hidden bg-white rounded-lg shadow-sm p-2 h-[350px] w-full max-w-[372px] grid grid-cols-3 gap-3 empty:flex\">\n        {item => (\n          <ListBoxItem textValue={item.user.name} className=\"relative rounded-sm outline-hidden group cursor-default\">\n            <img src={item.urls.regular} alt={item.alt_description} className=\"h-[80px] w-full object-cover rounded-sm group-selected:ring-2 group-focus-visible:ring-4 group-selected:group-focus-visible:ring-4 ring-offset-2 ring-sky-600\" />\n            <Text slot=\"label\" className=\"text-[11px] text-gray-700 font-semibold overflow-hidden text-ellipsis whitespace-nowrap max-w-full block mt-1\">{item.user.name}</Text>\n            <div className=\"absolute top-2 left-2 text-sky-800 rounded-full leading-0 bg-white border border-white border-solid hidden group-selected:block\">\n              <CheckCircleIcon size=\"S\" />\n            </div>\n          </ListBoxItem>\n        )}\n      </ListBox>\n    </div>\n  );\n}\n\nfunction ProgressCircle() {\n  return (\n    <ProgressBar aria-label=\"Loading…\" isIndeterminate className=\"flex items-center justify-center w-full\">\n      <svg className=\"animate-spin h-5 w-5 text-sky-800\" fill=\"none\" viewBox=\"0 0 24 24\">\n        <circle className=\"opacity-25 stroke-current stroke-[4px]\" cx=\"12\" cy=\"12\" r=\"10\" />\n        <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n      </svg>\n    </ProgressBar>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Select Component in React\nDESCRIPTION: This example demonstrates how to create a basic Select component using React Aria Components. It includes a label, button with selected value, and a popover containing a list of options.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Select.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Select, SelectValue, Label, Button, Popover, ListBox, ListBoxItem} from 'react-aria-components';\n\n<Select>\n  <Label>Favorite Animal</Label>\n  <Button>\n    <SelectValue />\n    <span aria-hidden=\"true\">▼</span>\n  </Button>\n  <Popover>\n    <ListBox>\n      <ListBoxItem>Aardvark</ListBoxItem>\n      <ListBoxItem>Cat</ListBoxItem>\n      <ListBoxItem>Dog</ListBoxItem>\n      <ListBoxItem>Kangaroo</ListBoxItem>\n      <ListBoxItem>Panda</ListBoxItem>\n      <ListBoxItem>Snake</ListBoxItem>\n    </ListBox>\n  </Popover>\n</Select>\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Loading in ListBox\nDESCRIPTION: Demonstrates how to use useAsyncList hook to load data asynchronously from an API into a ListBox component.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ListBox.mdx#2025-04-23_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nfunction AsyncLoadingExample() {\n  let list = useAsyncList<Character>({\n    async load({signal, filterText}) {\n      let res = await fetch(\n        `https://pokeapi.co/api/v2/pokemon`,\n        {signal}\n      );\n      let json = await res.json();\n\n      return {\n        items: json.results\n      };\n    }\n  });\n\n  return (\n    <ListBox aria-label=\"Pick a Pokemon\" items={list.items} selectionMode=\"single\">\n      {(item) => <ListBoxItem id={item.name}>{item.name}</ListBoxItem>}\n    </ListBox>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: FieldGroup Component with Context\nDESCRIPTION: Implementation of a FieldGroup component using NumberFieldContext for shared readonly state.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/NumberField.mdx#2025-04-23_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nimport {NumberFieldContext} from 'react-aria-components';\n\ninterface FieldGroupProps {\n  title?: string,\n  children?: React.ReactNode,\n  isReadOnly?: boolean\n}\n\nfunction FieldGroup({title, children, isReadOnly}: FieldGroupProps) {\n  return (\n    <fieldset>\n      <legend>{title}</legend>\n      <NumberFieldContext.Provider value={{isReadOnly}}>\n        {children}\n      </NumberFieldContext.Provider>\n    </fieldset>\n  );\n}\n\n<FieldGroup title=\"Dimensions\" isReadOnly>\n  <MyNumberField label=\"Width\" defaultValue={1024} />\n  <MyNumberField label=\"Height\" defaultValue={768} />\n</FieldGroup>\n```\n\n----------------------------------------\n\nTITLE: Implementing Swipeable List Item with Framer Motion in React\nDESCRIPTION: This code implements a swipeable list item that changes behavior based on selection mode. In normal mode, users can swipe to reveal a delete button or swipe further to delete the item. In selection mode, checkboxes appear for multi-select functionality.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/ios-list.mdx#2025-04-23_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\n// Take item out of the flow if it is being removed.\nstyle={{ position: isPresent ? \"relative\" : \"absolute\" }}\n>\n  {/* @ts-ignore - Framer Motion's types don't handle functions properly. */}\n  {({ selectionMode, isSelected }) => (\n    // Content of the item can be swiped to reveal the delete button, or fully swiped to delete.\n    <motion.div\n      ref={ref}\n      style={{ x, \"--x\": xPx } as CSSProperties}\n      className=\"flex items-center\"\n      drag={selectionMode === \"none\" ? \"x\" : undefined}\n      dragConstraints={{ right: 0 }}\n      onDragEnd={(e, { offset }) => {\n        // If the user dragged past 80% of the width, remove the item\n        // otherwise animate back to the nearest snap point.\n        let v = offset.x > -20 ? 0 : -100;\n        if (x.get() < -ref.current.offsetWidth * 0.8) {\n          v = -ref.current.offsetWidth;\n          onRemove();\n        }\n        animate(x, v, { ...inertiaTransition, min: v, max: v });\n      }}\n      onDragStart={() => {\n        // Cancel react-aria press event when dragging starts.\n        document.dispatchEvent(new PointerEvent(\"pointercancel\"));\n      }}\n    >\n      {selectionMode === \"multiple\" && (\n        <SelectionCheckmark isSelected={isSelected} />\n      )}\n      <motion.div\n        layout\n        layoutDependency={selectionMode}\n        transition={{ duration: 0.25 }}\n        className=\"relative flex items-center px-4 py-2 z-10\"\n      >\n        {children}\n      </motion.div>\n      {selectionMode === \"none\" && (\n        <Button\n          className=\"bg-red-600 pressed:bg-red-700 cursor-default text-lg outline-hidden border-none transition-colors text-white flex items-center absolute top-0 left-[100%] py-2 h-full z-0 isolate focus-visible:outline focus-visible:outline-blue-600 focus-visible:-outline-offset-2\"\n          style={{\n            // Calculate the size of the button based on the drag position,\n            // which is stored in a CSS variable above.\n            width: \"max(100px, calc(-1 * var(--x)))\",\n            justifyContent: align\n          }}\n          onPress={onRemove}\n          // Move the button into view when it is focused with the keyboard\n          // (e.g. via the arrow keys).\n          onFocus={() => x.set(-100)}\n          onBlur={() => x.set(0)}\n        >\n          <motion.span\n            initial={false}\n            className=\"px-4\"\n            animate={{\n              // Whenever the alignment changes, perform a keyframe animation\n              // between the previous position and new position. This is done\n              // by calculating a transform for the previous alignment and\n              // animating it back to zero.\n              transform:\n                align === \"start\"\n                  ? [\"translateX(calc(-100% - var(--x)))\", \"translateX(0)\"]\n                  : [\"translateX(calc(100% + var(--x)))\", \"translateX(0)\"]\n            }}\n          >\n            Delete\n          </motion.span>\n        </Button>\n      )}\n    </motion.div>\n  )}\n</MotionItem>\n```\n\n----------------------------------------\n\nTITLE: Composing a Table with Selection, Drag, and Resizable Columns - React Aria Components - TypeScript\nDESCRIPTION: This snippet demonstrates how to compose a table with resizable columns, selection checkboxes, and drag functionality using React Aria Components. It imports and utilizes Table, TableHeader, TableBody, Column, Row, Cell, Button, Checkbox, ResizableTableContainer, and ColumnResizer components. Required dependencies are the 'react-aria-components' library and TypeScript/React setup. Table elements are structured to support accessibility features such as selection and drag handles, while column resizers enable resizing functionality. The table supports multiple advanced accessibility features out-of-the-box.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Table.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Table, TableHeader, TableBody, Column, Row, Cell, Button, Checkbox, ResizableTableContainer, ColumnResizer} from 'react-aria-components';\n\n<ResizableTableContainer>\n  <Table>\n    <TableHeader>\n      <Column />\n      <Column><Checkbox slot=\"selection\" /></Column>\n      <Column><ColumnResizer /></Column>\n      <Column>\n        <Column />\n        <Column />\n      </Column>\n    </TableHeader>\n    <TableBody>\n      <Row>\n        <Cell><Button slot=\"drag\" /></Cell>\n        <Cell><Checkbox slot=\"selection\" /></Cell>\n        <Cell />\n        <Cell />\n        <Cell />\n      </Row>\n    </TableBody>\n  </Table>\n</ResizableTableContainer>\n\n```\n\n----------------------------------------\n\nTITLE: Styling React Aria Components Using Data Attributes\nDESCRIPTION: Shows how to target different states of React Aria components using data attributes as CSS selectors, which function like custom CSS pseudo classes.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/styling.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ListBoxItem[data-selected] {\n  /* ... */\n}\n\n.react-aria-ListBoxItem[data-focused] {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Selection in React Aria ListBox\nDESCRIPTION: This snippet shows how to implement multiple selection in a ListBox component. It uses the selectionMode prop and demonstrates controlled selection with state management.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ListBox.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {Selection} from 'react-aria-components';\n\nfunction Example() {\n  let [selected, setSelected] = React.useState<Selection>(new Set(['cheese']));\n\n  return (\n    <>\n      <ListBox\n        aria-label=\"Sandwich contents\"\n        selectionMode=\"multiple\"\n        selectedKeys={selected}\n        onSelectionChange={setSelected}\n      >\n        <ListBoxItem id=\"lettuce\">Lettuce</ListBoxItem>\n        <ListBoxItem id=\"tomato\">Tomato</ListBoxItem>\n        <ListBoxItem id=\"cheese\">Cheese</ListBoxItem>\n        <ListBoxItem id=\"tuna\">Tuna Salad</ListBoxItem>\n        <ListBoxItem id=\"egg\">Egg Salad</ListBoxItem>\n        <ListBoxItem id=\"ham\">Ham</ListBoxItem>\n      </ListBox>\n      <p>Current selection (controlled): {selected === 'all' ? 'all' : [...selected].join(', ')}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Dialog with Modal in React Aria Components\nDESCRIPTION: This example demonstrates how to create a basic dialog using the Dialog, Modal, and DialogTrigger components. It includes a sign-up form with input fields and a submit button.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Dialog.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {DialogTrigger, Modal, Dialog, Button, Heading, TextField, Label, Input} from 'react-aria-components';\n\n<DialogTrigger>\n  <Button>Sign up…</Button>\n  <Modal>\n    <Dialog>\n      <form>\n        <Heading slot=\"title\">Sign up</Heading>\n        <TextField autoFocus>\n          <Label>First Name</Label>\n          <Input />\n        </TextField>\n        <TextField>\n          <Label>Last Name</Label>\n          <Input />\n        </TextField>\n        <Button slot=\"close\" style={{marginTop: 8}}>\n          Submit\n        </Button>\n      </form>\n    </Dialog>\n  </Modal>\n</DialogTrigger>\n```\n\n----------------------------------------\n\nTITLE: Rendering Interactive File System Tree with Multiple Selection - React Aria Components (TypeScript)\nDESCRIPTION: This implementation uses React Aria Components (Tree, TreeItem, TreeItemContent, Collection) and a custom Chevron icon to display a visually styled, accessible file system tree. It integrates Tailwind CSS for custom styling and supports multi-selection, keyboard navigation, and item expansion. The Tree expects the 'filesystem' data to be in scope, requires react-aria-components and @spectrum-icons installed, and should be rendered in a React app where Tailwind CSS is configured. The component uses render functions for deep nesting and customizes focus and selection visuals.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/file-system.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {Button, Collection, Tree, TreeItem, TreeItemContent} from 'react-aria-components';\nimport ChevronIcon from '@spectrum-icons/ui/ChevronRightMedium';\n\nfunction FileSystemExample() {\n  return (\n    <div className=\"bg-linear-to-r from-indigo-500 to-violet-500 p-8 rounded-lg flex items-center justify-center\">\n      <Tree aria-label=\"File system\" selectionMode=\"multiple\" selectionBehavior=\"replace\" items={filesystem} defaultExpandedKeys={['documents']} className={`\n        border-separate border-spacing-0 w-60 h-100 bg-slate-900\n        overflow-auto rounded-lg shadow-lg`}>\n          {function renderItem(item) {\n            return (\n              <TreeItem\n                textValue={item.name}\n                className={`selected:bg-slate-500 text-white\n                  cursor-default group outline-hidden focus-visible:outline focus-visible:outline-2\n                  focus-visible:outline-slate-600 focus-visible:-outline-offset-4\n                  selected:focus-visible:outline-white`}>\n                <TreeItemContent>\n                  {({hasChildItems}) => (\n                    <div className=\"flex items-center space-x-2 py-2 ps-[calc(calc(var(--tree-item-level)_-_1)_*_calc(var(--spacing)_*_3))]\">\n                      {hasChildItems ? <Button slot=\"chevron\" className={`shrink-0 w-8 h-8\n                        group-data-[expanded=true]:rotate-90 transition-rotate duration-200\n                        inline-flex items-center justify-center bg-transparent border-0 me-0\n                        cursor-default outline-hidden text-white`}><ChevronIcon /></Button> : <div className=\"shrink-0 w-8 h-8\" />}\n                      <div>{item.name}</div>\n                    </div>\n                  )}\n                </TreeItemContent>\n                <Collection items={item.children}>\n                  {renderItem}\n                </Collection>\n              </TreeItem>\n            )\n          }}\n        </Tree>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Styling React Aria Components with Default Class Names\nDESCRIPTION: Uses the default class names provided by React Aria Components following the 'react-aria-ComponentName' naming convention to apply styling with standard CSS.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/styling.mdx#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Select {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Menu Component Structure\nDESCRIPTION: Example showing the complete structure of a menu component including sections, separators, and text elements.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Menu.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {MenuTrigger, Button, Popover, Menu, MenuItem, MenuSection, Separator, Header, Text, Keyboard} from 'react-aria-components';\n\n<MenuTrigger>\n  <Button />\n  <Popover>\n    <Menu>\n      <MenuItem>\n        <Text slot=\"label\" />\n        <Text slot=\"description\" />\n        <Keyboard />\n      </MenuItem>\n      <Separator />\n      <MenuSection>\n        <Header />\n        <MenuItem />\n      </MenuSection>\n    </Menu>\n  </Popover>\n</MenuTrigger>\n```\n\n----------------------------------------\n\nTITLE: Form Validation Implementation\nDESCRIPTION: Shows form validation with custom validation errors and ARIA validation behavior.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Form.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Form validationBehavior=\"aria\">\n  <TextField\n    name=\"username\"\n    defaultValue=\"admin\"\n    isRequired\n    validate={value => value === 'admin' ? 'Nice try.' : null}>\n    <Label>Username</Label>\n    <Input />\n    <FieldError />\n  </TextField>\n  <Button type=\"submit\">Submit</Button>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Implementing an RGBA Color Picker using ColorSlider in TSX\nDESCRIPTION: This React component demonstrates how to create an RGBA color picker using four `MyColorSlider` components (presumably wrappers around `ColorSlider`). Each slider is bound to a specific channel (red, green, blue, alpha) and controlled by a shared color state initialized using `parseColor` from a hex value. Changes to any slider update the shared state, synchronizing all sliders.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorSlider.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [color, setColor] = React.useState(parseColor('#ff00ff'));\n\n  return (\n    <>\n      <MyColorSlider channel=\"red\" value={color} onChange={setColor} />\n      <MyColorSlider channel=\"green\" value={color} onChange={setColor} />\n      <MyColorSlider channel=\"blue\" value={color} onChange={setColor} />\n      <MyColorSlider channel=\"alpha\" value={color} onChange={setColor} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Loading in Select\nDESCRIPTION: Demonstrates how to use useAsyncList hook to handle asynchronous data loading in a Select component.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Select.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useAsyncList} from '@react-stately/data';\n\ninterface Character {\n  name: string\n}\n\nfunction AsyncLoadingExample() {\n  let list = useAsyncList<Character>({\n    async load({signal, filterText}) {\n      let res = await fetch(\n        `https://pokeapi.co/api/v2/pokemon`,\n        {signal}\n      );\n      let json = await res.json();\n\n      return {\n        items: json.results\n      };\n    }\n  });\n\n  return (\n    <MySelect label=\"Pick a Pokemon\" items={list.items}>\n      {(item) => <ListBoxItem id={item.name}>{item.name}</ListBoxItem>}\n    </MySelect>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Reusable DateRangePicker Wrapper in React\nDESCRIPTION: This snippet demonstrates how to create a reusable wrapper component for DateRangePicker, incorporating labels, descriptions, and error handling. It uses React Aria Components and handles various props for customization.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DateRangePicker.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {DateRangePickerProps, DateValue, ValidationResult} from 'react-aria-components';\nimport {Text, FieldError} from 'react-aria-components';\n\ninterface MyDateRangePickerProps<T extends DateValue> extends DateRangePickerProps<T> {\n  label?: string,\n  description?: string,\n  errorMessage?: string | ((validation: ValidationResult) => string)\n}\n\nfunction MyDateRangePicker<T extends DateValue>({label, description, errorMessage, firstDayOfWeek, ...props}: MyDateRangePickerProps<T>) {\n  return (\n    <DateRangePicker {...props}>\n      <Label>{label}</Label>\n      <Group>\n        <DateInput slot=\"start\">\n          {segment => <DateSegment segment={segment} />}\n        </DateInput>\n        <span aria-hidden=\"true\">–</span>\n        <DateInput slot=\"end\">\n          {segment => <DateSegment segment={segment} />}\n        </DateInput>\n        <Button>▼</Button>\n      </Group>\n      {description && <Text slot=\"description\">{description}</Text>}\n      <FieldError>{errorMessage}</FieldError>\n      <Popover>\n        <Dialog>\n          <RangeCalendar firstDayOfWeek={firstDayOfWeek}>\n            <header>\n              <Button slot=\"previous\">◀</Button>\n              <Heading />\n              <Button slot=\"next\">▶</Button>\n            </header>\n            <CalendarGrid>\n              {date => <CalendarCell date={date} />}\n            </CalendarGrid>\n          </RangeCalendar>\n        </Dialog>\n      </Popover>\n    </DateRangePicker>\n  );\n}\n\n<MyDateRangePicker label=\"Event date\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Form Implementation with TextField in React Aria\nDESCRIPTION: Demonstrates basic usage of Form component with email input field and submit button.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Form.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Form, TextField, Label, Input, FieldError, Button} from 'react-aria-components';\n\n<Form>\n  <TextField name=\"email\" type=\"email\" isRequired>\n    <Label>Email</Label>\n    <Input />\n    <FieldError />\n  </TextField>\n  <Button type=\"submit\">Submit</Button>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Complete DatePicker Anatomy with Supporting Elements\nDESCRIPTION: A comprehensive example showing the complete anatomy of the DatePicker component with all supporting elements including description text and error messages, demonstrating the full component structure.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DatePicker.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {DatePicker, Label, Group, Popover, Dialog, Calendar, CalendarGrid, CalendarGridHeader, CalendarHeaderCell, CalendarGridBody, CalendarCell, Button, Heading, DateInput, DateSegment, Text, FieldError} from 'react-aria-components';\n\n<DatePicker>\n  <Label />\n  <Group>\n    <DateInput>\n      {segment => <DateSegment segment={segment} />}\n    </DateInput>\n    <Button />\n  </Group>\n  <Text slot=\"description\" />\n  <FieldError />\n  <Popover>\n    <Dialog>\n      <Calendar>\n        <Button slot=\"previous\" />\n        <Heading />\n        <Button slot=\"next\" />\n        <CalendarGrid>\n          <CalendarGridHeader>\n            {day => <CalendarHeaderCell />}\n          </CalendarGridHeader>\n          <CalendarGridBody>\n            {date => <CalendarCell date={date} />}\n          </CalendarGridBody>\n        </CalendarGrid>\n        <Text slot=\"errorMessage\" />\n      </Calendar>\n    </Dialog>\n  </Popover>\n</DatePicker>\n```\n\n----------------------------------------\n\nTITLE: Creating a Menu with Static Sections using React Aria Components in TypeScript/JSX\nDESCRIPTION: This React example creates a menu grouped into sections using MenuSection and Header components from React Aria Components. Each section contains its separate set of MenuItems, and the menu is statically defined in JSX. MyMenuButton receives a label prop. Requires module imports from react-aria-components.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Menu.mdx#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport {MenuSection, Header} from 'react-aria-components';\\n\\n<MyMenuButton label=\\\"Actions\\\">\\n  <MenuSection>\\n    <Header>Styles</Header>\\n    <MenuItem>Bold</MenuItem>\\n    <MenuItem>Underline</MenuItem>\\n  </MenuSection>\\n  <MenuSection>\\n    <Header>Align</Header>\\n    <MenuItem>Left</MenuItem>\\n    <MenuItem>Middle</MenuItem>\\n    <MenuItem>Right</MenuItem>\\n  </MenuSection>\\n</MyMenuButton>\\n\n```\n\n----------------------------------------\n\nTITLE: Adding Form Validation to ComboBox in React Aria Components\nDESCRIPTION: This example shows how to implement validation for a ComboBox using the isRequired prop and FieldError component to display validation errors. The form will validate that a value has been selected before submission.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ComboBox.mdx#2025-04-23_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Form, FieldError} from 'react-aria-components';\n\n<Form>\n  <ComboBox name=\"animal\" isRequired>\n    <Label>Favorite Animal</Label>\n    <div>\n      <Input />\n      <Button>▼</Button>\n    </div>\n    <FieldError />\n    <Popover>\n      <ListBox>\n        <ListBoxItem>Aardvark</ListBoxItem>\n        <ListBoxItem>Cat</ListBoxItem>\n        <ListBoxItem>Dog</ListBoxItem>\n        <ListBoxItem>Kangaroo</ListBoxItem>\n        <ListBoxItem>Panda</ListBoxItem>\n        <ListBoxItem>Snake</ListBoxItem>\n      </ListBox>\n    </Popover>\n  </ComboBox>\n  <Button type=\"submit\">Submit</Button>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Basic Calendar Component Implementation in React Aria Components\nDESCRIPTION: A simple example showing how to implement a Calendar component with Heading, Button, CalendarGrid, and CalendarCell components from react-aria-components.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Calendar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Calendar, Heading, Button, CalendarGrid, CalendarCell} from 'react-aria-components';\n\n<Calendar aria-label=\"Appointment date\">\n  <header>\n    <Button slot=\"previous\">◀</Button>\n    <Heading />\n    <Button slot=\"next\">▶</Button>\n  </header>\n  <CalendarGrid>\n    {date => <CalendarCell date={date} />}\n  </CalendarGrid>\n</Calendar>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Controlled Slider (Multi-Thumb) in TSX\nDESCRIPTION: Shows how to create a controlled multi-thumb (range) Slider. The state variable (`value`) holds an array of numbers representing the values of each thumb. The `onChange` handler updates this array state. The `MySlider` wrapper component is used, along with `thumbLabels` for accessibility.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Slider.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [value, setValue] = React.useState([25, 75]);\n  return (\n    <>\n      <MySlider<number[]>\n        label=\"Range\"\n        thumbLabels={['start', 'end']}\n        value={value}\n        onChange={setValue} />\n      <p>Current value: {value.join(' – ')}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Animated Tabs Component Implementation\nDESCRIPTION: Complete implementation of swipeable tabs using React Aria Components and Framer Motion. Includes scroll position tracking, tab selection animation, and responsive behavior.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/swipeable-tabs.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Tabs,\n  TabList,\n  Tab,\n  TabPanel,\n  Collection\n} from \"react-aria-components\";\nimport { motion, animate, useScroll, useTransform, useMotionValueEvent } from \"framer-motion\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\n\nlet tabs = [\n  { id: \"world\", label: \"World\" },\n  { id: \"ny\", label: \"N.Y.\" },\n  { id: \"business\", label: \"Business\" },\n  { id: \"arts\", label: \"Arts\" },\n  { id: \"science\", label: \"Science\" }\n];\n\nfunction AnimatedTabs() {\n  let [selectedKey, setSelectedKey] = useState(tabs[0].id);\n\n  let tabListRef = useRef(null);\n  let tabPanelsRef = useRef(null);\n\n  let { scrollXProgress } = useScroll({\n    container: tabPanelsRef\n  });\n\n  let [tabElements, setTabElements] = useState([]);\n  useEffect(() => {\n    if (tabElements.length === 0) {\n      let tabs = tabListRef.current.querySelectorAll(\"[role=tab]\");\n      setTabElements(tabs);\n    }\n  }, [tabElements]);\n\n  let getIndex = useCallback(\n    (x) => Math.max(0, Math.floor((tabElements.length - 1) * x)),\n    [tabElements]\n  );\n\n  let transform = (x, property) => {\n    if (!tabElements.length) return 0;\n\n    let index = getIndex(x);\n\n    let difference =\n      index < tabElements.length - 1\n        ? tabElements[index + 1][property] - tabElements[index][property]\n        : tabElements[index].offsetWidth;\n\n    let percent = (tabElements.length - 1) * x - index;\n\n    let value = tabElements[index][property] + difference * percent;\n\n    return value || 0.1;\n  };\n\n  let x = useTransform(scrollXProgress, (x) => transform(x, \"offsetLeft\"));\n  let width = useTransform(scrollXProgress, (x) => transform(x, \"offsetWidth\"));\n\n  useMotionValueEvent(scrollXProgress, \"change\", (x) => {\n    if (animationRef.current || !tabElements.length) return;\n    setSelectedKey(tabs[getIndex(x)].id);\n  });\n\n  let animationRef = useRef(null);\n  let onSelectionChange = (selectedKey) => {\n    setSelectedKey(selectedKey);\n\n    if (scrollXProgress.getVelocity() && !animationRef.current) {\n      return;\n    }\n\n    let tabPanel = tabPanelsRef.current;\n    let index = tabs.findIndex((tab) => tab.id === selectedKey);\n    animationRef.current?.stop();\n    animationRef.current = animate(\n      tabPanel.scrollLeft,\n      tabPanel.scrollWidth * (index / tabs.length),\n      {\n        type: \"spring\",\n        bounce: 0.2,\n        duration: 0.6,\n        onUpdate: (v) => {\n          tabPanel.scrollLeft = v;\n        },\n        onPlay: () => {\n          tabPanel.style.scrollSnapType = \"none\";\n        },\n        onComplete: () => {\n          tabPanel.style.scrollSnapType = \"\";\n          animationRef.current = null;\n        }\n      }\n    );\n  };\n\n  return (\n    <Tabs\n      className=\"w-fit max-w-[min(100%,350px)]\"\n      selectedKey={selectedKey}\n      onSelectionChange={onSelectionChange}>\n      <div className=\"relative\">\n        <TabList ref={tabListRef} className=\"flex -mx-1\" items={tabs}>\n          {(tab) =>\n            <Tab className=\"cursor-default px-3 py-1.5 text-md transition outline-hidden touch-none\">\n              {({ isSelected, isFocusVisible }) => <>\n                {tab.label}\n                {isFocusVisible && isSelected && (\n                  <motion.span\n                    className=\"absolute inset-0 z-10 rounded-full ring-2 ring-black ring-offset-2\"\n                    style={{ x, width }}\n                  />\n                )}\n              </>}\n            </Tab>\n          }\n        </TabList>\n        <motion.span\n          className=\"absolute inset-0 z-10 bg-white rounded-full mix-blend-difference\"\n          style={{ x, width }} />\n      </div>\n      <div\n        ref={tabPanelsRef}\n        className=\"my-4 overflow-auto snap-x snap-mandatory no-scrollbar flex\">\n        <Collection items={tabs}>\n          {(tab) => (\n            <TabPanel\n              shouldForceMount\n              className=\"shrink-0 w-full px-2 box-border snap-start outline-hidden -outline-offset-2 rounded-sm focus-visible:outline-black\">\n              <h2>{tab.label} contents...</h2>\n              <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean sit amet nisl blandit, pellentesque eros eu, scelerisque eros. Sed cursus urna at nunc lacinia dapibus.</p>\n            </TabPanel>\n          )}\n        </Collection>\n      </div>\n    </Tabs>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Resizable Columns in React Aria Components Table\nDESCRIPTION: This example demonstrates how to create a table with resizable columns using ResizableTableContainer and ColumnResizer components. It shows different column width configurations including fixed, minimum, and maximum widths.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Table.mdx#2025-04-23_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ResizableTableContainer, ColumnResizer} from 'react-aria-components';\n\n<ResizableTableContainer>\n  <Table aria-label=\"Table with resizable columns\">\n    <TableHeader>\n      {/*- begin highlight -*/}\n      <Column id=\"file\" isRowHeader maxWidth={500}>\n        <div className=\"flex-wrapper\">\n          <span tabIndex={-1} className=\"column-name\">File Name</span>\n          <ColumnResizer />\n        </div>\n      </Column>\n      <Column id=\"size\" width={80}>Size</Column>\n      <Column id=\"date\" minWidth={100}>\n        <div className=\"flex-wrapper\">\n          <span tabIndex={-1} className=\"column-name\">Date Modified</span>\n          <ColumnResizer />\n        </div>\n      </Column>\n      {/*- end highlight -*/}\n    </TableHeader>\n    <TableBody>\n      <Row>\n        <Cell>2022-Roadmap-Proposal-Revision-012822-Copy(2)</Cell>\n        <Cell>214 KB</Cell>\n        <Cell>November 27, 2022 at 4:56PM</Cell>\n      </Row>\n      <Row>\n        <Cell>62259692_p0_master1200</Cell>\n        <Cell>120 KB</Cell>\n        <Cell>January 27, 2021 at 1:56AM</Cell>\n      </Row>\n    </TableBody>\n  </Table>\n</ResizableTableContainer>\n```\n\n----------------------------------------\n\nTITLE: Creating an Animated Button using React Aria Hooks and Framer Motion\nDESCRIPTION: This example shows how to create a custom AnimatedButton component using the useButton hook from React Aria and Framer Motion for animations, demonstrating advanced customization with hooks.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Button.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {ButtonProps} from 'react-aria-components';\nimport {ButtonContext, useContextProps} from 'react-aria-components';\nimport {useButton} from 'react-aria';\nimport {motion} from 'framer-motion';\n\nconst AnimatedButton = React.forwardRef((props: ButtonProps, ref: React.ForwardedRef<HTMLButtonElement>) => {\n  [props, ref] = useContextProps(props, ref, ButtonContext);\n\n  let {buttonProps, isPressed} = useButton(props, ref);\n  return (\n    <motion.button\n      {...buttonProps}\n      ref={ref}\n      animate={{\n        scale: isPressed ? 0.9 : 1\n      }}>\n      {props.children}\n    </motion.button>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Table with Multiple Selection in React Aria Components\nDESCRIPTION: Example of creating a table with multiple row selection and checkbox controls. The table displays file information with columns for name, type, and date modified.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Table.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Table, TableHeader, TableBody, Column, Row, Cell} from 'react-aria-components';\nimport {MyCheckbox} from './Checkbox';\n\n<Table aria-label=\"Files\" selectionMode=\"multiple\">\n  <TableHeader>\n    <Column><MyCheckbox slot=\"selection\" /></Column>\n    <Column isRowHeader>Name</Column>\n    <Column>Type</Column>\n    <Column>Date Modified</Column>\n  </TableHeader>\n  <TableBody>\n    <Row>\n      <Cell><MyCheckbox slot=\"selection\" /></Cell>\n      <Cell>Games</Cell>\n      <Cell>File folder</Cell>\n      <Cell>6/7/2020</Cell>\n    </Row>\n    <Row>\n      <Cell><MyCheckbox slot=\"selection\" /></Cell>\n      <Cell>Program Files</Cell>\n      <Cell>File folder</Cell>\n      <Cell>4/7/2021</Cell>\n    </Row>\n    <Row>\n      <Cell><MyCheckbox slot=\"selection\" /></Cell>\n      <Cell>bootmgr</Cell>\n      <Cell>System file</Cell>\n      <Cell>11/20/2010</Cell>\n    </Row>\n    <Row>\n      <Cell><MyCheckbox slot=\"selection\" /></Cell>\n      <Cell>log.txt</Cell>\n      <Cell>Text Document</Cell>\n      <Cell>1/18/2016</Cell>\n    </Row>\n  </TableBody>\n</Table>\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled Selection in React Aria Table\nDESCRIPTION: Shows how to create a Pokemon table with controlled selection using selectedKeys and onSelectionChange props. Includes TypeScript interfaces and basic table structure with column definitions.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Table.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {Selection} from 'react-aria-components';\n\ninterface Pokemon {\n  id: number,\n  name: string,\n  type: string,\n  level: string\n}\n\ninterface PokemonTableProps extends TableProps {\n  items?: Pokemon[],\n  renderEmptyState?: () => string\n}\n\nfunction PokemonTable(props: PokemonTableProps) {\n  let items = props.items || [\n    {id: 1, name: 'Charizard', type: 'Fire, Flying', level: '67'},\n    {id: 2, name: 'Blastoise', type: 'Water', level: '56'},\n    {id: 3, name: 'Venusaur', type: 'Grass, Poison', level: '83'},\n    {id: 4, name: 'Pikachu', type: 'Electric', level: '100'}\n  ];\n\n  let [selectedKeys, setSelectedKeys] = React.useState<Selection>(new Set());\n\n  return (\n    <Table\n      aria-label=\"Pokemon table\"\n      {...props}\n      selectedKeys={selectedKeys}\n      onSelectionChange={setSelectedKeys}\n    >\n      <MyTableHeader>\n        <Column isRowHeader>Name</Column>\n        <Column>Type</Column>\n        <Column>Level</Column>\n      </MyTableHeader>\n      <TableBody items={items} renderEmptyState={props.renderEmptyState}>\n        {item => (\n          <MyRow>\n            <Cell>{item.name}</Cell>\n            <Cell>{item.type}</Cell>\n            <Cell>{item.level}</Cell>\n          </MyRow>\n        )}\n      </TableBody>\n    </Table>\n  );\n}\n\n<PokemonTable selectionMode=\"multiple\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing a Framer Motion-Powered Gesture Driven Modal Sheet - TypeScript/JSX\nDESCRIPTION: This comprehensive snippet implements an iOS-style modal sheet using React Aria Components (Dialog, ModalOverlay, Modal, Button, Heading) and Framer Motion hooks for animation (motion, AnimatePresence, useMotionValue, etc). It sets up gesture-based drag-to-dismiss, background opacity transitions, and root scaling/border radius effects. Dependencies: 'framer-motion', 'react-aria-components', React, and a global CSS root setup. Inputs are user interactions, and output is a layered, animated modal with full accessibility support; limitations may include browser support for latest APIs and window globals required for calculations.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/framer-modal-sheet.mdx#2025-04-23_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {\n  AnimatePresence,\n  motion,\n  animate,\n  useMotionTemplate,\n  useMotionValue,\n  useTransform,\n  useMotionValueEvent\n} from 'framer-motion';\nimport {\n  Dialog,\n  ModalOverlay,\n  Modal,\n  Button,\n  Heading\n} from 'react-aria-components';\nimport { useState } from 'react';\n\n// Wrap React Aria modal components so they support framer-motion values.\nconst MotionModal = motion(Modal);\nconst MotionModalOverlay = motion(ModalOverlay);\n\nconst inertiaTransition = {\n  type: \"inertia\" as const,\n  bounceStiffness: 300,\n  bounceDamping: 40,\n  timeConstant: 300\n};\n\nconst staticTransition = {\n  duration: 0.5,\n  ease: [0.32, 0.72, 0, 1]\n};\n\nconst SHEET_MARGIN = 34;\nconst SHEET_RADIUS = 12;\n\nconst root = document.body.firstChild as HTMLElement;\n\nfunction Sheet() {\n  let [isOpen, setOpen] = useState(false);\n  let h = window.innerHeight - SHEET_MARGIN;\n  let y = useMotionValue(h);\n  let bgOpacity = useTransform(y, [0, h], [0.4, 0]);\n  let bg = useMotionTemplate`rgba(0, 0, 0, ${bgOpacity})`;\n\n  // Scale the body down and adjust the border radius when the sheet is open.\n  let bodyScale = useTransform(\n    y,\n    [0, h],\n    [(window.innerWidth - SHEET_MARGIN) / window.innerWidth, 1]\n  );\n  let bodyTranslate = useTransform(y, [0, h], [SHEET_MARGIN - SHEET_RADIUS, 0]);\n  let bodyBorderRadius = useTransform(y, [0, h], [SHEET_RADIUS, 0]);\n\n  useMotionValueEvent(bodyScale, 'change', v => root.style.scale = `${v}`);\n  useMotionValueEvent(bodyTranslate, 'change', v => root.style.translate = `0 ${v}px`);\n  useMotionValueEvent(bodyBorderRadius, 'change', v => root.style.borderRadius = `${v}px`);\n\n  return (\n    <>\n      <Button\n        className=\"text-blue-600 text-lg font-semibold outline-hidden rounded-sm bg-transparent border-none pressed:text-blue-700 focus-visible:ring-3\"\n        onPress={() => setOpen(true)}>\n        Open sheet\n      </Button>\n      <AnimatePresence>\n        {isOpen && (\n          <MotionModalOverlay\n            // Force the modal to be open when AnimatePresence renders it.\n            isOpen\n            onOpenChange={setOpen}\n            className=\"fixed inset-0 z-10\"\n            style={{ backgroundColor: bg as any }}>\n            <MotionModal\n              className=\"bg-(--page-background) absolute bottom-0 w-full rounded-t-xl shadow-lg will-change-transform\"\n              initial={{ y: h }}\n              animate={{ y: 0 }}\n              exit={{ y: h }}\n              transition={staticTransition}\n              style={{\n                y,\n                top: SHEET_MARGIN,\n                // Extra padding at the bottom to account for rubber band scrolling.\n                paddingBottom: window.screen.height\n              }}\n              drag=\"y\"\n              dragConstraints={{ top: 0 }}\n              onDragEnd={(e, { offset, velocity }) => {\n                if (offset.y > window.innerHeight * 0.75 || velocity.y > 10) {\n                  setOpen(false);\n                } else {\n                  animate(y, 0, { ...inertiaTransition, min: 0, max: 0 });\n                }\n              }}>\n              {/* drag affordance */}\n              <div className=\"mx-auto w-12 mt-2 h-1.5 rounded-full bg-gray-400\" />\n              <Dialog className=\"px-4 pb-4 outline-hidden\">\n                <div className=\"flex justify-end\">\n                  <Button\n                    className=\"text-blue-600 text-lg font-semibold mb-8 outline-hidden rounded-sm bg-transparent border-none pressed:text-blue-700 focus-visible:ring-3\"\n                    onPress={() => setOpen(false)}>\n                    Done\n                  </Button>\n                </div>\n                <Heading slot=\"title\" className=\"text-3xl font-semibold mb-4\">\n                  Modal sheet\n                </Heading>\n                <p className=\"text-lg mb-4\">\n                  This is a dialog with a custom modal overlay built with React Aria Components and Framer Motion.\n                </p>\n                <p className=\"text-lg\">\n                  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean sit amet nisl blandit, pellentesque eros eu, scelerisque eros. Sed cursus urna at nunc lacinia dapibus.\n                </p>\n              </Dialog>\n            </MotionModal>\n          </MotionModalOverlay>\n        )}\n      </AnimatePresence>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing an Animated Destructive Alert Dialog with React Aria Components in TypeScript\nDESCRIPTION: This TypeScript snippet defines a ModalExample React component implementing a destructive alert dialog using React Aria Components and Tailwind CSS utility classes for styling and animation. The dialog is activated by a Button and includes animated transitions for both the overlay and modal elements, using conditional classNames bound to the dialog state. Dependencies include react-aria-components, @spectrum-icons/workflow, and properly configured Tailwind CSS with plugins for React Aria Components and animation. The DialogButton helper wraps a styled Button component. The dialog expects no inputs, outputs user interactions to close or confirm deletion, and is intended for destructive user confirmation scenarios.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/destructive-dialog.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {DialogTrigger, Button, ModalOverlay, Modal, Dialog, Heading} from 'react-aria-components';\nimport AlertIcon from '@spectrum-icons/workflow/Alert';\n\nfunction ModalExample() {\n  return (\n    <div className=\"bg-linear-to-r from-sky-400 to-indigo-500 p-12 rounded-lg flex justify-center\">\n      <DialogTrigger>\n        <Button className=\"inline-flex items-center justify-center rounded-md bg-black/20 bg-clip-padding border border-white/20 px-3.5 py-2 font-medium font-[inherit] text-base text-white hover:bg-black/30 pressed:bg-black/40 transition-colors cursor-default outline-hidden focus-visible:ring-2 focus-visible:ring-white/75\">Delete…</Button>\n        <ModalOverlay className={({isEntering, isExiting}) => `\n          fixed inset-0 z-10 overflow-y-auto bg-black/25 flex min-h-full items-center justify-center p-4 text-center backdrop-blur\n          ${isEntering ? 'animate-in fade-in duration-300 ease-out' : ''}\n          ${isExiting ? 'animate-out fade-out duration-200 ease-in' : ''}\n        `}>\n          <Modal className={({isEntering, isExiting}) => `\n            w-full max-w-md overflow-hidden rounded-2xl bg-white p-6 text-left align-middle shadow-xl\n            ${isEntering ? 'animate-in zoom-in-95 ease-out duration-300' : ''}\n            ${isExiting ? 'animate-out zoom-out-95 ease-in duration-200' : ''}\n          `}>\n            <Dialog role=\"alertdialog\" className=\"outline-hidden relative\">\n              {({ close }) => (<>\n                <Heading slot=\"title\" className=\"text-xxl font-semibold leading-6 my-0 text-slate-700\">Delete folder</Heading>\n                <div className=\"w-6 h-6 text-red-500 absolute right-0 top-0 stroke-2\"><AlertIcon size=\"M\" /></div>\n                <p className=\"mt-3 text-slate-500\">\n                  Are you sure you want to delete \\\"Documents\\\"? All contents will be permanently destroyed.\n                </p>\n                <div className=\"mt-6 flex justify-end gap-2\">\n                  <DialogButton\n                    className=\"bg-slate-200 text-slate-800 hover:border-slate-300 pressed:bg-slate-300\"\n                    onPress={close}>\n                    Cancel\n                  </DialogButton>\n                  <DialogButton\n                    className=\"bg-red-500 text-white hover:border-red-600 pressed:bg-red-600\"\n                    onPress={close}>\n                    Delete\n                  </DialogButton>\n                </div>\n              </>)}\n            </Dialog>\n          </Modal>\n        </ModalOverlay>\n      </DialogTrigger>\n    </div>\n  );\n}\n\nfunction DialogButton({className, ...props}) {\n  return <Button {...props} className={`inline-flex justify-center rounded-md border border-solid border-transparent px-5 py-2 font-semibold font-[inherit] text-base transition-colors cursor-default outline-hidden focus-visible:ring-2 ring-blue-500 ring-offset-2 ${className}`} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Sectioned ComboBox with Dynamic Items\nDESCRIPTION: Uses hierarchical data structure to generate a sectioned ComboBox with the Collection component to render child items. This approach allows for dynamic generation of sections from data.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ComboBox.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Collection} from 'react-aria-components';\n\nfunction Example() {\n  let options = [\n    {name: 'Fruit', children: [\n      {name: 'Apple'},\n      {name: 'Banana'},\n      {name: 'Orange'},\n      {name: 'Honeydew'},\n      {name: 'Grapes'},\n      {name: 'Watermelon'},\n      {name: 'Cantaloupe'},\n      {name: 'Pear'}\n    ]},\n    {name: 'Vegetable', children: [\n      {name: 'Cabbage'},\n      {name: 'Broccoli'},\n      {name: 'Carrots'},\n      {name: 'Lettuce'},\n      {name: 'Spinach'},\n      {name: 'Bok Choy'},\n      {name: 'Cauliflower'},\n      {name: 'Potatoes'}\n    ]}\n  ];\n\n  return (\n    <MyComboBox label=\"Preferred fruit or vegetable\" defaultItems={options}>\n      {section => (\n        <ListBoxSection id={section.name}>\n          <Header>{section.name}</Header>\n          <Collection items={section.children}>\n            {item => <ListBoxItem id={item.name}>{item.name}</ListBoxItem>}\n          </Collection>\n        </ListBoxSection>\n      )}\n    </MyComboBox>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Menu Implementation in React Aria\nDESCRIPTION: Basic example showing how to implement a menu trigger with a button and menu items using React Aria Components.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Menu.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {MenuTrigger, Button, Popover, Menu, MenuItem} from 'react-aria-components';\n\n<MenuTrigger>\n  <Button aria-label=\"Menu\">☰</Button>\n  <Popover>\n    <Menu>\n      <MenuItem onAction={() => alert('open')}>Open</MenuItem>\n      <MenuItem onAction={() => alert('rename')}>Rename…</MenuItem>\n      <MenuItem onAction={() => alert('duplicate')}>Duplicate</MenuItem>\n      <MenuItem onAction={() => alert('share')}>Share…</MenuItem>\n      <MenuItem onAction={() => alert('delete')}>Delete…</MenuItem>\n    </Menu>\n  </Popover>\n</MenuTrigger>\n```\n\n----------------------------------------\n\nTITLE: Implementing Command Palette with React Aria Components and Tailwind CSS\nDESCRIPTION: Defines a React functional component `CommandPaletteExample` that demonstrates building a command palette using `react-aria-components`. It utilizes `Autocomplete` for filtering, `TextField` for input, `Menu` for displaying results, and `DialogTrigger` with `Modal` for the popup interface, styled with Tailwind CSS. It includes keyboard shortcut handling (Cmd/Ctrl + K, Escape) for opening and closing the palette and uses `useState`, `useEffect`, `useMemo`, and `useFilter` hooks for state management and filtering logic.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/command-palette.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Autocomplete,\n  TextField,\n  Menu,\n  MenuItem,\n  useFilter,\n  Input,\n  Dialog,\n  DialogTrigger,\n  Modal,\n  ModalOverlay,\n  Button\n} from 'react-aria-components';\nimport {useEffect, useMemo, useState} from 'react';\n\nfunction CommandPaletteExample() {\n  let commands = [\n    {id: 'new-file', label: 'Create new file…'},\n    {id: 'new-folder', label: 'Create new folder…'},\n    {id: 'assign', label: 'Assign to…'},\n    {id: 'assign-me', label: 'Assign to me'},\n    {id: 'status', label: 'Change status…'},\n    {id: 'priority', label: 'Change priority…'},\n    {id: 'label-add', label: 'Add label…'},\n    {id: 'label-remove', label: 'Remove label…'}\n  ];\n\n  let [isOpen, setOpen] = useState(false);\n  let {contains} = useFilter({sensitivity: 'base'});\n  let isMac = useMemo(() => /Mac/.test(navigator.platform), []);\n\n  useEffect(() => {\n    const handleKeyDown = (e) => {\n      if (e.key === 'k' && (isMac ? e.metaKey : e.ctrlKey)) {\n        e.preventDefault();\n        setOpen((prev) => !prev);\n      } else if (e.key === 'Escape') {\n        e.preventDefault();\n        setOpen(false);\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  })\n\n  return (\n    <div className=\"bg-linear-to-r from-indigo-500 to-violet-500 p-4 sm:p-8 h-[340px] rounded-lg flex items-center justify-center\">\n      <DialogTrigger isOpen={isOpen} onOpenChange={setOpen}>\n        <Button className=\"inline-flex items-center justify-center rounded-xl bg-black/20 bg-clip-padding border border-white/20 px-3 py-2 font-medium font-[inherit] text-sm sm:text-base text-white hover:bg-black/30 pressed:bg-black/40 transition-colors cursor-default outline-hidden focus-visible:ring-2 focus-visible:ring-white/75\">\n          <span className=\"block sm:hidden\">Tap to open</span>\n          <span className=\"hidden sm:block\">\n            Type <kbd className=\"px-2 py-1 m-1 text-xs font-semibold border border-gray-200 rounded-lg\">{isMac ? '⌘' : 'Ctrl'}</kbd> + <kbd className=\"px-2 py-1 m-1 text-xs font-semibold border border-gray-200 rounded-lg\">K</kbd> or press here to open\n          </span>\n        </Button>\n        <ModalOverlay\n          isDismissable\n          className={({ isEntering, isExiting }) => `\n          fixed inset-0 z-10 overflow-y-auto bg-black/25 flex min-h-full items-start sm:items-center justify-center p-4 text-center\n          ${isEntering ? 'animate-in fade-in duration-300 ease-out' : ''}\n          ${isExiting ? 'animate-out fade-out duration-200 ease-in' : ''}\n        `}\n        >\n          <Modal\n            className={({ isEntering, isExiting }) => `\n            ${isEntering ? 'animate-in zoom-in-95 ease-out duration-300' : ''}\n            ${isExiting ? 'animate-out zoom-out-95 ease-in duration-200' : ''}\n          `}\n          >\n            <Dialog className=\"outline-hidden relative\">\n              <div className=\"flex flex-col gap-1 w-[95vw] sm:w-[500px] max-w-full rounded-xl bg-white shadow-lg p-2\">\n                <Autocomplete filter={contains}>\n                  <TextField\n                    aria-label=\"Search commands\"\n                    className=\"flex flex-col px-3 py-2 rounded-md outline-none placeholder-white/70\"\n                  >\n                    <Input\n                      autoFocus\n                      placeholder=\"Search commands…\"\n                      className=\"border-none py-2 px-3 leading-5 text-gray-900 bg-transparent outline-hidden text-base focus-visible:ring-2 focus-visible:ring-violet-500 rounded-lg\"\n                    />\n                  </TextField>\n                  <Menu\n                    items={commands}\n                    className=\"mt-2 p-1 max-h-44 overflow-auto\"\n                  >\n                    {({ label }) => <CommandItem>{label}</CommandItem>}\n                  </Menu>\n                </Autocomplete>\n              </div>\n            </Dialog>\n          </Modal>\n        </ModalOverlay>\n      </DialogTrigger>\n    </div>\n  );\n}\n\nfunction CommandItem(props) {\n  return (\n    <MenuItem\n      {...props}\n      className=\"group flex w-full items-center rounded-md px-3 py-2 box-border outline-none cursor-default text-gray-900 hover:bg-violet-100 pressed:bg-violet-200 focus:bg-violet-500 focus:text-white\"\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable Slider Wrapper Component in TSX\nDESCRIPTION: Defines a reusable wrapper component `MySlider` that encapsulates the Slider and its child components (Label, SliderOutput, SliderTrack, SliderThumb). It accepts standard Slider props along with custom `label` and `thumbLabels` props. The implementation uses render props for SliderOutput and SliderTrack to dynamically render thumbs based on the slider state, assigning ARIA labels if provided. An example usage demonstrates rendering a range slider with two thumbs.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Slider.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {SliderProps} from 'react-aria-components';\n\ninterface MySliderProps<T> extends SliderProps<T> {\n  label?: string,\n  thumbLabels?: string[]\n}\n\nfunction MySlider<T extends number | number[]>({label, thumbLabels, ...props}: MySliderProps<T>) {\n  return (\n    <Slider {...props}>\n      {label && <Label>{label}</Label>}\n      <SliderOutput>\n        {({state}) => state.values.map((_, i) => state.getThumbValueLabel(i)).join(' – ')}\n      </SliderOutput>\n      <SliderTrack>\n        {({state}) => state.values.map((_, i) => (\n          <SliderThumb key={i} index={i} aria-label={thumbLabels?.[i]} />\n        ))}\n      </SliderTrack>\n    </Slider>\n  );\n}\n\n<MySlider label=\"Range\" defaultValue={[30, 60]} thumbLabels={['start', 'end']} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Calendar Context Provider with Presets\nDESCRIPTION: Shows how to create a composite calendar picker component using CalendarContext for state management and preset date selections\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Calendar.mdx#2025-04-23_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nimport {CalendarContext, useSlottedContext} from 'react-aria-components';\n\nfunction CalendarPicker({children}) {\n  let [value, onChange] = React.useState(null);\n  let [focusedValue, onFocusChange] = React.useState(null);\n\n  return (\n    <CalendarContext.Provider value={{value, onChange, focusedValue, onFocusChange}}>\n      <div className=\"calendar-picker\">\n        {children}\n      </div>\n    </CalendarContext.Provider>\n  );\n}\n\ninterface PresetProps {\n  date: CalendarDate,\n  children: React.ReactNode\n}\n\nfunction Preset({date, children}: PresetProps) {\n  let context = useSlottedContext(CalendarContext)!;\n  let onPress = () => {\n    context.onFocusChange(date);\n    context.onChange(date);\n  };\n\n  return (\n    <Button onPress={onPress}>{children}</Button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Providing Global Form Submission Handler using FormContext in React\nDESCRIPTION: This snippet demonstrates how to use FormContext.Provider to add a global form submission handler for all forms rendered inside it. This could be used to centralize logic for submitting data to an API.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Form.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nlet onSubmit = e => {\n  e.preventDefault();\n  // Submit form data to an API...\n};\n\n<FormContext.Provider value={{onSubmit}}>\n  <Form>\n    {/* ... */}\n  </Form>\n</FormContext.Provider>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Checkbox with Context and useCheckbox Hook in React Aria Components (TypeScript)\nDESCRIPTION: This snippet implements MyCheckbox, a custom checkbox component compatible with React Aria Components. It merges context props using useContextProps from react-aria-components, manages internal state with useToggleState from react-stately, and binds behavior via useCheckbox from react-aria. Prerequisites include react, react-aria-components, react-aria, and react-stately. The component consumes CheckboxContext for theming and configuration, then renders a native input that responds to inputProps and the provided ref. Expected input is props compatible with CheckboxProps; it outputs a fully functional, context-aware checkbox.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/advanced.mdx#2025-04-23_snippet_11\n\nLANGUAGE: TSX\nCODE:\n```\nimport type {CheckboxProps} from 'react-aria-components';\nimport {CheckboxContext, useContextProps} from 'react-aria-components';\nimport {useToggleState} from 'react-stately';\nimport {useCheckbox} from 'react-aria';\n\nconst MyCheckbox = React.forwardRef((props: CheckboxProps, ref: React.ForwardedRef<HTMLInputElement>) => {\n  // Merge the local props and ref with the ones provided via context.\n  ///- begin highlight -///\n  [props, ref] = useContextProps(props, ref, CheckboxContext);\n  ///- end highlight -///\n\n  // Follow the hook docs and implement your customizations...\n  let state = useToggleState(props);\n  let {inputProps} = useCheckbox(props, state, ref);\n  return <input {...inputProps} ref={ref} />;\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Slider Implementation in TSX\nDESCRIPTION: Demonstrates the basic usage of the Slider component from 'react-aria-components'. It includes essential parts like Label, SliderOutput for displaying the value, SliderTrack, and a SliderThumb. The `defaultValue` prop sets the initial value of the slider.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Slider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Slider, Label, SliderOutput, SliderTrack, SliderThumb} from 'react-aria-components';\n\n<Slider defaultValue={30}>\n  <Label>Opacity</Label>\n  <SliderOutput />\n  <SliderTrack>\n    <SliderThumb />\n  </SliderTrack>\n</Slider>\n```\n\n----------------------------------------\n\nTITLE: Implementing Sections in React Aria Select with Dynamic Items\nDESCRIPTION: This example demonstrates how to create sections within a Select component using dynamic items, populating sections from a hierarchical data structure.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Select.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Collection} from 'react-aria-components';\n\nfunction Example() {\n  let options = [\n    {name: 'Fruit', children: [\n      {name: 'Apple'},\n      {name: 'Banana'},\n      {name: 'Orange'},\n      {name: 'Honeydew'},\n      {name: 'Grapes'},\n      {name: 'Watermelon'},\n      {name: 'Cantaloupe'},\n      {name: 'Pear'}\n    ]},\n    {name: 'Vegetable', children: [\n      {name: 'Cabbage'},\n      {name: 'Broccoli'},\n      {name: 'Carrots'},\n      {name: 'Lettuce'},\n      {name: 'Spinach'},\n      {name: 'Bok Choy'},\n      {name: 'Cauliflower'},\n      {name: 'Potatoes'}\n    ]}\n  ];\n\n  return (\n    <MySelect label=\"Preferred fruit or vegetable\" items={options}>\n      {section => (\n        <ListBoxSection id={section.name}>\n          <Header>{section.name}</Header>\n          <Collection items={section.children}>\n            {item => <ListBoxItem id={item.name}>{item.name}</ListBoxItem>}\n          </Collection>\n        </ListBoxSection>\n      )}\n    </MySelect>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Loading in GridList with useAsyncList\nDESCRIPTION: Example of using the useAsyncList hook to handle asynchronous loading of data from a server into a GridList component, fetching character data from the Star Wars API.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/GridList.mdx#2025-04-23_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useAsyncList} from '@react-stately/data';\n\ninterface Character {\n  name: string\n}\n\nfunction AsyncList() {\n  let list = useAsyncList<Character>({\n    async load({signal, cursor}) {\n      if (cursor) {\n        cursor = cursor.replace(/^http:\\/\\//i, 'https://');\n      }\n\n      let res = await fetch(cursor || `https://swapi.py4e.com/api/people/?search=`, {signal});\n      let json = await res.json();\n\n      return {\n        items: json.results,\n        cursor: json.next\n      };\n    }\n  });\n\n  return (\n    <MyGridList\n      selectionMode=\"multiple\"\n      aria-label=\"Async loading ListView example\"\n      items={list.items}>\n      {(item) => (\n        <MyItem id={item.name}>{item.name}</MyItem>\n      )}\n    </MyGridList>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Modal Dialog Implementation\nDESCRIPTION: Demonstrates a basic modal dialog implementation with a sign-up form using React Aria Components.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Modal.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {DialogTrigger, Modal, Dialog, Button, Heading, TextField, Label, Input} from 'react-aria-components';\n\n<DialogTrigger>\n  <Button>Sign up…</Button>\n  <Modal>\n    <Dialog>\n      <form>\n        <Heading slot=\"title\">Sign up</Heading>\n        <TextField autoFocus>\n          <Label>First Name: </Label>\n          <Input />\n        </TextField>\n        <TextField>\n          <Label>Last Name: </Label>\n          <Input />\n        </TextField>\n        <Button slot=\"close\">\n          Submit\n        </Button>\n      </form>\n    </Dialog>\n  </Modal>\n</DialogTrigger>\n```\n\n----------------------------------------\n\nTITLE: Implementing Exit Animations with Framer Motion in React Aria Overlays\nDESCRIPTION: A comprehensive example showing how to implement exit animations with Framer Motion in React Aria overlay components by tracking animation state and using the isExiting prop.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/styling.mdx#2025-04-23_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\ntype AnimationState = 'unmounted' | 'hidden' | 'visible';\n\nfunction Example() {\n  /*- begin highlight -*/\n  // Track animation state.\n  let [animation, setAnimation] = React.useState<AnimationState>('unmounted');\n  /*- end highlight -*/\n\n  return (\n    <DialogTrigger\n      /*- begin highlight -*/\n      // Start animation when open state changes.\n      onOpenChange={isOpen => setAnimation(isOpen ? 'visible' : 'hidden')}\n      /*- end highlight -*/\n    >\n      <Button>Open dialog</Button>\n      <MotionModalOverlay\n        /*- begin highlight -*/\n        // Prevent modal from unmounting during animation.\n        isExiting={animation === 'hidden'}\n        // Reset animation state once it is complete.\n        onAnimationComplete={animation => {\n          setAnimation(a => animation === 'hidden' && a === 'hidden' ? 'unmounted' : a)\n        }}\n        /*- end highlight -*/\n        variants={{\n          hidden: {opacity: 0},\n          visible: {opacity: 1}\n        }}\n        initial=\"hidden\"\n        animate={animation}>\n        <MotionModal\n          variants={{\n            hidden: {opacity: 0, y: 32},\n            visible: {opacity: 1, y: 0}\n          }}>\n          {/* ... */}\n        </MotionModal>\n      </MotionModalOverlay>\n    </DialogTrigger>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind v3 Plugins in tailwind.config.js\nDESCRIPTION: Shows how to add the `tailwindcss-react-aria-components` (version 1.x) and `tailwindcss-animate` plugins to a Tailwind v3 project by listing them in the `plugins` array within the `tailwind.config.js` file.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/datepicker.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nmodule.exports = {\n  // ...\n  plugins: [\n    require('tailwindcss-react-aria-components'),\n    require('tailwindcss-animate')\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing a Tailwind-Styled DatePicker in React Aria Components\nDESCRIPTION: Defines a React functional component `DatePickerExample` showcasing a DatePicker built with `react-aria-components` and styled using Tailwind CSS utility classes. It includes custom `RoundButton` and `MyPopover` components for specific styling and animation behavior. It utilizes various sub-components like `Label`, `Group`, `DateInput`, `Calendar`, etc., from `react-aria-components`.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/datepicker.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {DatePicker, Label, Group, Heading, DateInput, DateSegment, Button, Popover, Dialog, Calendar, CalendarGrid, CalendarGridHeader, CalendarHeaderCell, CalendarGridBody, CalendarCell} from 'react-aria-components';\nimport type {ButtonProps, PopoverProps} from 'react-aria-components';\nimport ChevronUpDownIcon from '@spectrum-icons/workflow/ChevronUpDown';\nimport ChevronLeftIcon from '@spectrum-icons/workflow/ChevronLeft';\nimport ChevronRightIcon from '@spectrum-icons/workflow/ChevronRight';\n\nfunction DatePickerExample() {\n  return (\n    <div className=\"bg-linear-to-r from-violet-500 to-fuchsia-600 p-12 sm:h-[400px] rounded-lg flex items-start justify-center\">\n      <DatePicker className=\"group flex flex-col gap-1 w-[200px]\">\n        <Label className=\"text-white cursor-default\">Date</Label>\n        <Group className=\"flex rounded-lg bg-white/90 focus-within:bg-white group-open:bg-white transition pl-3 shadow-md text-gray-700 focus-visible:ring-2 ring-black\">\n          <DateInput className=\"flex flex-1 py-2\">\n            {(segment) => <DateSegment segment={segment} className=\"px-0.5 tabular-nums outline-hidden rounded-xs focus:bg-violet-700 focus:text-white caret-transparent placeholder-shown:italic\" />}\n          </DateInput>\n          <Button className=\"outline-hidden px-3 flex items-center text-gray-700 transition border-0 border-solid border-l border-l-purple-200 bg-transparent rounded-r-lg pressed:bg-purple-100 focus-visible:ring-2 ring-black\">\n            <ChevronUpDownIcon size=\"XS\" />\n          </Button>\n        </Group>\n        <MyPopover>\n          <Dialog className=\"p-6 text-gray-600\">\n            <Calendar>\n              <header className=\"flex items-center gap-1 pb-4 px-1 font-serif w-full\">\n                <Heading className=\"flex-1 font-semibold text-2xl ml-2\" />\n                <RoundButton slot=\"previous\"><ChevronLeftIcon /></RoundButton>\n                <RoundButton slot=\"next\"><ChevronRightIcon /></RoundButton>\n              </header>\n              <CalendarGrid className=\"border-spacing-1 border-separate\">\n                <CalendarGridHeader>\n                  {day => <CalendarHeaderCell className=\"text-xs text-gray-500 font-semibold\">{day}</CalendarHeaderCell>}\n                </CalendarGridHeader>\n                <CalendarGridBody>\n                  {date => <CalendarCell date={date} className=\"w-9 h-9 outline-hidden cursor-default rounded-full flex items-center justify-center outside-month:text-gray-300 hover:bg-gray-100 pressed:bg-gray-200 selected:bg-violet-700 selected:text-white focus-visible:ring-3 ring-violet-600/70 ring-offset-2\" />}\n                </CalendarGridBody>\n              </CalendarGrid>\n            </Calendar>\n          </Dialog>\n        </MyPopover>\n      </DatePicker>\n    </div>\n  );\n}\n\nfunction RoundButton(props: ButtonProps) {\n  return <Button {...props} className=\"w-9 h-9 outline-hidden cursor-default bg-transparent text-gray-600 border-0 rounded-full flex items-center justify-center hover:bg-gray-100 pressed:bg-gray-200 focus-visible:ring-3 ring-violet-600/70 ring-offset-2\" />;\n}\n\nfunction MyPopover(props: PopoverProps) {\n  return (\n    <Popover\n      {...props}\n      className={({isEntering, isExiting}) => `\n        overflow-auto rounded-lg drop-shadow-lg ring-1 ring-black/10 bg-white\n        ${isEntering ? 'animate-in fade-in placement-bottom:slide-in-from-top-1 placement-top:slide-in-from-bottom-1 ease-out duration-200' : ''}\n        ${isExiting ? 'animate-out fade-out placement-bottom:slide-out-to-top-1 placement-top:slide-out-to-bottom-1 ease-in duration-150' : ''}\n      `}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable DateField Component Wrapper\nDESCRIPTION: Implementation of a reusable DateField wrapper component that combines all subcomponents with props for label, description, and error handling.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DateField.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {DateFieldProps, DateValue, ValidationResult} from 'react-aria-components';\nimport {Text, FieldError} from 'react-aria-components';\n\ninterface MyDateFieldProps<T extends DateValue> extends DateFieldProps<T> {\n  label?: string,\n  description?: string,\n  errorMessage?: string | ((validation: ValidationResult) => string)\n}\n\nfunction MyDateField<T extends DateValue>({label, description, errorMessage, ...props}: MyDateFieldProps<T>) {\n  return (\n    <DateField {...props}>\n      <Label>{label}</Label>\n      <DateInput>\n        {segment => <DateSegment segment={segment} />}\n      </DateInput>\n      {description && <Text slot=\"description\">{description}</Text>}\n      <FieldError>{errorMessage}</FieldError>\n    </DateField>\n  );\n}\n\n<MyDateField label=\"Event date\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Validation for DatePicker in React Aria Components (TSX)\nDESCRIPTION: Shows how to enforce input requirement using the `isRequired` prop on a `DatePicker` component within a `Form`. It includes the `FieldError` component from `react-aria-components` to display validation messages automatically. The example outlines the necessary child components like `Label`, `Group`, `DateInput`, `Button`, `Popover`, `Dialog`, and `Calendar` for a complete DatePicker structure.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DatePicker.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\nimport {Form, FieldError} from 'react-aria-components';\n\n<Form>\n  {/*- begin highlight -*/}\n  <DatePicker name=\"date\" isRequired>\n  {/*- end highlight -*/}\n    <Label>Appointment date</Label>\n    <Group>\n      <DateInput>\n        {segment => <DateSegment segment={segment} />}\n      </DateInput>\n      <Button>▼</Button>\n    </Group>\n    {/*- begin highlight -*/}\n    <FieldError />\n    {/*- end highlight -*/}\n    <Popover>\n      <Dialog>\n        <Calendar>\n          <header>\n            <Button slot=\"previous\">◀</Button>\n            <Heading />\n            <Button slot=\"next\">▶</Button>\n          </header>\n          <CalendarGrid>\n            {date => <CalendarCell date={date} />}\n          </CalendarGrid>\n        </Calendar>\n      </Dialog>\n    </Popover>\n  </DatePicker>\n  <Button type=\"submit\">Submit</Button>\n</Form>\n```\n```\n\n----------------------------------------\n\nTITLE: Complete Color Picker with ColorArea and ColorSlider\nDESCRIPTION: Example of creating a complete color picker by combining a ColorArea for adjusting saturation and lightness with a ColorSlider for adjusting hue. This shows how to build a fully functional color selection interface.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorArea.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ColorSlider, Label, SliderOutput, SliderTrack} from 'react-aria-components';\n\nfunction Example() {\n  let [color, setColor] = React.useState(parseColor('hsl(50, 100%, 50%)'));\n\n  return (\n    <div>\n      <MyColorArea\n        value={color}\n        onChange={setColor}\n        xChannel=\"saturation\"\n        yChannel=\"lightness\" />\n      <ColorSlider channel=\"hue\" value={color} onChange={setColor} style={{width: 192, marginTop: 8}}>\n        <Label />\n        <SliderOutput />\n        <SliderTrack>\n          <ColorThumb />\n        </SliderTrack>\n      </ColorSlider>\n      <p>Current value: {color.toString('hsl')}</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic DateRangePicker in React\nDESCRIPTION: Example showing basic implementation of a DateRangePicker component with start and end date inputs, calendar popup, and navigation buttons.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DateRangePicker.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {DateRangePicker, Label, Group, Popover, Dialog, RangeCalendar, CalendarGrid, CalendarCell, Button, Heading, DateInput, DateSegment} from 'react-aria-components';\n\n<DateRangePicker>\n  <Label>Trip dates</Label>\n  <Group>\n    <DateInput slot=\"start\">\n      {segment => <DateSegment segment={segment} />}\n    </DateInput>\n    <span aria-hidden=\"true\">–</span>\n    <DateInput slot=\"end\">\n      {segment => <DateSegment segment={segment} />}\n    </DateInput>\n    <Button>▼</Button>\n  </Group>\n  <Popover>\n    <Dialog>\n      <RangeCalendar>\n        <header>\n          <Button slot=\"previous\">◀</Button>\n          <Heading />\n          <Button slot=\"next\">▶</Button>\n        </header>\n        <CalendarGrid>\n          {date => <CalendarCell date={date} />}\n        </CalendarGrid>\n      </RangeCalendar>\n    </Dialog>\n  </Popover>\n</DateRangePicker>\n```\n\n----------------------------------------\n\nTITLE: Rendering Dynamic ListBox Content in React\nDESCRIPTION: This example demonstrates how to render a ListBox with dynamic content using the items prop. It shows how to handle selection and display a list of animal options.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ListBox.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let options = [\n    { id: 1, name: 'Aardvark' },\n    { id: 2, name: 'Cat' },\n    { id: 3, name: 'Dog' },\n    { id: 4, name: 'Kangaroo' },\n    { id: 5, name: 'Koala' },\n    { id: 6, name: 'Penguin' },\n    { id: 7, name: 'Snake' },\n    { id: 8, name: 'Turtle' },\n    { id: 9, name: 'Wombat' }\n  ];\n\n  return (\n    <ListBox aria-label=\"Animals\" items={options} selectionMode=\"single\">\n      {(item) => <ListBoxItem>{item.name}</ListBoxItem>}\n    </ListBox>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Dynamic Table from Arrays - React Aria Components - TypeScript\nDESCRIPTION: This snippet defines a FileTable component in TypeScript that renders a React Aria Table from dynamic arrays of columns and rows. Both columns and rows are provided as arrays and mapped into Table structure through render functions. Dependencies include 'react-aria-components' for the Table API and related components, plus prior MyTableHeader and MyRow implementations. The table receives props for further customization, and demonstrates rendering with dynamic or static collections. Inputs are arrays of objects for rows and columns, outputs are an accessible, dynamic table.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Table.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {TableProps} from 'react-aria-components';\n\nfunction FileTable(props: TableProps) {\n  let columns = [\n    {name: 'Name', id: 'name', isRowHeader: true},\n    {name: 'Type', id: 'type'},\n    {name: 'Date Modified', id: 'date'}\n  ];\n\n  let rows = [\n    {id: 1, name: 'Games', date: '6/7/2020', type: 'File folder'},\n    {id: 2, name: 'Program Files', date: '4/7/2021', type: 'File folder'},\n    {id: 3, name: 'bootmgr', date: '11/20/2010', type: 'System file'},\n    {id: 4, name: 'log.txt', date: '1/18/2016', type: 'Text Document'}\n  ];\n\n  return (\n    <Table aria-label=\"Files\" {...props}>\n      <MyTableHeader columns={columns}>\n        {column => (\n          <Column isRowHeader={column.isRowHeader}>\n            {column.name}\n          </Column>\n        )}\n      </MyTableHeader>\n      <TableBody items={rows}>\n        {item => (\n          <MyRow columns={columns}>\n            {column => <Cell>{item[column.id]}</Cell>}\n          </MyRow>\n        )}\n      </TableBody>\n    </Table>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using Reusable Tree Wrappers in TSX\nDESCRIPTION: This example demonstrates rendering a `Tree` component using the previously defined reusable `MyTreeItem` wrapper. It shows how the wrappers simplify the code needed to create a nested tree structure.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Tree.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n<Tree aria-label=\"Files\" style={{height: '300px'}} defaultExpandedKeys={['documents', 'photos', 'project']}>\n  <MyTreeItem title=\"Documents\">\n    <MyTreeItem title=\"Project\">\n      <MyTreeItem title=\"Weekly Report\" />\n    </MyTreeItem>\n  </MyTreeItem>\n  <MyTreeItem title=\"Photos\">\n    <MyTreeItem title=\"Image 1\" />\n    <MyTreeItem title=\"Image 2\" />\n  </MyTreeItem>\n</Tree>\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Drag and Drop Between Lists in React Aria Components\nDESCRIPTION: This example demonstrates how to implement drag and drop functionality between two GridList components, including reordering within the same list and handling empty state drops.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/GridList.mdx#2025-04-23_snippet_42\n\nLANGUAGE: tsx\nCODE:\n```\nimport {isTextDropItem} from 'react-aria-components';\n\ninterface FileItem {\n  id: string,\n  name: string,\n  type: string\n}\n\ninterface DndGridListProps {\n  initialItems: FileItem[],\n  'aria-label': string\n}\n\nfunction DndGridList(props: DndGridListProps) {\n  let list = useListData({\n    initialItems: props.initialItems\n  });\n\n  let { dragAndDropHooks } = useDragAndDrop({\n    renderDragPreview(items) {\n      return (\n        <div className=\"drag-preview\">\n          {items[0]['text/plain']}\n          <span className=\"badge\">{items.length}</span>\n        </div>\n      );\n    },\n    getItems(keys) {\n      return [...keys].map((key) => {\n        let item = list.getItem(key);\n        return {\n          'custom-app-type': JSON.stringify(item),\n          'text/plain': item.name\n        };\n      });\n    },\n    acceptedDragTypes: ['custom-app-type'],\n    getDropOperation: () => 'move',\n    async onInsert(e) {\n      let processedItems = await Promise.all(\n        e.items\n          .filter(isTextDropItem)\n          .map(async item => JSON.parse(await item.getText('custom-app-type')))\n      );\n      if (e.target.dropPosition === 'before') {\n        list.insertBefore(e.target.key, ...processedItems);\n      } else if (e.target.dropPosition === 'after') {\n        list.insertAfter(e.target.key, ...processedItems);\n      }\n    },\n    async onRootDrop(e) {\n      let processedItems = await Promise.all(\n        e.items\n          .filter(isTextDropItem)\n          .map(async item => JSON.parse(await item.getText('custom-app-type')))\n      );\n      list.append(...processedItems);\n    },\n    onReorder(e) {\n      if (e.target.dropPosition === 'before') {\n        list.moveBefore(e.target.key, e.keys);\n      } else if (e.target.dropPosition === 'after') {\n        list.moveAfter(e.target.key, e.keys);\n      }\n    },\n    onDragEnd(e) {\n      if (e.dropOperation === 'move' && !e.isInternal) {\n        list.remove(...e.keys);\n      }\n    }\n  });\n\n  return (\n    <MyGridList\n      aria-label={props['aria-label']}\n      selectionMode=\"multiple\"\n      selectedKeys={list.selectedKeys}\n      onSelectionChange={list.setSelectedKeys}\n      items={list.items}\n      dragAndDropHooks={dragAndDropHooks}\n      renderEmptyState={() => 'Drop items here'}>\n      {item => <MyItem>{item.name}</MyItem>}\n    </MyGridList>\n  );\n}\n\n<div style={{display: 'flex', gap: 12, flexWrap: 'wrap'}}>\n  <DndGridList\n    initialItems={[\n      { id: '1', type: 'file', name: 'Adobe Photoshop' },\n      { id: '2', type: 'file', name: 'Adobe XD' },\n      { id: '3', type: 'folder', name: 'Documents' },\n      { id: '4', type: 'file', name: 'Adobe InDesign' },\n      { id: '5', type: 'folder', name: 'Utilities' },\n      { id: '6', type: 'file', name: 'Adobe AfterEffects' }\n    ]}\n    aria-label=\"First GridList\"\n  />\n  <DndGridList\n    initialItems={[\n      { id: '7', type: 'folder', name: 'Pictures' },\n      { id: '8', type: 'file', name: 'Adobe Fresco' },\n      { id: '9', type: 'folder', name: 'Apps' },\n      { id: '10', type: 'file', name: 'Adobe Illustrator' },\n      { id: '11', type: 'file', name: 'Adobe Lightroom' },\n      { id: '12', type: 'file', name: 'Adobe Dreamweaver' }\n    ]}\n    aria-label=\"Second GridList\"\n  />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Reorderable Table Rows with React Aria Components\nDESCRIPTION: This snippet shows how to create a table with reorderable rows using the useDragAndDrop hook. It includes handling row reordering and rendering drag handles.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Table.mdx#2025-04-23_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useListData} from 'react-stately';\nimport {useDragAndDrop, Button} from 'react-aria-components';\n\nfunction Example() {\n  let list = useListData({\n    initialItems: [\n      {id: 1, name: 'Games', date: '6/7/2020', type: 'File folder'},\n      {id: 2, name: 'Program Files', date: '4/7/2021', type: 'File folder'},\n      {id: 3, name: 'bootmgr', date: '11/20/2010', type: 'System file'},\n      {id: 4, name: 'log.txt', date: '1/18/2016', type: 'Text Document'}\n    ]\n  });\n\n  let {dragAndDropHooks} = useDragAndDrop({\n    getItems: (keys) => [...keys].map(key => ({\n      'text/plain': list.getItem(key).name\n    })),\n    onReorder(e) {\n      if (e.target.dropPosition === 'before') {\n        list.moveBefore(e.target.key, e.keys);\n      } else if (e.target.dropPosition === 'after') {\n        list.moveAfter(e.target.key, e.keys);\n      }\n    }\n  });\n\n  return (\n    <Table\n      aria-label=\"Files\"\n      selectionMode=\"multiple\"\n      dragAndDropHooks={dragAndDropHooks}\n    >\n      <TableHeader>\n        <Column></Column>\n        <Column><MyCheckbox slot=\"selection\" /></Column>\n        <Column isRowHeader>Name</Column>\n        <Column>Type</Column>\n        <Column>Date Modified</Column>\n      </TableHeader>\n      <TableBody items={list.items}>\n        {item => (\n          <Row>\n            <Cell><Button slot=\"drag\">≡</Button></Cell>\n            <Cell><MyCheckbox slot=\"selection\" /></Cell>\n            <Cell>{item.name}</Cell>\n            <Cell>{item.type}</Cell>\n            <Cell>{item.date}</Cell>\n          </Row>\n        )}\n      </TableBody>\n    </Table>\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Row {\n  &[data-dragging] {\n    opacity: 0.6;\n    transform: translateZ(0);\n  }\n\n  [slot=drag] {\n    all: unset;\n    width: 15px;\n    text-align: center;\n\n    &[data-focus-visible] {\n      border-radius: 4px;\n      outline: 2px solid var(--focus-ring-color);\n    }\n  }\n}\n\n.react-aria-DropIndicator[data-drop-target] {\n  outline: 1px solid var(--highlight-background);\n  transform: translateZ(0);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom FieldGroup Component with TextField Components\nDESCRIPTION: Demonstrates how to use the custom FieldGroup component to disable multiple TextField components at once.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/advanced.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<FieldGroup isDisabled={isSubmitting}>\n  <MyTextField label=\"Name\" />\n  <MyTextField label=\"Email\" />\n  <CreditCardFields />\n</FieldGroup>\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Data Loading with ComboBox and useAsyncList\nDESCRIPTION: This example demonstrates how to implement a ComboBox with asynchronous data loading using the useAsyncList hook. It fetches Star Wars character data from an API based on the user's input.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ComboBox.mdx#2025-04-23_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useAsyncList} from '@react-stately/data';\n\ninterface Character {\n  name: string\n}\n\nfunction AsyncLoadingExample() {\n  let list = useAsyncList<Character>({\n    async load({signal, filterText}) {\n      let res = await fetch(\n        `https://swapi.py4e.com/api/people/?search=${filterText}`,\n        {signal}\n      );\n      let json = await res.json();\n\n      return {\n        items: json.results\n      };\n    }\n  });\n\n  return (\n    <MyComboBox\n      label=\"Star Wars Character Lookup\"\n      items={list.items}\n      inputValue={list.filterText}\n      onInputChange={list.setFilterText}>\n      {(item) => <ListBoxItem id={item.name}>{item.name}</ListBoxItem>}\n    </MyComboBox>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Stepper Component with ButtonContext\nDESCRIPTION: Illustrates how to create a custom Stepper component using ButtonContext to provide increment and decrement functionality to child Button components.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/advanced.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Stepper({children}) {\n  let [value, setValue] = React.useState(0);\n\n  return (\n    <ButtonContext.Provider\n      value={{\n        slots: {\n          increment: {\n            onPress: () => setValue(value + 1)\n          },\n          decrement: {\n            onPress: () => setValue(value - 1)\n          }\n        }\n      }}>\n      {children}\n    </ButtonContext.Provider>\n  );\n}\n\n<Stepper>\n  <Button slot=\"increment\">⬆</Button>\n  <Button slot=\"decrement\">⬇</Button>\n</Stepper>\n```\n\n----------------------------------------\n\nTITLE: Rendering a Menu with Dynamic Sections from Hierarchical Data using React Aria Components in TypeScript/JSX\nDESCRIPTION: This snippet demonstrates how to render menu sections dynamically from an array of objects, each representing a section with its own name, id, and children. The MenuButton is configured for multiple selection. Sections are rendered using MenuSection and Header, with the Collection component used for nested items. Requires React, React Aria Components, and Selection type.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Menu.mdx#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Selection} from 'react-aria-components';\\nimport {Collection} from 'react-aria-components';\\n\\nfunction Example() {\\n  let [selected, setSelected] = React.useState<Selection>(new Set([1,3]));\\n  let openWindows = [\\n    {\\n      name: 'Left Panel',\\n      id: 'left',\\n      children: [\\n        {id: 1, name: 'Final Copy (1)'}\\n      ]\\n    },\\n    {\\n      name: 'Right Panel',\\n      id: 'right',\\n      children: [\\n        {id: 2, name: 'index.ts'},\\n        {id: 3, name: 'package.json'},\\n        {id: 4, name: 'license.txt'}\\n      ]\\n    }\\n  ];\\n\\n  return (\\n    <MyMenuButton\\n      label=\\\"Window\\\"\\n      items={openWindows}\\n      selectionMode=\\\"multiple\\\"\\n      selectedKeys={selected}\\n      onSelectionChange={setSelected}>\\n      {section => (\\n        <MenuSection>\\n          <Header>{section.name}</Header>\\n          <Collection items={section.children}>\\n            {item => <MenuItem>{item.name}</MenuItem>}\\n          </Collection>\\n        </MenuSection>\\n      )}\\n    </MyMenuButton>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Loading in Autocomplete with React\nDESCRIPTION: This example demonstrates how to implement asynchronous loading and filtering of data from a server in an Autocomplete component. It uses the useAsyncList hook to handle the data fetching and updates the Autocomplete based on the input value.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Autocomplete.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useAsyncList} from '@react-stately/data';\n\nfunction AsyncLoadingExample() {\n  let list = useAsyncList<{name: string}>({\n    async load({signal, filterText}) {\n      let res = await fetch(\n        `https://swapi.py4e.com/api/people/?search=${filterText}`,\n        {signal}\n      );\n      let json = await res.json();\n\n      return {\n        items: json.results\n      };\n    }\n  });\n\n  return (\n    <div className=\"my-autocomplete\">\n      <Autocomplete\n        inputValue={list.filterText}\n        onInputChange={list.setFilterText}>\n        <MySearchField label=\"Star Wars Character Search\" />\n        <Menu items={list.items} renderEmptyState={() => 'No results found.'}>\n          {(item) => <MenuItem id={item.name} href={`https://www.starwars.com/databank/${item.name.toLowerCase().replace(/\\s/g, '-')}`} target=\"_blank\">{item.name}</MenuItem>}\n        </Menu>\n      </Autocomplete>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing an Opacity Slider with React Aria Components and Tailwind (TypeScript/TSX)\nDESCRIPTION: This example defines an accessible opacity slider using react-aria-components, styled with Tailwind CSS. It leverages several components (Slider, Label, SliderOutput, SliderTrack, SliderThumb) to create a visually and functionally rich slider. Required dependencies include react-aria-components and Tailwind CSS with proper setup. The slider displays a label, real-time output, custom track, fill, and a draggable thumb. The state object is leveraged for dynamic width styling, showcasing advanced usage of React render props.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/opacity-slider.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Slider, Label, SliderOutput, SliderTrack, SliderThumb} from 'react-aria-components';\\n\\n<div className=\\\"bg-linear-to-r from-purple-600 to-pink-600 p-12 rounded-lg flex justify-center\\\">\\n  <Slider defaultValue={30} className=\\\"w-[250px]\\\">\\n    <div className=\\\"flex text-white\\\">\\n      <Label className=\\\"flex-1\\\">Opacity</Label>\\n      <SliderOutput />\\n    </div>\\n    <SliderTrack className=\\\"relative w-full h-7\\\">\\n      {({state}) => <>\\n        {/* track */}\\n        <div className=\\\"absolute h-2 top-[50%] translate-y-[-50%] w-full rounded-full bg-white/40\\\" />\\n        {/* fill */}\\n        <div className=\\\"absolute h-2 top-[50%] translate-y-[-50%] rounded-full bg-white\\\" style={{width: state.getThumbPercent(0) * 100 + '%'}} />\\n        <SliderThumb className=\\\"h-7 w-7 top-[50%] rounded-full border border-solid border-purple-800/75 bg-white transition dragging:bg-purple-100 outline-hidden focus-visible:ring-2 ring-black\\\" />\\n      </>}\\n    </SliderTrack>\\n  </Slider>\\n</div>\n```\n\n----------------------------------------\n\nTITLE: Integrating Channel Sliders with ColorPicker (tsx)\nDESCRIPTION: Shows an example of embedding `ColorSlider` components within a `ColorPicker` to adjust individual color channels. A `Select` component is used to switch between different color spaces (RGB, HSL, HSB), dynamically rendering the appropriate sliders using `getColorChannels`. This requires custom components `MyColorPicker`, `MySelect`, `MyItem`, and `MyColorSlider`.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorPicker.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {ColorSpace} from 'react-aria-components';\nimport {getColorChannels} from 'react-aria-components';\nimport {MyColorSlider} from './ColorSlider';\nimport {MySelect, MyItem} from './Select';\n\nfunction Example() {\n  let [space, setSpace] = React.useState<ColorSpace>('rgb');\n\n  return (\n    <MyColorPicker label=\"Fill color\" defaultValue=\"#184\">\n      <MySelect aria-label=\"Color space\" selectedKey={space} onSelectionChange={s => setSpace(s as ColorSpace)}>\n        <MyItem id=\"rgb\">RGB</MyItem>\n        <MyItem id=\"hsl\">HSL</MyItem>\n        <MyItem id=\"hsb\">HSB</MyItem>\n      </MySelect>\n      {/*- begin highlight -*/}\n      {getColorChannels(space).map(channel => (\n        <MyColorSlider key={channel} colorSpace={space} channel={channel} />\n      ))}\n      <MyColorSlider channel=\"alpha\" />\n      {/*- end highlight -*/}\n    </MyColorPicker>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Disallowing Empty Selection in GridList - TypeScript\nDESCRIPTION: Demonstrates how to require at least one row to remain selected in a multi-select grid list using the disallowEmptySelection prop. The ExampleList is configured for multiple selection, defaults to item 2 selected, and passes disallowEmptySelection to prevent users from deselecting all rows. This is useful for ensuring minimum selection constraints in accessible UIs.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/GridList.mdx#2025-04-23_snippet_7\n\nLANGUAGE: TSX\nCODE:\n```\n<ExampleList\\n  aria-label=\\\"List with disallowed empty selection\\\"\\n  selectionMode=\\\"multiple\\\"\\n  defaultSelectedKeys={[2]}\\n  /*- begin highlight -*/\\n  disallowEmptySelection\\n  /*- end highlight -*/\\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Delayed Pending State in React Button Component\nDESCRIPTION: This snippet demonstrates how to implement a button with a delayed pending state, including a progress indicator that appears after a short delay while maintaining accessibility.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Button.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nfunction PendingDelayed(props) {\n  let [isPending, setPending] = useState(false);\n\n  let handlePress = (e) => {\n    setPending(true);\n    setTimeout(() => {\n      setPending(false);\n    }, 5000);\n  };\n\n  return (\n    <Button\n      {...props}\n      isPending={isPending}\n      onPress={handlePress}\n      style={{position: 'relative'}}>\n        {({isPending}) => (\n          <>\n            <span className={isPending ? 'pending' : undefined}>Save</span>\n            {isPending && (\n              <MyProgressCircle aria-label=\"in progress\" isIndeterminate className=\"spinner\" />\n            )}\n          </>\n        )}\n    </Button>\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n@keyframes toggle {\n  from {\n    opacity: 0;\n  }\n\n  to {\n    opacity: 1;\n  }\n}\n\n.spinner {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  animation: toggle 1s steps(1);\n  opacity: 1;\n}\n\n.pending {\n  animation: toggle 1s reverse steps(1, jump-start);\n  opacity: 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Interactive Stock Table Implementation - TypeScript/React\nDESCRIPTION: Implements a sortable and resizable stock table component using React Aria Components. Features include column sorting, multiple row selection, sticky headers, and responsive design with Tailwind CSS styling.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/stock-table.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Table, TableHeader, TableBody, Column, Row, Cell, ResizableTableContainer, ColumnResizer, Group} from 'react-aria-components';\nimport type {ColumnProps, RowProps, CellProps, SortDescriptor} from 'react-aria-components';\nimport ArrowUpIcon from '@spectrum-icons/ui/ArrowUpSmall';\nimport {useState, useMemo} from 'react';\n\nfunction StockTableExample() {\n  let [sortDescriptor, setSortDescriptor] = useState<SortDescriptor>({column: 'symbol', direction: 'ascending'});\n  let sortedItems = useMemo(() => {\n    return stocks.sort((a, b) => {\n      let first = a[sortDescriptor.column];\n      let second = b[sortDescriptor.column];\n      let cmp = first.localeCompare(second);\n      if (sortDescriptor.direction === 'descending') {\n        cmp *= -1;\n      }\n      return cmp;\n    })\n  }, [sortDescriptor]);\n\n  return (\n    <div className=\"bg-linear-to-r from-indigo-500 to-violet-500 p-8 rounded-lg flex items-center justify-center md:col-span-2\">\n      <ResizableTableContainer className=\"max-h-[280px] w-full overflow-auto scroll-pt-[2.321rem] relative bg-white rounded-lg shadow-sm text-gray-600\">\n        <Table aria-label=\"Stocks\" selectionMode=\"multiple\" selectionBehavior=\"replace\" sortDescriptor={sortDescriptor} onSortChange={setSortDescriptor} className=\"border-separate border-spacing-0\">\n          <TableHeader>\n            <StockColumn id=\"symbol\" allowsSorting>Symbol</StockColumn>\n            <StockColumn id=\"name\" isRowHeader allowsSorting defaultWidth=\"3fr\">Name</StockColumn>\n            <StockColumn id=\"marketCap\" allowsSorting>Market Cap</StockColumn>\n            <StockColumn id=\"sector\" allowsSorting>Sector</StockColumn>\n            <StockColumn id=\"industry\" allowsSorting defaultWidth=\"2fr\">Industry</StockColumn>\n          </TableHeader>\n          <TableBody items={sortedItems}>\n            {item => (\n              <StockRow>\n                <StockCell><span className=\"font-mono bg-slate-100 border border-slate-200 rounded-sm px-1 group-selected:bg-slate-700 group-selected:border-slate-800\">${item.symbol}</span></StockCell>\n                <StockCell className=\"font-semibold\">{item.name}</StockCell>\n                <StockCell>{item.marketCap}</StockCell>\n                <StockCell>{item.sector}</StockCell>\n                <StockCell>{item.industry}</StockCell>\n              </StockRow>\n            )}\n          </TableBody>\n        </Table>\n      </ResizableTableContainer>\n    </div>\n  );\n}\n\nfunction StockColumn(props: ColumnProps & {children: React.ReactNode}) {\n  return (\n    <Column {...props} className=\"sticky top-0 p-0 border-0 border-b border-solid border-slate-300 bg-slate-200 font-bold text-left cursor-default first:rounded-tl-lg last:rounded-tr-lg whitespace-nowrap outline-hidden\">\n      {({allowsSorting, sortDirection}) => (\n        <div className=\"flex items-center pl-4 py-1\">\n          <Group role=\"presentation\" tabIndex={-1} className=\"flex flex-1 items-center overflow-hidden outline-hidden rounded-sm focus-visible:ring-2 ring-slate-600\">\n```\n\n----------------------------------------\n\nTITLE: DateField Component Structure with Accessibility Features\nDESCRIPTION: Example showing the complete structure of a DateField component with Label, DateInput, Description, and Error components for full accessibility.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DateField.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {DateField, Label, DateInput, DateSegment, Text, FieldError} from 'react-aria-components';\n\n<DateField>\n  <Label />\n  <DateInput>\n    {segment => <DateSegment segment={segment} />}\n  </DateInput>\n  <Text slot=\"description\" />\n  <FieldError />\n</DateField>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Row Component with Tailwind in React Aria Components\nDESCRIPTION: A custom Row component implementation (StockRow) that extends the base Row component with Tailwind CSS styling. It applies alternating row colors, selection styling, cursor styling, and focus styles.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/stock-table.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nfunction StockRow<T extends object>(props: RowProps<T>) {\n  return <Row {...props} className=\"even:bg-slate-100 selected:bg-slate-600 selected:text-white cursor-default group outline-hidden focus-visible:outline focus-visible:outline-2 focus-visible:outline-slate-600 focus-visible:-outline-offset-4 selected:focus-visible:outline-white\" />;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Reorderable ListBox with Drag and Drop in React\nDESCRIPTION: This snippet demonstrates how to create a reorderable ListBox using React Aria components and the useDragAndDrop hook. It implements basic drag and drop functionality to reorder items within the list.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ListBox.mdx#2025-04-23_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useListData} from 'react-stately';\nimport {useDragAndDrop} from 'react-aria-components';\n\nfunction Example() {\n  let list = useListData({\n    initialItems: [\n      {id: 1, name: 'Adobe Photoshop'},\n      {id: 2, name: 'Adobe XD'},\n      {id: 3, name: 'Adobe Dreamweaver'},\n      {id: 4, name: 'Adobe InDesign'},\n      {id: 5, name: 'Adobe Connect'}\n    ]\n  });\n\n  let {dragAndDropHooks} = useDragAndDrop({\n    getItems: (keys) => [...keys].map(key => ({'text/plain': list.getItem(key).name})),\n    onReorder(e) {\n      if (e.target.dropPosition === 'before') {\n        list.moveBefore(e.target.key, e.keys);\n      } else if (e.target.dropPosition === 'after') {\n        list.moveAfter(e.target.key, e.keys);\n      }\n    }\n  });\n\n  return (\n    <ListBox\n      aria-label=\"Reorderable list\"\n      selectionMode=\"multiple\"\n      items={list.items}\n      dragAndDropHooks={dragAndDropHooks}\n    >\n      {item => <ListBoxItem>{item.name}</ListBoxItem>}\n    </ListBox>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Bidirectional Drag and Drop Between Lists\nDESCRIPTION: Comprehensive example of implementing drag and drop functionality between two lists, including item reordering, custom drag preview, and drop handling logic.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ListBox.mdx#2025-04-23_snippet_41\n\nLANGUAGE: tsx\nCODE:\n```\nimport {isTextDropItem} from 'react-aria-components';\n\ninterface FileItem {\n  id: string,\n  name: string,\n  type: string\n}\n\ninterface DndListBoxProps {\n  initialItems: FileItem[],\n  'aria-label': string\n}\n\nfunction DndListBox(props: DndListBoxProps) {\n  let list = useListData({\n    initialItems: props.initialItems\n  });\n\n  let { dragAndDropHooks } = useDragAndDrop({\n    getItems(keys) {\n      return [...keys].map((key) => {\n        let item = list.getItem(key);\n        return {\n          'custom-app-type': JSON.stringify(item),\n          'text/plain': item.name\n        };\n      });\n    },\n    acceptedDragTypes: ['custom-app-type'],\n    getDropOperation: () => 'move',\n    async onInsert(e) {\n      let processedItems = await Promise.all(\n        e.items\n          .filter(isTextDropItem)\n          .map(async item => JSON.parse(await item.getText('custom-app-type')))\n      );\n      if (e.target.dropPosition === 'before') {\n        list.insertBefore(e.target.key, ...processedItems);\n      } else if (e.target.dropPosition === 'after') {\n        list.insertAfter(e.target.key, ...processedItems);\n      }\n    },\n    async onRootDrop(e) {\n      let processedItems = await Promise.all(\n        e.items\n          .filter(isTextDropItem)\n          .map(async item => JSON.parse(await item.getText('custom-app-type')))\n      );\n      list.append(...processedItems);\n    },\n    onReorder(e) {\n      if (e.target.dropPosition === 'before') {\n        list.moveBefore(e.target.key, e.keys);\n      } else if (e.target.dropPosition === 'after') {\n        list.moveAfter(e.target.key, e.keys);\n      }\n    },\n    onDragEnd(e) {\n      if (e.dropOperation === 'move' && !e.isInternal) {\n        list.remove(...e.keys);\n      }\n    }\n  });\n\n  return (\n    <ListBox\n      aria-label={props['aria-label']}\n      selectionMode=\"multiple\"\n      selectedKeys={list.selectedKeys}\n      onSelectionChange={list.setSelectedKeys}\n      items={list.items}\n      dragAndDropHooks={dragAndDropHooks}\n      renderEmptyState={() => 'Drop items here'}>\n      {item => <ListBoxItem>{item.name}</ListBoxItem>}\n    </ListBox>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable NumberField Wrapper Component in TSX\nDESCRIPTION: This example demonstrates how to create a reusable `MyNumberField` component by wrapping the standard `react-aria-components` `NumberField` and its parts. It accepts props like `label`, `description`, and `errorMessage`, passing them down to the appropriate child components (`Label`, `Text`, `FieldError`) to provide a consistent interface and structure for number fields throughout an application. It leverages TypeScript types for prop definition.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/NumberField.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {NumberFieldProps, ValidationResult} from 'react-aria-components';\nimport {Text, FieldError} from 'react-aria-components';\n\ninterface MyNumberFieldProps extends NumberFieldProps {\n  label?: string,\n  description?: string,\n  errorMessage?: string | ((validation: ValidationResult) => string)\n}\n\nfunction MyNumberField({label, description, errorMessage, ...props}: MyNumberFieldProps) {\n  return (\n    <NumberField {...props}>\n      <Label>{label}</Label>\n      <Group>\n        <Button slot=\"decrement\">-</Button>\n        <Input />\n        <Button slot=\"increment\">+</Button>\n      </Group>\n      {description && <Text slot=\"description\">{description}</Text>}\n      <FieldError>{errorMessage}</FieldError>\n    </NumberField>\n  );\n}\n\n<MyNumberField label=\"Cookies\" />\n```\n\n----------------------------------------\n\nTITLE: Managing Section-level Selection in Menu using React Aria Components in TypeScript/JSX\nDESCRIPTION: This code demonstrates how to independently manage selection state for each MenuSection. Separate React useState hooks are used for different sections/specifications, with some MenuSections enabling single or multiple selection. MenuSections receive selectionMode, selectedKeys, and onSelectionChange. Intended for use with React and React Aria Components.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Menu.mdx#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nfunction Example() {\\n  let [style, setStyle] = React.useState<Selection>(new Set(['bold']));\\n  let [align, setAlign] = React.useState<Selection>(new Set(['left']));\\n  return (\\n    <MyMenuButton label=\\\"Edit\\\">\\n      <MenuSection>\\n        <Header>Actions</Header>\\n        <MenuItem>Cut</MenuItem>\\n        <MenuItem>Copy</MenuItem>\\n        <MenuItem>Paste</MenuItem>\\n      </MenuSection>\\n      <MenuSection selectionMode=\\\"multiple\\\" selectedKeys={style} onSelectionChange={setStyle}>\\n        <Header>Text style</Header>\\n        <MenuItem id=\\\"bold\\\">Bold</MenuItem>\\n        <MenuItem id=\\\"italic\\\">Italic</MenuItem>\\n        <MenuItem id=\\\"underline\\\">Underline</MenuItem>\\n      </MenuSection>\\n      <MenuSection selectionMode=\\\"single\\\" selectedKeys={align} onSelectionChange={setAlign}>\\n        <Header>Text alignment</Header>\\n        <MenuItem id=\\\"left\\\">Left</MenuItem>\\n        <MenuItem id=\\\"center\\\">Center</MenuItem>\\n        <MenuItem id=\\\"right\\\">Right</MenuItem>\\n      </MenuSection>\\n    </MyMenuButton>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Dynamic Menu using React Aria Components in TypeScript/JSX\nDESCRIPTION: This example shows how to create a dynamic menu where options are defined as an array of objects, each with an id and name. The MyMenuButton component receives the items as a prop, and for each item renders a MenuItem displaying the item's name. The onAction prop receives the id of the selected item. No external dependencies are required except for React and the React Aria Components library.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Menu.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction Example() {\\n  let items = [\\n    {id: 1, name: 'New'},\\n    {id: 2, name: 'Open'},\\n    {id: 3, name: 'Close'},\\n    {id: 4, name: 'Save'},\\n    {id: 5, name: 'Duplicate'},\\n    {id: 6, name: 'Rename'},\\n    {id: 7, name: 'Move'}\\n  ];\\n\\n  return (\\n    <MyMenuButton label=\\\"Actions\\\" items={items} onAction={id => alert(id)}>\\n      {(item) => <MenuItem>{item.name}</MenuItem>}\\n    </MyMenuButton>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Composing TableHeader and Row with Selection and Drag Handles - React Aria Components - TypeScript\nDESCRIPTION: This pair of components demonstrates how to extend TableHeader and Row from React Aria Components to automatically inject selection checkboxes and drag handles based on table options. They use the useTableOptions hook and the Collection component to derive props and render collections from provided data. These wrappers eliminate duplicated code by centralizing the logic for adding selection and drag UI elements, ensuring consistency and easier reuse. Dependencies include react-aria-components for hooks and components, and a custom MyCheckbox component for selection.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Table.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {TableHeaderProps, RowProps} from 'react-aria-components';\nimport {Collection, useTableOptions} from 'react-aria-components';\n\nexport function MyTableHeader<T extends object>({columns, children}: TableHeaderProps<T>) {\n  let {selectionBehavior, selectionMode, allowsDragging} = useTableOptions();\n\n  return (\n    <TableHeader>\n      {/* Add extra columns for drag and drop and selection. */}\n      {allowsDragging && <Column />}\n      {selectionBehavior === 'toggle' && <Column>{selectionMode === 'multiple' && <MyCheckbox slot=\"selection\" />}</Column>}\n      <Collection items={columns}>\n        {children}\n      </Collection>\n    </TableHeader>\n  );\n}\n\nexport function MyRow<T extends object>({id, columns, children, ...otherProps}: RowProps<T>) {\n  let {selectionBehavior, allowsDragging} = useTableOptions();\n\n  return (\n    <Row id={id} {...otherProps}>\n      {allowsDragging && <Cell><Button slot=\"drag\">≡</Button></Cell>}\n      {selectionBehavior === 'toggle' && <Cell><MyCheckbox slot=\"selection\" /></Cell>}\n      <Collection items={columns}>\n        {children}\n      </Collection>\n    </Row>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic NumberField in TSX\nDESCRIPTION: This snippet demonstrates the basic usage of the `NumberField` component from `react-aria-components`. It shows how to compose it using `Label`, `Group`, `Input`, and `Button` components to create a functional number input with increment and decrement controls. A default value and minimum value are also set.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/NumberField.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {NumberField, Label, Group, Input, Button} from 'react-aria-components';\n\n<NumberField defaultValue={1024} minValue={0}>\n  <Label>Width</Label>\n  <Group>\n    <Button slot=\"decrement\">-</Button>\n    <Input />\n    <Button slot=\"increment\">+</Button>\n  </Group>\n</NumberField>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating ProgressBar Usage with Value and Label (React Aria Components, TypeScript/TSX)\nDESCRIPTION: This snippet provides a practical example of using the ProgressBar and Label components from react-aria-components within a React application to display a progress bar with dynamic value and label. It demonstrates destructuring the percentage and valueText via ProgressBar's render prop for a custom layout, including value display and CSS-based progress fill. Dependencies: react-aria-components. Inputs: value (number), outputs: rendered progress bar with label and value. Requires wrapping in a React application and applicable CSS for styling. Intended for determinate progress display.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ProgressBar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ProgressBar, Label} from 'react-aria-components';\n\n<ProgressBar value={80}>\n  {({percentage, valueText}) => <>\n    <Label>Loading…</Label>\n    <span className=\"value\">{valueText}</span>\n    <div className=\"bar\">\n      <div className=\"fill\" style={{width: percentage + '%'}} />\n    </div>\n  </>}\n</ProgressBar>\n```\n\n----------------------------------------\n\nTITLE: Implementing International Calendar Support in DateField with React\nDESCRIPTION: This snippet demonstrates how to use the DateField component with international calendar support. It uses the I18nProvider to set the locale and calendar system.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DateField.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport {I18nProvider} from '@react-aria/i18n';\n\nfunction Example() {\n  let [date, setDate] = React.useState<DateValue | null>(null);\n  return (\n    <I18nProvider locale=\"hi-IN-u-ca-indian\">\n      <MyDateField label=\"Date\" value={date} onChange={setDate} />\n      <p>Selected date: {date?.toString()}</p>\n    </I18nProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Reusable RadioGroup Wrapper Component\nDESCRIPTION: Creates a reusable RadioGroup component with customizable label, description, and error message props.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/RadioGroup.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {RadioGroupProps, ValidationResult} from 'react-aria-components';\nimport {Text, FieldError} from 'react-aria-components';\n\ninterface MyRadioGroupProps extends Omit<RadioGroupProps, 'children'> {\n  children?: React.ReactNode,\n  label?: string,\n  description?: string,\n  errorMessage?: string | ((validation: ValidationResult) => string)\n}\n\nfunction MyRadioGroup({\n  label,\n  description,\n  errorMessage,\n  children,\n  ...props\n}: MyRadioGroupProps) {\n  return (\n    <RadioGroup {...props}>\n      <Label>{label}</Label>\n      {children}\n      {description && <Text slot=\"description\">{description}</Text>}\n      <FieldError>{errorMessage}</FieldError>\n    </RadioGroup>\n  );\n}\n\n<MyRadioGroup label=\"Favorite sport\">\n  <Radio value=\"soccer\">Soccer</Radio>\n  <Radio value=\"baseball\">Baseball</Radio>\n  <Radio value=\"basketball\">Basketball</Radio>\n</MyRadioGroup>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic DisclosureGroup with Multiple Sections in React\nDESCRIPTION: A basic example showing how to implement a DisclosureGroup with multiple Disclosure components, each containing a heading, trigger button, and content panel. The example has one section expanded by default.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DisclosureGroup.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {DisclosureGroup, Disclosure, Button, DisclosurePanel, Heading} from 'react-aria-components';\n\n<DisclosureGroup defaultExpandedKeys={['personal']}>\n  <Disclosure id=\"personal\">\n    <Heading>\n      <Button slot=\"trigger\">\n        <svg viewBox=\"0 0 24 24\">\n          <path d=\"m8.25 4.5 7.5 7.5-7.5 7.5\" />\n        </svg>\n        Personal Information\n      </Button>\n    </Heading>\n    <DisclosurePanel>\n      <p>Personal information form here.</p>\n    </DisclosurePanel>\n  </Disclosure>\n  <Disclosure id=\"billing\">\n    <Heading>\n      <Button slot=\"trigger\">\n        <svg viewBox=\"0 0 24 24\">\n          <path d=\"m8.25 4.5 7.5 7.5-7.5 7.5\" />\n        </svg>\n        Billing Address\n      </Button>\n    </Heading>\n    <DisclosurePanel>\n      <p>Billing address form here.</p>\n    </DisclosurePanel>\n  </Disclosure>\n</DisclosureGroup>\n```\n\n----------------------------------------\n\nTITLE: Creating CloseButton Component with OverlayTriggerStateContext in React Aria Components\nDESCRIPTION: This example demonstrates how to create a CloseButton component that uses OverlayTriggerStateContext to access and manipulate the dialog trigger's state, allowing it to close the overlay when pressed.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Dialog.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport {OverlayTriggerStateContext} from 'react-aria-components';\n\nfunction CloseButton() {\n  let state = React.useContext(OverlayTriggerStateContext)!;\n  return <Button onPress={() => state.close()}>Close</Button>;\n}\n\n<DialogTrigger>\n  <Button>About</Button>\n  <Modal isDismissable>\n    <Dialog>\n      <Heading slot=\"title\">About</Heading>\n      <p>Copyright © 2023 Adobe. All rights reserved.</p>\n      <CloseButton />\n    </Dialog>\n  </Modal>\n</DialogTrigger>\n```\n\n----------------------------------------\n\nTITLE: Integrating Color Swatches with ColorPicker (tsx)\nDESCRIPTION: Shows how to use `ColorSwatchPicker` and `ColorSwatchPickerItem` components within a `ColorPicker` to provide users with a predefined set of color choices (swatches). This example also includes `ColorArea` and `ColorSlider`. It relies on custom components `MyColorPicker`, `MyColorArea`, `MyColorSlider`, `MyColorSwatchPicker`, and `MyColorSwatchPickerItem`.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorPicker.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport {MyColorSwatchPicker, MyColorSwatchPickerItem} from './ColorSwatchPicker';\n\n<MyColorPicker label=\"Color\" defaultValue=\"#A00\">\n  <MyColorArea colorSpace=\"hsb\" xChannel=\"saturation\" yChannel=\"brightness\" />\n  <MyColorSlider colorSpace=\"hsb\" channel=\"hue\" />\n  <MyColorSwatchPicker>\n    <MyColorSwatchPickerItem color=\"#A00\" />\n    <MyColorSwatchPickerItem color=\"#f80\" />\n    <MyColorSwatchPickerItem color=\"#080\" />\n    <MyColorSwatchPickerItem color=\"#08f\" />\n    <MyColorSwatchPickerItem color=\"#008\" />\n  </MyColorSwatchPicker>\n</MyColorPicker>\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS Plugins for React Aria Components - CSS\nDESCRIPTION: Shows how to add the tailwindcss-react-aria-components plugin to Tailwind CSS for full compatibility with React Aria Components styling. Add the @import and @plugin lines to your CSS file when using Tailwind v4. This enables out-of-the-box support for react-aria-components classes and features.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/ripple-button.mdx#2025-04-23_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n@plugin \"tailwindcss-react-aria-components\";\n```\n\n----------------------------------------\n\nTITLE: Creating an Interactive Account Menu Component in React\nDESCRIPTION: Defines the `AccountMenuExample` React component using `react-aria-components`. It demonstrates how to build a menu triggered by a button, displaying user information, a dark mode switch, and menu items within a Popover. Custom styled `MyMenuItem` and `MySwitch` components are included to encapsulate styling logic using Tailwind CSS classes. This example illustrates nesting components like Menu within a Popover to create richer interactions while maintaining accessibility.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/account-menu.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {MenuTrigger, Button, Popover, Menu, MenuItem, Separator, Switch, composeRenderProps} from 'react-aria-components';\nimport type {MenuItemProps, SwitchProps} from 'react-aria-components';\n\nfunction AccountMenuExample() {\n  return (\n    <div className=\"p-8 bg-gray-50 dark:bg-zinc-900 rounded-lg flex items-start justify-center\">\n      <MenuTrigger>\n        <Button aria-label=\"Account\" className=\"inline-flex items-center justify-center rounded-md p-1.5 text-white bg-transparent border-none hover:bg-gray-200 pressed:bg-gray-300 dark:hover:bg-zinc-800 dark:pressed:bg-zinc-700 transition-colors cursor-default outline-hidden focus-visible:ring-2 focus-visible:ring-blue-600\">\n          <img alt=\"\" src=\"https://i.imgur.com/xIe7Wlb.png\" className=\"w-7 h-7 rounded-full\" />\n        </Button>\n        <Popover className=\"p-2 overflow-auto outline-hidden rounded-lg bg-white dark:bg-zinc-950 shadow-lg ring-1 ring-black/10 dark:ring-white/15 entering:animate-in entering:fade-in entering:placement-bottom:slide-in-from-top-1 entering:placement-top:slide-in-from-bottom-1 exiting:animate-out exiting:fade-out exiting:placement-bottom:slide-out-to-top-1 exiting:placement-top:slide-out-to-bottom-1 fill-mode-forwards origin-top-left\">\n          <div className=\"flex gap-2 items-center mx-3 mt-2\">\n            <img alt=\"\" src=\"https://i.imgur.com/xIe7Wlb.png\" className=\"w-16 h-16 rounded-full\" />\n            <div className=\"flex flex-col gap-1\">\n              <div className=\"text-[15px] font-bold text-gray-900 dark:text-gray-100 leading-none\">Marissa Whitaker</div>\n              <div className=\"text-base text-gray-900 dark:text-gray-100 leading-none mb-1\">user@example.com</div>\n              <MySwitch>Dark Mode</MySwitch>\n            </div>\n          </div>\n          <Separator className=\"border-none bg-gray-300 dark:bg-zinc-600 h-[1px] mx-3 mt-4 mb-2\" />\n          <Menu className=\"outline-hidden\">\n            <MyMenuItem id=\"new\">Account Settings</MyMenuItem>\n            <MyMenuItem id=\"open\">Support</MyMenuItem>\n            <Separator className=\"bg-gray-300 dark:bg-zinc-600 h-[1px] mx-3 my-2\" />\n            <MyMenuItem id=\"save\">Legal notices</MyMenuItem>\n            <MyMenuItem id=\"save-as\">About</MyMenuItem>\n            <Separator className=\"bg-gray-300 dark:bg-zinc-600 h-[1px] mx-3 my-2\" />\n            <MyMenuItem id=\"print\">Sign out</MyMenuItem>\n          </Menu>\n        </Popover>\n      </MenuTrigger>\n    </div>\n  );\n}\n\nfunction MyMenuItem(props: MenuItemProps) {\n  return <MenuItem {...props} className=\"group flex w-full items-center rounded-md px-3 py-2 box-border outline-hidden cursor-default text-gray-900 dark:text-gray-100 focus:bg-blue-500 focus:text-white\" />;\n}\n\nfunction MySwitch(props: SwitchProps) {\n  return (\n    <Switch className=\"group flex gap-2 items-center text-gray-800 dark:text-zinc-200 text-base transition\">\n      {composeRenderProps(props.children, children => <>\n        <div className=\"flex h-3 w-6 p-[2px] items-center shrink-0 cursor-default rounded-full transition duration-200 ease-in-out shadow-inner border border-transparent bg-gray-400 dark:bg-zinc-400 group-pressed:bg-gray-500 dark:group-pressed:bg-zinc-300 group-selected:bg-gray-700 group-selected:dark:bg-zinc-300 group-selected:forced-colors:bg-[Highlight]! group-selected:group-pressed:bg-gray-800 group-selected:dark:group-pressed:bg-zinc-200 outline outline-0 outline-blue-600 dark:outline-blue-500 forced-colors:outline-[Highlight] outline-offset-2 group-focus-visible:outline-2\">\n          <div className=\"h-3 w-3 transform rounded-full bg-white dark:bg-zinc-900 outline outline-1 -outline-offset-1 outline-transparent shadow-sm transition duration-200 ease-in-out translate-x-0 group-selected:translate-x-[100%]\" />\n        </div>\n        {children}\n      </>)}\n    </Switch>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sortable Columns with useAsyncList in React Aria Components\nDESCRIPTION: This example demonstrates how to implement client-side sorting in a table using the useAsyncList hook. It fetches character data from an API and provides sorting functionality by configuring sortDescriptor and onSortChange props on the Table component.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Table.mdx#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useAsyncList} from '@react-stately/data';\n\ninterface Character {\n  name: string,\n  height: number,\n  mass: number,\n  birth_year: number\n}\n\nfunction AsyncSortTable() {\n  let list = useAsyncList<Character>({\n    async load({signal}) {\n      let res = await fetch(`https://swapi.py4e.com/api/people/?search`, {signal});\n      let json = await res.json();\n      return {\n        items: json.results\n      };\n    },\n    async sort({items, sortDescriptor}) {\n      return {\n        items: items.sort((a, b) => {\n          let first = a[sortDescriptor.column];\n          let second = b[sortDescriptor.column];\n          let cmp = (parseInt(first) || first) < (parseInt(second) || second) ? -1 : 1;\n          if (sortDescriptor.direction === 'descending') {\n            cmp *= -1;\n          }\n          return cmp;\n        })\n      };\n    }\n  });\n\n  return (\n    <Table\n      aria-label=\"Example table with client side sorting\"\n      /*- begin highlight -*/\n      sortDescriptor={list.sortDescriptor}\n      onSortChange={list.sort}\n      /*- end highlight -*/\n    >\n      <TableHeader>\n        <MyColumn id=\"name\" isRowHeader allowsSorting>Name</MyColumn>\n        <MyColumn id=\"height\" allowsSorting>Height</MyColumn>\n        <MyColumn id=\"mass\" allowsSorting>Mass</MyColumn>\n        <MyColumn id=\"birth_year\" allowsSorting>Birth Year</MyColumn>\n      </TableHeader>\n      <TableBody items={list.items}>\n        {item => (\n          <Row id={item.name}>\n            <Cell>{item.name}</Cell>\n            <Cell>{item.height}</Cell>\n            <Cell>{item.mass}</Cell>\n            <Cell>{item.birth_year}</Cell>\n          </Row>\n        )}\n      </TableBody>\n    </Table>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic ColorPicker Implementation with Dialog\nDESCRIPTION: Example showing how to implement a ColorPicker with a button trigger, popover dialog, and color selection components.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorPicker.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ColorPicker, Button, Popover, Dialog, DialogTrigger} from 'react-aria-components';\nimport {MyColorSwatch} from './ColorSwatch';\nimport {MyColorSlider} from './ColorSlider';\nimport {MyColorArea} from './ColorArea';\nimport {MyColorField} from './ColorField';\n\n<ColorPicker defaultValue=\"#5100FF\">\n  <DialogTrigger>\n    <Button className=\"color-picker\">\n      <MyColorSwatch />\n      <span>Fill color</span>\n    </Button>\n    <Popover placement=\"bottom start\">\n      <Dialog className=\"color-picker-dialog\">\n        <MyColorArea colorSpace=\"hsb\" xChannel=\"saturation\" yChannel=\"brightness\" />\n        <MyColorSlider colorSpace=\"hsb\" channel=\"hue\" />\n        <MyColorField label=\"Hex\" />\n      </Dialog>\n    </Popover>\n  </DialogTrigger>\n</ColorPicker>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Validation with FieldError in React Aria Forms (TSX)\nDESCRIPTION: Illustrates integrating a `SearchField` within a `react-aria-components` `Form`. It applies the `isRequired` prop for native HTML constraint validation and includes a `FieldError` component to automatically display validation error messages associated with the search field.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/SearchField.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Form, FieldError} from 'react-aria-components';\n\n<Form>\n  {/*- begin highlight -*/}\n  <SearchField name=\"search\" isRequired>\n  {/*- end highlight -*/}\n    <Label>Search</Label>\n    <Input />\n    <Button>✕</Button>\n    {/*- begin highlight -*/}\n    <FieldError />\n    {/*- end highlight -*/}\n  </SearchField>\n  <Button type=\"submit\">Submit</Button>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable SearchField Component in React Aria\nDESCRIPTION: Demonstrates how to create a reusable SearchField wrapper component that encapsulates the SearchField, Label, Input, Button, description text, and error handling into a single component with customizable props.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/SearchField.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {SearchFieldProps, ValidationResult} from 'react-aria-components';\nimport {Text, FieldError} from 'react-aria-components';\n\ninterface MySearchFieldProps extends SearchFieldProps {\n  label?: string,\n  description?: string,\n  errorMessage?: string | ((validation: ValidationResult) => string),\n  placeholder?: string\n}\n\nexport function MySearchField({label, description, errorMessage, placeholder, ...props}: MySearchFieldProps) {\n  return (\n    <SearchField {...props}>\n      {label && <Label>{label}</Label>}\n      <Input placeholder={placeholder} />\n      <Button>✕</Button>\n      {description && <Text slot=\"description\">{description}</Text>}\n      <FieldError>{errorMessage}</FieldError>\n    </SearchField>\n  );\n}\n\n<MySearchField label=\"Search\" />\n```\n\n----------------------------------------\n\nTITLE: Creating a Selectable Table Component with React Aria Contexts\nDESCRIPTION: This example demonstrates how to create a custom Selectable component that uses React Aria contexts to control the selection mode of a nested Table component.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Table.mdx#2025-04-23_snippet_48\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {SelectionMode} from 'react-aria-components';\nimport {ToggleButtonContext, TableContext} from 'react-aria-components';\n\nfunction Selectable({children}) {\n  let [isSelected, onChange] = React.useState(false);\n  let selectionMode: SelectionMode = isSelected ? 'multiple' : 'none';\n  return (\n    <ToggleButtonContext.Provider value={{isSelected, onChange}}>\n      <TableContext.Provider value={{selectionMode}}>\n        {children}\n      </TableContext.Provider>\n    </ToggleButtonContext.Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Channel Fields with ColorPicker (tsx)\nDESCRIPTION: Illustrates using `ColorField` components within a `ColorPicker` to allow numerical input for each color channel. A `Select` component controls the active color space, and `getColorChannels` dynamically renders the corresponding fields. The example also includes `ColorArea` and `ColorSlider`. This requires custom components `MyColorPicker`, `MyColorArea`, `MyColorSlider`, `MySelect`, `MyItem`, and `MyColorField`.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorPicker.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {ColorSpace} from 'react-aria-components';\nimport {getColorChannels} from 'react-aria-components';\nimport {MyColorArea} from './ColorArea';\nimport {MyColorSlider} from './ColorSlider';\nimport {MySelect, MyItem} from './Select';\nimport {MyColorField} from './ColorField';\n\nfunction Example() {\n  let [space, setSpace] = React.useState<ColorSpace>('rgb');\n\n  return (\n    <MyColorPicker label=\"Color\" defaultValue=\"#f80\">\n      <MyColorArea colorSpace=\"hsb\" xChannel=\"saturation\" yChannel=\"brightness\" />\n      <MyColorSlider colorSpace=\"hsb\" channel=\"hue\" />\n      <MySelect aria-label=\"Color space\" selectedKey={space} onSelectionChange={s => setSpace(s as ColorSpace)}>\n        <MyItem id=\"rgb\">RGB</MyItem>\n        <MyItem id=\"hsl\">HSL</MyItem>\n        <MyItem id=\"hsb\">HSB</MyItem>\n      </MySelect>\n      <div style={{display: 'flex', gap: 4, width: 192}}>\n        {/*- begin highlight -*/}\n        {getColorChannels(space).map(channel => (\n          <MyColorField key={channel} colorSpace={space} channel={channel} style={{flex: 1}} />\n        ))}\n        {/*- end highlight -*/}\n      </div>\n    </MyColorPicker>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Data Types in DropZone with Event Handling\nDESCRIPTION: An example showing how to handle dropped text data by filtering items of the desired type and extracting their content. It also includes a Draggable component for demonstration.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DropZone.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {TextDropItem} from '@react-aria/dnd';\n\nfunction Example() {\n  let [dropped, setDropped] = React.useState(null);\n\n  return (\n    <>\n      <Draggable />\n      <DropZone\n        onDrop={async(e) => {\n          let items = await Promise.all(\n            e.items\n              .filter(item => item.kind === 'text' && item.types.has('text/plain'))\n              .map((item: TextDropItem) => item.getText('text/plain'))\n          );\n          setDropped(items.join('\\n'));\n        }}>\n        <Text slot=\"label\">\n          {dropped || 'Drop here'}\n        </Text>\n      </ DropZone>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Providing Context Values to Children with Custom Number Field using React Aria Components (TypeScript)\nDESCRIPTION: This snippet implements a CustomNumberField component using hooks and context from react-aria-components. It uses useLocale, useNumberFieldState, and useNumberField for proper state and behavior. The Provider component sets contexts (GroupContext, InputContext, LabelContext, ButtonContext) for children, so the parent can supply values for reusable subcomponents. Dependencies include react-aria-components, react-aria, react-stately, and React. Inputs are NumberFieldProps and arbitrary children; outputs are provider-wrapped children with context-driven behavior.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/advanced.mdx#2025-04-23_snippet_13\n\nLANGUAGE: TSX\nCODE:\n```\nimport type {NumberFieldProps} from 'react-aria-components';\nimport {Provider, GroupContext, InputContext, LabelContext, ButtonContext} from 'react-aria-components';\nimport {useNumberFieldState} from 'react-stately';\nimport {useNumberField, useLocale} from 'react-aria';\n\nfunction CustomNumberField(props: NumberFieldProps) {\n  // Follow the hook docs...\n  let {locale} = useLocale();\n  let state = useNumberFieldState({...props, locale});\n  let ref = useRef<HTMLInputElement>(null);\n  let {\n    labelProps,\n    groupProps,\n    inputProps,\n    incrementButtonProps,\n    decrementButtonProps\n  } = useNumberField(props, state, ref);\n\n  // Provide values for the child components via context.\n  return (\n    /*- begin highlight -*/\n    <Provider\n      values={[\n        [GroupContext, groupProps],\n        [InputContext, {...inputProps, ref}],\n        [LabelContext, labelProps],\n        [ButtonContext, {\n          slots: {\n            increment: incrementButtonProps,\n            decrement: decrementButtonProps\n          }\n        }]\n      ]}>\n      {props.children}\n    </Provider>\n    /*- end highlight -*/\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sections in React Aria ListBox\nDESCRIPTION: This example demonstrates how to create sections within a ListBox using the ListBoxSection and Header components. It shows grouping of items into categories.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ListBox.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ListBoxSection, Header} from 'react-aria-components';\n\n<ListBox aria-label=\"Sandwich contents\" selectionMode=\"multiple\">\n  <ListBoxSection>\n    <Header>Veggies</Header>\n    <ListBoxItem id=\"lettuce\">Lettuce</ListBoxItem>\n    <ListBoxItem id=\"tomato\">Tomato</ListBoxItem>\n    <ListBoxItem id=\"onion\">Onion</ListBoxItem>\n  </ListBoxSection>\n  <ListBoxSection>\n    <Header>Protein</Header>\n    <ListBoxItem id=\"ham\">Ham</ListBoxItem>\n    <ListBoxItem id=\"tuna\">Tuna</ListBoxItem>\n    <ListBoxItem id=\"tofu\">Tofu</ListBoxItem>\n  </ListBoxSection>\n  <ListBoxSection>\n    <Header>Condiments</Header>\n    <ListBoxItem id=\"mayo\">Mayonaise</ListBoxItem>\n    <ListBoxItem id=\"mustard\">Mustard</ListBoxItem>\n    <ListBoxItem id=\"ranch\">Ranch</ListBoxItem>\n  </ListBoxSection>\n</ListBox>\n```\n\n----------------------------------------\n\nTITLE: Form Event Handling Example\nDESCRIPTION: Implementation showing form submission and reset handling with data collection.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Form.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [action, setAction] = React.useState(null);\n  return (\n    <Form\n      onSubmit={e => {\n        e.preventDefault();\n        let data = Object.fromEntries(new FormData(e.currentTarget));\n        setAction(`submit ${JSON.stringify(data)}`);\n      }}\n      onReset={() => setAction('reset')}\n    >\n      <TextField name=\"username\" isRequired>\n        <Label>Username</Label>\n        <Input />\n        <FieldError />\n      </TextField>\n      <TextField name=\"password\" type=\"password\" isRequired>\n        <Label>Password</Label>\n        <Input />\n        <FieldError />\n      </TextField>\n      <div style={{display: 'flex', gap: 8}}>\n        <Button type=\"submit\">Submit</Button>\n        <Button type=\"reset\">Reset</Button>\n      </div>\n      {action && <div>Action: <code>{action}</code></div>}\n    </Form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Component Compatible with React Aria\nDESCRIPTION: Advanced example showing how to make an existing component compatible with React Aria Components by consuming context and using useContextProps hook.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Menu.mdx#2025-04-23_snippet_30\n\nLANGUAGE: tsx\nCODE:\n```\nimport {KeyboardContext, useContextProps} from 'react-aria-components';\n\nconst MyKeyboard = React.forwardRef((props: React.HTMLAttributes<HTMLElement>, ref: React.ForwardedRef<HTMLElement>) => {\n  // Merge the local props and ref with the ones provided via context.\n  [props, ref] = useContextProps(props, ref, KeyboardContext);\n\n  // ... your existing Keyboard component\n  return <kbd {...props} ref={ref} />;\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Autocomplete Implementation with SearchField and Menu\nDESCRIPTION: Example showing how to implement a basic Autocomplete component with a SearchField input and Menu for suggestions. Includes filtering functionality using useFilter hook.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Autocomplete.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Autocomplete, Button, Input, Label, Menu, MenuItem, SearchField, useFilter} from 'react-aria-components';\n\nfunction Example() {\n  let {contains} = useFilter({sensitivity: 'base'});\n  return (\n    <div className=\"autocomplete\">\n      <Autocomplete filter={contains}>\n        <SearchField>\n          <Label>Commands</Label>\n          <Input placeholder=\"Search commands....\" />\n          <Button>✕</Button>\n        </SearchField>\n        <Menu>\n          <MenuItem>Create new file...</MenuItem>\n          <MenuItem>Create new folder...</MenuItem>\n          <MenuItem>Assign to...</MenuItem>\n          <MenuItem>Assign to me</MenuItem>\n          <MenuItem>Change status...</MenuItem>\n          <MenuItem>Change priority...</MenuItem>\n          <MenuItem>Add label...</MenuItem>\n          <MenuItem>Remove label...</MenuItem>\n        </Menu>\n      </Autocomplete>\n    </div>\n  );\n```\n\n----------------------------------------\n\nTITLE: Vertical Tab Orientation\nDESCRIPTION: Demonstrates how to create vertically oriented tabs using the orientation prop.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Tabs.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<Tabs orientation=\"vertical\">\n  <TabList aria-label=\"Chat log orientation example\">\n    <Tab id=\"1\">John Doe</Tab>\n    <Tab id=\"2\">Jane Doe</Tab>\n    <Tab id=\"3\">Joe Bloggs</Tab>\n  </TabList>\n  <TabPanel id=\"1\">There is no prior chat history with John Doe.</TabPanel>\n  <TabPanel id=\"2\">There is no prior chat history with Jane Doe.</TabPanel>\n  <TabPanel id=\"3\">There is no prior chat history with Joe Bloggs.</TabPanel>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Implementing an HSBA Color Picker using ColorSlider in TSX\nDESCRIPTION: This React component demonstrates creating an HSBA (Hue, Saturation, Brightness, Alpha) color picker with four `MyColorSlider` components. It follows the same pattern as the RGBA and HSLA examples, using shared state initialized with `parseColor` and binding each slider to a specific channel (hue, saturation, brightness, alpha).\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorSlider.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [color, setColor] = React.useState(parseColor('hsba(0, 100%, 50%, 0.5)'));\n  return (\n    <>\n      <MyColorSlider channel=\"hue\" value={color} onChange={setColor} />\n      <MyColorSlider channel=\"saturation\" value={color} onChange={setColor} />\n      <MyColorSlider channel=\"brightness\" value={color} onChange={setColor} />\n      <MyColorSlider channel=\"alpha\" value={color} onChange={setColor} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Column Header with Sorting Functionality in React Aria Components\nDESCRIPTION: A partial implementation of a Column component that includes sortable column header functionality with arrow icon indicators. The code shows the JSX structure for the header part with conditional rendering based on sorting state.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/stock-table.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<span className=\"flex-1 truncate\">{props.children}</span>\n            {allowsSorting && (\n              <span className={`ml-1 w-4 h-4 flex items-center justify-center transition ${sortDirection === 'descending' ? 'rotate-180' : ''}`}>\n                {sortDirection && <ArrowUpIcon width={8} height={10} />}\n              </span>\n            )}\n          </Group>\n          <ColumnResizer className=\"w-px px-[8px] py-1 h-5 bg-clip-content bg-slate-400 cursor-col-resize rounded-sm resizing:bg-slate-800 resizing:w-[2px] resizing:pl-[7px] focus-visible:ring-2 ring-slate-600 ring-inset\" />\n        </div>\n      )}\n    </Column>\n```\n\n----------------------------------------\n\nTITLE: Wrapping GridList and Items as Reusable Components in React Aria - TypeScript\nDESCRIPTION: Defines custom React components that encapsulate the React Aria GridList and its children, ensuring consistent structure, styling, and logic across uses. It introduces MyGridList, which wraps GridList with props and children, and MyItem, which provides selection (including checkboxes) and drag handle logic. Dependencies include react-aria-components and a custom MyCheckbox. Components expect label and data as props, rendering multiple selectable or draggable grid items for accessibility and design consistency.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/GridList.mdx#2025-04-23_snippet_3\n\nLANGUAGE: TSX\nCODE:\n```\nimport type {GridListProps, GridListItemProps} from 'react-aria-components';\\n\\nexport function MyGridList<T extends object>({children, ...props}: GridListProps<T>) {\\n  return (\\n    <GridList {...props}>\\n      {children}\\n    </GridList>\\n  );\\n}\\n\\nexport function MyItem({children, ...props}: GridListItemProps) {\\n  let textValue = typeof children === 'string' ? children : undefined;\\n  return (\\n    <GridListItem textValue={textValue} {...props}>\\n      {({selectionMode, selectionBehavior, allowsDragging}) => <>\\n        {/* Add elements for drag and drop and selection. */}\\n        {allowsDragging && <Button slot=\\\"drag\\\">≡</Button>}\\n        {selectionMode === 'multiple' && selectionBehavior === 'toggle' && <MyCheckbox slot=\\\"selection\\\" />}\\n        {children}\\n      </>}\\n    </GridListItem>\\n  );\\n}\\n\\n<MyGridList aria-label=\\\"Ice cream flavors\\\" selectionMode=\\\"multiple\\\">\\n  <MyItem>Chocolate</MyItem>\\n  <MyItem>Mint</MyItem>\\n  <MyItem>Strawberry</MyItem>\\n  <MyItem>Vanilla</MyItem>\\n</MyGridList>\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable CheckboxGroup and Checkbox Components\nDESCRIPTION: Demonstrates how to create reusable wrapper components for CheckboxGroup and Checkbox to ensure consistent styling and behavior throughout an application. Includes TypeScript types and support for validation and help text.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/CheckboxGroup.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {CheckboxGroupProps, CheckboxProps, ValidationResult} from 'react-aria-components';\nimport {Text, FieldError} from 'react-aria-components';\n\ninterface MyCheckboxGroupProps extends Omit<CheckboxGroupProps, 'children'> {\n  children?: React.ReactNode,\n  label?: string,\n  description?: string,\n  errorMessage?: string | ((validation: ValidationResult) => string)\n}\n\nfunction MyCheckboxGroup({\n  label,\n  description,\n  errorMessage,\n  children,\n  ...props\n}: MyCheckboxGroupProps) {\n  return (\n    <CheckboxGroup {...props}>\n      {label && <Label>{label}</Label>}\n      {children}\n      {description && <Text slot=\"description\">{description}</Text>}\n      <FieldError>{errorMessage}</FieldError>\n    </CheckboxGroup>\n  );\n}\n\ninterface MyCheckboxProps extends Omit<CheckboxProps, 'children'> {\n  children?: React.ReactNode\n}\n\nfunction MyCheckbox({children, ...props}: MyCheckboxProps) {\n  return (\n    <Checkbox {...props}>\n      <div className=\"checkbox\" aria-hidden=\"true\">\n        <svg viewBox=\"0 0 18 18\"><polyline points=\"1 9 7 14 15 4\" /></svg>\n      </div>\n      {children}\n    </Checkbox>\n  );\n}\n\n<MyCheckboxGroup label=\"Favorite sports\">\n  <MyCheckbox value=\"soccer\">Soccer</MyCheckbox>\n  <MyCheckbox value=\"baseball\">Baseball</MyCheckbox>\n  <MyCheckbox value=\"basketball\">Basketball</MyCheckbox>\n</MyCheckboxGroup>\n```\n\n----------------------------------------\n\nTITLE: Adding Separators to Menus using React Aria Components in TypeScript/JSX\nDESCRIPTION: This code creates a Menu with separators between groups of MenuItems. The Separator component is imported from react-aria-components and placed between menu item groups for visual division. The menu is statically defined. Requires React and react-aria-components.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Menu.mdx#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Separator} from 'react-aria-components';\\n\\n<MyMenuButton label=\\\"Actions\\\">\\n  <MenuItem>New…</MenuItem>\\n  <MenuItem>Open…</MenuItem>\\n  <Separator />\\n  <MenuItem>Save</MenuItem>\\n  <MenuItem>Save as…</MenuItem>\\n  <MenuItem>Rename…</MenuItem>\\n  <Separator />\\n  <MenuItem>Page setup…</MenuItem>\\n  <MenuItem>Print…</MenuItem>\\n</MyMenuButton>\\n\n```\n\n----------------------------------------\n\nTITLE: Integrating ComboBox with HTML Forms and Custom Submission Values (TypeScript)\nDESCRIPTION: Demonstrates including MyComboBox components within a flex layout and integrating their values with HTML form submission via the 'name' and 'formValue' props. One ComboBox submits the selected item's id, while another submits the input's text, enabled via formValue='text' and allowsCustomValue. Inputs: ComboBox options, name/formValue props, layout styling. Outputs: Form fields that submit either an id or freeform string. Suitable for connecting with backends expecting different submission formats, and for unifying form behavior in React Aria apps.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ComboBox.mdx#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n<div style={{display: 'flex', gap: 16, flexWrap: 'wrap'}}>\n  <MyComboBox\n    label=\"Favorite Animal\"\n    ///- begin highlight -///\n    name=\"favoriteAnimalId\"\n    ///- end highlight -///\n  >\n    <ListBoxItem id=\"panda\">Panda</ListBoxItem>\n    <ListBoxItem id=\"cat\">Cat</ListBoxItem>\n    <ListBoxItem id=\"dog\">Dog</ListBoxItem>\n  </MyComboBox>\n  <MyComboBox\n    label=\"Ice cream flavor\"\n    ///- begin highlight -///\n    name=\"iceCream\"\n    formValue=\"text\"\n    allowsCustomValue\n    ///- end highlight -///\n  >\n    <ListBoxItem>Chocolate</ListBoxItem>\n    <ListBoxItem>Mint</ListBoxItem>\n    <ListBoxItem>Strawberry</ListBoxItem>\n    <ListBoxItem>Vanilla</ListBoxItem>\n  </MyComboBox>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Controlled ToggleButton with State Management\nDESCRIPTION: An example showing how to implement a controlled ToggleButton component with React state to manage the selection state.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ToggleButton.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [isSelected, setSelected] = React.useState(false);\n\n  return (\n    <ToggleButton\n      isSelected={isSelected}\n      onChange={setSelected}\n      aria-label=\"Star\">\n      ★\n    </ToggleButton>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Tree Component with React Aria Components\nDESCRIPTION: A complete example of a Tree component implementation with selectable and expandable items. The example demonstrates hierarchical data presentation with interactive elements inside tree items.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Tree.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Tree,\n  TreeItem,\n  TreeItemContent,\n  Button,\n  Collection\n} from 'react-aria-components';\n\n<Tree aria-label=\"Files\" style={{height: '300px'}} defaultExpandedKeys={['documents', 'photos', 'project']} selectionMode=\"multiple\" defaultSelectedKeys={['photos']}>\n  <TreeItem id=\"documents\" textValue=\"Documents\">\n    <MyTreeItemContent>\n      Documents\n      <Button aria-label=\"Info\">ⓘ</Button>\n    </MyTreeItemContent>\n    <TreeItem id=\"project\" textValue=\"Project\">\n      <MyTreeItemContent>\n        Project\n        <Button aria-label=\"Info\">ⓘ</Button>\n      </MyTreeItemContent>\n      <TreeItem id=\"report\" textValue=\"Weekly Report\">\n        <MyTreeItemContent>\n          Weekly Report\n          <Button aria-label=\"Info\">ⓘ</Button>\n        </MyTreeItemContent>\n      </TreeItem>\n    </TreeItem>\n  </TreeItem>\n  <TreeItem id=\"photos\" textValue=\"Photos\">\n    <MyTreeItemContent>\n      Photos\n      <Button aria-label=\"Info\">ⓘ</Button>\n    </MyTreeItemContent>\n    <TreeItem id=\"one\" textValue=\"Image 1\">\n      <MyTreeItemContent>\n        Image 1\n        <Button aria-label=\"Info\">ⓘ</Button>\n      </MyTreeItemContent>\n    </TreeItem>\n    <TreeItem id=\"two\" textValue=\"Image 2\">\n      <MyTreeItemContent>\n        Image 2\n        <Button aria-label=\"Info\">ⓘ</Button>\n      </MyTreeItemContent>\n    </TreeItem>\n  </TreeItem>\n</Tree>\n```\n\n----------------------------------------\n\nTITLE: Full DateRangePicker Component Structure\nDESCRIPTION: Complete component structure showing all possible elements and their relationships including labels, inputs, calendar, and validation messages.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DateRangePicker.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {DateRangePicker, Label, Group, Popover, Dialog, RangeCalendar, CalendarGrid, CalendarGridHeader, CalendarHeaderCell, CalendarGridBody, CalendarCell, Button, Heading, DateInput, DateSegment, Text, FieldError} from 'react-aria-components';\n\n<DateRangePicker>\n  <Label />\n  <Group>\n    <DateInput slot=\"start\">\n      {segment => <DateSegment segment={segment} />}\n    </DateInput>\n    <DateInput slot=\"end\">\n      {segment => <DateSegment segment={segment} />}\n    </DateInput>\n    <Button />\n  </Group>\n  <Text slot=\"description\" />\n  <FieldError />\n  <Popover>\n    <Dialog>\n      <RangeCalendar>\n        <Button slot=\"previous\" />\n        <Heading />\n        <Button slot=\"next\" />\n        <CalendarGrid>\n          <CalendarGridHeader>\n            {day => <CalendarHeaderCell />}\n          </CalendarGridHeader>\n          <CalendarGridBody>\n            {date => <CalendarCell date={date} />}\n          </CalendarGridBody>\n        </CalendarGrid>\n        <Text slot=\"errorMessage\" />\n      </RangeCalendar>\n    </Dialog>\n  </Popover>\n</DateRangePicker>\n```\n\n----------------------------------------\n\nTITLE: Using Context for Advanced Customization in React Aria Components\nDESCRIPTION: This example demonstrates how to use RangeCalendarContext to create a composite component containing a calendar and preset date buttons, showing advanced component composition.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/RangeCalendar.mdx#2025-04-23_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\nimport {RangeCalendarContext, useSlottedContext} from 'react-aria-components';\n\nfunction CalendarPicker({children}) {\n  let [value, onChange] = React.useState(null);\n  let [focusedValue, onFocusChange] = React.useState(null);\n\n  return (\n    /*- begin highlight -*/\n    <RangeCalendarContext.Provider value={{value, onChange, focusedValue, onFocusChange}}>\n    {/*- end highlight -*/}\n      <div className=\"calendar-picker\">\n        {children}\n      </div>\n    </RangeCalendarContext.Provider>\n  );\n}\n\ninterface PresetProps {\n  value: {start: CalendarDate, end: CalendarDate},\n  children: React.ReactNode\n}\n\nfunction Preset({value, children}: PresetProps) {\n  /*- begin highlight -*/\n  let context = useSlottedContext(RangeCalendarContext)!;\n  /*- end highlight -*/\n  let onPress = () => {\n    context.onFocusChange(value.start);\n    context.onChange(value);\n  };\n\n  return (\n    <Button onPress={onPress}>{children}</Button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing International Calendar in React Aria Components\nDESCRIPTION: This snippet demonstrates how to use the I18nProvider to display a Calendar component in Hindi language using the Indian calendar system. The selected date is displayed in the Gregorian calendar format.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Calendar.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {I18nProvider} from '@react-aria/i18n';\n\nfunction Example() {\n  let [date, setDate] = React.useState<DateValue | null>(null);\n  return (\n    <I18nProvider locale=\"hi-IN-u-ca-indian\">\n      <MyCalendar aria-label=\"Date\" value={date} onChange={setDate} />\n      <p>Selected date: {date?.toString()}</p>\n    </I18nProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Filtering in ComboBox with Controlled Value\nDESCRIPTION: Implements custom filtering for ComboBox using the useFilter hook with a startsWith strategy. The component uses controlled input value and filtered items to create a custom filtering experience.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ComboBox.mdx#2025-04-23_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useFilter} from '@react-aria/i18n';\n\nfunction Example() {\n  let options = [\n    {id: 1, email: 'fake@email.com'},\n    {id: 2, email: 'anotherfake@email.com'},\n    {id: 3, email: 'bob@email.com'},\n    {id: 4, email: 'joe@email.com'},\n    {id: 5, email: 'yourEmail@email.com'},\n    {id: 6, email: 'valid@email.com'},\n    {id: 7, email: 'spam@email.com'},\n    {id: 8, email: 'newsletter@email.com'},\n    {id: 9, email: 'subscribe@email.com'}\n  ];\n\n  let {startsWith} = useFilter({sensitivity: 'base'});\n  let [filterValue, setFilterValue] = React.useState('');\n  let filteredItems = React.useMemo(\n    () => options.filter((item) => startsWith(item.email, filterValue)),\n    [options, filterValue]\n  );\n\n  return (\n    <MyComboBox\n      label=\"To:\"\n      /*- begin highlight -*/\n      items={filteredItems}\n      inputValue={filterValue}\n      onInputChange={setFilterValue}\n      /*- end highlight -*/\n      allowsCustomValue>\n      {(item) => <ListBoxItem>{item.email}</ListBoxItem>}\n    </MyComboBox>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Required Validation with DateRangePicker in React\nDESCRIPTION: This example demonstrates how to implement required validation in a DateRangePicker component using the isRequired prop and FieldError for error display. It shows a complete form with start and end date inputs that are required fields.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DateRangePicker.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Form, FieldError} from 'react-aria-components';\n\n<Form>\n  <DateRangePicker startName=\"startDate\" endName=\"endDate\" isRequired>\n    <Label>Trip dates</Label>\n    <Group>\n      <DateInput slot=\"start\">\n        {segment => <DateSegment segment={segment} />}\n      </DateInput>\n      <span aria-hidden=\"true\">–</span>\n      <DateInput slot=\"end\">\n        {segment => <DateSegment segment={segment} />}\n      </DateInput>\n      <Button>▼</Button>\n    </Group>\n    <FieldError />\n    <Popover>\n      <Dialog>\n        <RangeCalendar>\n          <header>\n            <Button slot=\"previous\">◀</Button>\n            <Heading />\n            <Button slot=\"next\">▶</Button>\n          </header>\n          <CalendarGrid>\n            {date => <CalendarCell date={date} />}\n          </CalendarGrid>\n        </RangeCalendar>\n      </Dialog>\n    </Popover>\n  </DateRangePicker>\n  <Button type=\"submit\">Submit</Button>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Advanced: Passing Context to Button/Popover Using React Context API (TypeScript/JSX)\nDESCRIPTION: Combines ButtonContext and PopoverContext Providers to coordinate keyboard-driven popover opening by listening for the '?' keyboard event. Demonstrates advanced composition: HelpTrigger manages refs and state, provides them via context, and renders children with connected context. Dependencies: React, ButtonContext, PopoverContext, Button, MyPopover, Heading. Custom triggers require children that correspond to the context’s consumer. Inputs: key events and state; outputs: popover visibility linked to external events.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Popover.mdx#2025-04-23_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ButtonContext, PopoverContext} from 'react-aria-components';\n\ninterface HelpTriggerProps {\n  children?: React.ReactNode\n}\n\nfunction HelpTrigger({children}: HelpTriggerProps) {\n  let triggerRef = React.useRef(null);\n  let [isOpen, setOpen] = React.useState(false);\n  let onKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === '?') {\n      setOpen(true);\n    }\n  };\n\n  return (\n    <ButtonContext.Provider value={{onKeyDown, ref: triggerRef}}>\n      {/*- begin highlight -*/}\n      <PopoverContext.Provider value={{triggerRef, isOpen, onOpenChange: setOpen}}>\n      {/*- end highlight -*/}\n        {children}\n      </PopoverContext.Provider>\n    </ButtonContext.Provider>\n  );\n}\n\n<HelpTrigger>\n  <Button>Press ? for help</Button>\n  <MyPopover>\n    <Heading slot=\"title\">Help</Heading>\n    <div>Do you need help?</div>\n  </MyPopover>\n</HelpTrigger>\n```\n\n----------------------------------------\n\nTITLE: Reusable TagGroup Component Wrapper\nDESCRIPTION: Creates a reusable wrapper component for TagGroup with customizable props and built-in remove button functionality.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/TagGroup.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {TagGroupProps, TagListProps, TagProps} from 'react-aria-components';\nimport {Button, Text} from 'react-aria-components';\n\ninterface MyTagGroupProps<T> extends Omit<TagGroupProps, 'children'>, Pick<TagListProps<T>, 'items' | 'children' | 'renderEmptyState'> {\n  label?: string,\n  description?: string,\n  errorMessage?: string\n}\n\nfunction MyTagGroup<T extends object>({label, description, errorMessage, items, children, renderEmptyState, ...props}: MyTagGroupProps<T>) {\n  return (\n    <TagGroup {...props}>\n      <Label>{label}</Label>\n      <TagList items={items} renderEmptyState={renderEmptyState}>\n        {children}\n      </TagList>\n      {description && <Text slot=\"description\">{description}</Text>}\n      {errorMessage && <Text slot=\"errorMessage\">{errorMessage}</Text>}\n    </TagGroup>\n  );\n}\n\nfunction MyTag({children, ...props}: TagProps) {\n  let textValue = typeof children === 'string' ? children : undefined;\n  return (\n    <Tag textValue={textValue} {...props}>\n      {({allowsRemoving}) => (<>\n        {children}\n        {allowsRemoving && <Button slot=\"remove\">ⓧ</Button>}\n      </>)}\n    </Tag>\n  );\n}\n\n<MyTagGroup label=\"Ice cream flavor\" selectionMode=\"single\">\n  <MyTag>Chocolate</MyTag>\n  <MyTag>Mint</MyTag>\n  <MyTag>Strawberry</MyTag>\n  <MyTag>Vanilla</MyTag>\n</MyTagGroup>\n```\n\n----------------------------------------\n\nTITLE: Using Virtualizer with GridList and Variable Height Rows in React Aria Components\nDESCRIPTION: This example shows how to use the Virtualizer component with a GridList that has variable height rows due to text wrapping. It uses the ListLayout with estimated row height for efficient rendering.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Virtualizer.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Virtualizer, ListLayout} from 'react-aria-components';\nimport {MyGridList, MyItem} from './GridList';\n\nfunction Example() {\n  return (\n    <Virtualizer \n      layout={ListLayout}\n      layoutOptions={{\n        estimatedRowHeight: 75,\n        gap: 4,\n        padding: 4\n      }}\n    >\n      <MyGridList aria-label=\"Virtualized GridList\" selectionMode=\"multiple\" items={items}>\n        {item => <MyItem>{item.name}</MyItem>}\n      </MyGridList>\n    </Virtualizer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Grouped TextField with Button in React (TSX)\nDESCRIPTION: This snippet demonstrates a common use case for the `Group` component from `react-aria-components`. It shows how to visually and semantically group an `Input` field and a `Button` within a `TextField` component, creating an input group often used for actions like adding or submitting related data.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Group.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {TextField, Label, Group, Input, Button} from 'react-aria-components';\n\n<TextField>\n  <Label>Email</Label>\n  <Group>\n    <Input />\n    <Button aria-label=\"Add email\">+</Button>\n  </Group>\n</TextField>\n```\n\n----------------------------------------\n\nTITLE: Implementing RangeCalendar in React with react-aria-components\nDESCRIPTION: This example demonstrates how to create a basic RangeCalendar component using react-aria-components. It includes the calendar structure with header, navigation buttons, and calendar grid.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/RangeCalendar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {RangeCalendar, Heading, Button, CalendarGrid, CalendarCell} from 'react-aria-components';\n\n<RangeCalendar aria-label=\"Trip dates\">\n  <header>\n    <Button slot=\"previous\">◀</Button>\n    <Heading />\n    <Button slot=\"next\">▶</Button>\n  </header>\n  <CalendarGrid>\n    {date => <CalendarCell date={date} />}\n  </CalendarGrid>\n</RangeCalendar>\n```\n\n----------------------------------------\n\nTITLE: Managing Controlled and Uncontrolled ComboBox Values (TypeScript)\nDESCRIPTION: Shows how to use MyComboBox in both controlled and uncontrolled input modes using 'inputValue', 'defaultInputValue', and selection key props. Demonstrates keeping ComboBox's visual input value in sync with state, including updates with onInputChange. The code presents two ComboBoxes: one is uncontrolled (using defaultInputValue), the other is controlled (synchronizing value). Inputs: list of options, current or default value, selection keys. Outputs: various UI states for selecting Adobe products. Dependencies: MyComboBox, React state, React Aria types.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ComboBox.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfunction Example() {\n  let options = [\n    {id: 1, name: 'Adobe Photoshop'},\n    {id: 2, name: 'Adobe XD'},\n    {id: 3, name: 'Adobe InDesign'},\n    {id: 4, name: 'Adobe AfterEffects'},\n    {id: 5, name: 'Adobe Illustrator'},\n    {id: 6, name: 'Adobe Lightroom'},\n    {id: 7, name: 'Adobe Premiere Pro'},\n    {id: 8, name: 'Adobe Fresco'},\n    {id: 9, name: 'Adobe Dreamweaver'}\n  ];\n  let [value, setValue] = React.useState('Adobe XD');\n\n  return (\n    <div style={{display: 'flex', gap: 16, flexWrap: 'wrap'}}>\n      <MyComboBox\n        label=\"Adobe product (Uncontrolled)\"\n        defaultItems={options}\n        /*- begin highlight -*/\n        defaultSelectedKey={2}\n        defaultInputValue=\"Adobe XD\">\n        {/*- end highlight -*/}\n        {item => <ListBoxItem>{item.name}</ListBoxItem>}\n      </MyComboBox>\n\n      <MyComboBox\n        label=\"Pick an Adobe product (Controlled)\"\n        defaultItems={options}\n        /*- begin highlight -*/\n        defaultSelectedKey={2}\n        inputValue={value}\n        onInputChange={setValue}>\n        {/*- end highlight -*/}\n        {item => <ListBoxItem>{item.name}</ListBoxItem>}\n      </MyComboBox>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Tag Selection in React Aria\nDESCRIPTION: This example shows how to implement tag selection in a TagGroup. It uses the selectionMode prop to enable multiple selection and manages the selected state using React useState hook.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/TagGroup.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {Selection} from 'react-aria-components';\n\nfunction Example() {\n  let [selected, setSelected] = React.useState<Selection>(new Set(['parking']));\n\n  return (\n    <>\n      <MyTagGroup\n        label=\"Amenities\"\n        selectionMode=\"multiple\"\n        selectedKeys={selected}\n        onSelectionChange={setSelected}\n      >\n        <MyTag id=\"laundry\">Laundry</MyTag>\n        <MyTag id=\"fitness\">Fitness center</MyTag>\n        <MyTag id=\"parking\">Parking</MyTag>\n        <MyTag id=\"pool\">Swimming pool</MyTag>\n        <MyTag id=\"breakfast\">Breakfast</MyTag>\n      </MyTagGroup>\n      <p>Current selection (controlled): {selected === 'all' ? 'all' : [...selected].join(', ')}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Restricting DateField Input to Dates After Today in React Aria with TypeScript\nDESCRIPTION: Shows a DateField that restricts date selection to those after the current day using the minValue prop. Uses today function from @internationalized/date to set the minimum allowed date. The field is initialized with a default date, and situated within a Form with submission controls. Ensures that users cannot pick a date before today; requires supporting DateField and Button components.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DateField.mdx#2025-04-23_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {today} from '@internationalized/date';\n\n<Form>\n  <MyDateField\n    label=\"Appointment date\"\n    /*- begin highlight -*/\n    minValue={today(getLocalTimeZone())}\n    /*- end highlight -*/\n    defaultValue={parseDate('2022-02-03')} />\n  <Button type=\"submit\">Submit</Button>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Single Selection Mode for GridList using ExampleList - TypeScript\nDESCRIPTION: Shows how to enable single selection mode on a dynamic grid list with defaultSelectedKeys, ensuring only one item can be selected at a time. Uses selectionMode, defaultSelectedKeys, and aria-label props to control selection behavior. The output grid list allows the user to select or deselect a single row, matching the key to item id. No external dependencies besides ExampleList and correct item key structure are required.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/GridList.mdx#2025-04-23_snippet_5\n\nLANGUAGE: TSX\nCODE:\n```\n// Using the example above\\n<ExampleList\\n  aria-label=\\\"List with single selection\\\"\\n  /*- begin highlight -*/\\n  selectionMode=\\\"single\\\"\\n  defaultSelectedKeys={[2]}\\n  /*- end highlight -*/\\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating Sectioned ComboBox with Static Items\nDESCRIPTION: Demonstrates how to organize ComboBox items into sections using ListBoxSection and Header components, creating a categorized list of fruits and vegetables.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ComboBox.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ListBoxSection, Header} from 'react-aria-components';\n\n<MyComboBox label=\"Preferred fruit or vegetable\">\n  <ListBoxSection>\n    <Header>Fruit</Header>\n    <ListBoxItem id=\"Apple\">Apple</ListBoxItem>\n    <ListBoxItem id=\"Banana\">Banana</ListBoxItem>\n    <ListBoxItem id=\"Orange\">Orange</ListBoxItem>\n    <ListBoxItem id=\"Honeydew\">Honeydew</ListBoxItem>\n    <ListBoxItem id=\"Grapes\">Grapes</ListBoxItem>\n    <ListBoxItem id=\"Watermelon\">Watermelon</ListBoxItem>\n    <ListBoxItem id=\"Cantaloupe\">Cantaloupe</ListBoxItem>\n    <ListBoxItem id=\"Pear\">Pear</ListBoxItem>\n  </ListBoxSection>\n  <ListBoxSection>\n    <Header>Vegetable</Header>\n    <ListBoxItem id=\"Cabbage\">Cabbage</ListBoxItem>\n    <ListBoxItem id=\"Broccoli\">Broccoli</ListBoxItem>\n    <ListBoxItem id=\"Carrots\">Carrots</ListBoxItem>\n    <ListBoxItem id=\"Lettuce\">Lettuce</ListBoxItem>\n    <ListBoxItem id=\"Spinach\">Spinach</ListBoxItem>\n    <ListBoxItem id=\"Bok Choy\">Bok Choy</ListBoxItem>\n    <ListBoxItem id=\"Cauliflower\">Cauliflower</ListBoxItem>\n    <ListBoxItem id=\"Potatoes\">Potatoes</ListBoxItem>\n  </ListBoxSection>\n</MyComboBox>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Label Component with LabelContext in React Aria Components\nDESCRIPTION: This example shows how to create a custom label component that consumes the LabelContext to be compatible with React Aria Components.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/TextField.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {LabelProps} from 'react-aria-components';\nimport {LabelContext, useContextProps} from 'react-aria-components';\n\nconst MyCustomLabel = React.forwardRef((props: LabelProps, ref: React.ForwardedRef<HTMLLabelElement>) => {\n  // Merge the local props and ref with the ones provided via context.\n  [props, ref] = useContextProps(props, ref, LabelContext);\n\n  // ... your existing Label component\n  return <label {...props} ref={ref} />;\n});\n```\n\n----------------------------------------\n\nTITLE: Using Default Slot in Custom Component with ButtonContext\nDESCRIPTION: Shows how to use the default slot in a custom component to provide different class names to Button components based on their slot.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/advanced.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Button, ButtonContext, DEFAULT_SLOT} from 'react-aria-components';\n\nfunction MyCustomComponent({children}) {\n  return (\n    <ButtonContext.Provider\n      value={{\n        slots: {\n          [DEFAULT_SLOT]: {\n            className: \"left-button\"\n          },\n          end: {\n            className: \"right-button\"\n          }\n        }\n      }}>\n      {children}\n    </ButtonContext.Provider>\n  );\n}\n\n<MyCustomComponent>\n  <Button>Click me</Button>\n</MyCustomComponent>\n\n<MyCustomComponent>\n  <Button slot=\"end\">Click me</Button>\n</MyCustomComponent>\n```\n\n----------------------------------------\n\nTITLE: Integrating ColorWheel and ColorArea with ColorPicker (tsx)\nDESCRIPTION: Demonstrates combining `ColorWheel` and `ColorArea` components inside a `ColorPicker` to create an HSB-based color selection interface. The `ColorArea` is configured for saturation and brightness channels and absolutely positioned within the layout. This setup relies on custom components `MyColorPicker`, `MyColorWheel`, and `MyColorArea`.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorPicker.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport {MyColorWheel} from './ColorWheel';\nimport {MyColorArea} from './ColorArea';\n\n<MyColorPicker label=\"Stroke color\" defaultValue=\"#345\">\n  <MyColorWheel />\n  <MyColorArea \n    colorSpace=\"hsb\"\n    xChannel=\"saturation\"\n    yChannel=\"brightness\"\n    style={{width: '100px', height: '100px', position: 'absolute', top: 'calc(50% - 50px)', left: 'calc(50% - 50px)'}} />\n</MyColorPicker>\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Content in React Aria Select\nDESCRIPTION: This example shows how to use dynamic content with the Select component, passing an iterable list of options and rendering them using a function.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Select.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let options = [\n    {id: 1, name: 'Aerospace'},\n    {id: 2, name: 'Mechanical'},\n    {id: 3, name: 'Civil'},\n    {id: 4, name: 'Biomedical'},\n    {id: 5, name: 'Nuclear'},\n    {id: 6, name: 'Industrial'},\n    {id: 7, name: 'Chemical'},\n    {id: 8, name: 'Agricultural'},\n    {id: 9, name: 'Electrical'}\n  ];\n\n  return (\n    <MySelect label=\"Pick an engineering major\" items={options}>\n      {(item) => <ListBoxItem>{item.name}</ListBoxItem>}\n    </MySelect>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Multiple Row Selection in a Table - React Aria Components - TypeScript\nDESCRIPTION: This code demonstrates how to use the FileTable component with selectionMode set to 'multiple', allowing selection of multiple rows. The defaultSelectedKeys prop initializes the selection with specific rows selected by default (matching row id values). Requires the FileTable component definition, along with all imported dependencies for proper function. This example outputs a table where users can select and deselect multiple rows.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Table.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<FileTable selectionMode=\"multiple\" defaultSelectedKeys={[2, 4]} />\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Single Selection in Menu using React Aria Components in TypeScript/JSX\nDESCRIPTION: This code snippet demonstrates a controlled Menu with single selection mode in React. It uses React.useState to manage the selected key, which is passed to the MyMenuButton via selectedKeys. The onSelectionChange handler updates the selected value, and the current selection is displayed. Requires React, React Aria Components, and Selection type import for type safety.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Menu.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Selection} from 'react-aria-components';\\n\\nfunction Example() {\\n  let [selected, setSelected] = React.useState<Selection>(new Set(['center']));\\n\\n  return (\\n    <>\\n      <MyMenuButton label=\\\"Align\\\" selectionMode=\\\"single\\\" selectedKeys={selected} onSelectionChange={setSelected}>\\n        <MenuItem id=\\\"left\\\">Left</MenuItem>\\n        <MenuItem id=\\\"center\\\">Center</MenuItem>\\n        <MenuItem id=\\\"right\\\">Right</MenuItem>\\n      </MyMenuButton>\\n      <p>Current selection (controlled): {[...selected].join(', ')}</p>\\n    </>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Programmatic Toast Control\nDESCRIPTION: Implementation of programmatic toast control with dismiss functionality.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Toast.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [toastKey, setToastKey] = React.useState(null);\n\n  return (\n    <Button\n      onPress={() => {\n        if (!toastKey) {\n          setToastKey(queue.add({title: 'Unable to save'}, {onClose: () => setToastKey(null)}));\n        } else {\n          queue.close(toastKey);\n        }\n      }}>\n      {toastKey ? 'Hide' : 'Show'} Toast\n    </Button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Tabs Implementation\nDESCRIPTION: Shows how to create dynamic tabs that can be added and removed at runtime using the items prop and collection components.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Tabs.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Collection, Button} from 'react-aria-components';\n\nfunction Example() {\n  let [tabs, setTabs] = React.useState([\n    {id: 1, title: 'Tab 1', content: 'Tab body 1'},\n    {id: 2, title: 'Tab 2', content: 'Tab body 2'},\n    {id: 3, title: 'Tab 3', content: 'Tab body 3'}\n  ]);\n\n  let addTab = () => {\n    setTabs(tabs => [\n      ...tabs,\n      {\n        id: tabs.length + 1,\n        title: `Tab ${tabs.length + 1}`,\n        content: `Tab body ${tabs.length + 1}`\n      }\n    ]);\n  };\n\n  let removeTab = () => {\n    if (tabs.length > 1) {\n      setTabs(tabs => tabs.slice(0, -1));\n    }\n  };\n\n  return (\n    <Tabs>\n      <div style={{display: 'flex'}}>\n        <TabList aria-label=\"Dynamic tabs\" items={tabs} style={{flex: 1}}>\n          {item => <Tab>{item.title}</Tab>}\n        </TabList>\n        <div className=\"button-group\">\n          <Button onPress={addTab}>Add tab</Button>\n          <Button onPress={removeTab}>Remove tab</Button>\n        </div>\n      </div>\n      <Collection items={tabs}>\n        {item => <TabPanel>{item.content}</TabPanel>}\n      </Collection>\n    </Tabs>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Controlled Disclosure Component Example\nDESCRIPTION: Example showing how to implement a controlled disclosure component with expand/collapse functionality.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Disclosure.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction ControlledExpanded() {\n  let [isExpanded, setIsExpanded] = React.useState(true);\n\n  return (\n    <MyDisclosure title=\"Download, Install, and Set Up\" isExpanded={isExpanded} onExpandedChange={setIsExpanded}>\n      Instructions on how to download, install, and set up\n    </MyDisclosure>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: ComboBox Component Implementation\nDESCRIPTION: Implements a user search ComboBox component with Tailwind CSS styling, including a custom UserItem component for rendering individual list items.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/user-combobox.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction ComboBoxExample() {\n  return (\n    <div className=\"bg-linear-to-r from-sky-300 to-cyan-300 p-8 sm:h-[300px] rounded-lg flex justify-center\">\n      <ComboBox className=\"group flex flex-col gap-1 w-[200px]\">\n        <Label className=\"text-black cursor-default\">Assignee</Label>\n        <Group className=\"flex rounded-lg bg-white/90 focus-within:bg-white transition shadow-md ring-1 ring-black/10 focus-visible:ring-2 focus-visible:ring-black\">\n          <Input className=\"flex-1 w-full border-none py-2 px-3 leading-5 text-gray-900 bg-transparent outline-hidden text-base\" />\n          <Button className=\"px-3 flex items-center text-gray-700 transition border-0 border-solid border-l border-l-sky-200 bg-transparent rounded-r-lg pressed:bg-sky-100\">\n            <ChevronUpDownIcon size=\"XS\" />\n          </Button>\n        </Group>\n        <Popover className=\"max-h-60 w-(--trigger-width) overflow-auto rounded-md bg-white text-base shadow-lg ring-1 ring-black/5 entering:animate-in entering:fade-in exiting:animate-out exiting:fade-out\">\n          <ListBox className=\"outline-hidden p-1\" items={people}>\n            {item => (\n              <UserItem textValue={item.name}>\n                <img alt=\"\" src={item.avatar} className=\"w-6 h-6 rounded-full\" />\n                <span className=\"truncate\">{item.name}</span>\n              </UserItem>\n            )}\n          </ListBox>\n        </Popover>\n      </ComboBox>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Reusable Autocomplete Wrapper Component\nDESCRIPTION: A reusable wrapper component that encapsulates Autocomplete functionality with TypeScript types, custom props, and styling. Combines SearchField and Menu components with configurable label and items.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Autocomplete.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {AutocompleteProps, Key} from 'react-aria-components';\nimport {Menu, MenuItem} from 'react-aria-components';\nimport {MySearchField} from './SearchField';\n\ninterface MyAutocompleteProps<T extends object> extends Omit<AutocompleteProps, 'children'> {\n  label?: string,\n  placeholder?: string,\n  items?: Iterable<T>;\n  children: React.ReactNode | ((item: T) => React.ReactNode)\n  onAction?: (id: Key) => void\n}\n\nfunction MyAutocomplete<T extends object>({label,placeholder, items, children, onAction, ...props}: MyAutocompleteProps<T>) {\n  let {contains} = useFilter({sensitivity: 'base'});\n  return (\n    <div className=\"my-autocomplete\">\n      <Autocomplete filter={contains} {...props}>\n        <MySearchField label={label} placeholder={placeholder} />\n        <Menu items={items} onAction={onAction}>\n          {children}\n        </Menu>\n      </Autocomplete>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Popover with Dialog in React Aria Components\nDESCRIPTION: Basic example of a DialogTrigger with a Popover containing a Dialog with Switch components. This demonstrates the fundamental implementation pattern with an overlay arrow.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Popover.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {DialogTrigger, Popover, Dialog, Button, OverlayArrow, Heading, Switch} from 'react-aria-components';\n\n<DialogTrigger>\n  <Button>Settings</Button>\n  <Popover>\n    <OverlayArrow>\n      <svg width={12} height={12} viewBox=\"0 0 12 12\"><path d=\"M0 0 L6 6 L12 0\" /></svg>\n    </OverlayArrow>\n    <Dialog>\n      <div className=\"flex-col\">\n        <Switch defaultSelected>\n          <div className=\"indicator\" /> Wi-Fi\n        </Switch>\n        <Switch defaultSelected>\n          <div className=\"indicator\" /> Bluetooth\n        </Switch>\n        <Switch>\n          <div className=\"indicator\" /> Mute\n        </Switch>\n      </div>\n    </Dialog>\n  </Popover>\n</DialogTrigger>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom LabeledGroup using React Aria Contexts (TSX)\nDESCRIPTION: This advanced TSX example demonstrates creating a composite `LabeledGroup` component. It utilizes `LabelContext` and `GroupContext` from `react-aria-components` along with the `useId` hook from `react-aria` to automatically generate and link a label ID to the group via the `aria-labelledby` prop passed through context. This pattern allows for building custom, accessible component APIs by composing React Aria primitives.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Group.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport {LabelContext, GroupContext} from 'react-aria-components';\nimport {useId} from 'react-aria';\n\nfunction LabeledGroup({children}) {\n  let labelId = useId();\n\n  return (\n    <LabelContext.Provider value={{id: labelId, elementType: 'span'}}>\n      <GroupContext.Provider value={{'aria-labelledby': labelId}}>\n        {children}\n      </GroupContext.Provider>\n    </LabelContext.Provider>\n  );\n}\n\n<LabeledGroup>\n  <Label>Expiration date</Label>\n  <Group>\n    <Input size={3} aria-label=\"Month\" placeholder=\"mm\" />\n    /\n    <Input size={4} aria-label=\"Year\" placeholder=\"yyyy\" />\n  </Group>\n</LabeledGroup>\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable MyProgressBar Wrapper Component (React Aria Components, TypeScript/TSX)\nDESCRIPTION: This snippet creates a custom wrapper for the ProgressBar named MyProgressBar, which extends ProgressBarProps to accept a label prop. The wrapper centralizes DOM structure and presentation, promoting consistency throughout an application. It passes all props to the underlying ProgressBar and renders the Label, dynamic value, and progress fill accordingly. Dependencies: react-aria-components, React, and corresponding CSS. Inputs: label (string), plus all ProgressBarProps; output: reusable, accessible progress bar as a self-contained React component.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ProgressBar.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {ProgressBarProps} from 'react-aria-components';\n\ninterface MyProgressBarProps extends ProgressBarProps {\n  label?: string\n}\n\nfunction MyProgressBar({label, ...props}: MyProgressBarProps) {\n  return (\n    <ProgressBar {...props}>\n      {({percentage, valueText}) => <>\n        <Label>{label}</Label>\n        <span className=\"value\">{valueText}</span>\n        <div className=\"bar\">\n          <div className=\"fill\" style={{width: percentage + '%'}} />\n        </div>\n      </>}\n    </ProgressBar>\n  );\n}\n\n<MyProgressBar label=\"Loading…\" value={80} />\n```\n\n----------------------------------------\n\nTITLE: Implementing ComboBox Clear Button in React Aria\nDESCRIPTION: Demonstrates how to create a clear button component for ComboBox using ComboBoxStateContext. The component allows users to clear the selected value and integrates with the ComboBox's existing state management.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ComboBox.mdx#2025-04-23_snippet_36\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ComboBoxStateContext} from 'react-aria-components';\n\nfunction ComboBoxClearButton() {\n  let state = React.useContext(ComboBoxStateContext);\n  return (\n    <Button\n      slot={null}\n      className=\"clear-button\"\n      aria-label=\"Clear\"\n      onPress={() => state?.setSelectedKey(null)}>\n      ✕\n    </Button>\n  );\n}\n\n<ComboBox defaultSelectedKey=\"cat\">\n  <Label>Favorite Animal</Label>\n  <div>\n    <Input />\n    <ComboBoxClearButton />\n    <Button>▼</Button>\n  </div>\n  <Popover>\n    <ListBox>\n      <ListBoxItem id=\"cat\">Cat</ListBoxItem>\n      <ListBoxItem id=\"dog\">Dog</ListBoxItem>\n      <ListBoxItem id=\"kangaroo\">Kangaroo</ListBoxItem>\n    </ListBox>\n  </Popover>\n</ComboBox>\n```\n\n----------------------------------------\n\nTITLE: Creating a Styled ProgressBar Example in React\nDESCRIPTION: This code demonstrates how to implement a `ProgressBar` component from `react-aria-components`. It uses Tailwind CSS utility classes for styling, including layout (flexbox, gap), sizing (w-56), text styling (text-white), and background/fill colors. The component displays a label (\"Loading…\"), the current percentage value, and a visual progress indicator.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/loading-progress.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ProgressBar, Label} from 'react-aria-components';\n\n<div className=\"bg-linear-to-r from-blue-600 to-purple-600 p-12 rounded-lg flex justify-center\">\n  <ProgressBar value={30} className=\"flex flex-col gap-3 w-56 text-white\">\n    {({percentage, valueText}) => <>\n      <div className=\"flex\">\n        <Label className=\"flex-1\">Loading…</Label>\n        <span>{valueText}</span>\n      </div>\n      <div className=\"h-2 top-[50%] transform translate-y-[-50%] w-full rounded-full bg-white/40\">\n        <div className=\"absolute h-2 top-[50%] transform translate-y-[-50%] rounded-full bg-white\" style={{width: percentage + '%'}} />\n      </div>\n    </>}\n  </ProgressBar>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Router with React Aria BreadcrumbsContext and LinkContext (TSX)\nDESCRIPTION: Defines a custom `Router` component in TypeScript that manages a navigation history stack (`items`). It utilizes `BreadcrumbsContext.Provider` to supply the `items` array and an `onAction` handler (for popping the stack) to nested `Breadcrumbs` components. It also uses `LinkContext.Provider` to supply an `onPress` handler (for pushing onto the stack) to nested `Link` components, demonstrating advanced state management via context.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Breadcrumbs.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {PressEvent} from 'react-aria-components';\nimport {BreadcrumbsContext, LinkContext} from 'react-aria-components';\n\ninterface RouterItem {\n  id: number,\n  label: string\n}\n\nfunction Router({children}) {\n  let [items, setItems] = React.useState<RouterItem[]>([\n    {id: 0, label: 'Home'},\n    {id: 1, label: 'React Aria'},\n  ]);\n\n  // Pop stack when a breadcrumb item is clicked.\n  let onAction = (id: Key) => {\n    let i = items.findIndex(item => item.id === id);\n    setItems(items.slice(0, i + 1));\n  };\n\n  // Push stack when a link is clicked.\n  let onPress = (e: PressEvent) => {\n    let label = e.target.textContent;\n    setItems(items.concat({id: items.length, label}));\n  };\n\n  return (\n    /*- begin highlight -*/\n    <BreadcrumbsContext.Provider value={{items, onAction}}>\n    {/*- end highlight -*/}\n      <LinkContext.Provider value={{onPress}}>\n        {children}\n      </LinkContext.Provider>\n    </BreadcrumbsContext.Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Tabs with React Aria Components in TSX\nDESCRIPTION: This snippet demonstrates a basic implementation of the Tabs component using `Tabs`, `TabList`, `Tab`, and `TabPanel` from `react-aria-components`. It sets up three tabs ('Founding of Rome', 'Monarchy and Republic', 'Empire') with corresponding panels, using `id` props to link tabs and panels. `aria-label` is provided on `TabList` for accessibility.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Tabs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Tabs, TabList, Tab, TabPanel} from 'react-aria-components';\n\n<Tabs>\n  <TabList aria-label=\"History of Ancient Rome\">\n    <Tab id=\"FoR\">Founding of Rome</Tab>\n    <Tab id=\"MaR\">Monarchy and Republic</Tab>\n    <Tab id=\"Emp\">Empire</Tab>\n  </TabList>\n  <TabPanel id=\"FoR\">\n    Arma virumque cano, Troiae qui primus ab oris.\n  </TabPanel>\n  <TabPanel id=\"MaR\">\n    Senatus Populusque Romanus.\n  </TabPanel>\n  <TabPanel id=\"Emp\">\n    Alea jacta est.\n  </TabPanel>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Circular ProgressBar Visualization with SVG (React Aria Components, TypeScript/TSX)\nDESCRIPTION: This snippet presents a determinate circular progress bar using SVG along with ProgressBar in React Aria Components. It computes circle radius and circumference for strokeDasharray/strokeDashoffset to visually show progress. The approach uses inline variable declarations (center, strokeWidth, r, c) for calculation, and supports accessibility via aria-label. Dependencies: react-aria-components, React, inline CSS variables for color. Inputs: aria-label, value. Outputs: SVG-based circular progress visualization of progress.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ProgressBar.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nlet center = 16;\nlet strokeWidth = 4;\nlet r = 16 - strokeWidth;\nlet c = 2 * r * Math.PI;\n\n<ProgressBar aria-label=\"Loading…\" value={60}>\n  {({percentage}) => <>\n    <svg width={64} height={64} viewBox=\"0 0 32 32\" fill=\"none\" strokeWidth={strokeWidth}>\n      <circle cx={center} cy={center} r={r - (strokeWidth / 2 - 0.25)} stroke=\"var(--border-color)\" strokeWidth={0.5} />\n      <circle cx={center} cy={center} r={r + (strokeWidth / 2 - 0.25)} stroke=\"var(--border-color)\" strokeWidth={0.5} />\n      <circle\n        cx={center}\n        cy={center}\n        r={r}\n        stroke=\"var(--highlight-background)\"\n        strokeDasharray={`${c} ${c}`}\n        strokeDashoffset={c - percentage / 100 * c}\n        strokeLinecap=\"round\"\n        transform=\"rotate(-90 16 16)\" />\n    </svg>\n  </>}\n</ProgressBar>\n```\n\n----------------------------------------\n\nTITLE: Custom Date Validation for Weekdays in React Aria DateField with TypeScript\nDESCRIPTION: Validates that the selected date is a weekday (not a weekend). Uses isWeekend utility and the locale obtained from useLocale. Sets the validate prop of MyDateField to return an error string if the user chooses a weekend day. The field shows an example default value and is styled as part of a form using Button from React Aria. Requires @internationalized/date and react-aria for locale and validation functions.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DateField.mdx#2025-04-23_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {isWeekend} from '@internationalized/date';\nimport {useLocale} from 'react-aria';\n\nfunction Example() {\n  let {locale} = useLocale();\n\n  return (\n    <Form>\n      <MyDateField\n        label=\"Appointment date\"\n        /*- begin highlight -*/\n        validate={date => date && isWeekend(date, locale) ? 'We are closed on weekends.' : null}\n        /*- end highlight -*/\n        defaultValue={parseDate('2023-10-28')} />\n      <Button type=\"submit\">Submit</Button>\n    </Form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable ColorArea Component Wrapper\nDESCRIPTION: Example of creating a reusable wrapper component for ColorArea. This encapsulates the component structure and styling into a single, reusable component for consistent usage across an application.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorArea.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {ColorAreaProps} from 'react-aria-components';\n\nexport function MyColorArea(props: ColorAreaProps) {\n  return (\n    <ColorArea {...props}>\n      <ColorThumb />\n    </ColorArea>\n  );\n}\n\n<MyColorArea defaultValue=\"hsl(30, 100%, 50%)\" />\n```\n\n----------------------------------------\n\nTITLE: Handling Calendar Events in React Aria Components\nDESCRIPTION: This example demonstrates how to use the onChange event to update a separate element with a formatted version of the selected date in the user's locale. It uses the useDateFormatter hook for localized date formatting.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Calendar.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport {getLocalTimeZone} from '@internationalized/date';\nimport {useDateFormatter} from '@react-aria/i18n';\n\nfunction Example() {\n  let [date, setDate] = React.useState(parseDate('2022-07-04'));\n  let formatter = useDateFormatter({dateStyle: 'full'});\n\n  return (\n    <>\n      <MyCalendar aria-label=\"Event date\" value={date} onChange={setDate} />\n      <p>Selected date: {formatter.format(date.toDate(getLocalTimeZone()))}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Controlled Slider (Single Thumb) in TSX\nDESCRIPTION: Demonstrates how to create a controlled Slider component where the value is managed by React state. It uses the `value` prop bound to a state variable (`value`) and the `onChange` prop linked to the state setter (`setValue`). This ensures the Slider's visual state is always synchronized with the application's state.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Slider.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [value, setValue] = React.useState(25);\n  return (\n    <>\n      <MySlider<number>\n        label=\"Cookies to buy\"\n        value={value}\n        onChange={setValue} />\n      <p>Current value: {value}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Provider Component for Multiple Contexts\nDESCRIPTION: Demonstrates how to use the Provider component to provide multiple contexts efficiently without manual nesting.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/advanced.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Provider, ButtonContext, InputContext} from 'react-aria-components';\n\n<Provider\n  values={[\n    [ButtonContext, {/* ... */}],\n    [InputContext, {/* ... */}]\n  ]}>\n  {/* ... */}\n</Provider>\n```\n\n----------------------------------------\n\nTITLE: Implementing a ClearButton within ToggleButtonGroup using React Context in TSX\nDESCRIPTION: This example demonstrates how to create a ClearButton component that uses the ToggleGroupStateContext to clear the selected keys in a ToggleButtonGroup. It showcases advanced customization using React context and state manipulation.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ToggleButtonGroup.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ToggleGroupStateContext, Button} from 'react-aria-components';\n\nfunction ClearButton() {\n  let state = React.useContext(ToggleGroupStateContext);\n  return (\n    <Button onPress={() => state?.setSelectedKeys(new Set())}>\n      Clear\n    </Button>\n  );\n}\n\n<ToggleButtonGroup selectionMode=\"multiple\" defaultSelectedKeys={['bold', 'italic']}>\n  <ToggleButton id=\"bold\">Bold</ToggleButton>\n  <ToggleButton id=\"italic\">Italic</ToggleButton>\n  <ToggleButton id=\"underline\">Underline</ToggleButton>\n  <ClearButton />\n</ToggleButtonGroup>\n```\n\n----------------------------------------\n\nTITLE: Implementing Unavailable Dates in DateRangePicker\nDESCRIPTION: Example demonstrating how to mark certain dates as unavailable in DateRangePicker. Uses isDateUnavailable prop to define unavailable date ranges and validate prop to prevent selecting ranges with unavailable dates.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DateRangePicker.mdx#2025-04-23_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport {today} from '@internationalized/date';\n\nfunction Example() {\n  let now = today(getLocalTimeZone());\n  let disabledRanges = [\n    [now, now.add({days: 5})],\n    [now.add({days: 14}), now.add({days: 16})],\n    [now.add({days: 23}), now.add({days: 24})],\n  ];\n\n  return (\n    <MyDateRangePicker\n      label=\"Trip dates\"\n      minValue={today(getLocalTimeZone())}\n      isDateUnavailable={date => disabledRanges.some((interval) => date.compare(interval[0]) >= 0 && date.compare(interval[1]) <= 0)}\n      validate={value => disabledRanges.some(interval => value && value.end.compare(interval[0]) >= 0 && value.start.compare(interval[1]) <= 0) ? 'Selected date range may not include unavailable dates.' : null}\n     />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Table with Default Selection Column - React Aria Components - TypeScript\nDESCRIPTION: This code demonstrates how to render a table using the previously shown MyTableHeader and MyRow wrappers. The table is defined with multiple MyColumn components and several rows of static data. The main dependency is react-aria-components along with the custom MyTableHeader, MyRow, and MyColumn wrappers. Props such as aria-label and selectionMode are provided for accessibility. The example shows how to avoid code repetition when constructing accessible, reusable table structures.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Table.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<Table aria-label=\"Files\" selectionMode=\"multiple\">\n  <MyTableHeader>\n    <MyColumn isRowHeader>Name</MyColumn>\n    <MyColumn>Type</MyColumn>\n    <MyColumn>Date Modified</MyColumn>\n  </MyTableHeader>\n  <TableBody>\n    <MyRow>\n      <Cell>Games</Cell>\n      <Cell>File folder</Cell>\n      <Cell>6/7/2020</Cell>\n    </MyRow>\n    <MyRow>\n      <Cell>Program Files</Cell>\n      <Cell>File folder</Cell>\n      <Cell>4/7/2021</Cell>\n    </MyRow>\n    <MyRow>\n      <Cell>bootmgr</Cell>\n      <Cell>System file</Cell>\n      <Cell>11/20/2010</Cell>\n    </MyRow>\n  </TableBody>\n</Table>\n\n```\n\n----------------------------------------\n\nTITLE: Implementing an Animated Ripple Button - React Aria Components - TypeScript\nDESCRIPTION: Defines the RippleButton React component that utilizes React Aria's Button component, react hooks, and Spectrum icons to provide a button with an animated ripple effect when pressed. The implementation manages ripple coordinates via state and cleans up timers on unmount. Dependencies include 'react-aria-components', 'react', and 'tailwindcss', and expects a theme-enabled environment and children as button content. Inputs are press events; outputs are animated UI interactions and accessible button action.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/ripple-button.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Button} from 'react-aria-components';\nimport {useEffect, useRef, useState} from 'react';\nimport Airplane from '@spectrum-icons/workflow/Airplane';\n\nfunction RippleButton(props) {\n  const [coords, setCoords] = useState(null);\n\n  let timeout = useRef<ReturnType<typeof setTimeout> | null>(null);\n  let onPress = (e) => {\n    setCoords({x: e.x, y: e.y});\n    if (e.x !== -1 && e.y !== -1) {\n      clearTimeout(timeout.current);\n      timeout.current = setTimeout(() => setCoords(null), 600);\n    }\n  };\n\n  useEffect(() => {\n    return () => {\n      clearTimeout(timeout.current);\n    };\n  }, []);\n\n  return (\n    <div className=\"bg-linear-to-r from-teal-300 to-cyan-500 p-12 rounded-lg flex justify-center\">\n      <Button\n        onPress={onPress}\n        className={`\n      relative overflow-hidden\n      inline-flex items-center justify-center rounded-md bg-black/50 bg-clip-padding border border-white/20 px-6 py-4 text-white text-lg\n      hover:bg-black/60 pressed:bg-black/70 transition-colors cursor-default outline-hidden focus-visible:ring-2 focus-visible:ring-white/75`}>\n      {coords && (\n        <div\n          key={`${coords.x},${coords.y}`}\n          className=\"absolute h-8 w-8 rounded-full opacity-100 bg-white/60\"\n          style={{\n            animation: 'ripple 600ms linear',\n            left: coords.x - 15,\n            top: coords.y - 15\n          }} />)}\n        <span className=\"flex items-center gap-4\">{props.children}</span>\n      </Button>\n    </div>\n  )\n}\n\n<RippleButton><Airplane size=\"S\" /> Book flight</RippleButton>\n```\n\n----------------------------------------\n\nTITLE: Initializing DateRangePicker with Absolute Time to Local in React (TSX)\nDESCRIPTION: Shows how to initialize a `DateRangePicker` using absolute UTC times converted to the user's local time zone. It uses the `parseAbsoluteToLocal` function from `@internationalized/date` to parse ISO 8601 UTC strings ('Z' suffix) and display them according to the user's current time zone settings.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DateRangePicker.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\nimport {parseAbsoluteToLocal} from '@internationalized/date';\n\n<MyDateRangePicker\n  label=\"Date range\"\n  defaultValue={{\n    start: parseAbsoluteToLocal('2021-11-07T07:45:00Z'),\n    end: parseAbsoluteToLocal('2021-11-08T14:25:00Z')\n  }}\n/>\n```\n```\n\n----------------------------------------\n\nTITLE: Managing Selection in React Aria Select Component\nDESCRIPTION: This example demonstrates how to manage selection in a Select component using the selectedKey prop and onSelectionChange handler with a controlled component.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Select.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {Key} from 'react-aria-components';\n\nfunction Example() {\n  let options = [\n    {name: 'Koala'},\n    {name: 'Kangaroo'},\n    {name: 'Platypus'},\n    {name: 'Bald Eagle'},\n    {name: 'Bison'},\n    {name: 'Skunk'}\n  ];\n  let [animal, setAnimal] = React.useState<Key>(\"Bison\");\n\n  return (\n    <MySelect\n      label=\"Pick an animal (controlled)\"\n      items={options}\n      selectedKey={animal}\n      onSelectionChange={selected => setAnimal(selected)}>\n      {item => <ListBoxItem id={item.name}>{item.name}</ListBoxItem>}\n    </MySelect>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Composing NumberField with Button and Input Components in React Aria\nDESCRIPTION: Demonstrates how to compose a NumberField component using Button and Input components from React Aria, showcasing the compositional API.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/advanced.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<NumberField>\n  <Label>Width</Label>\n  <Group>\n    <Input />\n    <Button slot=\"increment\">+</Button>\n    <Button slot=\"decrement\">-</Button>\n  </Group>\n</NumberField>\n```\n\n----------------------------------------\n\nTITLE: Implementing Drag and Drop Reordering in GridList with useDragAndDrop\nDESCRIPTION: Example of implementing drag and drop functionality for reordering items in a GridList using the useDragAndDrop hook with the onReorder event handler and useListData for state management.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/GridList.mdx#2025-04-23_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useListData} from 'react-stately';\nimport {useDragAndDrop} from 'react-aria-components';\n\nfunction Example() {\n  let list = useListData({\n    initialItems: [\n      {id: 1, name: 'Adobe Photoshop'},\n      {id: 2, name: 'Adobe XD'},\n      {id: 3, name: 'Adobe Dreamweaver'},\n      {id: 4, name: 'Adobe InDesign'},\n      {id: 5, name: 'Adobe Connect'}\n    ]\n  });\n\n  let {dragAndDropHooks} = useDragAndDrop({\n    getItems: (keys) => [...keys].map(key => ({'text/plain': list.getItem(key).name})),\n    onReorder(e) {\n      if (e.target.dropPosition === 'before') {\n        list.moveBefore(e.target.key, e.keys);\n      } else if (e.target.dropPosition === 'after') {\n        list.moveAfter(e.target.key, e.keys);\n      }\n    }\n  });\n\n  return (\n    <MyGridList\n      aria-label=\"Reorderable list\"\n      selectionMode=\"multiple\"\n      items={list.items}\n      dragAndDropHooks={dragAndDropHooks}\n    >\n      {item => <MyItem>{item.name}</MyItem>}\n    </MyGridList>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Selection Behavior Toggle and Replace in GridList - TypeScript\nDESCRIPTION: Shows how to configure selectionBehavior in PokemonList to 'replace', enabling selection replacement via click and keyboard controls, alongside multiple selection mode. This demonstrates two distinct selection styles as defined in ARIA Practices. Props include aria-label, selectionMode, and selectionBehavior, and output is an interactive, accessible list with replace behavior for selection.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/GridList.mdx#2025-04-23_snippet_9\n\nLANGUAGE: TSX\nCODE:\n```\n<PokemonList\\n  aria-label=\\\"List with replace selection behavior\\\"\\n  selectionMode=\\\"multiple\\\"\\n  /*- begin highlight -*/\\n  selectionBehavior=\\\"replace\\\"\\n  /*- end highlight -*/\\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Resizable Table with Persistent Column Widths in React\nDESCRIPTION: This snippet demonstrates how to create a table with resizable columns using React Aria Components. It includes functionality to persist column widths in localStorage and restore them on page reload.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Table.mdx#2025-04-23_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nlet initialColumns = [\n  {name: 'File Name', id: 'file', width: '1fr'},\n  {name: 'Size', id: 'size', width: 80},\n  {name: 'Date', id: 'date', width: 100}\n];\n\nfunction ResizableTable() {\n  /*- begin highlight -*/\n  let [columns, setColumns] = React.useState(() => {\n    let localStorageWidths = localStorage.getItem('table-widths');\n    if (localStorageWidths) {\n      let widths = JSON.parse(localStorageWidths);\n      return initialColumns.map(col => ({...col, width: widths[col.id]}));\n    } else {\n      return initialColumns;\n    }\n  });\n\n  let onResize = (widths) => {\n    setColumns(columns => columns.map(col => ({...col, width: widths.get(col.id)})));\n  };\n\n  let onResizeEnd = (widths) => {\n    localStorage.setItem('table-widths', JSON.stringify(Object.fromEntries(widths)));\n  };\n  /*- end highlight -*/\n\n  return (\n    <ResizableTableContainer\n      /*- begin highlight -*/\n      onResize={onResize}\n      onResizeEnd={onResizeEnd}\n      /*- end highlight -*/\n    >\n      <Table aria-label=\"Table with controlled, resizable columns saved in local storage\">\n        <TableHeader columns={columns}>\n          {(column) => (\n            <Column isRowHeader={column.id === 'file'} width={column.width}>\n              <div className=\"flex-wrapper\">\n                <span tabIndex={-1} className=\"column-name\">{column.name}</span>\n                <ColumnResizer />\n              </div>\n            </Column>\n          )}\n        </TableHeader>\n        <TableBody>\n          <Row>\n            <Cell>2022-Roadmap-Proposal-Revision-012822-Copy(2)</Cell>\n            <Cell>214 KB</Cell>\n            <Cell>November 27, 2022 at 4:56PM</Cell>\n          </Row>\n          <Row>\n            <Cell>62259692_p0_master1200</Cell>\n            <Cell>120 KB</Cell>\n            <Cell>January 27, 2021 at 1:56AM</Cell>\n          </Row>\n        </TableBody>\n      </Table>\n    </ResizableTableContainer>\n  );\n}\n\n<ResizableTable />\n```\n\n----------------------------------------\n\nTITLE: Adding Row Actions to GridList with onAction Prop - TypeScript\nDESCRIPTION: Provides examples of handling row actions in GridList via the onAction prop, enabling behaviors like navigation upon click or keyboard interaction. Two lists are shown: one with selectionBehavior 'toggle' and one with 'replace', each displaying how actions and selection can co-exist. Uses ExampleList, react-aria-components, and styled container for layout. Input is click/keyboard events, and output is alert side-effects or navigation callbacks.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/GridList.mdx#2025-04-23_snippet_10\n\nLANGUAGE: TSX\nCODE:\n```\n<div style={{ display: 'flex', flexWrap: 'wrap', gap: 24 }}>\\n  <ExampleList\\n    aria-label=\\\"Checkbox selection list with row actions\\\"\\n    selectionMode=\\\"multiple\\\"\\n    /*- begin highlight -*/\\n    selectionBehavior=\\\"toggle\\\"\\n    onAction={key => alert(`Opening item ${key}...`)}\\n    /*- end highlight -*/\\n  />\\n  <ExampleList\\n    aria-label=\\\"Highlight selection list with row actions\\\"\\n    selectionMode=\\\"multiple\\\"\\n    /*- begin highlight -*/\\n    selectionBehavior=\\\"replace\\\"\\n    onAction={key => alert(`Opening item ${key}...`)}\\n    /*- end highlight -*/\\n  />\\n</div>\n```\n\n----------------------------------------\n\nTITLE: Providing Custom Validation Errors using FormValidationContext in React\nDESCRIPTION: This snippet demonstrates how to provide custom validation errors using FormValidationContext.Provider. It allows child elements to receive validation errors from the form.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Form.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {FormValidationContext} from 'react-aria-components';\n\n<form>\n  <FormValidationContext.Provider value={{username: 'Sorry, this username is taken.'}}>\n    <TextField name=\"username\">\n      <Label>Username</Label>\n      <Input />\n      <FieldError />\n    </TextField>\n  </FormValidationContext.Provider>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Implementing Calendar Error Validation in React Aria\nDESCRIPTION: Example showing how to validate weekend dates and display error messages in a Calendar component using React Aria. Uses internationalization features to check weekends based on locale.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Calendar.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport {today, isWeekend} from '@internationalized/date';\nimport {useLocale} from 'react-aria';\n\nfunction Example() {\n  let [date, setDate] = React.useState(today(getLocalTimeZone()));\n  let {locale} = useLocale();\n  let isInvalid = isWeekend(date, locale);\n\n  return (\n    <MyCalendar\n      aria-label=\"Appointment date\"\n      value={date}\n      onChange={setDate}\n      isInvalid={isInvalid}\n      errorMessage={isInvalid ? 'We are closed on weekends' : undefined}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Switch Component Implementation in React Aria Components\nDESCRIPTION: A basic example showing how to import and use the Switch component from the react-aria-components library. This example includes the minimal JSX structure needed for a functional switch control.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Switch.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Switch} from 'react-aria-components';\n\n<Switch>\n  <div className=\"indicator\" />\n  Low power mode\n</Switch>\n```\n\n----------------------------------------\n\nTITLE: Composing Context Providers for TagGroup Edit Mode Control with React Aria Components in TypeScript\nDESCRIPTION: This code demonstrates a Removable component that uses ToggleButtonContext and TagGroupContext to allow toggling edit mode for a TagGroup. It uses React's useState to manage selection state, provides this state to children via contexts, and conditionally passes an onRemove handler to TagGroupContext based on isSelected. Dependencies include React, ToggleButtonContext, and TagGroupContext from react-aria-components. The component expects children and an onRemove callback; output nests children within these context providers.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/TagGroup.mdx#2025-04-23_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ToggleButtonContext, TagGroupContext} from 'react-aria-components';\\n\\nfunction Removable({children, onRemove}) {\\n  let [isSelected, onChange] = React.useState(false);\\n  return (\\n    <ToggleButtonContext.Provider value={{isSelected, onChange}}>{/*- begin highlight -*/}<TagGroupContext.Provider value={{onRemove: isSelected && onRemove}}>{/*- end highlight -*/}\\n      {children}\\n    </TagGroupContext.Provider>\\n    </ToggleButtonContext.Provider>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing React Aria Checkbox using Context Provider (TSX)\nDESCRIPTION: Illustrates advanced customization by creating a wrapper component (`CheckboxDescription`) that uses the `CheckboxContext.Provider`. This allows passing props, like `aria-describedby` generated using `useId` from `react-aria`, down to a nested React Aria Checkbox component to link it with a description element without direct prop drilling.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Checkbox.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport {CheckboxContext} from 'react-aria-components';\nimport {useId} from 'react-aria';\n\ninterface CheckboxDescriptionProps {\n  children?: React.ReactNode,\n  description?: string\n}\n\nfunction CheckboxDescription({children, description}: CheckboxDescriptionProps) {\n  let descriptionId = useId();\n  return (\n    <div>\n      {/*- begin highlight -*/}\n      <CheckboxContext.Provider value={{'aria-describedby': descriptionId}}>\n      {/*- end highlight -*/}\n        {children}\n      </CheckboxContext.Provider>\n      <small id={descriptionId}>{description}</small>\n    </div>\n  );\n}\n\n<CheckboxDescription description=\"You will receive our newsletter once per week. Unsubscribe at any time.\">\n  <MyCheckbox defaultSelected>Subscribe</MyCheckbox>\n</CheckboxDescription>\n```\n\n----------------------------------------\n\nTITLE: Implementing a ButtonGroup with Context in React Aria Components\nDESCRIPTION: This example demonstrates how to create a ButtonGroup component that uses ButtonContext to pass the disabled state to all child buttons, showcasing advanced customization using contexts.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Button.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ButtonContext} from 'react-aria-components';\n\ninterface ButtonGroupProps {\n  children?: React.ReactNode,\n  isDisabled?: boolean\n}\n\nfunction ButtonGroup({children, isDisabled}: ButtonGroupProps) {\n  return (\n    <div style={{display: 'flex', gap: 8}}>\n      <ButtonContext.Provider value={{isDisabled}}>\n        {children}\n      </ButtonContext.Provider>\n    </div>\n  );\n}\n\n<ButtonGroup isDisabled>\n  <Button>Save</Button>\n  <Button>Publish</Button>\n</ButtonGroup>\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable RangeCalendar Wrapper Component\nDESCRIPTION: This example demonstrates how to create a reusable RangeCalendar component wrapper that encapsulates the structure, styling, and error handling logic for consistent use across an application.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/RangeCalendar.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {RangeCalendarProps, DateValue} from 'react-aria-components';\nimport {Text} from 'react-aria-components';\n\ninterface MyRangeCalendarProps<T extends DateValue> extends RangeCalendarProps<T> {\n  errorMessage?: string\n}\n\nfunction MyRangeCalendar<T extends DateValue>({errorMessage, ...props}: MyRangeCalendarProps<T>) {\n  return (\n    <RangeCalendar {...props}>\n      <header>\n        <Button slot=\"previous\">◀</Button>\n        <Heading />\n        <Button slot=\"next\">▶</Button>\n      </header>\n      <CalendarGrid>\n        {date => <CalendarCell date={date} />}\n      </CalendarGrid>\n      {errorMessage && <Text slot=\"errorMessage\">{errorMessage}</Text>}\n    </RangeCalendar>\n  );\n}\n\n<MyRangeCalendar aria-label=\"Trip dates\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-month RangeCalendar in React\nDESCRIPTION: Demonstrates how to create a multi-month RangeCalendar component with three visible months. It uses the visibleDuration prop and multiple CalendarGrid components with offsets.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/RangeCalendar.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<RangeCalendar aria-label=\"Trip dates\" visibleDuration={{months: 3}}>\n  <header>\n    <Button slot=\"previous\">◀</Button>\n    <Heading />\n    <Button slot=\"next\">▶</Button>\n  </header>\n  <div style={{display: 'flex', gap: 30, overflow: 'auto'}}>\n    <CalendarGrid>\n      {date => <CalendarCell date={date} />}\n    </CalendarGrid>\n    <CalendarGrid offset={{months: 1}}>\n      {date => <CalendarCell date={date} />}\n    </CalendarGrid>\n    <CalendarGrid offset={{months: 2}}>\n      {date => <CalendarCell date={date} />}\n    </CalendarGrid>\n  </div>\n</RangeCalendar>\n```\n\n----------------------------------------\n\nTITLE: Reusable Menu Component Implementation\nDESCRIPTION: Example of creating reusable menu components with TypeScript interfaces and custom styling support.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Menu.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {MenuProps, MenuTriggerProps, MenuItemProps} from 'react-aria-components';\n\ninterface MyMenuButtonProps<T> extends MenuProps<T>, Omit<MenuTriggerProps, 'children'> {\n  label?: string\n}\n\nfunction MyMenuButton<T extends object>({label, children, ...props}: MyMenuButtonProps<T>) {\n  return (\n    <MenuTrigger {...props}>\n      <Button>{label}</Button>\n      <Popover>\n        <Menu {...props}>\n          {children}\n        </Menu>\n      </Popover>\n    </MenuTrigger>\n  );\n}\n\nexport function MyItem(props: MenuItemProps) {\n  let textValue = props.textValue || (typeof props.children === 'string' ? props.children : undefined);\n  return (\n    <MenuItem\n      {...props}\n      textValue={textValue}\n      className={({isFocused, isSelected, isOpen}) => `my-item ${isFocused ? 'focused' : ''} ${isOpen ? 'open' : ''}`}>\n      {({hasSubmenu}) => (\n        <>\n          {props.children}\n          {hasSubmenu && (\n            <svg className=\"chevron\" viewBox=\"0 0 24 24\"><path d=\"m9 18 6-6-6-6\" /></svg>\n          )}\n        </>\n      )}\n    </MenuItem>\n  );\n}\n\n<MyMenuButton label=\"Edit\">\n  <MyItem>Cut</MyItem>\n  <MyItem>Copy</MyItem>\n  <MyItem>Paste</MyItem>\n</MyMenuButton>\n```\n\n----------------------------------------\n\nTITLE: Creating a Controlled ColorPicker in React (tsx)\nDESCRIPTION: Demonstrates how to create a controlled `ColorPicker` component using `React.useState`. The initial color state is parsed from an HSL string using `parseColor` from `react-aria-components` to ensure consistent type handling. The `value` and `onChange` props are used to manage the component's state externally.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorPicker.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseColor} from 'react-aria-components';\n\nfunction Example() {\n  let [value, setValue] = React.useState(parseColor('hsl(25, 100%, 50%)'));\n  return (\n    <MyColorPicker\n      label=\"Color\"\n      value={value}\n      onChange={setValue} />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Styling of React Aria Tabs with Utility Classes\nDESCRIPTION: Demonstrates how to apply dynamic styling to React Aria Tab components using utility classes and state-based class functions.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Tabs.mdx#2025-04-23_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\n<Tab className={({isSelected}) => isSelected ? 'bg-blue-400' : 'bg-gray-100'}>\n  Settings\n</Tab>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Fully Controlled ComboBox in React Aria Components\nDESCRIPTION: This example demonstrates a fully controlled ComboBox component where state for selectedKey and inputValue are managed externally. The component shows how to properly handle selection and input changes while maintaining controlled state.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ComboBox.mdx#2025-04-23_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nfunction ControlledComboBox() {\n  let options = [\n    {id: 1, name: 'Aerospace'},\n    {id: 2, name: 'Mechanical'},\n    {id: 3, name: 'Civil'},\n    {id: 4, name: 'Biomedical'},\n    {id: 5, name: 'Nuclear'},\n    {id: 6, name: 'Industrial'},\n    {id: 7, name: 'Chemical'},\n    {id: 8, name: 'Agricultural'},\n    {id: 9, name: 'Electrical'}\n  ];\n\n  let [fieldState, setFieldState] = React.useState({\n    selectedKey: null,\n    inputValue: ''\n  });\n\n  let onSelectionChange = (id: Key) => {\n    setFieldState({\n      inputValue: options.find(o => o.id === id)?.name ?? '',\n      selectedKey: id\n    });\n  };\n\n  let onInputChange = (value: string) => {\n    setFieldState(prevState => ({\n      inputValue: value,\n      selectedKey: value === '' ? null : prevState.selectedKey\n    }));\n  };\n\n  return (\n     <>\n      <p>Current selected major id: {fieldState.selectedKey}</p>\n      <p>Current input text: {fieldState.inputValue}</p>\n       <MyComboBox\n        label=\"Pick a engineering major\"\n        defaultItems={options}\n        selectedKey={fieldState.selectedKey}\n        inputValue={fieldState.inputValue}\n        onSelectionChange={onSelectionChange}\n        onInputChange={onInputChange}>\n        {item => <ListBoxItem>{item.name}</ListBoxItem>}\n      </MyComboBox>\n     </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Anatomy of a NumberField in TSX\nDESCRIPTION: This snippet illustrates the structural composition of a `NumberField`. It shows the typical arrangement of child components like `Label`, `Group` (containing `Input` and increment/decrement `Button`s), `Text` for descriptions, and `FieldError` for validation messages within the main `NumberField` container.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/NumberField.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {NumberField, Label, Group, Input, Button, Text, FieldError} from 'react-aria-components';\n\n<NumberField>\n  <Label />\n  <Group>\n    <Input />\n    <Button slot=\"increment\" />\n    <Button slot=\"decrement\" />\n  </Group>\n  <Text slot=\"description\" />\n  <FieldError />\n</NumberField>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Date Validation Logic for DatePicker in React Aria Components (TSX)\nDESCRIPTION: Shows how to implement custom validation rules using the `validate` prop on `MyDatePicker`. The prop accepts a function that receives the current `DateValue`. If the value is invalid according to the custom logic (e.g., checking if it's a weekend using `isWeekend` from `@internationalized/date` and `useLocale` from `react-aria`), the function returns an error message string; otherwise, it returns `null`. The component is within a `Form` and has a default value.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DatePicker.mdx#2025-04-23_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\nimport {isWeekend} from '@internationalized/date';\nimport {useLocale} from 'react-aria';\n\nfunction Example() {\n  let {locale} = useLocale();\n\n  return (\n    <Form>\n      <MyDatePicker\n        label=\"Appointment date\"\n        /*- begin highlight -*/\n        validate={date => date && isWeekend(date, locale) ? 'We are closed on weekends.' : null}\n        /*- end highlight -*/\n        defaultValue={parseDate('2023-10-28')} />\n      <Button type=\"submit\">Submit</Button>\n    </Form>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Reusing Children in Custom Number Field with React Aria Components in TypeScript\nDESCRIPTION: This code shows how to compose a number field using the CustomNumberField implementation, passing Label, Group, Input, and Button children. Each child consumes its corresponding context. This approach allows for customized, modular UI components implementing standard behaviors via react-aria-components.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/advanced.mdx#2025-04-23_snippet_14\n\nLANGUAGE: TSX\nCODE:\n```\n<CustomNumberField>\n  <Label>Width</Label>\n  <Group>\n    <Input />\n    <Button slot=\"increment\">+</Button>\n    <Button slot=\"decrement\">-</Button>\n  </Group>\n</CustomNumberField>\n```\n\n----------------------------------------\n\nTITLE: Tailwind Configuration\nDESCRIPTION: Configuration setup for Tailwind CSS including required plugins for React Aria Components and animations.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/user-combobox.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nmodule.exports = {\n  // ...\n  plugins: [\n    require('tailwindcss-react-aria-components'),\n    require('tailwindcss-animate')\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Uncontrolled and Controlled DatePicker Values in TSX\nDESCRIPTION: Demonstrates how to manage date values in the custom `MyDatePicker` component using both uncontrolled (`defaultValue`) and controlled (`value`, `onChange`) approaches. It utilizes `React.useState` for the controlled state and the `parseDate` function from `@internationalized/date` to create `CalendarDate` objects for initializing values. This allows flexibility in how the component's state is managed.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DatePicker.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseDate} from '@internationalized/date';\n\nfunction Example() {\n  let [value, setValue] = React.useState(parseDate('2020-02-03'));\n\n  return (\n    <>\n      <MyDatePicker\n        label=\"Date (uncontrolled)\"\n        defaultValue={parseDate('2020-02-03')} />\n      <MyDatePicker\n        label=\"Date (controlled)\"\n        value={value}\n        onChange={setValue} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Swipeable Email List Component Implementation\nDESCRIPTION: Implements a swipeable email list component using React Aria Components and Framer Motion. Features include selection mode toggling, delete functionality, and animated list items with swipe-to-delete gesture support.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/ios-list.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, GridListItem, GridList } from \"react-aria-components\";\nimport type {Selection, SelectionMode} from 'react-aria-components';\nimport {\n  motion,\n  animate,\n  AnimatePresence,\n  useMotionValue,\n  useIsPresent,\n  useMotionTemplate,\n  useMotionValueEvent\n} from \"framer-motion\";\nimport { useRef, useState } from \"react\";\nimport type {CSSProperties} from 'react';\n\nconst MotionItem = motion(GridListItem);\nconst inertiaTransition = {\n  type: \"inertia\" as const,\n  bounceStiffness: 300,\n  bounceDamping: 40,\n  timeConstant: 300\n};\n\nfunction SwipableList() {\n  let [items, setItems] = useState(messages.emails);\n  let [selectedKeys, setSelectedKeys] = useState<Selection>(new Set());\n  let [selectionMode, setSelectionMode] = useState<SelectionMode>(\"none\");\n  let onDelete = () => {\n    setItems(items.filter((i) => selectedKeys !== 'all' && !selectedKeys.has(i.id)));\n    setSelectedKeys(new Set());\n    setSelectionMode(\"none\");\n  };\n\n  return (\n    <div className=\"flex flex-col h-full max-h-[500px] sm:w-[400px] -mx-[14px] sm:mx-0\">\n      {/* Toolbar */}\n      <div className=\"flex pb-4 justify-between\">\n        <Button\n          className=\"text-blue-600 text-lg outline-hidden bg-transparent border-none transition pressed:text-blue-700 focus-visible:ring-3 disabled:text-gray-400\"\n          style={{ opacity: selectionMode === \"none\" ? 0 : 1 }}\n          isDisabled={selectedKeys !== 'all' && selectedKeys.size === 0}\n          onPress={onDelete}\n        >\n          Delete\n        </Button>\n        <Button\n          className=\"text-blue-600 text-lg outline-hidden bg-transparent border-none transition pressed:text-blue-700 focus-visible:ring-3\"\n          onPress={() => {\n            setSelectionMode((m) => (m === \"none\" ? \"multiple\" : \"none\"));\n            setSelectedKeys(new Set());\n          }}\n        >\n          {selectionMode === \"none\" ? \"Edit\" : \"Cancel\"}\n        </Button>\n      </div>\n      <GridList\n        className=\"relative flex-1 overflow-auto\"\n        aria-label=\"Inbox\"\n        onAction={selectionMode === \"none\" ? () => {} : undefined}\n        selectionMode={selectionMode}\n        selectedKeys={selectedKeys}\n        onSelectionChange={setSelectedKeys}\n      >\n        <AnimatePresence>\n          {items.map((item) => (\n            <ListItem\n              key={item.id}\n              id={item.id}\n              textValue={[item.sender, item.date, item.subject, item.message].join('\\n')}\n              onRemove={() => setItems(items.filter((i) => i !== item))}\n            >\n              <div className=\"flex flex-col text-md cursor-default\">\n                <div className=\"flex justify-between\">\n                  <p className=\"font-bold text-lg m-0\">{item.sender}</p>\n                  <p className=\"text-gray-500 m-0\">{item.date}</p>\n                </div>\n                <p className=\"m-0\">{item.subject}</p>\n                <p className=\"line-clamp-2 text-gray-500 dark:text-gray-400 m-0\">{item.message}</p>\n              </div>\n            </ListItem>\n          ))}\n        </AnimatePresence>\n      </GridList>\n    </div>\n  );\n}\n\nfunction ListItem({ id, children, textValue, onRemove }) {\n  let ref = useRef(null);\n  let x = useMotionValue(0);\n  let isPresent = useIsPresent();\n  let xPx = useMotionTemplate`${x}px`;\n\n  // Align the text in the remove button to the left if the\n  // user has swiped at least 80% of the width.\n  let [align, setAlign] = useState(\"end\");\n  useMotionValueEvent(x, \"change\", (x) => {\n    let a = x < -ref.current?.offsetWidth * 0.8 ? \"start\" : \"end\";\n    setAlign(a);\n  });\n\n  return (\n    <MotionItem\n      id={id}\n      textValue={textValue}\n      className=\"outline-hidden group relative overflow-clip border-t border-0 border-solid last:border-b border-gray-200 dark:border-gray-800 pressed:bg-gray-200 dark:pressed:bg-gray-800 selected:bg-gray-200 dark:selected:bg-gray-800 focus-visible:outline focus-visible:outline-blue-600 focus-visible:-outline-offset-2\"\n      layout\n      transition={{ duration: 0.25 }}\n      exit={{ opacity: 0 }}\n    >\n    </MotionItem>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Wi-Fi Switch Component Implementation\nDESCRIPTION: Main implementation of the Wi-Fi switch component using React Aria Components and Tailwind CSS classes for styling. Creates an animated toggle switch with Wi-Fi label.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/wifi-switch.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Switch} from 'react-aria-components';\n\n<div className=\"bg-linear-to-r from-yellow-300 to-orange-300 p-12 rounded-lg flex justify-center\">\n  <Switch className=\"group flex gap-2 items-center text-black font-semibold text-lg\">\n    <div className=\"flex h-[26px] w-[44px] shrink-0 cursor-default rounded-full shadow-inner bg-clip-padding border border-solid border-white/30 p-[3px] box-border transition duration-200 ease-in-out bg-yellow-600 group-pressed:bg-yellow-700 group-selected:bg-amber-800 group-selected:group-pressed:bg-amber-900 outline-hidden group-focus-visible:ring-2 ring-black\">\n      <span className=\"h-[18px] w-[18px] transform rounded-full bg-white shadow-sm transition duration-200 ease-in-out translate-x-0 group-selected:translate-x-[100%]\" />\n    </div>\n    Wi-Fi\n  </Switch>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Calendar Component with Controlled and Uncontrolled Values\nDESCRIPTION: Example showing both controlled and uncontrolled Calendar components side by side, demonstrating how to manage date values using the @internationalized/date package.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Calendar.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseDate} from '@internationalized/date';\n\nfunction Example() {\n  let [value, setValue] = React.useState(parseDate('2020-02-03'));\n\n  return (\n    <div style={{display: 'flex', gap: 20, flexWrap: 'wrap'}}>\n      <MyCalendar\n        aria-label=\"Date (uncontrolled)\"\n        defaultValue={parseDate('2020-02-03')} />\n      <MyCalendar\n        aria-label=\"Date (controlled)\"\n        value={value}\n        onChange={setValue} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Minimum Date for DatePicker in React Aria Components (TSX)\nDESCRIPTION: Demonstrates restricting date selection using the `minValue` prop on `MyDatePicker`. This example prevents users from selecting dates earlier than the current date by setting `minValue` to the result of `today(getLocalTimeZone())` from `@internationalized/date`. The component is placed within a `Form` and includes a default value set using `parseDate`.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DatePicker.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\nimport {today} from '@internationalized/date';\n\n<Form>\n  <MyDatePicker\n    label=\"Appointment date\"\n    /*- begin highlight -*/\n    minValue={today(getLocalTimeZone())}\n    /*- end highlight -*/\n    defaultValue={parseDate('2022-02-03')} />\n  <Button type=\"submit\">Submit</Button>\n</Form>\n```\n```\n\n----------------------------------------\n\nTITLE: Forwarding Refs in Custom Triggers - TypeScript\nDESCRIPTION: This snippet demonstrates how to create a custom React component with ref forwarding, suitable for use as a dialog trigger. Using React.forwardRef, all props and the ref are passed through to a native button for maximal compatibility and accessibility. Required dependency: React. Props and ref should be spread to the underlying DOM element for ARIA support and focus management. Useful for integrating third-party or custom triggers.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Modal.mdx#2025-04-23_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst CustomTrigger = React.forwardRef((props, ref) => (\n  <button {...props} ref={ref} />\n));\n```\n\n----------------------------------------\n\nTITLE: Basic RadioGroup Example in React\nDESCRIPTION: Demonstrates a simple implementation of a RadioGroup with Radio buttons for selecting a favorite pet.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/RadioGroup.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {RadioGroup, Radio, Label} from 'react-aria-components';\n\n<RadioGroup>\n  <Label>Favorite pet</Label>\n  <Radio value=\"dogs\">Dog</Radio>\n  <Radio value=\"cats\">Cat</Radio>\n  <Radio value=\"dragon\">Dragon</Radio>\n</RadioGroup>\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled Selection in Tree Component (TSX)\nDESCRIPTION: This snippet defines a `PokemonEvolutionTree` component demonstrating controlled selection. It uses `React.useState` to manage the `selectedKeys` state and updates it via the `onSelectionChange` callback provided by the `Tree` component.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Tree.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example export=true\nimport type {Selection} from 'react-aria-components';\n\ninterface Pokemon {\n  id: number,\n  name: string,\n  children?: Pokemon[]\n}\n\ninterface PokemonEvolutionTreeProps<T> extends TreeProps<T> {\n  items?: T[],\n  renderEmptyState?: () => string\n}\n\nfunction PokemonEvolutionTree(\n  props: PokemonEvolutionTreeProps<Pokemon>\n) {\n  let items: Pokemon[] = props.items ?? [\n    {id: 1, name: 'Bulbasaur', children: [\n      {id: 2, name: 'Ivysaur', children: [\n        {id: 3, name: 'Venusaur'}\n      ]}\n    ]},\n    {id: 4, name: 'Charmander', children: [\n      {id: 5, name: 'Charmeleon', children: [\n        {id: 6, name: 'Charizard'}\n      ]}\n    ]},\n    {id: 7, name: 'Squirtle', children: [\n      {id: 8, name: 'Wartortle', children: [\n        {id: 9, name: 'Blastoise'}\n      ]}\n    ]}\n  ];\n\n  ///- begin highlight -///\n  let [selectedKeys, setSelectedKeys] =\n    React.useState<Selection>(new Set());\n  ///- end highlight -///\n\n  return (\n    <Tree\n      aria-label=\"Pokemon evolution tree\"\n      style={{height: '300px'}}\n      items={items}\n      defaultExpandedKeys={[1, 2]}\n      /*- begin highlight -*/\n      selectedKeys={selectedKeys}\n      onSelectionChange={setSelectedKeys}\n      /*- end highlight -*/\n      {...props}\n    >\n      {function renderItem(item) {\n        return (\n          <MyTreeItem title={item.name}>\n            <Collection items={item.children}>\n              {renderItem}\n            </Collection>\n          </MyTreeItem>\n        );\n      }}\n    </Tree>\n  );\n}\n\n<PokemonEvolutionTree selectionMode=\"multiple\" />\n```\n```\n\n----------------------------------------\n\nTITLE: Basic ListBox Implementation in TypeScript\nDESCRIPTION: Demonstrates a simple implementation of a ListBox component with single selection mode and multiple items.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ListBox.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ListBox, ListBoxItem} from 'react-aria-components';\n\n<ListBox aria-label=\"Favorite animal\" selectionMode=\"single\">\n  <ListBoxItem>Aardvark</ListBoxItem>\n  <ListBoxItem>Cat</ListBoxItem>\n  <ListBoxItem>Dog</ListBoxItem>\n  <ListBoxItem>Kangaroo</ListBoxItem>\n  <ListBoxItem>Panda</ListBoxItem>\n  <ListBoxItem>Snake</ListBoxItem>\n</ListBox>\n```\n\n----------------------------------------\n\nTITLE: Custom Validation for DateRangePicker Duration\nDESCRIPTION: Implementation of custom validation logic for DateRangePicker using the validate prop. This example validates that the selected date range is not longer than one week in duration.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DateRangePicker.mdx#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\n<Form>\n  <MyDateRangePicker\n    label=\"Trip dates\"\n    validate={range => range?.end.compare(range.start) > 7 ? 'Maximum stay duration is 1 week.' : null}\n    defaultValue={{\n      start: today(getLocalTimeZone()),\n      end: today(getLocalTimeZone()).add({ weeks: 1, days: 3 })\n    }} />\n  <Button type=\"submit\">Submit</Button>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Using TimeFieldContext Provider for Grouped Field Validation (React/TSX)\nDESCRIPTION: Illustrates creating a `FieldGroup` component that uses `TimeFieldContext.Provider` to pass down props (`isInvalid`, `aria-describedby`) to multiple child `MyTimeField` components. This enables consistent validation state and accessibility linking for grouped fields. Uses `useId` from `react-aria` for generating unique IDs.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/TimeField.mdx#2025-04-23_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nexample\nimport {TimeFieldContext} from 'react-aria-components';\nimport {useId} from 'react-aria';\n\ninterface FieldGroupProps {\n  title?: string,\n  children?: React.ReactNode,\n  errorMessage?: string\n}\n\nfunction FieldGroup({title, children, errorMessage}: FieldGroupProps) {\n  let errorId = useId();\n  return (\n    <fieldset>\n      <legend>{title}</legend>\n      {/*- begin highlight -*/}\n      <TimeFieldContext.Provider value={{\n        isInvalid: !!errorMessage,\n        'aria-describedby': errorMessage ? errorId : undefined\n      }}>\n      {/*- end highlight -*/}\n        {children}\n      </TimeFieldContext.Provider>\n      {errorMessage && <small id={errorId} className=\"invalid\">{errorMessage}</small>}\n    </fieldset>\n  );\n}\n\n<FieldGroup title=\"Schedule meeting time\" errorMessage=\"End time must be after start time.\">\n  <MyTimeField label=\"Start\" defaultValue={new Time(13)} />\n  <MyTimeField label=\"End\" defaultValue={new Time(9)} />\n</FieldGroup>\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-month Calendar in React Aria Components\nDESCRIPTION: This snippet shows how to create a multi-month calendar view using multiple CalendarGrid components. It demonstrates setting the visibleDuration prop and using the offset prop for each grid.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Calendar.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<Calendar aria-label=\"Appointment date\" visibleDuration={{months: 3}}>\n  <header>\n    <Button slot=\"previous\">◀</Button>\n    <Heading />\n    <Button slot=\"next\">▶</Button>\n  </header>\n  <div style={{display: 'flex', gap: 30, overflow: 'auto'}}>\n    <CalendarGrid>\n      {date => <CalendarCell date={date} />}\n    </CalendarGrid>\n    <CalendarGrid offset={{months: 1}}>\n      {date => <CalendarCell date={date} />}\n    </CalendarGrid>\n    <CalendarGrid offset={{months: 2}}>\n      {date => <CalendarCell date={date} />}\n    </CalendarGrid>\n  </div>\n</Calendar>\n```\n\n----------------------------------------\n\nTITLE: Enable Single Row Selection in a Table - React Aria Components - TypeScript\nDESCRIPTION: This code snippet shows how to use the FileTable component with selectionMode set to 'single' and a default selected row via defaultSelectedKeys. It highlights the table's support for single row selection where the selectedKey should match a row's id. Prerequisite components include FileTable and all related dependencies from earlier contexts. Inputs include selectionMode and defaultSelectedKeys props; the table output will allow only one row to be selected at a time.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Table.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<FileTable selectionMode=\"single\" defaultSelectedKeys={[2]} />\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Unavailable Dates in React Aria Components Calendar\nDESCRIPTION: This example demonstrates how to mark certain dates as unavailable using the isDateUnavailable prop. It includes multiple unavailable date ranges and makes all weekends unavailable.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Calendar.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport {today, isWeekend} from '@internationalized/date';\nimport {useLocale} from '@react-aria/i18n';\n\nfunction Example() {\n  let now = today(getLocalTimeZone());\n  let disabledRanges = [\n    [now, now.add({days: 5})],\n    [now.add({days: 14}), now.add({days: 16})],\n    [now.add({days: 23}), now.add({days: 24})],\n  ];\n\n  let {locale} = useLocale();\n  let isDateUnavailable = (date: DateValue) => isWeekend(date, locale) || disabledRanges.some((interval) => date.compare(interval[0]) >= 0 && date.compare(interval[1]) <= 0);\n\n  return <MyCalendar aria-label=\"Appointment date\" minValue={today(getLocalTimeZone())} isDateUnavailable={isDateUnavailable} />\n}\n```\n\n----------------------------------------\n\nTITLE: Reusable TextField Component\nDESCRIPTION: Example of creating a reusable TextField wrapper component with props for label, description, and error handling.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/TextField.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {TextFieldProps, ValidationResult} from 'react-aria-components';\nimport {Text, FieldError} from 'react-aria-components';\n\ninterface MyTextFieldProps extends TextFieldProps {\n  label?: string,\n  description?: string,\n  errorMessage?: string | ((validation: ValidationResult) => string)\n}\n\nfunction MyTextField({label, description, errorMessage, ...props}: MyTextFieldProps) {\n  return (\n    <TextField {...props}>\n      <Label>{label}</Label>\n      <Input />\n      {description && <Text slot=\"description\">{description}</Text>}\n      <FieldError>{errorMessage}</FieldError>\n    </TextField>\n  );\n}\n\n<MyTextField label=\"Name\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing SelectAllListBox Component with React Aria Contexts in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a SelectAllListBox component using React Aria's CheckboxContext and ListBoxContext. It allows toggling selection of all items in a ListBox using a Checkbox.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ListBox.mdx#2025-04-23_snippet_44\n\nLANGUAGE: tsx\nCODE:\n```\nimport {CheckboxContext, ListBoxContext} from 'react-aria-components';\n\nfunction SelectAllListBox({children}) {\n  let [selectedKeys, onSelectionChange] = React.useState<Selection>(new Set());\n  let isSelected = selectedKeys === 'all';\n  let onChange = (isSelected: boolean) => {\n    onSelectionChange(isSelected ? 'all' : new Set());\n  };\n\n  return (\n    <CheckboxContext.Provider value={{isSelected, onChange}}>\n      <ListBoxContext.Provider value={{selectedKeys, onSelectionChange}}>\n        {children}\n      </ListBoxContext.Provider>\n    </CheckboxContext.Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DisclosureGroup Component with Context in React Aria Components\nDESCRIPTION: This snippet demonstrates how to create a DisclosureGroup component that uses DisclosureContext to pass the isDisabled prop to child Disclosure components. It also shows how to use the component to render multiple disclosures.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Disclosure.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {DisclosureContext} from 'react-aria-components';\n\ninterface DisclosureGroupProps {\n  children?: React.ReactNode,\n  isDisabled?: boolean\n}\n\nfunction DisclosureGroup({children, isDisabled}: DisclosureGroupProps) {\n  return (\n    <div style={{display: 'flex', flexDirection: 'column'}}>\n      <DisclosureContext.Provider value={{isDisabled}}>\n        {children}\n      </DisclosureContext.Provider>\n    </div>\n  )\n}\n\n<DisclosureGroup isDisabled>\n  <MyDisclosure title=\"How to make a return\" >\n    Details about returning items\n  </MyDisclosure>\n  <MyDisclosure title=\"How to cancel an order\" >\n    Details on canceling an order\n  </MyDisclosure>\n</DisclosureGroup>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic ComboBox in React Aria Components\nDESCRIPTION: This example demonstrates how to create a basic ComboBox component with a label, input, button, and list of selectable items in a popover.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ComboBox.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ComboBox, Label, Input, Button, Popover, ListBox, ListBoxItem} from 'react-aria-components';\n\n<ComboBox>\n  <Label>Favorite Animal</Label>\n  <div>\n    <Input />\n    <Button>▼</Button>\n  </div>\n  <Popover>\n    <ListBox>\n      <ListBoxItem>Aardvark</ListBoxItem>\n      <ListBoxItem>Cat</ListBoxItem>\n      <ListBoxItem>Dog</ListBoxItem>\n      <ListBoxItem>Kangaroo</ListBoxItem>\n      <ListBoxItem>Panda</ListBoxItem>\n      <ListBoxItem>Snake</ListBoxItem>\n    </ListBox>\n  </Popover>\n</ComboBox>\n```\n\n----------------------------------------\n\nTITLE: Tailwind CSS Animation with React Aria Components\nDESCRIPTION: An example showing how to use tailwindcss-animate plugin with React Aria Components to create fade animations using Tailwind utility classes.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/styling.mdx#2025-04-23_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\n<Popover className=\"data-[entering]:animate-in data-[entering]:fade-in data-[exiting]:animate-out data-[exiting]:fade-out\">\n  {/* ... */}\n</Popover>\n```\n\n----------------------------------------\n\nTITLE: Controlled ColorSwatchPicker with State Management\nDESCRIPTION: Implementation of a controlled ColorSwatchPicker component with React state. This example demonstrates using the parseColor function to maintain consistent color object types across state updates.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorSwatchPicker.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseColor} from 'react-aria-components';\n\nfunction Example() {\n  let [color, setColor] = React.useState(parseColor('hsl(0, 100%, 33.33%)'));\n\n  return (\n    <MyColorSwatchPicker value={color} onChange={setColor}>\n      <MyColorSwatchPickerItem color=\"#A00\" />\n      <MyColorSwatchPickerItem color=\"#f80\" />\n      <MyColorSwatchPickerItem color=\"#080\" />\n    </MyColorSwatchPicker>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic SearchField Component Example in React Aria Components\nDESCRIPTION: Demonstrates the basic usage of the SearchField component with its Label, Input, and Button subcomponents for creating an accessible search field.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/SearchField.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {SearchField, Label, Input, Button} from 'react-aria-components';\n\n<SearchField>\n  <Label>Search</Label>\n  <Input />\n  <Button>✕</Button>\n</SearchField>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Toast Region in React\nDESCRIPTION: Demonstrates how to set up the basic Toast infrastructure with a ToastRegion component and queue system in a React application.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Toast.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {UNSTABLE_ToastRegion as ToastRegion, UNSTABLE_Toast as Toast, UNSTABLE_ToastQueue as ToastQueue, UNSTABLE_ToastContent as ToastContent, Button, Text} from 'react-aria-components';\n\ninterface MyToastContent {\n  title: string,\n  description?: string\n}\n\nexport const queue = new ToastQueue<MyToastContent>();\n\nexport function App() {\n  return (\n    <>\n      <ToastRegion queue={queue}>\n        {({toast}) => (\n          <Toast toast={toast}>\n            <ToastContent>\n              <Text slot=\"title\">{toast.content.title}</Text>\n              <Text slot=\"description\">{toast.content.description}</Text>\n            </ToastContent>\n            <Button slot=\"close\">x</Button>\n          </Toast>\n        )}\n      </ToastRegion>\n      {/* Your app here */}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Text Slots in ListBoxItem for Enhanced Accessibility\nDESCRIPTION: Shows how to use Text slots for 'label' and 'description' within ListBoxItem to improve screen reader announcements and enable separate styling of primary and secondary content.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ComboBox.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Text} from 'react-aria-components';\n\n<MyComboBox label=\"Select action\">\n  <ListBoxItem textValue=\"Add to queue\">\n    <Text slot=\"label\">Add to queue</Text>\n    <Text slot=\"description\">Add to current watch queue.</Text>\n  </ListBoxItem>\n  <ListBoxItem textValue=\"Add review\">\n    <Text slot=\"label\">Add review</Text>\n    <Text slot=\"description\">Post a review for the episode.</Text>\n  </ListBoxItem>\n  <ListBoxItem textValue=\"Subscribe to series\">\n    <Text slot=\"label\">Subscribe to series</Text>\n    <Text slot=\"description\">Add series to your subscription list and be notified when a new episode airs.</Text>\n  </ListBoxItem>\n  <ListBoxItem textValue=\"Report\">\n    <Text slot=\"label\">Report</Text>\n    <Text slot=\"description\">Report an issue/violation.</Text>\n  </ListBoxItem>\n</MyComboBox>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Form Input with Validation using FormValidationContext in React\nDESCRIPTION: This example shows how to create a custom form input component (NativeSelect) that consumes FormValidationContext to display validation errors provided by the Form component.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Form.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {SelectHTMLAttributes} from 'react';\nimport {useContext} from 'react';\nimport {useId} from 'react-aria';\n\nfunction NativeSelect(props: SelectHTMLAttributes<HTMLSelectElement> & {label: string}) {\n  let errors = useContext(FormValidationContext);\n  let error = errors?.[props.name];\n  let id = useId();\n  let descriptionId = useId();\n\n  return (\n    <div className=\"flex\">\n      <label htmlFor={id}>{props.label}</label>\n      <select {...props} id={id} aria-describedby={descriptionId} />\n      <small className=\"invalid\" id={descriptionId}>{error}</small>\n    </div>\n  );\n}\n\n<Form validationErrors={{frequency: 'Please select a frequency.'}}>\n  <NativeSelect label=\"Frequency\" name=\"frequency\">\n    <option value=\"\">Select an option...</option>\n    <option>Always</option>\n    <option>Sometimes</option>\n    <option>Never</option>\n  </NativeSelect>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Implementing Removable Tags in React Aria\nDESCRIPTION: This example demonstrates how to implement removable tags using the onRemove prop in a TagGroup component. It uses useListData for managing the list of tags and allows users to remove tags by clicking a remove button or pressing backspace.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/TagGroup.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useListData} from '@react-stately/data';\n\nfunction Example() {\n  let list = useListData({\n    initialItems: [\n      { id: 1, name: \"News\" },\n      { id: 2, name: \"Travel\" },\n      { id: 3, name: \"Gaming\" },\n      { id: 4, name: \"Shopping\" }\n    ]\n  });\n\n  return (\n    <MyTagGroup\n      label=\"Categories\"\n      items={list.items}\n      onRemove={keys => list.remove(...keys)}\n    >\n      {(item) => <MyTag>{item.name}</MyTag>}\n    </MyTagGroup>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Validation in Select\nDESCRIPTION: Demonstrates how to implement form validation with error messages in Select component.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Select.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Form, FieldError} from 'react-aria-components';\n\n<Form>\n  <Select name=\"animal\" isRequired>\n    <Label>Favorite Animal</Label>\n    <Button>\n      <SelectValue />\n      <span aria-hidden=\"true\">▼</span>\n    </Button>\n    <FieldError />\n    <Popover>\n      <ListBox>\n        <ListBoxItem>Aardvark</ListBoxItem>\n        <ListBoxItem>Cat</ListBoxItem>\n        <ListBoxItem>Dog</ListBoxItem>\n        <ListBoxItem>Kangaroo</ListBoxItem>\n        <ListBoxItem>Panda</ListBoxItem>\n        <ListBoxItem>Snake</ListBoxItem>\n      </ListBox>\n    </Popover>\n  </Select>\n  <Button type=\"submit\">Submit</Button>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: DropZone with Conditional Visual Feedback via getDropOperation\nDESCRIPTION: Example showing how to provide conditional visual feedback based on the dragged item's type using the getDropOperation prop, which only accepts PNG images and rejects other file types.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DropZone.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [dropped, setDropped] = React.useState(false);\n\n  return (\n    <DropZone\n      getDropOperation={(types) => types.has('image/png') ? 'copy' : 'cancel'}\n      onDrop={() => setDropped(true)}>\n      {dropped ? 'Successful drop!' : 'Drop files here'}\n    </DropZone>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Select State Context in React Aria Components\nDESCRIPTION: This example demonstrates how to create a SelectClearButton component that accesses the Select component's state through SelectStateContext and allows users to clear the selected item.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Select.mdx#2025-04-23_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\nimport {SelectStateContext} from 'react-aria-components';\n\nfunction SelectClearButton() {\n  /*- begin highlight -*/\n  let state = React.useContext(SelectStateContext);\n  /*- end highlight -*/\n  return (\n    <Button\n      // Don't inherit behavior from Select.\n      slot={null}\n      style={{fontSize: 'small', marginTop: 6, padding: 4}}\n      onPress={() => state?.setSelectedKey(null)}>\n      Clear\n    </Button>\n  );\n}\n\n<Select>\n  <Label>Favorite Animal</Label>\n  <Button>\n    <SelectValue />\n    <span aria-hidden=\"true\">▼</span>\n  </Button>\n  {/*- begin highlight -*/}\n  <SelectClearButton />\n  {/*- end highlight -*/}\n  <Popover>\n    <ListBox>\n      <ListBoxItem>Cat</ListBoxItem>\n      <ListBoxItem>Dog</ListBoxItem>\n      <ListBoxItem>Kangaroo</ListBoxItem>\n    </ListBox>\n  </Popover>\n</Select>\n```\n\n----------------------------------------\n\nTITLE: Basic CheckboxGroup Implementation in React Aria Components\nDESCRIPTION: Demonstrates a basic implementation of a CheckboxGroup with multiple checkboxes for selecting favorite sports. Each checkbox includes a custom SVG icon for the check indicator.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/CheckboxGroup.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {CheckboxGroup, Checkbox, Label} from 'react-aria-components';\n\n<CheckboxGroup>\n  <Label>Favorite sports</Label>\n  <Checkbox value=\"soccer\">\n    <div className=\"checkbox\" aria-hidden=\"true\">\n      <svg viewBox=\"0 0 18 18\"><polyline points=\"1 9 7 14 15 4\" /></svg>\n    </div>\n    Soccer\n  </Checkbox>\n  <Checkbox value=\"baseball\">\n    <div className=\"checkbox\" aria-hidden=\"true\">\n      <svg viewBox=\"0 0 18 18\"><polyline points=\"1 9 7 14 15 4\" /></svg>\n    </div>\n    Baseball\n  </Checkbox>\n  <Checkbox value=\"basketball\">\n    <div className=\"checkbox\" aria-hidden=\"true\">\n      <svg viewBox=\"0 0 18 18\"><polyline points=\"1 9 7 14 15 4\" /></svg>\n    </div>\n    Basketball\n  </Checkbox>\n</CheckboxGroup>\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable DatePicker Wrapper in TSX\nDESCRIPTION: Defines a reusable React component `MyDatePicker` that wraps the core `DatePicker` and its related components (`Label`, `Group`, `DateInput`, `DateSegment`, `Button`, `Popover`, `Dialog`, `Calendar`, `Heading`, `CalendarGrid`, `CalendarCell`) from `react-aria-components`. This wrapper simplifies usage by accepting common props like `label`, `description`, and `errorMessage`, and includes slots for help text and validation errors using `Text` and `FieldError`. The example demonstrates basic instantiation.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DatePicker.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {DatePickerProps, DateValue, ValidationResult} from 'react-aria-components';\nimport {Text, FieldError} from 'react-aria-components';\n\ninterface MyDatePickerProps<T extends DateValue> extends DatePickerProps<T> {\n  label?: string,\n  description?: string,\n  errorMessage?: string | ((validation: ValidationResult) => string)\n}\n\nfunction MyDatePicker<T extends DateValue>({label, description, errorMessage, firstDayOfWeek, ...props}: MyDatePickerProps<T>) {\n  return (\n    <DatePicker {...props}>\n      <Label>{label}</Label>\n      <Group>\n        <DateInput>\n          {segment => <DateSegment segment={segment} />}\n        </DateInput>\n        <Button>▼</Button>\n      </Group>\n      {description && <Text slot=\"description\">{description}</Text>}\n      <FieldError>{errorMessage}</FieldError>\n      <Popover>\n        <Dialog>\n          <Calendar firstDayOfWeek={firstDayOfWeek}>\n            <header>\n              <Button slot=\"previous\">◀</Button>\n              <Heading />\n              <Button slot=\"next\">▶</Button>\n            </header>\n            <CalendarGrid>\n              {date => <CalendarCell date={date} />}\n            </CalendarGrid>\n          </Calendar>\n        </Dialog>\n      </Popover>\n    </DatePicker>\n\n  );\n}\n\n<MyDatePicker label=\"Event date\" />\n```\n\n----------------------------------------\n\nTITLE: Basic DropZone Implementation in React Aria Components\nDESCRIPTION: A simple example demonstrating how to implement a basic DropZone component that updates its state when an item is dropped onto it.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DropZone.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {DropZone, Text} from 'react-aria-components';\n\nfunction Example() {\n  let [dropped, setDropped] = React.useState(false);\n\n  return (\n    <DropZone\n      onDrop={() => {\n        setDropped(true);\n      }}>\n      <Text slot=\"label\">\n        {dropped ? \"You dropped something\" : \"Drop object here\"}\n      </Text>\n    </DropZone>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Anatomy of the Slider Component in TSX\nDESCRIPTION: Illustrates the structural composition (anatomy) of the Slider component. It shows how Slider acts as a container for Label, SliderOutput, SliderTrack, and one or more SliderThumb components. It also demonstrates that a SliderThumb can optionally contain its own Label.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Slider.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Slider, Label, SliderOutput, SliderTrack, SliderThumb} from 'react-aria-components';\n\n<Slider>\n  <Label />\n  <SliderOutput />\n  <SliderTrack>\n    <SliderThumb />\n    <SliderThumb>\n      <Label />\n    </SliderThumb>\n  </SliderTrack>\n</Slider>\n```\n\n----------------------------------------\n\nTITLE: Reusable ColorPicker Component\nDESCRIPTION: Implementation of a reusable ColorPicker wrapper component that encapsulates common functionality and styling.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorPicker.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {ColorPickerProps} from 'react-aria-components';\nimport {Button, ColorPicker, Dialog, DialogTrigger, Popover} from 'react-aria-components';\nimport {MyColorSwatch} from './ColorSwatch';\nimport {MyColorArea} from './ColorArea';\nimport {MyColorSlider} from './ColorSlider';\nimport {MyColorField} from './ColorField';\n\ninterface MyColorPickerProps extends ColorPickerProps {\n  label?: string,\n  children?: React.ReactNode\n}\n\nfunction MyColorPicker({label, children, ...props}: MyColorPickerProps) {\n  return (\n    <ColorPicker {...props}>\n      <DialogTrigger>\n        <Button className=\"color-picker\">\n          <MyColorSwatch />\n          <span>{label}</span>\n        </Button>\n        <Popover placement=\"bottom start\">\n          <Dialog className=\"color-picker-dialog\">\n            {children || <>\n              <MyColorArea colorSpace=\"hsb\" xChannel=\"saturation\" yChannel=\"brightness\" />\n              <MyColorSlider colorSpace=\"hsb\" channel=\"hue\" />\n              <MyColorField label=\"Hex\" />\n            </>}\n          </Dialog>\n        </Popover>\n      </DialogTrigger>\n    </ColorPicker>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Calendar Cell Component in React Aria\nDESCRIPTION: Demonstrates how to create a wrapper component for CalendarCell to customize props and styling\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Calendar.mdx#2025-04-23_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MyCalendarCell(props) {\n  return <CalendarCell {...props} className=\"my-item\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Controlled ColorArea Implementation\nDESCRIPTION: Example of a controlled ColorArea component where the color value is managed by React state. This demonstrates how to parse colors and manage the component's value externally.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorArea.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseColor} from 'react-aria-components';\n\nfunction Example() {\n  let [value, setValue] = React.useState(parseColor('hsl(0, 100%, 50%)'));\n  return (\n    <>\n      <MyColorArea\n        value={value}\n        onChange={setValue}\n        xChannel=\"saturation\"\n        yChannel=\"lightness\" />\n      <p>Value: {value.toString('hex')}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Min Value Validation in DateRangePicker\nDESCRIPTION: Example showing how to set a minimum date value in a DateRangePicker, ensuring users can only select dates after the current day. Uses today() function from @internationalized/date library.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DateRangePicker.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport {today} from '@internationalized/date';\n\n<Form>\n  <MyDateRangePicker\n    label=\"Trip dates\"\n    minValue={today(getLocalTimeZone())}\n    defaultValue={{\n      start: parseDate('2022-02-03'),\n      end: parseDate('2022-05-03')\n    }} />\n  <Button type=\"submit\">Submit</Button>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable TimeField Wrapper Component\nDESCRIPTION: This example shows how to create a reusable TimeField component with custom props for label, description, and error message handling.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/TimeField.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {TimeFieldProps, TimeValue, ValidationResult} from 'react-aria-components';\nimport {Text, FieldError} from 'react-aria-components';\n\ninterface MyTimeFieldProps<T extends TimeValue> extends TimeFieldProps<T> {\n  label?: string,\n  description?: string,\n  errorMessage?: string | ((validation: ValidationResult) => string)\n}\n\nfunction MyTimeField<T extends TimeValue>({label, description, errorMessage, ...props}: MyTimeFieldProps<T>) {\n  return (\n    <TimeField {...props}>\n      <Label>{label}</Label>\n      <DateInput>\n        {segment => <DateSegment segment={segment} />}\n      </DateInput>\n      {description && <Text slot=\"description\">{description}</Text>}\n      <FieldError>{errorMessage}</FieldError>\n    </TimeField>\n  );\n}\n\n<MyTimeField label=\"Event time\" />\n```\n\n----------------------------------------\n\nTITLE: DropZone with FileTrigger Integration for File Selection\nDESCRIPTION: Integration of FileTrigger with DropZone to allow users to either drag and drop files or select them through a dialog. It includes handling of the file selection event and displaying filenames.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DropZone.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {FileTrigger, Button} from 'react-aria-components';\nimport type {FileDropItem} from 'react-aria'\n\nfunction Example() {\n  let [files, setFiles] = React.useState(null);\n\n  return(\n    <DropZone\n      onDrop={(e) => {\n        let files = e.items.filter((file) => file.kind === 'file') as FileDropItem[];\n        let filenames = files.map((file) => file.name);\n        setFiles(filenames.join(', '));\n      }}>\n      <FileTrigger\n        allowsMultiple\n        onSelect={(e) => {\n          let files = Array.from(e);\n          let filenames = files.map((file) => file.name);\n          setFiles(filenames.join(', '));\n        }}>\n        <Button>Select files</Button>\n      </FileTrigger>\n      <Text slot=\"label\" style={{display: 'block'}}>\n        {files || 'Drop files here'}\n      </Text>\n    </DropZone>\n  );\n```\n\n----------------------------------------\n\nTITLE: React Aria Table with Replace Selection Behavior\nDESCRIPTION: Example of a table using replace selection behavior where clicking replaces the current selection instead of toggling it.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Table.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<PokemonTable selectionMode=\"multiple\" selectionBehavior=\"replace\" />\n```\n\n----------------------------------------\n\nTITLE: Accessing State with ColorSliderStateContext\nDESCRIPTION: This example shows creating a ColorNumberField component that accesses the ColorSlider's state via context. It allows direct numerical input for a color channel value, syncing with the slider through the shared state.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorSlider.mdx#2025-04-23_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ColorSliderStateContext, LabelContext, NumberField, Input, useSlottedContext} from 'react-aria-components';\n\nfunction ColorNumberField({channel}) {\n  let state = React.useContext(ColorSliderStateContext)!;\n  let labelProps = useSlottedContext(LabelContext)!;\n  return (\n    <NumberField\n      aria-labelledby={labelProps.id}\n      value={state.value.getChannelValue(channel)}\n      minValue={state.value.getChannelRange(channel).minValue}\n      maxValue={state.value.getChannelRange(channel).maxValue}\n      onChange={v => state.setValue(state.value.withChannelValue(channel, v))}\n      formatOptions={state.value.getChannelFormatOptions(channel)}>\n      <Input />\n    </NumberField>\n  );\n}\n\n<ColorSlider channel=\"hue\" defaultValue=\"hsl(0, 100%, 50%)\">\n  <Label />\n  <ColorNumberField channel=\"hue\" />\n  <SliderTrack>\n    <ColorThumb />\n  </SliderTrack>\n</ColorSlider>\n```\n\n----------------------------------------\n\nTITLE: Color Channel Editing Implementation\nDESCRIPTION: Implementation showing how to edit individual color channels using multiple ColorField components.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorField.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [color, setColor] = React.useState(parseColor('#7f007f'));\n  return (\n    <>\n      <div style={{display: 'flex', gap: 8}}>\n        <MyColorField label=\"Hue\" value={color} onChange={setColor} colorSpace=\"hsl\" channel=\"hue\" />\n        <MyColorField label=\"Saturation\" value={color} onChange={setColor} colorSpace=\"hsl\" channel=\"saturation\" />\n        <MyColorField label=\"Lightness\" value={color} onChange={setColor} colorSpace=\"hsl\" channel=\"lightness\" />\n      </div>\n      <p>Current color value: {color?.toString('hex')}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Label Component for RadioGroup in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a custom label component that's compatible with React Aria Components' RadioGroup. It uses the useContextProps hook to merge local props and ref with those provided via context.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/RadioGroup.mdx#2025-04-23_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {LabelProps} from 'react-aria-components';\nimport {LabelContext, useContextProps} from 'react-aria-components';\n\nconst MyCustomLabel = React.forwardRef((props: LabelProps, ref: React.ForwardedRef<HTMLLabelElement>) => {\n  // Merge the local props and ref with the ones provided via context.\n  [props, ref] = useContextProps(props, ref, LabelContext);\n\n  // ... your existing Label component\n  return <label {...props} ref={ref} />;\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled and Uncontrolled Autocomplete in React\nDESCRIPTION: This example demonstrates how to use the Autocomplete component with both controlled and uncontrolled input values. It shows the usage of defaultInputValue for uncontrolled state and inputValue with onInputChange for controlled state.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Autocomplete.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let options = [\n    {id: 1, name: 'Adobe Photoshop'},\n    {id: 2, name: 'Adobe XD'},\n    {id: 3, name: 'Adobe InDesign'},\n    {id: 4, name: 'Adobe AfterEffects'},\n    {id: 5, name: 'Adobe Illustrator'},\n    {id: 6, name: 'Adobe Lightroom'},\n    {id: 7, name: 'Adobe Premiere Pro'},\n    {id: 8, name: 'Adobe Fresco'},\n    {id: 9, name: 'Adobe Dreamweaver'}\n  ];\n  let [value, setValue] = React.useState('Adobe XD');\n\n  return (\n    <div style={{display: 'flex', gap: 16, flexWrap: 'wrap'}}>\n      <MyAutocomplete\n        label=\"Adobe products (Uncontrolled)\"\n        items={options}\n        defaultInputValue=\"Adobe XD\">\n        {item => <MenuItem>{item.name}</MenuItem>}\n      </MyAutocomplete>\n\n      <MyAutocomplete\n        label=\"Adobe products (Controlled)\"\n        items={options}\n        inputValue={value}\n        onInputChange={setValue}>\n        {item => <MenuItem>{item.name}</MenuItem>}\n      </MyAutocomplete>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Controlled Modal State Implementation\nDESCRIPTION: Shows how to implement a controlled modal state using React useState hook.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Modal.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [isOpen, setOpen] = React.useState(false);\n\n  return (\n    <>\n      <Button onPress={() => setOpen(true)}>Open dialog</Button>\n      <Modal isDismissable isOpen={isOpen} onOpenChange={setOpen}>\n        <Dialog>\n          <Heading slot=\"title\">Notice</Heading>\n          <p>Click outside to close this dialog.</p>\n        </Dialog>\n      </Modal>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sections in React Aria Select with Static Items\nDESCRIPTION: This example shows how to create sections within a Select component using ListBoxSection and Header components with static items.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Select.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ListBoxSection, Header} from 'react-aria-components';\n\n<MySelect label=\"Preferred fruit or vegetable\">\n  <ListBoxSection>\n    <Header>Fruit</Header>\n    <ListBoxItem id=\"Apple\">Apple</ListBoxItem>\n    <ListBoxItem id=\"Banana\">Banana</ListBoxItem>\n    <ListBoxItem id=\"Orange\">Orange</ListBoxItem>\n    <ListBoxItem id=\"Honeydew\">Honeydew</ListBoxItem>\n    <ListBoxItem id=\"Grapes\">Grapes</ListBoxItem>\n    <ListBoxItem id=\"Watermelon\">Watermelon</ListBoxItem>\n    <ListBoxItem id=\"Cantaloupe\">Cantaloupe</ListBoxItem>\n    <ListBoxItem id=\"Pear\">Pear</ListBoxItem>\n  </ListBoxSection>\n  <ListBoxSection>\n    <Header>Vegetable</Header>\n    <ListBoxItem id=\"Cabbage\">Cabbage</ListBoxItem>\n    <ListBoxItem id=\"Broccoli\">Broccoli</ListBoxItem>\n    <ListBoxItem id=\"Carrots\">Carrots</ListBoxItem>\n    <ListBoxItem id=\"Lettuce\">Lettuce</ListBoxItem>\n    <ListBoxItem id=\"Spinach\">Spinach</ListBoxItem>\n    <ListBoxItem id=\"Bok Choy\">Bok Choy</ListBoxItem>\n    <ListBoxItem id=\"Cauliflower\">Cauliflower</ListBoxItem>\n    <ListBoxItem id=\"Potatoes\">Potatoes</ListBoxItem>\n  </ListBoxSection>\n</MySelect>\n```\n\n----------------------------------------\n\nTITLE: Integrating DateRangePicker with HTML Forms in React (TSX)\nDESCRIPTION: Demonstrates how to integrate `DateRangePicker` with standard HTML forms by providing the `startName` and `endName` props. These props specify the names used when submitting the start and end date values, which will be formatted as ISO 8601 strings based on the component's granularity.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DateRangePicker.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n<MyDateRangePicker label=\"Trip dates\" startName=\"startDate\" endName=\"endDate\" />\n```\n```\n\n----------------------------------------\n\nTITLE: Pending Button with Progress Indicator\nDESCRIPTION: A Button implementation with a pending state that shows a progress indicator while an action is in progress.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Button.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useState} from 'react';\n\nfunction PendingButton(props) {\n  let [isPending, setPending] = useState(false);\n\n  let handlePress = (e) => {\n    setPending(true);\n    setTimeout(() => {\n      setPending(false);\n    }, 5000);\n  };\n\n  return (\n    <Button\n      {...props}\n      isPending={isPending}\n      onPress={handlePress}>\n        {({isPending}) => (\n          <>\n            {!isPending && <span>Save</span>}\n            {isPending && (\n              // See below\n              <MyProgressCircle aria-label=\"Saving...\" isIndeterminate />\n            )}\n          </>\n        )}\n    </Button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Reusable Checkbox Component with Conditional Rendering\nDESCRIPTION: This example creates a reusable MyCheckbox component that wraps the Checkbox from React Aria Components. It demonstrates conditional rendering of the indicator based on the indeterminate state.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Checkbox.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {CheckboxProps} from 'react-aria-components';\n\nexport function MyCheckbox({children, ...props}: CheckboxProps) {\n  return (\n    <Checkbox {...props}>\n      {({isIndeterminate}) => <>\n        <div className=\"checkbox\">\n          <svg viewBox=\"0 0 18 18\" aria-hidden=\"true\">\n            {isIndeterminate\n              ? <rect x={1} y={7.5} width={15} height={3} />\n              : <polyline points=\"1 9 7 14 15 4\" />\n            }\n          </svg>\n        </div>\n        {children}\n      </>}\n    </Checkbox>\n  );\n}\n\n<MyCheckbox>Unsubscribe</MyCheckbox>\n```\n\n----------------------------------------\n\nTITLE: Controlled ColorField Implementation\nDESCRIPTION: Example of a controlled ColorField component using React state management.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorField.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseColor} from 'react-aria-components';\n\nfunction Example() {\n  let [color, setColor] = React.useState(parseColor('#7f007f'));\n  return (\n    <>\n      <MyColorField label=\"Color\" value={color} onChange={setColor} />\n      <p>Current color value: {color?.toString('hex')}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic FileTrigger Implementation in React\nDESCRIPTION: Shows basic usage of FileTrigger component with a Button child and file selection handling\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/FileTrigger.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {FileTrigger, Button} from 'react-aria-components';\n\nfunction Example(){\n  let [file, setFile] = React.useState(null);\n\n  return (\n    <>\n      <FileTrigger\n        onSelect={(e) => {\n          let files = Array.from(e);\n          let filenames = files.map((file) => file.name);\n          setFile(filenames);\n        }}>\n        <Button>Select a file</Button>\n      </FileTrigger>\n      {file && file}\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Controlled ColorWheel Implementation\nDESCRIPTION: Example of a controlled ColorWheel component with state management\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorWheel.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseColor} from 'react-aria-components';\n\nfunction Example() {\n  let [color, setColor] = React.useState(parseColor('hsl(0, 100%, 50%)'));\n  return (\n    <>\n      <MyColorWheel value={color} onChange={setColor} />\n      <p>Current color value: {color.toString('hsl')}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Synchronizing ColorSwatchPicker and ColorField with Context Provider (TypeScript/TSX)\nDESCRIPTION: Shows advanced usage of Context API in TypeScript/React for synchronizing the state of ColorSwatchPicker and ColorField. It imports ColorSwatchPickerContext and creates a ColorSelector component that manages color value and passes it, with onChange handler, to children via context. The consumer code demonstrates using custom swatch picker and picker item components inside the context provider. Required dependencies are React, React Aria Components including ColorSwatchPickerContext, and ColorField (MyColorField). Inputs are the selected color and a setter; outputs are the rendered color field and synchronized picker. Limitations: requires all components and utilities (e.g., parseColor, MyColorSwatchPicker) to be available.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorSwatchPicker.mdx#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n```tsx example\\nimport {ColorSwatchPickerContext} from 'react-aria-components';\\nimport {MyColorField} from './ColorField';\\n\\nfunction ColorSelector({children}) {\\n  let [value, setValue] = React.useState(parseColor('#A00'));\\n  return (\\n    <div style={{display: 'flex', flexDirection: 'column', gap: 8}}>\\n      <MyColorField label=\\\"Color\\\" value={value} onChange={setValue} />\\n      {/*- begin highlight -*/}\\n      <ColorSwatchPickerContext.Provider value={{value, onChange: setValue}}>\\n        {children}\\n      </ColorSwatchPickerContext.Provider>\\n      {/*- end highlight -*/}\\n    </div>\\n  );\\n}\\n\\n<ColorSelector>\\n  <MyColorSwatchPicker>\\n    <MyColorSwatchPickerItem color=\\\"#A00\\\" />\\n    <MyColorSwatchPickerItem color=\\\"#f80\\\" />\\n    <MyColorSwatchPickerItem color=\\\"#080\\\" />\\n  </MyColorSwatchPicker>\\n</ColorSelector>\\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Directory Drops in React Aria Components\nDESCRIPTION: Demonstrates how to handle directory drops in a React Aria Components Table. The example uses DIRECTORY_DRAG_TYPE to limit accepted items to directories and processes entries recursively using the getEntries async iterable.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Table.mdx#2025-04-23_snippet_37\n\nLANGUAGE: tsx\nCODE:\n```\nimport File from '@spectrum-icons/workflow/FileTxt';\nimport Folder from '@spectrum-icons/workflow/Folder';\n///- begin highlight -///\nimport {DIRECTORY_DRAG_TYPE, isDirectoryDropItem} from 'react-aria-components';\n///- end highlight -///\n\ninterface DirItem {\n  name: string,\n  kind: string,\n  type: string\n}\n\nfunction Example() {\n  let [files, setFiles] = React.useState<DirItem[]>([]);\n\n  let { dragAndDropHooks } = useDragAndDrop({\n    /*- begin highlight -*/\n    acceptedDragTypes: [DIRECTORY_DRAG_TYPE],\n    async onRootDrop(e) {\n      // Read entries in directory and update state with relevant info.\n      let dir = e.items.find(isDirectoryDropItem)!;\n      let files = [];\n      for await (let entry of dir.getEntries()) {\n        files.push({\n          name: entry.name,\n          kind: entry.kind,\n          type: entry.kind === 'directory' ? 'Directory' : entry.type\n        });\n      }\n      setFiles(files);\n    }\n    /*- end highlight -*/\n  });\n\n  return (\n    <Table\n      aria-label=\"Droppable table\"\n      dragAndDropHooks={dragAndDropHooks}>\n      <TableHeader>\n        <Column>Kind</Column>\n        <Column isRowHeader>Name</Column>\n        <Column>Type</Column>\n      </TableHeader>\n      <TableBody items={files} renderEmptyState={() => 'Drop directory here'}>\n        {item => (\n          <Row id={item.name}>\n            <Cell>{item.kind === 'directory' ? <Folder /> : <File />}</Cell>\n            <Cell>{item.name}</Cell>\n            <Cell>{item.type}</Cell>\n          </Row>\n        )}\n      </TableBody>\n    </Table>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing TagGroup Selection State with ListStateContext in React Aria Components (TypeScript)\nDESCRIPTION: This code shows how to use ListStateContext to access and display the number of selected tags within a TagGroup. The SelectionCount component consumes ListStateContext using React's useContext, counts the selected keys, and displays the result in a <small> tag. Dependencies: react-aria-components (ListStateContext), React. The TagGroup is configured for multiple selection; input props handled by TagGroup and SelectionCount as shown.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/TagGroup.mdx#2025-04-23_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ListStateContext} from 'react-aria-components';\\n\\nfunction SelectionCount() {\\n  /*- begin highlight -*/\\n  let state = React.useContext(ListStateContext);\\n  /*- end highlight -*/\\n  let selected = state?.selectionManager.selectedKeys.size ?? 0;\\n  return <small>{selected} tags selected.</small>;\\n}\\n\\n<TagGroup selectionMode=\\\"multiple\\\">\\n  <Label>Tags</Label>\\n  <TagList>\\n    <Tag>News</Tag>\\n    <Tag>Travel</Tag>\\n    <Tag>Gaming</Tag>\\n    <Tag>Shopping</Tag>\\n  </TagList>\\n  <SelectionCount />\\n</TagGroup>\n```\n\n----------------------------------------\n\nTITLE: Handling Events in ComboBox with Selection and Input Change\nDESCRIPTION: Implements event handling for ComboBox with onSelectionChange and onInputChange props to update React state when selection changes or when the input value is modified.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ComboBox.mdx#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let options = [\n    {id: 1, name: 'Aerospace'},\n    {id: 2, name: 'Mechanical'},\n    {id: 3, name: 'Civil'},\n    {id: 4, name: 'Biomedical'},\n    {id: 5, name: 'Nuclear'},\n    {id: 6, name: 'Industrial'},\n    {id: 7, name: 'Chemical'},\n    {id: 8, name: 'Agricultural'},\n    {id: 9, name: 'Electrical'}\n  ];\n\n  let [value, setValue] = React.useState('');\n  let [majorId, setMajorId] = React.useState('');\n\n  let onSelectionChange = (id) => {\n    setMajorId(id);\n  };\n\n  let onInputChange = (value) => {\n    setValue(value)\n  };\n\n  return (\n    <>\n      <p>Current selected major id: {majorId}</p>\n      <p>Current input text: {value}</p>\n      <MyComboBox\n        label=\"Pick a engineering major\"\n        defaultItems={options}\n        selectedKey={majorId}\n        /*- begin highlight -*/\n        onSelectionChange={onSelectionChange}\n        onInputChange={onInputChange}\n        /*- end highlight -*/\n      >\n        {item => <ListBoxItem>{item.name}</ListBoxItem>}\n      </MyComboBox>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing TimeField with Controlled and Uncontrolled Values in React\nDESCRIPTION: This snippet demonstrates how to use the TimeField component with both controlled and uncontrolled values. It imports the Time object from @internationalized/date and uses React useState for state management.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/TimeField.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Time} from '@internationalized/date';\n\nfunction Example() {\n  let [value, setValue] = React.useState(new Time(11, 45));\n\n  return (\n    <>\n      <MyTimeField\n        label=\"Time (uncontrolled)\"\n        defaultValue={new Time(11, 45)} />\n      <MyTimeField\n        label=\"Time (controlled)\"\n        value={value}\n        onChange={setValue} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Controlled CheckboxGroup with React State\nDESCRIPTION: Example of a controlled CheckboxGroup using React state to manage selected values, with an onChange handler to update the state when selections change.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/CheckboxGroup.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [selected, setSelected] = React.useState(['soccer', 'baseball']);\n\n  return (\n    <MyCheckboxGroup label=\"Favorite sports (controlled)\" value={selected} onChange={setSelected}>\n      <MyCheckbox value=\"soccer\">Soccer</MyCheckbox>\n      <MyCheckbox value=\"baseball\">Baseball</MyCheckbox>\n      <MyCheckbox value=\"basketball\">Basketball</MyCheckbox>\n    </MyCheckboxGroup>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: ColorSwatchPicker with onChange Event Handler\nDESCRIPTION: Example of using the onChange event with ColorSwatchPicker to update the UI based on selection. The selected color value is displayed as an RGB string below the picker.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorSwatchPicker.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseColor} from 'react-aria-components';\n\nfunction Example() {\n  let [value, setValue] = React.useState(parseColor('#A00'));\n\n  return (\n    <div>\n      <MyColorSwatchPicker value={value} onChange={setValue}>\n        <MyColorSwatchPickerItem color=\"#A00\" />\n        <MyColorSwatchPickerItem color=\"#f80\" />\n        <MyColorSwatchPickerItem color=\"#080\" />\n        <MyColorSwatchPickerItem color=\"#08f\" />\n        <MyColorSwatchPickerItem color=\"#088\" />\n        <MyColorSwatchPickerItem color=\"#008\" />\n      </MyColorSwatchPicker>\n      <p>Selected color: {value.toString('rgb')}</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Allowing Custom Values in ComboBox Inputs (TypeScript)\nDESCRIPTION: Illustrates enabling custom values not found in the ComboBox option list by using the allowsCustomValue prop on MyComboBox. Includes usage of static options via ListBoxItem and demonstrates that users may freely enter text values, bypassing default behavior of restricting input to known options. Inputs: JSX options as children, allowsCustomValue flag. Outputs: ComboBox UI accepting arbitrary text, following accessibility and styling patterns inherited from the reusable component.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ComboBox.mdx#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n<MyComboBox label=\"Favorite Animal\" allowsCustomValue>\n  <ListBoxItem id=\"red panda\">Red Panda</ListBoxItem>\n  <ListBoxItem id=\"cat\">Cat</ListBoxItem>\n  <ListBoxItem id=\"dog\">Dog</ListBoxItem>\n  <ListBoxItem id=\"aardvark\">Aardvark</ListBoxItem>\n  <ListBoxItem id=\"kangaroo\">Kangaroo</ListBoxItem>\n  <ListBoxItem id=\"snake\">Snake</ListBoxItem>\n</MyComboBox>\n```\n\n----------------------------------------\n\nTITLE: Handling Text Drop Data in React Aria Tables\nDESCRIPTION: This example demonstrates how to handle text-based drop data with a custom format. It filters accepted drag types and processes the text content from the dropped items to populate the table.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Table.mdx#2025-04-23_snippet_34\n\nLANGUAGE: tsx\nCODE:\n```\nimport {isTextDropItem} from 'react-aria-components';\n\nfunction DroppableTable() {\n  let [items, setItems] = React.useState<Pokemon[]>([]);\n\n  let { dragAndDropHooks } = useDragAndDrop({\n    acceptedDragTypes: ['pokemon'],\n    async onRootDrop(e) {\n      let items = await Promise.all(\n        e.items\n          .filter(isTextDropItem)\n          .map(async item => JSON.parse(await item.getText('pokemon')))\n      );\n      setItems(items);\n    }\n  });\n\n  return (\n    <PokemonTable\n      items={items}\n      dragAndDropHooks={dragAndDropHooks}\n      renderEmptyState={() => 'Drop items here'} />\n  );\n}\n\n<div style={{display: 'flex', gap: 12, flexWrap: 'wrap'}}>\n  {/* see above */}\n  <DraggableTable />\n  <DroppableTable />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Animated Toggle Button with React Aria and Framer Motion in TypeScript\nDESCRIPTION: This code snippet defines an AnimatedToggleButton component using React Aria's useToggleButton hook and Framer Motion for animation. It demonstrates how to merge local props with context props using useContextProps, and how to animate the button based on its selected state.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ToggleButton.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {ToggleButtonProps} from 'react-aria-components';\nimport {ToggleButtonContext, useContextProps} from 'react-aria-components';\nimport {useToggleState} from 'react-stately';\nimport {useToggleButton} from 'react-aria';\nimport {motion} from 'framer-motion';\n\nconst AnimatedToggleButton = React.forwardRef((props: ToggleButtonProps, ref: React.ForwardedRef<HTMLButtonElement>) => {\n  // Merge the local props and ref with the ones provided via context.\n  ///- begin highlight -///\n  [props, ref] = useContextProps(props, ref, ButtonContext);\n  ///- end highlight -///\n\n  let state = useToggleState(props);\n  let {buttonProps} = useToggleButton(props, state, ref);\n  return (\n    <motion.button\n      {...buttonProps}\n      ref={ref}\n      animate={{\n        scale: state.isSelected ? 1.2 : 1\n      }}>\n      {props.children}\n    </motion.button>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Using CSS Keyframe Animations with React Aria Components\nDESCRIPTION: An example of implementing CSS keyframe animations for React Aria Popover components, creating a slide-in and slide-out effect using the data-entering and data-exiting states.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/styling.mdx#2025-04-23_snippet_19\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Popover[data-entering] {\n  animation: slide 300ms;\n}\n\n.react-aria-Popover[data-exiting] {\n  animation: slide 300ms reverse;\n}\n\n@keyframes slide {\n  from {\n    transform: translateY(-20px);\n    opacity: 0;\n  }\n\n  to {\n    transform: translateY(0);\n    opacity: 1;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Drop Functionality on React Aria Table Component\nDESCRIPTION: This example demonstrates how to enable dropping items onto a Table component using the onRootDrop event in the useDragAndDrop hook.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Table.mdx#2025-04-23_snippet_27\n\nLANGUAGE: tsx\nCODE:\n```\nimport {isTextDropItem} from 'react-aria-components';\n\nfunction Example() {\n  let [items, setItems] = React.useState<Pokemon[]>([]);\n\n  let { dragAndDropHooks } = useDragAndDrop({\n    async onRootDrop(e) {\n      let items = await Promise.all(\n        e.items\n          .filter(isTextDropItem)\n          .map(async item => (\n        JSON.parse(await item.getText('pokemon'))\n      )));\n      setItems(items);\n    }\n  });\n\n  return (\n    <div style={{display: 'flex', gap: 12, flexWrap: 'wrap'}}>\n      <DraggableTable />\n      <PokemonTable\n        items={items}\n        dragAndDropHooks={dragAndDropHooks}\n        renderEmptyState={() => 'Drop items here'} />\n    </div>\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Table[data-drop-target] {\n  outline: 2px solid var(--highlight-background);\n  outline-offset: -1px;\n  background: var(--highlight-overlay)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Popover Dialog in React Aria Components\nDESCRIPTION: This example shows how to implement a Dialog within a Popover component, creating an information popover triggered by a button.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Dialog.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Popover, OverlayArrow} from 'react-aria-components';\n\n<DialogTrigger>\n  <Button aria-label=\"Help\">ⓘ</Button>\n  <Popover>\n    <OverlayArrow>\n      <svg width={12} height={12} viewBox=\"0 0 12 12\"><path d=\"M0 0 L6 6 L12 0\" /></svg>\n    </OverlayArrow>\n    <Dialog>\n      <Heading slot=\"title\">Help</Heading>\n      <p>For help accessing your account, please contact support.</p>\n    </Dialog>\n  </Popover>\n</DialogTrigger>\n```\n\n----------------------------------------\n\nTITLE: Providing Modal Context for Keyboard-Triggered Opening - TypeScript\nDESCRIPTION: This advanced snippet defines a KeyboardModalTrigger component that uses ModalContext.Provider to manage the open state of a modal, triggered by keyboard shortcuts. It leverages React's useState and useEffect to listen for keydown events and open the modal when a specified key is pressed. Dependencies: ModalContext from react-aria-components, React. Props: keyboardShortcut (the key to listen for), children (the modal/content). Outputs a context-enabled provider, merging local and context props for flexible compositional patterns.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Modal.mdx#2025-04-23_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {ModalContext} from 'react-aria-components';\n\ninterface KeyboardModalTriggerProps {\n  keyboardShortcut: string,\n  children: React.ReactNode\n}\n\nfunction KeyboardModalTrigger(props: KeyboardModalTriggerProps) {\n  let [isOpen, setOpen] = React.useState(false);\n  React.useEffect(() => {\n    let onKeyDown = (e: KeyboardEvent) => {\n      if (e.key === props.keyboardShortcut) {\n        setOpen(true);\n      }\n    };\n\n    document.addEventListener('keydown', onKeyDown);\n    return () => document.removeEventListener('keydown', onKeyDown);\n  }, [props.keyboardShortcut]);\n\n  return (\n    /*- begin highlight -*/\n    <ModalContext.Provider value={{isOpen, onOpenChange: setOpen}}>\n    {/*- end highlight -*/}\n      {props.children}\n    </ModalContext.Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Drop Operation Handler\nDESCRIPTION: Shows how to implement a custom drop operation handler for specific file types (PNG images).\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ListBox.mdx#2025-04-23_snippet_39\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [items, setItems] = React.useState<ImageItem[]>([]);\n\n  let { dragAndDropHooks } = useDragAndDrop({\n    getDropOperation: () => 'copy',\n    acceptedDragTypes: ['image/png'],\n    async onRootDrop(e) {\n      // Implementation details collapsed\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Associating Description Text to DateField with Description Slot in TypeScript\nDESCRIPTION: Illustrates how to add a description to the DateField using the description slot for accessibility and user guidance. This example renders a DateField with hour granularity and attaches instructional text via the Text component with slot='description'. Useful for providing additional context about input expectations. Requires use of DateField, DateInput, DateSegment, and Text components.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DateField.mdx#2025-04-23_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\n<DateField granularity=\"hour\">\n  <Label>Appointment time</Label>\n  <DateInput>\n    {segment => <DateSegment segment={segment} />}\n  </DateInput>\n  {/*- begin highlight -*/}\n  <Text slot=\"description\">Please select a weekday between 9 AM and 5 PM.</Text>\n  {/*- end highlight -*/}\n</DateField>\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with Render Props in DropZone - React (JSX)\nDESCRIPTION: This JSX snippet demonstrates using a render prop pattern on DropZone to alter rendered output depending on whether isDropTarget is true. It requires React and the DropZone and DropHighlight components from React Aria. When active, a DropHighlight element is rendered in addition to the drop prompt. Inputs include the current drop state, and outputs are dynamically generated JSX elements. This pattern enables advanced visualization based on user interaction in a highly customizable way.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DropZone.mdx#2025-04-23_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n<DropZone>\n  {({isDropTarget}) => (\n    <>\n      {isDropTarget && <DropHighlight/>}\n      Drop item here\n    </>\n  )}\n</DropZone>\n```\n\n----------------------------------------\n\nTITLE: Basic Checkbox Implementation in React Aria Components\nDESCRIPTION: This snippet demonstrates a basic implementation of a Checkbox component using React Aria Components. It includes the checkbox structure with an SVG checkmark and label.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Checkbox.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Checkbox} from 'react-aria-components';\n\n<Checkbox>\n  <div className=\"checkbox\">\n    <svg viewBox=\"0 0 18 18\" aria-hidden=\"true\">\n      <polyline points=\"1 9 7 14 15 4\" />\n    </svg>\n  </div>\n  Unsubscribe\n</Checkbox>\n```\n\n----------------------------------------\n\nTITLE: Styling a Dialog Component with CSS\nDESCRIPTION: This CSS snippet provides basic styling for the Dialog component, including padding, max-height, and overflow handling. It also styles the heading element within the dialog.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Dialog.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Dialog {\n  outline: none;\n  padding: 30px;\n  max-height: inherit;\n  box-sizing: border-box;\n  overflow: auto;\n\n  .react-aria-Heading[slot=title] {\n    line-height: 1em;\n    margin-top: 0;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Allowed Drop Operations in React Aria Components\nDESCRIPTION: Demonstrates how to restrict drop operations to only allow copying of dragged items using the getAllowedDropOperations function. This affects the cursor displayed during drag and prevents move operations.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Table.mdx#2025-04-23_snippet_39\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  // ...\n  ///- begin collapse -///\n  let list = useListData({\n    initialItems: [\n      {id: 1, name: 'Charizard', type: 'Fire, Flying', level: '67'},\n      {id: 2, name: 'Blastoise', type: 'Water', level: '56'},\n      {id: 3, name: 'Venusaur', type: 'Grass, Poison', level: '83'},\n      {id: 4, name: 'Pikachu', type: 'Electric', level: '100'}\n    ]\n  });\n  ///- end collapse -///\n  let { dragAndDropHooks } = useDragAndDrop({\n    // ...\n    ///- begin collapse -///\n    renderDragPreview(items) {\n      return (\n        <div className=\"drag-preview\">\n          {items[0]['text/plain']}\n          <span className=\"badge\">{items.length}</span>\n        </div>\n      );\n    },\n    getItems(keys) {\n      return [...keys].map(key => {\n        let item = list.getItem(key);\n        return {\n          'text/plain': item.name,\n          'pokemon': JSON.stringify(item)\n        };\n      });\n    },\n    ///- end collapse -///\n    /*- begin highlight -*/\n    getAllowedDropOperations: () => ['copy']\n    /*- end highlight -*/\n  });\n\n  return (\n    <div style={{display: 'flex', gap: 12, flexWrap: 'wrap'}}>\n      <PokemonTable\n        items={list.items}\n        selectionMode=\"multiple\"\n        dragAndDropHooks={dragAndDropHooks} />\n      <DroppableTable />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Disclosure Component Implementation in React Aria\nDESCRIPTION: Example of implementing a basic disclosure component with a trigger button and content panel.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Disclosure.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Disclosure, Button, DisclosurePanel, Heading} from 'react-aria-components';\n\n<Disclosure>\n  <Heading>\n    <Button slot=\"trigger\">\n      <svg viewBox=\"0 0 24 24\">\n        <path d=\"m8.25 4.5 7.5 7.5-7.5 7.5\" />\n      </svg>\n      System Requirements\n    </Button>\n  </Heading>\n  <DisclosurePanel>\n    <p>Details about system requirements here.</p>\n  </DisclosurePanel>\n</Disclosure>\n```\n\n----------------------------------------\n\nTITLE: Adding a Description to NumberField using `Text` Slot in React (TSX/CSS)\nDESCRIPTION: Illustrates how to associate descriptive help text with a `NumberField` by rendering a `Text` component with the `slot=\"description\"` attribute. The accompanying CSS shows how to style this description text, targeting the `[slot=description]` attribute within the `NumberField`'s container.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/NumberField.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n<NumberField>\n  <Label>Width</Label>\n  <Group>\n    <Button slot=\"decrement\">-</Button>\n    <Input />\n    <Button slot=\"increment\">+</Button>\n  </Group>\n  {/*- begin highlight -*/}\n  <Text slot=\"description\">Enter a width in centimeters.</Text>\n  {/*- end highlight -*/}\n</NumberField>\n```\n```\n\nLANGUAGE: css\nCODE:\n```\n```css\n.react-aria-NumberField {\n  [slot=description] {\n    font-size: 12px;\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Using Render Props to Display DateSegment Placeholder Separately in JSX\nDESCRIPTION: Shows advanced usage of DateSegment by using a render prop pattern. Renders the placeholder text in a <span>, controlling visibility based on isPlaceholder, and conditionally displays segment text. Useful for precise control over rendering and layout. Requires support for function-as-children in DateSegment.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DateField.mdx#2025-04-23_snippet_25\n\nLANGUAGE: JSX\nCODE:\n```\n<DateSegment>\n  {({text, placeholder, isPlaceholder}) => (\n    <>\n      <span style={{visibility: isPlaceholder ? 'visible' : 'hidden'}}>{placeholder}</span>\n      {isPlaceholder ? '' : text}\n    </>\n  )}\n</DateSegment>\n```\n\n----------------------------------------\n\nTITLE: Multiple Selection Mode for GridList using ExampleList - TypeScript\nDESCRIPTION: Configures the ExampleList to enable multiple selection by setting selectionMode to 'multiple' and providing an array of defaultSelectedKeys. When multiple is set, checkboxes are rendered for each list item, and users can select or deselect multiple grid items simultaneously. Parameters include aria-label and defaultSelectedKeys to determine selected rows on mount. Assumes ExampleList, MyGridList, and MyItem are implemented as above.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/GridList.mdx#2025-04-23_snippet_6\n\nLANGUAGE: TSX\nCODE:\n```\n<ExampleList\\n  aria-label=\\\"List with multiple selection\\\"\\n  /*- begin highlight -*/\\n  selectionMode=\\\"multiple\\\"\\n  /*- end highlight -*/\\n  defaultSelectedKeys={[2, 4]} />\n```\n\n----------------------------------------\n\nTITLE: Initializing DatePicker with User's Local Time Zone in TSX\nDESCRIPTION: Illustrates initializing the `MyDatePicker` component by parsing an absolute UTC timestamp string and converting it to the user's local time zone. The `parseAbsoluteToLocal` function from `@internationalized/date` handles the conversion, making the DatePicker display the time relevant to the user's current location based on an absolute point in time.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DatePicker.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseAbsoluteToLocal} from '@internationalized/date';\n\n<MyDatePicker\n  label=\"Event date\"\n  defaultValue={parseAbsoluteToLocal('2021-11-07T07:45:00Z')}\n/>\n```\n\n----------------------------------------\n\nTITLE: Handling File Drop Data in React Aria Components\nDESCRIPTION: Shows how to accept and display image files dropped onto a GridList. Filters for JPEG and PNG files, creates object URLs for previewing images, and displays them in the list.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/GridList.mdx#2025-04-23_snippet_34\n\nLANGUAGE: tsx\nCODE:\n```\nimport {isFileDropItem} from 'react-aria-components';\n\ninterface ImageItem {\n  id: number,\n  url: string,\n  name: string\n}\n\nfunction Example() {\n  let [items, setItems] = React.useState<ImageItem[]>([]);\n\n  let { dragAndDropHooks } = useDragAndDrop({\n    acceptedDragTypes: ['image/jpeg', 'image/png'],\n    async onRootDrop(e) {\n      let items = await Promise.all(\n        e.items.filter(isFileDropItem).map(async item => ({\n          id: Math.random(),\n          url: URL.createObjectURL(await item.getFile()),\n          name: item.name\n        }))\n      );\n      setItems(items);\n    }\n  });\n\n  return (\n    <MyGridList aria-label=\"Droppable list\" items={items} dragAndDropHooks={dragAndDropHooks} renderEmptyState={() => \"Drop images here\"}>\n      {item => (\n        <MyItem textValue={item.name}>\n          <div className=\"image-item\">\n            <img src={item.url} />\n            <span>{item.name}</span>\n          </div>\n        </MyItem>\n      )}\n    </MyGridList>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Breadcrumbs with React Aria Components\nDESCRIPTION: Example showing dynamic breadcrumbs implementation with the Collection Components API, allowing for navigation and state management.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Breadcrumbs.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {Key} from 'react-aria-components';\n\nfunction Example() {\n  let [breadcrumbs, setBreadcrumbs] = React.useState([\n    {id: 1, label: 'Home'},\n    {id: 2, label: 'Trendy'},\n    {id: 3, label: 'March 2022 Assets'}\n  ]);\n\n  let navigate = (id: Key) => {\n    let i = breadcrumbs.findIndex(item => item.id === id);\n    setBreadcrumbs(breadcrumbs.slice(0, i + 1));\n  };\n\n  return (\n    <Breadcrumbs items={breadcrumbs} onAction={navigate}>\n      {item => <Breadcrumb><Link>{item.label}</Link></Breadcrumb>}\n    </Breadcrumbs>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Structure of ColorSlider Component\nDESCRIPTION: Shows the basic component structure of a ColorSlider and its related subcomponents for building a complete color slider interface.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorSlider.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ColorSlider, ColorThumb, Label, SliderOutput, SliderTrack} from 'react-aria-components';\n\n<ColorSlider>\n  <Label />\n  <SliderOutput />\n  <SliderTrack>\n    <ColorThumb />\n  </SliderTrack>\n</ColorSlider>\n```\n\n----------------------------------------\n\nTITLE: Styling Checkbox Component with CSS\nDESCRIPTION: This CSS snippet provides styles for the Checkbox component, including various states like selected, pressed, focused, and indeterminate. It uses CSS custom properties for theming.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Checkbox.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n\n.react-aria-Checkbox {\n  --selected-color: var(--highlight-background);\n  --selected-color-pressed: var(--highlight-background-pressed);\n  --checkmark-color: var(--highlight-foreground);\n\n  display: flex;\n  align-items: center;\n  gap: 0.571rem;\n  font-size: 1.143rem;\n  color: var(--text-color);\n  forced-color-adjust: none;\n\n  .checkbox {\n    width: 1.143rem;\n    height: 1.143rem;\n    border: 2px solid var(--border-color);\n    border-radius: 4px;\n    transition: all 200ms;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-shrink: 0;\n  }\n\n  svg {\n    width: 1rem;\n    height: 1rem;\n    fill: none;\n    stroke: var(--checkmark-color);\n    stroke-width: 3px;\n    stroke-dasharray: 22px;\n    stroke-dashoffset: 66;\n    transition: all 200ms;\n  }\n\n  &[data-pressed] .checkbox {\n    border-color: var(--border-color-pressed);\n  }\n\n  &[data-focus-visible] .checkbox {\n    outline: 2px solid var(--focus-ring-color);\n    outline-offset: 2px;\n  }\n\n  &[data-selected],\n  &[data-indeterminate] {\n    .checkbox {\n      border-color: var(--selected-color);\n      background: var(--selected-color);\n    }\n\n    &[data-pressed] .checkbox {\n      border-color: var(--selected-color-pressed);\n      background: var(--selected-color-pressed);\n    }\n\n    svg {\n      stroke-dashoffset: 44;\n    }\n  }\n\n  &[data-indeterminate] {\n    & svg {\n      stroke: none;\n      fill: var(--checkmark-color);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Required Validation in React Aria RadioGroup (TSX)\nDESCRIPTION: Demonstrates how to enforce selection within a RadioGroup using the `isRequired` prop. It utilizes the `Form` component for form handling and the `FieldError` component to display validation messages when no option is selected upon submission. Imports `Form`, `FieldError`, `Button`, `RadioGroup`, `Label`, and `Radio` from `react-aria-components`.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/RadioGroup.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Form, FieldError, Button} from 'react-aria-components';\n\n<Form>\n  {/*- begin highlight -*/}\n  <RadioGroup name=\"pet\" isRequired>\n  {/*- end highlight -*/}\n    <Label>Favorite pet</Label>\n    <Radio value=\"dogs\">Dog</Radio>\n    <Radio value=\"cats\">Cat</Radio>\n    <Radio value=\"dragon\">Dragon</Radio>\n    {/*- begin highlight -*/}\n    <FieldError />\n    {/*- end highlight -*/}\n  </RadioGroup>\n  <Button type=\"submit\">Submit</Button>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Implementing DateFormat Component with DateFieldState\nDESCRIPTION: Creation of a DateFormat component that displays the expected date format using DateFieldStateContext.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DateField.mdx#2025-04-23_snippet_31\n\nLANGUAGE: tsx\nCODE:\n```\nimport {DateFieldStateContext} from 'react-aria-components';\nimport {useLocale} from 'react-aria';\n\nfunction DateFormat() {\n  let state = React.useContext(DateFieldStateContext)!;\n  let {locale} = useLocale();\n  let displayNames = new Intl.DisplayNames(locale, {type: 'dateTimeField'});\n  let format = state.segments.map(segment => segment.type === 'literal' ? segment.text : displayNames.of(segment.type)).join(' ');\n  return <small>{format}</small>;\n}\n\n<DateField defaultValue={today(getLocalTimeZone())}>\n  <Label>Date</Label>\n  <DateInput>\n    {segment => <DateSegment segment={segment} />}\n  </DateInput>\n  <DateFormat />\n</DateField>\n```\n\n----------------------------------------\n\nTITLE: Using GridLayout with Virtualizer and ListBox in TSX\nDESCRIPTION: This TSX component example demonstrates integrating `GridLayout` with `Virtualizer` and `ListBox` from `react-aria-components`. It shows how to pass `GridLayout` to the `layout` prop of `Virtualizer`, configure layout options like `minItemSize` and `minSpace`, and set `layout=\"grid\"` on the `ListBox` for correct behavior. The `ListBox` iterates over the `albums` data to render items.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Virtualizer.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {GridLayout, Size, Text} from 'react-aria-components';\n\nfunction Example() {\n  return (\n    <div className=\"resizable\">\n      <Virtualizer\n        /*- begin highlight -*/\n        layout={GridLayout}\n        layoutOptions={{\n          minItemSize: new Size(100, 140),\n          minSpace: new Size(8, 8)\n        }}\n        /*- end highlight -*/\n      >\n        <ListBox\n          /*- begin highlight -*/\n          layout=\"grid\"\n          /*- end highlight -*/\n          aria-label=\"Virtualized grid layout\"\n          selectionMode=\"multiple\"\n          items={albums}>\n          {item => (\n            <ListBoxItem textValue={item.title}>\n              <img src={item.image} alt=\"\" />\n              <Text slot=\"label\">{item.title}</Text>\n              <Text slot=\"description\">{item.artist}</Text>\n            </ListBoxItem>\n          )}\n        </ListBox>\n      </Virtualizer>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using ComboBox with a Dynamic Collection and Selection State (TypeScript)\nDESCRIPTION: Demonstrates usage of the reusable MyComboBox with a list of dynamic options, maintaining current selection state via React.useState. Options are provided as an array ('options'), and selected key is identified through object's 'id', which is updated by onSelectionChange. Renders each option using a render prop. Input: iterable of objects with 'id' and 'name' fields. Output: ComboBox UI, updating selected value and displaying selected id. Requires React Aria, React, and MyComboBox definition.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ComboBox.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Key} from 'react-aria-components';\n\nfunction Example() {\n  let options = [\n    {id: 1, name: 'Aerospace'},\n    {id: 2, name: 'Mechanical'},\n    {id: 3, name: 'Civil'},\n    {id: 4, name: 'Biomedical'},\n    {id: 5, name: 'Nuclear'},\n    {id: 6, name: 'Industrial'},\n    {id: 7, name: 'Chemical'},\n    {id: 8, name: 'Agricultural'},\n    {id: 9, name: 'Electrical'}\n  ];\n  let [majorId, setMajorId] = React.useState<Key | null>(null);\n\n  return (\n    <>\n      <MyComboBox defaultItems={options} onSelectionChange={setMajorId}>\n        {(item) => <ListBoxItem>{item.name}</ListBoxItem>}\n      </MyComboBox>\n      <p>Selected topic id: {majorId}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FieldGroup Component with DateField Context\nDESCRIPTION: Example demonstrating how to create a FieldGroup component that manages multiple DateFields with shared error handling using DateFieldContext.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DateField.mdx#2025-04-23_snippet_27\n\nLANGUAGE: tsx\nCODE:\n```\nimport {DateFieldContext} from 'react-aria-components';\nimport {useId} from 'react-aria';\n\ninterface FieldGroupProps {\n  title?: string,\n  children?: React.ReactNode,\n  errorMessage?: string\n}\n\nfunction FieldGroup({title, children, errorMessage}: FieldGroupProps) {\n  let errorId = useId();\n  return (\n    <fieldset>\n      <legend>{title}</legend>\n      <DateFieldContext.Provider value={{\n        isInvalid: !!errorMessage,\n        'aria-describedby': errorMessage ? errorId : undefined\n      }}>\n        {children}\n      </DateFieldContext.Provider>\n      {errorMessage && <small id={errorId} className=\"invalid\">{errorMessage}</small>}\n    </fieldset>\n  );\n}\n\n<FieldGroup title=\"Dates\" errorMessage=\"Tickets must go on sale before event.\">\n  <MyDateField label=\"Event date\" defaultValue={parseDate('2023-07-12')} />\n  <MyDateField label=\"Ticket sale date\" defaultValue={parseDate('2023-08-03')} />\n</FieldGroup>\n```\n\n----------------------------------------\n\nTITLE: Implementing ComboBox with Disabled Options in React Aria\nDESCRIPTION: Example demonstrating how to disable specific options in a ComboBox using the disabledKeys prop. The specified keys (cat and kangaroo) will be non-selectable and visually distinguished from enabled options.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ComboBox.mdx#2025-04-23_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\n<MyComboBox label=\"Favorite Animal\" disabledKeys={['cat', 'kangaroo']}>\n  <ListBoxItem id=\"red panda\">Red Panda</ListBoxItem>\n  <ListBoxItem id=\"cat\">Cat</ListBoxItem>\n  <ListBoxItem id=\"dog\">Dog</ListBoxItem>\n  <ListBoxItem id=\"aardvark\">Aardvark</ListBoxItem>\n  <ListBoxItem id=\"kangaroo\">Kangaroo</ListBoxItem>\n  <ListBoxItem id=\"snake\">Snake</ListBoxItem>\n</MyComboBox>\n```\n\n----------------------------------------\n\nTITLE: Displaying Validation Errors in React Aria DateField using FieldError in TypeScript\nDESCRIPTION: Demonstrates form construction with a required DateField and FieldError component to provide real-time validation feedback. Relies on react-aria-components for Form, FieldError, and Button. The FieldError element will show browser or custom error messages if validation fails. The 'date' input is required; submission triggers error display if the input is invalid.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DateField.mdx#2025-04-23_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {Form, FieldError, Button} from 'react-aria-components';\n\n<Form>\n  {/*- begin highlight -*/}\n  <DateField name=\"date\" isRequired>\n  {/*- end highlight -*/}\n    <Label>Appointment date</Label>\n    <DateInput>\n      {segment => <DateSegment segment={segment} />}\n    </DateInput>\n    {/*- begin highlight -*/}\n    <FieldError />\n    {/*- end highlight -*/}\n  </DateField>\n  <Button type=\"submit\">Submit</Button>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Implementing International Calendar Support for DatePicker in React Aria Components (TSX)\nDESCRIPTION: Shows how to render a `DatePicker` using a non-Gregorian calendar (Indian) and a specific language (Hindi) by wrapping the component in an `I18nProvider` from `@react-aria/i18n`. The `locale` prop is set with a Unicode calendar extension (`hi-IN-u-ca-indian`). The selected `DateValue` state is managed using `React.useState` and displayed as a string.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DatePicker.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\nimport {I18nProvider} from '@react-aria/i18n';\n\nfunction Example() {\n  let [date, setDate] = React.useState<DateValue | null>(null);\n  return (\n    /*- begin highlight -*/\n    <I18nProvider locale=\"hi-IN-u-ca-indian\">\n    {/*- end highlight -*/}\n      <MyDatePicker label=\"Date\" value={date} onChange={setDate} />\n      <p>Selected date: {date?.toString()}</p>\n    </I18nProvider>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Using Slots for Styling in React Aria NumberField Component\nDESCRIPTION: Demonstrates how to use the slot prop to target specific child components, like increment and decrement buttons in a NumberField.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/styling.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<NumberField>\n  <Label>Width</Label>\n  <Group>\n    <Input />\n    <Button slot=\"increment\">+</Button>\n    <Button slot=\"decrement\">-</Button>\n  </Group>\n</NumberField>\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Trigger for Dialog in React Aria Components\nDESCRIPTION: This example shows how to use a custom trigger element with DialogTrigger by wrapping it with the Pressable component. It demonstrates support for third-party components and other DOM elements.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Dialog.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Pressable} from 'react-aria-components';\n\n<DialogTrigger>\n  <Pressable>\n    <span role=\"button\">Custom trigger</span>\n  </Pressable>\n  <Modal>\n    <Dialog>\n      <Heading slot=\"title\">Dialog</Heading>\n      <p>This dialog was triggered by a custom button.</p>\n      <Button slot=\"close\">Close</Button>\n    </Dialog>\n  </Modal>\n</DialogTrigger>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Controlled NumberField in React (TSX)\nDESCRIPTION: Demonstrates how to create a controlled `NumberField` component by managing its state using `React.useState`. The `value` prop binds the component to the state variable (`value`), and the `onChange` prop updates the state via `setValue` whenever the numeric value changes (on blur or step change). A `div` displays the current state value.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/NumberField.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\nfunction Example() {\n  let [value, setValue] = React.useState(6);\n\n  return (\n    <>\n      <MyNumberField\n        label=\"Controlled value\"\n        value={value}\n        onChange={setValue} />\n      <div>Current value prop: {value}</div>\n    </>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable Popover Component in React Aria Components\nDESCRIPTION: Example of creating a reusable MyPopover component that wraps Popover, OverlayArrow, and Dialog together. This pattern enables consistent styling and behavior across an application.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Popover.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {PopoverProps} from 'react-aria-components';\n\ninterface MyPopoverProps extends Omit<PopoverProps, 'children'> {\n  children: React.ReactNode\n}\n\nfunction MyPopover({children, ...props}: MyPopoverProps) {\n  return (\n    <Popover {...props}>\n      <OverlayArrow>\n        <svg width={12} height={12} viewBox=\"0 0 12 12\"><path d=\"M0 0 L6 6 L12 0\" /></svg>\n      </OverlayArrow>\n      <Dialog>\n        {children}\n      </Dialog>\n    </Popover>\n  );\n}\n\n<DialogTrigger>\n  <Button aria-label=\"Help\">ⓘ</Button>\n  <MyPopover>\n    <Heading slot=\"title\">Help</Heading>\n    <p>For help accessing your account, please contact support.</p>\n  </MyPopover>\n</DialogTrigger>\n```\n\n----------------------------------------\n\nTITLE: Creating a Disabled ComboBox in React Aria Components\nDESCRIPTION: Example showing how to create a fully disabled ComboBox using the isDisabled prop. When disabled, both the input field and dropdown button will be inoperable and styled according to the disabled state.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ComboBox.mdx#2025-04-23_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\n<MyComboBox label=\"Favorite Animal\" isDisabled>\n  <ListBoxItem id=\"red panda\">Panda</ListBoxItem>\n  <ListBoxItem id=\"cat\">Cat</ListBoxItem>\n  <ListBoxItem id=\"dog\">Dog</ListBoxItem>\n</MyComboBox>\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable MyDisclosure Component with Default Expanded State\nDESCRIPTION: Example showing how to create a reusable Disclosure component with predefined structure, and how to use it within a DisclosureGroup with default expanded sections.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DisclosureGroup.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {DisclosureProps} from 'react-aria-components';\n\ninterface MyDisclosureProps extends Omit<DisclosureProps, 'children'> {\n  title?: string,\n  children?: React.ReactNode\n}\n\nfunction MyDisclosure({title, children, ...props}: MyDisclosureProps) {\n  return (\n    <Disclosure {...props}>\n      <Heading>\n        <Button slot=\"trigger\">\n          <svg viewBox=\"0 0 24 24\">\n            <path d=\"m8.25 4.5 7.5 7.5-7.5 7.5\" />\n          </svg>\n          {title}\n        </Button>\n      </Heading>\n      <DisclosurePanel>\n        <p>{children}</p>\n      </DisclosurePanel>\n    </Disclosure>\n  )\n}\n\n<DisclosureGroup defaultExpandedKeys={[\"system\"]}>\n  <MyDisclosure id=\"system\" title=\"System Requirements\" >\n    Details about system requirements here\n  </MyDisclosure>\n  <MyDisclosure id=\"personal\" title=\"Personal Information\" >\n    Details about personal information here\n  </MyDisclosure>\n</DisclosureGroup>\n```\n\n----------------------------------------\n\nTITLE: Using 24-Hour Time in DateField by Setting Hour Cycle in TypeScript\nDESCRIPTION: Forces DateField to display time in 24-hour format regardless of user locale by specifying hourCycle={24}. This aids users who require consistent time-format presentation, e.g., for internationalization needs. Uses MyDateField with minute granularity and appropriate props; does not require additional logic.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DateField.mdx#2025-04-23_snippet_20\n\nLANGUAGE: TypeScript\nCODE:\n```\n<MyDateField\n  label=\"Appointment time\"\n  granularity=\"minute\"\n  hourCycle={24} />\n```\n\n----------------------------------------\n\nTITLE: Reusable Calendar Component with Error Handling\nDESCRIPTION: A reusable Calendar component wrapper that encapsulates the DOM structure and styling, and adds support for validation error messages through the errorMessage prop.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Calendar.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {CalendarProps, DateValue} from 'react-aria-components';\nimport {Text} from 'react-aria-components';\n\ninterface MyCalendarProps<T extends DateValue> extends CalendarProps<T> {\n  errorMessage?: string\n}\n\nfunction MyCalendar<T extends DateValue>({errorMessage, ...props}: MyCalendarProps<T>) {\n  return (\n    <Calendar {...props}>\n      <header>\n        <Button slot=\"previous\">◀</Button>\n        <Heading />\n        <Button slot=\"next\">▶</Button>\n      </header>\n      <CalendarGrid>\n        {date => <CalendarCell date={date} />}\n      </CalendarGrid>\n      {errorMessage && <Text slot=\"errorMessage\">{errorMessage}</Text>}\n    </Calendar>\n  );\n}\n\n<MyCalendar aria-label=\"Event date\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Selection Behavior in React Aria ListBox\nDESCRIPTION: This example demonstrates how to configure the selection behavior of a ListBox to 'replace' mode, which changes how selection works with mouse and keyboard interactions.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ListBox.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<ListBox\n  aria-label=\"Sandwich contents\"\n  selectionMode=\"multiple\"\n  selectionBehavior=\"replace\"\n>\n  <ListBoxItem id=\"lettuce\">Lettuce</ListBoxItem>\n  <ListBoxItem id=\"tomato\">Tomato</ListBoxItem>\n  <ListBoxItem id=\"cheese\">Cheese</ListBoxItem>\n  <ListBoxItem id=\"tuna\">Tuna Salad</ListBoxItem>\n  <ListBoxItem id=\"egg\">Egg Salad</ListBoxItem>\n  <ListBoxItem id=\"ham\">Ham</ListBoxItem>\n</ListBox>\n```\n\n----------------------------------------\n\nTITLE: Reusable Disclosure Component Wrapper\nDESCRIPTION: Implementation of a reusable disclosure component that wraps the basic functionality with custom props and styling.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Disclosure.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\ninterface MyDisclosureProps extends Omit<DisclosureProps, 'children'> {\n  title?: string,\n  children?: React.ReactNode\n}\n\nfunction MyDisclosure({title, children, ...props}: MyDisclosureProps) {\n  return (\n    <Disclosure {...props}>\n      <Heading>\n        <Button slot=\"trigger\">\n          <svg viewBox=\"0 0 24 24\">\n            <path d=\"m8.25 4.5 7.5 7.5-7.5 7.5\" />\n          </svg>\n          {title}\n        </Button>\n      </Heading>\n      <DisclosurePanel>\n        <p>{children}</p>\n      </DisclosurePanel>\n    </Disclosure>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Styling in React Aria Components\nDESCRIPTION: This example demonstrates how to apply dynamic styling to a GridListItem based on its selection state using a function for the className prop.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/GridList.mdx#2025-04-23_snippet_44\n\nLANGUAGE: jsx\nCODE:\n```\n<GridListItem className={({isSelected}) => isSelected ? 'bg-blue-400' : 'bg-gray-100'}>\n  Item\n</GridListItem>\n```\n\n----------------------------------------\n\nTITLE: Configuring DatePicker Granularity in React Aria Components (TSX)\nDESCRIPTION: Demonstrates using the `granularity` prop on the `MyDatePicker` component to control the level of detail displayed. It shows two synchronized pickers, one with 'second' granularity (date and time) and another with 'day' granularity (date only), both linked to the same state variable. Requires `React.useState` for state management and `parseAbsoluteToLocal` for initial date parsing.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DatePicker.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\nfunction Example() {\n  let [date, setDate] = React.useState(parseAbsoluteToLocal('2021-04-07T18:45:22Z'));\n\n  return (\n    <>\n      <MyDatePicker\n        label=\"Date and time\"\n        /*- begin highlight -*/\n        granularity=\"second\"\n        /*- end highlight -*/\n        value={date}\n        onChange={setDate} />\n      <MyDatePicker\n        label=\"Date\"\n        /*- begin highlight -*/\n        granularity=\"day\"\n        /*- end highlight -*/\n        value={date}\n        onChange={setDate} />\n    </>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Using Tailwind CSS with Render Props in React Aria Components\nDESCRIPTION: Demonstrates using render props with Tailwind CSS to apply multiple utility classes based on component states.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/styling.mdx#2025-04-23_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<Radio\n  className={({isFocusVisible, isSelected}) => `\n    flex rounded-lg p-4\n    ${isFocusVisible ? 'ring-2 ring-blue-600 ring-offset-1' : ''}\n    ${isSelected ? 'bg-blue-600 border-white/30 text-white' : ''}\n  `}>\n  {/* ... */}\n</Radio>\n```\n\n----------------------------------------\n\nTITLE: Configuring TableLayout with Virtualizer for React Table Component\nDESCRIPTION: This example shows how to use TableLayout with a Virtualizer to create a virtualized table. It sets layout options such as row height, heading height, padding, and gap for the table structure.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Virtualizer.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport {TableLayout, Table, TableHeader, Column, TableBody, Row, Cell} from 'react-aria-components';\nimport {MyCheckbox} from './Checkbox';\n\nlet rows = [];\nfor (let i = 0; i < 1000; i++) {\n  rows.push({id: i, foo: `Foo ${i}`, bar: `Bar ${i}`, baz: `Baz ${i}`});\n}\n\nfunction Example() {\n  return (\n    <Virtualizer\n      layout={TableLayout}\n      layoutOptions={{\n        rowHeight: 32,\n        headingHeight: 32,\n        padding: 4,\n        gap: 4\n      }}\n    >\n      <Table aria-label=\"Virtualized Table\" selectionMode=\"multiple\">\n        <TableHeader>\n          <Column width={40} minWidth={0}><MyCheckbox slot=\"selection\" /></Column>\n          <Column isRowHeader>Foo</Column>\n          <Column>Bar</Column>\n          <Column>Baz</Column>\n        </TableHeader>\n        <TableBody items={rows}>\n          {item => (\n            <Row style={{width: 'inherit', height: 'inherit'}}>\n              <Cell><MyCheckbox slot=\"selection\" /></Cell>\n              <Cell>{item.foo}</Cell>\n              <Cell>{item.bar}</Cell>\n              <Cell>{item.baz}</Cell>\n            </Row>\n          )}\n        </TableBody>\n      </Table>\n    </Virtualizer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering in Select Components\nDESCRIPTION: Shows how to use render props to conditionally render elements based on component states.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Select.mdx#2025-04-23_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\n<ListBoxItem>\n  {({isSelected}) => (\n    <>\n      {isSelected && <CheckmarkIcon />}\n      Item\n    </>\n  )}\n</ListBoxItem>\n```\n\n----------------------------------------\n\nTITLE: Accessing TimeField State with TimeFieldStateContext in React\nDESCRIPTION: This example demonstrates how to create a TimeZoneName component that uses TimeFieldStateContext to access the TimeField's state. It extracts and displays the full time zone name when a time zone is present in the value.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/TimeField.mdx#2025-04-23_snippet_26\n\nLANGUAGE: tsx\nCODE:\n```\nimport {TimeFieldStateContext} from 'react-aria-components';\nimport {useDateFormatter} from 'react-aria';\n\nfunction TimeZoneName() {\n  /*- begin highlight -*/\n  let state = React.useContext(TimeFieldStateContext)!;\n  /*- end highlight -*/\n  if ('timeZone' in state.value) {\n    let formatter = useDateFormatter({timeZoneName: 'long', timeZone: state.value.timeZone});\n    let timeZone = formatter\n      .formatToParts(state.value.toDate())\n      .find(p => p.type === 'timeZoneName').value;\n    return <small>{timeZone}</small>;\n  }\n  return null;\n}\n\n<TimeField value={parseAbsoluteToLocal('2021-04-07T18:45:22Z')}>\n  <Label>Time</Label>\n  <DateInput>\n    {segment => <DateSegment segment={segment} />}\n  </DateInput>\n  {/*- begin highlight -*/}\n  <TimeZoneName />\n  {/*- end highlight -*/}\n</TimeField>\n```\n\n----------------------------------------\n\nTITLE: Handling Drop Operations in React Aria\nDESCRIPTION: Example showing how to handle different drop operations (move, copy, link) in a file service application using React Aria components.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ListBox.mdx#2025-04-23_snippet_40\n\nLANGUAGE: tsx\nCODE:\n```\nlet onItemDrop = async (e) => {\n  let data = JSON.parse(await e.items[0].getText('my-app-file'));\n  switch (e.dropOperation) {\n    case 'move':\n      MyAppFileService.move(data.filePath, props.filePath);\n      break;\n    case 'copy':\n      MyAppFileService.copy(data.filePath, props.filePath);\n      break;\n    case 'link':\n      MyAppFileService.link(data.filePath, props.filePath);\n      break;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Using Custom Label and Checkbox Components in CheckboxGroup - React Aria Components - TSX\nDESCRIPTION: Illustrates how to use a custom MyCustomLabel with a CheckboxGroup alongside custom checkbox components. All children receive props and state via CheckboxGroup context, ensuring correct composition and accessibility. The group renders a custom label and multiple custom checkboxes; the value props passed determine each checkbox's selection state. No additional dependencies beyond React and the custom components are required; this pattern is enabled by the previous merging of context.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/CheckboxGroup.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n<CheckboxGroup>\\n  {/*- begin highlight -*/}\\n  <MyCustomLabel>Favorite sports</MyCustomLabel>\\n  {/*- end highlight -*/}\\n  <MyCheckbox value=\\\"soccer\\\">Soccer</MyCheckbox>\\n  <MyCheckbox value=\\\"baseball\\\">Baseball</MyCheckbox>\\n  <MyCheckbox value=\\\"basketball\\\">Basketball</MyCheckbox>\\n</CheckboxGroup>\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled DisclosureGroup with State Management\nDESCRIPTION: Shows how to implement a controlled DisclosureGroup using React state to manage which disclosures are expanded, along with displaying the current expanded keys.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DisclosureGroup.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Key} from \"@react-types/shared\";\n\nfunction ControlledExpanded(){\n  let [expandedKeys, setExpandedKeys] = React.useState<Set<Key>>(new Set([\"system\"]));\n\n  return (\n    <>\n    <DisclosureGroup expandedKeys={expandedKeys} onExpandedChange={setExpandedKeys}>\n      <MyDisclosure id=\"system\" title=\"System Requirements\" >\n        Details about system requirements here\n      </MyDisclosure>\n      <MyDisclosure id=\"personal\" title=\"Personal Information\" >\n        Details about personal information here\n      </MyDisclosure>\n    </DisclosureGroup>\n    <div style={{ marginTop: '20px' }}>You have expanded: {expandedKeys}</div>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating ColorSwatch with ColorSlider for Interactive Color Selection\nDESCRIPTION: Example showing how to use ColorSwatch with ColorSlider to provide an interactive color selection UI with live preview.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorSwatch.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseColor, ColorSlider, SliderTrack, ColorThumb} from 'react-aria-components';\n\nfunction Example() {\n  let [color, setColor] = React.useState(parseColor('hsl(0, 100%, 50%)'));\n  return (\n    <div style={{display: 'flex', flexDirection: 'column', gap: 8}}>\n      <ColorSlider value={color} onChange={setColor} channel=\"hue\">\n        <SliderTrack>\n          <ColorThumb />\n        </SliderTrack>\n      </ColorSlider>\n      <MyColorSwatch color={color} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Customization using RadioContext in React Aria (TSX)\nDESCRIPTION: Demonstrates advanced customization by creating a `RadioDescription` component. This component uses `RadioContext.Provider` from `react-aria-components` to pass the `aria-describedby` prop down to its child `Radio` component. It uses the `useId` hook from `react-aria` to generate a unique ID for the description text, linking it correctly for accessibility.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/RadioGroup.mdx#2025-04-23_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nimport {RadioContext} from 'react-aria-components';\nimport {useId} from 'react-aria';\n\ninterface RadioDescriptionProps {\n  children?: React.ReactNode,\n  description?: string\n}\n\nfunction RadioDescription({children, description}: RadioDescriptionProps) {\n  let descriptionId = useId();\n  return (\n    <div>\n      {/*- begin highlight -*/}\n      <RadioContext.Provider value={{'aria-describedby': descriptionId}}>\n      {/*- end highlight -*/}\n        {children}\n      </RadioContext.Provider>\n      <small id={descriptionId}>{description}</small>\n    </div>\n  );\n}\n\n<MyRadioGroup label=\"Show scrollbars\" defaultValue=\"automatic\">\n  <RadioDescription description=\"Scrollbars will always be visible when using a mouse, and only while scrolling when using a trackpad.\">\n    <Radio value=\"automatic\">Automatic</Radio>\n  </RadioDescription>\n  <RadioDescription description=\"Scrollbars will appear only while you are scrolling.\">\n    <Radio value=\"scrolling\">While scrolling</Radio>\n  </RadioDescription>\n  <RadioDescription description=\"Scrollbars will always be visible.\">\n    <Radio value=\"always\">Always</Radio>\n  </RadioDescription>\n</MyRadioGroup>\n```\n\n----------------------------------------\n\nTITLE: Controlling Calendar Focus State in React Aria\nDESCRIPTION: Example demonstrating how to control the focused date in a Calendar component with reset functionality.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Calendar.mdx#2025-04-23_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport {CalendarDate} from '@internationalized/date';\n\nfunction Example() {\n  let defaultDate = new CalendarDate(2021, 7, 1);\n  let [focusedDate, setFocusedDate] = React.useState(defaultDate);\n\n  return (\n    <>\n      <button style={{marginBottom: 20}} onClick={() => setFocusedDate(defaultDate)}>Reset focused date</button>\n      <MyCalendar focusedValue={focusedDate} onFocusChange={setFocusedDate} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Toast Notifications\nDESCRIPTION: Shows how to trigger a toast notification using the queue system.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Toast.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Button\n  onPress={() => queue.add({\n    title: 'Toast complete!',\n    description: 'Great success.'\n  })}>\n  Toast\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Implementing Link Items in GridList with React Aria Components\nDESCRIPTION: Example of creating GridList items that function as links to external websites using the href prop on GridListItem components. Links can be used with different selection modes.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/GridList.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n<MyGridList aria-label=\"Links\" selectionMode=\"multiple\">\n  <MyItem href=\"https://adobe.com/\" target=\"_blank\">Adobe</MyItem>\n  <MyItem href=\"https://apple.com/\" target=\"_blank\">Apple</MyItem>\n  <MyItem href=\"https://google.com/\" target=\"_blank\">Google</MyItem>\n  <MyItem href=\"https://microsoft.com/\" target=\"_blank\">Microsoft</MyItem>\n</MyGridList>\n```\n\n----------------------------------------\n\nTITLE: Applying Accessible Labels to a Group using aria-labelledby (TSX)\nDESCRIPTION: This example demonstrates how to provide an accessible name to a `Group` component by associating it with an external label element using the `aria-labelledby` attribute. A `<span>` with `id=\"label-id\"` acts as the label, and the `Group` references this ID. This is crucial when the individual labels of the grouped elements (like the split serial number inputs here) don't provide sufficient context on their own.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Group.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<span id=\"label-id\">Serial number</span>\n<Group aria-labelledby=\"label-id\">\n  <Input size={3} aria-label=\"First 3 digits\" placeholder=\"000\" />\n  –\n  <Input size={2} aria-label=\"Middle 2 digits\" placeholder=\"00\" />\n  –\n  <Input size={4} aria-label=\"Last 4 digits\" placeholder=\"0000\" />\n</Group>\n```\n\n----------------------------------------\n\nTITLE: Controlled Switch Component with React State\nDESCRIPTION: Implementation of a controlled Switch component using React state. This example demonstrates how to use the isSelected prop with an onChange handler to manage the switch state.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Switch.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [selected, setSelected] = React.useState(false);\n\n  return (\n    <>\n      <MySwitch isSelected={selected} onChange={setSelected}>Low power mode</MySwitch>\n      <p>{selected ? 'Low' : 'High'} power mode active.</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom SliderNumberField Component in React Aria\nDESCRIPTION: This snippet demonstrates how to create a SliderNumberField component that interacts with the Slider's state. It uses SliderStateContext to access and update the slider's value, and integrates with the NumberField and Input components from react-aria-components.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Slider.mdx#2025-04-23_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport {SliderStateContext, LabelContext, NumberField, Input, useSlottedContext} from 'react-aria-components';\n\nfunction SliderNumberField() {\n  let state = React.useContext(SliderStateContext)!;\n  let labelProps = useSlottedContext(LabelContext)!;\n  return (\n    <NumberField\n      aria-labelledby={labelProps.id}\n      value={state.values[0]}\n      onChange={v => state.setThumbValue(0, v)}>\n      <Input />\n    </NumberField>\n  );\n}\n\n<Slider defaultValue={30}>\n  <Label>Opacity</Label>\n  <SliderNumberField />\n  <SliderTrack>\n    <SliderThumb />\n  </SliderTrack>\n</Slider>\n```\n\n----------------------------------------\n\nTITLE: Implementing onDragEnd Operation Handler\nDESCRIPTION: Shows how to handle drag end operations with move and copy functionality in a ListBox component.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ListBox.mdx#2025-04-23_snippet_37\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let list = useListData({\n    initialItems: [\n      {id: 1, name: 'Adobe Photoshop'},\n      {id: 2, name: 'Adobe XD'},\n      {id: 3, name: 'Adobe Dreamweaver'},\n      {id: 4, name: 'Adobe InDesign'},\n      {id: 5, name: 'Adobe Connect'}\n    ]\n  });\n\n  let { dragAndDropHooks } = useDragAndDrop({\n    onDragEnd(e) {\n      if (e.dropOperation === 'move') {\n        list.remove(...e.keys);\n      }\n    }\n  });\n\n  return (\n    <div style={{display: 'flex', gap: 12, flexWrap: 'wrap'}}>\n      <ListBox aria-label=\"Draggable list\" selectionMode=\"multiple\" items={list.items} dragAndDropHooks={dragAndDropHooks}>\n        {item => <ListBoxItem>{item.name}</ListBoxItem>}\n      </ListBox>\n      <DroppableListBox />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Assigning Classnames Based on Drag State - JSX\nDESCRIPTION: This JSX snippet demonstrates how the className prop of the ColorThumb component can accept a function that receives component states (such as isDragging). The className is dynamically computed based on the drag state, allowing the application of different CSS utility classes (like Tailwind's scale classes) for interactive styling. Requires using React Aria Components and a utility CSS framework such as Tailwind to see changes in effect.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorWheel.mdx#2025-04-23_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<ColorThumb className={({isDragging}) => isDragging ? 'scale-150' : 'scale-100'} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Drag Preview in React Aria ListBox\nDESCRIPTION: This example shows how to create a custom drag preview for a ListBox using the renderDragPreview function in the useDragAndDrop hook.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ListBox.mdx#2025-04-23_snippet_26\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useListData} from 'react-stately';\nimport {useDragAndDrop} from 'react-aria-components';\n\nfunction Example() {\n  let {dragAndDropHooks} = useDragAndDrop({\n    // ...\n    renderDragPreview(items) {\n      return (\n        <div className=\"drag-preview\">\n          {items[0]['text/plain']}\n          <span className=\"badge\">{items.length}</span>\n        </div>\n      );\n    }\n  });\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Units in NumberField using `formatOptions` in React (TSX)\nDESCRIPTION: Example of formatting a `NumberField` value with a unit of measurement via `formatOptions`. It uses `style: 'unit'` and requires specifying the `unit` (e.g., 'inch'). The `unitDisplay: 'long'` option controls the format of the displayed unit. It notes that this style might require a polyfill for Safari.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/NumberField.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n<MyNumberField\n  label=\"Package width\"\n  defaultValue={4}\n  formatOptions={{\n    style: 'unit',\n    unit: 'inch',\n    unitDisplay: 'long'\n  }} />\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing DateField with Time Zone Support in React\nDESCRIPTION: This snippet shows how to use the DateField component with time zone support. It uses the parseZonedDateTime function to create a date object with a specific time zone.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DateField.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseZonedDateTime} from '@internationalized/date';\n\n<MyDateField\n  label=\"Event date\"\n  defaultValue={parseZonedDateTime('2022-11-07T00:45[America/Los_Angeles]')} />\n```\n\n----------------------------------------\n\nTITLE: Initializing Virtualizer with ListBox in React Aria Components\nDESCRIPTION: This example demonstrates how to use the Virtualizer component with a ListBox to create a virtualized list of 5000 items. It uses the ListLayout for vertical stacking of items.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Virtualizer.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Virtualizer, ListLayout, ListBox, ListBoxItem} from 'react-aria-components';\n\nlet items = [];\nfor (let i = 0; i < 5000; i++) {\n  items.push({id: i, name: `Item ${i}`});\n}\n\nfunction Example() {\n  return (\n    <Virtualizer \n      layout={ListLayout}\n      layoutOptions={{\n        rowHeight: 32,\n        padding: 4,\n        gap: 4\n      }}>\n      <ListBox aria-label=\"Virtualized ListBox\" selectionMode=\"multiple\" items={items}>\n        {item => <ListBoxItem>{item.name}</ListBoxItem>}\n      </ListBox>\n    </Virtualizer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Custom Link Component with React Aria Breadcrumbs using Context (TSX)\nDESCRIPTION: Defines `MyCustomLink`, a custom React link component designed to be compatible with React Aria Components. It uses the `useContextProps` hook to merge props and refs received from `LinkContext` (provided by parent components like `Breadcrumbs`) with its own local props and ref. It also utilizes the `useLink` hook from `react-aria` to apply necessary accessibility attributes and event handlers.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Breadcrumbs.mdx#2025-04-23_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {LinkProps} from 'react-aria-components';\nimport {LinkContext, useContextProps} from 'react-aria-components';\n\nconst MyCustomLink = React.forwardRef((props: LinkProps, ref: React.ForwardedRef<HTMLAnchorElement>) => {\n  // Merge the local props and ref with the ones provided via context.\n  ///- begin highlight -///\n  [props, ref] = useContextProps(props, ref, LinkContext);\n  ///- end highlight -///\n\n  // ... your existing Link component\n  let {linkProps} = useLink(props, ref);\n  return <a {...linkProps} ref={ref} />;\n});\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering in React Aria Tabs\nDESCRIPTION: Shows how to use render props to conditionally render elements within a React Aria Tab based on its state.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Tabs.mdx#2025-04-23_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\n<Tab>\n  {({isSelected}) => (\n    <>\n      {isSelected && <SelectionIndicator />}\n      Item\n    </>\n  )}\n</Tab>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Router Component with LinkContext in TypeScript React\nDESCRIPTION: This snippet demonstrates how to create a Router component that uses LinkContext to pass an onPress handler to child Link components. It keeps track of the last clicked link and displays the result.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Link.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {PressEvent} from 'react-aria-components';\nimport {LinkContext} from 'react-aria-components';\n\nfunction Router({children}) {\n  let [clicked, setClicked] = React.useState(null);\n  let onPress = (e: PressEvent) => {\n    setClicked(e.target.textContent);\n  };\n\n  return (\n    <LinkContext.Provider value={{onPress}}>\n      {children}\n      {clicked && `You clicked ${clicked}`}\n    </LinkContext.Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Tab Navigation in React Aria Tabs\nDESCRIPTION: Shows how to create a custom TabNavigation component that accesses and manipulates the tab list state to navigate between tabs.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Tabs.mdx#2025-04-23_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nimport {TabListStateContext, Button} from 'react-aria-components';\n\nfunction TabNavigation() {\n  let state = React.useContext(TabListStateContext);\n  let prevKey = state?.collection.getKeyBefore(state.selectedKey);\n  let nextKey = state?.collection.getKeyAfter(state.selectedKey);\n  let onPrev = prevKey != null ? () => state.setSelectedKey(prevKey) : null;\n  let onNext = nextKey != null ? () => state.setSelectedKey(nextKey) : null;\n  return (\n    <div className=\"button-group\">\n      <Button aria-label=\"Previous tab\" onPress={onPrev}>←</Button>\n      <Button aria-label=\"Next tab\" onPress={onNext}>→</Button>\n    </div>\n  );\n}\n\n<Tabs>\n  <div style={{display: 'flex'}}>\n    <TabList aria-label=\"Tabs\" style={{flex: 1}}>\n      <Tab id=\"home\">Home</Tab>\n      <Tab id=\"projects\">Projects</Tab>\n      <Tab id=\"search\">Search</Tab>\n    </TabList>\n    <TabNavigation />\n  </div>\n  <TabPanel id=\"home\">Home</TabPanel>\n  <TabPanel id=\"projects\">Projects</TabPanel>\n  <TabPanel id=\"search\">Search</TabPanel>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Switch Description using SwitchContext (TypeScript)\nDESCRIPTION: This TypeScript/React component, `SwitchDescription`, demonstrates how to use `SwitchContext.Provider` from 'react-aria-components' to pass the `aria-describedby` prop to a child Switch component. It generates a unique ID for the description element using `useId` from 'react-aria' and associates the switch with its description via the context provider. The child switch and the description text are passed as props.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Switch.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport {SwitchContext} from 'react-aria-components';\nimport {useId} from 'react-aria';\n\ninterface SwitchDescriptionProps {\n  children?: React.ReactNode,\n  description?: string\n}\n\nfunction SwitchDescription({children, description}: SwitchDescriptionProps) {\n  let descriptionId = useId();\n  return (\n    <div>\n      {/*- begin highlight -*/}\n      <SwitchContext.Provider value={{'aria-describedby': descriptionId}}>\n      {/*- end highlight -*/}\n        {children}\n      </SwitchContext.Provider>\n      <small id={descriptionId}>{description}</small>\n    </div>\n  );\n}\n\n<SwitchDescription description=\"Connected to 'Starbucks Wifi'.\">\n  <MySwitch defaultSelected>Wi-Fi</MySwitch>\n</SwitchDescription>\n```\n\n----------------------------------------\n\nTITLE: Implementing Drop on Collection in React Aria ListBox\nDESCRIPTION: This example shows how to enable dropping items on the ListBox as a whole using the onRootDrop event in the useDragAndDrop hook.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ListBox.mdx#2025-04-23_snippet_29\n\nLANGUAGE: tsx\nCODE:\n```\ninterface Item {\n  id: number,\n  name: string\n}\n\nfunction Example() {\n  let [items, setItems] = React.useState<Item[]>([]);\n\n  let { dragAndDropHooks } = useDragAndDrop({\n    async onRootDrop(e) {\n      let items = await Promise.all(e.items.map(async (item, i) => {\n        let name = item.kind === 'text' ? await item.getText('text/plain') : item.name;\n        return {id: i, name};\n      }));\n      setItems(items);\n    }\n  });\n\n  return (\n    <div style={{display: 'flex', gap: 12, flexWrap: 'wrap'}}>\n      <DraggableListBox />\n      <ListBox aria-label=\"Droppable list\" items={items} dragAndDropHooks={dragAndDropHooks} renderEmptyState={() => 'Drop items here'}>\n        {item => <ListBoxItem>{item.name}</ListBoxItem>}\n      </ListBox>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default or Controlled Selection in ComboBox (TypeScript)\nDESCRIPTION: Explains setting explicit selection in ComboBox components using either uncontrolled ('defaultSelectedKey') or controlled ('selectedKey', with onSelectionChange) patterns. The code manages two ComboBoxes - one tracks selection internally by default, the other is externally controlled via React state and event handler. Inputs are item option lists, selected keys, and state setters. Outputs fully synced ComboBox UI states. This example is critical for use in forms and advanced UIs where selection state must be coordinated across components or persisted. Requires React, MyComboBox, and React Aria types.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ComboBox.mdx#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nfunction Example() {\n  let options = [\n    {id: 1, name: 'Adobe Photoshop'},\n    {id: 2, name: 'Adobe XD'},\n    {id: 3, name: 'Adobe InDesign'},\n    {id: 4, name: 'Adobe AfterEffects'},\n    {id: 5, name: 'Adobe Illustrator'},\n    {id: 6, name: 'Adobe Lightroom'},\n    {id: 7, name: 'Adobe Premiere Pro'},\n    {id: 8, name: 'Adobe Fresco'},\n    {id: 9, name: 'Adobe Dreamweaver'}\n  ];\n  let [productId, setProductId] = React.useState<Key>(9);\n\n  return (\n    <div style={{display: 'flex', gap: 16, flexWrap: 'wrap'}}>\n      <MyComboBox\n        label=\"Pick an Adobe product (uncontrolled)\"\n        defaultItems={options}\n        /*- begin highlight -*/\n        defaultSelectedKey={9}\n        /*- end highlight -*/\n      >\n        {item => <ListBoxItem>{item.name}</ListBoxItem>}\n      </MyComboBox>\n\n      <MyComboBox\n        label=\"Pick an Adobe product (controlled)\"\n        defaultItems={options}\n        /*- begin highlight -*/\n        selectedKey={productId}\n        onSelectionChange={selected => setProductId(selected)}\n        /*- end highlight -*/\n      >\n        {item => <ListBoxItem>{item.name}</ListBoxItem>}\n      </MyComboBox>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Granularity for TimeField in React\nDESCRIPTION: This snippet demonstrates how to set the granularity of a TimeField to seconds. It uses the granularity prop and parseAbsoluteToLocal function to initialize the field with a specific time including seconds.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/TimeField.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<MyTimeField\n  label=\"Event time\"\n  granularity=\"second\"\n  defaultValue={parseAbsoluteToLocal('2021-04-07T18:45:22Z')} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Drag Preview in React Aria Components\nDESCRIPTION: This example demonstrates how to create a custom drag preview for dragged items using the renderDragPreview function in useDragAndDrop hook.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Table.mdx#2025-04-23_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useListData} from 'react-stately';\nimport {useDragAndDrop} from 'react-aria-components';\n\nfunction Example() {\n  let {dragAndDropHooks} = useDragAndDrop({\n    // ...\n    renderDragPreview(items) {\n      return (\n        <div className=\"drag-preview\">\n          {items[0]['text/plain']}\n          <span className=\"badge\">{items.length}</span>\n        </div>\n      );\n    }\n  });\n\n  // ...\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.drag-preview {\n  width: 150px;\n  padding: 4px 8px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  gap: 4px;\n  background: var(--highlight-background);\n  color: white;\n  border-radius: 4px;\n\n  .badge {\n    background: var(--highlight-foreground);\n    color: var(--highlight-background);\n    padding: 0 8px;\n    border-radius: 4px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Controlled SearchField Component with React State\nDESCRIPTION: Demonstrates how to create a controlled SearchField component using React state with onChange handler to update and mirror the input value.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/SearchField.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [text, setText] = React.useState('');\n\n  return (\n    <>\n      <MySearchField label=\"Search\" onChange={setText} />\n      <p>Mirrored text: {text}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Labeling ColorArea Components in React\nDESCRIPTION: This example demonstrates how to properly label ColorArea components using aria-label and aria-labelledby props. It shows two different approaches for adding accessible labels to the components.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorArea.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<div style={{display: 'flex', gap: 8, alignItems: 'end', flexWrap: 'wrap'}}>\n  <MyColorArea\n    /*- begin highlight -*/\n    aria-label=\"Background color\"\n    /*- end highlight -*/\n    defaultValue=\"hsl(0, 100%, 50%)\"\n    xChannel=\"saturation\"\n    yChannel=\"lightness\" />\n  <div>\n    {/*- begin highlight -*/}\n    <label id=\"hsl-aria-labelledby-id\">Background color</label>\n    {/*- end highlight -*/}\n    <MyColorArea\n      /*- begin highlight -*/\n      aria-labelledby=\"hsl-aria-labelledby-id\"\n      /*- end highlight -*/\n      defaultValue=\"hsl(0, 100%, 50%)\"\n      xChannel=\"saturation\"\n      yChannel=\"lightness\" />\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring DateField with Placeholder Values in React\nDESCRIPTION: This example shows how to use the placeholderValue prop to set a default time zone for the DateField component when no value is provided.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DateField.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport {now} from '@internationalized/date';\n\n<MyDateField\n  label=\"Event date\"\n  granularity=\"second\" />\n<MyDateField\n  label=\"Event date\"\n  placeholderValue={now('America/New_York')}\n  granularity=\"second\" />\n```\n\n----------------------------------------\n\nTITLE: Basic TagGroup Implementation in React Aria\nDESCRIPTION: Shows basic usage of TagGroup component with multiple selection mode and static tags.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/TagGroup.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {TagGroup, TagList, Tag, Label} from 'react-aria-components';\n\n<TagGroup selectionMode=\"multiple\">\n  <Label>Categories</Label>\n  <TagList>\n    <Tag>News</Tag>\n    <Tag>Travel</Tag>\n    <Tag>Gaming</Tag>\n    <Tag>Shopping</Tag>\n  </TagList>\n</TagGroup>\n```\n\n----------------------------------------\n\nTITLE: Implementing Unavailable Dates in RangeCalendar\nDESCRIPTION: Demonstrates how to mark certain dates as unavailable in a RangeCalendar using the isDateUnavailable callback. Includes date range restrictions and minimum date validation.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/RangeCalendar.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport {today} from '@internationalized/date';\n\nfunction Example() {\n  let now = today(getLocalTimeZone());\n  let disabledRanges = [\n    [now, now.add({days: 5})],\n    [now.add({days: 14}), now.add({days: 16})],\n    [now.add({days: 23}), now.add({days: 24})],\n  ];\n\n  let isDateUnavailable = (date: DateValue) => disabledRanges.some((interval) => date.compare(interval[0]) >= 0 && date.compare(interval[1]) <= 0);\n\n  return <MyRangeCalendar aria-label=\"Trip dates\" minValue={today(getLocalTimeZone())} isDateUnavailable={isDateUnavailable} />\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Drop Between Items with React Aria Components\nDESCRIPTION: Demonstrates how to enable dropping between items in a GridList using the onInsert event. The example shows how to handle items dropped before or after existing list elements.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/GridList.mdx#2025-04-23_snippet_29\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let list = useListData({\n    initialItems: [\n      {id: 1, name: 'Illustrator'},\n      {id: 2, name: 'Premiere'},\n      {id: 3, name: 'Acrobat'}\n    ]\n  });\n\n  let { dragAndDropHooks } = useDragAndDrop({\n    async onInsert(e) {\n      let items = await Promise.all(e.items.map(async item => {\n        let name = item.kind === 'text' ? await item.getText('text/plain') : item.name;\n        return {id: Math.random(), name};\n      }));\n\n      if (e.target.dropPosition === 'before') {\n        list.insertBefore(e.target.key, ...items);\n      } else if (e.target.dropPosition === 'after') {\n        list.insertAfter(e.target.key, ...items);\n      }\n    }\n  });\n\n  return (\n    <div style={{display: 'flex', gap: 12, flexWrap: 'wrap'}}>\n      <DraggableGridList />\n      <MyGridList aria-label=\"Droppable list\" items={list.items} dragAndDropHooks={dragAndDropHooks}>\n        {item => <GridListItem>{item.name}</GridListItem>}\n      </MyGridList>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: DropZone with Accessible Labeling\nDESCRIPTION: Example demonstrating how to properly label a DropZone component for accessibility using the label slot, which provides both visual indication and an accessible name.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DropZone.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Text} from 'react-aria-components';\n\nfunction Example() {\n  let [dropped, setDropped] = React.useState(false);\n\n  return (\n    <DropZone\n      onDrop={() => setDropped(true)}>\n      <Text slot=\"label\">\n        {dropped ? 'Successful drop!' : 'Drop files here'}\n      </Text>\n    </DropZone>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Label Component with LabelContext in TypeScript React\nDESCRIPTION: Example of creating a custom Label component that integrates with React Aria Components using LabelContext and useContextProps.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DatePicker.mdx#2025-04-23_snippet_26\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {LabelProps} from 'react-aria-components';\nimport {LabelContext, useContextProps} from 'react-aria-components';\n\nconst MyCustomLabel = React.forwardRef((props: LabelProps, ref: React.ForwardedRef<HTMLLabelElement>) => {\n  [props, ref] = useContextProps(props, ref, LabelContext);\n\n  // ... your existing Label component\n  return <label {...props} ref={ref} />;\n});\n\n<DatePicker>\n  <MyCustomLabel>Name</MyCustomLabel>\n  {/* ... */}\n</DatePicker>\n```\n\n----------------------------------------\n\nTITLE: Configuring Decimal Formatting in NumberField using `formatOptions` in React (TSX)\nDESCRIPTION: Shows how to customize the display of decimal numbers in a `NumberField` using the `formatOptions` prop. This example configures the field to display a sign for non-zero numbers (`signDisplay: 'exceptZero'`), show at least one decimal digit (`minimumFractionDigits: 1`), and allow up to two fraction digits (`maximumFractionDigits: 2`), rounding if necessary. These options correspond to the `Intl.NumberFormat` standard.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/NumberField.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n<MyNumberField\n  label=\"Adjust exposure\"\n  defaultValue={0}\n  formatOptions={{\n    signDisplay: 'exceptZero',\n    minimumFractionDigits: 1,\n    maximumFractionDigits: 2\n  }} />\n```\n```\n\n----------------------------------------\n\nTITLE: Displaying Selected Count in CheckboxGroup Using Context State - React Aria Components - TypeScript\nDESCRIPTION: Demonstrates the creation and use of a SelectionCount component that reads the current CheckboxGroup state from CheckboxGroupStateContext using React.useContext. Within a CheckboxGroup, it displays the number of selected items by referencing state.value.length. This snippet requires CheckboxGroupStateContext to be available via context and expects child checkboxes to update selection state. Useful for showing live group state without manually passing selection counts.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/CheckboxGroup.mdx#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport {CheckboxGroupStateContext} from 'react-aria-components';\\n\\nfunction SelectionCount() {\\n  /*- begin highlight -*/\\n  let state = React.useContext(CheckboxGroupStateContext)!;\\n  /*- end highlight -*/\\n  return <small>{state.value.length} items selected.</small>;\\n}\\n\\n<MyCheckboxGroup label=\\\"Sandwich condiments\\\">\\n  <MyCheckbox value=\\\"lettuce\\\">Lettuce</MyCheckbox>\\n  <MyCheckbox value=\\\"tomato\\\">Tomato</MyCheckbox>\\n  <MyCheckbox value=\\\"onion\\\">Onion</MyCheckbox>\\n  <MyCheckbox value=\\\"sprouts\\\">Sprouts</MyCheckbox>\\n  <SelectionCount />\\n</MyCheckboxGroup>\n```\n\n----------------------------------------\n\nTITLE: Testing GridList with React Aria Test Utils\nDESCRIPTION: Shows how to test a GridList component using the test utilities from @react-aria/test-utils. It demonstrates setting up a test user, creating a GridList tester, and testing row selection functionality.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/GridList.mdx#2025-04-23_snippet_51\n\nLANGUAGE: ts\nCODE:\n```\n// GridList.test.ts\nimport {render, within} from '@testing-library/react';\nimport {User} from '@react-aria/test-utils';\n\nlet testUtilUser = new User({interactionType: 'mouse'});\n// ...\n\nit('GridList can select a row via keyboard', async function () {\n  // Render your test component/app and initialize the gridlist tester\n  let {getByTestId} = render(\n    <GridList data-testid=\"test-gridlist\" selectionMode=\"single\">\n      ...\n    </GridList>\n  );\n  let gridListTester = testUtilUser.createTester('GridList', {root: getByTestId('test-gridlist'), interactionType: 'keyboard'});\n\n  let row = gridListTester.rows[0];\n  expect(within(row).getByRole('checkbox')).not.toBeChecked();\n  expect(gridListTester.selectedRows).toHaveLength(0);\n\n  await gridListTester.toggleRowSelection({row: 0});\n  expect(within(row).getByRole('checkbox')).toBeChecked();\n  expect(gridListTester.selectedRows).toHaveLength(1);\n\n  await gridListTester.toggleRowSelection({row: 0});\n  expect(within(row).getByRole('checkbox')).not.toBeChecked();\n  expect(gridListTester.selectedRows).toHaveLength(0);\n});\n```\n\n----------------------------------------\n\nTITLE: React Aria Table with Row Actions\nDESCRIPTION: Implementation of table row actions with different selection behaviors for handling clicks and touch interactions.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Table.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n<div style={{display: 'flex', flexWrap: 'wrap', gap: '24px'}}>\n  <PokemonTable\n    aria-label=\"Pokemon table with row actions and toggle selection behavior\"\n    onRowAction={key => alert(`Opening item ${key}...`)}\n    selectionMode=\"multiple\" />\n  <PokemonTable\n    aria-label=\"Pokemon table with row actions and replace selection behavior\"\n    onRowAction={key => alert(`Opening item ${key}...`)}\n    selectionBehavior=\"replace\"\n    selectionMode=\"multiple\" />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using ColorSwatchContext for Global Configuration\nDESCRIPTION: Advanced example showing how to use ColorSwatchContext to provide color values to ColorSwatch components from a parent component.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorSwatch.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ColorSwatchContext} from 'react-aria-components';\n\n<ColorSwatchContext.Provider value={{color: '#ff0'}}>\n  <ColorSwatch />\n</ColorSwatchContext.Provider>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Link Component within React Aria Breadcrumbs (TSX)\nDESCRIPTION: Illustrates how to incorporate the previously defined `MyCustomLink` component within a React Aria `Breadcrumbs` structure. This allows developers to use their own styled or functionally extended link components while ensuring they correctly integrate with the accessibility and state management features provided by React Aria Components through context.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Breadcrumbs.mdx#2025-04-23_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\n<Breadcrumbs>\n  {/*- begin highlight -*/}\n  <Breadcrumb><MyCustomLink>Custom link</MyCustomLink></Breadcrumb>\n  {/*- end highlight -*/}\n  {/* ... */}\n</Breadcrumbs>\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable TreeItemContent Wrapper in TSX\nDESCRIPTION: This snippet defines a reusable wrapper component `MyTreeItemContent` for `TreeItemContent` from `react-aria-components`. It utilizes render props to conditionally render a checkbox (`MyCheckbox`) based on selection behavior and mode, and includes a button for the chevron icon.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Tree.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example export=true render=false\nimport type {TreeItemContentProps, TreeItemContentRenderProps} from 'react-aria-components';\nimport {Button} from 'react-aria-components';\n\nfunction MyTreeItemContent(props: TreeItemContentProps) {\n  return (\n    <TreeItemContent>\n      {({hasChildItems, selectionBehavior, selectionMode}: TreeItemContentRenderProps) => (\n        <>\n          {selectionBehavior === 'toggle' && selectionMode !== 'none' && <MyCheckbox slot=\"selection\" />}\n          <Button slot=\"chevron\">\n            <svg viewBox=\"0 0 24 24\">\n              <path d=\"m8.25 4.5 7.5 7.5-7.5 7.5\" />\n            </svg>\n          </Button>\n          {props.children}\n        </>\n      )}\n    </TreeItemContent>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-format Drag Data in React Aria ListBox\nDESCRIPTION: This example demonstrates how to provide drag data in multiple formats (plain text, HTML, and custom) for interoperability with different drop targets.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ListBox.mdx#2025-04-23_snippet_28\n\nLANGUAGE: tsx\nCODE:\n```\nfunction DraggableListBox() {\n  let items = new Map([\n    ['ps', {name: 'Photoshop', style: 'strong'}],\n    ['xd', {name: 'XD', style: 'strong'}],\n    ['id', {name: 'InDesign', style: 'strong'}],\n    ['dw', {name: 'Dreamweaver', style: 'em'}],\n    ['co', {name: 'Connect', style: 'em'}]\n  ]);\n\n  let { dragAndDropHooks } = useDragAndDrop({\n    getItems(keys) {\n      return [...keys].map(key => {\n        let item = items.get(key as string)!;\n        return {\n          'text/plain': item.name,\n          'text/html': `<${item.style}>${item.name}</${item.style}>`,\n          'custom-app-type': JSON.stringify({id: key, ...item})\n        };\n      });\n    },\n  });\n\n  return (\n    <ListBox aria-label=\"Draggable list\" selectionMode=\"multiple\" items={items} dragAndDropHooks={dragAndDropHooks}>\n      {([id, item]) => <ListBoxItem id={id} textValue={item.name}>{React.createElement(item.style || 'span', null, item.name)}</ListBoxItem>}\n    </ListBox>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic ColorSlider with React Aria Components\nDESCRIPTION: Example of how to implement a basic ColorSlider component with label, output, track, and thumb elements to create a hue selector.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorSlider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ColorSlider, ColorThumb, Label, SliderOutput, SliderTrack} from 'react-aria-components';\n\n<ColorSlider channel=\"hue\" defaultValue=\"hsl(0, 100%, 50%)\">\n  <Label />\n  <SliderOutput />\n  <SliderTrack>\n    <ColorThumb />\n  </SliderTrack>\n</ColorSlider>\n```\n\n----------------------------------------\n\nTITLE: Implementing FieldGroup with TextFieldContext in React Aria Components\nDESCRIPTION: This snippet demonstrates how to create a FieldGroup component that uses TextFieldContext to provide props to child TextFields.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/TextField.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport {TextFieldContext} from 'react-aria-components';\nimport {useId} from 'react-aria';\n\ninterface FieldGroupProps {\n  title?: string,\n  children?: React.ReactNode,\n  errorMessage?: string\n}\n\nfunction FieldGroup({title, children, errorMessage}: FieldGroupProps) {\n  let errorId = useId();\n  return (\n    <fieldset>\n      <legend>{title}</legend>\n      <TextFieldContext.Provider value={{\n        isInvalid: !!errorMessage,\n        'aria-describedby': errorMessage ? errorId : undefined\n      }}>\n        {children}\n      </TextFieldContext.Provider>\n      {errorMessage && <small id={errorId} className=\"invalid\">{errorMessage}</small>}\n    </fieldset>\n  );\n}\n\n<FieldGroup title=\"Account details\" errorMessage=\"Invalid account details.\">\n  <MyTextField label=\"Name\" defaultValue=\"Devon\" />\n  <MyTextField label=\"Email\" defaultValue=\"devon@example.com\" />\n</FieldGroup>\n```\n\n----------------------------------------\n\nTITLE: Handling Text Drop Data with Custom Types in React Aria\nDESCRIPTION: Demonstrates how to accept custom text data types using acceptedDragTypes and process them when dropped. The example filters items by the accepted type and parses the custom format.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/GridList.mdx#2025-04-23_snippet_33\n\nLANGUAGE: tsx\nCODE:\n```\nimport {isTextDropItem} from 'react-aria-components';\n\ninterface TextItem {\n  id: string,\n  name: string,\n  style: string\n}\n\nfunction DroppableGridList() {\n  let [items, setItems] = React.useState<TextItem[]>([]);\n\n  let { dragAndDropHooks } = useDragAndDrop({\n    acceptedDragTypes: ['custom-app-type'],\n    async onRootDrop(e) {\n      let items = await Promise.all(\n        e.items\n          .filter(isTextDropItem)\n          .map(async item => JSON.parse(await item.getText('custom-app-type')))\n      );\n      setItems(items);\n    }\n  });\n\n  return (\n    <MyGridList aria-label=\"Droppable list\" items={items} dragAndDropHooks={dragAndDropHooks} renderEmptyState={() => \"Drop items here\"}>\n      {item => <MyItem textValue={item.name}>{React.createElement(item.style || 'span', null, item.name)}</MyItem>}\n    </MyGridList>\n  );\n}\n\n<div style={{display: 'flex', gap: 12, flexWrap: 'wrap'}}>\n  {/* see above */}\n  <DraggableGridList />\n  <DroppableGridList />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Styling Resizable Columns in React Aria Components Table\nDESCRIPTION: Comprehensive CSS styling for resizable columns in a React Aria Components table. It includes styles for the container, column resizers, and handles different resizing states and interactions.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Table.mdx#2025-04-23_snippet_20\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ResizableTableContainer {\n  max-width: 400px;\n  overflow: auto;\n  position: relative;\n  border: 1px solid var(--border-color);\n  border-radius: 6px;\n  background: var(--background-color);\n\n  .react-aria-Table {\n    border: none;\n  }\n\n  .flex-wrapper {\n    display: flex;\n    align-items: center;\n  }\n\n  .column-name,\n  .react-aria-Button {\n    --background-color: var(--overlay-background);\n    flex: 1;\n    font: inherit;\n    text-align: start;\n    color: inherit;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    border-color: transparent;\n    transition: background 200ms;\n    &[data-hovered] {\n      background: var(--highlight-hover);\n    }\n\n    &[data-pressed] {\n      background: var(--highlight-pressed);\n      box-shadow: none;\n    }\n\n    &:focus-visible {\n      outline: 2px solid var(--focus-ring-color);\n    }\n  }\n\n  .react-aria-ColumnResizer {\n    width: 15px;\n    background-color: grey;\n    height: 25px;\n    flex: 0 0 auto;\n    touch-action: none;\n    box-sizing: border-box;\n    border: 5px;\n    border-style: none solid;\n    border-color: transparent;\n    background-clip: content-box;\n\n    &[data-resizable-direction=both] {\n      cursor: ew-resize;\n    }\n\n    &[data-resizable-direction=left] {\n      cursor: e-resize;\n    }\n\n    &[data-resizable-direction=right] {\n      cursor: w-resize;\n    }\n\n    &[data-focus-visible] {\n      background-color: var(--focus-ring-color);\n    }\n\n    &[data-resizing] {\n      border-color: var(--focus-ring-color);\n      background-color: transparent;\n    }\n  }\n\n  .react-aria-Column,\n  .react-aria-Cell {\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing ColorSwatch Labeling for Accessibility\nDESCRIPTION: Example showing how to customize the accessible name of a ColorSwatch by providing a specific color name and label.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorSwatch.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<MyColorSwatch color=\"#f00\" aria-label=\"Background color\" colorName=\"Fire truck red\" />\n```\n\n----------------------------------------\n\nTITLE: Updating UI on Date Change with React Aria DateField in TypeScript\nDESCRIPTION: Handles date selection in a React component using the onChange prop of DateField. Uses React state to store the date, and leverages useDateFormatter and getLocalTimeZone from supporting libraries to present a locale-sensitive formatted date. Requires @internationalized/date and @react-aria/i18n; expects date to be a valid calendar object and displays formatted output in a <p> element. Outputs either a formatted date string or '--' if no date is selected.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DateField.mdx#2025-04-23_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {getLocalTimeZone} from '@internationalized/date';\nimport {useDateFormatter} from '@react-aria/i18n';\n\nfunction Example() {\n  let [date, setDate] = React.useState(parseDate('1985-07-03'));\n  let formatter = useDateFormatter({dateStyle: 'full'});\n\n  return (\n    <>\n      <MyDateField label=\"Birth date\" value={date} onChange={setDate} />\n      <p>Selected date: {date ? formatter.format(date.toDate(getLocalTimeZone())) : '--'}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Directory Drop Handler in React\nDESCRIPTION: Example showing how to handle directory drops in a React component using react-aria-components. Demonstrates directory traversal and rendering file/folder contents in a list view.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/GridList.mdx#2025-04-23_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nimport File from '@spectrum-icons/workflow/FileTxt';\nimport Folder from '@spectrum-icons/workflow/Folder';\nimport {DIRECTORY_DRAG_TYPE, isDirectoryDropItem} from 'react-aria-components';\n\ninterface DirItem {\n  name: string,\n  kind: string\n}\n\nfunction Example() {\n  let [files, setFiles] = React.useState<DirItem[]>([]);\n\n  let { dragAndDropHooks } = useDragAndDrop({\n    acceptedDragTypes: [DIRECTORY_DRAG_TYPE],\n    async onRootDrop(e) {\n      let dir = e.items.find(isDirectoryDropItem)!;\n      let files = [];\n      for await (let entry of dir.getEntries()) {\n        files.push({\n          name: entry.name,\n          kind: entry.kind\n        });\n      }\n      setFiles(files);\n    }\n  });\n\n  return (\n    <MyGridList aria-label=\"Droppable list\" items={files} dragAndDropHooks={dragAndDropHooks} renderEmptyState={() => \"Drop directory here\"}>\n      {item => (\n        <MyItem id={item.name} textValue={item.name}>\n          <div className=\"dir-item\">\n            {item.kind === 'directory' ? <Folder /> : <File />}\n            <span>{item.name}</span>\n          </div>\n        </MyItem>\n      )}\n    </MyGridList>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Group Validation for CheckboxGroup in React\nDESCRIPTION: This snippet demonstrates how to use the isRequired prop and FieldError component to implement group-level validation for a CheckboxGroup.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/CheckboxGroup.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Form, FieldError, Button} from 'react-aria-components';\n\n<Form>\n  <CheckboxGroup name=\"condiments\" isRequired>\n    <Label>Sandwich condiments</Label>\n    <MyCheckbox value=\"lettuce\">Lettuce</MyCheckbox>\n    <MyCheckbox value=\"tomato\">Tomato</MyCheckbox>\n    <MyCheckbox value=\"onion\">Onion</MyCheckbox>\n    <MyCheckbox value=\"sprouts\">Sprouts</MyCheckbox>\n    <FieldError />\n  </CheckboxGroup>\n  <Button type=\"submit\">Submit</Button>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Controlled RadioGroup with React State\nDESCRIPTION: Demonstrates a controlled RadioGroup component using React state and onChange event.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/RadioGroup.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [selected, setSelected] = React.useState(null);\n\n  return (\n    <>\n      <MyRadioGroup label=\"Favorite avatar\" value={selected} onChange={setSelected}>\n        <Radio value=\"wizard\">Wizard</Radio>\n        <Radio value=\"dragon\">Dragon</Radio>\n      </MyRadioGroup>\n      <p>You have selected: {selected ?? ''}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Auto-dismiss Toast Implementation\nDESCRIPTION: Example of implementing auto-dismiss functionality for toasts with a timeout.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Toast.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Button\n  onPress={() => queue.add({title: 'Toast is done!'}, {timeout: 5000})}\n>\n  Show toast\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Using Text Slots in React Aria ListBox Items\nDESCRIPTION: This example demonstrates the use of 'label' and 'description' slots in ListBox items to separate primary and secondary content, improving screen reader announcements and allowing for custom styling.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ListBox.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Text} from 'react-aria-components';\n\n<ListBox aria-label=\"Permissions\" selectionMode=\"single\">\n  <ListBoxItem textValue=\"Read\">\n    <Text slot=\"label\">Read</Text>\n    <Text slot=\"description\">Read only</Text>\n  </ListBoxItem>\n  <ListBoxItem textValue=\"Write\">\n    <Text slot=\"label\">Write</Text>\n    <Text slot=\"description\">Read and write only</Text>\n  </ListBoxItem>\n  <ListBoxItem textValue=\"Admin\">\n    <Text slot=\"label\">Admin</Text>\n    <Text slot=\"description\">Full access</Text>\n  </ListBoxItem>\n</ListBox>\n```\n\n----------------------------------------\n\nTITLE: Implementing Disabled Menu Items\nDESCRIPTION: Shows how to disable individual menu items using the isDisabled prop.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Menu.mdx#2025-04-23_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\n<MyMenuButton label=\"Actions\">\n  <MenuItem>Copy</MenuItem>\n  <MenuItem>Cut</MenuItem>\n  <MenuItem isDisabled>Paste</MenuItem>\n</MyMenuButton>\n```\n\n----------------------------------------\n\nTITLE: Creating Animated Selection Checkmark Component with Framer Motion\nDESCRIPTION: This component renders an animated checkmark SVG that shows either an empty circle or a filled checkmark based on selection state. It uses Framer Motion for entrance and state transition animations.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/ios-list.mdx#2025-04-23_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\nfunction SelectionCheckmark({ isSelected }) {\n  return (\n    <motion.svg\n      aria-hidden=\"true\"\n      viewBox=\"0 0 24 24\"\n      fill=\"currentColor\"\n      className=\"w-6 h-6 shrink-0 ml-4\"\n      initial={{ x: -40 }}\n      animate={{ x: 0 }}\n      transition={{ duration: 0.25 }}\n    >\n      {!isSelected && (\n        <circle\n          r={9}\n          cx={12}\n          cy={12}\n          stroke=\"currentColor\"\n          fill=\"none\"\n          strokeWidth={1}\n          className=\"text-gray-400\"\n        />\n      )}\n      {isSelected && (\n        <path\n          className=\"text-blue-600\"\n          fillRule=\"evenodd\"\n          d=\"M2.25 12c0-5.385 4.365-9.75 9.75-9.75s9.75 4.365 9.75 9.75-4.365 9.75-9.75 9.75S2.25 17.385 2.25 12zm13.36-1.814a.75.75 0 10-1.22-.872l-3.236 4.53L9.53 12.22a.75.75 0 00-1.06 1.06l2.25 2.25a.75.75 0 001.14-.094l3.75-5.25z\"\n          clipRule=\"evenodd\"\n        />\n      )}\n    </motion.svg>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Currency Values in NumberField using `formatOptions` in React (TSX)\nDESCRIPTION: Illustrates formatting a `NumberField` value as currency using `formatOptions`. It requires setting `style: 'currency'` and the specific `currency` code (e.g., 'EUR'). Additional options like `currencyDisplay: 'code'` (to show 'EUR' instead of '€') and `currencySign: 'accounting'` (to use parentheses for negative values in some locales) are also shown.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/NumberField.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n<MyNumberField\n  label=\"Transaction amount\"\n  defaultValue={45}\n  formatOptions={{\n    style: 'currency',\n    currency: 'EUR',\n    currencyDisplay: 'code',\n    currencySign: 'accounting'\n  }} />\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Link Menu with React Aria Components in TypeScript/JSX\nDESCRIPTION: This snippet creates a menu containing external links using MenuItem components with href and target attributes. Clicking a menu item opens the corresponding link in a new tab. MenuButton label is 'Links'. No dynamic selection is involved. Requires React and React Aria Components.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Menu.mdx#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n<MyMenuButton label=\\\"Links\\\">\\n  <MenuItem href=\\\"https://adobe.com/\\\" target=\\\"_blank\\\">Adobe</MenuItem>\\n  <MenuItem href=\\\"https://apple.com/\\\" target=\\\"_blank\\\">Apple</MenuItem>\\n  <MenuItem href=\\\"https://google.com/\\\" target=\\\"_blank\\\">Google</MenuItem>\\n  <MenuItem href=\\\"https://microsoft.com/\\\" target=\\\"_blank\\\">Microsoft</MenuItem>\\n</MyMenuButton>\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Validation for TimeField in React\nDESCRIPTION: This snippet demonstrates how to implement validation for a TimeField. It uses the isRequired prop and includes a FieldError component to display validation errors.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/TimeField.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Form, FieldError, Button} from 'react-aria-components';\n\n<Form>\n  <TimeField name=\"time\" isRequired>\n    <Label>Meeting time</Label>\n    <DateInput>\n      {segment => <DateSegment segment={segment} />}\n    </DateInput>\n    <FieldError />\n  </TimeField>\n  <Button type=\"submit\">Submit</Button>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Controlling DateRangePicker Granularity in React (TSX)\nDESCRIPTION: Illustrates using the `granularity` prop to control the display precision of two synchronized `DateRangePicker` components. One picker shows seconds (`granularity=\"second\"`), while the other shows only the date (`granularity=\"day\"`), even though both are bound to the same state variable (`date`) which includes time information. State is managed using `React.useState` and initialized with `parseAbsoluteToLocal`.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DateRangePicker.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\nfunction Example() {\n  let [date, setDate] = React.useState({\n    start: parseAbsoluteToLocal('2021-04-07T18:45:22Z'),\n    end: parseAbsoluteToLocal('2021-04-08T20:00:00Z')\n  });\n\n  return (\n    <>\n      <MyDateRangePicker\n        label=\"Date and time range\"\n        /*- begin highlight -*/\n        granularity=\"second\"\n        /*- end highlight -*/\n        value={date}\n        onChange={setDate} />\n      <MyDateRangePicker\n        label=\"Date range\"\n        /*- begin highlight -*/\n        granularity=\"day\"\n        /*- end highlight -*/\n        value={date}\n        onChange={setDate} />\n    </>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing a Horizontal Toolbar in React\nDESCRIPTION: This example demonstrates how to create a horizontal toolbar with various interactive elements using React Aria Components.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Toolbar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Toolbar, Button, ToggleButton, Separator, Checkbox, Group} from 'react-aria-components';\n\n<Toolbar aria-label=\"Text formatting\">\n  <Group aria-label=\"Style\">\n    <ToggleButton aria-label=\"Bold\"><b>B</b></ToggleButton>\n    <ToggleButton aria-label=\"Italic\"><i>I</i></ToggleButton>\n    <ToggleButton aria-label=\"Underline\"><u>U</u></ToggleButton>\n  </Group>\n  <Separator orientation=\"vertical\" />\n  <Group aria-label=\"Clipboard\">\n    <Button>Copy</Button>\n    <Button>Paste</Button>\n    <Button>Cut</Button>\n  </Group>\n  <Separator orientation=\"vertical\" />\n  <Checkbox>\n    <div className=\"checkbox\">\n      <svg viewBox=\"0 0 18 18\" aria-hidden=\"true\">\n        <polyline points=\"1 9 7 14 15 4\" />\n      </svg>\n    </div>\n    Night Mode\n  </Checkbox>\n</Toolbar>\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable TreeItem Wrapper in TSX\nDESCRIPTION: This snippet defines a reusable `MyTreeItem` component that wraps the `TreeItem` from `react-aria-components`. It accepts a `title` prop, sets it as the `textValue`, and automatically renders the custom `MyTreeItemContent` component, simplifying the structure when building trees.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Tree.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example export=true render=false\nimport {TreeItemProps} from 'react-aria-components';\n\ninterface MyTreeItemProps extends Partial<TreeItemProps> {\n  title: string\n}\n\nfunction MyTreeItem(props: MyTreeItemProps) {\n  return (\n    <TreeItem textValue={props.title} {...props}>\n      <MyTreeItemContent>\n        {props.title}\n      </MyTreeItemContent>\n      {props.children}\n    </TreeItem>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Calendar Component Anatomy with Optional Elements\nDESCRIPTION: A complete example of the Calendar component structure showing all possible child components including CalendarGridHeader, CalendarHeaderCell, CalendarGridBody, and error message Text component.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Calendar.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Calendar, Heading, Button, CalendarGrid, CalendarGridHeader, CalendarHeaderCell, CalendarGridBody, CalendarCell, Text} from 'react-aria-components';\n\n<Calendar>\n  <Button slot=\"previous\" />\n  <Heading />\n  <Button slot=\"next\" />\n  <CalendarGrid>\n    <CalendarGridHeader>\n      {day => <CalendarHeaderCell />}\n    </CalendarGridHeader>\n    <CalendarGridBody>\n      {date => <CalendarCell date={date} />}\n    </CalendarGridBody>\n  </CalendarGrid>\n  <Text slot=\"errorMessage\" />\n</Calendar>\n```\n\n----------------------------------------\n\nTITLE: Custom Progress Circle Component for Pending Button\nDESCRIPTION: Implementation of a custom progress circle component using ProgressBar from react-aria-components to show pending state in buttons.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Button.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ProgressBar} from 'react-aria-components';\nimport type {ProgressBarProps} from 'react-aria-components';\n\nfunction MyProgressCircle(props: ProgressBarProps) {\n  return (\n    <ProgressBar {...props}>\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" style={{display: 'block'}}>\n        <path fill=\"currentColor\" d=\"M12,1A11,11,0,1,0,23,12,11,11,0,0,0,12,1Zm0,19a8,8,0,1,1,8-8A8,8,0,0,1,12,20Z\" opacity=\".25\" />\n        <path fill=\"currentColor\" d=\"M10.14,1.16a11,11,0,0,0-9,8.92A1.59,1.59,0,0,0,2.46,12,1.52,1.52,0,0,0,4.11,10.7a8,8,0,0,1,6.66-6.61A1.42,1.42,0,0,0,12,2.69h0A1.57,1.57,0,0,0,10.14,1.16Z\">\n          <animateTransform attributeName=\"transform\" type=\"rotate\" dur=\"0.75s\" values=\"0 12 12;360 12 12\" repeatCount=\"indefinite\"/>\n        </path>\n      </svg>\n    </ProgressBar>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic ColorWheel Component Implementation\nDESCRIPTION: Shows basic usage of ColorWheel component with track and thumb elements\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorWheel.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ColorWheel, ColorWheelTrack, ColorThumb} from 'react-aria-components';\n\n<ColorWheel outerRadius={100} innerRadius={74}>\n  <ColorWheelTrack />\n  <ColorThumb />\n</ColorWheel>\n```\n\n----------------------------------------\n\nTITLE: Disabling a Tooltip Using TooltipTrigger in React Aria (TypeScript)\nDESCRIPTION: This TypeScript/JSX snippet demonstrates the use of the TooltipTrigger component's isDisabled prop to prevent a tooltip from displaying, while still allowing the underlying trigger (a Button component) to remain interactive. There are no additional dependencies beyond the core React Aria components. Inputs: children (trigger and tooltip), isDisabled flag. Output: Tooltip will not appear when isDisabled is set. This enables granular control over tooltip visibility without disabling the interactive element itself.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Tooltip.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<TooltipTrigger isDisabled>\\n  <Button>🖨</Button>\\n  <MyTooltip>Print</MyTooltip>\\n</TooltipTrigger>\\n\n```\n\n----------------------------------------\n\nTITLE: Menu Testing with React Aria Test Utils\nDESCRIPTION: Shows how to use @react-aria/test-utils for testing menu interactions. The example demonstrates testing menu opening and submenu interactions using the User and MenuTester utilities.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Menu.mdx#2025-04-23_snippet_34\n\nLANGUAGE: ts\nCODE:\n```\n// Menu.test.ts\nimport {render} from '@testing-library/react';\nimport {User} from '@react-aria/test-utils';\n\nlet testUtilUser = new User({interactionType: 'mouse'});\n// ...\n\nit('Menu can open its submenu via keyboard', async function () {\n  // Render your test component/app and initialize the menu tester\n  let {getByTestId} = render(\n    <MenuTrigger>\n      <Button data-testid=\"test-menutrigger\">Menu trigger</Button>\n      ...\n    </MenuTrigger>\n  );\n  let menuTester = testUtilUser.createTester('Menu', {root: getByTestId('test-menutrigger'), interactionType: 'keyboard'});\n\n  await menuTester.open();\n  expect(menuTester.menu).toBeInTheDocument();\n  let submenuTriggers = menuTester.submenuTriggers;\n  expect(submenuTriggers).toHaveLength(1);\n\n  let submenuTester = await menuTester.openSubmenu({submenuTrigger: 'Share…'});\n  expect(submenuTester.menu).toBeInTheDocument();\n\n  await submenuTester.selectOption({option: submenuTester.options()[0]});\n  expect(submenuTester.menu).not.toBeInTheDocument();\n  expect(menuTester.menu).not.toBeInTheDocument();\n});\n```\n\n----------------------------------------\n\nTITLE: Reusable Tooltip Component\nDESCRIPTION: Creates a reusable tooltip component wrapper with consistent styling and structure.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Tooltip.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {TooltipProps} from 'react-aria-components';\n\ninterface MyTooltipProps extends Omit<TooltipProps, 'children'> {\n  children: React.ReactNode\n}\n\nfunction MyTooltip({children, ...props}: MyTooltipProps) {\n  return (\n    <Tooltip {...props}>\n      <OverlayArrow>\n        <svg width={8} height={8} viewBox=\"0 0 8 8\"><path d=\"M0 0 L4 4 L8 0\" /></svg>\n      </OverlayArrow>\n      {children}\n    </Tooltip>\n  );\n}\n\n<TooltipTrigger>\n  <Button>💾</Button>\n  <MyTooltip>Save</MyTooltip>\n</TooltipTrigger>\n```\n\n----------------------------------------\n\nTITLE: Controlled Selection in ToggleButtonGroup\nDESCRIPTION: Example of controlled selection state in ToggleButtonGroup using React state.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ToggleButtonGroup.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {Key} from 'react-aria-components';\n\nfunction Example() {\n  let [selected, setSelected] = React.useState(new Set<Key>(['bold']));\n\n  return (\n    <>\n      <ToggleButtonGroup selectionMode=\"multiple\" selectedKeys={selected} onSelectionChange={setSelected}>\n        <ToggleButton id=\"bold\">Bold</ToggleButton>\n        <ToggleButton id=\"italic\">Italic</ToggleButton>\n        <ToggleButton id=\"underline\">Underline</ToggleButton>\n      </ToggleButtonGroup>\n      <p>Current selections (controlled): {[...selected].join(', ')}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Validation for TimeField in React\nDESCRIPTION: This snippet demonstrates custom validation for a TimeField. It uses the validate prop to ensure that the selected time is on a 15-minute increment.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/TimeField.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<Form>\n  <MyTimeField\n    label=\"Meeting time\"\n    validate={time => time?.minute % 15 !== 0 ? 'Meetings start every 15 minutes.' : null}\n    defaultValue={new Time(9, 25)} />\n  <Button type=\"submit\">Submit</Button>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Adding Description Text to ComboBox in React Aria\nDESCRIPTION: Example showing how to add a descriptive help text to a ComboBox using the description slot. This provides additional context to users about the expected input or selection.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ComboBox.mdx#2025-04-23_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\n<ComboBox>\n  <Label>Favorite Animal</Label>\n  <div>\n    <Input />\n    <Button>▼</Button>\n  </div>\n  <Text slot=\"description\">Please select an animal.</Text>\n  <Popover>\n    <ListBox>\n      <ListBoxItem>Aardvark</ListBoxItem>\n      <ListBoxItem>Cat</ListBoxItem>\n      <ListBoxItem>Dog</ListBoxItem>\n      <ListBoxItem>Kangaroo</ListBoxItem>\n      <ListBoxItem>Panda</ListBoxItem>\n      <ListBoxItem>Snake</ListBoxItem>\n    </ListBox>\n  </Popover>\n</ComboBox>\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering Based on Menu Item State\nDESCRIPTION: Using render props to conditionally render elements based on component state, such as displaying a checkmark when an item is selected.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Menu.mdx#2025-04-23_snippet_25\n\nLANGUAGE: jsx\nCODE:\n```\n<MenuItem>\n  {({isSelected}) => (\n    <>\n      {isSelected && <CheckmarkIcon />}\n      Item\n    </>\n  )}\n</MenuItem>\n```\n\n----------------------------------------\n\nTITLE: Initializing DatePicker with a Specific Time Zone in TSX\nDESCRIPTION: Shows how to initialize the `MyDatePicker` component with a specific time zone using a `ZonedDateTime` object. The `parseZonedDateTime` function from `@internationalized/date` is used to parse a string containing both the date/time and the IANA time zone identifier ('America/Los_Angeles'). This ensures the DatePicker displays and handles the date according to the specified time zone rules.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DatePicker.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseZonedDateTime} from '@internationalized/date';\n\n<MyDatePicker\n  label=\"Event date\"\n  defaultValue={parseZonedDateTime('2022-11-07T00:45[America/Los_Angeles]')} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Selectable GridList with ToggleButton\nDESCRIPTION: This example demonstrates how to use the Selectable component to control the selection mode of a GridList using a ToggleButton.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/GridList.mdx#2025-04-23_snippet_48\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ToggleButton} from 'react-aria-components';\n\n<Selectable>\n  <ToggleButton style={{marginBottom: '8px'}}>Select</ToggleButton>\n  <GridList aria-label=\"Ice cream flavors\">\n    <MyItem>Chocolate</MyItem>\n    <MyItem>Mint</MyItem>\n    <MyItem>Strawberry</MyItem>\n    <MyItem>Vanilla</MyItem>\n  </GridList>\n</Selectable>\n```\n\n----------------------------------------\n\nTITLE: Styling Tables in React Aria Components with CSS\nDESCRIPTION: Comprehensive CSS styling for the Table component, including styles for the table itself, header, rows, cells, and various interactive states like focus, selection, and disabled states.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Table.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n\n.react-aria-Table {\n  padding: 0.286rem;\n  border: 1px solid var(--border-color);\n  border-radius: 6px;\n  background: var(--overlay-background);\n  outline: none;\n  border-spacing: 0;\n  min-height: 100px;\n  align-self: start;\n  max-width: 100%;\n  word-break: break-word;\n  forced-color-adjust: none;\n\n  &[data-focus-visible] {\n    outline: 2px solid var(--focus-ring-color);\n    outline-offset: -1px;\n  }\n\n  .react-aria-TableHeader {\n    color: var(--text-color);\n\n    &:after {\n      content: '';\n      display: table-row;\n      height: 2px;\n    }\n\n    & tr:last-child .react-aria-Column {\n      border-bottom: 1px solid var(--border-color);\n      cursor: default;\n    }\n  }\n\n  .react-aria-Row {\n    --radius-top: 6px;\n    --radius-bottom: 6px;\n    --radius: var(--radius-top) var(--radius-top) var(--radius-bottom) var(--radius-bottom);\n    border-radius: var(--radius);\n    clip-path: inset(0 round var(--radius)); /* firefox */\n    outline: none;\n    cursor: default;\n    color: var(--text-color);\n    font-size: 1.072rem;\n    position: relative;\n    transform: scale(1);\n\n    &[data-focus-visible] {\n      outline: 2px solid var(--focus-ring-color);\n      outline-offset: -2px;\n    }\n\n    &[data-pressed] {\n      background: var(--gray-100);\n    }\n\n    &[data-selected] {\n      background: var(--highlight-background);\n      color: var(--highlight-foreground);\n      --focus-ring-color: var(--highlight-foreground);\n\n      &[data-focus-visible],\n      .react-aria-Cell[data-focus-visible] {\n        outline-offset: -4px;\n      }\n    }\n\n    &[data-disabled] {\n      color: var(--text-color-disabled);\n    }\n  }\n\n  .react-aria-Cell,\n  .react-aria-Column {\n    padding: 4px 8px;\n    text-align: left;\n    outline: none;\n\n    &[data-focus-visible] {\n      outline: 2px solid var(--focus-ring-color);\n      outline-offset: -2px;\n    }\n  }\n\n  .react-aria-Cell {\n    transform: translateZ(0);\n\n    &:first-child {\n      border-radius: var(--radius-top) 0 0 var(--radius-bottom);\n    }\n\n    &:last-child {\n      border-radius: 0 var(--radius-top) var(--radius-bottom) 0;\n    }\n  }\n\n  /* join selected items if :has selector is supported */\n  @supports selector(:has(.foo)) {\n    .react-aria-Row[data-selected]:has(+ [data-selected]),\n    .react-aria-Row[data-selected]:has(+ .react-aria-DropIndicator + [data-selected]) {\n      --radius-bottom: 0px;\n    }\n\n    .react-aria-Row[data-selected] + [data-selected],\n    .react-aria-Row[data-selected] + .react-aria-DropIndicator + [data-selected]{\n      --radius-top: 0px;\n    }\n  }\n}\n\n:where(.react-aria-Row) .react-aria-Checkbox {\n  --selected-color: var(--highlight-foreground);\n  --selected-color-pressed: var(--highlight-foreground-pressed);\n  --checkmark-color: var(--highlight-background);\n  --background-color: var(--highlight-background);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Removable and TagGroup with ToggleButton in React Aria Components (TypeScript)\nDESCRIPTION: This snippet provides an example of integrating the Removable component with a custom TagGroup and ToggleButton. It shows how to control edit mode via a toggle, pass an onRemove function, and display several MyTag components within MyTagGroup, plus an Edit toggle button. The dependencies are Removable, MyTagGroup, MyTag, React, and ToggleButton from react-aria-components. The component expects onRemove (receives selected ids), renders Tag components, and handles user interaction.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/TagGroup.mdx#2025-04-23_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ToggleButton} from 'react-aria-components';\\n\\n<Removable onRemove={ids => alert(`Remove ${[...ids]}`)}>\\n  <MyTagGroup label=\\\"Ice cream flavor\\\">\\n    <MyTag id=\\\"chocolate\\\">Chocolate</MyTag>\\n    <MyTag id=\\\"mint\\\">Mint</MyTag>\\n    <MyTag id=\\\"strawberry\\\">Strawberry</MyTag>\\n    <MyTag id=\\\"vanilla\\\">Vanilla</MyTag>\\n  </MyTagGroup>\\n  <ToggleButton style={{marginTop: '8px'}}>Edit</ToggleButton>\\n</Removable>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Menu Items with Disabled Keys\nDESCRIPTION: Example of implementing a menu with dynamically disabled items using the disabledKeys prop.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Menu.mdx#2025-04-23_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let items = [\n    {id: 1, name: 'New'},\n    {id: 2, name: 'Open'},\n    {id: 3, name: 'Close'},\n    {id: 4, name: 'Save'},\n    {id: 5, name: 'Duplicate'},\n    {id: 6, name: 'Rename'},\n    {id: 7, name: 'Move'}\n  ];\n\n  return (\n    <MyMenuButton\n      label=\"Actions\"\n      items={items}\n      disabledKeys={[4, 6]}\n    >\n      {(item) => <MenuItem>{item.name}</MenuItem>}\n    </MyMenuButton>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Media Capture with FileTrigger\nDESCRIPTION: Shows how to implement media capture functionality for mobile devices\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/FileTrigger.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<FileTrigger defaultCamera=\"environment\">\n  <Button>Open Camera</Button>\n</FileTrigger>\n```\n\n----------------------------------------\n\nTITLE: RadioGroup with HTML Form Integration\nDESCRIPTION: Shows how to integrate RadioGroup with HTML forms using the name prop.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/RadioGroup.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<MyRadioGroup label=\"Favorite pet\" name=\"pet\">\n  <Radio value=\"dogs\">Dogs</Radio>\n  <Radio value=\"cats\">Cats</Radio>\n</MyRadioGroup>\n```\n\n----------------------------------------\n\nTITLE: Implementing an HSLA Color Picker using ColorSlider in TSX\nDESCRIPTION: This React component shows how to build an HSLA color picker using four `MyColorSlider` components. Similar to the RGBA example, each slider controls a specific channel (hue, saturation, lightness, alpha) and is linked to a shared color state, initialized with an HSLA value via `parseColor`. Modifying one slider updates the shared state and reflects across all sliders.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorSlider.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [color, setColor] = React.useState(parseColor('hsla(0, 100%, 50%, 0.5)'));\n\n  return (\n    <>\n      <MyColorSlider channel=\"hue\" value={color} onChange={setColor} />\n      <MyColorSlider channel=\"saturation\" value={color} onChange={setColor} />\n      <MyColorSlider channel=\"lightness\" value={color} onChange={setColor} />\n      <MyColorSlider channel=\"alpha\" value={color} onChange={setColor} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Popover for Data-attribute-based Placement States (CSS)\nDESCRIPTION: Shows how to style the Popover based on its data-placement attribute using a CSS attribute selector. This enables different appearance for different popover placements (e.g., left, right). No dependencies, parameters, or dynamic inputs except for the attribute. Used for stateful/directional popover UI.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Popover.mdx#2025-04-23_snippet_14\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Popover[data-placement=left] {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Targeting Menu Item States with CSS Selectors\nDESCRIPTION: Shows how to style different states of a MenuItem component using data attributes provided by React Aria Components.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Menu.mdx#2025-04-23_snippet_23\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-MenuItem[data-selected] {\n  /* ... */\n}\n\n.react-aria-MenuItem[data-focused] {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing RangeCalendar with Default and Controlled Values in React\nDESCRIPTION: Demonstrates how to use the RangeCalendar component with both uncontrolled (defaultValue) and controlled (value) props. It uses the parseDate function from @internationalized/date to create date objects.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/RangeCalendar.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseDate} from '@internationalized/date';\n\nfunction Example() {\n  let [value, setValue] = React.useState({\n    start: parseDate('2020-02-03'),\n    end: parseDate('2020-02-12')\n  });\n\n  return (\n    <div style={{display: 'flex', gap: 20, flexWrap: 'wrap'}}>\n      <MyRangeCalendar\n        aria-label=\"Date range (uncontrolled)\"\n        defaultValue={{\n          start: parseDate('2020-02-03'),\n          end: parseDate('2020-02-12')\n        }} />\n      <MyRangeCalendar\n        aria-label=\"Date range (controlled)\"\n        value={value}\n        onChange={setValue} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Router Component with Links in TypeScript React\nDESCRIPTION: This example shows how to use the custom Router component with Link components as children. The Router will update its state when any Link is pressed.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Link.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<Router>\n  <ul>\n    <li><Link>Breadcrumbs</Link></li>\n    <li><Link>Button</Link></li>\n    <li><Link>Calendar</Link></li>\n  </ul>\n</Router>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Breadcrumbs with React Aria Components\nDESCRIPTION: A simple example showing how to create breadcrumbs navigation with React Aria Components, displaying a path from Home to React Aria to Breadcrumbs.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Breadcrumbs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Breadcrumbs, Breadcrumb, Link} from 'react-aria-components';\n\n<Breadcrumbs>\n  <Breadcrumb><Link href=\"/\">Home</Link></Breadcrumb>\n  <Breadcrumb><Link href=\"/react-aria/\">React Aria</Link></Breadcrumb>\n  <Breadcrumb><Link>Breadcrumbs</Link></Breadcrumb>\n</Breadcrumbs>\n```\n\n----------------------------------------\n\nTITLE: Defining GridList Structure with React Aria Components\nDESCRIPTION: This code snippet shows the basic structure of a GridList component using React Aria Components, including drag and selection functionality.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/GridList.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {GridList, GridListItem, Checkbox, Button} from 'react-aria-components';\n\n<GridList>\n  <GridListItem>\n    <Button slot=\"drag\" />\n    <Checkbox slot=\"selection\" />\n  </GridListItem>\n</GridList>\n```\n\n----------------------------------------\n\nTITLE: Adding Links to ListBox Items in React Aria\nDESCRIPTION: This snippet shows how to create ListBox items that act as links to external websites. It demonstrates the use of the href prop on ListBoxItem components.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ListBox.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<ListBox aria-label=\"Links\">\n  <ListBoxItem href=\"https://adobe.com/\" target=\"_blank\">Adobe</ListBoxItem>\n  <ListBoxItem href=\"https://apple.com/\" target=\"_blank\">Apple</ListBoxItem>\n  <ListBoxItem href=\"https://google.com/\" target=\"_blank\">Google</ListBoxItem>\n  <ListBoxItem href=\"https://microsoft.com/\" target=\"_blank\">Microsoft</ListBoxItem>\n</ListBox>\n```\n\n----------------------------------------\n\nTITLE: Setting Placeholder Value in DateRangePicker\nDESCRIPTION: Example showing how to set a custom placeholder value for a DateRangePicker. The placeholderValue controls the default display and initial segment values when a user interacts with the component.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DateRangePicker.mdx#2025-04-23_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nimport {CalendarDate} from '@internationalized/date';\n\n<MyDateRangePicker label=\"Date range\" placeholderValue={new CalendarDate(1980, 1, 1)} />\n```\n\n----------------------------------------\n\nTITLE: Handling File Drop Data in React Aria Tables\nDESCRIPTION: This example demonstrates how to handle file drops in a table. It accepts JPEG and PNG images, processes the dropped files, creates object URLs, and displays them in the table with metadata.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Table.mdx#2025-04-23_snippet_35\n\nLANGUAGE: tsx\nCODE:\n```\nimport {isFileDropItem} from 'react-aria-components';\n\ninterface ImageItem {\n  id: number,\n  url: string,\n  name: string,\n  type: string,\n  lastModified: number\n}\n\nfunction Example() {\n  let [items, setItems] = React.useState<ImageItem[]>([]);\n\n  let { dragAndDropHooks } = useDragAndDrop({\n    acceptedDragTypes: ['image/jpeg', 'image/png'],\n    async onRootDrop(e) {\n      let items = await Promise.all(\n        e.items.filter(isFileDropItem).map(async item => {\n          let file = await item.getFile();\n          return {\n            id: Math.random(),\n            url: URL.createObjectURL(file),\n            name: item.name,\n            type: file.type,\n            lastModified: file.lastModified\n          };\n        })\n      );\n      setItems(items);\n    }\n  });\n\n  return (\n    <Table\n      aria-label=\"Droppable table\"\n      dragAndDropHooks={dragAndDropHooks}>\n      <TableHeader>\n        <Column>Image</Column>\n        <Column isRowHeader>Name</Column>\n        <Column>Type</Column>\n        <Column>Last Modified</Column>\n      </TableHeader>\n      <TableBody items={items} renderEmptyState={() => 'Drop images here'}>\n        {item => (\n          <Row>\n            <Cell><img src={item.url} /></Cell>\n            <Cell>{item.name}</Cell>\n            <Cell>{item.type}</Cell>\n            <Cell>{new Date(item.lastModified).toLocaleString()}</Cell>\n          </Row>\n        )}\n      </TableBody>\n    </Table>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Calendar Value Display Component\nDESCRIPTION: Component that displays the currently selected calendar date using CalendarStateContext\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Calendar.mdx#2025-04-23_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nimport {CalendarStateContext} from 'react-aria-components';\nimport {useDateFormatter} from 'react-aria';\n\nfunction CalendarValue() {\n  let state = React.useContext(CalendarStateContext)!;\n  let date = state.value?.toDate(getLocalTimeZone());\n  let {format} = useDateFormatter();\n  let formatted = date ? format(date) : 'None';\n  return <small>Selected date: {formatted}</small>;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Non-Contiguous Ranges in DateRangePicker\nDESCRIPTION: Implementation of DateRangePicker that allows selecting ranges that include unavailable dates using allowsNonContiguousRanges prop. This example prevents selecting weekends but allows selecting ranges that span multiple weeks.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DateRangePicker.mdx#2025-04-23_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport {isWeekend} from '@internationalized/date';\nimport {useLocale} from '@react-aria/i18n';\n\nfunction Example() {\n  let {locale} = useLocale();\n\n  return (\n    <MyDateRangePicker\n      label=\"Time off request\"\n      isDateUnavailable={date => isWeekend(date, locale)}\n      allowsNonContiguousRanges />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Marking Dates as Unavailable in DatePicker using 'isDateUnavailable' in React Aria Components (TSX)\nDESCRIPTION: Illustrates using the `isDateUnavailable` prop on `MyDatePicker` to define dates that cannot be selected. The prop takes a callback function that returns `true` for unavailable dates. This example marks weekends (using `isWeekend` from `@internationalized/date` and `useLocale` from `@react-aria/i18n`) and specific date ranges as unavailable. It also uses `minValue` to disable past dates.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DatePicker.mdx#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\nimport {today, isWeekend} from '@internationalized/date';\nimport {useLocale} from '@react-aria/i18n';\n\nfunction Example() {\n  let now = today(getLocalTimeZone());\n  let disabledRanges = [\n    [now, now.add({days: 5})],\n    [now.add({days: 14}), now.add({days: 16})],\n    [now.add({days: 23}), now.add({days: 24})],\n  ];\n\n  let {locale} = useLocale();\n  let isDateUnavailable = (date: DateValue) => isWeekend(date, locale) || disabledRanges.some((interval) => date.compare(interval[0]) >= 0 && date.compare(interval[1]) <= 0);\n\n  return (\n    <MyDatePicker\n      label=\"Appointment date\"\n      minValue={today(getLocalTimeZone())}\n      /*- begin highlight -*/\n      isDateUnavailable={isDateUnavailable}\n      /*- end highlight -*/\n    />\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Integrating DateField with HTML Forms in React\nDESCRIPTION: This example shows how to use the name prop to integrate the DateField component with HTML forms. The value will be submitted as an ISO 8601 formatted string.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DateField.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<MyDateField label=\"Birth date\" name=\"birthday\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Cell Component with Tailwind in React Aria Components\nDESCRIPTION: A custom Cell component implementation (StockCell) that extends the base Cell component with Tailwind CSS styling. It includes padding, text truncation, and focus styling that adapts based on row selection state.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/stock-table.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nfunction StockCell(props: CellProps) {\n  return <Cell {...props} className={`px-4 py-2 truncate ${props.className} focus-visible:outline focus-visible:outline-2 focus-visible:outline-slate-600 focus-visible:-outline-offset-4 group-selected:focus-visible:outline-white`} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Validation for ColorField in React\nDESCRIPTION: This snippet demonstrates how to add validation to a ColorField component using the isRequired prop and FieldError element.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorField.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Form, FieldError, Button} from 'react-aria-components';\n\n<Form>\n  <ColorField name=\"color\" isRequired>\n    <Label>Color</Label>\n    <Input />\n    <FieldError />\n  </ColorField>\n  <Button type=\"submit\">Submit</Button>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Using SelectAllListBox Component with React Aria Components in TypeScript\nDESCRIPTION: This example shows how to use the SelectAllListBox component with a Checkbox and ListBox from React Aria Components. It demonstrates the implementation of a select-all functionality for a list of ice cream flavors.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ListBox.mdx#2025-04-23_snippet_45\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Checkbox} from 'react-aria-components';\n\n<SelectAllListBox>\n  <Checkbox style={{marginBottom: '8px'}}>\n    <div className=\"checkbox\">\n      <svg viewBox=\"0 0 18 18\" aria-hidden=\"true\">\n        <polyline points=\"1 9 7 14 15 4\" />\n      </svg>\n    </div>\n    Unsubscribe\n  </Checkbox>\n  <ListBox selectionMode=\"multiple\" aria-label=\"Ice cream flavors\">\n    <ListBoxItem>Chocolate</ListBoxItem>\n    <ListBoxItem>Mint</ListBoxItem>\n    <ListBoxItem>Strawberry</ListBoxItem>\n    <ListBoxItem>Vanilla</ListBoxItem>\n  </ListBox>\n</SelectAllListBox>\n```\n\n----------------------------------------\n\nTITLE: Styling React Aria Components with Tailwind CSS Data Attributes\nDESCRIPTION: Shows how to style React Aria components using Tailwind CSS data attribute modifiers to apply different styles based on component states.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/styling.mdx#2025-04-23_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<ListBoxItem className=\"data-[selected]:bg-blue-400 data-[disabled]:bg-gray-100\">\n  Item\n</ListBoxItem>\n```\n\n----------------------------------------\n\nTITLE: Creating a RangeCalendarValue Component using RangeCalendarStateContext in React\nDESCRIPTION: This snippet demonstrates how to create a RangeCalendarValue component that accesses the RangeCalendar's state through RangeCalendarStateContext. It formats and displays the currently selected date range using useDateFormatter from react-aria and integrates with the RangeCalendar component.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/RangeCalendar.mdx#2025-04-23_snippet_29\n\nLANGUAGE: tsx\nCODE:\n```\nimport {RangeCalendarStateContext} from 'react-aria-components';\nimport {useDateFormatter} from 'react-aria';\n\nfunction RangeCalendarValue() {\n  /*- begin highlight -*/\n  let state = React.useContext(RangeCalendarStateContext)!;\n  /*- end highlight -*/\n  let start = state.value?.start.toDate(getLocalTimeZone());\n  let end = state.value?.end.toDate(getLocalTimeZone());\n  let formatted = start && end ? useDateFormatter().formatRange(start, end) : 'None';\n  return <small>Selected date range: {formatted}</small>;\n}\n\n<RangeCalendar>\n  <header>\n    <Button slot=\"previous\">◀</Button>\n    <Heading />\n    <Button slot=\"next\">▶</Button>\n  </header>\n  <CalendarGrid>\n    {date => <CalendarCell date={date} />}\n  </CalendarGrid>\n  {/*- begin highlight -*/}\n  <RangeCalendarValue />\n  {/*- end highlight -*/}\n</RangeCalendar>\n```\n\n----------------------------------------\n\nTITLE: Using EyeDropper API with ColorPicker via Context (tsx)\nDESCRIPTION: Demonstrates advanced customization by integrating the browser's EyeDropper API. A custom button component (`EyeDropperButton`) accesses the `ColorPicker`'s state via `ColorPickerStateContext` (obtained using `React.useContext`). When the button is pressed, it opens the EyeDropper, and upon color selection, updates the `ColorPicker`'s state using `state.setColor` and `parseColor`. This requires browser support for the EyeDropper API and custom components like `MyColorPicker`, `MyColorArea`, `MyColorSlider`, and potentially a custom `Button`.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorPicker.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ColorPickerStateContext, parseColor} from 'react-aria-components';\nimport SamplerIcon from '@spectrum-icons/workflow/Sampler';\n\nfunction EyeDropperButton() {\n  let state = React.useContext(ColorPickerStateContext)!;\n\n  // Check browser support.\n  // @ts-ignore\n  if (typeof EyeDropper === 'undefined') {\n    return 'EyeDropper is not supported in your browser.';\n  }\n\n  return (\n    <Button\n      aria-label=\"Eye dropper\"\n      style={{alignSelf: 'start'}}\n      onPress={() => {\n        // @ts-ignore\n        new EyeDropper().open().then(result => state.setColor(parseColor(result.sRGBHex)));\n      }}>\n      <SamplerIcon size=\"S\" />\n    </Button>\n  );\n}\n\n<MyColorPicker label=\"Color\" defaultValue=\"#345\">\n  <MyColorArea colorSpace=\"hsb\" xChannel=\"saturation\" yChannel=\"brightness\" />\n  <MyColorSlider colorSpace=\"hsb\" channel=\"hue\" />\n  <EyeDropperButton />\n</MyColorPicker>\n```\n\n----------------------------------------\n\nTITLE: Configuring Disabled Behavior in GridList with React Aria Components\nDESCRIPTION: Example of setting disabledBehavior to 'selection' on a GridList to allow certain interactions like focus, dragging, or actions on disabled items while preventing selection.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/GridList.mdx#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\n<MyGridList\n  aria-label=\"List with disabled rows\" selectionMode=\"multiple\"\n  disabledBehavior=\"selection\"\n>\n  <MyItem>Charizard</MyItem>\n  <MyItem>Blastoise</MyItem>\n  <MyItem isDisabled>Venusaur</MyItem>\n  <MyItem>Pikachu</MyItem>\n</MyGridList>\n```\n\n----------------------------------------\n\nTITLE: Popover with Custom Container Padding (React Aria, TypeScript/JSX)\nDESCRIPTION: This snippet demonstrates how to enforce a minimum pixel gap between a popover and the browser window edge using the containerPadding prop. A button triggers the popover, which is placed above and maintains at least 50px from the viewport edge. Requires DialogTrigger, Button, and MyPopover components. Inputs are placement and containerPadding props, and output is a properly constrained popover.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Popover.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<DialogTrigger>\n  <Button>Container padding</Button>\n  <MyPopover placement=\"top\" containerPadding={50}>\n    This is a popover.\n  </MyPopover>\n</DialogTrigger>\n```\n\n----------------------------------------\n\nTITLE: Building Custom Checkbox with React Aria Hooks and Context (TSX)\nDESCRIPTION: Demonstrates building a custom checkbox component (`MyCheckbox`) by dropping down to the React Aria Hooks API. It uses `useContextProps` to merge props passed via `CheckboxContext`, `useToggleState` from `react-stately` for state management, and `useCheckbox` from `react-aria` to get necessary input props and accessibility attributes, allowing for fine-grained control over behavior and DOM structure.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Checkbox.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {CheckboxProps} from 'react-aria-components';\nimport {CheckboxContext, useContextProps} from 'react-aria-components';\nimport {useToggleState} from 'react-stately';\nimport {useCheckbox} from 'react-aria';\n\nconst MyCheckbox = React.forwardRef((props: CheckboxProps, ref: React.ForwardedRef<HTMLInputElement>) => {\n  // Merge the local props and ref with the ones provided via context.\n  ///- begin highlight -///\n  [props, ref] = useContextProps(props, ref, CheckboxContext);\n  ///- end highlight -///\n\n  let state = useToggleState(props);\n  let {inputProps} = useCheckbox(props, state, ref);\n  return <input {...inputProps} ref={ref} />;\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Horizontal ListBox Layout\nDESCRIPTION: Creates a horizontal ListBox component with multiple selection enabled, displaying album cards with images and text.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ListBox.mdx#2025-04-23_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\n<ListBox\n  aria-label=\"Albums\"\n  orientation=\"horizontal\"\n  items={albums}\n  selectionMode=\"multiple\">\n  {item => (\n    <ListBoxItem textValue={item.title}>\n      <img src={item.image} alt=\"\" />\n      <Text slot=\"label\">{item.title}</Text>\n      <Text slot=\"description\">{item.artist}</Text>\n    </ListBoxItem>\n  )}\n</ListBox>\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Messages in RangeCalendar\nDESCRIPTION: Example of implementing validation and error messages for date range selection with a maximum duration constraint of one week.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/RangeCalendar.mdx#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport {today} from '@internationalized/date';\n\nfunction Example() {\n  let [range, setRange] = React.useState({\n    start: today(getLocalTimeZone()),\n    end: today(getLocalTimeZone()).add({ weeks: 1, days: 3 })\n  });\n  let isInvalid = range.end.compare(range.start) > 7;\n\n  return (\n    <MyRangeCalendar\n      aria-label=\"Trip dates\"\n      value={range}\n      onChange={setRange}\n      isInvalid={isInvalid}\n      errorMessage={isInvalid ? 'Maximum stay duration is 1 week' : undefined}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom ListBox Item Components\nDESCRIPTION: Example of creating a wrapper component to customize ListBox items with additional props and styling.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ListBox.mdx#2025-04-23_snippet_43\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MyItem(props) {\n  return <ListBoxItem {...props} className=\"my-item\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Handling onChange Events in ColorPicker (tsx)\nDESCRIPTION: Illustrates how to use the `onChange` event handler prop for a `ColorPicker` component. The handler receives a `Color` object, which is used to update the component's state via `React.useState`. The selected color value is then displayed as an HSL string in a separate paragraph element.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorPicker.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [value, setValue] = React.useState(parseColor('hsl(50, 100%, 50%)'));\n\n  return (\n    <div>\n      <MyColorPicker\n        label=\"Color\"\n        value={value}\n        onChange={setValue} />\n      <p>Selected color: {value.toString('hsl')}</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Render Props with ToggleButton for Dynamic Content\nDESCRIPTION: Example of using render props to dynamically change the children of a ToggleButton based on its selection state.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ToggleButton.mdx#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<ToggleButton>\n  {({isSelected}) => (\n    <>\n      {isSelected ? <PinnedIcon /> : <UnpinnedIcon />}\n      Pin\n    </>\n  )}\n</ToggleButton>\n```\n\n----------------------------------------\n\nTITLE: Custom Modal Overlay Implementation\nDESCRIPTION: Demonstrates implementation of a custom modal overlay with backdrop blur effect.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Modal.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ModalOverlay} from 'react-aria-components';\n\n<DialogTrigger>\n  <Button>Open modal</Button>\n  <ModalOverlay className=\"my-overlay\">\n    <Modal className=\"my-modal\">\n      <Dialog>\n        <Heading slot=\"title\">Notice</Heading>\n        <p>This is a modal with a custom modal overlay.</p>\n        <Button slot=\"close\">Close</Button>\n      </Dialog>\n    </Modal>\n  </ModalOverlay>\n</DialogTrigger>\n```\n\n----------------------------------------\n\nTITLE: Implementing Item Insertion with Drag and Drop in React Aria Tables\nDESCRIPTION: This example shows how to enable dropping between items using the onInsert event. It includes parsing text data from the dragged items and inserting them before or after the target item.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Table.mdx#2025-04-23_snippet_30\n\nLANGUAGE: tsx\nCODE:\n```\nimport {isTextDropItem} from 'react-aria-components';\n\nfunction Example() {\n  let list = useListData({\n    initialItems: [\n      {id: 1, name: 'Bulbasaur', type: 'Grass, Poison', level: '65'},\n      {id: 2, name: 'Charmander', type: 'Fire', level: '89'},\n      {id: 3, name: 'Squirtle', type: 'Water', level: '77'},\n      {id: 4, name: 'Caterpie', type: 'Bug', level: '46'}\n    ]\n  });\n\n  let { dragAndDropHooks } = useDragAndDrop({\n    async onInsert(e) {\n      let items = await Promise.all(e.items.filter(isTextDropItem).map(async item => {\n        let {name, type, level} = JSON.parse(await item.getText('pokemon'));\n        return {id: Math.random(), name, type, level};\n      }));\n\n      if (e.target.dropPosition === 'before') {\n        list.insertBefore(e.target.key, ...items);\n      } else if (e.target.dropPosition === 'after') {\n        list.insertAfter(e.target.key, ...items);\n      }\n    }\n  });\n\n  return (\n    <div style={{display: 'flex', gap: 12, flexWrap: 'wrap'}}>\n      <DraggableTable />\n      <PokemonTable items={list.items} dragAndDropHooks={dragAndDropHooks} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Styling DateSegment Based on Data Attributes using CSS\nDESCRIPTION: Illustrates how to style the `DateSegment` component based on its state using CSS data attribute selectors like `[data-placeholder]` and `[data-readonly]`. These attributes are provided by React Aria components.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/TimeField.mdx#2025-04-23_snippet_18\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-DateSegment[data-placeholder] {\n  /* ... */\n}\n\n.react-aria-DateSegment[data-readonly] {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GridList with Selection and Buttons in React\nDESCRIPTION: This example demonstrates how to create a GridList with selectable items and buttons using React Aria Components. It includes checkboxes for selection and info buttons for each item.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/GridList.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {GridList, GridListItem, Button} from 'react-aria-components';\nimport {MyCheckbox} from './Checkbox';\n\n<GridList aria-label=\"Favorite pokemon\" selectionMode=\"multiple\">\n  <GridListItem textValue=\"Charizard\">\n    <MyCheckbox slot=\"selection\" />\n    Charizard\n    <Button aria-label=\"Info\">ⓘ</Button>\n  </GridListItem>\n  <GridListItem textValue=\"Blastoise\">\n    <MyCheckbox slot=\"selection\" />\n    Blastoise\n    <Button aria-label=\"Info\">ⓘ</Button>\n  </GridListItem>\n  <GridListItem textValue=\"Venusaur\">\n    <MyCheckbox slot=\"selection\" />\n    Venusaur\n    <Button aria-label=\"Info\">ⓘ</Button>\n  </GridListItem>\n  <GridListItem textValue=\"Pikachu\">\n    <MyCheckbox slot=\"selection\" />\n    Pikachu\n    <Button aria-label=\"Info\">ⓘ</Button>\n  </GridListItem>\n</GridList>\n```\n\n----------------------------------------\n\nTITLE: Basic TextField Implementation in React Aria\nDESCRIPTION: Basic example showing how to implement a TextField component with Label and Input elements.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/TextField.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {TextField, Label, Input} from 'react-aria-components';\n\n<TextField>\n  <Label>First name</Label>\n  <Input />\n</TextField>\n```\n\n----------------------------------------\n\nTITLE: Custom Calendar Grid Implementation\nDESCRIPTION: Example showing how to customize Calendar grid headers and cells with custom styling.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Calendar.mdx#2025-04-23_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport {CalendarGridHeader, CalendarHeaderCell, CalendarGridBody} from 'react-aria-components';\n\n<Calendar aria-label=\"Appointment date\">\n  <header>\n    <Button slot=\"previous\">◀</Button>\n    <Heading />\n    <Button slot=\"next\">▶</Button>\n  </header>\n  <CalendarGrid>\n    <CalendarGridHeader>\n      {day => <CalendarHeaderCell style={{color: 'var(--blue)'}}>{day}</CalendarHeaderCell>}\n    </CalendarGridHeader>\n    <CalendarGridBody>\n      {date => <CalendarCell date={date} />}\n    </CalendarGridBody>\n  </CalendarGrid>\n</Calendar>\n```\n\n----------------------------------------\n\nTITLE: Customizing CalendarGrid with Custom Headers in React Aria Components\nDESCRIPTION: This example demonstrates how to customize a CalendarGrid by explicitly rendering CalendarGridHeader and CalendarGridBody components with custom styling for header cells.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/RangeCalendar.mdx#2025-04-23_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nimport {CalendarGridHeader, CalendarHeaderCell, CalendarGridBody} from 'react-aria-components';\n\n<RangeCalendar aria-label=\"Trip dates\">\n  <header>\n    <Button slot=\"previous\">◀</Button>\n    <Heading />\n    <Button slot=\"next\">▶</Button>\n  </header>\n  <CalendarGrid>\n    <CalendarGridHeader>\n      {day => <CalendarHeaderCell style={{color: 'var(--blue)'}}>{day}</CalendarHeaderCell>}\n    </CalendarGridHeader>\n    <CalendarGridBody>\n      {date => <CalendarCell date={date} />}\n    </CalendarGridBody>\n  </CalendarGrid>\n</RangeCalendar>\n```\n\n----------------------------------------\n\nTITLE: Step-Based Slider with Currency Formatting\nDESCRIPTION: Demonstrates implementing a slider with step increments of 5 between 0 and 100, formatted as USD currency.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Slider.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<MySlider\n  label=\"Amount\"\n  formatOptions={{style: 'currency', currency: 'USD'}}\n  minValue={0}\n  maxValue={100}\n  step={5} />\n```\n\n----------------------------------------\n\nTITLE: Disallow Empty Selection in a Table - React Aria Components - TypeScript\nDESCRIPTION: This example illustrates using the FileTable component with selectionMode set to 'single', initializing the selection with one row and preventing users from reducing the selection to zero via disallowEmptySelection. It requires FileTable and all corresponding React Aria infrastructure. The main input is the disallowEmptySelection prop set to true; as a result, users cannot deselect all rows once a selection has been made.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Table.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<FileTable selectionMode=\"single\" defaultSelectedKeys={[2]} disallowEmptySelection />\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Single Month Page Behavior in Multi-month Calendar\nDESCRIPTION: This example demonstrates how to use the pageBehavior prop to control navigation between months in a multi-month calendar. It sets pageBehavior to 'single' for one-month-at-a-time navigation.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Calendar.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<Calendar aria-label=\"Appointment date\" visibleDuration={{months: 3}} pageBehavior=\"single\">\n  <header>\n    <Button slot=\"previous\">◀</Button>\n    <Heading />\n    <Button slot=\"next\">▶</Button>\n  </header>\n  <div style={{display: 'flex', gap: 30, overflow: 'auto'}}>\n    <CalendarGrid>\n      {date => <CalendarCell date={date} />}\n    </CalendarGrid>\n    <CalendarGrid offset={{months: 1}}>\n      {date => <CalendarCell date={date} />}\n    </CalendarGrid>\n    <CalendarGrid offset={{months: 2}}>\n      {date => <CalendarCell date={date} />}\n    </CalendarGrid>\n  </div>\n</Calendar>\n```\n\n----------------------------------------\n\nTITLE: Implementing Read-only NumberField in React Aria\nDESCRIPTION: Example showing how to create a read-only NumberField component using the isReadOnly prop.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/NumberField.mdx#2025-04-23_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\n<MyNumberField label=\"Read only\" isReadOnly value={32} />\n```\n\n----------------------------------------\n\nTITLE: Testing ComboBox with React Aria Test Utils\nDESCRIPTION: Example of using @react-aria/test-utils to test ComboBox interactions, demonstrating keyboard-based option selection and state verification.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ComboBox.mdx#2025-04-23_snippet_38\n\nLANGUAGE: ts\nCODE:\n```\n// Combobox.test.ts\nimport {render} from '@testing-library/react';\nimport {User} from '@react-aria/test-utils';\n\nlet testUtilUser = new User({interactionType: 'mouse'});\n// ...\n\nit('ComboBox can select an option via keyboard', async function () {\n  // Render your test component/app and initialize the combobox tester\n  let {getByTestId} = render(\n    <ComboBox data-testid=\"test-combobox\">\n      ...\n    </ComboBox>\n  );\n  let comboboxTester = testUtilUser.createTester('ComboBox', {root: getByTestId('test-combobox'), interactionType: 'keyboard'});\n\n  await comboboxTester.open();\n  expect(comboboxTester.listbox).toBeInTheDocument();\n\n  let options = comboboxTester.options();\n  await comboboxTester.selectOption({option: options[0]});\n  expect(comboboxTester.combobox.value).toBe('One');\n  expect(comboboxTester.listbox).not.toBeInTheDocument();\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Tooltip Implementation in React Aria\nDESCRIPTION: Demonstrates the basic implementation of a tooltip with an overlay arrow using React Aria Components.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Tooltip.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {TooltipTrigger, Tooltip, OverlayArrow, Button} from 'react-aria-components';\n\n<TooltipTrigger>\n  <Button>✏️</Button>\n  <Tooltip>\n    <OverlayArrow>\n      <svg width={8} height={8} viewBox=\"0 0 8 8\"><path d=\"M0 0 L4 4 L8 0\" /></svg>\n    </OverlayArrow>\n    Edit\n  </Tooltip>\n</TooltipTrigger>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Checkbox Component Compatible with React Aria Table\nDESCRIPTION: This example demonstrates how to create a custom Checkbox component that is compatible with React Aria Table by consuming the CheckboxContext and using React Aria hooks.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Table.mdx#2025-04-23_snippet_50\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {CheckboxProps} from 'react-aria-components';\nimport {CheckboxContext, useContextProps} from 'react-aria-components';\nimport {useToggleState} from 'react-stately';\nimport {useCheckbox} from 'react-aria';\n\nconst MyCustomCheckbox = React.forwardRef((props: CheckboxProps, ref: React.ForwardedRef<HTMLInputElement>) => {\n  [props, ref] = useContextProps(props, ref, CheckboxContext);\n\n  let state = useToggleState(props);\n  let {inputProps} = useCheckbox(props, state, ref);\n  return <input {...inputProps} ref={ref} />;\n});\n```\n\n----------------------------------------\n\nTITLE: Advanced Slider Context Implementation\nDESCRIPTION: Demonstrates creating a custom slider description component using React Aria contexts and hooks.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Slider.mdx#2025-04-23_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nfunction SliderDescription({children, description}: SliderDescriptionProps) {\n  let descriptionId = useId();\n  return (\n    <div>\n      <SliderContext.Provider value={{'aria-describedby': descriptionId}}>\n        {children}\n      </SliderContext.Provider>\n      <small id={descriptionId}>{description}</small>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Styling with Utility Classes\nDESCRIPTION: Shows how to use className as a function to apply conditional styling based on component state, particularly useful with Tailwind CSS.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ProgressBar.mdx#2025-04-23_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n<ProgressBar className={({percentage}) => percentage > 50 ? 'bg-green-400' : 'bg-yellow-100'}>\n  Item\n</ProgressBar>\n```\n\n----------------------------------------\n\nTITLE: Handling Slider Value Change on Drag End in TSX\nDESCRIPTION: Demonstrates using the `onChangeEnd` event handler for a Slider. Instead of updating the state on every small movement (`onChange`), this example updates the state variable (`value`) only when the user finishes dragging the thumb and releases it. The `defaultValue` prop sets the initial state.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Slider.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [value, setValue] = React.useState(25);\n  return (\n    <>\n      <MySlider<number>\n        label=\"Cookies to buy\"\n        defaultValue={value}\n        onChangeEnd={setValue} />\n      <p>Current value: {value}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Empty State in GridList with renderEmptyState\nDESCRIPTION: Example of using the renderEmptyState prop to customize what the GridList displays when there are no items, showing a simple message when the list is empty.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/GridList.mdx#2025-04-23_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\n<GridList\n  aria-label=\"Search results\"\n  renderEmptyState={() => 'No results found.'}\n>\n  {[]}\n</GridList>\n```\n\n----------------------------------------\n\nTITLE: Testing React Aria Select Component with Test Utils\nDESCRIPTION: This code demonstrates how to use @react-aria/test-utils to test the Select component. It shows how to create a test that verifies a user can select an option via keyboard interaction.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Select.mdx#2025-04-23_snippet_26\n\nLANGUAGE: ts\nCODE:\n```\n// Select.test.ts\nimport {render} from '@testing-library/react';\nimport {User} from '@react-aria/test-utils';\n\nlet testUtilUser = new User({interactionType: 'mouse'});\n// ...\n\nit('Select can select an option via keyboard', async function () {\n  // Render your test component/app and initialize the select tester\n  let {getByTestId} = render(\n    <Select data-testid=\"test-select\">\n     ...\n    </Select>\n  );\n  let selectTester = testUtilUser.createTester('Select', {root: getByTestId('test-select'), interactionType: 'keyboard'});\n  let trigger = selectTester.trigger;\n  expect(trigger).toHaveTextContent('Select an item');\n\n  await selectTester.selectOption({option: 'Cat'});\n  expect(trigger).toHaveTextContent('Cat');\n});\n```\n\n----------------------------------------\n\nTITLE: Dynamically Styling React Aria Checkbox with Functional className (JSX)\nDESCRIPTION: Demonstrates using a function as the value for the `className` prop. The function receives the component's state (e.g., `isPressed`) and returns a class string dynamically, often used with utility CSS libraries like Tailwind.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Checkbox.mdx#2025-04-23_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<Checkbox className={({isPressed}) => isPressed ? 'bg-gray-700' : 'bg-gray-600'} />\n```\n\n----------------------------------------\n\nTITLE: Creating a ButtonGroup with Context in React Aria Components\nDESCRIPTION: Advanced example demonstrating how to create a ButtonGroup component that uses ToggleButtonContext to provide props to child buttons.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ToggleButton.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ToggleButtonContext} from 'react-aria-components';\n\ninterface ButtonGroupProps {\n  children?: React.ReactNode,\n  isDisabled?: boolean\n}\n\nfunction ButtonGroup({children, isDisabled}: ButtonGroupProps) {\n  return (\n    <div style={{display: 'flex', gap: 8}}>\n      <ToggleButtonContext.Provider value={{isDisabled}}>\n        {children}\n      </ToggleButtonContext.Provider>\n    </div>\n  );\n}\n\n<ButtonGroup isDisabled>\n  <ToggleButton isSelected aria-label=\"Favorite\">★</ToggleButton>\n  <ToggleButton aria-label=\"Flag\">⚑</ToggleButton>\n</ButtonGroup>\n```\n\n----------------------------------------\n\nTITLE: Creating Framer Motion Wrappers for React Aria Components\nDESCRIPTION: Code to create Framer Motion wrappers for React Aria Components, enabling the use of Framer Motion's animation props with Modal and ModalOverlay components.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/styling.mdx#2025-04-23_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Modal, ModalOverlay} from 'react-aria-components';\nimport {motion} from 'framer-motion';\n\n// Create Framer Motion wrappers.\nconst MotionModal = motion(Modal);\nconst MotionModalOverlay = motion(ModalOverlay);\n```\n\n----------------------------------------\n\nTITLE: Implementing Disabled Items in ListBox\nDESCRIPTION: Shows how to disable individual items in a ListBox using the isDisabled prop and disabledKeys prop for dynamic collections.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ListBox.mdx#2025-04-23_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let options = [\n    { id: 1, name: 'Aardvark' },\n    { id: 2, name: 'Cat' },\n    { id: 3, name: 'Dog' },\n    { id: 4, name: 'Kangaroo' },\n    { id: 5, name: 'Koala' },\n    { id: 6, name: 'Penguin' },\n    { id: 7, name: 'Snake' },\n    { id: 8, name: 'Turtle' },\n    { id: 9, name: 'Wombat' }\n  ];\n\n  return (\n    <ListBox\n      aria-label=\"Animals with disabledKeys\"\n      items={options}\n      selectionMode=\"single\"\n      disabledKeys={[4, 6]}\n    >\n      {(item) => <ListBoxItem>{item.name}</ListBoxItem>}\n    </ListBox>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Drag Preview in React Aria Components\nDESCRIPTION: This snippet demonstrates how to create a custom drag preview using the renderDragPreview function in useDragAndDrop hook. It shows the number of items being dragged alongside the first item's name.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/GridList.mdx#2025-04-23_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useListData} from 'react-stately';\nimport {useDragAndDrop} from 'react-aria-components';\n\nfunction Example() {\n  let {dragAndDropHooks} = useDragAndDrop({\n    // ...\n    renderDragPreview(items) {\n      return (\n        <div className=\"drag-preview\">\n          {items[0]['text/plain']}\n          <span className=\"badge\">{items.length}</span>\n        </div>\n      );\n    }\n  });\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Step Increments in NumberField using `step` Prop in React (TSX)\nDESCRIPTION: Shows how the `step` prop controls the value increments for the `NumberField`. Examples include basic stepping (e.g., `step={10}`), stepping from a `minValue` (e.g., `minValue={2}, step={3}` resulting in steps 2, 5, 8...), and stepping within a defined range (`minValue`, `maxValue`, `step`). Values typed between steps are snapped to the nearest step on blur.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/NumberField.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n<MyNumberField\n  label=\"Step\"\n  step={10} />\n<MyNumberField\n  label=\"Step + minValue\"\n  minValue={2}\n  step={3} />\n<MyNumberField\n  label=\"Step + minValue + maxValue\"\n  minValue={2}\n  maxValue={21}\n  step={3} />\n```\n```\n\n----------------------------------------\n\nTITLE: Controlled Popover Open State with External Trigger and Ref (React Aria, TypeScript/JSX)\nDESCRIPTION: This TypeScript React component (Example) manages the open state of a popover via React state, showing how to control popover visibility programmatically. It positions the popover relative to a custom <span> using the triggerRef prop. Dependencies: React, Button, MyPopover, Heading. Key parameters: isOpen (state), setOpen (state updater), onOpenChange, triggerRef. Inputs are user clicks and internal state; outputs are updated popover visibility and positioning.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Popover.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [isOpen, setOpen] = React.useState(false);\n  let triggerRef = React.useRef(null);\n\n  return (\n    <>\n      <Button onPress={() => setOpen(true)}>Trigger</Button>\n      <span ref={triggerRef} style={{paddingLeft: 12}}>Popover will be positioned relative to me</span>\n      <MyPopover triggerRef={triggerRef} isOpen={isOpen} onOpenChange={setOpen}>\n        <Heading slot=\"title\">Popover</Heading>\n        <div>I'm over here!</div>\n      </MyPopover>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Controlled Checkbox Component with React State\nDESCRIPTION: This example demonstrates how to create a controlled Checkbox component using React state. It shows how to manage the selected state and handle changes.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Checkbox.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [selected, setSelection] = React.useState(false);\n\n  return (\n    <>\n      <MyCheckbox isSelected={selected} onChange={setSelection}>\n        Subscribe\n      </MyCheckbox>\n      <p>{`You are ${selected ? 'subscribed' : 'unsubscribed'}`}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom OptionMenuTrigger Component with React Aria Hooks\nDESCRIPTION: Creates a custom OptionMenuTrigger component that intercepts events from useMenuTrigger so that the menu only opens when the Alt key is held down. It uses Provider to supply contexts needed by Button, Popover, and Menu components.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Menu.mdx#2025-04-23_snippet_32\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ButtonContext, OverlayTriggerStateContext, PopoverContext, MenuContext, Provider} from 'react-aria-components';\nimport {useMenuTriggerState} from 'react-stately';\nimport {useMenuTrigger} from 'react-aria';\n\nfunction OptionMenuTrigger(props: MenuTriggerProps) {\n  let state = useMenuTriggerState(props);\n  let ref = React.useRef(null);\n  let {menuTriggerProps, menuProps} = useMenuTrigger(props, state, ref);\n\n  return (\n    // Provider is a utility that renders multiple context providers without nesting.\n    <Provider\n      values={[\n        [ButtonContext, {\n          ...menuTriggerProps,\n          // Intercept events and only forward to useMenuTrigger if alt key is held.\n          onPressStart: e => e.altKey && menuTriggerProps.onPressStart(e),\n          onPress: e => (e.pointerType !== 'mouse' || e.altKey) && menuTriggerProps.onPress(e),\n          onKeyDown: e => e.altKey && menuTriggerProps.onKeyDown(e),\n          ref,\n          isPressed: state.isOpen\n        }],\n        [OverlayTriggerStateContext, state],\n        [PopoverContext, {triggerRef: ref, placement: 'bottom start'}],\n        [MenuContext, menuProps]\n      ]}>\n      {props.children}\n    </Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling ColorSlider Events with onChange and onChangeEnd\nDESCRIPTION: Example demonstrating how to use both onChange and onChangeEnd events to track the current value during dragging and the final value when the user stops dragging.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorSlider.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [currentValue, setCurrentValue] = React.useState(parseColor('hsl(50, 100%, 50%)'));\n  let [finalValue, setFinalValue] = React.useState(currentValue);\n\n  return (\n    <div>\n      <MyColorSlider\n        value={currentValue}\n        channel=\"hue\"\n        onChange={setCurrentValue}\n        onChangeEnd={setFinalValue} />\n      <p>Current value: {currentValue.toString('hsl')}</p>\n      <p>Final value: {finalValue.toString('hsl')}</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Sections in React Aria ListBox\nDESCRIPTION: This example shows how to create dynamic sections in a ListBox using hierarchical data. It demonstrates the use of the Collection component for rendering child items.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ListBox.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {Selection} from 'react-aria-components';\nimport {Collection} from 'react-aria-components';\n\nfunction Example() {\n  let options = [\n    {name: 'Australian', children: [\n      {id: 2, name: 'Koala'},\n      {id: 3, name: 'Kangaroo'},\n      {id: 4, name: 'Platypus'}\n    ]},\n    {name: 'American', children: [\n      {id: 6, name: 'Bald Eagle'},\n      {id: 7, name: 'Bison'},\n      {id: 8, name: 'Skunk'}\n    ]}\n  ];\n  let [selected, setSelected] = React.useState<Selection>(new Set());\n\n  return (\n    <ListBox\n      aria-label=\"Pick an animal\"\n      items={options}\n      selectedKeys={selected}\n      selectionMode=\"single\"\n      onSelectionChange={setSelected}>\n      {section => (\n        <ListBoxSection id={section.name}>\n          <Header>{section.name}</Header>\n          <Collection items={section.children}>\n            {item => <ListBoxItem>{item.name}</ListBoxItem>}\n          </Collection>\n        </ListBoxSection>\n      )}\n    </ListBox>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping Columns with Custom Sort Indicators - React Aria Components - TypeScript\nDESCRIPTION: This snippet defines a reusable custom Column component in TypeScript that optionally displays a sort indicator arrow depending on the column's sorting state. It expects ColumnProps from react-aria-components and supports display of a Unicode up or down arrow to reflect ascending or descending sort direction, respectively. It requires react-aria-components for type imports and base components. This pattern allows integration of sorting cues in table headers while maintaining accessibility.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Table.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {ColumnProps} from 'react-aria-components';\n\nexport function MyColumn(props: ColumnProps) {\n  return (\n    <Column {...props}>\n      {({allowsSorting, sortDirection}) => <>\n        {props.children}\n        {allowsSorting && (\n          <span aria-hidden=\"true\" className=\"sort-indicator\">\n            {sortDirection === 'ascending' ? '▲' : '▼'}\n          </span>\n        )}\n      </>}\n    </Column>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Dynamic Styling of DateSegment Using State-based ClassName Function in JSX\nDESCRIPTION: Utilizes a function as the className prop of DateSegment to assign classes based on the isPlaceholder state. Enables integration with utility CSS frameworks such as Tailwind for responsive or stateful styling. Expects DateSegment to support stateful className functions.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DateField.mdx#2025-04-23_snippet_24\n\nLANGUAGE: JSX\nCODE:\n```\n<DateSegment className={({isPlaceholder}) => isPlaceholder ? 'bg-gray-300' : 'bg-gray-600'} />\n```\n\n----------------------------------------\n\nTITLE: Disabled Link Example in React Aria\nDESCRIPTION: Implementation of a disabled link using the isDisabled prop. This works for both native and JavaScript-handled links, properly exposing the disabled state to assistive technology.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Link.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<Link isDisabled href=\"https://adobe.com\" target=\"_blank\">Disabled link</Link>\n```\n\n----------------------------------------\n\nTITLE: Implementing RangeCalendar with International Calendar Support in React\nDESCRIPTION: Shows how to use the RangeCalendar component with international calendar support, specifically using the Indian calendar in Hindi. It demonstrates the use of I18nProvider for localization.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/RangeCalendar.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {DateRange} from 'react-aria-components';\nimport {I18nProvider} from '@react-aria/i18n';\n\nfunction Example() {\n  let [range, setRange] = React.useState<DateRange | null>(null);\n  return (\n    <I18nProvider locale=\"hi-IN-u-ca-indian\">\n      <MyRangeCalendar aria-label=\"Date range\" value={range} onChange={setRange} />\n      <p>Start date: {range?.start.toString()}</p>\n      <p>End date: {range?.end.toString()}</p>\n    </I18nProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: React Aria Table with Individual Row Actions\nDESCRIPTION: Shows how to implement individual row actions by applying onAction directly to Row components in a static collection.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Table.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n<Table aria-label=\"Table with onAction applied on the rows directly\" selectionMode=\"multiple\">\n  <MyTableHeader>\n    <Column isRowHeader>Name</Column>\n    <Column>Type</Column>\n    <Column>Level</Column>\n  </MyTableHeader>\n  <TableBody>\n    <MyRow onAction={() => alert(`Opening Charizard`)}>\n      <Cell>Charizard</Cell>\n      <Cell>Fire, Flying</Cell>\n      <Cell>67</Cell>\n    </MyRow>\n    <MyRow onAction={() => alert(`Opening Blastoise`)}>\n      <Cell>Blastoise</Cell>\n      <Cell>Water</Cell>\n      <Cell>56</Cell>\n    </MyRow>\n    <MyRow onAction={() => alert(`Opening Venusaur`)}>\n      <Cell>Venusaur</Cell>\n      <Cell>Grass, Poison</Cell>\n      <Cell>83</Cell>\n    </MyRow>\n    <MyRow onAction={() => alert(`Opening Pikachu`)}>\n      <Cell>Pikachu</Cell>\n      <Cell>Electric</Cell>\n      <Cell>100</Cell>\n    </MyRow>\n  </TableBody>\n</Table>\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled Open State in Select\nDESCRIPTION: Shows how to implement controlled open state behavior in Select component using React state.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Select.mdx#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [open, setOpen] = React.useState(false);\n\n  return (\n    <>\n      <p>Select is {open ? 'open' : 'closed'}</p>\n      <MySelect label=\"Choose frequency\" isOpen={open} onOpenChange={setOpen}>\n        <ListBoxItem id=\"rarely\">Rarely</ListBoxItem>\n        <ListBoxItem id=\"sometimes\">Sometimes</ListBoxItem>\n        <ListBoxItem id=\"always\">Always</ListBoxItem>\n      </MySelect>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Long Press Menu Trigger\nDESCRIPTION: Example of implementing a menu trigger that opens on long press instead of immediate click.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Menu.mdx#2025-04-23_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\n<MenuTrigger trigger=\"longPress\">\n  <Button onPress={() => alert('crop')}>Crop</Button>\n  <Popover>\n    <Menu>\n      <MenuItem>Rotate</MenuItem>\n      <MenuItem>Slice</MenuItem>\n      <MenuItem>Clone stamp</MenuItem>\n    </Menu>\n  </Popover>\n</MenuTrigger>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Class Assignment for ColorSwatchPickerItem Based on Selection State (JSX)\nDESCRIPTION: Demonstrates how to assign a dynamic className for a ColorSwatchPickerItem based on its selected state using a function. This pattern is useful with utility CSS frameworks like Tailwind, enabling conditional border colors. Inputs include the isSelected property received by the className function. Expected output is the rendering of a ColorSwatchPickerItem with an appropriate border class depending on its selected state. Assumes usage within a React/JSX context.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorSwatchPicker.mdx#2025-04-23_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx\\n<ColorSwatchPickerItem className={({isSelected}) => isSelected ? 'border-black' : 'border-transparent'} />\\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing DateField with Controlled and Uncontrolled Values in React\nDESCRIPTION: This example demonstrates how to use the DateField component with both controlled and uncontrolled values. It imports the parseDate function from @internationalized/date to create date objects.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DateField.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseDate} from '@internationalized/date';\n\nfunction Example() {\n  let [value, setValue] = React.useState(parseDate('2020-02-03'));\n\n  return (\n    <>\n      <MyDateField\n        label=\"Date (uncontrolled)\"\n        defaultValue={parseDate('2020-02-03')} />\n      <MyDateField\n        label=\"Date (controlled)\"\n        value={value}\n        onChange={setValue} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom CalendarValue Inside Calendar with React Aria Components in TypeScript\nDESCRIPTION: This snippet illustrates using the previously defined CalendarValue custom component inside a Calendar component. The setup demonstrates how users can compose a Calendar with additional custom elements, as long as those elements consume required context. No explicit dependencies are necessary here beyond react-aria-components and React. Inputs are arbitrary Calendar children; outputs render Calendar and the custom date display.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/advanced.mdx#2025-04-23_snippet_10\n\nLANGUAGE: TSX\nCODE:\n```\n<Calendar>\n  {/* ... */}\n  {/*- begin highlight -*/}\n  <CalendarValue />\n  {/*- end highlight -*/}\n</Calendar>\n```\n\n----------------------------------------\n\nTITLE: Customizing Drop Indicators with renderDropIndicator in React Aria\nDESCRIPTION: Shows how to create a custom drop indicator using the renderDropIndicator function. This allows for custom DOM structure and CSS classes for the drop indicator.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/GridList.mdx#2025-04-23_snippet_31\n\nLANGUAGE: tsx\nCODE:\n```\nimport {DropIndicator} from 'react-aria-components';\n\nfunction Example() {\n  let { dragAndDropHooks } = useDragAndDrop({\n    // ...\n    renderDropIndicator(target) {\n      return (\n        <DropIndicator\n          target={target}\n          className={({isDropTarget}) => `my-drop-indicator ${isDropTarget ? 'active' : ''}`} />\n      );\n    }\n  });\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Heading Component within Dialog in React Aria Components\nDESCRIPTION: This snippet shows how to use the custom MyCustomHeading component within a Dialog, replacing the built-in React Aria Components Heading.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Dialog.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<Dialog>\n  <MyCustomHeading>Dialog title</MyCustomHeading>\n  {/* ... */}\n</Dialog>\n```\n\n----------------------------------------\n\nTITLE: Handling Events and Formatting Dates in RangeCalendar with React\nDESCRIPTION: Shows how to handle the onChange event of RangeCalendar and format the selected date range using the useDateFormatter hook from @react-aria/i18n.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/RangeCalendar.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport {getLocalTimeZone} from '@internationalized/date';\nimport {useDateFormatter} from '@react-aria/i18n';\n\nfunction Example() {\n  let [range, setRange] = React.useState({\n    start: parseDate('2020-07-03'),\n    end: parseDate('2020-07-10')\n  });\n  let formatter = useDateFormatter({dateStyle: 'long'});\n\n  return (\n    <>\n      <MyRangeCalendar aria-label=\"Date range\" value={range} onChange={setRange} />\n      <p>\n        Selected date:{' '}\n        {formatter.formatRange(\n          range.start.toDate(getLocalTimeZone()),\n          range.end.toDate(getLocalTimeZone())\n        )}\n      </p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Drop Operations with onDragEnd in React Aria Components\nDESCRIPTION: Shows how to implement the onDragEnd event handler to respond to drop operations. The example removes dragged items from the source when a move operation is completed, while preserving them during copy operations.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Table.mdx#2025-04-23_snippet_38\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let list = useListData({\n    initialItems: [\n      {id: 1, name: 'Charizard', type: 'Fire, Flying', level: '67'},\n      {id: 2, name: 'Blastoise', type: 'Water', level: '56'},\n      {id: 3, name: 'Venusaur', type: 'Grass, Poison', level: '83'},\n      {id: 4, name: 'Pikachu', type: 'Electric', level: '100'}\n    ]\n  });\n\n  let { dragAndDropHooks } = useDragAndDrop({\n    // ...\n    ///- begin collapse -///\n    renderDragPreview(items) {\n      return (\n        <div className=\"drag-preview\">\n          {items[0]['text/plain']}\n          <span className=\"badge\">{items.length}</span>\n        </div>\n      );\n    },\n    getItems(keys) {\n      return [...keys].map(key => {\n        let item = list.getItem(key);\n        return {\n          'text/plain': item.name,\n          'pokemon': JSON.stringify(item)\n        };\n      });\n    },\n    ///- end collapse -///\n    /*- begin highlight -*/\n    onDragEnd(e) {\n      if (e.dropOperation === 'move') {\n        list.remove(...e.keys);\n      }\n    }\n    /*- end highlight -*/\n  });\n\n  return (\n    <div style={{display: 'flex', gap: 12, flexWrap: 'wrap'}}>\n      <PokemonTable\n        items={list.items}\n        selectionMode=\"multiple\"\n        dragAndDropHooks={dragAndDropHooks} />\n      <DroppableTable />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a DatePickerClearButton Component in TypeScript React\nDESCRIPTION: Example of creating a clear button component for DatePicker using DatePickerStateContext to access and manipulate the picker's state.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DatePicker.mdx#2025-04-23_snippet_27\n\nLANGUAGE: tsx\nCODE:\n```\nimport {DatePickerStateContext} from 'react-aria-components';\n\nfunction DatePickerClearButton() {\n  let state = React.useContext(DatePickerStateContext)!;\n  return (\n    <Button\n      slot={null}\n      className=\"clear-button\"\n      aria-label=\"Clear\"\n      onPress={() => state.setValue(null)}>\n      ✕\n    </Button>\n  );\n}\n\n<DatePicker defaultValue={today(getLocalTimeZone())}>\n  <Label>Date</Label>\n  <Group>\n    <DateInput>\n      {segment => <DateSegment segment={segment} />}\n    </DateInput>\n    <DatePickerClearButton />\n    <Button>▼</Button>\n  </Group>\n  <Popover>\n    <Dialog>\n      <Calendar>\n        <header>\n          <Button slot=\"previous\">◀</Button>\n          <Heading />\n          <Button slot=\"next\">▶</Button>\n        </header>\n        <CalendarGrid>\n          {date => <CalendarCell date={date} />}\n        </CalendarGrid>\n      </Calendar>\n    </Dialog>\n  </Popover>\n</DatePicker>\n```\n\n----------------------------------------\n\nTITLE: Accessing Calendar State via Context with React Aria Components in TypeScript\nDESCRIPTION: This snippet defines a custom CalendarValue component that consumes calendar state from CalendarStateContext (provided by react-aria-components) and formats the selected date using useDateFormatter. It requires dependencies on react-aria-components, react-aria, and @internationalized/date. It expects to be nested inside a Calendar, from which it accesses the current value, formats it (or displays 'None'), and returns a string. The component outputs a formatted date description and assumes the parent provider supplies the necessary context.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/advanced.mdx#2025-04-23_snippet_9\n\nLANGUAGE: TSX\nCODE:\n```\nimport {CalendarStateContext} from 'react-aria-components';\nimport {useDateFormatter} from 'react-aria';\nimport {getLocalTimeZone} from '@internationalized/date';\n\nfunction CalendarValue() {\n  /*- begin highlight -*/\n  let state = React.useContext(CalendarStateContext)!;\n  /*- end highlight -*/\n  let date = state.value?.toDate(getLocalTimeZone());\n  let {format} = useDateFormatter();\n  let formatted = date ? format(date) : 'None';\n  return `Selected date: ${formatted}`;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DateField Granularity in React\nDESCRIPTION: This snippet shows how to set different granularities for the DateField component. It demonstrates displaying the same date value with second and day granularity.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DateField.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [date, setDate] = React.useState(parseAbsoluteToLocal('2021-04-07T18:45:22Z'));\n\n  return (\n    <>\n      <MyDateField\n        label=\"Date and time\"\n        granularity=\"second\"\n        value={date}\n        onChange={setDate} />\n      <MyDateField\n        label=\"Date\"\n        granularity=\"day\"\n        value={date}\n        onChange={setDate} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Components with Context\nDESCRIPTION: Shows how to create custom components that are compatible with React Aria Components by consuming context and using the useContextProps hook.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Select.mdx#2025-04-23_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {LabelProps} from 'react-aria-components';\nimport {LabelContext, useContextProps} from 'react-aria-components';\n\nconst MyCustomLabel = React.forwardRef((props: LabelProps, ref: React.ForwardedRef<HTMLLabelElement>) => {\n  // Merge the local props and ref with the ones provided via context.\n  [props, ref] = useContextProps(props, ref, LabelContext);\n\n  // ... your existing Label component\n  return <label {...props} ref={ref} />;\n});\n\n<Select>\n  <MyCustomLabel>Name</MyCustomLabel>\n  {/* ... */}\n</Select>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Components with useContextProps\nDESCRIPTION: This example shows how to make a custom label component compatible with React Aria Components by consuming the LabelContext. The useContextProps hook merges local props with those provided through context.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorSlider.mdx#2025-04-23_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {LabelProps} from 'react-aria-components';\nimport {LabelContext, useContextProps} from 'react-aria-components';\n\nconst MyCustomLabel = React.forwardRef((props: LabelProps, ref: React.ForwardedRef<HTMLLabelElement>) => {\n  // Merge the local props and ref with the ones provided via context.\n  [props, ref] = useContextProps(props, ref, LabelContext);\n\n  // ... your existing Label component\n  return <label {...props} ref={ref} />;\n});\n```\n\n----------------------------------------\n\nTITLE: SearchField with HTML Form Integration\nDESCRIPTION: Shows how to integrate the SearchField component with HTML forms using the name prop and other input attributes like type, pattern, and inputMode.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/SearchField.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<MySearchField label=\"Email\" name=\"email\" type=\"email\" />\n```\n\n----------------------------------------\n\nTITLE: Handling SearchField Events in React (TSX)\nDESCRIPTION: Demonstrates handling `onChange`, `onSubmit`, and `onClear` events in a custom `MySearchField` component (presumably wrapping `react-aria-components`' `SearchField`). It utilizes React's `useState` hook to manage the current text and the submitted text, updating the UI accordingly based on user interactions.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/SearchField.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [currentText, setCurrentText] = React.useState('');\n  let [submittedText, setSubmittedText] = React.useState('');\n\n  return (\n    <div>\n      <MySearchField\n        onClear={() => setCurrentText('')}\n        onChange={setCurrentText}\n        onSubmit={setSubmittedText}\n        label=\"Your text\"\n        value={currentText}\n      />\n      <p>Mirrored text: {currentText}</p>\n      <p>Submitted text: {submittedText}</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Focused Date in RangeCalendar\nDESCRIPTION: Demonstrates how to control the focused date in a RangeCalendar using state management and reset functionality.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/RangeCalendar.mdx#2025-04-23_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport {CalendarDate} from '@internationalized/date';\n\nfunction Example() {\n  let defaultDate = new CalendarDate(2021, 7, 1);\n  let [focusedDate, setFocusedDate] = React.useState(defaultDate);\n\n  return (\n    <>\n      <button style={{marginBottom: 20}} onClick={() => setFocusedDate(defaultDate)}>Reset focused date</button>\n      <MyRangeCalendar focusedValue={focusedDate} onFocusChange={setFocusedDate} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Controlled ColorSlider Component\nDESCRIPTION: Example showing how to implement a controlled ColorSlider with state management using React's useState hook and the parseColor function to handle color values.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorSlider.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseColor} from 'react-aria-components';\n\nfunction Example() {\n  let [value, setValue] = React.useState(parseColor('hsl(0, 100%, 50%)'));\n  return (\n    <>\n      <MyColorSlider\n        label=\"Hue (controlled)\"\n        value={value}\n        onChange={setValue}\n        channel=\"hue\" />\n      <p>Value: {value.toString('hex')}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating React Aria Select with HTML Forms\nDESCRIPTION: This snippet shows how to integrate the Select component with HTML forms using the name prop, which allows the selected item's id to be submitted to the server.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Select.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<MySelect\n  label=\"Favorite Animal\"\n  name=\"favoriteAnimalId\"\n>\n  <ListBoxItem id=\"panda\">Panda</ListBoxItem>\n  <ListBoxItem id=\"cat\">Cat</ListBoxItem>\n  <ListBoxItem id=\"dog\">Dog</ListBoxItem>\n</MySelect>\n```\n\n----------------------------------------\n\nTITLE: Controlling Popover Placement in React Aria Components\nDESCRIPTION: Example demonstrating different placement options for the Popover component, including start, top, bottom, and end positions which adapt to reading direction.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Popover.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<div style={{display: 'flex', gap: 8}}>\n  <DialogTrigger>\n    <Button>⬅️</Button>\n    <MyPopover placement=\"start\">In left-to-right, this is on the left. In right-to-left, this is on the right.</MyPopover>\n  </DialogTrigger>\n  <DialogTrigger>\n    <Button>⬆️</Button>\n    <MyPopover placement=\"top\">This popover is above the button.</MyPopover>\n  </DialogTrigger>\n  <DialogTrigger>\n    <Button>⬇️</Button>\n    <MyPopover placement=\"bottom\">This popover is below the button.</MyPopover>\n  </DialogTrigger>\n  <DialogTrigger>\n    <Button>➡️</Button>\n    <MyPopover placement=\"end\">In left-to-right, this is on the right. In right-to-left, this is on the left.</MyPopover>\n  </DialogTrigger>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom 4-5-4 Calendar System in React Aria Components\nDESCRIPTION: This example shows how to create a custom calendar system that follows a 4-5-4 format fiscal year. It extends the GregorianCalendar class and overrides necessary methods to implement the custom logic.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Calendar.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {GregorianCalendar} from '@internationalized/date';\n\nfunction Example() {\n  return <MyCalendar firstDayOfWeek=\"sun\" createCalendar={() => new Custom454()} />;\n}\n\nclass Custom454 extends GregorianCalendar {\n  // See @internationalized/date docs linked above...\n  ///- begin collapse -///\n  weekPattern = [4, 5, 4, 4, 5, 4, 4, 5, 4, 4, 5, 4];\n  getDaysInMonth(date) {\n    return this.weekPattern[date.month - 1] * 7;\n  }\n\n  fromJulianDay(jd: number): CalendarDate {\n    let gregorian = super.fromJulianDay(jd);\n\n    let monthStart = startOfWeek(new CalendarDate(gregorian.year, 1, 1), 'en');\n    for (let months = 0; months < this.weekPattern.length; months++) {\n      let weeksInMonth = this.weekPattern[months];\n      let monthEnd = monthStart.add({weeks: weeksInMonth});\n      if (monthEnd.compare(gregorian) > 0) {\n        let days = gregorian.compare(monthStart);\n        return new CalendarDate(this, monthStart.year, months + 1, days + 1);\n      }\n      monthStart = monthEnd;\n    }\n\n    throw Error('Date is not in any month somehow!');\n  }\n\n  toJulianDay(date: AnyCalendarDate): number {\n    let monthStart = startOfWeek(new CalendarDate(date.year, 1, 1), 'en');\n    for (let month = 1; month < date.month; month++) {\n      monthStart = monthStart.add({weeks: this.weekPattern[month - 1]});\n    }\n\n    let gregorian = monthStart.add({days: date.day - 1});\n    return super.toJulianDay(gregorian);\n  }\n\n  getFormattableMonth(date) {\n    let gregorian = toCalendar(date, new GregorianCalendar());\n    return gregorian.set({month: date.month, day: 1});\n  }\n\n  isEqual(other) {\n    return other instanceof Custom454;\n  }\n ///- end collapse -///\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Link Items in ComboBox with ListBoxItem\nDESCRIPTION: Creates a ComboBox with link items that navigate to external websites. Each item uses the href prop to specify the destination URL and target attribute to open in a new tab.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ComboBox.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<MyComboBox label=\"Tech company websites\">\n  <ListBoxItem href=\"https://adobe.com/\" target=\"_blank\">Adobe</ListBoxItem>\n  <ListBoxItem href=\"https://apple.com/\" target=\"_blank\">Apple</ListBoxItem>\n  <ListBoxItem href=\"https://google.com/\" target=\"_blank\">Google</ListBoxItem>\n  <ListBoxItem href=\"https://microsoft.com/\" target=\"_blank\">Microsoft</ListBoxItem>\n</MyComboBox>\n```\n\n----------------------------------------\n\nTITLE: Implementing Disabled Tags in React Aria\nDESCRIPTION: This example shows how to create disabled tags using the isDisabled prop. Disabled tags are not focusable, selectable, or keyboard navigable.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/TagGroup.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<MyTagGroup\n label=\"Sandwich contents\"\n selectionMode=\"multiple\"\n>\n  <MyTag>Lettuce</MyTag>\n  <MyTag>Tomato</MyTag>\n  <MyTag>Cheese</MyTag>\n  <MyTag isDisabled>Tuna Salad</MyTag>\n  <MyTag>Egg Salad</MyTag>\n  <MyTag>Ham</MyTag>\n</MyTagGroup>\n```\n\n----------------------------------------\n\nTITLE: Using Custom OptionMenuTrigger with React Aria Components\nDESCRIPTION: Demonstrates how to use the custom OptionMenuTrigger component with existing React Aria Components like Button, Popover, and Menu. The trigger works with the contexts provided by the custom component.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Menu.mdx#2025-04-23_snippet_33\n\nLANGUAGE: tsx\nCODE:\n```\n<OptionMenuTrigger>\n  <Button>Save</Button>\n  <Popover>\n    <Menu>\n      <MenuItem>Save</MenuItem>\n      <MenuItem>Save as…</MenuItem>\n      <MenuItem>Rename…</MenuItem>\n      <MenuItem>Delete…</MenuItem>\n    </Menu>\n  </Popover>\n</OptionMenuTrigger>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Styling of React Aria Row Component with Tailwind\nDESCRIPTION: This example shows how to dynamically apply Tailwind CSS classes to a React Aria Row component based on its selection state.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Table.mdx#2025-04-23_snippet_46\n\nLANGUAGE: jsx\nCODE:\n```\n<Row className={({isSelected}) => isSelected ? 'bg-blue-400' : 'bg-gray-100'}>\n  {/* ... */}\n</Row>\n```\n\n----------------------------------------\n\nTITLE: Reusable ColorWheel Component\nDESCRIPTION: Implementation of a reusable wrapper component for ColorWheel with consistent styling and behavior\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorWheel.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {ColorWheelProps} from 'react-aria-components';\n\ninterface MyColorWheelProps extends Omit<ColorWheelProps, 'outerRadius' | 'innerRadius'> {}\n\nexport function MyColorWheel(props: MyColorWheelProps) {\n  return (\n    <ColorWheel {...props} outerRadius={100} innerRadius={74}>\n      <ColorWheelTrack />\n      <ColorThumb />\n    </ColorWheel>\n  );\n}\n\n<MyColorWheel defaultValue=\"hsl(30, 100%, 50%)\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Disabled State in Select\nDESCRIPTION: Shows how to implement disabled state for the entire Select component and individual options.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Select.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n<MySelect label=\"Choose frequency\" isDisabled>\n  <ListBoxItem id=\"rarely\">Rarely</ListBoxItem>\n  <ListBoxItem id=\"sometimes\">Sometimes</ListBoxItem>\n  <ListBoxItem id=\"always\">Always</ListBoxItem>\n</MySelect>\n```\n\n----------------------------------------\n\nTITLE: Enabling Manual Keyboard Activation for React Aria Tabs in TSX\nDESCRIPTION: Illustrates how to change the default keyboard interaction behavior. By setting the `keyboardActivation` prop on the `Tabs` component to 'manual', selection does not change automatically when navigating between tabs using arrow keys. Instead, the user must press Enter or Space to activate the focused tab.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Tabs.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<Tabs keyboardActivation=\"manual\">\n  <TabList aria-label=\"Input settings\">\n    <Tab id=\"mouse\">Mouse Settings</Tab>\n    <Tab id=\"keyboard\">Keyboard Settings</Tab>\n    <Tab id=\"gamepad\">Gamepad Settings</Tab>\n  </TabList>\n  <TabPanel id=\"mouse\">Mouse Settings</TabPanel>\n  <TabPanel id=\"keyboard\">Keyboard Settings</TabPanel>\n  <TabPanel id=\"gamepad\">Gamepad Settings</TabPanel>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Tree with Selection-Only Disabled Behavior\nDESCRIPTION: Shows how to implement a Tree where disabled items only affect selection behavior while maintaining other interactions.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Tree.mdx#2025-04-23_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\n<Tree\n  aria-label=\"Tree with disabled items\"\n  style={{height: '100px'}}\n  selectionMode=\"multiple\"\n  defaultExpandedKeys={['bulbasaur']}\n  disabledBehavior=\"selection\"\n>\n  <MyTreeItem id=\"bulbasaur\" title=\"Bulbasaur\">\n    <MyTreeItem id=\"ivysaur\" title=\"Ivysaur\" isDisabled>\n      <MyTreeItem id=\"venusaur\" title=\"Venusaur\" />\n    </MyTreeItem>\n  </MyTreeItem>\n</Tree>\n```\n\n----------------------------------------\n\nTITLE: Integrating SliderThumb with HTML Forms in TSX\nDESCRIPTION: Illustrates how to integrate a SliderThumb component with native HTML forms. By adding the `name` prop to the SliderThumb, its value will be included upon form submission, associating the slider's value with the specified name ('opacity' in this case).\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Slider.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<Slider defaultValue={50}>\n  <Label>Opacity</Label>\n  <SliderOutput />\n  <SliderTrack>\n    {/*- begin highlight -*/}\n    <SliderThumb name=\"opacity\" />\n    {/*- end highlight -*/}\n  </SliderTrack>\n</Slider>\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Labels to ColorSlider in TSX\nDESCRIPTION: This snippet illustrates two ways to provide custom labels for a `ColorSlider`. The first slider uses a child `<Label>` element with custom text ('Background Hue'). The second slider uses the `aria-label` prop ('Background Saturation') directly on the `ColorSlider` component for accessibility.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorSlider.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n<ColorSlider channel=\"hue\" defaultValue=\"hsl(0, 100%, 50%)\">\n  {/*- begin highlight -*/}\n  <Label>Background Hue</Label>\n  {/*- end highlight -*/}\n  <SliderOutput />\n  <SliderTrack>\n    <ColorThumb />\n  </SliderTrack>\n</ColorSlider>\n<ColorSlider\n  /*- begin highlight -*/\n  aria-label=\"Background Saturation\"\n  /*- end highlight -*/\n  channel=\"saturation\"\n  defaultValue=\"hsl(0, 100%, 50%)\">\n  <SliderTrack>\n    <ColorThumb />\n  </SliderTrack>\n</ColorSlider>\n```\n\n----------------------------------------\n\nTITLE: Implementing Non-contiguous Range Selection\nDESCRIPTION: Shows how to enable selection of non-contiguous date ranges by handling weekend restrictions while allowing multi-week selections.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/RangeCalendar.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport {isWeekend} from '@internationalized/date';\nimport {useLocale} from '@react-aria/i18n';\n\nfunction Example() {\n  let {locale} = useLocale();\n\n  return <MyRangeCalendar aria-label=\"Time off request\" isDateUnavailable={date => isWeekend(date, locale)} allowsNonContiguousRanges />\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Selection Control with React Context\nDESCRIPTION: Demonstrates creating a Selectable component that uses ToggleButtonContext and TreeContext to control tree selection mode through a toggle button\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Tree.mdx#2025-04-23_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {SelectionMode} from 'react-aria-components';\nimport {ToggleButtonContext, TreeContext} from 'react-aria-components';\n\nfunction Selectable({children}) {\n  let [isSelected, onChange] = React.useState(false);\n  let selectionMode: SelectionMode = isSelected ? 'multiple' : 'none';\n  return (\n    <ToggleButtonContext.Provider value={{isSelected, onChange}}>\n      <TreeContext.Provider value={{selectionMode}}>\n        {children}\n      </TreeContext.Provider>\n    </ToggleButtonContext.Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: FileTrigger with File Type Restriction\nDESCRIPTION: Example showing how to restrict file selection to specific file types using acceptedFileTypes prop\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/FileTrigger.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<FileTrigger acceptedFileTypes={['image/png']}>\n  <Button>Select files</Button>\n</FileTrigger>\n```\n\n----------------------------------------\n\nTITLE: Using Render Props for Conditional Styling in DateSegment (React/JSX)\nDESCRIPTION: Demonstrates using render props as children of `DateSegment` to conditionally render elements based on the component's state. This example shows how to render the placeholder text in a separate span to reserve space, accessing `text`, `placeholder`, and `isPlaceholder` from the render prop function.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/TimeField.mdx#2025-04-23_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\n<DateSegment>\n  {({text, placeholder, isPlaceholder}) => (\n    <>\n      <span style={{visibility: isPlaceholder ? 'visible' : 'hidden'}}>{placeholder}</span>\n      {isPlaceholder ? '' : text}\n    </>\n  )}\n</DateSegment>\n```\n\n----------------------------------------\n\nTITLE: Select Component Anatomy in React\nDESCRIPTION: This code snippet demonstrates the full anatomy of a Select component, including optional description and error message elements. It shows how to structure the component with various sub-components and slots.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Select.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Select, SelectValue, Label, Button, Popover, ListBox, ListBoxItem, ListBoxSection, Header, Text, FieldError} from 'react-aria-components';\n\n<Select>\n  <Label />\n  <Button>\n    <SelectValue />\n  </Button>\n  <Text slot=\"description\" />\n  <FieldError />\n  <Popover>\n    <ListBox>\n      <ListBoxItem>\n        <Text slot=\"label\" />\n        <Text slot=\"description\" />\n      </ListBoxItem>\n      <ListBoxSection>\n        <Header />\n        <ListBoxItem />\n      </ListBoxSection>\n    </ListBox>\n  </Popover>\n</Select>\n```\n\n----------------------------------------\n\nTITLE: Implementing Item Dropping in React Aria Tables\nDESCRIPTION: This snippet demonstrates how to enable dropping on items using the onItemDrop event handler. When a valid drag hovers over an item, it receives the isDropTarget state which can be styled with CSS.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Table.mdx#2025-04-23_snippet_28\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let { dragAndDropHooks } = useDragAndDrop({\n    onItemDrop(e) {\n      alert(`Dropped on ${e.target.key}`);\n    }\n  });\n\n  return (\n    <div style={{display: 'flex', gap: 12, flexWrap: 'wrap'}}>\n      {/* see above */}\n      <DraggableTable />\n      <FileTable dragAndDropHooks={dragAndDropHooks} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic DateField Component in React Aria Components\nDESCRIPTION: Basic example of implementing a DateField component with Label, DateInput, and DateSegment to create an accessible date input field.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DateField.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {DateField, Label, DateInput, DateSegment} from 'react-aria-components';\n\n<DateField>\n  <Label>Birth date</Label>\n  <DateInput>\n    {segment => <DateSegment segment={segment} />}\n  </DateInput>\n</DateField>\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with Render Props in React Aria Components\nDESCRIPTION: Illustrates using render props as children to conditionally render elements based on component state, such as showing an icon when an item is selected.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/styling.mdx#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<ListBoxItem>\n  {({isSelected}) => (\n    <>\n      {isSelected && <CheckmarkIcon />}\n      <span>Item</span>\n    </>\n  )}\n</ListBoxItem>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Heading Component with HeadingContext in React Aria Components\nDESCRIPTION: This snippet demonstrates how to create a custom heading component that consumes HeadingContext to make it compatible with React Aria Components. It uses the useContextProps hook to merge local props and ref with those provided via context by Dialog.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Dialog.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {HeadingProps} from 'react-aria-components';\nimport {HeadingContext, useContextProps} from 'react-aria-components';\n\nconst MyCustomHeading = React.forwardRef((props: HeadingProps, ref: React.ForwardedRef<HTMLHeadingElement>) => {\n  // Merge the local props and ref with the ones provided via context.\n  [props, ref] = useContextProps(props, ref, HeadingContext);\n\n  // ... your existing Heading component\n  return <h2 {...props} ref={ref} />;\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Description to TimeField in React\nDESCRIPTION: This example shows how to add a description to a TimeField. It uses the description slot to provide additional information about the expected input.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/TimeField.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<TimeField>\n  <Label>Appointment time</Label>\n  <DateInput>\n    {segment => <DateSegment segment={segment} />}\n  </DateInput>\n  <Text slot=\"description\">Please select a time between 9 AM and 5 PM.</Text>\n</TimeField>\n```\n\n----------------------------------------\n\nTITLE: Using KeyboardModalTrigger to Show a Modal on Keyboard Shortcut - JSX\nDESCRIPTION: This hidden JSX example demonstrates how to use the KeyboardModalTrigger component to display a Modal when the user presses the '/' key. The Modal is dismissible and renders a Dialog with a title and a placeholder for a command palette UI. Relies on the KeyboardModalTrigger component defined earlier and React Aria Components for Modal/Dialog integration.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Modal.mdx#2025-04-23_snippet_12\n\nLANGUAGE: JSX\nCODE:\n```\n<KeyboardModalTrigger keyboardShortcut=\"/\">\n  <Modal isDismissable>\n    <Dialog>\n      <Heading slot=\"title\">Command palette</Heading>\n      <p>Your cool command palette UI here!</p>\n    </Dialog>\n  </Modal>\n</KeyboardModalTrigger>\n```\n\n----------------------------------------\n\nTITLE: Implementing Links in React Aria Select Component\nDESCRIPTION: This example demonstrates how to use links within a Select component by passing the href prop to ListBoxItem components, allowing navigation to external pages or websites.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Select.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<MySelect label=\"Project\">\n  <ListBoxItem href=\"https://example.com/\" target=\"_blank\">Create new…</ListBoxItem>\n  <ListBoxItem>Proposal</ListBoxItem>\n  <ListBoxItem>Budget</ListBoxItem>\n  <ListBoxItem>Onboarding</ListBoxItem>\n</MySelect>\n```\n\n----------------------------------------\n\nTITLE: Checkbox with Validation State\nDESCRIPTION: This snippet shows how to implement a Checkbox with a validation state. The isInvalid prop is used to indicate an invalid state.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Checkbox.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<MyCheckbox isInvalid>I accept the terms and conditions</MyCheckbox>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Selectable Component with React Aria Table\nDESCRIPTION: This snippet shows how to use the custom Selectable component to control the selection mode of a React Aria Table component using a ToggleButton.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Table.mdx#2025-04-23_snippet_49\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ToggleButton} from 'react-aria-components';\n\n<Selectable>\n  <ToggleButton>Select</ToggleButton>\n  <PokemonTable />\n</Selectable>\n```\n\n----------------------------------------\n\nTITLE: Setting Granularity and Placeholder Time Zone in React (TSX)\nDESCRIPTION: Demonstrates how the `granularity` prop affects the default value type when no initial `value` or `defaultValue` is provided. It also shows how to set a `placeholderValue` using `now('America/New_York')` from `@internationalized/date` to ensure that values emitted by `onChange` include a specific time zone ('America/New_York') when using time granularities like 'second'.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DateRangePicker.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\nimport {now} from '@internationalized/date';\n\n<MyDateRangePicker\n  label=\"Date range\"\n  granularity=\"second\" />\n<MyDateRangePicker\n  label=\"Date range\"\n  placeholderValue={now('America/New_York')}\n  granularity=\"second\" />\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing an Alert Dialog in React Aria Components\nDESCRIPTION: This example demonstrates how to create an alert dialog using the Dialog component with the role=\"alertdialog\" prop. It includes a delete confirmation prompt.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Dialog.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<DialogTrigger>\n  <Button>Delete…</Button>\n  <Modal>\n    <Dialog role=\"alertdialog\">\n      {({close}) => (\n        <>\n          <Heading slot=\"title\">Delete file</Heading>\n          <p>This will permanently delete the selected file. Continue?</p>\n          <div style={{display: 'flex', gap: 8}}>\n            <Button onPress={close}>Cancel</Button>\n            <Button onPress={close}>Delete</Button>\n          </div>\n        </>\n      )}\n    </Dialog>\n  </Modal>\n</DialogTrigger>\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Selection in Tree Component (TSX)\nDESCRIPTION: This example demonstrates enabling multiple selection mode in the `FileTree` component by setting the `selectionMode` prop to 'multiple'. It also specifies default selected items using `defaultSelectedKeys`.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Tree.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n// Using the example above\n<FileTree selectionMode=\"multiple\" defaultSelectedKeys={[2, 4]} defaultExpandedKeys={[1]} />\n```\n```\n\n----------------------------------------\n\nTITLE: Using MyProgressBar with a Custom Value (React Aria Components, TypeScript/TSX)\nDESCRIPTION: An example of using the reusable MyProgressBar component to display a progress bar with a 25% value and a custom label. This demonstrates passing props to the wrapper component, which handles display details. Dependencies: MyProgressBar definition, React. Inputs: label (\"Loading…\"), value (25); Output: rendered progress bar React element.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ProgressBar.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<MyProgressBar label=\"Loading…\" value={25} />\n```\n\n----------------------------------------\n\nTITLE: Styling Popover for Select\nDESCRIPTION: Demonstrates how to style the Popover component specifically for Select using data attributes and CSS custom properties.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Select.mdx#2025-04-23_snippet_21\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Popover[data-trigger=Select] {\n  width: var(--trigger-width);\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Menu Components with CSS Classes\nDESCRIPTION: Example of styling React Aria Components using CSS selectors. The components follow a naming convention of 'react-aria-ComponentName' which can be targeted for styling.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Menu.mdx#2025-04-23_snippet_21\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Menu {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Drop on Collection in React Aria Components\nDESCRIPTION: This snippet demonstrates how to enable dropping on the entire GridList component using the onRootDrop event. It processes dropped items and updates the component's state accordingly.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/GridList.mdx#2025-04-23_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [items, setItems] = React.useState<Item[]>([]);\n\n  let { dragAndDropHooks } = useDragAndDrop({\n    async onRootDrop(e) {\n      let items = await Promise.all(e.items.map(async (item, i) => {\n        let name = item.kind === 'text' ? await item.getText('text/plain') : item.name;\n        return {id: i, name};\n      }));\n      setItems(items);\n    }\n  });\n\n  return (\n    <div style={{display: 'flex', gap: 12, flexWrap: 'wrap'}}>\n      <DraggableGridList />\n      <MyGridList aria-label=\"Droppable list\" items={items} dragAndDropHooks={dragAndDropHooks} renderEmptyState={() => 'Drop items here'}>\n        {item => <GridListItem>{item.name}</GridListItem>}\n      </MyGridList>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Prefixed Tailwind Modifiers with React Aria Components\nDESCRIPTION: Shows how to use prefixed Tailwind modifiers for React Aria Components states after configuring a custom prefix.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/styling.mdx#2025-04-23_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\n<ListBoxItem className=\"rac-selected:bg-blue-400 rac-disabled:bg-gray-100\">\n  Item\n</ListBoxItem>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Checkbox Component within GridList\nDESCRIPTION: Demonstrates how to use the custom checkbox component within a GridList component as a selection control, replacing the built-in Checkbox component.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/GridList.mdx#2025-04-23_snippet_50\n\nLANGUAGE: tsx\nCODE:\n```\n<GridList>\n  <GridListItem>\n    {/*- begin highlight -*/}\n    <MyCustomCheckbox slot=\"selection\" />\n    {/*- end highlight -*/}\n    {/* ... */}\n  </GridListItem>\n</GridList>\n```\n\n----------------------------------------\n\nTITLE: Implementing Insert Drop Handler in React Aria ListBox\nDESCRIPTION: Demonstrates how to handle dropping items between list items using onInsert event handler. Includes logic for inserting items before or after target items.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ListBox.mdx#2025-04-23_snippet_32\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let list = useListData({\n    initialItems: [\n      {id: 1, name: 'Illustrator'},\n      {id: 2, name: 'Premiere'},\n      {id: 3, name: 'Acrobat'}\n    ]\n  });\n\n  let { dragAndDropHooks } = useDragAndDrop({\n    async onInsert(e) {\n      let items = await Promise.all(e.items.map(async item => {\n        let name = item.kind === 'text' ? await item.getText('text/plain') : item.name;\n        return {id: Math.random(), name};\n      }));\n\n      if (e.target.dropPosition === 'before') {\n        list.insertBefore(e.target.key, ...items);\n      } else if (e.target.dropPosition === 'after') {\n        list.insertAfter(e.target.key, ...items);\n      }\n    }\n  });\n\n  return (\n    <div style={{display: 'flex', gap: 12, flexWrap: 'wrap'}}>\n      <DraggableListBox />\n      <ListBox aria-label=\"Droppable list\" items={list.items} dragAndDropHooks={dragAndDropHooks}>\n        {item => <ListBoxItem>{item.name}</ListBoxItem>}\n      </ListBox>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Empty State Tree Component\nDESCRIPTION: Demonstrates implementing an empty state display for a Tree component when no items are present.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Tree.mdx#2025-04-23_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\n<Tree aria-label=\"Search results\" renderEmptyState={() => 'No results found.'} style={{height: '100px'}}>\n  {[]}\n</Tree>\n```\n\n----------------------------------------\n\nTITLE: Implementing FieldGroup Component with DateRangePickerContext\nDESCRIPTION: Example showing how to create a FieldGroup component that manages multiple DateRangePickers with shared error handling\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DateRangePicker.mdx#2025-04-23_snippet_31\n\nLANGUAGE: tsx\nCODE:\n```\nimport {DateRangePickerContext} from 'react-aria-components';\nimport {useId} from 'react-aria';\n\ninterface FieldGroupProps {\n  title?: string,\n  children?: React.ReactNode,\n  errorMessage?: string\n}\n\nfunction FieldGroup({title, children, errorMessage}: FieldGroupProps) {\n  let errorId = useId();\n  return (\n    <fieldset>\n      <legend>{title}</legend>\n      <DateRangePickerContext.Provider value={{\n        isInvalid: !!errorMessage,\n        'aria-describedby': errorMessage ? errorId : undefined\n      }}>\n        {children}\n      </DateRangePickerContext.Provider>\n      {errorMessage && <small id={errorId} className=\"invalid\">{errorMessage}</small>}\n    </fieldset>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Label Component with LabelContext in React\nDESCRIPTION: This example demonstrates how to create a custom Label component that uses LabelContext to be compatible with React Aria Components.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorField.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {LabelProps} from 'react-aria-components';\nimport {LabelContext, useContextProps} from 'react-aria-components';\n\nconst MyCustomLabel = React.forwardRef((props: LabelProps, ref: React.ForwardedRef<HTMLLabelElement>) => {\n  [props, ref] = useContextProps(props, ref, LabelContext);\n\n  // ... your existing Label component\n  return <label {...props} ref={ref} />;\n});\n```\n\n----------------------------------------\n\nTITLE: Basic ToggleButton Implementation in React Aria Components\nDESCRIPTION: A simple example showing how to import and use the ToggleButton component from the React Aria Components library.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ToggleButton.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ToggleButton} from 'react-aria-components';\n\n<ToggleButton>Pin</ToggleButton>\n```\n\n----------------------------------------\n\nTITLE: Implementing Individual Checkbox Validation in React\nDESCRIPTION: This example demonstrates how to require specific checkboxes to be checked by setting the isRequired prop on individual Checkbox components.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/CheckboxGroup.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<Form>\n  <CheckboxGroup>\n    <Label>Agree to the following</Label>\n    <MyCheckbox value=\"terms\" isRequired>Terms and conditions</MyCheckbox>\n    <MyCheckbox value=\"privacy\" isRequired>Privacy policy</MyCheckbox>\n    <MyCheckbox value=\"cookies\" isRequired>Cookie policy</MyCheckbox>\n    <FieldError />\n  </CheckboxGroup>\n  <Button type=\"submit\">Submit</Button>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: SearchField Component Anatomy with Accessibility Features\nDESCRIPTION: Shows the complete anatomy of a SearchField component including optional description and error message elements with proper ARIA attributes for accessibility.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/SearchField.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {SearchField, Label, Input, Button, Text, FieldError} from 'react-aria-components';\n\n<SearchField>\n  <Label />\n  <Input />\n  <Button />\n  <Text slot=\"description\" />\n  <FieldError />\n</SearchField>\n```\n\n----------------------------------------\n\nTITLE: Setting Default Selected Tab in React Aria Tabs using TSX\nDESCRIPTION: Demonstrates how to specify a default selected tab when the component mounts. The `defaultSelectedKey` prop on the `Tabs` component is set to the `id` ('keyboard') of the `Tab` that should be initially selected.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Tabs.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Tabs defaultSelectedKey=\"keyboard\">\n  <TabList aria-label=\"Input settings\">\n    <Tab id=\"mouse\">Mouse Settings</Tab>\n    <Tab id=\"keyboard\">Keyboard Settings</Tab>\n    <Tab id=\"gamepad\">Gamepad Settings</Tab>\n  </TabList>\n  <TabPanel id=\"mouse\">Mouse Settings</TabPanel>\n  <TabPanel id=\"keyboard\">Keyboard Settings</TabPanel>\n  <TabPanel id=\"gamepad\">Gamepad Settings</TabPanel>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Uncontrolled CheckboxGroup with Default Values\nDESCRIPTION: Example of an uncontrolled CheckboxGroup with defaultValue prop to set initial selected values.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/CheckboxGroup.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<MyCheckboxGroup label=\"Favorite sports (uncontrolled)\" defaultValue={['soccer', 'baseball']}>\n  <MyCheckbox value=\"soccer\">Soccer</MyCheckbox>\n  <MyCheckbox value=\"baseball\">Baseball</MyCheckbox>\n  <MyCheckbox value=\"basketball\">Basketball</MyCheckbox>\n</MyCheckboxGroup>\n```\n\n----------------------------------------\n\nTITLE: Rendering a Dynamic GridList with Props and Row Actions - React Aria - TypeScript\nDESCRIPTION: Implements a dynamic GridList where item data is sourced from an in-memory array and passed to a custom MyGridList using an items prop. This allows rendering collections whose contents may update over time. Each list item includes an Info button, with actions (onPress) and item details provided via render props. Dependencies include MyGridList, MyItem, and Button from react-aria-components. Parameters include standard selection and aria-label props, with output being a fully accessible, dynamic grid list.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/GridList.mdx#2025-04-23_snippet_4\n\nLANGUAGE: TSX\nCODE:\n```\ninterface ItemValue {\\n  id: number,\\n  name: string\\n}\\n\\nfunction ExampleList(props: GridListProps<ItemValue>) {\\n  let rows = [\\n    {id: 1, name: 'Games'},\\n    {id: 2, name: 'Program Files'},\\n    {id: 3, name: 'bootmgr'},\\n    {id: 4, name: 'log.txt'}\\n  ];\\n\\n  return (\\n    <MyGridList\\n      aria-label=\\\"Example dynamic collection List\\\"\\n      selectionMode=\\\"multiple\\\"\\n      /*- begin highlight -*/\\n      items={rows}\\n      /*- end highlight -*/\\n      {...props}>\\n      {item => (\\n        <MyItem textValue={item.name}>\\n          {item.name}\\n          <Button aria-label=\\\"Info\\\" onPress={() => alert(`Info for ${item.name}...`)}>ⓘ</Button>\\n        </MyItem>\\n      )}\\n    </MyGridList>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Controlled Selection Pattern for GridList with React State - TypeScript\nDESCRIPTION: Illustrates controlled selection in a grid list by pairing the selectedKeys prop with an onSelectionChange callback, using React state. The implementation uses useState and updates the selectedKeys whenever a row is selected or deselected, passing state and updater to MyGridList. Requires react-aria-components and React. Input is props and items, output is a fully controlled, accessible selection model.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/GridList.mdx#2025-04-23_snippet_8\n\nLANGUAGE: TSX\nCODE:\n```\nimport type {Selection} from 'react-aria-components';\\n\\nfunction PokemonList(props: GridListProps<ItemValue>) {\\n  let rows = [\\n    {id: 1, name: 'Charizard'},\\n    {id: 2, name: 'Blastoise'},\\n    {id: 3, name: 'Venusaur'},\\n    {id: 4, name: 'Pikachu'}\\n  ];\\n\\n  let [selectedKeys, setSelectedKeys] = React.useState<Selection>(new Set([2]));\\n\\n  return (\\n    <MyGridList\\n      aria-label=\\\"List with controlled selection\\\"\\n      items={rows}\\n      selectionMode=\\\"multiple\\\"\\n      /*- begin highlight -*/\\n      selectedKeys={selectedKeys}\\n      onSelectionChange={setSelectedKeys}\\n      /*- end highlight -*/\\n      {...props}>\\n      {item => <MyItem>{item.name}</MyItem>}\\n    </MyGridList>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom ColorArea Description in React\nDESCRIPTION: This example demonstrates how to create a custom ColorAreaDescription component that uses the ColorAreaContext to associate a description with a ColorArea component.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorArea.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ColorAreaContext} from 'react-aria-components';\nimport {useId} from 'react-aria';\n\ninterface ColorAreaDescriptionProps {\n  children?: React.ReactNode,\n  description?: string\n}\n\nfunction ColorAreaDescription({children, description}: ColorAreaDescriptionProps) {\n  let descriptionId = useId();\n  return (\n    <div>\n      {/*- begin highlight -*/}\n      <ColorAreaContext.Provider value={{'aria-describedby': descriptionId}}>\n      {/*- end highlight -*/}\n        {children}\n      </ColorAreaContext.Provider>\n      <small id={descriptionId}>{description}</small>\n    </div>\n  );\n}\n\n<ColorAreaDescription description=\"Choose a background color for your profile.\">\n  <MyColorArea />\n</ColorAreaDescription>\n```\n\n----------------------------------------\n\nTITLE: Displaying NumberField Validation Errors using `FieldError` in React (TSX/CSS)\nDESCRIPTION: Demonstrates using the `isRequired` prop on a `NumberField` within a `Form` component to mark it as mandatory. A `<FieldError>` component is included as a child to automatically display validation error messages. Accompanying CSS shows how to style the `NumberField` and its children (`Input`, `Button`, `FieldError`) when in an invalid state (`[data-invalid]`).\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/NumberField.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\nimport {Form, FieldError} from 'react-aria-components';\n\n<Form>\n  {/*- begin highlight -*/}\n  <NumberField name=\"width\" isRequired>\n  {/*- end highlight -*/}\n    <Label>Width</Label>\n    <Group>\n       <Button slot=\"decrement\">-</Button>\n       <Input />\n       <Button slot=\"increment\">+</Button>\n     </Group>\n    {/*- begin highlight -*/}\n    <FieldError />\n    {/*- end highlight -*/}\n  </NumberField>\n  <Button type=\"submit\">Submit</Button>\n</Form>\n```\n```\n\nLANGUAGE: css\nCODE:\n```\n```css\n.react-aria-NumberField {\n  &[data-invalid] {\n    .react-aria-Input,\n    .react-aria-Button {\n      border-color: var(--invalid-color);\n    }\n\n    &:focus-within {\n      .react-aria-Input,\n      .react-aria-Button {\n        border-color: var(--focus-ring-color);\n      }\n    }\n  }\n\n  .react-aria-FieldError {\n    font-size: 12px;\n    color: var(--invalid-color);\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Link Press Event Handling in React Aria\nDESCRIPTION: Example showing how to handle press events on a Link component, with state tracking to display the pointer type used for interaction.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Link.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [pointerType, setPointerType] = React.useState('');\n\n  return (\n    <>\n      <Link\n        onPressStart={e => setPointerType(e.pointerType)}\n        onPressEnd={() => setPointerType('')}>\n        Press me\n      </Link>\n      <p>{pointerType ? `You are pressing the link with a ${pointerType}!` : 'Ready to be pressed.'}</p>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Context-based Configuration in React Aria\nDESCRIPTION: Example of using ProgressBarContext to provide shared formatting options to multiple ProgressBar components.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ProgressBar.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ProgressBarContext} from 'react-aria-components';\n\n<ProgressBarContext.Provider value={{formatOptions: {style: 'decimal'}}}>\n  <MyProgressBar label=\"Converting…\" value={28.5} />\n  <MyProgressBar label=\"Uploading…\" value={68.75} />\n</ProgressBarContext.Provider>\n```\n\n----------------------------------------\n\nTITLE: Setting Min and Max Values for TimeField in React\nDESCRIPTION: This example shows how to set minimum and maximum values for a TimeField. It uses the minValue and maxValue props to restrict the input to times between 9 AM and 5 PM.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/TimeField.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<Form>\n  <MyTimeField\n    label=\"Meeting time\"\n    minValue={new Time(9)}\n    maxValue={new Time(17)}\n    defaultValue={new Time(8)} />\n  <Button type=\"submit\">Submit</Button>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Styling Menu Items for Selection States with CSS in React Aria Components\nDESCRIPTION: This CSS snippet styles menu items by adding padding and visual indicators for selected items in both single and multiple selection modes. It uses data attributes and pseudo-elements to show a checkmark or bullet based on the selection mode. Intended for use with the .react-aria-MenuItem class, requires the corresponding data attributes to be present on elements.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Menu.mdx#2025-04-23_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-MenuItem {\\n  &[data-selection-mode] {\\n    padding-left: 24px;\\n\\n    &::before {\\n      position: absolute;\\n      left: 4px;\\n      font-weight: 600;\\n    }\\n\\n    &[data-selection-mode=multiple][data-selected]::before {\\n      content: '✓';\\n      content: '✓' / '';\\n      alt: ' ';\\n      position: absolute;\\n      left: 4px;\\n      font-weight: 600;\\n    }\\n\\n    &[data-selection-mode=single][data-selected]::before {\\n      content: '●';\\n      content: '●' / '';\\n      transform: scale(0.7)\\n    }\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing SliderOutput via Component Composition in TSX\nDESCRIPTION: This TSX snippet demonstrates advanced customization through composition. It defines a wrapper component `MySliderOutput` that renders the standard `SliderOutput` component, passing through all original props (`{...props}`) while adding a custom CSS class ('my-slider-output') for targeted styling.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorSlider.mdx#2025-04-23_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MySliderOutput(props) {\n  return <SliderOutput {...props} className=\"my-slider-output\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Styling React Aria Link Component Based on Current State\nDESCRIPTION: Demonstrates how to style a `Link` component within a Breadcrumbs structure when it represents the current page or location. It uses the `data-current` attribute selector (`.react-aria-Link[data-current]`) which React Aria adds based on the component's state.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Breadcrumbs.mdx#2025-04-23_snippet_11\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Link[data-current] {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Drag Data Formats in React Aria Components\nDESCRIPTION: This example shows how to provide multiple data formats for draggable items using the getItems function. It includes plain text, HTML, and a custom app-specific format for versatility in different drop contexts.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/GridList.mdx#2025-04-23_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\nfunction DraggableGridList() {\n  let items = new Map([\n    ['ps', {name: 'Photoshop', style: 'strong'}],\n    ['xd', {name: 'XD', style: 'strong'}],\n    ['id', {name: 'InDesign', style: 'strong'}],\n    ['dw', {name: 'Dreamweaver', style: 'em'}],\n    ['co', {name: 'Connect', style: 'em'}]\n  ]);\n\n  let { dragAndDropHooks } = useDragAndDrop({\n    getItems(keys) {\n      return [...keys].map(key => {\n        let item = items.get(key as string)!;\n        return {\n          'text/plain': item.name,\n          'text/html': `<${item.style}>${item.name}</${item.style}>`,\n          'custom-app-type': JSON.stringify({id: key, ...item})\n        };\n      });\n    },\n  });\n\n  return (\n    <MyGridList aria-label=\"Draggable list\" selectionMode=\"multiple\" items={items} dragAndDropHooks={dragAndDropHooks}>\n      {([id, item]) => <MyItem id={id} textValue={item.name}>{React.createElement(item.style || 'span', null, item.name)}</MyItem>}\n    </MyGridList>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Styling FieldGroup Component\nDESCRIPTION: CSS styles for the FieldGroup component defining padding, width, and error message appearance.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DateField.mdx#2025-04-23_snippet_28\n\nLANGUAGE: css\nCODE:\n```\nfieldset {\n  padding: 1.5em;\n  width: fit-content;\n}\n\n.invalid {\n  color: var(--invalid-color);\n  margin-top: 1em;\n  display: block;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DateField with Local Time Zone in React\nDESCRIPTION: This example demonstrates how to use the DateField component with the user's local time zone. It uses the parseAbsoluteToLocal function to convert a UTC time to the local time zone.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DateField.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseAbsoluteToLocal} from '@internationalized/date';\n\n<MyDateField\n  label=\"Event date\"\n  defaultValue={parseAbsoluteToLocal('2021-11-07T07:45:00Z')}\n/>\n```\n\n----------------------------------------\n\nTITLE: Slider with Japanese Currency Formatting\nDESCRIPTION: Shows how to implement a slider with Japanese Yen currency formatting using formatOptions.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Slider.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n<MySlider\n  label=\"Currency\"\n  formatOptions={{style: 'currency', currency: 'JPY'}}\n  defaultValue={60} />\n```\n\n----------------------------------------\n\nTITLE: Setting Hour Cycle in DateRangePicker\nDESCRIPTION: Example showing how to override the default hour format in DateRangePicker. The hourCycle prop forces 24-hour time format regardless of the user's locale.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DateRangePicker.mdx#2025-04-23_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\n<MyDateRangePicker\n  label=\"Date range\"\n  granularity=\"minute\"\n  hourCycle={24} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Popover Cross Offset in React Aria Components\nDESCRIPTION: Example demonstrating the crossOffset prop which controls the spacing along the cross axis between the Popover and its anchor element.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Popover.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<DialogTrigger>\n  <Button>Cross offset</Button>\n  <MyPopover placement=\"top\" crossOffset={100}>\n    Offset by an additional 100px.\n  </MyPopover>\n</DialogTrigger>\n```\n\n----------------------------------------\n\nTITLE: Creating a Wrapper Component for DateSegment Customization (React/TSX)\nDESCRIPTION: Shows how to create a custom wrapper component (`MyDateSegment`) around `react-aria-components`' `DateSegment` to apply consistent props, such as a custom `className`, across multiple instances.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/TimeField.mdx#2025-04-23_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MyDateSegment(props) {\n  return <MyDateSegment {...props} className=\"my-date-segment\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Uncontrolled ColorArea with Custom Default Value\nDESCRIPTION: Example of an uncontrolled ColorArea with a custom default value in HSB color space, demonstrating how to initialize the component with a specific color.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorArea.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<MyColorArea defaultValue=\"hsb(219, 58%, 93%)\" />\n```\n\n----------------------------------------\n\nTITLE: Using ColorSliderContext Provider for Accessibility\nDESCRIPTION: This example demonstrates creating a ColorSliderDescription component that adds accessibility through aria-describedby. It uses useId to generate a unique ID for the description element and passes it to the ColorSlider via context.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorSlider.mdx#2025-04-23_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ColorSliderContext} from 'react-aria-components';\nimport {useId} from 'react-aria';\n\ninterface ColorSliderDescriptionProps {\n  children?: React.ReactNode,\n  description?: string\n}\n\nfunction ColorSliderDescription({children, description}: ColorSliderDescriptionProps) {\n  let descriptionId = useId();\n  return (\n    <div>\n      <ColorSliderContext.Provider value={{'aria-describedby': descriptionId}}>\n        {children}\n      </ColorSliderContext.Provider>\n      <small id={descriptionId}>{description}</small>\n    </div>\n  );\n}\n\n<ColorSliderDescription description=\"It's not easy being green.\">\n  <MyColorSlider channel=\"green\" defaultValue=\"#006\" />\n</ColorSliderDescription>\n```\n\n----------------------------------------\n\nTITLE: Implementing TimeField in React Aria Components\nDESCRIPTION: This example demonstrates how to use the TimeField component with Label, DateInput, and DateSegment from react-aria-components.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/TimeField.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {TimeField, Label, DateInput, DateSegment} from 'react-aria-components';\n\n<TimeField>\n  <Label>Event time</Label>\n  <DateInput>\n    {segment => <DateSegment segment={segment} />}\n  </DateInput>\n</TimeField>\n```\n\n----------------------------------------\n\nTITLE: Conditionally Rendering Elements Using Render Props in SearchField (JSX)\nDESCRIPTION: Illustrates the render prop pattern where a function is passed as children to `SearchField`. This function receives the component's internal `state` (including the current `value`), allowing conditional rendering of child elements, such as displaying a clear `Button` only when the input has text.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/SearchField.mdx#2025-04-23_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\n<SearchField>\n  {({state}) => (\n    <>\n      <Label>Search</Label>\n      <Input />\n      {state.value !== '' && <Button>✕</Button>}\n    </>\n  )}\n</SearchField>\n```\n\n----------------------------------------\n\nTITLE: Implementing Focusable Tab Panels with React Aria\nDESCRIPTION: Demonstrates how to create tabs with focusable content like input fields. Shows keyboard navigation between tabs and panels.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Tabs.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<Tabs>\n  <TabList aria-label=\"Notes app\">\n    <Tab id=\"1\">Jane Doe</Tab>\n    <Tab id=\"2\">John Doe</Tab>\n    <Tab id=\"3\">Joe Bloggs</Tab>\n  </TabList>\n  <TabPanel id=\"1\">\n    <label>Leave a note for Jane: <input type=\"text\" /></label>\n  </TabPanel>\n  <TabPanel id=\"2\">Senatus Populusque Romanus.</TabPanel>\n  <TabPanel id=\"3\">Alea jacta est.</TabPanel>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable ColorSlider Component\nDESCRIPTION: Example of creating a reusable wrapper component around ColorSlider that includes all the necessary subcomponents and adds custom styling, including support for transparent colors.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorSlider.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {ColorSliderProps} from 'react-aria-components';\n\ninterface MyColorSliderProps extends ColorSliderProps {\n  label?: string\n}\n\nexport function MyColorSlider({label, ...props}: MyColorSliderProps) {\n  return (\n    <ColorSlider {...props}>\n      <Label>{label}</Label>\n      <SliderOutput />\n      <SliderTrack \n        style={({defaultStyle}) => ({\n          background: `${defaultStyle.background},\n            repeating-conic-gradient(#CCC 0% 25%, white 0% 50%) 50% / 16px 16px`\n        })}>\n        <ColorThumb />\n      </SliderTrack>\n    </ColorSlider>\n  );\n}\n\n<MyColorSlider label=\"Red Opacity\" defaultValue=\"#f00\" channel=\"alpha\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Date Validation in RangeCalendar\nDESCRIPTION: Demonstrates how to use the minValue prop to restrict date selection to dates after today in a RangeCalendar component.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/RangeCalendar.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport {today} from '@internationalized/date';\n\n<MyRangeCalendar aria-label=\"Trip dates\" minValue={today(getLocalTimeZone())} />\n```\n\n----------------------------------------\n\nTITLE: Hiding Time Zone in DateField with ZonedDateTime in TypeScript\nDESCRIPTION: Demonstrates suppression of the time zone abbreviation in a DateField that receives a ZonedDateTime value by setting hideTimeZone. Uses parseZonedDateTime for defaultValue initialization. This is useful when time zone context is provided elsewhere in the UI. Requires MyDateField component and correct value parsing utilities.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DateField.mdx#2025-04-23_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\n<MyDateField\n  label=\"Appointment time\"\n  defaultValue={parseZonedDateTime('2022-11-07T10:45[America/Los_Angeles]')}\n  hideTimeZone />\n```\n\n----------------------------------------\n\nTITLE: Basic Structure of DisclosureGroup Component\nDESCRIPTION: Shows the basic structure and component hierarchy for implementing a DisclosureGroup with its required child components.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DisclosureGroup.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {DisclosureGroup, Disclosure, Button, DisclosurePanel, Heading} from 'react-aria-components';\n\n<DisclosureGroup>\n  <Disclosure>\n    <Heading>\n      <Button />\n    </Heading>\n    <DisclosurePanel />\n  </Disclosure>\n</DisclosureGroup>\n```\n\n----------------------------------------\n\nTITLE: Adding Description to DateRangePicker\nDESCRIPTION: Example showing how to add a description to a DateRangePicker using the description slot. The description provides additional help text associated with the date range picker.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DateRangePicker.mdx#2025-04-23_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\n<DateRangePicker>\n  <Label>Trip dates</Label>\n  <Group>\n    <DateInput slot=\"start\">\n      {segment => <DateSegment segment={segment} />}\n    </DateInput>\n    <span aria-hidden=\"true\">–</span>\n    <DateInput slot=\"end\">\n      {segment => <DateSegment segment={segment} />}\n    </DateInput>\n    <Button>▼</Button>\n  </Group>\n  <Text slot=\"description\">Please your vacation dates.</Text>\n  <Popover>\n    <Dialog>\n      <RangeCalendar>\n        <header>\n          <Button slot=\"previous\">◀</Button>\n          <Heading />\n          <Button slot=\"next\">▶</Button>\n        </header>\n        <CalendarGrid>\n          {date => <CalendarCell date={date} />}\n        </CalendarGrid>\n      </RangeCalendar>\n    </Dialog>\n  </Popover>\n</DateRangePicker>\n```\n\n----------------------------------------\n\nTITLE: Handling TimeField onChange Event in React\nDESCRIPTION: This example shows how to handle the onChange event of a TimeField. It uses the useDateFormatter hook to format the selected date and time, and updates a separate element with the formatted value.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/TimeField.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useDateFormatter} from '@react-aria/i18n';\n\nfunction Example() {\n  let [date, setDate] = React.useState(parseAbsoluteToLocal('2021-04-07T18:45:22Z'));\n  let formatter = useDateFormatter({dateStyle: 'long', timeStyle: 'long'});\n\n  return (\n    <>\n      <MyTimeField label=\"Time\" value={date} onChange={setDate} />\n      <p>Selected date and time: {(date?.toDate && formatter.format(date.toDate())) || (date && date.toString()) || '--'}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Styling the Group Component and Children using Data Attributes (CSS)\nDESCRIPTION: This CSS code demonstrates how to style the `react-aria-Group` component and its contained `Input` and `Button` children. It leverages React Aria's data attributes like `[data-hovered]` and `[data-focus-within]` for state-based styling (hover, focus within) and applies standard CSS for layout, appearance (borders, background), and transitions. It also imports a base theme (`@react-aria/example-theme`).\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Group.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n\n.react-aria-Group {\n  display: flex;\n  align-items: center;\n  width: fit-content;\n  border-radius: 6px;\n  border: 1px solid var(--border-color);\n  background: var(--field-background);\n  overflow: hidden;\n  transition: all 200ms;\n\n  &[data-hovered] {\n    border-color: var(--border-color-hover);\n  }\n\n  &[data-focus-within] {\n    outline: 2px solid var(--focus-ring-color);\n    outline-offset: -1px;\n  }\n\n  .react-aria-Input {\n    padding: 0.286rem;\n    margin: 0;\n    font-size: 1rem;\n    color: var(--text-color);\n    outline: none;\n    border: none;\n    background: transparent;\n\n    &::placeholder {\n      color: var(--text-color-placeholder);\n      opacity: 1;\n    }\n  }\n\n  .react-aria-Button {\n    padding: 0 6px;\n    border-width: 0 0 0 1px;\n    border-radius: 0 6px 6px 0;\n    align-self: stretch;\n    font-size: 1.5rem;\n    &[data-focus-visible] {\n      border-color: var(--focus-ring-color);\n      outline-width: 1px;\n      outline-offset: 0;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Meter Component Usage in React\nDESCRIPTION: Demonstrates how to use the Meter component from react-aria-components to create a meter displaying storage space usage.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Meter.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Meter, Label} from 'react-aria-components';\n\n<Meter value={25}>\n  {({percentage, valueText}) => <>\n    <Label>Storage space</Label>\n    <span className=\"value\">{valueText}</span>\n    <div className=\"bar\">\n      <div className=\"fill\" style={{width: percentage + '%'}} />\n    </div>\n  </>}\n</Meter>\n```\n\n----------------------------------------\n\nTITLE: Styling Select Components with CSS\nDESCRIPTION: Demonstrates how to style React Aria components using CSS selectors targeting the default class names.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Select.mdx#2025-04-23_snippet_16\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Select {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Directory Selection with FileTrigger\nDESCRIPTION: Example showing directory selection functionality with file path display\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/FileTrigger.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example () {\n  let [files, setFiles] = React.useState([]);\n\n  return (\n    <>\n      <FileTrigger\n        acceptDirectory\n        onSelect={(e) => {\n          if (e) {\n            let fileList = [...e].map(file => file.webkitRelativePath !== \"\" ? file.webkitRelativePath : file.name);\n            setFiles(fileList);\n          }\n        }} >\n        <Button>Upload</Button>\n      </FileTrigger>\n      {files && <ul>\n        {files.map((file, index) => (\n          <li key={index}>{file}</li>\n        ))}\n      </ul>}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Vertical Color Slider in TSX\nDESCRIPTION: This snippet shows how to render a vertical `ColorSlider` by setting the `orientation` prop to `\"vertical\"`. It uses the `MyColorSlider` wrapper component, specifies a default value, sets the channel to 'hue', and implicitly hides the visual label as mentioned in the surrounding text.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorSlider.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<MyColorSlider\n  orientation=\"vertical\"\n  defaultValue=\"hsb(0, 100%, 100%)\"\n  channel=\"hue\" />\n```\n\n----------------------------------------\n\nTITLE: Tree Component Testing Example\nDESCRIPTION: Shows how to test Tree component interactions using @react-aria/test-utils and testing-library\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Tree.mdx#2025-04-23_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n// Tree.test.ts\nimport {render, within} from '@testing-library/react';\nimport {User} from '@react-aria/test-utils';\n\nlet testUtilUser = new User({interactionType: 'mouse'});\n// ...\n\nit('Tree can select a item via keyboard', async function () {\n  let {getByTestId} = render(\n     <Tree data-testid=\"test-tree\" selectionMode=\"multiple\">\n      ...\n    </Tree>\n  );\n  let treeTester = testUtilUser.createTester('Tree', {root: getByTestId('test-tree'), interactionType: 'keyboard'});\n\n  await treeTester.toggleRowSelection({row: 0});\n  expect(treeTester.selectedRows).toHaveLength(1);\n  expect(within(treeTester.rows[0]).getByRole('checkbox')).toBeChecked();\n\n  await treeTester.toggleRowSelection({row: 1});\n  expect(treeTester.selectedRows).toHaveLength(2);\n  expect(within(treeTester.rows[1]).getByRole('checkbox')).toBeChecked();\n\n  await treeTester.toggleRowSelection({row: 0});\n  expect(treeTester.selectedRows).toHaveLength(1);\n  expect(within(treeTester.rows[0]).getByRole('checkbox')).not.toBeChecked();\n});\n```\n\n----------------------------------------\n\nTITLE: Formatting Percentages in NumberField using `formatOptions` in React (TSX)\nDESCRIPTION: Demonstrates formatting a `NumberField` value as a percentage by setting `style: 'percent'` within the `formatOptions` prop. The component automatically multiplies the underlying value by 100 for display (e.g., 0.05 becomes 5%) and divides user input by 100 for the `onChange` event. The default step value changes to 0.01.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/NumberField.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n<MyNumberField\n  label=\"Sales tax\"\n  defaultValue={0.05}\n  formatOptions={{\n    style: 'percent'\n  }} />\n```\n```\n\n----------------------------------------\n\nTITLE: Using Custom Checkbox Component in React Aria Table\nDESCRIPTION: This snippet shows how to use a custom Checkbox component within a React Aria Table, replacing the built-in Checkbox component.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Table.mdx#2025-04-23_snippet_51\n\nLANGUAGE: tsx\nCODE:\n```\n<Table>\n  <TableHeader>\n    {/* ... */}\n  </TableHeader>\n  <TableBody>\n    <Row>\n      <Cell><MyCustomCheckbox slot=\"selection\" /></Cell>\n      {/* ... */}\n    </Row>\n  </TableBody>\n</Table>\n```\n\n----------------------------------------\n\nTITLE: Multiple File Selection with FileTrigger\nDESCRIPTION: Demonstrates enabling multiple file selection using the allowsMultiple prop\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/FileTrigger.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<FileTrigger allowsMultiple>\n  <Button>Upload your files</Button>\n</FileTrigger>\n```\n\n----------------------------------------\n\nTITLE: Implementing Date Validation in React Aria Components Calendar\nDESCRIPTION: This example shows how to use the minValue prop to prevent selection of dates before today in a Calendar component.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Calendar.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport {today} from '@internationalized/date';\n\n<MyCalendar aria-label=\"Appointment date\" minValue={today(getLocalTimeZone())} />\n```\n\n----------------------------------------\n\nTITLE: Button with Press Event Tracking\nDESCRIPTION: Example showing how to track press events on a Button component and display the pointer type used.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Button.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [pointerType, setPointerType] = React.useState('');\n\n  return (\n    <>\n      <Button\n        onPressStart={e => setPointerType(e.pointerType)}\n        onPressEnd={() => setPointerType('')}>\n        Press me\n      </Button>\n      <p>{pointerType ? `You are pressing the button with a ${pointerType}!` : 'Ready to be pressed.'}</p>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Label Component in RadioGroup\nDESCRIPTION: This example shows how to use the custom MyCustomLabel component within a RadioGroup, replacing the built-in React Aria Components Label.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/RadioGroup.mdx#2025-04-23_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\n<RadioGroup>\n  <MyCustomLabel>Favorite pet</MyCustomLabel>\n  <Radio value=\"dogs\">Dog</Radio>\n  <Radio value=\"cats\">Cat</Radio>\n  <Radio value=\"dragon\">Dragon</Radio>\n</RadioGroup>\n```\n\n----------------------------------------\n\nTITLE: Handling DateRangePicker onChange Events in React (TSX)\nDESCRIPTION: Illustrates handling the `onChange` event of a `DateRangePicker`. The selected date range is stored using `React.useState`. Inside the component, `useDateFormatter` from `@react-aria/i18n` is used to format the selected range for display in a paragraph element. The dates are converted to native JavaScript `Date` objects using `.toDate()` and the user's local time zone obtained via `getLocalTimeZone` from `@internationalized/date` before formatting.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DateRangePicker.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\nimport {getLocalTimeZone} from '@internationalized/date';\nimport {useDateFormatter} from '@react-aria/i18n';\n\nfunction Example() {\n  let [range, setRange] = React.useState({\n    start: parseDate('2020-07-03'),\n    end: parseDate('2020-07-10')\n  });\n  let formatter = useDateFormatter({dateStyle: 'long'});\n\n  return (\n    <>\n      <MyDateRangePicker label=\"Date range\" value={range} onChange={setRange} />\n      <p>Selected date: {range ? formatter.formatRange(range.start.toDate(getLocalTimeZone()), range.end.toDate(getLocalTimeZone())) : '--'}</p>\n    </>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Slots in Menu Items with React Aria\nDESCRIPTION: Shows how to use Text and Keyboard components to create menu items with labels, descriptions and keyboard shortcuts.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Menu.mdx#2025-04-23_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Text, Keyboard} from 'react-aria-components';\n\n<MyMenuButton label=\"Actions\">\n  <MenuItem textValue=\"Copy\">\n    <Text slot=\"label\">Copy</Text>\n    <Text slot=\"description\">Copy the selected text</Text>\n    <Keyboard>⌘C</Keyboard>\n  </MenuItem>\n  <MenuItem textValue=\"Cut\">\n    <Text slot=\"label\">Cut</Text>\n    <Text slot=\"description\">Cut the selected text</Text>\n    <Keyboard>⌘X</Keyboard>\n  </MenuItem>\n  <MenuItem textValue=\"Paste\">\n    <Text slot=\"label\">Paste</Text>\n    <Text slot=\"description\">Paste the copied text</Text>\n    <Keyboard>⌘V</Keyboard>\n  </MenuItem>\n</MyMenuButton>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Label Component with Context Integration\nDESCRIPTION: Implementation of a custom label component that integrates with React Aria Components' LabelContext.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DateField.mdx#2025-04-23_snippet_29\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {LabelProps} from 'react-aria-components';\nimport {LabelContext, useContextProps} from 'react-aria-components';\n\nconst MyCustomLabel = React.forwardRef((props: LabelProps, ref: React.ForwardedRef<HTMLLabelElement>) => {\n  [props, ref] = useContextProps(props, ref, LabelContext);\n  return <label {...props} ref={ref} />;\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom DateSegment Wrapper in TypeScript React\nDESCRIPTION: Example of creating a wrapper component for DateSegment to customize props and styling.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DatePicker.mdx#2025-04-23_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MyDateSegment(props) {\n  return <MyDateSegment {...props} className=\"my-date-segment\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Styling the SearchField Component with CSS\nDESCRIPTION: CSS styling for the SearchField component that creates a grid layout for the label, input, and button elements with proper positioning and visual states.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/SearchField.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n\n.react-aria-SearchField {\n  display: grid;\n  grid-template-areas: \"label label\"\n                       \"input button\"\n                       \"help  help\";\n  grid-template-columns: 1fr auto;\n  align-items: center;\n  width: fit-content;\n  color: var(--text-color);\n\n  .react-aria-Input {\n    grid-area: input;\n    width: 100%;\n    padding: 0.286rem 1.714rem 0.286rem 0.286rem;\n    margin: 0;\n    border: 1px solid var(--border-color);\n    border-radius: 6px;\n    background: var(--field-background);\n    font-size: 1.143rem;\n    color: var(--field-text-color);\n    outline: none;\n\n    &::-webkit-search-cancel-button,\n    &::-webkit-search-decoration {\n      -webkit-appearance: none;\n    }\n\n    &::placeholder {\n      color: var(--text-color-placeholder);\n      opacity: 1;\n    }\n\n    &[data-focused] {\n      outline: 2px solid var(--focus-ring-color);\n      outline-offset: -1px;\n    }\n  }\n\n  .react-aria-Button {\n    grid-area: button;\n    width: 1.143rem;\n    height: 1.143rem;\n    border-radius: 1.143rem;\n    margin-left: -1.429rem;\n    font-size: 0.857rem;\n    line-height: 0.857rem;\n    vertical-align: middle;\n    text-align: center;\n    background: var(--gray-500);\n    color: var(--gray-50);\n    border: none;\n    padding: 0;\n\n    &[data-pressed] {\n      background: var(--gray-600);\n    }\n  }\n\n  &[data-empty] button {\n    display: none;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling DateField Components with CSS\nDESCRIPTION: CSS styling for DateField components including DateInput and DateSegment with focus states, colors, and other visual properties.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DateField.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n\n.react-aria-DateField {\n  color: var(--text-color);\n  display: flex;\n  flex-direction: column;\n}\n\n.react-aria-DateInput {\n  display: inline;\n  padding: 4px;\n  border: 1px solid var(--border-color);\n  border-radius: 6px;\n  background: var(--field-background);\n  width: fit-content;\n  min-width: 150px;\n  white-space: nowrap;\n  forced-color-adjust: none;\n\n  &[data-focus-within] {\n    outline: 2px solid var(--focus-ring-color);\n    outline-offset: -1px;\n  }\n}\n\n.react-aria-DateSegment {\n  padding: 0 2px;\n  font-variant-numeric: tabular-nums;\n  text-align: end;\n  color: var(--text-color);\n\n  &[data-type=literal] {\n    padding: 0;\n  }\n\n  &[data-placeholder] {\n    color: var(--text-color-placeholder);\n    font-style: italic;\n  }\n\n  &:focus {\n    color: var(--highlight-foreground);\n    background: var(--highlight-background);\n    outline: none;\n    border-radius: 4px;\n    caret-color: transparent;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Form Integration with Switch Component\nDESCRIPTION: Example showing how to integrate a Switch component with HTML forms using the name and value props, which allows the switch state to be submitted with form data.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Switch.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<MySwitch name=\"power\" value=\"low\">Low power mode</MySwitch>\n```\n\n----------------------------------------\n\nTITLE: Wrapping TooltipTrigger Children with a Custom Styled Container (JavaScript/JSX)\nDESCRIPTION: This JSX snippet shows how to add a custom wrapper element inside TooltipTrigger to allow for styling, since TooltipTrigger itself does not render DOM elements or support className. Inputs: any children, custom container with className. Outputs: Tooltip trigger styled by a user-defined class. This pattern is required when a visual container is desired for trigger content.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Tooltip.mdx#2025-04-23_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n<TooltipTrigger>\\n  <div className=\\\"my-tooltip-trigger\\\">\\n    {/* ... */}\\n  </div>\\n</TooltipTrigger>\\n\n```\n\n----------------------------------------\n\nTITLE: Custom ClassName Implementation in React Aria\nDESCRIPTION: Demonstrates how to override the default className with a custom one for a ProgressBar component.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ProgressBar.mdx#2025-04-23_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n<ProgressBar className=\"my-progressbar\">\n  {/* ... */}\n</ProgressBar>\n```\n\n----------------------------------------\n\nTITLE: Styling ToggleButtonGroup with CSS\nDESCRIPTION: CSS styles for customizing the appearance of ToggleButtonGroup and its child ToggleButtons.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ToggleButtonGroup.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ToggleButtonGroup {\n  display: flex;\n\n  > button {\n    border-radius: 0;\n    z-index: 1;\n\n    &[data-disabled] {\n      z-index: 0;\n    }\n\n    &[data-selected],\n    &[data-focus-visible] {\n      z-index: 2;\n    }\n  }\n}\n\n.react-aria-ToggleButtonGroup[data-orientation=horizontal] {\n  flex-direction: row;\n\n  > button {\n    margin-inline-start: -1px;\n    \n    &:first-child {\n      border-radius: 4px 0 0 4px;\n      margin-inline-start: 0;\n    }\n\n    &:last-child {\n      border-radius: 0 4px 4px 0;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Checkbox Component with React Aria Components\nDESCRIPTION: Creates a custom checkbox component that integrates with GridList by using the CheckboxContext and useContextProps hook. This allows the component to receive props from GridList's context system.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/GridList.mdx#2025-04-23_snippet_49\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {CheckboxProps} from 'react-aria-components';\nimport {CheckboxContext, useContextProps} from 'react-aria-components';\nimport {useToggleState} from 'react-stately';\nimport {useCheckbox} from 'react-aria';\n\nconst MyCustomCheckbox = React.forwardRef((props: CheckboxProps, ref: React.ForwardedRef<HTMLInputElement>) => {\n  // Merge the local props and ref with the ones provided via context.\n  ///- begin highlight -///\n  [props, ref] = useContextProps(props, ref, CheckboxContext);\n  ///- end highlight -///\n\n  let state = useToggleState(props);\n  let {inputProps} = useCheckbox(props, state, ref);\n  return <input {...inputProps} ref={ref} />;\n});\n```\n\n----------------------------------------\n\nTITLE: CheckboxGroup Component Structure with Accessibility Elements\nDESCRIPTION: Shows the basic structure of a CheckboxGroup with Label, Checkbox, and accessibility elements like description text and field error display.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/CheckboxGroup.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {CheckboxGroup, Checkbox, Label, Text, FieldError} from 'react-aria-components';\n\n<CheckboxGroup>\n  <Label />\n  <Checkbox />\n  <Text slot=\"description\" />\n  <FieldError />\n</CheckboxGroup>\n```\n\n----------------------------------------\n\nTITLE: Using Calendar Picker with Preset Dates\nDESCRIPTION: Example implementation of the CalendarPicker component with preset date options\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Calendar.mdx#2025-04-23_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nimport {startOfWeek, startOfMonth} from '@internationalized/date';\nimport {useLocale} from 'react-aria';\n\nfunction Example() {\n  let {locale} = useLocale();\n  let now = today(getLocalTimeZone());\n\n  return (\n    <CalendarPicker>\n      <Preset date={now}>Today</Preset>\n      <Preset date={startOfWeek(now.add({weeks: 1}), locale)}>Next week</Preset>\n      <Preset date={startOfMonth(now.add({months: 1}))}>Next month</Preset>\n      <MyCalendar aria-label=\"Meeting date\" />\n    </CalendarPicker>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a CalendarPicker with Preset Date Ranges\nDESCRIPTION: This example shows how to use the previously defined CalendarPicker and Preset components to create a calendar with preset date range options like 'This month' and 'This week'.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/RangeCalendar.mdx#2025-04-23_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\nimport {startOfWeek, endOfWeek, startOfMonth, endOfMonth} from '@internationalized/date';\nimport {useLocale} from 'react-aria';\n\nfunction Example() {\n  let {locale} = useLocale();\n  let now = today(getLocalTimeZone());\n  let nextMonth = now.add({months: 1});\n\n  return (\n    <CalendarPicker>\n      <Preset value={{start: startOfMonth(now), end: endOfMonth(now)}}>This month</Preset>\n      <Preset value={{start: startOfWeek(now, locale), end: endOfWeek(now, locale)}}>This week</Preset>\n      <Preset value={{start: startOfMonth(nextMonth), end: endOfMonth(nextMonth)}}>Next month</Preset>\n      <MyRangeCalendar aria-label=\"Date filter\" />\n    </CalendarPicker>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Drag Data Formats in React Aria Components\nDESCRIPTION: This snippet shows how to provide multiple data formats for draggable items, including plain text, HTML, and a custom app-specific format.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Table.mdx#2025-04-23_snippet_26\n\nLANGUAGE: tsx\nCODE:\n```\nfunction DraggableTable() {\n  let items = [\n    {id: 1, name: 'Charizard', type: 'Fire, Flying', level: '67'},\n    {id: 2, name: 'Blastoise', type: 'Water', level: '56'},\n    {id: 3, name: 'Venusaur', type: 'Grass, Poison', level: '83'},\n    {id: 4, name: 'Pikachu', type: 'Electric', level: '100'}\n  ];\n\n  let { dragAndDropHooks } = useDragAndDrop({\n    getItems(keys) {\n      return [...keys].map(key => {\n        let item = items.find(item => item.id === key)!;\n        return {\n          'text/plain': `${item.name} – ${item.type}`,\n          'text/html': `<strong>${item.name}</strong> – <em>${item.type}</em>`,\n          'pokemon': JSON.stringify(item)\n        };\n      });\n    },\n  });\n\n  return (\n    <PokemonTable\n      items={items}\n      selectionMode=\"multiple\"\n      dragAndDropHooks={dragAndDropHooks} />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Tailwind CSS Plugins for React Aria Components (CSS)\nDESCRIPTION: This CSS snippet demonstrates how to configure Tailwind CSS with the tailwindcss-react-aria-components plugin. The @import statement includes Tailwind’s base styles, while the @plugin directive registers the plugin for enhanced React Aria component support. This is required for Tailwind v4 projects to enable additional utility classes.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/opacity-slider.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@import \\\"tailwindcss\\\";\\n@plugin \\\"tailwindcss-react-aria-components\\\";\n```\n\n----------------------------------------\n\nTITLE: Using useSlottedContext Hook for Context Consumption\nDESCRIPTION: Shows how to use the useSlottedContext hook to consume context values for both unslotted and slotted scenarios.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/advanced.mdx#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport {useSlottedContext} from 'react-aria-components';\n\n// Consume the un-slotted value.\nlet buttonContext = useSlottedContext(ButtonContext);\n\n// Consume the value for a specific slot name.\nlet incrementButtonContext = useSlottedContext(ButtonContext, 'increment');\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Drop Operations\nDESCRIPTION: Demonstrates how to restrict drop operations to copy-only using getAllowedDropOperations.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ListBox.mdx#2025-04-23_snippet_38\n\nLANGUAGE: tsx\nCODE:\n```\nlet { dragAndDropHooks } = useDragAndDrop({\n  getAllowedDropOperations: () => ['copy']\n});\n```\n\n----------------------------------------\n\nTITLE: Hiding Time Zone Display in TimeField using React/TSX\nDESCRIPTION: Illustrates using the `hideTimeZone` boolean prop on `MyTimeField` to prevent the time zone abbreviation from being displayed when using a `ZonedDateTime` value. Depends on `parseZonedDateTime` from `@internationalized/date`.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/TimeField.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nexample\n<MyTimeField\n  label=\"Appointment time\"\n  defaultValue={parseZonedDateTime('2022-11-07T10:45[America/Los_Angeles]')}\n  hideTimeZone />\n```\n\n----------------------------------------\n\nTITLE: Creating a Tag Wrapper Component with React Aria Components in TypeScript\nDESCRIPTION: This snippet defines a simple wrapper component, MyTag, for the Tag component from React Aria Components. It applies an additional CSS class (my-tag) while allowing all original props to be forwarded, enabling easy style extension or property customization. Dependencies are React and the Tag component; input props are spread onto Tag; output is a Tag element with added class.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/TagGroup.mdx#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MyTag(props) {\\n  return <Tag {...props} className=\\\"my-tag\\\" />\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing onDragEnd Handler\nDESCRIPTION: Example demonstrating how to handle drag end events and remove items after a move operation is completed.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/GridList.mdx#2025-04-23_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nfunction Example() {\n  let list = useListData({\n    initialItems: [\n      {id: 1, name: 'Adobe Photoshop'},\n      {id: 2, name: 'Adobe XD'},\n      {id: 3, name: 'Adobe Dreamweaver'},\n      {id: 4, name: 'Adobe InDesign'},\n      {id: 5, name: 'Adobe Connect'}\n    ]\n  });\n\n  let { dragAndDropHooks } = useDragAndDrop({\n    onDragEnd(e) {\n      if (e.dropOperation === 'move') {\n        list.remove(...e.keys);\n      }\n    }\n  });\n\n  return (\n    <div style={{display: 'flex', gap: 12, flexWrap: 'wrap'}}>\n      <MyGridList aria-label=\"Draggable list\" selectionMode=\"multiple\" items={list.items} dragAndDropHooks={dragAndDropHooks}>\n        {item => <MyItem>{item.name}</MyItem>}\n      </MyGridList>\n      <DroppableGridList />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Different Entry and Exit CSS Transitions for React Aria Popover\nDESCRIPTION: A more complex CSS transition that uses different animations for entry (scale and fade) and exit (fade only) in React Aria Popover components.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/styling.mdx#2025-04-23_snippet_18\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Popover {\n  /* entry transition */\n  transition: transform 300ms, opacity 300ms;\n\n  /* starting state of the entry transition */\n  &[data-entering] {\n    opacity: 0;\n    transform: scale(0.8);\n  }\n\n  &[data-exiting] {\n    /* exit transition */\n    transition: opacity 150ms;\n    /* ending state of the exit transition */\n    opacity: 0;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Label Component with useContextProps\nDESCRIPTION: Shows how to create a custom Label component that consumes LabelContext using the useContextProps hook, making it compatible with React Aria Components.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/advanced.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {LabelProps} from 'react-aria-components';\nimport {LabelContext, useContextProps} from 'react-aria-components';\n\nconst MyCustomLabel = React.forwardRef(\n  (props: LabelProps, ref: React.ForwardedRef<HTMLLabelElement>) => {\n    [props, ref] = useContextProps(props, ref, LabelContext);\n\n    return <label {...props} ref={ref} />;\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Using disabledKeys for Dynamic Collections in GridList\nDESCRIPTION: Example of using the disabledKeys prop at the GridList level to disable specific items based on their keys, which is useful for dynamic collections where individual isDisabled props might be inconvenient.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/GridList.mdx#2025-04-23_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\n// Using the example above\n<PokemonList\n  aria-label=\"List with disabled rows\"\n  selectionMode=\"multiple\"\n  disabledKeys={[3]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom DateSegment Component in TypeScript/React\nDESCRIPTION: Example showing how to create a wrapper component for DateSegment to customize props.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DateField.mdx#2025-04-23_snippet_26\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MyDateSegment(props) {\n  return <MyDateSegment {...props} className=\"my-date-segment\" />\n}\n```\n\n----------------------------------------\n\nTITLE: ListBox Anatomy with Sections and Text Slots\nDESCRIPTION: Shows the structure of a ListBox component with sections, headers, and text slots for labels and descriptions.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ListBox.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ListBox, ListBoxItem, ListBoxSection, Header, Text} from 'react-aria-components';\n\n<ListBox>\n  <ListBoxItem>\n    <Text slot=\"label\" />\n    <Text slot=\"description\" />\n  </ListBoxItem>\n  <ListBoxSection>\n    <Header />\n    <ListBoxItem />\n  </ListBoxSection>\n</ListBox>\n```\n\n----------------------------------------\n\nTITLE: Handling Drop Events in React Aria Components\nDESCRIPTION: This snippet demonstrates how to handle drop events in React Aria Components, using the dropOperation property to perform different actions based on the type of drop operation.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/GridList.mdx#2025-04-23_snippet_41\n\nLANGUAGE: tsx\nCODE:\n```\nlet onItemDrop = async (e) => {\n  let data = JSON.parse(await e.items[0].getText('my-app-file'));\n  switch (e.dropOperation) {\n    case 'move':\n      MyAppFileService.move(data.filePath, props.filePath);\n      break;\n    case 'copy':\n      MyAppFileService.copy(data.filePath, props.filePath);\n      break;\n    case 'link':\n      MyAppFileService.link(data.filePath, props.filePath);\n      break;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Image Data Array in TypeScript/React\nDESCRIPTION: Defines an array of image objects containing metadata like ID, title, user, image URL, and aspect ratio for use in a waterfall layout component. Each object represents an image with its associated properties.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Virtualizer.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nlet images = [\n    {\n        \"id\": \"8SXaMMWCTGc\",\n        \"title\": \"A Ficus Lyrata Leaf in the sunlight (2/2) (IG: @clay.banks)\",\n        \"user\": \"Clay Banks\",\n        \"image\": \"https://images.unsplash.com/photo-1580133318324-f2f76d987dd8?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3wzNDA4NDh8MHwxfHRvcGljfHw2c01WalRMU2tlUXx8fHx8Mnx8MTczODM2NzE4M3w&ixlib=rb-4.0.3&q=80&w=400\",\n        \"aspectRatio\": \"0.6666\"\n    },\n    /* Additional image objects omitted for brevity */\n]\n```\n\n----------------------------------------\n\nTITLE: Reusable ColorField Component Wrapper\nDESCRIPTION: Implementation of a reusable ColorField wrapper component with props for label, description, and error handling.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorField.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {ColorFieldProps, ValidationResult} from 'react-aria-components';\nimport {Text, FieldError} from 'react-aria-components';\n\ninterface MyColorFieldProps extends ColorFieldProps {\n  label?: string,\n  description?: string,\n  errorMessage?: string | ((validation: ValidationResult) => string)\n}\n\nexport function MyColorField({label, description, errorMessage, ...props}: MyColorFieldProps) {\n  return (\n    <ColorField {...props}>\n      {label && <Label>{label}</Label>}\n      <Input />\n      {description && <Text slot=\"description\">{description}</Text>}\n      <FieldError>{errorMessage}</FieldError>\n    </ColorField>\n  );\n}\n\n<MyColorField label=\"Color\" />\n```\n\n----------------------------------------\n\nTITLE: Disabling an Entire React Aria RadioGroup (TSX)\nDESCRIPTION: Shows how to disable all radio buttons within a `RadioGroup` simultaneously. This is done by applying the `isDisabled` prop to the `MyRadioGroup` component (presumably a wrapper around `RadioGroup`). When disabled, user interaction with the entire group is prevented.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/RadioGroup.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n<MyRadioGroup label=\"Favorite sport\" isDisabled>\n  <Radio value=\"soccer\">Soccer</Radio>\n  <Radio value=\"baseball\">Baseball</Radio>\n  <Radio value=\"basketball\">Basketball</Radio>\n</MyRadioGroup>\n```\n\n----------------------------------------\n\nTITLE: Disabling an Individual React Aria Radio Button (TSX)\nDESCRIPTION: Demonstrates how to disable a specific `Radio` button within a `RadioGroup`, leaving other options enabled. This is achieved by passing the `isDisabled` prop directly to the individual `Radio` component that needs to be disabled (e.g., the 'Baseball' option).\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/RadioGroup.mdx#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\n<MyRadioGroup label=\"Favorite sport\">\n  <Radio value=\"soccer\">Soccer</Radio>\n  <Radio value=\"baseball\" isDisabled>Baseball</Radio>\n  <Radio value=\"basketball\">Basketball</Radio>\n</MyRadioGroup>\n```\n\n----------------------------------------\n\nTITLE: Styling DateRangePicker with CSS Classes\nDESCRIPTION: Example of styling a DateRangePicker component using CSS class selectors.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DateRangePicker.mdx#2025-04-23_snippet_24\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-DateRangePicker {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Interactive Elements Adjacent to Disclosure Headings\nDESCRIPTION: Example demonstrating how to add additional interactive elements like buttons next to disclosure headings while maintaining proper accessibility.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DisclosureGroup.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<DisclosureGroup>\n  <Disclosure id=\"system\">\n    <div style={{display: 'flex', alignItems: 'center'}}>\n      <Heading>\n        <Button slot=\"trigger\">\n          <svg viewBox=\"0 0 24 24\">\n            <path d=\"m8.25 4.5 7.5 7.5-7.5 7.5\" />\n          </svg>\n          System Requirements\n        </Button>\n      </Heading>\n      <Button>Click me</Button>\n    </div>\n    <DisclosurePanel>\n      <p>Details about system requirements here.</p>\n    </DisclosurePanel>\n  </Disclosure>\n  <Disclosure id=\"personal\">\n    <div style={{display: 'flex', alignItems: 'center'}}>\n      <Heading>\n        <Button slot=\"trigger\">\n          <svg viewBox=\"0 0 24 24\">\n            <path d=\"m8.25 4.5 7.5 7.5-7.5 7.5\" />\n          </svg>\n          Personal Information\n        </Button>\n      </Heading>\n      <Button>Click me</Button>\n    </div>\n    <DisclosurePanel>\n      <p>Details about personal information here.</p>\n    </DisclosurePanel>\n  </Disclosure>\n</DisclosureGroup>\n```\n\n----------------------------------------\n\nTITLE: JavaScript-handled Link Example in React Aria\nDESCRIPTION: Implementation of a JavaScript-handled link using the onPress event handler. When a Link doesn't have an href, it renders as a span with role=\"link\" instead of an anchor element.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Link.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Link onPress={() => alert('Pressed link')}>Adobe</Link>\n```\n\n----------------------------------------\n\nTITLE: Implementing Horizontal Grid ListBox Layout\nDESCRIPTION: Creates a grid-layout ListBox component with horizontal scrolling and multiple selection enabled.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ListBox.mdx#2025-04-23_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\n<ListBox\n  aria-label=\"Albums\"\n  layout=\"grid\"\n  orientation=\"horizontal\"\n  items={albums}\n  selectionMode=\"multiple\">\n  {item => (\n    <ListBoxItem textValue={item.title}>\n      <img src={item.image} alt=\"\" />\n      <Text slot=\"label\">{item.title}</Text>\n      <Text slot=\"description\">{item.artist}</Text>\n    </ListBoxItem>\n  )}\n</ListBox>\n```\n\n----------------------------------------\n\nTITLE: Using International Calendars with DateRangePicker in React (TSX)\nDESCRIPTION: Shows how to render a `DateRangePicker` in a specific locale (Hindi - `hi-IN`) and calendar system (Indian - `u-ca-indian`) using the `I18nProvider` component from `@react-aria/i18n`. The selected date range (`range`), managed by `React.useState`, is displayed, demonstrating that while the UI uses the Indian calendar, the underlying `onChange` event provides dates in the Gregorian calendar system.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DateRangePicker.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\nimport type {DateRange} from 'react-aria-components';\nimport {I18nProvider} from '@react-aria/i18n';\n\nfunction Example() {\n  let [range, setRange] = React.useState<DateRange | null>(null);\n  return (\n    /*- begin highlight -*/\n    <I18nProvider locale=\"hi-IN-u-ca-indian\">\n    {/*- end highlight -*/}\n      <MyDateRangePicker label=\"Date range\" value={range} onChange={setRange} />\n      <p>Start date: {range?.start.toString()}</p>\n      <p>End date: {range?.end.toString()}</p>\n    </I18nProvider>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing DatePicker with Description\nDESCRIPTION: Example showing how to implement a DatePicker with a description slot for additional help text. Includes calendar popup with navigation controls.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DatePicker.mdx#2025-04-23_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\n<DatePicker granularity=\"hour\">\n  <Label>Appointment time</Label>\n  <Group>\n    <DateInput>\n      {segment => <DateSegment segment={segment} />}\n    </DateInput>\n    <Button>▼</Button>\n  </Group>\n  <Text slot=\"description\">Please select a weekday between 9 AM and 5 PM.</Text>\n  <Popover>\n    <Dialog>\n      <Calendar>\n        <header>\n          <Button slot=\"previous\">◀</Button>\n          <Heading />\n          <Button slot=\"next\">▶</Button>\n        </header>\n        <CalendarGrid>\n          {date => <CalendarCell date={date} />}\n        </CalendarGrid>\n      </Calendar>\n    </Dialog>\n  </Popover>\n</DatePicker>\n```\n\n----------------------------------------\n\nTITLE: CSS Styling Based on ColorThumb States\nDESCRIPTION: This CSS snippet illustrates how to style the `ColorThumb` component based on its interaction states using data attributes. It provides selectors for targeting the thumb when it is being dragged (`data-dragging`) or when it is focused (`data-focused`).\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorSlider.mdx#2025-04-23_snippet_17\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ColorThumb[data-dragging] {\n  /* ... */\n}\n\n.react-aria-ColorThumb[data-focused] {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Wrapper Component for Customization\nDESCRIPTION: Shows how to create a wrapper component to customize props of internal Select components.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Select.mdx#2025-04-23_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MyListBox(props) {\n  return <ListBox {...props} className=\"my-listbox\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Placeholder Value for TimeField in React/TSX\nDESCRIPTION: Demonstrates how to use the `placeholderValue` prop on a custom `MyTimeField` component (presumably wrapping `react-aria-components`' `TimeField`) to define the default time shown before selection and used during initial interaction. Requires the `Time` object from `@internationalized/date`.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/TimeField.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nexample\n<MyTimeField label=\"Meeting time\" placeholderValue={new Time(9)} />\n```\n\n----------------------------------------\n\nTITLE: Defining Language Options Data - TypeScript\nDESCRIPTION: Initializes a constant array of language objects with ID and name properties, serving as selectable options for the Select component. No external dependencies beyond TypeScript itself are required to define or export this data. The array structure is intended to be passed as a prop or imported by components that render selectable language items; each object must contain at least the 'id' and 'name' fields. It serves only as example data and does not perform any logic.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/searchable-select.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport './tailwind.global.css';\n\nconst languages = [\n  {\"id\": \"ar\", \"name\": \"Arabic\"},\n  {\"id\": \"bn\", \"name\": \"Bengali\"},\n  {\"id\": \"bs\", \"name\": \"Bosnian\"},\n  {\"id\": \"cs\", \"name\": \"Czech\"},\n  {\"id\": \"da\", \"name\": \"Danish\"},\n  {\"id\": \"de\", \"name\": \"German\"},\n  {\"id\": \"el\", \"name\": \"Greek\"},\n  {\"id\": \"en\", \"name\": \"English\"},\n  {\"id\": \"es\", \"name\": \"Spanish\"},\n  {\"id\": \"fa\", \"name\": \"Persian\"},\n  {\"id\": \"fi\", \"name\": \"Finnish\"},\n  {\"id\": \"fr\", \"name\": \"French\"},\n  {\"id\": \"gu\", \"name\": \"Gujarati\"},\n  {\"id\": \"hi\", \"name\": \"Hindi\"},\n  {\"id\": \"hr\", \"name\": \"Croatian\"},\n  {\"id\": \"hu\", \"name\": \"Hungarian\"},\n  {\"id\": \"is\", \"name\": \"Icelandic\"},\n  {\"id\": \"it\", \"name\": \"Italian\"},\n  {\"id\": \"ja\", \"name\": \"Japanese\"},\n  {\"id\": \"jv\", \"name\": \"Javanese\"},\n  {\"id\": \"kn\", \"name\": \"Kannada\"},\n  {\"id\": \"ko\", \"name\": \"Korean\"},\n  {\"id\": \"ml\", \"name\": \"Malayalam\"},\n  {\"id\": \"mr\", \"name\": \"Marathi\"},\n  {\"id\": \"no\", \"name\": \"Norwegian\"},\n  {\"id\": \"pa\", \"name\": \"Punjabi\"},\n  {\"id\": \"pl\", \"name\": \"Polish\"},\n  {\"id\": \"pt\", \"name\": \"Portuguese\"},\n  {\"id\": \"ro\", \"name\": \"Romanian\"},\n  {\"id\": \"ru\", \"name\": \"Russian\"},\n  {\"id\": \"sk\", \"name\": \"Slovak\"},\n  {\"id\": \"sl\", \"name\": \"Slovenian\"},\n  {\"id\": \"sq\", \"name\": \"Albanian\"},\n  {\"id\": \"sr\", \"name\": \"Serbian\"},\n  {\"id\": \"sv\", \"name\": \"Swedish\"},\n  {\"id\": \"sw\", \"name\": \"Swahili\"},\n  {\"id\": \"ta\", \"name\": \"Tamil\"},\n  {\"id\": \"te\", \"name\": \"Telugu\"},\n  {\"id\": \"th\", \"name\": \"Thai\"},\n  {\"id\": \"tl\", \"name\": \"Filipino\"},\n  {\"id\": \"tr\", \"name\": \"Turkish\"},\n  {\"id\": \"uk\", \"name\": \"Ukrainian\"},\n  {\"id\": \"ur\", \"name\": \"Urdu\"},\n  {\"id\": \"vi\", \"name\": \"Vietnamese\"},\n  {\"id\": \"zh\", \"name\": \"Chinese\"},\n];\n```\n\n----------------------------------------\n\nTITLE: Styling a ComboBox with CSS\nDESCRIPTION: This CSS snippet shows how to style a ComboBox component including the input field, dropdown button, popover, and list box items with proper states for focus, selection, and interaction.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ComboBox.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n\n.react-aria-ComboBox {\n  color: var(--text-color);\n\n  .react-aria-Input {\n    margin: 0;\n    font-size: 1.072rem;\n    background: var(--field-background);\n    color: var(--field-text-color);\n    border: 1px solid var(--border-color);\n    border-radius: 6px;\n    padding: 0.286rem 2rem 0.286rem 0.571rem;\n    vertical-align: middle;\n    outline: none;\n\n    &[data-focused] {\n      outline: 2px solid var(--focus-ring-color);\n      outline-offset: -1px;\n    }\n  }\n\n  .react-aria-Button {\n    background: var(--highlight-background);\n    color: var(--highlight-foreground);\n    forced-color-adjust: none;\n    border-radius: 4px;\n    border: none;\n    margin-left: -1.714rem;\n    width: 1.429rem;\n    height: 1.429rem;\n    padding: 0;\n    font-size: 0.857rem;\n    cursor: default;\n\n    &[data-pressed] {\n      box-shadow: none;\n      background: var(--highlight-background);\n    }\n  }\n}\n\n.react-aria-Popover[data-trigger=ComboBox] {\n  width: var(--trigger-width);\n\n  .react-aria-ListBox {\n    display: block;\n    width: unset;\n    max-height: inherit;\n    min-height: unset;\n    border: none;\n\n    .react-aria-Header {\n      padding-left: 1.571rem;\n    }\n  }\n\n  .react-aria-ListBoxItem {\n    padding: 0 0.571rem 0 1.571rem;\n\n    &[data-focus-visible] {\n      outline: none;\n    }\n\n    &[data-selected] {\n      font-weight: 600;\n      background: unset;\n      color: var(--text-color);\n\n      &::before {\n        content: '✓';\n        content: '✓' / '';\n        alt: ' ';\n        position: absolute;\n        top: 4px;\n        left: 4px;\n      }\n    }\n\n    &[data-focused],\n    &[data-pressed] {\n      background: var(--highlight-background);\n      color: var(--highlight-foreground);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Directory Drop Handling in React\nDESCRIPTION: Demonstrates how to handle directory drops in a ListBox component using react-aria-components. Shows directory traversal and rendering of files and folders.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ListBox.mdx#2025-04-23_snippet_35\n\nLANGUAGE: tsx\nCODE:\n```\nimport File from '@spectrum-icons/workflow/FileTxt';\nimport Folder from '@spectrum-icons/workflow/Folder';\nimport {DIRECTORY_DRAG_TYPE, isDirectoryDropItem} from 'react-aria-components';\n\ninterface DirItem {\n  name: string,\n  kind: string\n}\n\nfunction Example() {\n  let [files, setFiles] = React.useState<DirItem[]>([]);\n\n  let { dragAndDropHooks } = useDragAndDrop({\n    acceptedDragTypes: [DIRECTORY_DRAG_TYPE],\n    async onRootDrop(e) {\n      let dir = e.items.find(isDirectoryDropItem)!;\n      let files = [];\n      for await (let entry of dir.getEntries()) {\n        files.push({\n          name: entry.name,\n          kind: entry.kind\n        });\n      }\n      setFiles(files);\n    }\n  });\n\n  return (\n    <ListBox aria-label=\"Droppable list\" items={files} dragAndDropHooks={dragAndDropHooks} renderEmptyState={() => \"Drop items here\"}>\n      {item => (\n        <ListBoxItem id={item.name} textValue={item.name}>\n          <div className=\"dir-item\">\n            {item.kind === 'directory' ? <Folder /> : <File />}\n            <span>{item.name}</span>\n          </div>\n        </ListBoxItem>\n      )}\n    </ListBox>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable ColorSwatchPicker Components\nDESCRIPTION: Example of creating reusable wrapper components for ColorSwatchPicker. This pattern allows for consistent styling and behavior across an application while encapsulating implementation details.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorSwatchPicker.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {ColorSwatchPickerProps, ColorSwatchPickerItemProps} from 'react-aria-components';\nimport {MyColorSwatch} from './ColorSwatch';\n\nexport function MyColorSwatchPicker({children, ...props}: ColorSwatchPickerProps) {\n  return (\n    <ColorSwatchPicker {...props}>\n      {children}\n    </ColorSwatchPicker>\n  );\n}\n\nexport function MyColorSwatchPickerItem(props: ColorSwatchPickerItemProps) {\n  return (\n    <ColorSwatchPickerItem {...props}>\n      <MyColorSwatch />\n    </ColorSwatchPickerItem>\n  );\n}\n\n<MyColorSwatchPicker>\n  <MyColorSwatchPickerItem color=\"#A00\" />\n  <MyColorSwatchPickerItem color=\"#f80\" />\n  <MyColorSwatchPickerItem color=\"#080\" />\n  <MyColorSwatchPickerItem color=\"#08f\" />\n  <MyColorSwatchPickerItem color=\"#088\" />\n  <MyColorSwatchPickerItem color=\"#008\" />\n</MyColorSwatchPicker>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Vertical Toolbar in React\nDESCRIPTION: This example shows how to create a vertical toolbar with icon buttons using React Aria Components.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Toolbar.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport Move from '@spectrum-icons/workflow/Move';\nimport Select from '@spectrum-icons/workflow/Select';\nimport Polygon from '@spectrum-icons/workflow/PolygonSelect';\nimport Brush from '@spectrum-icons/workflow/Brush';\nimport Pencil from '@spectrum-icons/workflow/Edit';\n\n<Toolbar aria-label=\"Tools\" orientation=\"vertical\">\n  <Group aria-label=\"Select\">\n    <Button aria-label=\"Move\"><Move size=\"S\" /></Button>\n    <Button aria-label=\"Rectangle\"><Select size=\"S\" /></Button>\n    <Button aria-label=\"Polygon\"><Polygon size=\"S\" /></Button>\n  </Group>\n  <Separator orientation=\"horizontal\" />\n  <Group aria-label=\"Draw\">\n    <Button aria-label=\"Brush\"><Brush size=\"S\" /></Button>\n    <Button aria-label=\"Pencil\"><Pencil size=\"S\" /></Button>\n  </Group>\n</Toolbar>\n```\n\n----------------------------------------\n\nTITLE: Custom Heading Component with Context Integration\nDESCRIPTION: Implementation of a custom heading component that integrates with React Aria Components context system\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Calendar.mdx#2025-04-23_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {HeadingProps} from 'react-aria-components';\nimport {HeadingContext, useContextProps} from 'react-aria-components';\n\nconst MyCustomHeading = React.forwardRef((props: HeadingProps, ref: React.ForwardedRef<HTMLHeadingElement>) => {\n  [props, ref] = useContextProps(props, ref, HeadingContext);\n  return <h2 {...props} ref={ref} />;\n});\n```\n\n----------------------------------------\n\nTITLE: TextField CSS Styling\nDESCRIPTION: CSS styles for the TextField component including input styling and focus states.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/TextField.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n\n.react-aria-TextField {\n  display: flex;\n  flex-direction: column;\n  width: fit-content;\n  color: var(--text-color);\n\n  .react-aria-Input,\n  .react-aria-TextArea {\n    padding: 0.286rem;\n    margin: 0;\n    border: 1px solid var(--border-color);\n    border-radius: 6px;\n    background: var(--field-background);\n    font-size: 1.143rem;\n    color: var(--field-text-color);\n\n    &[data-focused] {\n      outline: 2px solid var(--focus-ring-color);\n      outline-offset: -1px;\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Dynamic className Based on Component State - React (JSX)\nDESCRIPTION: This JSX example applies utility classes (such as from Tailwind CSS) to a DropZone based on its state, by passing a function to the className prop. It expects the function to receive an object containing current state (like isDropTarget) and returns a string for the appropriate CSS class. Dependencies include React and the DropZone component, with optional integration into CSS frameworks like Tailwind. This allows real-time, context-sensitive styling based on user interaction.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DropZone.mdx#2025-04-23_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<DropZone className={({isDropTarget}) => isDropTarget ? 'bg-gray-700' : 'bg-gray-600'} />\n```\n\n----------------------------------------\n\nTITLE: Applying Dynamic CSS Classes Based on State in React Aria (JSX)\nDESCRIPTION: Shows how to use a function as the value for the `className` prop on a React Aria `Button`. The function receives state properties (e.g., `isPressed`), enabling conditional application of CSS classes, often used with utility-class libraries like Tailwind.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/SearchField.mdx#2025-04-23_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\n<Button className={({isPressed}) => isPressed ? 'bg-gray-700' : 'bg-gray-600'} />\n```\n\n----------------------------------------\n\nTITLE: Multiple Selection Mode in ToggleButtonGroup\nDESCRIPTION: Configuring ToggleButtonGroup for multiple selection using the selectionMode prop.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ToggleButtonGroup.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<ToggleButtonGroup selectionMode=\"multiple\">\n  <ToggleButton id=\"bold\">Bold</ToggleButton>\n  <ToggleButton id=\"italic\">Italic</ToggleButton>\n  <ToggleButton id=\"underline\">Underline</ToggleButton>\n</ToggleButtonGroup>\n```\n\n----------------------------------------\n\nTITLE: Implementing Advanced Customization with CheckboxContext in React\nDESCRIPTION: This example shows how to create a custom CheckboxDescription component using CheckboxContext for advanced customization of Checkbox components.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/CheckboxGroup.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport {CheckboxContext} from 'react-aria-components';\nimport {useId} from 'react-aria';\n\ninterface CheckboxDescriptionProps {\n  children?: React.ReactNode,\n  description?: string\n}\n\nfunction CheckboxDescription({children, description}: CheckboxDescriptionProps) {\n  let descriptionId = useId();\n  return (\n    <div>\n      <CheckboxContext.Provider value={{'aria-describedby': descriptionId}}>\n        {children}\n      </CheckboxContext.Provider>\n      <small id={descriptionId}>{description}</small>\n    </div>\n  );\n}\n\n<MyCheckboxGroup label=\"Email settings\" defaultValue={['newsletter', 'deals', 'notifications']}>\n  <CheckboxDescription description=\"Receive our newsletter once per week.\">\n    <MyCheckbox value=\"newsletter\">Newsletter</MyCheckbox>\n  </CheckboxDescription>\n  <CheckboxDescription description=\"The best deals and sales for members.\">\n    <MyCheckbox value=\"deals\">Deals</MyCheckbox>\n  </CheckboxDescription>\n  <CheckboxDescription description=\"Notifications about your orders.\">\n    <MyCheckbox value=\"notifications\">Notifications</MyCheckbox>\n  </CheckboxDescription>\n</MyCheckboxGroup>\n```\n\n----------------------------------------\n\nTITLE: Custom Value Label for Meter Component\nDESCRIPTION: Shows how to use the valueLabel prop to provide a custom string for the value label instead of the default formatted value.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Meter.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<MyMeter\n  label=\"Space used\"\n  valueLabel=\"54 of 60GB\"\n  value={90} />\n```\n\n----------------------------------------\n\nTITLE: Making a React Aria RadioGroup Read-Only (TSX)\nDESCRIPTION: Shows how to make a `RadioGroup` selection immutable using the `isReadOnly` prop. Unlike `isDisabled`, a read-only group remains focusable, but the selected value cannot be changed by the user. A `defaultValue` is often provided in this case.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/RadioGroup.mdx#2025-04-23_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\n<MyRadioGroup label=\"Favorite avatar\" defaultValue=\"wizard\" isReadOnly>\n  <Radio value=\"wizard\">Wizard</Radio>\n  <Radio value=\"dragon\">Dragon</Radio>\n</MyRadioGroup>\n```\n\n----------------------------------------\n\nTITLE: Applying Custom CSS Classes to React Aria Components in JSX\nDESCRIPTION: Shows how to override the default React Aria class name by providing a custom string to the `className` prop on a component, demonstrated here with `DisclosureGroup`. This allows for user-defined styling conventions instead of the default `.react-aria-ComponentName`.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DisclosureGroup.mdx#2025-04-23_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<DisclosureGroup className=\"my-accordion\">\n  {/* ... */}\n</DisclosureGroup>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Label Component in TextField\nDESCRIPTION: Demonstrates how to use a custom Label component within a TextField component from React Aria Components.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/advanced.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<TextField>\n  <MyCustomLabel>Name</MyCustomLabel>\n  <Input />\n</TextField>\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-line TextField with TextArea in React Aria Components\nDESCRIPTION: This snippet demonstrates how to use the TextArea component for multi-line text input within a TextField.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/TextField.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport {TextField, Label, TextArea} from 'react-aria-components';\n\n<TextField>\n  <Label>Comment</Label>\n  <TextArea />\n</TextField>\n```\n\n----------------------------------------\n\nTITLE: Using Render Props for Custom Slider Output in JSX\nDESCRIPTION: This JSX snippet demonstrates using a render prop as a child of the `SliderOutput` component. The function receives the slider's state (`state`) and returns a custom string, allowing for flexible formatting of the displayed value (e.g., adding a 'Value: ' prefix).\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorSlider.mdx#2025-04-23_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\n<SliderOutput>\n  {state => `Value: ${state.getThumbValueLabel(0)}`}\n</SliderOutput>\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable Resizable and Sortable Column Component in React\nDESCRIPTION: This code defines a reusable ResizableTableColumn component that wraps the Column component from React Aria Components. It adds a dropdown menu for sorting and resizing functionality, providing a larger hit area for touch screen users.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Table.mdx#2025-04-23_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nimport {MenuTrigger, Button, Popover, Menu, MenuItem} from 'react-aria-components';\n\ninterface ResizableTableColumnProps<T> extends Omit<ColumnProps, 'children'> {\n  children: React.ReactNode\n}\n\nfunction ResizableTableColumn<T extends object>(props: ResizableTableColumnProps<T>) {\n  return (\n    <Column {...props}>\n      {({startResize, sort, allowsSorting, sortDirection}) => (\n        <div className=\"flex-wrapper\">\n          <MenuTrigger>\n            <Button>{props.children}</Button>\n            <Popover>\n              <Menu onAction={(action) => {\n                if (action === 'sortAscending') {\n                  sort('ascending');\n                } else if (action === 'sortDescending') {\n                  sort('descending');\n                } else if (action === 'resize') {\n                  startResize();\n                }\n              }}>\n                <MenuItem id=\"sortAscending\">Sort Ascending</MenuItem>\n                <MenuItem id=\"sortDescending\">Sort Descending</MenuItem>\n                <MenuItem id=\"resize\">Resize</MenuItem>\n              </Menu>\n            </Popover>\n          </MenuTrigger>\n          {allowsSorting && (\n            <span aria-hidden=\"true\" className=\"sort-indicator\">\n              {sortDirection === 'ascending' ? '▲' : '▼'}\n            </span>\n          )}\n          <ColumnResizer />\n        </div>\n      )}\n    </Column>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic CSS Transitions for React Aria Popover Components\nDESCRIPTION: A simple CSS transition example for React Aria Popover components that fades the component in and out using the data-entering and data-exiting states.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/styling.mdx#2025-04-23_snippet_17\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Popover {\n  transition: opacity 300ms;\n\n  &[data-entering],\n  &[data-exiting] {\n    opacity: 0;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Rendering Breadcrumb Content with Render Props\nDESCRIPTION: Shows how to use render props within `Breadcrumbs` and `Breadcrumb` components for conditional rendering based on state. In this example, it renders the item label as bold (`<strong>`) if it's the current item (`isCurrent` is true), otherwise renders it as a standard `Link`.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Breadcrumbs.mdx#2025-04-23_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n<Breadcrumbs items={items}>\n  {(item) => (\n    <Breadcrumb>\n      {({isCurrent}) => isCurrent ? <strong>{item.label}</strong> : <Link>{item.label}</Link>}\n    </Breadcrumb>\n  )}\n</Breadcrumbs>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom FieldGroup Component with TextFieldContext\nDESCRIPTION: Shows how to create a custom FieldGroup component that uses TextFieldContext to provide disabled state to child TextField components.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/advanced.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {TextFieldContext} from 'react-aria-components';\n\ninterface FieldGroupProps {\n  children?: React.ReactNode,\n  isDisabled?: boolean\n}\n\nfunction FieldGroup({children, isDisabled}: FieldGroupProps) {\n  return (\n    <TextFieldContext.Provider value={{isDisabled}}>\n      {children}\n    </TextFieldContext.Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Disabled Switch Component\nDESCRIPTION: Example showing how to disable a Switch component using the isDisabled prop, which prevents user interaction with the component.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Switch.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<MySwitch isDisabled>Airplane Mode</MySwitch>\n```\n\n----------------------------------------\n\nTITLE: Styling Disabled Switch States with CSS\nDESCRIPTION: CSS styling for disabled state of a Switch component. This example shows how to apply visual changes to indicate that the switch is disabled using data attributes.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Switch.mdx#2025-04-23_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Switch {\n  &[data-disabled] {\n    color: var(--text-color-disabled);\n\n    .indicator {\n      border-color: var(--border-color-disabled);\n\n      &:before {\n        background: var(--border-color-disabled);\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Label Component in TextField in React Aria Components\nDESCRIPTION: This snippet demonstrates how to use a custom label component within a TextField in place of the built-in Label component.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/TextField.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n<TextField>\n  <MyCustomLabel>Name</MyCustomLabel>\n  <Input />\n</TextField>\n```\n\n----------------------------------------\n\nTITLE: Using Framer Motion's AnimatePresence with React Aria Collection Components\nDESCRIPTION: An example showing how to use Framer Motion's AnimatePresence component with React Aria collection components to animate items being added or removed from a GridList.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/styling.mdx#2025-04-23_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\nimport {GridList, GridListItem} from 'react-aria-components';\nimport {motion, AnimatePresence} from 'framer-motion';\n\nconst MotionItem = motion(GridListItem);\n\n<GridList>\n  <AnimatePresence>\n    {items.map(item => (\n      <MotionItem\n        key={item.id}\n        id={item.id}\n        layout\n        exit={{opacity: 0}}>\n        {/* ... */}\n      </MotionItem>\n    ))}\n  </AnimatePresence>\n</GridList>\n```\n\n----------------------------------------\n\nTITLE: Basic Button Implementation with React Aria Components\nDESCRIPTION: A simple example of implementing a Button component from the react-aria-components library with an onPress handler.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Button.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Button} from 'react-aria-components';\n\n<Button onPress={() => alert('Hello world!')}>Press me</Button>\n```\n\n----------------------------------------\n\nTITLE: Basic ColorSwatchPicker Implementation in React\nDESCRIPTION: A basic example of implementing a ColorSwatchPicker component with multiple color options. Each ColorSwatchPickerItem represents a selectable color option with a ColorSwatch child component for visual representation.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorSwatchPicker.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ColorSwatchPicker, ColorSwatchPickerItem, ColorSwatch} from 'react-aria-components';\n\n<ColorSwatchPicker>\n  <ColorSwatchPickerItem color=\"#A00\"><ColorSwatch /></ColorSwatchPickerItem>\n  <ColorSwatchPickerItem color=\"#f80\"><ColorSwatch /></ColorSwatchPickerItem>\n  <ColorSwatchPickerItem color=\"#080\"><ColorSwatch /></ColorSwatchPickerItem>\n  <ColorSwatchPickerItem color=\"#08f\"><ColorSwatch /></ColorSwatchPickerItem>\n  <ColorSwatchPickerItem color=\"#088\"><ColorSwatch /></ColorSwatchPickerItem>\n  <ColorSwatchPickerItem color=\"#008\"><ColorSwatch /></ColorSwatchPickerItem>\n</ColorSwatchPicker>\n```\n\n----------------------------------------\n\nTITLE: Targeting React Aria Component States with CSS Data Attributes\nDESCRIPTION: This snippet demonstrates how to use data attributes to target specific UI states of React Aria components in CSS selectors.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/RangeCalendar.mdx#2025-04-23_snippet_19\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-CalendarCell[data-selected] {\n  /* ... */\n}\n\n.react-aria-CalendarCell[data-invalid] {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a FieldGroup Component with ColorFieldContext in React\nDESCRIPTION: This example shows how to create a FieldGroup component that uses ColorFieldContext to pass props to child ColorFields.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorField.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ColorFieldContext} from 'react-aria-components';\n\ninterface FieldGroupProps {\n  title?: string,\n  children?: React.ReactNode,\n  isReadOnly?: boolean\n}\n\nfunction FieldGroup({title, children, isReadOnly}: FieldGroupProps) {\n  return (\n    <fieldset>\n      <legend>{title}</legend>\n      <ColorFieldContext.Provider value={{isReadOnly}}>\n        {children}\n      </ColorFieldContext.Provider>\n    </fieldset>\n  );\n}\n\n<FieldGroup title=\"Colors\" isReadOnly>\n  <MyColorField label=\"Background\" defaultValue=\"#fff\" />\n  <MyColorField label=\"Foreground\" defaultValue=\"#000\" />\n</FieldGroup>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Dialog Trigger with Pressable in React Aria - TypeScript\nDESCRIPTION: This snippet shows how to create a custom trigger element for a dialog using the Pressable component from React Aria Components. The Pressable wraps a span element with a button role to ensure proper ARIA support and forwards user interactions to open the Modal Dialog. Required dependencies: react-aria-components. Expected input is a user pressing the custom trigger, outputting the opening of a modal dialog. It demonstrates handling accessibility roles and proper component composition.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Modal.mdx#2025-04-23_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {Pressable} from 'react-aria-components';\n\n<DialogTrigger>\n  {/*- begin highlight -*/}\n  <Pressable>\n    <span role=\"button\">Custom trigger</span>\n  </Pressable>\n  {/*- end highlight -*/}\n  <Modal>\n    <Dialog>\n      <Heading slot=\"title\">Dialog</Heading>\n      <p>This dialog was triggered by a custom button.</p>\n      <Button slot=\"close\">Close</Button>\n    </Dialog>\n  </Modal>\n</DialogTrigger>\n```\n\n----------------------------------------\n\nTITLE: Integrating Custom Label Component using LabelContext (React/TSX)\nDESCRIPTION: Demonstrates how to create a custom label component (`MyCustomLabel`) that integrates with `react-aria-components` by consuming `LabelContext`. It uses the `useContextProps` hook to merge props and refs provided via context by parent components (like `TimeField`) with its own local props and ref. Requires `LabelProps`, `LabelContext`, `useContextProps` from `react-aria-components`.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/TimeField.mdx#2025-04-23_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {LabelProps} from 'react-aria-components';\nimport {LabelContext, useContextProps} from 'react-aria-components';\n\nconst MyCustomLabel = React.forwardRef((props: LabelProps, ref: React.ForwardedRef<HTMLLabelElement>) => {\n  // Merge the local props and ref with the ones provided via context.\n  ///- begin highlight -///\n  [props, ref] = useContextProps(props, ref, LabelContext);\n  ///- end highlight -///\n\n  // ... your existing Label component\n  return <label {...props} ref={ref} />;\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Trigger for Popover Using Pressable Component (React Aria, TypeScript/JSX)\nDESCRIPTION: This snippet wraps a custom <span> (rendered as a button via ARIA) in a Pressable component to ensure compatibility with DialogTrigger and effective popover triggering. It demonstrates custom triggers for popovers and accessibility via ARIA roles. Dependencies: Pressable, DialogTrigger, MyPopover, Heading. Input includes any Pressable child with an appropriate ARIA role; output is a dialog popover with a custom trigger.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Popover.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Pressable} from 'react-aria-components';\n\n<DialogTrigger>\n  {/*- begin highlight -*/}\n  <Pressable>\n    <span role=\"button\">Custom trigger</span>\n  </Pressable>\n  {/*- end highlight -*/}\n  <MyPopover>\n    <Heading slot=\"title\">Dialog</Heading>\n    <p>This popover was triggered by a custom button.</p>\n  </MyPopover>\n</DialogTrigger>\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled Tab Selection in React Aria Tabs using TSX\nDESCRIPTION: Shows how to manage the selected tab state externally (controlled component). It uses the `selectedKey` prop bound to a React state variable (`timePeriod`) and the `onSelectionChange` callback to update this state when the user selects a different tab. The selected key (`Key` type from react-aria-components) corresponds to the `id` of the selected `Tab`.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Tabs.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {Key} from 'react-aria-components';\n\nfunction Example() {\n  let [timePeriod, setTimePeriod] = React.useState<Key>('triassic');\n\n  return (\n    <>\n      <p>Selected time period: {timePeriod}</p>\n      <Tabs selectedKey={timePeriod} onSelectionChange={setTimePeriod}>\n        <TabList aria-label=\"Mesozoic time periods\">\n          <Tab id=\"triassic\">Triassic</Tab>\n          <Tab id=\"jurassic\">Jurassic</Tab>\n          <Tab id=\"cretaceous\">Cretaceous</Tab>\n        </TabList>\n        <TabPanel id=\"triassic\">\n          The Triassic ranges roughly from 252 million to 201 million years ago, preceding the Jurassic Period.\n        </TabPanel>\n        <TabPanel id=\"jurassic\">\n          The Jurassic ranges from 200 million years to 145 million years ago.\n        </TabPanel>\n        <TabPanel id=\"cretaceous\">\n          The Cretaceous is the longest period of the Mesozoic, spanning from 145 million to 66 million years ago.\n        </TabPanel>\n      </Tabs>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DateRangePicker with ZonedDateTime in React (TSX)\nDESCRIPTION: Demonstrates initializing a custom DateRangePicker component (`MyDateRangePicker`) with default start and end dates using `parseZonedDateTime` from `@internationalized/date`. This ensures the component is time zone aware, displaying the abbreviation and handling DST correctly based on the provided 'America/Los_Angeles' time zone.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DateRangePicker.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\nimport {parseZonedDateTime} from '@internationalized/date';\n\n<MyDateRangePicker\n  label=\"Date range\"\n  defaultValue={{\n    start: parseZonedDateTime('2022-11-07T00:45[America/Los_Angeles]'),\n    end: parseZonedDateTime('2022-11-08T11:15[America/Los_Angeles]')\n  }} />\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Single Selection in Tree Component (TSX)\nDESCRIPTION: This example shows how to configure the previously defined `FileTree` component for single selection mode. It sets the `selectionMode` prop to 'single' and provides a default selected item using `defaultSelectedKeys`.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Tree.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n// Using the example above\n<FileTree selectionMode=\"single\" defaultSelectedKeys={[2]} defaultExpandedKeys={[1]} />\n```\n```\n\n----------------------------------------\n\nTITLE: Menu Component Styling\nDESCRIPTION: CSS styling for the Menu and MenuItem components including support for focus states and layout.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Menu.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n\n.react-aria-Menu {\n  max-height: inherit;\n  box-sizing: border-box;\n  overflow: auto;\n  padding: 2px;\n  min-width: 150px;\n  box-sizing: border-box;\n  outline: none;\n}\n\n.react-aria-MenuItem {\n  margin: 2px;\n  padding: 0.286rem 0.571rem;\n  border-radius: 6px;\n  outline: none;\n  cursor: default;\n  color: var(--text-color);\n  font-size: 1.072rem;\n  position: relative;\n  display: grid;\n  grid-template-areas: \"label kbd\"\n                      \"desc  kbd\";\n  align-items: center;\n  column-gap: 20px;\n  forced-color-adjust: none;\n\n  &[data-focused] {\n    background: var(--highlight-background);\n    color: var(--highlight-foreground);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Drag and Drop Elements in GridList with CSS\nDESCRIPTION: CSS styling for drag and drop functionality in GridList, including styles for draggable items, drag handles, items being dragged, and drop indicators to provide visual feedback during drag operations.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/GridList.mdx#2025-04-23_snippet_21\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-GridListItem {\n  &[data-allows-dragging] {\n    padding-left: 4px;\n  }\n\n  &[data-dragging] {\n    opacity: 0.6;\n  }\n\n  [slot=drag] {\n    all: unset;\n    width: 15px;\n    text-align: center;\n\n    &[data-focus-visible] {\n      border-radius: 4px;\n      outline: 2px solid var(--focus-ring-color);\n    }\n  }\n}\n\n.react-aria-DropIndicator {\n  &[data-drop-target] {\n    outline: 1px solid var(--highlight-background);\n  }\n\n  @supports not selector(:has(.foo)) {\n    /* Undo gap in browsers that don't support :has */\n    margin-bottom: -2px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Render Props for Conditional Rendering in React Aria Components\nDESCRIPTION: This snippet demonstrates how to use render props to conditionally render elements based on component states, such as adding an icon for unavailable dates.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/RangeCalendar.mdx#2025-04-23_snippet_21\n\nLANGUAGE: jsx\nCODE:\n```\n<CalendarCell>\n  {({formattedDate, isUnavailable}) => (\n    <>\n      {isUnavailable && <UnavailableIcon />}\n      <span>{formattedDate}</span>\n    </>\n  )}\n</CalendarCell>\n```\n\n----------------------------------------\n\nTITLE: Custom Trigger with Focusable Wrapper in TooltipTrigger (TypeScript)\nDESCRIPTION: This TypeScript/JSX snippet shows how to use a custom DOM element (a span with role=\"button\") as a tooltip trigger by wrapping it with the Focusable component from react-aria-components. Focusable ensures proper keyboard navigation and accessibility. Required dependency: Focusable from react-aria-components. Inputs: Any child that needs to be focusable. Outputs: A custom-triggered tooltip that remains accessible. Triggers must have ARIA roles or semantic elements and forward ref/props for full accessibility support.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Tooltip.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Focusable} from 'react-aria-components';\\n\\n<TooltipTrigger>\\n  {/*- begin highlight -*/}\\n  <Focusable>\\n    <span role=\\\"button\\\">Custom trigger</span>\\n  </Focusable>\\n  {/*- end highlight -*/}\\n  <MyTooltip>Tooltip</MyTooltip>\\n</TooltipTrigger>\\n\n```\n\n----------------------------------------\n\nTITLE: Basic ColorArea Implementation in React Aria Components\nDESCRIPTION: Simple example showing how to implement a ColorArea component with a ColorThumb. This demonstrates the minimal required markup for a functional color area picker.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorArea.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ColorArea, ColorThumb} from 'react-aria-components';\n\n<ColorArea>\n  <ColorThumb />\n</ColorArea>\n```\n\n----------------------------------------\n\nTITLE: Setting Custom First Day of Week in DateRangePicker\nDESCRIPTION: Example demonstrating how to change the first day of the week in a DateRangePicker calendar. The firstDayOfWeek prop overrides the locale default to start weeks on Monday.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DateRangePicker.mdx#2025-04-23_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\n<MyDateRangePicker label=\"Date range\" firstDayOfWeek=\"mon\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS v3 Plugins in tailwind.config.js\nDESCRIPTION: Shows how to add the `tailwindcss-react-aria-components` (version 1.x specifically for v3) and `tailwindcss-animate` plugins to a Tailwind CSS v3 project. The plugins are required and added to the `plugins` array within the `tailwind.config.js` file.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/account-menu.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nmodule.exports = {\n  // ...\n  plugins: [\n    require('tailwindcss-react-aria-components'),\n    require('tailwindcss-animate')\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Adding a Description to React Aria RadioGroup (TSX)\nDESCRIPTION: Illustrates how to associate supplementary help text with a `RadioGroup` using the `Text` component. The `Text` component is assigned the `slot=\"description\"` prop to link it semantically as the description for the radio group. This enhances accessibility and user guidance.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/RadioGroup.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<RadioGroup>\n  <Label>Favorite avatar</Label>\n  <Radio value=\"wizard\">Wizard</Radio>\n  <Radio value=\"dragon\">Dragon</Radio>\n  <Text slot=\"description\">Please select an avatar.</Text>\n</RadioGroup>\n```\n\n----------------------------------------\n\nTITLE: Importing Tailwind CSS Styles\nDESCRIPTION: Imports global Tailwind CSS styles for the component.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/status-select.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport './tailwind.global.css';\n```\n\n----------------------------------------\n\nTITLE: Basic Structure of React Aria Tabs Components in TSX\nDESCRIPTION: This snippet illustrates the fundamental JSX structure for using React Aria Tabs. It shows the necessary nesting of `TabList` (containing `Tab` elements) and `TabPanel` components within the main `Tabs` wrapper component. This defines the basic component hierarchy.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Tabs.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Tabs, TabList, Tab, TabPanel} from 'react-aria-components';\n\n<Tabs>\n  <TabList>\n    <Tab />\n  </TabList>\n  <TabPanel />\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Implementing getDropOperation for PNG Image Drops in React\nDESCRIPTION: This snippet demonstrates how to use the getDropOperation function to provide appropriate feedback when dragging PNG images over a drop target. It only accepts PNG images and sets the drop operation to 'copy'.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Table.mdx#2025-04-23_snippet_40\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [items, setItems] = React.useState<ImageItem[]>([]);\n\n  let { dragAndDropHooks } = useDragAndDrop({\n    getDropOperation: () => 'copy',\n    acceptedDragTypes: ['image/png'],\n    async onRootDrop(e) {\n      // ...\n    }\n  });\n\n  // See \"Files\" example above...\n}\n```\n\n----------------------------------------\n\nTITLE: Basic ColorField Implementation in React Aria\nDESCRIPTION: Simple example showing how to implement a ColorField component with a label and input.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorField.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ColorField, Label, Input} from 'react-aria-components';\n\n<ColorField defaultValue=\"#ff0\">\n  <Label>Primary Color</Label>\n  <Input />\n</ColorField>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Styling with Utility Classes\nDESCRIPTION: Demonstrates how to use function-based className props to apply dynamic styles based on component states.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Select.mdx#2025-04-23_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\n<ListBoxItem className={({isSelected}) => isSelected ? 'bg-blue-400' : 'bg-gray-100'}>\n  Item\n</ListBoxItem>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Calendar System for RangeCalendar in React\nDESCRIPTION: Demonstrates how to create and use a custom calendar system (4-5-4 format) with the RangeCalendar component. It extends the GregorianCalendar class to implement custom business rules.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/RangeCalendar.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {GregorianCalendar} from '@internationalized/date';\n\nfunction Example() {\n  return <MyRangeCalendar firstDayOfWeek=\"sun\" createCalendar={() => new Custom454()} />;\n}\n\nclass Custom454 extends GregorianCalendar {\n  // See @internationalized/date docs linked above...\n  ///- begin collapse -///\n  weekPattern = [4, 5, 4, 4, 5, 4, 4, 5, 4, 4, 5, 4];\n  getDaysInMonth(date) {\n    return this.weekPattern[date.month - 1] * 7;\n  }\n\n  fromJulianDay(jd: number): CalendarDate {\n    let gregorian = super.fromJulianDay(jd);\n\n    let monthStart = startOfWeek(new CalendarDate(gregorian.year, 1, 1), 'en');\n    for (let months = 0; months < this.weekPattern.length; months++) {\n      let weeksInMonth = this.weekPattern[months];\n      let monthEnd = monthStart.add({weeks: weeksInMonth});\n      if (monthEnd.compare(gregorian) > 0) {\n        let days = gregorian.compare(monthStart);\n        return new CalendarDate(this, monthStart.year, months + 1, days + 1);\n      }\n      monthStart = monthEnd;\n    }\n\n    throw Error('Date is not in any month somehow!');\n  }\n\n  toJulianDay(date: AnyCalendarDate): number {\n    let monthStart = startOfWeek(new CalendarDate(date.year, 1, 1), 'en');\n    for (let month = 1; month < date.month; month++) {\n      monthStart = monthStart.add({weeks: this.weekPattern[month - 1]});\n    }\n\n    let gregorian = monthStart.add({days: date.day - 1});\n    return super.toJulianDay(gregorian);\n  }\n\n  getFormattableMonth(date) {\n    let gregorian = toCalendar(date, new GregorianCalendar());\n    return gregorian.set({month: date.month, day: 1});\n  }\n\n  isEqual(other) {\n    return other instanceof Custom454;\n  }\n ///- end collapse -///\n```\n\n----------------------------------------\n\nTITLE: Handling Drop Events with Different Operations in React\nDESCRIPTION: This snippet shows how to handle drop events with different operations (move, copy, link) when interacting with a backend API. It uses a switch statement to determine the appropriate action based on the dropOperation.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Table.mdx#2025-04-23_snippet_41\n\nLANGUAGE: tsx\nCODE:\n```\nlet onItemDrop = async (e) => {\n  let data = JSON.parse(await e.items[0].getText('my-app-file'));\n  switch (e.dropOperation) {\n    case 'move':\n      MyAppFileService.move(data.filePath, props.filePath);\n      break;\n    case 'copy':\n      MyAppFileService.copy(data.filePath, props.filePath);\n      break;\n    case 'link':\n      MyAppFileService.link(data.filePath, props.filePath);\n      break;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Using SelectContext for Prop Injection\nDESCRIPTION: Demonstrates how to use SelectContext to inject props into child Select components from a parent component.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Select.mdx#2025-04-23_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\nimport {SelectContext} from 'react-aria-components';\n\ninterface FieldGroupProps {\n  title?: string,\n  children?: React.ReactNode,\n  isDisabled?: boolean\n}\n\nfunction FieldGroup({title, children, isDisabled}: FieldGroupProps) {\n  return (\n    <fieldset>\n      <legend>{title}</legend>\n      <SelectContext.Provider value={{isDisabled}}>\n        {children}\n      </SelectContext.Provider>\n    </fieldset>\n  );\n}\n\n<FieldGroup title=\"Filters\" isDisabled>\n  <MySelect label=\"Status\" defaultSelectedKey=\"published\">\n    <ListBoxItem id=\"draft\">Draft</ListBoxItem>\n    <ListBoxItem id=\"published\">Published</ListBoxItem>\n    <ListBoxItem id=\"deleted\">Deleted</ListBoxItem>\n  </MySelect>\n  <MySelect label=\"Author\" defaultSelectedKey=\"emma\">\n    <ListBoxItem id=\"john\">John</ListBoxItem>\n    <ListBoxItem id=\"emma\">Emma</ListBoxItem>\n    <ListBoxItem id=\"tim\">Tim</ListBoxItem>\n  </MySelect>\n</FieldGroup>\n```\n\n----------------------------------------\n\nTITLE: Styling Sortable Columns with CSS in React Aria Components\nDESCRIPTION: CSS styling for sortable columns in a React Aria Components table. The style adds padding to sort indicators and hides them when a column is not being sorted.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Table.mdx#2025-04-23_snippet_16\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Column {\n  .sort-indicator {\n    padding: 0 2px;\n  }\n\n  &:not([data-sort-direction]) .sort-indicator {\n    visibility: hidden;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Empty State in TagList\nDESCRIPTION: This example shows how to use the renderEmptyState prop to display a custom message when there are no items in the TagList.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/TagGroup.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<TagGroup>\n  <Label>Categories</Label>\n  <TagList renderEmptyState={() => 'No categories.'}>\n    {[]}\n  </TagList>\n</TagGroup>\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Placeholder Value\nDESCRIPTION: Example of setting a custom placeholder value for the DatePicker using CalendarDate.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DatePicker.mdx#2025-04-23_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nimport {CalendarDate} from '@internationalized/date';\n\n<MyDatePicker label=\"Birth date\" placeholderValue={new CalendarDate(1980, 1, 1)} />\n```\n\n----------------------------------------\n\nTITLE: Testing React Aria Table Component with Test Utils\nDESCRIPTION: This example demonstrates how to use the @react-aria/test-utils package to test a React Aria Table component, including row selection and toggling.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Table.mdx#2025-04-23_snippet_52\n\nLANGUAGE: ts\nCODE:\n```\n// Table.test.ts\nimport {render, within} from '@testing-library/react';\nimport {User} from '@react-aria/test-utils';\n\nlet testUtilUser = new User({interactionType: 'mouse', advanceTimer: jest.advanceTimersByTime});\n// ...\n\nit('Table can toggle row selection', async function () {\n  let {getByTestId} = render(\n    <Table data-testid=\"test-table\" selectionMode=\"multiple\">\n     ...\n    </Table>\n  );\n  let tableTester = testUtilUser.createTester('Table', {root: getByTestId('test-table')});\n  expect(tableTester.selectedRows).toHaveLength(0);\n\n  await tableTester.toggleSelectAll();\n  expect(tableTester.selectedRows).toHaveLength(10);\n\n  await tableTester.toggleRowSelection({row: 2});\n  expect(tableTester.selectedRows).toHaveLength(9);\n  let checkbox = within(tableTester.rows[2]).getByRole('checkbox');\n  expect(checkbox).not.toBeChecked();\n\n  await tableTester.toggleSelectAll();\n  expect(tableTester.selectedRows).toHaveLength(10);\n  expect(checkbox).toBeChecked();\n\n  await tableTester.toggleSelectAll();\n  expect(tableTester.selectedRows).toHaveLength(0);\n});\n```\n\n----------------------------------------\n\nTITLE: Integrating DatePicker with HTML Forms using the 'name' Prop in React Aria Components (TSX)\nDESCRIPTION: Demonstrates how to integrate `MyDatePicker` with standard HTML forms by assigning a value to the `name` prop ('birthday'). This ensures the selected date is included in the form submission data, formatted as an ISO 8601 string based on the component's granularity.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DatePicker.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n<MyDatePicker label=\"Birth date\" name=\"birthday\" />\n```\n```\n\n----------------------------------------\n\nTITLE: Styling the React Aria Popover Component (CSS)\nDESCRIPTION: Provides a CSS class selector targeting the Popover component generated by React Aria. It is a baseline for custom popover styles using the .react-aria-Popover class. No dependencies—styles apply directly to matching HTML elements. No parameters, inputs, or outputs: this sets container-level styling.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Popover.mdx#2025-04-23_snippet_12\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Popover {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Forwarding Refs in Custom Trigger Components for React Aria (TypeScript)\nDESCRIPTION: This TypeScript/JSX snippet provides an example of building a custom trigger component using React.forwardRef. The component is a button that spreads all props and forwards the ref, a requirement for compatibility with TooltipTrigger and accessibility. Dependency: React. Inputs: props, ref. Outputs: Focusable DOM button that works with React Aria triggers. This pattern is essential when using third-party or custom components as triggers.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Tooltip.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst CustomTrigger = React.forwardRef((props, ref) => (\\n  <button {...props} ref={ref} />\\n));\\n\n```\n\n----------------------------------------\n\nTITLE: Using disabledKeys in TagGroup\nDESCRIPTION: This example demonstrates how to use the disabledKeys prop at the TagGroup level to disable specific tags based on their ids.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/TagGroup.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let options = [\n    { id: 1, name: \"News\" },\n    { id: 2, name: \"Travel\" },\n    { id: 3, name: \"Gaming\" },\n    { id: 4, name: \"Shopping\" }\n  ];\n\n  return (\n    <MyTagGroup\n      label=\"Categories\"\n      items={options}\n      selectionMode=\"multiple\"\n      disabledKeys={[2, 4]}\n    >\n      {(item) => <MyTag>{item.name}</MyTag>}\n    </MyTagGroup>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Disabled Button Implementation\nDESCRIPTION: Implementation of a disabled Button component using the isDisabled prop.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Button.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Button isDisabled>Pin</Button>\n```\n\n----------------------------------------\n\nTITLE: Accessing ColorWheel State Context and Updating Hue Value - TypeScript (TSX)\nDESCRIPTION: This example demonstrates a HueField component that consumes ColorWheelStateContext to access color state and update the hue channel value. It displays a NumberField with an Input for user interaction, handling changes by calling setValue on the ColorWheel state. Dependencies include react, react-aria-components, and react-aria's useLocale. The HueField is shown in the context of a ColorWheel component composition, where it enables direct numeric manipulation of the hue value for color selection.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorWheel.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ColorWheelStateContext, NumberField, Input, useLocale} from 'react-aria-components';\n\nfunction HueField() {\n  /*- begin highlight -*/\n  let state = React.useContext(ColorWheelStateContext)!;\n  /*- end highlight -*/\n  let {locale} = useLocale();\n  return (\n    <NumberField\n      aria-label={state.value.getChannelName('hue', locale)}\n      value={state.value.getChannelValue('hue')}\n      onChange={v => state.setValue(state.value.withChannelValue('hue', v))}\n      formatOptions={state.value.getChannelFormatOptions('hue')}>\n      <Input />\n    </NumberField>\n  );\n}\n\n<ColorWheel outerRadius={100} innerRadius={74}>\n  <ColorWheelTrack />\n  <ColorThumb />\n  {/*- begin highlight -*/}\n  <HueField />\n  {/*- end highlight -*/}\n</ColorWheel>\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable ColorSwatch Component with Transparency Support\nDESCRIPTION: Example of creating a reusable ColorSwatch wrapper component that adds a checkerboard pattern behind partially transparent colors.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorSwatch.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {ColorSwatchProps} from 'react-aria-components';\n\nexport function MyColorSwatch(props: ColorSwatchProps) {\n  return (\n    <ColorSwatch \n      {...props}\n      style={({color}) => ({\n        background: `linear-gradient(${color}, ${color}),\n          repeating-conic-gradient(#CCC 0% 25%, white 0% 50%) 50% / 16px 16px`\n      })} />\n  );\n}\n\n<MyColorSwatch color=\"#f00a\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Item Drop Handler in React Aria ListBox\nDESCRIPTION: Shows how to implement basic drag and drop functionality with onItemDrop event handler. Demonstrates dropping items onto specific list items.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ListBox.mdx#2025-04-23_snippet_31\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let { dragAndDropHooks } = useDragAndDrop({\n    onItemDrop(e) {\n      alert(`Dropped on ${e.target.key}`);\n    }\n  });\n\n  return (\n    <div style={{display: 'flex', gap: 12, flexWrap: 'wrap'}}>\n      <DraggableListBox />\n      <ListBox aria-label=\"Droppable list\" dragAndDropHooks={dragAndDropHooks}>\n        <ListBoxItem id=\"applications\">Applications</ListBoxItem>\n        <ListBoxItem id=\"documents\">Documents</ListBoxItem>\n        <ListBoxItem id=\"pictures\">Pictures</ListBoxItem>\n      </ListBox>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for Link Items in ListBox\nDESCRIPTION: Applies custom styling to ListBoxItem components with href attributes to remove text decoration and set the cursor to pointer, enhancing the visual appearance of link items.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ComboBox.mdx#2025-04-23_snippet_11\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ListBoxItem[href] {\n  text-decoration: none;\n  cursor: pointer;\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Value Scale for Meter Component\nDESCRIPTION: Shows how to use custom minValue and maxValue props to set a custom value scale for the Meter component.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Meter.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<MyMeter\n  label=\"Widgets Used\"\n  minValue={50}\n  maxValue={150}\n  value={100} />\n```\n\n----------------------------------------\n\nTITLE: Using Custom Keyboard Component in Menu Items\nDESCRIPTION: Example of using a custom keyboard shortcut component within a MenuItem that's compatible with React Aria Components.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Menu.mdx#2025-04-23_snippet_31\n\nLANGUAGE: tsx\nCODE:\n```\n<Menu>\n  <MenuItem textValue=\"Paste\">\n    <Text slot=\"label\">Paste</Text>\n    <MyKeyboard>⌘V</MyKeyboard>\n  </MenuItem>\n  {/* ... */}\n</Menu>\n```\n\n----------------------------------------\n\nTITLE: Styling React Aria Checkbox with Default CSS Class\nDESCRIPTION: Demonstrates how to apply CSS styles to a React Aria Checkbox component by targeting its default built-in class name, which follows the `react-aria-ComponentName` naming convention.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Checkbox.mdx#2025-04-23_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Checkbox {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Single Selection Mode in ToggleButtonGroup\nDESCRIPTION: Example of ToggleButtonGroup with single selection mode and default selected key.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ToggleButtonGroup.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<ToggleButtonGroup defaultSelectedKeys={['list']}>\n  <ToggleButton id=\"grid\">Grid view</ToggleButton>\n  <ToggleButton id=\"list\">List view</ToggleButton>\n  <ToggleButton id=\"gallery\">Gallery view</ToggleButton>\n</ToggleButtonGroup>\n```\n\n----------------------------------------\n\nTITLE: Adding Description Text to a SearchField in React Aria (TSX)\nDESCRIPTION: Demonstrates how to associate descriptive help text with a `SearchField` using the `Text` component from `react-aria-components`. The `slot=\"description\"` prop ensures the text is correctly linked to the input field for accessibility and layout purposes.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/SearchField.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<SearchField>\n  <Label>Email</Label>\n  <Input />\n  <Button>✕</Button>\n  {/*- begin highlight -*/}\n  <Text slot=\"description\">Enter an email for us to contact you about your order.</Text>\n  {/*- end highlight -*/}\n</SearchField>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Styling with Tailwind CSS in ToggleButton\nDESCRIPTION: Example of using a function with the className prop to apply Tailwind CSS classes dynamically based on component state.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ToggleButton.mdx#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<ToggleButton className={({isSelected}) => isSelected ? 'bg-blue-600' : 'bg-gray-600'} />\n```\n\n----------------------------------------\n\nTITLE: Handling DateRangePicker Values in React\nDESCRIPTION: This example shows how to handle both controlled and uncontrolled values in a DateRangePicker component. It demonstrates parsing dates using @internationalized/date and managing state for controlled components.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DateRangePicker.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseDate} from '@internationalized/date';\n\nfunction Example() {\n  let [value, setValue] = React.useState({\n    start: parseDate('2020-02-03'),\n    end: parseDate('2020-02-08')\n  });\n\n  return (\n    <>\n      <MyDateRangePicker\n        label=\"Date range (uncontrolled)\"\n        defaultValue={{\n          start: parseDate('2020-02-03'),\n          end: parseDate('2020-02-08')\n        }} />\n      <MyDateRangePicker\n        label=\"Date range (controlled)\"\n        value={value}\n        onChange={setValue} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Form Integration with ColorSlider\nDESCRIPTION: Example showing how to integrate a ColorSlider with an HTML form using the name prop for form submission.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorSlider.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<MyColorSlider\n  defaultValue=\"#7f0000\"\n  channel=\"red\"\n  name=\"red\" />\n```\n\n----------------------------------------\n\nTITLE: Consuming LabelContext with useContextProps for Custom Label Compatibility in React Aria Components (TypeScript)\nDESCRIPTION: This snippet defines a MyCustomLabel component using React.forwardRef and TypeScript typing for compatibility with React Aria's prop/context system. useContextProps merges local props and refs with those provided via LabelContext, enabling the custom label to be used seamlessly within TagGroup. Required dependencies are React, LabelContext, useContextProps, and types from react-aria-components. Input parameters include props and a ref; output is a label element with all appropriate props and ref merged.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/TagGroup.mdx#2025-04-23_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {LabelProps} from 'react-aria-components';\\nimport {LabelContext, useContextProps} from 'react-aria-components';\\n\\nconst MyCustomLabel = React.forwardRef((props: LabelProps, ref: React.ForwardedRef<HTMLLabelElement>) => {\\n  // Merge the local props and ref with the ones provided via context.\\n  ///- begin highlight -///\\n  [props, ref] = useContextProps(props, ref, LabelContext);\\n  ///- end highlight -///\\n\\n  // ... your existing Label component\\n  return <label {...props} ref={ref} />;\\n});\n```\n\n----------------------------------------\n\nTITLE: Styling the Select Component with CSS\nDESCRIPTION: This CSS snippet provides styling for the Select component, including the button, popover, and list items. It includes styles for various states such as focus, hover, and selected.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Select.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n\n.react-aria-Select {\n  color: var(--text-color);\n\n  .react-aria-Button {\n    box-shadow: 0 1px 2px rgba(0 0 0 / 0.1);\n    border-radius: 6px;\n    font-size: 1.072rem;\n    padding: 0.286rem 0.286rem 0.286rem 0.571rem;\n    display: flex;\n    align-items: center;\n    max-width: 250px;\n\n    &[data-focus-visible] {\n      outline: 2px solid var(--focus-ring-color);\n      outline-offset: -1px;\n    }\n  }\n\n  .react-aria-SelectValue {\n    &[data-placeholder] {\n      font-style: italic;\n      color: var(--text-color-placeholder);\n    }\n  }\n\n  span[aria-hidden] {\n    width: 1.5rem;\n    line-height: 1.375rem;\n    margin-left: 1rem;\n    padding: 1px;\n    background: var(--highlight-background);\n    color: var(--highlight-foreground);\n    forced-color-adjust: none;\n    border-radius: 4px;\n    font-size: 0.857rem;\n  }\n}\n\n.react-aria-Popover[data-trigger=Select] {\n  min-width: var(--trigger-width);\n\n  .react-aria-ListBox {\n    display: block;\n    width: unset;\n    max-height: inherit;\n    min-height: unset;\n    border: none;\n\n    .react-aria-Header {\n      padding-left: 1.571rem;\n    }\n  }\n\n  .react-aria-ListBoxItem {\n    padding: 0 0.571rem 0 1.571rem;\n\n    &[data-focus-visible] {\n      outline: none;\n    }\n\n    &[data-selected] {\n      font-weight: 600;\n      background: unset;\n      color: var(--text-color);\n\n      &::before {\n        content: '✓';\n        content: '✓' / '';\n        alt: ' ';\n        position: absolute;\n        top: 4px;\n        left: 4px;\n      }\n    }\n\n    &[data-focused],\n    &[data-pressed] {\n      background: var(--highlight-background);\n      color: var(--highlight-foreground);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Popover for Menu with CSS Variables\nDESCRIPTION: Example of using CSS custom properties to make a popover match the width of the menu trigger button.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Menu.mdx#2025-04-23_snippet_27\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Popover[data-trigger=MenuTrigger] {\n  width: var(--trigger-width);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom First Day of Week\nDESCRIPTION: Example showing how to set a custom first day of the week.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DatePicker.mdx#2025-04-23_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\n<MyDatePicker aria-label=\"Appointment time\" firstDayOfWeek=\"mon\" />\n```\n\n----------------------------------------\n\nTITLE: Styling Indeterminate State of ProgressBar with Animation (CSS)\nDESCRIPTION: This CSS snippet provides the style for indeterminate progress, animating the fill to convey ongoing activity when aria-valuenow is not present. The keyframes set fill translation over time. The styles are to be used alongside other ProgressBar CSS, and require a parent element with appropriate ARIA attributes. Dependencies: inclusion in stylesheet; relies on .react-aria-ProgressBar, .fill class, and aria attributes.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ProgressBar.mdx#2025-04-23_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ProgressBar {\n  &:not([aria-valuenow]) {\n    .fill {\n      width: 120px;\n      border-radius: inherit;\n      animation: indeterminate 1.5s infinite ease-in-out;\n      will-change: transform;\n    }\n  }\n}\n\n@keyframes indeterminate {\n  from {\n    transform: translateX(-100%);\n  }\n\n  to {\n    transform: translateX(250px);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Minimum Value for NumberField Validation in React (TSX)\nDESCRIPTION: Demonstrates using the `minValue` prop to enforce a lower bound (e.g., 0) for the `NumberField`. Values entered below this minimum will be clamped on blur. The increment/decrement buttons will be disabled when the value is near the boundary. Setting `minValue` >= 0 can optimize the keyboard type on iOS.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/NumberField.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n<MyNumberField\n  label=\"Enter your age\"\n  minValue={0} />\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Placeholder Value in React Aria DateField with TypeScript\nDESCRIPTION: Configures the placeholder date for MyDateField using the placeholderValue prop, so the initial segment values are prefilled to 1980-01-01. The placeholder guides users towards the expected format. Depends on CalendarDate from @internationalized/date for date construction. Only the label and placeholderValue are specified in this declarative usage.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DateField.mdx#2025-04-23_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {CalendarDate} from '@internationalized/date';\n\n<MyDateField\n  label=\"Birth date\"\n  placeholderValue={new CalendarDate(1980, 1, 1)} />\n```\n\n----------------------------------------\n\nTITLE: Draggable Component Implementation for DropZone\nDESCRIPTION: Implementation of a draggable component using useDrag hook that provides custom data for the drop operation, used as a demonstration source for the DropZone examples.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DropZone.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useDrag} from '@react-aria/dnd';\n\nfunction Draggable() {\n  let {dragProps, isDragging} = useDrag({\n    getItems() {\n      return [{\n        'text/plain': 'hello world',\n        'my-app-custom-type': JSON.stringify({message: 'hello world'})\n      }];\n    }\n  });\n\n  return (\n    <div {...dragProps} role=\"button\" tabIndex={0} className={`draggable ${isDragging ? 'dragging' : ''}`}>\n      Drag me\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for Calendar Component\nDESCRIPTION: CSS styling rules for the Calendar component, including styling for the header, buttons, and calendar cells with various states like selected, focused, and pressed.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Calendar.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n\n.react-aria-Calendar {\n  width: fit-content;\n  max-width: 100%;\n  color: var(--text-color);\n\n  header {\n    display: flex;\n    align-items: center;\n    margin: 0 4px .5rem 4px;\n\n    .react-aria-Heading {\n      flex: 1;\n      margin: 0;\n      text-align: center;\n      font-size: 1.375rem;\n    }\n  }\n\n  .react-aria-Button {\n    width: 2rem;\n    height: 2rem;\n    padding: 0;\n  }\n\n  .react-aria-CalendarCell {\n    width: 2rem;\n    line-height: 2rem;\n    text-align: center;\n    border-radius: 6px;\n    cursor: default;\n    outline: none;\n    margin: 1px;\n    forced-color-adjust: none;\n\n    &[data-outside-month] {\n      display: none;\n    }\n\n    &[data-pressed] {\n      background: var(--gray-100);\n    }\n\n    &[data-focus-visible] {\n      outline: 2px solid var(--focus-ring-color);\n      outline-offset: 2px;\n    }\n\n    &[data-selected] {\n      background: var(--highlight-background);\n      color: var(--highlight-foreground);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Value Formatting for Meter Component\nDESCRIPTION: Demonstrates how to use the formatOptions prop to customize the value formatting, such as displaying as currency.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Meter.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<MyMeter\n  label=\"Currency\"\n  formatOptions={{style: 'currency', currency: 'JPY'}}\n  value={60} />\n```\n\n----------------------------------------\n\nTITLE: Composing ColorWheel Context for ARIA Description - TypeScript (TSX)\nDESCRIPTION: This code illustrates creating a ColorWheelDescription component that uses the React Context API to pass the aria-describedby attribute to ColorWheel via ColorWheelContext.Provider. It leverages the useId hook to generate a unique ID for the description and associates it with both the ColorWheel and a helper description element for accessibility. Dependencies include react-aria-components and react-aria. ColorWheelDescription accepts optional children and an accessible description, rendering the children wrapped in the provider context and a <small> description element.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorWheel.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ColorWheelContext} from 'react-aria-components';\nimport {useId} from 'react-aria';\n\ninterface ColorWheelDescriptionProps {\n  children?: React.ReactNode,\n  description?: string\n}\n\nfunction ColorWheelDescription({children, description}: ColorWheelDescriptionProps) {\n  let descriptionId = useId();\n  return (\n    <div>\n      {/*- begin highlight -*/}\n      <ColorWheelContext.Provider value={{'aria-describedby': descriptionId}}>\n      {/*- end highlight -*/}\n        {children}\n      </ColorWheelContext.Provider>\n      <small id={descriptionId}>{description}</small>\n    </div>\n  );\n}\n\n<ColorWheelDescription description=\"Choose a background color for your profile.\">\n  <MyColorWheel />\n</ColorWheelDescription>\n```\n\n----------------------------------------\n\nTITLE: Custom Checkbox Component Implementation\nDESCRIPTION: Shows how to create a custom checkbox component that works with React Aria Components using CheckboxContext and context props\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Tree.mdx#2025-04-23_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {CheckboxProps, useContextProps} from 'react-aria-components';\nimport {CheckboxContext} from 'react-aria-components';\nimport {useToggleState} from 'react-stately';\nimport {useCheckbox} from 'react-aria';\n\nconst MyCustomCheckbox = React.forwardRef((props: CheckboxProps, ref: React.ForwardedRef<HTMLInputElement>) => {\n  [props, ref] = useContextProps(props, ref, CheckboxContext);\n\n  let state = useToggleState(props);\n  let {inputProps} = useCheckbox(props, state, ref);\n  return <input {...inputProps} ref={ref} />;\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Drop Operation Handler\nDESCRIPTION: Example showing how to implement a custom drop target that only accepts PNG images with specific drop operation handling.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/GridList.mdx#2025-04-23_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nfunction Example() {\n  let [items, setItems] = React.useState<ImageItem[]>([]);\n\n  let { dragAndDropHooks } = useDragAndDrop({\n    getDropOperation: () => 'copy',\n    acceptedDragTypes: ['image/png'],\n    async onRootDrop(e) {\n      // Implementation omitted for brevity\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Setting 'replace' Selection Behavior in Tree Component (TSX)\nDESCRIPTION: This example demonstrates how to set the `selectionBehavior` prop to 'replace' on the `PokemonEvolutionTree` component. This changes the interaction model, where clicking an item replaces the selection, and arrow keys move both focus and selection.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Tree.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n<PokemonEvolutionTree selectionMode=\"multiple\" selectionBehavior=\"replace\" />\n```\n```\n\n----------------------------------------\n\nTITLE: Reusable Meter Component Wrapper\nDESCRIPTION: Creates a reusable MyMeter component that wraps the Meter and its children, accepting a label prop for consistency across usage.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Meter.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {MeterProps} from 'react-aria-components';\n\ninterface MyMeterProps extends MeterProps {\n  label?: string\n}\n\nfunction MyMeter({label, ...props}: MyMeterProps) {\n  return (\n    <Meter {...props}>\n      {({percentage, valueText}) => <>\n        <Label>{label}</Label>\n        <span className=\"value\">{valueText}</span>\n        <div className=\"bar\">\n          <div className=\"fill\" style={{width: percentage + '%'}} />\n        </div>\n      </>}\n    </Meter>\n  );\n}\n\n<MyMeter label=\"Storage space\" value={80} />\n```\n\n----------------------------------------\n\nTITLE: Basic Link Component Example in React Aria\nDESCRIPTION: A simple example showing how to import and use the Link component from React Aria Components. This creates an external link with target attribute.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Link.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Link} from 'react-aria-components';\n\n<Link href=\"https://www.imdb.com/title/tt6348138/\" target=\"_blank\">\n  The missing link\n</Link>\n```\n\n----------------------------------------\n\nTITLE: Styling React Aria Tabs with CSS\nDESCRIPTION: Demonstrates how to style React Aria Tabs components using CSS selectors targeting the default class names.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Tabs.mdx#2025-04-23_snippet_12\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Tabs {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Using Framer Motion Animation Props with React Aria Components\nDESCRIPTION: A simple example of using Framer Motion's animate prop with a wrapped React Aria Modal component to create a fade-in animation.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/styling.mdx#2025-04-23_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\n<MotionModal\n  initial={{opacity: 0}}\n  animate={{opacity: 1}}>\n  {/* ... */}\n</MotionModal>\n```\n\n----------------------------------------\n\nTITLE: Using Selectable Component Example\nDESCRIPTION: Shows how to use the Selectable component to wrap a ToggleButton and Tree component for selection control\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Tree.mdx#2025-04-23_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport {ToggleButton} from 'react-aria-components';\n\n<Selectable>\n  <ToggleButton>Select</ToggleButton>\n  <PokemonEvolutionTree />\n</Selectable>\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Label Component within SearchField\nDESCRIPTION: This example shows how to use the custom MyCustomLabel component within a SearchField component, replacing the built-in Label component from React Aria Components. This demonstrates the component composition pattern enabled by the context system.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/SearchField.mdx#2025-04-23_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\n<SearchField>\n  {/*- begin highlight -*/}\n  <MyCustomLabel>Name</MyCustomLabel>\n  {/*- end highlight -*/}\n  <Input />\n</SearchField>\n```\n\n----------------------------------------\n\nTITLE: Applying Dynamic Class Names Based on State in JSX\nDESCRIPTION: This JSX snippet shows how to use a function as the value for the `className` prop on a `ColorThumb` component. This allows dynamically applying CSS classes (like Tailwind utility classes 'scale-150' or 'scale-100') based on the component's state, such as `isDragging`.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorSlider.mdx#2025-04-23_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\n<ColorThumb className={({isDragging}) => isDragging ? 'scale-150' : 'scale-100'} />\n```\n\n----------------------------------------\n\nTITLE: Applying Custom ClassName to ColorWheel Component - JSX\nDESCRIPTION: This JSX snippet demonstrates overriding the default styling class by applying a custom className (\"my-color-wheel\") to the ColorWheel component. This allows developers to apply their own CSS classes instead of, or in addition to, the default React Aria class, providing flexibility for app-specific styles. No additional dependencies beyond a React and React Aria Components setup. The children prop is used for nesting additional components or markup.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorWheel.mdx#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<ColorWheel className=\"my-color-wheel\">\n  {/* ... */}\n</ColorWheel>\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Label Component within TimeField (React/TSX)\nDESCRIPTION: Shows how to use the previously defined `MyCustomLabel` component directly within a `TimeField`, replacing the default `Label` component provided by `react-aria-components`. This allows for reusing existing styled components while leveraging React Aria's accessibility and behavior.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/TimeField.mdx#2025-04-23_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\n<TimeField>\n  {/*- begin highlight -*/}\n  <MyCustomLabel>Name</MyCustomLabel>\n  {/*- end highlight -*/}\n  <DateInput>\n    {segment => <DateSegment segment={segment} />}\n  </DateInput>\n</TimeField>\n```\n\n----------------------------------------\n\nTITLE: Implementing Read-only TextField in React Aria Components\nDESCRIPTION: This example shows how to create a read-only TextField using the isReadOnly prop.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/TextField.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<MyTextField label=\"Email\" defaultValue=\"abc@adobe.com\" isReadOnly />\n```\n\n----------------------------------------\n\nTITLE: Using Custom MyCheckbox Inside GridListItem with React Aria Components in TypeScript\nDESCRIPTION: This example demonstrates compositional use of MyCheckbox in a GridListItem. By rendering <MyCheckbox slot=\"selection\" /> inside GridListItem, developers can plug custom components into existing patterns that depend on context providers. Assumes that MyCheckbox is defined as a context-aware component and that surrounding GridList/GridListItem are provided by react-aria-components.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/advanced.mdx#2025-04-23_snippet_12\n\nLANGUAGE: TSX\nCODE:\n```\n<GridList>\n  <GridListItem>\n    {/*- begin highlight -*/}\n    <MyCheckbox slot=\"selection\" />\n    {/*- end highlight -*/}\n    {/* ... */}\n  </GridListItem>\n</GridList>\n```\n\n----------------------------------------\n\nTITLE: Formatting ProgressBar Value as Currency (React Aria Components, TypeScript/TSX)\nDESCRIPTION: Demonstrates use of formatOptions to customize value formatting using Intl.NumberFormat-style options for locale-aware representations such as currency. Here, 'JPY' currency is specified for a value of 60. Dependencies: MyProgressBar, React. Inputs: label (\"Sending…\"), formatOptions ({style: 'currency', currency: 'JPY'}), value (60). Outputs: customized value label in the progress bar, formatted as currency.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ProgressBar.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<MyProgressBar\n  label=\"Sending…\"\n  formatOptions={{style: 'currency', currency: 'JPY'}}\n  value={60} />\n```\n\n----------------------------------------\n\nTITLE: Styling Select Components with Data Attributes\nDESCRIPTION: Illustrates how to target specific UI states of React Aria components using data attributes in CSS selectors.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Select.mdx#2025-04-23_snippet_18\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ListBoxItem[data-selected] {\n  /* ... */\n}\n\n.react-aria-ListBoxItem[data-focused] {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Tree with Item Actions and Selection Behaviors\nDESCRIPTION: Example showing how to implement a Tree component with item actions using both toggle and replace selection behaviors. Demonstrates action handling through onAction prop.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Tree.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n<div style={{display: 'flex', flexWrap: 'wrap', gap: '24px'}}>\n  <PokemonEvolutionTree\n    aria-label=\"Pokemon tree with item actions and toggle selection behavior\"\n    onAction={key => alert(`Opening item ${key}...`)}\n    selectionMode=\"multiple\" />\n  <PokemonEvolutionTree\n    aria-label=\"Pokemon tree with item actions and replace selection behavior\"\n    onAction={key => alert(`Opening item ${key}...`)}\n    selectionBehavior=\"replace\"\n    selectionMode=\"multiple\" />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Styling Invalid and Pressed Invalid React Aria Radio Buttons (CSS)\nDESCRIPTION: Provides CSS rules to style `Radio` components when they are part of an invalid `RadioGroup`, identified by the `data-invalid` attribute. It also includes styles for the pressed state of an invalid radio (`data-pressed`). Additionally, it styles the `FieldError` component nested within a `RadioGroup`. The styles rely on CSS variables like `--invalid-color` and `--invalid-color-pressed` for color definitions.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/RadioGroup.mdx#2025-04-23_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Radio {\n  &[data-invalid] {\n    &:before {\n      border-color: var(--invalid-color);\n    }\n\n    &[data-pressed]:before {\n      border-color: var(--invalid-color-pressed);\n    }\n  }\n}\n\n.react-aria-RadioGroup {\n  .react-aria-FieldError {\n    font-size: 12px;\n    color: var(--invalid-color);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Hour Cycle\nDESCRIPTION: Example of forcing 24-hour time format regardless of locale.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DatePicker.mdx#2025-04-23_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\n<MyDatePicker\n  label=\"Appointment time\"\n  granularity=\"minute\"\n  hourCycle={24} />\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with Render Props\nDESCRIPTION: Shows how to use render props to conditionally render content based on component state\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ComboBox.mdx#2025-04-23_snippet_31\n\nLANGUAGE: jsx\nCODE:\n```\n<ListBoxItem>\n  {({isSelected}) => (\n    <>\n      {isSelected && <CheckmarkIcon />}\n      Item\n    </>\n  )}\n</ListBoxItem>\n```\n\n----------------------------------------\n\nTITLE: Assigning the 'region' ARIA Role to a Group (TSX)\nDESCRIPTION: This snippet shows how to assign the `region` ARIA role to a `Group` component instead of the default `group` role. This elevates the group to a landmark region, making it more prominent in the page structure for assistive technologies. Using `role=\"region\"` requires providing an accessible name via `aria-label` or `aria-labelledby`.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Group.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<Group role=\"region\" aria-label=\"Object details\">\n  {/* ... */}\n</Group>\n```\n\n----------------------------------------\n\nTITLE: Rendering Notifications Popover with React Aria and Tailwind CSS in TypeScript\nDESCRIPTION: Defines a React component that displays a notifications popover using React Aria components and Spectrum icons, styled with Tailwind CSS. Three subcomponents (PopoverExample, MyPopover, Notification) demonstrate usage of advanced aria patterns, overlays, and custom transitions. Required dependencies include 'react-aria-components', '@spectrum-icons', and properly configured Tailwind CSS with animate and react-aria-components plugins. The popover includes accessibility features and rich UI, expects user avatar/notification data as input, and limits the visible UI to a 280px wide popover with slide/fade transitions.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/notifications-popover.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {DialogTrigger, Button, Popover, OverlayArrow, Dialog, Link} from 'react-aria-components';\nimport type {PopoverProps} from 'react-aria-components';\nimport BellIcon from '@spectrum-icons/workflow/Bell';\nimport ChatIcon from '@spectrum-icons/workflow/Chat';\n\nfunction PopoverExample() {\n  return (\n    <div className=\"bg-linear-to-r from-orange-400 to-pink-600 p-8 rounded-lg sm:h-[300px] flex items-start justify-center\">\n      <DialogTrigger>\n        <Button aria-label=\"Notifications\" className=\"inline-flex items-center justify-center rounded-md bg-black/20 bg-clip-padding border border-white/20 px-3.5 py-2 font-medium text-white hover:bg-black/30 pressed:bg-black/40 transition-colors cursor-default outline-hidden focus-visible:ring-2 focus-visible:ring-white/75\">\n          <BellIcon size=\"S\" />\n        </Button>\n        <MyPopover>\n          <OverlayArrow>\n            <svg viewBox=\"0 0 12 12\" className=\"block fill-white group-placement-bottom:rotate-180 w-4 h-4\">\n              <path d=\"M0 0L6 6L12 0\" />\n            </svg>\n          </OverlayArrow>\n          <Dialog className=\"p-2 outline-hidden text-gray-700\">\n            <div className=\"flex flex-col\">\n              <Notification avatar=\"https://images.unsplash.com/photo-1569913486515-b74bf7751574?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80\" name=\"Sonja Balmann\" time=\"2h\" text=\"This looks great! Let's ship it.\" />\n              <Notification avatar=\"https://images.unsplash.com/photo-1494790108377-be9c29b29330?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80\" name=\"Maia Pettegree\" time=\"4h\" text=\"Can you add a bit more pizzazz?\" />\n              <Notification avatar=\"https://images.unsplash.com/photo-1500648767791-00dcc994a43e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2.25&w=256&h=256&q=80\" name=\"Charles Webb\" time=\"1d\" text=\"Here's a first pass. What do you think?\" />\n            </div>\n          </Dialog>\n        </MyPopover>\n      </DialogTrigger>\n    </div>\n  );\n}\n\nfunction MyPopover(props: PopoverProps) {\n  return (\n    <Popover\n      {...props}\n      className={({isEntering, isExiting}) => `\n        w-[280px] placement-bottom:mt-2 placement-top:mb-2 group rounded-lg drop-shadow-lg ring-1 ring-black/10 bg-white\n        ${isEntering ? 'animate-in fade-in placement-bottom:slide-in-from-top-1 placement-top:slide-in-from-bottom-1 ease-out duration-200' : ''}\n        ${isExiting ? 'animate-out fade-out placement-bottom:slide-out-to-top-1 placement-top:slide-out-to-bottom-1 ease-in duration-150' : ''}\n      `} />\n  );\n}\n\nfunction Notification({avatar, name, time, text}) {\n  return (\n    <Link href=\"#\" className=\"p-2 rounded-lg hover:bg-gray-100 grid grid-cols-[theme(width.5)_1fr_theme(width.4)] gap-x-2 text-[inherit] no-underline outline-hidden focus-visible:ring-2 ring-pink-800\">\n      <img src={avatar} className=\"rounded-full w-5 h-5 row-span-3\" />\n      <div className=\"text-gray-800 font-semibold leading-5\">{name}</div>\n      <div className=\"text-gray-400\"><ChatIcon size=\"XS\" /></div>\n      <div className=\"text-sm text-gray-500 col-span-2\">Commented {time} ago</div>\n      <p className=\"text-sm overflow-hidden text-ellipsis line-clamp-2 mt-1 mb-0 col-span-2\">{text}</p>\n    </Link>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Styling ComboBox Clear Button\nDESCRIPTION: CSS styles for the ComboBox clear button component, including hover states, focus indicators, and layout positioning.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ComboBox.mdx#2025-04-23_snippet_37\n\nLANGUAGE: css\nCODE:\n```\n.clear-button {\n  width: 1.143rem;\n  height: 1.143rem;\n  border-radius: 1.143rem;\n  margin-left: -3.143rem;\n  font-size: 0.857rem;\n  line-height: 0.857rem;\n  vertical-align: middle;\n  text-align: center;\n  background: gray;\n  color: white;\n  border: none;\n  padding: 0;\n  outline: none;\n\n  &[data-pressed] {\n    background: dimgray;\n  }\n\n  &[data-focus-visible] {\n    outline: 2px solid var(--focus-ring-color);\n    outline-offset: 2px;\n  }\n\n  + .react-aria-Button {\n    margin-left: 4px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Restricting Drop Operations\nDESCRIPTION: Implementation showing how to restrict allowed drop operations to copy-only using getAllowedDropOperations.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/GridList.mdx#2025-04-23_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nlet { dragAndDropHooks } = useDragAndDrop({\n  getAllowedDropOperations: () => ['copy']\n});\n```\n\n----------------------------------------\n\nTITLE: Styling React Aria Tabs Based on UI States\nDESCRIPTION: Illustrates how to target specific UI states of React Aria Tab components using CSS selectors and data attributes.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Tabs.mdx#2025-04-23_snippet_14\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Tab[data-selected] {\n  /* ... */\n}\n\n.react-aria-Tab[data-focus-visible] {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Styling React Aria Radio Component Based on State (CSS)\nDESCRIPTION: Demonstrates how to style a `Radio` component based on its interaction state using CSS data attributes provided by React Aria. This example specifically targets the selected state using the `[data-selected]` attribute selector.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/RadioGroup.mdx#2025-04-23_snippet_19\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Radio[data-selected] {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS v3 Plugin in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to configure the `tailwindcss-react-aria-components` plugin for Tailwind CSS v3. The plugin is added to the `plugins` array within the `tailwind.config.js` file. It's noted that version 1.x of the plugin should be used with Tailwind v3.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/loading-progress.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nmodule.exports = {\n  // ...\n  plugins: [\n    require('tailwindcss-react-aria-components')\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for ToggleButton Component with State Support\nDESCRIPTION: CSS styling for the ToggleButton component with support for different states including pressed, selected, focus, and disabled states.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ToggleButton.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n\n.react-aria-ToggleButton {\n  color: var(--text-color);\n  background: var(--button-background);\n  border: 1px solid var(--border-color);\n  forced-color-adjust: none;\n  border-radius: 4px;\n  appearance: none;\n  vertical-align: middle;\n  font-size: 1rem;\n  text-align: center;\n  margin: 0;\n  outline: none;\n  padding: 6px 10px;\n\n  &[data-pressed] {\n    box-shadow: inset 0 1px 2px rgb(0 0 0 / 0.1);\n    background: var(--button-background-pressed);\n    border-color: var(--border-color-pressed);\n  }\n\n  &[data-selected] {\n    background: var(--highlight-background);\n    border-color: var(--highlight-background);\n    color: var(--highlight-foreground);\n\n    &[data-pressed] {\n      background: var(--highlight-background-pressed);\n      border-color: var(--highlight-background-pressed);\n    }\n  }\n\n  &[data-focus-visible] {\n    outline: 2px solid var(--focus-ring-color);\n    outline-offset: 2px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Sub-components via Composition in React Aria (TSX)\nDESCRIPTION: Demonstrates the composition pattern for customizing internal components like `Input`. A wrapper component (`MyInput`) is created to render the base `Input` component while adding custom props (like `className`) and forwarding others.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/SearchField.mdx#2025-04-23_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MyInput(props) {\n  return <Input {...props} className=\"my-input\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Disabled Breadcrumbs Navigation\nDESCRIPTION: Example showing how to disable an entire breadcrumbs navigation component, preventing interaction and providing appropriate styling.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Breadcrumbs.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<Breadcrumbs isDisabled>\n  <Breadcrumb><Link href=\"/\">Home</Link></Breadcrumb>\n  <Breadcrumb><Link href=\"/react-aria/\">React Aria</Link></Breadcrumb>\n  <Breadcrumb><Link>Breadcrumbs</Link></Breadcrumb>\n</Breadcrumbs>\n```\n\n----------------------------------------\n\nTITLE: Accessing Form Props using useSlottedContext in React Aria Components\nDESCRIPTION: This example shows how to use the useSlottedContext hook to access props from the nearest ancestor form within a custom component. It specifically accesses the validationBehavior prop.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Form.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {FormContext, useSlottedContext} from 'react-aria-components';\n\nfunction MyFormField() {\n  let {validationBehavior} = useSlottedContext(FormContext);\n  // ...\n}\n\n<Form validationBehavior=\"aria\">\n  <MyFormField />\n</Form>\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for React Aria Button Component\nDESCRIPTION: CSS styles for the Button component with support for various states including pressed and focus-visible.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Button.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n\n.react-aria-Button {\n  color: var(--text-color);\n  background: var(--button-background);\n  border: 1px solid var(--border-color);\n  border-radius: 4px;\n  appearance: none;\n  vertical-align: middle;\n  font-size: 1rem;\n  text-align: center;\n  margin: 0;\n  outline: none;\n  padding: 6px 10px;\n  text-decoration: none;\n\n  &[data-pressed] {\n    box-shadow: inset 0 1px 2px rgb(0 0 0 / 0.1);\n    background: var(--button-background-pressed);\n    border-color: var(--border-color-pressed);\n  }\n\n  &[data-focus-visible] {\n    outline: 2px solid var(--focus-ring-color);\n    outline-offset: -1px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: DatePicker Styling with CSS\nDESCRIPTION: CSS styling for the DatePicker component, including styles for the Group container, Button, and DateInput elements. The styling provides a cohesive and accessible appearance for the date picker interface.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DatePicker.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n\n.react-aria-DatePicker {\n  color: var(--text-color);\n\n  .react-aria-Group {\n    display: flex;\n    width: fit-content;\n    align-items: center;\n  }\n\n  .react-aria-Button {\n    background: var(--highlight-background);\n    color: var(--highlight-foreground);\n    border: 2px solid var(--field-background);\n    forced-color-adjust: none;\n    border-radius: 4px;\n    border: none;\n    margin-left: -1.929rem;\n    width: 1.429rem;\n    height: 1.429rem;\n    padding: 0;\n    font-size: 0.857rem;\n    box-sizing: content-box;\n\n    &[data-pressed] {\n      box-shadow: none;\n      background: var(--highlight-background);\n    }\n\n    &[data-focus-visible] {\n      outline: 2px solid var(--focus-ring-color);\n      outline-offset: 2px;\n    }\n  }\n\n  .react-aria-DateInput {\n    padding: 4px 2.5rem 4px 8px;\n  }\n}\n\n.react-aria-Popover[data-trigger=DatePicker] {\n  max-width: unset;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Context for Advanced Customization in React Aria Components\nDESCRIPTION: This snippet shows how to use context to control the selection mode of a GridList component through a ToggleButton.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/GridList.mdx#2025-04-23_snippet_47\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {SelectionMode} from 'react-aria-components';\nimport {ToggleButtonContext, GridListContext} from 'react-aria-components';\n\nfunction Selectable({children}) {\n  let [isSelected, onChange] = React.useState(false);\n  let selectionMode: SelectionMode = isSelected ? 'multiple' : 'none';\n  return (\n    <ToggleButtonContext.Provider value={{isSelected, onChange}}>\n      <GridListContext.Provider value={{selectionMode}}>\n        {children}\n      </GridListContext.Provider>\n    </ToggleButtonContext.Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: SearchField with Default Value in React Aria Components\nDESCRIPTION: Example showing how to set an initial uncontrolled value for a SearchField using the defaultValue prop.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/SearchField.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<MySearchField\n  label=\"Search\"\n  defaultValue=\"Puppies\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom HorizontalLayout for Virtualizer in React\nDESCRIPTION: This snippet demonstrates how to create a custom HorizontalLayout class that extends the Layout abstract base class. It implements methods for determining visible items, providing layout information for specific items, and calculating the total content size.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Virtualizer.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Layout, LayoutInfo, Rect, Size, Key} from 'react-aria-components';\n\nclass HorizontalLayout extends Layout {\n  getVisibleLayoutInfos(rect: Rect): LayoutInfo[] {\n    let virtualizer = this.virtualizer!;\n    let keys = Array.from(virtualizer.collection.getKeys());\n    let startIndex = Math.max(0, Math.floor(rect.x / 100));\n    let endIndex = Math.min(keys.length - 1, Math.ceil(rect.maxX / 100));\n    let layoutInfos = [];\n    for (let i = startIndex; i <= endIndex; i++) {\n      layoutInfos.push(this.getLayoutInfo(keys[i]));\n    }\n\n    for (let key of virtualizer.persistedKeys) {\n      let item = virtualizer.collection.getItem(key);\n      if (item?.index < startIndex) {\n        layoutInfos.unshift(this.getLayoutInfo(key));\n      } else if (item?.index > endIndex) {\n        layoutInfos.push(this.getLayoutInfo(key));\n      }\n    }\n    \n    return layoutInfos;\n  }\n\n  getLayoutInfo(key: Key): LayoutInfo | null {\n    let node = this.virtualizer!.collection.getItem(key);\n    if (!node) {\n      return null;\n    }\n\n    let rect = new Rect(node.index * 100, 0, 100, 100);\n    return new LayoutInfo(node.type, node.key, rect);\n  }\n\n  getContentSize(): Size {\n    let numItems = this.virtualizer!.collection.size;\n    return new Size(numItems * 100, 100);\n  }\n}\n\nfunction Example() {\n  let items = [];\n  for (let i = 0; i < 200; i++) {\n    items.push({id: i, name: `Item ${i}`});\n  }\n\n  return (\n    <Virtualizer layout={HorizontalLayout}>\n      <ListBox aria-label=\"Favorite animal\" items={items} orientation=\"horizontal\" style={{height: 'fit-content'}}>\n        {item => <ListBoxItem className=\"item\">{item.name}</ListBoxItem>}\n      </ListBox>\n    </Virtualizer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Tailwind Plugin for Non-Boolean States\nDESCRIPTION: Shows how to style non-boolean states with Tailwind modifiers following the {name}-{value} pattern.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/styling.mdx#2025-04-23_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n<Tabs className=\"orientation-vertical:flex-row\">\n  {/* ... */}\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Overriding Popover Class with Custom ClassName (React/JSX)\nDESCRIPTION: This JSX snippet shows how to override the default popover class by setting the className prop. It is used to apply user-defined styles instead of the react-aria default. No dependencies except Popover. Input is the custom className string; output is a popover with user styles.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Popover.mdx#2025-04-23_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n<Popover className=\"my-popover\">\n  {/* ... */}\n</Popover>\n```\n\n----------------------------------------\n\nTITLE: Applying onAction Directly to GridList Rows - TypeScript\nDESCRIPTION: Demonstrates specifying row-level actions by setting the onAction prop directly on each MyItem component within MyGridList. Both the parent grid list and row can handle their own actions. Each item triggers an alert displaying which entry was opened, showing integration flexibility. Assumes the presence of MyGridList and MyItem with selection functionality.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/GridList.mdx#2025-04-23_snippet_11\n\nLANGUAGE: TSX\nCODE:\n```\n<MyGridList aria-label=\\\"List with onAction applied on the rows directly\\\" selectionMode=\\\"multiple\\\">\\n  {/*- begin highlight -*/}\\n  <MyItem onAction={() => alert(`Opening Games`)}>\\n  {/*- end highlight -*/}\\n    Games\\n  </MyItem>\\n  {/*- begin highlight -*/}\\n  <MyItem onAction={() => alert(`Opening Program Files`)}>\\n  {/*- end highlight -*/}\\n    Program Files\\n  </MyItem>\\n  {/*- begin highlight -*/}\\n  <MyItem onAction={() => alert(`Opening bootmgr`)}>\\n  {/*- end highlight -*/}\\n    bootmgr\\n  </MyItem>\\n  {/*- begin highlight -*/}\\n  <MyItem onAction={() => alert(`Opening log.txt`)}>\\n  {/*- end highlight -*/}\\n    log.txt\\n  </MyItem>\\n</MyGridList>\n```\n\n----------------------------------------\n\nTITLE: Styling Invalid Calendar States with CSS\nDESCRIPTION: CSS styling for invalid calendar states and error messages, including background colors and font styling for error indicators.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Calendar.mdx#2025-04-23_snippet_15\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Calendar {\n  .react-aria-CalendarCell {\n    &[data-invalid] {\n      background: var(--invalid-color);\n      color: var(--highlight-foreground);\n    }\n  }\n\n  [slot=errorMessage] {\n    font-size: 12px;\n    color: var(--invalid-color);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Custom Value Scale for ProgressBar (React Aria Components, TypeScript/TSX)\nDESCRIPTION: This snippet shows how to specify custom scaling on MyProgressBar by providing minValue and maxValue, changing the value range for the progress calculation. Enables representation of non-percentage metrics with ranges like 50–150 and a current value of 100. Dependencies: MyProgressBar. Inputs: label (\"Loading…\"), minValue (50), maxValue (150), value (100). Output: rendered progress bar with value calculated on the custom scale.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ProgressBar.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<MyProgressBar\n  label=\"Loading…\"\n  minValue={50}\n  maxValue={150}\n  value={100} />\n```\n\n----------------------------------------\n\nTITLE: Styling Disabled ComboBox States with CSS\nDESCRIPTION: CSS for styling the disabled state of a ComboBox, including specific styles for both the input field and the dropdown button when they have the data-disabled attribute.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ComboBox.mdx#2025-04-23_snippet_21\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ComboBox {\n  .react-aria-Input {\n    &[data-disabled] {\n      border-color: var(--border-color-disabled);\n    }\n  }\n\n  .react-aria-Button {\n    &[data-disabled] {\n      background: var(--border-color-disabled);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Styling of ColorThumb in React\nDESCRIPTION: This example shows how to dynamically apply styles to a ColorThumb component based on its dragging state. It uses a function to determine the className based on the component's state.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorArea.mdx#2025-04-23_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n<ColorThumb className={({isDragging}) => isDragging ? 'scale-150' : 'scale-100'} />\n```\n\n----------------------------------------\n\nTITLE: Styling Horizontal and Grid ListBox Layouts\nDESCRIPTION: CSS styling for horizontal and grid layouts of ListBox components, including item selection and focus states.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ListBox.mdx#2025-04-23_snippet_17\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ListBox[data-orientation=horizontal],\n.react-aria-ListBox[data-layout=grid] {\n  flex-direction: row;\n  width: fit-content;\n  max-width: 100%;\n  padding: 4px;\n\n  .react-aria-ListBoxItem {\n    position: relative;\n    margin: 0;\n    padding: 4px;\n\n    & img {\n      object-fit: cover;\n      aspect-ratio: 1/1;\n      max-width: 150px;\n      margin-bottom: 4px;\n      border-radius: 4px;\n    }\n\n    &[data-selected] {\n      background: none;\n      color: inherit;\n\n      &:after {\n        content: '✓';\n        content: '✓' / '';\n        alt: ' ';\n        position: absolute;\n        top: 8px;\n        right: 8px;\n        background: var(--highlight-background);\n        border: 2px solid var(--highlight-foreground);\n        color: var(--highlight-foreground);\n        width: 22px;\n        height: 22px;\n        border-radius: 22px;\n        box-sizing: border-box;\n        font-size: 14px;\n        line-height: 1em;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        box-shadow: 0 0 8px rgb(0 0 0 / .5);\n      }\n    }\n\n    &[data-focus-visible] {\n      outline: 2px solid var(--focus-ring-color);\n      outline-offset: -2px;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind v4 Plugins via CSS Import\nDESCRIPTION: Shows how to include the `tailwindcss-react-aria-components` and `tailwindcss-animate` plugins in a Tailwind CSS v4 project using the `@plugin` directive within the main CSS file. This method is specific to Tailwind v4 configuration.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/command-palette.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n@plugin \"tailwindcss-react-aria-components\";\n@plugin \"tailwindcss-animate\";\n```\n\n----------------------------------------\n\nTITLE: Tree with Disabled Items\nDESCRIPTION: Example of implementing disabled items in a Tree component using the isDisabled prop.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Tree.mdx#2025-04-23_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\n<Tree aria-label=\"Tree with disabled items\" style={{height: '100px'}} defaultExpandedKeys={['bulbasaur']}>\n  <MyTreeItem id=\"bulbasaur\" title=\"Bulbasaur\">\n    <MyTreeItem id=\"ivysaur\" title=\"Ivysaur\" isDisabled>\n      <MyTreeItem id=\"venusaur\" title=\"Venusaur\" />\n    </MyTreeItem>\n  </MyTreeItem>\n</Tree>\n```\n\n----------------------------------------\n\nTITLE: Dynamically Styling React Aria Components Based on State in JSX\nDESCRIPTION: Explains using a function passed to the `className` prop to dynamically apply CSS classes based on the component's state properties (e.g., `isExpanded` for a `Disclosure` component). This technique is useful for conditional styling, especially with utility CSS libraries like Tailwind.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DisclosureGroup.mdx#2025-04-23_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n<Disclosure className={({isExpanded}) => isExpanded ? 'border-blue-500' : 'border-gray-600'} />\n```\n\n----------------------------------------\n\nTITLE: Styling React Aria Slider with CSS\nDESCRIPTION: Provides CSS rules for styling the React Aria Slider component and its parts (Label, Output, Track, Thumb). It defines layout using CSS grid, sets dimensions, colors, borders, and styles for different states like dragging (`[data-dragging]`), focus (`[data-focus-visible]`), and orientation (`[data-orientation=horizontal]`). It imports base theme variables from '@react-aria/example-theme'.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Slider.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n\n.react-aria-Slider {\n  display: grid;\n  grid-template-areas: \"label output\"\n                       \"track track\";\n  grid-template-columns: 1fr auto;\n  max-width: 300px;\n  color: var(--text-color);\n\n  .react-aria-Label {\n    grid-area: label;\n  }\n\n  .react-aria-SliderOutput {\n    grid-area: output;\n  }\n\n  .react-aria-SliderTrack {\n    grid-area: track;\n    position: relative;\n\n    /* track line */\n    &:before {\n      content: '';\n      display: block;\n      position: absolute;\n      background: var(--border-color);\n    }\n  }\n\n  .react-aria-SliderThumb {\n    width: 1.429rem;\n    height: 1.429rem;\n    border-radius: 50%;\n    background: var(--highlight-background);\n    border: 2px solid var(--background-color);\n    forced-color-adjust: none;\n\n    &[data-dragging] {\n      background: var(--highlight-background-pressed);\n    }\n\n    &[data-focus-visible] {\n      outline: 2px solid var(--focus-ring-color);\n    }\n  }\n\n  &[data-orientation=horizontal] {\n    flex-direction: column;\n    width: 300px;\n\n    .react-aria-SliderTrack {\n      height: 30px;\n      width: 100%;\n\n      &:before {\n        height: 3px;\n        width: 100%;\n        top: 50%;\n        transform: translateY(-50%);\n      }\n    }\n\n    .react-aria-SliderThumb {\n      top: 50%;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Disabled Items in GridList with React Aria Components\nDESCRIPTION: Example showing how to disable specific items in a GridList using the isDisabled prop on individual GridListItem components. Disabled items have limited interactions depending on configuration.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/GridList.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n<MyGridList aria-label=\"List with disabled rows\" selectionMode=\"multiple\">\n  <MyItem>Charizard</MyItem>\n  <MyItem>Blastoise</MyItem>\n  <MyItem isDisabled>Venusaur</MyItem>\n  <MyItem>Pikachu</MyItem>\n</MyGridList>\n```\n\n----------------------------------------\n\nTITLE: ColorArea with onChange and onChangeEnd Events\nDESCRIPTION: Example demonstrating how to use both onChange and onChangeEnd events to track current and final color values during user interaction with the color area.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorArea.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [currentValue, setCurrentValue] = React.useState(parseColor('hsl(50, 100%, 50%)'));\n  let [finalValue, setFinalValue] = React.useState(currentValue);\n\n  return (\n    <div>\n      <MyColorArea\n        value={currentValue}\n        onChange={setCurrentValue}\n        onChangeEnd={setFinalValue} />\n      <p>Current value: {currentValue.toString('hsl')}</p>\n      <p>Final value: {finalValue.toString('hsl')}</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Applying Classes Based on State in React Aria Radio (JSX)\nDESCRIPTION: Illustrates using a function as the value for the `className` prop to dynamically apply CSS classes based on the component's current state. This example changes the background color based on the `isPressed` state, a technique often used with utility CSS frameworks like Tailwind.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/RadioGroup.mdx#2025-04-23_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\n<Radio className={({isPressed}) => isPressed ? 'bg-gray-700' : 'bg-gray-600'} />\n```\n\n----------------------------------------\n\nTITLE: Uncontrolled ColorPicker Usage\nDESCRIPTION: Example demonstrating usage of an uncontrolled ColorPicker with default value.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorPicker.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<MyColorPicker\n  label=\"Color\"\n  defaultValue=\"hsl(25, 100%, 50%)\" />\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Wrapper Component for React Aria Components\nDESCRIPTION: This example demonstrates how to create a wrapper component to customize props passed to a React Aria component, which is useful for composition and reusability.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/RangeCalendar.mdx#2025-04-23_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MyCalendarCell(props) {\n  return <CalendarCell {...props} className=\"my-item\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Class Names with State Functions\nDESCRIPTION: Demonstrates using function-based className props for dynamic styling based on component states\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ComboBox.mdx#2025-04-23_snippet_30\n\nLANGUAGE: jsx\nCODE:\n```\n<ListBoxItem className={({isSelected}) => isSelected ? 'bg-blue-400' : 'bg-gray-100'}>\n  Item\n</ListBoxItem>\n```\n\n----------------------------------------\n\nTITLE: Using Contexts to Propagate Props in React Aria Components (TSX)\nDESCRIPTION: Example of creating a custom `FieldGroup` component that uses the exported `SearchFieldContext.Provider` to pass props (like `isDisabled`) down to multiple descendant `SearchField` components implicitly via React Context.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/SearchField.mdx#2025-04-23_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nimport {SearchFieldContext} from 'react-aria-components';\n\ninterface FieldGroupProps {\n  title?: string,\n  children?: React.ReactNode,\n  isDisabled?: boolean\n}\n\nfunction FieldGroup({title, children, isDisabled}: FieldGroupProps) {\n  return (\n    <fieldset>\n      <legend>{title}</legend>\n      {/*- begin highlight -*/}\n      <SearchFieldContext.Provider value={{isDisabled}}>\n      {/*- end highlight -*/}\n        {children}\n      </SearchFieldContext.Provider>\n    </fieldset>\n  );\n}\n\n<FieldGroup title=\"Filters\" isDisabled>\n  <MySearchField label=\"Name\" defaultValue=\"Devon\" />\n  <MySearchField label=\"Email\" defaultValue=\"devon@example.com\" />\n</FieldGroup>\n```\n\n----------------------------------------\n\nTITLE: Custom Label Component with Context Integration\nDESCRIPTION: Implementation of a custom label component that integrates with React Aria Components context system\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DateRangePicker.mdx#2025-04-23_snippet_33\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {LabelProps} from 'react-aria-components';\nimport {LabelContext, useContextProps} from 'react-aria-components';\n\nconst MyCustomLabel = React.forwardRef((props: LabelProps, ref: React.ForwardedRef<HTMLLabelElement>) => {\n  [props, ref] = useContextProps(props, ref, LabelContext);\n  return <label {...props} ref={ref} />;\n});\n```\n\n----------------------------------------\n\nTITLE: Styling RangeCalendar with CSS\nDESCRIPTION: This CSS snippet provides styling for the RangeCalendar component, including layout, colors, and interactions for various states like focus and selection.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/RangeCalendar.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n\n.react-aria-RangeCalendar {\n  width: fit-content;\n  max-width: 100%;\n  color: var(--text-color);\n\n  & header {\n    display: flex;\n    align-items: center;\n    margin: 0 4px .5rem 4px;\n\n    .react-aria-Heading {\n      flex: 1;\n      margin: 0;\n      text-align: center;\n      font-size: 1.375rem;\n    }\n  }\n\n  .react-aria-Button {\n    width: 2rem;\n    height: 2rem;\n    padding: 0;\n  }\n\n  & table {\n    border-collapse: collapse;\n\n    & td {\n      padding: 2px 0;\n    }\n  }\n\n  .react-aria-CalendarCell {\n    width: 2.286rem;\n    line-height: 2.286rem;\n    text-align: center;\n    border-radius: 6px;\n    cursor: default;\n    outline: none;\n    forced-color-adjust: none;\n\n    &[data-outside-month] {\n      display: none;\n    }\n\n    &[data-pressed] {\n      background: var(--gray-100);\n    }\n\n    &[data-focus-visible] {\n      outline: 2px solid var(--highlight-background);\n      outline-offset: -2px;\n    }\n\n    &[data-selected] {\n      background: var(--highlight-background);\n      color: var(--highlight-foreground);\n      border-radius: 0;\n\n      &[data-focus-visible] {\n        outline-color: var(--highlight-foreground);\n        outline-offset: -3px;\n      }\n    }\n\n    &[data-selection-start] {\n      border-start-start-radius: 6px;\n      border-end-start-radius: 6px;\n    }\n\n    &[data-selection-end] {\n      border-start-end-radius: 6px;\n      border-end-end-radius: 6px;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom ListBox Component Wrapper\nDESCRIPTION: Example of creating a wrapper component for customizing ListBox props\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ComboBox.mdx#2025-04-23_snippet_33\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MyListBox(props) {\n  return <ListBox {...props} className=\"my-listbox\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Using MyProgressBar for Indeterminate State (React Aria Components, TypeScript/TSX)\nDESCRIPTION: This code demonstrates how to use MyProgressBar's isIndeterminate prop for scenarios where the exact value is unknown and progress is ongoing. It provides an aria-label for accessibility and sets isIndeterminate, causing the UI to reflect indeterminate progress. Dependencies: MyProgressBar. Inputs: aria-label (\"Loading…\"), isIndeterminate (true). Outputs: accessible indeterminate progress bar.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ProgressBar.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<MyProgressBar\n  aria-label=\"Loading…\"\n  isIndeterminate />\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind Plugins for React Aria Components - CSS\nDESCRIPTION: Instructs Tailwind CSS to import baseline styles and register the 'tailwindcss-react-aria-components' and 'tailwindcss-animate' plugins, extending Tailwind with custom utilities and animation support. This configuration should be added to the main CSS file of a Tailwind v4 project using React Aria Components. The file must be processed by Tailwind for @plugin directives to work. No custom parameters are involved, but both plugins must be installed as project dependencies. Plugins enable enhanced compatibility, accessible component styling, and UI transitions in the example.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/searchable-select.mdx#2025-04-23_snippet_2\n\nLANGUAGE: CSS\nCODE:\n```\n@import \"tailwindcss\";\n@plugin \"tailwindcss-react-aria-components\";\n@plugin \"tailwindcss-animate\";\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering in React Aria Components\nDESCRIPTION: This snippet shows how to use render props to conditionally render elements based on the current state of a GridListItem.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/GridList.mdx#2025-04-23_snippet_45\n\nLANGUAGE: jsx\nCODE:\n```\n<GridListItem>\n  {({selectionMode}) => (\n    <>\n      {selectionMode !== 'none' && <Checkbox />}\n      Item\n    </>\n  )}\n</GridListItem>\n```\n\n----------------------------------------\n\nTITLE: Composing a Custom ColorSwatchPickerItem with Additional Styling (TypeScript/TSX)\nDESCRIPTION: Illustrates how to build a wrapper component around ColorSwatchPickerItem in TypeScript/TSX in order to add custom className props. The wrapper forwards all received props and adds a specific class (my-swatch) for additional styling. Dependencies include React, and the ColorSwatchPickerItem component must be imported or defined elsewhere. Inputs are any props valid for the original component.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorSwatchPicker.mdx#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n```tsx\\nfunction MyColorSwatchPickerItem(props) {\\n  return <ColorSwatchPickerItem {...props} className=\\\"my-swatch\\\" />\\n}\\n```\n```\n\n----------------------------------------\n\nTITLE: Using Function-based className for Dynamic Styling\nDESCRIPTION: Example of using a function that receives component states to dynamically determine CSS classes, useful with utility CSS libraries like Tailwind.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Menu.mdx#2025-04-23_snippet_24\n\nLANGUAGE: jsx\nCODE:\n```\n<MenuItem className={({isSelected}) => isSelected ? 'bg-blue-400' : 'bg-gray-100'}>\n  Item\n</MenuItem>\n```\n\n----------------------------------------\n\nTITLE: Disabled Tabs Implementation\nDESCRIPTION: Shows how to disable all tabs or individual tabs using the isDisabled prop.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Tabs.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<Tabs isDisabled>\n  <TabList aria-label=\"Input settings\">\n    <Tab id=\"mouse\">Mouse Settings</Tab>\n    <Tab id=\"keyboard\">Keyboard Settings</Tab>\n    <Tab id=\"gamepad\">Gamepad Settings</Tab>\n  </TabList>\n  <TabPanel id=\"mouse\">Mouse Settings</TabPanel>\n  <TabPanel id=\"keyboard\">Keyboard Settings</TabPanel>\n  <TabPanel id=\"gamepad\">Gamepad Settings</TabPanel>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Styling React Aria ColorWheel with CSS Selectors - CSS\nDESCRIPTION: This snippet shows how to target the React Aria ColorWheel component using its default class selector \".react-aria-ColorWheel\". It is a starting template for adding custom styles to the color wheel element. No dependencies are required but must be within a project using React Aria Components. The selector enables precise targeting; the actual properties inside the block may be customized as needed.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorWheel.mdx#2025-04-23_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ColorWheel {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Custom CSS Class to React Aria Checkbox (JSX)\nDESCRIPTION: Shows how to override the default React Aria class name by providing a custom string to the `className` prop on a Checkbox component. This allows for specific styling using the custom class.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Checkbox.mdx#2025-04-23_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<Checkbox className=\"my-checkbox\">\n  {/* ... */}\n</Checkbox>\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind v3 Plugins in tailwind.config.js\nDESCRIPTION: Demonstrates how to add the `tailwindcss-react-aria-components` (v1.x) and `tailwindcss-animate` plugins to a Tailwind CSS v3 project by requiring them within the `plugins` array in the `tailwind.config.js` file. This is the standard configuration method for Tailwind v3 and requires installing v1.x of the `tailwindcss-react-aria-components` plugin.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/command-palette.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nmodule.exports = {\n  // ...\n  plugins: [\n    require('tailwindcss-react-aria-components'),\n    require('tailwindcss-animate')\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Styling Drop Indicators in React Aria Tables\nDESCRIPTION: CSS styling for the drop indicator that appears between items when dragging. The data-drop-target attribute selector is used to style the indicator when an item is being dragged over the gap.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Table.mdx#2025-04-23_snippet_31\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-DropIndicator[data-drop-target] {\n  outline: 1px solid var(--highlight-background);\n  transform: translateZ(0);\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Custom CSS Class to DateInput in React/JSX\nDESCRIPTION: Demonstrates how to override the default CSS class by providing a custom `className` prop to the `DateInput` component, enabling targeted styling.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/TimeField.mdx#2025-04-23_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\n<DateInput className=\"my-date-input\">\n  {/* ... */}\n</DateInput>\n```\n\n----------------------------------------\n\nTITLE: Tree Component Anatomy Structure\nDESCRIPTION: Code showing the basic structure and relationships between Tree components. This snippet demonstrates how to structure a Tree with TreeItems, TreeItemContent, selection elements, and expand/collapse buttons.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Tree.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Tree, TreeItem, TreeItemContent, Button, Checkbox} from 'react-aria-components';\n\n<Tree>\n  <TreeItem>\n    <TreeItemContent>\n      <Button slot=\"chevron\" />\n      <Checkbox slot=\"selection\" />\n    </TreeItemContent>\n    <TreeItem>\n      {/* ... */}\n    </TreeItem>\n  </TreeItem>\n</Tree>\n```\n\n----------------------------------------\n\nTITLE: Customizing Input Component in React Aria Components\nDESCRIPTION: This example shows how to create a custom wrapper component for the Input to customize its props.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/TextField.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MyInput(props) {\n  return <Input {...props} className=\"my-input\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Tree Items with External Links\nDESCRIPTION: Example showing how to implement Tree items as links to external pages using the href prop.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Tree.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n<Tree aria-label=\"Tree with onAction applied on the items directly\" style={{height: '200px'}} defaultExpandedKeys={['bulbasaur', 'ivysaur']}>\n  <MyTreeItem\n    href=\"https://pokemondb.net/pokedex/bulbasaur\"\n    target=\"_blank\"\n    id=\"bulbasaur\"\n    title=\"Bulbasaur\">\n    <MyTreeItem\n      id=\"ivysaur\"\n      title=\"Ivysaur\"\n      href=\"https://pokemondb.net/pokedex/ivysaur\"\n      target=\"_blank\">\n      <MyTreeItem\n        id=\"venusaur\"\n        title=\"Venusaur\"\n        href=\"https://pokemondb.net/pokedex/venusaur\"\n        target=\"_blank\" />\n    </MyTreeItem>\n  </MyTreeItem>\n</Tree>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Label Component in ColorSlider\nDESCRIPTION: This snippet demonstrates how to use a custom label component within a ColorSlider component, replacing the built-in React Aria Components Label.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorSlider.mdx#2025-04-23_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\n<ColorSlider>\n  <MyCustomLabel>Opacity</MyCustomLabel>\n  <SliderTrack>\n    <ColorThumb />\n  </SliderTrack>\n</ColorSlider>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using ColorSwatch Component in React\nDESCRIPTION: Basic example of importing and using the ColorSwatch component to display a red color.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorSwatch.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ColorSwatch} from 'react-aria-components';\n\n<ColorSwatch color=\"#f00\" />\n```\n\n----------------------------------------\n\nTITLE: Render Props for Dynamic Content in React Aria Column Component\nDESCRIPTION: This snippet demonstrates the use of render props to dynamically render content in a React Aria Column component based on its current state.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Table.mdx#2025-04-23_snippet_47\n\nLANGUAGE: jsx\nCODE:\n```\n<Column>\n  {({allowsSorting, sortDirection}) => (\n    <>\n      Column Title\n      {allowsSorting && <MySortIndicator direction={sortDirection} />}\n    </>\n  )}\n</Column>\n```\n\n----------------------------------------\n\nTITLE: Styling Group Component States using Data Attributes (CSS)\nDESCRIPTION: This CSS example illustrates how to style the `Group` component based on its interaction states using data attributes provided by React Aria. Selectors like `.react-aria-Group[data-hovered]` and `.react-aria-Group[data-focus-visible]` enable applying distinct styles when the group is hovered over or receives keyboard focus, respectively.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Group.mdx#2025-04-23_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Group[data-hovered] {\n  /* ... */\n}\n\n.react-aria-Group[data-focus-visible] {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Class Assignment for OverlayArrow Using State in JSX\nDESCRIPTION: This JSX snippet shows how to dynamically assign a className to the OverlayArrow component using a function that receives the placement state. The className changes to 'rotate-90' if the placement is left or right, otherwise it is 'rotate-0'. Used for styling directional arrows in overlays. Inputs: className function, placement prop from state. Outputs: State-driven class assignment for overlay orientation. Best used with utility CSS frameworks.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Tooltip.mdx#2025-04-23_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<OverlayArrow className={({placement}) => placement === 'left' || placement === 'right' ? 'rotate-90' : 'rotate-0'}>\\n  {/* ... */}\\n</OverlayArrow>\\n\n```\n\n----------------------------------------\n\nTITLE: Styling React Aria Components with Default CSS Class Selectors\nDESCRIPTION: Demonstrates styling a `DisclosureGroup` component using its default built-in CSS class name (`.react-aria-DisclosureGroup`). React Aria components include default class names following the `react-aria-ComponentName` convention which can be targeted with CSS selectors.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DisclosureGroup.mdx#2025-04-23_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-DisclosureGroup {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Drop on Items in React Aria Components\nDESCRIPTION: This example shows how to enable dropping on individual items within a GridList using the onItemDrop event. It demonstrates handling the drop event and accessing the target item's key.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/GridList.mdx#2025-04-23_snippet_27\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let { dragAndDropHooks } = useDragAndDrop({\n    onItemDrop(e) {\n      alert(`Dropped on ${e.target.key}`);\n    }\n  });\n\n  return (\n    <div style={{display: 'flex', gap: 12, flexWrap: 'wrap'}}>\n      <DraggableGridList />\n      <MyGridList aria-label=\"Droppable list\" dragAndDropHooks={dragAndDropHooks}>\n        <MyItem id=\"applications\">Applications</MyItem>\n        <MyItem id=\"documents\">Documents</MyItem>\n        <MyItem id=\"pictures\">Pictures</MyItem>\n      </MyGridList>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: FieldGroup Component with Context\nDESCRIPTION: Implementation of a custom FieldGroup component using ComboBoxContext for prop sharing\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ComboBox.mdx#2025-04-23_snippet_34\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ComboBoxContext} from 'react-aria-components';\n\ninterface FieldGroupProps {\n  title?: string,\n  children?: React.ReactNode,\n  isDisabled?: boolean\n}\n\nfunction FieldGroup({title, children, isDisabled}: FieldGroupProps) {\n  return (\n    <fieldset>\n      <legend>{title}</legend>\n      <ComboBoxContext.Provider value={{isDisabled}}>\n        {children}\n      </ComboBoxContext.Provider>\n    </fieldset>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable Switch Component in React\nDESCRIPTION: Definition of a reusable MySwitch component that wraps the React Aria Switch component. This includes TypeScript props interface and component implementation that properly forwards properties.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Switch.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {SwitchProps} from 'react-aria-components';\n\ninterface MySwitchProps extends Omit<SwitchProps, 'children'> {\n  children: React.ReactNode\n}\n\nfunction MySwitch({children, ...props}: MySwitchProps) {\n  return (\n    <Switch {...props}>\n      <div className=\"indicator\" />\n      {children}\n    </Switch>\n  );\n}\n\n<MySwitch>Wi-Fi</MySwitch>\n```\n\n----------------------------------------\n\nTITLE: Registering Tailwind CSS Plugins for Version 3 in TypeScript\nDESCRIPTION: This snippet shows how to configure 'tailwindcss-react-aria-components' and 'tailwindcss-animate' as plugins in Tailwind v3 using JavaScript/TypeScript module.exports syntax. Place this in the 'plugins' array of tailwind.config.js. For Tailwind v3, ensure to install 'tailwindcss-react-aria-components' version 1.x instead of 2.x.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/notifications-popover.mdx#2025-04-23_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nmodule.exports = {\n  // ...\n  plugins: [\n    require('tailwindcss-react-aria-components'),\n    require('tailwindcss-animate')\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Disabled TextField in React Aria Components\nDESCRIPTION: This snippet demonstrates how to create a disabled TextField using the isDisabled prop.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/TextField.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<MyTextField label=\"Email\" isDisabled />\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS v4 Plugins\nDESCRIPTION: Demonstrates how to include the `tailwindcss-react-aria-components` and `tailwindcss-animate` plugins in a Tailwind CSS v4 project. This is done by using the `@plugin` directive directly within the main CSS file.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/account-menu.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n@plugin \"tailwindcss-react-aria-components\";\n@plugin \"tailwindcss-animate\";\n```\n\n----------------------------------------\n\nTITLE: Applying a Custom CSS Class to the Group Component (JSX)\nDESCRIPTION: This snippet demonstrates how to override the default `react-aria-Group` class name by providing a custom class via the `className` prop. This allows for targeted styling of specific `Group` instances using the custom selector (e.g., `.my-group`).\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Group.mdx#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Group className=\"my-group\">\n  {/* ... */}\n</Group>\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Class Names to Select Components\nDESCRIPTION: Shows how to override the default class name with a custom one for styling purposes.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Select.mdx#2025-04-23_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\n<Select className=\"my-select\">\n  {/* ... */}\n</Select>\n```\n\n----------------------------------------\n\nTITLE: Accessibility Labeling for ToggleButtonGroup\nDESCRIPTION: Adding an accessibility label to ToggleButtonGroup using aria-label.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ToggleButtonGroup.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<ToggleButtonGroup aria-label=\"Text style\">\n  <ToggleButton id=\"bold\">Bold</ToggleButton>\n  <ToggleButton id=\"italic\">Italic</ToggleButton>\n  <ToggleButton id=\"underline\">Underline</ToggleButton>\n</ToggleButtonGroup>\n```\n\n----------------------------------------\n\nTITLE: Customizing Class Names in React Aria Components\nDESCRIPTION: Demonstrates how to override the default class name with a custom one on a React Aria component.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/styling.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Select className=\"my-select\">\n  {/* ... */}\n</Select>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Router with React Aria Tabs Context\nDESCRIPTION: Demonstrates how to create a custom Router component that integrates with React Aria Tabs and Links using context providers.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Tabs.mdx#2025-04-23_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {PressEvent} from 'react-aria-components';\nimport {TabsContext, LinkContext} from 'react-aria-components';\n\nfunction Router({children}) {\n  let [selectedKey, onSelectionChange] = React.useState(null);\n  let onPress = (e: PressEvent) => {\n    onSelectionChange(e.target.getAttribute('data-href'));\n  };\n\n  return (\n    <TabsContext.Provider value={{selectedKey, onSelectionChange}}>\n      <LinkContext.Provider value={{onPress}}>\n        {children}\n      </LinkContext.Provider>\n    </TabsContext.Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Link with Target Example in React Aria\nDESCRIPTION: Example showing how to create a standard HTML link with an href and target attribute using the React Aria Link component.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Link.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Link href=\"https://adobe.com\" target=\"_blank\">Adobe.com</Link>\n```\n\n----------------------------------------\n\nTITLE: Applying Dynamic CSS Classes to DateSegment in React/JSX\nDESCRIPTION: Shows how to use a function for the `className` prop on `DateSegment` to dynamically apply CSS classes based on the component's state (like `isPlaceholder`). This is useful with utility CSS libraries like Tailwind.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/TimeField.mdx#2025-04-23_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\n<DateSegment className={({isPlaceholder}) => isPlaceholder ? 'bg-gray-300' : 'bg-gray-600'} />\n```\n\n----------------------------------------\n\nTITLE: RadioGroup Anatomy and Structure\nDESCRIPTION: Illustrates the structure of a RadioGroup component with optional description and error message elements.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/RadioGroup.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {RadioGroup, Radio, Label, Text, FieldError} from 'react-aria-components';\n\n<RadioGroup>\n  <Label />\n  <Radio />\n  <Text slot=\"description\" />\n  <FieldError />\n</RadioGroup>\n```\n\n----------------------------------------\n\nTITLE: Styling Submenu Popovers with Transforms\nDESCRIPTION: CSS example showing how to style popover positioning specifically for submenus based on placement direction.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Menu.mdx#2025-04-23_snippet_28\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Popover[data-trigger=SubmenuTrigger][data-placement=\"right\"] {\n  transform: translateX(-5px);\n}\n\n.react-aria-Popover[data-trigger=SubmenuTrigger][data-placement=\"left\"] {\n  transform: translateX(5px);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Basic Usage of ToggleButtonGroup in React\nDESCRIPTION: This snippet demonstrates how to import and use the ToggleButtonGroup component with ToggleButton children.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ToggleButtonGroup.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ToggleButtonGroup, ToggleButton} from 'react-aria-components';\n\n<ToggleButtonGroup>\n  <ToggleButton id=\"left\">Left</ToggleButton>\n  <ToggleButton id=\"center\">Center</ToggleButton>\n  <ToggleButton id=\"right\">Right</ToggleButton>\n</ToggleButtonGroup>\n```\n\n----------------------------------------\n\nTITLE: Using Functional className Props with Tailwind in React Aria Components\nDESCRIPTION: This example shows how to use functional className props to dynamically apply styles based on component states, which is useful when using utility CSS libraries like Tailwind.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/RangeCalendar.mdx#2025-04-23_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\n<CalendarCell className={({isSelected}) => isSelected ? 'bg-blue-600' : 'bg-gray-600'} />\n```\n\n----------------------------------------\n\nTITLE: Setting DatePicker Placeholder Value and Granularity in React Aria Components (TSX)\nDESCRIPTION: Illustrates configuring `MyDatePicker` with specific `granularity` ('second') and a `placeholderValue`. The `placeholderValue`, generated using `now('America/New_York')` from `@internationalized/date`, sets the default time zone for values emitted by `onChange` when no initial `value` or `defaultValue` is provided.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DatePicker.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\nimport {now} from '@internationalized/date';\n\n<MyDatePicker\n  label=\"Event date\"\n  granularity=\"second\" />\n<MyDatePicker\n  label=\"Event date\"\n  placeholderValue={now('America/New_York')}\n  granularity=\"second\" />\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Expanded Disclosures Simultaneously\nDESCRIPTION: Example showing how to allow multiple disclosures to be expanded at the same time using the allowsMultipleExpanded prop.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DisclosureGroup.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<DisclosureGroup defaultExpandedKeys={[\"system\", \"personal\"]} allowsMultipleExpanded>\n  <MyDisclosure id=\"system\" title=\"System Requirements\" >\n    Details about system requirements here\n  </MyDisclosure>\n  <MyDisclosure id=\"personal\" title=\"Personal Information\" >\n    Details about personal information here\n  </MyDisclosure>\n</DisclosureGroup>\n```\n\n----------------------------------------\n\nTITLE: ColorPicker Styling\nDESCRIPTION: CSS styles for the ColorPicker component including button and dialog styling.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorPicker.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n\n.color-picker {\n  background: none;\n  border: none;\n  padding: 0;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  outline: none;\n  border-radius: 4px;\n  appearance: none;\n  vertical-align: middle;\n  font-size: 1rem;\n  color: var(--text-color);\n\n  &[data-focus-visible] {\n    outline: 2px solid var(--focus-ring-color);\n    outline-offset: 2px;\n  }\n}\n\n.color-picker-dialog {\n  outline: none;\n  padding: 15px;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  min-width: 192px;\n  max-height: inherit;\n  box-sizing: border-box;\n  overflow: auto;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Stock Data - TypeScript/React\nDESCRIPTION: Imports CSS styles and defines a stock data array containing information about different companies including symbol, name, sector, market cap, and industry.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/stock-table.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport './tailwind.global.css';\n\nconst stocks = [{\"id\":1,\"symbol\":\"PAACR\",\"name\":\"Pacific Special Acquisition Corp.\",...}];\n```\n\n----------------------------------------\n\nTITLE: Applying a Custom CSS Class to React Aria Radio (JSX)\nDESCRIPTION: Shows how to apply a custom CSS class name to a `Radio` component, overriding the default `react-aria-Radio` class. This is done by passing a string to the `className` prop.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/RadioGroup.mdx#2025-04-23_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\n<Radio className=\"my-radio\">\n  {/* ... */}\n</Radio>\n```\n\n----------------------------------------\n\nTITLE: Styling Drag and Drop Elements in ListBox\nDESCRIPTION: This CSS snippet provides styles for dragging items and drop indicators in a ListBox component.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ListBox.mdx#2025-04-23_snippet_25\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ListBoxItem {\n  &[data-dragging] {\n    opacity: 0.6;\n  }\n}\n\n.react-aria-DropIndicator[data-drop-target] {\n  outline: 1px solid var(--highlight-background);\n}\n```\n\n----------------------------------------\n\nTITLE: Default Selected Switch Implementation\nDESCRIPTION: Example showing how to make a Switch selected by default using the defaultSelected prop, which is useful for uncontrolled components.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Switch.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<MySwitch defaultSelected>Wi-Fi</MySwitch>\n```\n\n----------------------------------------\n\nTITLE: Defining Ripple Effect Keyframes - CSS\nDESCRIPTION: Specifies the @keyframes animation named 'ripple' for creating a scaling and fading effect on the button when pressed. Used by the React RippleButton to animate the background effect. Include this in your CSS to enable the animation; no additional dependencies beyond standard CSS.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/ripple-button.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@keyframes ripple {\n  from {\n    transform: scale(0);\n    opacity: 1;\n  }\n  to {\n    transform: scale(6);\n    opacity: 0;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TextField Form Validation Example\nDESCRIPTION: Implementation of TextField with form validation and error handling.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/TextField.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Form, FieldError, Button} from 'react-aria-components';\n\n<Form>\n  <TextField name=\"email\" type=\"email\" isRequired>\n    <Label>Email</Label>\n    <Input />\n    <FieldError />\n  </TextField>\n  <Button type=\"submit\">Submit</Button>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind v4 Plugins via CSS @import\nDESCRIPTION: Demonstrates how to configure Tailwind v4 by importing the base styles and enabling the `tailwindcss-react-aria-components` and `tailwindcss-animate` plugins directly within the CSS file using the `@plugin` directive.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/datepicker.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n@plugin \"tailwindcss-react-aria-components\";\n@plugin \"tailwindcss-animate\";\n```\n\n----------------------------------------\n\nTITLE: Using Custom Text Component in ListBox with React Aria Components in TypeScript\nDESCRIPTION: This example demonstrates how to use a custom Text component (MyText) within a ListBox, replacing the built-in React Aria Components Text component.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ListBox.mdx#2025-04-23_snippet_47\n\nLANGUAGE: tsx\nCODE:\n```\n<ListBox>\n  <ListBoxItem>\n    <MyText slot=\"label\">Option</MyText>\n  </ListBoxItem>\n  {/* ... */}\n</ListBox>\n```\n\n----------------------------------------\n\nTITLE: Implementing Read-only ColorField in React\nDESCRIPTION: This example demonstrates how to create a read-only ColorField using the isReadOnly prop.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorField.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<MyColorField label=\"Read only\" isReadOnly value=\"#7f007f\" />\n```\n\n----------------------------------------\n\nTITLE: Styling React Aria Components with CSS\nDESCRIPTION: This snippet shows how to style React Aria components using CSS selectors and data attributes for different UI states.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/GridList.mdx#2025-04-23_snippet_43\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-GridList {\n  /* ... */\n}\n\n.react-aria-GridListItem[data-selected] {\n  /* ... */\n}\n\n.react-aria-GridListItem[data-focused] {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Slots with CSS in React Aria Components\nDESCRIPTION: Shows how to target component slots with CSS selectors for custom styling, applying different styles to increment and decrement buttons.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/styling.mdx#2025-04-23_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-NumberField {\n  [slot=increment] {\n    border-radius: 4px 4px 0 0;\n  }\n\n  [slot=decrement] {\n    border-radius: 0 0 4px 4px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling ColorField Description in CSS\nDESCRIPTION: This CSS snippet demonstrates how to style the description text in a ColorField.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorField.mdx#2025-04-23_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ColorField {\n  [slot=description] {\n    font-size: 12px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Drop Indicator Implementation in React Aria\nDESCRIPTION: Shows how to implement a custom drop indicator using the renderDropIndicator function and DropIndicator component. Includes styling for the drop indicator.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ListBox.mdx#2025-04-23_snippet_33\n\nLANGUAGE: tsx\nCODE:\n```\nimport {DropIndicator} from 'react-aria-components';\n\nfunction Example() {\n  let { dragAndDropHooks } = useDragAndDrop({\n    renderDropIndicator(target) {\n      return (\n        <DropIndicator\n          target={target}\n          className={({isDropTarget}) => `my-drop-indicator ${isDropTarget ? 'active' : ''}`} />\n      );\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom DateSegment Wrapper in TypeScript\nDESCRIPTION: Example of creating a wrapper component to customize DateSegment props\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DateRangePicker.mdx#2025-04-23_snippet_30\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MyDateSegment(props) {\n  return <MyDateSegment {...props} className=\"my-date-segment\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Styling FieldError Component for CheckboxGroup in CSS\nDESCRIPTION: This CSS snippet shows how to style the FieldError component within a CheckboxGroup to display validation errors.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/CheckboxGroup.mdx#2025-04-23_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-CheckboxGroup {\n  .react-aria-FieldError {\n    font-size: 12px;\n    color: var(--invalid-color);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS v4 Plugin\nDESCRIPTION: This CSS snippet shows how to include the `tailwindcss-react-aria-components` plugin when using Tailwind CSS v4. The `@plugin` directive integrates the necessary styles and utilities for styling React Aria Components.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/loading-progress.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n@plugin \"tailwindcss-react-aria-components\";\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Separator Icons to Breadcrumbs\nDESCRIPTION: Example demonstrating how to use SVG icons as separators between breadcrumb items instead of CSS-based separators.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Breadcrumbs.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport ChevronIcon from '@spectrum-icons/workflow/ChevronDoubleRight';\n\n<Breadcrumbs>\n  <Breadcrumb className=\"my-item\">\n    <Link href=\"/\">Home</Link>\n    <ChevronIcon size=\"S\" />\n  </Breadcrumb>\n  <Breadcrumb><Link>React Aria</Link></Breadcrumb>\n</Breadcrumbs>\n```\n\n----------------------------------------\n\nTITLE: Using Tailwind Plugin Modifiers for Boolean States\nDESCRIPTION: Illustrates how to use simplified Tailwind modifiers for boolean states without the data prefix once the plugin is installed.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/styling.mdx#2025-04-23_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n<Button className=\"pressed:bg-blue\">\n  {/* ... */}\n</Button>\n```\n\n----------------------------------------\n\nTITLE: HTML Form Integration with CheckboxGroup\nDESCRIPTION: Demonstrates how to integrate CheckboxGroup with HTML forms using the name prop for form submission.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/CheckboxGroup.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<MyCheckboxGroup label=\"Favorite sports\" name=\"sports\">\n  <MyCheckbox value=\"soccer\">Soccer</MyCheckbox>\n  <MyCheckbox value=\"baseball\">Baseball</MyCheckbox>\n  <MyCheckbox value=\"basketball\">Basketball</MyCheckbox>\n</MyCheckboxGroup>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Checkbox in Tree Component\nDESCRIPTION: Demonstrates how to use the custom checkbox component within a Tree component structure\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Tree.mdx#2025-04-23_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n<Tree>\n  <TreeItem>\n    <TreeItemContent>\n      <MyCustomCheckbox slot=\"selection\" />\n      {/* ... */}\n    </TreeItemContent>\n  </TreeItem>\n</Tree>\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for ColorArea Component\nDESCRIPTION: CSS styles for the ColorArea and ColorThumb components, defining dimensions, border-radius, and styling for the thumb element including focus states.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorArea.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import \"./ColorSlider.mdx\";\n\n.react-aria-ColorArea {\n  width: 192px;\n  height: 192px;\n  border-radius: 4px;\n  flex-shrink: 0;\n}\n\n.react-aria-ColorThumb {\n  border: 2px solid white;\n  box-shadow: 0 0 0 1px black, inset 0 0 0 1px black;\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  box-sizing: border-box;\n\n  &[data-focus-visible] {\n    width: 24px;\n    height: 24px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Disabled ColorArea in React\nDESCRIPTION: This snippet demonstrates how to disable a ColorArea component using the isDisabled prop. It prevents the thumb from being focused or dragged.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorArea.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<MyColorArea defaultValue=\"#ff0\" isDisabled />\n```\n\n----------------------------------------\n\nTITLE: Dynamic Modal Class Assignment Based on State - JSX\nDESCRIPTION: This example illustrates how to use a function as the className prop for the Modal component, dynamically assigning classes based on internal state (isEntering). This allows integration with utility CSS libraries like Tailwind by returning appropriate class strings. Requires the Modal component from React Aria Components. Input: modal's state, Output: dynamic class assignment for modal transitions.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Modal.mdx#2025-04-23_snippet_9\n\nLANGUAGE: JSX\nCODE:\n```\n<Modal className={({isEntering}) => isEntering ? 'slide-in' : ''}>\n  {/* ... */}\n</Modal>\n```\n\n----------------------------------------\n\nTITLE: Styling FieldGroup in CSS\nDESCRIPTION: This CSS snippet shows how to style the FieldGroup component.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorField.mdx#2025-04-23_snippet_13\n\nLANGUAGE: css\nCODE:\n```\nfieldset {\n  padding: 1.5em;\n  width: fit-content;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Description to ColorField in React\nDESCRIPTION: This example shows how to add a description to a ColorField using the description slot.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorField.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<ColorField>\n  <Label>Color</Label>\n  <Input />\n  <Text slot=\"description\">Enter a background color.</Text>\n</ColorField>\n```\n\n----------------------------------------\n\nTITLE: Consuming and Merging LabelContext in Custom Label - React Aria Components - TypeScript\nDESCRIPTION: Defines a custom label component, MyCustomLabel, that integrates with React Aria's CheckboxGroup by consuming LabelContext and merging it with local props and the ref using the useContextProps hook. This enables existing styled or third-party label components to work seamlessly with React Aria's context-driven accessibility features. Dependencies include 'react', 'react-aria-components', and the component accepts any standard LabelProps; it returns a label element with all merged properties, with the context ensuring compatibility within CheckboxGroup.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/CheckboxGroup.mdx#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {LabelProps} from 'react-aria-components';\\nimport {LabelContext, useContextProps} from 'react-aria-components';\\n\\nconst MyCustomLabel = React.forwardRef((props: LabelProps, ref: React.ForwardedRef<HTMLLabelElement>) => {\\n  // Merge the local props and ref with the ones provided via context.\\n  ///- begin highlight -///\\n  [props, ref] = useContextProps(props, ref, LabelContext);\\n  ///- end highlight -///\\n\\n  // ... your existing Label component\\n  return <label {...props} ref={ref} />;\\n});\n```\n\n----------------------------------------\n\nTITLE: Styling DateSegment States with CSS\nDESCRIPTION: Shows how to style different states of a DateSegment component using data attributes.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DateRangePicker.mdx#2025-04-23_snippet_26\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-DateSegment[data-placeholder] {\n  /* ... */\n}\n\n.react-aria-DateSegment[data-readonly] {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing TimeField with Zoned DateTime in React\nDESCRIPTION: This example shows how to initialize a TimeField with a zoned date-time value. It uses the parseZonedDateTime function from @internationalized/date to parse an ISO 8601 formatted string with a time zone.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/TimeField.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseZonedDateTime} from '@internationalized/date';\n\n<MyTimeField\n  label=\"Event time\"\n  defaultValue={parseZonedDateTime('2022-11-07T00:45[America/Los_Angeles]')} />\n```\n\n----------------------------------------\n\nTITLE: Vertical Slider Implementation\nDESCRIPTION: Example of creating a vertical slider with opacity values from 0 to 1 and fine-grained step control.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Slider.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<MySlider\n  orientation=\"vertical\"\n  aria-label=\"Opacity\"\n  maxValue={1}\n  step={0.01} />\n```\n\n----------------------------------------\n\nTITLE: Popover Entry and Exit Animation Styling (CSS)\nDESCRIPTION: CSS transition and data-state attribute selectors provide entry and exit animations for the react-aria-Popover. The snippet animates opacity changes during lifecycle events using a 300ms transition for [data-entering] and [data-exiting] attributes. Inputs: component data attributes; outputs: animated fade transitions. No dependencies except the popover’s stateful data attributes.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Popover.mdx#2025-04-23_snippet_16\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Popover {\n  transition: opacity 300ms;\n\n  &[data-entering],\n  &[data-exiting] {\n    opacity: 0;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Custom Form Input in CSS\nDESCRIPTION: This CSS snippet provides styling for the custom NativeSelect component, including flex layout and styling for the error message.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Form.mdx#2025-04-23_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n.flex {\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n\n  .invalid {\n    margin: 0;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Text Drop Implementation in React Aria ListBox\nDESCRIPTION: Implements text drop functionality with custom app-specific type handling. Filters accepted drag types and processes dropped text items.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ListBox.mdx#2025-04-23_snippet_34\n\nLANGUAGE: tsx\nCODE:\n```\nimport {isTextDropItem} from 'react-aria-components';\n\ninterface TextItem {\n  id: string,\n  name: string,\n  style: string\n}\n\nfunction DroppableListBox() {\n  let [items, setItems] = React.useState<TextItem[]>([]);\n\n  let { dragAndDropHooks } = useDragAndDrop({\n    acceptedDragTypes: ['custom-app-type'],\n    async onRootDrop(e) {\n      let items = await Promise.all(\n        e.items\n          .filter(isTextDropItem)\n          .map(async item => JSON.parse(await item.getText('custom-app-type')))\n      );\n      setItems(items);\n    }\n  });\n\n  return (\n    <ListBox aria-label=\"Droppable list\" items={items} dragAndDropHooks={dragAndDropHooks} renderEmptyState={() => \"Drop items here\"}>\n      {item => <ListBoxItem textValue={item.name}>{React.createElement(item.style || 'span', null, item.name)}</ListBoxItem>}\n    </ListBox>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using CSS Variables with Tailwind CSS Arbitrary Values\nDESCRIPTION: Shows how to access React Aria CSS variables using Tailwind's arbitrary value syntax to match popover width to trigger width.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/styling.mdx#2025-04-23_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n<Popover className=\"w-[--trigger-width]\">\n  {/* ... */}\n</Popover>\n```\n\n----------------------------------------\n\nTITLE: Dynamically Styling React Aria Link with Functional ClassName Prop\nDESCRIPTION: Illustrates using a function for the `className` prop on a `Link` component. The function receives component states (like `isCurrent`) as an argument and returns dynamic class names, useful for applying conditional styles with utility CSS libraries like Tailwind.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Breadcrumbs.mdx#2025-04-23_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n<Link className={({isCurrent}) => isCurrent ? 'bg-gray-700' : 'bg-gray-600'} />\n```\n\n----------------------------------------\n\nTITLE: Custom Label Component with Context\nDESCRIPTION: Example of creating a custom Label component that works with React Aria Components context system\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ComboBox.mdx#2025-04-23_snippet_35\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {LabelProps} from 'react-aria-components';\nimport {LabelContext, useContextProps} from 'react-aria-components';\n\nconst MyCustomLabel = React.forwardRef((props: LabelProps, ref: React.ForwardedRef<HTMLLabelElement>) => {\n  [props, ref] = useContextProps(props, ref, LabelContext);\n  return <label {...props} ref={ref} />;\n});\n```\n\n----------------------------------------\n\nTITLE: Targeting Tooltip Placement State Using Data Attributes in CSS\nDESCRIPTION: This CSS snippet illustrates how to use data-placement attributes provided by React Aria components to conditionally style a tooltip based on its placement (e.g., left). No external dependencies; simply add to your CSS. Inputs: placement state via data attribute. Output: Different tooltip appearance when placed left. Limitation: Only active if the component includes the data attribute.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Tooltip.mdx#2025-04-23_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Tooltip[data-placement=left] {\\n  /* ... */\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for Meter Component\nDESCRIPTION: Provides CSS styles for customizing the appearance of the Meter component, including color variables and layout.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Meter.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n\n.react-aria-Meter {\n  --fill-color: forestgreen;\n\n  display: grid;\n  grid-template-areas: \"label value\"\n                       \"bar bar\";\n  grid-template-columns: 1fr auto;\n  gap: 4px;\n  width: 250px;\n  color: var(--text-color);\n\n  .value {\n    grid-area: value;\n  }\n\n  .bar {\n    grid-area: bar;\n    box-shadow: inset 0px 0px 0px 1px var(--border-color);\n    forced-color-adjust: none;\n    height: 10px;\n    border-radius: 5px;\n    overflow: hidden;\n  }\n\n  .fill {\n    background: var(--fill-color);\n    height: 100%;\n  }\n}\n\n@media (forced-colors: active) {\n  .react-aria-Meter {\n    --fill-color: Highlight;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Description and Error Message\nDESCRIPTION: This CSS snippet provides styles for the description and error message slots in a TagGroup.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/TagGroup.mdx#2025-04-23_snippet_13\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-TagGroup {\n  [slot=description] {\n    font-size: 12px;\n  }\n\n  [slot=errorMessage] {\n    font-size: 12px;\n    color: var(--invalid-color);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Link Tags in React Aria\nDESCRIPTION: This example demonstrates how to create tags that act as links using the href prop. These tags are not selectable and can open links in new tabs.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/TagGroup.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<MyTagGroup label=\"Links\">\n  <MyTag href=\"https://adobe.com/\" target=\"_blank\">Adobe</MyTag>\n  <MyTag href=\"https://apple.com/\" target=\"_blank\">Apple</MyTag>\n  <MyTag href=\"https://google.com/\" target=\"_blank\">Google</MyTag>\n  <MyTag href=\"https://microsoft.com/\" target=\"_blank\">Microsoft</MyTag>\n</MyTagGroup>\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Heading Component within a RangeCalendar\nDESCRIPTION: This snippet demonstrates how to use a custom heading component within a RangeCalendar in place of the built-in React Aria Components Heading.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/RangeCalendar.mdx#2025-04-23_snippet_28\n\nLANGUAGE: tsx\nCODE:\n```\n<RangeCalendar>\n  {/*- begin highlight -*/}\n  <MyCustomHeading />\n  {/*- end highlight -*/}\n  {/* ... */}\n</RangeCalendar>\n```\n\n----------------------------------------\n\nTITLE: Adding Description to TagGroup\nDESCRIPTION: This example demonstrates how to add a description to a TagGroup using the description slot.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/TagGroup.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n<TagGroup>\n  <Label>Categories</Label>\n  <TagList>\n    <Tag>News</Tag>\n    <Tag>Travel</Tag>\n    <Tag>Gaming</Tag>\n    <Tag>Shopping</Tag>\n  </TagList>\n  <Text slot=\"description\">Your selected categories.</Text>\n</TagGroup>\n```\n\n----------------------------------------\n\nTITLE: Custom Value Scale Slider Implementation in React\nDESCRIPTION: Shows how to customize the slider's value range using minValue and maxValue props to set a scale from 50 to 150.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Slider.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<MySlider\n  label=\"Cookies to buy\"\n  minValue={50}\n  maxValue={150}\n  defaultValue={100} />\n```\n\n----------------------------------------\n\nTITLE: Custom Week Calendar Grid Implementation\nDESCRIPTION: Implementation of a custom week view calendar grid using useCalendarGrid hook\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Calendar.mdx#2025-04-23_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {CalendarGridProps} from 'react-aria-components';\nimport {CalendarStateContext} from 'react-aria-components';\nimport {useCalendarGrid} from 'react-aria';\n\nfunction WeekCalendarGrid(props: CalendarGridProps) {\n  let state = React.useContext(CalendarStateContext)!;\n  let {gridProps} = useCalendarGrid(props, state);\n\n  return (\n    <table {...gridProps}>\n      <tbody>\n        <tr>\n          {state.getDatesInWeek(0).map((date, i) => <CalendarCell key={i} date={date} />)}\n        </tr>\n      </tbody>\n    </table>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Animating Tooltip Entry and Exit Using CSS Transitions and Data Attributes (CSS)\nDESCRIPTION: This CSS snippet provides a way to animate tooltip appearance and disappearance using opacity transitions and react-aria-Tooltip's data attributes: data-entering and data-exiting. No dependencies beyond standard CSS. Inputs: Tooltip rendered state. Outputs: Smooth fade for tooltip entries and exits. Limitation: For demo/documentation only, not intended to be rendered directly. Expects tooltip elements managed by React Aria.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Tooltip.mdx#2025-04-23_snippet_11\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Tooltip {\\n  transition: opacity 300ms;\\n\\n  &[data-entering],\\n  &[data-exiting] {\\n    opacity: 0;\\n  }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Styling Image Items in a Droppable GridList\nDESCRIPTION: CSS for styling image items in a droppable GridList. Includes styles for the container, image display with aspect ratio preservation, and text overflow handling.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/GridList.mdx#2025-04-23_snippet_35\n\nLANGUAGE: css\nCODE:\n```\n.image-item {\n  display: flex;\n  height: 50px;\n  gap: 10px;\n  align-items: center;\n}\n\n.image-item img {\n  height: 100%;\n  aspect-ratio: 1/1;\n  object-fit: contain;\n}\n\n.image-item span {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling GridList and GridListItem Components with CSS\nDESCRIPTION: This CSS snippet provides styling for the GridList and GridListItem components, including layout, colors, hover and focus states, and responsive design for selected items.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/GridList.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n\n.react-aria-GridList {\n  display: flex;\n  flex-direction: column;\n  gap: 2px;\n  max-height: inherit;\n  overflow: auto;\n  padding: 4px;\n  border: 1px solid var(--border-color);\n  border-radius: 6px;\n  background: var(--overlay-background);\n  forced-color-adjust: none;\n  outline: none;\n  width: 250px;\n  max-height: 300px;\n  min-height: 100px;\n  box-sizing: border-box;\n\n  &[data-focus-visible] {\n    outline: 2px solid var(--focus-ring-color);\n    outline-offset: -1px;\n  }\n\n  .react-aria-GridListItem {\n    display: flex;\n    align-items: center;\n    gap: 0.571rem;\n    min-height: 28px;\n    padding: 0.286rem 0.286rem 0.286rem 0.571rem;\n    border-radius: 6px;\n    outline: none;\n    cursor: default;\n    color: var(--text-color);\n    font-size: 1.072rem;\n    position: relative;\n    transform: translateZ(0);\n\n    &[data-focus-visible] {\n      outline: 2px solid var(--focus-ring-color);\n      outline-offset: -2px;\n    }\n\n    &[data-pressed] {\n      background: var(--gray-100);\n    }\n\n    &[data-selected] {\n      background: var(--highlight-background);\n      color: var(--highlight-foreground);\n      --focus-ring-color: var(--highlight-foreground);\n\n      &[data-focus-visible] {\n        outline-color: var(--highlight-foreground);\n        outline-offset: -4px;\n      }\n\n      .react-aria-Button {\n        color: var(--highlight-foreground);\n        --highlight-hover: rgb(255 255 255 / 0.1);\n        --highlight-pressed: rgb(255 255 255 / 0.2);\n      }\n    }\n\n    &[data-disabled] {\n      color: var(--text-color-disabled);\n    }\n\n    .react-aria-Button:not([slot]) {\n      margin-left: auto;\n    }\n\n    .react-aria-Button {\n      background: transparent;\n      border: none;\n      font-size: 1.2rem;\n      line-height: 1.2em;\n      padding: 0.286rem 0.429rem;\n      transition: background 200ms;\n\n      &[data-hovered] {\n        background: var(--highlight-hover);\n      }\n\n      &[data-pressed] {\n        background: var(--highlight-pressed);\n        box-shadow: none;\n      }\n    }\n  }\n\n  /* join selected items if :has selector is supported */\n  @supports selector(:has(.foo)) {\n    gap: 0;\n\n    .react-aria-GridListItem[data-selected]:has(+ [data-selected]),\n    .react-aria-GridListItem[data-selected]:has(+ .react-aria-DropIndicator + [data-selected]) {\n      border-end-start-radius: 0;\n      border-end-end-radius: 0;\n    }\n\n    .react-aria-GridListItem[data-selected] + [data-selected],\n    .react-aria-GridListItem[data-selected] + .react-aria-DropIndicator + [data-selected] {\n      border-start-start-radius: 0;\n      border-start-end-radius: 0;\n    }\n  }\n\n  :where(.react-aria-GridListItem) .react-aria-Checkbox {\n    --selected-color: var(--highlight-foreground);\n    --selected-color-pressed: var(--highlight-foreground-pressed);\n    --checkmark-color: var(--highlight-background);\n    --background-color: var(--highlight-background);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling React Aria Tabs Components with CSS\nDESCRIPTION: Provides CSS rules to style the `react-aria-Tabs`, `react-aria-TabList`, `react-aria-Tab`, and `react-aria-TabPanel` components. It defines layout (flexbox), orientation-specific styles (e.g., border for horizontal), visual states (hover, focus, selected, disabled) using data attributes provided by React Aria, and focus visibility styling. It uses custom properties like `--text-color`, `--border-color`, `--highlight-background`, and `--focus-ring-color` for theming.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Tabs.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n\n.react-aria-Tabs {\n  display: flex;\n  color: var(--text-color);\n\n  &[data-orientation=horizontal] {\n    flex-direction: column;\n  }\n}\n\n.react-aria-TabList {\n  display: flex;\n\n  &[data-orientation=horizontal] {\n    border-bottom: 1px solid var(--border-color);\n\n    .react-aria-Tab {\n      border-bottom: 3px solid var(--border-color);\n    }\n  }\n}\n\n.react-aria-Tab {\n  padding: 10px;\n  cursor: default;\n  outline: none;\n  position: relative;\n  color: var(--text-color-base);\n  transition: color 200ms;\n  --border-color: transparent;\n  forced-color-adjust: none;\n\n  &[data-hovered],\n  &[data-focused] {\n    color: var(--text-color-hover);\n  }\n\n  &[data-selected] {\n    --border-color: var(--highlight-background);\n    color: var(--text-color);\n  }\n\n  &[data-disabled] {\n    color: var(--text-color-disabled);\n    &[data-selected] {\n      --border-color: var(--text-color-disabled);\n    }\n  }\n\n  &[data-focus-visible]:after {\n    content: '';\n    position: absolute;\n    inset: 4px;\n    border-radius: 4px;\n    border: 2px solid var(--focus-ring-color);\n  }\n}\n\n.react-aria-TabPanel {\n  margin-top: 4px;\n  padding: 10px;\n  border-radius: 4px;\n  outline: none;\n\n  &[data-focus-visible] {\n    outline: 2px solid var(--focus-ring-color);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Disabled React Aria Radio Buttons (CSS)\nDESCRIPTION: Provides CSS rules for styling individual `Radio` components when they are in a disabled state. It targets disabled radios using the `.react-aria-Radio` class and the `[data-disabled]` attribute selector. Styles adjust the text color and the radio button's border color, utilizing CSS variables (`--text-color-disabled`, `--border-color-disabled`).\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/RadioGroup.mdx#2025-04-23_snippet_14\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Radio {\n  &[data-disabled] {\n    color: var(--text-color-disabled);\n\n    &:before {\n      border-color: var(--border-color-disabled);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding TimeZone Display\nDESCRIPTION: Example showing how to hide the timezone display when using ZonedDateTime.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DatePicker.mdx#2025-04-23_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\n<MyDatePicker\n  label=\"Appointment time\"\n  defaultValue={parseZonedDateTime('2022-11-07T10:45[America/Los_Angeles]')}\n  hideTimeZone />\n```\n\n----------------------------------------\n\nTITLE: Custom Value Label for ProgressBar (React Aria Components, TypeScript/TSX)\nDESCRIPTION: This snippet illustrates passing a custom valueLabel prop to MyProgressBar, replacing the default formatted value with a user-defined string. This is useful for cases needing non-numeric or custom textual representation of progress. Dependencies: MyProgressBar. Inputs: label (\"Feeding…\"), valueLabel (\"30 of 100 dogs\"), value (30). Output: a MyProgressBar with the value label replaced.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ProgressBar.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<MyProgressBar\n  label=\"Feeding…\"\n  valueLabel=\"30 of 100 dogs\"\n  value={30} />\n```\n\n----------------------------------------\n\nTITLE: Creating Wrapper Component for Menu Customization\nDESCRIPTION: Example of creating a wrapper component to customize Menu props including className for styling.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Menu.mdx#2025-04-23_snippet_29\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MyMenu(props) {\n  return <Menu {...props} className=\"my-menu\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Styling TimeField with CSS\nDESCRIPTION: This CSS snippet provides styling for the TimeField, DateInput, and DateSegment components, including focus states and placeholder styles.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/TimeField.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n\n.react-aria-TimeField {\n  color: var(--text-color);\n  display: flex;\n  flex-direction: column;\n}\n\n.react-aria-DateInput {\n  display: inline;\n  padding: 4px;\n  border: 1px solid var(--border-color);\n  border-radius: 6px;\n  background: var(--field-background);\n  width: fit-content;\n  min-width: 150px;\n  white-space: nowrap;\n  forced-color-adjust: none;\n\n  &[data-focus-within] {\n    outline: 2px solid var(--focus-ring-color);\n    outline-offset: -1px;\n  }\n}\n\n.react-aria-DateSegment {\n  padding: 0 2px;\n  font-variant-numeric: tabular-nums;\n  text-align: end;\n  color: var(--text-color);\n\n  &[data-type=literal] {\n    padding: 0;\n  }\n\n  &[data-placeholder] {\n    color: var(--text-color-placeholder);\n    font-style: italic;\n  }\n\n  &:focus {\n    color: var(--highlight-foreground);\n    background: var(--highlight-background);\n    outline: none;\n    border-radius: 4px;\n    caret-color: transparent;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling a Vertical Color Slider using CSS\nDESCRIPTION: This CSS snippet provides styles for a vertically oriented `ColorSlider`. It targets the component using the default class `.react-aria-ColorSlider` combined with the `data-orientation=\"vertical\"` attribute selector. Styles include setting height, display, hiding the label and output elements, and adjusting the track width and thumb positioning.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorSlider.mdx#2025-04-23_snippet_11\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ColorSlider {\n  &[data-orientation=vertical] {\n    height: 150px;\n    display: block;\n\n    .react-aria-Label,\n    .react-aria-SliderOutput {\n      display: none;\n    }\n\n    .react-aria-SliderTrack {\n      width: 28px;\n      height: 100%;\n    }\n\n    .react-aria-ColorThumb {\n      left: 50%;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic CSS Styling for React Aria ComboBox\nDESCRIPTION: Example of styling a ComboBox component using CSS selectors targeting the default class names\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ComboBox.mdx#2025-04-23_snippet_27\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ComboBox {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Styling a Disabled Color Slider using CSS\nDESCRIPTION: This CSS snippet shows how to style a disabled `ColorSlider`. It targets the component using the default class `.react-aria-ColorSlider` and the `data-disabled` attribute selector. The styles visually indicate the disabled state by applying gray backgrounds to the track and thumb, and reducing the thumb's opacity.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorSlider.mdx#2025-04-23_snippet_13\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ColorSlider {\n  &[data-disabled] {\n    .react-aria-SliderTrack {\n      background: gray !important;\n    }\n\n    .react-aria-ColorThumb {\n      background: gray !important;\n      opacity: 0.5;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing User Data Structure\nDESCRIPTION: Defines sample user data with avatars, names and usernames for the ComboBox demo.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/user-combobox.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst people = [\n  {\n    id: 1,\n    avatar: \"https://images.unsplash.com/photo-1599566150163-29194dcaad36?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1auto=format&fit=facearea&facepad=2&w=256&h=256&q=80\",\n    name: \"Gilberto Miguel\",\n    username: \"@gilberto_miguel\"\n  },\n  // ... additional user entries\n];\n```\n\n----------------------------------------\n\nTITLE: Styling Tooltips with CSS Class Selectors (CSS)\nDESCRIPTION: This CSS snippet targets the built-in 'react-aria-Tooltip' class, showing how to style tooltips provided by React Aria. All Tooltip components automatically include this class for easy CSS overrides or customizations. There are no dependencies, but this class should match the rendered React Aria Tooltip. No required parameters; simply style as needed. Output: Customized tooltip appearance.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Tooltip.mdx#2025-04-23_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Tooltip {\\n  /* ... */\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Styling ListBox and ListBoxItem Components with CSS\nDESCRIPTION: Provides CSS styles for customizing the appearance of ListBox and ListBoxItem components, including focus and selection states.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ListBox.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n\n.react-aria-ListBox {\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n  max-height: inherit;\n  overflow: auto;\n  padding: 4px;\n  border: 1px solid var(--border-color);\n  border-radius: 6px;\n  background: var(--overlay-background);\n  forced-color-adjust: none;\n  outline: none;\n  width: 250px;\n  max-height: 300px;\n  min-height: 100px;\n  box-sizing: border-box;\n\n  &[data-focus-visible] {\n    outline: 2px solid var(--focus-ring-color);\n    outline-offset: -1px;\n  }\n}\n\n.react-aria-ListBoxItem {\n  padding: 0 0.571rem;\n  border-radius: 6px;\n  outline: none;\n  cursor: default;\n  color: var(--text-color);\n  font-size: 1.072rem;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  min-height: 32px;\n\n  &[data-focus-visible] {\n    outline: 2px solid var(--focus-ring-color);\n    outline-offset: -2px;\n  }\n\n  &[data-selected] {\n    background: var(--highlight-background);\n    color: var(--highlight-foreground);\n\n    &[data-focus-visible] {\n      outline-color: var(--highlight-foreground);\n      outline-offset: -4px;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind Plugins in CSS\nDESCRIPTION: This CSS snippet configures Tailwind CSS to use the tailwindcss-react-aria-components and tailwindcss-animate plugins via the @plugin directive. It also imports Tailwind's base functionalities. This configuration is designed for Tailwind v4 and should be placed in your main CSS file. No parameters or return values are involved, and all plugins must be installed as project dependencies.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/destructive-dialog.mdx#2025-04-23_snippet_2\n\nLANGUAGE: CSS\nCODE:\n```\n@import \"tailwindcss\";\n@plugin \"tailwindcss-react-aria-components\";\n@plugin \"tailwindcss-animate\";\n```\n\n----------------------------------------\n\nTITLE: ColorSwatchPicker with Disabled Items\nDESCRIPTION: Example showing how to disable specific color options in a ColorSwatchPicker. Disabled items cannot be selected and have visual styling to indicate their unavailability.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorSwatchPicker.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<MyColorSwatchPicker>\n  <MyColorSwatchPickerItem color=\"#A00\" />\n  <MyColorSwatchPickerItem color=\"#f80\" isDisabled />\n  <MyColorSwatchPickerItem color=\"#080\" />\n</MyColorSwatchPicker>\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind Plugin Prefix for React Aria Components in v4\nDESCRIPTION: Demonstrates how to configure a custom prefix for React Aria Components modifiers in Tailwind CSS v4.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/styling.mdx#2025-04-23_snippet_15\n\nLANGUAGE: css\nCODE:\n```\n@plugin \"tailwindcss-react-aria-components\" { prefix: rac };\n```\n\n----------------------------------------\n\nTITLE: Defining Contact Data for ListBox in TypeScript\nDESCRIPTION: This snippet defines two constant arrays, `favorites` and `people`, containing sample contact data objects. Each object includes properties like `id`, `name`, `username`, and `avatar`. This data is used to populate the contact list example. It also imports global Tailwind CSS styles.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/contact-list.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport './tailwind.global.css';\n\nconst favorites = [\n  {\n    id: 'tony',\n    name: 'Tony Baldwin',\n    username: '@tony',\n    avatar: 'https://images.unsplash.com/photo-1633332755192-727a05c4013d?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80'\n  },\n  {\n    id: 'jlangstrath',\n    name: 'Julienne Langstrath',\n    username: '@jlangstrath',\n    avatar: 'https://images.unsplash.com/photo-1580489944761-15a19d654956?ixlib=rb-1.2.1&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80'\n  },\n  {\n    id: 'rgonzalez',\n    name: 'Roberto Gonzalez',\n    username: '@rgonzalez',\n    avatar: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80'\n  }\n];\n\nconst people = [\n  {\n    id: 1,\n    avatar:\n      \"https://images.unsplash.com/photo-1599566150163-29194dcaad36?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1auto=format&fit=facearea&facepad=2&w=256&h=256&q=80\",\n    name: \"Gilberto Miguel\",\n    username: \"@gilberto_miguel\"\n  },\n  {\n    id: 2,\n    avatar:\n      \"https://images.unsplash.com/photo-1494790108377-be9c29b29330?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80\",\n    name: \"Maia Pettegree\",\n    username: \"@mpettegree\"\n  },\n  {\n    id: 3,\n    avatar:\n      \"https://images.unsplash.com/photo-1531427186611-ecfd6d936c79?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80\",\n    name: \"Wade Redington\",\n    username: \"@redington\"\n  },\n  {\n    id: 4,\n    avatar:\n      \"https://images.unsplash.com/photo-1528763380143-65b3ac89a3ff?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80\",\n    name: \"Kurtis Gurrado\",\n    username: \"@kurtis\"\n  },\n  {\n    id: 5,\n    avatar:\n      \"https://images.unsplash.com/photo-1569913486515-b74bf7751574?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80\",\n    name: \"Sonja Balmann\",\n    username: \"@sbalmann\"\n  },\n  {\n    id: 6,\n    avatar:\n      \"https://images.unsplash.com/photo-1570295999919-56ceb5ecca61?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80\",\n    name: \"Brent Mickelwright\",\n    username: \"@brent_m\"\n  },\n  {\n    id: 7,\n    avatar:\n      \"https://images.unsplash.com/photo-1500648767791-00dcc994a43e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2.25&w=256&h=256&q=80\",\n    name: \"Charles Webb\",\n    username: \"@cwebb\"\n  }\n];\n```\n\n----------------------------------------\n\nTITLE: DateRangePickerClearButton Implementation\nDESCRIPTION: Example of creating a clear button component that integrates with DateRangePicker state management\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DateRangePicker.mdx#2025-04-23_snippet_34\n\nLANGUAGE: tsx\nCODE:\n```\nimport {DateRangePickerStateContext} from 'react-aria-components';\n\nfunction DateRangePickerClearButton() {\n  let state = React.useContext(DateRangePickerStateContext)!;\n  return (\n    <Button\n      slot={null}\n      className=\"clear-button\"\n      aria-label=\"Clear\"\n      onPress={() => state.setValue(null)}>\n      ✕\n    </Button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Label in DateField\nDESCRIPTION: Example showing how to use a custom label component within a DateField component.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DateField.mdx#2025-04-23_snippet_30\n\nLANGUAGE: tsx\nCODE:\n```\n<DateField>\n  <MyCustomLabel>Name</MyCustomLabel>\n  <DateInput>\n    {segment => <DateSegment segment={segment} />}\n  </DateInput>\n</DateField>\n```\n\n----------------------------------------\n\nTITLE: Overriding Default className with Custom Classes - React (JSX)\nDESCRIPTION: This JSX snippet demonstrates overriding the default className on a React Aria DropZone component by providing a custom className prop. It requires React and the DropZone component from React Aria. The custom className (my-dropzone) replaces the built-in class for targeted styling in your CSS or CSS-in-JS solution. The DropZone can contain any child elements, as shown by the JSX comment placeholder.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DropZone.mdx#2025-04-23_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<DropZone className=\"my-dropzone\">\n  {/* ... */}\n</DropZone>\n```\n\n----------------------------------------\n\nTITLE: Styling Unavailable Dates in RangeCalendar\nDESCRIPTION: CSS styling for unavailable dates in the RangeCalendar, including visual indicators for unavailable and invalid dates.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/RangeCalendar.mdx#2025-04-23_snippet_13\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-RangeCalendar {\n  .react-aria-CalendarCell {\n\n    &[data-unavailable] {\n      text-decoration: line-through;\n      color: var(--invalid-color);\n    }\n\n    &[data-invalid] {\n      background: var(--invalid-color);\n      color: var(--highlight-foreground);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Text Component with React Aria Context in TypeScript\nDESCRIPTION: This snippet shows how to create a custom Text component that is compatible with React Aria Components. It uses the useContextProps hook to merge local props and ref with those provided via context.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ListBox.mdx#2025-04-23_snippet_46\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {TextProps} from 'react-aria-components';\nimport {TextContext, useContextProps} from 'react-aria-components';\n\nconst MyText = React.forwardRef((props: TextProps, ref: React.ForwardedRef<HTMLElement>) => {\n  // Merge the local props and ref with the ones provided via context.\n  [props, ref] = useContextProps(props, ref, TextContext);\n\n  // ... your existing Text component\n  return <span {...props} ref={ref} />;\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing ProgressBar Structure with Label Association (React Aria Components, TypeScript/TSX)\nDESCRIPTION: This snippet shows the minimal structure of a ProgressBar in React Aria Components, associating a Label as a child for accessibility. It does not display any value, focusing instead on semantic association needed by screen readers. Dependencies: react-aria-components. Input: implicit from composition. Output: ProgressBar with associated label. Useful as a foundation for further customization.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ProgressBar.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ProgressBar, Label} from 'react-aria-components';\n\n<ProgressBar>\n  <Label />\n</ProgressBar>\n```\n\n----------------------------------------\n\nTITLE: Styling React Aria Component States with CSS Data Attributes\nDESCRIPTION: Illustrates how to target specific UI states (like `disabled`) of a React Aria component (`DisclosureGroup`) using CSS data attribute selectors (`[data-disabled]`). React Aria components expose their states via data attributes for styling purposes.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DisclosureGroup.mdx#2025-04-23_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-DisclosureGroup[data-disabled] {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Forwarding Refs in Custom Trigger Component (React/JavaScript)\nDESCRIPTION: Defines a React component (CustomTrigger) using React.forwardRef to ensure that 'ref' and all props are forwarded to the underlying button element, a requirement for custom popover triggers with React Aria. Dependencies: React. Inputs: props and ref; output is a button passing through all relevant props and references. Proper ref forwarding is crucial for accessibility and popover positioning.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Popover.mdx#2025-04-23_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nconst CustomTrigger = React.forwardRef((props, ref) => (\n  <button {...props} ref={ref} />\n));\n```\n\n----------------------------------------\n\nTITLE: Adding Error Message to TagGroup\nDESCRIPTION: This example shows how to add an error message to a TagGroup using the errorMessage slot.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/TagGroup.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n<TagGroup>\n  <Label>Categories</Label>\n  <TagList>\n    <Tag>News</Tag>\n    <Tag>Travel</Tag>\n    <Tag>Gaming</Tag>\n    <Tag>Shopping</Tag>\n  </TagList>\n  <Text slot=\"errorMessage\">Invalid set of categories.</Text>\n</TagGroup>\n```\n\n----------------------------------------\n\nTITLE: Creating a Disabled DisclosureGroup\nDESCRIPTION: Shows how to disable an entire DisclosureGroup, making all disclosures non-interactive.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DisclosureGroup.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<DisclosureGroup isDisabled>\n  <MyDisclosure id=\"system\" title=\"System Requirements\" >\n    Details about system requirements here\n  </MyDisclosure>\n  <MyDisclosure id=\"personal\" title=\"Personal Information\" >\n    Details about personal information here\"\n  </MyDisclosure>\n</DisclosureGroup>\n```\n\n----------------------------------------\n\nTITLE: Styling Invalid Checkbox State\nDESCRIPTION: This CSS snippet provides styles for the invalid state of a Checkbox component, including different visual indicators for selected and unselected states.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Checkbox.mdx#2025-04-23_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Checkbox {\n  &[data-invalid] {\n    .checkbox {\n      --checkmark-color: var(--gray-50);\n      border-color: var(--invalid-color);\n    }\n\n    &[data-pressed] .checkbox {\n      border-color: var(--invalid-color-pressed);\n    }\n\n    &[data-selected],\n    &[data-indeterminate] {\n      .checkbox {\n        background: var(--invalid-color);\n      }\n\n      &[data-pressed] .checkbox {\n        background: var(--invalid-color-pressed);\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Disabled Dates in RangeCalendar\nDESCRIPTION: CSS snippet for styling disabled dates in the RangeCalendar component.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/RangeCalendar.mdx#2025-04-23_snippet_11\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-RangeCalendar {\n  .react-aria-CalendarCell {\n    &[data-disabled] {\n      color: var(--text-color-disabled);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Forcing 24-Hour Cycle in TimeField with React/TSX\nDESCRIPTION: Explains how to use the `hourCycle` prop (set to `24`) on `MyTimeField` to override the locale's default hour format and enforce a 24-hour display.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/TimeField.mdx#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nexample\n<MyTimeField\n  label=\"Appointment time\"\n  hourCycle={24} />\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Label Component Compatible with React Aria Components\nDESCRIPTION: This snippet demonstrates how to create a custom Label component that consumes the LabelContext from React Aria Components. The useContextProps hook merges local props and ref with those provided via context by SearchField, making your custom component fully compatible with the React Aria Components ecosystem.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/SearchField.mdx#2025-04-23_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {LabelProps} from 'react-aria-components';\nimport {LabelContext, useContextProps} from 'react-aria-components';\n\nconst MyCustomLabel = React.forwardRef((props: LabelProps, ref: React.ForwardedRef<HTMLLabelElement>) => {\n  // Merge the local props and ref with the ones provided via context.\n  ///- begin highlight -///\n  [props, ref] = useContextProps(props, ref, LabelContext);\n  ///- end highlight -///\n\n  // ... your existing Label component\n  return <label {...props} ref={ref} />;\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing WaterfallLayout with Virtualizer in React\nDESCRIPTION: This snippet demonstrates how to use the WaterfallLayout with a Virtualizer component to create a virtualized waterfall layout for a ListBox of images. It configures the layout options including minimum item size and spacing.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Virtualizer.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport {WaterfallLayout, Size, Text} from 'react-aria-components';\n\nfunction Example() {\n  return (\n    <Virtualizer \n      layout={WaterfallLayout}\n      layoutOptions={{\n        minItemSize: new Size(150, 150),\n        minSpace: new Size(8, 8)\n      }}\n    >\n      <ListBox\n        layout=\"grid\"\n        aria-label=\"Virtualized waterfall layout\"\n        selectionMode=\"multiple\"\n        items={images}>\n        {item => (\n          <ListBoxItem textValue={item.title}>\n            <img src={item.image} alt=\"\" style={{aspectRatio: item.aspectRatio}} />\n            <Text slot=\"label\">{item.title}</Text>\n            <Text slot=\"description\">{item.user}</Text>\n          </ListBoxItem>\n        )}\n      </ListBox>\n    </Virtualizer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling a NumberField using `isDisabled` Prop in React (TSX/CSS)\nDESCRIPTION: Shows how to disable user interaction with a `NumberField` by setting the `isDisabled` prop to true. The accompanying CSS demonstrates how to style the disabled state using the `[data-disabled]` attribute selector on the child `Button` and `Input` elements.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/NumberField.mdx#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n<MyNumberField label=\"Disabled\" isDisabled value={25} />\n```\n```\n\nLANGUAGE: css\nCODE:\n```\n```css\n.react-aria-NumberField {\n  .react-aria-Button {\n    &[data-disabled] {\n      border-color: var(--border-color-disabled);\n      color: var(--text-color-disabled);\n    }\n  }\n\n  .react-aria-Input {\n    &[data-disabled] {\n      border-color: var(--border-color-disabled);\n      color: var(--text-color-disabled);\n    }\n  }\n}\n  ```\n```\n\n----------------------------------------\n\nTITLE: Styling a Tree Component with CSS\nDESCRIPTION: Comprehensive CSS styling for the Tree component, including styles for the container, items, chevron buttons, selection states, and interactive elements within tree items.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Tree.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Tree {\n  display: flex;\n  flex-direction: column;\n  gap: 2px;\n  overflow: auto;\n  padding: 4px;\n  border: 1px solid var(--border-color);\n  border-radius: 6px;\n  background: var(--overlay-background);\n  forced-color-adjust: none;\n  outline: none;\n  width: 250px;\n  max-height: 300px;\n  box-sizing: border-box;\n\n  &[data-focus-visible] {\n    outline: 2px solid var(--focus-ring-color);\n    outline-offset: -1px;\n  }\n\n  .react-aria-TreeItem {\n    display: flex;\n    align-items: center;\n    gap: 0.571rem;\n    min-height: 28px;\n    padding: 0.286rem 0.286rem 0.286rem 0.571rem;\n    --padding: 8px;\n    border-radius: 6px;\n    outline: none;\n    cursor: default;\n    color: var(--text-color);\n    font-size: 1.072rem;\n    position: relative;\n    transform: translateZ(0);\n\n    .react-aria-Button[slot=chevron] {\n      all: unset;\n      display: flex;\n      visibility: hidden;\n      align-items: center;\n      justify-content: center;\n      width: 1.3rem;\n      height: 100%;\n      padding-left: calc((var(--tree-item-level) - 1) * var(--padding));\n\n      svg {\n        rotate: 0deg;\n        transition: rotate 200ms;\n        width: 12px;\n        height: 12px;\n        fill: none;\n        stroke: currentColor;\n        stroke-width: 3px;\n      }\n    }\n\n    &[data-has-child-items] .react-aria-Button[slot=chevron] {\n      visibility: visible;\n    }\n\n    &[data-expanded] .react-aria-Button[slot=chevron] svg {\n      rotate: 90deg;\n    }\n\n    &[data-focus-visible] {\n      outline: 2px solid var(--focus-ring-color);\n      outline-offset: -2px;\n    }\n\n    &[data-pressed] {\n      background: var(--gray-100);\n    }\n\n    &[data-selected] {\n      background: var(--highlight-background);\n      color: var(--highlight-foreground);\n      --focus-ring-color: var(--highlight-foreground);\n\n      &[data-focus-visible] {\n        outline-color: var(--highlight-foreground);\n        outline-offset: -4px;\n      }\n\n      .react-aria-Button {\n        color: var(--highlight-foreground);\n        --highlight-hover: rgb(255 255 255 / 0.1);\n        --highlight-pressed: rgb(255 255 255 / 0.2);\n      }\n    }\n\n    &[data-disabled] {\n      color: var(--text-color-disabled);\n    }\n\n    .react-aria-Button:not([slot]) {\n      margin-left: auto;\n      background: transparent;\n      border: none;\n      font-size: 1.2rem;\n      line-height: 1.2em;\n      padding: 0.286rem 0.429rem;\n      transition: background 200ms;\n\n      &[data-hovered] {\n        background: var(--highlight-hover);\n      }\n\n      &[data-pressed] {\n        background: var(--highlight-pressed);\n        box-shadow: none;\n      }\n    }\n  }\n\n  /* join selected items if :has selector is supported */\n  @supports selector(:has(.foo)) {\n    gap: 0;\n\n    .react-aria-TreeItem[data-selected]:has(+ [data-selected]) {\n      border-end-start-radius: 0;\n      border-end-end-radius: 0;\n    }\n\n    .react-aria-TreeItem[data-selected] + [data-selected] {\n      border-start-start-radius: 0;\n      border-start-end-radius: 0;\n    }\n  }\n\n  :where(.react-aria-TreeItem) .react-aria-Checkbox {\n    --selected-color: var(--highlight-foreground);\n    --selected-color-pressed: var(--highlight-foreground-pressed);\n    --checkmark-color: var(--highlight-background);\n    --background-color: var(--highlight-background);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Class Names to Menu Components\nDESCRIPTION: Demonstrates how to override the default class name provided by React Aria with a custom one for styling purposes.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Menu.mdx#2025-04-23_snippet_22\n\nLANGUAGE: jsx\nCODE:\n```\n<Menu className=\"my-menu\">\n  {/* ... */}\n</Menu>\n```\n\n----------------------------------------\n\nTITLE: ColorArea with HTML Form Integration\nDESCRIPTION: Example of integrating ColorArea with HTML forms using the xName and yName props, which allow the component's values to be submitted with form data.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorArea.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<MyColorArea xName=\"red\" yName=\"green\" />\n```\n\n----------------------------------------\n\nTITLE: Styling State-Based Item Selection in ColorSwatchPickerItem with CSS\nDESCRIPTION: Uses a CSS selector to target ColorSwatchPickerItem elements that are in a 'selected' state using the data-selected attribute. This allows for customizing the appearance of selected items. The approach can be extended to other states exposed as data attributes. Requires that items use the .react-aria-ColorSwatchPickerItem class.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorSwatchPicker.mdx#2025-04-23_snippet_13\n\nLANGUAGE: css\nCODE:\n```\n```css\\n.react-aria-ColorSwatchPickerItem[data-selected] {\\n  /* ... */\\n}\\n```\n```\n\n----------------------------------------\n\nTITLE: Styling Select Component Items with CSS\nDESCRIPTION: This CSS snippet provides styling for the Select component items, including focus and selection states, as well as accessibility considerations for forced colors mode.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Select.mdx#2025-04-23_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.my-item {\n  margin: 2px;\n  padding: 4px 8px 4px 22px;\n  border-radius: 6px;\n  outline: none;\n  cursor: default;\n  color: var(--text-color);\n  font-size: 1.072rem;\n  position: relative;\n\n  &.selected {\n    font-weight: 600;\n    background: none;\n\n    &::before {\n      content: '✓';\n      content: '✓' / '';\n      alt: ' ';\n      position: absolute;\n      top: 4px;\n      left: 4px;\n    }\n  }\n\n  &.focused {\n    background: #e70073;\n    color: white;\n  }\n}\n\n@media (forced-colors: active) {\n  .my-item.focused {\n    background: Highlight;\n    color: HighlightText;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Disabled ColorField in React\nDESCRIPTION: This example shows how to create a disabled ColorField using the isDisabled prop.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorField.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<MyColorField label=\"Disabled\" defaultValue=\"#7f007f\" isDisabled />\n```\n\n----------------------------------------\n\nTITLE: Import CSS Styles\nDESCRIPTION: Basic import statement for Tailwind CSS global styles\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/swipeable-tabs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport './tailwind.global.css';\n```\n\n----------------------------------------\n\nTITLE: Styling React Aria Table Component with CSS\nDESCRIPTION: This snippet demonstrates how to style a React Aria Table component using CSS classes. It targets the default class name provided by React Aria.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Table.mdx#2025-04-23_snippet_43\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Table {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Modal Entry and Exit Animations with State Attributes - CSS\nDESCRIPTION: This CSS code sample applies entry and exit animations to the Modal component by targeting state attributes data-entering and data-exiting. It defines slide-in and slide-out animations for smooth modal transitions using the @keyframes rule. No dependencies are required beyond CSS support and correct attribute rendering by the Modal component.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Modal.mdx#2025-04-23_snippet_8\n\nLANGUAGE: CSS\nCODE:\n```\n.react-aria-Modal[data-entering] {\n  animation: slide 300ms;\n}\n\n.react-aria-Modal[data-exiting] {\n  animation: slide 300ms reverse;\n}\n\n@keyframes slide {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Default Rendering with React Aria Components\nDESCRIPTION: Shows how to use render props to modify default values provided by React Aria, such as wrapping default children in an additional element.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/styling.mdx#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectValue>\n  {({defaultChildren}) => <span>{defaultChildren}</span>}\n</SelectValue>\n```\n\n----------------------------------------\n\nTITLE: Defining RangeCalendar Anatomy with React Components\nDESCRIPTION: This code snippet outlines the structure of a RangeCalendar component, including its subcomponents like CalendarGrid, CalendarCell, and error message handling.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/RangeCalendar.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {RangeCalendar, Heading, Button, CalendarGrid, CalendarGridHeader, CalendarHeaderCell, CalendarGridBody, CalendarCell, Text} from 'react-aria-components';\n\n<RangeCalendar>\n  <Button slot=\"previous\" />\n  <Heading />\n  <Button slot=\"next\" />\n  <CalendarGrid>\n    <CalendarGridHeader>\n      {day => <CalendarHeaderCell />}\n    </CalendarGridHeader>\n    <CalendarGridBody>\n      {date => <CalendarCell date={date} />}\n    </CalendarGridBody>\n  </CalendarGrid>\n  <Text slot=\"errorMessage\" />\n</RangeCalendar>\n```\n\n----------------------------------------\n\nTITLE: Custom Label Component with Context\nDESCRIPTION: Example of creating a custom label component that integrates with React Aria Components using context.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/NumberField.mdx#2025-04-23_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {LabelProps} from 'react-aria-components';\nimport {LabelContext, useContextProps} from 'react-aria-components';\n\nconst MyCustomLabel = React.forwardRef((props: LabelProps, ref: React.ForwardedRef<HTMLLabelElement>) => {\n  [props, ref] = useContextProps(props, ref, LabelContext);\n  return <label {...props} ref={ref} />;\n});\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for FieldGroup Validation Example\nDESCRIPTION: Provides CSS rules for styling the `FieldGroup` component shown in the previous TSX example. It styles the fieldset container and the error message (`.invalid`) displayed when validation fails.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/TimeField.mdx#2025-04-23_snippet_23\n\nLANGUAGE: css\nCODE:\n```\nfieldset {\n  padding: 1.5em;\n  width: fit-content;\n}\n\n.invalid {\n  color: var(--invalid-color);\n  margin-top: 1em;\n  display: block;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling NumberField Components with CSS\nDESCRIPTION: Basic CSS styling example for NumberField components using the default react-aria class naming convention.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/NumberField.mdx#2025-04-23_snippet_17\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-NumberField {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Image Cells in React Aria Tables\nDESCRIPTION: CSS styles for displaying images in table cells. Sets fixed dimensions for images and uses object-fit to ensure proper display while maintaining aspect ratio.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Table.mdx#2025-04-23_snippet_36\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Cell img {\n  height: 30px;\n  width: 30px;\n  object-fit: cover;\n  display: block;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling ProgressBar with Grid Layout and Theming (CSS)\nDESCRIPTION: This CSS snippet demonstrates how to style the ProgressBar component for consistent layout, theming, and accessibility. It uses CSS Grid to arrange label and value, and defines visual styles for progress bar, value text, and progress fill elements. The theme relies on CSS custom properties like --text-color, --border-color, and --highlight-background. Prerequisite: import of @react-aria/example-theme. Intended to be included in a stylesheet loaded by the React application.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ProgressBar.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n\n.react-aria-ProgressBar {\n  display: grid;\n  grid-template-areas: \"label value\"\n                       \"bar bar\";\n  grid-template-columns: 1fr auto;\n  gap: 4px;\n  width: 250px;\n  color: var(--text-color);\n\n  .value {\n    grid-area: value;\n  }\n\n  .bar {\n    grid-area: bar;\n    box-shadow: inset 0px 0px 0px 1px var(--border-color);\n    forced-color-adjust: none;\n    height: 10px;\n    border-radius: 5px;\n    overflow: hidden;\n    will-change: transform;\n  }\n\n  .fill {\n    background: var(--highlight-background);\n    height: 100%;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling React Aria Breadcrumbs with Default CSS Class\nDESCRIPTION: Demonstrates how to apply styles to the `Breadcrumbs` component using its default CSS class name `react-aria-Breadcrumbs`. This class is automatically applied by React Aria and can be targeted in CSS stylesheets.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Breadcrumbs.mdx#2025-04-23_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Breadcrumbs {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Link Items in GridList with CSS\nDESCRIPTION: CSS styling for GridListItem components that have an href attribute, applying a pointer cursor to indicate they are clickable links.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/GridList.mdx#2025-04-23_snippet_13\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-GridListItem[data-href] {\n  cursor: pointer;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Wrapper to MenuTrigger\nDESCRIPTION: Since MenuTrigger doesn't render DOM elements, this example shows how to add a custom wrapper element with styling.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Menu.mdx#2025-04-23_snippet_26\n\nLANGUAGE: jsx\nCODE:\n```\n<MenuTrigger>\n  <div className=\"my-menu-trigger\">\n    {/* ... */}\n  </div>\n</MenuTrigger>\n```\n\n----------------------------------------\n\nTITLE: Importing Global Tailwind Styles in TSX\nDESCRIPTION: Imports the `tailwind.global.css` file, applying global Tailwind styles necessary for the component examples. This is a prerequisite for the styles defined in the components to work correctly.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/datepicker.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport './tailwind.global.css';\n```\n\n----------------------------------------\n\nTITLE: Styling Breadcrumbs with CSS\nDESCRIPTION: CSS styles for breadcrumbs that handle appearance, separators, hover and focus states, and current page indication.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Breadcrumbs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n\n.react-aria-Breadcrumbs {\n  display: flex;\n  align-items: center;\n  list-style: none;\n  margin: 0;\n  padding: 0;\n  font-size: 18px;\n  color: var(--text-color);\n\n  .react-aria-Breadcrumb:not(:last-child)::after {\n    content: '›';\n    content: '›' / '';\n    alt: ' ';\n    padding: 0 5px;\n  }\n\n  .react-aria-Link {\n    color: var(--link-color-secondary);\n    outline: none;\n    position: relative;\n    text-decoration: none;\n    cursor: pointer;\n\n    &[data-hovered] {\n      text-decoration: underline;\n    }\n\n    &[data-current] {\n      color: var(--text-color);\n      font-weight: bold;\n    }\n\n    &[data-focus-visible]:after {\n      content: '';\n      position: absolute;\n      inset: -2px -4px;\n      border-radius: 6px;\n      border: 2px solid var(--focus-ring-color);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling the ColorSlider Component with CSS\nDESCRIPTION: CSS styling for the ColorSlider component, including layout using grid, thumb appearance, and responsive behavior for different orientations.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorSlider.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ColorSlider {\n  display: grid;\n  grid-template-areas: \"label output\"\n                       \"track track\";\n  grid-template-columns: 1fr auto;\n  gap: 4px;\n  max-width: 300px;\n\n  .react-aria-Label {\n    grid-area: label;\n  }\n\n  .react-aria-SliderOutput {\n    grid-area: output;\n  }\n\n  .react-aria-SliderTrack {\n    grid-area: track;\n    border-radius: 4px;\n  }\n\n  &[data-orientation=horizontal] {\n    .react-aria-SliderTrack {\n      height: 28px;\n    }\n\n    .react-aria-ColorThumb {\n      top: 50%;\n    }\n  }\n}\n\n.react-aria-ColorThumb {\n  border: 2px solid white;\n  box-shadow: 0 0 0 1px black, inset 0 0 0 1px black;\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  box-sizing: border-box;\n\n  &[data-focus-visible] {\n    width: 24px;\n    height: 24px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling the React Aria NumberField Component with CSS\nDESCRIPTION: This CSS snippet provides styling rules for the `NumberField` component and its constituent parts (`Group`, `Button`, `Input`) using React Aria's data attributes (e.g., `data-focus-within`) and specific class names (`react-aria-NumberField`, etc.). It defines layout, colors, borders, focus states, and dimensions, relying on variables provided by the `@react-aria/example-theme`.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/NumberField.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n\n.react-aria-NumberField {\n  margin-bottom: 8px;\n  color: var(--text-color);\n\n  .react-aria-Group {\n    display: flex;\n    width: fit-content;\n    border-radius: 4px;\n\n    &[data-focus-within] {\n      outline: 1px solid var(--focus-ring-color);\n      .react-aria-Input,\n      .react-aria-Button {\n        border-color: var(--focus-ring-color);\n      }\n    }\n  }\n\n  .react-aria-Button {\n    font-size: 1.4rem;\n    width: 2.3rem;\n    padding: 0;\n\n    &[slot=decrement] {\n      border-start-end-radius: 0;\n      border-end-end-radius: 0;\n    }\n\n    &[slot=increment] {\n      border-start-start-radius: 0;\n      border-end-start-radius: 0;\n    }\n  }\n\n  .react-aria-Input {\n    background: var(--field-background);\n    border: 1px solid var(--border-color);\n    border-radius: 0;\n    color: var(--field-text-color);\n    margin: 0 -1px;\n    z-index: 1;\n    font-size: 1rem;\n    padding: 0.429rem 0.571rem;\n    outline: none;\n    width: 6rem;\n    flex: 1;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling DatePicker Popover in CSS\nDESCRIPTION: CSS snippet for styling the DatePicker popover to match the width of the input group using a custom property.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DatePicker.mdx#2025-04-23_snippet_23\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Popover[data-trigger=DatePicker] {\n  width: var(--trigger-width);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS with tailwindcss-react-aria-components Plugin - CSS\nDESCRIPTION: This snippet shows how to configure Tailwind CSS to use the tailwindcss-react-aria-components plugin for applying styles to React Aria Components. It is meant for projects using Tailwind v4 and should be added at the top of your global CSS. The '@import' statement brings in Tailwind CSS base styles, and '@plugin' registers the plugin, enabling custom utilities for React Aria components. This setup presumes that both Tailwind CSS and the specified plugin are properly installed as project dependencies.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/file-system.mdx#2025-04-23_snippet_2\n\nLANGUAGE: CSS\nCODE:\n```\n@import \"tailwindcss\";\n@plugin \"tailwindcss-react-aria-components\";\n```\n\n----------------------------------------\n\nTITLE: Styling Invalid DateRangePicker with CSS\nDESCRIPTION: CSS styles for DateRangePicker that show validation state indicators. The styles add a prohibition symbol after the end date field when the field is invalid and defines styling for error messages.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DateRangePicker.mdx#2025-04-23_snippet_13\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-DateRangePicker {\n  &[data-invalid] {\n    [slot=end]:after {\n      content: '🚫' / '';\n      content: '🚫';\n      alt: ' ';\n      flex: 1;\n      text-align: end;\n      margin-left: 1.5rem;\n      margin-right: -1.5rem;\n    }\n  }\n\n  .react-aria-FieldError {\n    font-size: 12px;\n    color: var(--invalid-color);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Arranging ColorSwatchPicker in Stack Layout with React Aria (TypeScript/TSX)\nDESCRIPTION: Demonstrates how to render the ColorSwatchPicker with a vertical (stacked) layout using the layout prop set to \\\"stack\\\" in TypeScript/React. Requires custom components (MyColorSwatchPicker, MyColorSwatchPickerItem) to be defined elsewhere, with each item specifying a color. Inputs are the color props and layout string, and output is a vertically stacked swatch picker rendered in the UI. No explicit dependencies are stated beyond usage in a React project with React Aria components.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorSwatchPicker.mdx#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n```tsx example\n<MyColorSwatchPicker layout=\\\"stack\\\">\\n  <MyColorSwatchPickerItem color=\\\"#A00\\\" />\\n  <MyColorSwatchPickerItem color=\\\"#f80\\\" />\\n  <MyColorSwatchPickerItem color=\\\"#080\\\" />\\n  <MyColorSwatchPickerItem color=\\\"#08f\\\" />\\n  <MyColorSwatchPickerItem color=\\\"#088\\\" />\\n  <MyColorSwatchPickerItem color=\\\"#008\\\" />\\n</MyColorSwatchPicker>\\n```\n```\n\n----------------------------------------\n\nTITLE: Disabled ToggleButton Implementation\nDESCRIPTION: An example showing how to create a disabled ToggleButton using the isDisabled prop.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ToggleButton.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<ToggleButton isDisabled>Pin</ToggleButton>\n```\n\n----------------------------------------\n\nTITLE: Importing Global Tailwind Styles in TypeScript\nDESCRIPTION: Imports the global Tailwind CSS file (`tailwind.global.css`) necessary for applying Tailwind utility classes to the React Aria components within the example. This setup ensures that the styles defined in the global CSS are available throughout the application or specific part where this import is used.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/action-menu.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport './tailwind.global.css';\n```\n\n----------------------------------------\n\nTITLE: Styling ComboBox Item States for Accessibility (CSS)\nDESCRIPTION: Defines CSS class rules for ComboBox item states such as 'selected' and 'focused', including color, background, and accessibility enhancements (using forced-colors media queries). The .my-item class applies base styling, while '.selected' and '.focused' subclasses style for visual feedback. CSS pseudo-elements and @media rules improve accessibility, especially for high-contrast users. This requires markup that emits 'my-item', 'selected', or 'focused' classes for correct behavior.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ComboBox.mdx#2025-04-23_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.my-item {\n  margin: 2px;\n  padding: 4px 8px 4px 22px;\n  border-radius: 6px;\n  outline: none;\n  cursor: default;\n  color: var(--text-color);\n  font-size: 1.072rem;\n  position: relative;\n\n  &.selected {\n    font-weight: 600;\n    background: none;\n\n    &::before {\n      content: '✓';\n      content: '✓' / '';\n      alt: ' ';\n      position: absolute;\n      top: 4px;\n      left: 4px;\n    }\n  }\n\n  &.focused {\n    background: #e70073;\n    color: white;\n  }\n}\n\n@media (forced-colors: active) {\n  .my-item.focused {\n    background: Highlight;\n    color: HighlightText;\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Class Names in React Aria Tabs\nDESCRIPTION: Shows how to override the default class name of a React Aria Tabs component with a custom class name.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Tabs.mdx#2025-04-23_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n<Tabs className=\"my-tabs\">\n  {/* ... */}\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Basic ColorSwatchPicker Anatomy Example\nDESCRIPTION: Shows the basic structure of a ColorSwatchPicker with its child components. This illustrates the component hierarchy needed to create a functioning color swatch picker.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorSwatchPicker.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ColorSwatchPicker, ColorSwatchPickerItem, ColorSwatch} from 'react-aria-components';\n\n<ColorSwatchPicker>\n  <ColorSwatchPickerItem>\n    <ColorSwatch />\n  </ColorSwatchPickerItem>\n</ColorSwatchPicker>\n```\n\n----------------------------------------\n\nTITLE: Popover Matching Trigger Width Styling (CSS)\nDESCRIPTION: Demonstrates using the [data-trigger] attribute and a --trigger-width CSS custom property to style the popover so it matches its trigger’s width when used within DialogTrigger. Expects .react-aria-Popover[data-trigger=DialogTrigger] to exist. Inputs: presence of data attributes and CSS custom properties; outputs: width matching trigger.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Popover.mdx#2025-04-23_snippet_17\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Popover[data-trigger=DialogTrigger] {\n  width: var(--trigger-width);\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Horizontally Oriented React Aria RadioGroup (CSS)\nDESCRIPTION: Provides CSS rules specifically for styling a `RadioGroup` when it's configured with horizontal orientation. It targets the element using the `.react-aria-RadioGroup` class combined with the `[data-orientation=horizontal]` attribute selector. Flexbox properties (`flex-direction: row`, `align-items: center`) are used to achieve the horizontal layout.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/RadioGroup.mdx#2025-04-23_snippet_12\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-RadioGroup {\n  &[data-orientation=horizontal] {\n    flex-direction: row;\n    align-items: center;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Menu Separators with CSS in React Aria Components\nDESCRIPTION: This CSS applies styling to separator elements in the menu, setting their height, background color, and margins for consistent spacing. Intended for use with the .react-aria-Menu and .react-aria-Separator classes as output by React Aria Components.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Menu.mdx#2025-04-23_snippet_14\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Menu {\\n  .react-aria-Separator {\\n    height: 1px;\\n    background: var(--border-color);\\n    margin: 2px 4px;\\n  }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Styling Input Component in React Aria with CSS - CSS\nDESCRIPTION: This snippet shows a CSS rule targeting the Input component in React Aria Components using the class selector \".react-aria-Input\". Setting the width to 4ch ensures a compact numeric input field appropriate for color channel values like hue. No dependencies except that the markup includes a component with this className. This is useful for styling input fields in color selection UIs.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorWheel.mdx#2025-04-23_snippet_11\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Input {\n  width: 4ch;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Accessible Navigation Landmarks with Breadcrumbs\nDESCRIPTION: Example showing how to place breadcrumbs in a navigation landmark to improve accessibility for assistive technology users.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Breadcrumbs.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<nav aria-label=\"Breadcrumbs\">\n  <Breadcrumbs>\n    <Breadcrumb><Link href=\"/\">Home</Link></Breadcrumb>\n    <Breadcrumb><Link href=\"/react-aria/\">React Aria</Link></Breadcrumb>\n    <Breadcrumb><Link>Breadcrumbs</Link></Breadcrumb>\n  </Breadcrumbs>\n</nav>\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS Plugins for Version 3 or 4 in CSS\nDESCRIPTION: Shows how to import and activate 'tailwindcss', 'tailwindcss-react-aria-components', and 'tailwindcss-animate' plugins in a CSS entrypoint for Tailwind v4. This is essential to enable utility support for React Aria components and animation utilities. Prerequisites: Tailwind v4 and the referenced plugins must be installed and available to the build tool.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/notifications-popover.mdx#2025-04-23_snippet_2\n\nLANGUAGE: CSS\nCODE:\n```\n@import \"tailwindcss\";\n@plugin \"tailwindcss-react-aria-components\";\n@plugin \"tailwindcss-animate\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Individually Disabled Breadcrumb Links\nDESCRIPTION: Example showing how to disable individual breadcrumb links within a navigation path while keeping others active.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Breadcrumbs.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<Breadcrumbs>\n  <Breadcrumb><Link href=\"/\">Home</Link></Breadcrumb>\n  <Breadcrumb><Link isDisabled href=\"/react-aria/\">React Aria</Link></Breadcrumb>\n  <Breadcrumb><Link>Breadcrumbs</Link></Breadcrumb>\n</Breadcrumbs>\n```\n\n----------------------------------------\n\nTITLE: Implementing Single Month Pagination in Multi-month RangeCalendar\nDESCRIPTION: Shows how to use the pageBehavior prop to enable single month pagination in a multi-month RangeCalendar component.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/RangeCalendar.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<RangeCalendar aria-label=\"Trip dates\" visibleDuration={{months: 3}} pageBehavior=\"single\">\n  <header>\n    <Button slot=\"previous\">◀</Button>\n    <Heading />\n    <Button slot=\"next\">▶</Button>\n  </header>\n  <div style={{display: 'flex', gap: 30, overflow: 'auto'}}>\n    <CalendarGrid>\n      {date => <CalendarCell date={date} />}\n    </CalendarGrid>\n    <CalendarGrid offset={{months: 1}}>\n      {date => <CalendarCell date={date} />}\n    </CalendarGrid>\n    <CalendarGrid offset={{months: 2}}>\n      {date => <CalendarCell date={date} />}\n    </CalendarGrid>\n  </div>\n</RangeCalendar>\n```\n\n----------------------------------------\n\nTITLE: Styling Custom Drop Indicators in React Aria\nDESCRIPTION: CSS for styling custom drop indicators. Defines a custom class with an active state and a fallback for browsers without :has selector support.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/GridList.mdx#2025-04-23_snippet_32\n\nLANGUAGE: css\nCODE:\n```\n.my-drop-indicator {\n  &.active {\n    outline: 1px solid #e70073;\n  }\n\n  @supports not selector(:has(.foo)) {\n    /* Undo gap in browsers that don't support :has */\n    margin-bottom: -2px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling DatePicker Validation States in React Aria Components (CSS)\nDESCRIPTION: Provides CSS rules for styling a React Aria `DatePicker` when it is marked as invalid. It uses the `[data-invalid]` attribute selector to target the invalid state, adding a visual indicator (emoji) within the `react-aria-DateInput::after` pseudo-element and styling the `react-aria-FieldError` component with a specific font size and color.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DatePicker.mdx#2025-04-23_snippet_13\n\nLANGUAGE: css\nCODE:\n```\n```css\n.react-aria-DatePicker {\n  &[data-invalid] {\n    .react-aria-DateInput:after {\n      content: '🚫' / '';\n      content: '🚫';\n      alt: ' ';\n      flex: 1;\n      text-align: end;\n    }\n  }\n\n  .react-aria-FieldError {\n    font-size: 12px;\n    color: var(--invalid-color);\n  }\n}\n  ```\n```\n\n----------------------------------------\n\nTITLE: Hiding Time Zone in DateRangePicker\nDESCRIPTION: Example demonstrating how to hide the time zone abbreviation in a DateRangePicker that uses ZonedDateTime objects. The hideTimeZone prop removes the time zone display when it's implicit or shown elsewhere.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DateRangePicker.mdx#2025-04-23_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\n<MyDateRangePicker\n  label=\"Date range\"\n  defaultValue={{\n    start: parseZonedDateTime('2022-11-07T10:45[America/Los_Angeles]'),\n    end: parseZonedDateTime('2022-11-08T19:45[America/Los_Angeles]')\n  }}\n  hideTimeZone />\n```\n\n----------------------------------------\n\nTITLE: Styling React Aria Row Component Based on Data Attributes\nDESCRIPTION: This CSS snippet demonstrates how to style a React Aria Row component based on its data attributes, which represent different UI states.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Table.mdx#2025-04-23_snippet_45\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Row[data-selected] {\n  /* ... */\n}\n\n.react-aria-Row[data-focused] {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Tooltip Styling with CSS\nDESCRIPTION: Provides CSS styling for tooltips including animations, positioning, and arrow placement.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Tooltip.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n\n.react-aria-Tooltip {\n  box-shadow: 0 8px 20px rgba(0 0 0 / 0.1);\n  border-radius: 4px;\n  background: var(--highlight-background);\n  color: var(--highlight-foreground);\n  forced-color-adjust: none;\n  outline: none;\n  padding: 2px 8px;\n  max-width: 150px;\n  transform: translate3d(0, 0, 0);\n  transition: transform 200ms, opacity 200ms;\n\n  &[data-entering],\n  &[data-exiting] {\n    transform: var(--origin);\n    opacity: 0;\n  }\n\n  &[data-placement=top] {\n    margin-bottom: 8px;\n    --origin: translateY(4px);\n  }\n\n  &[data-placement=bottom] {\n    margin-top: 8px;\n    --origin: translateY(-4px);\n    & .react-aria-OverlayArrow svg {\n      transform: rotate(180deg);\n    }\n  }\n\n  &[data-placement=right] {\n    margin-left: 8px;\n    --origin: translateX(-4px);\n    & .react-aria-OverlayArrow svg {\n      transform: rotate(90deg);\n    }\n  }\n\n  &[data-placement=left] {\n    margin-right: 8px;\n    --origin: translateX(4px);\n    & .react-aria-OverlayArrow svg {\n      transform: rotate(-90deg);\n    }\n  }\n\n  & .react-aria-OverlayArrow svg {\n    display: block;\n    fill: var(--highlight-background);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Slots in React Aria Select\nDESCRIPTION: Shows how to implement label and description slots in Select component for improved accessibility and styling purposes.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Select.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Text} from 'react-aria-components';\n\n<MySelect label=\"Permissions\">\n  <ListBoxItem textValue=\"Read\">\n    <Text slot=\"label\">Read</Text>\n    <Text slot=\"description\">Read only</Text>\n  </ListBoxItem>\n  <ListBoxItem textValue=\"Write\">\n    <Text slot=\"label\">Write</Text>\n    <Text slot=\"description\">Read and write only</Text>\n  </ListBoxItem>\n  <ListBoxItem textValue=\"Admin\">\n    <Text slot=\"label\">Admin</Text>\n    <Text slot=\"description\">Full access</Text>\n  </ListBoxItem>\n</MySelect>\n```\n\n----------------------------------------\n\nTITLE: Configuring ComboBox with Focus Menu Trigger in React Aria\nDESCRIPTION: Example showing a ComboBox configured with menuTrigger set to 'focus', which opens the menu when the input receives focus rather than on typing. This demonstrates one of the three available menu trigger behaviors.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ComboBox.mdx#2025-04-23_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\n<MyComboBox label=\"Favorite Animal\" menuTrigger=\"focus\">\n  <ListBoxItem id=\"red panda\">Red Panda</ListBoxItem>\n  <ListBoxItem id=\"cat\">Cat</ListBoxItem>\n  <ListBoxItem id=\"dog\">Dog</ListBoxItem>\n  <ListBoxItem id=\"aardvark\">Aardvark</ListBoxItem>\n  <ListBoxItem id=\"kangaroo\">Kangaroo</ListBoxItem>\n  <ListBoxItem id=\"snake\">Snake</ListBoxItem>\n</MyComboBox>\n```\n\n----------------------------------------\n\nTITLE: Styling React Aria Components Based on Data Attributes - CSS\nDESCRIPTION: This CSS snippet shows how to style the DropZone component conditionally when it is in a specific state, using a data-drop-target attribute. This relies on components exposing their internal state as data attributes. No extra dependencies are required; simply use standard CSS selectors to provide visual feedback (such as highlighting) when the DropZone is ready to accept a drop. This enables fine-grained UI feedback for accessibility and UX improvements.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DropZone.mdx#2025-04-23_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-DropZone[data-drop-target] {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Input States Using Data Attributes (CSS)\nDESCRIPTION: Demonstrates using CSS attribute selectors to target data attributes (like `[data-hovered]`, `[data-disabled]`) exposed by React Aria components. This allows applying styles based on the component's interaction state.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/SearchField.mdx#2025-04-23_snippet_17\n\nLANGUAGE: css\nCODE:\n```\ninput[data-hovered] {\n  /* ... */\n}\n\ninput[data-disabled] {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Invalid Input and FieldError for SearchField (CSS)\nDESCRIPTION: Provides CSS rules to style a `SearchField` when its validation fails. It targets the input element using the `[data-invalid]` data attribute to apply an invalid border color and styles the `.react-aria-FieldError` component to display error messages distinctly.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/SearchField.mdx#2025-04-23_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-SearchField {\n  .react-aria-Input{\n    &[data-invalid] {\n      border-color: var(--invalid-color);\n    }\n  }\n\n  .react-aria-FieldError {\n    grid-area: help;\n    font-size: 12px;\n    color: var(--invalid-color);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Tooltip Styling with a Custom className (JavaScript/JSX)\nDESCRIPTION: This JSX snippet demonstrates how to override tooltip styling by providing a custom className prop to the Tooltip component. Any existing React Aria default className will be replaced with 'my-tooltip'. There are no dependencies, but ensure the class exists in your CSS. Inputs: className string, children for tooltip content. Output: Tooltip rendered with a user-defined style.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Tooltip.mdx#2025-04-23_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<Tooltip className=\\\"my-tooltip\\\">\\n  {/* ... */}\\n</Tooltip>\\n\n```\n\n----------------------------------------\n\nTITLE: Applying Custom CSS Class to SearchField in React (JSX)\nDESCRIPTION: Illustrates overriding the default `react-aria-SearchField` class by providing a custom string to the `className` prop on the `SearchField` component in JSX. This allows for custom styling conventions.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/SearchField.mdx#2025-04-23_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\n<SearchField className=\"my-searchfield\">\n  {/* ... */}\n</SearchField>\n```\n\n----------------------------------------\n\nTITLE: Styling RadioGroup and Radio Components with CSS\nDESCRIPTION: Provides CSS styles for customizing the appearance of RadioGroup and Radio components, including hover and selected states.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/RadioGroup.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n\n.react-aria-RadioGroup {\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  color: var(--text-color);\n}\n\n.react-aria-Radio {\n  display: flex;\n  align-items: center;\n  gap: 0.571rem;\n  font-size: 1.143rem;\n  color: var(--text-color);\n  forced-color-adjust: none;\n\n  &:before {\n    content: '';\n    display: block;\n    width: 1.286rem;\n    height: 1.286rem;\n    box-sizing: border-box;\n    border: 0.143rem solid var(--border-color);\n    background: var(--field-background);\n    border-radius: 1.286rem;\n    transition: all 200ms;\n  }\n\n  &[data-pressed]:before {\n    border-color: var(--border-color-pressed);\n  }\n\n  &[data-selected] {\n    &:before {\n      border-color: var(--highlight-background);\n      border-width: 0.429rem;\n    }\n\n    &[data-pressed]:before {\n      border-color: var(--highlight-background-pressed);\n    }\n  }\n\n  &[data-focus-visible]:before {\n    outline: 2px solid var(--focus-ring-color);\n    outline-offset: 2px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind v3 with React Aria Components Plugin in JS/TSX\nDESCRIPTION: Demonstrates how to add the `tailwindcss-react-aria-components` plugin to a Tailwind v3 project by requiring it within the `plugins` array in the `tailwind.config.js` file. Note that version 1.x of the plugin should be installed and used for Tailwind v3 compatibility.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/category-tabs.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nmodule.exports = {\n  // ...\n  plugins: [\n    require('tailwindcss-react-aria-components')\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Styling React Aria ColorThumb Component Based on State - CSS\nDESCRIPTION: This snippet targets the ColorThumb component for states such as 'dragging' and 'focused' using data attributes. The selectors \".react-aria-ColorThumb[data-dragging]\" and \".react-aria-ColorThumb[data-focused]\" enable state-specific CSS. Useful for altering appearance during user interactions and integrating with accessibility. No dependencies required except a React Aria Components setup that exposes these states as data attributes.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorWheel.mdx#2025-04-23_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ColorThumb[data-dragging] {\n  /* ... */\n}\n\n.react-aria-ColorThumb[data-focused] {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Styling React Aria Components with CSS\nDESCRIPTION: Examples of styling React Aria components using CSS selectors, including state-based styling and custom class names.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ListBox.mdx#2025-04-23_snippet_42\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ListBox {\n  /* ... */\n}\n\n.react-aria-ListBoxItem[data-selected] {\n  /* ... */\n}\n\n.react-aria-ListBoxItem[data-focused] {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Popover Width Styling\nDESCRIPTION: CSS example for styling popover width to match trigger element width.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DateRangePicker.mdx#2025-04-23_snippet_29\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Popover[data-trigger=DateRangePicker] {\n  width: var(--trigger-width);\n}\n```\n\n----------------------------------------\n\nTITLE: Styling a Switch Component with CSS\nDESCRIPTION: CSS styling for the Switch component, including visual states like hover, pressed, selected, and focus. The CSS uses custom properties from a theme to maintain consistent styling across states.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Switch.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n\n.react-aria-Switch {\n  display: flex;\n  align-items: center;\n  gap: 0.571rem;\n  font-size: 1.143rem;\n  color: var(--text-color);\n  forced-color-adjust: none;\n\n  .indicator {\n    width: 2rem;\n    height: 1.143rem;\n    border: 2px solid var(--border-color);\n    background: var(--background-color);\n    border-radius: 1.143rem;\n    transition: all 200ms;\n\n    &:before {\n      content: '';\n      display: block;\n      margin: 0.143rem;\n      width: 0.857rem;\n      height: 0.857rem;\n      background: var(--highlight-background);\n      border-radius: 16px;\n      transition: all 200ms;\n    }\n  }\n\n  &[data-pressed] .indicator {\n    border-color: var(--border-color-pressed);\n\n    &:before {\n      background: var(--highlight-background-pressed);\n    }\n  }\n\n  &[data-selected] {\n    .indicator {\n      border-color: var(--highlight-background);\n      background: var(--highlight-background);\n\n      &:before {\n        background: var(--field-background);\n        transform: translateX(100%);\n      }\n    }\n\n    &[data-pressed] {\n      .indicator {\n        border-color: var(--highlight-background-pressed);\n        background: var(--highlight-background-pressed);\n      }\n    }\n  }\n\n  &[data-focus-visible] .indicator {\n    outline: 2px solid var(--focus-ring-color);\n    outline-offset: 2px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Form Component CSS Styling\nDESCRIPTION: Basic CSS styling for the Form component defining flex layout and spacing.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Form.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Form {\n  display: flex;\n  flex-direction: column;\n  align-items: start;\n  gap: 8px;\n}\n```\n\n----------------------------------------\n\nTITLE: ColorField Styling with CSS\nDESCRIPTION: CSS styling implementation for the ColorField component including input field and focus states.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorField.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n\n.react-aria-ColorField {\n  display: flex;\n  flex-direction: column;\n  color: var(--text-color);\n\n  .react-aria-Input {\n    padding: 0.286rem;\n    margin: 0;\n    border: 1px solid var(--border-color);\n    border-radius: 6px;\n    background: var(--field-background);\n    font-size: 1.143rem;\n    color: var(--field-text-color);\n    width: 100%;\n    max-width: 12ch;\n    box-sizing: border-box;\n\n    &[data-focused] {\n      outline: 2px solid var(--focus-ring-color);\n      outline-offset: -1px;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom CSS for Reusable ListBox Wrapper\nDESCRIPTION: Provides custom CSS styles for the reusable ListBox and ListBoxItem wrapper components.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ListBox.mdx#2025-04-23_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.my-listbox {\n  max-height: inherit;\n  overflow: auto;\n  padding: 4px;\n  gap: 4px;\n  border: 1px solid var(--border-color);\n  border-radius: 6px;\n  background: var(--overlay-background);\n  outline: none;\n  max-width: 250px;\n  max-height: 300px;\n  box-sizing: border-box;\n}\n\n.my-item {\n  --highlight: #e70073;\n\n  padding: 0.286rem 0.571rem;\n  border-radius: 6px;\n  outline: none;\n  cursor: default;\n  color: var(--text-color);\n  font-size: 1.072rem;\n\n  &.selected {\n    background: var(--highlight);\n    color: var(--highlight-foreground);\n  }\n\n  &.focused {\n    outline: 2px solid var(--highlight);\n    outline-offset: 2px;\n  }\n}\n\n@media (forced-colors: active) {\n  .my-item {\n    forced-color-adjust: none;\n    --highlight: Highlight;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Link Tags with CSS\nDESCRIPTION: This CSS snippet styles tags with href attributes to remove text decoration and set the cursor to pointer.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/TagGroup.mdx#2025-04-23_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Tag[data-href] {\n  text-decoration: none;\n  cursor: pointer;\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom ClassName on DateInput in JSX\nDESCRIPTION: Shows how to override the default CSS class on DateInput by providing a custom className. This enables controlled styling and can be used in conjunction with CSS modules, Tailwind, or other utility frameworks. Any child markup can be inserted within DateInput.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DateField.mdx#2025-04-23_snippet_22\n\nLANGUAGE: JSX\nCODE:\n```\n<DateInput className=\"my-date-input\">\n  {/* ... */}\n</DateInput>\n```\n\n----------------------------------------\n\nTITLE: Styling TimeField Description in CSS\nDESCRIPTION: This CSS snippet provides styles for the description text in a TimeField component. It sets the font size for elements with the description slot.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/TimeField.mdx#2025-04-23_snippet_12\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-TimeField {\n  [slot=description] {\n    font-size: 12px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabled ToggleButtonGroup\nDESCRIPTION: Disabling all buttons within a ToggleButtonGroup using the isDisabled prop.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ToggleButtonGroup.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<ToggleButtonGroup isDisabled>\n  <ToggleButton id=\"grid\">Grid view</ToggleButton>\n  <ToggleButton id=\"list\">List view</ToggleButton>\n  <ToggleButton id=\"gallery\">Gallery view</ToggleButton>\n</ToggleButtonGroup>\n```\n\n----------------------------------------\n\nTITLE: Styling Custom Drag Preview in React Aria Components\nDESCRIPTION: This CSS snippet provides styling for the custom drag preview, including layout, colors, and a badge to display the number of dragged items.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/GridList.mdx#2025-04-23_snippet_23\n\nLANGUAGE: css\nCODE:\n```\n.drag-preview {\n  width: 150px;\n  padding: 4px 8px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  gap: 4px;\n  background: var(--highlight-background);\n  color: var(--highlight-foreground);\n  border-radius: 4px;\n\n  .badge {\n    background: var(--highlight-foreground);\n    color: var(--highlight-background);\n    padding: 0 8px;\n    border-radius: 4px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Tailwind Global CSS in TypeScript\nDESCRIPTION: This snippet imports Tailwind global styles into a TypeScript/React project. The import ensures that all Tailwind CSS classes are available throughout the application, which is necessary for using predefined utility classes in components. No parameters are required; simply ensure that tailwind.global.css is available in the project root.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/destructive-dialog.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport './tailwind.global.css';\n```\n\n----------------------------------------\n\nTITLE: Adding Description to CheckboxGroup in React\nDESCRIPTION: This snippet shows how to add a description to a CheckboxGroup using the description slot.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/CheckboxGroup.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<CheckboxGroup>\n  <Label>Pets</Label>\n  <MyCheckbox value=\"dogs\">Dogs</MyCheckbox>\n  <MyCheckbox value=\"cats\">Cats</MyCheckbox>\n  <MyCheckbox value=\"dragons\">Dragons</MyCheckbox>\n  <Text slot=\"description\">Select your pets.</Text>\n</CheckboxGroup>\n```\n\n----------------------------------------\n\nTITLE: Styling Stack Layout for ColorSwatchPicker Using CSS\nDESCRIPTION: Provides a CSS snippet to modify the direction of the ColorSwatchPicker to vertical (column) when its data-layout attribute is set to stack. This enables vertical stacking of child items in accordance with the layout prop in markup. The CSS selector targets the specific state for proper display. Requires that the component provides or is given the .react-aria-ColorSwatchPicker class.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorSwatchPicker.mdx#2025-04-23_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n```css\\n.react-aria-ColorSwatchPicker {\\n  &[data-layout=stack] {\\n    flex-direction: column;\\n  }\\n}\\n```\n```\n\n----------------------------------------\n\nTITLE: Disabling a Color Slider in TSX\nDESCRIPTION: This example demonstrates how to disable a `ColorSlider` component by setting the `isDisabled` prop to true. It uses the `MyColorSlider` wrapper, specifying the 'red' channel and a default value. A disabled slider prevents user interaction.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorSlider.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n<MyColorSlider channel=\"red\" defaultValue=\"#7f007f\" isDisabled />\n```\n\n----------------------------------------\n\nTITLE: Customizing Drop Indicators in React Aria Tables\nDESCRIPTION: This example demonstrates how to create a custom drop indicator using the renderDropIndicator function. It uses the DropIndicator component with custom class names based on the drop target state.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Table.mdx#2025-04-23_snippet_32\n\nLANGUAGE: tsx\nCODE:\n```\nimport {DropIndicator} from 'react-aria-components';\n\nfunction Example() {\n  let { dragAndDropHooks } = useDragAndDrop({\n    // ...\n    renderDropIndicator(target) {\n      return (\n        <DropIndicator\n          target={target}\n          className={({isDropTarget}) => `my-drop-indicator ${isDropTarget ? 'active' : ''}`} />\n      );\n    }\n  });\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Applying a Custom ClassName to Modal Components - JSX\nDESCRIPTION: This JSX example demonstrates how to override the default className on the Modal component by specifying a custom value. The Modal will use 'my-modal' as its class, allowing for precise CSS targeting or integration with external styles or frameworks. Requires the usage of a compatible version of the Modal component from React Aria Components.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Modal.mdx#2025-04-23_snippet_7\n\nLANGUAGE: JSX\nCODE:\n```\n<Modal className=\"my-modal\">\n  {/* ... */}\n</Modal>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Label Component within TagGroup (TypeScript React)\nDESCRIPTION: Shows the use of MyCustomLabel within a TagGroup, demonstrating how custom labels can fully replace the built-in Label component via context compatibility. No imports are required beyond those for TagGroup and MyCustomLabel. Inputs are standard JSX children; output is a TagGroup with MyCustomLabel and other children.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/TagGroup.mdx#2025-04-23_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\n<TagGroup>\\n  {/*- begin highlight -*/}\\n  <MyCustomLabel>Name</MyCustomLabel>\\n  {/*- end highlight -*/}\\n  {/* ... */}\\n</TagGroup>\n```\n\n----------------------------------------\n\nTITLE: TagGroup Styling with CSS\nDESCRIPTION: Defines the styling for TagGroup components including hover, focus, and selected states.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/TagGroup.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n\n.react-aria-TagGroup {\n  display: flex;\n  flex-direction: column;\n  gap: 2px;\n  font-size: small;\n  color: var(--text-color);\n}\n\n.react-aria-TagList {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 4px;\n}\n\n.react-aria-Tag {\n  color: var(--text-color);\n  border: 1px solid var(--border-color);\n  forced-color-adjust: none;\n  border-radius: 4px;\n  padding: 2px 8px;\n  font-size: 0.929rem;\n  outline: none;\n  cursor: default;\n  display: flex;\n  align-items: center;\n  transition: border-color 200ms;\n\n  &[data-hovered] {\n    border-color: var(--border-color-hover);\n  }\n\n  &[data-focus-visible] {\n    outline: 2px solid var(--focus-ring-color);\n    outline-offset: 2px;\n  }\n\n  &[data-selected] {\n    border-color: var(--highlight-background);\n    background: var(--highlight-background);\n    color: var(--highlight-foreground);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling DatePicker onChange Events in React Aria Components (TSX)\nDESCRIPTION: Illustrates capturing date changes using the `onChange` prop of `MyDatePicker`. The selected date updates the component's state via `setDate` (from `React.useState`). It also shows formatting the selected date for display using `useDateFormatter` from `@react-aria/i18n` and converting the `DateValue` to a native `Date` object with the local time zone using `toDate(getLocalTimeZone())`. Requires `parseDate` and `getLocalTimeZone` from `@internationalized/date`.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DatePicker.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\nimport {getLocalTimeZone} from '@internationalized/date';\nimport {useDateFormatter} from '@react-aria/i18n';\n\nfunction Example() {\n  let [date, setDate] = React.useState(parseDate('1985-07-03'));\n  let formatter = useDateFormatter({dateStyle: 'full'});\n\n  return (\n    <>\n      <MyDatePicker label=\"Birth date\" value={date} onChange={setDate} />\n      <p>Selected date: {date ? formatter.format(date.toDate(getLocalTimeZone())) : '--'}</p>\n    </>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind Plugins in JavaScript (tailwind.config.js) for React Aria Components\nDESCRIPTION: This JavaScript code configures the Tailwind CSS build pipeline for version 3 by adding the tailwindcss-react-aria-components and tailwindcss-animate plugins via require statements in the plugins array of the tailwind.config.js file. All referenced plugins must be installed in the project. This setup is required for React Aria Components animation support in Tailwind v3; use version 1.x of tailwindcss-react-aria-components with Tailwind v3.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/destructive-dialog.mdx#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  // ...\n  plugins: [\n    require('tailwindcss-react-aria-components'),\n    require('tailwindcss-animate')\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Styling Menu Items with CSS\nDESCRIPTION: CSS styles for menu item layout including label, description and keyboard shortcut positioning.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Menu.mdx#2025-04-23_snippet_17\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-MenuItem {\n  [slot=label] {\n    font-weight: bold;\n    grid-area: label;\n  }\n\n  [slot=description] {\n    font-size: small;\n    grid-area: desc;\n  }\n\n  kbd {\n    grid-area: kbd;\n    font-family: monospace;\n    text-align: end;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling the Description Slot in React Aria RadioGroup (CSS)\nDESCRIPTION: Provides a CSS rule to style the description text associated with a `RadioGroup`. It targets the element using the attribute selector `[slot=description]` within the `.react-aria-RadioGroup` class, setting its font size.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/RadioGroup.mdx#2025-04-23_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-RadioGroup {\n  [slot=description] {\n    font-size: 12px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Empty State Tree Styling\nDESCRIPTION: CSS styling for the empty state display of a Tree component.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Tree.mdx#2025-04-23_snippet_19\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Tree {\n  &[data-empty] {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-style: italic;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Input Component Wrapper\nDESCRIPTION: Example of creating a wrapper component to customize the Input component within NumberField.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/NumberField.mdx#2025-04-23_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MyInput(props) {\n  return <Input {...props} className=\"my-input\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Layout and ExampleList Components in JSX\nDESCRIPTION: Imports the `Layout` and `ExampleList` components from `@react-spectrum/docs`. The `Layout` is set as the default export for the module, intended for page structure, while `ExampleList` is used later to display examples. Requires the `@react-spectrum/docs` package.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n{/* Copyright 2023 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License. */}\n\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n\nimport {ExampleList} from '@react-spectrum/docs/src/ExampleList';\n```\n\n----------------------------------------\n\nTITLE: Targeting the Default Group Component Class Name (CSS)\nDESCRIPTION: This CSS snippet shows the default CSS selector used to target the `Group` component provided by `react-aria-components`. Developers can use the `.react-aria-Group` class to apply global styles to all instances of the `Group` component in their application.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Group.mdx#2025-04-23_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Group {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Directory Item Styling\nDESCRIPTION: CSS styles for directory items in the list view, handling layout and text overflow.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/GridList.mdx#2025-04-23_snippet_37\n\nLANGUAGE: css\nCODE:\n```\n.dir-item {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.dir-item {\n  flex: 0 0 auto;\n}\n\n.dir-item {\n  flex: 1;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling DateField Description Slot with CSS\nDESCRIPTION: Applies custom font size to description text within a DateField by targeting [slot=description]. Ensures help text is visually distinct and accessible. This CSS assumes DateField outputs slot attributes according to React Aria's conventions.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DateField.mdx#2025-04-23_snippet_17\n\nLANGUAGE: CSS\nCODE:\n```\n.react-aria-DateField {\n  [slot=description] {\n    font-size: 12px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Class Name to React Aria Table Component\nDESCRIPTION: This example shows how to apply a custom class name to a React Aria Table component, overriding the default class name.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Table.mdx#2025-04-23_snippet_44\n\nLANGUAGE: jsx\nCODE:\n```\n<Table className=\"my-table\">\n  {/* ... */}\n</Table>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Heading Component Compatible with React Aria Context\nDESCRIPTION: This example demonstrates how to create a custom heading component that consumes the HeadingContext provided by React Aria Components, making it compatible with the RangeCalendar component.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/RangeCalendar.mdx#2025-04-23_snippet_27\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {HeadingProps} from 'react-aria-components';\nimport {HeadingContext, useContextProps} from 'react-aria-components';\n\nconst MyCustomHeading = React.forwardRef((props: HeadingProps, ref: React.ForwardedRef<HTMLHeadingElement>) => {\n  // Merge the local props and ref with the ones provided via context.\n  ///- begin highlight -///\n  [props, ref] = useContextProps(props, ref, HeadingContext);\n  ///- end highlight -///\n\n  // ... your existing Heading component\n  return <h2 {...props} ref={ref} />;\n});\n```\n\n----------------------------------------\n\nTITLE: CSS Styling Targeting Components with Data Attributes\nDESCRIPTION: Example of using CSS selectors to target ToggleButton components based on their state via data attributes.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ToggleButton.mdx#2025-04-23_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ToggleButton[data-selected] {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Custom Drag Preview in React Aria ListBox\nDESCRIPTION: This CSS snippet provides styles for the custom drag preview implemented in the previous example.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ListBox.mdx#2025-04-23_snippet_27\n\nLANGUAGE: css\nCODE:\n```\n.drag-preview {\n  width: 150px;\n  padding: 4px 8px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  gap: 4px;\n  background: var(--highlight-background);\n  color: var(--highlight-foreground);\n  border-radius: 4px;\n\n  .badge {\n    background: var(--highlight-foreground);\n    color: var(--highlight-background);\n    padding: 0 8px;\n    border-radius: 4px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Horizontal Orientation for React Aria RadioGroup (TSX)\nDESCRIPTION: Demonstrates how to change the layout of radio buttons within a `RadioGroup` from the default vertical stack to a horizontal arrangement. This is achieved by setting the `orientation` prop to `\"horizontal\"`. Note the use of a custom `MyRadioGroup` component, implying a potential wrapper around the standard `RadioGroup`.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/RadioGroup.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<MyRadioGroup label=\"Favorite avatar\" orientation=\"horizontal\">\n  <Radio value=\"wizard\">Wizard</Radio>\n  <Radio value=\"dragon\">Dragon</Radio>\n</MyRadioGroup>\n```\n\n----------------------------------------\n\nTITLE: Styling Removable Tags with CSS\nDESCRIPTION: This CSS snippet provides styles for the remove button in tags. It sets up hover effects, transitions, and adjusts the appearance for selected tags.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/TagGroup.mdx#2025-04-23_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Tag {\n  [slot=remove] {\n    background: none;\n    border: none;\n    padding: 0;\n    margin-left: 8px;\n    color: var(--text-color-base);\n    transition: color 200ms;\n    outline: none;\n    font-size: 0.95em;\n\n    &[data-hovered] {\n      color: var(--text-color-hover);\n    }\n  }\n\n  &[data-selected] {\n    [slot=remove] {\n      color: inherit;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Invalid ColorField in CSS\nDESCRIPTION: This CSS snippet shows how to style an invalid ColorField and its error message.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorField.mdx#2025-04-23_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ColorField {\n  &[data-invalid] {\n    .react-aria-Input {\n      border-color: var(--invalid-color);\n    }\n  }\n\n  .react-aria-FieldError {\n    font-size: 12px;\n    color: var(--invalid-color);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling ColorSwatchPicker Components with CSS\nDESCRIPTION: CSS styling for the ColorSwatchPicker components, including layout, focus states, and selection indicators. The styles use a flex layout for the picker and provide visual feedback for interaction states.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorSwatchPicker.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n\n.react-aria-ColorSwatchPicker {\n  display: flex;\n  gap: 8px;\n  flex-wrap: wrap;\n}\n\n.react-aria-ColorSwatchPickerItem {\n  position: relative;\n  outline: none;\n  border-radius: 4px;\n  width: fit-content;\n  forced-color-adjust: none;\n\n  &[data-focus-visible] {\n    outline: 2px solid var(--focus-ring-color);\n    outline-offset: 2px;\n  }\n\n  &[data-selected]::after {\n    content: '';\n    position: absolute;\n    inset: 0;\n    border: 2px solid black;\n    outline: 2px solid white;\n    outline-offset: -4px;\n    border-radius: inherit;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Targeting DateField for Styling with CSS Class Selector\nDESCRIPTION: Defines a CSS class for customizing the appearance of the DateField component. The .react-aria-DateField selector can be extended with layout, typography, or color styles as needed. Assumes the component includes the corresponding class name in the rendered markup.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DateField.mdx#2025-04-23_snippet_21\n\nLANGUAGE: CSS\nCODE:\n```\n.react-aria-DateField {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Default ClassName on ColorSwatchPicker (JSX)\nDESCRIPTION: Provides an example of using a custom className on the ColorSwatchPicker component in JSX. By passing a className prop, users can apply their own CSS instead of the default provided by React Aria. The contents can be defined as needed. This snippet relies on the existence of the ColorSwatchPicker component within a React/JSX environment.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorSwatchPicker.mdx#2025-04-23_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx\\n<ColorSwatchPicker className=\\\"my-color-swatch-picker\\\">\\n  {/* ... */}\\n</ColorSwatchPicker>\\n```\n```\n\n----------------------------------------\n\nTITLE: Vertical Slider CSS Styling\nDESCRIPTION: CSS styles for customizing the appearance of a vertical slider including track and thumb positioning.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Slider.mdx#2025-04-23_snippet_12\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Slider {\n  &[data-orientation=vertical] {\n    height: 150px;\n    display: block;\n\n    .react-aria-Label,\n    .react-aria-SliderOutput {\n      display: none;\n    }\n\n    .react-aria-SliderTrack {\n      width: 30px;\n      height: 100%;\n\n      &:before {\n        width: 3px;\n        height: 100%;\n        left: 50%;\n        transform: translateX(-50%);\n      }\n    }\n\n    .react-aria-SliderThumb {\n      left: 50%;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for React Aria Link Component\nDESCRIPTION: CSS styles for the Link component that handle different states like hover, pressed, and focus-visible. Includes transitions, styling for the focus indicator, and proper cursor behavior.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Link.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n\n.react-aria-Link {\n  color: var(--link-color);\n  font-size: 18px;\n  transition: all 200ms;\n  text-decoration: underline;\n  cursor: pointer;\n  outline: none;\n  position: relative;\n\n  &[data-hovered] {\n    text-decoration-style: wavy;\n  }\n\n  &[data-pressed] {\n    color: var(--link-color-pressed);\n  }\n\n  &[data-focus-visible]:after {\n    content: '';\n    position: absolute;\n    inset: -3px -6px;\n    border-radius: 6px;\n    border: 2px solid var(--focus-ring-color);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Making a SearchField Read-Only in React Aria (TSX)\nDESCRIPTION: Demonstrates how to make a `SearchField` component (via a custom `MySearchField`) non-editable while still allowing focus and text selection by using the `isReadOnly` prop. A `defaultValue` is also provided.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/SearchField.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n<MySearchField label=\"Email\" defaultValue=\"abc@adobe.com\" isReadOnly />\n```\n\n----------------------------------------\n\nTITLE: Styling DateSegment Placeholder and Readonly States with CSS Attribute Selectors\nDESCRIPTION: Targets specific states of the DateSegment component for styling based on data attributes. [data-placeholder] and [data-readonly] selectors allow for visual differentiation of placeholder and readonly segments. Requires DateSegment to output these attributes; used for color, visibility, or interaction cues.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DateField.mdx#2025-04-23_snippet_23\n\nLANGUAGE: CSS\nCODE:\n```\n.react-aria-DateSegment[data-placeholder] {\n  /* ... */\n}\n\n.react-aria-DateSegment[data-readonly] {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: State-Based CSS Styling\nDESCRIPTION: Example of styling ListBoxItem components based on their states using data attributes\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ComboBox.mdx#2025-04-23_snippet_29\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ListBoxItem[data-selected] {\n  /* ... */\n}\n\n.react-aria-ListBoxItem[data-focused] {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Drop Target Rows in React Aria Tables\nDESCRIPTION: CSS styles for highlighting rows when they become drop targets. Uses the data-drop-target attribute selector to apply a border and background color to rows when they're valid drop targets.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Table.mdx#2025-04-23_snippet_29\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Row[data-drop-target] {\n  outline: 2px solid var(--highlight-background);\n  background: var(--highlight-overlay)\n}\n```\n\n----------------------------------------\n\nTITLE: Using DatePicker Hook Reference in Markdown\nDESCRIPTION: Markdown link reference to the useDatePicker hook documentation for customizing internal state, event handling, and DOM structure.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DatePicker.mdx#2025-04-23_snippet_28\n\nLANGUAGE: markdown\nCODE:\n```\n[useDatePicker](useDatePicker.html)\n```\n\n----------------------------------------\n\nTITLE: Basic CSS Targeting for React Aria Radio Component (CSS)\nDESCRIPTION: Illustrates the default method for styling a React Aria `Radio` component using CSS. It targets the component via its built-in class name, `react-aria-Radio`.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/RadioGroup.mdx#2025-04-23_snippet_17\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Radio {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Tailwind CSS Configuration\nDESCRIPTION: Provides configuration options for the Tailwind CSS plugin tailwindcss-react-aria-components.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/shipping-radio.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n@plugin \"tailwindcss-react-aria-components\";\n```\n\n----------------------------------------\n\nTITLE: Applying Body and Root-Level Styling for Modal Animation - CSS\nDESCRIPTION: This CSS snippet applies base black background and sets up the root container with custom background, translation, scaling, and rounded corners to enable fluid modal sheet transitions. It supports the down-scaling, translation, and border radius changes driven by Framer Motion events in the modal sheet implementation. It assumes CSS custom properties and requires being loaded globally or at page-level.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/framer-modal-sheet.mdx#2025-04-23_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\nbody {\n  background: black;\n}\n\nbody > div {\n  background: var(--page-background);\n  translate: 0;\n  transform-origin: center 0;\n  overflow: auto;\n  height: 100vh;\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering within React Aria Checkbox using Render Props (JSX)\nDESCRIPTION: Shows how to use a render prop function as the children of a Checkbox component. This function receives the component's state (e.g., `isSelected`) and allows for conditional rendering of elements based on that state, such as displaying a check icon only when selected.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Checkbox.mdx#2025-04-23_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n<Checkbox>\n  {({isSelected}) => (\n    <>\n      {isSelected && <CheckIcon />}\n      Subscribe\n    </>\n  )}\n</Checkbox>\n```\n\n----------------------------------------\n\nTITLE: Styling TimeField using Default CSS Class\nDESCRIPTION: Provides the default CSS class (`.react-aria-TimeField`) that can be used to apply custom styles to the `TimeField` component.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/TimeField.mdx#2025-04-23_snippet_16\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-TimeField {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Styling React Aria Checkbox Based on Pressed State (CSS)\nDESCRIPTION: Illustrates styling a React Aria Checkbox component based on its interaction state. This example targets the `data-pressed` attribute, which is added when the checkbox is being pressed, allowing for specific styles in that state.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Checkbox.mdx#2025-04-23_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Checkbox[data-pressed] {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Directory Item Styling CSS\nDESCRIPTION: CSS styles for the directory item components, defining layout and text overflow handling.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ListBox.mdx#2025-04-23_snippet_36\n\nLANGUAGE: css\nCODE:\n```\n.dir-item {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.dir-item {\n  flex: 0 0 auto;\n}\n\n.dir-item {\n  flex: 1;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Empty State in GridList with CSS\nDESCRIPTION: CSS styling for the empty state of a GridList component, centering the content and applying italic font style when the list has the data-empty attribute.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/GridList.mdx#2025-04-23_snippet_19\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-GridList {\n  &[data-empty] {\n    align-items: center;\n    justify-content: center;\n    font-style: italic;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind v3 with react-aria-components Plugin\nDESCRIPTION: This snippet shows how to configure the `tailwindcss-react-aria-components` plugin within the `tailwind.config.js` file for projects using Tailwind CSS version 3. It requires installing version 1.x of the plugin and adding it to the `plugins` array in the configuration.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/contact-list.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nmodule.exports = {\n  // ...\n  plugins: [\n    require('tailwindcss-react-aria-components')\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Dynamic OverlayArrow ClassName Using Placement (React/JSX)\nDESCRIPTION: This JSX snippet demonstrates passing a function to the className prop to change a component's class based on the placement property. It dynamically applies rotate-90 or rotate-0 to OverlayArrow based on whether placement is left/right or not. Dependencies: OverlayArrow component supporting a stateful className prop. Inputs: placement string; output: appropriate CSS class for rotation.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Popover.mdx#2025-04-23_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\n<OverlayArrow className={({placement}) => placement === 'left' || placement === 'right' ? 'rotate-90' : 'rotate-0'}>\n  {/* ... */}\n</OverlayArrow>\n```\n\n----------------------------------------\n\nTITLE: Styling Description for CheckboxGroup in CSS\nDESCRIPTION: This CSS snippet demonstrates how to style the description text within a CheckboxGroup.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/CheckboxGroup.mdx#2025-04-23_snippet_11\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-CheckboxGroup {\n  [slot=description] {\n    font-size: 12px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Targeting React Aria Components with CSS Selectors\nDESCRIPTION: This snippet demonstrates how to target React Aria components using CSS selectors that follow the react-aria-ComponentName naming convention.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/RangeCalendar.mdx#2025-04-23_snippet_17\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-RangeCalendar {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind v4 CSS with React Aria Components Plugin\nDESCRIPTION: Shows how to integrate the `tailwindcss-react-aria-components` plugin in a Tailwind v4 project. The `@plugin` directive is used within the main CSS file to enable the plugin's features.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/category-tabs.mdx#2025-04-23_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n@plugin \"tailwindcss-react-aria-components\";\n```\n\n----------------------------------------\n\nTITLE: Disabled Checkbox Styling\nDESCRIPTION: This CSS snippet provides styles for the disabled state of a Checkbox component, including changes to text and border colors.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Checkbox.mdx#2025-04-23_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Checkbox {\n  &[data-disabled] {\n    color: var(--text-color-disabled);\n\n    .checkbox {\n      border-color: var(--border-color-disabled);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling a Toolbar with CSS\nDESCRIPTION: This CSS snippet provides styling for the Toolbar component, including layout, spacing, and specific styles for child components.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Toolbar.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n\n.react-aria-Toolbar {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 5px;\n\n  &[data-orientation=horizontal] {\n    flex-direction: row;\n  }\n\n  .react-aria-Group {\n    display: contents;\n  }\n\n  .react-aria-ToggleButton {\n    width: 32px;\n  }\n}\n\n.react-aria-Separator {\n  align-self: stretch;\n  background-color: var(--border-color);\n\n  &[aria-orientation=vertical] {\n    width: 1px;\n    margin: 0px 10px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Disabled Input in SearchField (CSS)\nDESCRIPTION: Provides CSS rules for styling the input element within a disabled `SearchField`. It uses the `[data-disabled]` data attribute selector provided by React Aria to apply distinct styles (like border and text color) indicating the disabled state.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/SearchField.mdx#2025-04-23_snippet_13\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-SearchField {\n  .react-aria-Input {\n    &[data-disabled] {\n      border-color: var(--border-color-disabled);\n      color: var(--text-color-disabled);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Invalid TimeField in CSS\nDESCRIPTION: This CSS snippet provides styles for invalid TimeField components. It sets colors for invalid segments and error messages.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/TimeField.mdx#2025-04-23_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-DateSegment {\n  &[data-invalid] {\n    color: var(--invalid-color);\n\n    &:focus {\n      background: var(--highlight-background-invalid);\n      color: var(--highlight-foreground);\n    }\n  }\n}\n\n.react-aria-TimeField {\n  .react-aria-FieldError {\n    font-size: 12px;\n    color: var(--invalid-color);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ColorSwatchPicker with Custom Accessibility Label\nDESCRIPTION: Example showing how to override the default accessibility label for a ColorSwatchPicker. This is important for providing context-specific labels that improve screen reader experiences.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorSwatchPicker.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<MyColorSwatchPicker aria-label=\"Fill color\">\n  <MyColorSwatchPickerItem color=\"#A00\" />\n  <MyColorSwatchPickerItem color=\"#f80\" />\n  <MyColorSwatchPickerItem color=\"#080\" />\n</MyColorSwatchPicker>\n```\n\n----------------------------------------\n\nTITLE: Read-only Switch Component\nDESCRIPTION: Example showing how to create a read-only Switch component using the isReadOnly prop. Unlike disabled switches, read-only switches remain focusable but cannot be changed by the user.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Switch.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<MySwitch isSelected isReadOnly>Bluetooth</MySwitch>\n```\n\n----------------------------------------\n\nTITLE: FieldGroup Styling\nDESCRIPTION: CSS styles for the FieldGroup component including error message styling\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DateRangePicker.mdx#2025-04-23_snippet_32\n\nLANGUAGE: css\nCODE:\n```\nfieldset {\n  padding: 1.5em;\n  width: fit-content;\n}\n\n.invalid {\n  color: var(--invalid-color);\n  margin-top: 1em;\n  display: block;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Album Data Structure in TypeScript\nDESCRIPTION: Defines a sample array of album objects containing image URLs, titles, and artist information for demonstration purposes.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ListBox.mdx#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nlet albums = [\n  {\n    id: 1,\n    image: 'https://images.unsplash.com/photo-1593958812614-2db6a598c71c?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8Nnx8ZGlzY298ZW58MHx8MHx8fDA%3D&auto=format&fit=crop&w=900&q=60',\n    title: 'Euphoric Echoes',\n    artist: 'Luna Solstice'\n  },\n  {\n    id: 2,\n    image: 'https://images.unsplash.com/photo-1601042879364-f3947d3f9c16?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8M3x8bmVvbnxlbnwwfHwwfHx8MA%3D%3D&auto=format&fit=crop&w=900&q=60',\n    title: 'Neon Dreamscape',\n    artist: 'Electra Skyline'\n  },\n  {\n    id: 3,\n    image: 'https://images.unsplash.com/photo-1528722828814-77b9b83aafb2?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8MTF8fHNwYWNlfGVufDB8fDB8fHww&auto=format&fit=crop&w=900&q=60',\n    title: 'Cosmic Serenade',\n    artist: 'Orion\\'s Symphony'\n  },\n  {\n    id: 4,\n    image: 'https://images.unsplash.com/photo-1511379938547-c1f69419868d?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8M3x8bXVzaWN8ZW58MHx8MHx8fDA%3D&auto=format&fit=crop&w=900&q=60',\n    title: 'Melancholy Melodies',\n    artist: 'Violet Mistral'\n  },\n  {\n    id: 5,\n    image: 'https://images.unsplash.com/photo-1608433319511-dfe8ea4cbd3c?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8MTF8fGJlYXR8ZW58MHx8MHx8fDA%3D&auto=format&fit=crop&w=900&q=60',\n    title: 'Rhythmic Illusions',\n    artist: 'Mirage Beats'\n  }\n];\n```\n\n----------------------------------------\n\nTITLE: Styling Popovers with CSS in React Aria Components\nDESCRIPTION: CSS for styling the Popover component, including positioning, animations, arrow placement, and visual styling. Includes transitions and placement-specific styling for different positions.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Popover.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n\n.react-aria-Popover {\n  --background-color: var(--overlay-background);\n\n  border: 1px solid var(--border-color);\n  box-shadow: 0 8px 20px rgba(0 0 0 / 0.1);\n  border-radius: 6px;\n  background: var(--background-color);\n  color: var(--text-color);\n  outline: none;\n  max-width: 250px;\n  transition: transform 200ms, opacity 200ms;\n\n  .react-aria-OverlayArrow svg {\n    display: block;\n    fill: var(--background-color);\n    stroke: var(--border-color);\n    stroke-width: 1px;\n  }\n\n  &[data-entering],\n  &[data-exiting] {\n    transform: var(--origin);\n    opacity: 0;\n  }\n\n  &[data-placement=top] {\n    --origin: translateY(8px);\n\n    &:has(.react-aria-OverlayArrow) {\n      margin-bottom: 6px;\n    }\n  }\n\n  &[data-placement=bottom] {\n    --origin: translateY(-8px);\n\n    &:has(.react-aria-OverlayArrow) {\n      margin-top: 6px;\n    }\n\n    .react-aria-OverlayArrow svg {\n      transform: rotate(180deg);\n    }\n  }\n\n  &[data-placement=right] {\n    --origin: translateX(-8px);\n\n    &:has(.react-aria-OverlayArrow) {\n      margin-left: 6px;\n    }\n\n    .react-aria-OverlayArrow svg {\n      transform: rotate(90deg);\n    }\n  }\n\n  &[data-placement=left] {\n    --origin: translateX(8px);\n\n    &:has(.react-aria-OverlayArrow) {\n      margin-right: 6px;\n    }\n\n    .react-aria-OverlayArrow svg {\n      transform: rotate(-90deg);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating NumberField with HTML Forms using `name` Prop in React (TSX)\nDESCRIPTION: Illustrates how to integrate the `NumberField` component with standard HTML forms by adding the `name` prop (e.g., `name=\"amount\"`). This ensures the raw numeric value is submitted with the form. The example also sets a `defaultValue` and applies basic currency formatting using `formatOptions`.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/NumberField.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n<MyNumberField\n  label=\"Transaction amount\"\n  /*- begin highlight -*/\n  name=\"amount\"\n  /*- end highlight -*/\n  defaultValue={45}\n  formatOptions={{\n    style: 'currency',\n    currency: 'USD'\n  }} />\n```\n```\n\n----------------------------------------\n\nTITLE: Importing Global Tailwind Styles in TSX\nDESCRIPTION: Imports the global Tailwind CSS file (`tailwind.global.css`) required for styling the Command Palette component example. This ensures the Tailwind utility classes and base styles are applied correctly to the components.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/command-palette.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport './tailwind.global.css';\n```\n\n----------------------------------------\n\nTITLE: Adding the Tailwind React Aria Plugin in tailwind.config.js - JavaScript\nDESCRIPTION: Explains how to add the Tailwind CSS React Aria Components plugin to your Tailwind v3 configuration file. This ensures that react-aria-components classes and utilities are available throughout your project. Requires 'tailwindcss-react-aria-components' version 1.x for compatibility with Tailwind v3.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/ripple-button.mdx#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  // ...\n  plugins: [\n    require('tailwindcss-react-aria-components')\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS v3 Plugins in JavaScript\nDESCRIPTION: Shows the configuration method for adding Tailwind CSS plugins in a v3 project. The `tailwindcss-react-aria-components` (version 1.x) and `tailwindcss-animate` plugins are added to the `plugins` array within the `module.exports` object in the `tailwind.config.js` file.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/action-menu.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nmodule.exports = {\n  // ...\n  plugins: [\n    require('tailwindcss-react-aria-components'),\n    require('tailwindcss-animate')\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Styling Disabled ColorArea with CSS\nDESCRIPTION: This CSS snippet shows how to style a disabled ColorArea component. It changes the background color of the area and thumb when the component is disabled.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorArea.mdx#2025-04-23_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ColorArea {\n  &[data-disabled] {\n    background: gray !important;\n\n    .react-aria-ColorThumb {\n      background: gray !important;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disallowing Empty Selection in Tree Component (TSX)\nDESCRIPTION: This snippet illustrates how to use the `disallowEmptySelection` prop in conjunction with `selectionMode=\"single\"` on the `FileTree` component. This prevents the user from deselecting the last selected item.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Tree.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n// Using the example above\n<FileTree selectionMode=\"single\" defaultSelectedKeys={[2]} defaultExpandedKeys={[1]} disallowEmptySelection />\n```\n```\n\n----------------------------------------\n\nTITLE: Tailwind CSS v4 Configuration\nDESCRIPTION: CSS configuration for importing Tailwind and the React Aria Components plugin in Tailwind v4.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/wifi-switch.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n@plugin \"tailwindcss-react-aria-components\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Empty State in ListBox\nDESCRIPTION: Shows how to implement and customize the empty state display in a ListBox when no items are present.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ListBox.mdx#2025-04-23_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\n<ListBox\n  aria-label=\"Search results\"\n  renderEmptyState={() => 'No results found.'}\n>\n  {[]}\n</ListBox>\n```\n\n----------------------------------------\n\nTITLE: Importing Tailwind Global Styles in React (TypeScript/TSX)\nDESCRIPTION: This snippet demonstrates how to import a global Tailwind CSS stylesheet into a React project written in TypeScript (TSX). The import ensures that Tailwind's utility classes are available throughout the application. This is essential for consistent styling, particularly when customizing components using Tailwind’s utility-first classes.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/opacity-slider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport './tailwind.global.css';\n```\n\n----------------------------------------\n\nTITLE: Styling React Aria Components with CSS Classes - CSS\nDESCRIPTION: This snippet provides the basic structure for styling a React Aria component, specifically the DropZone, by targeting its default className in a CSS file. There are no dependencies beyond a standard CSS environment. The .react-aria-DropZone selector can be used to define visual styles for the component, enabling custom themes or overrides as required. This pattern allows for scalable and maintainable styling across multiple components.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DropZone.mdx#2025-04-23_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-DropZone {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Disabled Tags with CSS\nDESCRIPTION: This CSS snippet provides styles for disabled tags, changing their border color and text color.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/TagGroup.mdx#2025-04-23_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-TagList {\n  .react-aria-Tag {\n    &[data-disabled] {\n      border-color: var(--border-color-disabled);\n      color: var(--text-color-disabled);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Drop Target Items in React Aria Components\nDESCRIPTION: This CSS snippet provides styling for individual items when they become drop targets. It uses the [data-drop-target] attribute selector to apply styles to the target item.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/GridList.mdx#2025-04-23_snippet_28\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-GridListItem[data-drop-target] {\n  outline: 2px solid var(--highlight-background);\n  background:var(--highlight-overlay);\n}\n```\n\n----------------------------------------\n\nTITLE: CSS for Disabled ColorSwatchPickerItem State\nDESCRIPTION: CSS styling specific to the disabled state of ColorSwatchPickerItem components. This reduces opacity to visually indicate that the item is not interactive.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorSwatchPicker.mdx#2025-04-23_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ColorSwatchPickerItem {\n  &[data-disabled] {\n    opacity: 0.2;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Menu Sections and Headers with CSS in React Aria Components\nDESCRIPTION: This CSS defines spacing between menu sections and styles the header element for typography and padding. Intended for menus using .react-aria-Menu and related classes. No dynamic dependencies; relies on class naming conventions from React Aria Components.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Menu.mdx#2025-04-23_snippet_11\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Menu {\\n  .react-aria-MenuSection:not(:first-child) {\\n    margin-top: 12px;\\n  }\\n\\n  .react-aria-Header {\\n    font-size: 1.143rem;\\n    font-weight: bold;\\n    padding: 0 0.714rem;\\n  }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for Disabled Link State\nDESCRIPTION: CSS styles specific to the disabled state of a Link component, using the data-disabled attribute selector to apply appropriate visual styling.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Link.mdx#2025-04-23_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Link {\n  &[data-disabled] {\n    cursor: default;\n    color: var(--text-color-disabled);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Disabled Dates in React Aria Components Calendar\nDESCRIPTION: This CSS snippet demonstrates how to style disabled dates in the Calendar component.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Calendar.mdx#2025-04-23_snippet_11\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Calendar {\n  .react-aria-CalendarCell {\n    &[data-disabled] {\n      color: var(--text-color-disabled);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modal Styling with CSS\nDESCRIPTION: Defines styles for modal overlay and animations including fade and zoom effects.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Modal.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n\n.react-aria-ModalOverlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: var(--visual-viewport-height);\n  background: rgba(0 0 0 / .5);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 100;\n\n  &[data-entering] {\n    animation: modal-fade 200ms;\n  }\n\n  &[data-exiting] {\n    animation: modal-fade 150ms reverse ease-in;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing ModalOverlay Height Using CSS Custom Properties - CSS\nDESCRIPTION: This CSS snippet targets the ModalOverlay component to set its position to fixed and adapts its height using the --visual-viewport-height custom property. This ensures proper sizing, especially on mobile devices with virtual keyboards. Applicable when the ModalOverlay class is rendered by the React Aria Modal component.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Modal.mdx#2025-04-23_snippet_10\n\nLANGUAGE: CSS\nCODE:\n```\n.react-aria-ModalOverlay {\n  position: fixed;\n  height: var(--visual-viewport-height);\n}\n```\n\n----------------------------------------\n\nTITLE: Vertical Orientation in ToggleButtonGroup\nDESCRIPTION: Changing the orientation of ToggleButtonGroup to vertical.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ToggleButtonGroup.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<ToggleButtonGroup orientation=\"vertical\">\n  <ToggleButton id=\"grid\">Grid</ToggleButton>\n  <ToggleButton id=\"list\">List</ToggleButton>\n  <ToggleButton id=\"gallery\">Gallery</ToggleButton>\n</ToggleButtonGroup>\n```\n\n----------------------------------------\n\nTITLE: Disabled Slider CSS Styling\nDESCRIPTION: CSS styles for customizing the appearance of a disabled slider.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Slider.mdx#2025-04-23_snippet_15\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Slider {\n  &[data-disabled] {\n    .react-aria-SliderTrack:before {\n      background: var(--border-color-disabled);\n    }\n\n    .react-aria-SliderThumb {\n      background: var(--border-color-disabled);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic CSS Styling for React Aria Components\nDESCRIPTION: Example of styling a React Aria ProgressBar component using the default CSS class naming convention.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ProgressBar.mdx#2025-04-23_snippet_11\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ProgressBar {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Validation States for ComboBox with CSS\nDESCRIPTION: CSS styles for displaying validation states in a ComboBox, including styling for invalid input fields and error messages. This applies custom colors to highlight validation errors.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ComboBox.mdx#2025-04-23_snippet_24\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ComboBox {\n  .react-aria-Input {\n    &[data-invalid]:not([data-focused]) {\n      border-color: var(--invalid-color);\n    }\n  }\n\n  .react-aria-FieldError {\n    font-size: 12px;\n    color: var(--invalid-color);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing ListBox with React Aria Test Utils in TypeScript\nDESCRIPTION: This snippet shows how to use @react-aria/test-utils to test a ListBox component. It demonstrates setting up a test environment, rendering a ListBox, and using the ListBoxTester to interact with and assert on the component's behavior.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ListBox.mdx#2025-04-23_snippet_48\n\nLANGUAGE: ts\nCODE:\n```\n// ListBox.test.ts\nimport {render} from '@testing-library/react';\nimport {User} from '@react-aria/test-utils';\n\nlet testUtilUser = new User({interactionType: 'mouse'});\n// ...\n\nit('ListBox can select an option via keyboard', async function () {\n  // Render your test component/app and initialize the listbox tester\n  let {getByTestId} = render(\n     <ListBox selectionMode=\"single\" data-testid=\"test-listbox\">\n      ...\n    </ListBox>\n  );\n  let listboxTester = testUtilUser.createTester('ListBox', {root: getByTestId('test-listbox'), interactionType: 'keyboard'});\n\n  await listboxTester.toggleOptionSelection({option: 4});\n  expect(listboxTester.options()[4]).toHaveAttribute('aria-selected', 'true');\n});\n```\n\n----------------------------------------\n\nTITLE: Styling Vertical Grid ListBox Layout\nDESCRIPTION: CSS styling specific to vertical grid layout configuration.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ListBox.mdx#2025-04-23_snippet_19\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ListBox[data-layout=grid] {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  scrollbar-gutter: stable;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS v4 Plugin (CSS)\nDESCRIPTION: This CSS snippet shows how to enable the `tailwindcss-react-aria-components` plugin when using Tailwind CSS v4. The plugin is imported directly within the CSS file using the `@plugin` directive, alongside the standard `@import` for Tailwind itself.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/image-grid.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n@plugin \"tailwindcss-react-aria-components\";\n```\n\n----------------------------------------\n\nTITLE: Adding Tailwind Plugins in Configuration File for v3 - JavaScript\nDESCRIPTION: Demonstrates the JavaScript syntax for registering the 'tailwindcss-react-aria-components' and 'tailwindcss-animate' plugins within Tailwind v3's tailwind.config.js file. Each plugin must be required from the node_modules directory and included in the plugins array property. This setup is necessary for styling and animations to work with React Aria Components in Tailwind v3 projects. The note mentions that version 1.x of 'tailwindcss-react-aria-components' should be used in v3 setups.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/searchable-select.mdx#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  // ...\n  plugins: [\n    require('tailwindcss-react-aria-components'),\n    require('tailwindcss-animate')\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS Plugin for React Aria Components (Tailwind v3, JavaScript)\nDESCRIPTION: This JavaScript configuration snippet updates the Tailwind v3 config file to include the tailwindcss-react-aria-components plugin. By adding the plugin to the plugins array and requiring it, the configuration grants access to specialized Tailwind utilities for react-aria-components. For version compatibility, the 1.x version of the plugin must be installed for Tailwind v3.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/opacity-slider.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nmodule.exports = {\\n  // ...\\n  plugins: [\\n    require('tailwindcss-react-aria-components')\\n  ]\\n};\n```\n\n----------------------------------------\n\nTITLE: Including Tailwind CSS and react-aria-components Plugin in Global Stylesheet - CSS\nDESCRIPTION: This configuration import statement includes TailwindCSS and the tailwindcss-react-aria-components plugin into your global CSS. It ensures proper styling and utility classes for both Tailwind and React Aria Components when using Tailwind v4. This code should be placed at the top-level CSS entry file and requires project-level installation of both packages.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/framer-modal-sheet.mdx#2025-04-23_snippet_3\n\nLANGUAGE: CSS\nCODE:\n```\n@import \"tailwindcss\";\n@plugin \"tailwindcss-react-aria-components\";\n```\n\n----------------------------------------\n\nTITLE: Implementing a FieldGroup Component with DatePickerContext in TypeScript React\nDESCRIPTION: Example of creating a FieldGroup component that uses DatePickerContext to provide shared props to child DatePickers.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DatePicker.mdx#2025-04-23_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\nimport {DatePickerContext} from 'react-aria-components';\nimport {useId} from 'react-aria';\n\ninterface FieldGroupProps {\n  title?: string,\n  children?: React.ReactNode,\n  errorMessage?: string\n}\n\nfunction FieldGroup({title, children, errorMessage}: FieldGroupProps) {\n  let errorId = useId();\n  return (\n    <fieldset>\n      <legend>{title}</legend>\n      <DatePickerContext.Provider value={{\n        isInvalid: !!errorMessage,\n        'aria-describedby': errorMessage ? errorId : undefined\n      }}>\n        {children}\n      </DatePickerContext.Provider>\n      {errorMessage && <small id={errorId} className=\"invalid\">{errorMessage}</small>}\n    </fieldset>\n  );\n}\n\n<FieldGroup title=\"Dates\" errorMessage=\"Tickets must go on sale before event.\">\n  <MyDatePicker label=\"Event date\" defaultValue={parseDate('2023-07-12')} />\n  <MyDatePicker label=\"Ticket sale date\" defaultValue={parseDate('2023-08-03')} />\n</FieldGroup>\n```\n\n----------------------------------------\n\nTITLE: Styling a Vertical Toolbar with CSS\nDESCRIPTION: This CSS snippet provides styling for a vertical toolbar, including layout adjustments and separator styles.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Toolbar.mdx#2025-04-23_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Toolbar {\n  width: fit-content;\n\n  &[data-orientation=vertical] {\n    flex-direction: column;\n    align-items: start;\n  }\n}\n\n.react-aria-Separator {\n  &:not([aria-orientation=vertical]) {\n    border: none;\n    height: 1px;\n    width: 100%;\n    margin: 10px 0;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Global Tailwind Styles in React\nDESCRIPTION: This snippet imports the global Tailwind CSS styles necessary for the ProgressBar example. This ensures that the Tailwind utility classes used in the component are available.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/loading-progress.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport './tailwind.global.css';\n```\n\n----------------------------------------\n\nTITLE: Using MeterContext for Shared Formatting\nDESCRIPTION: Demonstrates how to use MeterContext to provide shared formatting options to multiple Meter components.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Meter.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {MeterContext} from 'react-aria-components';\n\n<MeterContext.Provider value={{formatOptions: {style: 'decimal'}}}>\n  <MyMeter label=\"Widgets\" value={28.5} />\n  <MyMeter label=\"Cookies\" value={68.75} />\n</MeterContext.Provider>\n```\n\n----------------------------------------\n\nTITLE: Styling Unavailable Dates in React Aria Components Calendar\nDESCRIPTION: This CSS snippet shows how to style unavailable dates in the Calendar component, applying a line-through effect and a custom color.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Calendar.mdx#2025-04-23_snippet_13\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Calendar {\n  .react-aria-CalendarCell {\n    &[data-unavailable] {\n      text-decoration: line-through;\n      color: var(--invalid-color);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Targeting Modal Styling with CSS Selectors - CSS\nDESCRIPTION: This CSS snippet demonstrates how to style the Modal component provided by React Aria by targeting its default class name selector. It also serves as a template for further class-based styling, relying on the built-in react-aria-ComponentName naming convention. No dependencies beyond a standard CSS environment and that the Modal renders with this className.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Modal.mdx#2025-04-23_snippet_6\n\nLANGUAGE: CSS\nCODE:\n```\n.react-aria-Modal {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Anatomy of the Group Component in React (TSX)\nDESCRIPTION: This snippet illustrates the fundamental structure for using the `Group` component from `react-aria-components`. It shows how to wrap related child elements (represented by `{/* ... */}`) within the `<Group>` tags to create a semantic and styleable container.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Group.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Group} from 'react-aria-components';\n\n<Group>\n  {/* ... */}\n</Group>\n```\n\n----------------------------------------\n\nTITLE: Styling Description in DateRangePicker with CSS\nDESCRIPTION: CSS styles for the description slot in DateRangePicker. Sets the font size for description text to 12px.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DateRangePicker.mdx#2025-04-23_snippet_19\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-DateRangePicker {\n  [slot=description] {\n    font-size: 12px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Disabled ColorField Input in CSS\nDESCRIPTION: This CSS snippet shows how to style a disabled ColorField input.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorField.mdx#2025-04-23_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ColorField {\n  .react-aria-Input {\n    &[data-disabled] {\n      border-color: var(--border-color-disabled);\n      color: var(--text-color-disabled);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disclosure Component Styling\nDESCRIPTION: CSS styling for the disclosure component including transitions and layout.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Disclosure.mdx#2025-04-23_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Disclosure {\n  .react-aria-Button[slot=trigger] {\n    background: none;\n    border: none;\n    box-shadow: none;\n    font-weight: bold;\n    font-size: 16px;\n    display: flex;\n    align-items: center;\n    gap: 8px;\n\n    svg {\n      rotate: 0deg;\n      transition: rotate 200ms;\n      width: 12px;\n      height: 12px;\n      fill: none;\n      stroke: currentColor;\n      stroke-width: 3px;\n    }\n  }\n\n  &[data-expanded] .react-aria-Button[slot=trigger] svg {\n    rotate: 90deg;\n  }\n}\n\n.react-aria-DisclosurePanel {\n  margin-left: 32px;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic ColorSwatch Component Structure\nDESCRIPTION: The basic structure for importing and implementing a ColorSwatch component.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorSwatch.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ColorSwatch} from 'react-aria-components';\n\n<ColorSwatch />\n```\n\n----------------------------------------\n\nTITLE: Tailwind Config JavaScript Setup\nDESCRIPTION: Configuration setup for Tailwind v3 using the react-aria-components plugin.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/shipping-radio.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nmodule.exports = {\n  // ...\n  plugins: [\n    require('tailwindcss-react-aria-components')\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Styling Description Text for ComboBox with CSS\nDESCRIPTION: CSS for styling the description text displayed with a ComboBox. This sets a smaller font size for text in the description slot to visually differentiate it from the main component.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ComboBox.mdx#2025-04-23_snippet_26\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ComboBox {\n  [slot=description] {\n    font-size: 12px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Placeholder Links in CSS\nDESCRIPTION: This CSS snippet styles anchor elements (`<a>`) with an `href` attribute set to \"#\". It specifically disables the touch callout menu on WebKit browsers for these links. This snippet is marked as hidden, likely used for demonstration setup.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/category-tabs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\na[href=\"#\"] {\n  -webkit-touch-callout: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Autocomplete Component Styling\nDESCRIPTION: CSS styles for the Autocomplete component including layout, dimensions, and visual styling for both basic and reusable wrapper versions.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Autocomplete.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.autocomplete {\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  max-width: 300px;\n  height: 180px;\n  border: 1px solid var(--border-color);\n  padding: 16px;\n  border-radius: 10px;\n  background: var(--overlay-background);\n\n  .react-aria-SearchField {\n    width: 100%;\n  }\n\n  .react-aria-Menu {\n    flex: 1;\n    overflow: auto;\n  }\n\n  .react-aria-Label {\n    margin-bottom: .5em;\n  }\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.my-autocomplete {\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  max-width: 300px;\n  height: 180px;\n  border: 1px solid var(--border-color);\n  padding: 16px;\n  border-radius: 10px;\n  background: var(--overlay-background);\n}\n\n.react-aria-SearchField {\n  width: 100%;\n}\n\n.react-aria-Label {\n  margin-bottom: .5em;\n}\n\n.react-aria-Menu {\n  &[data-empty] {\n    align-items: center;\n    justify-content: center;\n    font-style: italic;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling the GridLayout Example Container and ListBox in CSS\nDESCRIPTION: This CSS snippet provides styling for the GridLayout example. It defines styles for a resizable container (`.resizable`) and targets the `ListBox` component (`.react-aria-ListBox`) specifically when `data-layout=grid` is present, adjusting its width and label font size for the grid layout.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Virtualizer.mdx#2025-04-23_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n.resizable {\n  resize: horizontal;\n  width: 400px;\n  min-width: 240px;\n  max-width: 100%;\n  overflow: hidden;\n}\n\n.react-aria-ListBox[data-layout=grid] {\n  max-width: none;\n  width: 100%;\n\n  [slot=label] {\n    font-size: 12px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Tailwind Global CSS in TypeScript\nDESCRIPTION: This snippet imports the project's global Tailwind CSS styles into a TypeScript or React project. It is required for utilizing Tailwind utility classes throughout the application. Ensure that 'tailwind.global.css' exists and is properly set up for Tailwind processing.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/notifications-popover.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport './tailwind.global.css';\n```\n\n----------------------------------------\n\nTITLE: Importing Tailwind CSS Styles\nDESCRIPTION: Import statement for including Tailwind CSS global styles in the component.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/wifi-switch.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport './tailwind.global.css';\n```\n\n----------------------------------------\n\nTITLE: Importing Global Tailwind Styles in TSX\nDESCRIPTION: Imports the global Tailwind CSS file (`tailwind.global.css`) into the component file to apply Tailwind styles. This is a common setup step when using Tailwind CSS in a project.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/category-tabs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport './tailwind.global.css';\n```\n\n----------------------------------------\n\nTITLE: Tailwind v3 Plugin Registration for React Aria Components - JavaScript\nDESCRIPTION: This configuration snippet demonstrates adding the tailwindcss-react-aria-components plugin for React Aria Components in a Tailwind CSS v3 setup. The 'plugins' array of 'tailwind.config.js' is extended with the plugin, which is required explicitly. Users should ensure that the appropriate (v1.x) version of the plugin is installed. Place this inside your Tailwind configuration file to activate integration with React Aria components for extended style support.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/file-system.mdx#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  // ...\n  plugins: [\n    require('tailwindcss-react-aria-components')\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Controlled Tooltip State Example\nDESCRIPTION: Shows how to implement a controlled tooltip with state management.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Tooltip.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [isOpen, setOpen] = React.useState(false);\n\n  return (\n    <>\n      <TooltipTrigger isOpen={isOpen} onOpenChange={setOpen}>\n        <Button>📣</Button>\n        <MyTooltip>Notifications</MyTooltip>\n      </TooltipTrigger>\n      <p>Tooltip is {isOpen ? 'showing' : 'not showing'}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Styling with Tailwind\nDESCRIPTION: Example of using function-based className prop with Tailwind CSS utilities.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DateRangePicker.mdx#2025-04-23_snippet_27\n\nLANGUAGE: jsx\nCODE:\n```\n<DateSegment className={({isPlaceholder}) => isPlaceholder ? 'bg-gray-300' : 'bg-gray-600'} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Popover Offset in React Aria Components\nDESCRIPTION: Example showing how to use the offset prop to adjust the spacing along the main axis between the Popover and its anchor element.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Popover.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<DialogTrigger>\n  <Button>Offset</Button>\n  <MyPopover placement=\"top\" offset={50}>\n    Offset by an additional 50px.\n  </MyPopover>\n</DialogTrigger>\n```\n\n----------------------------------------\n\nTITLE: Preparing Sample Album Data for GridLayout in TSX\nDESCRIPTION: This TSX snippet defines an array of album objects (`albumOptions`) and then generates a larger array (`albums`) containing 1000 items by repeating the options. This data is used as input for the ListBox component in the GridLayout example, demonstrating data preparation for a virtualized list.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Virtualizer.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nlet albumOptions = [\n  {\n    image: 'https://images.unsplash.com/photo-1593958812614-2db6a598c71c?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8Nnx8ZGlzY298ZW58MHx8MHx8fDA%3D&auto=format&fit=crop&w=900&q=60',\n    title: 'Euphoric Echoes',\n    artist: 'Luna Solstice'\n  },\n  {\n    image: 'https://images.unsplash.com/photo-1601042879364-f3947d3f9c16?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8M3x8bmVvbnxlbnwwfHwwfHx8MA%3D%3D&auto=format&fit=crop&w=900&q=60',\n    title: 'Neon Dreamscape',\n    artist: 'Electra Skyline'\n  },\n  {\n    image: 'https://images.unsplash.com/photo-1528722828814-77b9b83aafb2?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8MTF8fHNwYWNlfGVufDB8fDB8fHww&auto=format&fit=crop&w=900&q=60',\n    title: 'Cosmic Serenade',\n    artist: 'Orion\\'s Symphony'\n  },\n  {\n    image: 'https://images.unsplash.com/photo-1511379938547-c1f69419868d?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8M3x8bXVzaWN8ZW58MHx8MHx8fDA%3D&auto=format&fit=crop&w=900&q=60',\n    title: 'Melancholy Melodies',\n    artist: 'Violet Mistral'\n  },\n  {\n    image: 'https://images.unsplash.com/photo-1608433319511-dfe8ea4cbd3c?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8MTF8fGJlYXR8ZW58MHx8MHx8fDA%3D&auto=format&fit=crop&w=900&q=60',\n    title: 'Rhythmic Illusions',\n    artist: 'Mirage Beats'\n  }\n];\n\nlet albums = [];\nfor (let i = 0; i < 1000; i++) {\n  albums.push({\n    id: i,\n    ...albumOptions[i % albumOptions.length]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Empty State in React Aria Components Table\nDESCRIPTION: This example shows how to customize the empty state display in a Table when there are no items to show, using the renderEmptyState prop on TableBody.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Table.mdx#2025-04-23_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\n<Table aria-label=\"Search results\">\n  <TableHeader>\n    <Column isRowHeader>Name</Column>\n    <Column>Type</Column>\n    <Column>Date Modified</Column>\n  </TableHeader>\n  {/*- begin highlight -*/}\n  <TableBody renderEmptyState={() => 'No results found.'}>\n  {/*- end highlight -*/}\n    {[]}\n  </TableBody>\n</Table>\n```\n\n----------------------------------------\n\nTITLE: Basic CSS Selector for Styling SearchField\nDESCRIPTION: Shows the default CSS class selector `.react-aria-SearchField` provided by React Aria Components. This class can be targeted in stylesheets to apply custom styles to the main `SearchField` container element.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/SearchField.mdx#2025-04-23_snippet_15\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-SearchField {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Styling ListBox Sections in React Aria\nDESCRIPTION: This CSS snippet provides styling for ListBox sections, including margins and font styles for section headers.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ListBox.mdx#2025-04-23_snippet_11\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ListBox {\n  .react-aria-ListBoxSection:not(:first-child) {\n    margin-top: 12px;\n  }\n\n  .react-aria-Header {\n    font-size: 1.143rem;\n    font-weight: bold;\n    padding: 0 0.714rem;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Class Name Assignment in React\nDESCRIPTION: Shows how to override default class names with custom ones in React Aria components\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ComboBox.mdx#2025-04-23_snippet_28\n\nLANGUAGE: jsx\nCODE:\n```\n<ComboBox className=\"my-combobox\">\n  {/* ... */}\n</ComboBox>\n```\n\n----------------------------------------\n\nTITLE: Styling Custom Separator Icons for Breadcrumbs\nDESCRIPTION: CSS styling for custom SVG icon separators in breadcrumbs navigation to ensure proper alignment and spacing.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Breadcrumbs.mdx#2025-04-23_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.my-item svg {\n  vertical-align: middle;\n  padding: 0 5px;\n  margin-top: -2px;\n}\n```\n\n----------------------------------------\n\nTITLE: Custom ClassNames in DateInput Component\nDESCRIPTION: Demonstrates how to apply custom class names to a DateInput component.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DateRangePicker.mdx#2025-04-23_snippet_25\n\nLANGUAGE: jsx\nCODE:\n```\n<DateInput className=\"my-date-input\">\n  {/* ... */}\n</DateInput>\n```\n\n----------------------------------------\n\nTITLE: DatePicker Description Slot Styling\nDESCRIPTION: CSS styling for the description slot within the DatePicker component.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DatePicker.mdx#2025-04-23_snippet_18\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-DatePicker {\n  [slot=description] {\n    font-size: 12px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for Disabled ToggleButton State\nDESCRIPTION: CSS styling specifically for the disabled state of the ToggleButton component.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ToggleButton.mdx#2025-04-23_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ToggleButton {\n  &[data-disabled] {\n    border-color: var(--border-color-disabled);\n    background: var(--button-background);\n    color: var(--text-color-disabled);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling a SearchField in React Aria (TSX)\nDESCRIPTION: Example demonstrating how to disable a `SearchField` component (represented here as a custom `MySearchField`) by passing the boolean `isDisabled` prop. A disabled field prevents user interaction.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/SearchField.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n<MySearchField label=\"Email\" isDisabled />\n```\n\n----------------------------------------\n\nTITLE: Applying Custom CSS Class to React Aria Breadcrumbs Component\nDESCRIPTION: Shows how to assign a custom CSS class name (`my-breadcrumbs`) to the `Breadcrumbs` component using the `className` prop. This overrides the default `react-aria-Breadcrumbs` class, allowing for custom styling hooks.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Breadcrumbs.mdx#2025-04-23_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<Breadcrumbs className=\"my-breadcrumbs\">\n  {/* ... */}\n</Breadcrumbs>\n```\n\n----------------------------------------\n\nTITLE: Disabled ColorWheel Styling\nDESCRIPTION: CSS styling for disabled state of ColorWheel component\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorWheel.mdx#2025-04-23_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ColorWheel {\n  &[data-disabled] {\n    .react-aria-ColorWheelTrack {\n      background: gray !important;\n    }\n\n    .react-aria-ColorThumb {\n      background: gray !important;\n      opacity: 0.5;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Link Menu Items Using CSS in React Aria Components\nDESCRIPTION: This hidden CSS snippet targets menu items with href attributes to remove underlines and show a pointer cursor. Intended for use with .react-aria-MenuItem in conjunction with the React Aria Components Menu.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Menu.mdx#2025-04-23_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-MenuItem[href] {\\n  text-decoration: none;\\n  cursor: pointer;\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Styling Toast Components with CSS\nDESCRIPTION: CSS styling for Toast and ToastRegion components including positioning, layout, and visual design.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Toast.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ToastRegion {\n  position: fixed;\n  bottom: 16px;\n  right: 16px;\n  display: flex;\n  flex-direction: column-reverse;\n  gap: 8px;\n  border-radius: 8px;\n  outline: none;\n\n  &[data-focus-visible] {\n    outline: 2px solid slateblue;\n    outline-offset: 2px;\n  }\n}\n\n.react-aria-Toast {\n  display: flex;\n  align-items: center;\n  gap: 16px;\n  background: slateblue;\n  color: white;\n  padding: 12px 16px;\n  border-radius: 8px;\n  outline: none;\n\n  &[data-focus-visible] {\n    outline: 2px solid slateblue;\n    outline-offset: 2px;\n  }\n\n  .react-aria-ToastContent {\n    display: flex;\n    flex-direction: column;\n    flex: 1 1 auto;\n    min-width: 0px;\n\n    [slot=title] {\n      font-weight: bold;\n    }\n  }\n\n  .react-aria-Button[slot=close] {\n    flex: 0 0 auto;\n    background: none;\n    border: none;\n    appearance: none;\n    border-radius: 50%;\n    height: 32px;\n    width: 32px;\n    font-size: 16px;\n    border: 1px solid white;\n    color: white;\n    padding: 0;\n    outline: none;\n\n    &[data-focus-visible] {\n      box-shadow: 0 0 0 2px slateblue, 0 0 0 4px white;\n    }\n\n    &[data-pressed] {\n      background: rgba(255, 255, 255, 0.2);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Render Props Pattern for DateSegment\nDESCRIPTION: Demonstrates using render props to conditionally render content based on component state.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DateRangePicker.mdx#2025-04-23_snippet_28\n\nLANGUAGE: jsx\nCODE:\n```\n<DateSegment>\n  {({text, placeholder, isPlaceholder}) => (\n    <>\n      <span style={{visibility: isPlaceholder ? 'visible' : 'hidden'}}>{placeholder}</span>\n      {isPlaceholder ? '' : text}\n    </>\n  )}\n</DateSegment>\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS v4 Plugins\nDESCRIPTION: Demonstrates how to register the `tailwindcss-react-aria-components` and `tailwindcss-animate` plugins in a Tailwind CSS v4 project. This is done using the `@plugin` at-rule directly within the main CSS file, alongside the standard `@import \"tailwindcss\"` directive.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/action-menu.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n@plugin \"tailwindcss-react-aria-components\";\n@plugin \"tailwindcss-animate\";\n```\n\n----------------------------------------\n\nTITLE: Importing Button Styles for Group Example (CSS)\nDESCRIPTION: This CSS snippet uses `@import` to include styles defined in `Button.mdx`, applying them to the `button` layer. This ensures that the `Button` component within the `Group` example is styled correctly, likely using styles defined alongside the button's own documentation. The `hidden` attribute suggests this might be for build/display purposes in the documentation system.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Group.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import './Button.mdx' layer(button);\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS v3 Plugin (TypeScript/JavaScript)\nDESCRIPTION: This configuration snippet demonstrates how to add the `tailwindcss-react-aria-components` plugin to a Tailwind CSS v3 project. The plugin is included in the `plugins` array within the `tailwind.config.js` (or `.ts`) file. It's noted that version 1.x of the plugin should be used with Tailwind v3.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/image-grid.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nmodule.exports = {\n  // ...\n  plugins: [\n    require('tailwindcss-react-aria-components')\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Router Integration with Tabs\nDESCRIPTION: Demonstrates how to integrate tabs with React Router for client-side routing functionality.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Tabs.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useLocation, useNavigate, BrowserRouter, Routes, Route} from 'react-router-dom';\nimport {RouterProvider} from 'react-aria-components';\n\nfunction AppTabs() {\n  let {pathname} = useLocation();\n\n  return (\n    <Tabs selectedKey={pathname}>\n      <TabList aria-label=\"Tabs\">\n        <Tab id=\"/\" href=\"/\">Home</Tab>\n        <Tab id=\"/shared\" href=\"/shared\">Shared</Tab>\n        <Tab id=\"/deleted\" href=\"/deleted\">Deleted</Tab>\n      </TabList>\n      <TabPanel id={pathname}>\n        <Routes>\n          <Route path=\"/\" element={<HomePage />} />\n          <Route path=\"/shared\" element={<SharedPage />} />\n          <Route path=\"/deleted\" element={<DeletedPage />} />\n        </Routes>\n      </TabPanel>\n    </Tabs>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Class Names in React Aria Components\nDESCRIPTION: This example shows how to override the default className provided by React Aria with a custom className for a CalendarGrid component.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/RangeCalendar.mdx#2025-04-23_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\n<CalendarGrid className=\"my-calendar-grid\">\n  {/* ... */}\n</CalendarGrid>\n```\n\n----------------------------------------\n\nTITLE: Disabled Slider Implementation\nDESCRIPTION: Example of a disabled slider with a default value.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Slider.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n<MySlider\n  label=\"Cookies to share\"\n  defaultValue={25}\n  isDisabled />\n```\n\n----------------------------------------\n\nTITLE: Email Data Structure Definition in TypeScript\nDESCRIPTION: Defines the mock email data structure containing email messages with properties like id, subject, sender, date and message content.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/ios-list.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport './tailwind.global.css';\n\nlet messages = {\n  \"emails\": [\n    {\n      \"id\": 1,\n      \"subject\": \"Meeting Reminder: Project Kickoff\",\n      \"sender\": \"Emma Johnson\",\n      \"date\": \"9:40 AM\",\n      \"message\": \"Dear Devon,\\n\\nThis is a friendly reminder of the upcoming project kickoff meeting scheduled for tomorrow at 9am. The meeting will be held in [location]. It's essential that all team members attend to ensure a successful start to the project.\\n\\nPlease come prepared with any necessary materials or information relevant to the project. If you have any questions or need further clarification, don't hesitate to reach out to me.\\n\\nLooking forward to seeing you at the meeting.\\n\\nBest regards,\\nEmma\"\n    },\n    // ... additional email objects ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Reusable ListBox Wrapper Component\nDESCRIPTION: Creates a reusable wrapper component for ListBox and ListBoxItem with custom styling and props.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ListBox.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {ListBoxProps, ListBoxItemProps} from 'react-aria-components';\n\nfunction MyListBox<T extends object>({children, ...props}: ListBoxProps<T>) {\n  return (\n    <ListBox {...props} className=\"my-listbox\">\n      {children}\n    </ListBox>\n  );\n}\n\nfunction MyItem(props: ListBoxItemProps) {\n  return <ListBoxItem {...props} className={({isFocusVisible, isSelected}) => `my-item ${isFocusVisible ? 'focused' : ''} ${isSelected ? 'selected' : ''}`} />\n}\n\n<MyListBox aria-label=\"Ice cream flavor\" selectionMode=\"single\">\n  <MyItem>Chocolate</MyItem>\n  <MyItem>Mint</MyItem>\n  <MyItem>Strawberry</MyItem>\n  <MyItem>Vanilla</MyItem>\n</MyListBox>\n```\n\n----------------------------------------\n\nTITLE: Styling Description Text in SearchField (CSS)\nDESCRIPTION: Shows CSS for styling the description text associated with a `SearchField`. It targets elements using the `[slot=description]` attribute selector, positioning them within a grid layout using `grid-area` and setting the font size.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/SearchField.mdx#2025-04-23_snippet_11\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-SearchField {\n  [slot=description] {\n    grid-area: help;\n    font-size: 12px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Popover Width Styling\nDESCRIPTION: CSS example for styling ComboBox popover width using CSS custom properties\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ComboBox.mdx#2025-04-23_snippet_32\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Popover[data-trigger=ComboBox] {\n  width: var(--trigger-width);\n}\n```\n\n----------------------------------------\n\nTITLE: Using CSS Variables with React Aria Components\nDESCRIPTION: Demonstrates using CSS variables provided by React Aria components, such as making a popover width match its trigger button width.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/styling.mdx#2025-04-23_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Popover {\n  width: var(--trigger-width);\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Drop Target in React Aria ListBox\nDESCRIPTION: This CSS snippet provides styles for the ListBox when it becomes a drop target during a drag operation.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ListBox.mdx#2025-04-23_snippet_30\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ListBox[data-drop-target] {\n  outline: 2px solid var(--highlight-background);\n  outline-offset: -1px;\n  background: var(--highlight-overlay)\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Empty State in React Aria Components Table\nDESCRIPTION: CSS styling for the empty state in a React Aria Components table. The style centers the text and applies italic font style when the table has no data.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Table.mdx#2025-04-23_snippet_18\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-TableBody {\n  &[data-empty] {\n    text-align: center;\n    font-style: italic;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Drop Target in React Aria Components\nDESCRIPTION: This CSS snippet provides styling for the drop target when a valid drag is hovering over the GridList. It uses the [data-drop-target] attribute selector for styling.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/GridList.mdx#2025-04-23_snippet_26\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-GridList[data-drop-target] {\n  outline: 2px solid var(--highlight-background);\n  outline-offset: -1px;\n  background: var(--highlight-overlay);\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Flipping Behavior and shouldFlip Prop in Popover (React Aria, TypeScript/JSX)\nDESCRIPTION: This code defines two popover dialogs: one using React Aria's default flipping placement when space is insufficient, and another with flipping disabled via shouldFlip={false}. Each popover is triggered by a button inside a flexbox row, illustrating how popovers behave when rendered near the viewport edge. Dependencies include Button, DialogTrigger, and MyPopover components, with placement and flipping behavior managed via props. Inputs are props for placement and shouldFlip; outputs are the rendered popover dialogs. Flipping is disabled in the second example, which may result in partial rendering if space is insufficient.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Popover.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<div className=\"flex-row\">\n  <DialogTrigger>\n    <Button>Default</Button>\n    <MyPopover placement=\"bottom\">\n      This is a popover that will flip if it can't fully render below the button.\n    </MyPopover>\n  </DialogTrigger>\n\n  <DialogTrigger>\n    <Button>shouldFlip=false</Button>\n    <MyPopover placement=\"bottom\" shouldFlip={false}>\n      This is a popover that won't flip if it can't fully render below the button.\n    </MyPopover>\n  </DialogTrigger>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Styling DateRangePicker Component\nDESCRIPTION: CSS styles for customizing the appearance of the DateRangePicker component including layout, colors, and interactions.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DateRangePicker.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n\n.react-aria-DateRangePicker {\n  color: var(--text-color);\n\n  .react-aria-Group {\n    display: flex;\n    align-items: center;\n    width: fit-content;\n    min-width: 220px;\n    max-width: 100%;\n    box-sizing: border-box;\n    overflow: auto;\n    position: relative;\n    padding: 4px 4px 4px 8px;\n    border: 1px solid var(--border-color);\n    border-radius: 6px;\n    background: var(--field-background);\n    white-space: nowrap;\n\n    &[data-pressed] {\n      box-shadow: none;\n      background: var(--highlight-background);\n    }\n\n    &[data-focus-within] {\n      outline: 2px solid var(--focus-ring-color);\n      outline-offset: -1px;\n    }\n  }\n\n  [slot=start] + span {\n    padding: 0 4px;\n  }\n\n  [slot=end] {\n    margin-right: 2rem;\n    flex: 1;\n  }\n\n  .react-aria-Button {\n    background: var(--highlight-background);\n    color: var(--highlight-foreground);\n    border: 2px solid var(--field-background);\n    forced-color-adjust: none;\n    border-radius: 4px;\n    border: none;\n    margin-left: auto;\n    width: 1.429rem;\n    height: 1.429rem;\n    padding: 0;\n    font-size: 0.857rem;\n    box-sizing: content-box;\n    flex-shrink: 0;\n    position: sticky;\n    right: 0;\n\n    &[data-focus-visible] {\n      outline: 2px solid var(--focus-ring-color);\n      outline-offset: 2px;\n    }\n  }\n\n  .react-aria-DateInput {\n    width: unset;\n    min-width: unset;\n    padding: unset;\n    border: unset;\n    outline: unset;\n  }\n}\n\n.react-aria-Popover[data-trigger=DateRangePicker] {\n  max-width: unset;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Disabled TextField with CSS in React Aria Components\nDESCRIPTION: This CSS snippet shows how to style a disabled TextField by targeting specific data attributes.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/TextField.mdx#2025-04-23_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-TextField {\n  .react-aria-Input,\n  .react-aria-TextArea {\n    &[data-disabled] {\n      border-color: var(--border-color-disabled);\n      color: var(--text-color-disabled);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Clear Button Styling\nDESCRIPTION: CSS styles for the DateRangePickerClearButton component\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DateRangePicker.mdx#2025-04-23_snippet_35\n\nLANGUAGE: css\nCODE:\n```\n.clear-button {\n  width: 1.143rem;\n  height: 1.143rem;\n  border-radius: 1.143rem;\n  font-size: 0.857rem;\n  line-height: 0.857rem;\n  vertical-align: middle;\n  text-align: center;\n  background: gray;\n  color: white;\n  border: none;\n  padding: 0;\n  outline: none;\n\n  &[data-pressed] {\n    background: dimgray;\n  }\n\n  &[data-focus-visible] {\n    outline: 2px solid var(--focus-ring-color);\n    outline-offset: 2px;\n  }\n\n  + .react-aria-Button {\n    margin-left: 4px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adobe Copyright and License Comment Block in JSX\nDESCRIPTION: Copyright and Apache 2.0 license declaration for Adobe software.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/react-aria-components.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n{/* Copyright 2023 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License. */}\n```\n\n----------------------------------------\n\nTITLE: Styling Disabled Breadcrumbs Links\nDESCRIPTION: CSS for styling disabled breadcrumb links with appropriate visual indicators and cursor behavior.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Breadcrumbs.mdx#2025-04-23_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Breadcrumbs {\n  .react-aria-Link {\n    &[data-disabled] {\n      cursor: default;\n\n      &:not([data-current]) {\n        color: var(--text-color-disabled);\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tailwind Configuration\nDESCRIPTION: Shows the Tailwind CSS configuration for v4 using CSS imports for required plugins.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/status-select.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n@plugin \"tailwindcss-react-aria-components\";\n@plugin \"tailwindcss-animate\";\n```\n\n----------------------------------------\n\nTITLE: Importing Global Tailwind CSS Styles (TypeScript)\nDESCRIPTION: This snippet imports the global Tailwind CSS file (`tailwind.global.css`) which is necessary for applying Tailwind utility classes throughout the application or specific component scope.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/image-grid.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport './tailwind.global.css';\n```\n\n----------------------------------------\n\nTITLE: Styling MenuItem Links in CSS\nDESCRIPTION: This CSS snippet provides styling for MenuItem components that have an href attribute, setting them to have no text decoration and a pointer cursor.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Autocomplete.mdx#2025-04-23_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-MenuItem[href] {\n  text-decoration: none;\n  cursor: pointer;\n}\n```\n\n----------------------------------------\n\nTITLE: Button State-Based Styling with Tailwind\nDESCRIPTION: Example of using function-based className prop with Tailwind CSS for dynamic styling based on button state.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/NumberField.mdx#2025-04-23_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\n<Button className={({isPressed}) => isPressed ? 'bg-gray-700' : 'bg-gray-600'} />\n```\n\n----------------------------------------\n\nTITLE: Styling Unordered Lists in CSS\nDESCRIPTION: This CSS snippet removes padding from unordered lists that don't have a class attribute. It's used to style the list in the Router example.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Link.mdx#2025-04-23_snippet_9\n\nLANGUAGE: css\nCODE:\n```\nul:not([class]) {\n  padding: 0px;\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for CalendarPicker Buttons\nDESCRIPTION: This CSS snippet provides styling for the buttons within a CalendarPicker component, demonstrating how to target child components with CSS.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/RangeCalendar.mdx#2025-04-23_snippet_26\n\nLANGUAGE: css\nCODE:\n```\n.calendar-picker {\n  > .react-aria-Button {\n    margin: 0 4px 8px 4px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying a Custom Class Name to ColorSlider in JSX\nDESCRIPTION: This JSX snippet demonstrates overriding the default `react-aria-ColorSlider` class by providing a custom string to the `className` prop on the `ColorSlider` component.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorSlider.mdx#2025-04-23_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\n<ColorSlider className=\"my-color-slider\">\n  {/* ... */}\n</ColorSlider>\n```\n\n----------------------------------------\n\nTITLE: Basic CSS Targeting for ColorSlider\nDESCRIPTION: This CSS snippet shows the default CSS selector `.react-aria-ColorSlider` used to target the main `ColorSlider` component for basic styling.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorSlider.mdx#2025-04-23_snippet_15\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ColorSlider {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Legacy URL Redirect Implementation\nDESCRIPTION: Meta refresh redirect component that automatically redirects users to index.html for backward compatibility with old URLs.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/react-aria-components.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n{/* Backward compatibility with old urls */}\n<meta http-equiv=\"refresh\" content=\"0; url=index.html\" />\n```\n\n----------------------------------------\n\nTITLE: Styling Drop Indicators in React Aria Components\nDESCRIPTION: CSS for styling drop indicators in a GridList. Defines styling for the default DropIndicator component, including a highlighted state when it's an active drop target.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/GridList.mdx#2025-04-23_snippet_30\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-DropIndicator {\n  &[data-drop-target] {\n    outline: 1px solid var(--highlight-background);\n  }\n\n  @supports not selector(:has(.foo)) {\n    /* Undo gap in browsers that don't support :has */\n    margin-bottom: -2px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Tailwind CSS Plugin for React Aria Components in Tailwind v4\nDESCRIPTION: Demonstrates how to import the Tailwind CSS plugin for React Aria Components in Tailwind v4 to enhance styling capabilities.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/styling.mdx#2025-04-23_snippet_12\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n@plugin \"tailwindcss-react-aria-components\";\n```\n\n----------------------------------------\n\nTITLE: Styling Validation States in React Aria DateField Segments and Errors with CSS\nDESCRIPTION: Defines custom CSS for error coloring, focus highlighting, and font size adjustments for invalid date segments and error messages. Targets react-aria-DateSegment with [data-invalid] for invalid states, and style adjustments on focus. Also styles FieldError inside DateField to use a small, colored font for error messages. Requires the DateField and FieldError components to have appropriate class names as output by React Aria.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DateField.mdx#2025-04-23_snippet_13\n\nLANGUAGE: CSS\nCODE:\n```\n.react-aria-DateSegment {\n  &[data-invalid] {\n    color: var(--invalid-color);\n\n    &:focus {\n      background: var(--highlight-background-invalid);\n      color: var(--highlight-foreground);\n    }\n  }\n}\n\n.react-aria-DateField {\n  .react-aria-FieldError {\n    font-size: 12px;\n    color: var(--invalid-color);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: FileTrigger CSS Imports\nDESCRIPTION: Required CSS imports for styling the FileTrigger component\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/FileTrigger.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n@import './Button.mdx' layer(button);\n```\n\n----------------------------------------\n\nTITLE: CSS for Disabled Button State\nDESCRIPTION: CSS styles for the disabled state of a Button component.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Button.mdx#2025-04-23_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Button {\n  &[data-disabled]{\n    border-color: var(--border-color-disabled);\n    color: var(--text-color-disabled);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling SliderNumberField Input in CSS\nDESCRIPTION: This CSS snippet provides styling for the Input component used in the SliderNumberField. It sets a border radius and width for the input field.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Slider.mdx#2025-04-23_snippet_18\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Input {\n  border-radius: 6px;\n  width: 3ch;\n}\n```\n\n----------------------------------------\n\nTITLE: Tailwind v3 Plugin Configuration\nDESCRIPTION: JavaScript configuration for adding the React Aria Components plugin to Tailwind v3 setup.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/wifi-switch.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  // ...\n  plugins: [\n    require('tailwindcss-react-aria-components')\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Link Button in React Aria Components\nDESCRIPTION: This example shows how to create a link that visually looks like a button using the Link component from React Aria Components, reusing the same styles as the Button component.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Button.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Link} from 'react-aria-components';\n\n<Link className=\"react-aria-Button\" href=\"https://adobe.com/\" target=\"_blank\">\n  Adobe\n</Link>\n```\n\n----------------------------------------\n\nTITLE: Styling Link Items in React Aria ListBox\nDESCRIPTION: This CSS snippet provides styling for link items within a ListBox, removing text decoration and adjusting the cursor style.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ListBox.mdx#2025-04-23_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ListBoxItem[href] {\n  text-decoration: none;\n  cursor: pointer;\n  -webkit-touch-callout: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling ColorArea Components with CSS\nDESCRIPTION: This CSS snippet demonstrates how to style ColorArea and ColorThumb components using CSS selectors. It shows how to target specific states like dragging and focus.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorArea.mdx#2025-04-23_snippet_11\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ColorArea {\n  /* ... */\n}\n\n.react-aria-ColorThumb[data-dragging] {\n  /* ... */\n}\n\n.react-aria-ColorThumb[data-focused] {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Fieldset Container for Grouped Fields (CSS)\nDESCRIPTION: Provides simple CSS to style the `fieldset` element, often used to group related form controls. This example adds padding and adjusts the width to fit its content, relevant to the `FieldGroup` context example.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/SearchField.mdx#2025-04-23_snippet_22\n\nLANGUAGE: css\nCODE:\n```\nfieldset {\n  padding: 1.5em;\n  width: fit-content;\n}\n```\n\n----------------------------------------\n\nTITLE: Tree Component Base Styling\nDESCRIPTION: CSS styling for Tree components with link functionality.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Tree.mdx#2025-04-23_snippet_15\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-TreeItem[data-href] {\n  cursor: pointer;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Text Slots in React Aria ListBox Items\nDESCRIPTION: This CSS snippet provides styling for the 'label' and 'description' slots in ListBox items, adjusting font weight and size for better visual hierarchy.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ListBox.mdx#2025-04-23_snippet_14\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ListBoxItem {\n  [slot=label] {\n    font-weight: bold;\n  }\n\n  [slot=description] {\n    font-size: small;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Page Metadata using Markdown Frontmatter\nDESCRIPTION: Uses YAML frontmatter to define metadata for the documentation page, including category ('Introduction'), order (6), and a description. This metadata is typically consumed by a static site generator or documentation tool. Requires a system that processes Markdown frontmatter.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\ncategory: Introduction\norder: 6\ndescription: Techniques for styling and animating React Aria Components, and integrating with other libraries.\n---\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Example Page\nDESCRIPTION: Imports necessary components and utilities for rendering the example page. This includes the main layout component (`ExampleLayout`), documentation tools (`docs`, `TypeLink`), styles (`docs.css`), component illustrations (`Button`, `ListView`), example card component (`ExampleCard`), and an icon (`ChevronRight`).\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/ios-list.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {ExampleLayout} from '@react-spectrum/docs';\nexport default ExampleLayout;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport docs from 'docs:react-aria-components';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport {TypeLink} from '@react-spectrum/docs';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport styles from '@react-spectrum/docs/src/docs.css';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport Button from '@react-spectrum/docs/pages/assets/component-illustrations/ActionButton.svg';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport ListView from '@react-spectrum/docs/pages/assets/component-illustrations/ListView.svg';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport {ExampleCard} from '@react-spectrum/docs/src/ExampleCard';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport ChevronRight from '@spectrum-icons/workflow/ChevronRight';\n```\n\n----------------------------------------\n\nTITLE: Table Component Metadata Configuration\nDESCRIPTION: YAML frontmatter configuration defining metadata for the table component documentation including keywords, type, image, and description.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/stock-table.mdx#2025-04-23_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\n---\nkeywords: [example, table, aria, accessibility, react, component]\ntype: component\nimage: stock-table.png\ndescription: A table with sticky headers, sorting, multiple selection, and column resizing.\n---\n```\n\n----------------------------------------\n\nTITLE: ColorWheel Thumb Styling\nDESCRIPTION: CSS styling for the ColorWheel thumb component including focus states\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorWheel.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ColorThumb {\n  border: 2px solid white;\n  box-shadow: 0 0 0 1px black, inset 0 0 0 1px black;\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  box-sizing: border-box;\n\n  &[data-focus-visible] {\n    width: 24px;\n    height: 24px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling FieldGroup Component in React Aria Components\nDESCRIPTION: This CSS snippet provides styling for the FieldGroup component, including styles for the fieldset and error message.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/TextField.mdx#2025-04-23_snippet_10\n\nLANGUAGE: css\nCODE:\n```\nfieldset {\n  padding: 1.5em;\n  width: fit-content;\n}\n\n.invalid {\n  color: var(--invalid-color);\n  margin-top: 1em;\n  display: block;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Global Tailwind Styles in TSX\nDESCRIPTION: Imports the global Tailwind CSS styles defined in `tailwind.global.css` into the React component file. This ensures that Tailwind utility classes are available for styling the components.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/account-menu.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport './tailwind.global.css';\n```\n\n----------------------------------------\n\nTITLE: Toggle Button CSS Styling\nDESCRIPTION: CSS styling for the ToggleButton component with bottom margin\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Tree.mdx#2025-04-23_snippet_22\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ToggleButton {\n  margin-bottom: 8px;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Virtualized Components in React Aria Components\nDESCRIPTION: This CSS snippet provides styling for virtualized ListBox, GridList, and Table components. It sets display properties, padding, height, and width for these components.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Virtualizer.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n@import './Checkbox.mdx' layer(checkbox);\n@import './ListBox.mdx' layer(listbox);\n@import './GridList.mdx' layer(gridlist);\n@import './Table.mdx' layer(table);\n\n.react-aria-ListBox,\n.react-aria-GridList {\n  display: block;\n  padding: 0;\n  height: 300px;\n  width: 250px;\n}\n\n.react-aria-Table {\n  padding: 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling ColorSwatch with CSS\nDESCRIPTION: CSS styles for the ColorSwatch component, defining width, height, border-radius, and shadow effects.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorSwatch.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import \"./ColorSlider.mdx\";\n\n.react-aria-ColorSwatch {\n  width: 32px;\n  height: 32px;\n  border-radius: 4px;\n  box-shadow: inset 0 0 0 1px rgba(0, 0, 0, 0.1);\n}\n```\n\n----------------------------------------\n\nTITLE: Hide Scrollbar CSS\nDESCRIPTION: CSS styles to hide scrollbars across different browsers\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/swipeable-tabs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.no-scrollbar::-webkit-scrollbar {\n  display: none;\n}\n\n.no-scrollbar {\n  scrollbar-width: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Styling of ColorSwatchPicker with CSS Selector\nDESCRIPTION: Shows a CSS selector targeting the ColorSwatchPicker for custom styling. This pattern is used to apply global or default styles to the ColorSwatchPicker when using React Aria. The class follows the react-aria-ComponentName convention. No specific states or dependencies are applied in this example.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ColorSwatchPicker.mdx#2025-04-23_snippet_11\n\nLANGUAGE: css\nCODE:\n```\n```css\\n.react-aria-ColorSwatchPicker {\\n  /* ... */\\n}\\n```\n```\n\n----------------------------------------\n\nTITLE: DropZone Component Styling with CSS\nDESCRIPTION: CSS styling for the DropZone component, including states for focus, hover, and when an item is being dragged over the drop target.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DropZone.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n\n.react-aria-DropZone {\n  color: var(--text-color);\n  background: var(--overlay-background);\n  border: 1px solid var(--border-color);\n  forced-color-adjust: none;\n  border-radius: 4px;\n  appearance: none;\n  vertical-align: middle;\n  font-size: 1.2rem;\n  text-align: center;\n  margin: 0;\n  outline: none;\n  padding: 24px 12px;\n  width: 25%;\n  display: inline-block;\n\n  &[data-focus-visible],\n  &[data-drop-target] {\n    outline: 2px solid var(--focus-ring-color);\n    outline-offset: -1px;\n  }\n\n  &[data-drop-target] {\n    background: var(--highlight-overlay);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: License Information Comment Block\nDESCRIPTION: Standard Adobe copyright and Apache License 2.0 information included as a comment block at the beginning of the file.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/ios-list.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{/* Copyright 2023 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License. */}\n```\n\n----------------------------------------\n\nTITLE: Flexbox Row Styling for Popover Demos (CSS)\nDESCRIPTION: This CSS snippet styles the container for popover trigger elements in a horizontal flex row, applying an 8px gap between elements. It is used in conjunction with popover button/dialog triggers to visually separate them. No dependencies. No parameters—directly targets \".flex-row\" classes. There are no inputs except for the relevant HTML structure.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Popover.mdx#2025-04-23_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.flex-row {\n  display: flex;\n  gap: 8px;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Custom Drop Indicators in React Aria Tables\nDESCRIPTION: CSS styling for custom drop indicators. This selector targets custom drop indicators with the 'active' class to apply special styling when they become active drop targets.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Table.mdx#2025-04-23_snippet_33\n\nLANGUAGE: css\nCODE:\n```\n.my-drop-indicator.active {\n  outline: 1px solid #e70073;\n  transform: translateZ(0);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind v4 with react-aria-components Plugin\nDESCRIPTION: This CSS snippet demonstrates how to integrate the `tailwindcss-react-aria-components` plugin when using Tailwind CSS version 4. It uses the `@import` rule for base Tailwind styles and the `@plugin` rule to include the necessary plugin for styling React Aria Components.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/contact-list.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n@plugin \"tailwindcss-react-aria-components\";\n```\n\n----------------------------------------\n\nTITLE: Styling for Row Links in React Aria Table\nDESCRIPTION: CSS styling for table rows that function as links.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Table.mdx#2025-04-23_snippet_14\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Row[data-href] {\n  cursor: pointer;\n}\n```\n\n----------------------------------------\n\nTITLE: Hidden CSS Import for Styling DisclosureGroup\nDESCRIPTION: CSS imports for styling the DisclosureGroup component, including theme and specific styles for Button and Disclosure components.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/DisclosureGroup.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n@import './Button.mdx' layer(button);\n@import './Disclosure.mdx' layer(disclosure);\n```\n\n----------------------------------------\n\nTITLE: Importing Tailwind CSS Styles\nDESCRIPTION: Imports global Tailwind CSS styles for the radio group component.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/shipping-radio.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport './tailwind.global.css';\n```\n\n----------------------------------------\n\nTITLE: Enabling tailwindcss-react-aria-components Plugin in Tailwind v3 Configuration - TypeScript/JavaScript\nDESCRIPTION: This code shows how to add the tailwindcss-react-aria-components plugin in a Tailwind v3 configuration file (tailwind.config.js). The plugin expands TailwindCSS with utility classes tailored for React Aria Components. Ensure 'tailwindcss-react-aria-components@1.x' is installed, and place the plugin in the 'plugins' array. No other complex configuration is required.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/framer-modal-sheet.mdx#2025-04-23_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nmodule.exports = {\n  // ...\n  plugins: [\n    require('tailwindcss-react-aria-components')\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Using Custom Router Component with React Aria Breadcrumbs and Links (TSX)\nDESCRIPTION: Provides a usage example for the custom `Router` component defined previously. It demonstrates nesting standard React Aria `Breadcrumbs` and `Link` components within the `Router`. These components automatically interact with the router's state (history stack) via the contexts provided by the `Router`.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Breadcrumbs.mdx#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\n<Router>\n  <Breadcrumbs>\n    {(item: RouterItem) => <Breadcrumb><Link>{item.label}</Link></Breadcrumb>}\n  </Breadcrumbs>\n  <ul>\n    <li><Link>Breadcrumbs</Link></li>\n    <li><Link>Button</Link></li>\n    <li><Link>Calendar</Link></li>\n  </ul>\n</Router>\n```\n\n----------------------------------------\n\nTITLE: Using Render Props for Conditional Rendering in React Aria Radio (JSX)\nDESCRIPTION: Demonstrates the use of the render prop pattern within a `Radio` component. A function is passed as children, receiving the component's state (like `isSelected`) and returning JSX. This allows conditional rendering of elements based on the state, such as showing an icon only when the radio is selected.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/RadioGroup.mdx#2025-04-23_snippet_21\n\nLANGUAGE: jsx\nCODE:\n```\n<Radio>\n  {({isSelected}) => (\n    <>\n      {isSelected && <SelectedIcon />}\n      Option\n    </>\n  )}\n</Radio>\n```\n\n----------------------------------------\n\nTITLE: Importing Tailwind CSS Stylesheet - TypeScript\nDESCRIPTION: Demonstrates how to import the global Tailwind CSS file at the top level of your React project. This is essential for applying the required utility classes across components in the examples. Ensure the 'tailwind.global.css' file exists and is properly configured for your project's setup.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/ripple-button.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport './tailwind.global.css';\n```\n\n----------------------------------------\n\nTITLE: Importing Tailwind Global Stylesheet - TypeScript\nDESCRIPTION: This minimal snippet imports a global Tailwind CSS stylesheet to provide utility-first styling across the project. It is a prerequisite for all subsequent styling using Tailwind classes in components and layouts. No functional code is present beyond the import side effect.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/framer-modal-sheet.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport './tailwind.global.css';\n```\n\n----------------------------------------\n\nTITLE: Importing CSS Styles for React Aria Components\nDESCRIPTION: This hidden CSS snippet imports stylesheets for Button and Form components from local MDX files. It uses CSS layers ('button', 'form') to manage style precedence, likely within a documentation or component library context.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/NumberField.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import './Button.mdx' layer(button);\n@import './Form.mdx' layer(form);\n```\n\n----------------------------------------\n\nTITLE: Importing CSS Dependencies for Tabs Styling\nDESCRIPTION: This CSS snippet, intended to be hidden in the documentation UI, imports base styles from Button and Link component documentation files using CSS layers (`button` and `link`). This suggests that the Tabs styling might rely on or reuse styles defined for Button and Link components.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Tabs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import './Button.mdx' layer(button);\n@import './Link.mdx' layer(link);\n```\n\n----------------------------------------\n\nTITLE: Tree Items with Direct Action Handlers\nDESCRIPTION: Demonstrates applying onAction handlers directly to individual TreeItem components within a static collection.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Tree.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n<Tree aria-label=\"Tree with onAction applied on the items directly\" style={{height: '300px'}} defaultExpandedKeys={['bulbasaur', 'ivysaur']}>\n  <MyTreeItem\n    onAction={() => alert(`Opening Bulbasaur...`)}\n    id=\"bulbasaur\"\n    title=\"Bulbasaur\">\n    <MyTreeItem\n      onAction={() => alert(`Opening Ivysaur...`)}\n      id=\"ivysaur\"\n      title=\"Ivysaur\">\n      <MyTreeItem\n        onAction={() => alert(`Opening Venusaur...`)}\n        id=\"venusaur\"\n        title=\"Venusaur\" />\n    </MyTreeItem>\n  </MyTreeItem>\n</Tree>\n```\n\n----------------------------------------\n\nTITLE: Rendering Example List Component in Markdown/JSX (MDX)\nDESCRIPTION: Defines the main content using Markdown syntax for the heading and description, and JSX to render the `ExampleList` component. A `style` prop with `marginTop: 80` is passed to the component. Assumes an environment processing Markdown and JSX (like MDX) and requires the imported `ExampleList` component.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/index.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n# Examples\n\nTechniques for styling and animating React Aria Components, and integrating with other libraries.\n\n<ExampleList style={{marginTop: 80}} />\n```\n\n----------------------------------------\n\nTITLE: Importing React Aria Components Example Layout\nDESCRIPTION: Module imports for React Aria Components example layout and documentation dependencies. Sets up the necessary imports for building an accessible table component example.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/stock-table.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {ExampleLayout} from '@react-spectrum/docs';\nexport default ExampleLayout;\n\nimport docs from 'docs:react-aria-components';\nimport {TypeLink} from '@react-spectrum/docs';\nimport styles from '@react-spectrum/docs/src/docs.css';\nimport Table from '@react-spectrum/docs/pages/assets/component-illustrations/Table.svg';\nimport {ExampleCard} from '@react-spectrum/docs/src/ExampleCard';\nimport ChevronRight from '@spectrum-icons/workflow/ChevronRight';\n```\n\n----------------------------------------\n\nTITLE: Toast Animations with CSS Transitions\nDESCRIPTION: Implementation of toast animations using CSS view transitions API.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Toast.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {flushSync} from 'react-dom';\n\nconst queue = new ToastQueue<MyToastContent>({\n  wrapUpdate(fn) {\n    if ('startViewTransition' in document) {\n      document.startViewTransition(() => {\n        flushSync(fn);\n      });\n    } else {\n      fn();\n    }\n  }\n});\n\n<ToastRegion queue={queue}>\n  {({toast}) => (\n    <Toast\n      style={{viewTransitionName: toast.key}}\n      toast={toast}>\n      <ToastContent>\n        <Text slot=\"title\">{toast.content.title}</Text>\n        <Text slot=\"description\">{toast.content.description}</Text>\n      </ToastContent>\n      <Button slot=\"close\">x</Button>\n    </Toast>\n  )}\n</ToastRegion>\n<Button onPress={() => queue.add({title: 'Toasted!'})}>Toast</Button>\n```\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Toast {\n  view-transition-class: toast;\n}\n\n::view-transition-new(.toast):only-child {\n  animation: slide-in 400ms;\n}\n\n::view-transition-old(.toast):only-child {\n  animation: slide-out 400ms;\n}\n\n@keyframes slide-out {\n  to {\n    translate: 100% 0;\n    opacity: 0;\n  }\n}\n\n@keyframes slide-in {\n  from {\n    translate: 100% 0;\n    opacity: 0;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing External CSS Stylesheet\nDESCRIPTION: Imports CSS styles defined in the 'NumberField.mdx' file into the current context, applying them within the 'numberfield' CSS layer. This is used to include potentially shared or related styles for the slider component.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/Slider.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import './NumberField.mdx' layer(numberfield);\n```\n\n----------------------------------------\n\nTITLE: Implementing Vertical Grid ListBox Layout\nDESCRIPTION: Creates a grid-layout ListBox component with vertical scrolling and multiple selection enabled.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/ListBox.mdx#2025-04-23_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\n<ListBox\n  aria-label=\"Albums\"\n  layout=\"grid\"\n  items={albums}\n  selectionMode=\"multiple\">\n  {item => (\n    <ListBoxItem textValue={item.title}>\n      <img src={item.image} alt=\"\" />\n      <Text slot=\"label\">{item.title}</Text>\n      <Text slot=\"description\">{item.artist}</Text>\n    </ListBoxItem>\n  )}\n</ListBox>\n```\n\n----------------------------------------\n\nTITLE: Styling for CheckboxGroup Component\nDESCRIPTION: CSS styling for the CheckboxGroup component, defining the layout with flexbox and setting color variables.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/CheckboxGroup.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n\n.react-aria-CheckboxGroup {\n  display: flex;\n  flex-direction: column;\n  gap: 0.571rem;\n  color: var(--text-color);\n}\n```\n\n----------------------------------------\n\nTITLE: Tailwind v3 Plugin Configuration\nDESCRIPTION: Demonstrates the plugin configuration for Tailwind CSS v3 in the tailwind.config.js file.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/status-select.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nmodule.exports = {\n  // ...\n  plugins: [\n    require('tailwindcss-react-aria-components'),\n    require('tailwindcss-animate')\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Wrapper Component for GridListItem\nDESCRIPTION: This example demonstrates how to create a wrapper component for GridListItem to customize its props and styling.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/GridList.mdx#2025-04-23_snippet_46\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MyItem(props) {\n  return <GridListItem {...props} className=\"my-item\" />\n}\n```\n\n----------------------------------------\n\nTITLE: RadioGroup with Default Value\nDESCRIPTION: Shows how to set a default value for an uncontrolled RadioGroup.\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/RadioGroup.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<MyRadioGroup label=\"Are you a wizard?\" defaultValue=\"yes\">\n  <Radio value=\"yes\">Yes</Radio>\n  <Radio value=\"no\">No</Radio>\n</MyRadioGroup>\n```\n\n----------------------------------------\n\nTITLE: Tailwind Configuration\nDESCRIPTION: Configuration for the tailwindcss-react-aria-components plugin in Tailwind v3\nSOURCE: https://github.com/bhaleraosaurabh/react-aria-components/blob/main/docs/examples/swipeable-tabs.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nmodule.exports = {\n  // ...\n  plugins: [\n    require('tailwindcss-react-aria-components')\n  ]\n};\n```"
  }
]