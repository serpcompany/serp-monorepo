[
  {
    "owner": "ekmas",
    "repo": "neobrutalism-components",
    "content": "TITLE: Building a Command Menu UI Using React JSX and UI Components in TSX\nDESCRIPTION: This JSX snippet constructs the command menu interface, integrating UI components like CommandDialog, CommandInput, CommandList, and command items grouped semantically under Suggestions and Settings categories. It includes visual icons, keyboard shortcut hints, and an empty state message. The dialog visibility is controlled by the 'open' prop and updates through 'onOpenChange'. The snippet showcases composability, accessibility (via keyboard shortcut hints), and dynamic appearance.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/command.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<>\n  <p className=\"text-foreground text-sm\">\n    Press{\" \"}\n    <kbd className=\"bg-main text-main-foreground pointer-events-none inline-flex h-5 items-center gap-1 rounded-base border-2 px-1.5 font-mono text-[10px] font-heading select-none\">\n      <span className=\"text-xs\">⌘</span>J\n    </kbd>\n  </p>\n  <CommandDialog open={open} onOpenChange={setOpen}>\n    <CommandInput placeholder=\"Type a command or search...\" />\n    <CommandList>\n      <CommandEmpty>No results found.</CommandEmpty>\n      <CommandGroup heading=\"Suggestions\">\n        <CommandItem>\n          <Calendar />\n          <span>Calendar</span>\n        </CommandItem>\n        <CommandItem>\n          <Smile />\n          <span>Search Emoji</span>\n        </CommandItem>\n        <CommandItem>\n          <Calculator />\n          <span>Calculator</span>\n        </CommandItem>\n      </CommandGroup>\n      <CommandSeparator />\n      <CommandGroup heading=\"Settings\">\n        <CommandItem>\n          <User />\n          <span>Profile</span>\n          <CommandShortcut>⌘P</CommandShortcut>\n        </CommandItem>\n        <CommandItem>\n          <CreditCard />\n          <span>Billing</span>\n          <CommandShortcut>⌘B</CommandShortcut>\n        </CommandItem>\n        <CommandItem>\n          <Settings />\n          <span>Settings</span>\n          <CommandShortcut>⌘S</CommandShortcut>\n        </CommandItem>\n      </CommandGroup>\n    </CommandList>\n  </CommandDialog>\n</>\n```\n\n----------------------------------------\n\nTITLE: Managing Command Dialog Visibility with React useState and Keyboard Shortcut in TSX\nDESCRIPTION: This snippet demonstrates controlling the visibility of the command menu dialog using React's useState hook alongside the useEffect hook to listen for a keyboard shortcut (Cmd/Ctrl + J). When triggered, it toggles the dialog open state, allowing users to invoke the command menu with a keyboard command. The snippet includes proper event listener registration and cleanup.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/command.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst [open, setOpen] = React.useState(false)\n\nReact.useEffect(() => {\n  const down = (e: KeyboardEvent) => {\n    if (e.key === \"j\" && (e.metaKey || e.ctrlKey)) {\n      e.preventDefault()\n      setOpen((open) => !open)\n    }\n  }\n\n  document.addEventListener(\"keydown\", down)\n  return () => document.removeEventListener(\"keydown\", down)\n}, [])\n```\n\n----------------------------------------\n\nTITLE: Implementing Alert Dialog in React\nDESCRIPTION: Shows a complete implementation example of the Alert Dialog component with a confirmation prompt. It demonstrates the component structure with a trigger button, header with title and description, and footer with cancel and action buttons.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/alert-dialog.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<AlertDialog>\n  <AlertDialogTrigger asChild>\n    <Button>Open</Button>\n  </AlertDialogTrigger>\n  <AlertDialogContent>\n    <AlertDialogHeader>\n      <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>\n      <AlertDialogDescription>\n        This action cannot be undone. This will permanently delete your\n        account and remove your data from our servers.\n      </AlertDialogDescription>\n    </AlertDialogHeader>\n    <AlertDialogFooter>\n      <AlertDialogCancel>Cancel</AlertDialogCancel>\n      <AlertDialogAction>Continue</AlertDialogAction>\n    </AlertDialogFooter>\n  </AlertDialogContent>\n</AlertDialog>\n```\n\n----------------------------------------\n\nTITLE: Importing the Input Component (TypeScript)\nDESCRIPTION: Imports the Input component from its definition file within the project structure, making it available for use in other TSX files.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/input.mdx#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { Input } from '@/components/ui/input'\n```\n\n----------------------------------------\n\nTITLE: Rendering a Responsive Carousel with Numbered Cards in TSX\nDESCRIPTION: A TSX snippet demonstrating the full rendering of a carousel component with embedded card elements representing numbered items from 1 to 5. The carousel uses a flex container for layout, sets a maximum width, and composes Carousel, CarouselContent, CarouselItem, CarouselPrevious, and CarouselNext components to enable swipe and navigation functionality. Each CarouselItem wraps a Card component styled with non-shadow background and text colors, displaying the card number centered visually. This snippet illustrates complete usage including dynamic item generation and navigation controls, showing how to integrate motion-enabled carousel UI in React with TypeScript.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/carousel.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<div className=\"w-full flex-col items-center gap-4 flex\">\n  <Carousel className=\"w-full max-w-[200px]\">\n    <CarouselContent>\n      {Array.from({ length: 5 }).map((_, index) => (\n        <CarouselItem key={index}>\n          <div className=\"p-[10px]\">\n            <Card className=\"shadow-none p-0 bg-main text-main-foreground\">\n              <CardContent className=\"flex aspect-square items-center justify-center p-4\">\n                <span className=\"text-3xl font-base\">{index + 1}</span>\n              </CardContent>\n            </Card>\n          </div>\n        </CarouselItem>\n      ))}\n    </CarouselContent>\n    <CarouselPrevious />\n    <CarouselNext />\n  </Carousel>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Input Component Source Code Reference (TSX)\nDESCRIPTION: This placeholder references the source code file for the Input component itself, typically used within an installation guide section.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/input.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfile=<rootDir>/src/components/ui/input.tsx\n```\n\n----------------------------------------\n\nTITLE: Checkbox Example Usage (tsx)\nDESCRIPTION: This code snippet demonstrates a basic example of how to use the Checkbox component within a React application. It renders the Checkbox component, which allows the user to toggle between checked and unchecked states. No specific parameters are used in this example.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/checkbox.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Checkbox />\n```\n\n----------------------------------------\n\nTITLE: Previewing Carousel Component Implementation in TSX\nDESCRIPTION: This snippet is a placeholder for previewing the carousel component source code located at 'src/examples/ui/carousel.tsx'. It does not contain actual code but indicates where the example usage of the carousel component resides for demonstration purposes. Dependencies include React and the Embla carousel library. The purpose is to provide a visual preview environment within documentation or storybook contexts.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/carousel.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Invoice Table with JSX Components\nDESCRIPTION: Creates a React JSX structure for rendering a detailed invoices table, including caption, headers, data rows, and footer. Uses imported table components to organize layout and align content properly. The table dynamically maps over the invoice data to generate rows, with styling for alignment and emphasis where needed.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/table.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n<Table>\n  <TableCaption className=\"text-foreground\">\n    A list of your recent invoices.\n  </TableCaption>\n  <TableHeader>\n    <TableRow>\n      <TableHead className=\"w-[100px]\">Invoice</TableHead>\n      <TableHead>Status</TableHead>\n      <TableHead>Method</TableHead>\n      <TableHead className=\"text-right\">Amount</TableHead>\n    </TableRow>\n  </TableHeader>\n  <TableBody>\n    {invoices.map((invoice) => (\n      <TableRow key={invoice.invoice}>\n        <TableCell className=\"font-base\">{invoice.invoice}</TableCell>\n        <TableCell>{invoice.paymentStatus}</TableCell>\n        <TableCell>{invoice.paymentMethod}</TableCell>\n        <TableCell className=\"text-right\">{invoice.totalAmount}</TableCell>\n      </TableRow>\n    ))}\n  </TableBody>\n  <TableFooter>\n    <TableRow>\n      <TableCell colSpan={3}>Total</TableCell>\n      <TableCell className=\"text-right\">$2,500.00</TableCell>\n    </TableRow>\n  </TableFooter>\n</Table>\n```\n\n----------------------------------------\n\nTITLE: Rendering Date Picker Component UI (TSX)\nDESCRIPTION: This snippet renders the visual structure of the date picker using a composition of shadcn/ui components. It wraps a Button inside a PopoverTrigger to toggle a PopoverContent containing the Calendar component. The button displays the selected date (formatted) or a placeholder, and the calendar allows single date selection which updates the 'date' state via 'onSelect'.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/date-picker.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Popover>\n  <PopoverTrigger asChild>\n    <Button\n      variant=\"noShadow\"\n      className=\"w-[280px] justify-start text-left font-base\"\n    >\n      <CalendarIcon />\n      {date ? format(date, \"PPP\") : <span>Pick a date</span>}\n    </Button>\n  </PopoverTrigger>\n  <PopoverContent className=\"w-auto border-0! p-0\">\n    <Calendar\n      mode=\"single\"\n      selected={date}\n      onSelect={setDate}\n      initialFocus\n    />\n  </PopoverContent>\n</Popover>\n```\n\n----------------------------------------\n\nTITLE: Sample Data Definition for Invoices in TypeScript\nDESCRIPTION: Defines an array of invoice objects containing invoice number, payment status, total amount, and payment method. This sample data is used to render table rows dynamically. It requires prior import of React components and provides data inputs for the UI.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/table.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst invoices = [\n  {\n    invoice: 'INV001',\n    paymentStatus: 'Paid',\n    totalAmount: '$250.00',\n    paymentMethod: 'Credit Card',\n  },\n  {\n    invoice: 'INV002',\n    paymentStatus: 'Pending',\n    totalAmount: '$150.00',\n    paymentMethod: 'PayPal',\n  },\n  {\n    invoice: 'INV003',\n    paymentStatus: 'Unpaid',\n    totalAmount: '$350.00',\n    paymentMethod: 'Bank Transfer',\n  },\n  {\n    invoice: 'INV004',\n    paymentStatus: 'Paid',\n    totalAmount: '$450.00',\n    paymentMethod: 'Credit Card',\n  },\n  {\n    invoice: 'INV005',\n    paymentStatus: 'Paid',\n    totalAmount: '$550.00',\n    paymentMethod: 'PayPal',\n  },\n  {\n    invoice: 'INV006',\n    paymentStatus: 'Pending',\n    totalAmount: '$200.00',\n    paymentMethod: 'Bank Transfer',\n  },\n  {\n    invoice: 'INV007',\n    paymentStatus: 'Unpaid',\n    totalAmount: '$300.00',\n    paymentMethod: 'Credit Card',\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Sheet Component with Profile Edit Form in TSX\nDESCRIPTION: Demonstrates a complete example of the Sheet component being used to create a profile editing form. Shows the structure with trigger, content, header, form inputs, and footer actions.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/sheet.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Sheet>\n  <SheetTrigger asChild>\n    <Button>Open</Button>\n  </SheetTrigger>\n  <SheetContent>\n    <SheetHeader>\n      <SheetTitle>Edit profile</SheetTitle>\n      <SheetDescription>\n        Make changes to your profile here. Click save when you&apos;re\n        done.\n      </SheetDescription>\n    </SheetHeader>\n    <div className=\"grid flex-1 auto-rows-min gap-6 px-4\">\n      <div className=\"grid gap-3\">\n        <Label htmlFor=\"sheet-demo-name\">Name</Label>\n        <Input id=\"sheet-demo-name\" defaultValue=\"Pedro Duarte\" />\n      </div>\n      <div className=\"grid gap-3\">\n        <Label htmlFor=\"sheet-demo-username\">Username</Label>\n        <Input id=\"sheet-demo-username\" defaultValue=\"@peduarte\" />\n      </div>\n    </div>\n    <SheetFooter>\n      <Button type=\"submit\">Save changes</Button>\n      <SheetClose asChild>\n        <Button variant=\"neutral\">Close</Button>\n      </SheetClose>\n    </SheetFooter>\n  </SheetContent>\n</Sheet>\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Date Picker (TypeScript)\nDESCRIPTION: This snippet imports required libraries and components for building the date picker. It includes date formatting utilities from 'date-fns', an icon component from 'lucide-react', React itself, and UI components (Button, Calendar, Popover) likely from a local shadcn/ui implementation. These imports are prerequisites for the component's functionality.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/date-picker.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { format } from 'date-fns'\nimport { Calendar as CalendarIcon } from 'lucide-react'\n\nimport * as React from 'react'\n\nimport { Button } from '@/components/ui/button'\nimport { Calendar } from '@/components/ui/calendar'\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from '@/components/ui/popover'\n```\n\n----------------------------------------\n\nTITLE: Setting Up Progress State with React Hooks\nDESCRIPTION: Shows how to create and manage progress state using React useState and useEffect hooks. This example initializes progress at 13% and updates it to 66% after a 500ms delay.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/progress.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst [progress, setProgress] = React.useState(13);\n\nReact.useEffect(() => {\n  const timer = setTimeout(() => setProgress(66), 500);\n  return () => clearTimeout(timer);\n}, [])\n```\n\n----------------------------------------\n\nTITLE: Importing Progress Component in React\nDESCRIPTION: Demonstrates how to import the Progress component into a React application. This is the basic setup required before implementing the component in your UI.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/progress.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport * as React from 'react'\n\nimport { Progress } from '@/components/ui/progress'\n```\n\n----------------------------------------\n\nTITLE: Tooltip Example Component (tsx)\nDESCRIPTION: This snippet represents the example implementation of the Tooltip component. It demonstrates how to use the component in a practical scenario.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/tooltip.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx file=<rootDir>/src/examples/ui/tooltip.tsx\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Menubar Usage - TSX\nDESCRIPTION: This example demonstrates how to use the imported Menubar components to create a functional menubar with multiple top-level menus ('File', 'Edit', 'View', 'Profiles'). It showcases features such as nested sub-menus, keyboard shortcuts, disabled items, separators, checkbox items, and radio group items.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/menubar.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Menubar>\n  <MenubarMenu>\n    <MenubarTrigger>File</MenubarTrigger>\n    <MenubarContent>\n      <MenubarItem>\n        New Tab <MenubarShortcut>⌘T</MenubarShortcut>\n      </MenubarItem>\n      <MenubarItem>\n        New Window <MenubarShortcut>⌘N</MenubarShortcut>\n      </MenubarItem>\n      <MenubarItem disabled>New Incognito Window</MenubarItem>\n      <MenubarSeparator />\n      <MenubarSub>\n        <MenubarSubTrigger>Share</MenubarSubTrigger>\n        <MenubarSubContent>\n          <MenubarItem>Email link</MenubarItem>\n          <MenubarItem>Messages</MenubarItem>\n          <MenubarItem>Notes</MenubarItem>\n        </MenubarSubContent>\n      </MenubarSub>\n      <MenubarSeparator />\n      <MenubarItem>\n        Print... <MenubarShortcut>⌘P</MenubarShortcut>\n      </MenubarItem>\n    </MenubarContent>\n  </MenubarMenu>\n  <MenubarMenu>\n    <MenubarTrigger>Edit</MenubarTrigger>\n    <MenubarContent>\n      <MenubarItem>\n        Undo <MenubarShortcut>⌘Z</MenubarShortcut>\n      </MenubarItem>\n      <MenubarItem>\n        Redo <MenubarShortcut>⇧⌘Z</MenubarShortcut>\n      </MenubarItem>\n      <MenubarSeparator />\n      <MenubarSub>\n        <MenubarSubTrigger>Find</MenubarSubTrigger>\n        <MenubarSubContent>\n          <MenubarItem>Search the web</MenubarItem>\n          <MenubarSeparator />\n          <MenubarItem>Find...</MenubarItem>\n          <MenubarItem>Find Next</MenubarItem>\n          <MenubarItem>Find Previous</MenubarItem>\n        </MenubarSubContent>\n      </MenubarSub>\n      <MenubarSeparator />\n      <MenubarItem>Cut</MenubarItem>\n      <MenubarItem>Copy</MenubarItem>\n      <MenubarItem>Paste</MenubarItem>\n    </MenubarContent>\n  </MenubarMenu>\n  <MenubarMenu>\n    <MenubarTrigger>View</MenubarTrigger>\n    <MenubarContent>\n      <MenubarCheckboxItem>Always Show Bookmarks Bar</MenubarCheckboxItem>\n      <MenubarCheckboxItem checked>Always Show Full URLs</MenubarCheckboxItem>\n      <MenubarSeparator />\n      <MenubarItem inset>\n        Reload <MenubarShortcut>⌘R</MenubarShortcut>\n      </MenubarItem>\n      <MenubarItem disabled inset>\n        Force Reload <MenubarShortcut>⇧⌘R</MenubarShortcut>\n      </MenubarItem>\n      <MenubarSeparator />\n      <MenubarItem inset>Toggle Fullscreen</MenubarItem>\n      <MenubarSeparator />\n      <MenubarItem inset>Hide Sidebar</MenubarItem>\n    </MenubarContent>\n  </MenubarMenu>\n  <MenubarMenu>\n    <MenubarTrigger>Profiles</MenubarTrigger>\n    <MenubarContent>\n      <MenubarRadioGroup value=\"benoit\">\n        <MenubarRadioItem value=\"andy\">Andy</MenubarRadioItem>\n        <MenubarRadioItem value=\"benoit\">Benoit</MenubarRadioItem>\n        <MenubarRadioItem value=\"Luis\">Luis</MenubarRadioItem>\n      </MenubarRadioGroup>\n      <MenubarSeparator />\n      <MenubarItem inset>Edit...</MenubarItem>\n      <MenubarSeparator />\n      <MenubarItem inset>Add Profile...</MenubarItem>\n    </MenubarContent>\n  </MenubarMenu>\n</Menubar>\n```\n\n----------------------------------------\n\nTITLE: Using Tooltip with Button (tsx)\nDESCRIPTION: This snippet shows how to use the Tooltip component with a Button. It wraps the Button with TooltipTrigger and provides TooltipContent for the tooltip's content. Requires TooltipProvider to be present in the component tree.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/tooltip.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\n<TooltipProvider>\n  <Tooltip>\n    <TooltipTrigger asChild>\n      <Button example=\"noShadow\">Hover</Button>\n    </TooltipTrigger>\n    <TooltipContent>\n      <p>Add to library</p>\n    </TooltipContent>\n  </Tooltip>\n</TooltipProvider>\n```\n```\n\n----------------------------------------\n\nTITLE: Using InputOTP Component in TypeScript\nDESCRIPTION: This snippet illustrates how to use the `InputOTP` component, along with its sub-components for grouping and slotting OTP digits.  The `maxLength` prop determines the number of digits expected. The `InputOTPGroup` and `InputOTPSlot` components allow for grouping and positioning the OTP digits, and a `InputOTPSeparator` is used to visually separate blocks of digits.  It shows a basic usage scenario with a 6-digit OTP, splitting it into two groups of three digits.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/input-otp.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<InputOTP maxLength={6}>\n  <InputOTPGroup>\n    <InputOTPSlot index={0} />\n    <InputOTPSlot index={1} />\n    <InputOTPSlot index={2} />\n  </InputOTPGroup>\n  <InputOTPSeparator />\n  <InputOTPGroup>\n    <InputOTPSlot index={3} />\n    <InputOTPSlot index={4} />\n    <InputOTPSlot index={5} />\n  </InputOTPGroup>\n</InputOTP>\n```\n\n----------------------------------------\n\nTITLE: Vertical Slider Example - React (TSX)\nDESCRIPTION: This code snippet provides an example of rendering the Slider component in a vertical orientation. It helps developers understand how to modify orientation via props or styles, and applies to use cases where vertical sliders are preferred. The snippet depends on the component supporting orientation configuration; the expected outcome is a vertically-oriented slider UI element.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/slider.mdx#_snippet_5\n\nLANGUAGE: TSX\nCODE:\n```\n// File: <rootDir>/src/examples/ui/slider/vertical.tsx\n// Example: Vertical orientation for Slider\n```\n\n----------------------------------------\n\nTITLE: Two-Thumbs Slider Example - React (TSX)\nDESCRIPTION: This snippet points to a sample implementation of the Slider component with support for two thumbs, demonstrating how to select a value range rather than a single value. Developers can use this example to learn how to configure the Slider for advanced use cases involving ranges. It assumes the underlying Slider supports multiple values and appropriate props; the output is a dual-thumb slider interface.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/slider.mdx#_snippet_4\n\nLANGUAGE: TSX\nCODE:\n```\n// File: <rootDir>/src/examples/ui/slider/two-thumbs.tsx\n// Example: Slider with two thumbs\n```\n\n----------------------------------------\n\nTITLE: Importing Avatar Components - TypeScript\nDESCRIPTION: This snippet demonstrates how to import the necessary components for the Avatar from the specified path. It imports `Avatar`, `AvatarFallback`, and `AvatarImage` from the `@/components/ui/avatar` module.  This is a prerequisite for using the Avatar component in other parts of the application.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/avatar.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'\n```\n\n----------------------------------------\n\nTITLE: Rendering Accordion Component in React (TypeScript)\nDESCRIPTION: This example demonstrates how to render an Accordion using TypeScript in a React application. The Accordion is set to 'single' type, making only one item expandable at a time and is styled with full width and a maximum width class. The AccordionItem includes a trigger question and content, linking the trigger and content through matching 'value' properties; this design follows WAI-ARIA accessibility standards. The snippet requires the Accordion and its subcomponents from the relevant module path.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/accordion.mdx#_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\n<Accordion type=\"single\" collapsible className=\"w-full max-w-xl\">\n  <AccordionItem value=\"item-1\">\n    <AccordionTrigger>Is it accessible?</AccordionTrigger>\n    <AccordionContent>\n      Yes. It adheres to the WAI-ARIA design pattern.\n    </AccordionContent>\n  </AccordionItem>\n</Accordion>\n\n```\n\n----------------------------------------\n\nTITLE: Image Card Component Example - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates the import of the ImageCard component. It assumes the component is located at the specified path.  This import is a prerequisite for using the ImageCard component.  The output is the availability of the ImageCard component to use in other parts of the application.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/image-card.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport ImageCard from '@/components/ui/image-card'\n```\n\n----------------------------------------\n\nTITLE: Importing Accordion Components in React with TypeScript\nDESCRIPTION: This snippet shows how to import the Accordion and its subcomponents from a relative module path in a React TypeScript project. The imports include Accordion, AccordionContent, AccordionItem, and AccordionTrigger, which are required to construct the Accordion and its nested content panels. Ensure that '@/components/ui/accordion' exists and that the project uses TypeScript (tsx) with appropriate module resolution.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/accordion.mdx#_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from \"@/components/ui/accordion\"\n\n```\n\n----------------------------------------\n\nTITLE: Basic Alert Implementation with Icon, Title and Description\nDESCRIPTION: Demonstrates a standard alert implementation with an icon, title, and description. The example uses CheckCircle2Icon to indicate success.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/alert.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Alert>\n  <CheckCircle2Icon />\n  <AlertTitle>Success! Your changes have been saved</AlertTitle>\n  <AlertDescription>\n    This is an alert with icon, title and description.\n  </AlertDescription>\n</Alert>\n```\n\n----------------------------------------\n\nTITLE: Rendering a Drawer Component with Custom Header and Footer in React TypeScript\nDESCRIPTION: This snippet defines a Drawer UI component in a React TypeScript context, combining several nested components to build a modal interface. It demonstrates the use of DrawerTrigger for activation, DrawerContent for display, and utilizes DrawerHeader (with DrawerTitle and DrawerDescription) and DrawerFooter to structure modal content, including Button interactions for submit and cancel actions. Dependencies include React, the Drawer component suite, and a Button component, all assumed to be pre-installed and available via module imports. Expected input/output behavior involves opening the drawer on trigger and handling actions via child buttons.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/drawer.mdx#_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\n<Drawer>\n  <DrawerTrigger asChild>\n    <Button>Open</Button>\n  </DrawerTrigger>\n  <DrawerContent>\n    <div className=\"mx-auto w-[300px]\">\n      <DrawerHeader>\n        <DrawerTitle>Are you absolutely sure?</DrawerTitle>\n        <DrawerDescription>This action cannot be undone.</DrawerDescription>\n      </DrawerHeader>\n      <DrawerFooter className=\"grid grid-cols-2\">\n        <Button example=\"noShadow\">Submit</Button>\n        <DrawerClose asChild>\n          <Button className=\"bg-secondary-background text-foreground\" example=\"noShadow\">\n            Cancel\n          </Button>\n        </DrawerClose>\n      </DrawerFooter>\n    </div>\n  </DrawerContent>\n</Drawer>\n```\n\n----------------------------------------\n\nTITLE: Structuring a Breadcrumb with Dropdown (tsx)\nDESCRIPTION: Demonstrates how to compose the imported Breadcrumb and DropdownMenu components to create a navigation element showing a hierarchical path. It shows linking items, separators, the current page, and integrating a dropdown menu within a breadcrumb item using `BreadcrumbEllipsis`.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/breadcrumb.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Breadcrumb>\n  <BreadcrumbList>\n    <BreadcrumbItem>\n      <BreadcrumbLink href=\"/\">Home</BreadcrumbLink>\n    </BreadcrumbItem>\n    <BreadcrumbSeparator />\n    <BreadcrumbItem>\n      <DropdownMenu>\n        <DropdownMenuTrigger className=\"flex items-center gap-1\">\n          <BreadcrumbEllipsis className=\"size-4\" />\n          <span className=\"sr-only\">Toggle menu</span>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent align=\"start\">\n          <DropdownMenuItem>Documentation</DropdownMenuItem>\n          <DropdownMenuItem>Themes</DropdownMenuItem>\n          <DropdownMenuItem>GitHub</DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n    </BreadcrumbItem>\n    <BreadcrumbSeparator />\n    <BreadcrumbItem>\n      <BreadcrumbLink href=\"/components\">Components</BreadcrumbLink>\n    </BreadcrumbItem>\n    <BreadcrumbSeparator />\n    <BreadcrumbItem>\n      <BreadcrumbPage>Breadcrumb</BreadcrumbPage>\n    </BreadcrumbItem>\n  </BreadcrumbList>\n</Breadcrumb>\n```\n\n----------------------------------------\n\nTITLE: Installing the Navigation Menu Component with shadcn/ui in TypeScript\nDESCRIPTION: This snippet shows how to locate or include the navigation menu component in a project by specifying the main source file. It indicates where to copy or reference the component from, facilitating installation. No parameters or runtime output are involved; the main prerequisite is an existing shadcn/ui installation within a React TypeScript project.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/navigation-menu.mdx#_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\n```tsx file=<rootDir>/src/components/ui/navigation-menu.tsx\n```\n```\n\n----------------------------------------\n\nTITLE: Component Import and Usage Example in React TypeScript\nDESCRIPTION: This snippet demonstrates importing the Card component and associated sub-components from a local UI library, followed by an example JSX implementation of a login form inside the Card. It illustrates the composition of header, content, and footer sections, with form fields, labels, buttons, and links, showcasing typical usage patterns for the component.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/card.mdx#_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\n<Card className=\"w-full max-w-sm\">\n  <CardHeader>\n    <CardTitle>Login to your account</CardTitle>\n    <CardDescription>\n      Enter your email below to login to your account\n    </CardDescription>\n  </CardHeader>\n  <CardContent>\n    <form>\n      <div className=\"flex flex-col gap-6\">\n        <div className=\"grid gap-2\">\n          <Label htmlFor=\"email\">Email</Label>\n          <Input\n            id=\"email\"\n            type=\"email\"\n            placeholder=\"m@example.com\"\n            required\n          />\n        </div>\n        <div className=\"grid gap-2\">\n          <div className=\"flex items-center\">\n            <Label htmlFor=\"password\">Password</Label>\n            <a\n              href=\"#\"\n              className=\"ml-auto inline-block text-sm underline-offset-4 hover:underline\"\n            >\n              Forgot your password?\n            </a>\n          </div>\n          <Input id=\"password\" type=\"password\" required />\n        </div>\n      </div>\n    </form>\n  </CardContent>\n  <CardFooter className=\"flex-col gap-2\">\n    <Button type=\"submit\" className=\"w-full\">\n      Login\n    </Button>\n    <Button variant=\"neutral\" className=\"w-full\">\n      Login with Google\n    </Button>\n    <div className=\"mt-4 text-center text-sm\">\n      Don&apos;t have an account? {\" \"}\n      <a href=\"#\" className=\"underline underline-offset-4\">\n        Sign up\n      </a>\n    </div>\n  </CardFooter>\n</Card>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Customizable Navigation Menu with shadcn/ui in TypeScript\nDESCRIPTION: This complete code snippet defines a fully functional navigation menu using React, shadcn/ui, and Tailwind CSS for class styling. The component supports multiple menu items (like Getting Started, Components, and Documentation) and demonstrates nested lists, triggers, and advanced list mapping from a JavaScript array. Required dependencies include React, next/link, shadcn/ui’s navigation-menu components, Tailwind CSS, and a utility function for classNames. Props control the menu’s content and linkage, while output is a stylized, accessible, and keyboard-navigable navigation menu. Limitations may arise if dependencies are not installed; input data format for list items is expected to match the provided example.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/navigation-menu.mdx#_snippet_2\n\nLANGUAGE: TSX\nCODE:\n```\n\"use client\"\n\nimport * as React from \"react\"\nimport Link from \"next/link\"\n\nimport {\n  NavigationMenu,\n  NavigationMenuContent,\n  NavigationMenuItem,\n  NavigationMenuLink,\n  NavigationMenuList,\n  NavigationMenuTrigger,\n  navigationMenuTriggerStyle,\n} from \"@/components/ui/navigation-menu\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst components: { title: string; href: string; description: string }[] = [\n  {\n    title: \"Alert Dialog\",\n    href: \"https://ui.shadcn.com/docs/primitives/alert-dialog\",\n    description:\n      \"A modal dialog that interrupts the user with important content and expects a response.\",\n  },\n  {\n    title: \"Hover Card\",\n    href: \"https://ui.shadcn.com/docs/primitives/hover-card\",\n    description:\n      \"For sighted users to preview content available behind a link.\",\n  },\n  {\n    title: \"Progress\",\n    href: \"https://ui.shadcn.com/docs/primitives/progress\",\n    description:\n      \"Displays an indicator showing the completion progress of a task, typically displayed as a progress bar.\",\n  },\n  {\n    title: \"Scroll-area\",\n    href: \"https://ui.shadcn.com/docs/primitives/scroll-area\",\n    description: \"Visually or semantically separates content.\",\n  },\n  {\n    title: \"Tabs\",\n    href: \"https://ui.shadcn.com/docs/primitives/tabs\",\n    description:\n      \"A set of layered sections of content—known as tab panels—that are displayed one at a time.\",\n  },\n  {\n    title: \"Tooltip\",\n    href: \"https://ui.shadcn.com/docs/primitives/tooltip\",\n    description:\n      \"A popup that displays information related to an element when the element receives keyboard focus or the mouse hovers over it.\",\n  },\n]\n\nexport default function NavigationMenuDemo() {\n  return (\n    <NavigationMenu className=\"z-5 \">\n      <NavigationMenuList>\n        <NavigationMenuItem>\n          <NavigationMenuTrigger>Getting started</NavigationMenuTrigger>\n          <NavigationMenuContent>\n            <ul className=\"grid w-[500px] gap-3 p-2 lg:grid-cols-[.75fr_1fr]\">\n              <li className=\"row-span-3\">\n                <NavigationMenuLink asChild>\n                  <a\n                    className=\"flex h-full w-full select-none flex-col justify-end rounded-base p-6 no-underline outline-hidden\"\n                    href=\"https://ui.shadcn.com\"\n                  >\n                    <div className=\"mb-2 mt-4 text-lg font-heading\">\n                      shadcn/ui\n                    </div>\n                    <p className=\"text-sm font-base leading-tight\">\n                      Beautifully designed components that you can copy and\n                      paste into your apps. Accessible. Customizable. Open\n                      Source.\n                    </p>\n                  </a>\n                </NavigationMenuLink>\n              </li>\n              <ListItem href=\"https://ui.shadcn.com/docs\" title=\"Introduction\">\n                Re-usable components built using Radix UI and Tailwind CSS.\n              </ListItem>\n              <ListItem\n                href=\"https://ui.shadcn.com/docs/installation\"\n                title=\"Installation\"\n              >\n                How to install dependencies and structure your app.\n              </ListItem>\n              <ListItem\n                href=\"https://ui.shadcn.com/docs/primitives/typography\"\n                title=\"Typography\"\n              >\n                Styles for headings, paragraphs, lists...etc\n              </ListItem>\n            </ul>\n          </NavigationMenuContent>\n        </NavigationMenuItem>\n        <NavigationMenuItem>\n          <NavigationMenuTrigger>Components</NavigationMenuTrigger>\n          <NavigationMenuContent>\n            <ul className=\"grid w-[400px] gap-3 p-2 md:w-[500px] md:grid-cols-2 lg:w-[600px] \">\n              {components.map((component) => (\n                <ListItem\n                  key={component.title}\n                  title={component.title}\n                  href={component.href}\n                >\n                  {component.description}\n                </ListItem>\n              ))}\n            </ul>\n          </NavigationMenuContent>\n        </NavigationMenuItem>\n        <NavigationMenuItem>\n          <Link href=\"https://ui.shadcn.com/docs\" legacyBehavior passHref>\n            <NavigationMenuLink className={navigationMenuTriggerStyle()}>\n              Documentation\n            </NavigationMenuLink>\n          </Link>\n        </NavigationMenuItem>\n      </NavigationMenuList>\n    </NavigationMenu>\n  )\n}\n\nfunction ListItem({\n  className,\n  title,\n  children,\n  ...props\n}: React.ComponentProps<\"a\">) {\n  return (\n    <li>\n      <NavigationMenuLink asChild>\n        <a\n          className={cn(\n            \"hover:bg-accent block text-main-foreground select-none space-y-1 rounded-base border-2 border-transparent p-3 leading-none no-underline outline-hidden transition-colors hover:border-border\",\n            className,\n          )}\n          {...props}\n        >\n          <div className=\"text-base font-heading leading-none\">{title}</div>\n          <p className=\"font-base line-clamp-2 text-sm leading-snug\">\n            {children}\n          </p>\n        </a>\n      </NavigationMenuLink>\n    </li>\n  )\n}\nListItem.displayName = \"ListItem\"\n```\n\n----------------------------------------\n\nTITLE: Importing Menubar Components - TypeScript\nDESCRIPTION: This snippet shows how to import all necessary sub-components for constructing a Menubar from the local UI library path. It includes components for the main bar, individual menus, items, sub-menus, separators, and specific item types like checkboxes and radio buttons.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/menubar.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport {\n  Menubar,\n  MenubarCheckboxItem,\n  MenubarContent,\n  MenubarItem,\n  MenubarMenu,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarSeparator,\n  MenubarShortcut,\n  MenubarSub,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarTrigger,\n} from '@/components/ui/menubar'\n```\n\n----------------------------------------\n\nTITLE: Previewing the Navigation Menu Component with shadcn/ui in TypeScript\nDESCRIPTION: This snippet exemplifies the inclusion or preview of the Navigation Menu component using shadcn/ui in a TypeScript React environment. It is typically used to quickly display or demonstrate the component’s appearance and interaction. Suitable for documentation or development previews. There are no explicit parameters or outputs beyond the visual output, and dependencies include shadcn/ui’s navigation-menu component and a React/Next.js setup.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/navigation-menu.mdx#_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\n```tsx file=<rootDir>/src/examples/ui/navigation-menu.tsx\n```\n```\n\n----------------------------------------\n\nTITLE: Using Context Menu Components - React/Next.js - TSX\nDESCRIPTION: This snippet demonstrates how to structure a context menu using the imported components. It includes examples of basic menu items, disabled items, items with shortcuts, submenus, checkbox items, and radio group items. The ContextMenuTrigger defines the area that, when right-clicked, displays the ContextMenuContent.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/context-menu.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<ContextMenu>\n  <ContextMenuTrigger className=\"flex h-[150px] w-[300px] items-center justify-center rounded-md border border-text border-dashed text-sm font-base\">\n    Right click here\n  </ContextMenuTrigger>\n  <ContextMenuContent className=\"w-64\">\n    <ContextMenuItem inset>\n      Back\n      <ContextMenuShortcut>⌘[</ContextMenuShortcut>\n    </ContextMenuItem>\n    <ContextMenuItem inset disabled>\n      Forward\n      <ContextMenuShortcut>⌘]</ContextMenuShortcut>\n    </ContextMenuItem>\n    <ContextMenuItem inset>\n      Reload\n      <ContextMenuShortcut>⌘R</ContextMenuShortcut>\n    </ContextMenuItem>\n    <ContextMenuSub>\n      <ContextMenuSubTrigger inset>More Tools</ContextMenuSubTrigger>\n      <ContextMenuSubContent className=\"w-48\">\n        <ContextMenuItem>\n          Save Page As...\n          <ContextMenuShortcut>⇧⌘S</ContextMenuShortcut>\n        </ContextMenuItem>\n        <ContextMenuItem>Create Shortcut...</ContextMenuItem>\n        <ContextMenuItem>Name Window...</ContextMenuItem>\n        <ContextMenuSeparator />\n        <ContextMenuItem>Developer Tools</ContextMenuItem>\n      </ContextMenuSubContent>\n    </ContextMenuSub>\n    <ContextMenuSeparator />\n    <ContextMenuCheckboxItem checked>\n      Show Bookmarks Bar\n      <ContextMenuShortcut>⌘⇧B</ContextMenuShortcut>\n    </ContextMenuCheckboxItem>\n    <ContextMenuCheckboxItem>Show Full URLs</ContextMenuCheckboxItem>\n    <ContextMenuSeparator />\n    <ContextMenuRadioGroup value=\"pedro\">\n      <ContextMenuLabel inset>People</ContextMenuLabel>\n      <ContextMenuSeparator />\n      <ContextMenuRadioItem value=\"pedro\">\n        Pedro Duarte\n      </ContextMenuRadioItem>\n      <ContextMenuRadioItem value=\"colm\">Colm Tuite</ContextMenuRadioItem>\n    </ContextMenuRadioGroup>\n  </ContextMenuContent>\n</ContextMenu>\n```\n\n----------------------------------------\n\nTITLE: Rendering a Default Slider - React (TSX)\nDESCRIPTION: This code snippet shows how to render the Slider component within JSX with initial and configuration props, such as defaultValue, max, and step. The properties set the initial slider value, maximum value, and increment steps, making the component configurable and interactive. It is required to have the Slider component installed and imported; the component outputs a single-thumb slider in the UI configured as specified.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/slider.mdx#_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\n<Slider defaultValue={[33]} max={100} step={1} />\n```\n\n----------------------------------------\n\nTITLE: Importing Collapsible Dependencies in React TypeScript\nDESCRIPTION: This snippet imports necessary dependencies for implementing the Collapsible UI component, including React, icon utilities, button, and collapsible components. Dependencies include the 'lucide-react' package for icons and internal project modules for the button and collapsible UI modules. The main parameters here are module imports, used to enable the main component's features. No direct input/output: this snippet should be placed at the beginning of the React file as preparation for using Collapsible.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/collapsible.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { ChevronsUpDown } from \"lucide-react\"\n\nimport * as React from \"react\"\n\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Collapsible,\n  CollapsibleContent,\n  CollapsibleTrigger,\n} from \"@/components/ui/collapsible\"\n```\n\n----------------------------------------\n\nTITLE: Building Timezone Selection Combobox in TSX\nDESCRIPTION: Implementation of the Combobox component specialized for timezone selection. This demonstrates how to adapt the component to handle timezone data and selection.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/combobox.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfile=<rootDir>/src/examples/ui/combobox/timezones.tsx\n```\n\n----------------------------------------\n\nTITLE: Installation of Radio Group Component\nDESCRIPTION: Provides the file path for including the Radio Group component in a project, indicating where the component implementation resides.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/radio-group.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Installation component=\"radio-group\">\n```tsx file=<rootDir>/src/components/ui/radio-group.tsx\n```\n</Installation>\n```\n\n----------------------------------------\n\nTITLE: Managing Selected Date State in React (TSX)\nDESCRIPTION: This React hook call initializes a state variable 'date' to store the currently selected date. It uses 'React.useState' and specifies the type as 'Date' (or undefined initially). The 'setDate' function is provided to update this state when a new date is selected by the user.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/date-picker.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst [date, setDate] = React.useState<Date>()\n```\n\n----------------------------------------\n\nTITLE: Rendering the Calendar Component in TSX\nDESCRIPTION: Illustrates the basic usage of the `Calendar` component in TSX. It's configured in `single` selection mode, binds the `selected` prop to the `date` state variable, and uses the `setDate` function for the `onSelect` event handler.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/calendar.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Calendar mode=\"single\" selected={date} onSelect={setDate} />\n```\n\n----------------------------------------\n\nTITLE: Locating Tabs Component Source Code in TSX\nDESCRIPTION: Provides the path to the core source code file for the Tabs component (`<rootDir>/src/components/ui/tabs.tsx`) within the `Installation` block. This indicates where the component's implementation resides.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/tabs.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx file=<rootDir>/src/components/ui/tabs.tsx\n```\n```\n\n----------------------------------------\n\nTITLE: Importing Required Components for Tabs in TypeScript\nDESCRIPTION: Imports various UI components, including `Tabs`, `TabsContent`, `TabsList`, `TabsTrigger`, `Card`, `Button`, `Input`, and `Label`, from the project's UI library (`@/components/ui/...`). These imports are prerequisites for using the Tabs component example.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/tabs.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\n```\n\n----------------------------------------\n\nTITLE: Triggering a Basic Sonner Toast on Button Click (tsx)\nDESCRIPTION: Demonstrates how to use the imported `Button` component and `toast` function. An `onClick` handler is attached to the button, which calls `toast()` to display a notification. The toast includes a title, description, and an optional action button with its own click handler.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/sonner.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Button\n  onClick={() =>\n    toast(\"Event has been created\", {\n      description: \"Sunday, December 03, 2023 at 9:00 AM\",\n      action: {\n        label: \"Undo\",\n        onClick: () => console.log(\"Undo\"),\n      },\n    })\n  }\n>\n  Show Toast\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Importing Breadcrumb and Dropdown Components (ts)\nDESCRIPTION: Imports necessary UI components from the project's component library to construct a breadcrumb with optional dropdown menu functionality. These imports are prerequisites for using the components in a React/Next.js environment.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/breadcrumb.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport {\n  Breadcrumb,\n  BreadcrumbEllipsis,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbList,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n} from \"@/components/ui/breadcrumb\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\n```\n\n----------------------------------------\n\nTITLE: Using Radio Group in React with TypeScript\nDESCRIPTION: Demonstrates how to import the RadioGroup and RadioGroupItem components along with Label from the UI library, and shows an example of a Radio Group with three options and default selection. It highlights label association and layout styling.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/radio-group.mdx#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { Label } from '@/components/ui/label'\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group'\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<RadioGroup defaultValue=\"comfortable\">\n  <div className=\"flex items-center space-x-2\">\n    <RadioGroupItem value=\"default\" id=\"r1\" />\n    <Label htmlFor=\"r1\">Default</Label>\n  </div>\n  <div className=\"flex items-center space-x-2\">\n    <RadioGroupItem value=\"comfortable\" id=\"r2\" />\n    <Label htmlFor=\"r2\">Comfortable</Label>\n  </div>\n  <div className=\"flex items-center space-x-2\">\n    <RadioGroupItem value=\"compact\" id=\"r3\" />\n    <Label htmlFor=\"r3\">Compact</Label>\n  </div>\n</RadioGroup>\n```\n\n----------------------------------------\n\nTITLE: Component Preview of Radio Group\nDESCRIPTION: Displays a preview of the Radio Group component in the documentation, referencing the source file for implementation details.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/radio-group.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<ComponentPreview component=\"radio-group\">\n```tsx file=<rootDir>/src/examples/ui/radio-group.tsx\n```\n</ComponentPreview>\n```\n\n----------------------------------------\n\nTITLE: Structuring Nested Resizable Layout (TSX)\nDESCRIPTION: Provides a concrete example of composing `ResizablePanelGroup`, `ResizablePanel`, and `ResizableHandle` in TSX to build a nested resizable layout. It demonstrates setting the direction, default panel sizes, adding handles, and nesting panel groups to create complex layouts. Requires the components to be imported first.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/resizable.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<ResizablePanelGroup\n  direction=\"horizontal\"\n  className=\"rounded-base max-w-md border-2 border-border text-main-foreground shadow-shadow\"\n>\n  <ResizablePanel defaultSize={50}>\n    <div className=\"flex h-[200px] items-center justify-center bg-main p-6\">\n      <span className=\"font-base\">One</span>\n    </div>\n  </ResizablePanel>\n  <ResizableHandle />\n  <ResizablePanel defaultSize={50}>\n    <ResizablePanelGroup direction=\"vertical\">\n      <ResizablePanel defaultSize={25}>\n        <div className=\"flex h-full items-center justify-center bg-main p-6\">\n          <span className=\"font-base\">Two</span>\n        </div>\n      </ResizablePanel>\n      <ResizableHandle />\n      <ResizablePanel defaultSize={75}>\n        <div className=\"flex h-full items-center justify-center bg-main p-6\">\n          <span className=\"font-base\">Three</span>\n        </div>\n      </ResizablePanel>\n    </ResizablePanelGroup>\n  </ResizablePanel>\n</ResizablePanelGroup>\n```\n\n----------------------------------------\n\nTITLE: Checkbox Component Definition (tsx)\nDESCRIPTION: This is a placeholder for the Checkbox component's source code. The actual component definition would reside in `<rootDir>/src/components/ui/checkbox.tsx` and is responsible for rendering the checkbox element and handling its checked state.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/checkbox.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx file=<rootDir>/src/components/ui/checkbox.tsx\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering Collapsible Panel with Trigger and Content in React TSX\nDESCRIPTION: This code renders a complete Collapsible component in React using TSX, structured with header, trigger button, main content, and expandable extra content. It depends on previously imported Button, Collapsible, CollapsibleTrigger, and CollapsibleContent components and the isOpen state. Props such as 'open', 'onOpenChange', and 'className' customize behavior and appearance. Inputs include user interaction (button click) to toggle visibility. Output is a styled animated panel; complex styling relies on utility-first CSS classes. Must be used inside a React functional component with access to isOpen and setIsOpen.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/collapsible.mdx#_snippet_2\n\nLANGUAGE: TSX\nCODE:\n```\n<Collapsible\n  open={isOpen}\n  onOpenChange={setIsOpen}\n  className=\"w-[350px] space-y-2\"\n>\n  <div className=\"rounded-base flex items-center justify-between space-x-4 border-2 border-border text-main-foreground bg-main px-4 py-2\">\n    <h4 className=\"text-sm font-heading\">\n      @peduarte starred 3 repositories\n    </h4>\n    <CollapsibleTrigger asChild>\n      <Button\n        variant=\"noShadow\"\n        size=\"sm\"\n        className=\"w-9 bg-secondary-background text-foreground p-0\"\n      >\n        <ChevronsUpDown className=\"size-4\" />\n        <span className=\"sr-only\">Toggle</span>\n      </Button>\n    </CollapsibleTrigger>\n  </div>\n  <div className=\"rounded-base border-2 border-border bg-main px-4 py-3 font-mono font-base text-main-foreground text-sm\">\n    @radix-ui/primitives\n  </div>\n  <CollapsibleContent className=\"space-y-2 text-main-foreground font-base\">\n    <div className=\"rounded-base border-2 border-border bg-main px-4 py-3 font-mono text-sm\">\n      @radix-ui/colors\n    </div>\n    <div className=\"rounded-base border-2 border-border bg-main px-4 py-3 font-mono text-sm\">\n      @stitches/react\n    </div>\n  </CollapsibleContent>\n</Collapsible>\n```\n\n----------------------------------------\n\nTITLE: Importing Resizable Components (TypeScript)\nDESCRIPTION: This snippet demonstrates the required import statement for bringing `ResizableHandle`, `ResizablePanel`, and `ResizablePanelGroup` into a file. These components are sourced from the local UI library path `'@/components/ui/resizable'`. This import is essential before using the components in JSX.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/resizable.mdx#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport {\n  ResizableHandle,\n  ResizablePanel,\n  ResizablePanelGroup,\n} from '@/components/ui/resizable'\n```\n\n----------------------------------------\n\nTITLE: Locating Resizable Component Source (TSX)\nDESCRIPTION: Points to the source code file (`/src/components/ui/resizable.tsx`) where the Resizable component is implemented. This is relevant for users who need to install or customize the component by accessing its underlying code.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/resizable.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx file=<rootDir>/src/components/ui/resizable.tsx\n```\n```\n\n----------------------------------------\n\nTITLE: Checkbox Import Statement (ts)\nDESCRIPTION: This code snippet shows how to import the Checkbox component from the '@/components/ui/checkbox' module. This import statement is necessary to use the Checkbox component in other parts of the application. It assumes that the Checkbox component is exported from the specified module.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/checkbox.mdx#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { Checkbox } from '@/components/ui/checkbox'\n```\n\n----------------------------------------\n\nTITLE: Importing Badge Component in TypeScript\nDESCRIPTION: Demonstrates the import statement to include the Badge component from the local components directory, facilitating its usage within React and TypeScript files. This import is a prerequisite to rendering the Badge component in JSX code.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/badge.mdx#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { Badge } from '@/components/ui/badge'\n```\n\n----------------------------------------\n\nTITLE: Basic Select Component Usage (TSX)\nDESCRIPTION: Demonstrates the basic structure of the Select component using TSX. It includes a SelectTrigger to open the dropdown (with a placeholder), SelectContent to hold the options, a SelectGroup with a SelectLabel, and several SelectItem elements representing the choices.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/select.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Select>\n  <SelectTrigger className=\"w-[180px]\">\n    <SelectValue placeholder=\"Select a fruit\" />\n  </SelectTrigger>\n  <SelectContent>\n    <SelectGroup>\n      <SelectLabel>Fruits</SelectLabel>\n      <SelectItem value=\"apple\">Apple</SelectItem>\n      <SelectItem value=\"banana\">Banana</SelectItem>\n      <SelectItem value=\"blueberry\">Blueberry</SelectItem>\n      <SelectItem value=\"grapes\">Grapes</SelectItem>\n      <SelectItem value=\"pineapple\">Pineapple</SelectItem>\n    </SelectGroup>\n  </SelectContent>\n</Select>\n```\n\n----------------------------------------\n\nTITLE: Using the Avatar Component - TypeScript\nDESCRIPTION: This code snippet demonstrates the basic usage of the Avatar component.  It utilizes `AvatarImage` to display an image from a provided URL and `AvatarFallback` to show a fallback value. The `src` prop in `AvatarImage` accepts the image URL, the `alt` prop provides the alternative text, and the `AvatarFallback` displays text if the image is not available. This allows for the presentation of user avatars.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/avatar.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Avatar>\n  <AvatarImage src=\"https://github.com/shadcn.png\" alt=\"@shadcn\" />\n  <AvatarFallback>CN</AvatarFallback>\n</Avatar>\n```\n\n----------------------------------------\n\nTITLE: Custom Width and Height Star Component in React (TypeScript)\nDESCRIPTION: Illustrates setting custom width and height dimensions for the star SVG via the `size` prop. This example demonstrates how to control the rendered star's pixel dimensions, enabling the component to fit different UI layouts. The `size` prop is a number representing both width and height in pixels. Other inherited SVG props may also be used.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/docs/stars.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx file=<rootDir>/src/examples/stars/docs/custom-width-height.tsx\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering Progress Component with Custom Width\nDESCRIPTION: Demonstrates how to render the Progress component with a specific value and custom width. This example sets the progress value from state and applies a width of 60% to the component.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/progress.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Progress value={progress} className=\"w-[60%]\" />\n```\n\n----------------------------------------\n\nTITLE: Using Skeleton Component in React with TSX\nDESCRIPTION: Provides an example of using the Skeleton component inside a React component, applying Tailwind CSS utility classes for styling. The snippet shows a flexible horizontal layout with a circular skeleton and two rectangular placeholders, simulating loading content. It requires the Skeleton component to be imported and a CSS framework like Tailwind for styles.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/skeleton.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<div className=\"flex items-center space-x-4\">\n  <Skeleton className=\"h-12 w-12 rounded-full\" />\n  <div className=\"space-y-2\">\n    <Skeleton className=\"h-4 sm:w-[250px] w-[100px]\" />\n    <Skeleton className=\"h-4 sm:w-[200px] w-[100px]\" />\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Applying Dark Mode Color to Star Component in React (TypeScript)\nDESCRIPTION: Demonstrates usage of the star component with colors designed for dark mode. This may involve passing specific color strings for the `color` prop to ensure visibility and aesthetic consistency in dark-themed UIs. Requires understanding of theme-based styling and React props management.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/docs/stars.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx file=<rootDir>/src/examples/stars/docs/dark-mode.tsx\n```\n```\n\n----------------------------------------\n\nTITLE: Importing Skeleton Component using TypeScript\nDESCRIPTION: Demonstrates how to import the Skeleton component from the project's UI components directory. This snippet is intended for use in any TypeScript file where the Skeleton placeholder is needed, ensuring type safety and proper module resolution.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/skeleton.mdx#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { Skeleton } from '@/components/ui/skeleton'\n```\n\n----------------------------------------\n\nTITLE: Tooltip Core Component (tsx)\nDESCRIPTION: This snippet represents the core implementation of the Tooltip component. It shows the underlying structure and functionality of the component.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/tooltip.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx file=<rootDir>/src/components/ui/tooltip.tsx\n```\n```\n\n----------------------------------------\n\nTITLE: Dropdown Menu Usage and Examples\nDESCRIPTION: This snippet presents different usage scenarios of the dropdown menu, highlighting the default configuration, checkbox integration, and radio button group, with respective code examples for each case.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/dropdown-menu.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n<ComponentPreview component=\"dropdown-menu\">\n  ```tsx file=<rootDir>/src/examples/ui/dropdown-menu/index.tsx\n  ```\n</ComponentPreview>\n\n### Checkboxes\n\n<ComponentPreview component=\"dropdown-menu\" example=\"checkboxes\">\n  ```tsx file=<rootDir>/src/examples/ui/dropdown-menu/checkboxes.tsx\n  ```\n</ComponentPreview>\n\n### Radio Group\n\n<ComponentPreview component=\"dropdown-menu\" example=\"radio\">\n  ```tsx file=<rootDir>/src/examples/ui/dropdown-menu/radio.tsx\n  ```\n</ComponentPreview>\n```\n\n----------------------------------------\n\nTITLE: Upgrading Auxiliary UI and Utility Dependencies with pnpm - Bash\nDESCRIPTION: This pnpm command batch-upgrades several related frontend dependencies to their latest versions. Dependencies: pnpm must be initialized in the project. Targeted packages include all '@radix-ui/*' modules, cmdk, lucide-react, recharts, tailwind-merge, and clsx. Parameters: '--latest' ensures the newest package versions are installed. This command helps modernize the project's UI and utility toolset for compatibility with Tailwind v4.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/docs/migrating-from-v3.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm up \"@radix-ui/*\" cmdk lucide-react recharts tailwind-merge clsx --latest\n\n```\n\n----------------------------------------\n\nTITLE: JSX Implementation of Dropdown Menu Structure\nDESCRIPTION: This snippet implements the dropdown menu structure in JSX, including trigger button, menu items with icons, shortcuts, submenus with portal content, and disabled items. It demonstrates how to assemble the menu's hierarchy for user interaction and accessibility.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/dropdown-menu.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n<DropdownMenu>\n  <DropdownMenuTrigger asChild>\n    <Button example={'noShadow'}>Open</Button>\n  </DropdownMenuTrigger>\n  <DropdownMenuContent className=\"w-56\">\n    <DropdownMenuLabel>My Account</DropdownMenuLabel>\n    <DropdownMenuSeparator />\n    <DropdownMenuGroup>\n      <DropdownMenuItem>\n        <User />\n        <span>Profile</span>\n        <DropdownMenuShortcut>⇧⌘P</DropdownMenuShortcut>\n      </DropdownMenuItem>\n      <DropdownMenuItem>\n        <CreditCard />\n        <span>Billing</span>\n        <DropdownMenuShortcut>⌘B</DropdownMenuShortcut>\n      </DropdownMenuItem>\n      <DropdownMenuItem>\n        <Settings />\n        <span>Settings</span>\n        <DropdownMenuShortcut>⌘S</DropdownMenuShortcut>\n      </DropdownMenuItem>\n      <DropdownMenuItem>\n        <Keyboard />\n        <span>Keyboard shortcuts</span>\n        <DropdownMenuShortcut>⌘K</DropdownMenuShortcut>\n      </DropdownMenuItem>\n    </DropdownMenuGroup>\n    <DropdownMenuSeparator />\n    <DropdownMenuGroup>\n      <DropdownMenuItem>\n        <Users />\n        <span>Team</span>\n      </DropdownMenuItem>\n      <DropdownMenuSub>\n        <DropdownMenuSubTrigger>\n          <UserPlus />\n          <span>Invite users</span>\n        </DropdownMenuSubTrigger>\n        <DropdownMenuPortal>\n          <DropdownMenuSubContent>\n            <DropdownMenuItem>\n              <Mail />\n              <span>Email</span>\n            </DropdownMenuItem>\n            <DropdownMenuItem>\n              <MessageSquare />\n              <span>Message</span>\n            </DropdownMenuItem>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem>\n              <PlusCircle />\n              <span>More...</span>\n            </DropdownMenuItem>\n          </DropdownMenuSubContent>\n        </DropdownMenuPortal>\n      </DropdownMenuSub>\n      <DropdownMenuItem>\n        <Plus />\n        <span>New Team</span>\n        <DropdownMenuShortcut>⌘+T</DropdownMenuShortcut>\n      </DropdownMenuItem>\n    </DropdownMenuGroup>\n    <DropdownMenuSeparator />\n    <DropdownMenuItem>\n      <Github />\n      <span>GitHub</span>\n    </DropdownMenuItem>\n    <DropdownMenuItem>\n      <LifeBuoy />\n      <span>Support</span>\n    </DropdownMenuItem>\n    <DropdownMenuItem disabled>\n      <Cloud />\n      <span>API</span>\n    </DropdownMenuItem>\n    <DropdownMenuSeparator />\n    <DropdownMenuItem>\n      <LogOut />\n      <span>Log out</span>\n      <DropdownMenuShortcut>⇧⌘Q</DropdownMenuShortcut>\n    </DropdownMenuItem>\n  </DropdownMenuContent>\n</DropdownMenu>\n```\n\n----------------------------------------\n\nTITLE: Rendering Resizable Component Example (TSX)\nDESCRIPTION: Refers to an external file (`/src/examples/ui/resizable.tsx`) that provides a complete example implementation of the Resizable component. This file is used within a component preview context to visually demonstrate the component's usage and appearance.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/resizable.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx file=<rootDir>/src/examples/ui/resizable.tsx\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Combobox Component in TSX\nDESCRIPTION: Default implementation of the Combobox component that provides autocomplete input functionality. This snippet demonstrates the basic usage pattern for the component.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/combobox.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nfile=<rootDir>/src/examples/ui/combobox/index.tsx\n```\n\n----------------------------------------\n\nTITLE: Removing tailwindcss-animate Dependency - Bash\nDESCRIPTION: This command removes the deprecated 'tailwindcss-animate' package from your project. Dependency: Must use pnpm as the package manager, and the package should be present in your dependencies. Input: none. Output: Deletes 'tailwindcss-animate' from your package.json and node_modules, ensuring there's no conflict with the updated animation approach.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/docs/migrating-from-v3.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm remove tailwindcss-animate\n\n```\n\n----------------------------------------\n\nTITLE: Importing Select Component Modules (TypeScript)\nDESCRIPTION: Imports the necessary components (Select, SelectContent, SelectGroup, SelectItem, SelectLabel, SelectTrigger, SelectValue) from the project's UI library path ('@/components/ui/select') to enable the use of the Select dropdown functionality.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/select.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectLabel,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select'\n```\n\n----------------------------------------\n\nTITLE: Creating User Selection Combobox in TSX\nDESCRIPTION: Specialized implementation of the Combobox component for selecting users from a list. This example shows how to adapt the component for user selection scenarios.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/combobox.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfile=<rootDir>/src/examples/ui/combobox/users.tsx\n```\n\n----------------------------------------\n\nTITLE: Rendering ScrollArea Component - TypeScript\nDESCRIPTION: This snippet demonstrates the rendering of the ScrollArea component, including styling with CSS classes. The component is configured to have rounded corners, a fixed height and width, and specific text and background colors. It also contains example text content. This code snippet showcases how to use the ScrollArea component with styling applied.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/scroll-area.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<ScrollArea className=\"rounded-base h-[200px] w-[350px] text-main-foreground border-2 border-border bg-main p-4 shadow-shadow\">\n  Jokester began sneaking into the castle in the middle of the night and\n  leaving jokes all over the place: under the king&apos;s pillow, in his\n  soup, even in the royal toilet. The king was furious, but he couldn&apos;t\n  seem to stop Jokester. And then, one day, the people of the kingdom\n  discovered that the jokes left by Jokester were so funny that they\n  couldn&apos;t help but laugh. And once they started laughing, they\n  couldn&apos;t stop.\n</ScrollArea>\n```\n\n----------------------------------------\n\nTITLE: TypeScript import statement for Marquee component\nDESCRIPTION: Shows how to import the Marquee component from its local UI components directory for use within a React application.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/marquee.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport Marquee from '@/components/ui/marquee'\n```\n\n----------------------------------------\n\nTITLE: Rendering Various Badge Examples Using React and TSX\nDESCRIPTION: Contains multiple component preview snippets demonstrating different variants of the Badge component, including default, neutral, and with-icon styles. Each example is prepared in separate TSX files to show how badges can be rendered with different appearances and optional icons, formatted to integrate with the shadcn UI design system.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/badge.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: CSS Keyframes for Marquee Animation\nDESCRIPTION: Defines two keyframe animations, 'marquee' and 'marquee2', used for creating seamless horizontal scrolling effects. These should be added to the theme's inline CSS section for animation setup.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/marquee.mdx#_snippet_3\n\nLANGUAGE: CSS\nCODE:\n```\n--animate-marquee: marquee 5s linear infinite;\n--animate-marquee2: marquee2 5s linear infinite;\n\n@keyframes marquee {\n  0% {\n    transform: translateX(0%);\n  }\n  100% {\n    transform: translateX(-100%);\n  }\n}\n\n@keyframes marquee2 {\n  0% {\n    transform: translateX(100%);\n  }\n  100% {\n    transform: translateX(0%);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Controlled Slider Example - React (TSX)\nDESCRIPTION: This snippet shows an example of the Slider component used in a controlled React state scenario, where value changes are managed by component state. It is ideal for cases requiring programmatic control and feedback. Required dependencies are React hooks (like useState), and the output is a Slider whose value is synchronized with React state.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/slider.mdx#_snippet_6\n\nLANGUAGE: TSX\nCODE:\n```\n// File: <rootDir>/src/examples/ui/slider/controlled.tsx\n// Example: Controlled usage of Slider\n```\n\n----------------------------------------\n\nTITLE: Custom Stroke Color for Dark Mode Star Component in React (TypeScript)\nDESCRIPTION: Shows how to specify a stroke color suited for dark mode themes, enabling differentiation of the star outline in low-light or dark UI environments. This snippet is useful for enhanced theming control and accessibility in React apps.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/docs/stars.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx file=<rootDir>/src/examples/stars/docs/dark-mode-stroke.tsx\n```\n```\n\n----------------------------------------\n\nTITLE: Slider Component Source - React (TSX)\nDESCRIPTION: This snippet references the main source code for the Slider component, effectively serving as the implementation file within the project's UI components directory. It includes all logic, props, and design-related behaviors necessary for the component to function. Dependencies likely include React and any relevant style or utility libraries, and it outputs a customizable Slider suitable for integration into applications.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/slider.mdx#_snippet_2\n\nLANGUAGE: TSX\nCODE:\n```\n// File: <rootDir>/src/components/ui/slider.tsx\n// Main source code for Slider component\n```\n\n----------------------------------------\n\nTITLE: Importing Button Component (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import the Button component for usage in other parts of the application.  It assumes that the Button component is located in the '@/components/ui/button' directory.  There are no required dependencies beyond the Button component itself.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/button.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { Button } from '@/components/ui/button'\n```\n\n----------------------------------------\n\nTITLE: Displaying the Range Calendar Example in TSX\nDESCRIPTION: References the file path containing the code for the range selection example of the Calendar component, demonstrating how to select a date range.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/calendar.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nfile=<rootDir>/src/examples/ui/calendar/range.tsx\n```\n\n----------------------------------------\n\nTITLE: Previewing Tabs Component Example in TSX\nDESCRIPTION: Displays a preview of the Tabs component using the `ComponentPreview` component, referencing the example code located at `<rootDir>/src/examples/ui/tabs.tsx`. This snippet demonstrates how to integrate the preview into documentation.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/tabs.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx file=<rootDir>/src/examples/ui/tabs.tsx\n```\n```\n\n----------------------------------------\n\nTITLE: Star Component with Custom Stroke Color in React (TypeScript)\nDESCRIPTION: Shows usage of the Neobrutalism Stars component where a stroke color is specified. This modifies the outline color of the star path, allowing for visual customization beyond the fill color. Dependencies include React and the star component. Parameters typically include `stroke` as a string representing the color value used for the star's path stroke.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/docs/stars.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx file=<rootDir>/src/examples/stars/docs/with-stroke.tsx\n```\n```\n\n----------------------------------------\n\nTITLE: Slider Component Usage Example - React (TSX)\nDESCRIPTION: This snippet refers to an example of how the Slider component is used in a real application context. It provides practical implementation details and can serve as a template or reference for developers. Prerequisites include the Slider component being properly implemented and exported; the snippet showcases how to embed and interact with the Slider within a page or feature.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/slider.mdx#_snippet_3\n\nLANGUAGE: TSX\nCODE:\n```\n// File: <rootDir>/src/examples/ui/slider/index.tsx\n// Example: Basic Slider usage\n```\n\n----------------------------------------\n\nTITLE: Upgrading React Dependencies with Next.js Codemod - Bash\nDESCRIPTION: This Bash command runs the Next.js codemod for upgrading React and React DOM to their latest versions in a Next.js project. Dependency: The @next/codemod package (canary release) must be accessible via npx. Key parameter: 'upgrade latest' instructs the codemod to perform the upgrade process. Input: none, execute in the terminal at the project root. Output: updates dependencies and potentially modifies files in place. Ensure to test your app after the upgrade as breaking changes may apply.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/docs/migrating-from-v3.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @next/codemod@canary upgrade latest\n\n```\n\n----------------------------------------\n\nTITLE: Upgrading React and React DOM with pnpm - Bash\nDESCRIPTION: This command uses pnpm to upgrade both react and react-dom packages to their latest versions. Dependencies: pnpm must be installed and the project should already use it as the package manager. Parameters: 'up' triggers the upgrade, package names specify targets, '--latest' fetches the newest available versions. Input: none; Output: modifies your package.json. You may need to check for breaking changes after upgrading.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/docs/migrating-from-v3.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm up react react-dom --latest\n\n```\n\n----------------------------------------\n\nTITLE: Image Card Component Usage - JSX\nDESCRIPTION: This JSX snippet demonstrates the usage of the ImageCard component. It displays an image with a caption using the provided imageUrl and caption props. The component takes `caption` (string) and `imageUrl` (string) as props.  The output is a rendered image card in the UI. There are no apparent limitations presented within this example.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/image-card.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<ImageCard\n  caption=\"Image\"\n  imageUrl=\"https://hips.hearstapps.com/hmg-prod/images/flowers-trees-and-bushes-reach-their-peak-of-full-bloom-in-news-photo-1678292967.jpg?resize=300:*\"\n></ImageCard>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Tabs Interface in TSX\nDESCRIPTION: Demonstrates a practical example of using the `Tabs` component in TSX. It creates a tabbed interface with \"Account\" and \"Password\" tabs, each displaying content within a `Card` component, utilizing `TabsList`, `TabsTrigger`, and `TabsContent`.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/tabs.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Tabs defaultValue=\"account\" className=\"max-w-[400px]\">\n  <TabsList className=\"grid w-full grid-cols-2\">\n    <TabsTrigger value=\"account\">Account</TabsTrigger>\n    <TabsTrigger value=\"password\">Password</TabsTrigger>\n  </TabsList>\n  <TabsContent value=\"account\">\n    <Card>\n      <CardHeader>\n        <CardTitle>Account</CardTitle>\n        <CardDescription>\n          Make changes to your account here. Click save when you&apos;re\n          done.\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"grid gap-6\">\n        <div className=\"grid gap-3\">\n          <Label htmlFor=\"tabs-demo-name\">Name</Label>\n          <Input id=\"tabs-demo-name\" defaultValue=\"Pedro Duarte\" />\n        </div>\n        <div className=\"grid gap-3\">\n          <Label htmlFor=\"tabs-demo-username\">Username</Label>\n          <Input id=\"tabs-demo-username\" defaultValue=\"@peduarte\" />\n        </div>\n      </CardContent>\n      <CardFooter>\n        <Button className=\"w-full\" variant=\"neutral\">\n          Save changes\n        </Button>\n      </CardFooter>\n    </Card>\n  </TabsContent>\n  <TabsContent value=\"password\">\n    <Card>\n      <CardHeader>\n        <CardTitle>Password</CardTitle>\n        <CardDescription>\n          Change your password here. After saving, you&apos;ll be logged\n          out.\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"grid gap-6\">\n        <div className=\"grid gap-3\">\n          <Label htmlFor=\"tabs-demo-current\">Current password</Label>\n          <Input id=\"tabs-demo-current\" type=\"password\" />\n        </div>\n        <div className=\"grid gap-3\">\n          <Label htmlFor=\"tabs-demo-new\">New password</Label>\n          <Input id=\"tabs-demo-new\" type=\"password\" />\n        </div>\n      </CardContent>\n      <CardFooter>\n        <Button className=\"w-full\" variant=\"neutral\">\n          Save password\n        </Button>\n      </CardFooter>\n    </Card>\n  </TabsContent>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Rendering Controlled Form using React Hook Form and Custom UI Components in TSX\nDESCRIPTION: Renders a controlled form wrapped in a custom Form provider passing React Hook Form's methods. The internal form uses 'handleSubmit' for submission and includes a FormField bound to the 'username' input, which renders a FormItem containing the label, input control, description, and validation message components. A submit button triggers form submission. This layout facilitates user interaction with validation feedback and integrates custom UI components for styling and accessibility.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/form.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Form {...form}>\\n  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\\n    <FormField\\n      control={form.control}\\n      name=\"username\"\\n      render={({ field }) => (\\n        <FormItem>\\n          <FormLabel>Username</FormLabel>\\n          <FormControl>\\n            <Input placeholder=\"ekmas\" {...field} />\\n          </FormControl>\\n          <FormDescription>This is your public display name.</FormDescription>\\n          <FormMessage />\\n        </FormItem>\\n      )}\\n    />\\n    <Button type=\"submit\">Submit</Button>\\n  </form>\\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Default Star Component Usage with React (TypeScript)\nDESCRIPTION: Demonstrates how to render the Neobrutalism Stars component with default properties using React and TypeScript. Assumes the component is installed correctly and imported. This example does not specify any props, so the star uses fallback colors and default dimensions. Expected output is a star SVG rendered with the default color `currentColor`.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/docs/stars.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx file=<rootDir>/src/examples/stars/docs/default.tsx\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering Default Badge Component with React and TSX\nDESCRIPTION: Illustrates how to render a default Badge component in JSX using TypeScript syntax. This basic usage example creates a badge displaying the text 'Badge'. It serves as a minimal instance to render badge UI elements and can be extended with additional props or styling.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/badge.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Badge>Badge</Badge>\n```\n\n----------------------------------------\n\nTITLE: Defining Form Schema and Initializing React Hook Form with Zod in TypeScript\nDESCRIPTION: Defines a Zod schema for form validation specifying a 'username' field that requires a minimum of 2 characters, including a custom error message. Then, initializes React Hook Form with the inferred schema type, using 'zodResolver' to enable Zod-based validation. It sets default values for the form fields and specifies a submission handler function that logs submitted values. This setup ensures strong typing and schema validation integration in form handling.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/form.mdx#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nconst formSchema = z.object({\\n  username: z.string().min(2, {\\n    message: 'Username must be at least 2 characters.',\\n  }),\\n})\\n\\nconst form = useForm<z.infer<typeof formSchema>>({\\n  resolver: zodResolver(formSchema),\\n  defaultValues: {\\n    username: \"\",\\n  },\\n});\\n\\nfunction onSubmit(values: z.infer<typeof formSchema>) {\\n  console.log(values);\\n}\n```\n\n----------------------------------------\n\nTITLE: Using Hover Card with Trigger and Content in React (TSX)\nDESCRIPTION: This example illustrates how to compose the Hover Card UI component with a trigger and content element in a React application using TSX. The HoverCardTrigger wraps a Button (with 'noShadow' as the example prop) and displays a custom preview message inside HoverCardContent when the trigger is hovered. Requires previously imported components and assumes correct installation and TypeScript support. Inputs are the trigger element and children; the output is a rendered interactive Hover Card displaying additional information on hover.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/hover-card.mdx#_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\n<HoverCard>\n  <HoverCardTrigger asChild>\n    <Button example=\"noShadow\">Hover</Button>\n  </HoverCardTrigger>\n  <HoverCardContent>\n    The React Framework – created and maintained by @vercel.\n  </HoverCardContent>\n</HoverCard>\n```\n\n----------------------------------------\n\nTITLE: Importing Drawer and Associated Components in TypeScript\nDESCRIPTION: This snippet demonstrates the necessary import statements for integrating the Drawer component and related subcomponents (such as DrawerClose, DrawerContent, DrawerDescription, etc.) into your React TypeScript application. The snippet assumes a project structure where UI components are organized under '@/components/ui/'. It requires the Drawer module and all listed dependencies to be installed and correctly exported from their respective paths. Expected output is an available suite of Drawer components for use within a React project.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/drawer.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Button } from '@/components/ui/button'\nimport {\n  Drawer,\n  DrawerClose,\n  DrawerContent,\n  DrawerDescription,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerTitle,\n  DrawerTrigger,\n} from '@/components/ui/drawer'\n```\n\n----------------------------------------\n\nTITLE: Implementing a Profile Edit Dialog in React\nDESCRIPTION: Demonstrates a complete implementation of a dialog for editing user profile information. The dialog includes a form with input fields for name and username, with cancel and save buttons in the footer.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/dialog.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Dialog>\n  <form>\n    <DialogTrigger asChild>\n      <Button>Edit Profile</Button>\n    </DialogTrigger>\n    <DialogContent className=\"sm:max-w-[425px]\">\n      <DialogHeader>\n        <DialogTitle>Edit profile</DialogTitle>\n        <DialogDescription>\n          Make changes to your profile here. Click save when you&apos;re\n          done.\n        </DialogDescription>\n      </DialogHeader>\n      <div className=\"grid gap-4\">\n        <div className=\"grid gap-3\">\n          <Label htmlFor=\"name-1\">Name</Label>\n          <Input id=\"name-1\" name=\"name\" defaultValue=\"Pedro Duarte\" />\n        </div>\n        <div className=\"grid gap-3\">\n          <Label htmlFor=\"username-1\">Username</Label>\n          <Input id=\"username-1\" name=\"username\" defaultValue=\"@peduarte\" />\n        </div>\n      </div>\n      <DialogFooter>\n        <DialogClose asChild>\n          <Button variant=\"neutral\">Cancel</Button>\n        </DialogClose>\n        <Button type=\"submit\">Save changes</Button>\n      </DialogFooter>\n    </DialogContent>\n  </form>\n</Dialog>\n```\n\n----------------------------------------\n\nTITLE: Textarea Component Example (tsx)\nDESCRIPTION: This snippet demonstrates the basic usage of the Textarea component within a React application using TypeScript.  It renders a textarea element.  The component's implementation is assumed to be defined elsewhere.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/textarea.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Textarea />\n```\n\n----------------------------------------\n\nTITLE: Importing React Hook Form, Zod, and UI Components in TypeScript\nDESCRIPTION: This snippet imports essential dependencies for form building and validation, including 'useForm' from React Hook Form, 'zodResolver' from @hookform/resolvers/zod for schema validation integration, and UI components such as Button, Form elements, and Input from the project's component library. These imports serve as prerequisites for building a strongly-typed form with validation and styled components.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/form.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { zodResolver } from '@hookform/resolvers/zod'\\nimport { useForm } from 'react-hook-form'\\nimport { z } from 'zod'\\n\\nimport { Button } from '@/components/ui/button'\\nimport {\\n  Form,\\n  FormControl,\\n  FormDescription,\\n  FormField,\\n  FormItem,\\n  FormLabel,\\n  FormMessage,\\n} from '@/components/ui/form'\\nimport { Input } from '@/components/ui/input'\n```\n\n----------------------------------------\n\nTITLE: File Input Example Reference (TSX)\nDESCRIPTION: Placeholder referencing the TSX file that demonstrates how to use the Input component specifically for file uploads.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/input.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nfile=<rootDir>/src/examples/ui/input/file.tsx\n```\n\n----------------------------------------\n\nTITLE: Importing Data Table Demo Component in React with TypeScript\nDESCRIPTION: This snippet demonstrates how to import the DataTableDemo component from the project's components directory using TypeScript. It requires that the 'data-table.tsx' component from shadcn-ui has been successfully copied to '@/components/ui/data-table'. The import enables usage of the table in other parts of a TypeScript-based React application. The expected input is a valid ES Module path; output is a local reference to the DataTableDemo component.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/data-table.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport DataTableDemo from '@/components/ui/data-table'\n```\n\n----------------------------------------\n\nTITLE: Importing React Command Components and Icons in TypeScript\nDESCRIPTION: This snippet imports necessary React components and icons used to build the command menu UI. It includes icon components from the Lucide React library and various composable UI parts like CommandDialog, CommandInput, CommandList, and others from the local '@/components/ui/command' module. These imports are prerequisites for constructing the command menu interface.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/command.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport {\n  Calculator,\n  Calendar,\n  CreditCard,\n  Settings,\n  Smile,\n  User,\n} from \"lucide-react\"\n\nimport * as React from \"react\"\n\nimport {\n  CommandDialog,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n  CommandSeparator,\n  CommandShortcut,\n} from \"@/components/ui/command\"\n```\n\n----------------------------------------\n\nTITLE: Basic Pagination Structure - TSX\nDESCRIPTION: Demonstrates the fundamental JSX structure for rendering a pagination control. It shows how to use the imported components like Pagination, PaginationContent, and PaginationItem, incorporating navigation links (PaginationLink, PaginationPrevious, PaginationNext) and an ellipsis (PaginationEllipsis) within the layout.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/pagination.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Pagination>\n  <PaginationContent>\n    <PaginationItem>\n      <PaginationPrevious href=\"#\" />\n    </PaginationItem>\n    <PaginationItem>\n      <PaginationLink href=\"#\">1</PaginationLink>\n    </PaginationItem>\n    <PaginationItem>\n      <PaginationLink href=\"#\" isActive>\n        2\n      </PaginationLink>\n    </PaginationItem>\n    <div className=\"items-center md:flex hidden\">\n      <PaginationItem>\n        <PaginationLink href=\"#\">3</PaginationLink>\n      </PaginationItem>\n      <PaginationItem>\n        <PaginationEllipsis />\n      </PaginationItem>\n    </div>\n    <PaginationItem>\n      <PaginationNext href=\"#\" />\n    </PaginationItem>\n  </PaginationContent>\n</Pagination>\n```\n\n----------------------------------------\n\nTITLE: Installing tw-animate-css for Updated Animation Support - Bash\nDESCRIPTION: This command installs 'tw-animate-css', the recommended replacement for the deprecated 'tailwindcss-animate' plugin. Dependency: pnpm package manager must be used for your project. This plugin integrates with Tailwind for modern animation utility classes. Required input: none. Output: Adds 'tw-animate-css' to your project's dependencies.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/docs/migrating-from-v3.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm add tw-animate-css\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Calendar Date State with useState in TSX\nDESCRIPTION: Shows how to initialize the state variable `date` using the `useState` hook to hold the selected date. It's typed to accept a `Date` object or `undefined` and defaults to the current date.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/calendar.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst [date, setDate] = useState<Date | undefined>(new Date())\n```\n\n----------------------------------------\n\nTITLE: Rendering Data Table Demo Component in React (TSX)\nDESCRIPTION: This snippet shows how to render the imported DataTableDemo component in a React JSX/TSX file. It assumes the component has been imported and any required installation steps for TanStack Table and shadcn-ui components have been completed. There are no parameters required for this basic usage, and it produces a full-featured data table interface as output.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/data-table.mdx#_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\n<DataTableDemo />\n```\n\n----------------------------------------\n\nTITLE: Importing InputOTP Component in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import the necessary components for the InputOTP component. It imports `InputOTP`, `InputOTPGroup`, `InputOTPSeparator`, and `InputOTPSlot` from a specific path within the project's component structure. This step is crucial for using the InputOTP component within other parts of the application.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/input-otp.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport {\n  InputOTP,\n  InputOTPGroup,\n  InputOTPSeparator,\n  InputOTPSlot,\n} from '@/components/ui/input-otp'\n```\n\n----------------------------------------\n\nTITLE: Initializing Collapsible State with React useState in TSX\nDESCRIPTION: This snippet demonstrates initializing a boolean state variable 'isOpen' for managing Collapsible open/close state using React's useState hook. It requires the 'react' module as a dependency and should be declared within a functional component. It outputs an array with the state value and setter function, which are used as controlled properties of the Collapsible component. Input is an initial state (false), no special constraints.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/collapsible.mdx#_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\nconst [isOpen, setIsOpen] = React.useState(false)\n```\n\n----------------------------------------\n\nTITLE: Using Label with Checkbox Component in TSX\nDESCRIPTION: Provides a practical example of using the `Label` component in conjunction with a `Checkbox` component within a TSX file. The `htmlFor` attribute on the `Label` links it to the `Checkbox` using the corresponding `id` ('terms'), enhancing accessibility and user experience.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/label.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<div>\n  <div className=\"flex items-center space-x-2\">\n    <Checkbox id=\"terms\" />\n    <Label htmlFor=\"terms\">Accept terms and conditions</Label>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing Skeleton Component with TypeScript and TSX\nDESCRIPTION: Shows the file location and basic placeholder for installing the Skeleton component within the project. It mainly references the source file from which the component is exported. No dependencies other than standard React and TypeScript setup are implied.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/skeleton.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx file=<rootDir>/src/components/ui/skeleton.tsx\n```\n```\n\n----------------------------------------\n\nTITLE: Importing Sonner Toast Function and Button Component (ts)\nDESCRIPTION: Imports the core `toast` function from the 'sonner' library and the `Button` component from the project's UI components directory. These imports are prerequisites for triggering toast notifications.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/sonner.mdx#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { toast } from \"sonner\"\n\nimport { Button } from \"@/components/ui/button\"\n```\n\n----------------------------------------\n\nTITLE: Installation: Sonner Component Source Location (tsx)\nDESCRIPTION: Indicates the file path within the project structure where the Sonner component's implementation (`sonner.tsx`) is located. This path is referenced during the installation or setup process.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/sonner.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nfile=<rootDir>/src/components/ui/sonner.tsx\n```\n\n----------------------------------------\n\nTITLE: Installing the Label Component Source in TSX\nDESCRIPTION: Shows the source code location for the Label component itself, intended for installation or direct use. The actual code resides in `<rootDir>/src/components/ui/label.tsx`. This snippet indicates where to find the component's implementation.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/label.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfile=<rootDir>/src/components/ui/label.tsx\n```\n\n----------------------------------------\n\nTITLE: Checkbox Example Component (tsx)\nDESCRIPTION: This is a placeholder for an example component that uses the Checkbox. The actual component definition would reside in `<rootDir>/src/examples/ui/checkbox.tsx` and demonstrates how to integrate and use the Checkbox component in a larger context.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/checkbox.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx file=<rootDir>/src/examples/ui/checkbox.tsx\n```\n```\n\n----------------------------------------\n\nTITLE: Default Button Implementation (TypeScript)\nDESCRIPTION: This snippet showcases the basic usage of the Button component.  It renders a button with the default styling.  The Button component needs to be imported as shown previously. The output is a button element with the label 'Default'.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/button.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Button>Default</Button>\n```\n\n----------------------------------------\n\nTITLE: Input with Button Example Reference (TSX)\nDESCRIPTION: Placeholder referencing the TSX file that demonstrates integrating the Input component with a Button component, often used for actions like submitting a form or triggering a search.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/input.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nfile=<rootDir>/src/examples/ui/input/with-button.tsx\n```\n\n----------------------------------------\n\nTITLE: Input with Label Example Reference (TSX)\nDESCRIPTION: Placeholder referencing the TSX file that shows how to implement the Input component alongside a corresponding label element for better accessibility and user experience.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/input.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nfile=<rootDir>/src/examples/ui/input/with-label.tsx\n```\n\n----------------------------------------\n\nTITLE: Displaying Label Component Preview in TSX\nDESCRIPTION: Renders a preview of the Label component using the `ComponentPreview` wrapper. The actual component implementation for the preview is located in `<rootDir>/src/examples/ui/label.tsx`. This snippet shows how the preview is embedded in the documentation.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/label.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nfile=<rootDir>/src/examples/ui/label.tsx\n```\n\n----------------------------------------\n\nTITLE: Using the Marquee component in React JSX\nDESCRIPTION: Demonstrates how to include the Marquee component in JSX markup, passing the items array to enable scrolling animation. It relies on prior import and item definition.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/marquee.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n<Marquee items={items} />\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of the Input Component (TSX)\nDESCRIPTION: Demonstrates the basic usage of the Input component in a TSX file. It sets the width using a CSS class, specifies the input type as 'email', and provides placeholder text.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/input.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Input className=\"w-[200px]\" type=\"email\" placeholder=\"Email\" />\n```\n\n----------------------------------------\n\nTITLE: Using Switch Component with Label in React TSX\nDESCRIPTION: Demonstrates how to implement a Switch component with a Label in a React application. The example shows creating an airplane mode toggle with appropriate accessibility attributes.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/switch.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<div className=\"flex items-center space-x-2\">\n  <Switch id=\"airplane-mode\" />\n  <Label htmlFor=\"airplane-mode\">Airplane Mode</Label>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing Sheet Components in TypeScript\nDESCRIPTION: Shows how to import the Sheet component and its subcomponents from the UI library for use in your application.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/sheet.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport {\n  Sheet,\n  SheetClose,\n  SheetContent,\n  SheetDescription,\n  SheetFooter,\n  SheetHeader,\n  SheetTitle,\n  SheetTrigger,\n} from \"@/components/ui/sheet\"\n```\n\n----------------------------------------\n\nTITLE: TypeScript Imports and Component Setup for Dropdown Menu\nDESCRIPTION: This snippet details the import statements necessary for utilizing the dropdown menu in React, including icons from lucide-react, core UI components from '@/components/ui', and React itself. It sets up the environment for rendering and managing the dropdown menu component.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/dropdown-menu.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {\n  Cloud,\n  CreditCard,\n  Github,\n  Keyboard,\n  LifeBuoy,\n  LogOut,\n  Mail,\n  MessageSquare,\n  Plus,\n  PlusCircle,\n  Settings,\n  User,\n  UserPlus,\n  Users\n} from 'lucide-react'\n\nimport React from 'react'\n\nimport { Button } from '@/components/ui/button'\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuPortal,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuTrigger\n} from '@/components/ui/dropdown-menu'\n```\n\n----------------------------------------\n\nTITLE: Importing Pagination Components - TypeScript\nDESCRIPTION: Imports the main Pagination component and its various sub-components from the specified path. These imports are required to use the pagination functionality in a TypeScript/React application.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/pagination.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n} from '@/components/ui/pagination'\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiselect Combobox in TSX\nDESCRIPTION: Advanced implementation of the Combobox component that allows multiple selections. This example shows how to extend the basic functionality to support selecting multiple items.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/combobox.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nfile=<rootDir>/src/examples/ui/combobox/multiselect.tsx\n```\n\n----------------------------------------\n\nTITLE: Disabled Input Example Reference (TSX)\nDESCRIPTION: Placeholder referencing the TSX file that demonstrates the appearance and behavior of the Input component when it is in a disabled state.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/input.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nfile=<rootDir>/src/examples/ui/input/disabled.tsx\n```\n\n----------------------------------------\n\nTITLE: Installing the Calendar Component in TSX\nDESCRIPTION: Provides the file path containing the source code for the Calendar component, typically used during setup or for reference.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/calendar.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nfile=<rootDir>/src/components/ui/calendar.tsx\n```\n\n----------------------------------------\n\nTITLE: Importing Switch Component in TypeScript\nDESCRIPTION: Shows how to import the Switch and Label components for use in a React application.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/switch.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { Label } from '@/components/ui/label'\nimport { Switch } from '@/components/ui/switch'\n```\n\n----------------------------------------\n\nTITLE: Displaying the Default Calendar Example in TSX\nDESCRIPTION: References the file path containing the code for the default usage example of the Calendar component.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/calendar.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nfile=<rootDir>/src/examples/ui/calendar/index.tsx\n```\n\n----------------------------------------\n\nTITLE: Importing Calendar Component and useState Hook in TypeScript\nDESCRIPTION: Demonstrates importing the `Calendar` component from its UI library path and the `useState` hook from React, necessary for managing the component's state.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/calendar.mdx#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { useState } from 'react'\n\nimport { Calendar } from '@/components/ui/calendar'\n```\n\n----------------------------------------\n\nTITLE: Defining items array for Marquee component\nDESCRIPTION: Creates an array of string items to be displayed and animated by the Marquee component. These items are passed as props to animate horizontally.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/marquee.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst items = ['Item 1', 'Item 2', 'Item 3', 'Item 4', 'Item 5']\n```\n\n----------------------------------------\n\nTITLE: Importing Label and Checkbox Components in TypeScript\nDESCRIPTION: Demonstrates how to import the `Label` and `Checkbox` components from the project's UI library located at `@/components/ui/`. These imports are necessary to use the components within a TypeScript or TSX file.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/label.mdx#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { Checkbox } from '@/components/ui/checkbox'\nimport { Label } from '@/components/ui/label'\n```\n\n----------------------------------------\n\nTITLE: Importing Carousel UI Components in TypeScript\nDESCRIPTION: A TypeScript snippet detailing import statements for critical UI elements such as Card and several carousel-related components including Carousel, CarouselContent, CarouselItem, CarouselNext, and CarouselPrevious. These imports establish component dependencies required to compose the carousel UI functionality. This snippet indicates that these components are locally defined within the '@/components/ui/' directory and promotes modular usage of reusable UI components.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/carousel.mdx#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { Card, CardContent } from \"@/components/ui/card\"\nimport {\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselNext,\n  CarouselPrevious,\n} from \"@/components/ui/carousel\"\n```\n\n----------------------------------------\n\nTITLE: Importing Hover Card Components in React (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import the required Hover Card components—Button, HoverCard, HoverCardContent, and HoverCardTrigger—from their respective paths in a TypeScript-based React project. Ensure that the relevant files exist at the provided paths and that you have installed all peer dependencies. The imported Button is used as trigger content; no direct parameters are passed, but 'example' is provided as a prop for Button configuration.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/hover-card.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Button } from '@/components/ui/button'\nimport {\n  HoverCard,\n  HoverCardContent,\n  HoverCardTrigger,\n} from '@/components/ui/hover-card'\n```\n\n----------------------------------------\n\nTITLE: Importing Context Menu Components - React/Next.js - TypeScript\nDESCRIPTION: This snippet imports various components required to build and use the context menu functionality from a local module. It lists all the sub-components needed, such as the main container, trigger, content, and different types of menu items.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/context-menu.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport {\n  ContextMenu,\n  ContextMenuCheckboxItem,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuLabel,\n  ContextMenuRadioGroup,\n  ContextMenuRadioItem,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuTrigger,\n} from '@/components/ui/context-menu'\n```\n\n----------------------------------------\n\nTITLE: Importing Alert Dialog Components\nDESCRIPTION: Demonstrates how to import the Alert Dialog component and its subcomponents from the UI library, along with the Button component which is used as a trigger.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/alert-dialog.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from '@/components/ui/alert-dialog'\nimport { Button } from '@/components/ui/button'\n```\n\n----------------------------------------\n\nTITLE: Textarea Component Import (ts)\nDESCRIPTION: This snippet shows how to import the Textarea component from a specific file path.  The component is likely part of a UI library or custom components directory. It enables the usage of the Textarea component within a React application.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/textarea.mdx#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { Textarea } from '@/components/ui/textarea'\n```\n\n----------------------------------------\n\nTITLE: Importing Dialog Component in TypeScript\nDESCRIPTION: Shows how to import the Dialog component and its related subcomponents from the UI library. These imports are necessary for implementing dialog functionality in a React application.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/dialog.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\n```\n\n----------------------------------------\n\nTITLE: Importing Tooltip Components (ts)\nDESCRIPTION: This snippet demonstrates how to import the necessary components for using the Tooltip. It imports Button and Tooltip related components from '@/components/ui'.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/tooltip.mdx#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n```ts\nimport { Button } from '@/components/ui/button'\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from '@/components/ui/tooltip'\n```\n```\n\n----------------------------------------\n\nTITLE: Importing Alert Components in TypeScript\nDESCRIPTION: Shows how to import the Alert component and its sub-components along with an icon from Lucide React.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/alert.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { CheckCircle2Icon } from \"lucide-react\"\n\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\"\n```\n\n----------------------------------------\n\nTITLE: Importing ScrollArea Component - TypeScript\nDESCRIPTION: This snippet demonstrates how to import the ScrollArea component. It uses an import statement to bring the `ScrollArea` from its defined location in the project. This is necessary to use the component within other parts of the application.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/scroll-area.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { ScrollArea } from '@/components/ui/scroll-area'\n```\n\n----------------------------------------\n\nTITLE: Importing the Slider Component - React (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import the Slider component from the project's UI components directory using a modern import statement in a TypeScript file. No external dependencies are required beyond proper module resolution in the project. The imported Slider can be used in any React component; the expected output is a usable Slider React component reference.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/slider.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Slider } from '@/components/ui/slider'\n```\n\n----------------------------------------\n\nTITLE: Installing Badge Component in React with TypeScript\nDESCRIPTION: This snippet shows the installation of the Badge component located at the source path 'src/components/ui/badge.tsx'. It provides the implementation details necessary to add the Badge component functionality to a React project using TypeScript. The file is expected to export the Badge component, enabling reuse throughout the application.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/badge.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Installing Carousel Component in TypeScript\nDESCRIPTION: This snippet serves as a placeholder referencing the carousel component installation code at 'src/components/ui/carousel.tsx'. It presumably contains the implementation or setup details for the carousel component. The snippet emphasizes proper integration of the carousel into the project structure using TypeScript. Dependencies likely include React and Embla with specific styling or utility setups exacted from the referenced path.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/carousel.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Component Preview Placeholder (TSX)\nDESCRIPTION: This placeholder indicates where a preview of the Input component, rendered using code from the specified TSX file, is displayed in the documentation.\nSOURCE: https://github.com/ekmas/neobrutalism-components/blob/main/src/markdown/components/input.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nfile=<rootDir>/src/examples/ui/input/index.tsx\n```"
  }
]