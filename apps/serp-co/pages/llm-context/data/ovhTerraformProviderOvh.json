[
  {
    "owner": "ovh",
    "repo": "terraform-provider-ovh",
    "content": "TITLE: Creating OVH Cloud Volume with Terraform\nDESCRIPTION: Example of creating a 15GB classic volume in an OVH Cloud project using Terraform. Demonstrates setting basic volume properties including region, name, description, and size.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_volume.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_cloud_project_volume\" \"vol\" {\n   region_name  = \"xxx\"\n   service_name = \"yyyyy\"\n   description  = \"Terraform volume\"\n   name         = \"terrformName\"\n   size         = 15\n   type         = \"classic\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Database Service Configurations\nDESCRIPTION: Examples of minimal configuration required for deploying different database engines including Cassandra, Kafka, M3DB, MongoDB, MySQL, OpenSearch, PostgreSQL, Redis and Grafana. Each configuration specifies essential parameters like service name, engine type, version, plan and node details.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_database.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_cloud_project_database\" \"cassandradb\" {\n  service_name  = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n  description   = \"my-first-cassandra\"\n  engine        = \"cassandra\"\n  version       = \"4.0\"\n  plan          = \"essential\"\n  nodes {\n    region  = \"BHS\"\n  }\n  nodes {\n    region  = \"BHS\"\n  }\n  nodes {\n    region  = \"BHS\"\n  }\n  flavor        = \"db1-4\"\n}\n\n# Additional database configurations...\n```\n\n----------------------------------------\n\nTITLE: Creating Basic MongoDB User with Roles\nDESCRIPTION: Creates a MongoDB user 'johndoe' with backup and read privileges, and outputs the generated password securely.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_database_mongodb_user.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_database\" \"mongodb\" {\n  service_name  = \"XXX\"\n  engine        = \"mongodb\"\n  id            = \"ZZZ\"\n}\n\nresource \"ovh_cloud_project_database_mongodb_user\" \"user\" {\n  service_name  = data.ovh_cloud_project_database.mongodb.service_name\n  cluster_id    = data.ovh_cloud_project_database.mongodb.id\n  name          = \"johndoe\"\n  roles         = [\"backup@admin\", \"readAnyDatabase@admin\"]\n}\n\noutput \"user_password\" {\n  value     = ovh_cloud_project_database_mongodb_user.user.password\n  sensitive = true\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Kubernetes Cluster Kubeconfig\nDESCRIPTION: Creates a Kubernetes cluster and exports its kubeconfig file as a sensitive output value.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_kube.md#2025-04-17_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_cloud_project_kube\" \"my_cluster\" {\n  service_name = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n  name         = \"my_kube_cluster\"\n  region       = \"GRA7\"\n}\n\noutput \"kubeconfig_file\" {\n  value     = ovh_cloud_project_kube.my_cluster.kubeconfig\n  sensitive = true\n}\n```\n\n----------------------------------------\n\nTITLE: Creating OVH Cloud Instance with Terraform\nDESCRIPTION: Example showing how to create a basic OVH cloud instance with network configuration, SSH key, and flavor/image specifications. The instance is configured with public network access and hourly billing.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_instance.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_cloud_project_instance\" \"instance\" {\n  service_name  = \"XXX\"\n    region = \"RRRR\"\n    billing_period = \"hourly\"\n    boot_from {\n        image_id = \"UUID\"\n    }\n    flavor {\n        flavor_id = \"UUID\"\n    }\n    name = \"instance name\"\n    ssh_key {\n        name = \"sshname\"\n    }\n    network {\n        public = true\n    }  \n}\n```\n\n----------------------------------------\n\nTITLE: Creating OVH Cloud Project Network Private Subnet with Terraform\nDESCRIPTION: This snippet demonstrates how to use the ovh_cloud_project_network_private_subnet resource to create a subnet in a private network of an OVH Cloud project. It specifies the service name, network ID, region, IP range, and DHCP settings.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_network_private_subnet.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_cloud_project_network_private_subnet\" \"subnet\" {\n  service_name = \"xxxxx\"\n  network_id   = \"0234543\"\n  region       = \"GRA1\"\n  start        = \"192.168.168.100\"\n  end          = \"192.168.168.200\"\n  network      = \"192.168.168.0/24\"\n  dhcp         = true\n  no_gateway   = false\n}\n```\n\n----------------------------------------\n\nTITLE: Creating OVHcloud Managed Kubernetes Resources with Terraform\nDESCRIPTION: Example of creating an OVHcloud Managed Kubernetes cluster and node pool using Terraform. The example defines a service_name variable and configures the cluster and node pool with specific parameters.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/index.md#2025-04-17_snippet_4\n\nLANGUAGE: terraform\nCODE:\n```\nvariable \"service_name\" {\n  default = \"wwwwwww\"\n}\n\n# Create an OVHcloud Managed Kubernetes cluster\nresource \"ovh_cloud_project_kube\" \"my_kube_cluster\" {\n  service_name = var.service_name\n  name         = \"my-super-kube-cluster\"\n  region       = \"GRA5\"\n  version      = \"1.22\"\n}\n\n# Create a Node Pool for our Kubernetes clusterx\nresource \"ovh_cloud_project_kube_nodepool\" \"node_pool\" {\n  service_name  = var.service_name\n  kube_id       = ovh_cloud_project_kube.my_kube_cluster.id\n  name          = \"my-pool\" //Warning: \"_\" char is not allowed!\n  flavor_name   = \"b2-7\"\n  desired_nodes = 3\n  max_nodes     = 3\n  min_nodes     = 3\n}\n```\n\n----------------------------------------\n\nTITLE: Password Reset Configuration Examples\nDESCRIPTION: Demonstrates different methods for resetting OpenSearch user passwords using datetime, MD5 hash, and arbitrary string triggers.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_database_opensearch_user.md#2025-04-17_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_database\" \"opensearch\" {\n  service_name  = \"XXX\"\n  engine        = \"opensearch\"\n  id            = \"ZZZ\"\n}\n\n# Change password_reset with the datetime each time you want to reset the password to trigger an update\nresource \"ovh_cloud_project_database_opensearch_user\" \"userDatetime\" {\n  service_name    = data.ovh_cloud_project_database.opensearch.service_name\n  cluster_id      = data.ovh_cloud_project_database.opensearch.id\n  acls {\n    pattern    = \"logs_*\"\n    permission = \"read\"\n  }\n  acls {\n    pattern    = \"data_*\"\n    permission = \"deny\"\n  }\n  name            = \"alice\"\n  password_reset  = \"2024-01-02T11:00:00Z\"\n}\n\nvariable \"something\" {\n  type = string\n}\n\n# Set password_reset to be based on the update of another variable to reset the password\nresource \"ovh_cloud_project_database_opensearch_user\" \"userMd5\" {\n  service_name    = data.ovh_cloud_project_database.opensearch.service_name\n  cluster_id      = data.ovh_cloud_project_database.opensearch.id\n  acls {\n    pattern    = \"logs_*\"\n    permission = \"read\"\n  }\n  acls {\n    pattern    = \"data_*\"\n    permission = \"deny\"\n  }\n  name            = \"bob\"\n  password_reset  = md5(var.something)\n}\n\n# Change password_reset each time you want to reset the password to trigger an update\nresource \"ovh_cloud_project_database_opensearch_user\" \"user\" {\n  service_name    = data.ovh_cloud_project_database.opensearch.service_name\n  cluster_id      = data.ovh_cloud_project_database.opensearch.id\n  acls {\n    pattern    = \"logs_*\"\n    permission = \"read\"\n  }\n  acls {\n    pattern    = \"data_*\"\n    permission = \"deny\"\n  }\n  name            = \"johndoe\"\n  password_reset  = \"reset1\"\n}\n\noutput \"user_password\" {\n  value     = ovh_cloud_project_database_opensearch_user.user.password\n  sensitive = true\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Domain Name Resource with DNS Configuration in Terraform\nDESCRIPTION: Example of creating a domain name resource with custom DNS nameserver configuration using the OVH Terraform provider. Specifies the domain name and configures DNS servers.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/domain_name.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_domain_name\" \"domain\" {\n  domain_name = \"example.com\"\n\n  target_spec = {\n    dns_configuration = {\n      name_servers = [\n        {\n          name_server = \"dns101.ovh.net\"\n        },\n        {\n          name_server = \"ns101.ovh.net\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Kubernetes Cluster in OVHcloud\nDESCRIPTION: Creates a simple Kubernetes cluster in the GRA7 region using OVHcloud Managed Kubernetes Service.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_kube.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_cloud_project_kube\" \"my_cluster\" {\n  service_name = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n  name         = \"my_kube_cluster\"\n  region       = \"GRA7\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating OVH Cloud Project Gateway Interface with Terraform\nDESCRIPTION: This snippet demonstrates how to create an OVH Cloud Project Gateway Interface using Terraform. It includes the creation of a private network, subnets, a gateway, and finally, the gateway interface. The interface is added to a different subnet than the one used for the gateway.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_gateway_interface.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_cloud_project_network_private\" \"mypriv\" {\n  service_name  = \"xxxxxxxxxx\"\n  vlan_id       = \"0\"\n  name          = \"mypriv\"\n  regions       = [\"GRA9\"]\n}\n\nresource \"ovh_cloud_project_network_private_subnet\" \"my_privsub\" {\n  service_name  = ovh_cloud_project_network_private.mypriv.service_name\n  network_id    = ovh_cloud_project_network_private.mypriv.id\n  region        = \"GRA9\"\n  start         = \"10.0.0.2\"\n  end           = \"10.0.0.8\"\n  network       = \"10.0.0.0/24\"\n  dhcp          = true\n}\n\nresource \"ovh_cloud_project_network_private_subnet\" \"my_other_privsub\" {\n\tservice_name  = ovh_cloud_project_network_private.mypriv.service_name\n\tnetwork_id    = ovh_cloud_project_network_private.mypriv.id\n\tregion        = \"GRA9\"\n\tstart         = \"10.0.1.10\"\n\tend           = \"10.0.1.254\"\n\tnetwork       = \"10.0.1.0/24\"\n\tdhcp          = true\n}\n\nresource \"ovh_cloud_project_gateway\" \"gateway\" {\n  service_name = ovh_cloud_project_network_private.mypriv.service_name\n  name          = \"my-gateway\"\n  model         = \"s\"\n  region        = ovh_cloud_project_network_private_subnet.my_privsub.region\n  network_id    = tolist(ovh_cloud_project_network_private.mypriv.regions_attributes[*].openstackid)[0]\n  subnet_id     = ovh_cloud_project_network_private_subnet.my_privsub.id\n}\n\nresource \"ovh_cloud_project_gateway_interface\" \"interface\" {\n\tservice_name = ovh_cloud_project_network_private.mypriv.service_name\n\tregion       = ovh_cloud_project_network_private_subnet.my_other_privsub.region\n\tid           = ovh_cloud_project_gateway.gateway.id\n\tsubnet_id    = ovh_cloud_project_network_private_subnet.my_other_privsub.id\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Database User with Terraform in OVH Cloud Project\nDESCRIPTION: This snippet demonstrates how to create a database user named 'johndoe' and output the generated password. It uses data source to fetch existing database information and creates a new user resource.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_database_user.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_database\" \"db\" {\n  service_name  = \"XXXX\"\n  engine        = \"YYYY\"\n  id            = \"ZZZZ\"\n}\n\nresource \"ovh_cloud_project_database_user\" \"user\" {\n  service_name  = data.ovh_cloud_project_database.db.service_name\n  engine        = data.ovh_cloud_project_database.db.engine\n  cluster_id    = data.ovh_cloud_project_database.db.id\n  name          = \"johndoe\"\n}\n\noutput \"user_password\" {\n  value     = ovh_cloud_project_database_user.user.password\n  sensitive = true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OVH Provider with OAuth2 in Terraform\nDESCRIPTION: Example of configuring the OVH provider using OAuth2 authentication with client_id and client_secret. This method is compatible with OVHcloud IAM.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/index.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nterraform {\n  required_providers {\n    ovh = {\n      source = \"ovh/ovh\"\n    }\n  }\n}\n\nprovider \"ovh\" {\n  endpoint      = \"ovh-eu\"\n  client_id     = \"xxxxxxxxx\"\n  client_secret = \"yyyyyyyyy\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an OVH Identity User with Terraform\nDESCRIPTION: This snippet demonstrates how to create an OVH identity user using Terraform. It includes setting the user's description, email, group, login, and password.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/me_identity_user.md#2025-04-17_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"ovh_me_identity_user\" \"my_user\" {\n  description = \"Some custom description\"\n  email       = \"my_login@example.com\"\n  group       = \"DEFAULT\"\n  login       = \"my_login\"\n  password    = \"super-s3cr3t!password\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating OVH DBaaS Logs Input with Logstash Configuration\nDESCRIPTION: Example showing how to create a DBaaS logs input using Terraform. Configures a Logstash input with SSL enabled beats input, connecting it to a Graylog stream and setting network access controls.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/dbaas_logs_input.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_dbaas_logs_input_engine\" \"logstash\" {\n  name          = \"logstash\"\n  version       = \"7.x\"\n}\n\nresource \"ovh_dbaas_logs_output_graylog_stream\" \"stream\" {\n  service_name = \"....\"\n  title        = \"my stream\"\n  description  = \"my graylog stream\"\n}\n\nresource \"ovh_dbaas_logs_input\" \"input\" {\n  service_name     = ovh_dbaas_logs_output_graylog_stream.stream.service_name\n  description      = ovh_dbaas_logs_output_graylog_stream.stream.description\n  title            = ovh_dbaas_logs_output_graylog_stream.stream.title\n  engine_id        = data.ovh_dbaas_logs_input_engine.logstash.id\n  stream_id        = ovh_dbaas_logs_output_graylog_stream.stream.id\n\n  allowed_networks = [\"10.0.0.0/16\"]\n  exposed_port     = \"6154\"\n  nb_instance      = 2\n\n  configuration {\n    logstash {\n      input_section = <<EOF\n  beats {\n    port => 6514\n    ssl => true\n    ssl_certificate => \"/etc/ssl/private/server.crt\"\n    ssl_key => \"/etc/ssl/private/server.key\"\n  }\n  EOF\n\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an OVH Container Registry with Terraform\nDESCRIPTION: This snippet demonstrates how to create a container registry in OVH Public Cloud by first filtering registry capabilities to find the desired plan and region, then creating the registry with those parameters. It uses a SMALL plan in the GRA region.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_containerregistry.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_capabilities_containerregistry_filter\" \"regcap\" {\n  service_name = \"XXXXXX\"\n  plan_name    = \"SMALL\"\n  region       = \"GRA\"\n}\n\nresource \"ovh_cloud_project_containerregistry\" \"my_registry\" {\n  service_name = data.ovh_cloud_project_capabilities_containerregistry_filter.regcap.service_name\n  plan_id      = data.ovh_cloud_project_capabilities_containerregistry_filter.regcap.id\n  region       = data.ovh_cloud_project_capabilities_containerregistry_filter.regcap.region\n  name         = \"mydockerregistry\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic OVH Cloud Load Balancer\nDESCRIPTION: Basic configuration for creating an OVH Cloud load balancer with TCP and UDP listeners. Requires a public cloud project ID and existing network configuration.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_loadbalancer.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_cloud_project_loadbalancer\" \"lb\" {\n  service_name = \"<public cloud project ID>\"\n  region_name = \"GRA9\"\n  flavor_id = \"<loadbalancer flavor ID>\"\n  network = {\n    private = {\n      network = {\n        id = element([for region in ovh_cloud_project_network_private.mypriv.regions_attributes: region if \"${region.region}\" == \"GRA9\"], 0).openstackid\n        subnet_id = ovh_cloud_project_network_private_subnet.myprivsub.id\n      }\n    }\n  }\n  description = \"My new LB\"\n  listeners = [\n    {\n      port = \"34568\"\n      protocol = \"tcp\"\n    },\n    {\n      port = \"34569\"\n      protocol = \"udp\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Private Network in OVHcloud Public Cloud with Terraform\nDESCRIPTION: This snippet demonstrates how to create a private network named 'admin_network' in an OVHcloud public cloud project, specifying the service name and regions.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_network_private.md#2025-04-17_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"ovh_cloud_project_network_private\" \"net\" {\n  service_name = \"XXXXXX\"\n  name         = \"admin_network\"\n  regions      = [\"GRA1\", \"BHS1\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Enterprise MongoDB Private Network Configuration\nDESCRIPTION: Configuration for deploying an enterprise-grade MongoDB service with three nodes on a private network, including subnet and network specifications.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_database.md#2025-04-17_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_cloud_project_database\" \"mongodb\" {\n  service_name  = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n  description   = \"my-first-mongodb\"\n  engine        = \"mongodb\"\n  version       = \"5.0\"\n  plan          = \"production\"\n  nodes {\n    region      = \"SBG\"\n    subnet_id   = \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n    network_id  = \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n  }\n  nodes {\n    region      = \"SBG\"\n    subnet_id   = \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n    network_id  = \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n  }\n  nodes {\n    region      = \"SBG\"\n    subnet_id   = \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n    network_id  = \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n  }\n  flavor        = \"db1-30\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Cluster with Private Network\nDESCRIPTION: Sets up a Kubernetes cluster with private network configuration including network, subnet, and managed gateway.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_kube.md#2025-04-17_snippet_6\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_cloud_project_network_private\" \"network\" {\n  service_name = \"${var.service_name}\" # Public Cloud service name\n  vlan_id     = 42\n  name       = \"terraform_testacc_private_net\"\n  regions    = [\"GRA5\"]\n}\n\nresource \"ovh_cloud_project_network_private_subnet\" \"subnet\" {\n  service_name = \"${var.service_name}\"\n  network_id   = ovh_cloud_project_network_private.network.id\n\n  # whatever region, for test purpose\n  region     = \"GRA5\"\n  start      = \"192.168.168.100\"\n  end        = \"192.168.168.200\"\n  network    = \"192.168.168.0/24\"\n  dhcp       = true\n  no_gateway = false\n}\n\nresource \"ovh_cloud_project_gateway\" \"gateway\" {\n  service_name = \"${var.service_name}\"\n  name       = \"gateway\"\n  model      = \"s\"\n  region     = \"GRA5\"\n  network_id = tolist(ovh_cloud_project_network_private.network.regions_attributes[*].openstackid)[0]\n  subnet_id  = ovh_cloud_project_network_private_subnet.subnet.id\n}\n\nresource \"ovh_cloud_project_kube\" \"my_cluster\" {\n  service_name  = \"${var.service_name}\"\n  name          = \"test-kube-attach\"\n  region        = \"GRA5\"\n\n  private_network_id = tolist(ovh_cloud_project_network_private.network.regions_attributes[*].openstackid)[0]\n  nodes_subnet_id = ovh_cloud_project_network_private_subnet.subnet.id\n  private_network_configuration {\n      default_vrack_gateway              = \"\"\n      private_network_routing_as_default = false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Kafka ACL in OVH Cloud Project with Terraform\nDESCRIPTION: This example demonstrates how to create an ACL for a Kafka cluster in an OVH Cloud project. It first retrieves the Kafka cluster using a data source and then creates an ACL with read permission for a specific user and topic.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_database_kafka_acl.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_database\" \"kafka\" {\n  service_name  = \"XXX\"\n  engine        = \"kafka\"\n  id            = \"ZZZ\"\n}\n\nresource \"ovh_cloud_project_database_kafka_acl\" \"acl\" {\n  service_name    = data.ovh_cloud_project_database.kafka.service_name\n  cluster_id      = data.ovh_cloud_project_database.kafka.id\n  permission      = \"read\"\n  topic           = \"mytopic\"\n  username        = \"johndoe\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating DNS A Record in OVHcloud Domain Zone\nDESCRIPTION: Demonstrates how to create a DNS A record for a subdomain using the ovh_domain_zone_record resource. The example shows setting basic properties like zone, subdomain, record type, TTL, and target IP address.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/domain_zone_record.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\n# Add a record to a sub-domain\nresource \"ovh_domain_zone_record\" \"test\" {\n  zone      = \"testdemo.ovh\"\n  subdomain = \"test\"\n  fieldtype = \"A\"\n  ttl       = 3600\n  target    = \"0.0.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating OVH IP Load Balancing TCP Frontend with Terraform\nDESCRIPTION: This snippet demonstrates how to create an OVH IP Load Balancing TCP frontend using Terraform. It includes setting up a data source for the load balancer, creating a TCP farm, and configuring the frontend with various parameters.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/iploadbalancing_tcp_frontend.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_iploadbalancing\" \"lb\" {\n  service_name = \"ip-1.2.3.4\"\n  state        = \"ok\"\n}\n\nresource \"ovh_iploadbalancing_tcp_farm\" \"farm80\" {\n  service_name = \"${data.ovh_iploadbalancing.lb.service_name}\"\n  display_name = \"ingress-8080-gra\"\n  zone         = \"all\"\n  port         = 80\n}\n\nresource \"ovh_iploadbalancing_tcp_frontend\" \"test_frontend\" {\n  service_name    = \"${data.ovh_iploadbalancing.lb.service_name}\"\n  display_name    = \"ingress-8080-gra\"\n  zone            = \"all\"\n  port            = \"80,443\"\n  default_farm_id = \"${ovh_iploadbalancing_tcp_farm.farm80.id}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OVH Provider with Application Keys in Terraform\nDESCRIPTION: Example of configuring the OVH provider using Application Key authentication with application_key, application_secret, and consumer_key parameters.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/index.md#2025-04-17_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\nterraform {\n  required_providers {\n    ovh = {\n      source = \"ovh/ovh\"\n    }\n  }\n}\n\nprovider \"ovh\" {\n  endpoint           = \"ovh-eu\"\n  application_key    = \"xxxxxxxxx\"\n  application_secret = \"yyyyyyyyy\"\n  consumer_key       = \"zzzzzzzzzzzzzz\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating OVH Cloud Load Balancer with Network Setup\nDESCRIPTION: Complete configuration including private network and subnet creation before setting up the load balancer. Demonstrates full infrastructure setup with network configuration.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_loadbalancer.md#2025-04-17_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_cloud_project_network_private\" \"priv\" {\n  service_name  = \"<public cloud project ID>\"\n  vlan_id       = \"10\"\n  name          = \"my_priv\"\n  regions       = [\"GRA9\"]\n}\n\nresource \"ovh_cloud_project_network_private_subnet\" \"privsub\" {\n  service_name  = ovh_cloud_project_network_private.priv.service_name\n  network_id    = ovh_cloud_project_network_private.priv.id\n  region        = \"GRA9\"\n  start         = \"10.0.0.2\"\n  end           = \"10.0.255.254\"\n  network       = \"10.0.0.0/16\"\n  dhcp          = true\n}\n\nresource \"ovh_cloud_project_loadbalancer\" \"lb\" {\n  service_name = ovh_cloud_project_network_private_subnet.privsub.service_name\n  region_name = ovh_cloud_project_network_private_subnet.privsub.region\n  flavor_id = \"<loadbalancer flavor ID>\"\n  network = {\n    private = {\n      network = {\n        id = element([for region in ovh_cloud_project_network_private.priv.regions_attributes: region if \"${region.region}\" == \"GRA9\"], 0).openstackid\n        subnet_id = ovh_cloud_project_network_private_subnet.privsub.id\n      }\n    }\n  }\n  description = \"My new LB\"\n  listeners = [\n    {\n      port = \"34568\"\n      protocol = \"tcp\"\n    },\n    {\n      port = \"34569\"\n      protocol = \"udp\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring IP Restrictions for OVH Container Registry in Terraform\nDESCRIPTION: Example showing how to configure IP restrictions for an OVH Managed Private Registry. The code demonstrates fetching registry details using a data source and applying IP restrictions using a resource block. IP restrictions can be specified in CIDR format with optional descriptions.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_containerregistry_ip_restrictions_management.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_containerregistry\" \"registry\" {\n  service_name = \"XXXXXX\"\n  registry_id  = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxx\"\n}\n\nresource \"ovh_cloud_project_containerregistry_ip_restrictions_management\" \"my_mgt_iprestrictions\" {\n  service_name = ovh_cloud_project_containerregistry.registry.service_name\n  registry_id  = ovh_cloud_project_containerregistry.registry.id\n\n  ip_restrictions = [\n    { \n      ip_block = \"xxx.xxx.xxx.xxx/xx\"\n      description = \"xxxxxxx\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an IP Firewall using Terraform OVH Provider\nDESCRIPTION: This snippet demonstrates how to create an IP firewall using the ovh_ip_firewall resource in Terraform. It sets the IP or CIDR and the IPv4 address on the firewall.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/ip_firewall.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_ip_firewall\" \"my_firewall\" {\n  ip             = \"XXXXXX\"\n  ip_on_firewall = \"XXXXXX\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OVH IP Load Balancing Refresh in Terraform\nDESCRIPTION: This snippet demonstrates how to use the ovh_iploadbalancing_refresh resource in conjunction with other OVH IP load balancing resources. It includes setting up a TCP farm, adding a backend server, and triggering a refresh of the load balancer configuration.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/iploadbalancing_refresh.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_iploadbalancing\" \"lb\" {\n  service_name = \"ip-1.2.3.4\"\n  state        = \"ok\"\n}\n\nresource \"ovh_iploadbalancing_tcp_farm\" \"farm_name\" {\n  service_name = \"${data.ovh_iploadbalancing.lb.service_name}\"\n  port         = 8080\n  zone         = \"all\"\n}\n\nresource \"ovh_iploadbalancing_tcp_farm_server\" \"backend\" {\n  service_name           = \"${data.ovh_iploadbalancing.lb.service_name}\"\n  farm_id                = \"${ovh_iploadbalancing_tcp_farm.farm_name.id}\"\n  display_name           = \"mybackend\"\n  address                = \"4.5.6.7\"\n  status                 = \"active\"\n  port                   = 80\n  proxy_protocol_version = \"v2\"\n  weight                 = 2\n  probe                  = true\n  ssl                    = false\n  backup                 = true\n}\n\nresource \"ovh_iploadbalancing_refresh\" \"mylb\" {\n  service_name = \"${data.ovh_iploadbalancing.lb.service_name}\"\n  keepers = [\n    \"${ovh_iploadbalancing_tcp_farm_server.backend.*.address}\",\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Kubernetes NodePool with Terraform\nDESCRIPTION: Creates a simple node pool in an OVHcloud Managed Kubernetes cluster with basic configuration including service name, kubernetes ID, pool name, flavor, and node counts.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_kube_nodepool.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_cloud_project_kube_nodepool\" \"node_pool\" {\n  service_name  = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n  kube_id       = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  name          = \"my-pool-1\" //Warning: \"_\" char is not allowed!\n  flavor_name   = \"b2-7\"\n  desired_nodes = 3\n  max_nodes     = 3\n  min_nodes     = 3\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Presigned S3 URL with Terraform in OVH Cloud\nDESCRIPTION: Creates a presigned URL for accessing an object in an OVH Cloud S3 bucket. The URL can be used for either downloading (GET) or uploading (PUT) objects, with a configurable expiration time.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_region_storage_presign.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_cloud_project_region_storage_presign\" \"presigned_url\" {\n  service_name = \"xxxxxxxxxxxxxxxxx\"\n  region_name  = \"GRA\"\n  name         = \"s3-bucket-name\"\n  expire       = 3600\n  method       = \"GET\"\n  object       = \"an-object-in-the-bucket\"\n}\n\noutput \"presigned_url\" {\n  value = ovh_cloud_project_region_storage_presign.presigned_url.url\n}\n```\n\n----------------------------------------\n\nTITLE: Creating OVHcloud KMS Service Keys with Terraform\nDESCRIPTION: Examples of creating different types of cryptographic keys (symmetric OCT, RSA, and ECDSA) in OVHcloud KMS. Each key is configured with specific parameters including key size, curve type, and allowed operations.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/okms_service_key.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_okms_service_key\" \"key_symetric\" {\n  okms_id    = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  name       = \"key_oct\"\n  type       = \"oct\"\n  size       = 256\n  operations = [\"encrypt\", \"decrypt\"]\n}\n\nresource \"ovh_okms_service_key\" \"key_rsa\" {\n  okms_id    = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  name       = \"key_rsa\"\n  type       = \"RSA\"\n  size       = 2048\n  operations = [\"sign\", \"verify\"]\n}\n\nresource \"ovh_okms_service_key\" \"key_ecdsa\" {\n  okms_id    = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  name       = \"key_ecdsa\"\n  type       = \"EC\"\n  curve      = \"P-256\"\n  operations = [\"sign\", \"verify\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating TCP Farm Server in OVH Load Balancer with Terraform\nDESCRIPTION: Example configuration for setting up a backend server in an OVH IP Load Balancing TCP farm. Demonstrates how to configure server properties including proxy protocol, weight, probe settings, and SSL options.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/iploadbalancing_tcp_farm_server.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_iploadbalancing\" \"lb\" {\n  service_name = \"ip-1.2.3.4\"\n  state        = \"ok\"\n}\n\nresource \"ovh_iploadbalancing_tcp_farm\" \"farm_name\" {\n  service_name = \"${data.ovh_iploadbalancing.lb.service_name}\"\n  port         = 8080\n  zone         = \"all\"\n}\n\nresource \"ovh_iploadbalancing_tcp_farm_server\" \"backend\" {\n  service_name           = \"${data.ovh_iploadbalancing.lb.service_name}\"\n  farm_id                = \"${ovh_iploadbalancing_tcp_farm.farm_name.id}\"\n  display_name           = \"mybackend\"\n  address                = \"4.5.6.7\"\n  status                 = \"active\"\n  port                   = 80\n  proxy_protocol_version = \"v2\"\n  weight                 = 2\n  probe                  = true\n  ssl                    = false\n  backup                 = true\n}\n```\n\n----------------------------------------\n\nTITLE: Creating OVH Cloud Project Gateway with Private Network\nDESCRIPTION: Terraform configuration to create a private network, subnet, and gateway in an OVH Cloud project. The example demonstrates setting up a gateway with specific network configurations and region settings.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_gateway.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_cloud_project_network_private\" \"mypriv\" {\n  service_name  = \"xxxxxxxxxx\"\n  vlan_id       = \"0\"\n  name          = \"mypriv\"\n  regions       = [\"GRA9\"]\n}\n\nresource \"ovh_cloud_project_network_private_subnet\" \"myprivsub\" {\n  service_name  = ovh_cloud_project_network_private.mypriv.service_name\n  network_id    = ovh_cloud_project_network_private.mypriv.id\n  region        = \"GRA9\"\n  start         = \"10.0.0.2\"\n  end           = \"10.0.255.254\"\n  network       = \"10.0.0.0/16\"\n  dhcp          = true\n}\n\nresource \"ovh_cloud_project_gateway\" \"gateway\" {\n  service_name = ovh_cloud_project_network_private.mypriv.service_name\n  name          = \"my-gateway\"\n  model         = \"s\"\n  region        = ovh_cloud_project_network_private_subnet.myprivsub.region\n  network_id    = tolist(ovh_cloud_project_network_private.mypriv.regions_attributes[*].openstackid)[0]\n  subnet_id     = ovh_cloud_project_network_private_subnet.myprivsub.id\n}\n```\n\n----------------------------------------\n\nTITLE: Ordering and Configuring an OVH Dedicated Server with Terraform\nDESCRIPTION: This snippet demonstrates how to use the ovh_dedicated_server resource to order a dedicated server from OVH, including specifying the plan, options, and configuration details.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/dedicated_server.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_me\" \"account\" {}\n\nresource \"ovh_dedicated_server\" \"server\" {\n  ovh_subsidiary = data.ovh_me.account.ovh_subsidiary\n  display_name = \"My server display name\"\n  os = \"debian12_64\"\n  plan = [\n    {\n      plan_code = \"24rise01\"\n      duration = \"P1M\"\n      pricing_mode = \"default\"\n\n      configuration = [\n        {\n          label = \"dedicated_datacenter\"\n          value = \"bhs\"\n        },\n        {\n          label = \"dedicated_os\"\n          value = \"none_64.en\"\n        },\n        {\n          label = \"region\"\n          value = \"canada\"\n        }\n      ]\n    }\n  ]\n\n  plan_option = [\n    {\n      duration = \"P1M\"\n      plan_code = \"ram-32g-rise13\"\n      pricing_mode = \"default\"\n      quantity = 1\n    },\n    {\n      duration = \"P1M\"\n      plan_code = \"bandwidth-500-included-rise\"\n      pricing_mode = \"default\"\n      quantity = 1\n    },\n    {\n      duration = \"P1M\"\n      plan_code = \"softraid-2x512nvme-rise\"\n      pricing_mode = \"default\"\n      quantity = 1\n    },\n    {\n      duration = \"P1M\"\n      plan_code = \"vrack-bandwidth-100-rise-included\"\n      pricing_mode = \"default\"\n      quantity = 1\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Advanced Kubernetes NodePool with Terraform\nDESCRIPTION: Creates an advanced node pool configuration with metadata, annotations, labels, and taints for more sophisticated node management scenarios.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_kube_nodepool.md#2025-04-17_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_cloud_project_kube_nodepool\" \"pool\" {\n  service_name  = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n  kube_id       = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  name          = \"my-pool\"\n  flavor_name   = \"b2-7\"\n  desired_nodes = 3\n  max_nodes     = 3\n  min_nodes     = 3\n  template {\n    metadata {\n      annotations = {\n        k1 = \"v1\"\n        k2 = \"v2\"\n      }\n      finalizers = []\n      labels = {\n        k3 = \"v3\"\n        k4 = \"v4\"\n      }\n    }\n    spec {\n      unschedulable = false\n      taints = [\n        {\n          effect = \"PreferNoSchedule\"\n          key    = \"k\"\n          value  = \"v\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Linux Installation with Custom Partitioning and Hardware RAID\nDESCRIPTION: Demonstrates Linux installation with custom partitioning and hardware RAID configuration on disk group 2.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/dedicated_server_reinstall_task.md#2025-04-17_snippet_7\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_dedicated_server\" \"server\" {\n  service_name = \"nsxxxxxxx.ip-xx-xx-xx.eu\"\n}\n\ndata \"ovh_dedicated_installation_template\" \"template\" {\n  template_name = \"debian12_64\"\n}\n\nresource \"ovh_dedicated_server_reinstall_task\" \"server_install\" {\n  service_name = data.ovh_dedicated_server.server.service_name\n  os           = data.ovh_dedicated_installation_template.template.template_name\n  customizations {\n    hostname = \"mon-tux\"\n  }\n  storage {\n    disk_group_id = 2\n    hardware_raid {\n      raid_level = 5\n    }\n    partitioning {\n      layout {\n        file_system = \"ext4\"\n        mount_point = \"/\"\n        raid_level  = 1\n        size        = 20480\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an OVH IP Load Balancing HTTP Farm in Terraform\nDESCRIPTION: This snippet demonstrates how to create an HTTP backend server group (farm) for an OVH IP Load Balancer using Terraform. It retrieves the load balancer details and creates a farm with specified parameters.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/iploadbalancing_http_farm.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_iploadbalancing\" \"lb\" {\n  service_name = \"ip-1.2.3.4\"\n  state        = \"ok\"\n}\n\nresource \"ovh_iploadbalancing_http_farm\" \"farmname\" {\n  service_name = \"${data.ovh_iploadbalancing.lb.service_name}\"\n  display_name = \"ingress-8080-gra\"\n  zone         = \"GRA\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating OVH Cloud Project Workflow Backup in Terraform\nDESCRIPTION: This snippet demonstrates how to create an OVH Cloud Project Workflow Backup using Terraform. It specifies the project, region, backup schedule, instance to backup, and retention settings.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_workflow_backup.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_cloud_project_workflow_backup\" \"my_backup\" {\n  service_name        = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n  region_name         = \"GRA11\"\n  cron                = \"50 4 * * *\"\n  instance_id         = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxx\"\n  max_execution_count = \"0\"\n  name                = \"Backup workflow for instance\"\n  rotation            = \"7\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating HTTP Farm Server in OVH Load Balancer with Terraform\nDESCRIPTION: Example of configuring a backend server in an OVH HTTP load balancing farm. Demonstrates setting up a load balancer data source, creating an HTTP farm, and adding a backend server with specific configuration parameters.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/iploadbalancing_http_farm_server.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_iploadbalancing\" \"lb\" {\n  service_name = \"ip-1.2.3.4\"\n  state        = \"ok\"\n}\n\nresource \"ovh_iploadbalancing_http_farm\" \"farmname\" {\n  service_name = \"${data.ovh_iploadbalancing.lb.service_name}\"\n  port         = 8080\n  zone         = \"all\"\n}\n\nresource \"ovh_iploadbalancing_http_farm_server\" \"backend\" {\n  service_name           = \"${data.ovh_iploadbalancing.lb.service_name}\"\n  farm_id                = \"${ovh_iploadbalancing_http_farm.farmname.id}\"\n  display_name           = \"mybackend\"\n  address                = \"4.5.6.7\"\n  status                 = \"active\"\n  port                   = 80\n  proxy_protocol_version = \"v2\"\n  weight                 = 2\n  probe                  = true\n  ssl                    = false\n  backup                 = true\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Kafka Schema Registry ACL in Terraform\nDESCRIPTION: This snippet demonstrates how to create a schema registry ACL for a Kafka cluster in an OVH Cloud project using Terraform. It retrieves the Kafka cluster data and then creates an ACL with specified permissions.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_database_kafka_schemaregistryacl.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_database\" \"kafka\" {\n  service_name  = \"XXX\"\n  engine        = \"kafka\"\n  id            = \"ZZZ\"\n}\n\nresource \"ovh_cloud_project_database_kafka_schemaregistryacl\" \"schema_registry_acl\" {\n  service_name    = data.ovh_cloud_project_database.kafka.service_name\n  cluster_id      = data.ovh_cloud_project_database.kafka.id\n  permission      = \"schema_registry_read\"\n  resource        = \"Subject:myResource\"\n  username        = \"johndoe\"\n}\n```\n\n----------------------------------------\n\nTITLE: MongoDB User Password Reset Configuration\nDESCRIPTION: Demonstrates different approaches to reset MongoDB user passwords using password_reset attribute with datetime and MD5 hash triggers.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_database_mongodb_user.md#2025-04-17_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_database\" \"mongodb\" {\n  service_name  = \"XXX\"\n  engine        = \"mongodb\"\n  id            = \"ZZZ\"\n}\n\nresource \"ovh_cloud_project_database_mongodb_user\" \"userDatetime\" {\n  service_name  = data.ovh_cloud_project_database.mongodb.service_name\n  cluster_id    = data.ovh_cloud_project_database.mongodb.id\n  name          = \"alice\"\n  roles         = [\"backup@admin\", \"readAnyDatabase@admin\"]\n  password_reset  = \"2024-01-02T11:00:00Z\"\n}\n\nvariable \"something\" {\n  type = string\n}\n\nresource \"ovh_cloud_project_database_mongodb_user\" \"userMd5\" {\n  service_name  = data.ovh_cloud_project_database.mongodb.service_name\n  cluster_id    = data.ovh_cloud_project_database.mongodb.id\n  name          = \"bob\"\n  roles         = [\"backup@admin\", \"readAnyDatabase@admin\"]\n  password_reset  = md5(var.something)\n}\n\nresource \"ovh_cloud_project_database_mongodb_user\" \"user\" {\n  service_name  = data.ovh_cloud_project_database.mongodb.service_name\n  cluster_id    = data.ovh_cloud_project_database.mongodb.id\n  name          = \"johndoe\"\n  roles         = [\"backup@admin\", \"readAnyDatabase@admin\"]\n  password_reset  = \"reset1\"\n}\n\noutput \"user_password\" {\n  value     = ovh_cloud_project_database_mongodb_user.user.password\n  sensitive = true\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting PostgreSQL User Passwords with Terraform in OVH Cloud Project\nDESCRIPTION: This snippet shows different methods to reset passwords for PostgreSQL users. It includes examples of using a datetime string, an MD5 hash of a variable, and an arbitrary string to trigger password resets.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_database_postgresql_user.md#2025-04-17_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_database\" \"postgresql\" {\n  service_name  = \"XXXX\"\n  engine        = \"postgresql\"\n  id            = \"ZZZZ\"\n}\n\nresource \"ovh_cloud_project_database_postgresql_user\" \"userDatetime\" {\n  service_name    = data.ovh_cloud_project_database.postgresql.service_name\n  cluster_id      = data.ovh_cloud_project_database.postgresql.id\n  name            = \"alice\"\n  roles           = [\"replication\"]\n  password_reset  = \"2024-01-02T11:00:00Z\"\n}\n\nvariable \"something\" {\n  type = string\n}\n\nresource \"ovh_cloud_project_database_postgresql_user\" \"userMd5\" {\n  service_name    = data.ovh_cloud_project_database.postgresql.service_name\n  cluster_id      = data.ovh_cloud_project_database.postgresql.id\n  name            = \"bob\"\n  roles           = [\"replication\"]\n  password_reset  = md5(var.something)\n}\n\nresource \"ovh_cloud_project_database_postgresql_user\" \"user\" {\n  service_name    = data.ovh_cloud_project_database.postgresql.service_name\n  cluster_id      = data.ovh_cloud_project_database.postgresql.id\n  name            = \"johndoe\"\n  roles           = [\"replication\"]\n  password_reset  = \"reset1\"\n}\n\noutput \"user_password\" {\n  value     = ovh_cloud_project_database_postgresql_user.user.password\n  sensitive = true\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom SSL Certificate for OVH IP Load Balancing with Terraform\nDESCRIPTION: This snippet demonstrates how to create a custom SSL certificate for an OVH IP Load Balancing service using Terraform. It retrieves the load balancer details and creates a new SSL certificate with specified attributes.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/iploadbalancing_ssl.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_iploadbalancing\" \"lb\" {\n  service_name = \"ip-1.2.3.4\"\n  state        = \"ok\"\n}\n\nresource \"ovh_iploadbalancing_ssl\" \"sslname\" {\n  service_name = \"${data.ovh_iploadbalancing.lb.service_name}\"\n  display_name = \"test\"\n  certificate  = \"...\"\n  key          = \"...\"\n  chain        = \"...\"\n\n  # use this if ssl is configured as frontend default_ssl\n  lifecycle {\n    create_before_destroy = true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an OVHcloud Savings Plan with Terraform\nDESCRIPTION: This snippet demonstrates how to create an OVHcloud Savings Plan using Terraform. It specifies the project ID, flavor, period, size, display name, and auto-renewal settings.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/savings_plan.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_savings_plan\" \"plan\" {\n  service_name = \"<public cloud project ID>\"\n  flavor = \"Rancher\"\n  period = \"P1M\"\n  size = 2\n  display_name = \"one_month_rancher_savings_plan\"\n  auto_renewal = true\n}\n```\n\n----------------------------------------\n\nTITLE: Creating OIDC Configuration for OVH Kubernetes Cluster\nDESCRIPTION: Example Terraform configuration for setting up OIDC authentication in an OVHcloud Managed Kubernetes cluster. Demonstrates required and optional OIDC parameters including client ID, issuer URL, and various claims configurations.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_kube_oidc.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_cloud_project_kube_oidc\" \"my_oidc\" {\n  service_name = var.projectid\n  kube_id      = ovh_cloud_project_kube.mykube.id\n\n  #required field\n  client_id    = \"xxx\"\n  issuer_url   = \"https://ovh.com\"\n\n  #optional field\n  oidc_username_claim  = \"an-email\"\n  oidc_username_prefix = \"ovh:\"\n  oidc_groups_claim    = [\"groups\"]\n  oidc_groups_prefix   = \"ovh:\"\n  oidc_required_claim  = [\"claim1=val1\"]\n  oidc_signing_algs    = [\"RS512\"]\n  oidc_ca_content      = \"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZhekNDQTFPZ0F3SUJBZ0lVYm9YRkZrL1hCQmdQUUI4UHlqbkttUGVWekNjd0RRWUpLb1pJaHZjTkFRRUwKQlFBd1JURUxNQWtHQTFVRUJoTUNRVlV4RXpBUkJnTlZCQWdNQ2xOdmJXVXRVM1JoZEdVeElUQWZCZ05WQkFvTQpHRWx1ZEdWeWJtVjBJRmRwWkdkcGRITWdVSFI1SUV4MFpEQWVGdzB5TWpFd01UUXdOalE0TlROYUZ3MHlNekV3Ck1UUXdOalE0TlROYU1FVXhDekFKQmdOVkJBWVRBa0ZWTVJNd0VRWURWUVFJREFwVGIyMWxMVk4wWVhSbE1TRXcKSHdZRFZRUUtEQmhKYm5SbGNtNWxkQ0JYYVdSbmFYUnpJRkIwZVNCTWRHUXdnZ0lpTUEwR0NTcUdTSWIzRFFFQgpBUVVBQTRJQ0R3QXdnZ0lLQW9JQ0FRQytPMk53bGx2QTQyT05SUHMyZWlqTUp2UHhpN21RblVSS3FrOHJEV1VkCkwzZU0yM1JXeVhtS1AydDQ5Zi9LVGsweEZNVStOSTUzTEhwWmh6N3NpK3dEUFUvWWZWSS9rQmZsRm8zeVZCMSsKZWdCSnpyNGIrQ3FoaWlCUkh0Vm5LblFKUmdvOVJjVkxhRm82UEY0N1V0UWJ2bWVuNGdERnExVkYwVHhUdnFMdwpIMzRZL0U2QUJsSlZnWFBzaWQzNm54eTErNnlKV05vRXNVekFiekpWMHhzTGhxc2hOazA0TWx4YnBhcG1XcEUxCmFFMHRIZGpjUlI3Y1dTRUUwMnRSQzNYL2tSNjBKb3MxR0N0Y0ZQTTVIN3NjOFBXNFRUem1EWWhOeDRiVjV4T28KU0xYRnI5ajBzZEgxbm1wSlI1dWxJT2dPTWV3MHA2d3JOYVV2MGpxc1hzdVdqMVpxdTRLRi81aEQ3azVhRlhKNQpjYWNTUi9mRWxreW1uZis0eHZFOG8wdkRWNFR5NHo3K3lSS1U0clZvZFNBZWZIN3lqeitLV1RRck96L0lHU2NwCmV1YTdqV0hRMDdMYWxyTjV2b0tFaU1JM3MrWjhzeUdVUGVyYXQwdzJMWlc3NnhxVGl4R002clZxUldxVlQ4L1oKQTJMMEc4WGRvNTZvV2lFYVF5RkJtRDFnMXU2UEsvTmFGVDI1L2tTNWJ1dnF5L1dLVGt0UVNhNHNZc1ZLbUlQTQp0Zys0NUZ2aFErNkRuQzd0TmVnaTZDTkdTb0w0R1dPOEE5UDZRNjE5RkJJZ1VjcGpFMTgvUHpQOEJmcTAxajhnCjZmdm1jNkVPMkxHVHhDcW1DbVp0TnI3OCtQaUxkMHZIY3pqY3E3NzhiNW5WRXRpUVNRQkUyb0ozTVlIZUFIUUkKYVFJREFRQUJvMU13VVRBZEJnTlZIUTRFRmdRVUpaMUhlVmx1U3pjY0U2NEZQYWtuNkRBWnhmSXdId1lEVlIwagpCQmd3Rm9BVUpaMUhlVmx1U3pjY0U2NEZQYWtuNkRBWnhmSXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QU5CZ2txCmhraUc5dzBCQVFzRkFBT0NBZ0VBQlhNSlU2MjJZVFZVNnZ1K2svNnkwMGNaWlRmVnZtdVJMOXhTcWxVM0I1QmQKVWdyVWx1TmdjN2dhUUlrYzkvWmh2MnhNd0xxUldMWEhiTWx1NkNvdkNiVTVpeWt0NHVWMnl5UzlZYWhmVVRNVQo3TVE0WFRta2hoS0dGbWZBQ2QzTUVwRE55T3hmWXh0UVBwM1NZT2IxRGFKMmUwY01Gc081bytORGQ5aFVBVzFoCjFLMjMwQnZzYldYYVo4MStIdTU4U1BsYTM5R3FMTG85MzR6dEs4WkRWNFRGTVJxMnNVQ1cxcWFidDh5ejd2RzAKSGV3dXdxelRwR1lTSFI1U0ZvMm45R0xKVUN4SnhxcDlOWVJjMlhUdXRUdkJESzVPMXFZZEJaQzd6cmcxSnczawp2SjI4UGx2TzBQRE42ZVlUdElJdC9yU05ZbW56eVVNRTRYREt0di9KRitLZWZNSWxDTkpzZDRHYXVTdlo5M1NOClhINmcrNEZvRkp4UzNxRmZ0WEc4czNRNnppNzNLRzh5UHZVNHU0WmZNRGd2aG92L0V5YkNLWUpFdVVZSlJWNGEKbmc3cWh3NDBabXQ0eWNCRzU5a2tFSGhNYWtxTWpPaUNkV2x4MEVjZXIxcEFGT1pqN3o1NktURXIxa0ZwUHVaRApjVER5SnNwTjh6dm9CQ0l1ancvQjR6S3kyWStOQitRR1p3dXhyTk9mRGR6ek9yQUE1Ym9OS2gwUUh4c0RxNTExClFaU3hCR21EcGJzN2QzMUQvQll3WEhIUWdwb3FoVUU5dFBGSThpN0pkM2FyeXZCdHlnTWlxSmt1VlRFVk1Ta0UKNTZ0VnFsMjlXenFhRXNrbDN3VUlmczVKKzN3RzRPcWNxRDdXaGQxWUtnc0VUMjdFTWlqVXZIYzQ4TXE0bU1rPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Prometheus Configuration from an OVH Database Cluster in Terraform\nDESCRIPTION: This example demonstrates how to use the ovh_cloud_project_database_prometheus data source to retrieve information about a prometheus configuration for a database cluster and output the username. The service_name, engine, and cluster_id parameters are required to identify the specific database cluster.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_database_prometheus.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_database_prometheus\" \"prometheus\" {\n  service_name  = \"XXX\"\n  engine        = \"YYY\"\n  cluster_id    = \"ZZZ\"\n}\n\noutput \"name\" {\n  value = data.ovh_cloud_project_database_prometheus.prometheus.username\n}\n```\n\n----------------------------------------\n\nTITLE: Business PostgreSQL Configuration\nDESCRIPTION: Example of deploying a business-tier PostgreSQL service with two nodes on public network, specifying service details, version, and regional deployment options.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_database.md#2025-04-17_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_cloud_project_database\" \"postgresql\" {\n  service_name  = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n  description   = \"my-first-postgresql\"\n  engine        = \"postgresql\"\n  version       = \"14\"\n  plan          = \"business\"\n  nodes {\n    region  = \"GRA\"\n  }\n  nodes {\n    region  = \"GRA\"\n  }\n  flavor        = \"db1-15\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Alert on OVH Public Cloud Project with Terraform\nDESCRIPTION: This snippet demonstrates how to create an alert on an OVH public cloud project using Terraform. It sets up an alert with a specified delay, email contact, and monthly threshold.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_alerting.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_cloud_project_alerting\" \"my_alert\" {\n  service_name = \"XXX\"\n  delay = 3600\n  email = \"aaa.bbb@domain.com\"\n  monthly_threshold = 1000\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Prometheus for OVH Cloud Project Database\nDESCRIPTION: This snippet demonstrates how to create a Prometheus instance for an OVH Cloud Project Database cluster and output the generated password. It uses data source to fetch existing database details and creates a new Prometheus resource.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_database_prometheus.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_database\" \"db\" {\n  service_name  = \"XXXX\"\n  engine        = \"YYYY\"\n  id            = \"ZZZZ\"\n}\n\nresource \"ovh_cloud_project_database_prometheus\" \"prometheus\" {\n  service_name  = data.ovh_cloud_project_database.db.service_name\n  engine        = data.ovh_cloud_project_database.db.engine\n  cluster_id    = data.ovh_cloud_project_database.db.id\n}\n\noutput \"prom_password\" {\n  value     = ovh_cloud_project_database_prometheus.prometheus.password\n  sensitive = true\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Existing Redis User into Terraform State for OVHcloud Managed Database\nDESCRIPTION: This bash command demonstrates how to import an existing OVHcloud Managed Redis cluster user into Terraform state. It requires the service_name, cluster_id, and user id to properly identify and import the resource.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_database_redis_user.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform import ovh_cloud_project_database_redis_user.my_user service_name/cluster_id/id\n```\n\n----------------------------------------\n\nTITLE: Retrieving OVH Cloud Project Images with Terraform\nDESCRIPTION: Example showing how to fetch images from an OVH public cloud project with specific filters for region and OS type. This snippet demonstrates using the ovh_cloud_project_images data source to obtain Linux images available in the WAW1 region.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_images.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_images\" \"images\" {\n  service_name = \"<public cloud project ID>\"\n  region       = \"WAW1\"\n  os_type      = \"linux\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic OVH Cloud Project with Terraform\nDESCRIPTION: This snippet demonstrates how to order a basic public cloud project using Terraform by fetching account details, creating a cart, selecting a plan, and applying the configuration.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_me\" \"myaccount\" {}\n\ndata \"ovh_order_cart\" \"mycart\" {\n  ovh_subsidiary = data.ovh_me.myaccount.ovh_subsidiary\n}\n\ndata \"ovh_order_cart_product_plan\" \"cloud\" {\n  cart_id        = data.ovh_order_cart.mycart.id\n  price_capacity = \"renew\"\n  product        = \"cloud\"\n  plan_code      = \"project.2018\"\n  # plan_code    = \"project\" # when running in the US\n}\n\nresource \"ovh_cloud_project\" \"my_cloud_project\" {\n  ovh_subsidiary = data.ovh_order_cart.mycart.ovh_subsidiary\n  description    = \"my cloud project\"\n\n  plan {\n    duration     = data.ovh_order_cart_product_plan.cloud.selected_price.0.duration\n    plan_code    = data.ovh_order_cart_product_plan.cloud.plan_code\n    pricing_mode = data.ovh_order_cart_product_plan.cloud.selected_price.0.pricing_mode\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an OVHcloud Domain Zone Redirection with Terraform\nDESCRIPTION: This snippet demonstrates how to create a subdomain redirection using the ovh_domain_zone_redirection resource. It sets up a visible permanent redirection (HTTP 301) from a subdomain to a target URL.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/domain_zone_redirection.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_domain_zone_redirection\" \"test\" {\n  zone      = \"testdemo.ovh\"\n  subdomain = \"test\"\n  type      = \"visiblePermanent\"\n  target    = \"http://www.ovh\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Database Integration Information with Terraform\nDESCRIPTION: This snippet demonstrates how to use the ovh_cloud_project_database_integration data source to retrieve information about a database integration and output its type. It requires specifying service_name, engine, cluster_id, and integration id.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_database_integration.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_database_integration\" \"integration\" {\n  service_name  = \"XXX\"\n  engine        = \"YYY\"\n  cluster_id    = \"ZZZ\"\n  id            = \"UUU\"\n}\n\noutput \"integration_type\" {\n  value = data.ovh_cloud_project_database_integration.integration.type\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving S3 Credentials for OVH Cloud Project User\nDESCRIPTION: This snippet demonstrates how to retrieve S3 credentials for a specific user in an OVH cloud project. It first fetches all project users, filters for a user with a specific description, then retrieves their S3 credentials and outputs the access key ID and secret access key.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_user_s3_credential.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_users\" \"project_users\" {\n  service_name = \"XXX\"\n}\n\nlocals {\n  # Get the user ID of a previously created user with the description \"S3-User\"\n  users      = [for user in data.ovh_cloud_project_users.project_users.users : user.user_id if user.description == \"S3-User\"]\n  s3_user_id = local.users[0]\n}\n\ndata \"ovh_cloud_project_user_s3_credentials\" \"my_s3_credentials\" {\n  service_name = data.ovh_cloud_project_users.project_users.service_name\n  user_id      = local.s3_user_id\n}\n\ndata \"ovh_cloud_project_user_s3_credential\" \"my_s3_credential\" {\n  service_name  = data.ovh_cloud_project_user_s3_credentials.my_s3_credentials.service_name\n  user_id       = data.ovh_cloud_project_user_s3_credentials.my_s3_credentials.user_id\n  access_key_id = data.ovh_cloud_project_user_s3_credentials.my_s3_credentials.access_key_ids[0]\n}\n\noutput \"my_access_key_id\" {\n  value = data.ovh_cloud_project_user_s3_credential.my_s3_credential.access_key_id\n}\n\noutput \"my_secret_access_key\" {\n  value     = data.ovh_cloud_project_user_s3_credential.my_s3_credential.secret_access_key\n  sensitive = true\n}\n```\n\n----------------------------------------\n\nTITLE: Creating TCP Route and Rule for OVH IP Load Balancing in Terraform\nDESCRIPTION: This snippet demonstrates how to create a TCP route with a reject action and a corresponding rule to match the 'example.com' host using the Server Name Indication (SNI) field.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/iploadbalancing_tcp_route_rule.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_iploadbalancing_tcp_route\" \"reject\" {\n  service_name = \"loadbalancer-xxxxxxxxxxxxxxxxxx\"\n  weight       = 1\n  frontend_id  = 11111\n\n  action {\n    type = \"reject\"\n  }\n}\n\nresource \"ovh_iploadbalancing_tcp_route_rule\" \"example_rule\" {\n  service_name = \"loadbalancer-xxxxxxxxxxxxxxxxxx\"\n  route_id     = ovh_iploadbalancing_tcp_route.reject.id\n  display_name = \"Match example.com host\"\n  field        = \"sni\"\n  match        = \"is\"\n  negate       = false\n  pattern      = \"example.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Opensearch Index with Terraform\nDESCRIPTION: Example configuration for creating a DBaaS Logs Opensearch output index. The resource requires a service name, description, and suffix to create the index.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/dbaas_logs_output_opensearch_index.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_dbaas_logs_output_opensearch_index\" \"index\" {\n  service_name = \"....\"\n  description  = \"my opensearch index\"\n  suffix = \"index\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving OVH Cloud Project Details in Terraform\nDESCRIPTION: Example of how to fetch information about an OVH public cloud project using the project service name. The service name can be provided directly or through an environment variable.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project\" \"project\" {\n  service_name = \"XXX\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating OVHcloud VPS Resource with Terraform\nDESCRIPTION: Example of creating an OVHcloud VPS using Terraform. Demonstrates retrieving account details, creating a cart, selecting a VPS plan, and configuring the VPS with display name and specifications.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/vps.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_me\" \"my_account\" {}\n\ndata \"ovh_order_cart\" \"mycart\" {\n  ovh_subsidiary = data.ovh_me.my_account.ovh_subsidiary\n}\n\ndata \"ovh_order_cart_product_plan\" \"vps\" {\n  cart_id        = data.ovh_order_cart.mycart.id\n  price_capacity = \"renew\"\n  product        = \"vps\"\n  plan_code      = \"vps-le-2-2-40\"\n}\n\nresource \"ovh_vps\" \"my_vps\" {\n  display_name = \"dev_vps\"\n\n  ovh_subsidiary = data.ovh_order_cart.mycart.ovh_subsidiary\n  plan = [\n    {\n      duration     = \"P1M\"\n      plan_code    = data.ovh_order_cart_product_plan.vps.plan_code\n      pricing_mode = \"default\"\n\n      configuration = [\n        {\n          label = \"vps_datacenter\"\n          value = \"WAW\"\n        },\n        {\n          label = \"vps_os\"\n          value = \"Debian 10\"\n        }\n      ]\n    }\n  ]\n}\n\noutput \"vps_display_name\" {\n  value = ovh_vps.my_vps.display_name\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Container Registry User with Terraform and OVH Provider\nDESCRIPTION: This snippet demonstrates how to create a user for an OVH Managed Private Registry using Terraform. It first retrieves the registry information using a data source, then creates a user with specified email and login credentials.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_containerregistry_user.md#2025-04-17_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"ovh_cloud_project_containerregistry\" \"registry\" {\n  service_name = \"XXXXXX\"\n  registry_id  = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxx\"\n}\n\nresource \"ovh_cloud_project_containerregistry_user\" \"user\" {\n  service_name = ovh_cloud_project_containerregistry.registry.service_name\n  registry_id  = ovh_cloud_project_containerregistry.registry.id\n  email        = \"foo@bar.com\"\n  login        = \"foobar\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an IP Firewall Rule with Terraform in OVH\nDESCRIPTION: This snippet demonstrates how to create a firewall rule using the ovh_ip_firewall_rule resource. It sets up a deny rule for TCP traffic with a specific sequence number.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/ip_firewall_rule.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_ip_firewall_rule\" \"my_firewall_rule\" {\n  ip             = \"XXXXXX\"\n  ip_on_firewall = \"XXXXXX\"\n  sequence       = 0\n  action         = \"deny\"\n  protocol       = \"tcp\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Kubernetes Node Pool Nodes with Terraform\nDESCRIPTION: Example of using the ovh_cloud_project_kube_nodepool_nodes data source to retrieve information about nodes in a specific Kubernetes node pool and outputting the results.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_kube_nodepool_nodes.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_kube_nodepool_nodes\" \"nodes\" {\n  service_name  = \"XXXXXX\"\n  kube_id       = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxx\"\n  name          = \"XXXXXX\"\n}\n\noutput \"nodes\" {\n  value = data.ovh_cloud_project_kube_nodepool_nodes.nodes\n}\n```\n\n----------------------------------------\n\nTITLE: Creating OIDC Configuration for OVHcloud Managed Private Registry\nDESCRIPTION: This Terraform code snippet demonstrates how to create an OIDC configuration for an OVHcloud Managed Private Registry. It includes both required and optional fields for configuring the OIDC provider.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_containerregistry_oidc.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_cloud_project_containerregistry_oidc\" \"my_oidc\" {\n  service_name = \"XXXXXX\"\n  registry_id  = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxx\"\n\n  #required field\n  oidc_name          = \"my-oidc-provider\"\n  oidc_endpoint      = \"https://xxxx.yyy.com\"\n  oidc_client_id     = \"xxx\"\n  oidc_client_secret = \"xxx\"\n  oidc_scope         = \"openid,profile,email,offline_access\"\n\n  #optional field\n  oidc_groups_claim = \"groups\"\n  oidc_admin_group  = \"harbor-admin\"\n  oidc_verify_cert  = true\n  oidc_auto_onboard = true\n  oidc_user_claim   = \"preferred_username\"\n  delete_users      = false\n}\n\noutput \"oidc_client_secret\" {\n  value = ovh_cloud_project_containerregistry_oidc.my_oidc.oidc_client_secret\n  sensitive = true\n}\n```\n\n----------------------------------------\n\nTITLE: Setting IP Reverse with OVHcloud Terraform Provider\nDESCRIPTION: This Terraform resource configures a reverse DNS record for an IP address within an IP block. It requires specifying the IP block, the specific IP address, and the desired reverse DNS value.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/ip_reverse.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_ip_reverse\" \"test\" {\n  ip = \"192.0.2.0/24\"\n  ip_reverse = \"192.0.2.1\"\n  reverse = \"example.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Connection Pool with Terraform\nDESCRIPTION: This snippet demonstrates how to create a PostgreSQL cluster, database, user, and connection pool using Terraform. It also includes an output block to retrieve connection pool details.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_database_postgresql_connection_pool.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_cloud_project_database\" \"db\" {\n  service_name  = \"XXXX\"\n  engine        = \"postgresql\"\n  description  = \"test-postgresql-cluster\"\n  version      = \"15\"\n  plan         = \"essential\"\n  nodes {\n    region     = \"GRA\"\n  }\n  flavor = \"db1-4\"\n}\n\nresource \"ovh_cloud_project_database_database\" \"database\" {\n  service_name  = ovh_cloud_project_database.db.service_name\n  engine        = ovh_cloud_project_database.db.engine\n  cluster_id    = ovh_cloud_project_database.db.id\n  name          = \"mydatabase\"\n}\n\nresource \"ovh_cloud_project_database_postgresql_user\" \"user\" {\n  service_name = ovh_cloud_project_database.db.service_name\n  cluster_id   = ovh_cloud_project_database.db.id\n  name          = \"johndoe\"\n  roles         = [\"replication\"]\n}\n\nresource \"ovh_cloud_project_database_postgresql_connection_pool\" \"test_pool\" {\n  service_name = ovh_cloud_project_database.db.service_name\n  cluster_id   = ovh_cloud_project_database.db.id\n  database_id = ovh_cloud_project_database_database.database.id\n  name = \"test_connection_pool\"\n  user_id = ovh_cloud_project_database_postgresql_user.user.id\n  mode = \"session\"\n  size = 13\n}\n\noutput \"test_pool\" {\n  value = {\n    service_name: ovh_cloud_project_database_postgresql_connection_pool.test_pool.service_name\n    cluster_id: ovh_cloud_project_database_postgresql_connection_pool.test_pool.cluster_id\n    name: ovh_cloud_project_database_postgresql_connection_pool.test_pool.name\n    database_id: ovh_cloud_project_database_postgresql_connection_pool.test_pool.database_id\n    mode: ovh_cloud_project_database_postgresql_connection_pool.test_pool.mode\n    size: ovh_cloud_project_database_postgresql_connection_pool.test_pool.size\n    port: ovh_cloud_project_database_postgresql_connection_pool.test_pool.port\n    ssl_mode: ovh_cloud_project_database_postgresql_connection_pool.test_pool.ssl_mode\n    uri: ovh_cloud_project_database_postgresql_connection_pool.test_pool.uri\n    user_id: ovh_cloud_project_database_postgresql_connection_pool.test_pool.user_id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying OVH Cloud Project Database List with Terraform\nDESCRIPTION: Example showing how to retrieve a list of databases from an OVH cloud project database cluster. The code demonstrates setting up the data source with required parameters and accessing the database IDs through an output variable.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_database_databases.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_database_databases\" \"databases\" {\n  service_name  = \"XXXX\"\n  engine        = \"YYYY\"\n  cluster_id    = \"ZZZ\"\n}\n\noutput \"database_ids\" {\n  value = data.ovh_cloud_project_database_databases.databases.database_ids\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching Dedicated Server Interface to vRack using Terraform in HCL\nDESCRIPTION: This snippet demonstrates how to use the ovh_vrack_dedicated_server_interface resource to attach a Dedicated Server Network Interface to a vRack. It first retrieves server information using a data source, then uses that data to configure the vRack attachment.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/vrack_dedicated_server_interface.md#2025-04-17_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"ovh_dedicated_server\" \"server\" {\n  service_name = \"nsxxxxxxx.ip-xx-xx-xx.eu\"\n}\n\nresource \"ovh_vrack_dedicated_server_interface\" \"vdsi\" {\n  service_name = \"pn-xxxxxxx\" #name of the vrack\n  interface_id = data.ovh_dedicated_server.server.enabled_vrack_vnis[0]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating OVH IP Load Balancing UDP Farm Server with Terraform\nDESCRIPTION: This snippet demonstrates how to create an OVH IP Load Balancing UDP farm server using Terraform. It includes setting up the IP load balancer, creating a UDP farm, and adding a backend server to the farm.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/iploadbalancing_udp_farm_server.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_iploadbalancing\" \"lb\" {\n  service_name = \"ip-1.2.3.4\"\n  state        = \"ok\"\n}\n\nresource \"ovh_iploadbalancing_udp_farm\" \"farm_name\" {\n  service_name = \"${data.ovh_iploadbalancing.lb.service_name}\"\n  display_name = \"ingress-8080-gra\"\n  zone         = \"gra\"\n  port         = 80\n}\n\nresource \"ovh_iploadbalancing_udp_farm_server\" \"backend\" {\n  service_name           = \"${data.ovh_iploadbalancing.lb.service_name}\"\n  farm_id                = \"${ovh_iploadbalancing_udp_farm.farm_name.farm_id}\"\n  display_name           = \"mybackend\"\n  address                = \"4.5.6.7\"\n  status                 = \"active\"\n  port                   = 80\n}\n```\n\n----------------------------------------\n\nTITLE: Adding HDS Certification to OVH Cloud Project\nDESCRIPTION: This snippet shows how to add HDS certification option when creating a cloud project, which requires a business support level on the account. It includes fetching the HDS option plan and adding it to the project configuration.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project.md#2025-04-17_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_order_cart_product_options_plan\" \"hds\" {\n  cart_id        = data.ovh_order_cart.mycart.id\n  price_capacity = \"renew\"\n  product        = \"cloud\"\n  plan_code      = \"project.2018\"\n  options_plan_code  = \"certification.hds.2018\"\n  # plan_code    = \"project\" # when running in the US\n  # options_plan_code  = \"certification.hds\" # when running in the US\n}\n\nresource \"ovh_cloud_project\" \"my_cloud_project\" {\n  ovh_subsidiary = data.ovh_order_cart.mycart.ovh_subsidiary\n  description    = \"my cloud project\"\n\n  plan {\n    duration     = data.ovh_order_cart_product_plan.cloud.selected_price.0.duration\n    plan_code    = data.ovh_order_cart_product_plan.cloud.plan_code\n    pricing_mode = data.ovh_order_cart_product_plan.cloud.selected_price.0.pricing_mode\n  }\n\n  plan_option {\n    duration     = data.ovh_order_cart_product_options_plan.hds.selected_price.0.duration\n    plan_code    = data.ovh_order_cart_product_options_plan.hds.options_plan_code\n    pricing_mode = data.ovh_order_cart_product_options_plan.hds.selected_price.0.pricing_mode\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving S3-Compatible Storage Container Data in OVH Cloud with Terraform\nDESCRIPTION: This example demonstrates how to use the ovh_cloud_project_storage data source to retrieve information about an existing S3-compatible storage container in OVH Cloud. It requires the service name (project ID), region name, and container name.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_storage.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_storage\" \"storage\" {\n  service_name = \"<public cloud project ID>\"\n  region_name = \"GRA\"\n  name = \"my-storage-name\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeouts for Redis User Operations in OVHcloud Managed Database\nDESCRIPTION: This snippet demonstrates how to set custom timeouts for create, update, and delete operations on a Redis user resource. It allows fine-tuning of operation durations to accommodate specific requirements or network conditions.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_database_redis_user.md#2025-04-17_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_cloud_project_database_redis_user\" \"user\" {\n  # ...\n\n  timeouts {\n    create = \"1h\"\n    update = \"45m\"\n    delete = \"50s\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: OVH Configuration File Format for OAuth2 Authentication\nDESCRIPTION: Example of an OVH configuration file format for OAuth2 authentication. The file can be placed in the current working directory, user's home directory, or system-wide configuration.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/index.md#2025-04-17_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[default]\n; general configuration: default endpoint\nendpoint=ovh-eu\n\n[ovh-eu]\n; configuration specific to 'ovh-eu' endpoint\nclient_id=my_client_id\nclient_secret=my_client_secret\n```\n\n----------------------------------------\n\nTITLE: Creating IP Mitigation Configuration in Terraform\nDESCRIPTION: Example configuration showing how to create an IP mitigation resource using the OVH provider. The resource allows setting up permanent mitigation for a specific IP address or CIDR block.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/ip_mitigation.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_ip_mitigation\" \"mitigation\" {\n  ip               = \"XXXXXX\"\n  ip_on_mitigation = \"XXXXXX\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Kafka Topics Using Terraform in OVH Cloud Project\nDESCRIPTION: This snippet demonstrates how to use the ovh_cloud_project_database_kafka_topics data source to retrieve a list of Kafka topic IDs from a specified cluster in an OVH Cloud project. It requires the service_name (project ID) and cluster_id as inputs.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_database_kafka_topics.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_database_kafka_topics\" \"topics\" {\n  service_name  = \"XXX\"\n  cluster_id    = \"YYY\"\n}\n\noutput \"topic_ids\" {\n  value = data.ovh_cloud_project_database_kafka_topics.topics.topic_ids\n}\n```\n\n----------------------------------------\n\nTITLE: Creating HTTP Route for HTTPS Redirect in OVH Load Balancer\nDESCRIPTION: This snippet demonstrates how to create an HTTP route that redirects all URLs to HTTPS using the ovh_iploadbalancing_http_route resource. It sets up a 302 redirect action with a dynamic target URL.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/iploadbalancing_http_route.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_iploadbalancing_http_route\" \"https_redirect\" {\n  service_name = \"loadbalancer-xxxxxxxxxxxxxxxxxx\"\n  display_name = \"Redirect to HTTPS\"\n  weight = 1\n\n  action {\n    status = 302\n    target = \"https://${host}${path}${arguments}\"\n    type   = \"redirect\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL to OpenSearch Integration in Terraform\nDESCRIPTION: Demonstrates how to create an integration to push PostgreSQL logs into an OpenSearch database using the ovh_cloud_project_database_integration resource.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_database_integration.md#2025-04-17_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"ovh_cloud_project_database\" \"db_postgresql\" {\n  service_name  = \"XXXX\"\n  engine        = \"postgresql\"\n  id            = \"ZZZZ\"\n}\n\ndata \"ovh_cloud_project_database\" \"db_opensearch\" {\n  service_name  = \"XXXX\"\n  engine        = \"opensearch\"\n  id            = \"ZZZZ\"\n}\n\nresource \"ovh_cloud_project_database_integration\" \"integration\" {\n  service_name            = data.ovh_cloud_project_database.db_postgresql.service_name\n  engine                  = data.ovh_cloud_project_database.db_postgresql.engine\n  cluster_id              = data.ovh_cloud_project_database.db_postgresql.id\n  source_service_id       = data.ovh_cloud_project_database.db_postgresql.id\n  destination_service_id  = data.ovh_cloud_project_database.db_opensearch.id\n  type                    = \"opensearchLogs\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving S3 Credentials for OVH Cloud Project User in Terraform\nDESCRIPTION: This snippet demonstrates how to use the ovh_cloud_project_user_s3_credentials data source to fetch S3 access key IDs for a specific user in an OVH public cloud project. It requires the service_name (project ID) and user_id as inputs, and outputs the list of access key IDs.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_user_s3_credentials.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_user_s3_credentials\" \"my_s3_credentials\" {\n  service_name = \"XXXXXX\"\n  user_id      = \"1234\"\n}\n\noutput \"access_key_ids\" {\n  value = data.ovh_cloud_project_user_s3_credentials.my_s3_credentials.access_key_ids\n}\n```\n\n----------------------------------------\n\nTITLE: Windows Installation with French Language and PowerShell Post-Installation Script\nDESCRIPTION: Illustrates Windows Server 2022 Core installation with French display language and a base64-encoded PowerShell post-installation script.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/dedicated_server_reinstall_task.md#2025-04-17_snippet_3\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_dedicated_server\" \"server\" {\n  service_name = \"nsxxxxxxx.ip-xx-xx-xx.eu\"\n}\n\ndata \"ovh_dedicated_installation_template\" \"template\" {\n  template_name = \"debian12_64\"\n}\n\nresource \"ovh_dedicated_server_reinstall_task\" \"server_install\" {\n  service_name = data.ovh_dedicated_server.server.service_name\n  os           = \"win2022core-std_64\"\n  customizations {\n    hostname                 = \"ma-fenetre\"\n    language                 = \"fr-fr\"\n    post_installation_script = \"ImNvdWNvdSBwb3N0SW5zdGFsbGF0aW9uU2NyaXB0UG93ZXJTaGVsbCIgfCBPdXQtRmlsZSAtRmlsZVBhdGggImM6XG92aHVwZFxzY3JpcHRcY291Y291LnR4dCIKKEdldC1JdGVtUHJvcGVydHkgLUxpdGVyYWxQYXRoICJSZWdpc3RyeTo6SEtMTVxTT0ZUV0FSRVxNaWNyb3NvZnRcQ3J5cHRvZ3JhcGh5IiAtTmFtZSAiTWFjaGluZUd1aWQiKS5NYWNoaW5lR3VpZCB8IE91dC1GaWxlIC1GaWxlUGF0aCAiYzpcb3ZodXBkXHNjcmlwdFxjb3Vjb3UudHh0IiAtQXBwZW5kCihHZXQtRGF0ZSkuVG9Vbml2ZXJzYWxUaW1lKCkuVG9TdHJpbmcoInl5eXktTU0tZGQgSEg6bW06c3MiKSB8IE91dC1GaWxlIC1GaWxlUGF0aCAiYzpcb3ZodXBkXHNjcmlwdFxjb3Vjb3UudHh0IiAtQXBwZW5kCg==\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating OVH Cloud Project Instance Snapshot in Terraform\nDESCRIPTION: This snippet demonstrates how to create a snapshot of an instance in an OVH public cloud project using Terraform. It specifies the project ID, instance ID, and snapshot name.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_instance_snapshot.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_cloud_project_instance_snapshot\" \"snapshot\" {\n  service_name  = \"<public cloud project ID>\"\n  instance_id   = \"<instance ID>\"\n  name          = \"SnapshotExample\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Kafka User Access Data in Terraform\nDESCRIPTION: Example showing how to fetch Kafka user access information and output the certificate. Required parameters include service_name (project ID), cluster_id, and user_id. The example demonstrates accessing the certificate through the data source.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_database_kafka_user_access.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_database_kafka_user_access\" \"access\" {\n  service_name  = \"XXX\"\n  cluster_id    = \"YYY\"\n  user_id       = \"ZZZ\"\n}\n\noutput \"access_cert\" {\n  value = data.ovh_cloud_project_database_kafka_user_access.access.cert\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Linux Installation with Password Authentication\nDESCRIPTION: Demonstrates a basic Linux installation on a dedicated server using a Debian 12 template with password-based authentication.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/dedicated_server_reinstall_task.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_dedicated_server\" \"server\" {\n  service_name = \"nsxxxxxxx.ip-xx-xx-xx.eu\"\n}\n\ndata \"ovh_dedicated_installation_template\" \"template\" {\n  template_name = \"debian12_64\"\n}\n\nresource \"ovh_dedicated_server_reinstall_task\" \"server_reinstall\" {\n  service_name = data.ovh_dedicated_server.server.service_name\n  os           = data.ovh_dedicated_installation_template.template.template_name\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling DNSSEC for OVH Domain Zone using Terraform\nDESCRIPTION: This snippet demonstrates how to use the ovh_domain_zone_dnssec resource to enable or disable DNSSEC for an OVH domain zone. It requires specifying the zone_name argument, which is the name of the domain zone to be configured.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/domain_zone_dnssec.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_domain_zone_dnssec\" \"dnssec\" {\n  zone_name = \"mysite.ovh\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kube Proxy Mode and Settings\nDESCRIPTION: Creates a Kubernetes cluster with custom kube-proxy configuration including iptables and IPVS settings.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_kube.md#2025-04-17_snippet_5\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_cloud_project_kube\" \"my_cluster\" {\n  service_name    = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n  name            = \"my_kube_cluster\"\n  region          = \"GRA5\"\n  kube_proxy_mode = \"ipvs\" # or \"iptables\"\t\n\t\n  customization_kube_proxy {\n    iptables {\n      min_sync_period = \"PT0S\"\n      sync_period = \"PT0S\"\n    }\n        \n    ipvs {\n      min_sync_period = \"PT0S\"\n      sync_period = \"PT0S\"\n      scheduler = \"rr\"\n      tcp_timeout = \"PT0S\"\n      tcp_fin_timeout = \"PT0S\"\n      udp_timeout = \"PT0S\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: OVH Configuration File Format for Application Key Authentication\nDESCRIPTION: Example of an OVH configuration file format for Application Key authentication. The file specifies endpoint, application_key, application_secret, and consumer_key parameters.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/index.md#2025-04-17_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[default]\n; general configuration: default endpoint\nendpoint=ovh-eu\n\n[ovh-eu]\n; configuration specific to 'ovh-eu' endpoint\napplication_key=my_app_key\napplication_secret=my_application_secret\nconsumer_key=my_consumer_key\n```\n\n----------------------------------------\n\nTITLE: Creating OVH Cloud Project User with S3 Credentials in Terraform\nDESCRIPTION: Example showing how to create a cloud project user with objectstore_operator role and generate S3 credentials using Terraform resources.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_user_s3_credential.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_cloud_project_user\" \"user\" {\n  service_name = \"XXX\"\n  description  = \"my user for acceptance tests\"\n  role_names   = [\n    \"objectstore_operator\"\n  ]\n}\n\nresource \"ovh_cloud_project_user_s3_credential\" \"my_s3_credentials\" {\n  service_name = ovh_cloud_project_user.user.service_name\n  user_id      = ovh_cloud_project_user.user.id\n}\n```\n\n----------------------------------------\n\nTITLE: Querying OVH Cloud Project Database Log Subscription in Terraform\nDESCRIPTION: This snippet demonstrates how to use the ovh_cloud_project_database_log_subscription data source to retrieve information about a log subscription. It includes the required arguments and shows how to access the retrieved data.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_database_log_subscription.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_database_log_subscription\" \"subscription\" {\n    service_name = \"VVV\"\n    engine       = \"XXX\"\n    cluster_id   = \"YYY\"\n    id           = \"ZZZ\"\n}\n\noutput \"subscription_ldp_name\" {\n  value = data.ovh_cloud_project_database_log_subscription.subscription.ldp_service_name\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving OVH Cloud Project Storage Data in Terraform\nDESCRIPTION: This snippet demonstrates how to use the ovh_cloud_project_storage data source to retrieve information about storage containers in a specific region of an OVH Cloud project.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_storages.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_storage\" \"storage\" {\n  service_name = \"<public cloud project ID>\"\n  region_name = \"GRA\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic HTTP Frontend with Load Balancer\nDESCRIPTION: Creates a basic HTTP frontend configuration with a farm backend for an OVH load balancer. Sets up routing for ports 80 and 443 with a specified backend farm.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/iploadbalancing_http_frontend.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_iploadbalancing\" \"lb\" {\n  service_name = \"ip-1.2.3.4\"\n  state        = \"ok\"\n}\n\nresource \"ovh_iploadbalancing_http_farm\" \"farm80\" {\n  service_name = \"${data.ovh_iploadbalancing.lb.service_name}\"\n  display_name = \"ingress-8080-gra\"\n  zone         = \"all\"\n  port         = 80\n}\n\nresource \"ovh_iploadbalancing_http_frontend\" \"test_frontend\" {\n  service_name    = \"${data.ovh_iploadbalancing.lb.service_name}\"\n  display_name    = \"ingress-8080-gra\"\n  zone            = \"all\"\n  port            = \"80,443\"\n  default_farm_id = \"${ovh_iploadbalancing_http_farm.farm80.id}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Applying IP Restriction to OVHcloud Managed Database in Terraform\nDESCRIPTION: This snippet demonstrates how to use the ovh_cloud_project_database_ip_restriction resource to apply an IP restriction to an OVHcloud Managed Database cluster. It retrieves database information using a data source and then creates an IP restriction.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_database_ip_restriction.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_database\" \"db\" {\n  service_name = \"XXXX\"\n  engine       = \"YYYY\"\n  id           = \"ZZZZ\"\n}\n\nresource \"ovh_cloud_project_database_ip_restriction\" \"ip_restriction\" {\n  service_name = data.ovh_cloud_project_database.db.service_name\n  engine       = data.ovh_cloud_project_database.db.engine\n  cluster_id   = data.ovh_cloud_project_database.db.id\n  ip           = \"178.97.6.0/24\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating OVH IP Load Balancing TCP Farm with Terraform\nDESCRIPTION: This snippet demonstrates how to create a TCP farm for an OVH IP Load Balancer using Terraform. It references an existing load balancer and creates a farm with a specific display name and zone.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/iploadbalancing_tcp_farm.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_iploadbalancing\" \"lb\" {\n  service_name = \"ip-1.2.3.4\"\n  state        = \"ok\"\n}\n\nresource \"ovh_iploadbalancing_tcp_farm\" \"farm_name\" {\n  service_name = \"${data.ovh_iploadbalancing.lb.service_name}\"\n  display_name = \"ingress-8080-gra\"\n  zone         = \"GRA\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating OVH Cloud Database Log Subscription in Terraform\nDESCRIPTION: This snippet demonstrates how to create a log subscription for a database cluster using Terraform. It retrieves data about a Graylog stream and a database, then creates a subscription linking them.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_database_log_subscription.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_dbaas_logs_output_graylog_stream\" \"stream\" {\n  service_name = \"ldp-xx-xxxxx\"\n  title        = \"my stream\"\n}\n\ndata \"ovh_cloud_project_database\" \"db\" {\n  service_name  = \"XXX\"\n  engine        = \"YYY\"\n  id            = \"ZZZ\"\n}\n\nresource \"ovh_cloud_project_database_log_subscription\" \"subscription\" {\n\tservice_name = data.ovh_cloud_project_database.db.service_name\n\tengine       = data.ovh_cloud_project_database.db.engine\n\tcluster_id   = data.ovh_cloud_project_database.db.id\n\tstream_id    = data.ovh_dbaas_logs_output_graylog_stream.stream.id\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Database in OVHcloud Managed Database Cluster with Terraform\nDESCRIPTION: Example Terraform configuration for creating a database in an existing OVHcloud Managed Database cluster. This uses a data source to reference an existing database cluster and creates a new database within it.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_database_database.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_database\" \"db\" {\n  service_name  = \"XXXX\"\n  engine        = \"YYYY\"\n  id            = \"ZZZZ\"\n}\n\nresource \"ovh_cloud_project_database_database\" \"database\" {\n  service_name  = data.ovh_cloud_project_database.db.service_name\n  engine        = data.ovh_cloud_project_database.db.engine\n  cluster_id    = data.ovh_cloud_project_database.db.id\n  name          = \"mydatabase\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Kafka Topic in OVH Cloud Project Database\nDESCRIPTION: Example Terraform configuration to create a Kafka topic in an existing OVH Cloud Project Database Kafka cluster. This specifies essential topic parameters like partitions, replication, and retention settings.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_database_kafka_topic.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_database\" \"kafka\" {\n  service_name  = \"XXX\"\n  engine        = \"kafka\"\n  id            = \"ZZZ\"\n}\n\nresource \"ovh_cloud_project_database_kafka_topic\" \"topic\" {\n  service_name        = data.ovh_cloud_project_database.kafka.service_name\n  cluster_id          = data.ovh_cloud_project_database.kafka.id\n  name                = \"mytopic\"\n  min_insync_replicas = 1\n  partitions          = 3\n  replication         = 2\n  retention_bytes     = 4\n  retention_hours     = 5\n}\n```\n\n----------------------------------------\n\nTITLE: Querying OVH Container Registry Data in Terraform\nDESCRIPTION: Example showing how to query information about an existing container registry in an OVH public cloud project. Requires the service name and registry ID to identify the specific registry.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_containerregistry.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_containerregistry\" \"my_registry\" {\n  service_name = \"XXXXXX\"\n  registry_id  = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Applying IP Restrictions to OVHcloud Managed Kubernetes Cluster in Terraform\nDESCRIPTION: This Terraform resource applies IP restrictions to an OVHcloud Managed Kubernetes cluster. It specifies the project service name, Kubernetes cluster ID, and a list of authorized CIDR ranges.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_kube_iprestrictions.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_cloud_project_kube_iprestrictions\" \"vrack_only\" {\n  service_name = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n  kube_id      = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxx\"\n  ips          = [\"10.42.0.0/16\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an OpenSearch Pattern in Terraform\nDESCRIPTION: This snippet demonstrates how to create an OpenSearch pattern using Terraform. It references an existing OpenSearch cluster and sets up a pattern with a maximum index count and a specified format.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_database_opensearch_pattern.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_database\" \"opensearch\" {\n  service_name  = \"XXX\"\n  engine        = \"opensearch\"\n  id            = \"ZZZ\"\n}\n\nresource \"ovh_cloud_project_database_opensearch_pattern\" \"pattern\" {\n  service_name    = data.ovh_cloud_project_database.opensearch.service_name\n  cluster_id      = data.ovh_cloud_project_database.opensearch.id\n  max_index_count = 2\n  pattern         = \"logs_*\"\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching Public Cloud Project to vRack using Terraform\nDESCRIPTION: Terraform configuration to attach a Public Cloud Project to a vRack service. Requires service_name for vRack and project_id for the cloud project to be attached.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/vrack_cloudproject.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_vrack_cloudproject\" \"vcp\" {\n  service_name = \"12345\"\n  project_id   = \"67890\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating OVHcloud Key Management Service (OKMS) Resource in Terraform\nDESCRIPTION: This snippet demonstrates how to create a new OKMS resource using Terraform. It specifies the OVH subsidiary, region, and display name for the KMS.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/okms.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_okms\" \"new_kms\" {\n  ovh_subsidiary = \"FR\"\n  region         = \"eu-west-rbx\"\n  display_name   = \"terraformed KMS\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating vRack and Attaching IP Block with Terraform and OVH Provider\nDESCRIPTION: This Terraform configuration creates a vRack, orders an IP block, and attaches the IP block to the vRack. It uses OVH provider resources and data sources to fetch account information, create a cart, and configure the vRack and IP block.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/vrack_ip.md#2025-04-17_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"ovh_me\" \"my_account\" {}\n\ndata \"ovh_order_cart\" \"my_cart\" {\n  ovh_subsidiary = data.ovh_me.my_account.ovh_subsidiary\n}\n\ndata \"ovh_order_cart_product_plan\" \"vrack\" {\n  cart_id        = data.ovh_order_cart.my_cart.id\n  price_capacity = \"renew\"\n  product        = \"vrack\"\n  plan_code      = \"vrack\"\n}\n\nresource \"ovh_vrack\" \"vrack\" {\n  description    = data.ovh_order_cart.my_cart.description\n  name           = data.ovh_order_cart.my_cart.description\n  ovh_subsidiary = data.ovh_order_cart.my_cart.ovh_subsidiary\n\n  plan {\n    duration     = data.ovh_order_cart_product_plan.vrack.selected_price.0.duration\n    plan_code    = data.ovh_order_cart_product_plan.vrack.plan_code\n    pricing_mode = data.ovh_order_cart_product_plan.vrack.selected_price.0.pricing_mode\n  }\n}\n\ndata \"ovh_order_cart_product_plan\" \"ipblock\" {\n  cart_id        = data.ovh_order_cart.my_cart.id\n  price_capacity = \"renew\"\n  product        = \"ip\"\n  plan_code      = \"ip-v4-s30-ripe\"\n}\n\nresource \"ovh_ip_service\" \"ipblock\" {\n  ovh_subsidiary = data.ovh_order_cart.my_cart.ovh_subsidiary\n  description    = data.ovh_order_cart.my_cart.description\n\n  plan {\n    duration     = data.ovh_order_cart_product_plan.ipblock.selected_price.0.duration\n    plan_code    = data.ovh_order_cart_product_plan.ipblock.plan_code\n    pricing_mode = data.ovh_order_cart_product_plan.ipblock.selected_price.0.pricing_mode\n\n    configuration {\n      label = \"country\"\n      value = \"FR\"\n    }\n  }\n}\n\nresource \"ovh_vrack_ip\" \"vrack_block\" {\n  service_name = ovh_vrack.vrack.service_name\n  block        = ovh_ip_service.ipblock.ip\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Details from OVH Cloud Project in Terraform\nDESCRIPTION: This example demonstrates how to fetch details of a specific user from an OVH cloud project. It first retrieves all users, filters to find a user with a specific description (\"S3-User\"), and then fetches the detailed information for that user.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_user.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_users\" \"project_users\" {\n  service_name = \"XXX\"\n}\n\nlocals {\n  # Get the user ID of a previously created user with the description \"S3-User\"\n  users      = [for user in data.ovh_cloud_project_users.project_users.users : user.user_id if user.description == \"S3-User\"]\n  s3_user_id = local.users[0]\n}\n\ndata \"ovh_cloud_project_user\" \"my_user\" {\n  service_name = data.ovh_cloud_project_users.project_users.service_name\n  user_id      = local.s3_user_id\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Loadbalancer Log Subscription Data in Terraform\nDESCRIPTION: This snippet demonstrates how to retrieve information about a subscription to a Managed Loadbalancer Logs Service in an OVH public cloud project using the ovh_cloud_project_region_loadbalancer_log_subscription data source.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_region_loadbalancer_log_subscription.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_region_loadbalancer_log_subscription\" \"sub\" {\n  service_name = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n  region_name = \"gggg\"\n  loadbalancer_id = \"aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee\"\n  subscription_id = \"zzzzzzzz-yyyy-xxxx-wwww-vvvvvvvvvvvv\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating OVHcloud KMS Credentials with Terraform\nDESCRIPTION: This snippet demonstrates how to create KMS credentials using Terraform. It shows two examples: one without a CSR where the server generates the private key, and another using a provided CSR file.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/okms_credential.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_me\" \"myaccount\" {}\n\nresource \"ovh_okms_credential\" \"cred_no_csr\" {\n  okms_id       = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  name          = \"cred\"\n  identity_urns = [\"urn:v1:eu:identity:account:${data.ovh_me.current_account.nichandle}\"]\n  description   = \"Credential without CSR\"\n}\n\nresource \"ovh_okms_credential\" \"cred_from_csr\" {\n  okms_id       = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  name          = \"cred_csr\"\n  identity_urns = [\"urn:v1:eu:identity:account:${data.ovh_me.current_account.nichandle}\"]\n  csr           = file(\"cred.csr\")\n  description   = \"Credential from CSR\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Domain Name Servers using OVH Terraform Provider\nDESCRIPTION: This snippet demonstrates how to use the ovh_domain_name_servers resource to manage name servers for a domain. It configures two servers, one with both host and IP, and another with just the host.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/domain_name_servers.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_domain_name_servers\" \"name_servers\" {\n  domain = \"mydomain.ovh\"\n\n  servers {\n    host = \"dns105.ovh.net\"\n    ip = \"213.251.188.144\"\n  }\n\n  servers {\n    host = \"ns105.ovh.net\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving OIDC Configuration from OVHcloud Managed Private Registry in Terraform\nDESCRIPTION: This example demonstrates how to retrieve OIDC configuration from an existing OVHcloud Managed Private Registry and output the OIDC client ID. It requires specifying the service_name (project ID) and registry_id.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_containerregistry_oidc.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_containerregistry_oidc\" \"my_oidc\" {\n  service_name = \"XXXXXX\"\n  registry_id  = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxx\"\n}\n\noutput \"oidc-client-id\" {\n  value = data.ovh_cloud_project_containerregistry_oidc.my_oidc.oidc_client_id\n}\n```\n\n----------------------------------------\n\nTITLE: Creating M3DB Namespace in OVHcloud Public Cloud Project\nDESCRIPTION: This snippet demonstrates how to create a namespace for a M3DB cluster in an OVHcloud public cloud project using Terraform. It retrieves the M3DB cluster information and creates a new namespace with specified settings.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_database_m3db_namespace.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_database\" \"m3db\" {\n  service_name  = \"XXX\"\n  engine        = \"m3db\"\n  id            = \"ZZZ\"\n}\n\nresource \"ovh_cloud_project_database_m3db_namespace\" \"namespace\" {\n  service_name              = data.ovh_cloud_project_database.m3db.service_name\n  cluster_id                = data.ovh_cloud_project_database.m3db.id\n  name                      = \"mynamespace\"\n  resolution                = \"P2D\"\n  retention_period_duration = \"PT48H\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing OVH Cloud Project Database User Resource\nDESCRIPTION: This bash command shows how to import an existing OVH Cloud Project Database user into Terraform state. It requires the service_name, engine, cluster_id, and user id.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_database_user.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform import ovh_cloud_project_database_user.my_user service_name/engine/cluster_id/id\n```\n\n----------------------------------------\n\nTITLE: Querying OVH Cloud Instances with Terraform\nDESCRIPTION: Example showing how to retrieve a list of instances from a specific region in an OVH cloud project. Requires service_name (project ID) and region parameters.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_instances.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_instances\" \"instance\" {\n  service_name = \"YYYY\"\n  region = \"XXXX\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating SSH Key in OVH Cloud Project with Terraform\nDESCRIPTION: Creates a new SSH key in an OVH public cloud project. Requires the project ID, public key content, and a name for the key. The public key must be in valid SSH format.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_ssh_key.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_cloud_project_ssh_key\" \"key\" {\n  service_name = \"<public cloud project ID>\"\n  public_key   = \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgQC9xPpdqP3sx2H+gcBm65tJEaUbuifQ1uGkgrWtNY0PRKNNPdy+3yoVOtxk6Vjo4YZ0EU/JhmQfnrK7X7Q5vhqYxmozi0LiTRt0BxgqHJ+4hWTWMIOgr+C2jLx7ZsCReRk+fy5AHr6h0PHQEuXVLXeUy/TDyuY2JPtUZ5jcqvLYgQ== my-key\"\n  name         = \"new_key\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Vrack Networks for OVH IPLoadbalancing using Terraform\nDESCRIPTION: This example demonstrates how to retrieve the list of vrack network IDs available for an IPLoadbalancer. It requires the service name and optionally filters results by subnet.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/iploadbalancing_vrack_networks.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata ovh_iploadbalancing_vrack_networks \"lb_networks\" {\n  service_name = \"XXXXXX\"\n  subnet       = \"10.0.0.0/24\"\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching IP Load Balancing to vRack using Terraform\nDESCRIPTION: Configuration block for attaching an IP Load Balancing service to an OVH vRack. Requires the vRack service ID and IP Load Balancing ID as input parameters. The resource creates the association between the specified vRack and IP Load Balancing service.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/vrack_iploadbalancing.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_vrack_iploadbalancing\" \"viplb\" {\n  service_name     = \"xxx\"\n  ip_loadbalancing = \"yyy\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating IAM Permissions Group for VPS Read Access in Terraform OVH Provider\nDESCRIPTION: This snippet demonstrates how to create an IAM permissions group that allows all READ actions on VPSs. It uses a data source to fetch all VPS-related actions and filters them to include only READ category actions.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/iam_permissions_group.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_iam_permissions_group\" \"read_vps\" {\n  name        = \"read_vps\"\n  description = \"Read access to vps\"\n\n  allow = [\n    for act in data.ovh_iam_reference_actions.vps.actions : act.action if(contains(act.categories, \"READ\"))\n  ]\n}\n\ndata \"ovh_iam_reference_actions\" \"vps\" {\n  type = \"vps\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving OVH Cloud Projects Data with Terraform\nDESCRIPTION: Example showing how to declare a data source to fetch information about all OVH cloud projects. This will retrieve project details including service names, project IDs, status, and IAM configuration.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_projects.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_projects\" \"projects\" {}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Kafka Schema Registry ACL Data with Terraform on OVH Cloud\nDESCRIPTION: This example demonstrates how to query information about a schema registry ACL in a Kafka cluster. It requires the service name (project ID), cluster ID, and ACL ID as input parameters and outputs the permission associated with the ACL.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_database_kafka_schemaregistryacl.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_database_kafka_schemaregistryacl\" \"schema_registry_acl\" {\n  service_name  = \"XXX\"\n  cluster_id    = \"YYY\"\n  id            = \"ZZZ\"\n}\n\noutput \"acl_permission\" {\n  value = data.ovh_cloud_project_database_kafka_schemaregistryacl.schema_registry_acl.permission\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an OVH Cloud Project Network Private Subnet with Terraform\nDESCRIPTION: This snippet demonstrates how to create a private subnet in an OVH cloud project network using Terraform. It specifies the service name, network ID, subnet name, region, DNS nameservers, CIDR block, and other configuration options.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_network_private_subnet_v2.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_cloud_project_network_private_subnet_v2\" \"subnet\" {\n  service_name      = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n  network_id        = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  name              = \"my_private_subnet\"\n  region            = \"XXX1\"\n  dns_nameservers   = [\"1.1.1.1\"]\n  cidr              = \"192.168.168.0/24\"\n  dhcp              = true\n  enable_gateway_ip = true\n  use_default_public_dns_resolver = false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dedicated Server Reboot with Rescue Mode\nDESCRIPTION: Example showing how to configure a dedicated server reboot task with rescue mode boot configuration. The example demonstrates fetching rescue boot options, updating server configuration, and triggering a reboot with dependencies.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/dedicated_server_reboot_task.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_dedicated_server_boots\" \"rescue\" {\n  service_name = \"nsxxxxxxx.ip-xx-xx-xx.eu\"\n  boot_type    = \"rescue\"\n  kernel       = \"rescue64-pro\"\n}\n\nresource \"ovh_dedicated_server_update\" \"server_on_rescue\" {\n  service_name = \"nsxxxxxxx.ip-xx-xx-xx.eu\"\n  boot_id      = data.ovh_dedicated_server_boots.rescue.result[0]\n  monitoring   = true\n  state        = \"ok\"\n}\n\nresource \"ovh_dedicated_server_reboot_task\" \"server_reboot\" {\n  service_name = data.ovh_dedicated_server_boots.rescue.service_name\n\n  keepers = [\n     ovh_dedicated_server_update.server_on_rescue.boot_id,\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a PostgreSQL User with Terraform in OVH Cloud Project\nDESCRIPTION: This snippet demonstrates how to create a PostgreSQL user named 'johndoe' with a 'replication' role. It uses a data source to fetch the database details and outputs the generated password.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_database_postgresql_user.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_database\" \"postgresql\" {\n  service_name  = \"XXXX\"\n  engine        = \"postgresql\"\n  id            = \"ZZZZ\"\n}\n\nresource \"ovh_cloud_project_database_postgresql_user\" \"user\" {\n  service_name  = data.ovh_cloud_project_database.postgresql.service_name\n  cluster_id    = data.ovh_cloud_project_database.postgresql.id\n  name          = \"johndoe\"\n  roles         = [\"replication\"]\n}\n\noutput \"user_password\" {\n  value     = ovh_cloud_project_database_postgresql_user.user.password\n  sensitive = true\n}\n```\n\n----------------------------------------\n\nTITLE: Creating HTTP Frontend with Custom Headers\nDESCRIPTION: Configures an HTTP frontend with custom headers for IP and port information. Demonstrates adding X-Ip-Header and X-Port-Header to the frontend configuration.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/iploadbalancing_http_frontend.md#2025-04-17_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_iploadbalancing\" \"lb\" {\n  service_name = \"ip-1.2.3.4\"\n  state        = \"ok\"\n}\n\nresource \"ovh_iploadbalancing_http_farm\" \"farm80\" {\n  service_name = \"${data.ovh_iploadbalancing.lb.service_name}\"\n  display_name = \"ingress-8080-gra\"\n  zone         = \"all\"\n  port         = 80\n}\n\nresource \"ovh_iploadbalancing_http_frontend\" \"test_frontend\" {\n  service_name    = \"${data.ovh_iploadbalancing.lb.service_name}\"\n  display_name    = \"ingress-8080-gra\"\n  zone            = \"all\"\n  port            = \"80,443\"\n  default_farm_id = \"${ovh_iploadbalancing_http_farm.farm80.id}\"\n  http_header     = [\"X-Ip-Header %%ci\", \"X-Port-Header %%cp\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating IAM Policy with Group Access in OVH Terraform Provider\nDESCRIPTION: Example of creating an IAM policy that allows a group to access OVH manager functionality. The policy grants specific API permissions to a user group and associates it with account resources.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/iam_policy.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_me\" \"account\" {}\n\nresource \"ovh_me_identity_group\" \"my_group\" {\n  name        = \"my_group\"\n  description = \"my_group created in Terraform\"\n}\n\nresource \"ovh_iam_policy\" \"manager\" {\n  name        = \"allow_ovh_manager\"\n  description = \"Users are allowed to use the OVH manager\"\n  identities  = [ovh_me_identity_group.my_group.urn]\n  resources   = [data.ovh_me.account.urn]\n  # these are all the actions\n  allow = [\n    \"account:apiovh:me/get\",\n    \"account:apiovh:me/supportLevel/get\",\n    \"account:apiovh:me/certificates/get\",\n    \"account:apiovh:me/tag/get\",\n    \"account:apiovh:services/get\",\n    \"account:apiovh:*\",\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving PostgreSQL Connection Pool Data with Terraform OVH Provider\nDESCRIPTION: This snippet demonstrates how to retrieve information about a PostgreSQL connection pool using the OVH Terraform provider. It shows the data source declaration and how to output various properties of the connection pool, including service name, cluster ID, name, database ID, mode, size, port, SSL mode, URI, and user ID.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_database_postgresql_connection_pool.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_database_postgresql_connection_pool\" \"test_pool\" {\n  service_name  = \"XXX\"\n  cluster_id    = \"YYY\"\n  name          = \"ZZZ\"\n}\n\noutput \"test_pool\" {\n  value = {\n    service_name: data.ovh_cloud_project_database_postgresql_connection_pool.test_pool.service_name\n    cluster_id: data.ovh_cloud_project_database_postgresql_connection_pool.test_pool.cluster_id\n    name: data.ovh_cloud_project_database_postgresql_connection_pool.test_pool.name\n    database_id: data.ovh_cloud_project_database_postgresql_connection_pool.test_pool.database_id\n    mode: data.ovh_cloud_project_database_postgresql_connection_pool.test_pool.mode\n    size: data.ovh_cloud_project_database_postgresql_connection_pool.test_pool.size\n    port: data.ovh_cloud_project_database_postgresql_connection_pool.test_pool.port\n    ssl_mode: data.ovh_cloud_project_database_postgresql_connection_pool.test_pool.ssl_mode\n    uri: data.ovh_cloud_project_database_postgresql_connection_pool.test_pool.uri\n    user_id: data.ovh_cloud_project_database_postgresql_connection_pool.test_pool.user_id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying PostgreSQL Connection Pools in OVH Cloud Project with Terraform\nDESCRIPTION: This snippet demonstrates how to use the ovh_cloud_project_database_postgresql_connection_pools data source to retrieve connection pool IDs from a PostgreSQL cluster in an OVH Cloud project. It requires the service name and cluster ID as inputs.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_database_postgresql_connection_pools.md#2025-04-17_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"ovh_cloud_project_database_postgresql_connection_pools\" \"test_pools\" {\n  service_name  = \"XXX\"\n  cluster_id    = \"YYY\"\n}\n\noutput \"connection_pool_ids\" {\n  value = data.ovh_cloud_project_database_postgresql_connection_pools.test_pools.connection_pool_ids\n}\n```\n\n----------------------------------------\n\nTITLE: Creating OVH Cloud Project Network Resource with Terraform\nDESCRIPTION: Example of creating a network resource in an OVH public cloud project with subnet configuration. Demonstrates setting up network name, region, and subnet parameters including CIDR, DHCP, and gateway settings.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_region_network.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_cloud_project_region_network\" \"net\" {\n   service_name = \"XXXXXX\"\n   region_name  = \"EU-SOUTH-LZ-MAD-A\"\n   name         = \"Madrid Network\"\n   subnet       = {\n      cidr              = \"10.0.0.0/24\"\n      enable_dhcp       = true\n      enable_gateway_ip = false\n      ip_version        = 4\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the ovh_hosting_privatedatabase_user_grant Data Source in Terraform\nDESCRIPTION: Example showing how to retrieve information about a user grant on an OVH hosting private database. Requires the service name, database name, and user name as input parameters.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/hosting_privatedatabase_user_grant.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_hosting_privatedatabase_user_grant\" \"user_grant\" {\n  service_name  = \"XXXXXX\"\n  database_name = \"XXXXXX\"\n  user_name     = \"XXXXXX\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Symmetric Key in JWK Format to OVHcloud KMS\nDESCRIPTION: Creates a symmetric key resource in OVHcloud KMS using JWK format. The key is configured for encryption and decryption operations with an oct (symmetric) key type.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/okms_service_key_jwk.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_okms_service_key_jwk\" \"key_symetric\" {\n  okms_id    = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  name       = \"key_oct\"\n  keys       = [\n    jsondecode(<<EOT\n      {\n        \"k\": \"Wc7IgEZzWicZf1LTJUtA0w\",\n        \"key_ops\": [\"encrypt\", \"decrypt\"],\n        \"kty\": \"oct\"\n      }\n    EOT\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OVH Dedicated CEPH ACL in Terraform\nDESCRIPTION: Example showing how to create an ACL for an OVH Dedicated CEPH instance. The configuration retrieves CEPH instance details and creates a new ACL rule for a specific IP address and netmask.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/dedicated_ceph_acl.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_dedicated_ceph\" \"my_ceph\" {\n  service_name = \"94d423da-0e55-45f2-9812-836460a19939\"\n}\n\nresource \"ovh_dedicated_ceph_acl\" \"my-acl\" {\n  service_name = data.ovh_dedicated_ceph.my_ceph.id\n  network      = \"1.2.3.4\"\n  netmask      = \"255.255.255.255\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating OVH Private Database User with Terraform\nDESCRIPTION: Creates a new user account on an OVH private cloud database instance. Requires service name, username, and password credentials. The password must be alphanumeric with at least one number and minimum 8 characters.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/hosting_privatedatabase_user.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_hosting_privatedatabase_user\" \"user\" {\n  service_name  = \"XXXXXX\"\n  password      = \"XXXXXX\"\n  user_name     = \"XXXXXX\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Kubernetes IP Restrictions Data in Terraform\nDESCRIPTION: Example of using the ovh_cloud_project_kube_iprestrictions data source to retrieve IP restrictions for an OVHcloud Managed Kubernetes Service cluster. The example retrieves the IP restrictions and outputs the list of IPs.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_kube_iprestrictions.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_kube_iprestrictions\" \"ip_restrictions\" {\n  service_name = \"XXXXXX\"\n  kube_id      = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxx\"\n}\n\noutput \"ips\" {\n  value = data.ovh_cloud_project_kube_iprestrictions.ip_restrictions.ips\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving OVH DBaaS Logs Output OpenSearch Index Data in Terraform\nDESCRIPTION: This snippet demonstrates how to use the 'ovh_dbaas_logs_output_opensearch_index' data source to fetch information about a specific OpenSearch index in OVH's DBaaS Logs platform. It requires the service name and index name as inputs.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/dbaas_logs_output_opensearch_index.md#2025-04-17_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"ovh_dbaas_logs_output_opensearch_index\" \"index\" {\n  service_name = \"ldp-xx-xxxxx\"\n  name        = \"index-name\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating OVH IP Load Balancing UDP Farm using Terraform\nDESCRIPTION: This snippet demonstrates how to create a UDP farm for an OVH IP Load Balancer using Terraform. It retrieves the load balancer details and creates a farm with specified parameters.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/iploadbalancing_udp_farm.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_iploadbalancing\" \"lb\" {\n  service_name = \"ip-1.2.3.4\"\n  state        = \"ok\"\n}\n\nresource \"ovh_iploadbalancing_udp_farm\" \"farm_name\" {\n  service_name = \"${data.ovh_iploadbalancing.lb.service_name}\"\n  display_name = \"ingress-8080-gra\"\n  zone         = \"gra\"\n  port         = 80\n}\n```\n\n----------------------------------------\n\nTITLE: Associating an Existing vRack to a New OVH Cloud Project\nDESCRIPTION: This snippet demonstrates how to associate a pre-existing vRack to a new cloud project at creation time by adding configuration parameters to the plan resource.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project.md#2025-04-17_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_cloud_project\" \"my_cloud_project\" {\n  ovh_subsidiary = data.ovh_order_cart.mycart.ovh_subsidiary\n  description    = \"cloud project with pre-existing vrack\"\n\n  plan {\n    duration     = data.ovh_order_cart_product_plan.cloud.selected_price.0.duration\n    plan_code    = data.ovh_order_cart_product_plan.cloud.plan_code\n    pricing_mode = data.ovh_order_cart_product_plan.cloud.selected_price.0.pricing_mode\n    configuration {\n      label = \"vrack\"\n      value = \"pn-*******\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating OVH Dedicated NAS-HA Partition using Terraform\nDESCRIPTION: This snippet demonstrates how to create a partition on an OVH HA-NAS service using Terraform. It specifies the service name, partition name, size, and protocol.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/dedicated_nasha_partition.md#2025-04-17_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"ovh_dedicated_nasha_partition\" \"my_partition\" {\n  service_name = \"zpool-12345\"\n  name = \"my-partition\"\n  size = 20\n  protocol = \"NFS\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an OVH Cloud Project Storage Container with Terraform\nDESCRIPTION: This snippet demonstrates how to create an S3-compatible storage container in an OVH Cloud project using Terraform. It specifies the project ID, region, container name, and enables versioning.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_storage.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_cloud_project_storage\" \"storage\" {\n  service_name = \"<public cloud project ID>\"\n  region_name = \"GRA\"\n  name = \"my-storage\"\n  versioning = {\n    status = \"enabled\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating OpenSearch User with Basic ACLs\nDESCRIPTION: Creates a new OpenSearch user 'johndoe' with specific read and deny permissions for different patterns. Includes password output configuration.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_database_opensearch_user.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_database\" \"opensearch\" {\n  service_name  = \"XXX\"\n  engine        = \"opensearch\"\n  id            = \"ZZZ\"\n}\n\nresource \"ovh_cloud_project_database_opensearch_user\" \"user\" {\n  service_name  = data.ovh_cloud_project_database.opensearch.service_name\n  cluster_id    = data.ovh_cloud_project_database.opensearch.id\n  acls {\n    pattern    = \"logs_*\"\n    permission = \"read\"\n  }\n  acls {\n    pattern    = \"data_*\"\n    permission = \"deny\"\n  }\n  name          = \"johndoe\"\n}\n\noutput \"user_password\" {\n  value     = ovh_cloud_project_database_opensearch_user.user.password\n  sensitive = true\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Ovhcloud Connect Information with Terraform\nDESCRIPTION: Example showing how to retrieve information about an Ovhcloud Connect product using the data source. Requires a service_name parameter which is the UUID of the Ovhcloud connect instance.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/ovhcloud_connect.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_ovhcloud_connect\" \"occ\" {\n  service_name = \"XXX\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving OVH Cloud Project Regions with Service Filtering in Terraform\nDESCRIPTION: Data source configuration that retrieves regions from an OVH cloud project filtering for regions where the network service is up. The service_name parameter identifies the project and has_services_up filters the regions based on service availability.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_regions.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_regions\" \"regions\" {\n  service_name    = \"XXXXXX\"\n  has_services_up = [\"network\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ECDSA Key in JWK Format to OVHcloud KMS\nDESCRIPTION: Creates an ECDSA key resource in OVHcloud KMS using JWK format. The key uses P-256 curve and ES256 algorithm for signing and verification operations.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/okms_service_key_jwk.md#2025-04-17_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_okms_service_key_jwk\" \"key_ecdsa\" {\n  okms_id    = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  name       = \"key_ecdsa\"\n  keys = [\n    jsondecode(<<EOT\n      {\n        \"key_ops\": [\"sign\", \"verify\"],\n        \"kty\": \"EC\",\n        \"crv\": \"P-256\",\n        \"alg\": \"ES256\",\n        \"d\": \"SIy6AYrv5nGBLQsM7bg7WCbAPxHyUIVTaDyTxrCWPks\",\n        \"x\": \"V7a79Iv0RdykDIzhJhu5OvkCFJ8rFkFm5r11qwR9QeY\",\n        \"y\": \"RSUYb-RPSkF5al1D2fnxerahFpHCHtmJRAlUeS1Ehtw\"\n      }\n    EOT\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cloud Project Users and Filtering by Description in Terraform\nDESCRIPTION: This snippet demonstrates how to retrieve all users from an OVH cloud project and then filter the results to get a specific user ID based on description. It uses a data source to fetch the users and local variables to process the results.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_users.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_users\" \"project_users\" {\n  service_name = \"XXX\"\n}\n\nlocals {\n  # Get the user ID of a previously created user with the description \"S3-User\"\n  users      = [for user in data.ovh_cloud_project_users.project_users.users : user.user_id if user.description == \"S3-User\"]\n  s3_user_id = local.users[0]\n}\n\noutput \"user_id\" {\n  value = local.s3_user_id\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving OVH IAM Resource Group Details in Terraform\nDESCRIPTION: This snippet shows how to use the ovh_iam_resource_group data source to retrieve information about a specific resource group by providing its ID.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/iam_resource_group.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_iam_resource_group\" \"my_resource_group\" {\n    id = \"my_resource_group_id\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving DBaaS Logs Cluster Retention Information in Terraform\nDESCRIPTION: This snippet demonstrates how to use the ovh_dbaas_logs_cluster_retention data source to retrieve information about a DBaaS logs cluster retention using its ID.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/dbaas_logs_cluster_retention.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_dbaas_logs_cluster_retention\" \"retention\" {\n  service_name = \"ldp-xx-xxxxx\"\n  cluster_id   = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  retention_id = \"yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy\"\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching vrackServices to vRack using Terraform OVH Provider\nDESCRIPTION: This snippet demonstrates how to use the ovh_vrack_vrackservices resource to attach a vrackServices to a vRack. It requires specifying the vRack service name and the vrackServices service name.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/vrack_vrackservices.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_vrack_vrackservices\" \"vrack_vrackservices\" {\n  service_name   = \"<vRack service name>\"\n  vrack_services = \"<vrackServices service name>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Redis User with Terraform in OVHcloud Managed Database\nDESCRIPTION: This snippet demonstrates how to create a Redis user named 'johndoe' with specific permissions and retrieve the generated password. It uses the ovh_cloud_project_database_redis_user resource and outputs the password securely.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_database_redis_user.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_database\" \"redis\" {\n  service_name  = \"XXXX\"\n  engine        = \"redis\"\n  id            = \"ZZZZ\"\n}\n\nresource \"ovh_cloud_project_database_redis_user\" \"user\" {\n  service_name  = data.ovh_cloud_project_database.redis.service_name\n  cluster_id    = data.ovh_cloud_project_database.redis.id\n  categories    = [\"+@set\", \"+@sortedset\"]\n  channels      = [\"*\"]\n  commands      = [\"+get\", \"-set\"]\n  keys          = [\"data\", \"properties\"]\n  name          = \"johndoe\"\n}\n\noutput \"user_password\" {\n  value     = ovh_cloud_project_database_redis_user.user.password\n  sensitive = true\n}\n```\n\n----------------------------------------\n\nTITLE: Importing OVHcloud Managed Database Cluster in Terraform\nDESCRIPTION: This command imports an existing OVHcloud Managed database cluster into Terraform state. It requires the service_name, engine, and id of the cluster, separated by forward slashes.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_database.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform import ovh_cloud_project_database.my_database_cluster service_name/engine/id\n```\n\n----------------------------------------\n\nTITLE: Attaching Legacy Dedicated Server to vRack in Terraform\nDESCRIPTION: Example configuration for attaching a legacy dedicated server to a vRack using the ovh_vrack_dedicated_server resource. Requires the service name of the vRack and the ID of the dedicated server to be attached.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/vrack_dedicated_server.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_vrack_dedicated_server\" \"vds\" {\n  service_name = \"XXXX\"\n  server_id    = \"67890\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating OVH Private Database User Grant\nDESCRIPTION: Demonstrates how to create a user grant for an OVH private database using Terraform. This configuration sets up admin privileges for a specified user on a particular database.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/hosting_privatedatabase_user_grant.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_hosting_privatedatabase_user_grant\" \"user_grant\" {\n  service_name  = \"XXXXXX\"\n  user_name     = \"terraform\"\n  database_name = \"ovhcloud\"\n  grant         = \"admin\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating TCP Route for OVH IP Load Balancing in Terraform\nDESCRIPTION: This snippet demonstrates how to create a TCP route for an OVH IP Load Balancing service using Terraform. It sets up a route with a reject action and a weight of 1.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/iploadbalancing_tcp_route.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_iploadbalancing_tcp_route\" \"tcp_reject\" {\n  service_name = \"loadbalancer-xxxxxxxxxxxxxxxxxx\"\n  weight = 1\n\n  action {\n    type = \"reject\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying OVH Cloud Gateway Interface Data in Terraform\nDESCRIPTION: Example showing how to retrieve information about a Gateway Interface in an OVH cloud project. Requires service name, region, gateway ID and interface ID as input parameters.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_gateway_interface.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_gateway_interface\" \"interface\" {\n\tservice_name = \"XXXXXX\"\n\tregion       = \"GRA11\"\n\tid           = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxx\"\n\tinterface_id = \"yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyy\"\n}\n```\n\n----------------------------------------\n\nTITLE: Ordering an IP Block with Terraform on OVHcloud\nDESCRIPTION: This snippet demonstrates how to order an IP block using the ovh_ip_service resource. It includes data sources for retrieving account information, creating a cart, and selecting an IP block plan. The resource is then configured with the necessary details for ordering.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/ip_service.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_me\" \"myaccount\" {}\n\ndata \"ovh_order_cart\" \"mycart\" {\n  ovh_subsidiary = \"fr\"\n}\n\ndata \"ovh_order_cart_product_plan\" \"ipblock\" {\n  cart_id        = data.ovh_order_cart.mycart.id\n  price_capacity = \"renew\"\n  product        = \"ip\"\n  plan_code      = \"ip-v4-s30-ripe\"\n}\n\nresource \"ovh_ip_service\" \"ipblock\" {\n  ovh_subsidiary = data.ovh_order_cart.mycart.ovh_subsidiary\n  description    = \"my ip block\"\n\n  plan {\n    duration     = data.ovh_order_cart_product_plan.ipblock.selected_price.0.duration\n    plan_code    = data.ovh_order_cart_product_plan.ipblock.plan_code\n    pricing_mode = data.ovh_order_cart_product_plan.ipblock.selected_price.0.pricing_mode\n\n    configuration {\n      label = \"country\"\n      value = \"FR\"\n    }\n\n    configuration {\n      label = \"region\"\n      value = \"europe\"\n    }\n\n    configuration {\n      label = \"destination\"\n      value = \"parking\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying vRack Information from OVH Cloud Project in Terraform\nDESCRIPTION: Example showing how to retrieve vRack details from an OVH public cloud project using the ovh_cloud_project_vrack data source. The service_name parameter identifies the project, and the output statement makes the retrieved data available for use elsewhere in the configuration.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_vrack.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_vrack\" \"vrack\" {\n  service_name = \"XXXXXX\"\n}\n\noutput \"vrack\" {\n  value = data.ovh_cloud_project_vrack.vrack\n}\n```\n\n----------------------------------------\n\nTITLE: Importing RSA Key in JWK Format to OVHcloud KMS\nDESCRIPTION: Creates an RSA key resource in OVHcloud KMS using JWK format. The key is configured for signing and verification operations with RSA key parameters including private exponents and CRT values.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/okms_service_key_jwk.md#2025-04-17_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_okms_service_key_jwk\" \"key_rsa\" {\n  okms_id    = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  name       = \"key_rsa\"\n  keys       = [\n    jsondecode(<<EOT\n      {\n        \"key_ops\": [\"sign\", \"verify\"],\n        \"kty\": \"RSA\",\n        \"d\": \"UgaHfwn0kjl...\",\n        \"dp\": \"SIrzLAa0Ll...\",\n        \"dq\": \"aQv6Kg0Lw1...\",\n        \"e\": \"AQAB\",\n        \"n\": \"qrFKVDudlle...\",\n        \"p\": \"7O4PCo_cWzu...\",\n        \"q\": \"uG5pDYvV-eu...\",\n        \"qi\": \"B5z00bGrZO...\"\n      }\n    EOT\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Private Subnets from OVH Cloud Project Network in Terraform\nDESCRIPTION: This example demonstrates how to use the ovh_cloud_project_network_private_subnets data source to retrieve information about private subnets within an OVH cloud project network and output the results.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_network_private_subnets.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_network_private_subnets\" \"private\" {\n  service_name = \"XXXXXX\"\n  network_id   = \"XXXXXX\"\n}\noutput \"private\" {\n  value = data.ovh_cloud_project_network_private_subnets.private\n}\n```\n\n----------------------------------------\n\nTITLE: Creating OVH Identity Group with Terraform\nDESCRIPTION: Creates an identity group in OVH with specified name, description, and role. The resource supports basic group attributes and allows setting permissions through role assignment.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/me_identity_group.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_me_identity_group\" \"my_group\" {\n  description = \"Some custom description\"\n  name        = \"my_group_name\"\n  role        = \"NONE\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving DBaaS Logs Cluster Information with Terraform\nDESCRIPTION: Example Terraform configuration to retrieve information about an OVH DBaaS logs cluster tenant. The data source requires the service_name (ID of your Logs Data Platform instance) and optionally the cluster_id.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/dbaas_logs_cluster.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_dbaas_logs_cluster\" \"logstash\" {\n  service_name = \"ldp-xx-xxxxx\"\n  cluster_id   = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving OVH IAM Permissions Group Data in Terraform\nDESCRIPTION: This snippet demonstrates how to use the ovh_iam_permissions_group data source to fetch information about a specific IAM permissions group. It uses the URN (Uniform Resource Name) to identify the desired group.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/iam_permissions_group.md#2025-04-17_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"ovh_iam_permissions_group\" \"website\" {\n  urn = \"urn:v1:eu:permissionsGroup:ovh:controlPanelAccess\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying PostgreSQL User Information in OVH Cloud Project Database (Terraform)\nDESCRIPTION: This snippet demonstrates how to use the ovh_cloud_project_database_postgresql_user data source to retrieve information about a PostgreSQL user in an OVH Cloud project database cluster. It shows how to specify the required arguments and access the user's roles.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_database_postgresql_user.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_database_postgresql_user\" \"pg_user\" {\n  service_name  = \"XXX\"\n  cluster_id    = \"YYY\"\n  name          = \"ZZZ\"\n}\n\noutput \"pg_user_roles\" {\n  value = data.ovh_cloud_project_database_postgresql_user.pg_user.roles\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving OVHcloud Managed Kubernetes Cluster Data in Terraform\nDESCRIPTION: This snippet demonstrates how to use the ovh_cloud_project_kube data source to retrieve information about a specific Kubernetes cluster in an OVHcloud project. It shows how to reference the cluster by service name and cluster ID, and how to output the cluster version.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_kube.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_kube\" \"my_kube_cluster\" {\n  service_name = \"XXXXXX\"\n  kube_id      = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxx\"\n}\n\noutput \"version\" {\n  value = data.ovh_cloud_project_kube.my_kube_cluster.version\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OVH vRack Dedicated Cloud Datacenter in Terraform\nDESCRIPTION: This snippet demonstrates how to configure an OVH vRack Dedicated Cloud Datacenter resource in Terraform. It requires the vRack service name and Dedicated Cloud Datacenter service name as inputs.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/vrack_dedicated_cloud_datacenter.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_vrack_dedicated_cloud_datacenter\" \"vrack-dedicatedCloudDatacenter\" {\n    service_name         = \"<vRack service name>\"\n    datacenter           = \"<Dedicated Cloud Datacenter service name>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating OVH IAM Resource Group with Terraform\nDESCRIPTION: Example of creating an IAM resource group in OVHcloud with specified resources using Terraform. The resource group contains URNs for multiple services.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/iam_resource_group.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_iam_resource_group\" \"my_resource_group\" {\n    name = \"my_resource_group\"\n    resources = [\n        \"urn:v1:eu:resource:service1:service1-id\",\n        \"urn:v1:eu:resource:service2:service2-id\",\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Database Log Subscriptions from OVH Cloud Project in Terraform\nDESCRIPTION: This example demonstrates how to retrieve a list of log subscriptions for a database cluster in an OVH public cloud project. It uses the service name, database engine, and cluster ID to query the subscriptions, then outputs the subscription IDs.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_database_log_subscriptions.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_database_log_subscriptions\" \"subscriptions\" {\n    service_name = \"XXX\"\n    engine       = \"YYY\"\n    cluster_id   = \"ZZZ\"\n}\n\noutput \"subscription_ids\" {\n  value = data.ovh_cloud_project_database_log_subscriptions.subscriptions.subscription_ids\n}\n```\n\n----------------------------------------\n\nTITLE: MongoDB Prometheus Import Command\nDESCRIPTION: Bash command for importing existing MongoDB Prometheus configurations into Terraform state.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_database_mongodb_prometheus.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform import ovh_cloud_project_database_mongodb_prometheus.my_prometheus service_name/engine/cluster_id\n```\n\n----------------------------------------\n\nTITLE: Creating OVH vRack IPv6 Routed Subrange\nDESCRIPTION: Terraform configuration for routing an IPv6 subrange into an OVH vRack. Requires vRack service name, IPv6 block, routed subrange, and nexthop address.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/vrack_ipv6_routed_subrange.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_vrack_ipv6_routed_subrange\" \"vrack_routed_subrange\" {\n  service_name = \"<vRack service name>\"\n  block = \"<ipv6 block>\"\n  routed_subrange = \"<routed subrange>\"\n  nexthop = \"<nexthop>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving OVH Dedicated CEPH Information in Terraform\nDESCRIPTION: Example of how to use the ovh_dedicated_ceph data source to fetch information about a dedicated CEPH cluster by providing the service name.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/dedicated_ceph.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_dedicated_ceph\" \"my_ceph\" {\n  service_name = \"XXXXXX\"\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching OVH Cloud Connect to VRack using Terraform\nDESCRIPTION: Terraform resource configuration for connecting an OVH Cloud Connect service to a vRack. Requires valid vRack service name and OVH Cloud Connect service name parameters.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/vrack_ovhcloudconnect.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_vrack_ovhcloudconnect\" \"vrack_ovhcloudconnect\" {\n  service_name      = \"<vRack service name>\"\n  ovh_cloud_connect = \"<OVH Cloud Connect service name>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying OVH Cloud Volume Information with Terraform\nDESCRIPTION: Example showing how to retrieve information about an existing volume in an OVH public cloud project using the ovh_cloud_project_volume data source. Requires specifying the region name, service name (project ID), and volume ID.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_volume.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_volume\" \"volume\" {\n   region_name = \"xxx\"\n   service_name = \"yyy\"\n   volume_id = \"aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Timeouts for OVH Cloud Project Database Prometheus Resource\nDESCRIPTION: This snippet demonstrates how to set custom timeouts for create, update, and delete operations on the ovh_cloud_project_database_prometheus resource.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_database_prometheus.md#2025-04-17_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_cloud_project_database_prometheus\" \"prometheus\" {\n  # ...\n\n  timeouts {\n    create = \"1h\"\n    update = \"45m\"\n    delete = \"50s\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving IAM Permissions Groups in Terraform OVH Provider\nDESCRIPTION: This snippet demonstrates how to use the ovh_iam_permissions_groups data source to retrieve a list of all available IAM permissions groups URNs from OVH. The data source doesn't require any configuration parameters.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/iam_permissions_groups.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_iam_permissions_groups\" \"groups\" {}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Private Networks in OVH Cloud Project with Terraform\nDESCRIPTION: This example demonstrates how to use the ovh_cloud_project_network_privates data source to retrieve a list of private networks in an OVH public cloud project and output the results.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_network_privates.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_network_privates\" \"private\" {\n  service_name = \"XXXXXX\"\n}\n\noutput \"private\" {\n  value = data.ovh_cloud_project_network_privates.private\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Compatible Netboots for OVH Dedicated Server using Terraform\nDESCRIPTION: This Terraform snippet demonstrates how to use the ovh_dedicated_server_boots data source to retrieve a list of compatible netboots for a dedicated server. It filters the results to only show hard disk boot options for a server named 'myserver'.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/dedicated_server_boots.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_dedicated_server_boots\" \"netboots\" {\n  service_name = \"myserver\"\n  boot_type    = \"harddisk\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OVH Cloud Project User S3 Policy with Terraform\nDESCRIPTION: Creates an OVH cloud project user with S3 credentials and applies an S3 policy. The policy grants specific permissions for bucket operations including read, write, list, and multipart upload management.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_user_s3_policy.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_cloud_project_user\" \"user\" {\n  service_name = \"XXX\"\n  description  = \"my user\"\n  role_names   = [\n    \"objectstore_operator\"\n  ]\n}\n\nresource \"ovh_cloud_project_user_s3_credential\" \"my_s3_credentials\" {\n  service_name = ovh_cloud_project_user.user.service_name\n  user_id      = ovh_cloud_project_user.user.id\n}\n\nresource \"ovh_cloud_project_user_s3_policy\" \"policy\" {\n  service_name = ovh_cloud_project_user.user.service_name\n  user_id      = ovh_cloud_project_user.user.id\n  policy       = jsonencode({\n    \"Statement\":[{\n      \"Sid\": \"RWContainer\",\n      \"Effect\": \"Allow\",\n      \"Action\":[\"s3:GetObject\", \"s3:PutObject\", \"s3:DeleteObject\", \"s3:ListBucket\", \"s3:ListMultipartUploadParts\", \"s3:ListBucketMultipartUploads\", \"s3:AbortMultipartUpload\", \"s3:GetBucketLocation\"],\n      \"Resource\":[\"arn:aws:s3:::hp-bucket\", \"arn:aws:s3:::hp-bucket/*\"]\n    }]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching Dedicated Cloud to vRack with Terraform\nDESCRIPTION: This snippet demonstrates how to use the ovh_vrack_dedicated_cloud resource in Terraform to attach a Dedicated Cloud to a vRack. It requires the vRack service name and the Dedicated Cloud service name as inputs.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/vrack_dedicated_cloud.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_vrack_dedicated_cloud\" \"vrack-dedicatedCloud\" {\n  service_name      = \"<vRack service name>\"\n  dedicated_cloud   = \"<Dedicated Cloud service name>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Parking/Detaching IP from OVH Services with Terraform\nDESCRIPTION: This snippet shows how to use the ovh_ip_move resource to park or detach an IP address from any OVH service. It sets the service_name to an empty string to indicate parking.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/ip_move.md#2025-04-17_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_ip_move\" \"park_ip\" {\n  ip = \"1.2.3.4\"\n  routed_to {\n    service_name = \"\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Moving IP to OVH Load Balancer Service with Terraform\nDESCRIPTION: This snippet demonstrates how to use the ovh_ip_move resource to move an IP address to a specific OVH load balancer service. It specifies the IP and the target service name.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/ip_move.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_ip_move\" \"move_ip_to_load_balancer_xxxxx\" {\n  ip = \"1.2.3.4\"\n  routed_to {\n    service_name = \"loadbalancer-XXXXX\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeouts for OIDC Resource\nDESCRIPTION: Example showing how to configure custom timeouts for create, update, and delete operations on the OIDC resource.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_kube_oidc.md#2025-04-17_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_cloud_project_kube_oidc\" \"oidc\" {\n  # ...\n\n  timeouts {\n    create = \"1h\"\n    update = \"45m\"\n    delete = \"50s\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating OVH Cloud Project Region Loadbalancer Log Subscription in Terraform\nDESCRIPTION: This snippet demonstrates how to create a subscription for a Managed Loadbalance Logs Service in an OVH public cloud project. It specifies the service name, region, loadbalancer ID, kind, and stream ID.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_region_loadbalancer_log_subscription.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_cloud_project_region_loadbalancer_log_subscription\" \"subscription\" {\n  service_name = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n  region_name = \"yyyy\"\n  loadbalancer_id = \"aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee\"\n  kind = \"haproxy\"\n  stream_id = \"ffffffff-gggg-hhhh-iiii-jjjjjjjjjjjj\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Information About a Dedicated HA-NAS in Terraform\nDESCRIPTION: This snippet shows how to use the ovh_dedicated_nasha data source to retrieve information about a dedicated HA-NAS by specifying its service_name. The service_name is required to identify the specific HA-NAS instance.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/dedicated_nasha.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_dedicated_nasha\" \"my_nas_ha\" {\n  service_name = \"zpool-12345\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Yamux Client-Server Communication in Go\nDESCRIPTION: Example demonstrating how to set up both client and server sides of a Yamux connection. Shows connection establishment, session creation, and basic stream communication with ping message transmission.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/yamux/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc client() {\n    // Get a TCP connection\n    conn, err := net.Dial(...)\n    if err != nil {\n        panic(err)\n    }\n\n    // Setup client side of yamux\n    session, err := yamux.Client(conn, nil)\n    if err != nil {\n        panic(err)\n    }\n\n    // Open a new stream\n    stream, err := session.Open()\n    if err != nil {\n        panic(err)\n    }\n\n    // Stream implements net.Conn\n    stream.Write([]byte(\"ping\"))\n}\n\nfunc server() {\n    // Accept a TCP connection\n    conn, err := listener.Accept()\n    if err != nil {\n        panic(err)\n    }\n\n    // Setup server side of yamux\n    session, err := yamux.Server(conn, nil)\n    if err != nil {\n        panic(err)\n    }\n\n    // Accept a stream\n    stream, err := session.Accept()\n    if err != nil {\n        panic(err)\n    }\n\n    // Listen for a message\n    buf := make([]byte, 4)\n    stream.Read(buf)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating OVH IP Load Balancing UDP Frontend with Terraform\nDESCRIPTION: This snippet demonstrates how to create a UDP frontend for an OVH IP Load Balancing service using Terraform. It includes data source retrieval for the load balancer and resource configuration for the UDP frontend.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/iploadbalancing_udp_frontend.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_iploadbalancing\" \"lb\" {\n  service_name = \"ip-1.2.3.4\"\n  state        = \"ok\"\n}\n\nresource \"ovh_iploadbalancing_udp_frontend\" \"test_frontend\" {\n  service_name = data.ovh_iploadbalancing.lb.service_name\n  display_name = \"ingress-8080-gra\"\n  zone         = \"all\"\n  port         = \"10,11\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing OVH IP Load Balancing TCP Farm with Terraform\nDESCRIPTION: This bash command shows how to import an existing TCP farm into Terraform state. It requires the service name and farm ID, separated by a forward slash.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/iploadbalancing_tcp_farm.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform import ovh_iploadbalancing_tcp_farm.farmname service_name/farm_id\n```\n\n----------------------------------------\n\nTITLE: Querying OAuth2 Client Data in Terraform OVH Provider\nDESCRIPTION: Example of using the ovh_me_api_oauth2_client data source to retrieve information about an existing OAuth2 service account using its client ID. This snippet demonstrates the basic configuration required to query OAuth2 client details.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/me_api_oauth2_client.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_me_api_oauth2_client\" \"my_oauth2_client\" {\n  client_id = \"5f8969a993ec8b4b\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying OVHcloud Connect Services in Terraform\nDESCRIPTION: Example of using the ovh_ovhcloud_connect data source to retrieve details about OVHcloud Connect services. This data source allows access to information like bandwidth, status, interfaces, and IAM details.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/ovhcloud_connects.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_ovhcloud_connect\" \"occs\" {}\n```\n\n----------------------------------------\n\nTITLE: Retrieving OVH Hosting Private Database Information with Terraform\nDESCRIPTION: This snippet demonstrates how to use the ovh_hosting_privatedatabase data source to retrieve information about an OVH hosting private database. It requires the service_name as an input and provides access to various attributes of the database.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/hosting_privatedatabase.md#2025-04-17_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"ovh_hosting_privatedatabase\" \"database\" {\n  service_name = \"XXXXXX\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving OVH Order Cart Product Plan Information with Terraform\nDESCRIPTION: Example showing how to retrieve order cart product plan information using the ovh_order_cart_product_plan data source. It first gets the account subsidiary, creates a cart, and then queries the product plan details.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/order_cart_product_plan.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_me\" \"my_account\" {}\n\ndata \"ovh_order_cart\" \"my_cart\" {\n  ovh_subsidiary = data.ovh_me.my_account.ovh_subsidiary\n}\n\ndata \"ovh_order_cart_product_plan\" \"plan\" {\n  cart_id           = data.ovh_order_cart.my_cart.id\n  price_capacity    = \"renew\"\n  product           = \"cloud\"\n  plan_code         = \"project\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying OVH Cloud Load Balancers with Terraform\nDESCRIPTION: Example showing how to query load balancers in an OVH Cloud project. The data source requires a service name (project ID) and region name, and outputs the load balancer information.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_loadbalancers.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_loadbalancers\" \"lbs\" {\n  service_name = \"XXXXXX\"\n  region_name  = \"XXX\"\n}\noutput \"lbs\" {\n  value = data.ovh_cloud_project_loadbalancers.lbs\n}\n```\n\n----------------------------------------\n\nTITLE: Creating OVH Cloud Project User with Terraform\nDESCRIPTION: Basic example of creating a user in an OVH cloud project using Terraform. The service_name parameter specifies the cloud project ID where the user will be created.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_user.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_cloud_project_user\" \"user1\" {\n  service_name = \"XXX\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Existing OVHcloud Database into Terraform\nDESCRIPTION: Commands for importing an existing OVHcloud private database into Terraform state and generating its configuration.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/hosting_privatedatabase.md#2025-04-17_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nimport {\n  to = ovh_hosting_privatedatabase.database\n  id = \"<service name>\"\n}\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform plan -generate-config-out=database.tf\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Creating OVH Cloud Project Volume Backup with Terraform\nDESCRIPTION: Creates a backup of a specified volume in an OVH public cloud project. Requires project ID, region name, volume ID, and optional backup name.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_volume_backup.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_cloud_project_volume_backup\" \"backup\" {\n  service_name = \"<public cloud project ID>\"\n  region_name  = \"GRA9\"\n  volume_id    = \"<volume ID>\"\n  name         = \"ExampleBackup\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Kafka ACL Information using Terraform OVH Provider\nDESCRIPTION: Example showing how to retrieve information about a Kafka ACL using the data source and output its permission. Requires service name, cluster ID, and ACL ID as input parameters.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_database_kafka_acl.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_database_kafka_acl\" \"acl\" {\n  service_name  = \"XXX\"\n  cluster_id    = \"YYY\"\n  id            = \"ZZZ\"\n}\n\noutput \"acl_permission\" {\n  value = data.ovh_cloud_project_database_kafka_acl.acl.permission\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Context Cancellation with run.Group in Go\nDESCRIPTION: Demonstrates how to use run.Group with context.Context for process management. Creates a cancellable context and adds it to the group with corresponding execute and interrupt functions.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/oklog/run/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nctx, cancel := context.WithCancel(context.Background())\ng.Add(func() error {\n\treturn myProcess(ctx, ...)\n}, func(error) {\n\tcancel()\n})\n```\n\n----------------------------------------\n\nTITLE: Attaching IPv6 Block to OVH vRack with Terraform\nDESCRIPTION: This snippet demonstrates how to attach an IPv6 block to an OVH vRack using Terraform. It includes an example with bridged subrange configuration and another without.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/vrack_ipv6.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_vrack_ipv6\" \"vrack_block_v6\" {\n  service_name = \"<vRack service name>\"\n  block        = \"<ipv6 block>\"\n  bridged_subrange {\n    slaac = \"<enabled|disabled>\"\n  }\n}\n\nresource \"ovh_vrack_ipv6\" \"vrack_block_v6\" {\n  service_name = \"<vRack service name>\"\n  block        = \"<ipv6 block>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Terraform Import Command\nDESCRIPTION: Terminal commands for importing domain configuration and generating Terraform configuration file.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/domain_name.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform plan -generate-config-out=domain.tf\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Querying IAM Policies with OVH Terraform Provider\nDESCRIPTION: Example showing how to query existing IAM policies from an OVH account using the ovh_iam_policies data source. Returns a list of policy IDs and generates a hash of those IDs.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/iam_policies.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_iam_policies\" \"my_policies\" {\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Container Registry Users in OVH Cloud with Terraform\nDESCRIPTION: Example showing how to retrieve users of a container registry in an OVH public cloud project. The example first gets a reference to the registry and then retrieves its users, using service_name and registry_id as the key parameters.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_containerregistry_users.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_containerregistry\" \"my_registry\" {\n  service_name = \"XXXXXX\"\n  registry_id  = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxx\"\n}\n\ndata \"ovh_cloud_project_containerregistry_users\" \"users\" {\n  service_name = ovh_cloud_project_containerregistry.my_registry.service_name\n  registry_id  = ovh_cloud_project_containerregistry.my_registry.id\n}\n```\n\n----------------------------------------\n\nTITLE: Querying MongoDB User Data with Terraform OVH Provider\nDESCRIPTION: Example of using the ovh_cloud_project_database_mongodb_user data source to retrieve information about a MongoDB user. The example shows how to query user details and output their roles.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_database_mongodb_user.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_database_mongodb_user\" \"mongo_user\" {\n  service_name  = \"XXX\"\n  cluster_id    = \"YYY\"\n  name          = \"ZZZ@admin\"\n}\n\noutput \"mongo_user_roles\" {\n  value = data.ovh_cloud_project_database_mongodb_user.mongo_user.roles\n}\n```\n\n----------------------------------------\n\nTITLE: Creating OVHcloud Private Database with Terraform\nDESCRIPTION: Example showing how to create a PostgreSQL 12 private database instance using the OVHcloud Terraform provider. Demonstrates cart creation, product plan selection, and database configuration.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/hosting_privatedatabase.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_me\" \"myaccount\" {}\n\ndata \"ovh_order_cart\" \"mycart\" {\n  ovh_subsidiary = data.ovh_me.myaccount.ovh_subsidiary\n}\n\ndata \"ovh_order_cart_product_plan\" \"database\" {\n  cart_id        = data.ovh_order_cart.mycart.id\n  price_capacity = \"renew\"\n  product        = \"privateSQL\"\n  plan_code      = \"private-sql-512-instance\"\n}\n\nresource \"ovh_hosting_privatedatabase\" \"database\" {\n  ovh_subsidiary = data.ovh_order_cart.mycart.ovh_subsidiary\n  display_name   = \"Postgresql-12\"\n\n  plan {\n    duration     = data.ovh_order_cart_product_plan.database.prices[3].duration\n    plan_code    = data.ovh_order_cart_product_plan.database.plan_code\n    pricing_mode = data.ovh_order_cart_product_plan.database.selected_price[0].pricing_mode\n\n    configuration {\n      label = \"dc\"\n      value = \"gra3\"\n    }\n\n    configuration {\n      label = \"engine\"\n      value = \"postgresql_12\"\n    }\n  }\n}\n\noutput \"privatedatabase_service_name\" {\n  value = ovh_hosting_privatedatabase.database.service_name\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Graylog Stream in Terraform\nDESCRIPTION: Basic configuration for creating a Graylog output stream with essential parameters including service name, title, and description.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/dbaas_logs_output_graylog_stream.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_dbaas_logs_output_graylog_stream\" \"stream\" {\n  service_name = \"....\"\n  title        = \"my stream\"\n  description  = \"my graylog stream\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying OVH Cloud Database Clusters with Terraform\nDESCRIPTION: Example showing how to retrieve a list of database clusters for a specific engine type in an OVH Cloud project. The example demonstrates getting cluster IDs and outputting them.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_databases.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_databases\" \"dbs\" {\n  service_name  = \"XXXXXX\"\n  engine        = \"YYYY\"\n}\n\noutput \"cluster_ids\" {\n  value = data.ovh_cloud_project_databases.dbs.cluster_ids\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Database Users from OVH Cloud Project with Terraform\nDESCRIPTION: This example demonstrates how to use the ovh_cloud_project_database_users data source to retrieve all database users from a specific OVH Cloud managed database cluster and output their IDs. It requires service name, database engine, and cluster ID parameters.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_database_users.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_database_users\" \"users\" {\n  service_name  = \"XXXX\"\n  engine        = \"YYYY\"\n  cluster_id    = \"ZZZ\"\n}\n\noutput \"user_ids\" {\n  value = data.ovh_cloud_project_database_users.users.user_ids\n}\n```\n\n----------------------------------------\n\nTITLE: Importing OVH Database Whitelist Configuration\nDESCRIPTION: Example command for importing existing OVH database whitelist configurations into Terraform state using service name and IP address.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/hosting_privatedatabase_whitelist.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ terraform import ovh_hosting_privatedatabase_whitelist.ip service_name/ip\n```\n\n----------------------------------------\n\nTITLE: Retrieving OVHcloud Managed Kubernetes Nodes with Terraform\nDESCRIPTION: This snippet demonstrates how to use the ovh_cloud_project_kube_nodes data source to fetch information about nodes in an OVHcloud Managed Kubernetes cluster and output the results. It requires a service_name (project ID) and kube_id (cluster ID) as input parameters.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_kube_nodes.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_kube_nodes\" \"nodes\" {\n  service_name  = \"XXXXXX\"\n  kube_id       = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxx\"\n}\n\noutput \"nodes\" {\n  value = data.ovh_cloud_project_kube_nodes.nodes\n}\n```\n\n----------------------------------------\n\nTITLE: Importing DNS Zone Configuration with OVH Terraform Provider\nDESCRIPTION: Example showing how to import a DNS zone configuration from a local zone file. The resource requires a zone name and the content of a zone file to perform the import operation. The imported zone will replace any existing DNS records for the specified domain.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/domain_zone_import.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_domain_zone_import\" \"import\" {\n  zone_name = \"mysite.ovh\"\n  zone_file = file(\"./example.zone\")\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving S3 Policy for OVH Cloud Project User in Terraform\nDESCRIPTION: This snippet demonstrates how to use the ovh_cloud_project_user_s3_policy data source to fetch the S3 policy for a specific user in an OVH public cloud project. It first retrieves all project users, filters for a user with a specific description, and then fetches the S3 policy for that user.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_user_s3_policy.md#2025-04-17_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"ovh_cloud_project_users\" \"project_users\" {\n  service_name = \"XXX\"\n}\n\nlocals {\n  # Get the user ID of a previously created user with the description \"S3-User\"\n  users      = [for user in data.ovh_cloud_project_users.project_users.users : user.user_id if user.description == \"S3-User\"]\n  s3_user_id = local.users[0]\n}\n\ndata \"ovh_cloud_project_user_s3_policy\" \"policy\" {\n  service_name = data.ovh_cloud_project_users.project_users.service_name\n  user_id      = local.s3_user_id\n}\n```\n\n----------------------------------------\n\nTITLE: Creating OAuth2 Client with Authorization Code Flow in Terraform\nDESCRIPTION: This snippet demonstrates how to create an OAuth2 client using the authorization code flow for an app hosted at my-app.com. It specifies the name, flow type, description, and callback URL.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/me_api_oauth2_client.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_me_api_oauth2_client\" \"my_oauth2_client_auth_code\" {\n  name = \"OAuth2 authorization code service account\"\n  flow = \"AUTHORIZATION_CODE\"\n  description = \"An OAuth2 client using the authorization code flow for my-app.com\"\n  callback_urls = [\"https://my-app.com/callback\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving MongoDB Prometheus Information in Terraform\nDESCRIPTION: This snippet demonstrates how to use the ovh_cloud_project_database_mongodb_prometheus data source to fetch information about a MongoDB cluster's prometheus in an OVH public cloud project. It also shows how to output a specific attribute from the retrieved data.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_database_mongodb_prometheus.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_database_mongodb_prometheus\" \"prometheus\" {\n  service_name  = \"XXX\"\n  cluster_id    = \"ZZZ\"\n}\n\noutput \"name\" {\n  value = data.ovh_cloud_project_database_mongodb_prometheus.prometheus.username\n}\n```\n\n----------------------------------------\n\nTITLE: Importing DBaaS Logs Role in Terraform\nDESCRIPTION: Command example for importing an existing DBaaS logs role into Terraform state using service name and role ID.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/dbaas_logs_role.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nterraform import ovh_dbaas_logs_role.ro ldp-ra-XX/dc145bc2-eb01-4efe-a802-XXXXXX\n```\n\n----------------------------------------\n\nTITLE: Retrieving OVH Identity Group Data with Terraform\nDESCRIPTION: Example of how to use the ovh_me_identity_group data source to retrieve information about an identity group by specifying its name.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/me_identity_group.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_me_identity_group\" \"my_group\" {\n  name = \"my_group_name\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying OVH DBaaS Logs Input Engine in Terraform\nDESCRIPTION: This snippet demonstrates how to use the ovh_dbaas_logs_input_engine data source to retrieve information about a specific logs input engine. It specifies the service name, engine name, version, and deprecation status as query parameters.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/dbaas_logs_input_engine.md#2025-04-17_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"ovh_dbaas_logs_input_engine\" \"logstash\" {\n  service_name = \"ldp-xx-xxxxx\"\n  name          = \"logstash\"\n  version       = \"6.8\"\n  is_deprecated = true\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving HA-NAS Partition Information with Terraform OVH Provider\nDESCRIPTION: This snippet demonstrates how to use the ovh_dedicated_nasha_partition data source to fetch information about an existing HA-NAS partition. It requires specifying the service_name of the HA-NAS and the partition name to identify the specific partition.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/dedicated_nasha_partition.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_dedicated_nasha_partition\" \"my_nas_ha_partition\" {\n  service_name = \"zpool-12345\"\n  name         = \"my-zpool-partition\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving VMware Cloud Director Organization Details with Terraform\nDESCRIPTION: Example of using the ovh_vmware_cloud_director_organization data source to retrieve details about a VCD organization by specifying the organization ID.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/vmware_cloud_director_organization.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_vmware_cloud_director_organization\" \"organization\" {\n  organization_id = \"<VCD organization ID>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Dedicated Cloud Information in Terraform\nDESCRIPTION: Example of how to use the ovh_dedicated_cloud data source to fetch information about a Managed VMware service. This snippet retrieves data for the specified service name.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/dedicated_cloud.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_dedicated_cloud\" \"pcc\" {\n  service_name = \"<Dedicated Cloud service name>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeouts for OVHcloud Database User Resource\nDESCRIPTION: Shows how to set custom timeouts for create, update, and delete operations on the ovh_cloud_project_database_user resource.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_database_integration.md#2025-04-17_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"ovh_cloud_project_database_user\" \"user\" {\n  # ...\n\n  timeouts {\n    create = \"1h\"\n    update = \"45m\"\n    delete = \"50s\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing an Existing Rancher Service into Terraform State\nDESCRIPTION: This snippet shows how to import an existing Rancher service in an OVH public cloud project into Terraform state. It uses the project_id and id attributes for import.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_rancher.md#2025-04-17_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nimport {\n  id = \"<project_id>/<id>\"\n  to = ovh_cloud_project_rancher.rancher\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Database Information from OVH Cloud Project Using Terraform\nDESCRIPTION: This example demonstrates how to use the ovh_cloud_project_database_database data source to fetch information about a specific database in an OVH cloud project database cluster. It shows how to declare the data source with required parameters and access the database name as an output.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_database_database.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_database_database\" \"database\" {\n  service_name  = \"XXX\"\n  engine        = \"YYY\"\n  cluster_id    = \"ZZZ\"\n  name          = \"UUU\"\n}\n\noutput \"database_name\" {\n  value = data.ovh_cloud_project_database_database.database.name\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring API Server Admission Plugins\nDESCRIPTION: Creates a Kubernetes cluster with custom API server admission plugins configuration.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_kube.md#2025-04-17_snippet_4\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_cloud_project_kube\" \"my_cluster\" {\n  service_name  = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n  name          = \"my_kube_cluster\"\n  region        = \"GRA5\"\n  customization_apiserver {\n      admissionplugins {\n        enabled = [\"NodeRestriction\"]\n        disabled = [\"AlwaysPullImages\"]\n      }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Kafka Topic Information with OVH Terraform Provider\nDESCRIPTION: Example of using the ovh_cloud_project_database_kafka_topic data source to retrieve information about a Kafka topic. The example shows how to reference a specific topic using service name, cluster ID, and topic ID, then output the topic name.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_database_kafka_topic.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_database_kafka_topic\" \"topic\" {\n  service_name  = \"XXX\"\n  cluster_id    = \"YYY\"\n  id            = \"ZZZ\"\n}\n\noutput \"topic_name\" {\n  value = data.ovh_cloud_project_database_kafka_topic.topic.name\n}\n```\n\n----------------------------------------\n\nTITLE: Creating IP Whitelist for OVH Private Database\nDESCRIPTION: Creates a new IP whitelist entry for an OVH private database instance. Configures access permissions for both service and SFTP ports with custom naming.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/hosting_privatedatabase_whitelist.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_hosting_privatedatabase_whitelist\" \"ip\" {\n  service_name = \"XXXXXX\"\n  ip           = \"1.2.3.4\"\n  name         = \"A name for your IP address\"\n  service      = true\n  sftp         = true\n}\n```\n\n----------------------------------------\n\nTITLE: Importing OVH vRack IPv6 Routed Subrange\nDESCRIPTION: Command for importing an existing IPv6 routed subrange into Terraform state. Requires service name, IPv6 block, and routed subrange separated by commas.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/vrack_ipv6_routed_subrange.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform import ovh_vrack_ipv6_routed_subrange.myroutedsubrange \"<service_name>,<block>,<routed_subrange>\"\n```\n\n----------------------------------------\n\nTITLE: Querying IAM Resource Types with OVH Terraform Provider\nDESCRIPTION: This snippet demonstrates how to use the ovh_iam_reference_resource_type data source to retrieve a list of all IAM resource types. It does not require any arguments and returns the types as an attribute.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/iam_reference_resource_type.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_iam_reference_resource_type\" \"types\" {\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving DBaaS Logs Cluster UUIDs with Terraform\nDESCRIPTION: This snippet demonstrates how to use the ovh_dbaas_logs_clusters data source to retrieve the UUIDs of DBaaS logs clusters. It requires specifying the service_name parameter, which is the ID of your Logs Data Platform instance.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/dbaas_logs_clusters.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_dbaas_logs_clusters\" \"logstash\" {\n  service_name = \"ldp-xx-xxxxx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Object Information from OVH Cloud Storage in Terraform\nDESCRIPTION: This snippet demonstrates how to use the ovh_cloud_project_storage_object data source to fetch information about a specific object in an OVH Cloud S3-compatible storage container. It requires the project ID, region, bucket name, and object key.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_storage_object.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_storage_object\" \"object\" {\n  service_name = \"<public cloud project ID>\"\n  region_name  = \"GRA\"\n  name         = \"<bucket name>\"\n  key          = \"<object name>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching Failover IP to Instance in OVH Cloud using Terraform\nDESCRIPTION: Example configuration for attaching a failover IP address to a compute instance in an OVH Cloud project. Requires service name, IP address, and target instance GUID.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_failover_ip_attach.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_cloud_project_failover_ip_attach\" \"my_failover_ip\" {\n  service_name = \"XXXXXX\"\n  ip           = \"XXXXXX\"\n  routed_to    = \"XXXXXX\"\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting Redis User Password with Terraform in OVHcloud Managed Database\nDESCRIPTION: This snippet shows different methods to reset a Redis user's password using the password_reset attribute. It includes examples of using a datetime string, an MD5 hash of a variable, and an arbitrary string to trigger password resets.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_database_redis_user.md#2025-04-17_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_database\" \"redis\" {\n  service_name  = \"XXXX\"\n  engine        = \"redis\"\n  id            = \"ZZZZ\"\n}\n\nresource \"ovh_cloud_project_database_redis_user\" \"userDatetime\" {\n  service_name    = data.ovh_cloud_project_database.redis.service_name\n  cluster_id      = data.ovh_cloud_project_database.redis.id\n  categories      = [\"+@set\", \"+@sortedset\"]\n  channels        = [\"*\"]\n  commands        = [\"+get\", \"-set\"]\n  keys            = [\"data\", \"properties\"]\n  name            = \"alice\"\n  password_reset  = \"2024-01-02T11:00:00Z\"\n}\n\nvariable \"something\" {\n  type = string\n}\n\nresource \"ovh_cloud_project_database_redis_user\" \"userMd5\" {\n  service_name    = data.ovh_cloud_project_database.redis.service_name\n  cluster_id      = data.ovh_cloud_project_database.redis.id\n  categories      = [\"+@set\", \"+@sortedset\"]\n  channels        = [\"*\"]\n  commands        = [\"+get\", \"-set\"]\n  keys            = [\"data\", \"properties\"]\n  name            = \"bob\"\n  password_reset  = md5(var.something)\n}\n\nresource \"ovh_cloud_project_database_redis_user\" \"user\" {\n  service_name    = data.ovh_cloud_project_database.redis.service_name\n  cluster_id      = data.ovh_cloud_project_database.redis.id\n  categories      = [\"+@set\", \"+@sortedset\"]\n  channels        = [\"*\"]\n  commands        = [\"+get\", \"-set\"]\n  keys            = [\"data\", \"properties\"]\n  name            = \"johndoe\"\n  password_reset  = \"reset1\"\n}\n\noutput \"user_password\" {\n  value = ovh_cloud_project_database_redis_user.user.password\n  sensitive = true\n}\n```\n\n----------------------------------------\n\nTITLE: Querying OVH Private Network Details with Terraform\nDESCRIPTION: Example showing how to retrieve details of a private network in an OVH cloud project. Requires service_name and network_id as input parameters and exports various network attributes including status, name, type, and regional information.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_network_private.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_network_private\" \"private\" {\n  service_name = \"XXXXXX\"\n  network_id           = \"XXX\"\n}\noutput \"private\" {\n  value = data.ovh_cloud_project_network_private.private\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Database Cluster Information with Terraform\nDESCRIPTION: This snippet demonstrates how to use the OVH Cloud Project Database data source to get information about a database cluster and output its ID. It requires specifying the service name, engine type, and database ID.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_database.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_database\" \"db\" {\n  service_name  = \"XXXXXX\"\n  engine        = \"YYYY\"\n  id            = \"ZZZZ\"\n}\n\noutput \"cluster_id\" {\n  value = data.ovh_cloud_project_database.db.id\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Existing OVH Private Database User\nDESCRIPTION: Command for importing an existing OVH private database user into Terraform state. Uses the format service_name/user_name as the import identifier.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/hosting_privatedatabase_user.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ terraform import ovh_hosting_privatedatabase_user.user service_name/user_name\n```\n\n----------------------------------------\n\nTITLE: Querying Database User Information in OVH Cloud Project using Terraform\nDESCRIPTION: Example of using the ovh_cloud_project_database_user data source to retrieve information about a database user. The example shows how to query user details and output the user's name.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_database_user.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_database_user\" \"user\" {\n  service_name  = \"XXX\"\n  engine        = \"YYY\"\n  cluster_id    = \"ZZZ\"\n  name          = \"UUU\"\n}\n\noutput \"user_name\" {\n  value = data.ovh_cloud_project_database_user.user.name\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Kafka Schema Registry ACLs from OVH Cloud Project in Terraform\nDESCRIPTION: Example showing how to fetch schema registry ACLs from a Kafka cluster and output the ACL IDs. This requires the service name (project ID) and cluster ID as inputs and returns the list of ACL IDs.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_database_kafka_schemaregistryacls.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_database_kafka_schemaregistryacls\" \"schema_registry_acls\" {\n  service_name  = \"XXX\"\n  cluster_id    = \"YYY\"\n}\n\noutput \"acl_ids\" {\n  value = data.ovh_cloud_project_database_kafka_schemaregistryacls.schema_registry_acls.acl_ids\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Storage Objects from OVH Cloud Project with Terraform\nDESCRIPTION: Example showing how to use the ovh_cloud_project_storage_objects data source to retrieve objects from an S3-compatible storage container in OVH Cloud. It requires the project ID, region, and bucket name as parameters.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_storage_objects.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_storage_objects\" \"objects\" {\n  service_name = \"<public cloud project ID>\"\n  region_name  = \"GRA\"\n  name         = \"<bucket name>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Ordering IP Load Balancing with Terraform Configuration\nDESCRIPTION: Example configuration for ordering an IP Load Balancing service with OVHcloud, including cart setup, product plan selection, and zone configuration.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/iploadbalancing.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_me\" \"myaccount\" {}\n\ndata \"ovh_order_cart\" \"mycart\" {\n ovh_subsidiary = data.ovh_me.myaccount.ovh_subsidiary\n}\n\ndata \"ovh_order_cart_product_plan\" \"iplb\" {\n  cart_id        = data.ovh_order_cart.mycart.id\n  price_capacity = \"renew\"\n  product        = \"ipLoadbalancing\"\n  plan_code      = \"iplb-lb1\"\n}\n\ndata \"ovh_order_cart_product_options_plan\" \"bhs\" {\n  cart_id           = data.ovh_order_cart_product_plan.iplb.cart_id\n  price_capacity    = data.ovh_order_cart_product_plan.iplb.price_capacity\n  product           = data.ovh_order_cart_product_plan.iplb.product\n  plan_code         = data.ovh_order_cart_product_plan.iplb.plan_code\n  options_plan_code = \"iplb-zone-lb1-rbx\"\n}\n\nresource \"ovh_iploadbalancing\" \"iplb-lb1\" {\n  ovh_subsidiary = data.ovh_order_cart.mycart.ovh_subsidiary\n  display_name   = \"my ip loadbalancing\"\n\n  plan {\n    duration     = data.ovh_order_cart_product_plan.iplb.selected_price.0.duration\n    plan_code    = data.ovh_order_cart_product_plan.iplb.plan_code\n    pricing_mode = data.ovh_order_cart_product_plan.iplb.selected_price.0.pricing_mode\n  }\n\n  plan_option {\n    duration     = data.ovh_order_cart_product_options_plan.bhs.selected_price.0.duration\n    plan_code    = data.ovh_order_cart_product_options_plan.bhs.plan_code\n    pricing_mode = data.ovh_order_cart_product_options_plan.bhs.selected_price.0.pricing_mode\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Instance Information in Terraform Using OVH Cloud Project Instance Data Source\nDESCRIPTION: This code snippet demonstrates how to use the ovh_cloud_project_instance data source to retrieve information about a specific instance in an OVH public cloud project by specifying the service name, region, and instance ID.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_instance.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_instance\" \"instance\" {\n  service_name = \"YYYY\"\n  region = \"XXXX\"\n  instance_id = \"ZZZZZ\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Existing OpenSearch Pattern into Terraform\nDESCRIPTION: This bash command demonstrates how to import an existing OpenSearch pattern into Terraform state. It requires the service name, cluster ID, and pattern ID.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_database_opensearch_pattern.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform import ovh_cloud_project_database_opensearch_pattern.my_pattern service_name/cluster_id/id\n```\n\n----------------------------------------\n\nTITLE: Importing HTTP Route Rule in OVH Load Balancer (Bash)\nDESCRIPTION: This snippet demonstrates the command to import an existing HTTP route rule into Terraform state. It requires the service name, route ID, and rule ID.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/iploadbalancing_http_route_rule.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform import ovh_iploadbalancing_http_route_rule.examplerule service_name/route_id/rule_id\n```\n\n----------------------------------------\n\nTITLE: Retrieving KMS Service Key Information in Terraform\nDESCRIPTION: An example demonstrating how to use the ovh_okms_service_pem data source to retrieve information about a KMS service key by specifying the okms_id and key id.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/okms_service_key_pem.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_okms_service_pem\" \"key_info\" {\n  okms_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  id      = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving OVH VPS Information using Terraform\nDESCRIPTION: This snippet demonstrates how to use the ovh_vps data source to retrieve information about a VPS associated with an OVHcloud account. It requires the service_name of the VPS as an input.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/vps.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_vps\" \"server\" {\n  service_name = \"XXXXXX\"\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Kubernetes Cluster Kubeconfig Attributes\nDESCRIPTION: Creates a cluster and outputs individual kubeconfig attributes as sensitive values.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_kube.md#2025-04-17_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_cloud_project_kube\" \"my_cluster\" {\n  service_name = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n  name         = \"my_kube_cluster\"\n  region       = \"GRA7\"\n}\n\noutput \"my_cluster_host\" {\n  value = ovh_cloud_project_kube.my_cluster.kubeconfig_attributes[0].host\n  sensitive = true\n}\n\noutput \"my_cluster_cluster_ca_certificate\" {\n  value = ovh_cloud_project_kube.my_cluster.kubeconfig_attributes[0].cluster_ca_certificate\n  sensitive = true\n}\n\noutput \"my_cluster_client_certificate\" {\n  value = ovh_cloud_project_kube.my_cluster.kubeconfig_attributes[0].client_certificate\n  sensitive = true\n}\n\noutput \"my_cluster_client_key\" {\n  value = ovh_cloud_project_kube.my_cluster.kubeconfig_attributes[0].client_key\n  sensitive = true\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Managed Rancher Service Data in OVH Cloud Project\nDESCRIPTION: Example of using the ovh_cloud_project_rancher data source to retrieve information about a specific Rancher service instance in an OVH public cloud project. Requires project_id and service ID as input parameters.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_rancher.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_rancher\" \"rancher\" {\n  project_id = \"<public cloud project ID>\"\n  id         = \"<Rancher service ID>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Linux Installation with Custom Partitioning on Default Disk Group\nDESCRIPTION: Shows how to install Linux with custom partitioning on some disks of the default disk group, including various file systems and RAID configurations.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/dedicated_server_reinstall_task.md#2025-04-17_snippet_6\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_dedicated_server\" \"server\" {\n  service_name = \"nsxxxxxxx.ip-xx-xx-xx.eu\"\n}\n\ndata \"ovh_dedicated_installation_template\" \"template\" {\n  template_name = \"debian12_64\"\n}\n\nresource \"ovh_dedicated_server_reinstall_task\" \"server_install\" {\n  service_name     = data.ovh_dedicated_server.server.service_name\n  os = data.ovh_dedicated_installation_template.template.template_name\n  customizations {\n    hostname = \"mon-tux\"\n  }\n  storage {\n    partitioning {\n      disks = 4\n      layout {\n        file_system = \"ext4\"\n        mount_point = \"/boot\"\n        raid_level  = 1\n        size        = 1024\n      }\n      layout {\n        file_system = \"ext4\"\n        mount_point = \"/\"\n        raid_level  = 1\n        size        = 20480\n        extras  {\n          lv {\n            name = \"root\"\n          }\n        }\n      }\n      layout {\n        file_system = \"swap\"\n        mount_point = \"swap\"\n        size        = 2048\n      }\n      layout {\n        file_system = \"zfs\"\n        mount_point = \"/data\"\n        raid_level  = 5\n        size        = 0\n        extras {\n          zp {\n            name = \"poule\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Version Entry for v1.6.1\nDESCRIPTION: Changelog entry noting bug fixes for os.ErrClosed handling and gRPC dependency updates\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/go-plugin/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## v1.6.1\n\nBUGS:\n\n* Suppress spurious `os.ErrClosed` on plugin shutdown [[GH-299](https://github.com/hashicorp/go-plugin/pull/299)]\n\nENHANCEMENTS:\n\n* deps: bump google.golang.org/grpc to v1.58.3 [[GH-296](https://github.com/hashicorp/go-plugin/pull/296)]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Redis User Information with Terraform\nDESCRIPTION: This snippet demonstrates how to use the ovh_cloud_project_database_redis_user data source to fetch information about a Redis user and output their commands. It requires the service name, cluster ID, and user name as inputs.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_database_redis_user.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_database_redis_user\" \"redis_user\" {\n  service_name  = \"XXX\"\n  cluster_id    = \"YYY\"\n  name          = \"ZZZ\"\n}\n\noutput \"redis_user_commands\" {\n  value = data.ovh_cloud_project_database_redis_user.redis_user.commands\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Rancher Versions in OVH Cloud Project with Terraform\nDESCRIPTION: Example showing how to use the ovh_cloud_project_rancher_version data source to retrieve available Rancher versions for a specific OVH cloud project. The data source requires a project_id and returns version details including status, changelog, and availability information.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_rancher_version.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_rancher_version\" \"versions\" {\n  project_id = \"XXXXXX\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Database Integrations with Terraform in OVH Cloud Project\nDESCRIPTION: Example of using the ovh_cloud_project_database_integrations data source to retrieve the list of integrations for a database cluster in an OVH public cloud project and output the integration IDs.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_database_integrations.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_database_integrations\" \"integrations\" {\n  service_name  = \"XXX\"\n  engine        = \"YYY\"\n  cluster_id    = \"ZZZ\"\n}\n\noutput \"integration_ids\" {\n  value = data.ovh_cloud_project_database_integrations.integrations.integration_ids\n}\n```\n\n----------------------------------------\n\nTITLE: Ordering OVH vRack with Terraform Configuration\nDESCRIPTION: Example configuration demonstrating how to order a vRack through Terraform using OVH provider. Includes data source lookups for account details, cart creation, and product plan selection.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/vrack.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_me\" \"my_account\" {}\n\ndata \"ovh_order_cart\" \"my_cart\" {\n  ovh_subsidiary = data.ovh_me.my_account.ovh_subsidiary\n}\n\ndata \"ovh_order_cart_product_plan\" \"vrack\" {\n  cart_id        = data.ovh_order_cart.my_cart.id\n  price_capacity = \"renew\"\n  product        = \"vrack\"\n  plan_code      = \"vrack\"\n}\n\nresource \"ovh_vrack\" \"vrack\" {\n  ovh_subsidiary = data.ovh_order_cart.my_cart.ovh_subsidiary\n  name           = \"my-vrack\"\n  description    = \"my vrack\"\n\n  plan {\n    duration     = data.ovh_order_cart_product_plan.vrack.selected_price.0.duration\n    plan_code    = data.ovh_order_cart_product_plan.vrack.plan_code\n    pricing_mode = data.ovh_order_cart_product_plan.vrack.selected_price.0.pricing_mode\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logrus with Colorable Output in Go\nDESCRIPTION: This snippet demonstrates how to configure the Logrus logging package to use colorable output. It sets up the logger to force colors and use a colorable stdout writer, then shows examples of logging at different levels.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/mattn/go-colorable/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlogrus.SetFormatter(&logrus.TextFormatter{ForceColors: true})\nlogrus.SetOutput(colorable.NewColorableStdout())\n\nlogrus.Info(\"succeeded\")\nlogrus.Warn(\"not correct\")\nlogrus.Error(\"something error\")\nlogrus.Fatal(\"panic\")\n```\n\n----------------------------------------\n\nTITLE: Querying VPS Servers with OVH Terraform Provider\nDESCRIPTION: Code example showing how to use the ovh_vpss data source to retrieve a list of VPS server IDs from an OVH account. This data source takes no arguments and returns a list of VPS IDs in the result attribute.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/vpss.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_vpss\" \"servers\" {}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Floating IP Information in Terraform with OVH Provider\nDESCRIPTION: This snippet demonstrates how to use the 'ovh_cloud_project_floatingips' data source to fetch information about floating IPs in a specific region of an OVH public cloud project. It requires the project's service name and the region name as inputs.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_floatingips.md#2025-04-17_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"ovh_cloud_project_floatingips\" \"ips\" {\n  service_name = \"YYYY\"\n  region = \"XXXX\"\n}\n```\n\n----------------------------------------\n\nTITLE: Linux Installation with SSH Key Authentication and Post-Installation Script\nDESCRIPTION: Shows how to install Linux on a dedicated server with SSH key-based authentication and a base64-encoded post-installation script.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/dedicated_server_reinstall_task.md#2025-04-17_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_dedicated_server\" \"server\" {\n  service_name = \"nsxxxxxxx.ip-xx-xx-xx.eu\"\n}\n\ndata \"ovh_dedicated_installation_template\" \"template\" {\n  template_name = \"debian12_64\"\n}\n\nresource \"ovh_dedicated_server_reinstall_task\" \"server_reinstall\" {\n  service_name = data.ovh_dedicated_server.server.service_name\n  os           = data.ovh_dedicated_installation_template.template.template_name\n  customizations {\n    hostname                 = \"mon-tux\"\n    post_installation_script = \"IyEvYmluL2Jhc2gKZWNobyAiY291Y291IHBvc3RJbnN0YWxsYXRpb25TY3JpcHQiID4gL29wdC9jb3Vjb3UKY2F0IC9ldGMvbWFjaGluZS1pZCAgPj4gL29wdC9jb3Vjb3UKZGF0ZSAiKyVZLSVtLSVkICVIOiVNOiVTIiAtLXV0YyA+PiAvb3B0L2NvdWNvdQo=\"\n    ssh_key                  = \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgQC9xPpdqP3sx2H+gcBm65tJEaUbuifQ1uGkgrWtNY0PRKNNPdy+3yoVOtxk6Vjo4YZ0EU/JhmQfnrK7X7Q5vhqYxmozi0LiTRt0BxgqHJ+4hWTWMIOgr+C2jLx7ZsCReRk+fy5AHr6h0PHQEuXVLXeUy/TDyuY2JPtUZ5jcqvLYgQ== my-nuclear-power-plant\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Existing Domain Name Servers Configuration in Terraform\nDESCRIPTION: This snippet shows how to import existing name servers configuration into Terraform using the domain name as the identifier. It includes the import block and the command to generate and apply the configuration.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/domain_name_servers.md#2025-04-17_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nimport {\n  to = ovh_domain_name_servers.name_servers\n  id = \"<domain name>\"\n}\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform plan -generate-config-out=name_servers.tf\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Retrieving OVH Dedicated Server Installation Template in Terraform\nDESCRIPTION: This snippet demonstrates how to use the ovh_dedicated_installation_template data source to retrieve information about a specific OVH dedicated server installation template. It fetches details for the 'debian12_64' template and outputs the result.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/dedicated_installation_template.md#2025-04-17_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"ovh_dedicated_installation_template\" \"ovh_template\" {\n  template_name = \"debian12_64\"\n}\n\noutput \"template\" {\n  value = data.ovh_dedicated_installation_template.ovh_template\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Existing Kafka Schema Registry ACL into Terraform\nDESCRIPTION: This bash command demonstrates how to import an existing OVH Cloud Kafka schema registry ACL into Terraform state. It requires the service name, cluster ID, and ACL ID to identify the specific resource.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_database_kafka_schemaregistryacl.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform import ovh_cloud_project_database_kafka_schemaregistryacl.my_schemaRegistryAcl service_name/cluster_id/id\n```\n\n----------------------------------------\n\nTITLE: Extracting Specific Error from Go Multierror\nDESCRIPTION: Shows how to use the errors.As function to extract a specific error type from a multierror value.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/go-multierror/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Assume err is a multierror value\nerr := somefunc()\n\n// We want to know if \"err\" has a \"RichErrorType\" in it and extract it.\nvar errRich RichErrorType\nif errors.As(err, &errRich) {\n\t// It has it, and now errRich is populated.\n}\n```\n\n----------------------------------------\n\nTITLE: Querying OpenSearch User Data with Terraform\nDESCRIPTION: Example showing how to fetch information about an OpenSearch user using the data source and output their ACLs. Requires service name, cluster ID, and username as input parameters.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_database_opensearch_user.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_database_opensearch_user\" \"os_user\" {\n  service_name  = \"XXX\"\n  cluster_id    = \"YYY\"\n  name          = \"ZZZ\"\n}\n\noutput \"os_user_acls\" {\n  value = data.ovh_cloud_project_database_opensearch_user.os_user.acls\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Linux Image Installation with Config Drive Datasource\nDESCRIPTION: Demonstrates how to install a custom Linux image with a config drive user data and custom HTTP headers for authentication.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/dedicated_server_reinstall_task.md#2025-04-17_snippet_5\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_dedicated_server\" \"server\" {\n  service_name = \"nsxxxxxxx.ip-xx-xx-xx.eu\"\n}\n\ndata \"ovh_dedicated_installation_template\" \"template\" {\n  template_name = \"debian12_64\"\n}\n\nresource \"ovh_dedicated_server_reinstall_task\" \"server_install\" {\n  service_name = data.ovh_dedicated_server.server.service_name\n  os           = \"byolinux_64\"\n  customizations {\n    config_drive_user_data = \"I2Nsb3VkLWNvbmZpZwpzc2hfYXV0aG9yaXplZF9rZXlzOgogIC0gc3NoLXJzYSBBQUFBQjhkallpdz09IG15c2VsZkBteWRvbWFpbi5uZXQKCnVzZXJzOgogIC0gbmFtZTogcGF0aWVudDAKICAgIHN1ZG86IEFMTD0oQUxMKSBOT1BBU1NXRDpBTEwKICAgIGdyb3VwczogdXNlcnMsIHN1ZG8KICAgIHNoZWxsOiAvYmluL2Jhc2gKICAgIGxvY2tfcGFzc3dkOiBmYWxzZQogICAgc3NoX2F1dGhvcml6ZWRfa2V5czoKICAgICAgLSBzc2gtcnNhIEFBQUFCOGRqWWl3PT0gbXlzZWxmQG15ZG9tYWluLm5ldApkaXNhYmxlX3Jvb3Q6IGZhbHNlCnBhY2thZ2VzOgogIC0gdmltCiAgLSB0cmVlCmZpbmFsX21lc3NhZ2U6IFRoZSBzeXN0ZW0gaXMgZmluYWxseSB1cCwgYWZ0ZXIgJFVQVElNRSBzZWNvbmRzCg==\"\n    hostname               = \"mon-tux\"\n    http_headers = {\n      Authorization = \"Basic bG9naW46cGFzc3dvcmQ=\"\n    }\n    image_check_sum     = \"367f26c915f39314dde155db3a2b0326803e06975d1f4be04256f8b591e38fd4062d36eb7d50e99da7a50b7f4cd69640e56a4ab93e8e0274e4e478e0f84b5d29\"\n    image_check_sum_type = \"sha512\"\n    image_url           = \"https://github.com/ashmonger/akution_test/releases/download/0.5-compress/deb11k6.qcow2\"\n  }\n  properties = {\n    essential = \"false\"\n    role      = \"webservers\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Database Certificates from OVH Cloud Project in Terraform\nDESCRIPTION: This example shows how to fetch certificate information from an OVH Cloud managed database cluster and output the CA certificate. It requires specifying the service name, database engine, and cluster ID.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_database_certificates.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_database_certificates\" \"certificates\" {\n  service_name  = \"XXX\"\n  engine        = \"YYY\"\n  cluster_id    = \"ZZZ\"\n}\n\noutput \"certificates_ca\" {\n  value = data.ovh_cloud_project_database_certificates.certificates.ca\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving vRack IDs from OVHcloud Account\nDESCRIPTION: Example showing how to query all available vRack IDs using the ovh_vracks data source. This snippet requires no arguments and returns a list of vRack service names and URNs.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/vracks.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata ovh_vracks vracks {}\n```\n\n----------------------------------------\n\nTITLE: Yamux Frame Header Structure\nDESCRIPTION: Defines the structure of a Yamux frame header which includes fields for Version (8 bits), Type (8 bits), Flags (16 bits), StreamID (32 bits), and Length (32 bits). Each header has a 12-byte overhead with all fields encoded in network order (big endian).\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/yamux/spec.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* Version (8 bits)\n* Type (8 bits)\n* Flags (16 bits)\n* StreamID (32 bits)\n* Length (32 bits)\n```\n\n----------------------------------------\n\nTITLE: Creating HTTP Route and Rule for HTTPS Redirect in OVH Load Balancer (Terraform)\nDESCRIPTION: This snippet demonstrates how to create an HTTP route that redirects all URLs to HTTPS for a specific domain (Vhost) using OVH IP Load Balancing. It includes creating the route and a rule to match the host.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/iploadbalancing_http_route_rule.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_iploadbalancing_http_route\" \"https_redirect\" {\n  service_name = \"loadbalancer-xxxxxxxxxxxxxxxxxx\"\n  display_name = \"Redirect to HTTPS\"\n  weight       = 1\n  frontend_id  = 11111\n\n  action {\n    status = 302\n    target = \"https://${host}${path}${arguments}\"\n    type   = \"redirect\"\n  }\n}\n\nresource \"ovh_iploadbalancing_http_route_rule\" \"example_rule\" {\n  service_name = \"loadbalancer-xxxxxxxxxxxxxxxxxx\"\n  route_id     = \"${ovh_iploadbalancing_http_route.https_redirect.id}\"\n  display_name = \"Match example.com host\"\n  field        = \"host\"\n  match        = \"is\"\n  negate       = false\n  pattern      = \"example.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving OIDC Information for OVHcloud Managed Kubernetes Cluster in Terraform\nDESCRIPTION: This snippet demonstrates how to use the ovh_cloud_project_kube_oidc data source to retrieve OIDC information for an OVHcloud Managed Kubernetes Service cluster. It includes specifying the service name and kube ID, and outputs the client ID.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_kube_oidc.md#2025-04-17_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"ovh_cloud_project_kube_oidc\" \"oidc\" {\n  service_name = \"XXXXXX\"\n  kube_id      = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxx\"\n}\n\noutput \"oidc-val\" {\n  value = data.ovh_cloud_project_kube_oidc.oidc.client_id\n}\n```\n\n----------------------------------------\n\nTITLE: Importing OVHcloud Managed Kubernetes IP Restrictions in Terraform\nDESCRIPTION: This bash command shows how to import existing OVHcloud Managed Kubernetes cluster IP restrictions into Terraform state. It requires the service name and cluster ID.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_kube_iprestrictions.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform import ovh_cloud_project_kube_iprestrictions.iprestrictions service_name/kube_id\n```\n\n----------------------------------------\n\nTITLE: Importing Existing Kafka Topics in OVH Cloud\nDESCRIPTION: Command to import an existing Kafka topic into Terraform state. This allows management of topics that were created outside of Terraform, using the service name, cluster ID, and topic ID as the import identifier.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_database_kafka_topic.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform import ovh_cloud_project_database_kafka_topic.my_topic service_name/cluster_id/id\n```\n\n----------------------------------------\n\nTITLE: Creating DBaaS Logs Role Stream Permission in Terraform\nDESCRIPTION: Example of creating a DBaaS logs role stream permission resource. Requires service name, role ID, and stream ID as input parameters.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/dbaas_logs_role_permission_stream.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_dbaas_logs_role_permission_stream\" \"permission\" {\n  service_name     = \"ldp-xx-xxxxx\"\n\n  role_id = ovh_dbaas_logs_role.ro.id\n  stream_id = ovh_dbaas_logs_output_graylog_stream.mystream.stream_id\n}\n```\n\n----------------------------------------\n\nTITLE: Using WrapString Function in Go\nDESCRIPTION: This snippet demonstrates how to use the WrapString function from the wordwrap package to wrap a string with a specified line length. It wraps the string 'foo bar baz' with a maximum line length of 3 characters.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/mitchellh/go-wordwrap/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nwrapped := wordwrap.WrapString(\"foo bar baz\", 3)\nfmt.Println(wrapped)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Database IP Restrictions with OVH Terraform Provider\nDESCRIPTION: This code snippet demonstrates how to get the list of IP restrictions on a database cluster service using the OVH Terraform Provider. It defines a data source that retrieves IP restrictions for a specific database cluster and outputs the list of IPs.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_database_ip_restrictions.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_database_ip_restrictions\" \"ip_restrictions\" {\n  service_name  = \"XXXXXX\"\n  engine        = \"YYYY\"\n  cluster_id    = \"ZZZZ\"\n}\n\noutput \"ips\" {\n  value = data.ovh_cloud_project_database_ip_restrictions.ip_restrictions.ips\n}\n```\n\n----------------------------------------\n\nTITLE: Encoding Post-Installation Script for Linux\nDESCRIPTION: Demonstrates how to encode a bash script to base64 for use in the post-installation script field.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/dedicated_server_reinstall_task.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncat my-script.sh | base64 -w0\n```\n\n----------------------------------------\n\nTITLE: Querying Load Balancer Flavors in OVH Cloud using Terraform\nDESCRIPTION: Example of using the ovh_cloud_project_loadbalancer_flavors data source to retrieve available load balancer flavors in a specific region. Requires service name (project ID) and region name as input parameters.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_loadbalancer_flavors.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_loadbalancer_flavors\" \"flavors\" {\n  service_name = \"<public cloud project ID>\"\n  region_name  = \"GRA9\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving OVH KMS Service Key Information with Terraform\nDESCRIPTION: This example demonstrates how to use the ovh_okms_service_key data source to fetch information about a specific key in OVH's Key Management Service. The data source requires both the KMS ID (okms_id) and the key's ID to be specified.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/okms_service_key.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_okms_service_key\" \"key_info\" {\n  okms_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  id      = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring System-wide Logger with hclog in Go\nDESCRIPTION: Shows how to configure the system-wide logger to use hclog, including setting output, prefix, and flags.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/go-hclog/README.md#2025-04-17_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// log the standard logger from 'import \"log\"'\nlog.SetOutput(appLogger.StandardWriter(&hclog.StandardLoggerOptions{InferLevels: true}))\nlog.SetPrefix(\"\")\nlog.SetFlags(0)\n\nlog.Printf(\"[DEBUG] %d\", 42)\n```\n\n----------------------------------------\n\nTITLE: Creating HTTP Route Rule to Match Specific Header in OVH Load Balancer (Terraform)\nDESCRIPTION: This snippet shows how to create an HTTP route rule that matches a specific header (Host) in OVH IP Load Balancing. This achieves the same effect as the host match in the previous example.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/iploadbalancing_http_route_rule.md#2025-04-17_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_iploadbalancing_http_route_rule\" \"example_rule\" {\n  service_name = \"loadbalancer-xxxxxxxxxxxxxxxxxx\"\n  route_id     = \"${ovh_iploadbalancing_http_route.https_redirect.id}\"\n  display_name = \"Match example.com Host header\"\n  field        = \"headers\"\n  match        = \"is\"\n  negate       = false\n  pattern      = \"example.com\"\n  sub_field    = \"Host\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying OVH Private Database User in Terraform\nDESCRIPTION: Example showing how to retrieve information about a private database user using the ovh_hosting_privatedatabase_user data source. Requires service_name and user_name parameters to identify the specific user.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/hosting_privatedatabase_user.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_hosting_privatedatabase_user\" \"user\" {\n  service_name  = \"XXXXXX\"\n  user_name     = \"XXXXXX\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating OVH Domain Zone Configuration Using Terraform\nDESCRIPTION: Demonstrates how to create a domain zone using the OVH Terraform provider. The configuration includes setting up the order cart, selecting product plans, and configuring the zone with required parameters.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/domain_zone.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_me\" \"myaccount\" {}\n\ndata \"ovh_order_cart\" \"mycart\" {\n  ovh_subsidiary = data.ovh_me.myaccount.ovh_subsidiary\n}\n\ndata \"ovh_order_cart_product_plan\" \"zone\" {\n  cart_id        = data.ovh_order_cart.mycart.id\n  price_capacity = \"renew\"\n  product        = \"dns\"\n  plan_code      = \"zone\"\n}\n\nresource \"ovh_domain_zone\" \"zone\" {\n  ovh_subsidiary = data.ovh_order_cart.mycart.ovh_subsidiary\n\n  plan {\n    duration     = data.ovh_order_cart_product_plan.zone.selected_price.0.duration\n    plan_code    = data.ovh_order_cart_product_plan.zone.plan_code\n    pricing_mode = data.ovh_order_cart_product_plan.zone.selected_price.0.pricing_mode\n\n    configuration {\n      label = \"zone\"\n      value = \"myzone.mydomain.com\"\n    }\n\n    configuration {\n      label = \"template\"\n      value = \"minimized\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing OVH IAM Resource Group in Terraform\nDESCRIPTION: Command to import an existing OVH IAM resource group into Terraform state using its resource group ID. Note that read-only resource groups cannot be imported.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/iam_resource_group.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform import ovh_iam_resource_group.my_resource_group resource_group_id\n```\n\n----------------------------------------\n\nTITLE: Terraform Import Commands for Volume Backup\nDESCRIPTION: Commands to execute the import operation and generate configuration file for the imported backup resource.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_volume_backup.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform plan -generate-config-out=backup.tf\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Importing Existing OIDC Configuration\nDESCRIPTION: Command for importing an existing OVHcloud Kubernetes OIDC configuration into Terraform state.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_kube_oidc.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform import ovh_cloud_project_kube_oidc.my-oidc service_name/kube_id\n```\n\n----------------------------------------\n\nTITLE: Detecting Terminal Types Using go-isatty in Go\nDESCRIPTION: This code snippet demonstrates how to use the go-isatty library to detect if the standard output is connected to a terminal, a Cygwin/MSYS2 terminal, or neither. It uses the IsTerminal and IsCygwinTerminal functions from the library.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/mattn/go-isatty/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/mattn/go-isatty\"\n\t\"os\"\n)\n\nfunc main() {\n\tif isatty.IsTerminal(os.Stdout.Fd()) {\n\t\tfmt.Println(\"Is Terminal\")\n\t} else if isatty.IsCygwinTerminal(os.Stdout.Fd()) {\n\t\tfmt.Println(\"Is Cygwin/MSYS2 Terminal\")\n\t} else {\n\t\tfmt.Println(\"Is Not Terminal\")\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using OVH Cloud Project Database Capabilities Data Source in Terraform\nDESCRIPTION: This example demonstrates how to use the ovh_cloud_project_database_capabilities data source to retrieve database capabilities from an OVH Cloud project and output the first engine name from the capabilities list.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_database_capabilities.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_database_capabilities\" \"capabilities\" {\n  service_name  = \"XXX\"\n}\n\noutput \"capabilities_engine_name\" {\n  value = tolist(data.ovh_cloud_project_database_capabilities.capabilities[*].engines)[0]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying OVH Cloud Project Image Data in Terraform\nDESCRIPTION: Example of how to query information about a specific image in an OVH public cloud project. Requires the project ID and image ID as input parameters.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_image.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_image\" \"image\" {\n  service_name = \"<public cloud project ID>\"\n  image_id     = \"<image ID>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving KMS Service Key Information in Terraform\nDESCRIPTION: Example showing how to fetch information about a KMS service key using the ovh_okms_service_key data source. Requires valid KMS ID and key ID parameters.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/okms_service_key_jwk.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_okms_service_key\" \"key_info\" {\n  okms_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  id      = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Level-Based Logging with Logutils in Go\nDESCRIPTION: This snippet demonstrates how to set up and use logutils in a Go application. It shows the creation of a LevelFilter, setting it as the log output, and logging messages at different levels. The filter is configured to only output WARN and ERROR level messages.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/logutils/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"log\"\n\t\"os\"\n\n\t\"github.com/hashicorp/logutils\"\n)\n\nfunc main() {\n\tfilter := &logutils.LevelFilter{\n\t\tLevels: []logutils.LogLevel{\"DEBUG\", \"WARN\", \"ERROR\"},\n\t\tMinLevel: logutils.LogLevel(\"WARN\"),\n\t\tWriter: os.Stderr,\n\t}\n\tlog.SetOutput(filter)\n\n\tlog.Print(\"[DEBUG] Debugging\") // this will not print\n\tlog.Print(\"[WARN] Warning\") // this will\n\tlog.Print(\"[ERROR] Erring\") // and so will this\n\tlog.Print(\"Message I haven't updated\") // and so will this\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Terraform to Use Local OVH Provider\nDESCRIPTION: This Terraform configuration demonstrates how to use a locally built version of the OVH provider. It specifies the provider source as local and includes a simple data source to fetch OVH account information.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/index.md#2025-04-17_snippet_6\n\nLANGUAGE: terraform\nCODE:\n```\nterraform {\n  required_providers {\n    ovh = {\n      source = \"terraform.local/local/ovh\"\n      version = \"0.0.1\"\n    }\n  }\n}\n\ndata \"ovh_me\" \"me\" {}\n\noutput \"me\" {\n  value = data.ovh_me.me\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving OpenSearch Patterns with Terraform Data Source\nDESCRIPTION: This example demonstrates how to use the ovh_cloud_project_database_opensearch_patterns data source to retrieve the list of pattern IDs from an OpenSearch cluster. It requires specifying the service_name (project ID) and cluster_id, then outputs the retrieved pattern IDs.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_database_opensearch_patterns.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_database_opensearch_patterns\" \"patterns\" {\n  service_name  = \"XXX\"\n  cluster_id    = \"YYY\"\n}\n\noutput \"pattern_ids\" {\n  value = data.ovh_cloud_project_database_opensearch_patterns.patterns.pattern_ids\n}\n```\n\n----------------------------------------\n\nTITLE: Importing OVH DBaaS Logs Cluster in Terraform\nDESCRIPTION: This bash command shows how to import an existing OVH DBaaS logs cluster into Terraform state. It requires the service_name and cluster_id of the cluster.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/dbaas_logs_cluster.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform import ovh_dbaas_logs_cluster.ldp service_name/cluster_id\n```\n\n----------------------------------------\n\nTITLE: Retrieving OVH Domain Zone Information using Terraform\nDESCRIPTION: This snippet demonstrates how to use the ovh_domain_zone data source to retrieve information about a specific domain zone. It requires the name of the domain zone as an input.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/domain_zone.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_domain_zone\" \"root_zone\" {\n  name = \"mysite.ovh\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying OVH Container Registries with Terraform\nDESCRIPTION: Example showing how to query container registries for an OVH Cloud project. The service_name parameter specifies the project ID, which can also be set via the OVH_CLOUD_PROJECT_SERVICE environment variable.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_containerregistries.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_containerregistries\" \"registries\" {\n  service_name = \"XXXXXX\"\n}\n```\n\n----------------------------------------\n\nTITLE: Building a List of Errors in Go\nDESCRIPTION: Demonstrates how to use the Append function to create a list of errors, handling both nil and existing error cases.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/go-multierror/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nvar result error\n\nif err := step1(); err != nil {\n\tresult = multierror.Append(result, err)\n}\nif err := step2(); err != nil {\n\tresult = multierror.Append(result, err)\n}\n\nreturn result\n```\n\n----------------------------------------\n\nTITLE: Filtering Container Registry Capability Example in Terraform\nDESCRIPTION: Example showing how to use the ovh_cloud_project_capabilities_containerregistry_filter data source to find a specific container registry capability by region and plan name.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_capabilities_containerregistry_filter.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_capabilities_containerregistry_filter\" \"capability\" {\n  service_name = \"XXXXXX\"\n  region       = \"GRA\"\n  plan_name    = \"SMALL\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing an OVH Cloud Project Network Private Subnet with Terraform\nDESCRIPTION: This snippet shows the command to import an existing private subnet in an OVH cloud project network into Terraform state. It requires the service name, region, network ID, and subnet ID.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_network_private_subnet_v2.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform import ovh_cloud_project_network_private_subnet_v2.mysubnet 5ceb661434891538b54a4f2c66fc4b746e/BHS5/25807101-8aaa-4ea5-b507-61f0d661b101/0f0b73a4-403b-45e4-86d0-b438f1291909\n```\n\n----------------------------------------\n\nTITLE: Retrieving Failover IP Address Information in OVH Cloud Project with Terraform\nDESCRIPTION: This code snippet demonstrates how to use the ovh_cloud_project_failover_ip_attach data source to retrieve details about a specific failover IP address in an OVH public cloud project.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_failover_ip_attach.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_failover_ip_attach\" \"my_failover_ip\" {\n  service_name = \"XXXXXX\"\n  ip           = \"XXXXXX\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving KMS Resource Data in Terraform\nDESCRIPTION: Example of how to retrieve information about a KMS resource using its ID. The data source fetches details including IAM metadata, KMIP endpoint, public CA certificate, region, and API endpoints.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/okms_resource.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_okms_resource\" \"kms\" {\n  id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Conditional Expression Syntax in HCL\nDESCRIPTION: EBNF syntax definition for conditional expressions in HCL, using ternary operator format.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-17_snippet_15\n\nLANGUAGE: ebnf\nCODE:\n```\nConditional = Expression \"?\" Expression \":\" Expression;\n```\n\n----------------------------------------\n\nTITLE: Importing OAuth2 Client with Client ID in Bash\nDESCRIPTION: This command demonstrates how to import an existing OAuth2 client into Terraform state using its client_id.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/me_api_oauth2_client.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform import ovh_me_api_oauth2_client.my_oauth2_client client_id\n```\n\n----------------------------------------\n\nTITLE: Querying vRack Network Details for OVH IPLoadBalancer in Terraform\nDESCRIPTION: This snippet demonstrates how to use the ovh_iploadbalancing_vrack_network data source to retrieve details of a vRack network associated with an OVHcloud IPLoadBalancer. It requires the service_name and vrack_network_id as input parameters.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/iploadbalancing_vrack_network.md#2025-04-17_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata ovh_iploadbalancing_vrack_network \"lb_network\" {\n  service_name     = \"XXXXXX\"\n  vrack_network_id = \"yyy\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OVH DBaaS Logs Cluster in Terraform\nDESCRIPTION: This snippet demonstrates how to configure an OVH DBaaS logs cluster resource in Terraform. It sets the service name, cluster ID, and allowed networks for different flow types.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/dbaas_logs_cluster.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_dbaas_logs_cluster\" \"ldp\" {\n  service_name     = \"ldp-xx-xxxxx\"\n  cluster_id       = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n\n  archive_allowed_networks       = [\"10.0.0.0/16\"]\n  direct_input_allowed_networks  = [\"10.0.0.0/16\"]\n  query_allowed_networks         = [\"10.0.0.0/16\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing OVH IP Load Balancing TCP Route Rule in Terraform\nDESCRIPTION: This command demonstrates how to import an existing TCP route rule into Terraform state. It requires the service name, route ID, and rule ID.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/iploadbalancing_tcp_route_rule.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform import ovh_iploadbalancing_tcp_route_rule.examplerule service_name/route_id/rule_id\n```\n\n----------------------------------------\n\nTITLE: MongoDB User Resource Timeouts Configuration\nDESCRIPTION: Defines custom timeouts for create, update, and delete operations on MongoDB user resources.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_database_mongodb_user.md#2025-04-17_snippet_3\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_cloud_project_database_mongodb_user\" \"user\" {\n  # ...\n\n  timeouts {\n    create = \"1h\"\n    update = \"45m\"\n    delete = \"50s\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing MessagePack Library in Go\nDESCRIPTION: This snippet shows how to install the MessagePack library using the go get command. It fetches the latest version of the vmihailenco/msgpack package.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/vmihailenco/msgpack/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get -u github.com/vmihailenco/msgpack\n```\n\n----------------------------------------\n\nTITLE: Setting Timeouts for OVHcloud Database Creation with Terraform\nDESCRIPTION: Example showing how to customize the timeouts for creating and deleting an OVHcloud Managed Database. This overrides the default timeouts of 20 minutes for both operations.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_database_database.md#2025-04-17_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_cloud_project_database_database\" \"database\" {\n  # ...\n\n  timeouts {\n    create = \"1h\"\n    delete = \"45m\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting OVH API Credentials\nDESCRIPTION: Commands to set up OVH API credentials in environment variables\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/README.md#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ cat > ~/.ovhrc <<EOF\n# setup ovh api credentials\nexport OVH_ENDPOINT=\"ovh-eu\"\nexport OVH_APPLICATION_KEY=\"...\"\nexport OVH_APPLICATION_SECRET=\"...\"\nexport OVH_CONSUMER_KEY=\"...\"\nEOF\n$ source ~/.ovhrc\n```\n\n----------------------------------------\n\nTITLE: Querying OVH Order Cart Product Information with Terraform\nDESCRIPTION: Example showing how to retrieve order cart product information using the ovh_order_cart_product data source. The example first gets the account subsidiary, creates a cart, and then queries product information from that cart.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/order_cart_product.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_me\" \"my_account\" {}\n\ndata \"ovh_order_cart\" \"my_cart\" {\n  ovh_subsidiary = data.ovh_me.my_account.ovh_subsidiary\n}\n\ndata \"ovh_order_cart_product\" \"plans\" {\n  cart_id = data.ovh_order_cart.my_cart.id\n  product = \"...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving OVHcloud Order Cart Information using Terraform\nDESCRIPTION: This snippet demonstrates how to use the ovh_order_cart data source to create a temporary order cart. It first retrieves account information using ovh_me data source, then uses the subsidiary information to create the cart.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/order_cart.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_me\" \"my_account\" {}\n\ndata \"ovh_order_cart\" \"my_cart\" {\n ovh_subsidiary = data.ovh_me.my_account.ovh_subsidiary\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying HCL Block Type and Labels in Go\nDESCRIPTION: New methods SetType and SetLabels on the Block type allow for changing the type and labels of an existing block without reconstructing the entire block.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/hcl/v2/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nblock.SetType(\"new_type\")\nblock.SetLabels([\"new\", \"labels\"])\n```\n\n----------------------------------------\n\nTITLE: Configuring Helm Provider with Kubernetes Cluster\nDESCRIPTION: Creates a Kubernetes cluster and configures the Helm provider using cluster credentials.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_kube.md#2025-04-17_snippet_3\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_cloud_project_kube\" \"my_cluster\" {\n  service_name = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n  name         = \"my_kube_cluster\"\n  region       = \"GRA7\"\n}\n\nprovider \"helm\" {\n  kubernetes {\n    host                    = ovh_cloud_project_kube.my_cluster.kubeconfig_attributes[0].host\n    client_certificate      = base64decode(ovh_cloud_project_kube.my_cluster.kubeconfig_attributes[0].client_certificate)\n    client_key              = base64decode(ovh_cloud_project_kube.my_cluster.kubeconfig_attributes[0].client_key)\n    cluster_ca_certificate  = base64decode(ovh_cloud_project_kube.my_cluster.kubeconfig_attributes[0].cluster_ca_certificate)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating OVH Dedicated Server Properties with Terraform\nDESCRIPTION: This snippet demonstrates how to use the ovh_dedicated_server_update resource to modify properties of an OVH Dedicated Server. It sets the boot ID to a rescue mode, enables monitoring, sets the state to 'ok', and updates the display name.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/dedicated_server_update.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_dedicated_server_boots\" \"rescue\" {\n  service_name = \"nsxxxxxxx.ip-xx-xx-xx.eu\"\n  boot_type    = \"rescue\"\n  kernel       = \"rescue64-pro\"\n}\n\nresource \"ovh_dedicated_server_update\" \"server\" {\n  service_name = \"nsxxxxxxx.ip-xx-xx-xx.eu\"\n  boot_id      = data.ovh_dedicated_server_boots.rescue.result[0]\n  monitoring   = true\n  state        = \"ok\"\n  display_name = \"Some human-readable name\"\n}\n```\n\n----------------------------------------\n\nTITLE: Executing vRack Import Command\nDESCRIPTION: Bash commands for importing and applying the vRack configuration in Terraform.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/vrack.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform plan -generate-config-out=vrack.tf\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Importing OVH HTTP Farm Server Configuration\nDESCRIPTION: Command example for importing an existing HTTP farm server configuration into Terraform state. Uses the format 'service_name/farm_id/server_id'.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/iploadbalancing_http_farm_server.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform import ovh_iploadbalancing_http_farm_server.backend service_name/farm_id/server_id\n```\n\n----------------------------------------\n\nTITLE: Querying OVHcloud Project Volumes with Terraform\nDESCRIPTION: This snippet demonstrates how to use the ovh_cloud_project_volume data source to retrieve information about volumes in a specific region of an OVHcloud public cloud project. It requires specifying the region name and service name (project ID).\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_volumes.md#2025-04-17_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"ovh_cloud_project_volume\" \"volume\" {\n   region_name = \"xxx\"\n   service_name = \"yyy\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON for Mapstructure Decoding Example\nDESCRIPTION: This JSON snippet demonstrates a simple structure that might be decoded using mapstructure, containing a 'type' and 'name' field.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/mitchellh/mapstructure/README.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"person\",\n  \"name\": \"Mitchell\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeouts for Kubernetes NodePool Operations\nDESCRIPTION: Demonstrates how to configure custom timeouts for create, update, and delete operations on node pools.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_kube_nodepool.md#2025-04-17_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_cloud_project_kube_nodepool\" \"pool\" {\n  # ...\n\n  timeouts {\n    create = \"1h\"\n    update = \"45m\"\n    delete = \"50s\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Container Registry IP Restrictions in Terraform\nDESCRIPTION: This snippet demonstrates how to use the ovh_cloud_project_containerregistry_ip_restrictions_registry data source to fetch IP restrictions for a container registry. It includes setting up the data source and outputting the retrieved IP restrictions.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_containerregistry_ip_restrictions_registry.md#2025-04-17_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"ovh_cloud_project_containerregistry_ip_restrictions_registry\" \"my_iprestrictions_data\" {\n  service_name = \"XXXXXX\"\n  registry_id  = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxx\"\n}\n\noutput \"my_ip_restrictions\" {\n  value = data.ovh_cloud_project_containerregistry_ip_restrictions_registry.my_iprestrictions_data.ip_restrictions\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving OVH Dedicated Servers List using Terraform\nDESCRIPTION: Example shows how to query all dedicated servers associated with an OVHcloud Account. The data source requires no arguments and returns a list of server IDs in the result attribute.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/dedicated_servers.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_dedicated_servers\" \"servers\" {}\n```\n\n----------------------------------------\n\nTITLE: Retrieving OVH Order Cart Product Options with Terraform\nDESCRIPTION: Example showing how to retrieve product options information from an OVH order cart. The snippet first gets account information, creates a cart, and then queries the available options for a cloud project product.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/order_cart_product_options.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_me\" \"my_account\" {}\n\ndata \"ovh_order_cart\" \"my_cart\" {\n  ovh_subsidiary = data.ovh_me.my_account.ovh_subsidiary\n}\n\ndata \"ovh_order_cart_product_options\" \"options\" {\n  cart_id   = data.ovh_order_cart.my_cart.id\n  product   = \"cloud\"\n  plan_code = \"project\"\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Retryable HTTP Client to Standard HTTP Client in Go\nDESCRIPTION: Shows how to create a retryablehttp.Client with custom settings and convert it to a standard *http.Client. This allows for broader application of the retry functionality with minimal code changes.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/go-retryablehttp/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nretryClient := retryablehttp.NewClient()\nretryClient.RetryMax = 10\n\nstandardClient := retryClient.StandardClient() // *http.Client\n```\n\n----------------------------------------\n\nTITLE: Importing Existing OVH Cloud Project Storage into Terraform\nDESCRIPTION: This snippet shows how to import an existing OVH Cloud project storage container into Terraform using the 'terraform import' command. It requires the service name, region name, and container name.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_storage.md#2025-04-17_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nimport {\n  id = \"<service_name>/<region_name>/<name>\"\n  to = ovh_cloud_project_storage.storage\n}\n```\n\n----------------------------------------\n\nTITLE: Creating DBaaS Logs Role in Terraform\nDESCRIPTION: Example of creating a read-only DBaaS logs role using Terraform. Demonstrates setting up a role with a name, description, and service name.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/dbaas_logs_role.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_dbaas_logs_role\" \"ro\" {\n  service_name     = \"ldp-xx-xxxxx\"\n\n  name = \"Devops - RO\"\n  description = \"Devops - RO\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating OAuth2 Client with Client Credentials Flow in Terraform\nDESCRIPTION: This snippet shows how to create an OAuth2 client using the client credentials flow. It specifies the name, description, and flow type for the client.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/me_api_oauth2_client.md#2025-04-17_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_me_api_oauth2_client\" \"my_oauth2_client_client_creds\" {\n  name = \"client credentials service account\"\n  description = \"An OAuth2 client using the client credentials flow for my app\"\n  flow = \"CLIENT_CREDENTIALS\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing an Existing Private Network into Terraform State\nDESCRIPTION: This command shows how to import an existing private network in an OVHcloud public cloud project into Terraform state, using the service_name and network_id.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_network_private.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform import ovh_cloud_project_network_private.mynet service_name/network_id\n```\n\n----------------------------------------\n\nTITLE: Importing OVH Cloud Network Resource Configuration\nDESCRIPTION: Example of importing an existing network resource into Terraform state using service_name, region_name, and id attributes.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_region_network.md#2025-04-17_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nimport {\n  id = \"<service_name>/<region_name>/<id>\"\n  to = ovh_cloud_project_region_network.test\n}\n```\n\n----------------------------------------\n\nTITLE: Creating DS Records Configuration in Terraform\nDESCRIPTION: Example of creating DS records for a domain using the ovh_domain_ds_records resource. Demonstrates setting up algorithm, flags, public key and tag values.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/domain_ds_records.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_domain_ds_records\" \"ds_records\" {\n  domain = \"mydomain.ovh\"\n  \n  ds_records {\n      algorithm = \"RSASHA1_NSEC3_SHA1\"\n      flags = \"KEY_SIGNING_KEY\"\n      public_key = \"my_base64_encoded_public_key\"\n      tag = 12345\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeouts for OVHcloud Managed Kubernetes IP Restrictions in Terraform\nDESCRIPTION: This Terraform block demonstrates how to set custom timeouts for creating, updating, and deleting IP restrictions on an OVHcloud Managed Kubernetes cluster.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_kube_iprestrictions.md#2025-04-17_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_cloud_project_kube_iprestrictions\" \"vrack_only\" {\n  # ...\n\n  timeouts {\n    create = \"1h\"\n    update = \"45m\"\n    delete = \"50s\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing OVHcloud Kubernetes Cluster into Terraform State\nDESCRIPTION: This command shows how to import an existing OVHcloud Managed Kubernetes Service cluster into Terraform state using the service_name and cluster ID.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_kube.md#2025-04-17_snippet_8\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform import ovh_cloud_project_kube.my_kube_cluster service_name/kube_id\n```\n\n----------------------------------------\n\nTITLE: Retrieving Available Installation Templates for OVH Dedicated Servers in Terraform\nDESCRIPTION: This snippet demonstrates how to use the ovh_dedicated_installation_templates data source to fetch all available installation templates for OVH dedicated servers. The data source takes no arguments and returns a list of template IDs in the result attribute.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/dedicated_installation_templates.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_dedicated_installation_templates\" \"templates\" {}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Order Cart Product Options Plan in Terraform\nDESCRIPTION: This example demonstrates how to retrieve information about a product options plan for an OVH cloud product. It first gets the user's account information, creates a cart, and then queries for a specific options plan (vrack) for a cloud project.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/order_cart_product_options_plan.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_me\" \"my_account\" {}\n\ndata \"ovh_order_cart\" \"my_cart\" {\n  ovh_subsidiary = data.ovh_me.my_account.ovh_subsidiary\n}\n\ndata \"ovh_order_cart_product_options_plan\" \"plan\" {\n  cart_id           = data.ovh_order_cart.my_cart.id\n  price_capacity    = \"renew\"\n  product           = \"cloud\"\n  plan_code         = \"project\"\n  options_plan_code = \"vrack\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing OVH Cloud Project Gateway\nDESCRIPTION: Command for importing an existing OVH Cloud Project Gateway into Terraform state using service name, region, and gateway ID.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_gateway.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform import ovh_cloud_project_gateway.gateway service_name/region/id\n```\n\n----------------------------------------\n\nTITLE: Basic GET Request with Retryable HTTP Client in Go\nDESCRIPTION: Demonstrates how to make a simple GET request using the retryablehttp package. This example shows the basic usage of the library, which automatically handles retries and backoff in case of failures.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/go-retryablehttp/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nresp, err := retryablehttp.Get(\"/foo\")\nif err != nil {\n    panic(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Terraform Configuration for Imported OVH Cloud Project Storage\nDESCRIPTION: This bash command demonstrates how to generate a Terraform configuration file for an imported OVH Cloud project storage container and apply the changes.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_storage.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform plan -generate-config-out=storage.tf\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Creating Basic M3DB User with Password Output in Terraform\nDESCRIPTION: This snippet demonstrates creating a basic M3DB user and outputting the generated password securely. It references an existing M3DB database cluster and creates a new user with specified group membership.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_database_m3db_user.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_database\" \"m3db\" {\n  service_name  = \"XXX\"\n  engine        = \"m3db\"\n  id            = \"ZZZ\"\n}\n\nresource \"ovh_cloud_project_database_m3db_user\" \"user\" {\n  service_name  = data.ovh_cloud_project_database.m3db.service_name\n  cluster_id    = data.ovh_cloud_project_database.m3db.id\n  group         = \"mygroup\"\n  name          = \"johndoe\"\n}\n\noutput \"user_password\" {\n  value     = ovh_cloud_project_database_m3db_user.user.password\n  sensitive = true\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Timeouts for Kafka ACL Resource in Terraform\nDESCRIPTION: This snippet shows how to configure custom timeouts for the creation and deletion of Kafka ACLs. This is useful for operations that might take longer than the default timeout values.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_database_kafka_acl.md#2025-04-17_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_cloud_project_database_kafka_acl\" \"acl\" {\n  # ...\n\n  timeouts {\n    create = \"1h\"\n    delete = \"45m\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeouts for OVHcloud Managed Private Registry OIDC Resource\nDESCRIPTION: This Terraform code snippet shows how to configure custom timeouts for creating, updating, and deleting the OIDC configuration resource in OVHcloud Managed Private Registry.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_containerregistry_oidc.md#2025-04-17_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_cloud_project_containerregistry_oidc\" \"my-oidc\" {\n  # ...\n\n  timeouts {\n    create = \"1h\"\n    update = \"45m\"\n    delete = \"50s\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: MongoDB Prometheus Timeout Configuration\nDESCRIPTION: Terraform configuration demonstrating how to set custom timeouts for create, update, and delete operations.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_database_mongodb_prometheus.md#2025-04-17_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_cloud_project_database_mongodb_prometheus\" \"prometheus\" {\n  # ...\n\n  timeouts {\n    create = \"1h\"\n    update = \"45m\"\n    delete = \"50s\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing OVH Cloud Database Log Subscription in Terraform\nDESCRIPTION: This bash command demonstrates how to import an existing OVH cloud project database log subscription into Terraform state. It requires the service name, engine, cluster ID, and subscription ID.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_database_log_subscription.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform import ovh_cloud_project_database_log_subscription.sub service_name/engine/cluster_id/id\n```\n\n----------------------------------------\n\nTITLE: Retrieving Container Registry Capabilities in Terraform\nDESCRIPTION: Simple example showing how to fetch container registry capabilities for an OVH public cloud project using the ovh_cloud_project_capabilities_containerregistry data source.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_capabilities_containerregistry.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_capabilities_containerregistry\" \"capabilities\" {\n  service_name = \"XXXXXX\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Dedicated Server Data in Terraform OVHcloud Provider\nDESCRIPTION: Example showing how to use the ovh_dedicated_server data source to fetch information about a dedicated server by specifying its service_name.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/dedicated_server.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_dedicated_server\" \"server\" {\n  service_name = \"XXXXXX\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HCL Configuration Parsing in Go\nDESCRIPTION: Example of parsing HCL configuration files using Go structs with HCL tags. Demonstrates configuration structure definition and file loading using hclsimple package.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/hcl/v2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"log\"\n\n\t\"github.com/hashicorp/hcl/v2/hclsimple\"\n)\n\ntype Config struct {\n\tIOMode  string        `hcl:\"io_mode\"`\n\tService ServiceConfig `hcl:\"service,block\"`\n}\n\ntype ServiceConfig struct {\n\tProtocol   string          `hcl:\"protocol,label\"`\n\tType       string          `hcl:\"type,label\"`\n\tListenAddr string          `hcl:\"listen_addr\"`\n\tProcesses  []ProcessConfig `hcl:\"process,block\"`\n}\n\ntype ProcessConfig struct {\n\tType    string   `hcl:\"type,label\"`\n\tCommand []string `hcl:\"command\"`\n}\n\nfunc main() {\n\tvar config Config\n\terr := hclsimple.DecodeFile(\"config.hcl\", nil, &config)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to load configuration: %s\", err)\n\t}\n\tlog.Printf(\"Configuration is %#v\", config)\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Existing PostgreSQL Connection Pool into Terraform\nDESCRIPTION: This bash command demonstrates how to import an existing OVHcloud Managed PostgreSQL connection pool into Terraform state.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_database_postgresql_connection_pool.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform import ovh_cloud_project_database_postgresql_connection_pool.my_connection_pool service_name/cluster_id/id\n```\n\n----------------------------------------\n\nTITLE: Creating MongoDB Prometheus Basic Configuration\nDESCRIPTION: Basic Terraform configuration to create a Prometheus monitoring setup for a MongoDB cluster and output the generated password.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_database_mongodb_prometheus.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_database\" \"mongodb\" {\n  service_name  = \"XXX\"\n  engine        = \"mongodb\"\n  id            = \"ZZZ\"\n}\n\nresource \"ovh_cloud_project_database_mongodb_prometheus\" \"prometheus\" {\n  service_name  = data.ovh_cloud_project_database.mongodb.service_name\n  cluster_id    = data.ovh_cloud_project_database.mongodb.id\n}\n\noutput \"prom_password\" {\n  value     = ovh_cloud_project_database_mongodb_prometheus.prometheus.password\n  sensitive = true\n}\n```\n\n----------------------------------------\n\nTITLE: Querying OpenSearch Pattern Information with Terraform OVH Provider\nDESCRIPTION: This snippet demonstrates how to use the ovh_cloud_project_database_opensearch_pattern data source to retrieve information about an OpenSearch pattern in an OVH public cloud project. It shows how to reference the pattern ID, cluster ID, and service name, and how to output pattern properties.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_database_opensearch_pattern.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_database_opensearch_pattern\" \"pattern\" {\n  service_name  = \"XXX\"\n  cluster_id    = \"YYY\"\n  id            = \"ZZZ\"\n}\n\noutput \"pattern_pattern\" {\n  value = data.ovh_cloud_project_database_opensearch_pattern.pattern.pattern\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeouts for OVHcloud Kubernetes Cluster in Terraform\nDESCRIPTION: This snippet demonstrates how to set custom timeouts for creating, updating, and deleting an OVHcloud Managed Kubernetes Service cluster using the ovh_cloud_project_kube resource in Terraform.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_kube.md#2025-04-17_snippet_7\n\nLANGUAGE: HCL\nCODE:\n```\nresource \"ovh_cloud_project_kube\" \"my_kube_cluster\" {\n  # ...\n\n  timeouts {\n    create = \"1h\"\n    update = \"45m\"\n    delete = \"50s\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing DS Records Configuration in Terraform\nDESCRIPTION: Configuration block for importing existing DS records into Terraform state using the domain name as identifier.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/domain_ds_records.md#2025-04-17_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nimport {\n  to = ovh_domain_ds_records.ds_records\n  id = \"<domain name>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Managed Rancher Plans in Terraform for OVH Cloud Project\nDESCRIPTION: This snippet demonstrates how to use the 'ovh_cloud_project_rancher_plan' data source to retrieve information about available Managed Rancher plans for a given OVH cloud project. It requires the project ID as input and returns a set of plan details.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_rancher_plan.md#2025-04-17_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"ovh_cloud_project_rancher_plan\" \"plans\" {\n  project_id = \"XXXXXX\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving OVH IP Load Balancing Information with Terraform\nDESCRIPTION: This snippet demonstrates how to use the ovh_iploadbalancing data source to retrieve information about an IP Load Balancing product. It specifies the service_name and state as arguments.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/iploadbalancing.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_iploadbalancing\" \"lb\" {\n  service_name = \"XXXXXX\"\n  state        = \"ok\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing OAuth2 Client with Client ID and Secret in Bash\nDESCRIPTION: This command shows how to import an OAuth2 client into Terraform state using both the client_id and client_secret, separated by a pipe character.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/me_api_oauth2_client.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform import ovh_me_api_oauth2_client.my_oauth2_client 'client_id|client_secret'\n```\n\n----------------------------------------\n\nTITLE: Retrieving IP Firewall Information with Terraform OVH Provider\nDESCRIPTION: This snippet demonstrates how to use the ovh_ip_firewall data source to retrieve information about an IP firewall. It requires specifying the IP or CIDR and the IPv4 address on the firewall.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/ip_firewall.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_ip_firewall\" \"my_firewall\" {\n  ip             = \"XXXXXX\"\n  ip_on_firewall = \"XXXXXX\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying OVH Dedicated Server Hardware Specifications in Terraform\nDESCRIPTION: This snippet demonstrates how to use the ovh_dedicated_server_specifications_hardware data source to retrieve hardware information for a specific OVH dedicated server. It requires the service_name of the server as an input.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/dedicated_server_specifications_hardware.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_dedicated_server_specifications_hardware\" \"spec\" {\n  service_name = \"myserver\"\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Error Formatting in Go Multierror\nDESCRIPTION: Shows how to customize the format of the Error() string function in a multierror.Error object.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/go-multierror/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar result *multierror.Error\n\n// ... accumulate errors here, maybe using Append\n\nif result != nil {\n\tresult.ErrorFormat = func([]error) string {\n\t\treturn \"errors!\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Importing IP Load Balancing Configuration in Terraform\nDESCRIPTION: Example of importing an existing IP Load Balancing service into Terraform state using service_name.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/iploadbalancing.md#2025-04-17_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nimport {\n  to = ovh_iploadbalancing.iplb\n  id = \"<service name>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeouts for OVH Cloud Database Log Subscription in Terraform\nDESCRIPTION: This snippet shows how to configure custom timeouts for creating, updating, and deleting an OVH cloud project database log subscription resource in Terraform.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_database_log_subscription.md#2025-04-17_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_cloud_project_database_log_subscription\" \"sub\" {\n  # ...\n\n  timeouts {\n    create = \"1h\"\n    update = \"45m\"\n    delete = \"50s\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeouts for OpenSearch Pattern Resource\nDESCRIPTION: This snippet shows how to configure custom timeouts for the creation and deletion of an OpenSearch pattern resource. It allows overriding the default timeout values.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_database_opensearch_pattern.md#2025-04-17_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_cloud_project_database_opensearch_pattern\" \"pattern\" {\n  # ...\n\n  timeouts {\n    create = \"1h\"\n    delete = \"45m\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Identity Groups with Terraform in OVH\nDESCRIPTION: Example showing how to retrieve all identity groups from an OVH account using the ovh_me_identity_groups data source. This data source requires no arguments and returns a list of all group names.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/me_identity_groups.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_me_identity_groups\" \"groups\" {}\n```\n\n----------------------------------------\n\nTITLE: Creating LDP Token Configuration in Terraform\nDESCRIPTION: Example configuration for creating a token in OVH's Logs Data Platform. Demonstrates the basic required parameters including service name and token name.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/dbaas_logs_token.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_dbaas_logs_token\" \"token\" {\n  service_name     = \"ldp-xx-xxxxx\"\n  name             = \"ExampleToken\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving IP Service Information with Terraform in OVH\nDESCRIPTION: This snippet demonstrates how to use the ovh_ip_service data source to retrieve details about an IP service in OVH. It requires the service_name parameter to be specified to identify the specific IP service.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/ip_service.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_ip_service\" \"my_ip\" {\n  service_name  = \"XXXXXX\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Existing M3DB Namespace into Terraform State\nDESCRIPTION: This bash command demonstrates how to import an existing OVHcloud Managed M3DB namespace into Terraform state. It requires the service name, cluster ID, and namespace ID to be specified in the import command.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_database_m3db_namespace.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform import ovh_cloud_project_database_m3db_namespace.my_namespace service_name/cluster_id/id\n```\n\n----------------------------------------\n\nTITLE: Retrieving Domain Zone DNSSEC Status with Terraform OVH Provider\nDESCRIPTION: This snippet demonstrates how to use the ovh_domain_zone_dnssec data source to fetch the DNSSEC status for a domain zone. It requires specifying the zone_name as a parameter and returns the DNSSEC status.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/domain_zone_dnssec.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_domain_zone_dnssec\" \"dnssec\" {\n  zone_name = \"mysite.ovh\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Region Information in OVH Cloud Project using Terraform\nDESCRIPTION: This example demonstrates how to use the ovh_cloud_project_region data source to retrieve information about the GRA1 region associated with a specific OVH public cloud project.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_region.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_region\" \"GRA1\" {\n  service_name = \"XXXXXX\"\n  name         = \"GRA1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing INI Package via Go Get\nDESCRIPTION: Command to install the INI package using Go's package management tool. The minimum Go version required is 1.13.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/gopkg.in/ini.v1/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ go get gopkg.in/ini.v1\n```\n\n----------------------------------------\n\nTITLE: Importing an OVH IP Load Balancing HTTP Farm in Terraform\nDESCRIPTION: This bash command shows how to import an existing HTTP farm into Terraform state. It requires the service name and farm ID, separated by a forward slash.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/iploadbalancing_http_farm.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform import ovh_iploadbalancing_http_farm.farmname service_name/farm_id\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeouts for Kafka Schema Registry ACL Resource\nDESCRIPTION: This snippet shows how to configure custom timeouts for the creation and deletion of a Kafka schema registry ACL resource in Terraform. It allows specifying longer timeouts for operations that may take more time to complete.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_database_kafka_schemaregistryacl.md#2025-04-17_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_cloud_project_database_kafka_schemaregistryacl\" \"schema_registry_acl\" {\n  # ...\n\n  timeouts {\n    create = \"1h\"\n    delete = \"45m\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching OVH Cloud Project LoadBalancer Data in Terraform\nDESCRIPTION: This example demonstrates how to use the ovh_cloud_project_loadbalancer data source to retrieve details about an existing load balancer in an OVH public cloud project. It requires the service_name (project ID), region_name, and the load balancer ID to fetch the resource, then outputs all the retrieved data.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_loadbalancer.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_loadbalancer\" \"lb\" {\n  service_name = \"XXXXXX\"\n  region_name  = \"XXX\"\n  id           = \"XXX\"\n}\noutput \"lb\" {\n  value = data.ovh_cloud_project_loadbalancer.lb\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering DBaaS Logs Cluster Retention by Type and Duration in Terraform\nDESCRIPTION: This snippet demonstrates how to filter retentions based on their type and duration.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/dbaas_logs_cluster_retention.md#2025-04-17_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_dbaas_logs_cluster_retention\" \"retention\" {\n  service_name   = \"ldp-xx-xxxxx\"\n  cluster_id     = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  duration       = \"P14D\"\n  retention_type = \"LOGS_INDEXING\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving DBaaS Logs Cluster Retention by Duration in Terraform\nDESCRIPTION: This snippet shows how to retrieve a retention using its duration instead of its ID.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/dbaas_logs_cluster_retention.md#2025-04-17_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_dbaas_logs_cluster_retention\" \"retention\" {\n  service_name = \"ldp-xx-xxxxx\"\n  cluster_id   = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  duration     = \"P14D\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cloud Project Flavors with Terraform\nDESCRIPTION: Example of using the ovh_cloud_project_flavors data source to retrieve all available flavors for a specified OVH public cloud project.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_flavors.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_flavors\" \"flavors\" {\n  service_name = \"YYYY\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying OVH Dedicated Server Network Specifications\nDESCRIPTION: Example showing how to query network specifications for an OVH dedicated server using the data source. Requires specifying the server's service_name as an argument.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/dedicated_server_specifications_network.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_dedicated_server_specifications_network\" \"spec\" {\n  service_name = \"myserver\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Existing Volume Backup into Terraform State\nDESCRIPTION: Configuration for importing an existing volume backup into Terraform state management. Uses service name, region name, and backup ID as import identifier.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_volume_backup.md#2025-04-17_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nimport {\n  id = \"<service_name>/<region_name>/<id>\"\n  to = ovh_cloud_project_volume_backup.backup\n}\n```\n\n----------------------------------------\n\nTITLE: Importing OVH vRack Configuration\nDESCRIPTION: Terraform configuration showing how to import an existing vRack resource using its service name.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/vrack.md#2025-04-17_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nimport {\n  to = ovh_vrack.vrack\n  id = \"<service name>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving M3DB User Information with Terraform in OVH Cloud Project\nDESCRIPTION: Example demonstrating how to use the ovh_cloud_project_database_m3db_user data source to fetch information about a specific M3DB user and output their group attribute. The example requires service_name, cluster_id, and user name as inputs.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_database_m3db_user.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_database_m3db_user\" \"m3db_user\" {\n  service_name  = \"XXX\"\n  cluster_id    = \"YYY\"\n  name          = \"ZZZ\"\n}\n\noutput \"m3db_user_group\" {\n  value = data.ovh_cloud_project_database_m3db_user.m3db_user.group\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Expression Terms in HCL\nDESCRIPTION: Specifies the syntax for expression terms in HCL, including various value types and operations, using EBNF notation.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-17_snippet_4\n\nLANGUAGE: EBNF\nCODE:\n```\nExprTerm = (\n    LiteralValue |\n    CollectionValue |\n    TemplateExpr |\n    VariableExpr |\n    FunctionCall |\n    ForExpr |\n    ExprTerm Index |\n    ExprTerm GetAttr |\n    ExprTerm Splat |\n    \"(\" Expression \")\"\n);\n```\n\n----------------------------------------\n\nTITLE: Importing OVH IP Load Balancing TCP Frontend with Terraform\nDESCRIPTION: This snippet shows the command to import an existing OVH IP Load Balancing TCP frontend into Terraform state. It requires the service name and the TCP frontend ID.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/iploadbalancing_tcp_frontend.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform import ovh_iploadbalancing_tcp_frontend.testfrontend service_name/tcp_frontend_id\n```\n\n----------------------------------------\n\nTITLE: Creating HA-NAS Partition Snapshot in Terraform\nDESCRIPTION: Example configuration for creating a snapshot schedule on an OVH HA-NAS partition. Specifies the service name, partition name, and snapshot interval type.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/dedicated_nasha_partition_snapshot.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_dedicated_nasha_partition_snapshot\" \"my_partition\" {\n  service_name = \"zpool-12345\"\n  partition_name = \"my-partition\"\n  type = \"day-3\"\n}\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 5.3.5\nDESCRIPTION: This snippet shows the changelog entry for version 5.3.5, which allows decoding 'nil' code as boolean false.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/vmihailenco/msgpack/v5/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## [5.3.5](https://github.com/vmihailenco/msgpack/compare/v5.3.4...v5.3.5) (2021-10-22)\n\n- Allow decoding `nil` code as boolean false.\n```\n\n----------------------------------------\n\nTITLE: Retrieving Graylog Stream Information with Terraform\nDESCRIPTION: Example of how to use the ovh_dbaas_logs_output_graylog_stream data source to retrieve information about a specific DBaaS logs graylog stream. The example shows the minimum required parameters: service_name (the Logs Data Platform instance ID) and title (stream description).\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/dbaas_logs_output_graylog_stream.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_dbaas_logs_output_graylog_stream\" \"stream\" {\n  service_name = \"ldp-xx-xxxxx\"\n  title        = \"my stream\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying IP Mitigation Data in Terraform for OVH\nDESCRIPTION: This snippet demonstrates how to use the ovh_ip_mitigation data source to retrieve information about an IP permanent mitigation. It requires specifying the IP or CIDR and the IP on mitigation as arguments.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/ip_mitigation.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_ip_mitigation\" \"mitigation_data\" {\n  ip               = \"XXXXXX\"\n  ip_on_mitigation = \"XXXXXX\"\n}\n```\n\n----------------------------------------\n\nTITLE: Resource Timeout Configuration\nDESCRIPTION: Example of configuring custom timeouts for create, update, and delete operations on OpenSearch user resources.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_database_opensearch_user.md#2025-04-17_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_cloud_project_database_opensearch_user\" \"user\" {\n  # ...\n\n  timeouts {\n    create = \"1h\"\n    update = \"45m\"\n    delete = \"50s\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing OVH Cloud Project Gateway Interface with Terraform\nDESCRIPTION: This snippet shows the command to import an existing OVH Cloud Project Gateway Interface into Terraform state. It requires the service_name, region, gateway id, and interface_id as parameters.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_gateway_interface.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform import ovh_cloud_project_gateway.gateway service_name/region/id/interface_id\n```\n\n----------------------------------------\n\nTITLE: Retrieving OVH Identity User Information in Terraform\nDESCRIPTION: This snippet demonstrates how to retrieve information about an identity user in OVH using the ovh_me_identity_user data source. It requires specifying the user's login as an input argument.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/me_identity_user.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_me_identity_user\" \"my_user\" {\n  user = \"my_user_login\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Literal Value Syntax in HCL\nDESCRIPTION: Specifies the syntax for literal values in HCL, including numeric literals, boolean values, and null, using EBNF notation.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-17_snippet_5\n\nLANGUAGE: EBNF\nCODE:\n```\nLiteralValue = (\n  NumericLit |\n  \"true\" |\n  \"false\" |\n  \"null\"\n);\n```\n\n----------------------------------------\n\nTITLE: Importing HTTP Frontend Configuration\nDESCRIPTION: Shows the command syntax for importing an existing HTTP frontend configuration into Terraform state management.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/iploadbalancing_http_frontend.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform import ovh_iploadbalancing_http_frontend.testfrontend service_name/http_frontend_id\n```\n\n----------------------------------------\n\nTITLE: Retrieving OVHcloud Kubernetes NodePool Information with Terraform\nDESCRIPTION: This example demonstrates how to use the ovh_cloud_project_kube_nodepool data source to fetch details about an existing Kubernetes node pool from OVHcloud. The example shows how to reference the data source and output a specific attribute.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_kube_nodepool.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_kube_nodepool\" \"nodepool\" {\n  service_name  = \"XXXXXX\"\n  kube_id       = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxx\"\n  name          = \"xxxxxx\"\n}\n\noutput \"max_nodes\" {\n  value = data.ovh_cloud_project_kube_nodepool.nodepool.max_nodes\n}\n```\n\n----------------------------------------\n\nTITLE: Version Parsing and Comparison in Go\nDESCRIPTION: Example showing how to parse version strings and perform version comparisons using the go-version library. Demonstrates creation of version objects and comparison methods.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/go-version/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nv1, err := version.NewVersion(\"1.2\")\nv2, err := version.NewVersion(\"1.5+metadata\")\n\n// Comparison example. There is also GreaterThan, Equal, and just\n// a simple Compare that returns an int allowing easy >=, <=, etc.\nif v1.LessThan(v2) {\n    fmt.Printf(\"%s is less than %s\", v1, v2)\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving OVHcloud Account Information in Terraform\nDESCRIPTION: This snippet demonstrates how to use the ovh_me data source to fetch information about the current OVHcloud account. It doesn't require any arguments and returns various account details.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/me.md#2025-04-17_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"ovh_me\" \"my_account\" {}\n```\n\n----------------------------------------\n\nTITLE: Querying IAM Policy Data in OVH Using Terraform\nDESCRIPTION: Example showing how to retrieve IAM policy information using the policy ID. This data source allows accessing various policy attributes like name, description, permissions, and timestamps.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/iam_policy.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_iam_policy\" \"my_policy\" {\n  id = \"my_policy_id\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing OVH Server Reinstall Task Configuration - Bash\nDESCRIPTION: Command for importing an existing OVH dedicated server reinstall task into Terraform state. Requires the server's service name, operating system, and task ID.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/dedicated_server_reinstall_task.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nterraform import ovh_dedicated_server_reinstall_task nsXXXX.ipXXXX/operating_system/12345\n```\n\n----------------------------------------\n\nTITLE: Importing Existing Kafka ACLs into Terraform\nDESCRIPTION: This command demonstrates how to import an existing Kafka ACL into Terraform state. It requires the service name, cluster ID, and the ACL ID, separated by forward slashes.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_database_kafka_acl.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform import ovh_cloud_project_database_kafka_acl.my_acl service_name/cluster_id/id\n```\n\n----------------------------------------\n\nTITLE: Retrieving Default Credit Card Payment Mean in Terraform with OVH Provider\nDESCRIPTION: This example demonstrates how to use the ovh_me_paymentmean_creditcard data source to retrieve the default credit card payment mean associated with an OVHcloud account.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/me_paymentmean_creditcard.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_me_paymentmean_creditcard\" \"cc\" {\n  use_default = true\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Splat Operators Syntax in EBNF\nDESCRIPTION: Specifies the EBNF syntax for splat operators in HCL, including attribute-only and full splat operators.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-17_snippet_10\n\nLANGUAGE: ebnf\nCODE:\n```\nSplat = attrSplat | fullSplat;\nattrSplat = \".\" \"*\" GetAttr*;\nfullSplat = \"[\" \"*\" \"]\" (GetAttr | Index)*;\n```\n\n----------------------------------------\n\nTITLE: Importing HTTP Route for OVH IP Load Balancing\nDESCRIPTION: This bash command demonstrates how to import an existing HTTP route into Terraform state. It requires the service_name and route_id to identify the specific route to import.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/iploadbalancing_http_route.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform import ovh_iploadbalancing_http_route.httpsredirect service_name/route_id\n```\n\n----------------------------------------\n\nTITLE: MongoDB Prometheus Password Reset Configuration\nDESCRIPTION: Extended Terraform configuration showing different methods to reset Prometheus user passwords using datetime, MD5 hash, or arbitrary string triggers.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_database_mongodb_prometheus.md#2025-04-17_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_database\" \"mongodb\" {\n  service_name  = \"XXXX\"\n  engine        = \"mongodb\"\n  id            = \"ZZZZ\"\n}\n\nresource \"ovh_cloud_project_database_mongodb_prometheus\" \"prometheusDatetime\" {\n  service_name    = data.ovh_cloud_project_database.mongodb.service_name\n  cluster_id      = data.ovh_cloud_project_database.mongodb.id\n  password_reset  = \"2024-01-02T11:00:00Z\"\n}\n\nresource \"ovh_cloud_project_database_mongodb_prometheus\" \"prometheusMd5\" {\n  service_name    = data.ovh_cloud_project_database.mongodb.service_name\n  cluster_id      = data.ovh_cloud_project_database.mongodb.id\n  password_reset  = md5(var.something)\n}\n\nresource \"ovh_cloud_project_database_mongodb_prometheus\" \"prometheus\" {\n  service_name    = data.ovh_cloud_project_database.mongodb.service_name\n  cluster_id      = data.ovh_cloud_project_database.mongodb.id\n  password_reset  = \"reset1\"\n}\n\noutput \"prom_password\" {\n  value     = ovh_cloud_project_database_mongodb_prometheus.prometheus.password\n  sensitive = true\n}\n```\n\n----------------------------------------\n\nTITLE: Encoding and Decoding YAML in Go\nDESCRIPTION: This example demonstrates how to use the yaml package to unmarshal YAML data into a struct and a map, and then marshal them back into YAML. It showcases struct tags for customizing field names and flow style.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/gopkg.in/yaml.v3/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n        \"fmt\"\n        \"log\"\n\n        \"gopkg.in/yaml.v3\"\n)\n\nvar data = `\na: Easy!\nb:\n  c: 2\n  d: [3, 4]\n`\n\n// Note: struct fields must be public in order for unmarshal to\n// correctly populate the data.\ntype T struct {\n        A string\n        B struct {\n                RenamedC int   `yaml:\"c\"`\n                D        []int `yaml:\",flow\"`\n        }\n}\n\nfunc main() {\n        t := T{}\n    \n        err := yaml.Unmarshal([]byte(data), &t)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- t:\\n%v\\n\\n\", t)\n    \n        d, err := yaml.Marshal(&t)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- t dump:\\n%s\\n\\n\", string(d))\n    \n        m := make(map[interface{}]interface{})\n    \n        err = yaml.Unmarshal([]byte(data), &m)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- m:\\n%v\\n\\n\", m)\n    \n        d, err = yaml.Marshal(&m)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- m dump:\\n%s\\n\\n\", string(d))\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing RFC3339 Duration String in Go\nDESCRIPTION: This example shows how to parse an RFC3339 duration string into a time.Duration object using the rfc3339 library. It imports the required packages, uses the ParseDuration function to convert a string to a duration, and handles potential errors.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/ybriffa/rfc3339/README.md#2025-04-17_snippet_1\n\nLANGUAGE: golang\nCODE:\n```\npackage main\n\nimport (\n    \"time\"\n    \"fmt\"\n\n    \"github.com/ybriffa/rfc3339\"\n)\n\nfunc main() {\n    d, err := rfc3339.ParseDuration(\"PT42M\")\n    if err != nil {\n        fmt.Println(\"I got an error: \", err)\n        return\n    }\n    fmt.Println(\"My duration is \", d)\n}\n```\n\n----------------------------------------\n\nTITLE: Importing an Existing IP Firewall Rule in OVH Terraform Provider\nDESCRIPTION: This bash command shows how to import an existing IP firewall rule into Terraform state. It uses the IP addresses and sequence number as identifiers.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/ip_firewall_rule.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform import ovh_ip_firewall_rule.my_firewall_rule '127.0.0.1|127.0.0.2|0'\n```\n\n----------------------------------------\n\nTITLE: Querying Identity User Logins using OVH Terraform Provider\nDESCRIPTION: This snippet demonstrates how to use the 'ovh_me_identity_users' data source to retrieve a list of user logins for identity users. The data source takes no arguments and returns the list of user logins in the 'users' attribute.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/me_identity_users.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_me_identity_users\" \"users\" {}\n```\n\n----------------------------------------\n\nTITLE: Importing OVHcloud Managed Database User in Terraform\nDESCRIPTION: Demonstrates the command to import an existing OVHcloud Managed Database user into Terraform state.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_database_integration.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform import ovh_cloud_project_database_user.my_user service_name/engine/cluster_id/id\n```\n\n----------------------------------------\n\nTITLE: Resource Import Command\nDESCRIPTION: Command for importing existing OpenSearch users into Terraform state using service name, cluster ID, and user ID.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_database_opensearch_user.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform import ovh_cloud_project_database_opensearch_user.my_user service_name/cluster_id/id\n```\n\n----------------------------------------\n\nTITLE: Creating DBaaS Logs Opensearch Output Alias in Terraform\nDESCRIPTION: This Terraform resource creates a DBaaS Logs Opensearch output alias. It requires a service name, description, and suffix. Optional parameters include lists of attached indexes and streams.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/dbaas_logs_output_opensearch_alias.md#2025-04-17_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"ovh_dbaas_logs_output_opensearch_alias\" \"alias\" {\n  service_name = \"....\"\n  description  = \"my opensearch alias\"\n  suffix = \"alias\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Operations Syntax in EBNF\nDESCRIPTION: Specifies the EBNF syntax for unary and binary operations in HCL, including arithmetic, comparison, and logic operators.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-17_snippet_11\n\nLANGUAGE: ebnf\nCODE:\n```\nOperation = unaryOp | binaryOp;\nunaryOp = (\"-\" | \"!\") ExprTerm;\nbinaryOp = ExprTerm binaryOperator ExprTerm;\nbinaryOperator = compareOperator | arithmeticOperator | logicOperator;\ncompareOperator = \"==\" | \"!=\" | \"<\" | \">\" | \"<=\" | \">=\";\narithmeticOperator = \"+\" | \"-\" | \"*\" | \"/\" | \"%\";\nlogicOperator = \"&&\" | \"||\";\n```\n\n----------------------------------------\n\nTITLE: Importing Dedicated Cloud and vRack Attachment with Terraform\nDESCRIPTION: This command shows how to import an existing attachment of a Dedicated Cloud and a vRack into Terraform state. It uses the vRack service name and Dedicated Cloud service name as identifiers.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/vrack_dedicated_cloud.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform import ovh_vrack_dedicated_cloud.myattach \"<vRack service name>/<Dedicated Cloud service name>\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Bank Account Payment Mean Data in Terraform with OVH Provider\nDESCRIPTION: Example showing how to use the ovh_me_paymentmean_bankaccount data source to retrieve the default bank account payment mean associated with an OVHcloud account.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/me_paymentmean_bankaccount.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_me_paymentmean_bankaccount\" \"ba\" {\n  use_default = true\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Kafka ACLs with Terraform OVH Provider\nDESCRIPTION: Example showing how to fetch Kafka ACL IDs from an OVH Cloud project database cluster. The code retrieves ACL information using service_name and cluster_id parameters, then outputs the list of ACL IDs.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_database_kafka_acls.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_database_kafka_acls\" \"acls\" {\n  service_name  = \"XXX\"\n  cluster_id    = \"YYY\"\n}\n\noutput \"acl_ids\" {\n  value = data.ovh_cloud_project_database_kafka_acls.acls.acl_ids\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of errwrap Package in Go\nDESCRIPTION: Demonstrates how to use the errwrap package to wrap errors, check for specific errors, and extract errors of a certain type. It includes a function that wraps an error and a main function showing various error checking methods.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/errwrap/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// A function that always returns an error, but wraps it, like a real\n// function might.\nfunc tryOpen() error {\n\t_, err := os.Open(\"/i/dont/exist\")\n\tif err != nil {\n\t\treturn errwrap.Wrapf(\"Doesn't exist: {{err}}\", err)\n\t}\n\n\treturn nil\n}\n\nfunc main() {\n\terr := tryOpen()\n\n\t// We can use the Contains helpers to check if an error contains\n\t// another error. It is safe to do this with a nil error, or with\n\t// an error that doesn't even use the errwrap package.\n\tif errwrap.Contains(err, \"does not exist\") {\n\t\t// Do something\n\t}\n\tif errwrap.ContainsType(err, new(os.PathError)) {\n\t\t// Do something\n\t}\n\n\t// Or we can use the associated `Get` functions to just extract\n\t// a specific error. This would return nil if that specific error doesn't\n\t// exist.\n\tperr := errwrap.GetType(err, new(os.PathError))\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving OAuth2 Client IDs using ovh_me_api_oauth2_client Data Source in Terraform\nDESCRIPTION: This snippet demonstrates how to use the ovh_me_api_oauth2_client data source to retrieve a list of all existing OAuth2 service account client IDs. The data source takes no arguments and returns the client_ids attribute containing all available IDs.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/me_api_oauth2_clients.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_me_api_oauth2_client\" \"my_oauth2_clients\" {\n}\n```\n\n----------------------------------------\n\nTITLE: Encoding Post-Installation Script for Windows\nDESCRIPTION: Shows how to encode a PowerShell script to base64 for use in the post-installation script field.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/dedicated_server_reinstall_task.md#2025-04-17_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n[System.Convert]::ToBase64String((Get-Content -Path .\\my-script.ps1 -Encoding Byte))\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeouts for M3DB User Operations in Terraform\nDESCRIPTION: This snippet demonstrates how to configure custom timeouts for create, update, and delete operations on an M3DB user resource. This allows for handling longer running operations that might exceed default timeout values.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_database_m3db_user.md#2025-04-17_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_cloud_project_database_m3db_user\" \"user\" {\n  # ...\n\n  timeouts {\n    create = \"1h\"\n    update = \"45m\"\n    delete = \"50s\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing OVH Cloud Project Database Prometheus Resource\nDESCRIPTION: This command shows how to import an existing OVH Cloud Project Database Prometheus resource into Terraform state using the service_name, engine, and cluster_id.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_database_prometheus.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform import ovh_cloud_project_database_mongodb_prometheus.my_prometheus service_name/engine/cluster_id\n```\n\n----------------------------------------\n\nTITLE: Setting Timeouts for OVH Cloud Project Database User Resource\nDESCRIPTION: This snippet demonstrates how to set custom timeouts for create, update, and delete operations on the ovh_cloud_project_database_user resource.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_database_user.md#2025-04-17_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_cloud_project_database_user\" \"user\" {\n  # ...\n\n  timeouts {\n    create = \"1h\"\n    update = \"45m\"\n    delete = \"50s\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Yamux Message Types\nDESCRIPTION: Defines the supported message types in the Yamux protocol including Data (0x0), Window Update (0x1), Ping (0x2), and Go Away (0x3) messages.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/yamux/spec.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* 0x0 Data - Used to transmit data. May transmit zero length payloads\n  depending on the flags.\n\n* 0x1 Window Update - Used to updated the senders receive window size.\n  This is used to implement per-session flow control.\n\n* 0x2 Ping - Used to measure RTT. It can also be used to heart-beat\n  and do keep-alives over TCP.\n\n* 0x3 Go Away - Used to close a session.\n```\n\n----------------------------------------\n\nTITLE: Importing OVH vRack Dedicated Cloud Datacenter in Terraform\nDESCRIPTION: This bash command shows how to import an existing OVH vRack Dedicated Cloud Datacenter into Terraform. It requires the vRack service name, Dedicated Cloud Datacenter service name, and vRack target service name.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/vrack_dedicated_cloud_datacenter.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform import ovh_vrack_dedicated_cloud_datacenter.vrack-dedicatedCloudDatacenter \"<vRack service name>/<Dedicated Cloud Datacener service name>/<vRack target service name>\"\n```\n\n----------------------------------------\n\nTITLE: Installing Local Terraform Provider Binary\nDESCRIPTION: This script installs a locally built terraform-provider-ovh binary into the local plugin repository for testing purposes. It sets the target environment, builds the provider, and copies the binary to the appropriate location.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/index.md#2025-04-17_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n# Set your target environment (OS_architecture): linux_amd64, darwin_amd64...\n$ export ENV=\"linux_amd64\"\n$ make build\n...\n$ mkdir -p ~/.terraform.d/plugins/terraform.local/local/ovh/0.0.1/$ENV\n$ cp $GOPATH/bin/terraform-provider-ovh ~/.terraform.d/plugins/terraform.local/local/ovh/0.0.1/$ENV/terraform-provider-ovh_v0.0.1\n```\n\n----------------------------------------\n\nTITLE: IO Stream Management with run.Group in Go\nDESCRIPTION: Illustrates handling an IO ReadCloser stream with run.Group. Sets up a scanner to read from the connection and ensures proper cleanup on shutdown.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/oklog/run/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nvar conn io.ReadCloser = ...\ng.Add(func() error {\n\ts := bufio.NewScanner(conn)\n\tfor s.Scan() {\n\t\tprintln(s.Text())\n\t}\n\treturn s.Err()\n}, func(error) {\n\tconn.Close()\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Error Types with errwrap in Go\nDESCRIPTION: Shows how to create a custom error type that implements the Wrapper interface, allowing it to work with errwrap's Contains and ContainsType functions. It includes the implementation of a custom AppError type and an example of using it with errwrap.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/errwrap/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype AppError {\n  Code ErrorCode\n  Err  error\n}\n\nfunc (e *AppError) WrappedErrors() []error {\n  return []error{e.Err}\n}\n\n// Usage example\nerr := &AppError{Err: fmt.Errorf(\"an error\")}\nif errwrap.ContainsType(err, fmt.Errorf(\"\")) {\n\t// This will work!\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Domain Name Configuration in Terraform\nDESCRIPTION: Example showing how to import an existing domain name into Terraform state using the domain name as identifier.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/domain_name.md#2025-04-17_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nimport {\n  to = ovh_domain_name.domain\n  id = \"<domain name>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing With Function Using ExpressionClosureType in Go\nDESCRIPTION: This snippet demonstrates how to implement a 'with' function that uses the ExpressionClosureType to evaluate an expression with additional local variables.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/hcl/v2/ext/customdecode/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nvar WithFunc = function.New(&function.Spec{\n    Params: []function.Parameter{\n        {\n            Name: \"variables\",\n            Type: cty.DynamicPseudoType,\n        },\n        {\n            Name: \"expression\",\n            Type: customdecode.ExpressionClosureType,\n        },\n    },\n    Type: func(args []cty.Value) (cty.Type, error) {\n        varsVal := args[0]\n        exprVal := args[1]\n        if !varsVal.Type().IsObjectType() {\n            return cty.NilVal, function.NewArgErrorf(0, \"must be an object defining local variables\")\n        }\n        if !varsVal.IsKnown() {\n            // We can't predict our result type until the variables object\n            // is known.\n            return cty.DynamicPseudoType, nil\n        }\n        vars := varsVal.AsValueMap()\n        closure := customdecode.ExpressionClosureFromVal(exprVal)\n        result, err := evalWithLocals(vars, closure)\n        if err != nil {\n            return cty.NilVal, err\n        }\n        return result.Type(), nil\n    },\n    Impl: func(args []cty.Value, retType cty.Type) (cty.Value, error) {\n        varsVal := args[0]\n        exprVal := args[1]\n        vars := varsVal.AsValueMap()\n        closure := customdecode.ExpressionClosureFromVal(exprVal)\n        return evalWithLocals(vars, closure)\n    },\n})\n\nfunc evalWithLocals(locals map[string]cty.Value, closure *customdecode.ExpressionClosure) (cty.Value, error) {\n    childCtx := closure.EvalContext.NewChild()\n    childCtx.Variables = locals\n    val, diags := closure.Expression.Value(childCtx)\n    if diags.HasErrors() {\n        return cty.NilVal, function.NewArgErrorf(1, \"couldn't evaluate expression: %s\", diags.Error())\n    }\n    return val, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Existing OVHcloud Managed Databases into Terraform\nDESCRIPTION: Command for importing an existing OVHcloud Managed Database into Terraform state. Requires the service_name, engine, cluster_id, and database id, separated by forward slashes.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_database_database.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform import ovh_cloud_project_database_database.my_database service_name/engine/cluster_id/id\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeouts for PostgreSQL User Management in OVH Cloud Project\nDESCRIPTION: This snippet demonstrates how to set custom timeouts for creating, updating, and deleting PostgreSQL users in an OVH Cloud Project Database.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_database_postgresql_user.md#2025-04-17_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_cloud_project_database_postgresql_user\" \"user\" {\n  # ...\n\n  timeouts {\n    create = \"1h\"\n    update = \"45m\"\n    delete = \"50s\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing vrackServices Attachment to vRack in Terraform OVH Provider\nDESCRIPTION: This command shows how to import an existing attachment of a vrackServices to a vRack into Terraform state. It requires the vRack service name and the vrackServices service name, separated by a forward slash.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/vrack_vrackservices.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform import ovh_vrack_vrackservices.myattach \"<service_name>/<vrackServices service name>\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving KMS Credential Data in Terraform\nDESCRIPTION: Example usage of the ovh_okms_credential data source to retrieve information about a KMS credential by specifying its ID and the KMS ID.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/okms_credential.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_okms_resource\" \"kms\" {\n  okms_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  id      = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying OVH Private Database Information with Terraform\nDESCRIPTION: Example showing how to retrieve information about an OVH private database using the ovh_hosting_privatedatabase_database data source. Requires service_name and database_name as input parameters.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/hosting_privatedatabase_database.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_hosting_privatedatabase_database\" \"my_database\" {\n  service_name  = \"XXXXXX\"\n  database_name = \"XXXXXX\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Global Logger in Go\nDESCRIPTION: Demonstrates how to use the global logger provided by go-hclog to log an info message.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/go-hclog/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nhclog.Default().Info(\"hello world\")\n```\n\n----------------------------------------\n\nTITLE: Using With Function in HCL\nDESCRIPTION: An example of how to use the 'with' function in HCL to evaluate an expression with additional local variables.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/hcl/v2/ext/customdecode/README.md#2025-04-17_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nfoo = with({name = \"Cory\"}, \"${greeting}, ${name}!\")\n```\n\n----------------------------------------\n\nTITLE: Importing OVH IP Move Resource with Terraform\nDESCRIPTION: This bash command demonstrates how to import an existing IP move configuration into Terraform state. It uses the IP address as the identifier for the import operation.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/ip_move.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform import ovh_ip_move.mv '1.2.3.4/32'\n```\n\n----------------------------------------\n\nTITLE: Importing OVHcloud Managed Database IP Restriction in Terraform\nDESCRIPTION: This bash command demonstrates how to import an existing OVHcloud Managed Database IP restriction into Terraform state. It uses the service_name, engine, cluster_id, and IP address as identifiers.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_database_ip_restriction.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform import ovh_cloud_project_database_ip_restriction.my_ip_restriction service_name/engine/cluster_id/178.97.6.0/24\n```\n\n----------------------------------------\n\nTITLE: Resetting Prometheus Password for OVH Cloud Project Database\nDESCRIPTION: This snippet shows how to reset the password for a Prometheus user by updating the password_reset attribute. It includes examples of using a datetime string and an MD5 hash of another variable to trigger the password reset.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_database_prometheus.md#2025-04-17_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_database\" \"db\" {\n  service_name  = \"XXXX\"\n  engine        = \"YYYY\"\n  id            = \"ZZZZ\"\n}\n\nresource \"ovh_cloud_project_database_prometheus\" \"prometheusDatetime\" {\n  service_name    = data.ovh_cloud_project_database.db.service_name\n  engine          = data.ovh_cloud_project_database.db.engine\n  cluster_id      = data.ovh_cloud_project_database.db.id\n  password_reset  = \"2024-01-02T11:00:00Z\"\n}\n\nvariable \"something\" {\n  type = string\n}\n\nresource \"ovh_cloud_project_database_prometheus\" \"prometheusMd5\" {\n  service_name    = data.ovh_cloud_project_database.db.service_name\n  engine          = data.ovh_cloud_project_database.db.engine\n  cluster_id      = data.ovh_cloud_project_database.db.id\n  password_reset  = md5(var.something)\n}\n\nresource \"ovh_cloud_project_database_prometheus\" \"prometheus\" {\n  service_name    = data.ovh_cloud_project_database.db.service_name\n  engine          = data.ovh_cloud_project_database.db.engine\n  cluster_id      = data.ovh_cloud_project_database.db.id\n  password_reset  = \"reset1\"\n}\n\noutput \"prom_password\" {\n  value     = ovh_cloud_project_database_prometheus.prometheus.password\n  sensitive = true\n}\n```\n\n----------------------------------------\n\nTITLE: Importing an Existing OVH Cloud Project into Terraform\nDESCRIPTION: This snippet shows how to import an existing OVH cloud project into Terraform state using the project_id, allowing management of the resource through Terraform.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project.md#2025-04-17_snippet_3\n\nLANGUAGE: terraform\nCODE:\n```\nimport {\n  to = ovh_cloud_project.my_cloud_project\n  id = \"<project ID>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Container Registry IP Restrictions in Terraform\nDESCRIPTION: Example showing how to retrieve IP restrictions for a container registry's management interface and output the results. Requires service_name (project ID) and registry_id as inputs.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_containerregistry_ip_restrictions_management.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_containerregistry_ip_restrictions_management\" \"mgt_iprestrictions_data\" {\n  service_name = \"XXXXXX\"\n  registry_id  = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxx\"\n}\n\noutput \"my_ip_restrictions\" {\n  value = data.ovh_cloud_project_containerregistry_ip_restrictions_management.mgt_iprestrictions_data.ip_restrictions\n}\n```\n\n----------------------------------------\n\nTITLE: Using hclog.Fmt() for Formatted Logging in Go\nDESCRIPTION: Shows how to use hclog.Fmt() for formatted logging of values in go-hclog.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/go-hclog/README.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ntotalBandwidth := 200\nappLogger.Info(\"total bandwidth exceeded\", \"bandwidth\", hclog.Fmt(\"%d GB/s\", totalBandwidth))\n```\n\n----------------------------------------\n\nTITLE: Creating Subsystem Logger in Go\nDESCRIPTION: Shows how to create a new logger for a subsystem that inherits the parent logger's name.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/go-hclog/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nsubsystemLogger := appLogger.Named(\"transport\")\nsubsystemLogger.Info(\"we are transporting something\")\n```\n\n----------------------------------------\n\nTITLE: Importing an Existing OVHcloud Savings Plan into Terraform\nDESCRIPTION: This bash command shows how to import an existing OVHcloud Savings Plan into Terraform state. It requires the service name and savings plan ID.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/savings_plan.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform import ovh_savings_plan.plan service_name/savings_plan_id\n```\n\n----------------------------------------\n\nTITLE: Defining Expression Syntax in HCL\nDESCRIPTION: Specifies the high-level syntax for expressions in HCL, including terms, operations, and conditionals, using EBNF notation.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-17_snippet_3\n\nLANGUAGE: EBNF\nCODE:\n```\nExpression = (\n    ExprTerm |\n    Operation |\n    Conditional\n);\n```\n\n----------------------------------------\n\nTITLE: Importing OVH IP Load Balancing UDP Farm using Terraform\nDESCRIPTION: This bash command demonstrates how to import an existing OVH IP Load Balancing UDP Farm into Terraform state. It requires the service name and farm ID.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/iploadbalancing_udp_farm.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform import ovh_iploadbalancing_udp_farm.farmname service_name/farm_id\n```\n\n----------------------------------------\n\nTITLE: Importing Existing SSL Certificate into Terraform State for OVH IP Load Balancing\nDESCRIPTION: This command imports an existing SSL certificate into the Terraform state for management. It requires the service name and SSL ID, separated by a forward slash.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/iploadbalancing_ssl.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform import ovh_iploadbalancing_ssl.sslname service_name/ssl_id\n```\n\n----------------------------------------\n\nTITLE: Advanced M3DB User Management with Password Reset in Terraform\nDESCRIPTION: This snippet shows different approaches to reset M3DB user passwords by triggering updates through the password_reset attribute. It demonstrates three methods: using a datetime string, deriving from another variable with md5, and using a simple string value.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_database_m3db_user.md#2025-04-17_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_database\" \"m3db\" {\n  service_name  = \"XXX\"\n  engine        = \"m3db\"\n  id            = \"ZZZ\"\n}\n\n# Change password_reset with the datetime each time you want to reset the password to trigger an update\nresource \"ovh_cloud_project_database_m3db_user\" \"userDatetime\" {\n  service_name    = data.ovh_cloud_project_database.m3db.service_name\n  cluster_id      = data.ovh_cloud_project_database.m3db.id\n  group           = \"mygroup\"\n  name            = \"alice\"\n  password_reset  = \"2024-01-02T11:00:00Z\"\n}\n\nvariable \"something\" {\n  type = string\n}\n\n# Set password_reset to be based on the update of another variable to reset the password\nresource \"ovh_cloud_project_database_m3db_user\" \"userMd5\" {\n  service_name    = data.ovh_cloud_project_database.m3db.service_name\n  cluster_id      = data.ovh_cloud_project_database.m3db.id\n  group           = \"mygroup\"\n  name            = \"bob\"\n  password_reset  = md5(var.something)\n}\n\n# Change password_reset each time you want to reset the password to trigger an update\nresource \"ovh_cloud_project_database_m3db_user\" \"user\" {\n  service_name    = data.ovh_cloud_project_database.m3db.service_name\n  cluster_id      = data.ovh_cloud_project_database.m3db.id\n  group           = \"mygroup\"\n  name            = \"johndoe\"\n  password_reset  = \"reset1\"\n}\n\noutput \"user_password\" {\n    value = ovh_cloud_project_database_m3db_user.user.password\n    sensitive = true\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Built-in Terraform Provider in Go\nDESCRIPTION: Demonstrates how to create a provider address for the built-in terraform provider.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/terraform-registry-address/README.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npAddr := NewProvider(BuiltInProviderHost, BuiltInProviderNamespace, \"terraform\")\n```\n\n----------------------------------------\n\nTITLE: Importing Existing OVHcloud DNS Records\nDESCRIPTION: Shows the command syntax for importing existing DNS records into Terraform state. The import requires the record ID and zone name, separated by a period.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/domain_zone_record.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform import ovh_domain_zone_record.test id.zone\n```\n\n----------------------------------------\n\nTITLE: Retrieving IP Firewall Rule Data in Terraform\nDESCRIPTION: This snippet demonstrates how to use the ovh_ip_firewall_rule data source to retrieve information about a specific firewall rule. It requires the IP address, the IP address on the firewall, and the sequence number of the rule.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/ip_firewall_rule.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_ip_firewall_rule\" \"my_firewall_rule\" {\n  ip             = \"XXXXXX\"\n  ip_on_firewall = \"XXXXXX\"\n  sequence       = 0\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Struct Tags Example in Go\nDESCRIPTION: Example demonstrating how to parse a struct tag containing a name and key-value pairs. Shows parsing of both simple and complex values with quotes.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/vmihailenco/tagparser/v2/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc ExampleParse() {\n\ttag := tagparser.Parse(\"some_name,key:value,key2:'complex value'\")\n\tfmt.Println(tag.Name)\n\tfmt.Println(tag.Options)\n\t// Output: some_name\n\t// map[key:value key2:'complex value']\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Existing OVHcloud VPS into Terraform\nDESCRIPTION: Commands for importing an existing OVHcloud VPS into Terraform state and generating its configuration file.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/vps.md#2025-04-17_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nimport {\n  to = ovh_vps.myvps\n  id = \"<your existing VPS service_name>\"\n}\n```\n\nLANGUAGE: sh\nCODE:\n```\nterraform plan -generate-config-out=./vps.tf\n```\n\n----------------------------------------\n\nTITLE: HCL Version Import Example\nDESCRIPTION: Example showing how to import both HCL 1 and HCL 2 versions in the same Go program using semantic import versioning.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/hcl/v2/README.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    hcl1 \"github.com/hashicorp/hcl\"\n    hcl2 \"github.com/hashicorp/hcl/v2\"\n)\n```\n\n----------------------------------------\n\nTITLE: Running Terraform Import Commands\nDESCRIPTION: Bash commands for importing and applying the IP Load Balancing configuration.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/iploadbalancing.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform plan -generate-config-out=iplb.tf\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Importing TCP Farm Server Configuration in OVH Load Balancer\nDESCRIPTION: Command example for importing an existing TCP farm server configuration into Terraform state. Uses the format 'service_name/farm_id/server_id'.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/iploadbalancing_tcp_farm_server.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform import ovh_iploadbalancing_tcp_farm_server.backend service_name/farm_id/server_id\n```\n\n----------------------------------------\n\nTITLE: Parsing Legacy Provider with Placeholder in Go\nDESCRIPTION: Shows parsing of legacy provider addresses that use a placeholder namespace, common in Terraform v0.13.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/terraform-registry-address/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npAddr, err := ParseProviderSource(\"-/aws\")\nif err != nil {\n\t// deal with error\n}\n\n// pAddr == Provider{\n//   Type:      \"aws\",\n//   Namespace: LegacyProviderNamespace,     // \"-\"\n//   Hostname:  DefaultProviderRegistryHost, // \"registry.terraform.io\"\n// }\npAddr.HasKnownNamespace() // == true\npAddr.IsLegacy() // == true\n```\n\n----------------------------------------\n\nTITLE: Importing OVHcloud IP Reverse Resource in Terraform\nDESCRIPTION: This command demonstrates how to import an existing IP reverse record into Terraform state. It requires the IP block and the specific IP address, separated by a pipe character.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/ip_reverse.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform import ovh_ip_reverse.my_reverse '2001:0db8:c0ff:ee::/64|2001:0db8:c0ff:ee::42'\n```\n\n----------------------------------------\n\nTITLE: JSON Expression Interpolation\nDESCRIPTION: Example of using HCL expressions within JSON strings using interpolation syntax.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/hcl/v2/README.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sum\": \"${1 + addend}\",\n  \"message\": \"Hello, ${name}!\",\n  \"shouty_message\": \"${upper(message)}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Existing OVH Private Database in Terraform\nDESCRIPTION: Command to import an existing OVH Webhosting database into Terraform state. Uses the format service_name/database_name as the import identifier.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/hosting_privatedatabase_database.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ terraform import ovh_hosting_privatedatabase_database.database service_name/database_name\n```\n\n----------------------------------------\n\nTITLE: Formatting Duration to RFC3339 in Go\nDESCRIPTION: This snippet demonstrates how to use the rfc3339 library to format a time.Duration into RFC3339 format. It imports the necessary packages, including the custom rfc3339 library, and uses the FormatDuration function to convert a duration to a string.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/ybriffa/rfc3339/README.md#2025-04-17_snippet_0\n\nLANGUAGE: golang\nCODE:\n```\npackage main\n\nimport (\n    \"time\"\n    \"fmt\"\n\n    \"github.com/ybriffa/rfc3339\"\n)\n\nfunc main() {\n    s := rfc3339.FormatDuration(time.Hour)\n    fmt.Println(\"My duration is \", s)\n}\n```\n\n----------------------------------------\n\nTITLE: Importing OVH Cloud Load Balancer Configuration\nDESCRIPTION: Commands for importing an existing OVH Cloud load balancer into Terraform state and generating its configuration.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_loadbalancer.md#2025-04-17_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\nimport {\n  id = \"<service_name>/<region_name>/<id>\"\n  to = ovh_cloud_project_loadbalancer.lb\n}\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform plan -generate-config-out=lb.tf\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Parsing Legacy Provider Addresses in Go\nDESCRIPTION: Demonstrates handling of legacy and ambiguous provider addresses, including namespace-less and placeholder namespace formats.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/terraform-registry-address/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npAddr, err := ParseProviderSource(\"aws\")\nif err != nil {\n\t// deal with error\n}\n\n// pAddr == Provider{\n//   Type:      \"aws\",\n//   Namespace: UnknownProviderNamespace,    // \"?\"\n//   Hostname:  DefaultProviderRegistryHost, // \"registry.terraform.io\"\n// }\npAddr.HasKnownNamespace() // == false\npAddr.IsLegacy() // == false\n```\n\n----------------------------------------\n\nTITLE: Importing DBaaS Logs Role Stream Permission\nDESCRIPTION: Command for importing an existing DBaaS logs role stream permission into Terraform state. Uses service_name, role_id, and permission id separated by forward slashes.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/dbaas_logs_role_permission_stream.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nterraform import ovh_dbaas_logs_role_permission_stream.perm ldp-ra-XX/dc145bc2-eb01-4efe-a802-XXXXXX/e4818fa8-f426-11ef-a1f6-XXXXXXX\n```\n\n----------------------------------------\n\nTITLE: Retrieving M3DB Namespace Data in Terraform with OVH Provider\nDESCRIPTION: Example Terraform configuration for retrieving information about a M3DB namespace from an OVH cloud project. It shows how to declare the data source with required parameters and how to access its attributes in an output.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_database_m3db_namespace.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_database_m3db_namespace\" \"m3db_namespace\" {\n  service_name  = \"XXX\"\n  cluster_id    = \"YYY\"\n  name          = \"ZZZ\"\n}\n\noutput \"m3dbnamespace_type\" {\n  value = data.ovh_cloud_project_database_m3db_namespace.m3db_namespace.type\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning OVH Provider Repository\nDESCRIPTION: Commands to clone the OVH provider repository to the correct GOPATH location\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ mkdir -p $GOPATH/src/github.com/terraform-providers/; cd $GOPATH/src/github.com/terraform-providers/\n$ git clone git@github.com:ovh/terraform-provider-ovh\n```\n\n----------------------------------------\n\nTITLE: Implementing Comparison Operators in HCL\nDESCRIPTION: Basic comparison operators for equality and numeric comparison in HCL. Includes equal, not equal, less than, greater than, and their variants.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-17_snippet_12\n\nLANGUAGE: txt\nCODE:\n```\na == b  equal\na != b  not equal\n```\n\nLANGUAGE: txt\nCODE:\n```\na < b   less than\na <= b  less than or equal to\na > b   greater than\na >= b  greater than or equal to\n```\n\n----------------------------------------\n\nTITLE: Importing OVH Cloud Project User S3 Policy\nDESCRIPTION: Command for importing an existing OVH Cloud Project User S3 Policy into Terraform state using service_name and user_id.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_user_s3_policy.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform import ovh_cloud_project_user_s3_policy.policy service_name/user_id\n```\n\n----------------------------------------\n\nTITLE: Importing OVH IP Load Balancing UDP Frontend with Terraform\nDESCRIPTION: This bash command shows how to import an existing UDP frontend into Terraform state. It requires the service_name and frontend_id, separated by a forward slash.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/iploadbalancing_udp_frontend.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform import ovh_iploadbalancing_udp_frontend.testfrontend service_name/frontend_id\n```\n\n----------------------------------------\n\nTITLE: Version Constraints in Go\nDESCRIPTION: Example demonstrating how to create and check version constraints against version objects using the go-version library.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/go-version/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nv1, err := version.NewVersion(\"1.2\")\n\n// Constraints example.\nconstraints, err := version.NewConstraint(\">= 1.0, < 1.4\")\nif constraints.Check(v1) {\n\tfmt.Printf(\"%s satisfies constraints %s\", v1, constraints)\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Existing S3 Credentials into Terraform State\nDESCRIPTION: Command for importing existing OVH cloud project user S3 credentials into Terraform state management.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_user_s3_credential.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform import ovh_cloud_project_user_s3_credential.s3_credential service_name/user_id/access_key_id\n```\n\n----------------------------------------\n\nTITLE: Implementing Logic Operators in HCL\nDESCRIPTION: Basic logical operations including AND, OR, and NOT operators that work with boolean values.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-17_snippet_14\n\nLANGUAGE: txt\nCODE:\n```\na && b   logical AND\na || b   logical OR\n!a       logical NOT\n```\n\n----------------------------------------\n\nTITLE: Specifying Numeric Literal Syntax in HCL\nDESCRIPTION: Defines the syntax for numeric literals in HCL using EBNF notation. Numeric literals can include integer parts, fractional parts, and exponent parts.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-17_snippet_1\n\nLANGUAGE: EBNF\nCODE:\n```\nNumericLit = decimal+ (\".\" decimal+)? (expmark decimal+)?;\ndecimal    = '0' .. '9';\nexpmark    = ('e' | 'E') (\"+\" | \"-\")?\n```\n\n----------------------------------------\n\nTITLE: Importing OVH vRack IPv6 Block Attachment with Terraform\nDESCRIPTION: This snippet shows how to import an existing IPv6 block attachment to a vRack into Terraform state. It uses the service_name and block as identifiers.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/vrack_ipv6.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform import ovh_vrack_ipv6.myattach \"<service_name>,<block>\"\n```\n\n----------------------------------------\n\nTITLE: Mixing and Reusing Colors in Go\nDESCRIPTION: Examples of creating custom color objects and combining multiple attributes.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/fatih/color/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Create a new color object\nc := color.New(color.FgCyan).Add(color.Underline)\nc.Println(\"Prints cyan text with an underline.\")\n\n// Or just add them to New()\nd := color.New(color.FgCyan, color.Bold)\nd.Printf(\"This prints bold cyan %s\\n\", \"too!.\")\n\n// Mix up foreground and background colors, create new mixes!\nred := color.New(color.FgRed)\n\nboldRed := red.Add(color.Bold)\nboldRed.Println(\"This will print text in bold red.\")\n\nwhiteBackground := red.Add(color.BgWhite)\nwhiteBackground.Println(\"Red text with white background.\")\n```\n\n----------------------------------------\n\nTITLE: Importing OVH Cloud Project Network Private Subnet with Terraform\nDESCRIPTION: This bash command shows how to import an existing OVH Cloud project network private subnet into Terraform state. It requires the service name, network ID (in pn-xxxx format), and subnet ID.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_network_private_subnet.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform import ovh_cloud_project_network_private_subnet.mysubnet service_name/network_id/subnet_id\n```\n\n----------------------------------------\n\nTITLE: Returning Multierror Only If Errors Exist in Go\nDESCRIPTION: Shows how to use the ErrorOrNil function to return an error implementation only if there are errors to return in a multierror.Error object.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/go-multierror/README.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nvar result *multierror.Error\n\n// ... accumulate errors here\n\n// Return the `error` only if errors were added to the multierror, otherwise\n// return nil since there are no errors.\nreturn result.ErrorOrNil()\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for Version 0.2.0\nDESCRIPTION: Changelog entry documenting backwards incompatibilities, new features and improvements for version 0.2.0 of the OVH Terraform provider, released January 10, 2018.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/CHANGELOG.md#2025-04-17_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.2.0 (January 10, 2018)\n\nBACKWARDS INCOMPATIBILITIES / NOTES:\n\n* d/ovh_publiccloud_region: Deprecated fields which don't comply\n  with lowercase & underscore convention (`continentCode`, `datacenterLocation`).\n  Use `continent_code` and `datacenter_location` instead.\n\nFEATURES\n\n* __New Resource:__ `ovh_domain_zone_record`\n\nIMPROVEMENTS\n\n* The provider config can now source its credentials from `~/.ovh.conf`\n```\n\n----------------------------------------\n\nTITLE: Retrieving IAM Resource Groups in Terraform OVH Provider\nDESCRIPTION: Example showing how to use the ovh_iam_resource_groups data source to fetch a list of IAM resource groups associated with an OVH account. This data source requires no arguments and returns a list of resource group IDs.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/iam_resource_groups.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_iam_resource_groups\" \"my_groups\" {\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Attribute Access Operator Syntax in EBNF\nDESCRIPTION: Specifies the EBNF syntax for the attribute access operator in HCL, used to access object attributes.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-17_snippet_9\n\nLANGUAGE: ebnf\nCODE:\n```\nGetAttr = \".\" Identifier;\n```\n\n----------------------------------------\n\nTITLE: Defining Template If Directive Syntax in HCL\nDESCRIPTION: EBNF syntax definition for conditional template directives with optional else clause.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-17_snippet_18\n\nLANGUAGE: ebnf\nCODE:\n```\nTemplateIf = (\n    (\"%{\" | \"%{~\") \"if\" Expression (\"}\" | \"~}\")\n    Template\n    (\n        (\"%{\" | \"%{~\") \"else\" (\"}\" | \"~}\")\n        Template\n    )?\n    (\"%{\" | \"%{~\") \"endif\" (\"}\" | \"~}\")\n);\n```\n\n----------------------------------------\n\nTITLE: Importing vRack Cloud Project Configuration\nDESCRIPTION: Command to import existing vRack and Cloud Project attachment into Terraform state. Uses service_name and project_id separated by a forward slash.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/vrack_cloudproject.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform import ovh_vrack_cloudproject.myattach service_name/project_id\n```\n\n----------------------------------------\n\nTITLE: Using Standard Colors in Go\nDESCRIPTION: Examples of using built-in helper functions for basic color output.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/fatih/color/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Print with default helper functions\ncolor.Cyan(\"Prints text in cyan.\")\n\n// A newline will be appended automatically\ncolor.Blue(\"Prints %s in blue.\", \"text\")\n\n// These are using the default foreground colors\ncolor.Red(\"We have red\")\ncolor.Magenta(\"And many others ..\")\n```\n\n----------------------------------------\n\nTITLE: Importing an Existing IP Service into Terraform State\nDESCRIPTION: This snippet shows how to import an existing IP service into Terraform state using the service_name. It includes the import command and instructions for generating and applying the configuration.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/ip_service.md#2025-04-17_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nimport {\n  to = ovh_ip_service.ipblock\n  id = \"ip-xx.xx.xx.xx\"\n}\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform plan -generate-config-out=ipblock.tf\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for Version 0.1.0\nDESCRIPTION: Initial changelog entry for version 0.1.0 of the OVH Terraform provider, released June 21, 2017 as part of the Provider Splitout.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/CHANGELOG.md#2025-04-17_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.1.0 (June 21, 2017)\n\nNOTES:\n\n* Same functionality as that of Terraform 0.9.8. Repacked as part of [Provider Splitout]\n```\n\n----------------------------------------\n\nTITLE: Creating New Logger in Go\nDESCRIPTION: Shows how to create a new logger with custom name and log level using go-hclog.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/go-hclog/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nappLogger := hclog.New(&hclog.LoggerOptions{\n\tName:  \"my-app\",\n\tLevel: hclog.LevelFromString(\"DEBUG\"),\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Structural Elements in HCL\nDESCRIPTION: Specifies the syntax for structural elements in HCL, including configuration files, bodies, attributes, and blocks, using EBNF notation.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-17_snippet_2\n\nLANGUAGE: EBNF\nCODE:\n```\nConfigFile   = Body;\nBody         = (Attribute | Block | OneLineBlock)*;\nAttribute    = Identifier \"=\" Expression Newline;\nBlock        = Identifier (StringLit|Identifier)* \"{\" Newline Body \"}\" Newline;\nOneLineBlock = Identifier (StringLit|Identifier)* \"{\" (Identifier \"=\" Expression)? \"}\" Newline;\n```\n\n----------------------------------------\n\nTITLE: Defining Template For Directive Syntax in HCL\nDESCRIPTION: EBNF syntax definition for iteration template directives with identifier and expression evaluation.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-17_snippet_19\n\nLANGUAGE: ebnf\nCODE:\n```\nTemplateFor = (\n    (\"%{\" | \"%{~\") \"for\" Identifier (\",\" Identifier) \"in\" Expression (\"}\" | \"~}\")\n    Template\n    (\"%{\" | \"%{~\") \"endfor\" (\"}\" | \"~}\")\n);\n```\n\n----------------------------------------\n\nTITLE: Enabling Key Conversion in Basic/Manual Scaling Go App Engine\nDESCRIPTION: Code example showing how to enable datastore key conversion in basic or manual scaling App Engine applications. This needs to be implemented in the /_ah/start handler to enable key conversion for all handlers in the service.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/google.golang.org/appengine/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nhttp.HandleFunc(\"/_ah/start\", func(w http.ResponseWriter, r *http.Request) {\n    datastore.EnableKeyConversion(appengine.NewContext(r))\n})\n```\n\n----------------------------------------\n\nTITLE: Importing VRack OVH Cloud Connect Configuration\nDESCRIPTION: Bash command for importing existing OVH Cloud Connect and vRack attachment into Terraform state. Uses service names as unique identifiers.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/vrack_ovhcloudconnect.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform import ovh_vrack_ovhcloudconnect.myattach \"<service_name>/<OVH Cloud Connect service name>\"\n```\n\n----------------------------------------\n\nTITLE: Parsing Terraform Provider Address in Go\nDESCRIPTION: Demonstrates parsing a provider source address into a structured Provider object. The example shows parsing a standard provider address with namespace.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/terraform-registry-address/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npAddr, err := ParseProviderSource(\"hashicorp/aws\")\nif err != nil {\n\t// deal with error\n}\n\n// pAddr == Provider{\n//   Type:      \"aws\",\n//   Namespace: \"hashicorp\",\n//   Hostname:  DefaultProviderRegistryHost,\n// }\n```\n\n----------------------------------------\n\nTITLE: Terraform Plan and Apply Commands\nDESCRIPTION: Commands for generating and applying the imported network resource configuration.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_region_network.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform plan -generate-config-out=network.tf\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Bug Fixes Section\nDESCRIPTION: Markdown section listing bug fixes with PR references\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/CHANGELOG.md#2025-04-17_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\nBUG FIXES:\n\n* `r/dbaas_logs_output_graylog_stream`: Fix typo in `cold_storage_content` validation list.\n```\n\n----------------------------------------\n\nTITLE: Logging Info with Key/Value Pairs in Go\nDESCRIPTION: Demonstrates logging an info message with key/value pairs using go-hclog, including error handling.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/go-hclog/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ninput := \"5.5\"\n_, err := strconv.ParseInt(input, 10, 32)\nif err != nil {\n\tappLogger.Info(\"Invalid input for ParseInt\", \"input\", input, \"error\", err)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Template Interpolation Syntax in HCL\nDESCRIPTION: EBNF syntax definition for template interpolation sequences with optional strip markers.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-17_snippet_17\n\nLANGUAGE: ebnf\nCODE:\n```\nTemplateInterpolation = (\"${\" | \"${~\") Expression (\"}\" | \"~}\");\n```\n\n----------------------------------------\n\nTITLE: Retrieving M3DB Namespaces from OVH Cloud Project with Terraform\nDESCRIPTION: Demonstrates how to use the ovh_cloud_project_database_m3db_namespaces data source to retrieve namespace IDs from an M3DB cluster and output them. The example requires specifying the service_name (project ID) and cluster_id as inputs.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_database_m3db_namespaces.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_database_m3db_namespaces\" \"namespaces\" {\n  service_name  = \"XXX\"\n  cluster_id    = \"YYY\"\n}\n\noutput \"namespace_ids\" {\n  value = data.ovh_cloud_project_database_m3db_namespaces.namespaces.namespace_ids\n}\n```\n\n----------------------------------------\n\nTITLE: Local Color Control in Go\nDESCRIPTION: Examples of enabling/disabling colors for specific color definitions.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/fatih/color/README.md#2025-04-17_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nc := color.New(color.FgCyan)\nc.Println(\"Prints cyan text\")\n\nc.DisableColor()\nc.Println(\"This is printed without any color\")\n\nc.EnableColor()\nc.Println(\"This prints again cyan...\")\n```\n\n----------------------------------------\n\nTITLE: HCL Input for Custom Keyword Decoding\nDESCRIPTION: An example of HCL input that would be accepted by the custom keyword decoding specification.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/hcl/v2/ext/customdecode/README.md#2025-04-17_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nkeyword = foo\n```\n\n----------------------------------------\n\nTITLE: Importing Existing OVHcloud Managed Private Registry OIDC Configuration\nDESCRIPTION: This bash command demonstrates how to import an existing OIDC configuration for OVHcloud Managed Private Registry into Terraform state using the service name and registry ID.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_containerregistry_oidc.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform import ovh_cloud_project_containerregistry_oidc.my-oidc service_name/registry_id\n```\n\n----------------------------------------\n\nTITLE: Installing hc-install via Homebrew (macOS / Linux)\nDESCRIPTION: Command to install hc-install using the Homebrew package manager on macOS or Linux systems.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/hc-install/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nbrew install hashicorp/tap/hc-install\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Decoding Type in Go\nDESCRIPTION: This snippet demonstrates how to create a custom decoding type using a cty capsule type. It implements a 'keyword' type that decodes expressions as static keywords.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/hcl/v2/ext/customdecode/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nvar keywordType cty.Type\nkeywordType = cty.CapsuleWithOps(\"keyword\", reflect.TypeOf(\"\"), &cty.CapsuleOps{\n    ExtensionData: func(key interface{}) interface{} {\n        switch key {\n        case customdecode.CustomExpressionDecoder:\n            return customdecode.CustomExpressionDecoderFunc(\n                func(expr hcl.Expression, ctx *hcl.EvalContext) (cty.Value, hcl.Diagnostics) {\n                    var diags hcl.Diagnostics\n                    kw := hcl.ExprAsKeyword(expr)\n                    if kw == \"\" {\n                        diags = append(diags, &hcl.Diagnostic{\n                            Severity: hcl.DiagError,\n                            Summary:  \"Invalid keyword\",\n                            Detail:   \"A keyword is required\",\n                            Subject:  expr.Range().Ptr(),\n                        })\n                        return cty.UnkownVal(keywordType), diags\n                    }\n                    return cty.CapsuleVal(keywordType, &kw)\n                },\n            )\n        default:\n            return nil\n        }\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: System Call Entry Points in Assembly\nDESCRIPTION: Core system call dispatch entry point functions implemented in assembly. These functions handle system call dispatching with different argument counts and scheduling behavior.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/golang.org/x/sys/unix/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc Syscall(trap, a1, a2, a3 uintptr) (r1, r2, err uintptr)\nfunc Syscall6(trap, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2, err uintptr)\nfunc RawSyscall(trap, a1, a2, a3 uintptr) (r1, r2, err uintptr)\n```\n\n----------------------------------------\n\nTITLE: Installing Tagparser Library via Go Get\nDESCRIPTION: Command to install the tagparser library version 2 using Go's package manager.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/vmihailenco/tagparser/v2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/vmihailenco/tagparser/v2\n```\n\n----------------------------------------\n\nTITLE: Importing Existing M3DB Users in Terraform\nDESCRIPTION: This bash command shows how to import an existing OVHcloud Managed M3DB user into Terraform state. It requires the service name, cluster ID, and user ID concatenated with forward slashes.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_database_m3db_user.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform import ovh_cloud_project_database_m3db_user.my_user service_name/cluster_id/id\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON Fragment with Custom Start Position in Go\nDESCRIPTION: New function ParseWithStartPos allows parsing a JSON fragment by specifying a custom starting position. This is useful when the JSON bytes are part of a larger document.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/hcl/v2/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nParseWithStartPos(jsonBytes []byte, startPos hcl.Pos) (*hcl.File, hcl.Diagnostics)\n```\n\n----------------------------------------\n\nTITLE: Defining Test Helper with Testing Interface in Go\nDESCRIPTION: Example of defining a test helper function using the go-testing-interface library. Shows how to create a function that accepts the testing interface type.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/mitchellh/go-testing-interface/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/mitchellh/go-testing-interface\"\n\nfunc TestHelper(t testing.T) {\n    t.Fatal(\"I failed\")\n}\n```\n\n----------------------------------------\n\nTITLE: Querying IAM Actions for VPS Resource Type in OVH Terraform Provider\nDESCRIPTION: This snippet demonstrates how to use the ovh_iam_reference_actions data source to retrieve IAM actions associated with the 'vps' resource type in OVH cloud. It defines a data block that queries the actions, which can be used elsewhere in the Terraform configuration.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/iam_reference_actions.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_iam_reference_actions\" \"vps_actions\" {\n    resource_type = \"vps\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing HCL v1 and v2 Using Go Semantic Versioning\nDESCRIPTION: Example showing how to import both HCL v1 and v2 into the same Go program using semantic import versioning to avoid conflicts.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/hcl/v2/CHANGELOG.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    hcl1 \"github.com/hashicorp/hcl\"\n    hcl2 \"github.com/hashicorp/hcl/v2\"\n)\n```\n\n----------------------------------------\n\nTITLE: Installing go-isatty Using Go Get\nDESCRIPTION: This command installs the go-isatty library using the go get command. It fetches the library from the GitHub repository and installs it in the Go workspace.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/mattn/go-isatty/README.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ go get github.com/mattn/go-isatty\n```\n\n----------------------------------------\n\nTITLE: Retrieving Loadbalancer Log Subscriptions with Terraform OVH Provider\nDESCRIPTION: This example shows how to use the ovh_cloud_project_region_loadbalancer_log_subscriptions data source to retrieve information about log subscriptions for a managed loadbalancer in a specific region of an OVH cloud project.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/cloud_project_region_loadbalancer_log_subscriptions.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_region_loadbalancer_log_subscriptions\" \"subs\" {\n  service_name = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n  region_name = \"gggg\"\n  loadbalancer_id = \"aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Identifier Syntax in HCL\nDESCRIPTION: Specifies the syntax for identifiers in HCL using EBNF notation. Identifiers can contain Unicode letters, digits, and dashes, following specific Unicode character properties.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-17_snippet_0\n\nLANGUAGE: EBNF\nCODE:\n```\nIdentifier = ID_Start (ID_Continue | '-')*;\n```\n\n----------------------------------------\n\nTITLE: Installing OAuth2 Package for Go\nDESCRIPTION: This snippet shows how to install the OAuth2 package for Go using the go get command. It fetches the package from the golang.org/x/oauth2 repository.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/golang.org/x/oauth2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get golang.org/x/oauth2\n```\n\n----------------------------------------\n\nTITLE: Updating MessagePack Import Path in Go\nDESCRIPTION: This snippet demonstrates the updated import path for the MessagePack library in Go, moving from gopkg.in to GitHub.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/vmihailenco/msgpack/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nimport \"github.com/vmihailenco/msgpack\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Colors with Flags in Go\nDESCRIPTION: Example of programmatically disabling colors using command-line flags.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/fatih/color/README.md#2025-04-17_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nvar flagNoColor = flag.Bool(\"no-color\", false, \"Disable color output\")\n\nif *flagNoColor {\n\tcolor.NoColor = true // disables colorized output\n}\n```\n\n----------------------------------------\n\nTITLE: Using hc-install CLI to install Terraform\nDESCRIPTION: Example command demonstrating how to use the hc-install CLI to install a specific version of Terraform.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/hc-install/README.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nhc-install install -version 1.3.7 terraform\n```\n\n----------------------------------------\n\nTITLE: Implementing Arithmetic Operators in HCL\nDESCRIPTION: Basic arithmetic operations including addition, subtraction, multiplication, division, modulo, and negation operators.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-17_snippet_13\n\nLANGUAGE: txt\nCODE:\n```\na + b   sum        (addition)\na - b   difference (subtraction)\na * b   product    (multiplication)\na / b   quotient   (division)\na % b   remainder  (modulo)\n-a      negation\n```\n\n----------------------------------------\n\nTITLE: Retrieving VMware Cloud Director Backup Information with Terraform\nDESCRIPTION: Example showing how to retrieve information about a specific VMware Cloud Director Backup service using its backup ID. This data source allows you to access details about an existing backup service configuration.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/vmware_cloud_director_backup.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_vmware_cloud_director_backup\" \"backup\" {\n  backup_id = \"<VCD backup ID>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Integration with Existing Code in Go\nDESCRIPTION: Examples of using color in existing code with Set/Unset functions.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/fatih/color/README.md#2025-04-17_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// Use handy standard colors\ncolor.Set(color.FgYellow)\n\nfmt.Println(\"Existing text will now be in yellow\")\nfmt.Printf(\"This one %s\\n\", \"too\")\n\ncolor.Unset() // Don't forget to unset\n\n// You can mix up parameters\ncolor.Set(color.FgMagenta, color.Bold)\ndefer color.Unset() // Use it in your function\n\nfmt.Println(\"All text will now be bold magenta.\")\n```\n\n----------------------------------------\n\nTITLE: Installing Go Version Library\nDESCRIPTION: Command to install the go-version library using go get\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/go-version/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ go get github.com/hashicorp/go-version\n```\n\n----------------------------------------\n\nTITLE: Querying OVH Private Database Whitelist in Terraform\nDESCRIPTION: Example showing how to retrieve information about a whitelisted IP address in an OVH private database instance. The data source requires a service name and IP address as input parameters.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/data-sources/hosting_privatedatabase_whitelist.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_hosting_privatedatabase_whitelist\" \"whitelist\" {\n  service_name  = \"XXXXXX\"\n  ip            = \"XXXXXX\"\n}\n```\n\n----------------------------------------\n\nTITLE: Encoding and Decoding MessagePack Arrays in Go\nDESCRIPTION: This snippet shows the updated functions for encoding and decoding MessagePack arrays in Go, replacing the previous slice-specific functions.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/vmihailenco/msgpack/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\n// Encoding an array\nenc.EncodeArrayLen(len(myArray))\nfor _, item := range myArray {\n    enc.Encode(item)\n}\n\n// Decoding an array\nlen, err := dec.DecodeArrayLen()\nif err != nil {\n    return err\n}\nfor i := 0; i < len; i++ {\n    // Decode array elements\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Print Functions in Go\nDESCRIPTION: Creating and using custom print functions for convenience.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/fatih/color/README.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// Create a custom print function for convenience\nred := color.New(color.FgRed).PrintfFunc()\nred(\"Warning\")\nred(\"Error: %s\", err)\n\n// Mix up multiple attributes\nnotice := color.New(color.Bold, color.FgGreen).PrintlnFunc()\nnotice(\"Don't forget this...\")\n```\n\n----------------------------------------\n\nTITLE: Output of WrapString Function\nDESCRIPTION: This code block shows the expected output of the WrapString function when applied to the string 'foo bar baz' with a line length of 3. Each word is placed on a separate line due to the short line length.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/mitchellh/go-wordwrap/README.md#2025-04-17_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nfoo\nbar\nbaz\n```\n\n----------------------------------------\n\nTITLE: Version 0.29.0 Release Notes\nDESCRIPTION: Changelog entry for version 0.29.0 of the OVH Terraform Provider, released March 24, 2023. Documents improvements to various resources, bug fixes, and documentation updates.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.29.0 (March 24, 2023)\n\n💪 Improvements:\n\n* `r/ovh_domain_zone_record`: Validate zone_record TTL is >=60 ([#397](https://github.com/ovh/terraform-provider-ovh/pull/397))\n* `r/ovh_cloud_project_kube_iprestrictions`: Add acceptance tests for all Managed Kubernetes Service resources ([#387](https://github.com/ovh/terraform-provider-ovh/pull/387))\n* `r/ovh_cloud_project_kube_nodepool`: Add acceptance tests for all Managed Kubernetes Service resources ([#387](https://github.com/ovh/terraform-provider-ovh/pull/387))\n* `r/ovh_cloud_project_kube_oidc`: Add acceptance tests for all Managed Kubernetes Service resources ([#387](https://github.com/ovh/terraform-provider-ovh/pull/387))\n* `r/ovh_cloud_project_kube`: Add acceptance tests for all Managed Kubernetes Service resources ([#387](https://github.com/ovh/terraform-provider-ovh/pull/387))\n```\n\n----------------------------------------\n\nTITLE: Resetting Database User Password with Terraform in OVH Cloud Project\nDESCRIPTION: This snippet shows how to reset the password of previously created database users. It demonstrates different methods of triggering password resets using the 'password_reset' attribute, including datetime and MD5 hash approaches.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_database_user.md#2025-04-17_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_database\" \"db\" {\n  service_name  = \"XXXX\"\n  engine        = \"YYYY\"\n  id            = \"ZZZZ\"\n}\n\nresource \"ovh_cloud_project_database_user\" \"userDatetime\" {\n  service_name    = data.ovh_cloud_project_database.db.service_name\n  engine          = data.ovh_cloud_project_database.db.engine\n  cluster_id      = data.ovh_cloud_project_database.db.id\n  name            = \"alice\"\n  password_reset  = \"2024-01-02T11:00:00Z\"\n}\n\nresource \"ovh_cloud_project_database_user\" \"userMd5\" {\n  service_name    = data.ovh_cloud_project_database.db.service_name\n  engine          = data.ovh_cloud_project_database.db.engine\n  cluster_id      = data.ovh_cloud_project_database.db.id\n  name            = \"bob\"\n  password_reset  = \"md5(var.something)\"\n}\n\nresource \"ovh_cloud_project_database_user\" \"user\" {\n  service_name    = data.ovh_cloud_project_database.db.service_name\n  engine          = data.ovh_cloud_project_database.db.engine\n  cluster_id      = data.ovh_cloud_project_database.db.id\n  name            = \"johndoe\"\n  password_reset  = \"reset1\"\n}\n\noutput \"user_password\" {\n  value     = ovh_cloud_project_database_user.user.password\n  sensitive = true\n}\n```\n\n----------------------------------------\n\nTITLE: String Interpolation with Colors in Go\nDESCRIPTION: Examples of mixing colored and non-colored strings using Sprint functions.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/fatih/color/README.md#2025-04-17_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// Create SprintXxx functions to mix strings with other non-colorized strings:\nyellow := color.New(color.FgYellow).SprintFunc()\nred := color.New(color.FgRed).SprintFunc()\nfmt.Printf(\"This is a %s and this is %s.\\n\", yellow(\"warning\"), red(\"error\"))\n\ninfo := color.New(color.FgWhite, color.BgGreen).SprintFunc()\nfmt.Printf(\"This %s rocks!\\n\", info(\"package\"))\n\n// Use helper functions\nfmt.Println(\"This\", color.RedString(\"warning\"), \"should be not neglected.\")\nfmt.Printf(\"%v %v\\n\", color.GreenString(\"Info:\"), \"an important message.\")\n\n// Windows supported too! Just don't forget to change the output to color.Output\nfmt.Fprintf(color.Output, \"Windows support: %s\", color.GreenString(\"PASS\"))\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Provider Usage\nDESCRIPTION: Terraform configuration example using the locally built provider\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/README.md#2025-04-17_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n# Configure the OVHcloud Provider\nterraform {\n  required_providers {\n    ovh = {\n      source = \"terraform.local/local/ovh\"\n      version = \"0.0.1\"\n    }\n  }\n}\n\nprovider \"ovh\" {\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Legacy Index Operator Syntax in EBNF\nDESCRIPTION: Specifies the EBNF syntax for the legacy index operator in HCL, maintained for compatibility with HIL.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-17_snippet_8\n\nLANGUAGE: ebnf\nCODE:\n```\nLegacyIndex = '.' digit+\n```\n\n----------------------------------------\n\nTITLE: Installing Local Provider Binary\nDESCRIPTION: Commands to install the locally built provider into the Terraform plugin directory\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/README.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# Set your target environment (OS_architecture): linux_amd64, darwin_amd64...\n$ export ENV=\"linux_amd64\"\n$ make build\n$ mkdir -p ~/.terraform.d/plugins/terraform.local/local/ovh/0.0.1/$ENV\n$ cp $GOPATH/bin/terraform-provider-ovh ~/.terraform.d/plugins/terraform.local/local/ovh/0.0.1/$ENV/terraform-provider-ovh_v0.0.1\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeouts for M3DB Namespace Resource\nDESCRIPTION: This snippet shows how to configure custom timeouts for creating, updating, and deleting a M3DB namespace resource. It allows overriding the default timeout values for these operations.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_database_m3db_namespace.md#2025-04-17_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_cloud_project_database_m3db_namespace\" \"namespace\" {\n  # ...\n\n  timeouts {\n    create = \"1h\"\n    update = \"45m\"\n    delete = \"50s\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Changelog Entries for Versions 3.3 and 3.2\nDESCRIPTION: This snippet shows the changes in versions 3.3 and 3.2, including the restoration of an inline tag and changes to extension type decoding.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/vmihailenco/msgpack/v5/CHANGELOG.md#2025-04-17_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n## v3.3\n\n- `msgpack:\",inline\"` tag is restored to force inlining structs.\n\n## v3.2\n\n- Decoding extension types returns pointer to the value instead of the value. Fixes #153\n```\n\n----------------------------------------\n\nTITLE: hc-install CLI output for Terraform installation\nDESCRIPTION: Example output from the hc-install CLI when installing Terraform, showing the version and installation path.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/hc-install/README.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nhc-install: will install terraform@1.3.7\ninstalled terraform@1.3.7 to /current/working/dir/terraform\n```\n\n----------------------------------------\n\nTITLE: Filing Issues Checklist for Go Projects\nDESCRIPTION: A numbered list of questions to answer when filing an issue for a Go project. These questions help provide necessary context for the maintainers to understand and address the issue effectively.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/golang.org/x/oauth2/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1.  What version of Go are you using (`go version`)?\n2.  What operating system and processor architecture are you using?\n3.  What did you do?\n4.  What did you expect to see?\n5.  What did you see instead?\n```\n\n----------------------------------------\n\nTITLE: Installing Color Package with Go Get\nDESCRIPTION: Command to install the color package using Go's package manager.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/fatih/color/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/fatih/color\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeouts for OVHcloud Managed Database IP Restriction in Terraform\nDESCRIPTION: This snippet shows how to configure custom timeouts for creating, updating, and deleting an IP restriction on an OVHcloud Managed Database cluster using the ovh_cloud_project_database_ip_restriction resource.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_database_ip_restriction.md#2025-04-17_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_cloud_project_database_ip_restriction\" \"ip_restriction\" {\n  # ...\n\n  timeouts {\n    create = \"1h\"\n    update = \"45m\"\n    delete = \"50s\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Vet Script for Error Checking in Go\nDESCRIPTION: This command runs the vet.sh script to catch vet errors in the Go codebase.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/google.golang.org/grpc/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/vet.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring vRack Network for OVH IP Load Balancing in Terraform\nDESCRIPTION: This snippet demonstrates how to create a vRack network for an OVH IP Load Balancing service using Terraform. It includes setting up the IP Load Balancing data source, creating a vRack IP Load Balancing resource, configuring the vRack network, and setting up a TCP farm.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/iploadbalancing_vrack_network.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata ovh_iploadbalancing \"iplb\" {\n  service_name = \"loadbalancer-xxxxxxxxxxxxxxxxxx\"\n}\n\nresource \"ovh_vrack_iploadbalancing\" \"vip_lb\" {\n  service_name     = \"xxx\"\n  ip_loadbalancing = data.ovh_iploadbalancing.iplb.service_name\n}\n\nresource ovh_iploadbalancing_vrack_network \"network\" {\n  service_name = ovh_vrack_iploadbalancing.vip_lb.ip_loadbalancing\n  subnet       = \"10.0.0.0/16\"\n  vlan         = 1\n  nat_ip       = \"10.0.0.0/27\"\n  display_name = \"mynetwork\"\n}\n\nresource \"ovh_iploadbalancing_tcp_farm\" \"test_farm\" {\n  service_name     = ovh_iploadbalancing_vrack_network.network.service_name\n  display_name     = \"mytcpbackends\"\n  port             = 80\n  vrack_network_id = ovh_iploadbalancing_vrack_network.network.vrack_network_id\n  zone             = tolist(data.ovh_iploadbalancing.iplb.zone)[0]\n}\n```\n\n----------------------------------------\n\nTITLE: Version Sorting in Go\nDESCRIPTION: Example showing how to sort a collection of version strings using the go-version library's sorting functionality.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/go-version/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nversionsRaw := []string{\"1.1\", \"0.7.1\", \"1.4-beta\", \"1.4\", \"2\"}\nversions := make([]*version.Version, len(versionsRaw))\nfor i, raw := range versionsRaw {\n    v, _ := version.NewVersion(raw)\n    versions[i] = v\n}\n\n// After this, the versions are properly sorted\nsort.Sort(version.Collection(versions))\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeouts for PostgreSQL Connection Pool Resource\nDESCRIPTION: This snippet shows how to configure custom timeouts for the creation, update, and deletion of a PostgreSQL connection pool resource.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_database_postgresql_connection_pool.md#2025-04-17_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_cloud_project_database_postgresql_connection_pool\" \"user\" {\n  # ...\n\n  timeouts {\n    create = \"1h\"\n    update = \"45m\"\n    delete = \"50s\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Exact Error in Go Multierror\nDESCRIPTION: Demonstrates how to use the errors.Is function to check for the presence of an exact error value in a multierror.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/go-multierror/README.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// Assume err is a multierror value\nerr := somefunc()\nif errors.Is(err, os.ErrNotExist) {\n\t// err contains os.ErrNotExist\n}\n```\n\n----------------------------------------\n\nTITLE: Importing OVH Private Database User Grant\nDESCRIPTION: Shows the command syntax for importing existing database user grants into Terraform state. The import identifier combines service name, username, database name, and grant type.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/hosting_privatedatabase_user_grant.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ terraform import ovh_hosting_privatedatabase_user_grant.user service_name/user_name/database_name/grant\n```\n\n----------------------------------------\n\nTITLE: Accessing Error List in Go Multierror\nDESCRIPTION: Demonstrates how to use type switches to access the list of errors in a multierror.Error object.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/go-multierror/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nif err := something(); err != nil {\n\tif merr, ok := err.(*multierror.Error); ok {\n\t\t// Use merr.Errors\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: HCL Expression Examples\nDESCRIPTION: Examples of HCL expressions showing arithmetic operations, string interpolation, and function calls.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/hcl/v2/README.md#2025-04-17_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n# Arithmetic with literals and application-provided variables\nsum = 1 + addend\n\n# String interpolation and templates\nmessage = \"Hello, ${name}!\"\n\n# Application-provided functions\nshouty_message = upper(message)\n```\n\n----------------------------------------\n\nTITLE: Using msgpack Inline Tag in Go Structs\nDESCRIPTION: This snippet shows how to use the 'msgpack:,inline' tag in Go structs to force inlining of struct fields during MessagePack encoding.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/vmihailenco/msgpack/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\ntype MyStruct struct {\n    InlinedStruct AnotherStruct `msgpack:\",inline\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Existing OVH Domain Zone Configuration\nDESCRIPTION: Shows how to import an existing domain zone configuration into Terraform state and generate the corresponding configuration file.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/domain_zone.md#2025-04-17_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nimport {\n  to = ovh_domain_zone.zone\n  id = \"<zone name>\"\n}\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform plan -generate-config-out=zone.tf\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Custom Validation for HCL Decoding in Go\nDESCRIPTION: New Spec type ValidateSpec allows for custom validation of values during the decoding process, enabling more fine-grained control over acceptable inputs.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/hcl/v2/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nValidateSpec struct {\n  Wrapped Spec\n  Func    func(body hcl.Body, config *DecodeOpts) hcl.Diagnostics\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Checkpoint in Packer using Environment Variable\nDESCRIPTION: This snippet demonstrates how to disable Checkpoint calls in Packer using the CHECKPOINT_DISABLE environment variable. Setting this variable to 1 prevents Packer from making Checkpoint calls during execution.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/go-checkpoint/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nCHECKPOINT_DISABLE=1 packer build \n```\n\n----------------------------------------\n\nTITLE: Parsing JSON String as HCL Expression in Go\nDESCRIPTION: New function ParseExpression enables parsing a JSON string directly in expression mode, allowing for more flexible JSON parsing options.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/hcl/v2/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nParseExpression(src []byte) (hcl.Expression, hcl.Diagnostics)\n```\n\n----------------------------------------\n\nTITLE: Creating NAS-HA Partition Access with Terraform\nDESCRIPTION: Demonstrates how to configure access rights for a HA-NAS partition. This example shows setting up read/write access for a specific IP address with an associated description.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/dedicated_nasha_partition_access.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_dedicated_nasha_partition_access\" \"my_partition\" {\n  service_name    = \"zpool-12345\"\n  partition_name  = \"my-partition\"\n  ip              = \"123.123.123.123/32\"\n  type            = \"readwrite\"\n  acl_description = \"Description of the ACL\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Decoding Type in hcldec.AttrSpec\nDESCRIPTION: This snippet shows how to use the custom 'keyword' type as a type constraint in a hcldec.AttrSpec for attribute decoding.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/hcl/v2/ext/customdecode/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nkeywordSpec := &hcldec.AttrSpec{\n    Name: \"keyword\",\n    Type: keywordType,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Template Syntax in HCL\nDESCRIPTION: EBNF syntax definition for templates, including literals, interpolations, and directives.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-17_snippet_16\n\nLANGUAGE: ebnf\nCODE:\n```\nTemplate = (\n    TemplateLiteral |\n    TemplateInterpolation |\n    TemplateDirective\n)*\nTemplateDirective = TemplateIf | TemplateFor;\n```\n\n----------------------------------------\n\nTITLE: HCL Body Content Structure Example\nDESCRIPTION: Illustrates the hierarchical structure of HCL configuration with attributes and blocks. Shows how configuration files contain bodies that can have attributes and nested blocks with labels.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/hcl/v2/spec.md#2025-04-17_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# Example structure (pseudo-code)\nbody {\n  attribute_name = expression\n  \n  block_type \"label1\" \"label2\" {\n    nested_attribute = expression\n    nested_block {\n      # Further nesting\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Graylog Stream with Retention Configuration\nDESCRIPTION: Extended configuration that demonstrates how to create a Graylog stream with custom retention settings using a combination of data source and resource blocks.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/dbaas_logs_output_graylog_stream.md#2025-04-17_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_dbaas_logs_cluster_retention\" \"retention\" {\n  service_name = \"ldp-xx-xxxxx\"\n  cluster_id   = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  duration     = \"P14D\"\n}\n\nresource \"ovh_dbaas_logs_output_graylog_stream\" \"stream\" {\n  service_name = \"....\"\n  title        = \"my stream\"\n  description  = \"my graylog stream\"\n  retention_id = data.ovh_dbaas_logs_cluster_retention.retention.retention_id\n}\n```\n\n----------------------------------------\n\nTITLE: HCL Native Syntax Configuration Example\nDESCRIPTION: Example of HCL native syntax showing attribute and block definitions, including nested blocks and basic value assignments.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/hcl/v2/README.md#2025-04-17_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nio_mode = \"async\"\n\nservice \"http\" \"web_proxy\" {\n  listen_addr = \"127.0.0.1:8080\"\n  \n  process \"main\" {\n    command = [\"/usr/local/bin/awesome-app\", \"server\"]\n  }\n\n  process \"mgmt\" {\n    command = [\"/usr/local/bin/awesome-app\", \"mgmt\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Index Operator Syntax in EBNF\nDESCRIPTION: Specifies the EBNF syntax for the index operator in HCL, used to access elements in collections.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-17_snippet_7\n\nLANGUAGE: ebnf\nCODE:\n```\nIndex = \"[\" Expression \"]\";\n```\n\n----------------------------------------\n\nTITLE: HTTP Server Management with run.Group in Go\nDESCRIPTION: Shows how to manage a TCP listener and HTTP server using run.Group. Creates a network listener and adds it to the group with proper shutdown handling.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/oklog/run/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nln, _ := net.Listen(\"tcp\", \":8080\")\ng.Add(func() error {\n\treturn http.Serve(ln, nil)\n}, func(error) {\n\tln.Close()\n})\n```\n\n----------------------------------------\n\nTITLE: Using MessagePack Encoding in Go\nDESCRIPTION: This snippet demonstrates the usage of MessagePack encoding in Go, including changes to Encode, Decode, Marshal, and Unmarshal functions. It also mentions new functions for encoding specific integer types.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/vmihailenco/msgpack/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nEncode(arg)  // Now accepts single argument\nDecode(arg)  // Now accepts single argument\nMarshal(arg)  // Now accepts single argument\nUnmarshal(arg)  // Now accepts single argument\n\n// New multi-argument versions\nEncodeMulti(args...)\nDecodeMulti(args...)\n\n// New integer encoding functions\nEncodeInt8(val)\nEncodeInt16(val)\nEncodeInt32(val)\nEncodeInt64(val)\nEncodeUint8(val)\nEncodeUint16(val)\nEncodeUint32(val)\nEncodeUint64(val)\n\n// Preserving number types\nencoder := msgpack.NewEncoder()\nencoder.UseCompactEncoding = false  // Preserve original number type\n```\n\n----------------------------------------\n\nTITLE: Configuring IP Restrictions for OVH Managed Private Registry in Terraform\nDESCRIPTION: This snippet demonstrates how to apply IP restrictions to a container registry's artifact manager component. It retrieves registry information using a data source and then creates IP restrictions with a specific IP block and description.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_containerregistry_ip_restrictions_registry.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_containerregistry\" \"registry\" {\n  service_name = \"XXXXXX\"\n  registry_id  = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxx\"\n}\n\nresource \"ovh_cloud_project_containerregistry_ip_restrictions_registry\" \"my_registry_iprestrictions\" {\n  service_name = ovh_cloud_project_containerregistry.registry.service_name\n  registry_id  = ovh_cloud_project_containerregistry.registry.id\n\n  ip_restrictions = [\n    { \n      ip_block = \"xxx.xxx.xxx.xxx/xx\" \n      description = \"xxxxxxx\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Terraform Import Commands\nDESCRIPTION: CLI commands for importing DS records and generating configuration file.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/domain_ds_records.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform plan -generate-config-out=ds_records.tf\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Yamux Flag Field Values\nDESCRIPTION: Defines the supported flags for providing additional message context including SYN (0x1), ACK (0x2), FIN (0x4), and RST (0x8).\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/yamux/spec.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n* 0x1 SYN - Signals the start of a new stream. May be sent with a data or\n  window update message. Also sent with a ping to indicate outbound.\n\n* 0x2 ACK - Acknowledges the start of a new stream. May be sent with a data\n  or window update message. Also sent with a ping to indicate response.\n\n* 0x4 FIN - Performs a half-close of a stream. May be sent with a data\n  message or window update.\n\n* 0x8 RST - Reset a stream immediately. May be sent with a data or\n  window update message.\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 3\nDESCRIPTION: This snippet shows the major changes in version 3, including import path updates, decoding behavior changes, and various encoding/decoding modifications.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/vmihailenco/msgpack/v5/CHANGELOG.md#2025-04-17_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n## v3\n\n- gopkg.in is not supported any more. Update import path to github.com/vmihailenco/msgpack.\n- Msgpack maps are decoded into map[string]interface{} by default.\n- EncodeSliceLen is removed in favor of EncodeArrayLen. DecodeSliceLen is removed in favor of\n  DecodeArrayLen.\n- Embedded structs are automatically inlined where possible.\n- Time is encoded using extension as described in https://github.com/msgpack/msgpack/pull/209. Old\n  format is supported as well.\n- EncodeInt8/16/32/64 is replaced with EncodeInt. EncodeUint8/16/32/64 is replaced with EncodeUint.\n  There should be no performance differences.\n- DecodeInterface can now return int8/16/32 and uint8/16/32.\n- PeekCode returns codes.Code instead of byte.\n```\n\n----------------------------------------\n\nTITLE: JSON Representation of HCL Configuration\nDESCRIPTION: JSON equivalent of the HCL native syntax configuration, demonstrating how HCL structures are represented in JSON format.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/hcl/v2/README.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"io_mode\": \"async\",\n  \"service\": {\n    \"http\": {\n      \"web_proxy\": {\n        \"listen_addr\": \"127.0.0.1:8080\",\n        \"process\": {\n          \"main\": {\n            \"command\": [\"/usr/local/bin/awesome-app\", \"server\"]\n          },\n          \"mgmt\": {\n            \"command\": [\"/usr/local/bin/awesome-app\", \"mgmt\"]\n          },\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Yamux Session Termination Codes\nDESCRIPTION: Defines the error codes used when terminating a Yamux session via the Go Away message.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/yamux/spec.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n* 0x0 Normal termination\n* 0x1 Protocol error\n* 0x2 Internal error\n```\n\n----------------------------------------\n\nTITLE: OVH Terraform Provider Version History\nDESCRIPTION: Changelog entries covering multiple versions of the OVH Terraform Provider, including feature additions, bug fixes, and documentation updates.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.35.0 (November 7, 2023)\n\n⚙️ General:\n\n* Bump golang dependencies ([#480](https://github.com/ovh/terraform-provider-ovh/pull/480))\n\n🐜 Bug fixes:\n\n* `r/cloud_project_user_s3_credential`: A breaking change has been applied on the 11/06/2023 on the routes behind this ressource. In order to use it or if you have it in your state, **an upgrade to the v0.35.0 version is mandatory.** ([#492](https://github.com/ovh/terraform-provider-ovh/pull/492))\n* `d/cloud_project_user_s3_credential`: A breaking change has been applied on the 11/06/2023 on the routes behind this data source. In order to use it or if you have it in your state, **an upgrade to the v0.35.0 version is mandatory.** ([#492](https://github.com/ovh/terraform-provider-ovh/pull/492))\n* `r/cloud_project_user`: Add AI training read role ([#475](https://github.com/ovh/terraform-provider-ovh/pull/475))\n\n📚 Documentation:\n\n* `examples/kube-nodepool-deployment`: Add an example with Kube, NodePool and an app ([#468](https://github.com/ovh/terraform-provider-ovh/pull/468))\n* `d/dedicated_server_boots`: Update documentation page ([#473](https://github.com/ovh/terraform-provider-ovh/pull/473))\n* `r/me_ssh_key`: Update documentation page ([#467](https://github.com/ovh/terraform-provider-ovh/pull/467))\n```\n\n----------------------------------------\n\nTITLE: Installing copystructure Go Library via go get\nDESCRIPTION: This command installs the copystructure library using the standard Go package manager. It fetches the package from the GitHub repository and adds it to your Go workspace.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/mitchellh/copystructure/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ go get github.com/mitchellh/copystructure\n```\n\n----------------------------------------\n\nTITLE: Version 0.28.0 Release Notes\nDESCRIPTION: Changelog entry for version 0.28.0 of the OVH Terraform Provider, released February 22, 2023. Contains deprecation notices, new features, improvements and documentation updates.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.28.0 (February 22, 2023)\n\n⚠️ Deprecation:\n\n* `r/cloud_project_kube`: TypeSet `customization.apiserver` is now deprecated in favor of `customization_apiserver` ([#381](https://github.com/ovh/terraform-provider-ovh/pull/381))\n* `d/cloud_project_kube`: TypeSet `customization.apiserver` is now deprecated in favor of `customization_apiserver` ([#381](https://github.com/ovh/terraform-provider-ovh/pull/381))\n```\n\n----------------------------------------\n\nTITLE: Setting up gRPC with Go Modules\nDESCRIPTION: This shell script shows how to use Go modules to set up gRPC when access to google.golang.org is restricted. It uses the 'replace' feature to create an alias for the gRPC package hosted on GitHub.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/google.golang.org/grpc/README.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngo mod edit -replace=google.golang.org/grpc=github.com/grpc/grpc-go@latest\ngo mod tidy\ngo mod vendor\ngo build -mod=vendor\n```\n\n----------------------------------------\n\nTITLE: Creating Logger with Fixed Key/Value Pairs in Go\nDESCRIPTION: Demonstrates creating a logger with fixed key/value pairs that will be included in all log messages.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/go-hclog/README.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nrequestID := \"5fb446b6-6eba-821d-df1b-cd7501b6a363\"\nrequestLogger := subsystemLogger.With(\"request\", requestID)\nrequestLogger.Info(\"we are transporting a request\")\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry - Version 1.5.0\nDESCRIPTION: Changelog entry for version 1.5.0 documenting new options for field decoding and bug fixes.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/mitchellh/mapstructure/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.5.0\n\n* New option `IgnoreUntaggedFields` to ignore decoding to any fields\n  without `mapstructure` (or the configured tag name) set [GH-277]\n* New option `ErrorUnset` which makes it an error if any fields\n  in a target struct are not set by the decoding process. [GH-225]\n* New function `OrComposeDecodeHookFunc` to help compose decode hooks. [GH-240]\n* Decoding to slice from array no longer crashes [GH-265]\n* Decode nested struct pointers to map [GH-271]\n* Fix issue where `,squash` was ignored if `Squash` option was set. [GH-280]\n* Fix issue where fields with `,omitempty` would sometimes decode\n  into a map with an empty string key [GH-281]\n```\n\n----------------------------------------\n\nTITLE: Documentation Updates Block\nDESCRIPTION: Markdown section documenting updated/added documentation pages\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/CHANGELOG.md#2025-04-17_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n📚 Documentation:\n\n* `r/ovh_cloud_project_database`: Add documentation page\n* `r/ovh_cloud_project_kube_nodepool`: Add template information\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 5.4.0\nDESCRIPTION: This snippet shows the changelog entry for version 5.4.0, which appears to be a new feature release without specific details.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/vmihailenco/msgpack/v5/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# [5.4.0](https://github.com/vmihailenco/msgpack/compare/v5.3.6...v5.4.0) (2023-10-01)\n```\n\n----------------------------------------\n\nTITLE: Configuring gRPC-Go Logging\nDESCRIPTION: This console command demonstrates how to turn on logging for gRPC-Go by setting environment variables. It sets the verbosity level to maximum and the severity level to info.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/google.golang.org/grpc/README.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ export GRPC_GO_LOG_VERBOSITY_LEVEL=99\n$ export GRPC_GO_LOG_SEVERITY_LEVEL=info\n```\n\n----------------------------------------\n\nTITLE: Using Test Helper at Runtime in Go\nDESCRIPTION: Example demonstrating how to use the test helper in runtime code using the RuntimeT implementation.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/mitchellh/go-testing-interface/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/mitchellh/go-testing-interface\"\n\nfunc main() {\n    TestHelper(&testing.RuntimeT{})\n}\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 5.4.1\nDESCRIPTION: This snippet shows the changelog entry for version 5.4.1, which includes a bug fix for a reflection issue.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/vmihailenco/msgpack/v5/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [5.4.1](https://github.com/vmihailenco/msgpack/compare/v5.4.0...v5.4.1) (2023-10-26)\n\n\n### Bug Fixes\n\n* **reflect:** not assignable to type ([edeaedd](https://github.com/vmihailenco/msgpack/commit/edeaeddb2d51868df8c6ff2d8a218b527aeaf5fd))\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeouts for Kafka Topic Resource\nDESCRIPTION: Example showing how to customize create and delete operation timeouts for an OVH Cloud Project Database Kafka topic resource. This allows for extending the default timeout periods for operations that might take longer to complete.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_database_kafka_topic.md#2025-04-17_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_cloud_project_database_kafka_topic\" \"topic\" {\n  # ...\n\n  timeouts {\n    create = \"1h\"\n    delete = \"45m\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Version Entry for v1.6.0\nDESCRIPTION: Major version release with support for gRPC broker multiplexing and various dependency updates\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/go-plugin/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## v1.6.0\n\nCHANGES:\n\n* plugin: Plugins written in other languages can optionally start to advertise whether they support gRPC broker multiplexing.\n  If the environment variable `PLUGIN_MULTIPLEX_GRPC` is set, it is safe to include a seventh field containing a boolean\n  value in the `|`-separated protocol negotiation line.\n\nENHANCEMENTS:\n\n* Support muxing gRPC broker connections over a single listener [[GH-288](https://github.com/hashicorp/go-plugin/pull/288)]\n* client: Configurable buffer size for reading plugin log lines [[GH-265](https://github.com/hashicorp/go-plugin/pull/265)]\n* Use `buf` for proto generation [[GH-286](https://github.com/hashicorp/go-plugin/pull/286)]\n* deps: bump golang.org/x/net to v0.17.0 [[GH-285](https://github.com/hashicorp/go-plugin/pull/285)]\n* deps: bump golang.org/x/sys to v0.13.0 [[GH-285](https://github.com/hashicorp/go-plugin/pull/285)]\n* deps: bump golang.org/x/text to v0.13.0 [[GH-285](https://github.com/hashicorp/go-plugin/pull/285)]\n```\n\n----------------------------------------\n\nTITLE: Installing Mapstructure Go Library\nDESCRIPTION: This snippet shows how to install the mapstructure library using the standard go get command.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/mitchellh/mapstructure/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ go get github.com/mitchellh/mapstructure\n```\n\n----------------------------------------\n\nTITLE: Using Test Helper in Real Tests in Go\nDESCRIPTION: Example showing how to use the test helper in actual Go tests with the standard testing package.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/mitchellh/go-testing-interface/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport \"testing\"\n\nfunc TestThing(t *testing.T) {\n    TestHelper(t)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Rancher Service in OVH Public Cloud with Terraform\nDESCRIPTION: This snippet demonstrates how to create a Rancher service in an OVH public cloud project using Terraform. It defines the resource and outputs the Rancher URL.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_rancher.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_cloud_project_rancher\" \"rancher\" {\n  project_id = \"<public cloud project ID>\"\n  target_spec = {\n    name = \"MyRancher\"\n    plan = \"STANDARD\"\n  }\n}\n\noutput \"rancher_url\" {\n  value = ovh_cloud_project_rancher.rancher.current_state.url\n}\n```\n\n----------------------------------------\n\nTITLE: Version Entry for v1.6.2\nDESCRIPTION: Changelog entry documenting support for gRPC dial options and bug fixes for plugin process handling\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/go-plugin/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## v1.6.2\n\nENHANCEMENTS:\n\n* Added support for gRPC dial options to the `Dial` API [[GH-257](https://github.com/hashicorp/go-plugin/pull/257)]\n\nBUGS:\n\n* Fixed a bug where reattaching to a plugin that exits could kill an unrelated process [[GH-320](https://github.com/hashicorp/go-plugin/pull/320)]\n```\n\n----------------------------------------\n\nTITLE: Basic Plugin Implementation in Go\nDESCRIPTION: Code snippets are referenced but not directly shown in the documentation. The text describes implementing plugins via Go interfaces and RPC/gRPC communication, but does not contain actual code blocks.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/go-plugin/README.md#2025-04-17_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Parsing Terraform Module Source in Go\nDESCRIPTION: Shows how to parse a module source address including submodule path into a structured Module object.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/terraform-registry-address/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmAddr, err := ParseModuleSource(\"hashicorp/consul/aws//modules/consul-cluster\")\nif err != nil {\n\t// deal with error\n}\n\n// mAddr == Module{\n//   Package: ModulePackage{\n//     Host:         DefaultProviderRegistryHost,\n//     Namespace:    \"hashicorp\",\n//     Name:         \"consul\",\n//     TargetSystem: \"aws\",\n//   },\n//   Subdir: \"modules/consul-cluster\",\n// },\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 5.3.6\nDESCRIPTION: This snippet shows the changelog entry for version 5.3.6, which includes new features related to time parsing, empty struct handling, and sorted keys for map[string]bool.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/vmihailenco/msgpack/v5/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## [5.3.6](https://github.com/vmihailenco/msgpack/compare/v5.3.5...v5.3.6) (2023-10-01)\n\n\n### Features\n\n* allow overwriting time.Time parsing from extID 13 (for NodeJS Date) ([9a6b73b](https://github.com/vmihailenco/msgpack/commit/9a6b73b3588fd962d568715f4375e24b089f7066))\n* apply omitEmptyFlag to empty structs ([e5f8d03](https://github.com/vmihailenco/msgpack/commit/e5f8d03c0a1dd9cc571d648cd610305139078de5))\n* support sorted keys for map[string]bool ([690c1fa](https://github.com/vmihailenco/msgpack/commit/690c1fab9814fab4842295ea986111f49850d9a4))\n```\n\n----------------------------------------\n\nTITLE: Mapping Admin User with Default Roles\nDESCRIPTION: Configuration to map the admin@admin user with specific administrative roles in MongoDB.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_database_mongodb_user.md#2025-04-17_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"ovh_cloud_project_database\" \"mongodb\" {\n  service_name  = \"XXX\"\n  engine        = \"mongodb\"\n  id            = \"ZZZ\"\n}\n\nresource \"ovh_cloud_project_database_mongodb_user\" \"user\" {\n  service_name  = data.ovh_cloud_project_database.mongodb.service_name\n  cluster_id    = data.ovh_cloud_project_database.mongodb.id\n  name          = \"admin\"\n  roles         = [\"clusterMonitor@admin\", \"readWriteAnyDatabase@admin\",\"userAdminAnyDatabase@admin\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing MessagePack Library with Go Modules\nDESCRIPTION: Instructions for initializing a Go module and installing the MessagePack library using Go modules. This ensures compatibility with the latest Go versions and proper versioning.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/vmihailenco/msgpack/v5/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo mod init github.com/my/repo\n```\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/vmihailenco/msgpack/v5\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 5\nDESCRIPTION: This snippet shows the major changes in version 5, including new features, renamed functions, and removed functionality.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/vmihailenco/msgpack/v5/CHANGELOG.md#2025-04-17_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## v5\n\n### Added\n\n- `DecodeMap` is split into `DecodeMap`, `DecodeTypedMap`, and `DecodeUntypedMap`.\n- New msgpack extensions API.\n\n### Changed\n\n- `Reset*` functions also reset flags.\n- `SetMapDecodeFunc` is renamed to `SetMapDecoder`.\n- `StructAsArray` is renamed to `UseArrayEncodedStructs`.\n- `SortMapKeys` is renamed to `SetSortMapKeys`.\n\n### Removed\n\n- `UseJSONTag` is removed. Use `SetCustomStructTag(\"json\")` instead.\n```\n\n----------------------------------------\n\nTITLE: Running Go Tests with Multiple CPUs and Timeout\nDESCRIPTION: This command runs Go tests using 1 and 4 CPUs with a 7-minute timeout for all packages.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/google.golang.org/grpc/CONTRIBUTING.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo test -cpu 1,4 -timeout 7m ./...\n```\n\n----------------------------------------\n\nTITLE: Importing gRPC in Go\nDESCRIPTION: This snippet demonstrates how to import the gRPC package in a Go project. After adding this import, running go build, go run, or go test will automatically fetch the necessary dependencies.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/google.golang.org/grpc/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"google.golang.org/grpc\"\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 4\nDESCRIPTION: This snippet shows the major changes in version 4, including changes to encoding/decoding functions and preservation of number types.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/vmihailenco/msgpack/v5/CHANGELOG.md#2025-04-17_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n## v4\n\n- Encode, Decode, Marshal, and Unmarshal are changed to accept single argument. EncodeMulti and\n  DecodeMulti are added as replacement.\n- Added EncodeInt8/16/32/64 and EncodeUint8/16/32/64.\n- Encoder changed to preserve type of numbers instead of chosing most compact encoding. The old\n  behavior can be achieved with Encoder.UseCompactEncoding.\n```\n\n----------------------------------------\n\nTITLE: Creating OVH Private Database Resource in Terraform\nDESCRIPTION: Creates a new database on an OVH private cloud database service. Requires service_name for the private database instance and database_name for the new database to be created.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/hosting_privatedatabase_database.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"ovh_hosting_privatedatabase_database\" \"database\" {\n  service_name  = \"XXXXXX\"\n  database_name = \"XXXXXX\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Existing MongoDB Users\nDESCRIPTION: Command to import existing MongoDB users into Terraform state using service name, cluster ID, and user ID.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/docs/resources/cloud_project_database_mongodb_user.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform import ovh_cloud_project_database_mongodb_user.my_user service_name/cluster_id/id\n```\n\n----------------------------------------\n\nTITLE: Marshaling and Unmarshaling with MessagePack in Go\nDESCRIPTION: A quickstart example demonstrating how to use the MessagePack library to marshal a struct into MessagePack format and then unmarshal it back into a Go struct. This showcases the basic usage of the library for encoding and decoding data.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/vmihailenco/msgpack/v5/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/vmihailenco/msgpack/v5\"\n\nfunc ExampleMarshal() {\n    type Item struct {\n        Foo string\n    }\n\n    b, err := msgpack.Marshal(&Item{Foo: \"bar\"})\n    if err != nil {\n        panic(err)\n    }\n\n    var item Item\n    err = msgpack.Unmarshal(b, &item)\n    if err != nil {\n        panic(err)\n    }\n    fmt.Println(item.Foo)\n    // Output: bar\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Levenshtein Package in Go\nDESCRIPTION: Command to install the Levenshtein distance package using Go's package manager. This snippet shows how to add the package to a Go project.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/agext/levenshtein/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/agext/levenshtein\n```\n\n----------------------------------------\n\nTITLE: Marshaling and Unmarshaling Structs with MessagePack in Go\nDESCRIPTION: This example demonstrates how to use the MessagePack library to marshal a struct into a byte slice and then unmarshal it back into a struct. It uses a simple Item struct with a single string field.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/vmihailenco/msgpack/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc ExampleMarshal() {\n\ttype Item struct {\n\t\tFoo string\n\t}\n\n\tb, err := msgpack.Marshal(&Item{Foo: \"bar\"})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tvar item Item\n\terr = msgpack.Unmarshal(b, &item)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(item.Foo)\n\t// Output: bar\n}\n```\n\n----------------------------------------\n\nTITLE: Running AppEngine Tests\nDESCRIPTION: Command to run tests for the AppEngine package with verbose output\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/google.golang.org/appengine/CONTRIBUTING.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo test -v google.golang.org/appengine/...\n```\n\n----------------------------------------\n\nTITLE: Registering gRPC Server Reflection in Go\nDESCRIPTION: This snippet demonstrates how to register the reflection service on a gRPC server in Go. It imports the necessary reflection package, creates a new gRPC server, registers a custom service, and then registers the reflection service before serving.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/google.golang.org/grpc/reflection/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"google.golang.org/grpc/reflection\"\n\ns := grpc.NewServer()\npb.RegisterYourOwnServer(s, &server{})\n\n// Register reflection service on gRPC server.\nreflection.Register(s)\n\ns.Serve(lis)\n```\n\n----------------------------------------\n\nTITLE: Running Go Tests in Race Mode with Multiple CPUs and Timeout\nDESCRIPTION: This command runs Go tests in race mode using 1 and 4 CPUs with a 7-minute timeout for all packages.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/google.golang.org/grpc/CONTRIBUTING.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo test -race -cpu 1,4 -timeout 7m ./...\n```\n\n----------------------------------------\n\nTITLE: Release Notes Format\nDESCRIPTION: Markdown formatted release notes showing version numbering, date, and categorized changes.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.19.0 (July 28, 2022)\n\n🎉 Features:\n\n* New resource: `r/ovh_cloud_project_database`\n* New resource: `r/ovh_cloud_project_kube_oidc`\n```\n\n----------------------------------------\n\nTITLE: Integrating hclog with Standard Library Logger in Go\nDESCRIPTION: Demonstrates how to wrap an hclog.Logger to use it with the standard library's log.Logger interface.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/go-hclog/README.md#2025-04-17_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nstdLogger := appLogger.StandardLogger(&hclog.StandardLoggerOptions{\n\tInferLevels: true,\n})\n// Printf() is provided by stdlib log.Logger interface, not hclog.Logger\nstdLogger.Printf(\"[DEBUG] %+v\", stdLogger)\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for Version 0.3.0\nDESCRIPTION: Changelog entry detailing deprecations, new features, improvements and bug fixes for version 0.3.0 of the OVH Terraform provider, released July 11, 2018.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/CHANGELOG.md#2025-04-17_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.3.0 (July 11, 2018)\n\nDEPRECATIONS / NOTES:\n\nResources and datasources names now reflects the OVH API endpoints. As such,\nresources & datasources that doesn't comply are now deprecated and will be removed\nin next release.\n\n* data-source/ovh_publiccloud_region: Deprecated in favor of data-source/ovh_cloud_region\n* data-source/ovh_publiccloud_regions: Deprecated in favor of data-source/ovh_cloud_regions\n* resource/ovh_publiccloud_private_network: Deprecated in favor of resource/ovh_cloud_network_private\n* resource/ovh_publiccloud_private_network_subnet: Deprecated in favor of resource/ovh_cloud_network_private_subnet\n* resource/ovh_publiccloud_user: Deprecated in favor of resource/ovh_cloud_user\n* resource/ovh_vrack_publiccloud_attachment: Deprecated in favor of resource/ovh_vrack_cloudproject\n```\n\n----------------------------------------\n\nTITLE: Defining For Expression Syntax in EBNF\nDESCRIPTION: Specifies the Extended Backus-Naur Form (EBNF) syntax for for expressions in HCL, including both tuple and object forms.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-17_snippet_6\n\nLANGUAGE: ebnf\nCODE:\n```\nForExpr = forTupleExpr | forObjectExpr;\nforTupleExpr = \"[\" forIntro Expression forCond? \"]\";\nforObjectExpr = \"{\" forIntro Expression \"=>\" Expression \"...\"? forCond? \"}\";\nforIntro = \"for\" Identifier (\",\" Identifier)? \"in\" Expression \":\";\nforCond = \"if\" Expression;\n```\n\n----------------------------------------\n\nTITLE: Custom Fprint Functions in Go\nDESCRIPTION: Creating and using custom formatted print functions with writers.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/fatih/color/README.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nblue := color.New(color.FgBlue).FprintfFunc()\nblue(myWriter, \"important notice: %s\", stars)\n\n// Mix up with multiple attributes\nsuccess := color.New(color.Bold, color.FgGreen).FprintlnFunc()\nsuccess(myWriter, \"Don't forget this...\")\n```\n\n----------------------------------------\n\nTITLE: Custom Writer Output in Go\nDESCRIPTION: Examples of using custom io.Writer outputs with color formatting.\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/github.com/fatih/color/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Use your own io.Writer output\ncolor.New(color.FgBlue).Fprintln(myWriter, \"blue color!\")\n\nblue := color.New(color.FgBlue)\nblue.Fprint(writer, \"This will print text in blue.\")\n```\n\n----------------------------------------\n\nTITLE: Building OVH Provider\nDESCRIPTION: Commands to enter the provider directory and build it\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/README.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ cd $GOPATH/src/github.com/ovh/terraform-provider-ovh\n$ make build\n```\n\n----------------------------------------\n\nTITLE: Installing Go Package for AppEngine\nDESCRIPTION: Command to get the AppEngine package using go get\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/google.golang.org/appengine/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get -d google.golang.org/appengine\n```\n\n----------------------------------------\n\nTITLE: Setting Git Remote Fork\nDESCRIPTION: Git command to add a fork remote to the repository\nSOURCE: https://github.com/ovh/terraform-provider-ovh/blob/master/vendor/google.golang.org/appengine/CONTRIBUTING.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add fork git@github.com:GITHUB_USERNAME/appengine.git\n```"
  }
]