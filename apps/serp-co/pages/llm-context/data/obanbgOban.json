[
  {
    "owner": "oban-bg",
    "repo": "oban",
    "content": "TITLE: Configuring Oban with Periodic Jobs in Elixir\nDESCRIPTION: This snippet demonstrates how to set up Oban configuration with periodic jobs using the Cron plugin. It includes examples of various cron expressions and job configurations, showcasing different scheduling patterns and job options.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/learning/periodic_jobs.md#2025-04-17_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\nconfig :my_app, Oban,\n  repo: MyApp.Repo,\n  plugins: [\n    {Oban.Plugins.Cron,\n     crontab: [\n       {\"* * * * *\", MyApp.MinuteWorker},\n       {\"0 * * * *\", MyApp.HourlyWorker, args: %{custom: \"arg\"}},\n       {\"0 0 * * *\", MyApp.DailyWorker, max_attempts: 1},\n       {\"0 12 * * MON\", MyApp.MondayWorker, queue: :scheduled, tags: [\"mondays\"]},\n       {\"@daily\", MyApp.AnotherDailyWorker}\n     ]}\n  ]\n```\n\n----------------------------------------\n\nTITLE: Implementing a Recursive Timezone Worker in Elixir with Oban\nDESCRIPTION: This code demonstrates a TimezoneWorker module that uses recursion to backfill timezone data for users. The worker makes external requests to determine user timezones and includes logic to process one user at a time with a delay between requests, handling rate limits and resuming after failures.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/recipes/recursive-jobs.md#2025-04-17_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyApp.Workers.TimezoneWorker do\n  use Oban.Worker\n\n  import Ecto.Query\n\n  alias MyApp.{Repo, User}\n\n  @backfill_delay 1\n\n  @impl true\n  def perform(%{args: %{\"id\" => id, \"backfill\" => true}}) do\n    with :ok <- perform(%{args: %{\"id\" => id}}) do\n      case fetch_next(id) do\n        next_id when is_integer(next_id) ->\n          %{id: next_id, backfill: true}\n          |> new(schedule_in: @backfill_delay)\n          |> Oban.insert()\n\n        nil ->\n          :ok\n      end\n    end\n  end\n\n  def perform(%{args: %{\"id\" => id}}) do\n    update_timezone(id)\n  end\n\n  defp fetch_next(current_id) do\n    User\n    |> where([u], is_nil(u.timezone))\n    |> where([u], u.id > ^current_id)\n    |> order_by(asc: :id)\n    |> limit(1)\n    |> select([u], u.id)\n    |> Repo.one()\n  end\n\n  defp update_timezone(_id), do: Enum.random([:ok, {:error, :reason}])\nend\n```\n\n----------------------------------------\n\nTITLE: Installing Oban with Igniter\nDESCRIPTION: This bash command uses Igniter to install and configure Oban in a single step. It adds Oban to the project dependencies and runs the installer.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/introduction/installation.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmix igniter.install oban\n```\n\n----------------------------------------\n\nTITLE: Defining an Oban Worker for Processing Jobs\nDESCRIPTION: This snippet demonstrates how to define a worker module that processes jobs from the mailers queue. The worker handles email delivery jobs using the Oban.Worker module.\nSOURCE: https://github.com/oban-bg/oban/blob/main/README.md#2025-04-17_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyApp.MailerWorker do\n  use Oban.Worker, queue: :mailers\n\n  @impl Oban.Worker\n  def perform(%Oban.Job{args: %{\"email\" => email} = _args}) do\n    _ = Email.deliver(email)\n    :ok\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Installing Oban using Mix Task in Bash\nDESCRIPTION: Shows how to use the new 'oban.install' mix task to install and configure Oban in a new application. This task automatically deduces the correct engine and notifier based on the database adapter.\nSOURCE: https://github.com/oban-bg/oban/blob/main/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmix igniter.install oban\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum Retry Attempts in Oban Worker\nDESCRIPTION: Example showing how to limit job retries by setting max_attempts at the worker level. This configuration will discard jobs after three failed attempts.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/learning/error_handling.md#2025-04-17_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\nuse Oban.Worker, queue: :limited, max_attempts: 3\n```\n\n----------------------------------------\n\nTITLE: Enqueueing a Job with Oban\nDESCRIPTION: This snippet shows how to create and enqueue a new job for processing. It creates a job with email data, converts it to an Oban job using a worker, and inserts it into the queue.\nSOURCE: https://github.com/oban-bg/oban/blob/main/README.md#2025-04-17_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\n%{email: %{to: \"foo@example.com\", body: \"Hello from Oban!\"}}\n|> MyApp.MailerWorker.new()\n|> Oban.insert()\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Oban Error Reporter for Sentry\nDESCRIPTION: Defines a custom module that attaches to Oban's telemetry exception events and forwards them to Sentry with job metadata. This allows tracking job failures in an external error monitoring service.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/introduction/ready_for_production.md#2025-04-17_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyApp.ObanReporter do\n  def attach do\n    :telemetry.attach(\"oban-errors\", [:oban, :job, :exception], &__MODULE__.handle_event/4, [])\n  end\n\n  def handle_event([:oban, :job, :exception], measure, meta, _) do\n    extra =\n      meta.job\n      |> Map.take([:id, :args, :meta, :queue, :worker])\n      |> Map.merge(measure)\n\n    Sentry.capture_exception(meta.reason, stacktrace: meta.stacktrace, extra: extra)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Scheduling Oban Job with Relative Delay in Elixir\nDESCRIPTION: Demonstrates how to schedule an Oban job to execute after a specified delay in seconds. This pattern is useful for implementing delayed notifications or retry mechanisms.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/learning/scheduling_jobs.md#2025-04-17_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\n%{id: 1}\n|> MyApp.SomeWorker.new(schedule_in: _seconds = 5)\n|> Oban.insert()\n```\n\n----------------------------------------\n\nTITLE: Scheduling Oban Job at Specific Time in Elixir\nDESCRIPTION: Shows how to schedule an Oban job to run at a specific UTC timestamp. This approach is ideal for time-sensitive operations like scheduled notifications or periodic tasks.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/learning/scheduling_jobs.md#2025-04-17_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\n%{id: 1}\n|> MyApp.SomeWorker.new(scheduled_at: ~U[2020-12-25 19:00:00Z])\n|> Oban.insert()\n```\n\n----------------------------------------\n\nTITLE: Implementing Honeybadger Error Reporting for Oban Jobs\nDESCRIPTION: Example implementation of a telemetry event handler that reports Oban job failures to Honeybadger. The module attaches to Oban's exception events and forwards error details to Honeybadger's notification system.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/learning/error_handling.md#2025-04-17_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyApp.ErrorReporter do\n  def attach do\n    :telemetry.attach(\n      \"oban-errors\",\n      [:oban, :job, :exception],\n      &__MODULE__.handle_event/4,\n      []\n    )\n  end\n\n  def handle_event([:oban, :job, :exception], measure, meta, _) do\n    Honeybadger.notify(meta.reason, stacktrace: meta.stacktrace)\n  end\nend\n\n# Attach it with:\nMyApp.ErrorReporter.attach()\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Queues in Oban with Elixir\nDESCRIPTION: Basic configuration for Oban queues with different concurrency limits. This defines four queues (default, mailers, events, and media) with their respective concurrent job limits ranging from 5 to 50.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/learning/defining_queues.md#2025-04-17_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\nconfig :my_app, Oban,\n  queues: [default: 10, mailers: 20, events: 50, media: 5],\n  repo: MyApp.Repo\n```\n\n----------------------------------------\n\nTITLE: Configuring Oban with Pruner and Reindexer Plugins in Elixir\nDESCRIPTION: This code snippet shows how to configure Oban with both the Pruner and Reindexer plugins. The Reindexer plugin is used for maintaining index health by periodically rebuilding indexes concurrently to ensure optimal performance.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/learning/operational_maintenance.md#2025-04-17_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\nconfig :my_app, Oban,\n  plugins: [Oban.Plugins.Pruner, Oban.Plugins.Reindexer],\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Oban Plugin with GenServer\nDESCRIPTION: This example demonstrates a basic Oban plugin called Breakdown that periodically queries the oban_jobs table and prints statistics about job states across different queues. It implements the Oban.Plugin behaviour and uses GenServer for process management.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/advanced/writing_plugins.md#2025-04-17_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyApp.Plugins.Breakdown do\n  @behaviour Oban.Plugin\n\n  use GenServer\n\n  import Ecto.Query, only: [group_by: 3, select: 3]\n\n  @impl Oban.Plugin\n  def start_link(opts) do\n    name = Keyword.get(opts, :name, __MODULE__)\n\n    GenServer.start_link(__MODULE__, opts, name: name)\n  end\n\n  @impl Oban.Plugin\n  def validate(opts) do\n    Oban.Validation.validate_schema(opts,\n      conf: :any,\n      name: :any,\n      interval: :pos_integer\n    )\n  end\n\n  @impl GenServer\n  def init(opts) do\n    state = Map.new(opts)\n\n    {:ok, schedule_poll(state)}\n  end\n\n  @impl GenServer\n  def handle_info(:poll, %{conf: conf} = state) do\n    breakdown =\n      Oban.Repo.all(\n        conf,\n        Oban.Job\n        |> group_by([j], [j.queue, j.state])\n        |> select([j], {j.queue, j.state, count(j.id)})\n      )\n\n    IO.inspect(breakdown)\n\n    {:noreply, schedule_poll(state)}\n  end\n\n  defp schedule_poll(%{interval: interval} = state) do\n    Process.send_after(self(), :poll, interval)\n\n    state\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Unique Worker Configuration in Elixir\nDESCRIPTION: Demonstrates the simplest form of uniqueness configuration for an Oban worker, which prevents duplicate jobs as long as a matching job exists in the database.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/learning/unique_jobs.md#2025-04-17_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\nuse Oban.Worker, unique: true\n```\n\n----------------------------------------\n\nTITLE: Implementing a Config Provider for Oban Queue Configuration in Elixir\nDESCRIPTION: A custom Config.Provider module that reads Oban queue configuration from a JSON file. The provider parses the JSON file, extracts queue settings, and merges them with the application configuration. This allows for dynamic configuration of queue concurrency without rebuilding the application.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/advanced/release_configuration.md#2025-04-17_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyApp.ConfigProvider do\n  @moduledoc \"\"\"\n  Provide release configuration for Oban Queue Concurrency\n  \"\"\"\n\n  @behaviour Config.Provider\n\n  def init(path) when is_binary(path), do: path\n\n  def load(config, path) do\n    case parse_json(path) do\n      nil ->\n        config\n\n      queues ->\n        Config.Reader.merge(config, ingestion: [{Oban, [queues: queues]}])\n    end\n  end\n\n  defp parse_json(path) do\n    if File.exists?(path) do\n      path\n      |> File.read!()\n      |> JSON.decode!()\n      |> Map.fetch!(\"queues\")\n      |> Keyword.new(fn {key, value} -> {String.to_atom(key), value} end)\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Attaching Oban's Default Structured Logger\nDESCRIPTION: Shows how to attach Oban's built-in structured logger that handles all telemetry events. This is the simplest way to enable comprehensive logging for Oban operations.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/learning/instrumentation.md#2025-04-17_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\n:ok = Oban.Telemetry.attach_default_logger()\n```\n\n----------------------------------------\n\nTITLE: Converting Timezone for Oban Job Scheduling in Elixir\nDESCRIPTION: Illustrates the process of converting local timezone datetime to UTC for accurate job scheduling in Oban. This ensures consistent scheduling behavior across different server locations.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/learning/scheduling_jobs.md#2025-04-17_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\n# Convert a datetime in a local timezone to UTC for scheduling\nutc_datetime = DateTime.shift_zone!(local_datetime, \"Etc/UTC\")\n\n%{id: 1}\n|> MyApp.SomeWorker.new(scheduled_at: utc_datetime)\n|> Oban.insert()\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Zip Building with Progress Tracking\nDESCRIPTION: The build_zip/1 function spawns an asynchronous Task to generate a zip file. As each file is added to the archive, it sends a progress percentage message back to the job process. When complete, it sends a message with the zip file path.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/recipes/reporting-progress.md#2025-04-17_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\n  defp build_zip(paths) do\n    job_pid = self()\n\n    Task.async(fn ->\n      zip_path = Zipper.new()\n\n      paths\n      |> Enum.with_index(1)\n      |> Enum.each(fn {path, index} ->\n        :ok = Zipper.add_file(zip_path, path)\n        send(job_pid, {:progress, trunc(index / length(paths) * 100)})\n      end)\n\n      send(job_pid, {:complete, zip_path})\n    end)\n  end\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Oban Event Logger in Elixir\nDESCRIPTION: Example implementation of a custom module that handles Oban telemetry events. This logger captures job start, stop, and exception events and logs them in an unstructured format.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/learning/instrumentation.md#2025-04-17_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyApp.ObanLogger do\n  require Logger\n\n  def handle_event([:oban, :job, :start], measure, meta, _) do\n    Logger.warning(\"[Oban] :started #{meta.worker} at #{measure.system_time}\")\n  end\n\n  def handle_event([:oban, :job, event], measure, meta, _) do\n    Logger.warning(\"[Oban] #{event} #{meta.worker} ran in #{measure.duration}\")\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Advanced Unique Worker Configuration in Elixir\nDESCRIPTION: Configures complex uniqueness constraints for an Oban worker, specifying time period, timestamp to check against, specific argument keys to consider, states to check, and which fields to compare.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/learning/unique_jobs.md#2025-04-17_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\nuse Oban.Worker,\n  unique: [\n    # Jobs should be unique for 2 minutes...\n    period: {2, :minutes},\n    # ...after being scheduled, not inserted\n    timestamp: :scheduled_at,\n    # Don't consider the whole :args field, but just the :url field within :args\n    keys: [:url],\n    # Consider a job unique across all states, including :cancelled/:discarded\n    states: Oban.Job.states(),\n    # Consider a job unique across queues; only compare the :url key within\n    # the :args, as per the :keys configuration above\n    fields: [:worker, :args]\n  ]\n```\n\n----------------------------------------\n\nTITLE: Attaching Custom Error Reporter in Application Start\nDESCRIPTION: Shows how to attach the custom Oban error reporter when the application starts. This ensures error reporting is enabled for the entire application lifecycle.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/introduction/ready_for_production.md#2025-04-17_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\n# application.ex\n@impl Application\ndef start(_type, _args) do\n  MyApp.ObanReporter.attach()\nend\n```\n\n----------------------------------------\n\nTITLE: Including Oban in Application Supervision Tree\nDESCRIPTION: This Elixir code demonstrates how to include Oban in the application's supervision tree. It uses the application configuration and adds Oban to the list of supervised children.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/introduction/installation.md#2025-04-17_snippet_12\n\nLANGUAGE: elixir\nCODE:\n```\n# lib/my_app/application.ex\ndef start(_type, _args) do\n  children = [\n    MyApp.Repo,\n    {Oban, Application.fetch_env!(:my_app, Oban)}\n  ]\n\n  Supervisor.start_link(children, strategy: :one_for_one, name: MyApp.Supervisor)\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Queues in Oban with Elixir\nDESCRIPTION: Advanced queue configuration with individual overrides for each queue. Shows how to set dispatch cooldown, pause queues, and use global limits (an Oban Pro feature).\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/learning/defining_queues.md#2025-04-17_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\nconfig :my_app, Oban,\n  queues: [\n    default: 10,\n    mailers: [limit: 20, dispatch_cooldown: 50],\n    events: [limit: 50, paused: true],\n    media: [limit: 1, global_limit: 10]\n  ],\n  repo: MyApp.Repo\n```\n\n----------------------------------------\n\nTITLE: Attaching Custom Telemetry Handlers to Oban Events in Application Start\nDESCRIPTION: Demonstrates how to attach custom telemetry handlers to Oban job events in the application start callback. This code subscribes to job start, stop, and exception events and routes them to the custom logger.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/learning/instrumentation.md#2025-04-17_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\ndef start(_type, _args) do\n  events = [\n    [:oban, :job, :start],\n    [:oban, :job, :stop],\n    [:oban, :job, :exception]\n  ]\n\n  :telemetry.attach_many(\"oban-logger\", events, &MyApp.ObanLogger.handle_event/4, [])\n\n  Supervisor.start_link(...)\nend\n```\n\n----------------------------------------\n\nTITLE: Starting a Recursive Backfill Job in Elixir with Oban\nDESCRIPTION: This snippet shows how to initiate a recursive backfill job from an IEx console. It creates a new timezone worker job with the first user ID and sets the backfill flag to true.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/recipes/recursive-jobs.md#2025-04-17_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\niex> %{id: 1, backfill: true} |> MyApp.Workers.TimezoneWorker.new() |> Oban.insert()\n```\n\n----------------------------------------\n\nTITLE: Configuring Oban for Postgres in Elixir\nDESCRIPTION: This Elixir configuration sets up Oban to use the Basic engine for Postgres. It specifies the engine, queues, and repository to use.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/introduction/installation.md#2025-04-17_snippet_8\n\nLANGUAGE: elixir\nCODE:\n```\n# config/config.exs\nconfig :my_app, Oban,\n  engine: Oban.Engines.Basic,\n  queues: [default: 10],\n  repo: MyApp.Repo\n```\n\n----------------------------------------\n\nTITLE: Configuring Oban with MySQL Support in Elixir\nDESCRIPTION: Demonstrates how to configure Oban to use the new Dolphin engine for MySQL support. This allows Oban to run on MySQL databases version 8.4 and above.\nSOURCE: https://github.com/oban-bg/oban/blob/main/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\nconfig :my_app, Oban,\n  engine: Oban.Engines.Dolphin,\n  queues: [default: 10],\n  repo: MyApp.Repo\n```\n\n----------------------------------------\n\nTITLE: Implementing Worker Unit Test with perform_job Helper\nDESCRIPTION: Example of writing a unit test for an activation worker using Oban's perform_job/3 helper. The test creates a user and tests the activation process.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/testing/testing_workers.md#2025-04-17_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyApp.ActivationWorkerTest do\n  use MyApp.Case, async: true\n\n  test \"activating a new user\" do\n    user = MyApp.User.create(email: \"parker@example.com\")\n\n    {:ok, _user} = perform_job(MyApp.ActivationWorker, %{id: user.id})\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Verifying Oban Configuration in Elixir\nDESCRIPTION: This Elixir code snippet shows how to verify that Oban is configured and running properly by checking its configuration in an IEx session.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/introduction/installation.md#2025-04-17_snippet_13\n\nLANGUAGE: elixir\nCODE:\n```\niex(1)> Oban.config()\n#=> %Oban.Config{repo: MyApp.Repo}\n```\n\n----------------------------------------\n\nTITLE: Testing Worker Timeout Callback\nDESCRIPTION: Example test case showing how to test a worker's timeout callback function with different job attempts.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/testing/testing_workers.md#2025-04-17_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\ntest \"allowing a multiple of the attempt as job timeout\" do\n  assert 1000 == MyWorker.timeout(%Oban.Job{attempt: 1})\n  assert 2000 == MyWorker.timeout(%Oban.Job{attempt: 2})\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Oban Migration in Elixir\nDESCRIPTION: This Elixir code defines the migration for adding the oban_jobs table. It uses Oban.Migration.up and Oban.Migration.down functions to handle versioned migrations.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/introduction/installation.md#2025-04-17_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyApp.Repo.Migrations.AddObanJobsTable do\n  use Ecto.Migration\n\n  def up do\n    Oban.Migration.up(version: 12)\n  end\n\n  # We specify `version: 1` in `down`, ensuring that we'll roll all the way back down if\n  # necessary, regardless of which version we've migrated `up` to.\n  def down do\n    Oban.Migration.down(version: 1)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Oban Pruner Plugin with Custom Retention Period in Elixir\nDESCRIPTION: This snippet demonstrates how to configure the Oban Pruner plugin with a custom retention period of 5 minutes (300 seconds). The Pruner plugin is responsible for deleting completed, cancelled, and discarded jobs that have exceeded their retention period.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/learning/operational_maintenance.md#2025-04-17_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\nconfig :my_app, Oban,\n  plugins: [{Oban.Plugins.Pruner, max_age: _5_minutes_in_seconds = 300}],\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Resuming a Paused Queue in Oban with Elixir\nDESCRIPTION: Code to programmatically resume a paused queue in Oban. This allows starting job processing on a queue that was initially configured with paused: true.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/learning/defining_queues.md#2025-04-17_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\nOban.resume_queue(queue: :events)\n```\n\n----------------------------------------\n\nTITLE: Attaching Telemetry Handler for Oban Errors in Elixir\nDESCRIPTION: This code snippet shows how to attach a Telemetry handler for Oban job exceptions, which will use the custom ErrorReporter.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/recipes/expected-failures.md#2025-04-17_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\n:telemetry.attach(\"oban-errors\", [:oban, :job, :exception], &ErrorReporter.handle_event/4, nil)\n```\n\n----------------------------------------\n\nTITLE: Optimizing Ecto Pool Size and Oban Queue Concurrency in Elixir\nDESCRIPTION: This configuration adjustment increases the Ecto pool size and reduces Oban queue concurrency. This helps improve the ratio between executing jobs and available connections, which is beneficial in high-concurrency scenarios.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/advanced/scaling.md#2025-04-17_snippet_9\n\nLANGUAGE: elixir\nCODE:\n```\nconfig :my_app, Repo,\n-  pool_size: 10,\n+  pool_size: 50,\n   …\n\n config :my_app, Oban,\n   queues: [\n-    events: 200,\n+    events: 50,\n-    emails: 100,\n+    emails: 25,\n   …\n```\n\n----------------------------------------\n\nTITLE: Implementing Scheduled Worker for Daily Digest Emails in Elixir\nDESCRIPTION: This code defines a scheduled worker using Oban to send daily digest emails. It ensures that the next email is only scheduled on the first attempt, preventing duplicate scheduling. The worker handles both initial scheduling and retry attempts for email delivery.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/recipes/reliable-scheduling.md#2025-04-17_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyApp.Workers.ScheduledWorker do\n  use Oban.Worker, queue: :scheduled, max_attempts: 10\n\n  alias MyApp.Mailer\n\n  @one_day 60 * 60 * 24\n\n  @impl true\n  def perform(%{args: %{\"email\" => email} = args, attempt: 1}) do\n    args\n    |> new(schedule_in: @one_day)\n    |> Oban.insert!()\n\n    Mailer.deliver_email(email)\n  end\n\n  def perform(%{args: %{\"email\" => email}}) do\n    Mailer.deliver_email(email)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Oban with Lifeline Plugin and Extended Shutdown Grace Period in Elixir\nDESCRIPTION: This snippet demonstrates how to configure Oban with the Lifeline plugin to handle orphaned jobs and extend the shutdown grace period. It sets up the Lifeline plugin and increases the shutdown grace period to 60 seconds.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/advanced/troubleshooting.md#2025-04-17_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\nconfig :my_app, Oban,\n    plugins: [Oban.Plugins.Lifeline],\n    shutdown_grace_period: :timer.seconds(60),\n    ...\n```\n\n----------------------------------------\n\nTITLE: Starting Oban with Dynamic Repository in Elixir\nDESCRIPTION: Function that creates a supervision tree with a dynamic Ecto repository and an Oban instance configured to use it, supporting multi-tenant scenarios.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/learning/isolation.md#2025-04-17_snippet_12\n\nLANGUAGE: elixir\nCODE:\n```\ndef start_repo_and_oban(instance_id) do\n  children = [\n    {MyDynamicRepo, name: nil, url: repo_url(instance_id)},\n    {Oban, name: instance_id, get_dynamic_repo: fn -> repo_pid(instance_id) end}\n  ]\n\n  Supervisor.start_link(children, strategy: :one_for_one)\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Oban's Pruner Plugin for Job Cleanup\nDESCRIPTION: Shows how to configure the Pruner plugin to automatically delete completed, cancelled, and discarded jobs after a specified time period (7 days in this example).\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/introduction/ready_for_production.md#2025-04-17_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\nconfig :my_app, Oban,\n  plugins: [\n    {Oban.Plugins.Pruner, max_age: 60 * 60 * 24 * 7},\n  ...\n```\n\n----------------------------------------\n\nTITLE: Temporarily Switching to Manual Testing Mode\nDESCRIPTION: Demonstrates how to temporarily change Oban's testing mode from inline to manual within a function context using the Oban.Testing.with_testing_mode/2 helper. This allows for selective control over job execution during tests.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/testing/testing.md#2025-04-17_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\nOban.Testing.with_testing_mode(:manual, fn ->\n  Oban.insert(MyWorker.new(%{id: 123}))\n\n  assert_enqueued worker: MyWorker, args: %{id: 123}\nend)\n```\n\n----------------------------------------\n\nTITLE: Configuring Oban Facades with Different Prefixes in Elixir\nDESCRIPTION: Configuration example that sets up two Oban facades with different PostgreSQL schema prefixes, enabling isolated job tables for each instance.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/learning/isolation.md#2025-04-17_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\nconfig :my_app, MyApp.ObanA, repo: MyAppo.Repo, prefix: \"special\"\nconfig :my_app, MyApp.ObanB, repo: MyAppo.Repo, prefix: \"private\"\n```\n\n----------------------------------------\n\nTITLE: Asserting Enqueued Jobs in Oban with Elixir\nDESCRIPTION: Demonstrates how to assert that an activation job is enqueued after a user signs up using the assert_enqueued helper.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/testing/testing_queues.md#2025-04-17_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\ntest \"scheduling activation upon sign up\" do\n  {:ok, account} = MyApp.Account.sign_up(email: \"parker@example.com\")\n\n  assert_enqueued worker: MyApp.ActivationWorker, args: %{id: account.id}, queue: :default\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Queue Configuration in Application Module\nDESCRIPTION: Implementation of the Application module with dynamic Oban queue configuration based on environment variables. This allows runtime control of which queues run on which nodes without code changes.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/recipes/splitting-queues.md#2025-04-17_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyApp.Application do\n  @moduledoc false\n\n  use Application\n\n  def start(_type, _args) do\n    children = [\n      MyApp.Repo,\n      MyApp.Endpoint,\n      {Oban, oban_opts()}\n    ]\n\n    Supervisor.start_link(children, strategy: :one_for_one, name: MyApp.Supervisor)\n  end\n\n  defp oban_opts do\n    env_queues = System.get_env(\"OBAN_QUEUES\")\n\n    :my_app\n    |> Application.get_env(Oban)\n    |> Keyword.update(:queues, [], &queues(env_queues, &1))\n  end\n\n  defp queues(\"*\", defaults), do: defaults\n  defp queues(nil, defaults), do: defaults\n  defp queues(_, false), do: false\n\n  defp queues(values, _defaults) when is_binary(values) do\n    values\n    |> String.split(\" \", trim: true)\n    |> Enum.map(&String.split(&1, \",\", trim: true))\n    |> Keyword.new(fn [queue, limit] ->\n      {String.to_existing_atom(queue), String.to_integer(limit)}\n    end)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Oban Notifier in Elixir\nDESCRIPTION: This snippet shows how to switch the Oban notifier from the default Postgres to PG for improved performance in clustered environments. It reduces database queries and allows larger messages.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/advanced/scaling.md#2025-04-17_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\nconfig :my_app, Oban,\n+  notifier: Oban.Notifiers.PG,\n```\n\n----------------------------------------\n\nTITLE: Pausing an Active Queue in Oban with Elixir\nDESCRIPTION: Code to programmatically pause an active queue in Oban. This temporarily stops job processing on the specified queue until it's resumed.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/learning/defining_queues.md#2025-04-17_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\nOban.pause_queue(queue: :media)\n```\n\n----------------------------------------\n\nTITLE: Defining Oban-specific Ecto Repo in Elixir\nDESCRIPTION: This code defines a new Ecto Repo specifically for Oban's use. This helps isolate Oban's database queries from the rest of the application, preventing connection pool contention.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/advanced/scaling.md#2025-04-17_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyApp.ObanRepo do\n   use Ecto.Repo,\n     adapter: Ecto.Adapters.Postgres,\n     otp_app: :my_app\nend\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching on Job Arguments in Oban Tests with Elixir\nDESCRIPTION: Shows how to assert that enqueued job arguments have a particular shape without matching exact values using pattern matching.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/testing/testing_queues.md#2025-04-17_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\ntest \"enqueued args have a particular key\" do\n  :ok = MyApp.Account.notify_owners(account())\n\n  assert_enqueued queue: :default, args: %{email: _}\nend\n```\n\n----------------------------------------\n\nTITLE: Starting Oban Facades in Supervision Tree\nDESCRIPTION: Demonstrates how to start Oban facade modules in an application's supervision tree, establishing separate Oban instances with their own configurations.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/learning/isolation.md#2025-04-17_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\n@impl true\ndef start(_type, _args) do\n  children = [\n    MyApp.Repo,\n    MyApp.ObanA,\n    MyApp.ObanB\n  ]\n\n  Supervisor.start_link(children, strategy: :one_for_one, name: MyApp.Supervisor)\nend\n```\n\n----------------------------------------\n\nTITLE: Inserting Single Oban Job from Rails\nDESCRIPTION: Demonstrates how to insert a single immediate job into Oban using the ActiveRecord model's insert method.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/recipes/migrating-from-other-languages.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nOban::Job.insert(worker: \"MyWorker\", args: {id: 1}, queue: \"default\")\n```\n\n----------------------------------------\n\nTITLE: Replacing Values on Unique Job Conflict in Elixir\nDESCRIPTION: Demonstrates how to update specific fields of an existing job when a unique conflict is detected, in this case changing priority and max_attempts for jobs in the scheduled state.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/learning/unique_jobs.md#2025-04-17_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\nBusinessWorker.new(\n  args,\n  max_attempts: 5,\n  priority: 0,\n  replace: [scheduled: [:max_attempts, :priority]]\n)\n```\n\n----------------------------------------\n\nTITLE: Starting Multiple Named Oban Instances in Elixir\nDESCRIPTION: Configures three Oban supervisors with different names and prefixes in the application supervision tree, allowing for isolated instances.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/learning/isolation.md#2025-04-17_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\ndef start(_type, _args) do\n  children = [\n    MyApp.Repo,\n    {Oban, name: ObanA, repo: MyApp.Repo},\n    {Oban, name: ObanB, repo: MyApp.Repo, prefix: \"special\"},\n    {Oban, name: ObanC, repo: MyApp.Repo, prefix: \"private\"}\n  ]\n\n  Supervisor.start_link(children, strategy: :one_for_one, name: MyApp.Supervisor)\nend\n```\n\n----------------------------------------\n\nTITLE: Integration Testing with Oban.drain_queue in Elixir\nDESCRIPTION: Shows how to process all pending jobs in a specific queue during integration tests using Oban.drain_queue/1,2.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/testing/testing_queues.md#2025-04-17_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyApp.BusinessTest do\n  use MyApp.DataCase, async: true\n\n  alias MyApp.{Business, Worker}\n\n  test \"we stay in the business of doing business\" do\n    :ok = Business.schedule_a_meeting(%{email: \"monty@brewster.com\"})\n\n    assert %{success: 1, failure: 0} = Oban.drain_queue(queue: :mailer)\n\n    # Now, make an assertion about the email delivery\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Oban in Elixir Application\nDESCRIPTION: This snippet shows how to configure Oban queues and repository in the application's config file. It sets up a mailers queue with a concurrency of 20.\nSOURCE: https://github.com/oban-bg/oban/blob/main/README.md#2025-04-17_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\n# In config/config.exs\nconfig :my_app, Oban,\n  repo: MyApp.Repo,\n  queues: [mailers: 20]\n```\n\n----------------------------------------\n\nTITLE: Scheduling Future Oban Job from Rails\nDESCRIPTION: Shows how to schedule a job to run in the future by specifying a scheduled_at timestamp.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/recipes/migrating-from-other-languages.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nOban::Job.insert(worker: \"MyWorker\", args: {id: 1}, scheduled_at: 1.minute.from_now.utc)\n```\n\n----------------------------------------\n\nTITLE: Updating Scheduled Time on Unique Job Conflict in Elixir\nDESCRIPTION: Shows how to bump the scheduled time of a job when a unique conflict occurs, using the replace option with scheduled_at field.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/learning/unique_jobs.md#2025-04-17_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\nUrgentWorker.new(args, schedule_in: 1, replace: [scheduled: [:scheduled_at]])\n```\n\n----------------------------------------\n\nTITLE: Validating Dynamic Oban Configuration in Elixir Tests\nDESCRIPTION: Uses Oban.Config.validate/1 to verify that dynamic configuration specified in runtime.exs is valid. The example reads the production configuration file and extracts the Oban config for validation.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/testing/testing_config.md#2025-04-17_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\ntest \"production oban config is valid\" do\n  config =\n    \"config/config.exs\"\n    |> Config.Reader.read!(env: :prod)\n    |> get_in([:my_app, Oban])\n\n  assert :ok = Oban.Config.validate(config)\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Oban Job ActiveRecord Model in Rails\nDESCRIPTION: Creates an ActiveRecord model for Oban jobs with a convenience method for job insertion. Handles both immediate and scheduled jobs through a single interface.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/recipes/migrating-from-other-languages.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass Oban::Job < ApplicationRecord\n  # This column is in use, but not used for the insert workflow.\n  self.ignored_columns = %w[errors]\n\n  # A simple wrapper around `create` that ensures the job is scheduled immediately.\n  def self.insert(worker:, args: {}, queue: \"default\", scheduled_at: nil)\n    create(\n      worker: worker,\n      queue: queue,\n      args: args,\n      scheduled_at: scheduled_at || Time.now.utc,\n      state: scheduled_at ? \"scheduled\" : \"available\"\n    )\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Attaching Oban's Default Logger in Application Start\nDESCRIPTION: Shows how to attach Oban's default telemetry logger in the application start function. This enables JSON-encoded logs at the info level for Oban's telemetry events.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/introduction/ready_for_production.md#2025-04-17_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyApp.Application do\n  use Application\n\n  @impl Application\n  def start(_type, _args) do\n    Oban.Telemetry.attach_default_logger()\n\n    children = [\n      ...\n    ]\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Including Oban Testing Helpers in ExUnit Case Template\nDESCRIPTION: Sets up Oban testing helpers globally by including them in an ExUnit.CaseTemplate. This makes the testing helpers available to all test modules that use this case template.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/testing/testing.md#2025-04-17_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyApp.Case do\n  use ExUnit.CaseTemplate\n\n  using do\n    quote do\n      use Oban.Testing, repo: MyApp.Repo\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Including Oban Testing Helpers in Individual Test Modules\nDESCRIPTION: Shows how to include Oban testing helpers in a specific test module rather than globally. This approach provides more control over which tests have access to the Oban.Testing helpers.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/testing/testing.md#2025-04-17_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyApp.WorkerTest do\n  use MyApp.Case, async: true\n\n  use Oban.Testing, repo: MyApp.Repo\nend\n```\n\n----------------------------------------\n\nTITLE: Tuning PostgreSQL Autovacuum for Oban Jobs Table\nDESCRIPTION: This SQL snippet shows how to tune the autovacuum settings specifically for the oban_jobs table in PostgreSQL. It sets the vacuum scale factor to 0 and the threshold to 100, which can help manage table bloat more effectively.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/advanced/scaling.md#2025-04-17_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE oban_jobs SET (\n  autovacuum_vacuum_scale_factor = 0,\n  autovacuum_vacuum_threshold = 100\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a ZippingWorker Module with Oban\nDESCRIPTION: Basic structure of a ZippingWorker module that uses Oban.Worker to process export jobs. The perform/1 function accepts a job with a channel name and file paths, then calls functions to build the zip and await completion.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/recipes/reporting-progress.md#2025-04-17_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyApp.Workers.ZippingWorker do\n  use Oban.Worker, queue: :exports, max_attempts: 1\n\n  alias MyApp.{Endpoint, Zipper}\n\n  def perform(%_{args: %{\"channel\" => channel, \"paths\" => paths}}) do\n    build_zip(paths)\n    await_zip(channel)\n  end\n\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Batch Inserting Multiple Oban Jobs from Rails\nDESCRIPTION: Demonstrates how to insert multiple jobs at once using Rails 6+ insert_all functionality for better performance.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/recipes/migrating-from-other-languages.md#2025-04-17_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nOban::Job.insert_all([\n  {worker: \"MyWorker\", args: {id: 1}, queue: \"default\"},\n  {worker: \"MyWorker\", args: {id: 2}, queue: \"default\"},\n  {worker: \"MyWorker\", args: {id: 3}, queue: \"default\"},\n])\n```\n\n----------------------------------------\n\nTITLE: Running Ecto Migration for Oban\nDESCRIPTION: This bash command runs the Ecto migration to create the oban_jobs table in the database.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/introduction/installation.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmix ecto.migrate\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Oban Queues in Elixir\nDESCRIPTION: Basic configuration for Oban in config.exs file that sets up three queues with different concurrency limits: default (15), media (10), and events (25).\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/recipes/splitting-queues.md#2025-04-17_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\nconfig :my_app, Oban,\n  repo: MyApp.Repo,\n  queues: [default: 15, media: 10, events: 25]\n```\n\n----------------------------------------\n\nTITLE: Configuring Oban's Lifeline Plugin for Rescuing Orphaned Jobs\nDESCRIPTION: Shows how to configure the Lifeline plugin to automatically rescue orphaned jobs (jobs left in executing state) after 30 minutes.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/introduction/ready_for_production.md#2025-04-17_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\nconfig :my_app, Oban,\n  plugins: [\n    {Oban.Plugins.Lifeline, rescue_after: :timer.minutes(30)},\n  ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Oban Worker Module\nDESCRIPTION: Definition of an Oban worker module with the required Worker behavior implementation and perform callback function.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/testing/testing_workers.md#2025-04-17_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyApp.ActivationWorker do\n  use Oban.Worker\n\n  @impl Worker\n  def perform(%Job{args: %{\"id\" => user_id}}) do\n    MyApp.Account.activate(user_id)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Running Oban with Specific Queues Using Environment Variables\nDESCRIPTION: Bash commands demonstrating how to start the application with different queue configurations using the OBAN_QUEUES environment variable.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/recipes/splitting-queues.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nOBAN_QUEUES=\"default,10 media,5\" mix phx.server # default: 10, media: 5\n```\n\nLANGUAGE: bash\nCODE:\n```\nOBAN_QUEUES=\"*\" mix phx.server # default: 15, media: 10, events: 25\n```\n\nLANGUAGE: bash\nCODE:\n```\nmix phx.server # default: 15, media: 10, events: 25\n```\n\n----------------------------------------\n\nTITLE: Using Named Oban Instances in Umbrella Apps\nDESCRIPTION: Examples of using the correct Oban instance names when performing operations in different parts of an umbrella application.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/learning/isolation.md#2025-04-17_snippet_9\n\nLANGUAGE: elixir\nCODE:\n```\nOban.insert(MyAppA.Oban, MyWorker.new(%{}))\nOban.insert_all(MyAppB.Oban, multi, :multiname, [MyWorker.new(%{})])\nOban.drain_queue(MyAppB.Oban, queue: :default)\n```\n\n----------------------------------------\n\nTITLE: Configuring Oban Pruner Plugin in Elixir\nDESCRIPTION: This snippet demonstrates how to configure the Oban Pruner plugin to aggressively prune completed, cancelled, and discarded jobs. It sets the maximum age of retained jobs to 1 day, helping to keep the jobs table small.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/advanced/scaling.md#2025-04-17_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\nconfig :my_app, Oban,\n  plugins: [\n+    {Oban.Plugins.Pruner, max_age: 1_day_in_seconds}\n     …\n   ]\n```\n\n----------------------------------------\n\nTITLE: Disabling Oban Leadership on Web Nodes in Elixir Configuration\nDESCRIPTION: This configuration snippet shows how to disable Oban leadership on web nodes that don't run plugins. It sets the 'peer' option to false, preventing the node from becoming a leader in a multi-node setup.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/advanced/troubleshooting.md#2025-04-17_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\nconfig :my_app, Oban, peer: false, ...\n```\n\n----------------------------------------\n\nTITLE: Adding Gossip Plugin to Oban Configuration\nDESCRIPTION: Adds the Gossip plugin to Oban's configuration, replacing the old heartbeat system. The plugin broadcasts status via PubSub every second by default.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/upgrading/v2.6.md#2025-04-17_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\nconfig :my_app, Oban,\n  plugins: [\n    Oban.Plugins.Gossip\n    ...\n```\n\n----------------------------------------\n\nTITLE: Creating Oban Facades for Instance Isolation in Elixir\nDESCRIPTION: Defines facade modules that call use Oban with specific configurations, allowing for multiple isolated Oban instances with different prefixes in the same application.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/learning/isolation.md#2025-04-17_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyApp.ObanA do\n  use Oban, otp_app: :my_app\nend\n\ndefmodule MyApp.ObanB do\n  use Oban, otp_app: :my_app\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Oban Testing with PostgreSQL Schema Prefix\nDESCRIPTION: Sets up Oban testing helpers with a specific PostgreSQL schema prefix for database isolation. This is useful when your application uses schema-based multitenancy or isolation.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/testing/testing.md#2025-04-17_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\nuse Oban.Testing, repo: MyApp.Repo, prefix: \"private\"\n```\n\n----------------------------------------\n\nTITLE: Adding Oban and Igniter Dependencies in Elixir\nDESCRIPTION: This snippet shows how to add Oban and Igniter as dependencies in the mix.exs file. Oban is added as a regular dependency, while Igniter is added only for the development environment.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/introduction/installation.md#2025-04-17_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\n{:oban, \"~> 2.19\"},\n{:igniter, \"~> 0.5\", only: [:dev]},\n```\n\n----------------------------------------\n\nTITLE: Adding Oban Repo Selection Function in Elixir\nDESCRIPTION: This snippet adds a function to the main Repo module to dynamically select between the main Repo and the Oban-specific Repo based on whether a transaction is in progress.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/advanced/scaling.md#2025-04-17_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyApp.Repo do\n  use Ecto.Repo,\n     adapter: Ecto.Adapters.Postgres,\n     otp_app: :my_app\n  \n+ def oban_repo do\n+   if in_transaction?() do\n+     MyApp.Repo\n+   else\n+     MyApp.ObanRepo\n+   end\n+ end\nend\n```\n\n----------------------------------------\n\nTITLE: Updating Oban Test Helper Usage in Elixir\nDESCRIPTION: Replaces the direct perform call with the new perform_job test helper in unit tests.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/upgrading/v2.0.md#2025-04-17_snippet_10\n\nLANGUAGE: elixir\nCODE:\n```\n- assert :ok = MyApp.Worker.perform(%{id: 1}, %Oban.Job{})\n+ assert :ok = perform_job(MyApp.Worker, %{id: 1})\n```\n\n----------------------------------------\n\nTITLE: Replacing Stager Plugin with Stage Interval in Oban Configuration\nDESCRIPTION: This diff shows how to replace the Oban.Plugins.Stager plugin with a stage_interval configuration. The Stager is no longer a plugin as it's essential for queue operation.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/upgrading/v2.14.md#2025-04-17_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\nplugins: [\n  Oban.Plugins.Lifeline,\n  Oban.Plugins.Pruner,\n-  {Oban.Plugins.Stager, interval: 5_000}\n],\n+ stage_interval: 5_000\n```\n\n----------------------------------------\n\nTITLE: Configuring Oban for Testing in Elixir\nDESCRIPTION: This Elixir configuration sets Oban to manual testing mode in the test environment, preventing it from running jobs and plugins during tests.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/introduction/installation.md#2025-04-17_snippet_11\n\nLANGUAGE: elixir\nCODE:\n```\n# config/test.exs\nconfig :my_app, Oban, testing: :manual\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Backoff Strategy for FlakyWorker in Elixir\nDESCRIPTION: This snippet demonstrates how to implement a custom backoff strategy for the FlakyWorker, setting a linear delay before retries to handle especially flaky services.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/recipes/expected-failures.md#2025-04-17_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\n@impl true\ndef backoff(%Job{attempt: attempt}) do\n  attempt * 60\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Oban with Custom Name in Umbrella App A\nDESCRIPTION: Configuration for the first app in an umbrella application that needs to interact with Oban, using a custom supervisor name.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/learning/isolation.md#2025-04-17_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\nconfig :my_app_a, Oban,\n  name: MyAppA.Oban,\n  repo: MyApp.Repo\n```\n\n----------------------------------------\n\nTITLE: Implementing Ecto Repo Query Preparation for Oban Compatibility\nDESCRIPTION: Custom Ecto prepare_query/3 implementation that exempts Oban queries from multi-tenancy filtering requirements, enabling Oban to work alongside Ecto multi-tenancy.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/learning/isolation.md#2025-04-17_snippet_13\n\nLANGUAGE: elixir\nCODE:\n```\n# Sample code, only relevant if you followed the Ecto guide on multi tenancy with foreign keys.\ndefmodule MyApp.Repo do\n  use Ecto.Repo, otp_app: :my_app\n\n  require Ecto.Query\n\n  @impl true\n  def prepare_query(_operation, query, opts) do\n    cond do\n      opts[:skip_org_id] || opts[:schema_migration] || opts[:oban] ->\n        {query, opts}\n\n      org_id = opts[:org_id] ->\n        {Ecto.Query.where(query, org_id: ^org_id), opts}\n\n      true ->\n        raise \"expected org_id or skip_org_id to be set\"\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Oban v12 Migration\nDESCRIPTION: Migration module implementation for upgrading Oban jobs to v12, which removes insert triggers and updates priority constraints.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/upgrading/v2.17.md#2025-04-17_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\nuse Ecto.Migration\n\ndef up, do: Oban.Migrations.up(version: 12)\n\ndef down, do: Oban.Migrations.down(version: 12)\n```\n\n----------------------------------------\n\nTITLE: Configuring Oban Reindexer Plugin in Elixir\nDESCRIPTION: This configuration snippet shows how to add the Oban.Plugins.Reindexer plugin to the Oban configuration. It sets the reindexing schedule to run weekly, which helps maintain optimal index performance.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/advanced/scaling.md#2025-04-17_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\nconfig :my_app, Oban,\n   plugins: [\n+   {Oban.Plugins.Reindexer, schedule: \"@weekly\"},\n    …\n   ]\n```\n\n----------------------------------------\n\nTITLE: Complex Pattern Matching on Job Arguments in Oban with Elixir\nDESCRIPTION: Illustrates how to use all_enqueued to retrieve jobs and perform complex pattern matching on nested job arguments.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/testing/testing_queues.md#2025-04-17_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\ntest \"enqueued jobs have args that match a particular pattern\" do\n  :ok = MyApp.Account.notify_owners(account())\n\n  for job <- all_enqueued(queue: :default) do\n    assert %{\"email\" => _, \"avatar\" => %{\"url\" => _}} = job.args\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Updating Oban Notifier Configuration in Elixir\nDESCRIPTION: Diff showing the change in Oban notifier configuration from PostgresNotifier to the new namespaced version Oban.Notifiers.Postgres.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/upgrading/v2.11.md#2025-04-17_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\n-notifier: Oban.PostgresNotifier\n+notifier: Oban.Notifiers.Postgres\n```\n\n----------------------------------------\n\nTITLE: Creating Prefixed Oban Tables Migration in Elixir\nDESCRIPTION: Ecto migration that creates Oban job tables in a custom PostgreSQL schema prefix instead of the default public schema, enabling database isolation.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/learning/isolation.md#2025-04-17_snippet_10\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyApp.Repo.Migrations.AddPrefixedObanJobsTable do\n  use Ecto.Migration\n\n  def up do\n    Oban.Migrations.up(prefix: \"private\")\n  end\n\n  def down do\n    Oban.Migrations.down(prefix: \"private\")\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Oban Web Plugins in Elixir\nDESCRIPTION: Adds necessary plugins for Oban Web to the Oban configuration.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/upgrading/v2.0.md#2025-04-17_snippet_15\n\nLANGUAGE: elixir\nCODE:\n```\nconfig :my_app, Oban,\n  plugins: [\n    Oban.Pro.Plugins.DynamicPruner,\n    Oban.Pro.Plugins.Lifeline,\n    Oban.Web.Plugins.Stats\n  ],\n  ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Oban's Default Logger with Custom Options\nDESCRIPTION: Demonstrates how to configure Oban's default logger with custom options to disable JSON encoding and change the log level to debug.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/introduction/ready_for_production.md#2025-04-17_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\nOban.Telemetry.attach_default_logger(encode: false, level: :debug)\n```\n\n----------------------------------------\n\nTITLE: Creating Runtime Cron Configuration Helper in Elixir\nDESCRIPTION: Defines a helper function in a MyApp.Oban module that returns a crontab configuration at runtime with a scheduled job for MyApp.Worker.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/testing/testing_config.md#2025-04-17_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyApp.Oban do\n  def cron_config do\n    [crontab: [{\"0 24 * * *\", MyApp.Worker}]]\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Migration for Dropping Oban Beats Tables\nDESCRIPTION: An Ecto migration that safely removes the oban_beats table from all prefixes after completing the upgrade to Oban v2.6. The migration is designed to be non-reversible.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/upgrading/v2.6.md#2025-04-17_snippet_10\n\nLANGUAGE: elixir\nCODE:\n```\nuse Ecto.Migration\n\ndef up do\n  drop_if_exists table(\"oban_beats\")\n  drop_if_exists table(\"oban_beats\", prefix: \"private\") # If you have any prefixes:\nend\n\ndef down do\n  # No going back!\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Oban to Use Prefixed Database Tables\nDESCRIPTION: Application configuration that sets Oban to use a custom PostgreSQL schema prefix for all its database operations, achieving database isolation.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/learning/isolation.md#2025-04-17_snippet_11\n\nLANGUAGE: elixir\nCODE:\n```\nconfig :my_app, Oban,\n  prefix: \"private\",\n  repo: MyApp.Repo,\n  queues: [default: 10]\n```\n\n----------------------------------------\n\nTITLE: Implementing Oban Migration in Elixir\nDESCRIPTION: This code snippet defines the migration module for upgrading Oban jobs to version 13. It uses Oban.Migrations to handle the up and down migrations.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/upgrading/v2.20.md#2025-04-17_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\nuse Ecto.Migration\n\ndef up, do: Oban.Migrations.up(version: 13)\n\ndef down, do: Oban.Migrations.down(version: 13)\n```\n\n----------------------------------------\n\nTITLE: Configuring Oban to Use Dedicated Repo in Elixir\nDESCRIPTION: This configuration change sets Oban to use the dedicated ObanRepo and implements dynamic repo selection. This helps manage database connections more effectively, especially in high-concurrency scenarios.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/advanced/scaling.md#2025-04-17_snippet_8\n\nLANGUAGE: elixir\nCODE:\n```\nconfig :my_app, Oban,\n-  repo: MyApp.Repo,\n+  repo: MyApp.ObanRepo,\n+  get_dynamic_repo: {MyApp.Repo, :oban_repo, []}\n   ...\n```\n\n----------------------------------------\n\nTITLE: Inserting a Job with Named Oban Instance\nDESCRIPTION: Demonstrates how to target a specific named Oban instance when inserting a job by passing the supervisor name as the first argument.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/learning/isolation.md#2025-04-17_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\nOban.insert(ObanB, MyApp.Worker.new(%{}))\n```\n\n----------------------------------------\n\nTITLE: Adding Oban Dependency in Elixir\nDESCRIPTION: This snippet shows how to add Oban as a dependency in the mix.exs file for manual installation.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/introduction/installation.md#2025-04-17_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\n{:oban, \"~> 2.19\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring Oban for SQLite3 in Elixir\nDESCRIPTION: This Elixir configuration sets up Oban to use the Lite engine for SQLite3. It specifies the engine, queues, and repository to use.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/introduction/installation.md#2025-04-17_snippet_9\n\nLANGUAGE: elixir\nCODE:\n```\n# config/config.exs\nconfig :my_app, Oban,\n  engine: Oban.Engines.Lite,\n  queues: [default: 10],\n  repo: MyApp.Repo\n```\n\n----------------------------------------\n\nTITLE: Removing Deprecated Oban Configuration in Elixir\nDESCRIPTION: Removes deprecated configuration options for pulse tracking and orphaned job rescue.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/upgrading/v2.0.md#2025-04-17_snippet_8\n\nLANGUAGE: elixir\nCODE:\n```\nconfig :my_app, Oban,\n-  beats_maxage: 10,\n-  rescue_after: 30_000,\n-  rescue_interval: 5_000\n  ...\n```\n\n----------------------------------------\n\nTITLE: Disabling Oban Insert Triggers in Elixir\nDESCRIPTION: This configuration change disables insert triggers in Oban, which can be beneficial for reducing notifications in active queues where sub-second job dispatch is not critical.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/advanced/scaling.md#2025-04-17_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\nconfig :my_app, Oban,\n+  insert_trigger: false,\n```\n\n----------------------------------------\n\nTITLE: Scheduling Oban Jobs in the Near Future in Elixir\nDESCRIPTION: This code snippet demonstrates how to schedule Oban jobs to run in the very near future using both 'schedule_in' and 'scheduled_at' options. It includes a note about potential delays due to the Oban Stager interval setting.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/recipes/reliable-scheduling.md#2025-04-17_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\n# 1 second from now\n%{}\n|> new(schedule_in: 1)\n|> Oban.insert()\n\n# 500 milliseconds from now\nvery_soon = DateTime.utc_now() |> DateTime.add(500, :millisecond)\n\n%{}\n|> new(scheduled_at: very_soon)\n|> Oban.insert()\n```\n\n----------------------------------------\n\nTITLE: Generating Migration to Drop Oban Beats Table\nDESCRIPTION: Creates a new Ecto migration to remove the deprecated oban_beats table after successfully upgrading to the SmartEngine and Gossip plugin.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/upgrading/v2.6.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ mix ecto.gen.migration drop_oban_beats\n```\n\n----------------------------------------\n\nTITLE: Configuring Release with Config Provider in mix.exs\nDESCRIPTION: Release configuration in mix.exs that specifies the custom Config Provider and the path to the configuration file. This tells the Elixir Release system to use the Config Provider during application startup to load environment-specific settings.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/advanced/release_configuration.md#2025-04-17_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\nreleases: [\n  umbrella_app: [\n    version: \"0.0.1\",\n    applications: [\n      child_app: :permanent\n    ],\n    config_providers: [{Path.To.ConfigProvider, \"/etc/config.json\"}]\n  ]\n]\n```\n\n----------------------------------------\n\nTITLE: Updating Oban Pro PG Notifier Configuration in Elixir\nDESCRIPTION: Diff showing the change in Oban Pro PG notifier configuration to the new namespaced version from Oban.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/upgrading/v2.11.md#2025-04-17_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\n-notifier: Oban.Pro.Notifiers.PG\n+notifier: Oban.Notifiers.PG\n```\n\n----------------------------------------\n\nTITLE: Detecting Unique Job Conflicts in Elixir\nDESCRIPTION: Shows how to detect and handle unique job conflicts by checking the job's :conflict? field after insertion, allowing for custom error handling based on conflict status.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/learning/unique_jobs.md#2025-04-17_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\ncase Oban.insert(changeset) do\n  {:ok, %Job{id: nil, conflict?: true}} ->\n    {:error, :failed_to_acquire_lock}\n\n  {:ok, %Job{conflict?: true}} ->\n    {:error, :job_already_exists}\n\n  result ->\n    result\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring an Oban Plugin in Application Configuration\nDESCRIPTION: Example showing how to add the custom Breakdown plugin to Oban's plugin list in the application configuration. The configuration specifies a polling interval of 10 seconds while Oban automatically injects the name and conf options.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/advanced/writing_plugins.md#2025-04-17_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\nconfig :my_app, Oban,\n  plugins: [\n    {MyApp.Plugins.Breakdown, interval: :timer.seconds(10)}\n  ]\n  ...\n```\n\n----------------------------------------\n\nTITLE: Error Output for Invalid Cron Expression in Oban Plugin Config\nDESCRIPTION: Shows the error format returned when Oban.Plugins.Cron.validate/1 encounters an invalid cron expression with hours out of the valid range.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/testing/testing_config.md#2025-04-17_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\n{:error, %ArgumentError{message: \"expression field 24 is out of range 0..23\"}}\n```\n\n----------------------------------------\n\nTITLE: Updating Oban Dependencies in Mix.exs\nDESCRIPTION: Updates the Oban and Oban Pro dependency versions in the project's mix.exs file.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/upgrading/v2.17.md#2025-04-17_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\n[\n  {:oban, \"~> 2.17\"},\n  {:oban_pro, \"~> 1.2\", repo: \"oban\"}\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Reportable Protocol for Error Handling in Elixir\nDESCRIPTION: This snippet defines a Reportable protocol with a fallback implementation. It's used to determine whether an error should be reported based on the worker and attempt number.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/recipes/expected-failures.md#2025-04-17_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\ndefprotocol MyApp.Reportable do\n  @fallback_to_any true\n  def reportable?(worker, attempt)\nend\n\ndefimpl MyApp.Reportable, for: Any do\n  def reportable?(_worker, _attempt), do: true\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Inline Testing Mode\nDESCRIPTION: This snippet demonstrates how to configure Oban with the ':inline' testing mode. This mode allows jobs to run synchronously as they're inserted without database interactions, which is useful for simplified testing.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/upgrading/v2.12.md#2025-04-17_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\nconfig :my_app, Oban, testing: :inline\n```\n\n----------------------------------------\n\nTITLE: Configuring Oban Pro DynamicPruner Plugin in Elixir\nDESCRIPTION: Demonstrates how to configure the Oban.Pro.Plugins.DynamicPruner plugin with per-state retention periods.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/upgrading/v2.0.md#2025-04-17_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\nconfig :my_app, Oban,\n  plugins: [{\n    Oban.Pro.Plugins.DynamicPruner,\n    state_overrides: [\n      completed: {:max_age, {1, :day}},\n      discarded: {:max_age, {1, :month}}\n    ]\n  }]\n  ...\n```\n\n----------------------------------------\n\nTITLE: Updating Oban Dependency in Elixir\nDESCRIPTION: This snippet shows how to update the Oban dependency in the project's mix file. It specifies the new version range for Oban.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/upgrading/v2.20.md#2025-04-17_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\n[\n  {:oban, \"~> 2.20\"},\n]\n```\n\n----------------------------------------\n\nTITLE: JSON Configuration for Oban Queues\nDESCRIPTION: A sample JSON configuration file that defines the concurrency for different Oban queues. Each queue name is mapped to its concurrency value, allowing for fine-grained control over queue processing rates.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/advanced/release_configuration.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\"queues\": {\"special\": 1, \"default\": 10, \"events\": 20}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Oban for Manual Testing Mode\nDESCRIPTION: Sets up Oban to insert jobs into the database without executing them automatically, allowing them to be verified and executed when desired. This provides more control at the expense of simplicity.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/testing/testing.md#2025-04-17_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\nconfig :my_app, Oban, testing: :manual\n```\n\n----------------------------------------\n\nTITLE: Running Oban Installation Mix Task\nDESCRIPTION: This bash command runs the Oban installation mix task, which automates the manual installation steps.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/introduction/installation.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmix oban.install\n```\n\n----------------------------------------\n\nTITLE: Configuring Oban for MySQL in Elixir\nDESCRIPTION: This Elixir configuration sets up Oban to use the Dolphin engine for MySQL. It specifies the engine, queues, and repository to use.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/introduction/installation.md#2025-04-17_snippet_10\n\nLANGUAGE: elixir\nCODE:\n```\n# config/config.exs\nconfig :my_app, Oban,\n  engine: Oban.Engines.Dolphin,\n  queues: [default: 10],\n  repo: MyApp.Repo\n```\n\n----------------------------------------\n\nTITLE: Updating Oban Dependencies in Elixir Mix File\nDESCRIPTION: Updates the Oban, Oban Pro, and Oban Web dependencies to their latest versions in the mix.exs file.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/upgrading/v2.11.md#2025-04-17_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\n[\n  {:oban, \"~> 2.11\"},\n  {:oban_pro, \"~> 0.10\", repo: \"oban\"},\n  {:oban_web, \"~> 2.9\", repo: \"oban\"}\n]\n```\n\n----------------------------------------\n\nTITLE: Updating Oban.Worker Backoff Callback in Elixir\nDESCRIPTION: Modifies the backoff/1 callback to accept a full Job struct instead of just the attempt number.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/upgrading/v2.0.md#2025-04-17_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\n- def backoff(attempt)\n+ def backoff(%Job{attempt: attempt})\n```\n\n----------------------------------------\n\nTITLE: Installing Multiple Packages with Igniter in Bash\nDESCRIPTION: Demonstrates how to use the igniter installer to install multiple packages including Phoenix, Ash, and Oban in a single command.\nSOURCE: https://github.com/oban-bg/oban/blob/main/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmix igniter.install phoenix ash_phoenix ash_postgres ash_oban\n```\n\n----------------------------------------\n\nTITLE: Testing Oban Cron Plugin Configuration in Elixir\nDESCRIPTION: Uses Oban.Plugins.Cron.validate/1 to verify that a crontab configuration generated at runtime is valid. This allows testing plugin-specific configurations in isolation.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/testing/testing_config.md#2025-04-17_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\ntest \"testing cron plugin configuration\" do\n  config = MyApp.Oban.cron_config()\n\n  assert :ok = Oban.Plugins.Cron.validate(config)\nend\n```\n\n----------------------------------------\n\nTITLE: Testing Worker Backoff Callback\nDESCRIPTION: Example test case demonstrating how to test a worker's backoff callback function with different job attempts.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/testing/testing_workers.md#2025-04-17_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\ntest \"calculating custom backoff as a multiple of job attempts\" do\n  assert 2 == MyWorker.backoff(%Oban.Job{attempt: 1})\n  assert 4 == MyWorker.backoff(%Oban.Job{attempt: 2})\n  assert 6 == MyWorker.backoff(%Oban.Job{attempt: 3})\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Oban Migration in Elixir\nDESCRIPTION: This bash command generates a new Ecto migration for adding the oban_jobs table to the database.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/introduction/installation.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmix ecto.gen.migration add_oban_jobs_table\n```\n\n----------------------------------------\n\nTITLE: Configuring Oban Pruning Plugin in Elixir\nDESCRIPTION: Replaces the :prune configuration with the new Oban.Plugins.Pruner plugin.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/upgrading/v2.0.md#2025-04-17_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\nconfig :my_app, Oban,\n- prune: {:max_age, 60},\n- prune_interval: 30_000,\n- prune_limit: 5000,\n+ plugins: [{Oban.Plugins.Pruner, max_age: 60}]\n  ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Oban with Queues in Umbrella App B\nDESCRIPTION: Configuration for the second app in an umbrella application that will run Oban queues, using a different supervisor name and queue settings.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/learning/isolation.md#2025-04-17_snippet_8\n\nLANGUAGE: elixir\nCODE:\n```\nconfig :my_app_b, Oban,\n  name: MyAppB.Oban,\n  repo: MyApp.Repo,\n  queues: [default: 10]\n```\n\n----------------------------------------\n\nTITLE: Updating Oban Dependencies in Elixir\nDESCRIPTION: This snippet shows how to update the Oban and Oban Pro dependencies in the project's mix file. It specifies the new version requirements for both packages.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/upgrading/v2.14.md#2025-04-17_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\n[\n  {:oban, \"~> 2.14\"},\n  {:oban_pro, \"~> 0.13\", repo: \"oban\"}\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Oban Pro Lifeline Plugin in Elixir\nDESCRIPTION: Adds the Oban.Pro.Plugins.Lifeline plugin to retain automatic orphaned job rescue functionality.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/upgrading/v2.0.md#2025-04-17_snippet_9\n\nLANGUAGE: elixir\nCODE:\n```\nconfig :my_app, Oban,\n  plugins: [Oban.Pro.Plugins.Lifeline]\n  ...\n```\n\n----------------------------------------\n\nTITLE: Generating Migration for Oban Producers Table\nDESCRIPTION: Creates a new Ecto migration to add the oban_producers table, which is required for the SmartEngine feature in Oban Pro v2.6.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/upgrading/v2.6.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ mix ecto.gen.migration add_oban_producers\n```\n\n----------------------------------------\n\nTITLE: Inserting a Job with Default Oban Instance\nDESCRIPTION: Standard way to insert a job using the default Oban instance without specifying a supervisor name.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/learning/isolation.md#2025-04-17_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\nOban.insert(MyApp.Worker.new(%{}))\n```\n\n----------------------------------------\n\nTITLE: Configuring Gossip Plugin with Custom Interval\nDESCRIPTION: Configures the Gossip plugin with a custom broadcast interval of 5 seconds, which may be preferable for systems where the default 1-second interval is too frequent.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/upgrading/v2.6.md#2025-04-17_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\n  plugins: [\n    {Oban.Plugins.Gossip, interval: :timer.seconds(5)}\n    ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Oban Index Swap Migration in Elixir\nDESCRIPTION: Elixir code for implementing the migration to swap Oban's primary indexes, creating a new index and dropping the old one concurrently.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/upgrading/v2.11.md#2025-04-17_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\n@disable_ddl_transaction true\n@disable_migration_lock true\n\ndef change do\n  create_if_not_exists index(\n    :oban_jobs,\n    [:state, :queue, :priority, :scheduled_at, :id],\n    concurrently: true,\n    prefix: \"public\"\n  )\n\n  drop_if_exists index(\n    :oban_jobs,\n    [:queue, :state, :priority, :scheduled_at, :id],\n    concurrently: true,\n    prefix: \"public\"\n  )\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Oban for Inline Testing Mode\nDESCRIPTION: Sets up Oban to execute jobs immediately within the calling process without touching the database. This configuration is simpler but may not be suitable for complex job scenarios.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/testing/testing.md#2025-04-17_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\nconfig :my_app, Oban, testing: :inline\n```\n\n----------------------------------------\n\nTITLE: Implementing Reportable Protocol in FlakyWorker\nDESCRIPTION: This code shows how to implement the Reportable protocol for a specific worker (FlakyWorker). It sets a threshold of 3 attempts before reporting errors.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/recipes/expected-failures.md#2025-04-17_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyApp.Workers.FlakyWorker do\n  use Oban.Worker\n\n  defstruct []\n\n  defimpl MyApp.Reportable do\n    @threshold 3\n\n    def reportable?(_worker, attempt), do: attempt > @threshold\n  end\n\n  @impl true\n  def perform(%{args: %{\"email\" => email}}) do\n    MyApp.ExternalService.deliver(email)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Ecto Migration for Swapping Oban Indexes\nDESCRIPTION: Bash command to generate a new Ecto migration file for swapping the primary Oban indexes.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/upgrading/v2.11.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ mix ecto.gen.migration swap_primary_oban_indexes\n```\n\n----------------------------------------\n\nTITLE: Using Oban Facade for Job Insertion\nDESCRIPTION: Example of inserting a job using an Oban facade module instead of the default Oban module, targeting a specific isolated instance.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/learning/isolation.md#2025-04-17_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\nMyApp.ObanA.insert(MyApp.Worker.new(%{}))\n```\n\n----------------------------------------\n\nTITLE: Implementing Oban Migration in Elixir\nDESCRIPTION: Elixir code for implementing the Oban migration to create the oban_peers table, using Oban.Migrations.up and down functions.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/upgrading/v2.11.md#2025-04-17_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\nuse Ecto.Migration\n\ndef up, do: Oban.Migrations.up(version: 11)\n\ndef down, do: Oban.Migrations.down(version: 11)\n```\n\n----------------------------------------\n\nTITLE: Generating Ecto Migration for Oban Peers Table\nDESCRIPTION: Bash command to generate a new Ecto migration file for creating the oban_peers table.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/upgrading/v2.11.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ mix ecto.gen.migration create_oban_peers\n```\n\n----------------------------------------\n\nTITLE: Refuting Enqueued Jobs in Oban with Elixir\nDESCRIPTION: Shows how to verify that a job was not enqueued when an operation fails using the refute_enqueued helper.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/testing/testing_queues.md#2025-04-17_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\ntest \"bypassing activation when sign up fails\" do\n  {:error, _reason} = MyApp.Account.sign_up(email: \"parker@example.com\")\n\n  refute_enqueued worker: MyApp.ActivationWorker\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Reporter with Reportable Protocol in Elixir\nDESCRIPTION: This snippet shows the implementation of an ErrorReporter module that uses the Reportable protocol to determine whether to send error notifications to Honeybadger.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/recipes/expected-failures.md#2025-04-17_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyApp.ErrorReporter do\n  alias MyApp.Reportable\n\n  def handle_event(_, _, meta, _) do\n    worker_struct = maybe_get_worker_struct(meta.job.worker)\n\n    if Reportable.reportable?(worker_struct, meta.job.attempt) do\n      context = Map.take(meta.job, [:id, :args, :queue, :worker])\n\n      Honeybadger.notify(meta.reason, context, meta.stacktrace)\n    end\n  end\n\n  def maybe_get_worker_struct(worker) do\n    try do\n      {:ok, module} = Oban.Worker.from_string(worker)\n\n      struct(module)\n    rescue\n      UndefinedFunctionError -> worker\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Mounting Oban Dashboard in Phoenix Router\nDESCRIPTION: Updates the router to use the oban_dashboard macro for mounting the Oban dashboard.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/upgrading/v2.0.md#2025-04-17_snippet_17\n\nLANGUAGE: elixir\nCODE:\n```\n+ import Oban.Web.Router\n\nscope \"/\" do\n  pipe_through :browser\n\n-  live \"/oban\", ObanWeb.DashboardLive, layout: {ObanWeb.LayoutView, \"app.html\"}\n+  oban_dashboard(\"/oban\")\nend\n```\n\n----------------------------------------\n\nTITLE: Updating Oban Testing Configuration in Elixir\nDESCRIPTION: This diff illustrates how to update the Oban configuration for testing environments. It replaces the old method of disabling queues and plugins with the new :testing option introduced in v2.12.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/upgrading/v2.14.md#2025-04-17_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\n# test.exs\n- config :my_app, Oban, queues: false, plugins: false\n+ config :my_app, Oban, testing: :manual\n```\n\n----------------------------------------\n\nTITLE: Removing Repeater Plugin from Oban Configuration in Elixir\nDESCRIPTION: This diff demonstrates how to remove the Oban.Plugins.Repeater from the plugins list in the Oban configuration. The Repeater plugin is no longer necessary as the new Stager falls back to polling mode automatically.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/upgrading/v2.14.md#2025-04-17_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\nplugins: [\n  Oban.Plugins.Lifeline,\n  Oban.Plugins.Pruner,\n-  Oban.Plugins.Repeater\n```\n\n----------------------------------------\n\nTITLE: Creating Interface Functions for Oban Plugins\nDESCRIPTION: Example demonstrating how to implement interface functions for Oban plugins using the Oban.Registry for process discovery. This pattern allows calling plugin functions regardless of the Oban instance name.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/advanced/writing_plugins.md#2025-04-17_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\nalias Oban.Registry\n\ndef pause(oban_name \\\\ Oban) do\n  oban_name\n  |> Registry.whereis({:plugin, __MODULE__})\n  |> GenServer.call(:pause)\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Oban Migration Version as SQL Comment\nDESCRIPTION: This SQL snippet demonstrates how to set the latest Oban migration version as a comment on the oban_jobs table. This prevents unexpected re-running of all migrations, especially after database restores that may strip comments.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/advanced/troubleshooting.md#2025-04-17_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCOMMENT ON TABLE public.oban_jobs IS '10'\"\n```\n\n----------------------------------------\n\nTITLE: Updating Oban Dependencies in Elixir\nDESCRIPTION: Updates the Oban dependency to version 2.0.0 in the project's dependency list.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/upgrading/v2.0.md#2025-04-17_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\n  defp deps do\n    [\n      {:oban, \"~> 2.0.0\"}\n      ...\n    ]\n  end\n```\n\n----------------------------------------\n\nTITLE: Calling Oban Plugin Interface Functions\nDESCRIPTION: Example showing how to call interface functions on an Oban plugin from elsewhere in the application, either using the default Oban instance or a named instance.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/advanced/writing_plugins.md#2025-04-17_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\nMyApp.Plugins.Breakdown.pause()\n\n# or\n\nMyApp.Plugins.Breakdown.pause(MyApp.OtherOban)\n```\n\n----------------------------------------\n\nTITLE: Updating Test Configuration with Manual Mode\nDESCRIPTION: A diff showing how to replace the old test configuration with the new ':testing' option set to ':manual'. This simplifies test setup by replacing the previous explicit 'queues: false, plugins: false' configuration.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/upgrading/v2.12.md#2025-04-17_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n# test.exs\n- config :my_app, Oban, queues: false, plugins: false\n+ config :my_app, Oban, testing: :manual\n```\n\n----------------------------------------\n\nTITLE: Updating Oban Dependencies in Mix.exs\nDESCRIPTION: Updates Oban, Oban Web, and Oban Pro dependencies to their latest versions in the project's Mix.exs file. This is the first step in the upgrade process to v2.6.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/upgrading/v2.6.md#2025-04-17_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\n[\n  {:oban, \"~> 2.6\"},\n  {:oban_web, \"~> 2.6\", repo: \"oban\"},\n  {:oban_pro, \"~> 0.7\", repo: \"oban\"}\n  ...\n]\n```\n\n----------------------------------------\n\nTITLE: Temporarily Switching to Inline Testing Mode\nDESCRIPTION: Shows how to temporarily change Oban's testing mode from manual to inline within a function context using the Oban.Testing.with_testing_mode/2 helper. This enables immediate job execution in an otherwise manual setup.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/testing/testing.md#2025-04-17_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\nOban.Testing.with_testing_mode(:inline, fn ->\n  {:ok, %Job{state: \"completed\"}} = Oban.insert(MyWorker.new(%{id: 123}))\nend)\n```\n\n----------------------------------------\n\nTITLE: Updating Oban Web and Pro Dependencies in Elixir\nDESCRIPTION: Updates Oban, Oban.Web, and Oban.Pro dependencies to their respective versions for Oban Web+Pro users.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/upgrading/v2.0.md#2025-04-17_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\n  defp deps do\n    [\n      {:oban, \"~> 2.0.0\"},\n      {:oban_web, \"~> 2.0.0\", organization: \"oban\"},\n      {:oban_pro, \"~> 0.3.0\", organization: \"oban\"}\n      ...\n    ]\n  end\n```\n\n----------------------------------------\n\nTITLE: Configuring SmartEngine in Oban\nDESCRIPTION: Updates the Oban configuration to use the new SmartEngine instead of the default engine. This is required to enable global concurrency and other advanced features.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/upgrading/v2.6.md#2025-04-17_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\nconfig :my_app, Oban,\n  engine: Oban.Pro.Queue.SmartEngine,\n  ...\n```\n\n----------------------------------------\n\nTITLE: Updating Oban Plugin Configuration for Multi-Node Setups in Elixir\nDESCRIPTION: Diff showing the change in Oban plugin configuration from disabling plugins to using an empty list for multi-node setups.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/upgrading/v2.11.md#2025-04-17_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\n-plugins: false\n+plugins: []\n```\n\n----------------------------------------\n\nTITLE: Configuring Selective Event Logging for Oban in Elixir\nDESCRIPTION: Shows how to use the new 'events' option in attach_default_logger/1 to selectively log specific Oban events, focusing on important notices without logging all job activity.\nSOURCE: https://github.com/oban-bg/oban/blob/main/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\nOban.Telemetry.attach_default_logger(events: ~w(notifier peer stager)a)\n```\n\n----------------------------------------\n\nTITLE: Testing Multiple Enqueued Jobs in Oban with Elixir\nDESCRIPTION: Demonstrates how to assert that multiple jobs from the same worker are enqueued using the all_enqueued helper and checking the number of jobs.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/testing/testing_queues.md#2025-04-17_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\ntest \"enqueuing one job for each child record\" do\n  :ok = MyApp.Account.notify_owners(account())\n\n  assert jobs = all_enqueued(worker: MyApp.NotificationWorker)\n  assert 3 == length(jobs)\nend\n```\n\n----------------------------------------\n\nTITLE: Simplifying Lifeline Plugin Configuration\nDESCRIPTION: Updates the Lifeline plugin configuration by removing the deprecated record_interval and delete_interval options while retaining the still-supported rescue_interval option.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/upgrading/v2.6.md#2025-04-17_snippet_8\n\nLANGUAGE: elixir\nCODE:\n```\nplugins: [{\n  Oban.Pro.Plugins.Lifeline,\n- delete_interval: :timer.minutes(10),\n- record_interval: :timer.seconds(10),\n  rescue_interval: :timer.minutes(5)\n}]\n```\n\n----------------------------------------\n\nTITLE: Generating Oban Migration in Bash\nDESCRIPTION: This command generates a new Ecto migration file for upgrading Oban jobs to version 13. It uses the mix task ecto.gen.migration to create the file.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/upgrading/v2.20.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ mix ecto.gen.migration upgrade_oban_jobs_to_v13\n```\n\n----------------------------------------\n\nTITLE: Updating Oban Telemetry Event Handler in Elixir\nDESCRIPTION: Updates the telemetry event handler to match the new event names and metadata structure.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/upgrading/v2.0.md#2025-04-17_snippet_12\n\nLANGUAGE: elixir\nCODE:\n```\n- def handle_event([:oban, :failure], measure, meta, _) do\n+ def handle_event([:oban, :job, :exception], measure, meta, _) do\n```\n\n----------------------------------------\n\nTITLE: Updating Oban Dependencies in mix.exs\nDESCRIPTION: This snippet shows how to update Oban and Oban Pro dependencies in your mix.exs file. It specifies the version constraints for both packages, with Oban Pro being pulled from a private repository.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/upgrading/v2.12.md#2025-04-17_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\n[\n  {:oban, \"~> 2.12\"},\n  {:oban_pro, \"~> 0.11\", repo: \"oban\"}\n]\n```\n\n----------------------------------------\n\nTITLE: Updating Oban.Worker Callback in Elixir\nDESCRIPTION: Changes the perform/2 callback to perform/1, accepting an Oban.Job struct instead of separate args and job parameters.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/upgrading/v2.0.md#2025-04-17_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\n- def perform(%{\"id\" => id}, _job)\n+ def perform(%Job{args: %{\"id\" => id}})\n```\n\n----------------------------------------\n\nTITLE: Updating Oban Telemetry Attachment in Elixir\nDESCRIPTION: Updates the telemetry attachment call to use the new event names.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/upgrading/v2.0.md#2025-04-17_snippet_13\n\nLANGUAGE: elixir\nCODE:\n```\n- :telemetry.attach(\"oban\", [[:oban, :failure]], &handle_event/4, %{})\n+ :telemetry.attach(\"oban\", [[:oban, :job, :exception]], &handle_event/4, %{})\n```\n\n----------------------------------------\n\nTITLE: Fields vs Keys Comparison in Unique Jobs Configuration\nDESCRIPTION: Illustrates the difference between using just the fields option versus combining it with the keys option for more granular control over uniqueness checking.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/learning/unique_jobs.md#2025-04-17_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\n# This compares the entire args map\nuse Oban.Worker,\n  unique: [fields: [:worker, :queue, :args]]\n\n# This compares only the :url key within the args map\nuse Oban.Worker,\n  unique: [keys: [:url], fields: [:worker, :queue, :args]]\n```\n\n----------------------------------------\n\nTITLE: Removing WorkflowManager Plugin\nDESCRIPTION: Shows how to remove the now-unnecessary WorkflowManager plugin from Oban's configuration, as improvements in worker configuration handling have made it obsolete.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/upgrading/v2.6.md#2025-04-17_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\nplugins: [\n  Oban.Pro.Plugins.Lifeline,\n- Oban.Pro.Plugins.WorkflowManager,\n  ...\n```\n\n----------------------------------------\n\nTITLE: Simple Migration for Oban Producers Table\nDESCRIPTION: A basic Ecto migration that delegates to Oban.Pro.Migrations.Producers to create the oban_producers table needed for the SmartEngine.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/upgrading/v2.6.md#2025-04-17_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\nuse Ecto.Migration\n\ndefdelegate change, to: Oban.Pro.Migrations.Producers\n```\n\n----------------------------------------\n\nTITLE: Updating Oban Configuration in Elixir\nDESCRIPTION: Replaces the :verbose setting with :log in the Oban configuration.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/upgrading/v2.0.md#2025-04-17_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\nconfig :my_app, Oban,\n- verbose: false,\n+ log: false\n  ...\n```\n\n----------------------------------------\n\nTITLE: Disabling Insert Trigger Configuration\nDESCRIPTION: Configuration diff showing how to disable insert triggers in Oban configuration.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/upgrading/v2.17.md#2025-04-17_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n config :my_app, Oban,\n+  insert_trigger: false,\n   ...\n```\n\n----------------------------------------\n\nTITLE: Advanced Migration for Multiple Oban Producers Tables with Prefixes\nDESCRIPTION: An expanded Ecto migration that creates multiple oban_producers tables with different prefixes for environments with multiple Oban instances.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/upgrading/v2.6.md#2025-04-17_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\nuse Ecto.Migration\n\ndef change do\n  Oban.Pro.Migrations.Producers.change()\n  Oban.Pro.Migrations.Producers.change(prefix: \"special\")\n  Oban.Pro.Migrations.Producers.change(prefix: \"private\")\nend\n```\n\n----------------------------------------\n\nTITLE: Updating Oban Telemetry Metadata Usage in Elixir\nDESCRIPTION: Updates the reference to the stacktrace in telemetry metadata from stack to stacktrace.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/upgrading/v2.0.md#2025-04-17_snippet_14\n\nLANGUAGE: elixir\nCODE:\n```\n- Sentry.capture_exception(meta.error, stacktrace: meta.stack, extra: extra)\n+ Sentry.capture_exception(meta.error, stacktrace: meta.stacktrace, extra: extra)\n```\n\n----------------------------------------\n\nTITLE: Removing Gossip Plugin Configuration\nDESCRIPTION: Configuration diff showing the removal of the now-deprecated Gossip plugin.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/upgrading/v2.17.md#2025-04-17_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n config :my_app, Oban,\n   plugins: [\n-    Oban.Plugins.Gossip,\n   ]\n```\n\n----------------------------------------\n\nTITLE: Setting up Oban Test Environment\nDESCRIPTION: This snippet shows a bash command to set up the test environment for Oban, creating and migrating the necessary database for testing.\nSOURCE: https://github.com/oban-bg/oban/blob/main/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmix test.setup\n```\n\n----------------------------------------\n\nTITLE: Example Error Output for Invalid Oban Configuration\nDESCRIPTION: Shows the error format returned when Oban.Config.validate/1 encounters invalid configuration options, such as an incorrect engine specification.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/testing/testing_config.md#2025-04-17_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\n{:error, \"expected :engine to be an Oban.Queue.Engine, got: MyApp.Repo\"}\n```\n\n----------------------------------------\n\nTITLE: Installing Oban with Igniter and Custom Repo\nDESCRIPTION: This bash command demonstrates how to use Igniter to install Oban with a custom repository specified using the --repo flag.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/introduction/installation.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmix igniter.install oban --repo MyApp.LiteRepo\n```\n\n----------------------------------------\n\nTITLE: Generating Oban Migration File\nDESCRIPTION: Terminal command to generate a new migration file for upgrading Oban jobs to v12.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/upgrading/v2.17.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ mix ecto.gen.migration upgrade_oban_jobs_to_v12\n```\n\n----------------------------------------\n\nTITLE: Creating a Message Receiver Loop for Progress Broadcasting\nDESCRIPTION: The await_zip/1 function implements a receive loop that waits for progress and completion messages from the zip-building task. It broadcasts these updates to the specified Phoenix channel and includes a timeout for error handling.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/recipes/reporting-progress.md#2025-04-17_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\n  defp await_zip(channel) do\n    receive do\n      {:progress, percent} ->\n        Endpoint.broadcast(channel, \"zip:progress\", percent)\n        await_zip(channel)\n\n      {:complete, zip_path} ->\n        Endpoint.broadcast(channel, \"zip:complete\", zip_path)\n    after\n      30_000 ->\n        Endpoint.broadcast(channel, \"zip:failed\", \"zipping failed\")\n        raise RuntimeError, \"no progress after 30s\"\n    end\n  end\n```\n\n----------------------------------------\n\nTITLE: Running Oban CI Checks Locally\nDESCRIPTION: This bash command runs the CI checks for Oban locally, which includes formatting, dependency, linting, testing, and typing checks to ensure code quality before committing.\nSOURCE: https://github.com/oban-bg/oban/blob/main/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmix test.ci\n```\n\n----------------------------------------\n\nTITLE: Disabling Oban Pruning in Test Mode\nDESCRIPTION: Updates the configuration to disable pruning in test mode by setting plugins to false.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/upgrading/v2.0.md#2025-04-17_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\nconfig :my_app, Oban,\n-  prune: false,\n+  plugins: false\n  ...\n```\n\n----------------------------------------\n\nTITLE: Updating Oban Queue Draining in Tests\nDESCRIPTION: Updates the drain_queue function call in integration tests to use the new argument format.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/upgrading/v2.0.md#2025-04-17_snippet_11\n\nLANGUAGE: elixir\nCODE:\n```\n- Oban.drain_queue(:myqueue, with_safety: false)\n+ Oban.drain_queue(queue: :myqueue, with_safety: false)\n```\n\n----------------------------------------\n\nTITLE: Removing ObanWeb from Supervision Tree in Elixir\nDESCRIPTION: Removes the ObanWeb entry from the application's supervision tree.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/upgrading/v2.0.md#2025-04-17_snippet_16\n\nLANGUAGE: elixir\nCODE:\n```\nchildren = [\n  MyApp.Repo,\n  MyApp.Endpoint,\n  {Oban, oban_opts},\n- {ObanWeb, oban_web_opts}\n]\n```\n\n----------------------------------------\n\nTITLE: Optimizing Oban Worker Uniqueness in Elixir\nDESCRIPTION: This snippet demonstrates how to optimize the uniqueness configuration for Oban workers. It sets the period to infinity and specifies keys for uniqueness, improving efficiency and reducing unnecessary constraints.\nSOURCE: https://github.com/oban-bg/oban/blob/main/guides/advanced/scaling.md#2025-04-17_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\nuse Oban.Worker, unique: [\n-   period: {1, :hour},\n+   period: :infinity,\n+   keys: [:some_key]\n```"
  }
]