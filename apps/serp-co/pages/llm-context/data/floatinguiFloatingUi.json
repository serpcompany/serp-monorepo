[
  {
    "owner": "floating-ui",
    "repo": "floating-ui",
    "content": "TITLE: Wrapping computePosition with Conditional Middleware (JavaScript)\nDESCRIPTION: This JavaScript function demonstrates wrapping the Floating UI computePosition method to set up middleware arrays that include optional middleware based on options flags (enableFlip and arrowEl). Middleware functions (e.g., flip, arrow) are included conditionally, allowing the underlying MiddlewareOption type to filter out any falsy values. Prerequisites are computePosition, flip, and arrow functions, as well as required DOM elements; the function receives reference and floating elements along with configuration options. Inputs are the two DOM nodes and options, while output is the result of computePosition with selected middleware.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/computePosition.mdx#2025-04-23_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction wrapper(referenceEl, floatingEl, options) {\n  return computePosition(referenceEl, floatingEl, {\n    ...options,\n    middleware: [\n      options.enableFlip && flip(),\n      options.arrowEl && arrow({element: options.arrowEl}),\n    ],\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up HTML structure for Floating UI tooltip\nDESCRIPTION: Creates the basic HTML structure for a button with an associated tooltip, including the necessary aria attributes.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/tutorial.mdx#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n  <head>\n    <title>Floating UI Tutorial</title>\n  </head>\n  <body>\n    <button id=\"button\" aria-describedby=\"tooltip\">\n      My button\n    </button>\n    <div id=\"tooltip\" role=\"tooltip\">My tooltip</div>\n\n    <script type=\"module\">\n      // Your code will go here.\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Creating Tooltip Delay Groups for Improved UX\nDESCRIPTION: Implements a delay group for multiple tooltips to share the same delay timing. This improves user experience by making nearby tooltips behave consistently when hovering between them.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/tooltip.mdx#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n<FloatingDelayGroup delay={200}>\n  <Tooltip>\n    <TooltipTrigger>Ref 1</TooltipTrigger>\n    <TooltipContent className=\"Tooltip\">Label 1</TooltipContent>\n  </Tooltip>\n  <Tooltip>\n    <TooltipTrigger>Ref 2</TooltipTrigger>\n    <TooltipContent className=\"Tooltip\">Label 2</TooltipContent>\n  </Tooltip>\n  <Tooltip>\n    <TooltipTrigger>Ref 3</TooltipTrigger>\n    <TooltipContent className=\"Tooltip\">Label 3</TooltipContent>\n  </Tooltip>\n</FloatingDelayGroup>\n```\n\n----------------------------------------\n\nTITLE: Using flip middleware for automatic placement adjustment\nDESCRIPTION: Implements the flip middleware to automatically adjust the tooltip's placement when it doesn't fit in the viewport.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/tutorial.mdx#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  computePosition,\n  flip,\n} from 'https://cdn.jsdelivr.net/npm/@floating-ui/dom@__DOM_VERSION__/+esm';\n\nconst button = document.querySelector('#button');\nconst tooltip = document.querySelector('#tooltip');\n\ncomputePosition(button, tooltip, {\n  placement: 'top',\n  middleware: [flip()],\n}).then(({x, y}) => {\n  Object.assign(tooltip.style, {\n    left: `${x}px`,\n    top: `${y}px`,\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Popovers with FloatingTree in React\nDESCRIPTION: This code snippet demonstrates how to create an infinitely nestable Popover component using FloatingTree, FloatingNode and related hooks. It shows the proper way to subscribe components to the tree context and handle nested floating UI elements.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/FloatingTree.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  FloatingTree,\n  FloatingNode,\n  useFloatingNodeId,\n} from '@floating-ui/react';\n\nfunction Popover({children, content}) {\n  const [isOpen, setIsOpen] = useState(false);\n\n  // Subscribe this component to the <FloatingTree> wrapper:\n  const nodeId = useFloatingNodeId();\n\n  // Pass the subscribed `nodeId` to `useFloating`:\n  const {refs, floatingStyles} = useFloating({\n    nodeId,\n    open: isOpen,\n    onOpenChange: setIsOpen,\n  });\n\n  // Wrap the rendered floating element in a `<FloatingNode>`,\n  // passing in the subscribed `nodeId`:\n  return (\n    <>\n      {cloneElement(children, {ref: refs.setReference})}\n      <FloatingNode id={nodeId}>\n        {isOpen && (\n          <FloatingPortal>\n            <div ref={refs.setFloating}>{content}</div>\n          </FloatingPortal>\n        )}\n      </FloatingNode>\n    </>\n  );\n}\n\nfunction App() {\n  return (\n    <FloatingTree>\n      <Popover\n        content={\n          <Popover content=\"Nested content\">\n            <button>Nested reference</button>\n          </Popover>\n        }\n      >\n        <button>Root reference</button>\n      </Popover>\n    </FloatingTree>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Multiple Floating Elements on a Single Reference\nDESCRIPTION: Technique for attaching multiple floating elements (like a tooltip and a menu) to the same reference element using the useMergeRefs hook and prop merging.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/react.mdx#2025-04-23_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nimport {useMergeRefs} from '@floating-ui/react';\n```\n\nLANGUAGE: js\nCODE:\n```\nconst {refs: tooltipRefs} = useFloating();\nconst {refs: menuRefs} = useFloating();\n\nconst {getReferenceProps: getTooltipReferenceProps} =\n  useInteractions([]);\nconst {getReferenceProps: getMenuReferenceProps} =\n  useInteractions([]);\n\nconst ref = useMergeRefs([\n  tooltipRefs.setReference,\n  menuRefs.setReference,\n]);\nconst props = getTooltipReferenceProps(getMenuReferenceProps());\n\nreturn (\n  <button ref={ref} {...props}>\n    Common reference\n  </button>\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Floating UI Implementation in React Native\nDESCRIPTION: Basic example showing how to implement Floating UI positioning with reference and floating elements using the useFloating hook.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/react-native.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport {View, Text} from 'react-native';\nimport {useFloating, shift} from '@floating-ui/react-native';\n\nfunction App() {\n  const {refs, floatingStyles} = useFloating({\n    middleware: [shift()],\n  });\n\n  return (\n    <View>\n      <View ref={refs.setReference} collapsable={false}>\n        <Text>Reference</Text>\n      </View>\n      <View\n        ref={refs.setFloating}\n        collapsable={false}\n        style={floatingStyles}\n      >\n        <Text>Floating</Text>\n      </View>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Floating UI with useFloating Hook for Tooltip Positioning\nDESCRIPTION: Implements the useFloating hook to handle tooltip positioning, including middleware for offset, flip, and shift behavior. This ensures the tooltip remains anchored to its reference element and stays within the viewport.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/tooltip.mdx#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport {\n  useFloating,\n  autoUpdate,\n  offset,\n  flip,\n  shift,\n} from '@floating-ui/react';\n\nfunction Tooltip() {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const {refs, floatingStyles, context} = useFloating({\n    open: isOpen,\n    onOpenChange: setIsOpen,\n    middleware: [offset(10), flip(), shift()],\n    whileElementsMounted: autoUpdate,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Tooltips on Disabled Buttons in React\nDESCRIPTION: Creates a modified Button component that remains accessible to tooltip events even when visually disabled. Uses aria-disabled instead of the disabled attribute to maintain event handling capabilities.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/tooltip.mdx#2025-04-23_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst Button = React.forwardRef(function Button(\n  {visuallyDisabled, disabled, ...props},\n  ref,\n) {\n  return (\n    <button\n      {...props}\n      ref={ref}\n      disabled={visuallyDisabled ? undefined : disabled}\n      aria-disabled={visuallyDisabled ? 'true' : undefined}\n      // You'll want to do this for all relevant event handlers.\n      onClick={visuallyDisabled ? undefined : props.onClick}\n    />\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Floating UI React Package\nDESCRIPTION: Command to install the React version of Floating UI with full features including positioning and interactions.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/getting-started.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @floating-ui/react\n```\n\n----------------------------------------\n\nTITLE: Implementing shift middleware for viewport containment\nDESCRIPTION: Adds the shift middleware to ensure the tooltip stays within the viewport boundaries, even when its content is wider than the reference element.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/tutorial.mdx#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  computePosition,\n  flip,\n  shift,\n} from 'https://cdn.jsdelivr.net/npm/@floating-ui/dom@__DOM_VERSION__/+esm';\n\nconst button = document.querySelector('#button');\nconst tooltip = document.querySelector('#tooltip');\n\ncomputePosition(button, tooltip, {\n  placement: 'top',\n  middleware: [flip(), shift()],\n}).then(({x, y}) => {\n  Object.assign(tooltip.style, {\n    left: `${x}px`,\n    top: `${y}px`,\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Floating UI with Arrow Middleware in JavaScript\nDESCRIPTION: Demonstrates importing necessary functions from `@floating-ui/dom` and using `computePosition` to calculate the tooltip's position. It specifically includes the `arrow` middleware, passing the arrow DOM element (`arrowElement`) as a configuration option. The calculated `x` and `y` are then applied to the tooltip's style.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/tutorial.mdx#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  computePosition,\n  flip,\n  shift,\n  offset,\n  arrow,\n} from 'https://cdn.jsdelivr.net/npm/@floating-ui/dom@__DOM_VERSION__/+esm';\n\nconst button = document.querySelector('#button');\nconst tooltip = document.querySelector('#tooltip');\nconst arrowElement = document.querySelector('#arrow');\n\ncomputePosition(button, tooltip, {\n  placement: 'top',\n  middleware: [\n    offset(6),\n    flip(),\n    shift({padding: 5}),\n    arrow({element: arrowElement}),\n  ],\n}).then(({x, y}) => {\n  Object.assign(tooltip.style, {\n    left: `${x}px`,\n    top: `${y}px`,\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Positioning the tooltip with Floating UI\nDESCRIPTION: Uses Floating UI's computePosition function to dynamically position the tooltip relative to the button.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/tutorial.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {computePosition} from 'https://cdn.jsdelivr.net/npm/@floating-ui/dom@__DOM_VERSION__/+esm';\n\nconst button = document.querySelector('#button');\nconst tooltip = document.querySelector('#tooltip');\n\ncomputePosition(button, tooltip).then(({x, y}) => {\n  Object.assign(tooltip.style, {\n    left: `${x}px`,\n    top: `${y}px`,\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Floating Arrow Positioning using useFloating and arrow Middleware - Vue\nDESCRIPTION: Combines useFloating and the arrow middleware to position a floating arrow element relative to its reference element using Vue templates and refs. MiddlewareData returned from useFloating gives calculated arrow coordinates, which are applied as inline style properties. Requires proper template refs for the arrow, floating, and reference elements, as well as importing arrow and useFloating functions.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/vue.mdx#2025-04-23_snippet_11\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport {arrow, useFloating} from '@floating-ui/vue';\nimport {ref} from 'vue';\n\nconst reference = ref(null);\nconst floating = ref(null);\nconst floatingArrow = ref(null);\n\nconst {floatingStyles, middlewareData} = useFloating(\n  reference,\n  floating,\n  {\n    middleware: [arrow({element: floatingArrow})],\n  },\n);\n</script>\n\n<template>\n  <span ref=\"reference\">Reference</span>\n  <div ref=\"floating\" :style=\"floatingStyles\">\n    Floating\n    <div\n      ref=\"floatingArrow\"\n      :style=\"{\n        position: 'absolute',\n        left:\n          middlewareData.arrow?.x != null\n            ? `${middlewareData.arrow.x}px`\n            : '',\n        top:\n          middlewareData.arrow?.y != null\n            ? `${middlewareData.arrow.y}px`\n            : '',\n      }\"\n    ></div>\n  </div>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Interaction Hooks for Accessible Popovers in React\nDESCRIPTION: Sets up interaction hooks to handle clicks, dismissal events, and ARIA roles for accessibility. The useInteractions hook merges all interactions into prop getters that can be spread onto the reference and floating elements.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/popover.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  // ...\n  useClick,\n  useDismiss,\n  useRole,\n  useInteractions,\n} from '@floating-ui/react';\n\nfunction Popover() {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const {refs, floatingStyles, context} = useFloating({\n    open: isOpen,\n    onOpenChange: setIsOpen,\n    middleware: [offset(10), flip(), shift()],\n    whileElementsMounted: autoUpdate,\n  });\n\n  const click = useClick(context);\n  const dismiss = useDismiss(context);\n  const role = useRole(context);\n\n  // Merge all the interactions into prop getters\n  const {getReferenceProps, getFloatingProps} = useInteractions([\n    click,\n    dismiss,\n    role,\n  ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Hover and Focus Interactions\nDESCRIPTION: Example of using interaction hooks (useHover and useFocus) to add hover and focus behavior to floating elements, with useInteractions to merge the event handlers.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/react.mdx#2025-04-23_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nimport {\n  useFloating,\n  useInteractions,\n  useHover,\n  useFocus,\n} from '@floating-ui/react';\n\n// Inside your component\nconst {refs, context} = useFloating({\n  open: isOpen,\n  onOpenChange: setIsOpen,\n});\n\nconst hover = useHover(context);\nconst focus = useFocus(context);\n\nconst {getReferenceProps, getFloatingProps} = useInteractions([\n  hover,\n  focus,\n]);\n```\n\n----------------------------------------\n\nTITLE: Applying Dynamic Styles to the Arrow Element in JavaScript\nDESCRIPTION: Demonstrates how to use the arrow coordinates (`arrowX`, `arrowY`) obtained from `middlewareData` and the final `placement` to dynamically style the arrow element. It calculates the `staticSide` (the side the arrow attaches to) based on the placement and applies the `left`, `top`, and `staticSide` CSS properties to position the arrow correctly relative to the tooltip body.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/tutorial.mdx#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ncomputePosition(button, tooltip, {\n  placement: 'top',\n  middleware: [\n    offset(6),\n    flip(),\n    shift({padding: 5}),\n    arrow({element: arrowElement}),\n  ],\n}).then(({x, y, placement, middlewareData}) => {\n  Object.assign(tooltip.style, {\n    left: `${x}px`,\n    top: `${y}px`,\n  });\n\n  // Accessing the data\n  const {x: arrowX, y: arrowY} = middlewareData.arrow;\n\n  const staticSide = {\n    top: 'bottom',\n    right: 'left',\n    bottom: 'top',\n    left: 'right',\n  }[placement.split('-')[0]];\n\n  Object.assign(arrowElement.style, {\n    left: arrowX != null ? `${arrowX}px` : '',\n    top: arrowY != null ? `${arrowY}px` : '',\n    right: '',\n    bottom: '',\n    [staticSide]: '-4px',\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Deriving Middleware Options from State in flip() - Floating UI JavaScript\nDESCRIPTION: Illustrates deriving flip() configuration such as padding dynamically from state, leveraging the middleware lifecycle state provided by Floating UI. This technique allows responsive adjustment of middleware behavior based on reference element dimensions, requiring the developer to define a callback function that returns the options object.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/flip.mdx#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nflip((state) => ({\n  padding: state.rects.reference.width,\n}));\n```\n\n----------------------------------------\n\nTITLE: Rendering an Accessible Popover Component in React\nDESCRIPTION: Renders the complete popover component with reference and floating elements. The FloatingFocusManager handles focus management, and the interaction props are spread onto the appropriate elements to enable accessibility features.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/popover.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Popover() {\n  // ...\n  return (\n    <>\n      <button ref={refs.setReference} {...getReferenceProps()}>\n        Reference element\n      </button>\n      {isOpen && (\n        <FloatingFocusManager context={context} modal={false}>\n          <div\n            ref={refs.setFloating}\n            style={floatingStyles}\n            {...getFloatingProps()}\n          >\n            Popover element\n          </div>\n        </FloatingFocusManager>\n      )}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Basic Tooltip Component in React\nDESCRIPTION: Renders the reference element (button) and tooltip element with proper refs and props from the interaction hooks. The tooltip is conditionally rendered based on the isOpen state.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/tooltip.mdx#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nfunction Tooltip() {\n  // ...\n  return (\n    <>\n      <button ref={refs.setReference} {...getReferenceProps()}>\n        Reference element\n      </button>\n      {isOpen && (\n        <div\n          ref={refs.setFloating}\n          style={floatingStyles}\n          {...getFloatingProps()}\n        >\n          Tooltip element\n        </div>\n      )}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Dismissal Events\nDESCRIPTION: Example showing how to handle dismissal events using the onOpenChange callback with reason parameter to determine the type of dismissal.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useDismiss.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nuseFloating({\n  open: isOpen,\n  onOpenChange(nextOpen, event, reason) {\n    setIsOpen(nextOpen);\n\n    // Other ones include 'reference-press' and 'ancestor-scroll'\n    // if enabled.\n    if (reason === 'escape-key' || reason === 'outside-press') {\n      console.log('Dismissed');\n    }\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Positioning with useFloating\nDESCRIPTION: Minimal example showing how to use useFloating hook to position a tooltip at the bottom center of a button, using refs and style objects.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/react.mdx#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nfunction App() {\n  const {refs, floatingStyles} = useFloating();\n  return (\n    <>\n      <button ref={refs.setReference}>Button</button>\n      <div ref={refs.setFloating} style={floatingStyles}>\n        Tooltip\n      </div>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Checking If Floating Element Is Positioned Using useFloating (JavaScript)\nDESCRIPTION: Shows how to check the isPositioned boolean returned by useFloating, which indicates whether positioning calculations have finished. Requires passing the open option to useFloating for correct operation, especially important in useEffect or event handlers.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useFloating.mdx#2025-04-23_snippet_26\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {isPositioned} = useFloating();\n\n```\n\n----------------------------------------\n\nTITLE: Applying Floating Styles from useFloating Hook in React (JavaScript)\nDESCRIPTION: Demonstrates how to access the floatingStyles object for directly applying computed styles to a floating element in React. This is typically set as a style prop in JSX, simplifying floating element setup.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useFloating.mdx#2025-04-23_snippet_28\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {floatingStyles} = useFloating();\n\n```\n\n----------------------------------------\n\nTITLE: Implementing a Reusable Tooltip Component Pattern in React\nDESCRIPTION: Shows a component-based API for tooltips with a controller component and render components. This pattern enables reusability across different contexts in an application.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/tooltip.mdx#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nfunction App() {\n  return (\n    <Tooltip>\n      <TooltipTrigger>My trigger</TooltipTrigger>\n      <TooltipContent>My tooltip</TooltipContent>\n    </Tooltip>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Placement from useFloating Hook in React (JavaScript)\nDESCRIPTION: This snippet shows how to access the computed placement property provided by useFloating, useful for determining the final rendered position of a floating element. It requires only useFloating from Floating UI and can be used in any React functional component. The placement value is dynamically adjusted by middleware if used.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useFloating.mdx#2025-04-23_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {placement} = useFloating();\n\n```\n\n----------------------------------------\n\nTITLE: Checking Floating Element Existence in useEffect with useFloating (JavaScript)\nDESCRIPTION: Illustrates how to reactively check for the presence of the floating element within a useEffect hook. Ensures safe access to the element for side effects, especially when rendering with <FloatingPortal> and the element may not be available initially.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useFloating.mdx#2025-04-23_snippet_38\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {elements} = useFloating();\nReact.useEffect(() => {\n  if (!elements.floating) return;\n  // ...\n}, [elements.floating]);\n\n```\n\n----------------------------------------\n\nTITLE: React Implementation of Hide Middleware\nDESCRIPTION: Shows how to implement the hide middleware in React components using the useFloating hook.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/hide.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst {refs, floatingStyles, middlewareData} = useFloating({\n  middleware: [hide()],\n});\n\nreturn (\n  <div\n    ref={refs.setFloating}\n    style={{\n      ...floatingStyles,\n      visibility: middlewareData.hide?.referenceHidden\n        ? 'hidden'\n        : 'visible',\n    }}\n  />\n);\n```\n\n----------------------------------------\n\nTITLE: Managing Open State with useFloating\nDESCRIPTION: Implementation of open state management with useFloating, demonstrating how to control when the floating element is visible using React state.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/react.mdx#2025-04-23_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nimport {useFloating} from '@floating-ui/react';\n\nfunction App() {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const {refs, floatingStyles} = useFloating({\n    open: isOpen,\n    onOpenChange: setIsOpen,\n  });\n\n  return (\n    <>\n      <button ref={refs.setReference}>Button</button>\n      {isOpen && (\n        <div ref={refs.setFloating} style={floatingStyles}>\n          Tooltip\n        </div>\n      )}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Event Communication Between Hooks in Floating UI\nDESCRIPTION: Shows how to use the event emitter attached to the context object to communicate between hooks. The example demonstrates subscribing to events with on/off methods and emitting events with custom data.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/custom-hooks.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst {context} = useFloating();\n\nuseEffect(() => {\n  const handleEvent = () => {};\n  context.events.on('name', handleEvent);\n  return () => {\n    context.events.off('name', handleEvent);\n  };\n}, [context.events]);\n\nreturn (\n  <div\n    onClick={() => {\n      context.events.emit('name', {foo: 'bar'});\n    }}\n  />\n);\n```\n\n----------------------------------------\n\nTITLE: Using flip middleware with computePosition in core/dom\nDESCRIPTION: Example of using the flip middleware with the computePosition function in @floating-ui/core or @floating-ui/dom packages. This enables automatic flipping of the floating element to prevent overflow.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/flip.mdx#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncomputePosition(referenceEl, floatingEl, {\n  middleware: [flip()],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing useFocus Hook in a React Component\nDESCRIPTION: Demonstrates how to use the useFocus Hook within a React component, including state management, event handling, and rendering of reference and floating elements.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useFocus.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const {refs, floatingStyles, context} = useFloating({\n    open: isOpen,\n    onOpenChange: setIsOpen,\n  });\n\n  const focus = useFocus(context);\n\n  const {getReferenceProps, getFloatingProps} = useInteractions([\n    focus,\n  ]);\n\n  return (\n    <>\n      <div ref={refs.setReference} {...getReferenceProps()}>\n        Reference element\n      </div>\n      {isOpen && (\n        <div\n          ref={refs.setFloating}\n          style={floatingStyles}\n          {...getFloatingProps()}\n        >\n          Floating element\n        </div>\n      )}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic computePosition usage with DOM\nDESCRIPTION: Shows how to use computePosition in DOM environments by selecting elements and applying the resulting position coordinates as inline styles.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/computePosition.mdx#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport {computePosition} from '@floating-ui/dom';\n\nconst button = document.querySelector('#button');\nconst tooltip = document.querySelector('#tooltip');\n\ncomputePosition(button, tooltip).then(({x, y}) => {\n  Object.assign(tooltip.style, {\n    left: `${x}px`,\n    top: `${y}px`,\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Conditional Middleware Options in Floating UI (TypeScript)\nDESCRIPTION: This snippet defines the TypeScript type MiddlewareOption as an array that allows Middleware objects interspersed with false, null, or undefined, enabling ergonomic conditional inclusion of middleware in configuration arrays. No external dependencies are required beyond the Middleware type definition. The type ensures that when building up middleware lists, non-truthy values can be inserted and easily filtered prior to execution; this is useful in builder or compositional APIs that may enable or disable middleware options based on runtime conditions.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/computePosition.mdx#2025-04-23_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\n// The array can accept `false`, `null`, or `undefined`\n// inside of it. They get filtered out.\ntype MiddlewareOption = Array<\n  Middleware | false | null | undefined\n>;\n```\n\n----------------------------------------\n\nTITLE: Generating Unique IDs in React Components\nDESCRIPTION: The useId function generates a unique ID, utilizing React 18's built-in useId when available. For earlier React versions, it falls back to a slightly less performant implementation that requires a double render.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/react-utils.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {useId} from '@floating-ui/react';\n\nfunction App() {\n  const id = useId();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Placement-Aware Initial Transition Styles\nDESCRIPTION: Shows how to create transitions that adapt to the placement of the floating element using a function that receives side and placement parameters.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useTransition.mdx#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst {isMounted, styles} = useTransitionStyles(context, {\n  initial: ({side}) => ({\n    transform:\n      side === 'top' || side === 'bottom'\n        ? 'scaleY(0.5)'\n        : 'scaleX(0.5)',\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Position Reference Node Using setPositionReference in JSX (JavaScript)\nDESCRIPTION: Shows how to use the setPositionReference function from the refs object of useFloating to assign a DOM or virtual reference node. This provides flexibility for advanced positioning scenarios in React components where a separate event or position reference is desired.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useFloating.mdx#2025-04-23_snippet_35\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {refs} = useFloating();\nreturn <div ref={refs.setPositionReference} />;\n\n```\n\n----------------------------------------\n\nTITLE: Basic FloatingFocusManager Implementation\nDESCRIPTION: Demonstrates the basic usage of FloatingFocusManager component in a React application, showing how to wrap a floating element with proper context.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/FloatingFocusManager.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  const {context} = useFloating();\n\n  return (\n    <>\n      {/* reference element */}\n      {isOpen && (\n        <FloatingFocusManager context={context}>\n          {/* floating element */}\n        </FloatingFocusManager>\n      )}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Separating Position and Event References\nDESCRIPTION: Pattern for using different elements for positioning and event handling, allowing for more flexible UI designs while maintaining proper functionality.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/react.mdx#2025-04-23_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nconst {refs} = useFloating();\n\nreturn (\n  <>\n    <button ref={refs.setReference} {...getReferenceProps()}>\n      Event reference\n    </button>\n    <button ref={refs.setPositionReference}>\n      Position reference\n    </button>\n  </>\n);\n```\n\n----------------------------------------\n\nTITLE: Using Prop Getters with Elements\nDESCRIPTION: Example showing how to properly apply prop getters to reference and floating elements.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useInteractions.mdx#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<>\n  <div ref={refs.setReference} {...getReferenceProps()} />\n  <div\n    ref={refs.setFloating}\n    style={floatingStyles}\n    {...getFloatingProps()}\n  />\n</>\n```\n\n----------------------------------------\n\nTITLE: Basic useFloating Implementation\nDESCRIPTION: Demonstrates the basic usage of useFloating hook with reference and floating elements.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useFloating.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  const {refs, floatingStyles} = useFloating();\n  return (\n    <>\n      <div ref={refs.setReference} />\n      <div ref={refs.setFloating} style={floatingStyles} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using autoUpdate with options in React\nDESCRIPTION: Shows how to use autoUpdate with custom options in React.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/autoUpdate.mdx#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nuseFloating({\n  whileElementsMounted(referenceEl, floatingEl, update) {\n    const cleanup = autoUpdate(referenceEl, floatingEl, update, {\n      ancestorScroll: false,\n    });\n    return cleanup;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing useRole with useFloating and useInteractions\nDESCRIPTION: Demonstrates how to use the useRole hook with context from useFloating and integrate it into useInteractions to apply ARIA attributes to reference and floating elements.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useRole.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  const {refs, floatingStyles, context} = useFloating();\n\n  const role = useRole(context);\n\n  const {getReferenceProps, getFloatingProps} = useInteractions([\n    role,\n  ]);\n\n  return (\n    <>\n      <div ref={refs.setReference} {...getReferenceProps()}>\n        Reference element\n      </div>\n      <div\n        ref={refs.setFloating}\n        style={floatingStyles}\n        {...getFloatingProps()}\n      >\n        Floating element\n      </div>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Arrow Middleware in Floating UI DOM\nDESCRIPTION: Demonstrates how to use the arrow middleware with Floating UI DOM, including positioning the arrow element.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/arrow.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst arrowEl = document.querySelector('#arrow');\n\ncomputePosition(referenceEl, floatingEl, {\n  middleware: [arrow({element: arrowEl})],\n}).then(({middlewareData}) => {\n  if (middlewareData.arrow) {\n    const {x, y} = middlewareData.arrow;\n\n    Object.assign(arrowEl.style, {\n      left: x != null ? `${x}px` : '',\n      top: y != null ? `${y}px` : '',\n    });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Anchoring Floating Elements with autoUpdate in useFloating - JavaScript\nDESCRIPTION: Integrates the autoUpdate utility with useFloating to keep floating elements anchored to their reference element during scroll, resize, or other layout changes. Uses the whileElementsMounted option to provide autoUpdate, which handles automatic recalculation. Requires importing autoUpdate from @floating-ui/vue.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/vue.mdx#2025-04-23_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport {useFloating, autoUpdate} from '@floating-ui/vue';\n\n// Inside your component\nuseFloating(reference, floating, {\n  whileElementsMounted: autoUpdate,\n});\n\n```\n\n----------------------------------------\n\nTITLE: Implementing 3D Transform Positioning in JavaScript\nDESCRIPTION: This snippet demonstrates how to use 3D transforms for positioning floating elements, which can offer smoother animations and promote the element to its own layer.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/misc.mdx#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nObject.assign(floatingEl.style, {\n  top: '0',\n  left: '0',\n  transform: `translate3d(${roundByDPR(x)}px,${roundByDPR(y)}px,0)`,\n});\n```\n\n----------------------------------------\n\nTITLE: Preserving Preferred Placement by Disabling Cross Axis in flip() - Floating UI JavaScript\nDESCRIPTION: Illustrates middleware array configuration to disable the crossAxis check in flip(), prioritizing shift() to preserve the preferred placement as much as possible. The fallbackAxisSideDirection ensures fallback is aligned as specified, and crossAxis: false prevents flip() from changing axes unless necessary. Requires Floating UI with shift and flip middleware available.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/flip.mdx#2025-04-23_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst middleware = [\n  flip({\n    fallbackAxisSideDirection: 'start',\n    crossAxis: false,\n  }),\n  shift(),\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing useHover with useFloating and useInteractions\nDESCRIPTION: Demonstrates how to use the useHover hook in conjunction with useFloating and useInteractions to create a hoverable floating element.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useHover.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const {refs, floatingStyles, context} = useFloating({\n    open: isOpen,\n    onOpenChange: setIsOpen,\n  });\n\n  const hover = useHover(context);\n\n  const {getReferenceProps, getFloatingProps} = useInteractions([\n    hover,\n  ]);\n\n  return (\n    <>\n      <div ref={refs.setReference} {...getReferenceProps()}>\n        Reference element\n      </div>\n      {isOpen && (\n        <div\n          ref={refs.setFloating}\n          style={floatingStyles}\n          {...getFloatingProps()}\n        >\n          Floating element\n        </div>\n      )}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Tooltip Show/Hide on User Interaction in JavaScript\nDESCRIPTION: Defines functions `showTooltip` and `hideTooltip` to manage the tooltip's visibility by changing its `display` style. `showTooltip` also calls an `update` function (which wraps `computePosition`) to ensure correct positioning when shown. Event listeners are added to the trigger button for `mouseenter`, `mouseleave`, `focus`, and `blur` events to call these functions, creating interactive tooltip behavior.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/tutorial.mdx#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nfunction update() {\n  computePosition(button, tooltip, {\n    // ... options ...\n  }).then(({x, y, placement, middlewareData}) => {\n    // ... positioning logic ...\n  });\n}\n\nfunction showTooltip() {\n  tooltip.style.display = 'block';\n  update();\n}\n\nfunction hideTooltip() {\n  tooltip.style.display = '';\n}\n\n[\n  ['mouseenter', showTooltip],\n  ['mouseleave', hideTooltip],\n  ['focus', showTooltip],\n  ['blur', hideTooltip],\n].forEach(([event, listener]) => {\n  button.addEventListener(event, listener);\n});\n```\n\n----------------------------------------\n\nTITLE: Using the useFloating Composable in Vue - Vue\nDESCRIPTION: Demonstrates a typical setup for positioning a floating tooltip element relative to a button using the useFloating composable from @floating-ui/vue in a script setup context. Requires @floating-ui/vue and the Vue composition API. Takes Vue refs for the reference and floating elements, and provides floatingStyles for inline styling of the floating element. The tooltip is automatically positioned at the bottom center of the reference button by default.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/vue.mdx#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport {ref} from 'vue';\nimport {useFloating} from '@floating-ui/vue';\n\nconst reference = ref(null);\nconst floating = ref(null);\nconst {floatingStyles} = useFloating(reference, floating);\n</script>\n\n<template>\n  <button ref=\"reference\">Button</button>\n  <div ref=\"floating\" :style=\"floatingStyles\">Tooltip</div>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Transition Duration with useTransitionStatus\nDESCRIPTION: Shows how to configure transition duration with useTransitionStatus, including different durations for open and close transitions.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useTransition.mdx#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst {isMounted, status} = useTransitionStatus(context, {\n  // Configure both open and close durations:\n  duration: 200,\n  // Or, configure open and close durations separately:\n  duration: {\n    open: 200,\n    close: 100,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering an Accessible Dialog Component in React\nDESCRIPTION: Renders a complete dialog component with proper ARIA attributes, focus management, and backdrop overlay. The implementation includes a reference button, modal overlay, focus trap, and accessibility labels.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/dialog.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Dialog() {\n  // ...\n  return (\n    <>\n      <button ref={refs.setReference} {...getReferenceProps()}>\n        Reference element\n      </button>\n      {isOpen && (\n        <FloatingOverlay\n          lockScroll\n          style={{background: 'rgba(0, 0, 0, 0.8)'}}\n        >\n          <FloatingFocusManager context={context}>\n            <div\n              ref={refs.setFloating}\n              aria-labelledby={labelId}\n              aria-describedby={descriptionId}\n              {...getFloatingProps()}\n            >\n              <h2 id={labelId}>Heading element</h2>\n              <p id={descriptionId}>Description element</p>\n              <button onClick={() => setIsOpen(false)}>\n                Close\n              </button>\n            </div>\n          </FloatingFocusManager>\n        </FloatingOverlay>\n      )}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Platform Methods in Floating UI\nDESCRIPTION: Demonstrates how to use all the custom platform methods with the computePosition function from @floating-ui/core.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/platform.mdx#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport {computePosition} from '@floating-ui/core';\n\ncomputePosition(referenceEl, floatingEl, {\n  platform: {\n    // Required\n    getElementRects,\n    getDimensions,\n    getClippingRect,\n\n    // Optional\n    convertOffsetParentRelativeRectToViewportRelativeRect,\n    getOffsetParent,\n    getDocumentElement,\n    getClientRects,\n    isElement,\n    isRTL,\n    getScale,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Reference Element from useFloating Elements Object (JavaScript)\nDESCRIPTION: Demonstrates how to log the reference element (which may be virtual) from the elements object in useFloating. This snippet is typically used for debugging or manual DOM checks within React functional components.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useFloating.mdx#2025-04-23_snippet_37\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {elements} = useFloating();\nconsole.log(elements.reference);\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Arrow Offset in Floating UI\nDESCRIPTION: Shows how to configure the offset middleware to account for the arrow height and desired gap.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/FloatingArrow.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {offset} from '@floating-ui/react';\n\nconst ARROW_HEIGHT = 7;\nconst GAP = 2;\n\nuseFloating({\n  middleware: [offset(ARROW_HEIGHT + GAP)],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Interaction Hooks for Dialog Accessibility\nDESCRIPTION: Sets up interaction hooks that manage click events, dismissal behavior, ARIA roles, and focus management. These hooks work together to create an accessible dialog implementation that follows WAI-ARIA guidelines.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/dialog.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  // ...\n  useClick,\n  useDismiss,\n  useRole,\n  useInteractions,\n  useId,\n} from '@floating-ui/react';\n\nfunction Dialog() {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const {refs, context} = useFloating({\n    open: isOpen,\n    onOpenChange: setIsOpen,\n  });\n\n  const click = useClick(context);\n  const dismiss = useDismiss(context, {\n    outsidePressEvent: 'mousedown',\n  });\n  const role = useRole(context);\n\n  // Merge all the interactions into prop getters\n  const {getReferenceProps, getFloatingProps} = useInteractions([\n    click,\n    dismiss,\n    role,\n  ]);\n\n  // Set up label and description ids\n  const labelId = useId();\n  const descriptionId = useId();\n}\n```\n\n----------------------------------------\n\nTITLE: Using useFloating with Custom Component Template Refs - Vue\nDESCRIPTION: Shows useFloating working with refs to custom Vue components (e.g., MyButton, MyTooltip) by passing these as template refs for reference and floating. This allows interoperability with component abstractions as long as underlying DOM nodes are accessible. Assumes child components accept ref forwarding properly.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/vue.mdx#2025-04-23_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport {ref} from 'vue';\nimport {useFloating} from '@floating-ui/vue';\n\nimport MyButton from './MyButton.vue';\nimport MyTooltip from './MyTooltip.vue';\n\nconst reference = ref(null);\nconst floating = ref(null);\nconst {floatingStyles} = useFloating(reference, floating);\n</script>\n\n<template>\n  <MyButton ref=\"reference\">Button</MyButton>\n  <MyTooltip ref=\"floating\">Tooltip</MyTooltip>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Open State with React useState for Popover\nDESCRIPTION: Sets up the initial state to track whether the popover is open or closed using React's useState hook. The isOpen state is used for conditional rendering of the popover element.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/popover.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {useState} from 'react';\n\nfunction Popover() {\n  const [isOpen, setIsOpen] = useState(false);\n}\n```\n\n----------------------------------------\n\nTITLE: Using flip middleware with useFloating hook in React\nDESCRIPTION: Example of using the flip middleware with the useFloating hook in React-based Floating UI packages. This enables automatic flipping of the floating element to prevent overflow.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/flip.mdx#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nuseFloating({\n  middleware: [flip()],\n});\n```\n\n----------------------------------------\n\nTITLE: Obtaining Final Placement from computePosition() Promise - Floating UI JavaScript\nDESCRIPTION: Demonstrates obtaining the final computed placement after Floating UI positions elements using the computePosition() promise. Shows how to configure placement and middleware, then log the resolved placement, which could differ from the preferred one if constraints prevent its use. Requires Floating UI with core or DOM package, and appropriate DOM references.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/flip.mdx#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\ncomputePosition(referenceEl, floatingEl, {\n  placement: 'bottom',\n  middleware: [flip()],\n}).then(({placement}) => {\n  console.log(placement); // 'top' or 'bottom'\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Tooltip and Arrow HTML Structure\nDESCRIPTION: Provides the basic HTML markup for a tooltip element (`#tooltip`) containing a nested `div` element (`#arrow`) which will serve as the visual arrow pointer. This structure is required for use with the Floating UI `arrow` middleware.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/tutorial.mdx#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"tooltip\" role=\"tooltip\">\n  My tooltip with more content\n  <div id=\"arrow\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: React Implementation with useFloating\nDESCRIPTION: Example showing how to use middleware with React useFloating hook.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/middleware.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nuseFloating({\n  placement: 'right',\n  middleware: [],\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Transitions with useDelayGroup and useTransitionStyles\nDESCRIPTION: Demonstrates how to use the isInstantPhase and currentId values from useDelayGroup to control transition durations in conjunction with useTransitionStyles. This enables smoother transitions between grouped floating elements.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/FloatingDelayGroup.mdx#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst {currentId, isInstantPhase} = useDelayGroup(context);\n\nconst instantDuration = 0;\nconst duration = 200;\n\nconst {isMounted, styles} = useTransitionStyles(context, {\n  duration: isInstantPhase\n    ? {\n        open: instantDuration,\n        close:\n          currentId === context.floatingId\n            ? duration\n            : instantDuration,\n      }\n    : duration,\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Reference Ref via useFloating and useEffect in React (JavaScript)\nDESCRIPTION: This example accesses the current value of the reference ref using useEffect from React, demonstrating when and how to access DOM nodes managed by useFloating. Assumes useFloating and useEffect are imported, and helps in scenarios requiring direct DOM manipulation.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useFloating.mdx#2025-04-23_snippet_30\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {refs} = useFloating();\nuseEffect(() => {\n  console.log(refs.reference.current);\n}, [refs]);\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Tooltip Interactions with Floating UI Hooks\nDESCRIPTION: Sets up the interactive behavior for the tooltip using Floating UI's interaction hooks. Handles hover, focus, dismissal with escape key, and accessibility roles, then merges them into prop getters for easy application.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/tooltip.mdx#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport {\n  // ...\n  useHover,\n  useFocus,\n  useDismiss,\n  useRole,\n  useInteractions,\n} from '@floating-ui/react';\n\nfunction Tooltip() {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const {refs, floatingStyles, context} = useFloating({\n    open: isOpen,\n    onOpenChange: setIsOpen,\n    middleware: [offset(10), flip(), shift()],\n    whileElementsMounted: autoUpdate,\n  });\n\n  const hover = useHover(context, {move: false});\n  const focus = useFocus(context);\n  const dismiss = useDismiss(context);\n  const role = useRole(context, {\n    // If your reference element has its own label (text).\n    role: 'tooltip',\n    // If your reference element does not have its own label,\n    // e.g. an icon.\n    role: 'label',\n  });\n\n  // Merge all the interactions into prop getters\n  const {getReferenceProps, getFloatingProps} = useInteractions([\n    hover,\n    focus,\n    dismiss,\n    role,\n  ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Auto-Update for Anchoring\nDESCRIPTION: Implementation of autoUpdate to ensure the floating element remains anchored to the reference element when scrolling or resizing.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/react.mdx#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport {useFloating, autoUpdate} from '@floating-ui/react';\n```\n\nLANGUAGE: js\nCODE:\n```\nimport {useFloating, autoUpdate} from '@floating-ui/react-dom';\n```\n\nLANGUAGE: js\nCODE:\n```\nconst {refs, floatingStyles} = useFloating({\n  whileElementsMounted: autoUpdate,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring useFloating Hook for Popover Positioning in React\nDESCRIPTION: Sets up the useFloating hook to handle positioning and context for the popover. It configures middleware for offsetting, flipping, and shifting the popover, and uses autoUpdate to maintain proper positioning when elements are mounted.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/popover.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  useFloating,\n  autoUpdate,\n  offset,\n  flip,\n  shift,\n} from '@floating-ui/react';\n\nfunction Popover() {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const {refs, floatingStyles, context} = useFloating({\n    open: isOpen,\n    onOpenChange: setIsOpen,\n    middleware: [offset(10), flip(), shift()],\n    whileElementsMounted: autoUpdate,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Sharing State Between Hooks with dataRef in Floating UI\nDESCRIPTION: Demonstrates how to use the mutable dataRef from the context object to share state variables between hooks. This approach allows hooks to communicate without requiring re-renders.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/custom-hooks.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst {context} = useFloating();\n\nuseEffect(() => {\n  context.dataRef.current.foo = 'bar';\n}, [context]);\n```\n\n----------------------------------------\n\nTITLE: Using size middleware with apply function\nDESCRIPTION: Shows how to use the apply function in size middleware to access availableWidth and availableHeight.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/size.mdx#2025-04-23_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nsize({\n  apply({availableWidth, availableHeight, ...state}) {\n    // Style mutations here\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using autoPlacement with useFloating in React\nDESCRIPTION: Example of using the autoPlacement middleware with the useFloating hook in React-based packages.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/autoPlacement.mdx#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nuseFloating({\n  middleware: [autoPlacement()],\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Refs Object from useFloating Hook in React (JavaScript)\nDESCRIPTION: This code extracts the refs object from useFloating, which contains references and setter functions for reference and floating DOM elements. Provides infrastructure for attaching refs to elements in render or in side effects.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useFloating.mdx#2025-04-23_snippet_29\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {refs} = useFloating();\n\n```\n\n----------------------------------------\n\nTITLE: Example Usage of a Reusable Popover Component System in React\nDESCRIPTION: Demonstrates how to use a reusable popover component system with a composable API. The component allows for custom triggers, content, headings, descriptions, and close buttons in a flexible and accessible manner.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/popover.mdx#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  return (\n    <Popover>\n      <PopoverTrigger>My trigger</PopoverTrigger>\n      <PopoverContent>\n        <PopoverHeading>My popover heading</PopoverHeading>\n        <PopoverDescription>\n          My popover description\n        </PopoverDescription>\n        <PopoverClose>Close</PopoverClose>\n      </PopoverContent>\n    </Popover>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: CSS setup for floating elements\nDESCRIPTION: Defines the essential CSS properties needed to properly position a floating element, including absolute positioning and layout configuration.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/computePosition.mdx#2025-04-23_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n#tooltip {\n  /* Float on top of the UI */\n  position: absolute;\n\n  /* Avoid layout interference */\n  width: max-content;\n  top: 0;\n  left: 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Implementation of useTransitionStyles with Floating UI\nDESCRIPTION: Demonstrates how to use the useTransitionStyles hook with a floating context to create a basic transition effect. It returns isMounted (for conditional rendering) and styles (for transition styling).\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useTransition.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  const {context} = useFloating();\n  const {isMounted, styles} = useTransitionStyles(context);\n\n  return (\n    isMounted && (\n      <div\n        style={{\n          // Transition styles\n          ...styles,\n        }}\n      >\n        Tooltip\n      </div>\n    )\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Available Placement Values\nDESCRIPTION: Lists all the available placement values for the placement option.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useFloating.mdx#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntype Placement =\n  | 'top'\n  | 'top-start'\n  | 'top-end'\n  | 'right'\n  | 'right-start'\n  | 'right-end'\n  | 'bottom'\n  | 'bottom-start'\n  | 'bottom-end'\n  | 'left'\n  | 'left-start'\n  | 'left-end';\n```\n\n----------------------------------------\n\nTITLE: Watching isPositioned State from useFloating for Effects - JavaScript\nDESCRIPTION: Illustrates monitoring the isPositioned boolean ref returned from useFloating to perform operations (focusing, scrolling) only after the floating element has been calculated and positioned. This prevents side effects from running before layout completion. Optionally, the open state can be synchronized for conditional behaviors.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/vue.mdx#2025-04-23_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nconst open = ref(false);\nconst {isPositioned} = useFloating(reference, floating, {\n  // Synchronize `isPositioned` with an `open` ref.\n  open,\n});\n\n// Each time the floating element opens, we want to focus and\n// scroll some element into view.\nwatch(isPositioned, (isPositioned) => {\n  if (isPositioned) {\n    someElement.focus();\n    someElement.scrollIntoView();\n  }\n});\n\n```\n\n----------------------------------------\n\nTITLE: Configuring useFloating with Middleware and Placement - JavaScript\nDESCRIPTION: Illustrates using multiple middleware (offset, flip, shift) with the useFloating composable and specifying a custom placement. Imports both composable and middleware functions from @floating-ui/vue. Each middleware can modify position, optimize visibility, or provide placement data. Accepts static values for placement and middleware arrays.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/vue.mdx#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport {\n  useFloating,\n  offset,\n  flip,\n  shift,\n} from '@floating-ui/vue';\n\n// Inside your component\nuseFloating(reference, floating, {\n  placement: 'right',\n  middleware: [offset(10), flip(), shift()],\n});\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Delay Props in FloatingDelayGroup\nDESCRIPTION: Demonstrates different ways to configure the delay property in FloatingDelayGroup, including using a single number for both open and close delays or an object with separate open and close delay values.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/FloatingDelayGroup.mdx#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<FloatingDelayGroup\n  // Both open and close delays\n  delay={200}\n  // Or, configured individually\n  delay={{open: 1000, close: 200}}\n>\n  {/* ... */}\n</FloatingDelayGroup>\n```\n\n----------------------------------------\n\nTITLE: Using Arrow Middleware in Floating UI React\nDESCRIPTION: Shows how to use the arrow middleware with Floating UI React, including positioning the arrow element using refs and styles.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/arrow.mdx#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst arrowRef = useRef(null);\n\nconst {refs, floatingStyles, middlewareData} = useFloating({\n  middleware: [\n    arrow({\n      element: arrowRef,\n    }),\n  ],\n});\n\nreturn (\n  <div ref={refs.setFloating} style={floatingStyles}>\n    <div\n      ref={arrowRef}\n      style={{\n        position: 'absolute',\n        left: middlewareData.arrow?.x,\n        top: middlewareData.arrow?.y,\n      }}\n    />\n  </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring useHover with safePolygon\nDESCRIPTION: Shows how to import and use the safePolygon function with useHover to create a safe area for cursor movement between the reference and floating elements.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useHover.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {useHover, safePolygon} from '@floating-ui/react';\n\nuseHover(context, {\n  handleClose: safePolygon(),\n});\n```\n\n----------------------------------------\n\nTITLE: Manually choosing a rect with inline middleware using mouse coordinates\nDESCRIPTION: How to manually specify which rectangle to use for positioning by passing mouse coordinates to the inline middleware.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/inline.mdx#2025-04-23_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nfunction onMouseEnter({clientX: x, clientY: y}) {\n  computePosition(referenceEl, floatingEl, {\n    middleware: [inline({x, y})],\n  }).then(({x, y}) => {\n    // ...\n  });\n}\n\nreferenceEl.addEventListener('mouseenter', onMouseEnter);\n```\n\n----------------------------------------\n\nTITLE: Using autoUpdate for anchoring\nDESCRIPTION: Demonstrates how to keep the floating element anchored to the reference element during scrolling and resizing using the autoUpdate utility.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/computePosition.mdx#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport {computePosition, autoUpdate} from '@floating-ui/dom';\n\n// When the floating element is mounted to the DOM:\nconst cleanup = autoUpdate(referenceEl, floatingEl, () => {\n  computePosition(referenceEl, floatingEl).then(({x, y}) => {\n    // ...\n  });\n});\n\n// ...later, when it's removed from the DOM:\ncleanup();\n```\n\n----------------------------------------\n\nTITLE: Using Arrow Middleware in Floating UI Vue\nDESCRIPTION: Demonstrates how to use the arrow middleware with Floating UI Vue, including setting up refs and applying styles to the arrow element.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/arrow.mdx#2025-04-23_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport {arrow, useFloating} from '@floating-ui/vue';\nimport {ref} from 'vue';\n\nconst reference = ref(null);\nconst floating = ref(null);\nconst floatingArrow = ref(null);\n\nconst {floatingStyles, middlewareData} = useFloating(\n  reference,\n  floating,\n  {\n    middleware: [arrow({element: floatingArrow})],\n  },\n);\n</script>\n\n<template>\n  <span ref=\"reference\">Reference</span>\n  <div ref=\"floating\" :style=\"floatingStyles\">\n    Floating\n    <div\n      ref=\"floatingArrow\"\n      :style=\"{\n        position: 'absolute',\n        left:\n          middlewareData.arrow?.x != null\n            ? `${middlewareData.arrow.x}px`\n            : '',\n        top:\n          middlewareData.arrow?.y != null\n            ? `${middlewareData.arrow.y}px`\n            : '',\n      }\"\n    ></div>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using limitShift with shift middleware\nDESCRIPTION: Demonstrates how to use the limitShift function with the shift middleware to control the shifting behavior.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/shift.mdx#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nshift({\n  limiter: limitShift(),\n});\n```\n\n----------------------------------------\n\nTITLE: Using useClientPoint Hook in React Component\nDESCRIPTION: This example demonstrates how to use the useClientPoint Hook within a React component. It shows the integration with useFloating and useInteractions Hooks.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useClientPoint.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const {refs, floatingStyles, context} = useFloating({\n    open: isOpen,\n    onOpenChange: setIsOpen,\n  });\n\n  const clientPoint = useClientPoint(context);\n\n  const {getReferenceProps, getFloatingProps} = useInteractions([\n    clientPoint,\n  ]);\n\n  return (\n    <>\n      <div ref={refs.setReference} {...getReferenceProps()}>\n        Reference element\n      </div>\n      {isOpen && (\n        <div\n          ref={refs.setFloating}\n          style={floatingStyles}\n          {...getFloatingProps()}\n        >\n          Floating element\n        </div>\n      )}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using shift with useFloating in React\nDESCRIPTION: Shows how to use the shift middleware with the useFloating hook in React packages.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/shift.mdx#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nuseFloating({\n  middleware: [shift()],\n});\n```\n\n----------------------------------------\n\nTITLE: CSS for Basic Opacity Fade Transition\nDESCRIPTION: CSS implementation for a basic opacity fade transition using data-status attributes provided by useTransitionStatus.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useTransition.mdx#2025-04-23_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n#floating {\n  transition-property: opacity;\n}\n#floating[data-status='open'],\n#floating[data-status='close'] {\n  transition-duration: 250ms;\n}\n#floating[data-status='initial'],\n#floating[data-status='close'] {\n  opacity: 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FloatingArrow in a React Component\nDESCRIPTION: Demonstrates how to use the FloatingArrow component within a React application, including setting up the arrow reference and context.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/FloatingArrow.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport {FloatingArrow, arrow} from '@floating-ui/react';\n\nfunction App() {\n  const arrowRef = useRef(null);\n  const {refs, floatingStyles, context} = useFloating({\n    middleware: [\n      arrow({\n        element: arrowRef,\n      }),\n    ],\n  });\n\n  return (\n    <>\n      <div ref={refs.setReference} />\n      <div ref={refs.setFloating} style={floatingStyles}>\n        <FloatingArrow ref={arrowRef} context={context} />\n      </div>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useClick Hook with useFloating and useInteractions\nDESCRIPTION: Demonstrates how to implement the useClick hook with other Floating UI hooks to create a clickable element that opens a floating component. The hook is passed the context from useFloating and then fed into useInteractions.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useClick.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const {refs, floatingStyles, context} = useFloating({\n    open: isOpen,\n    onOpenChange: setIsOpen,\n  });\n\n  const click = useClick(context);\n\n  const {getReferenceProps, getFloatingProps} = useInteractions([\n    click,\n  ]);\n\n  return (\n    <>\n      <div ref={refs.setReference} {...getReferenceProps()}>\n        Reference element\n      </div>\n      {isOpen && (\n        <div\n          ref={refs.setFloating}\n          style={floatingStyles}\n          {...getFloatingProps()}\n        >\n          Floating element\n        </div>\n      )}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Sibling Overlay Implementation for Anchor Positioning\nDESCRIPTION: Demonstrates the recommended way to implement the overlay as a sibling of the floating element for better positioning and scroll handling in scrollable contexts.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/FloatingOverlay.mdx#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<>\n  <FloatingOverlay />\n  <div ref={refs.setFloating} />\n</>\n```\n\n----------------------------------------\n\nTITLE: Implementing getDimensions for Floating UI Platform\nDESCRIPTION: Shows how to implement the required getDimensions method for a custom Floating UI platform.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/platform.mdx#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getDimensions(element) {\n  return {width: 0, height: 0};\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Self-Wrapping Popover Component with FloatingTree\nDESCRIPTION: This example shows how to create a Popover component that automatically wraps itself in a FloatingTree when needed. It checks if it's a root component and only applies the wrapper in that case, simplifying the API for consumers.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/FloatingTree.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction PopoverComponent() {\n  // Main logic as seen earlier\n}\n\n// This is the component the consumer uses\nexport function Popover(props) {\n  const parentId = useFloatingParentNodeId();\n\n  // This is a root, so we wrap it with the tree\n  if (parentId === null) {\n    return (\n      <FloatingTree>\n        <PopoverComponent {...props} />\n      </FloatingTree>\n    );\n  }\n\n  return <PopoverComponent {...props} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling the Tooltip Arrow Element in CSS\nDESCRIPTION: Defines CSS rules for the arrow element (`#arrow`). It sets the position to absolute, provides basic visual styling (background, size), and uses `transform: rotate(45deg)` to create the triangular arrow shape. This styling prepares the arrow element visually before dynamic positioning.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/tutorial.mdx#2025-04-23_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n#arrow {\n  position: absolute;\n  background: #222;\n  width: 8px;\n  height: 8px;\n  transform: rotate(45deg);\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Multiple Refs in React Components\nDESCRIPTION: The useMergeRefs function combines multiple refs into a single memoized callback ref. It takes an array of refs as input and returns either a merged ref callback or null.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/react-utils.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {useMergeRefs} from '@floating-ui/react';\n\nfunction App() {\n  const ref = useMergeRefs([ref1, ref2, ref3]);\n  return <div ref={ref} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic useDismiss Implementation\nDESCRIPTION: Complete example showing how to implement the useDismiss hook with useFloating and useInteractions to create a dismissible floating element.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useDismiss.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const {refs, floatingStyles, context} = useFloating({\n    open: isOpen,\n    onOpenChange: setIsOpen,\n  });\n\n  const dismiss = useDismiss(context);\n\n  const {getReferenceProps, getFloatingProps} = useInteractions([\n    dismiss,\n  ]);\n\n  return (\n    <>\n      <div ref={refs.setReference} {...getReferenceProps()}>\n        Reference element\n      </div>\n      {isOpen && (\n        <div\n          ref={refs.setFloating}\n          style={floatingStyles}\n          {...getFloatingProps()}\n        >\n          Floating element\n        </div>\n      )}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining placement types in TypeScript\nDESCRIPTION: Lists all the available placement options for positioning a floating element relative to its reference element as a TypeScript type.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/computePosition.mdx#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ntype Placement =\n  | 'top'\n  | 'top-start'\n  | 'top-end'\n  | 'right'\n  | 'right-start'\n  | 'right-end'\n  | 'bottom'\n  | 'bottom-start'\n  | 'bottom-end'\n  | 'left'\n  | 'left-start'\n  | 'left-end';\n```\n\n----------------------------------------\n\nTITLE: Converting Relative Units to Pixels in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to convert relative units (rem) to pixels before passing them to Floating UI, which works with pixel units.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/misc.mdx#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\ncomputePosition(reference, floating, {\n  // 1rem => 16px\n  middleware: [offset(remToPx(1))],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Reusable Dialog Component System in React\nDESCRIPTION: Shows the usage of a reusable, composable dialog component system with a controller component and specialized child components. This pattern allows for flexible and consistent dialog implementations throughout an application.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/dialog.mdx#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  return (\n    <Dialog>\n      <DialogTrigger>My trigger</DialogTrigger>\n      <DialogContent>\n        <DialogHeading>My dialog heading</DialogHeading>\n        <DialogDescription>\n          My dialog description\n        </DialogDescription>\n        <DialogClose>Close</DialogClose>\n      </DialogContent>\n    </Dialog>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Styling FloatingArrow with Tailwind CSS\nDESCRIPTION: Shows how to style the FloatingArrow component using Tailwind CSS utility classes.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/FloatingArrow.mdx#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<FloatingArrow\n  ref={arrowRef}\n  context={context}\n  className=\"\n    fill-white \n    [&>path:first-of-type]:stroke-pink-500\n    [&>path:last-of-type]:stroke-white\n  \"\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Reactive Size Middleware with Apply Function in Floating UI\nDESCRIPTION: This example demonstrates how to use the size middleware with a reactive apply function by providing a dependency array.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/packages/react-native/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsize(\n  {\n    apply() {\n      value; // reactive\n    },\n  },\n  [value],\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing offset middleware for tooltip displacement\nDESCRIPTION: Adds the offset middleware to create space between the tooltip and the reference element, improving visual separation.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/tutorial.mdx#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  computePosition,\n  flip,\n  shift,\n  offset,\n} from 'https://cdn.jsdelivr.net/npm/@floating-ui/dom@__DOM_VERSION__/+esm';\n\nconst button = document.querySelector('#button');\nconst tooltip = document.querySelector('#tooltip');\n\ncomputePosition(button, tooltip, {\n  placement: 'top',\n  middleware: [offset(6), flip(), shift({padding: 5})],\n}).then(({x, y}) => {\n  Object.assign(tooltip.style, {\n    left: `${x}px`,\n    top: `${y}px`,\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Inner Anchoring and Offset - JavaScript\nDESCRIPTION: Basic implementation of inner positioning and offset functionality using the inner middleware and useInnerOffset hook.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/inner.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {inner, useInnerOffset} from '@floating-ui/react';\n\n// Inside your component\nconst {context} = useFloating({\n  middleware: [inner()],\n});\n\nconst innerOffset = useInnerOffset(context);\n\nconst {getReferenceProps, getFloatingProps} = useInteractions([\n  innerOffset,\n]);\n```\n\n----------------------------------------\n\nTITLE: Using inline middleware with computePosition in core/dom packages\nDESCRIPTION: How to use the inline middleware with the computePosition function in core or DOM packages.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/inline.mdx#2025-04-23_snippet_6\n\nLANGUAGE: js\nCODE:\n```\ncomputePosition(referenceEl, floatingEl, {\n  middleware: [inline()],\n});\n```\n\n----------------------------------------\n\nTITLE: Using FloatingList Component with List Navigation\nDESCRIPTION: Shows how to implement the FloatingList component with useListNavigation and useTypeahead hooks, passing the necessary references for list elements and labels.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/FloatingList.mdx#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst elementsRef = useRef([]);\nconst labelsRef = useRef([]);\n\nconst listNav = useListNavigation(context, {\n  listRef: elementsRef,\n});\nconst typeahead = useTypeahead(context, {\n  listRef: labelsRef,\n});\n\nreturn (\n  <FloatingList elementsRef={elementsRef} labelsRef={labelsRef}>\n    {/* floating element with list item children */}\n  </FloatingList>\n);\n```\n\n----------------------------------------\n\nTITLE: DetectOverflow with Custom Options\nDESCRIPTION: Examples of using detectOverflow with various configuration options including custom boundaries and padding.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/detectOverflow.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nawait detectOverflow(state, {\n  boundary: document.querySelector('#container'),\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nawait detectOverflow(state, {\n  rootBoundary: 'document', // 'viewport' by default\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nawait detectOverflow(state, {\n  // Layout viewport, instead of the visual viewport\n  rootBoundary: {\n    x: 0,\n    y: 0,\n    width: document.documentElement.clientWidth,\n    height: document.documentElement.clientHeight,\n  },\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nawait detectOverflow(state, {\n  // 5px on all sides\n  padding: 5,\n  // Unspecified sides are 0\n  padding: {\n    top: 5,\n    left: 20,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Placement-Aware Transitions with CSS\nDESCRIPTION: Shows how to create transitions that adapt to the floating element's placement using data-placement attributes in combination with data-status.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useTransition.mdx#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst {context, placement} = useFloating();\nconst {isMounted, status} = useTransitionStatus(context);\n\nreturn (\n  isMounted && (\n    <div\n      id=\"floating\"\n      data-placement={placement}\n      data-status={status}\n    >\n      Tooltip\n    </div>\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Using computePosition in Floating UI Core\nDESCRIPTION: Demonstrates how to use the computePosition function from @floating-ui/core with a custom platform object.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/platform.mdx#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {computePosition} from '@floating-ui/core';\n\ncomputePosition(referenceElement, floatingElement, {\n  platform: {\n    // ...\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Prop Getters to Elements\nDESCRIPTION: Pattern for applying event handlers from interaction hooks to reference and floating elements using the prop getters returned from useInteractions.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/react.mdx#2025-04-23_snippet_9\n\nLANGUAGE: js\nCODE:\n```\n<>\n  <button ref={refs.setReference} {...getReferenceProps()}>\n    My button\n  </button>\n  <div\n    ref={refs.setFloating}\n    style={floatingStyles}\n    {...getFloatingProps()}\n  >\n    My tooltip\n  </div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Defining useFloating Return Interface in TypeScript\nDESCRIPTION: This TypeScript code defines the shape of the object returned by the useFloating hook, including all properties, their associated types, and various nested objects and methods. It serves as the contract for implementers and consumers of the hook within a TypeScript application. Dependencies include TypeScript typings for React and custom types such as FloatingContext, Placement, Strategy, MiddlewareData, and ReferenceElement.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useFloating.mdx#2025-04-23_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface UseFloatingReturn {\n  context: FloatingContext;\n  placement: Placement;\n  strategy: Strategy;\n  x: number;\n  y: number;\n  middlewareData: MiddlewareData;\n  isPositioned: boolean;\n  update(): void;\n  floatingStyles: React.CSSProperties;\n  refs: {\n    reference: React.MutableRefObject<ReferenceElement | null>;\n    floating: React.MutableRefObject<HTMLElement | null>;\n    domReference: React.MutableRefObject<Element | null>;\n    setReference(node: RT | null): void;\n    setFloating(node: HTMLElement | null): void;\n    setPositionReference(node: ReferenceElement): void;\n  };\n  elements: {\n    reference: RT | null;\n    floating: HTMLElement | null;\n  };\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using autoUpdate with options in DOM\nDESCRIPTION: Demonstrates how to use autoUpdate with custom options in vanilla JavaScript.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/autoUpdate.mdx#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst cleanup = autoUpdate(referenceEl, floatingEl, update, {\n  ancestorScroll: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Using size middleware in React with sync state\nDESCRIPTION: Example of implementing the size middleware in React using synchronous state updates with flushSync.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/size.mdx#2025-04-23_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nconst [maxHeight, setMaxHeight] = useState(null);\n\nconst {refs, floatingStyles} = useFloating({\n  middleware: [\n    size({\n      apply({availableHeight}) {\n        flushSync(() => setMaxHeight(availableHeight));\n      },\n    }),\n  ],\n});\n\nreturn (\n  <div\n    ref={refs.setFloating}\n    style={{...floatingStyles, maxHeight}}\n  />\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Implementation of useTransitionStatus with Floating UI\nDESCRIPTION: Shows how to use the low-level useTransitionStatus hook to get the transition status and apply it as a data attribute for CSS styling.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useTransition.mdx#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  const {context, placement} = useFloating();\n  const {isMounted, status} = useTransitionStatus(context);\n\n  return (\n    isMounted && (\n      <div id=\"floating\" data-status={status}>\n        Tooltip\n      </div>\n    )\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useListNavigation Hook\nDESCRIPTION: Demonstrates how to use the useListNavigation Hook in a React component with a floating element containing a list of items. It shows setting up the context, refs, and spreading props to elements.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useListNavigation.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  const [activeIndex, setActiveIndex] = useState(null);\n\n  const {refs, floatingStyles, context} = useFloating({\n    open: true,\n  });\n\n  const listRef = useRef([]);\n\n  const listNavigation = useListNavigation(context, {\n    listRef,\n    activeIndex,\n    onNavigate: setActiveIndex,\n  });\n\n  const {getReferenceProps, getFloatingProps, getItemProps} =\n    useInteractions([listNavigation]);\n\n  const items = ['one', 'two', 'three'];\n\n  return (\n    <>\n      <div ref={refs.setReference} {...getReferenceProps()}>\n        Reference element\n      </div>\n      <div\n        ref={refs.setFloating}\n        style={floatingStyles}\n        {...getFloatingProps()}\n      >\n        {items.map((item, index) => (\n          <div\n            key={item}\n            // Make these elements focusable using a roving tabIndex.\n            tabIndex={activeIndex === index ? 0 : -1}\n            ref={(node) => {\n              listRef.current[index] = node;\n            }}\n            {...getItemProps()}\n          >\n            {item}\n          </div>\n        ))}\n      </div>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using size middleware in @floating-ui/core\nDESCRIPTION: Example of implementing the size middleware in the core package to handle available width and height.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/size.mdx#2025-04-23_snippet_6\n\nLANGUAGE: js\nCODE:\n```\ncomputePosition(referenceEl, floatingEl, {\n  middleware: [\n    size({\n      apply({availableWidth, availableHeight, elements}) {\n        // Change styles\n      },\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: ScrollView Integration with Floating UI\nDESCRIPTION: Example showing how to integrate Floating UI with ScrollView components using the sameScrollView option and scrollProps.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/react-native.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport {View, Text, ScrollView} from 'react-native';\nimport {useFloating} from '@floating-ui/react-native';\n\nfunction App() {\n  const {refs, floatingStyles, scrollProps} = useFloating({\n    sameScrollView: false,\n  });\n\n  return (\n    <View>\n      <ScrollView {...scrollProps}>\n        <View ref={refs.setReference} collapsable={false}>\n          <Text>Reference</Text>\n        </View>\n      </ScrollView>\n\n      <View\n        ref={refs.setFloating}\n        collapsable={false}\n        style={floatingStyles}\n      >\n        <Text>Floating</Text>\n      </View>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom ID for FloatingPortal Root\nDESCRIPTION: Example of providing a custom ID to the FloatingPortal, which will either select an existing element with that ID or create a new one.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/FloatingPortal.mdx#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<FloatingPortal id=\"custom-root-id\" />\n```\n\n----------------------------------------\n\nTITLE: Accessing Elements Object From useFloating Hook in React (JavaScript)\nDESCRIPTION: Destructures the elements object from useFloating, providing direct, reactive access to floating and reference elements. Useful during render for logic that depends on the existence of these nodes.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useFloating.mdx#2025-04-23_snippet_36\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {elements} = useFloating();\n\n```\n\n----------------------------------------\n\nTITLE: CSS for Placement-Aware Transitions\nDESCRIPTION: CSS implementation for transitions that adapt to the floating element's placement by targeting both data-status and data-placement attributes.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useTransition.mdx#2025-04-23_snippet_13\n\nLANGUAGE: css\nCODE:\n```\n#floating {\n  transition-property: opacity, transform;\n}\n#floating[data-status='open'],\n#floating[data-status='close'] {\n  transition-duration: 250ms;\n}\n#floating[data-status='initial'],\n#floating[data-status='close'] {\n  opacity: 0;\n}\n#floating[data-status='initial'][data-placement^='top'],\n#floating[data-status='close'][data-placement^='top'] {\n  transform: translateY(5px);\n}\n#floating[data-status='initial'][data-placement^='bottom'],\n#floating[data-status='close'][data-placement^='bottom'] {\n  transform: translateY(-5px);\n}\n#floating[data-status='initial'][data-placement^='left'],\n#floating[data-status='close'][data-placement^='left'] {\n  transform: translateX(5px);\n}\n#floating[data-status='initial'][data-placement^='right'],\n#floating[data-status='close'][data-placement^='right'] {\n  transform: translateX(-5px);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Reactive Middleware Dependencies in Floating UI\nDESCRIPTION: Demonstrates how to use dependency arrays with middleware functions to maintain reactivity when using derived state. Shows examples with the offset and size middleware.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/packages/react-dom/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst [value, setValue] = React.useState(0);\n\nconst offset1 = offset(value); // reactive\nconst offset2 = offset(() => value); // NOT reactive\nconst offset3 = offset(() => value, [value]); // reactive\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsize(\n  {\n    apply() {\n      value; // reactive\n    },\n  },\n  [value],\n);\n```\n\n----------------------------------------\n\nTITLE: Using getItemProps with Active and Selected States\nDESCRIPTION: Shows how to use getItemProps with active and selected boolean states for items in select and combobox roles, necessary for proper ARIA attributes.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useRole.mdx#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst {getItemProps} = useInteractions([]);\n\n// A given item being rendered in the list\n<div\n  {...getItemProps({\n    active: boolean, // activeIndex === itemIndex\n    selected: boolean, // selectedIndex === itemIndex\n  })}\n/>;\n```\n\n----------------------------------------\n\nTITLE: CSS for Asymmetric Transitions\nDESCRIPTION: Shows how to create CSS for asymmetric transitions where the closing animation differs from the opening animation, using data-status attributes.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useTransition.mdx#2025-04-23_snippet_11\n\nLANGUAGE: css\nCODE:\n```\n#floating {\n  transition-property: opacity, transform;\n}\n#floating[data-status='initial'] {\n  opacity: 0;\n  transform: scale(0);\n}\n#floating[data-status='open'] {\n  opacity: 1;\n  transform: scale(1);\n  transition-duration: 250ms;\n}\n#floating[data-status='close'] {\n  opacity: 0;\n  transform: scale(2);\n  transition-duration: 250ms;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Middleware Implementation with computePosition\nDESCRIPTION: Basic example showing how to initialize position computation with middleware array.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/middleware.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncomputePosition(referenceEl, floatingEl, {\n  placement: 'right',\n  middleware: [],\n});\n```\n\n----------------------------------------\n\nTITLE: Vue Implementation of Hide Middleware\nDESCRIPTION: Demonstrates the implementation of hide middleware in a Vue component using the useFloating composable.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/hide.mdx#2025-04-23_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst reference = ref(null);\nconst floating = ref(null);\nconst {floatingStyles, middlewareData} = useFloating(\n  reference,\n  floating,\n  {\n    middleware: [hide()],\n  },\n);\n</script>\n\n<template>\n  <div ref=\"reference\"></div>\n  <div\n    ref=\"floating\"\n    :style=\"{\n      ...floatingStyles,\n      visibility: middlewareData.hide?.referenceHidden\n        ? 'hidden'\n        : 'visible',\n    }\"\n  ></div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Setting Placement Option\nDESCRIPTION: Shows how to set the placement option to position the floating element.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useFloating.mdx#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nuseFloating({\n  placement: 'left',\n});\n```\n\n----------------------------------------\n\nTITLE: Virtual Element with Range Selection\nDESCRIPTION: Demonstrates implementation of a virtual element for range selections using getClientRects.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/virtual-elements.mdx#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst virtualEl = {\n  getBoundingClientRect: () => range.getBoundingClientRect(),\n  getClientRects: () => range.getClientRects(),\n};\n```\n\n----------------------------------------\n\nTITLE: Conditionally removing maxHeight style\nDESCRIPTION: Shows how to conditionally remove the maxHeight style when it's not needed to prevent layout issues.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/size.mdx#2025-04-23_snippet_19\n\nLANGUAGE: js\nCODE:\n```\nelements.floating.style.maxHeight =\n  availableHeight >= elements.floating.scrollHeight\n    ? ''\n    : `${availableHeight}px`;\n```\n\n----------------------------------------\n\nTITLE: Setting padding in shift middleware\nDESCRIPTION: Shows how to set padding to control the distance from boundaries in the shift middleware.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/shift.mdx#2025-04-23_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nshift({\n  padding: 5, // 0 by default\n});\n```\n\n----------------------------------------\n\nTITLE: Vue Component with Virtual Element\nDESCRIPTION: Complete Vue component implementation showing virtual element positioning with click handling.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/virtual-elements.mdx#2025-04-23_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport {ref} from 'vue';\nimport {useFloating} from '@floating-ui/vue';\n\nconst reference = ref(null);\nconst floating = ref(null);\nconst {floatingStyles} = useFloating(reference, floating);\n\nfunction handleClick({clientX, clientY}) {\n  reference.value = {\n    getBoundingClientRect() {\n      return {\n        width: 0,\n        height: 0,\n        x: clientX,\n        y: clientY,\n        top: clientY,\n        left: clientX,\n        right: clientX,\n        bottom: clientY,\n      };\n    },\n  };\n}\n</script>\n\n<template>\n  <button @click=\"handleClick\">Button</button>\n  <div ref=\"floating\" :style=\"floatingStyles\" v-if=\"reference\">\n    Tooltip\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Customizing FloatingArrow Appearance in React\nDESCRIPTION: Demonstrates how to customize the appearance of the FloatingArrow component using various props.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/FloatingArrow.mdx#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<FloatingArrow\n  ref={arrowRef}\n  context={context}\n  width={20}\n  height={20}\n  d=\"M0 20C0 20 2.06906 19.9829 5.91817 15.4092C7.49986 13.5236 8.97939 12.3809 10.0002 12.3809C11.0202 12.3809 12.481 13.6451 14.0814 15.5472C17.952 20.1437 20 20 20 20H0Z\"\n  fill=\"red\"\n  stroke=\"red\"\n  strokeWidth={2}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring useClientPoint Hook with Options\nDESCRIPTION: These JavaScript snippets demonstrate various ways to configure the useClientPoint Hook using its available props.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useClientPoint.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nuseClientPoint(context, {\n  enabled: false,\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nuseClientPoint(context, {\n  axis: 'x',\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nuseClientPoint(context, {\n  x: 100,\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nuseClientPoint(context, {\n  y: 100,\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Tooltip State in React with useState\nDESCRIPTION: Sets up the open state for a tooltip component using React useState hook. The isOpen state determines whether the tooltip is currently visible on screen.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/tooltip.mdx#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport {useState} from 'react';\n\nfunction Tooltip() {\n  const [isOpen, setIsOpen] = useState(false);\n}\n```\n\n----------------------------------------\n\nTITLE: Passing detectOverflow Options to flip() Middleware - Floating UI JavaScript\nDESCRIPTION: Shows how to forward detectOverflow options, such as padding, to the flip() middleware when configuring Floating UI. The padding option adjusts the distance from edges for overflow calculations. This requires the Floating UI library and is relevant when customizing element containment logic.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/flip.mdx#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nflip({\n  padding: 5, // 0 by default\n});\n```\n\n----------------------------------------\n\nTITLE: Required CSS for proper initial layout\nDESCRIPTION: Highlights the essential CSS properties that should be applied before calling computePosition to ensure correct measurements and positioning.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/computePosition.mdx#2025-04-23_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n#floating {\n  position: absolute;\n  width: max-content;\n  top: 0;\n  left: 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling mainAxis option in flip middleware\nDESCRIPTION: Example of disabling the mainAxis option for the flip middleware. This makes the floating element ignore overflow on the main axis, which is the y-axis for top/bottom placements and x-axis for left/right placements.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/flip.mdx#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nflip({\n  mainAxis: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Subpixel Positioning in JavaScript\nDESCRIPTION: This code snippet shows how to implement subpixel positioning for floating elements using transform styles and a rounding function to ensure optimal positioning on the device's pixel grid.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/misc.mdx#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nfunction roundByDPR(value) {\n  const dpr = window.devicePixelRatio || 1;\n  return Math.round(value * dpr) / dpr;\n}\n\nObject.assign(floatingEl.style, {\n  top: '0',\n  left: '0',\n  transform: `translate(${roundByDPR(x)}px,${roundByDPR(y)}px)`,\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Open State Styles for Transitions\nDESCRIPTION: Demonstrates how to specify custom styles for the open state of a transition that differ from the default styles.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useTransition.mdx#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst {isMounted, styles} = useTransitionStyles(context, {\n  open: {\n    transform: 'scale(1.1)',\n  },\n  // or, for side-aware styles:\n  open: ({side}) => ({\n    transform:\n      side === 'top' || side === 'bottom'\n        ? 'scaleY(1.1)'\n        : 'scaleX(1.1)',\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Defining the ComputePositionReturn Interface (TypeScript)\nDESCRIPTION: This TypeScript interface, ComputePositionReturn, defines the shape of the return value for the Floating UI computePosition function—including coordinates (x, y), the effective placement, strategy (CSS positioning mode), and any middleware-produced data. It requires Placement and Strategy types and is typically returned from computePosition or similar API calls. Input is the function result, and output is an object conforming to this interface, detailing the floating element's computed coordinates and configuration.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/computePosition.mdx#2025-04-23_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface ComputePositionReturn {\n  x: number;\n  y: number;\n  placement: Placement;\n  strategy: Strategy;\n  middlewareData: MiddlewareData;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing flip middleware from @floating-ui/core\nDESCRIPTION: Shows how to import the flip middleware from the @floating-ui/core package. This middleware prevents floating elements from overflowing by flipping to the opposite side.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/flip.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {flip} from '@floating-ui/core';\n```\n\n----------------------------------------\n\nTITLE: Middleware with Data Property\nDESCRIPTION: Example showing how to implement middleware that returns additional data.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/middleware.mdx#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst shiftByOnePixel = {\n  name: 'shiftByOnePixel',\n  fn({x, y}) {\n    return {\n      x: x + 1,\n      y: y + 1,\n      data: {\n        amount: 1,\n      },\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using offset middleware with useFloating in React\nDESCRIPTION: Example of using the offset middleware with the useFloating hook in React packages. This adds a 10px offset between the reference and floating elements.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/offset.mdx#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nuseFloating({\n  middleware: [offset(10)],\n});\n```\n\n----------------------------------------\n\nTITLE: Modal and Non-Modal Focus Management Options for Popovers\nDESCRIPTION: Demonstrates how to configure the FloatingFocusManager for either modal or non-modal behavior. Modal is the default behavior that traps focus within the popover, while non-modal allows focus to move outside the popover.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/popover.mdx#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<FloatingFocusManager context={context}>\n  <div />\n</FloatingFocusManager>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<FloatingFocusManager context={context} modal={false}>\n  <div />\n</FloatingFocusManager>\n```\n\n----------------------------------------\n\nTITLE: Using lockScroll Prop with FloatingOverlay\nDESCRIPTION: Shows how to use the lockScroll prop to prevent body scrolling while the overlay is rendered.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/FloatingOverlay.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<FloatingOverlay lockScroll>\n  {/* floating element */}\n</FloatingOverlay>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage with Multiple Interactions\nDESCRIPTION: Example showing how to combine multiple interaction hooks (hover and focus) using useInteractions.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useInteractions.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  useFloating,\n  useHover,\n  useFocus,\n  useInteractions,\n} from '@floating-ui/react';\n\nfunction App() {\n  const {context} = useFloating();\n\n  const hover = useHover(context);\n  const focus = useFocus(context);\n\n  const {getReferenceProps, getFloatingProps} = useInteractions([\n    hover,\n    focus,\n  ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of FloatingPortal for Conditionally Rendered Tooltip\nDESCRIPTION: Example of conditionally rendering a floating element inside a FloatingPortal component based on an isOpen state.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/FloatingPortal.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Tooltip() {\n  if (isOpen) {\n    return (\n      <FloatingPortal>\n        <div>Floating element</div>\n      </FloatingPortal>\n    );\n  }\n\n  return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing flip middleware from @floating-ui/react\nDESCRIPTION: Shows how to import the flip middleware from the @floating-ui/react package. This middleware prevents floating elements from overflowing by flipping to the opposite side.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/flip.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {flip} from '@floating-ui/react';\n```\n\n----------------------------------------\n\nTITLE: Using offset middleware with useFloating in Vue\nDESCRIPTION: Example of using the offset middleware with the useFloating composable in Vue package. This adds a 10px offset between the reference and floating elements.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/offset.mdx#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nuseFloating(reference, floating, {\n  middleware: [offset(10)],\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Common Styles Across All Transition States\nDESCRIPTION: Shows how to apply styles that should be consistent across all transition states, like transformOrigin, including a placement-aware approach.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useTransition.mdx#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst {isMounted, styles} = useTransitionStyles(context, {\n  common: {\n    transformOrigin: 'bottom',\n  },\n  // Or, for side-aware styles:\n  common: ({side}) => ({\n    transformOrigin: {\n      top: 'bottom',\n      bottom: 'top',\n      left: 'right',\n      right: 'left',\n    }[side],\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Importing shift and limitShift from @floating-ui/react\nDESCRIPTION: Shows how to import both shift and limitShift middleware from the @floating-ui/react package.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/shift.mdx#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport {shift, limitShift} from '@floating-ui/react';\n```\n\n----------------------------------------\n\nTITLE: Triggering Manual Position Update via useFloating Hook (JavaScript)\nDESCRIPTION: This snippet accesses the update function returned by useFloating, which when called, recalculates the position of the floating element. Useful when making DOM changes affecting position or when integrating with external triggers; useFloating must be set up in a functional React component.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useFloating.mdx#2025-04-23_snippet_27\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {update} = useFloating();\n\n```\n\n----------------------------------------\n\nTITLE: Ignoring Mouse Input in useClick\nDESCRIPTION: Demonstrates how to configure useClick to ignore mouse input, which is useful when combining it with other hooks like useHover.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useClick.mdx#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nuseClick(context, {\n  ignoreMouse: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Middleware Data from useFloating Hook in React (JavaScript)\nDESCRIPTION: Illustrates how to get the middlewareData object from useFloating, allowing the developer to react to or log data produced by the middleware chain. Proper usage involves importing useFloating and using it in a React component.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useFloating.mdx#2025-04-23_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {middlewareData} = useFloating();\n\n```\n\n----------------------------------------\n\nTITLE: Using Middleware Option\nDESCRIPTION: Shows how to use the middleware option to control positioning behavior.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useFloating.mdx#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nuseFloating({\n  middleware: [\n    // ...\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Diagonal Placement using Offset Middleware (Core/DOM, React, Vue) in JavaScript\nDESCRIPTION: Shows how to create a custom diagonal placement using the `offset` middleware and a starting `placement` of 'top-start'. The offset function returns an object specifying `alignmentAxis` displacement, calculated using the floating element's width from the `rects` object, effectively shifting the element diagonally. Examples provided for `computePosition` (core/DOM), `useFloating` (React/React Native), and `useFloating` (Vue).\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/offset.mdx#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ncomputePosition(referenceEl, floatingEl, {\n  placement: 'top-start',\n  middleware: [\n    offset(({rects}) => ({\n      alignmentAxis: -rects.floating.width,\n    })),\n  ],\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nuseFloating({\n  placement: 'top-start',\n  middleware: [\n    offset(({rects}) => ({\n      alignmentAxis: -rects.floating.width,\n    })),\n  ],\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nuseFloating(reference, floating, {\n  placement: 'top-start',\n  middleware: [\n    offset(({rects}) => ({\n      alignmentAxis: -rects.floating.width,\n    })),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Arrow Implementation with Floating UI\nDESCRIPTION: Example demonstrating how to implement an arrow element with Floating UI using refs and the arrow middleware.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/react-native.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useRef} from 'react';\nimport {useFloating, arrow} from '@floating-ui/react-native';\n\nfunction App() {\n  const arrowRef = useRef();\n  const {\n    refs,\n    floatingStyles,\n    middlewareData: {arrow: {x: arrowX, y: arrowY} = {}},\n  } = useFloating({\n    middleware: [arrow({element: arrowRef})],\n  });\n\n  // Pass the `arrowRef` to the element\n}\n```\n\n----------------------------------------\n\nTITLE: Importing detectOverflow from Various Packages\nDESCRIPTION: Shows how to import the detectOverflow function from different Floating UI packages including core, dom, react, react-dom, vue, and react-native.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/detectOverflow.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {detectOverflow} from '@floating-ui/core';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport {detectOverflow} from '@floating-ui/dom';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport {detectOverflow} from '@floating-ui/react';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport {detectOverflow} from '@floating-ui/react-dom';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport {detectOverflow} from '@floating-ui/vue';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport {detectOverflow} from '@floating-ui/react-native';\n```\n\n----------------------------------------\n\nTITLE: Adding padding to shift middleware for improved spacing\nDESCRIPTION: Demonstrates how to add padding to the shift middleware to create space between the tooltip and viewport edges.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/tutorial.mdx#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  computePosition,\n  flip,\n  shift,\n} from 'https://cdn.jsdelivr.net/npm/@floating-ui/dom@__DOM_VERSION__/+esm';\n\nconst button = document.querySelector('#button');\nconst tooltip = document.querySelector('#tooltip');\n\ncomputePosition(button, tooltip, {\n  placement: 'top',\n  middleware: [flip(), shift({padding: 5})],\n}).then(({x, y}) => {\n  Object.assign(tooltip.style, {\n    left: `${x}px`,\n    top: `${y}px`,\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Introducing @floating-ui/dom Package for Web Applications\nDESCRIPTION: This snippet introduces the @floating-ui/dom package, which is a wrapper around @floating-ui/core that provides DOM interface logic for implementing Floating UI in web applications.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/packages/dom/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @floating-ui/dom\n\nThis is the library to use Floating UI on the web, wrapping `@floating-ui/core`\nwith DOM interface logic.\n```\n\n----------------------------------------\n\nTITLE: JavaScript Method References in Floating UI\nDESCRIPTION: Code references showing the middleware methods available in Floating UI, specifically the size() and inline() middleware functions that provide additional functionality over Popper.js.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/motivation.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsize()\n```\n\nLANGUAGE: javascript\nCODE:\n```\ninline()\n```\n\n----------------------------------------\n\nTITLE: Setting Floating Node with setFloating from useFloating in JSX (JavaScript)\nDESCRIPTION: Utilizes setFloating from useFloating's refs to attach a floating element in the rendered output via the ref prop, enabling the hook to monitor element attachment and coordinate positioning. Required when the floating element is dynamically rendered or moved.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useFloating.mdx#2025-04-23_snippet_34\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {refs} = useFloating();\nreturn <div ref={refs.setFloating} />;\n\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of FloatingOverlay Component\nDESCRIPTION: Demonstrates the basic usage of the FloatingOverlay component in a React application. It renders the overlay alongside a floating element.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/FloatingOverlay.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  return (\n    <>\n      <FloatingOverlay />\n      <div>Floating element</div>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Prioritizing shift() Before flip() in Middleware Array - Floating UI JavaScript\nDESCRIPTION: Shows adjusting middleware order by placing shift() with limiter before flip() in the middleware array. This configuration allows shift() to constrain movement before flip() attempts to change placement, supporting use cases where axis alignment is less critical. Requires Floating UI, and limitShift available for the limiter.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/flip.mdx#2025-04-23_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst middleware = [\n  shift({\n    limiter: limitShift(),\n  }),\n  flip({\n    fallbackAxisSideDirection: 'start',\n  }),\n];\n```\n\n----------------------------------------\n\nTITLE: Using inline middleware with useFloating in React packages\nDESCRIPTION: How to use the inline middleware with the useFloating hook in React or React DOM packages.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/inline.mdx#2025-04-23_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nuseFloating({\n  middleware: [inline()],\n});\n```\n\n----------------------------------------\n\nTITLE: Example of Select Component with Composable Children\nDESCRIPTION: Demonstrates how to structure a Select component with composable children, including nested OptionGroup components containing Option components.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/FloatingList.mdx#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n<Select>\n  <OptionGroup label=\"Fruits\">\n    <Option>Apple</Option>\n    <Option>Strawberry</Option>\n    <Option>Banana</Option>\n  </OptionGroup>\n  <OptionGroup label=\"Vegetables\">\n    <Option>Carrot</Option>\n    <Option>Green Peas</Option>\n    <Option>Cauliflower</Option>\n  </OptionGroup>\n</Select>\n```\n\n----------------------------------------\n\nTITLE: Defining Asymmetric Transitions with the close Property\nDESCRIPTION: Shows how to create asymmetric transitions by specifying different close styles that differ from the initial to open transition.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useTransition.mdx#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst {isMounted, styles} = useTransitionStyles(context, {\n  close: {\n    opacity: 0,\n    transform: 'scale(2)',\n  },\n  // Or, for side-aware styles:\n  close: ({side}) => ({\n    opacity: 0,\n    transform:\n      side === 'top' || side === 'bottom'\n        ? 'scaleY(2)'\n        : 'scaleX(2)',\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Transition Hooks from Floating UI React\nDESCRIPTION: Shows how to import the useTransitionStyles and useTransitionStatus hooks from the @floating-ui/react package.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useTransition.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  useTransitionStyles,\n  useTransitionStatus,\n} from '@floating-ui/react';\n```\n\n----------------------------------------\n\nTITLE: Creating reference and floating elements in HTML\nDESCRIPTION: Shows the HTML structure for creating reference and floating elements in DOM environments.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/computePosition.mdx#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<button id=\"button\">My reference element</button>\n<div id=\"tooltip\">My floating element</div>\n```\n\n----------------------------------------\n\nTITLE: Using autoUpdate with useEffect in React\nDESCRIPTION: Shows how to use autoUpdate within a useEffect hook in React when the floating element is hidden with CSS.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/autoUpdate.mdx#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst [isOpen, setIsOpen] = useState(false);\nconst {update, refs, elements} = useFloating();\n\nuseEffect(() => {\n  if (isOpen && elements.reference && elements.floating) {\n    const cleanup = autoUpdate(\n      elements.reference,\n      elements.floating,\n      update,\n    );\n    return cleanup;\n  }\n}, [isOpen, elements, update]);\n\nreturn (\n  <div\n    ref={refs.setFloating}\n    style={{display: isOpen ? 'block' : 'none'}}\n  />\n);\n```\n\n----------------------------------------\n\nTITLE: FloatingDelayGroup TypeScript Interface Definition\nDESCRIPTION: The TypeScript interface for FloatingDelayGroup props, which includes the required delay property and an optional timeoutMs property.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/FloatingDelayGroup.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface FloatingDelayGroupProps {\n  delay: Delay;\n  timeoutMs?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing final placement with useFloating in React\nDESCRIPTION: Example showing how to access the final placement with useFloating hook and autoPlacement middleware in React.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/autoPlacement.mdx#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// placement can be any side\nconst {placement} = useFloating({\n  middleware: [autoPlacement()],\n});\n```\n\n----------------------------------------\n\nTITLE: Using the open Option\nDESCRIPTION: Shows how to use the open option to track positioning status.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useFloating.mdx#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst [isOpen, setIsOpen] = useState(false);\n\nconst {isPositioned} = useFloating({\n  open: isOpen,\n});\n\n// Once `isOpen` flips to `true`, `isPositioned` will switch to `true`\n// asynchronously. We can use an Effect to determine when it has\n// been positioned.\nuseEffect(() => {\n  if (isPositioned) {\n    // ...\n  }\n}, [isPositioned]);\n```\n\n----------------------------------------\n\nTITLE: React DOM Virtual Element with State\nDESCRIPTION: Implements virtual element positioning using React state management.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/virtual-elements.mdx#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst [virtualEl, setVirtualEl] = useState(null);\n\nuseFloating({\n  elements: {\n    reference: virtualEl,\n  },\n});\n\nreturn (\n  <div\n    onClick={({clientX, clientY}) => {\n      setVirtualEl({\n        getBoundingClientRect() {\n          return {\n            width: 0,\n            height: 0,\n            x: clientX,\n            y: clientY,\n            top: clientY,\n            left: clientX,\n            right: clientX,\n            bottom: clientY,\n          };\n        },\n      });\n    }}\n  />\n);\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Arrow Element\nDESCRIPTION: Demonstrates the HTML structure for including an arrow element inside a floating element.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/arrow.mdx#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div>\n  Floating element\n  <div id=\"arrow\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Applying Transition Styles to a Child Element\nDESCRIPTION: Shows how to properly structure a floating element with transitions by applying the transition styles to a child element to avoid conflicts with positioning styles.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useTransition.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<div ref={refs.setFloating} style={floatingStyles}>\n  <div\n    style={{\n      // Transition styles\n      ...styles,\n    }}\n  >\n    Content\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting up useFloating Hook for Dialog Component\nDESCRIPTION: Initializes the useFloating hook that provides positioning context for the dialog. It connects the open state and provides a callback to update that state when the dialog's visibility changes.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/dialog.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {useFloating} from '@floating-ui/react';\n\nfunction Dialog() {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const {refs, context} = useFloating({\n    open: isOpen,\n    onOpenChange: setIsOpen,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Centering Floating Element using Offset Middleware (Core/DOM, React, Vue) in JavaScript\nDESCRIPTION: Demonstrates how to center a floating element relative to its reference element on both axes using the `offset` middleware. The offset function calculates the necessary displacement by accessing the heights of both the reference and floating elements via the `rects` object. Examples provided for `computePosition` (core/DOM), `useFloating` (React/React Native), and `useFloating` (Vue). Assumes a default placement of 'bottom'.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/offset.mdx#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ncomputePosition(referenceEl, floatingEl, {\n  middleware: [\n    // Assumes placement is 'bottom' (the default)\n    offset(({rects}) => {\n      return (\n        -rects.reference.height / 2 - rects.floating.height / 2\n      );\n    }),\n  ],\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nuseFloating({\n  middleware: [\n    // Assumes placement is 'bottom' (the default)\n    offset(({rects}) => {\n      return (\n        -rects.reference.height / 2 - rects.floating.height / 2\n      );\n    }),\n  ],\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nuseFloating(reference, floating, {\n  middleware: [\n    // Assumes placement is 'bottom' (the default)\n    offset(({rects}) => {\n      return (\n        -rects.reference.height / 2 - rects.floating.height / 2\n      );\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Composite Props Interface\nDESCRIPTION: TypeScript interface defining all available props for the Composite component.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/Composite.mdx#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ninterface CompositeProps {\n  render?: RenderProp;\n  orientation?: 'horizontal' | 'vertical' | 'both';\n  loop?: boolean;\n  rtl?: boolean;\n  cols?: number;\n  disabledIndices?: number[];\n  activeIndex?: number;\n  onNavigate?(index: number): void;\n  itemSizes?: Dimensions[];\n  dense?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Deriving inline middleware options from state\nDESCRIPTION: How to dynamically derive options for the inline middleware using the middleware lifecycle state.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/inline.mdx#2025-04-23_snippet_11\n\nLANGUAGE: js\nCODE:\n```\ninline((state) => ({\n  padding: state.rects.reference.width,\n}));\n```\n\n----------------------------------------\n\nTITLE: Using autoUpdate with whileElementsMounted in React\nDESCRIPTION: Demonstrates how to use autoUpdate with the whileElementsMounted option in React.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/autoUpdate.mdx#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nuseFloating({\n  whileElementsMounted: autoUpdate,\n});\n```\n\n----------------------------------------\n\nTITLE: Importing inline middleware from @floating-ui/core\nDESCRIPTION: How to import the inline middleware from the core package of Floating UI.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/inline.mdx#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport {inline} from '@floating-ui/core';\n```\n\n----------------------------------------\n\nTITLE: Basic computePosition usage with core/react-native\nDESCRIPTION: Demonstrates how to use computePosition function with non-DOM elements in core or React Native environments, including the platform configuration requirement.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/computePosition.mdx#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {computePosition} from '@floating-ui/core';\n\nconst referenceEl = {width: 100, height: 100, x: 50, y: 50};\nconst floatingEl = {width: 200, height: 200, x: 0, y: 0};\n\ncomputePosition(referenceEl, floatingEl, {\n  platform: {\n    // See https://floating-ui.com/docs/platform\n  },\n}).then(({x, y}) => {\n  // Paint the screen.\n});\n```\n\n----------------------------------------\n\nTITLE: Matching reference width with size middleware\nDESCRIPTION: Shows how to use size middleware to make the floating element match the width of the reference element.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/size.mdx#2025-04-23_snippet_18\n\nLANGUAGE: js\nCODE:\n```\nsize({\n  apply({rects, elements}) {\n    Object.assign(elements.floating.style, {\n      minWidth: `${rects.reference.width}px`,\n    });\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using useFloating Function in Vue for Placement - Floating UI Vue JavaScript\nDESCRIPTION: Demonstrates how to obtain the resolved placement using useFloating in Vue, by passing reference and floating element refs along with the desired placement and middleware configuration. This approach is intended for projects using Floating UI with its Vue integration.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/flip.mdx#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// placement can be 'top' or 'bottom'\nconst {placement} = useFloating(reference, floating, {\n  placement: 'bottom',\n  middleware: [flip()],\n});\n```\n\n----------------------------------------\n\nTITLE: Core/DOM Implementation of Hide Middleware\nDESCRIPTION: Demonstrates how to use the hide middleware with computePosition API in core/dom packages to control floating element visibility.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/hide.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncomputePosition(referenceEl, floatingEl, {\n  middleware: [hide()],\n}).then(({middlewareData}) => {\n  if (middlewareData.hide) {\n    Object.assign(floatingEl.style, {\n      visibility: middlewareData.hide.referenceHidden\n        ? 'hidden'\n        : 'visible',\n    });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Passing Custom Options to autoUpdate with useFloating - JavaScript\nDESCRIPTION: Demonstrates how to wrap and pass custom arguments/options to autoUpdate via the whileElementsMounted property when initializing useFloating. The wrapper receives arguments, invokes autoUpdate with additional options (e.g., animationFrame: true), and returns the cleanup function as required.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/vue.mdx#2025-04-23_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nuseFloating(reference, floating, {\n  whileElementsMounted(...args) {\n    const cleanup = autoUpdate(...args, {animationFrame: true});\n    // Important! Always return the cleanup function.\n    return cleanup;\n  },\n});\n\n```\n\n----------------------------------------\n\nTITLE: Using size middleware with flip middleware (initialPlacement strategy)\nDESCRIPTION: Example of using size middleware with flip middleware when preferring initial placement with a minimum size.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/size.mdx#2025-04-23_snippet_17\n\nLANGUAGE: js\nCODE:\n```\nconst middleware = [\n  size({\n    apply({availableHeight, elements}) {\n      Object.assign(elements.floating.style, {\n        // Minimum acceptable height is 50px.\n        // `flip` will then take over.\n        maxHeight: `${Math.max(50, availableHeight)}px`,\n      });\n    },\n  }),\n  flip({\n    fallbackStrategy: 'initialPlacement',\n  }),\n];\n```\n\n----------------------------------------\n\nTITLE: Importing FloatingArrow Component in React\nDESCRIPTION: Shows how to import the FloatingArrow component from the @floating-ui/react package.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/FloatingArrow.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {FloatingArrow} from '@floating-ui/react';\n```\n\n----------------------------------------\n\nTITLE: Accessing Arrow Position Data from Middleware in JavaScript\nDESCRIPTION: Shows how to retrieve the calculated position data specifically for the arrow element. The `arrow` middleware adds its data to the `middlewareData` object returned by `computePosition`. This snippet demonstrates destructuring the `arrowX` and `arrowY` coordinates from `middlewareData.arrow`.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/tutorial.mdx#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ncomputePosition(button, tooltip, {\n  placement: 'top',\n  middleware: [\n    offset(6),\n    flip(),\n    shift({padding: 5}),\n    arrow({element: arrowElement}),\n  ],\n}).then(({x, y, placement, middlewareData}) => {\n  Object.assign(tooltip.style, {\n    left: `${x}px`,\n    top: `${y}px`,\n  });\n\n  // Accessing the data\n  const {x: arrowX, y: arrowY} = middlewareData.arrow;\n});\n```\n\n----------------------------------------\n\nTITLE: DOM Click Event Virtual Element\nDESCRIPTION: Implements a virtual element that follows mouse clicks using DOM events.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/virtual-elements.mdx#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction onClick({clientX, clientY}) {\n  const virtualEl = {\n    getBoundingClientRect() {\n      return {\n        width: 0,\n        height: 0,\n        x: clientX,\n        y: clientY,\n        top: clientY,\n        left: clientX,\n        right: clientX,\n        bottom: clientY,\n      };\n    },\n  };\n\n  computePosition(virtualEl, floatingEl).then(({x, y}) => {\n    // Position the floating element relative to the click\n  });\n}\n\ndocument.addEventListener('click', onClick);\n```\n\n----------------------------------------\n\nTITLE: TypeScript interface for SizeOptions\nDESCRIPTION: TypeScript interface definition for the options object that can be passed to the size middleware.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/size.mdx#2025-04-23_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\ninterface SizeOptions extends DetectOverflowOptions {\n  apply?: (\n    state: MiddlewareState & {\n      availableWidth: number;\n      availableHeight: number;\n    },\n  ) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Virtual Element Implementation in JavaScript\nDESCRIPTION: Creates a basic virtual element with a getBoundingClientRect method that defines a 20x20 pixel area starting from coordinates (0,0).\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/virtual-elements.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst virtualEl = {\n  getBoundingClientRect() {\n    return {\n      x: 0,\n      y: 0,\n      top: 0,\n      left: 0,\n      bottom: 20,\n      right: 20,\n      width: 20,\n      height: 20,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Getting Y-Coordinate from useFloating Hook in React (JavaScript)\nDESCRIPTION: This code provides access to the y position of the floating element as determined by useFloating. The y value can be used for custom style calculations or for debugging, and is obtained by destructuring its property.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useFloating.mdx#2025-04-23_snippet_24\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {y} = useFloating();\n\n```\n\n----------------------------------------\n\nTITLE: Middleware Configuration in Floating UI\nDESCRIPTION: Example of configuring middleware for collision prevention and positioning behavior\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/migration.mdx#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  computePosition,\n  flip,\n  shift,\n  limitShift,\n} from '@floating-ui/dom';\n\ncomputePosition(referenceEl, floatingEl, {\n  placement: 'top',\n  middleware: [flip(), shift({limiter: limitShift()})],\n}).then(({x, y}) => {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Reactive Offset Middleware in React Native with Floating UI\nDESCRIPTION: This snippet shows how to use the offset middleware with different approaches to maintain reactivity, including using a dependency array for derived values.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/packages/react-native/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst [value, setValue] = React.useState(0);\n\nconst offset1 = offset(value); // reactive\nconst offset2 = offset(() => value); // NOT reactive\nconst offset3 = offset(() => value, [value]); // reactive\n```\n\n----------------------------------------\n\nTITLE: Installing Floating UI React DOM Package\nDESCRIPTION: Command to install the lightweight React DOM version of Floating UI that only includes positioning features.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/getting-started.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @floating-ui/react-dom\n```\n\n----------------------------------------\n\nTITLE: Using size middleware with flip middleware (bestFit strategy)\nDESCRIPTION: Example of using size middleware together with flip middleware using the bestFit strategy.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/size.mdx#2025-04-23_snippet_16\n\nLANGUAGE: js\nCODE:\n```\nconst middleware = [\n  flip(),\n  size({\n    apply({availableWidth, availableHeight}) {\n      // ...\n    },\n  }),\n];\n```\n\n----------------------------------------\n\nTITLE: Accessing Final Placement via useFloating Hook - Floating UI React JavaScript\nDESCRIPTION: Shows usage of the useFloating React hook to retrieve the final placement value for a floating element in React or React Native. The middleware array includes flip(), and the result is destructured to access the resolved placement. Requires the installation of Floating UI's React-related packages and integration within a React component.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/flip.mdx#2025-04-23_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// placement can be 'top' or 'bottom'\nconst {placement} = useFloating({\n  placement: 'bottom',\n  middleware: [flip()],\n});\n```\n\n----------------------------------------\n\nTITLE: Offset Parent Configuration in Floating UI\nDESCRIPTION: Example showing how to configure the offset parent for floating elements when required for positioning.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/react-native.mdx#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport {View, Text, ScrollView} from 'react-native';\nimport {useFloating} from '@floating-ui/react-native';\n\nfunction App() {\n  const {refs, floatingStyles} = useFloating({\n    sameScrollView: false,\n  });\n\n  return (\n    <View>\n      <ScrollView>\n        <View ref={refs.setReference} collapsable={false}>\n          <Text>Reference</Text>\n        </View>\n      </ScrollView>\n\n      <View ref={refs.setOffsetParent} collapsable={false}>\n        <View\n          ref={refs.setFloating}\n          collapsable={false}\n          style={floatingStyles}\n        >\n          <Text>Floating</Text>\n        </View>\n      </View>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using size middleware in @floating-ui/dom\nDESCRIPTION: Example of implementing the size middleware in the DOM package, showing how to apply the max width and height styles.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/size.mdx#2025-04-23_snippet_7\n\nLANGUAGE: js\nCODE:\n```\ncomputePosition(referenceEl, floatingEl, {\n  middleware: [\n    size({\n      apply({availableWidth, availableHeight, elements}) {\n        // Change styles, e.g.\n        Object.assign(elements.floating.style, {\n          maxWidth: `${Math.max(0, availableWidth)}px`,\n          maxHeight: `${Math.max(0, availableHeight)}px`,\n        });\n      },\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Item Sizes for Grid Navigation in useListNavigation (JavaScript)\nDESCRIPTION: This code shows how to configure grid navigation in `useListNavigation` by supplying an array of dimension objects to the `itemSizes` prop. Each object specifies the `width` (number of columns) and `height` (number of rows) of a corresponding item. This allows the navigation algorithm to correctly handle items of varying sizes within a grid layout. If not specified, items default to 1x1.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useListNavigation.mdx#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nuseListNavigation(context, {\n  itemSizes: [\n    {width: 2, height: 2},\n    {width: 1, height: 3},\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for UseTransitionStylesProps\nDESCRIPTION: TypeScript interface definition for the useTransitionStyles hook props, showing all available configuration options.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useTransition.mdx#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ninterface UseTransitionStylesProps {\n  duration?: number | Partial<{open: number; close: number}>;\n  initial?: CSSStylesProperty;\n  open?: CSSStylesProperty;\n  close?: CSSStylesProperty;\n  common?: CSSStylesProperty;\n}\n```\n\n----------------------------------------\n\nTITLE: Using size middleware in @floating-ui/vue\nDESCRIPTION: Example of implementing the size middleware in the Vue package, applying max width and height styles.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/size.mdx#2025-04-23_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nuseFloating(reference, floating, {\n  middleware: [\n    size({\n      apply({availableWidth, availableHeight, elements}) {\n        // Change styles, e.g.\n        Object.assign(elements.floating.style, {\n          maxWidth: `${Math.max(0, availableWidth)}px`,\n          maxHeight: `${Math.max(0, availableHeight)}px`,\n        });\n      },\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Using onOpenChange Option\nDESCRIPTION: Shows how to use the onOpenChange option with state setter.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useFloating.mdx#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst [isOpen, setIsOpen] = useState(false);\n\nuseFloating({\n  open: isOpen,\n  onOpenChange: setIsOpen,\n});\n```\n\n----------------------------------------\n\nTITLE: Using a function for offset in limitShift\nDESCRIPTION: Demonstrates how to use a function to derive the offset value based on element dimensions in limitShift.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/shift.mdx#2025-04-23_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nshift({\n  limiter: limitShift({\n    // Start limiting by the reference's width earlier\n    offset: ({rects, placement}) => rects.reference.width,\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Virtual Element with Context Element\nDESCRIPTION: Shows how to implement a virtual element with a contextElement property for proper clipping and position updates.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/virtual-elements.mdx#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst virtualEl = {\n  getBoundingClientRect() {\n    return {\n      // ...\n    };\n  },\n  contextElement: document.querySelector('#context'),\n};\n```\n\n----------------------------------------\n\nTITLE: Limiting Floating Element Width with CSS\nDESCRIPTION: This CSS snippet shows how to limit the width of a floating element to prevent unexpected behavior when its width exceeds the viewport's, by setting a max-width relative to the viewport width.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/misc.mdx#2025-04-23_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.floating {\n  max-width: calc(100vw - 10px);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic useTypeahead Implementation - JavaScript\nDESCRIPTION: Demonstrates a complete implementation of useTypeahead with useFloating and useInteractions to create a typeahead-enabled menu.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useTypeahead.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  const [activeIndex, setActiveIndex] = useState(null);\n\n  const {refs, floatingStyles, context} = useFloating({\n    open: true,\n  });\n\n  const items = ['one', 'two', 'three'];\n\n  const listRef = useRef(items);\n\n  const typeahead = useTypeahead(context, {\n    listRef,\n    activeIndex,\n    onMatch: setActiveIndex,\n  });\n\n  const {getReferenceProps, getFloatingProps, getItemProps} =\n    useInteractions([typeahead]);\n\n  return (\n    <>\n      <div ref={refs.setReference} {...getReferenceProps()}>\n        Reference element\n      </div>\n      <div\n        ref={refs.setFloating}\n        style={floatingStyles}\n        {...getFloatingProps()}\n      >\n        {items.map((item, index) => (\n          <div\n            key={item}\n            // Make these elements focusable using a roving tabIndex.\n            tabIndex={activeIndex === index ? 0 : -1}\n            {...getItemProps()}\n          >\n            {item}\n          </div>\n        ))}\n      </div>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for UseTransitionStatusProps\nDESCRIPTION: TypeScript interface definition for the useTransitionStatus hook props, showing the available duration configuration option.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useTransition.mdx#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\ninterface UseTransitionStatusProps {\n  duration?: number | Partial<{open: number; close: number}>;\n}\n```\n\n----------------------------------------\n\nTITLE: Manual autoUpdate usage in DOM\nDESCRIPTION: Shows how to manually use autoUpdate in vanilla JavaScript with DOM manipulation.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/autoUpdate.mdx#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfunction updatePosition() {\n  computePosition(referenceEl, floatingEl).then(({x, y}) => {\n    // ...\n  });\n}\n\ndocument.body.append(floatingEl);\nconst cleanup = autoUpdate(\n  referenceEl,\n  floatingEl,\n  updatePosition,\n);\n\n// Later, when unmounting:\nfloatingEl.remove();\ncleanup();\n```\n\n----------------------------------------\n\nTITLE: Importing flip middleware from @floating-ui/react-dom\nDESCRIPTION: Shows how to import the flip middleware from the @floating-ui/react-dom package. This middleware prevents floating elements from overflowing by flipping to the opposite side.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/flip.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {flip} from '@floating-ui/react-dom';\n```\n\n----------------------------------------\n\nTITLE: Installing @floating-ui/vue using npm - Bash\nDESCRIPTION: Installs the @floating-ui/vue package via npm. This is a prerequisite for using Floating UI bindings within a Vue project. Run this command in your project directory before attempting imports or usage in your codebase.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/vue.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @floating-ui/vue\n\n```\n\n----------------------------------------\n\nTITLE: Setting alignment option in autoPlacement\nDESCRIPTION: Example showing how to set the alignment option to choose aligned placements like top-start, right-start, etc.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/autoPlacement.mdx#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nautoPlacement({\n  // top-start, right-start, bottom-start, left-start\n  alignment: 'start',\n});\n```\n\n----------------------------------------\n\nTITLE: Using size middleware in React with direct DOM manipulation\nDESCRIPTION: Alternative approach to implement size middleware in React by directly mutating the DOM element style.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/size.mdx#2025-04-23_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nuseFloating({\n  middleware: [\n    size({\n      apply({availableHeight, elements}) {\n        elements.floating.style.maxHeight = `${availableHeight}px`;\n      },\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Using whileElementsMounted Option\nDESCRIPTION: Shows how to use the whileElementsMounted option for cleanup functions.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useFloating.mdx#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nuseFloating({\n  whileElementsMounted: (reference, floating, update) => {\n    // ...\n    return () => {\n      // ...\n    };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using inline middleware with useFloating in Vue package\nDESCRIPTION: How to use the inline middleware with the useFloating function in the Vue package.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/inline.mdx#2025-04-23_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nuseFloating(reference, floating, {\n  middleware: [inline()],\n});\n```\n\n----------------------------------------\n\nTITLE: Using autoUpdate with whileElementsMounted\nDESCRIPTION: Shows how to use autoUpdate with the whileElementsMounted option.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useFloating.mdx#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport {autoUpdate} from '@floating-ui/react';\n\nuseFloating({\n  whileElementsMounted: autoUpdate,\n});\n```\n\n----------------------------------------\n\nTITLE: Restricting allowedPlacements to specific placements\nDESCRIPTION: Example showing how to restrict the allowed placements to only specific placement combinations.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/autoPlacement.mdx#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nautoPlacement({\n  // Only choose these placements\n  allowedPlacements: ['top-start', 'bottom-end'],\n});\n```\n\n----------------------------------------\n\nTITLE: External Reference Implementation\nDESCRIPTION: Example demonstrating how to implement useInteractions with external references using useFloatingRootContext.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useInteractions.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction TooltipRoot() {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const [anchor, setAnchor] = useState(null);\n  const [tooltip, setTooltip] = useState(null);\n\n  const context = useFloatingRootContext({\n    open: isOpen,\n    onOpenChange: setIsOpen,\n    // Required: both elements must be passed externally.\n    // Store them in state.\n    elements: {\n      reference: anchor,\n      floating: tooltip,\n    },\n  });\n\n  const click = useClick(context);\n\n  const {getReferenceProps, getFloatingProps} = useInteractions([\n    click,\n  ]);\n\n  return (\n    <>\n      <Anchor setAnchor={setAnchor} {...getReferenceProps()} />\n      <Tooltip\n        rootContext={context}\n        setTooltip={setTooltip}\n        {...getFloatingProps()}\n      />;\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Example Prop Usage\nDESCRIPTION: Collection of examples showing how to use various Composite component props.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/Composite.mdx#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n<Composite render={<button />} />\n\n<Composite orientation=\"horizontal\" />\n\n<Composite loop={false} />\n\n<Composite rtl={true} />\n\n<Composite cols={3} />\n\n<Composite disabledIndices={[1]} />\n\nconst [activeIndex, setActiveIndex] = useState(0);\nreturn <Composite activeIndex={activeIndex} />;\n\nconst [activeIndex, setActiveIndex] = useState(0);\nreturn <Composite onNavigate={setActiveIndex} />;\n\n<Composite\n  itemSizes={[\n    {width: 2, height: 2},\n    {width: 1, height: 3},\n  ]}\n/>\n\n<Composite dense />\n```\n\n----------------------------------------\n\nTITLE: Deriving shift options from state\nDESCRIPTION: Demonstrates how to derive shift middleware options from the middleware lifecycle state.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/shift.mdx#2025-04-23_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nshift((state) => ({\n  padding: state.rects.reference.width,\n}));\n```\n\n----------------------------------------\n\nTITLE: CSS for Handling Pointer Events with Safe Polygon\nDESCRIPTION: Provides CSS rules to manage pointer events when using the safePolygon feature, allowing scrolling containers to function properly.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useHover.mdx#2025-04-23_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n[data-floating-ui-safe-polygon] .scroll {\n  pointer-events: auto;\n}\n\n[data-floating-ui-safe-polygon] .scroll > div {\n  pointer-events: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling crossAxis in limitShift\nDESCRIPTION: Shows how to disable limiting on the cross axis in the limitShift function.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/shift.mdx#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nshift({\n  limiter: limitShift({\n    crossAxis: false,\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Vue Virtual Element Implementation\nDESCRIPTION: Demonstrates virtual element usage with Vue's ref system and useFloating hook.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/virtual-elements.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst reference = ref(virtualEl);\nconst floating = ref(null);\nuseFloating(reference, floating);\n```\n\n----------------------------------------\n\nTITLE: Configurable Middleware Function\nDESCRIPTION: Example of a middleware factory function that accepts configuration parameters.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/middleware.mdx#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst shiftByAmount = (amount = 0) => ({\n  name: 'shiftByAmount',\n  options: amount,\n  fn: ({x, y}) => ({\n    x: x + amount,\n    y: y + amount,\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Setting detectOverflow options in autoPlacement\nDESCRIPTION: Example showing how to pass detectOverflow options such as padding to the autoPlacement middleware.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/autoPlacement.mdx#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nautoPlacement({\n  padding: 5, // 0 by default\n});\n```\n\n----------------------------------------\n\nTITLE: Auto Placement Implementation Comparison\nDESCRIPTION: Comparison of auto placement implementation between Popper and Floating UI\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/migration.mdx#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport {createPopper} from '@popperjs/core';\n\ncreatePopper(reference, popper, {\n  placement: 'auto',\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport {computePosition, autoPlacement} from '@floating-ui/dom';\n\ncomputePosition(referenceEl, floatingEl, {\n  middleware: [autoPlacement()],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing useListItem Hook in an Option Component\nDESCRIPTION: Demonstrates how to use the useListItem hook within a list item component to retrieve the ref and index, which can be used to manage active state.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/FloatingList.mdx#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nfunction Option() {\n  const {activeIndex} = useSelectContext();\n  const {ref, index} = useListItem();\n\n  const isActive = activeIndex === index;\n\n  return <div ref={ref} tabIndex={isActive ? 0 : -1} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring stickIfOpen Behavior in useClick\nDESCRIPTION: Demonstrates how to configure whether the floating element should remain open when clicking the reference element for the first time after it was opened by another event.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useClick.mdx#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nuseClick(context, {\n  stickIfOpen: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Importing flushSync for React implementation\nDESCRIPTION: Shows how to import flushSync from react-dom for synchronous state updates.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/size.mdx#2025-04-23_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nimport {flushSync} from 'react-dom';\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for UseInteractions\nDESCRIPTION: TypeScript interface definition showing the return type of useInteractions hook with prop getter functions.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useInteractions.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface UseInteractionsReturn {\n  getReferenceProps(\n    userProps?: React.HTMLProps<Element>,\n  ): Record<string, unknown>;\n  getFloatingProps(\n    userProps?: React.HTMLProps<HTMLElement>,\n  ): Record<string, unknown>;\n  getItemProps(\n    userProps?: React.HTMLProps<HTMLElement>,\n  ): Record<string, unknown>;\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Updating Floating Position with useFloating - Vue\nDESCRIPTION: Uses the update() function returned by useFloating to manually trigger position recalculation, in this example responding to a @resize event on a custom Panel component. Useful in scenarios not covered by autoUpdate. Requires useFloating setup and listening for relevant events.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/vue.mdx#2025-04-23_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst {update} = useFloating(reference, floating);\n</script>\n\n<template>\n  <Panel @resize=\"update\" />\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Installing Floating UI React Native Package\nDESCRIPTION: Command to install the @floating-ui/react-native package using npm.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/react-native.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @floating-ui/react-native\n```\n\n----------------------------------------\n\nTITLE: Using useTransitionStyles with Custom Duration and Initial Styles\nDESCRIPTION: Shows how to customize transitions by setting a specific duration and initial styles for the floating element.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useTransition.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst {isMounted, styles} = useTransitionStyles(context, {\n  // Configure both open and close durations:\n  duration: 200,\n  // Or, configure open and close durations separately:\n  duration: {\n    open: 200,\n    close: 100,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using shift with computePosition in core/dom\nDESCRIPTION: Demonstrates how to use the shift middleware with computePosition in core or dom packages.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/shift.mdx#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncomputePosition(referenceEl, floatingEl, {\n  middleware: [shift()],\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing domReference Property on Elements from useFloating (JavaScript)\nDESCRIPTION: Logs the domReference property from the elements object, which provides direct reference to the actual DOM element. Useful for cases where a guaranteed DOM node (not virtual) is needed, such as for integration with non-React code.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useFloating.mdx#2025-04-23_snippet_39\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {elements} = useFloating();\nconsole.log(elements.domReference);\n\n```\n\n----------------------------------------\n\nTITLE: React Testing with Floating UI\nDESCRIPTION: Testing pattern that ensures microtasks are flushed immediately after the floating element renders to avoid act warnings in tests.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/react.mdx#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport {act} from '@testing-library/react';\n\ntest('something', async () => {\n  render(<Tooltip open />);\n  await act(async () => {}); // Flush microtasks.\n  // Position state is ready by this line.\n});\n```\n\nLANGUAGE: js\nCODE:\n```\nconst waitForPosition = () => act(async () => {});\n\ntest('something', async () => {\n  render(<Tooltip open />);\n  await waitForPosition();\n  expect(screen.queryByRole('tooltip')).toBeInTheDocument();\n});\n```\n\n----------------------------------------\n\nTITLE: Using offset middleware with computePosition in core/dom\nDESCRIPTION: Example of using the offset middleware with computePosition in core or DOM packages. This adds a 10px offset between the reference and floating elements.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/offset.mdx#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncomputePosition(referenceEl, floatingEl, {\n  middleware: [offset(10)],\n});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Custom Centering with Floating Component in JSX\nDESCRIPTION: Illustrates the usage of a hypothetical `Floating` component (likely within a documentation or demo environment) configured with the `offset` middleware to achieve centering. The `options` for the middleware directly implement the centering calculation based on `rects`. This snippet shows how the centering logic can be applied within a component structure.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/offset.mdx#2025-04-23_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\n<Floating\n  middleware={[\n    {\n      name: 'offset',\n      options: ({rects}) =>\n        -rects.reference.height / 2 -\n        rects.floating.height / 2,\n    },\n  ]}\n>\n  <div className=\"mx-auto grid h-32 w-32 place-items-center border-2 border-dashed border-gray-1000\">\n    10px\n  </div>\n</Floating>\n```\n\n----------------------------------------\n\nTITLE: Importing autoPlacement from @floating-ui/react-native\nDESCRIPTION: Shows how to import the autoPlacement middleware from the @floating-ui/react-native package.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/autoPlacement.mdx#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {autoPlacement} from '@floating-ui/react-native';\n```\n\n----------------------------------------\n\nTITLE: useDismiss Props Interface\nDESCRIPTION: TypeScript interface defining all available props for the useDismiss hook including enabled, escapeKey, referencePress, and other configuration options.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useDismiss.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface UseDismissProps {\n  enabled?: boolean;\n  escapeKey?: boolean;\n  referencePress?: boolean;\n  referencePressEvent?: 'pointerdown' | 'mousedown' | 'click';\n  outsidePress?: boolean | ((event: MouseEvent) => boolean);\n  outsidePressEvent?: 'pointerdown' | 'mousedown' | 'click';\n  ancestorScroll?: boolean;\n  bubbles?:\n    | boolean\n    | {escapeKey?: boolean; outsidePress?: boolean};\n  capture?:\n    | boolean\n    | {escapeKey?: boolean; outsidePress?: boolean};\n}\n```\n\n----------------------------------------\n\nTITLE: Using an object for offset in limitShift\nDESCRIPTION: Shows how to set different offset values for main and cross axes using an object in limitShift.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/shift.mdx#2025-04-23_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nshift({\n  limiter: limitShift({\n    // object\n    offset: {\n      mainAxis: 10,\n      crossAxis: 5,\n    },\n    // or a function which returns one\n    offset: ({rects, placement}) => ({\n      mainAxis: rects.reference.height,\n      crossAxis: rects.floating.width,\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Restricting allowedPlacements to vertical placements\nDESCRIPTION: Example showing how to restrict the allowed placements to only top and bottom positions.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/autoPlacement.mdx#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nautoPlacement({\n  // 'right' and 'left' won't be chosen\n  allowedPlacements: ['top', 'bottom'],\n});\n```\n\n----------------------------------------\n\nTITLE: Styling the Tooltip for Initial State and Visibility in CSS\nDESCRIPTION: Provides CSS rules for the main tooltip element (`#tooltip`). It sets `display: none` to hide the tooltip initially, defines `position: absolute` for Floating UI positioning, sets `width: max-content` for proper sizing, and includes basic visual styles like background, color, padding, and border-radius.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/tutorial.mdx#2025-04-23_snippet_14\n\nLANGUAGE: css\nCODE:\n```\n#tooltip {\n  display: none;\n  width: max-content;\n  position: absolute;\n  top: 0;\n  left: 0;\n  background: #222;\n  color: white;\n  font-weight: bold;\n  padding: 5px;\n  border-radius: 4px;\n  font-size: 90%;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Reference Node Using setReference from useFloating in JSX (JavaScript)\nDESCRIPTION: This snippet shows how to attach the setReference function from useFloating's refs to a div's ref prop in JSX, allowing dynamic assignment of a reference element in the React tree. Ensures proper setup of reference tracking for positioning calculations.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useFloating.mdx#2025-04-23_snippet_33\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {refs} = useFloating();\nreturn <div ref={refs.setReference} />;\n\n```\n\n----------------------------------------\n\nTITLE: Making the tooltip float with CSS\nDESCRIPTION: Adjusts the CSS to make the tooltip float on top of the UI by setting absolute positioning and max-content width.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/tutorial.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n#tooltip {\n  width: max-content;\n  position: absolute;\n  top: 0;\n  left: 0;\n  background: #222;\n  color: white;\n  font-weight: bold;\n  padding: 5px;\n  border-radius: 4px;\n  font-size: 90%;\n}\n```\n\n----------------------------------------\n\nTITLE: Using autoUpdate with options in Vue\nDESCRIPTION: Demonstrates how to use autoUpdate with custom options in Vue.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/autoUpdate.mdx#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nuseFloating(reference, floating, {\n  whileElementsMounted(referenceEl, floatingEl, update) {\n    const cleanup = autoUpdate(referenceEl, floatingEl, update, {\n      ancestorScroll: false,\n    });\n    return cleanup;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Shift Middleware Implementation\nDESCRIPTION: Example of a custom middleware that shifts coordinates by one pixel.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/middleware.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst shiftByOnePixel = {\n  name: 'shiftByOnePixel',\n  fn({x, y}) {\n    return {\n      x: x + 1,\n      y: y + 1,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom 'center' Placement Wrapper in JavaScript\nDESCRIPTION: Demonstrates how to abstract the custom centering logic into a reusable wrapper function. It shows the desired simplified API call (`placement: 'center'`) and then provides an implementation (`computePosition` wrapper) that intercepts the 'center' placement option. The wrapper internally uses the `offset` middleware with the centering logic and applies it conditionally, falling back to the base `computePosition` for other placements.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/offset.mdx#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\ncomputePosition(referenceEl, floatingEl, {\n  placement: 'center',\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport {computePosition as base, offset} from '@floating-ui/dom';\n\nconst centerOffset = offset(({rects}) => {\n  return -rects.reference.height / 2 - rects.floating.height / 2;\n});\n\nexport function computePosition(\n  referenceEl,\n  floatingEl,\n  options,\n) {\n  const isCentered = options.placement === 'center';\n  const placement = isCentered ? 'bottom' : options.placement;\n  const middleware = [\n    isCentered && centerOffset,\n    ...(options.middleware || []),\n  ];\n\n  return base(referenceEl, floatingEl, {\n    ...options,\n    placement,\n    middleware,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: DetectOverflow Options Interface\nDESCRIPTION: TypeScript interface defining the available options for the detectOverflow function.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/detectOverflow.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface DetectOverflowOptions {\n  boundary: Boundary;\n  rootBoundary: RootBoundary;\n  elementContext: ElementContext;\n  altBoundary: boolean;\n  padding: Padding;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing computePosition from @floating-ui/dom\nDESCRIPTION: Demonstrates how to import the computePosition function from the DOM package of Floating UI.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/computePosition.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {computePosition} from '@floating-ui/dom';\n```\n\n----------------------------------------\n\nTITLE: Passing Reactive 'Ref' Options to useFloating - JavaScript\nDESCRIPTION: Shows that useFloating can consume Vue refs as options for placement or middleware, enabling dynamic updates to positioning when these refs change. The example demonstrates creating ref holders for placement and middleware, importing middleware utilities, and passing them as options on initialization.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/vue.mdx#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport {\n  useFloating,\n  offset,\n  flip,\n  shift,\n} from '@floating-ui/vue';\n\n// Inside your component\nconst placement = ref('right');\nconst middleware = ref([offset(10), flip(), shift()]);\nuseFloating(reference, floating, {\n  placement,\n  middleware,\n});\n\n```\n\n----------------------------------------\n\nTITLE: UseInnerOffset Props Interface Definition - JavaScript\nDESCRIPTION: Interface definition for the useInnerOffset hook props including enabled flag, overflowRef, and onChange callback.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/inner.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ninterface UseInnerOffsetProps {\n  enabled?: boolean;\n  overflowRef: React.MutableRefObject<SideObject | null>;\n  onChange(\n    offset: number | ((offset: number) => number)\n  ): void;\n  scrollRef?: React.MutableRefObject<HTMLElement | null>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Floating UI Devtools with React\nDESCRIPTION: Example showing how to integrate the devtools middleware with @floating-ui/react component. The middleware is conditionally added in development mode to help with debugging floating elements.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/packages/devtools/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// example with @floating-ui/react\nimport {devtools} from '@floating-ui/devtools';\n\nexport const Default = () => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const {refs, floatingStyles, context} = useFloating({\n    open: isOpen,\n    onOpenChange: setIsOpen,\n    // add the middleware to the end of the middleware chain if in dev mode\n    middleware: [import.meta.env.DEV && devtools(document)],\n  });\n\n  const click = useClick(context);\n\n  const {getReferenceProps, getFloatingProps} = useInteractions([click]);\n\n  return (\n    <>\n      <button ref={refs.setReference} {...getReferenceProps()}>\n        Reference element\n      </button>\n      {isOpen && (\n        <div\n          ref={refs.setFloating}\n          style={floatingStyles}\n          {...getFloatingProps()}\n        >\n          Floating element\n        </div>\n      )}\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling useClick Hook Conditionally\nDESCRIPTION: Shows how to conditionally enable or disable the useClick hook using the enabled prop.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useClick.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nuseClick(context, {\n  enabled: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Using useListItem with a Label for Typeahead Functionality\nDESCRIPTION: Shows how to use the useListItem hook with a label property, which enables typeahead functionality for the list item. The label can be set to null for disabled items.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/FloatingList.mdx#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nfunction Option({label}) {\n  const {activeIndex} = useSelectContext();\n  const {ref, index} = useListItem({\n    label,\n  });\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using the onOpenChange Event Callback\nDESCRIPTION: Example of the onOpenChange callback with event object and reason string parameters, which provides context about what triggered the state change.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/react.mdx#2025-04-23_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nuseFloating({\n  onOpenChange(isOpen, event, reason) {\n    setIsOpen(isOpen);\n    event && console.log(event);\n    reason && console.log(reason);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for UseHoverProps\nDESCRIPTION: Defines the TypeScript interface for the props accepted by the useHover hook, including options for enabling/disabling, delay, and handling close events.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useHover.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface UseHoverProps {\n  enabled?: boolean;\n  mouseOnly?: boolean;\n  delay?: number | Partial<{open: number; close: number}>;\n  restMs?: number;\n  move?: boolean;\n  handleClose?: null | HandleCloseFn;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Parent Node Selection in FloatingUI\nDESCRIPTION: Demonstrates how to specify a custom parent node by passing a parentId to the useFloatingNodeId hook. This allows marking a sibling element as the child of another sibling in the floating UI tree.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/FloatingTree.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst nodeId = useFloatingNodeId(parentId);\n```\n\n----------------------------------------\n\nTITLE: Importing autoUpdate in DOM\nDESCRIPTION: Imports the autoUpdate function from the @floating-ui/dom package.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/autoUpdate.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {autoUpdate} from '@floating-ui/dom';\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Custom Diagonal Placement with Floating Component in JSX\nDESCRIPTION: Illustrates the usage of a hypothetical `Floating` component configured for diagonal placement. It sets the `placement` to 'top-start' and uses the `offset` middleware with `alignmentAxis` calculated from `rects` to achieve the diagonal shift. This snippet shows the application of the diagonal logic within a component structure.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/offset.mdx#2025-04-23_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\n<Floating\n  placement=\"top-start\"\n  middleware={[\n    {\n      name: 'offset',\n      options: ({rects}) => ({\n        alignmentAxis: -rects.floating.width,\n      }),\n    },\n  ]}\n>\n  <div className=\"mx-auto grid h-32 w-32 place-items-center border-2 border-dashed border-gray-1000\" />\n</Floating>\n```\n\n----------------------------------------\n\nTITLE: Defining positioning strategy types\nDESCRIPTION: Shows the available positioning strategy options as a TypeScript type, which determine how the floating element is positioned in the DOM.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/computePosition.mdx#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ntype Strategy = 'absolute' | 'fixed';\n```\n\n----------------------------------------\n\nTITLE: Updating Data Union Type to Include New Library in TypeScript\nDESCRIPTION: This code snippet shows how to update the main views index file to include the newly created custom data-types for MyLibrary. It demonstrates the pattern for integrating new libraries into the extension by updating the Data union type and views object.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/extension/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n# ./src/views/index.tsx\nimport type React from 'react';\n\nimport * as common from './common';\nimport * as floatingUI from './floating-ui';\nimport * as fluentUI from './fluentui';\n+import * as myLibrary from './my-library'\n\nexport type Data =\n  | common.Datatype\n  | floatingUI.Datatype\n  | fluentUI.Datatype\n+  | myLibrary.Datatype\n\nexport const views: Record<Data['type'], React.FC> = {\n  ...common.views,\n  ...floatingUI.views,\n  ...fluentUI.views,\n+ ...myLibrary.views\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Coordinates from useFloating for Custom Positioning - JavaScript\nDESCRIPTION: Demonstrates how to extract raw position coordinates (x, y) and the positioning strategy from useFloating. Useful when you need to fully customize how positioning styles are applied rather than using floatingStyles. Accepts the standard Vue refs for reference and floating elements.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/vue.mdx#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst {x, y, strategy} = useFloating(reference, floating);\n\n```\n\n----------------------------------------\n\nTITLE: Advanced onOpenChange with Event and Reason\nDESCRIPTION: Shows how to use onOpenChange with event and reason parameters.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useFloating.mdx#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nuseFloating({\n  open: isOpen,\n  onOpenChange(isOpen, event, reason) {\n    setIsOpen(isOpen);\n    event && console.log(event); // e.g. MouseEvent\n    reason && console.log(reason); // e.g. 'hover'\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: useFloating Options Usage\nDESCRIPTION: Shows how to pass options to the useFloating hook.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useFloating.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nuseFloating({\n  // options\n});\n```\n\n----------------------------------------\n\nTITLE: Hide Middleware TypeScript Interface\nDESCRIPTION: TypeScript interface definition for the hide middleware options, extending DetectOverflowOptions.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/hide.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface HideOptions extends DetectOverflowOptions {\n  strategy?: 'referenceHidden' | 'escaped';\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Disabled Indices in useListNavigation (JavaScript)\nDESCRIPTION: This snippet demonstrates how to configure the `useListNavigation` hook by passing an array to the `disabledIndices` prop. This manually specifies which item indices (e.g., 0 and 3) should be skipped during list navigation, overriding the default behavior which relies on `disabled` or `aria-disabled` attributes on rendered items.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useListNavigation.mdx#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nuseListNavigation(context, {\n  disabledIndices: [0, 3],\n});\n```\n\n----------------------------------------\n\nTITLE: Importing autoUpdate in React DOM\nDESCRIPTION: Imports the autoUpdate function from the @floating-ui/react-dom package.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/autoUpdate.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {autoUpdate} from '@floating-ui/react-dom';\n```\n\n----------------------------------------\n\nTITLE: Enabling Dense Grid Layout in useListNavigation (JavaScript)\nDESCRIPTION: This snippet demonstrates enabling the `dense` option specifically for grid navigation within the `useListNavigation` hook configuration. Setting `dense` to `true` instructs the grid positioning algorithm to attempt to fill holes earlier in the grid if smaller items come up later, similar to the CSS Grid `auto-flow: dense` behavior. The default value is `false`.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useListNavigation.mdx#2025-04-23_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nuseListNavigation(context, {\n  dense: true,\n});\n```\n\n----------------------------------------\n\nTITLE: FloatingOverlay Props Interface\nDESCRIPTION: Defines the TypeScript interface for the FloatingOverlay component props, which includes an optional lockScroll property.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/FloatingOverlay.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface FloatingOverlayProps {\n  lockScroll?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for Arrow Element\nDESCRIPTION: Shows the CSS styling required for the arrow element.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/arrow.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n#arrow {\n  position: absolute;\n}\n```\n\n----------------------------------------\n\nTITLE: Using size middleware with padding\nDESCRIPTION: Example of setting a padding option with the size middleware.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/size.mdx#2025-04-23_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nsize({padding: 5}); // 0 by default\n```\n\n----------------------------------------\n\nTITLE: FloatingFocusManager Props Interface\nDESCRIPTION: TypeScript interface definition showing all available props for the FloatingFocusManager component.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/FloatingFocusManager.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface FloatingFocusManagerProps {\n  context: FloatingContext;\n  disabled?: boolean;\n  initialFocus?:\n    | number\n    | React.MutableRefObject<HTMLElement | null>;\n  returnFocus?:\n    | boolean\n    | React.MutableRefObject<HTMLElement | null>;\n  restoreFocus?: boolean;\n  guards?: boolean;\n  modal?: boolean;\n  visuallyHiddenDismiss?: boolean | string;\n  closeOnFocusOut?: boolean;\n  outsideElementsInert?: boolean;\n  getInsideElements?: () => Element[];\n  order?: Array<'reference' | 'floating' | 'content'>;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting explicit fallbackPlacements for flip middleware\nDESCRIPTION: Example of setting explicit fallbackPlacements for the flip middleware. This specifies the exact order of placements to try if the initial placement doesn't fit, in this case 'right' then 'bottom'.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/flip.mdx#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nflip({\n  fallbackPlacements: ['right', 'bottom'],\n});\n```\n\n----------------------------------------\n\nTITLE: Applying custom placement to the tooltip\nDESCRIPTION: Demonstrates how to use the placement option in computePosition to change the tooltip's position relative to the button.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/tutorial.mdx#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {computePosition} from 'https://cdn.jsdelivr.net/npm/@floating-ui/dom@__DOM_VERSION__/+esm';\n\nconst button = document.querySelector('#button');\nconst tooltip = document.querySelector('#tooltip');\n\ncomputePosition(button, tooltip, {\n  placement: 'right',\n}).then(({x, y}) => {\n  Object.assign(tooltip.style, {\n    left: `${x}px`,\n    top: `${y}px`,\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Shadow DOM Fix in Floating UI\nDESCRIPTION: Shows how to use the 'composed-offset-position' package to fix Shadow DOM positioning issues in Floating UI.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/platform.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {platform} from '@floating-ui/dom';\nimport {offsetParent} from 'composed-offset-position';\n\ncomputePosition(referenceEl, floatingEl, {\n  platform: {\n    ...platform,\n    getOffsetParent: (element) =>\n      platform.getOffsetParent(element, offsetParent),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring fallbackStrategy in flip() Middleware - Floating UI JavaScript\nDESCRIPTION: Demonstrates how to specify the fallbackStrategy option in the flip() middleware for Floating UI. This configuration determines the behavior when none of the preferred placements fit, with 'initialPlacement' ensuring the original placement is used as a last resort. Requires Floating UI installed and imported, and is typically used within the setup of floating element logic.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/flip.mdx#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nflip({\n  fallbackStrategy: 'initialPlacement',\n});\n```\n\n----------------------------------------\n\nTITLE: Hide Middleware Data Interface\nDESCRIPTION: TypeScript interface showing the structure of data returned by the hide middleware.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/hide.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Data {\n  referenceHidden?: boolean;\n  referenceHiddenOffsets?: SideObject;\n  escaped?: boolean;\n  escapedOffsets?: SideObject;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Logic Hook in Floating UI with TypeScript\nDESCRIPTION: Demonstrates how to create a custom hook that returns element props for floating UI components. The hook returns optional props for reference, floating, and item elements wrapped in a useMemo for performance optimization.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/custom-hooks.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst useCustomLogic = (\n  context: FloatingContext,\n): ElementProps => {\n  const referenceProps = useMemo(\n    () => ({\n      // React.HTMLProps\n      onClick: () => console.log('clicked'),\n    }),\n    [],\n  );\n  const floatingProps = useMemo(\n    () => ({\n      // React.HTMLProps\n    }),\n    [],\n  );\n  const itemProps = useMemo(\n    () => ({\n      // React.HTMLProps\n    }),\n    [],\n  );\n\n  // All 3 of these properties are optional.\n  return useMemo(\n    () => ({\n      reference: referenceProps,\n      floating: floatingProps,\n      item: itemProps,\n    }),\n    [referenceProps, floatingProps, itemProps],\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using useFloatingPortalNode Hook for Custom Portal Implementation\nDESCRIPTION: Example of using the useFloatingPortalNode hook to access the portal container node for custom portal implementations.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/FloatingPortal.mdx#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  const portalNode = useFloatingPortalNode({\n    // Accepts `id` and `root` props\n  });\n\n  if (portalNode) {\n    return createPortal(<div />, portalNode);\n  }\n\n  return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling crossAxis option in flip middleware\nDESCRIPTION: Example of disabling the crossAxis option for the flip middleware. This makes the floating element ignore overflow on the cross axis, which is perpendicular to the main axis.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/flip.mdx#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nflip({\n  crossAxis: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Initial Styles for Transitions\nDESCRIPTION: Demonstrates how to set custom initial styles for a floating element transition, including a placement-aware approach using a function.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useTransition.mdx#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst {isMounted, styles} = useTransitionStyles(context, {\n  initial: {\n    opacity: 0,\n    transform: 'scale(0.8)',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting crossAxis offset option\nDESCRIPTION: Example of configuring the crossAxis property which controls the skidding/sliding between the floating element and reference element perpendicular to the placement axis.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/offset.mdx#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\noffset({\n  crossAxis: 20,\n});\n```\n\n----------------------------------------\n\nTITLE: Using Virtual Elements as Reference with useFloating - Vue\nDESCRIPTION: Demonstrates using a JavaScript virtual element (an object implementing getBoundingClientRect) as the reference parameter for useFloating. This is useful when you want to anchor a floating component to a coordinate or area that doesn't correspond to a real DOM element. Must assign the virtual element inside onMounted or a similar lifecycle/event.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/vue.mdx#2025-04-23_snippet_12\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport {onMounted, ref} from 'vue';\nimport {useFloating} from '@floating-ui/vue';\n\nconst reference = ref(null);\nconst floating = ref(null);\nconst {floatingStyles} = useFloating(reference, floating);\n\nonMounted(() => {\n  /**\n   * Assign the virtual element to reference inside\n   * a lifecycle hook or effect or event handler.\n   */\n  reference.value = {\n    getBoundingClientRect() {\n      return {\n        // ...\n      };\n    },\n  };\n});\n</script>\n\n<template>\n  <div ref=\"floating\">Tooltip</div>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Mouse Event Type for useClick\nDESCRIPTION: Demonstrates how to change the event type from the default 'click' to 'mousedown' for the useClick hook.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useClick.mdx#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nuseClick(context, {\n  event: 'mousedown',\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing getClientRects for Floating UI Platform\nDESCRIPTION: Shows how to implement the optional getClientRects method for a custom Floating UI platform.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/platform.mdx#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getClientRects(element) {\n  return [];\n}\n```\n\n----------------------------------------\n\nTITLE: Using autoPlacement with computePosition in core/dom\nDESCRIPTION: Example of using the autoPlacement middleware with computePosition function in core/dom packages.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/autoPlacement.mdx#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncomputePosition(referenceEl, floatingEl, {\n  middleware: [autoPlacement()],\n});\n```\n\n----------------------------------------\n\nTITLE: External Elements Usage\nDESCRIPTION: Demonstrates how to use the elements option for externally passing elements.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useFloating.mdx#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst [reference, setReference] = useState(null);\n\nconst {refs} = useFloating({\n  elements: {\n    reference,\n  },\n});\n\nreturn (\n  <>\n    <div ref={setReference} />\n    <div ref={refs.setFloating} />\n  </>\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing domReference Ref in useFloating with useEffect (JavaScript)\nDESCRIPTION: This pattern logs the domReference ref's current value inside a React effect, ensuring the most up-to-date DOM node is accessed after rendering. Requires domReference to be available on the refs object, and is useful for scenarios needing guaranteed DOM element access.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useFloating.mdx#2025-04-23_snippet_32\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {refs} = useFloating();\nuseEffect(() => {\n  console.log(refs.domReference.current);\n}, [refs]);\n\n```\n\n----------------------------------------\n\nTITLE: React Click Event Virtual Element\nDESCRIPTION: Shows how to implement click-based virtual elements in React using refs.setPositionReference.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/virtual-elements.mdx#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst {refs} = useFloating();\n\nreturn (\n  <div\n    onClick={({clientX, clientY}) => {\n      refs.setPositionReference({\n        getBoundingClientRect() {\n          return {\n            width: 0,\n            height: 0,\n            x: clientX,\n            y: clientY,\n            top: clientY,\n            left: clientX,\n            right: clientX,\n            bottom: clientY,\n          };\n        },\n      });\n    }}\n  />\n);\n```\n\n----------------------------------------\n\nTITLE: Popper vs Floating UI Middleware Comparison\nDESCRIPTION: Comparison of modifier configuration between Popper and Floating UI\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/migration.mdx#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncreatePopper(reference, popper, {\n  modifiers: [\n    {\n      name: 'offset',\n      options: {\n        offset: [0, 10],\n      },\n    },\n  ],\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncomputePosition(referenceEl, floatingEl, {\n  middleware: [offset(10)],\n});\n```\n\n----------------------------------------\n\nTITLE: Core/DOM Position Computation\nDESCRIPTION: Demonstrates how to compute position using virtual element in core/DOM implementation.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/virtual-elements.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncomputePosition(virtualEl, floatingEl);\n```\n\n----------------------------------------\n\nTITLE: Importing shift and limitShift from @floating-ui/vue\nDESCRIPTION: Shows how to import both shift and limitShift middleware from the @floating-ui/vue package.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/shift.mdx#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport {shift, limitShift} from '@floating-ui/vue';\n```\n\n----------------------------------------\n\nTITLE: Setting fallbackAxisSideDirection to start\nDESCRIPTION: Example of setting the fallbackAxisSideDirection option to 'start'. This allows fallback to the perpendicular axis, preferring the 'start' direction first (top/left) if the original placement doesn't fit.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/flip.mdx#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nflip({\n  fallbackAxisSideDirection: 'start',\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Root Element for FloatingPortal\nDESCRIPTION: Example showing how to specify a custom root element or reference for the FloatingPortal component.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/FloatingPortal.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Element\n<FloatingPortal root={rootNode} />\n// MutableRefObject\n<FloatingPortal root={rootNodeRef} />\n```\n\n----------------------------------------\n\nTITLE: Nested Iframe Reference Element HTML Structure\nDESCRIPTION: Example HTML structure showing nested iframes where positioning needs to be calculated relative to iframe offsetParent. Demonstrates a bug fix for positioning elements inside multiple levels of iframes.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/packages/dom/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <iframe>\n    <div>floating</div>\n    <iframe>\n      <div>reference</div>\n    </iframe>\n  </iframe>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Type Narrowing for Reference Elements\nDESCRIPTION: Examples of how to narrow the TypeScript type of reference elements when using virtual elements or performing DOM operations.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/react.mdx#2025-04-23_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nconst {refs} = useFloating<HTMLButtonElement>();\n// refs.domReference.current is now of type HTMLButtonElement\n```\n\nLANGUAGE: js\nCODE:\n```\nconst {refs} = useFloating<HTMLButtonElement>();\n// refs.reference.current is now of type HTMLButtonElement\n```\n\n----------------------------------------\n\nTITLE: Using crossAxis option with autoPlacement\nDESCRIPTION: Example showing how to use the crossAxis option to enable 'most space' strategy for the cross axis.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/autoPlacement.mdx#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nautoPlacement({\n  crossAxis: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing getOffsetParent for Floating UI Platform\nDESCRIPTION: Shows how to implement the optional getOffsetParent method for a custom Floating UI platform.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/platform.mdx#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getOffsetParent(element, polyfill) {\n  return {\n    clientWidth: 0,\n    clientHeight: 0,\n    clientLeft: 0,\n    clientTop: 0,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Automatic Position Updates with Floating UI\nDESCRIPTION: Implementation of automatic position updates using autoUpdate\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/migration.mdx#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {computePosition, autoUpdate} from '@floating-ui/dom';\n\nconst cleanup = autoUpdate(referenceEl, floatingEl, () => {\n  computePosition(referenceEl, floatingEl).then(({x, y}) => {\n    Object.assign(floatingEl.style, {\n      left: `${x}px`,\n      top: `${y}px`,\n    });\n  });\n});\n\ncleanup();\n```\n\n----------------------------------------\n\nTITLE: React/React Native Virtual Element Usage\nDESCRIPTION: Shows how to use virtual elements with the useFloating hook in React/React Native.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/virtual-elements.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nuseFloating({\n  elements: {\n    reference: virtualEl,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing autoPlacement from @floating-ui/react\nDESCRIPTION: Shows how to import the autoPlacement middleware from the @floating-ui/react package.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/autoPlacement.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {autoPlacement} from '@floating-ui/react';\n```\n\n----------------------------------------\n\nTITLE: Basic FloatingDelayGroup Implementation with Tooltips\nDESCRIPTION: Demonstrates how to wrap multiple Tooltip components with a FloatingDelayGroup to share delay behavior. This example sets a 1000ms open delay and 200ms close delay for the group.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/FloatingDelayGroup.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  return (\n    <FloatingDelayGroup delay={{open: 1000, close: 200}}>\n      <Tooltip label=\"One\">\n        <button>Ref</button>\n      </Tooltip>\n      <Tooltip label=\"Two\">\n        <button>Ref</button>\n      </Tooltip>\n      <Tooltip label=\"Three\">\n        <button>Ref</button>\n      </Tooltip>\n    </FloatingDelayGroup>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Deriving size options from state\nDESCRIPTION: Shows how to derive size options dynamically from the middleware state.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/size.mdx#2025-04-23_snippet_15\n\nLANGUAGE: js\nCODE:\n```\nsize((state) => ({\n  padding: state.rects.reference.width,\n}));\n```\n\n----------------------------------------\n\nTITLE: Setting positioning strategy option\nDESCRIPTION: Demonstrates how to specify a positioning strategy (absolute or fixed) when using computePosition.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/computePosition.mdx#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ncomputePosition(referenceEl, floatingEl, {\n  strategy: 'fixed', // 'absolute' by default\n});\n```\n\n----------------------------------------\n\nTITLE: Importing inline middleware from @floating-ui/react\nDESCRIPTION: How to import the inline middleware from the React package of Floating UI.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/inline.mdx#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport {inline} from '@floating-ui/react';\n```\n\n----------------------------------------\n\nTITLE: Setting placement option\nDESCRIPTION: Demonstrates how to specify a placement option to control where the floating element appears relative to the reference element.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/computePosition.mdx#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ncomputePosition(referenceEl, floatingEl, {\n  placement: 'bottom-start', // 'bottom' by default\n});\n```\n\n----------------------------------------\n\nTITLE: Using useDelayGroup Hook with FloatingDelayGroup\nDESCRIPTION: Shows how to implement the useDelayGroup hook within a component to access the delay context from the FloatingDelayGroup provider. This enables the component to participate in the delay grouping behavior.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/FloatingDelayGroup.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  FloatingDelayGroup,\n  useDelayGroup,\n  useHover,\n  useFloating,\n} from '@floating-ui/react';\n\nfunction Tooltip() {\n  const {context} = useFloating();\n  const {delay} = useDelayGroup(context);\n  const hover = useHover(context, {delay});\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Floating UI Position Implementation\nDESCRIPTION: Basic implementation of positioning using Floating UI's computePosition\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/migration.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {computePosition} from '@floating-ui/dom';\n\ncomputePosition(referenceEl, floatingEl).then(({x, y}) => {\n  Object.assign(floatingEl.style, {\n    left: `${x}px`,\n    top: `${y}px`,\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing final placement with useFloating in Vue\nDESCRIPTION: Example showing how to access the final placement with useFloating function and autoPlacement middleware in Vue.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/autoPlacement.mdx#2025-04-23_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// placement can be any side\nconst {placement} = useFloating(reference, floating, {\n  middleware: [autoPlacement()],\n});\n```\n\n----------------------------------------\n\nTITLE: Extending DOM Platform in Floating UI\nDESCRIPTION: Shows how to extend or customize existing DOM methods when using @floating-ui/dom by accessing the platform import.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/platform.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {platform} from '@floating-ui/dom';\n\ncomputePosition(referenceEl, floatingEl, {\n  platform: {\n    ...platform,\n    // Overwrite the methods above with your own.\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Getting X-Coordinate from useFloating Hook in React (JavaScript)\nDESCRIPTION: This React snippet gets the calculated x position for the floating element from useFloating, useful when custom positioning logic is needed. To use, simply destructure x from useFloating's return object within a functional component.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useFloating.mdx#2025-04-23_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {x} = useFloating();\n\n```\n\n----------------------------------------\n\nTITLE: Using autoUpdate with whileElementsMounted in Vue\nDESCRIPTION: Demonstrates how to use autoUpdate with the whileElementsMounted option in Vue.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/autoUpdate.mdx#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nuseFloating(reference, floating, {\n  whileElementsMounted: autoUpdate,\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Floating UI Vue Package\nDESCRIPTION: Command to install the Vue version of Floating UI.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/getting-started.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @floating-ui/vue\n```\n\n----------------------------------------\n\nTITLE: Disabling Toggle Behavior in useClick\nDESCRIPTION: Shows how to disable the default toggle behavior where repeated clicks would open and close the floating element.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useClick.mdx#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nuseClick(context, {\n  toggle: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Floating Context Using useFloating in React (JavaScript)\nDESCRIPTION: This snippet demonstrates how to extract the context property from useFloating inside a React component. It assumes that the useFloating hook has been imported and can be destructured for required properties. No special dependencies apart from React and the Floating UI library are needed, and the snippet showcases straightforward usage for accessing context data.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useFloating.mdx#2025-04-23_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {context} = useFloating();\n\n```\n\n----------------------------------------\n\nTITLE: Disabling Keyboard Handlers in useClick\nDESCRIPTION: Shows how to disable the keyboard handlers (Enter and Space keys) that are added by default for non-button elements.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useClick.mdx#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nuseClick(context, {\n  keyboardHandlers: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Importing useFloating in React DOM\nDESCRIPTION: Shows how to import the useFloating hook from @floating-ui/react-dom package.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useFloating.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {useFloating} from '@floating-ui/react-dom';\n```\n\n----------------------------------------\n\nTITLE: Disabling Tab Order Preservation in FloatingPortal\nDESCRIPTION: Example showing how to disable the default tab order preservation behavior of FloatingPortal.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/FloatingPortal.mdx#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n<FloatingPortal preserveTabOrder={false} />\n```\n\n----------------------------------------\n\nTITLE: Setting a numeric offset in limitShift\nDESCRIPTION: Shows how to set a numeric offset to start limiting earlier or later in the limitShift function.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/shift.mdx#2025-04-23_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nshift({\n  limiter: limitShift({\n    // Start limiting 5px earlier\n    offset: 5,\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing getScale for Floating UI Platform\nDESCRIPTION: Shows how to implement the optional getScale method for a custom Floating UI platform.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/platform.mdx#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getScale(element) {\n  return {x: 1, y: 1};\n}\n```\n\n----------------------------------------\n\nTITLE: CSS for fixed positioning strategy\nDESCRIPTION: Shows the CSS required when using the fixed positioning strategy to ensure the layout matches the chosen strategy.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/computePosition.mdx#2025-04-23_snippet_14\n\nLANGUAGE: css\nCODE:\n```\n#tooltip {\n  position: fixed;\n}\n```\n\n----------------------------------------\n\nTITLE: FloatingArrow Props Interface in TypeScript\nDESCRIPTION: Defines the TypeScript interface for the FloatingArrow component props, extending SVGAttributes.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/FloatingArrow.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Props extends React.SVGAttributes<SVGSVGElement> {\n  context: FloatingContext;\n  width?: number;\n  height?: number;\n  tipRadius?: number;\n  staticOffset?: number | string | null;\n\n  // Inherited SVG props that are intercepted and passed\n  // to the <path>s\n  d?: string;\n  fill?: string;\n  stroke?: string;\n  strokeWidth?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting mainAxis offset option\nDESCRIPTION: Example of configuring the mainAxis property which controls the distance between the floating element and reference element along the placement axis.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/offset.mdx#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\noffset({\n  mainAxis: 10,\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Rendering with Select Element\nDESCRIPTION: Shows how to use the render prop to customize CompositeItem with a select element.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/Composite.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<CompositeItem render={<select />}>\n  <option />\n  <option />\n</CompositeItem>\n```\n\n----------------------------------------\n\nTITLE: Importing useFloating from React DOM Package\nDESCRIPTION: Example of importing the useFloating hook from the React DOM package, which provides positioning only.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/react.mdx#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport {useFloating} from '@floating-ui/react-dom';\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for useRole Props\nDESCRIPTION: Defines the TypeScript interface for useRole props, including enabled flag and the different available role options including native ARIA roles and custom component roles.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useRole.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface UseRoleProps {\n  enabled?: boolean;\n  role?:\n    // Native ARIA roles\n    | 'dialog'\n    | 'tooltip'\n    | 'menu'\n    | 'listbox'\n    | 'grid'\n    | 'tree'\n    // Custom component roles\n    | 'alertdialog'\n    | 'label';\n    | 'select'\n    | 'combobox'\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling mainAxis in limitShift\nDESCRIPTION: Shows how to disable limiting on the main axis in the limitShift function.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/shift.mdx#2025-04-23_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nshift({\n  limiter: limitShift({\n    mainAxis: false,\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: autoPlacement TypeScript Interface\nDESCRIPTION: TypeScript interface definition for the autoPlacement middleware options, extending the DetectOverflowOptions interface.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/autoPlacement.mdx#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AutoPlacementOptions extends DetectOverflowOptions {\n  crossAxis?: boolean;\n  alignment?: Alignment | null;\n  autoAlignment?: boolean;\n  allowedPlacements?: Array<Placement>;\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Implementation with useFloating\nDESCRIPTION: Example showing how to use middleware with Vue useFloating composition function.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/middleware.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nuseFloating(reference, floating, {\n  placement: 'right',\n  middleware: [],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing getElementRects for Floating UI Platform\nDESCRIPTION: Shows how to implement the required getElementRects method for a custom Floating UI platform.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/platform.mdx#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getElementRects({reference, floating, strategy}) {\n  return {\n    reference: {width: 0, height: 0, x: 0, y: 0},\n    floating: {width: 0, height: 0, x: 0, y: 0},\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling crossAxis in shift middleware\nDESCRIPTION: Shows how to enable shifting along the cross axis by setting the crossAxis option to true.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/shift.mdx#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nshift({\n  crossAxis: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Usage in Middleware\nDESCRIPTION: Demonstrates how to use detectOverflow within a custom middleware function to detect element overflow.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/detectOverflow.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst middleware = {\n  name: 'middleware',\n  async fn(state) {\n    const overflow = await detectOverflow(state);\n    return {};\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: OpenChangeReason Type Definition\nDESCRIPTION: Lists possible reasons for open state changes.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useFloating.mdx#2025-04-23_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\ntype OpenChangeReason =\n  | 'outside-press'\n  | 'escape-key'\n  | 'ancestor-scroll'\n  | 'reference-press'\n  | 'click'\n  | 'hover'\n  | 'focus'\n  | 'list-navigation'\n  | 'safe-polygon';\n```\n\n----------------------------------------\n\nTITLE: Importing useFloating from React Package\nDESCRIPTION: Example of importing the useFloating hook from the full React package, which provides both positioning and interactions.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/react.mdx#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport {useFloating} from '@floating-ui/react';\n```\n\n----------------------------------------\n\nTITLE: Accessing final placement with computePosition\nDESCRIPTION: Example showing how to access the final placement after computePosition with autoPlacement middleware.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/autoPlacement.mdx#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\ncomputePosition(referenceEl, floatingEl, {\n  middleware: [autoPlacement()],\n}).then(({placement}) => {\n  console.log(placement); // any side\n});\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for UseFocusProps\nDESCRIPTION: Defines the TypeScript interface for the props of the useFocus Hook, including enabled and visibleOnly options.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useFocus.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface UseFocusProps {\n  enabled?: boolean;\n  visibleOnly?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Popper Implementation\nDESCRIPTION: Example of basic positioning implementation using Popper v2\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/migration.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {createPopper} from '@popperjs/core';\n\ncreatePopper(reference, popper);\n```\n\n----------------------------------------\n\nTITLE: Using numeric offset value\nDESCRIPTION: Example of using a simple numeric value with offset middleware, which is shorthand for setting the mainAxis property.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/offset.mdx#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\noffset(10);\n```\n\n----------------------------------------\n\nTITLE: Disabling Auto-Scroll in useListNavigation (JavaScript)\nDESCRIPTION: This example illustrates setting the `scrollItemIntoView` option to `false` within the `useListNavigation` hook configuration. By default, this option is `true` (using 'nearest' scroll options), causing the active item to be scrolled into view. Setting it to `false` disables this automatic scrolling behavior during navigation.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useListNavigation.mdx#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nuseListNavigation(context, {\n  scrollItemIntoView: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring visibleOnly Option in useFocus Hook\nDESCRIPTION: Demonstrates how to set the visibleOnly option to false in the useFocus Hook, affecting when the open state changes based on focus events.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useFocus.mdx#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nuseFocus(context, {\n  visibleOnly: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Floating UI Initial CSS Setup\nDESCRIPTION: Required initial CSS styling for the floating element\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/migration.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.floating {\n  width: max-content;\n  position: absolute;\n  top: 0;\n  left: 0;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript definition for offset options\nDESCRIPTION: TypeScript type definition for offset middleware options, showing possible configurations including numeric shorthand and object with axis properties.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/offset.mdx#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ntype Options =\n  | number\n  | {\n      mainAxis?: number;\n      crossAxis?: number;\n      alignmentAxis?: number | null;\n    };\n```\n\n----------------------------------------\n\nTITLE: Installing Floating UI DOM Package\nDESCRIPTION: Command to install the vanilla JavaScript version of Floating UI for use with DOM elements on the web.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/getting-started.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @floating-ui/dom\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for ShiftOptions\nDESCRIPTION: Defines the TypeScript interface for options you can pass to the shift middleware function.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/shift.mdx#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ShiftOptions extends DetectOverflowOptions {\n  mainAxis?: boolean;\n  crossAxis?: boolean;\n  limiter?: {\n    fn: (state: MiddlewareState) => Coords;\n    options?: any;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing getClippingRect for Floating UI Platform\nDESCRIPTION: Shows how to implement the required getClippingRect method for a custom Floating UI platform.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/platform.mdx#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getClippingRect({element, boundary, rootBoundary}) {\n  return {\n    width: 0,\n    height: 0,\n    x: 0,\n    y: 0,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Floating Ref in Event Handler Using useFloating Hook (JavaScript)\nDESCRIPTION: This snippet demonstrates how to directly log the floating ref's current value inside an event handler using the refs property from useFloating. Ensures correct access to the referenced DOM element, which is essential for on-demand manipulations.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useFloating.mdx#2025-04-23_snippet_31\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {refs} = useFloating();\n// Inside an event handler:\nconsole.log(refs.floating.current);\n\n```\n\n----------------------------------------\n\nTITLE: TypeScript interface for FlipOptions\nDESCRIPTION: TypeScript interface showing all available options for the flip middleware. These options control how the flipping behavior works, including axis handling, fallback strategies, and placement preferences.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/flip.mdx#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ninterface FlipOptions extends DetectOverflowOptions {\n  mainAxis?: boolean;\n  crossAxis?: boolean;\n  fallbackAxisSideDirection?: 'none' | 'start' | 'end';\n  flipAlignment?: boolean;\n  fallbackPlacements?: Array<Placement>;\n  fallbackStrategy?: 'bestFit' | 'initialPlacement';\n}\n```\n\n----------------------------------------\n\nTITLE: Styling the tooltip with CSS\nDESCRIPTION: Applies basic styling to the tooltip, including background color, text color, padding, and border radius.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/tutorial.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n#tooltip {\n  background: #222;\n  color: white;\n  font-weight: bold;\n  padding: 5px;\n  border-radius: 4px;\n  font-size: 90%;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing shift from @floating-ui/react-dom\nDESCRIPTION: Shows how to import the shift middleware from the @floating-ui/react-dom package.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/shift.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {shift} from '@floating-ui/react-dom';\n```\n\n----------------------------------------\n\nTITLE: Custom Rendering with Function Props\nDESCRIPTION: Demonstrates using a render function to customize how HTML props are passed to the component.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/Composite.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<CompositeItem\n  render={(htmlProps) => (\n    <select {...htmlProps}>\n      <option />\n      <option />\n    </select>\n  )}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing useFloating in React\nDESCRIPTION: Shows how to import the useFloating hook from @floating-ui/react package.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useFloating.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {useFloating} from '@floating-ui/react';\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for Placement Parameters\nDESCRIPTION: TypeScript interface for the parameters provided to placement-aware style functions, showing the available placement information.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useTransition.mdx#2025-04-23_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Params {\n  side: Side;\n  placement: Placement;\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling autoAlignment in autoPlacement\nDESCRIPTION: Example showing how to disable automatic opposite alignment selection even when those alignments fit better.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/autoPlacement.mdx#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nautoPlacement({\n  alignment: 'start',\n  // Won't also choose 'end' alignments if those fit better\n  autoAlignment: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom Timeout for FloatingDelayGroup\nDESCRIPTION: Shows how to set a custom timeoutMs value for a FloatingDelayGroup, which determines how long the grouping logic remains active after the close delay completes.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/FloatingDelayGroup.mdx#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n<FloatingDelayGroup timeoutMs={500}>\n  {/* ... */}\n</FloatingDelayGroup>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Strategy from useFloating Hook in React (JavaScript)\nDESCRIPTION: This code accesses the strategy value from useFloating, which tells whether positioning is using absolute or fixed strategies. Requires useFloating to be set up and provides information needed for advanced positioning or debugging. No arguments are required for this operation.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useFloating.mdx#2025-04-23_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {strategy} = useFloating();\n\n```\n\n----------------------------------------\n\nTITLE: Introducing @floating-ui/react Library for React Integration\nDESCRIPTION: This snippet provides a brief introduction to the @floating-ui/react library, which is used to integrate Floating UI functionality into React applications. It's a simple Markdown header and description.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/packages/react/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# @floating-ui/react\n\nThis is the library to use Floating UI with React.\n```\n\n----------------------------------------\n\nTITLE: Importing flip middleware from @floating-ui/vue\nDESCRIPTION: Shows how to import the flip middleware from the @floating-ui/vue package. This middleware prevents floating elements from overflowing by flipping to the opposite side.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/flip.mdx#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {flip} from '@floating-ui/vue';\n```\n\n----------------------------------------\n\nTITLE: Basic Composite Usage\nDESCRIPTION: Demonstrates basic usage of Composite component with multiple CompositeItem children.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/Composite.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<Composite>\n  <CompositeItem>Item 1</CompositeItem>\n  <CompositeItem>Item 2</CompositeItem>\n  <CompositeItem>Item 3</CompositeItem>\n</Composite>\n```\n\n----------------------------------------\n\nTITLE: Importing shift and limitShift from @floating-ui/dom\nDESCRIPTION: Shows how to import both shift and limitShift middleware from the @floating-ui/dom package.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/shift.mdx#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport {shift, limitShift} from '@floating-ui/dom';\n```\n\n----------------------------------------\n\nTITLE: Loading Floating UI via ESM CDN\nDESCRIPTION: Example of importing Floating UI DOM package using ESM format through CDN.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/getting-started.mdx#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport {computePosition} from 'https://cdn.jsdelivr.net/npm/@floating-ui/dom@__DOM_VERSION__/+esm';\n```\n\n----------------------------------------\n\nTITLE: Disabling Transform Option\nDESCRIPTION: Shows how to disable CSS transform positioning.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useFloating.mdx#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nuseFloating({\n  transform: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing convertOffsetParentRelativeRectToViewportRelativeRect for Floating UI Platform\nDESCRIPTION: Shows how to implement the optional convertOffsetParentRelativeRectToViewportRelativeRect method for a custom Floating UI platform.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/platform.mdx#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction convertOffsetParentRelativeRectToViewportRelativeRect({\n  rect,\n  offsetParent,\n  strategy,\n}) {\n  return rect;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring computePosition with options\nDESCRIPTION: Shows the basic pattern for passing configuration options to the computePosition function as a third argument.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/computePosition.mdx#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ncomputePosition(referenceEl, floatingEl, {\n  // options\n});\n```\n\n----------------------------------------\n\nTITLE: Importing offset from @floating-ui/dom\nDESCRIPTION: How to import the offset middleware from the DOM package of Floating UI.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/offset.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {offset} from '@floating-ui/dom';\n```\n\n----------------------------------------\n\nTITLE: Importing flip middleware from @floating-ui/react-native\nDESCRIPTION: Shows how to import the flip middleware from the @floating-ui/react-native package. This middleware prevents floating elements from overflowing by flipping to the opposite side.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/flip.mdx#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {flip} from '@floating-ui/react-native';\n```\n\n----------------------------------------\n\nTITLE: Importing size from @floating-ui/react-dom\nDESCRIPTION: Shows how to import the size middleware from the React DOM package of Floating UI.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/size.mdx#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport {size} from '@floating-ui/react-dom';\n```\n\n----------------------------------------\n\nTITLE: Importing shift from @floating-ui/vue\nDESCRIPTION: Shows how to import the shift middleware from the @floating-ui/vue package.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/shift.mdx#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {shift} from '@floating-ui/vue';\n```\n\n----------------------------------------\n\nTITLE: Strategy Type Definition\nDESCRIPTION: Shows the type definition for the strategy option.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useFloating.mdx#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ntype Strategy = 'absolute' | 'fixed';\n```\n\n----------------------------------------\n\nTITLE: Importing autoPlacement from @floating-ui/core\nDESCRIPTION: Shows how to import the autoPlacement middleware from the @floating-ui/core package.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/autoPlacement.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {autoPlacement} from '@floating-ui/core';\n```\n\n----------------------------------------\n\nTITLE: FloatingPortal TypeScript Props Interface\nDESCRIPTION: TypeScript interface definition for the FloatingPortal component props, showing the available configuration options.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/FloatingPortal.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface FloatingPortalProps {\n  root?:\n    | HTMLElement\n    | null\n    | React.MutableRefObject<HTMLElement | null>;\n  id?: string;\n  preserveTabOrder?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing isRTL for Floating UI Platform\nDESCRIPTION: Shows how to implement the optional isRTL method for a custom Floating UI platform.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/platform.mdx#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nfunction isRTL(element) {\n  return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing size from @floating-ui/react\nDESCRIPTION: Shows how to import the size middleware from the React package of Floating UI.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/size.mdx#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport {size} from '@floating-ui/react';\n```\n\n----------------------------------------\n\nTITLE: Importing autoPlacement from @floating-ui/react-dom\nDESCRIPTION: Shows how to import the autoPlacement middleware from the @floating-ui/react-dom package.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/autoPlacement.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {autoPlacement} from '@floating-ui/react-dom';\n```\n\n----------------------------------------\n\nTITLE: Importing useDismiss Hook\nDESCRIPTION: Basic import statement for the useDismiss hook from @floating-ui/react package.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useDismiss.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {useDismiss} from '@floating-ui/react';\n```\n\n----------------------------------------\n\nTITLE: Importing autoPlacement from @floating-ui/vue\nDESCRIPTION: Shows how to import the autoPlacement middleware from the @floating-ui/vue package.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/autoPlacement.mdx#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {autoPlacement} from '@floating-ui/vue';\n```\n\n----------------------------------------\n\nTITLE: Installing Floating UI for React Native\nDESCRIPTION: Command to install Floating UI for use with React Native.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @floating-ui/react-native\n```\n\n----------------------------------------\n\nTITLE: Importing size from @floating-ui/core\nDESCRIPTION: Shows how to import the size middleware from the core package of Floating UI.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/size.mdx#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport {size} from '@floating-ui/core';\n```\n\n----------------------------------------\n\nTITLE: Inner Props Interface Definition - JavaScript\nDESCRIPTION: Interface definition for the inner middleware props including listRef, index, offset, and other configuration options.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/inner.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ninterface InnerProps extends DetectOverflowOptions {\n  listRef: React.MutableRefObject<Array<HTMLElement | null>>;\n  index: number;\n  offset?: number;\n  overflowRef?: React.MutableRefObject<SideObject | null>;\n  scrollRef?: React.MutableRefObject<HTMLElement | null>;\n  referenceOverflowThreshold?: number;\n  minItemsVisible?: number;\n  onFallbackChange?(fallback: boolean): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Floating UI for React\nDESCRIPTION: Commands to install either the full Floating UI React package with interactions, or the lighter React DOM package for positioning only.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/react.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @floating-ui/react\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @floating-ui/react-dom\n```\n\n----------------------------------------\n\nTITLE: Importing inline middleware from @floating-ui/dom\nDESCRIPTION: How to import the inline middleware from the DOM package of Floating UI.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/inline.mdx#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport {inline} from '@floating-ui/dom';\n```\n\n----------------------------------------\n\nTITLE: Using autoPlacement with useFloating in Vue\nDESCRIPTION: Example of using the autoPlacement middleware with the useFloating function in Vue package.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/autoPlacement.mdx#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nuseFloating(reference, floating, {\n  middleware: [autoPlacement()],\n});\n```\n\n----------------------------------------\n\nTITLE: Importing size from @floating-ui/vue\nDESCRIPTION: Shows how to import the size middleware from the Vue package of Floating UI.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/size.mdx#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport {size} from '@floating-ui/vue';\n```\n\n----------------------------------------\n\nTITLE: Importing offset from @floating-ui/react-native\nDESCRIPTION: How to import the offset middleware from the React Native package of Floating UI.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/offset.mdx#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {offset} from '@floating-ui/react-native';\n```\n\n----------------------------------------\n\nTITLE: Importing FloatingFocusManager Component\nDESCRIPTION: Shows how to import the FloatingFocusManager component from the @floating-ui/react package.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/FloatingFocusManager.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {FloatingFocusManager} from '@floating-ui/react';\n```\n\n----------------------------------------\n\nTITLE: Disabling flipAlignment option in flip middleware\nDESCRIPTION: Example of disabling the flipAlignment option for the flip middleware. When disabled, aligned placements like 'top-start' won't flip to 'top-end' if 'start' doesn't fit.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/flip.mdx#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nflip({\n  flipAlignment: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing getDocumentElement for Floating UI Platform\nDESCRIPTION: Shows how to implement the optional getDocumentElement method for a custom Floating UI platform.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/platform.mdx#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getDocumentElement(element) {\n  return {};\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Rect Interface in Floating UI\nDESCRIPTION: Defines the Rect interface used by Floating UI for positioning calculations.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/platform.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ninterface Rect {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing shift from @floating-ui/dom\nDESCRIPTION: Shows how to import the shift middleware from the @floating-ui/dom package.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/shift.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {shift} from '@floating-ui/dom';\n```\n\n----------------------------------------\n\nTITLE: Deriving autoPlacement options from state\nDESCRIPTION: Example showing how to derive autoPlacement options dynamically using the middleware lifecycle state.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/autoPlacement.mdx#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nautoPlacement((state) => ({\n  padding: state.rects.reference.width,\n}));\n```\n\n----------------------------------------\n\nTITLE: Importing hide Middleware - Multiple Package Variants\nDESCRIPTION: Shows different import statements for the hide middleware across various Floating UI packages.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/hide.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {hide} from '@floating-ui/core';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport {hide} from '@floating-ui/dom';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport {hide} from '@floating-ui/react';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport {hide} from '@floating-ui/react-dom';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport {hide} from '@floating-ui/vue';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport {hide} from '@floating-ui/react-native';\n```\n\n----------------------------------------\n\nTITLE: Importing offset from @floating-ui/react-dom\nDESCRIPTION: How to import the offset middleware from the React DOM package of Floating UI.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/offset.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {offset} from '@floating-ui/react-dom';\n```\n\n----------------------------------------\n\nTITLE: Disabling useFocus Hook in JavaScript\nDESCRIPTION: Shows how to disable the useFocus Hook by setting the enabled prop to false.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useFocus.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nuseFocus(context, {\n  enabled: false,\n});\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definition for Transition Status\nDESCRIPTION: TypeScript type definition for the transition status returned by useTransitionStatus, showing the possible states in the transition cycle.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useTransition.mdx#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\ntype Status = 'unmounted' | 'initial' | 'open' | 'close';\n\n// Cycle:\n// unmounted -> initial -> open -> close -> unmounted\n```\n\n----------------------------------------\n\nTITLE: UseFloatingOptions Interface for React DOM\nDESCRIPTION: TypeScript interface definition for useFloating options in React DOM package.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useFloating.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterface UseFloatingOptions {\n  placement?: Placement;\n  strategy?: 'fixed' | 'absolute';\n  transform?: boolean;\n  middleware?: Array<Middleware | undefined | null | false>;\n  open?: boolean;\n  elements?: {\n    reference?: ReferenceElement | null;\n    floating?: FloatingElement | null;\n  };\n  whileElementsMounted?(\n    reference: ReferenceElement,\n    floating: FloatingElement,\n    update: () => void,\n  ): () => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling mainAxis in shift middleware\nDESCRIPTION: Shows how to disable shifting along the main axis by setting the mainAxis option to false.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/shift.mdx#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nshift({\n  mainAxis: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Importing flip middleware from @floating-ui/dom\nDESCRIPTION: Shows how to import the flip middleware from the @floating-ui/dom package. This middleware prevents floating elements from overflowing by flipping to the opposite side.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/flip.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {flip} from '@floating-ui/dom';\n```\n\n----------------------------------------\n\nTITLE: Importing useRole from Floating UI React\nDESCRIPTION: Shows how to import the useRole hook from the Floating UI React package.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useRole.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {useRole} from '@floating-ui/react';\n```\n\n----------------------------------------\n\nTITLE: Importing shift from @floating-ui/react\nDESCRIPTION: Shows how to import the shift middleware from the @floating-ui/react package.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/shift.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {shift} from '@floating-ui/react';\n```\n\n----------------------------------------\n\nTITLE: Importing offset from @floating-ui/core\nDESCRIPTION: How to import the offset middleware from the core package of Floating UI.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/offset.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {offset} from '@floating-ui/core';\n```\n\n----------------------------------------\n\nTITLE: Importing shift and limitShift from @floating-ui/core\nDESCRIPTION: Shows how to import both shift and limitShift middleware from the @floating-ui/core package.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/shift.mdx#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport {shift, limitShift} from '@floating-ui/core';\n```\n\n----------------------------------------\n\nTITLE: useTypeahead Props Interface - TypeScript\nDESCRIPTION: TypeScript interface definition for the useTypeahead Hook props, showing all available configuration options.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useTypeahead.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface UseTypeaheadProps {\n  listRef: React.MutableRefObject<Array<string | null>>;\n  activeIndex: number | null;\n  onMatch?(index: number): void;\n  enabled?: boolean;\n  resetMs?: number;\n  ignoreKeys?: Array<string>;\n  selectedIndex?: number | null;\n  onTypingChange?(isTyping: boolean): void;\n  findMatch?:\n    | null\n    | ((list: Array<string | null>, typedString: string) => string | null | undefined);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Open State for Dialog in React\nDESCRIPTION: Sets up the useState hook to track whether the dialog is currently open or closed. This state is used for conditional rendering of the dialog component.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/dialog.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {useState} from 'react';\n\nfunction Dialog() {\n  const [isOpen, setIsOpen] = useState(false);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Floating UI for React DOM\nDESCRIPTION: Commands to install Floating UI for React DOM, with options for full functionality or positioning only.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Positioning + interactions\nnpm install @floating-ui/react\n\n# Positioning only (smaller size)\nnpm install @floating-ui/react-dom\n```\n\n----------------------------------------\n\nTITLE: Importing autoPlacement from @floating-ui/dom\nDESCRIPTION: Shows how to import the autoPlacement middleware from the @floating-ui/dom package.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/autoPlacement.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {autoPlacement} from '@floating-ui/dom';\n```\n\n----------------------------------------\n\nTITLE: Setting a Specific Role for the Floating Element\nDESCRIPTION: Demonstrates how to specify a particular role for the floating element, such as 'tooltip'.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useRole.mdx#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nuseRole(context, {\n  role: 'tooltip',\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Floating UI for Vanilla JavaScript\nDESCRIPTION: Command to install the Floating UI library for use with vanilla JavaScript on the web.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @floating-ui/dom\n```\n\n----------------------------------------\n\nTITLE: Importing Arrow Middleware in Floating UI\nDESCRIPTION: Shows how to import the arrow middleware in different Floating UI packages.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/arrow.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {arrow} from '@floating-ui/core';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport {arrow} from '@floating-ui/dom';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport {arrow} from '@floating-ui/react';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport {arrow} from '@floating-ui/react-dom';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport {arrow} from '@floating-ui/vue';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport {arrow} from '@floating-ui/react-native';\n```\n\n----------------------------------------\n\nTITLE: Importing computePosition from @floating-ui/core\nDESCRIPTION: Demonstrates how to import the computePosition function from the core package of Floating UI.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/computePosition.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {computePosition} from '@floating-ui/core';\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for useListNavigation Props\nDESCRIPTION: Defines the TypeScript interface for the props accepted by the useListNavigation Hook, including various configuration options.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useListNavigation.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface UseListNavigationProps {\n  listRef: React.MutableRefObject<Array<HTMLElement | null>>;\n  activeIndex: number | null;\n  onNavigate?(index: number | null): void;\n  enabled?: boolean;\n  selectedIndex?: number | null;\n  loop?: boolean;\n  nested?: boolean;\n  rtl?: boolean;\n  virtual?: boolean;\n  virtualItemRef?: React.MutableRefObject<HTMLElement | null>;\n  allowEscape?: boolean;\n  orientation?: 'vertical' | 'horizontal' | 'both';\n  cols?: number;\n  focusItemOnOpen?: 'auto' | boolean;\n  focusItemOnHover?: boolean;\n  openOnArrowKeyDown?: boolean;\n  disabledIndices?: Array<number>;\n  scrollItemIntoView?: boolean | ScrollIntoViewOptions;\n  itemSizes?: Dimensions[];\n  dense?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing isElement for Floating UI Platform\nDESCRIPTION: Shows how to implement the optional isElement method for a custom Floating UI platform.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/platform.mdx#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nfunction isElement(value) {\n  return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Using shift with useFloating in Vue\nDESCRIPTION: Demonstrates how to use the shift middleware with the useFloating hook in Vue package.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/shift.mdx#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nuseFloating(reference, floating, {\n  middleware: [shift()],\n});\n```\n\n----------------------------------------\n\nTITLE: Importing FloatingOverlay from @floating-ui/react\nDESCRIPTION: Shows how to import the FloatingOverlay component from the @floating-ui/react package.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/FloatingOverlay.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {FloatingOverlay} from '@floating-ui/react';\n```\n\n----------------------------------------\n\nTITLE: Disabling Transform Positioning in useFloating - JavaScript\nDESCRIPTION: Shows how to disable use of CSS transform for floating element positioning by passing {transform: false} as an option to useFloating. This may be needed in environments where transforms interfere with animations or stacking context. Requires @floating-ui/vue and Vue refs as for standard usage. Outputs an alternative positioning method using top/left styles instead of transform.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/vue.mdx#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nuseFloating(reference, floating, {\n  transform: false,\n});\n\n```\n\n----------------------------------------\n\nTITLE: Disabling useRole Functionality\nDESCRIPTION: Shows how to conditionally disable the useRole hook using the enabled prop.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useRole.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nuseRole(context, {\n  enabled: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Importing FloatingPortal from @floating-ui/react\nDESCRIPTION: Basic import statement for the FloatingPortal component from the @floating-ui/react package.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/FloatingPortal.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {FloatingPortal} from '@floating-ui/react';\n```\n\n----------------------------------------\n\nTITLE: Installing Floating UI Core for Custom Platforms\nDESCRIPTION: Command to install Floating UI core package for use with custom platforms or implementations.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/README.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @floating-ui/core\n```\n\n----------------------------------------\n\nTITLE: TypeScript interface for inline middleware options\nDESCRIPTION: TypeScript interface showing all available options for the inline middleware configuration.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/inline.mdx#2025-04-23_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\ninterface InlineOptions {\n  x?: number;\n  y?: number;\n  padding?: number | SideObject;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing offset from @floating-ui/react\nDESCRIPTION: How to import the offset middleware from the React package of Floating UI.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/offset.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {offset} from '@floating-ui/react';\n```\n\n----------------------------------------\n\nTITLE: Disabling Pointer Events for Non-interactive Floating Elements in CSS\nDESCRIPTION: This CSS snippet shows how to disable pointer events for a non-interactive floating element to ensure it doesn't block point updates.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useClientPoint.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.floating {\n  pointer-events: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing useClick Hook from Floating UI\nDESCRIPTION: Shows how to import the useClick hook from the @floating-ui/react package.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useClick.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {useClick} from '@floating-ui/react';\n```\n\n----------------------------------------\n\nTITLE: Importing shift and limitShift from @floating-ui/react-native\nDESCRIPTION: Shows how to import both shift and limitShift middleware from the @floating-ui/react-native package.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/shift.mdx#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport {shift, limitShift} from '@floating-ui/react-native';\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Popper and Installing Floating UI\nDESCRIPTION: Package management commands to replace @popperjs/core with @floating-ui/dom\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/migration.mdx#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\nnpm uninstall @popperjs/core\nnpm install @floating-ui/dom\n```\n\n----------------------------------------\n\nTITLE: Importing shift from @floating-ui/core\nDESCRIPTION: Shows how to import the shift middleware from the @floating-ui/core package.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/shift.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {shift} from '@floating-ui/core';\n```\n\n----------------------------------------\n\nTITLE: Importing size from @floating-ui/react-native\nDESCRIPTION: Shows how to import the size middleware from the React Native package of Floating UI.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/size.mdx#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport {size} from '@floating-ui/react-native';\n```\n\n----------------------------------------\n\nTITLE: Popper Modifier Properties\nDESCRIPTION: Key configuration properties used in Popper.js modifiers system, showing the complexity of the previous approach to middleware configuration.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/motivation.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nrequires\n```\n\nLANGUAGE: javascript\nCODE:\n```\nrequiresIfExists\n```\n\nLANGUAGE: javascript\nCODE:\n```\nphase\n```\n\n----------------------------------------\n\nTITLE: Importing offset from @floating-ui/vue\nDESCRIPTION: How to import the offset middleware from the Vue package of Floating UI.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/offset.mdx#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {offset} from '@floating-ui/vue';\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for useClick Props\nDESCRIPTION: Defines the TypeScript interface for the useClick hook's props, showing all available configuration options including event types, toggle behavior, and keyboard handlers.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useClick.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface UseClickProps {\n  enabled?: boolean;\n  event?: 'click' | 'mousedown';\n  toggle?: boolean;\n  ignoreMouse?: boolean;\n  keyboardHandlers?: boolean;\n  stickIfOpen?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Floating UI Devtools Package\nDESCRIPTION: NPM installation command for the Floating UI Devtools package.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/packages/devtools/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @floating-ui/devtools\n```\n\n----------------------------------------\n\nTITLE: Installing Floating UI Core Package\nDESCRIPTION: Command to install the core package for custom platform implementations.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/getting-started.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @floating-ui/core\n```\n\n----------------------------------------\n\nTITLE: Installing Floating UI React Native Package\nDESCRIPTION: Command to install the React Native version of Floating UI.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/getting-started.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @floating-ui/react-native\n```\n\n----------------------------------------\n\nTITLE: Importing autoUpdate in React\nDESCRIPTION: Imports the autoUpdate function from the @floating-ui/react package.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/autoUpdate.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {autoUpdate} from '@floating-ui/react';\n```\n\n----------------------------------------\n\nTITLE: Importing inline middleware from @floating-ui/react-dom\nDESCRIPTION: How to import the inline middleware from the React DOM package of Floating UI.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/inline.mdx#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport {inline} from '@floating-ui/react-dom';\n```\n\n----------------------------------------\n\nTITLE: MiddlewareState Interface Definition\nDESCRIPTION: TypeScript interface showing the structure of state passed to middleware functions.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/middleware.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ninterface MiddlewareState {\n  x: number;\n  y: number;\n  initialPlacement: Placement;\n  placement: Placement;\n  strategy: Strategy;\n  middlewareData: MiddlewareData;\n  elements: Elements;\n  rects: ElementRects;\n  platform: Platform;\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Floating UI via UMD CDN\nDESCRIPTION: Example of loading Floating UI using UMD format through script tags.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/getting-started.mdx#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/@floating-ui/core@__CORE_VERSION__\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/@floating-ui/dom@__DOM_VERSION__\"></script>\n```\n\n----------------------------------------\n\nTITLE: Setting Strategy Option\nDESCRIPTION: Shows how to set the strategy option to 'fixed' positioning.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useFloating.mdx#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nuseFloating({\n  strategy: 'fixed',\n});\n```\n\n----------------------------------------\n\nTITLE: Importing autoUpdate in Vue\nDESCRIPTION: Imports the autoUpdate function from the @floating-ui/vue package.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/autoUpdate.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {autoUpdate} from '@floating-ui/vue';\n```\n\n----------------------------------------\n\nTITLE: FloatingTree Interface Definition in TypeScript\nDESCRIPTION: TypeScript interface definition for the FloatingTree component. It shows the structure of the tree object, including the methods for managing nodes and the event emitter for cross-component communication.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/FloatingTree.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface FloatingTreeType {\n  nodesRef: React.MutableRefObject<Array<FloatingNodeType>>;\n  events: FloatingEvents;\n  addNode(node: FloatingNodeType): void;\n  removeNode(node: FloatingNodeType): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing FloatingList and useListItem\nDESCRIPTION: Shows how to import the FloatingList component and useListItem hook from the @floating-ui/react package.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/FloatingList.mdx#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport {FloatingList, useListItem} from '@floating-ui/react';\n```\n\n----------------------------------------\n\nTITLE: Importing useListNavigation in JavaScript\nDESCRIPTION: Shows how to import the useListNavigation Hook from the @floating-ui/react package.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useListNavigation.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {useListNavigation} from '@floating-ui/react';\n```\n\n----------------------------------------\n\nTITLE: Importing size from @floating-ui/dom\nDESCRIPTION: Shows how to import the size middleware from the DOM package of Floating UI.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/size.mdx#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport {size} from '@floating-ui/dom';\n```\n\n----------------------------------------\n\nTITLE: Importing inline middleware from @floating-ui/vue\nDESCRIPTION: How to import the inline middleware from the Vue package of Floating UI.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/inline.mdx#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport {inline} from '@floating-ui/vue';\n```\n\n----------------------------------------\n\nTITLE: UseFloatingOptions Interface for React\nDESCRIPTION: TypeScript interface definition for useFloating options in React package.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useFloating.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface UseFloatingOptions {\n  placement?: Placement;\n  strategy?: 'fixed' | 'absolute';\n  transform?: boolean;\n  middleware?: Array<Middleware | undefined | null | false>;\n  open?: boolean;\n  onOpenChange?(\n    open: boolean,\n    event?: Event,\n    reason?: OpenChangeReason,\n  ): void;\n  elements?: {\n    reference?: ReferenceElement | null;\n    floating?: FloatingElement | null;\n  };\n  whileElementsMounted?(\n    reference: ReferenceElement,\n    floating: FloatingElement,\n    update: () => void,\n  ): () => void;\n  nodeId?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing inline middleware from @floating-ui/react-native\nDESCRIPTION: How to import the inline middleware from the React Native package of Floating UI.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/inline.mdx#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport {inline} from '@floating-ui/react-native';\n```\n\n----------------------------------------\n\nTITLE: Importing useClientPoint in JavaScript\nDESCRIPTION: This snippet shows how to import the useClientPoint Hook from the @floating-ui/react package.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useClientPoint.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {useClientPoint} from '@floating-ui/react';\n```\n\n----------------------------------------\n\nTITLE: Setting alignmentAxis offset option\nDESCRIPTION: Example of configuring the alignmentAxis property which applies only to aligned placements and inverts the end alignment, overriding crossAxis when set.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/offset.mdx#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\noffset({\n  alignmentAxis: 20,\n});\n```\n\n----------------------------------------\n\nTITLE: Popper Configuration Properties\nDESCRIPTION: Reference to Popper.js configuration properties that handle styles and computations, demonstrating the more verbose approach used in Popper.js compared to Floating UI.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/motivation.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncomputeStyles\n```\n\nLANGUAGE: javascript\nCODE:\n```\napplyStyles\n```\n\n----------------------------------------\n\nTITLE: Creating reference and floating elements in core/react-native\nDESCRIPTION: Demonstrates how to define reference and floating elements as objects with dimensions and positions for non-DOM environments.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/computePosition.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst referenceEl = {width: 100, height: 100, x: 50, y: 50};\nconst floatingEl = {width: 200, height: 200, x: 0, y: 0};\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Data-Types for MyLibrary in TypeScript\nDESCRIPTION: This snippet demonstrates how to implement custom data-types for a new library called 'MyLibrary'. It includes three files: defining the data type, creating a component to render the data type, and exporting both the data type and component.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/extension/README.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// ./src/views/my-library/data-types.ts\nexport type MyLibraryMiddlewareData = {\n  type: 'MyLibraryMiddlewareData';\n};\n\nexport type Datatype = MyLibraryMiddlewareData;\n\n// ./src/views/my-library/MyLibraryMiddleware.tsx\nexport const MyLibraryMiddleware = React.memo((props: Serialized<MyLibraryMiddlewareData>) => {\n  return <div>MyLibraryMiddleware</div>;\n});\n\nexport default MyLibraryMiddleware;\n\n// ./src/views/my-library/index.ts\nexport * from './data-types';\nexport const views = {\n  MyLibraryMiddleware: React.lazy(() => import('./MyLibraryMiddleware')),\n}\n```\n\n----------------------------------------\n\nTITLE: Importing useTypeahead - JavaScript\nDESCRIPTION: Shows how to import the useTypeahead Hook from the Floating UI React package.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useTypeahead.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {useTypeahead} from '@floating-ui/react';\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 1.1.5\nDESCRIPTION: Documents bug fix for useFloating and dependency update\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/packages/vue/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.1.5\n\n### Patch Changes\n\n- fix(useFloating): avoid setting `isPositioned` to true when `open` is false\n- Update dependencies: `@floating-ui/utils@0.2.8`\n```\n\n----------------------------------------\n\nTITLE: Using flip middleware with useFloating in Vue\nDESCRIPTION: Example of using the flip middleware with the useFloating composable in the Vue Floating UI package. This enables automatic flipping of the floating element to prevent overflow.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/flip.mdx#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nuseFloating(reference, floating, {\n  middleware: [flip()],\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Floating UI Core Package in Bash\nDESCRIPTION: This snippet shows how to update the @floating-ui/core package to the latest version using npm, and then uninstall it to avoid adding it to package.json dependencies.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/misc.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @floating-ui/core@latest\nnpm uninstall @floating-ui/core\n```\n\n----------------------------------------\n\nTITLE: Installing Shadow DOM Fix for Floating UI\nDESCRIPTION: Demonstrates how to install the 'composed-offset-position' package to fix positioning issues with Shadow DOM.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/platform.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i composed-offset-position\n```\n\n----------------------------------------\n\nTITLE: Importing Composite Components\nDESCRIPTION: Shows how to import the Composite and CompositeItem components from @floating-ui/react.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/Composite.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Composite, CompositeItem} from '@floating-ui/react';\n```\n\n----------------------------------------\n\nTITLE: Importing shift and limitShift from @floating-ui/react-dom\nDESCRIPTION: Shows how to import both shift and limitShift middleware from the @floating-ui/react-dom package.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/shift.mdx#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport {shift, limitShift} from '@floating-ui/react-dom';\n```\n\n----------------------------------------\n\nTITLE: Importing useHover from Floating UI React\nDESCRIPTION: Shows how to import the useHover hook from the @floating-ui/react package.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useHover.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {useHover} from '@floating-ui/react';\n```\n\n----------------------------------------\n\nTITLE: Importing useFocus Hook in JavaScript\nDESCRIPTION: Shows how to import the useFocus Hook from the @floating-ui/react package.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useFocus.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {useFocus} from '@floating-ui/react';\n```\n\n----------------------------------------\n\nTITLE: Importing useInteractions Hook\nDESCRIPTION: Basic import statement for the useInteractions hook from @floating-ui/react package.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/useInteractions.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {useInteractions} from '@floating-ui/react';\n```\n\n----------------------------------------\n\nTITLE: Installing Floating UI for Vue\nDESCRIPTION: Command to install Floating UI for use with Vue framework.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @floating-ui/vue\n```\n\n----------------------------------------\n\nTITLE: Importing shift from @floating-ui/react-native\nDESCRIPTION: Shows how to import the shift middleware from the @floating-ui/react-native package.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/shift.mdx#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {shift} from '@floating-ui/react-native';\n```\n\n----------------------------------------\n\nTITLE: Importing FloatingDelayGroup from Floating UI\nDESCRIPTION: Shows how to import the FloatingDelayGroup component from the @floating-ui/react package.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/FloatingDelayGroup.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {FloatingDelayGroup} from '@floating-ui/react';\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 1.0.3\nDESCRIPTION: Documents type exports, bug fixes and dependency updates\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/packages/vue/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.3\n\n### Patch Changes\n\n- 4c04669: chore: exports .d.mts types, solves #2472\n- 62a5242: fix: do not throw when component type reference or floating renders nothing\n- Updated dependencies [4c04669]\n- Updated dependencies [0d18e37]\n- Updated dependencies [afb7e5e]\n  - @floating-ui/utils@0.2.0\n  - @floating-ui/dom@1.5.4\n```\n\n----------------------------------------\n\nTITLE: Updating Floating UI DOM Package in Bash\nDESCRIPTION: This snippet demonstrates how to update the @floating-ui/dom package to the latest version using npm, and then uninstall it to avoid adding it to package.json dependencies.\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/website/pages/docs/misc.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @floating-ui/dom@latest\nnpm uninstall @floating-ui/dom\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 1.1.6\nDESCRIPTION: Documents dependency update to @floating-ui/utils@0.2.9\nSOURCE: https://github.com/floating-ui/floating-ui/blob/master/packages/vue/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.1.6\n\n### Patch Changes\n\n- Update dependencies: `@floating-ui/utils@0.2.9`\n```"
  }
]