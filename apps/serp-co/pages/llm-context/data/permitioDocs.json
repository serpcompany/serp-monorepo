[
  {
    "owner": "permitio",
    "repo": "docs",
    "content": "TITLE: Full FastAPI Application with Permit SDK Integration\nDESCRIPTION: Complete example of a FastAPI application integrating Permit.io SDK for permission checks, including error handling and JSON responses.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/getting-started/_quickstart-parts/_quickstart_python.mdx#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\n\nfrom permit import Permit\nfrom fastapi import FastAPI, status, HTTPException\nfrom fastapi.responses import JSONResponse\n\napp = FastAPI()\n\npermit = Permit(\n    pdp=\"http://localhost:7766\",\n    token=\"[YOUR_API_KEY]\",\n)\n\nuser = {\n    \"key\": \"john@smith.com\",\n    \"first_name\": \"John\",\n    \"last_name\": \"Smith\",\n    \"email\": \"john@smith.com\",\n}\n\n@app.get(\"/\")\nasync def check_permissions():\n    permitted = await permit.check(\"john@smith.com\", \"read\", \"document\")\n    if not permitted:\n        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail={\n            \"result\": f\"{user.get('firstName')} {user.get('lastName')} is NOT PERMITTED to create document!\"\n        })\n\n    return JSONResponse(status_code=status.HTTP_200_OK, content={\n        \"result\": f\"{user.get('firstName')} {user.get('lastName')} is PERMITTED to create document!\"\n    })\n```\n\n----------------------------------------\n\nTITLE: Complete Flask Application with Permit.io Integration\nDESCRIPTION: A full Flask application example that demonstrates user creation, tenant management, role assignment, and permission checks across different endpoints.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/tutorials/_quickstart-parts/_quickstart_python_sync.mdx#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport json\n\nfrom permit.sync import Permit\n\nfrom flask import Flask, Response\n\napp = Flask(__name__)\n\n# This line initializes the SDK and connects your python app\n# to the Permit.io PDP container you've set up in the previous step.\npermit = Permit(\n    # in production, you might need to change this url to fit your deployment\n    pdp=\"http://localhost:7766\",\n    # your API KEY\n    token=\"[YOUR_API_KEY]\",\n)\n\ndef sync_objects():\n    # first let's create a user:\n    user = {\n        \"key\": \"john@smith.com\",\n        \"firstName\": \"John\",\n        \"lastName\": \"Smith\",\n        \"email\": \"john@smith.com\",\n        \"roles\": [{\"role\":\"admin\", \"tenant\": \"default\"}]\n    }\n    permit.write(permit.api.sync_user(user))\n\n    tenant2 = {\n        \"key\": \"tenant2\",\n        \"name\": \"Second Tenant\"\n    }\n\n    # create tenant 2 and assign role viewer to user john\n    permit.write(\n        permit.api.create_tenant(tenant2),\n        permit.api.assign_role(\"john@smith.com\", \"viewer\", \"tenant2\")\n    )\n\nsync_objects()\n\n@app.route(\"/\")\ndef check_permissions():\n    # After we created this user in the previous step, we also synced the user's identifier\n    # to permit.io servers with permit.write(permit.api.syncUser(user)). The user identifier\n    # can be anything (email, db id, etc.) but must be unique for each user. Now that the\n    # user is synced, we can use its identifier to check permissions with `permit.check()`.\n    permitted = permit.check(\"john@smith.com\", \"retrieve\", \"task\") # default tenant is used\n    if not permitted:\n        return Response(json.dumps({\n            \"result\": f\"John Smith is NOT PERMITTED to retrieve task!\"\n        }), status=403, mimetype='application/json')\n\n    return Response(json.dumps({\n            \"result\": f\"John Smith is PERMITTED to retrieve task!\"\n        }), status=200, mimetype='application/json')\n\n@app.route(\"/tenant2\")\ndef check_permissions_tenant2():\n    # After we created this user in the previous step, we also synced the user's identifier\n    # to permit.io servers with permit.write(permit.api.syncUser(user)). The user identifier\n    # can be anything (email, db id, etc.) but must be unique for each user. Now that the\n    # user is synced, we can use its identifier to check permissions with `permit.check()`.\n    permitted = permit.check(\"john@smith.com\", \"create\", {\"type\": \"task\", \"tenant\": \"tenant2\"}) # tenant2 is used\n    if not permitted:\n        return Response(json.dumps({\n            \"result\": f\"John Smith is NOT PERMITTED to create task (tenant 2)!\"\n        }), status=403, mimetype='application/json')\n\n    return Response(json.dumps({\n            \"result\": f\"John Smith is PERMITTED to create task (tenant 2)!\"\n        }), status=200, mimetype='application/json')\n```\n\n----------------------------------------\n\nTITLE: Assigning a Role to a User with Permit SDK in Node.js\nDESCRIPTION: Shows how to assign a role to a user for a specific tenant using the Permit SDK.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/nodejs/quickstart-nodejs.mdx#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nawait permit.api.roleAssignments.assign({\n  user,\n  role,\n  tenant: \"default\",\n  resource_instance: \"document:1\",\n});\n```\n\n----------------------------------------\n\nTITLE: Basic RBAC Check with permit.check() in JavaScript\nDESCRIPTION: Demonstrates a simple Role-Based Access Control (RBAC) check using permit.check(). It requires a userId, action, and resource as parameters and returns a boolean indicating permission status.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/enforce-permissions/check.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst permitted = await permit.check(\"john@permit.io\", \"create\", \"document\");\n\nif (permitted) {\n  console.log(\"John is PERMITTED to create a document\");\n} else {\n  console.log(\"John is NOT PERMITTED to create a document\");\n}\n```\n\n----------------------------------------\n\nTITLE: Attribute-Based Access Control (ABAC) with permit.check() in JavaScript\nDESCRIPTION: Demonstrates how to use Attribute-Based Access Control (ABAC) with permit.check(). It includes user and resource attributes for more granular policy enforcement.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/enforce-permissions/check.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst permitted = await permit.check(\n  {\n    key: \"john@permit.io\",\n    attributes: {\n      location: \"England\",\n      department: \"Engineering\",\n    },\n  },\n  \"create\",\n  {\n    type: \"document\",\n    attributes: {\n      hasApproval: \"true\",\n    },\n    tenant: \"companyB\",\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Complete Express.js Application Example\nDESCRIPTION: Full example of a Node.js Express application implementing Permit.io authorization checks\nSOURCE: https://github.com/permitio/docs/blob/master/docs/getting-started/_quickstart-parts/_quickstart_nodejs.mdx#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Permit } = require(\"permitio\");\n\nconst express = require(\"express\");\nconst app = express();\nconst port = 4000;\n\n// This line initializes the SDK and connects your Node.js app\n// to the Permit.io PDP container you've set up in the previous step.\nconst permit = new Permit({\n  // in production, you might need to change this url to fit your deployment\n  pdp: \"http://localhost:7766\",\n  // your secret API Key\n  token: \"[YOUR_API_KEY]\",\n});\n\n// You can open http://localhost:4000 to invoke this http\n// endpoint, and see the outcome of the permission check.\napp.get(\"/\", async (req, res) => {\n  // Example user object\n  // You would usually get the user from your authentication layer (e.g. Auth0, Cognito, etc) via a JWT token or a database.\n  const user = {\n    key: \"[A_USER_ID]\",\n    firstName: \"John\",\n    lastName: \"Smith\",\n    email: \"john@permit.io\",\n  };\n\n  // check for permissions to a resource and action (in this example, create a document)\n  const permitted = await permit.check(user.key, \"create\", \"document\");\n  if (permitted) {\n    res.status(200).send(`${user.firstName} ${user.lastName} is PERMITTED to create document!`);\n  } else {\n    res.status(403).send(`${user.firstName} ${user.lastName} is NOT PERMITTED to create document!`);\n  }\n});\n\napp.listen(port, () => {\n  console.log(`Example app listening at http://localhost:${port}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Permissions with Tenant Context\nDESCRIPTION: Example of performing a permission check that includes tenant information as part of the resource context.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/getting-started/_quickstart-parts/_quickstart_python.mdx#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\npermitted = await permit.check(\n    \"john@permit.io\",\n    \"read\",\n    { \"type\": \"document\", \"tenant\": \"awesome_inc\" }\n)\n```\n\n----------------------------------------\n\nTITLE: Example Implementation with Resources and Roles Definition\nDESCRIPTION: Shows a more complete example with defined resources and roles, along with placeholder implementation details. This demonstrates the structure needed for defining employee resources and user roles with specific permissions.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/nodejs/sync-policy-script/sync-policy.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Define resources\nconst resources = [\n    {\n        key: \"employee\",\n        name: \"Employee\",\n        // Define actions\n    },\n    // ... other resources\n];\n\n// Define roles\nconst roles = [\n    {\n        key: \"User\",\n        name: \"User\",\n        permissions: [\"employee_doc:read\", \"employee_doc:update\"]\n    },\n    // ... other roles\n];\n\n// Implement the createPolicy function\nconst createPolicy = async () => {\n    // Iterate through resources\n    // ... implementation\n    // Iterate through roles\n    // ... implementation\n};\n\n// Run the script\ncreatePolicy().then(() => {\n    console.log(\"done\");\n}).catch((err) => {\n    console.log(err);\n});\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Resources and Actions with Permit using sync_resources\nDESCRIPTION: This code demonstrates how to define resource types with their allowed actions and synchronize them with Permit's authorization system. The example defines two resources ('task' and 'board') with various CRUD actions, then uses the sync_resources method to register them with Permit. The function returns information about the synchronized resources.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/reference/SDKs/Python/sync_resources.mdx#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresourcesTypes = {\n  \"resources\": [\n    {\n      \"type\": \"task\",\n      \"actions\": {\n        \"list\": {},\n        \"retrieve\": {},\n        \"create\": {},\n        \"update\": {},\n        \"delete\": {},\n      },\n    },\n    {\n      \"type\": \"board\",\n      \"actions\": {\n        \"list\": {},\n        \"create\": {},\n        \"update\": {},\n        \"delete\": {},\n      },\n    },\n  ],\n}\n\npermit.sync_resources(resourcesTypes)\n\n\n# SyncResources returns List[ResourceStub] type\n# {\n#     \"url\": string,\n#     \"data\": [\n#         {\n#         \"type\": string,\n#         \"description\": string,\n#         \"attributes\": { },\n#         \"name\": string,\n#         \"path\": string,\n#         \"id\": string,\n#         \"actions\": [],\n#         \"isBuiltIn\": false\n#         }\n#     ]\n# }\n```\n\n----------------------------------------\n\nTITLE: Checking Read Permission for John using Python\nDESCRIPTION: This Python code snippet uses the Permit.io SDK to check if 'john@acme.com' has read permission for the '2023_report' file resource. It uses an asynchronous function call to the permit.check method.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/google-drive.mdx#2025-04-17_snippet_56\n\nLANGUAGE: python\nCODE:\n```\nawait permit.check(\n    # user\n    \"john@acme.com\",\n    # action\n    \"read\",\n    # resource\n    {\n        \"type\": \"file\",\n        \"key\": \"2023_report\",\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Users with Filtering and Pagination in Permit.io API (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the Permit.io API to list users with optional parameters for searching, filtering by role, and pagination. It uses the 'list' method of the 'users' API, allowing for customization of the results returned.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/nodejs/user/list-users.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait permit.api.users.list({\n  search: \"@permit.io\",\n  role: \"admin\",\n  page: 1,\n  perPage: 20,\n});\n```\n\n----------------------------------------\n\nTITLE: Using Context Object with permit.check() in JavaScript\nDESCRIPTION: Shows how to use the context object in permit.check() to pass additional data for custom policy evaluations.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/enforce-permissions/check.mdx#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nawait permit.check(user, \"create\", \"document\", {\n  context: {\n    // additional data to be passed to the policy evaluation\n    totalDocuments: 100,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Testing ReBAC Policy Permission Check\nDESCRIPTION: Code snippet demonstrating how to use the permit.check() function to validate user permissions for specific actions on resources. The function accepts userId, action, and resource parameters to determine access rights.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/overview/create-a-rebac-policy.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait permit.check(userId, action, {\n  type: \"member_group\",\n  key: \"someKey\",\n  tenant: \"someTenant\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Roles and Resources with Permit.io API\nDESCRIPTION: This snippet shows how to create admin and operator roles, and a task resource with various actions using cURL requests to the Permit.io API. It requires API_SECRET_KEY, project_id, and env_id to be replaced with actual values.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/rbac/rbac-example.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# create an admin role\ncurl 'https://api.permit.io/v2/schema/{project_id}/{env_id}/roles' \\\n  -H 'authorization: Bearer API_SECRET_KEY' \\\n  --data-raw '{\"key\":\"admin\",\"name\":\"admin\",\"description\":\"\"}'\n\n# create an operator role\ncurl 'https://api.permit.io/v2/schema/{project_id}/{env_id}/roles' \\\n  -H 'authorization: Bearer API_SECRET_KEY' \\\n  --data-raw '{\"key\":\"operator\",\"name\":\"operator\",\"description\":\"\"}'\n\n\n# create a task resource with create, read, update, toggle and delete actions\ncurl 'https://api.permit.io/v2/schema/{project_id}/{env_id}/resources' \\\n  -H 'authorization: Bearer API_SECRET_KEY' \\\n  --data-raw '{\"key\":\"task\",\"name\":\"task\",\"actions\":{\"create\":{\"name\":\"create\"},\"read\":{\"name\":\"read\"},\"update\":{\"name\":\"update\"},\"toggle\":{\"name\":\"toggle\"},\"delete\":{\"name\":\"delete\"}},\"attributes\":{}}' \n\n\n# create a role permission for admin\ncurl 'https://api.permit.io/v2/schema/{project_id}/{env_id}/roles/admin/permissions' \\\n  -H 'authorization: Bearer API_SECRET_KEY' \\\n  --data-raw '{\"permissions\":[\"task:create\",\"task:read\",\"task:update\",\"task:toggle\",\"task:delete\"]}'\n\n# create a role permission for user\ncurl 'https://api.permit.io/v2/schema/{project_id}/{env_id}/roles/operator/permissions' \\\n  -H 'authorization: Bearer API_SECRET_KEY' \\\n  --data-raw '{\"permissions\":[\"task:read\",\"task:toggle\"]}'\n```\n\n----------------------------------------\n\nTITLE: Basic Permission Check\nDESCRIPTION: Simple permission check example using permit.check() method with user email, action, and resource\nSOURCE: https://github.com/permitio/docs/blob/master/docs/getting-started/_quickstart-parts/_quickstart_nodejs.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst permitted = await permit.check(\"john@permit.io\", \"create\", \"document\");\nif (permitted) {\n  console.log(\"John is PERMITTED to create a document\");\n} else {\n  console.log(\"John is NOT PERMITTED to create a document\");\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Permission Checks with Node.js Express and Auth0\nDESCRIPTION: This JavaScript code demonstrates how to implement permission checks in an Express.js route handler. It uses permit.check() to verify if the active user has permission to create a task within a specific tenant (board) before proceeding with the request.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/tutorials/_connecting_to_authentication.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.post(\n\t\"\",\n\tasync function (\n\t\treq: express.Request,\n\t\tres: express.Response,\n\t\tnext: express.NextFunction\n\t) {\n\t\t// permissions check\n\t\tconst permitted = await permit.check(req.activeUser?.id, \"create\", {\n\t\t\ttype: \"task\",\n\t\t\ttenant: req.params.boardId,\n\t\t});\n\t\tif (!permitted) {\n\t\t\tres.status(403).send(\"Forbidden: not allowed by policy!\");\n\t\t\treturn;\n\t\t}\n\t\t// ...\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Complete Web Application Implementation\nDESCRIPTION: Full example of a web application using Permit.io SDK with HTTP endpoint and permission checking.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/getting-started/_quickstart-parts/_quickstart_golang.mdx#2025-04-17_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"go.uber.org/zap\"\n\t\"net/http\"\n\n\t\"github.com/permitio/permit-golang/pkg/config\"\n\t\"github.com/permitio/permit-golang/pkg/enforcement\"\n\t\"github.com/permitio/permit-golang/pkg/permit\"\n)\n\nconst (\n\tport = 4000\n)\n\nfunc main() {\n\tpermitClient := permit.NewPermit(\n\t\tconfig.NewConfigBuilder(\n\t\t\t\"<YOUR_API_KEY>\").\n\t\t\tWithLogger(zap.NewExample()).\n\t\t\tWithPdpUrl(\"http://localhost:7766\").\n\t\t\tBuild(),\n\t)\n\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tuser := enforcement.UserBuilder(\"user_id\").\n\t\t\tWithFirstName(\"john\").\n\t\t\tWithLastName(\"doe\").\n\t\t\tWithEmail(\"jown@doe.com\").\n\t\t\tBuild()\n\n\t\tresource := enforcement.ResourceBuilder(\"document\").Build()\n\n\t\tpermitted, err := permitClient.Check(user, \"read\", resource)\n\t\tif err != nil {\n\t\t\tfmt.Println(err)\n\t\t\treturn\n\t\t}\n\t\tif permitted {\n\t\t\tw.WriteHeader(http.StatusOK)\n\t\t\t_, err = w.Write([]byte(user.FirstName + \" \" + user.LastName + \" is PERMITTED to read document!\"))\n\t\t} else {\n\t\t\tw.WriteHeader(http.StatusForbidden)\n\t\t\t_, err = w.Write([]byte(fmt.Sprintf(user.FirstName + \" \" + user.LastName + \" is NOT PERMITTED to read document!\")))\n\t\t}\n\t})\n\tfmt.Printf(\"Listening on http://localhost:%d\", port)\n\thttp.ListenAndServe(fmt.Sprintf(\":%d\", port), nil)\n}\n```\n\n----------------------------------------\n\nTITLE: ABAC Policy Permission Check\nDESCRIPTION: Advanced permission check using ABAC (Attribute-Based Access Control) with user and resource attributes\nSOURCE: https://github.com/permitio/docs/blob/master/docs/getting-started/_quickstart-parts/_quickstart_nodejs.mdx#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst permitted = await permit.check(\n  // the user object\n  {\n    // the user key\n    key: \"check@permit.io\",\n    // just-in-time attributes on the user\n    attributes: {\n      location: \"England\",\n      department: \"Engineering\",\n    },\n  },\n  // the action the user is trying to do\n  \"action\",\n  // Resource\n  {\n    // the type of the resource (the resource key)\n    type: \"resource\",\n    // just-in-time attributes on the resource\n    attributes: {\n      hasApproval: \"true\",\n    },\n    // the tenant the resource belong to\n    tenant: \"tenant\",\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing the Permit.io SDK in JavaScript\nDESCRIPTION: Creates a new instance of the Permit.io SDK by connecting to a local PDP container. Requires configuring the PDP URL and your API key.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/tutorials/_quickstart-parts/_quickstart_nodejs.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// This line initializes the SDK and connects your Node.js app\n// to the Permit.io PDP container you've set up in the previous step.\nconst permit = new Permit({\n\t// in production, you might need to change this url to fit your deployment\n\tpdp: \"http://localhost:7766\",\n\t// your API Key\n\ttoken: \"[YOUR_API_KEY]\",\n});\n```\n\n----------------------------------------\n\nTITLE: Tenant-based Check with permit.check() in JavaScript\nDESCRIPTION: Shows how to include tenant information in the permit.check() function call. Tenants are passed as part of the resource object.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/enforce-permissions/check.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst permitted = await permit.check(\"john@permit.io\", \"create\", {\n  type: \"document\",\n  tenant: \"companyA\",\n});\n```\n\n----------------------------------------\n\nTITLE: Assigning a Role\nDESCRIPTION: Assigning a role to a user in a specific tenant\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/tutorials/_quickstart-parts/_quickstart_python.mdx#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nawait permit.write(\n    permit.api.assign_role(\"john@smith.com\", \"viewer\", \"cool_company_inc\")\n)\n```\n\n----------------------------------------\n\nTITLE: Enforcing ReBAC Policy Check in JavaScript\nDESCRIPTION: This code snippet demonstrates how to perform a permission check in a ReBAC context using Permit.io. It checks if a user can be assigned to a specific member group, with the group key rendered dynamically.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/build-policies/rebac/building-rebac-policies.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait permit.check(userId, \"assign\", `member_group:${group}`);\n```\n\n----------------------------------------\n\nTITLE: Performing ABAC Permission Check with Permit SDK\nDESCRIPTION: Advanced example of using permit.check() for ABAC policies, including just-in-time attributes for both user and resource.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/getting-started/_quickstart-parts/_quickstart_python.mdx#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\npermitted = await permit.check(\n\t{\n\t\t\"key\": \"check@permit.io\",\n\t\t\"attributes\": {\n\t\t\t\"location\": \"England\",\n\t\t\t\"department\": \"Engineering\",\n\t\t},\n\t},\n\t\"action\",\n\t{\n\t\t\"type\": \"resource\",\n\t\t\"attributes\": {\n\t\t\t\"hasApproval\": \"true\",\n\t\t},\n\t\t\"tenant\": \"tenant\",\n\t}\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Role with Permissions using Permit API\nDESCRIPTION: API call to create a new 'Manager' role with read and delete permissions on the 'account' resource.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/overview/use-the-permit-api-and-sdk.mdx#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await permit.api.post(`/v2/schema/${projectId}/${envId}/roles`, {\n  key: \"manager\",\n  name: \"Manager\",\n  permissions: [\n    {\n      action: \"read\",\n      resource: \"account\"\n    },\n    {\n      action: \"delete\",\n      resource: \"account\"\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Creating User Object in Go with Permit.io\nDESCRIPTION: Demonstrates how to create a new user object with basic information and custom attributes. Shows setting of key user properties including email, first name, last name, and arbitrary attributes for access control.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/golang/user/Create.mdx#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nuser := models.NewUserCreate(\"user-key\")\nuser.SetEmail(\"john@doe.com\")\nuser.SetFirstName(\"John\")\nuser.SetLastName(\"Doe\")\nuser.SetAttributes(map[string]interface{}{\n    \"age\": \"26\",\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Permit.io Terraform Provider\nDESCRIPTION: Sets up the Permit.io provider with the API URL and API key. The API key can be provided directly or set as an environment variable for security.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/integrations/infra-as-code/terraform-provider.mdx#2025-04-17_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nprovider \"permitio\" {\n    api_url = \"https://api.permit.io\" # Defaults to - \"https://api.permit.io - Can be set as an environment variable PERMITIO_API_URL\n    api_key = \"YOUR_API_KEY\" # Can be set as an environment variable PERMITIO_API_KEY\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Permissions in Flask Route for Default Tenant\nDESCRIPTION: This Flask route checks permissions for a user to retrieve a task in the default tenant. It uses the Permit.io client to perform the permission check and returns an appropriate response based on the result.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/getting-started/_quickstart-parts/_quickstart_python_sync.mdx#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/\")\ndef check_permissions():\n    # After we created this user in the previous step, we also synced the user's identifier\n    # to permit.io servers with permit.write(permit.api.syncUser(user)). The user identifier\n    # can be anything (email, db id, etc.) but must be unique for each user. Now that the\n    # user is synced, we can use its identifier to check permissions with `permit.check()`.\n    permitted = permit.check(\"john@smith.com\", \"retrieve\", \"task\") # default tenant is used\n    if not permitted:\n        return Response(json.dumps({\n            \"result\": f\"John Smith is NOT PERMITTED to retrieve task!\"\n        }), status=403, mimetype='application/json')\n\n    return Response(json.dumps({\n            \"result\": f\"John Smith is PERMITTED to retrieve task!\"\n        }), status=200, mimetype='application/json')\n```\n\n----------------------------------------\n\nTITLE: Running Docker PDP Container\nDESCRIPTION: Commands for pulling and running the Permit.io PDP Docker container. Includes environment variable configuration for debugging and API key setup.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/overview/perform-policy-check-with-cloud-pdp.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull permitio/pdp-v2:latest\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it -p 7766:7000 --env PDP_DEBUG=True --env PDP_API_KEY=<YOUR_API_KEY> permitio/pdp-v2:latest\n```\n\n----------------------------------------\n\nTITLE: Checking Permissions in Permit.io with Python\nDESCRIPTION: This example demonstrates how to check permissions for a user on a specific resource and action within a tenant using the Permit.io SDK.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/python/usage-example.mdx#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom permit import Permit\n\npermit = Permit(...)\n\npermitted = await permit.check(\n    # the user key\n    \"auth0|elon\",\n    # the action\n    \"create\",\n    # the resource\n    {\n        # the type of the resource (resource.key)\n        \"type\": \"document\",\n        # the tenant that contains the resource\n        \"tenant\": \"tesla\"\n    },\n)\n\nif permitted:\n    print(\"permitted\")\nelse:\n    print(\"denied\")\n```\n\n----------------------------------------\n\nTITLE: Utilizing permit.check() Function in Authorization\nDESCRIPTION: The permit.check() function is the primary component for enforcing authorization decisions. It evaluates user permissions based on user identity, attempted action, resource type/ID, and contextual data to determine if an action should be allowed or denied.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/SDLC/modeling-implementation-components.mdx#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npermit.check()\n```\n\n----------------------------------------\n\nTITLE: Complete Custom Rego File for Permit.io Deny Rule\nDESCRIPTION: This is the complete custom.rego file that implements a deny rule for Permit.io. It includes all necessary imports, the default allow rule, and the custom logic for the deny rule based on role and time constraints.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/integrations/gitops/custom_policy.mdx#2025-04-17_snippet_3\n\nLANGUAGE: rego\nCODE:\n```\npackage package permit.custom\n\nimport future.keywords.in\nimport data.permit.policies\nimport data.permit.rbac\n\ndefault allow := false\n\nallow {\n    not \"rbac\" in policies.__allow_sources\n} else {\n   not \"tmp-admin\" in rbac.allowing_roles\n} else {\n   time.now_ns() >= time.parse_rfc3339_ns(\"2023-01-01T00:00:00+02:00\")\n   time.now_ns() <= time.parse_rfc3339_ns(\"2024-01-01T00:00:00+02:00\")\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Permissions Using Permit.io SDK in C#\nDESCRIPTION: Demonstrates how to check if a user has permission to perform a specific action on a resource using the Permit SDK, and handling the permitted and non-permitted cases.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/tutorials/_quickstart-parts/_quickstart_dotnet.mdx#2025-04-17_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nbool permitted = await permit.Check(user.key, \"create\", \"document\");\nif (permitted)\n{\n  Console.Write(\"User is PERMITTED to create a document\");\n}\nelse\n{\n  Console.Write(\"User is NOT PERMITTED to create a document\");\n}\n```\n\n----------------------------------------\n\nTITLE: Loading User and Resource Attributes in permit.check() Function (JavaScript)\nDESCRIPTION: This snippet demonstrates how to pass user and resource attributes directly into the permit.check() function. It allows for dynamic attribute evaluation during enforcement checks.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/manage-data/loading-data.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst permitted = await permit.check(\n\t{\n\t\tkey: \"john@smith.com\",\n\t\tattributes: {\n\t\t\tlocation: \"England\",\n\t\t\tdepartment: \"Engineering\",\n\t\t},\n\t},\n\t\"read\",\n\t{\n\t\ttype: \"file\",\n\t\tattributes: {\n\t\t\tisPaying: \"true\",\n\t\t},\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Performing Authorization Check\nDESCRIPTION: Example of performing a basic authorization check using the Permit.io SDK to verify if a user has permission to create a document.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/overview/perform-policy-check-with-cloud-pdp.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst permitted = permit.check(\"user|987654321\", \"create\", \"document\");\n```\n\n----------------------------------------\n\nTITLE: Creating a Resource in Permit.io using Python\nDESCRIPTION: This example demonstrates how to create a new resource in Permit.io. It defines a 'document' resource with specific actions and attributes.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/python/usage-example.mdx#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom permit import ResourceRead\n\ndocument: ResourceRead = await permit.api.resources.create(\n    {\n        \"key\": \"document\",\n        \"name\": \"Document\",\n        \"urn\": \"prn:gdrive:document\",\n        \"description\": \"google drive document\",\n        \"actions\": {\n            \"create\": {},\n            \"read\": {},\n            \"update\": {},\n            \"delete\": {},\n        },\n        \"attributes\": {\n            \"private\": {\n                \"type\": \"bool\",\n                \"description\": \"whether the document is private\",\n            },\n        },\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Simple User Permissions Check in Node.js\nDESCRIPTION: Basic implementation of getting user permissions using Permit.io SDK in Node.js. Takes a user identifier and returns permissions across all tenants.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/enforce-permissions/user-permissions.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Permit } = require(\"permitio\");\n\nconst permit = new Permit({token: \"<YOUR_API_KEY>\", ...});\nconst userPermissions = await permit.getUserPermissions(\"john@doe.com\");\n```\n\n----------------------------------------\n\nTITLE: Creating a Tenant in Permit.io\nDESCRIPTION: Creates a new tenant boundary in Permit.io to represent a customer or organizational boundary in a multi-tenant application.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/tutorials/_quickstart-parts/_quickstart_python_sync.mdx#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ncool_company_tenant = {\n    \"key\": \"cool_company_inc\",\n    \"name\": \"Cool Company Inc\"\n}\n\npermit.write(permit.api.create_tenant(cool_company_tenant))\n```\n\n----------------------------------------\n\nTITLE: RBAC and ABAC Implementation Example\nDESCRIPTION: Example showing how to implement both Role-Based Access Control (RBAC) and Attribute-Based Access Control (ABAC) using the loadLocalStateBulk function.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/integrations/feature-flagging/casl.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nawait permit.loadLocalStateBulk([\n    { action: 'view', resource: 'statament' },\n    { action: 'view', resource: 'products' },\n    { action: 'delete', resource: 'file' },\n    { action: 'create', resource: 'document' },\n    {\n      action: 'view',\n      resource: 'files_for_poland_employees',\n      userAttributes: {\n        department: \"Engineering\",\n        salary: \"100K\"\n      }\n      resourceAttributes: { country: 'PL' },\n    },\n  ]);\n```\n\n----------------------------------------\n\nTITLE: Getting All Approval Requests\nDESCRIPTION: Makes a GET request to retrieve a list of operation approvals with optional filtering by status, resource, and resource instance.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/elements/operation_approval.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.permit.io/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/operation_approval' \\\n  -H 'cookie: <COOKIE FROM LOGIN>'\n  -H 'element_id: ELEMENTS_CONFIG_ID'\n  -H 'status: Status of the approval process'\n  -H 'resource: Resource key of the approval process'\n  -H 'resource_instance: Resource instance key of the approval process'\n  -H 'page: Page number of the results to fetch' #Default: 1\n  -H 'per_page: The number of results per page (max 100)' #Default: 30\n```\n\n----------------------------------------\n\nTITLE: User Payload Structure for Permit.io in JavaScript\nDESCRIPTION: JSON structure representing the user payload for the syncUser function. This includes required key field and optional fields like email, first/last name, and custom attributes for attribute-based access control.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/nodejs/user/sync-user.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\tkey: \"key\",\n\temail: \"email@example.com\",\n\tfirst_name: \"John\",\n\tlast_name: \"Smith\",\n\tattributes: {}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Permit.io Authorization in Next.js API Route\nDESCRIPTION: Setting up Permit.io SDK for authorization checks in a Next.js API route to control access to tasks based on user permissions.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/authentication/auth0/auth0-demo-app.mdx#2025-04-17_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\n// pages/api/tasks.ts\nimport { Permit } from \"permitio\";\n\nexport const permit = new Permit({\n  pdp: \"https://cloudpdp.api.permit.io\",\n  token: process.env.PERMIT_SDK_TOKEN,\n});\nexport default withApiAuthRequired(async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse<Task | Task[] | Response>\n) {\n  // Auth0 is checking if the user is logged in (who the user is)\n  const session = await getSession(req, res);\n  if (!session?.user) {\n    res.status(401).json({ message: \"unauthorized\" });\n    return;\n  }\n  // Permit is checking if the user has the right permissions (what the user can do)\n  const isAllowedForOperation = await permit.check(\n    (session?.user?.sub as string) || \"\", // the user identifier (Permit user id / or Permit user key, in this example we set the Auth0 user id as the key)\n    req.method?.toLowerCase() as string, // the action (can be: get, post, delete)\n    \"task\" // our resource key\n  );\n  if (!isAllowedForOperation) {\n    res.status(403).json({ message: \"forbidden\" });\n    return;\n  }\n  //... handle the request\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Permissions in Flask Route for Specific Tenant\nDESCRIPTION: This Flask route checks permissions for a user to create a task in a specific tenant (tenant2). It demonstrates how to use the Permit.io client for multi-tenant permission checks.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/getting-started/_quickstart-parts/_quickstart_python_sync.mdx#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/tenant2\")\ndef check_permissions_tenant2():\n    # After we created this user in the previous step, we also synced the user's identifier\n    # to permit.io servers with permit.write(permit.api.syncUser(user)). The user identifier\n    # can be anything (email, db id, etc.) but must be unique for each user. Now that the\n    # user is synced, we can use its identifier to check permissions with `permit.check()`.\n    permitted = permit.check(\"john@smith.com\", \"create\", {\"type\": \"task\", \"tenant\": \"tenant2\"}) # tenant2 is used\n    if not permitted:\n        return Response(json.dumps({\n            \"result\": f\"John Smith is NOT PERMITTED to create task (tenant 2)!\"\n        }), status=403, mimetype='application/json')\n\n    return Response(json.dumps({\n            \"result\": f\"John Smith is PERMITTED to create task (tenant 2)!\"\n        }), status=200, mimetype='application/json')\n```\n\n----------------------------------------\n\nTITLE: Checking Permissions with Permit.io SDK\nDESCRIPTION: Example showing how to check if a user has permission to perform a specific action on a resource. Takes the user ID, action, and resource as parameters and returns a boolean result.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/tutorials/_quickstart-parts/_quickstart_nodejs.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst permitted = await permit.check(\"john@smith.com\", \"create\", \"document\");\nif (permitted) {\n\tconsole.log(\"User is PERMITTED to create a document\");\n} else {\n\tconsole.log(\"User is NOT PERMITTED to create a document\");\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Permit.io Policy Creation Script in Python\nDESCRIPTION: Full implementation of a script to create policies in Permit.io. It initializes the SDK, defines resources and roles, then creates them using the API. The script formats permissions correctly and handles the API calls with asyncio.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/python/sync-policy-script/sync-policy.mdx#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\n\nfrom permit import Permit\n\n\n# This line initializes the SDK and connects your python app\n\npermit = Permit(\n    pdp=\"https://cloudpdp.api.permit.io\",  \n    token=\"permit_key_\",\n)\n\nroles = [\n    {\n        \"name\": \"secret_manager\",\n        \"permissions\": [\n            {\n                \"resource\": \"secret\",\n                \"actions\": [\n                    \"create\",\"read\",\"update\"\n                ]\n            }\n        ]\n    }\n]\n\nresources = [\n    {\n        \"key\": \"secret\",\n        \"name\": \"secret\",\n        \"actions\": {\n            \"create\": {},\n            \"read\": {},\n            \"update\": {},\n            \"delete\": {},\n        },\n    }\n]\n\n# create a script to create policy in permit this policy will be have a resource and a role with permissions\nif __name__ == \"__main__\":\n    for resource in resources:\n        resource_obj = {\n            \"name\": resource.get(\"name\"),\n            \"key\": resource.get(\"name\"),\n            \"actions\": resource.get(\"actions\"),\n            \"description\": \"\",\n        }\n        asyncio.run(permit.api.resources.create(resource))\n\n    for role in roles:\n        role_permissions = []\n        for permission in role.get(\"permissions\", []):\n            role_permissions = role_permissions + [f\"{permission.get('resource')}:{action}\" for action in permission.get(\"actions\")]\n        role_obj = {\n            \"name\": role.get(\"name\"),\n            \"key\": role.get(\"name\"),\n            \"permissions\": role_permissions,\n        }\n        print(role_obj)\n\n        asyncio.run(permit.api.roles.create(role_obj))\n```\n\n----------------------------------------\n\nTITLE: ABAC Policy Permission Check\nDESCRIPTION: Example of checking permissions against ABAC policies with user and resource attributes\nSOURCE: https://github.com/permitio/docs/blob/master/docs/getting-started/_quickstart-parts/_quickstart_python_sync.mdx#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\npermitted = await permit.check(\n\t# User Set\n\t{\n\t\t\"userId\": \"check@permit.io\",\n\t\t\"attributes\": {\n\t\t\t\"location\": \"England\",\n\t\t\t\"department\": \"Engineering\",\n\t\t},\n\t},\n\t# Action\n\t\"action\",\n\t# Resource Set\n\t{\n\t\t\"type\": \"resource\",\n\t\t\"attributes\": {\n\t\t\t\"hasApproval\": \"true\",\n\t\t},\n\t\t\"tenant\": \"tenant\",\n\t}\n)\n```\n\n----------------------------------------\n\nTITLE: Importing Permit SDK in Node.js\nDESCRIPTION: Code snippet showing how to import the Permit SDK into a Node.js application.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/nodejs/quickstart-nodejs.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Permit } from \"permitio\";\n```\n\n----------------------------------------\n\nTITLE: Checking Update Permission for John using Python\nDESCRIPTION: This Python code snippet uses the Permit.io SDK to check if 'john@acme.com' has update permission for the '2023_report' file resource. It uses an asynchronous function call to the permit.check method.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/google-drive.mdx#2025-04-17_snippet_59\n\nLANGUAGE: python\nCODE:\n```\nawait permit.check(\n    # user\n    \"john@acme.com\",\n    # action\n    \"update\",\n    # resource\n    {\n        \"type\": \"file\",\n        \"key\": \"2023_report\",\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Assigning Role to User with Permit.io API in C#\nDESCRIPTION: This code snippet demonstrates how to assign a role to a specific user using the Permit.io client library. It requires the user ID, role ID, and tenant ID as parameters. The method returns a response object containing the result of the operation.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/dotnet/role/AssignRole.mdx#2025-04-17_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nvar response = await permitClient.Api.AssignRole(userId, roleId, tenantId);\n```\n\n----------------------------------------\n\nTITLE: Just-In-Time (JIT) Attributes with permit.check() in JavaScript\nDESCRIPTION: Shows how to use Just-In-Time (JIT) attributes with permit.check(). JIT attributes allow passing dynamic values to pre-declared attributes during the function call.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/enforce-permissions/check.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst permitted = await permit.check(\n    {\n        key: \"john@smith.com\",\n        attributes: {\n            location: location, // With location being a variable extracted from your logged user\n        },\n    },\n    \"access\",\n    \"document\"\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Permission Check Implementation\nDESCRIPTION: Example of implementing a basic permission check using the Permit.io SDK with user and resource objects.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/getting-started/_quickstart-parts/_quickstart_golang.mdx#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"github.com/permitio/permit-golang/pkg/permit\"\nimport \"github.com/permitio/permit-golang/pkg/config\"\nimport \"github.com/permitio/permit-golang/pkg/enforcement\"\n\nfunc main() {\n\tPermitConfig := config.NewConfigBuilder(\"<YOUR_API_TOKEN>\").Build()\n\tPermit := permit.New(PermitConfig)\n\n\tuser := enforcement.UserBuilder(\"john@doe.com\").Build()\n\tresource := enforcement.ResourceBuilder(\"document\").Build()\n\tpermitted, err := Permit.Check(user, \"create\", resource)\n\tif err != nil {\n\t\treturn\n\t}\n\tif permitted {\n\t\t// Let the user read the resource\n\t} else {\n\t\t// Deny access\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Performing RBAC Permission Check with Permit SDK\nDESCRIPTION: Example of using permit.check() to perform a basic RBAC permission check for a user action on a resource.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/getting-started/_quickstart-parts/_quickstart_python.mdx#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npermitted = await permit.check(\"john@smith.com\", \"create\", \"document\")\n\nif permitted:\n    print(\"John is permitted to create a document\")\nelse:\n    print(\"John is NOT PERMITTED to create document!\")\n```\n\n----------------------------------------\n\nTITLE: Checking ABAC Permissions with Permit.io SDK in Java\nDESCRIPTION: Java code showing how to check permissions against ABAC policies using the Permit.io SDK.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/getting-started/_quickstart-parts/_quickstart_java.mdx#2025-04-17_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nHashMap<String, Object> userAttributes = new HashMap<>();\nuserAttributes.put(\"isAllowed\", \"True\");\n\nUser userWithAttributes = (new User.Builder(\"John\"))\n\t.withEmail(\"John@smith.com\")\n\t.withFirstName(\"John\")\n\t.withLastName(\"Smith\")\n\t.withAttributes(userAttributes)\n\t.build();\n\nResource resourceWithAttributes = new Resource.Builder(\"resource\").withTenant(tenant.key).withAttributes(resourceAttributes).build()\n\npermit.check(userWithAttributes, \"action\", resourceWithAttributes);\n```\n\n----------------------------------------\n\nTITLE: ABAC Policy Permission Check\nDESCRIPTION: Implementation of permission checking against ABAC policies with attributes.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/getting-started/_quickstart-parts/_quickstart_golang.mdx#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nuserCheck := enforcement.UserBuilder(\"userKey\").Build()\nattributes := map[string]string{\n\t\"hasApproval\": \"true\",\n}\nresourceCheck := enforcement.ResourceBuilder(\"resourceKey\").WithTenant(\"default\").WithAttributes(attributes).Build()\nallowed, _ := permitClient.Check(userCheck, \"create\", resourceCheck)\n```\n\n----------------------------------------\n\nTITLE: Basic Auth0 User Authentication in React/NextJS\nDESCRIPTION: Implementation of Auth0 user authentication in a NextJS application using the useUser hook and UserProvider component.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/authentication/auth0/permit-integration.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// index.tsx\n//...\nconst { user, isLoading } = useUser();\n//...\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// _app.tsx\n//...\n<UserProvider>\n\t<Component {...pageProps} />\n</UserProvider>\n//...\n```\n\n----------------------------------------\n\nTITLE: Initializing Local PDP Connection\nDESCRIPTION: Code snippet showing how to initialize the Permit object to connect to a locally hosted PDP instance. The configuration includes the API key and local PDP URL.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/overview/perform-policy-check-with-cloud-pdp.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Permit } = require(\"@permitio/permit-node\");\n\nconst permit = new Permit({\n    token: \"<YOUR_API_KEY>\",\n    pdp: \"http://localhost:7766\",\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Roles and Permissions in Permit.io with Python\nDESCRIPTION: Example showing how to define roles with specific permissions for resources. This snippet creates a 'secret_manager' role with create, read, and update permissions for the 'secret' resource.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/python/sync-policy-script/sync-policy.mdx#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nroles = [\n    {\n        \"name\": \"secret_manager\",\n        \"permissions\": [\n            {\n                \"resource\": \"secret\",\n                \"actions\": [\"create\", \"read\", \"update\"]\n            }\n        ]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Assigning User Role in Permit.io\nDESCRIPTION: Demonstrates how to assign a role to a user using the Permit.io API. The function returns a RoleAssignment object containing the assigned role details, user information, and scope.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/reference/SDKs/Python/assign_role.mdx#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npermit.write(permit.api.assign_role(user.customId, Role.key, Tenant.key))\n\n# returns the assigned role with RoleAssignment type\n# {\n#     id: string,\n#     role: {\n#         id: string,\n#         name: string,\n#         description: string,\n#         tenantId: string,\n#     },\n#     user: string,\n#     scope: string,\n# }\n```\n\n----------------------------------------\n\nTITLE: Complete Permit.io Policy Management Implementation\nDESCRIPTION: Full implementation of the policy creation script that initializes the SDK, defines resources and roles, and implements the createPolicy function to check for existing resources/roles and update them as needed. This includes error handling and permission comparison logic.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/nodejs/sync-policy-script/sync-policy.mdx#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Permit } = require('permitio');\n\n// This line initializes the SDK and connects your Node.js app\n// to the Permit.io PDP container you've set up in the previous step.\nconst permit = new Permit({\n    // in production, you might need to change this url to fit your deployment\n    pdp: 'https://cloudpdp.api.permit.io',\n    // your api key\n    token:\n        'permit_key_',\n});\n\n\nconst roles = [\n    {\n        \"key\": \"manager\",\n        \"name\": \"Manager\",\n        \"description\": \"Default User\",\n        \"permissions\": [\"employee:export\", \"employee:delete\"]\n    },\n]\n\nconst resources = [\n    {\n        \"key\": \"employee\",\n        \"name\": \"Employee\",\n        \"actions\": {\n            \"create\": {\n                \"name\": \"create\",\n            },\n            \"read-all\": {\n                \"name\": \"read-all\"\n            },\n            \"delete\": {\n                \"name\": \"delete\"\n            },\n            \"export\": {\n                \"name\": \"export\"\n            },\n        },\n    },\n    {\n        \"key\": \"task\",\n        \"name\": \"Task\",\n        \"actions\": {\n            \"create\": {\n                \"name\": \"create\",\n            },\n            \"read-all\": {\n                \"name\": \"read-all\"\n            },\n            \"delete\": {\n                \"name\": \"delete\"\n            },\n            \"export\": {\n                \"name\": \"export\"\n            },\n        },\n    \n    },\n    {\n        \"key\": \"folder\",\n        \"name\": \"Folder\",\n        \"actions\": {\n            \"create\": {\n                \"name\": \"create\",\n            },\n            \"read-all\": {\n                \"name\": \"read-all\"\n            },\n            \"delete\": {\n                \"name\": \"delete\"\n            },\n            \"export\": {\n                \"name\": \"export\"\n            },\n        },\n    }\n]\n\n\nconst createPolicy = async () => {\n    // iterate through resources\n    for (let resource of resources) {\n        // check if resource exists\n        let resourceExists\n        try {\n            resourceExists = await permit.api.resources.get(resource.key);\n        } catch(err){\n            console.log('no resource' + resource.key);\n        }\n\n        // if resource don't exist create it\n        if (!resourceExists) {\n            console.log(\"creating resource: \" + resource.key);\n            await permit.api.resources.create(resource);\n        } else {\n            console.log(\"resource already exists: \" + resource.key);\n        }\n    }\n    // iterate through roles\n    for (let role of roles) {\n        // check if role exists\n        let roleExists\n        try {\n            roleExists = await permit.api.roles.get(role.key);\n        } catch(err){\n            console.log('no role' + role.key);\n        }\n        // if role don't exist create it\n        if (!roleExists) {\n            console.log(\"creating role: \" + role.key);\n            await permit.api.roles.create(role);\n        } else {\n            console.log(\"role already exists: \" + role.key);\n            console.log(roleExists.permissions, role.permissions)\n            if ((roleExists.permissions.filter(x => !role.permissions.includes(x)).length > 0) > 0 || (role.permissions.filter(x => !roleExists.permissions.includes(x)).length > 0) > 0) {\n                console.log(\"updating permissions for role: \" + role.key);\n                // clear permissions\n                await permit.api.roles.removePermissions(roleExists.id, roleExists.permissions);\n                // add permissions\n                await permit.api.roles.assignPermissions(roleExists.id, role.permissions);\n            } else {\n                console.log(\"permissions for role: \" + role.key + \" are up to date\");\n            }\n        }\n    }\n}\n\ncreatePolicy().then(() => {\n    console.log(\"done\");\n}\n).catch((err) => {\n    console.log(err);\n}\n)\n```\n\n----------------------------------------\n\nTITLE: ABAC Policy Permission Check\nDESCRIPTION: Example of checking permissions against an ABAC policy using attribute-based conditions.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/getting-started/_quickstart-parts/_quickstart_ruby.mdx#2025-04-17_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nif permit.check(user, 'close', { \"key\": \"resource\", \"attributes\": {\"hasApproval\": \"true\"} })\n  # Allow to close document\nend\n```\n\n----------------------------------------\n\nTITLE: Creating an Approval Request\nDESCRIPTION: Makes a POST request to create a new operation approval with the required data, including access request details and reason.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/elements/operation_approval.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n 'https://api.permit.io/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/operation_approval' \\\n  -H 'cookie: <COOKIE FROM LOGIN>'\n  -H 'element_id: ELEMENTS_CONFIG_ID'\n  -data-raw\n {\n     \"access_request_details\": {\n            \"tenant\": \"34f5c98e-f430-457b-a812-92637d0c6fd0\",\n            \"resource\": \"4d5215ed-38bb-48ed-879a-fdb9ca58522f\",\n        },\n    \"reason\": \"I need to make transfer for my client\",\n } \\\n```\n\n----------------------------------------\n\nTITLE: Creating User with Role Assignments in Java\nDESCRIPTION: Shows how to create a new user with role assignments in addition to basic attributes. This implementation includes assigning multiple roles to the user including editor and moderator roles, with specific resource targeting.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/java/user/create.mdx#2025-04-17_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport io.permit.sdk.openapi.models.UserCreate;\nimport io.permit.sdk.openapi.models.UserRead;\n\n// optional attributes for attribute-based access control\nHashMap<String, Object> userAttributes = new HashMap<>();\nuserAttributes.put(\"age\", Integer.valueOf(50));\nuserAttributes.put(\"fav_color\", \"red\");\n\nfinal List<UserRoleCreate> roleAssignments = Arrays.asList(\n                new UserRoleCreate(\"editor\", \"default\"),\n                new UserRoleCreate(\"moderator\", \"default\"),\n                new UserRoleCreate(\"editor\", \"default\", \"myResourceType:myResourceInstance\")\n        );\n\nUserRead user = permit.api.users.create(\n    (new UserCreate(\"auth0|elon\"))\n        .withEmail(\"elonmusk@tesla.com\")\n        .withFirstName(\"Elon\")\n        .withLastName(\"Musk\")\n        .withAttributes(userAttributes)\n        .withRoleAssignments(roleAssignments);\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Permit SDK with EU Region Endpoint in Node.js\nDESCRIPTION: Example showing how to initialize the Permit SDK in Node.js with a region-specific endpoint for the EU region. It configures the SDK with an API key, PDP URL, logging settings, and the EU region API URL.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/api-with-cli.mdx#2025-04-17_snippet_0\n\nLANGUAGE: node\nCODE:\n```\nconst permit = new Permit({\n  // the API key to the Permit environment you wish to connect to\n  token: \"<YOUR_API_KEY>\",\n  // the url in which the SDK can connect to the PDP container\n  pdp: \"http://localhost:7766\",\n  // use this to turn on sdk logs\n  log: {\n    level: \"debug\",\n  },\n  // the region in which the Permit environment is located\n  apiUrl: \"https://api.eu.permit.io\",\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Read Permission for John using cURL\nDESCRIPTION: This cURL request checks if the user 'john@acme.com' has read permission for the '2023_report' file resource. It sends a POST request to the PDP endpoint with user, resource, and action details.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/google-drive.mdx#2025-04-17_snippet_55\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:7766/allowed \\\n  -X POST \\\n  -H \"Authorization: Bearer $permit_sdk_api_key\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"user\": {\n            \"key\": \"john@acme.com\"\n        },\n        \"resource\": {\n            \"tenant\": \"default\",\n            \"type\": \"file\",\n            \"key\": \"2023_report\"\n        },\n        \"action\": \"read\"\n  }'\n```\n\n----------------------------------------\n\nTITLE: Enforcing Permissions with Permit in Protected Routes\nDESCRIPTION: This snippet demonstrates how to enforce permissions using Permit in protected API routes. It checks if the authenticated user has the required permission to perform a specific action on a resource before allowing the operation to proceed.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/authentication/cognito/permit-integration.mdx#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// An example of a protected route\n// app.delete(\"/api/tasks/:id\", async (req, res) => {\n  const permitted = permit.check(\n    cognitoUser.sub, // the user key from the syncUser step\n    'delete', // the action name\n    'task' // the resource name\n  );\n  if (!permitted) {\n    res.status(403).send('Not permitted');\n    return;\n  }\n  // delete the task\n  //...\n});\n```\n\n----------------------------------------\n\nTITLE: Using permit.check() API with cURL\nDESCRIPTION: Demonstrates how to call the permit.check() function directly using the API endpoint /allowed with cURL. This method can be used when not using one of the Permit.io SDKs.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/enforce-permissions/check.mdx#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://<your-permit-pdp-url>/allowed \\\n  -H \"Content-Type: application/json\" \\\n  -d \"Authorization: Bearer <your-permit-api-key>\" \\\n  -d '{\n    \"user\": \"john@doe.me\",\n    \"action\": \"create\",\n    \"resource\": {\n      \"type\": \"document\",\n      \"tenant\": \"companyA\"\n    },\n    \"context\": {}\n  }'\n```\n\n----------------------------------------\n\nTITLE: Enforcing Authorization Policies with Permit.io\nDESCRIPTION: This snippet shows how to implement an authorization function that enforces policy decisions. It uses Permit's check function to determine if a user can perform a specific action on a resource based on configured policies.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/pink-mobile.mdx#2025-04-17_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nexport const authorize = async (user, action, resource) => {\n  return permit.check(user, action, resource);\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Permit Object for Local PDP\nDESCRIPTION: JavaScript code to initialize the Permit object, configuring it to use the locally hosted PDP instead of the cloud service. This is crucial for performing local policy checks.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/overview/perform-a-local-policy-check.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst permit = new Permit({\n  token: \"[YOUR_API_KEY]\",\n  pdp: \"http://localhost:7766\",\n  // other configurations\n});\n```\n\n----------------------------------------\n\nTITLE: Syncing User Data with Permit.io in JavaScript\nDESCRIPTION: Demonstrates how to sync user data including personal information and roles to Permit.io cloud service. The function returns a UserKey type containing the user's customId, email, first name, last name, and attributes. This should only be used for initial user creation, not for role updates.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/reference/SDKs/NodeJS/sync_user.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst userData: IPermitUser = {\n  key: user.id,\n  firstName: user.firstName,\n  lastName: user.lastName,\n  email: user.email,\n  roles: [\n    {\n      role: \"admin\",\n      tenant: board.id,\n    },\n  ],\n};\nawait permit.write(permit.api.syncUser(userData));\n\n// SyncUser returns the synced with UserKey type\n// {\n// \"customId\": string,\n// \"email\": string,\n// \"firstName\": string,\n// \"lastName\": string,\n// \"attributes\": Dictionary<string, string>,\n// }\n```\n\n----------------------------------------\n\nTITLE: Creating File Resource with Roles and Permissions\nDESCRIPTION: This snippet shows how to create a File resource with defined actions (read, comment, update, delete) and roles (editor, commenter, viewer) using the Permit.io API. Each role has specific permissions for interacting with files.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/google-drive.mdx#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://api.permit.io/v2/schema/$permit_project/$permit_env/resources \\\n  -X POST \\\n  -H \"Authorization: Bearer $permit_sdk_api_key\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"key\": \"file\",\n    \"name\": \"File\",\n    \"actions\": {\n        \"read\": {},\n        \"comment\": {},\n        \"update\": {},\n        \"delete\": {}\n    },\n    \"roles\": {\n        \"editor\": {\n            \"name\": \"Editor\",\n            \"permissions\": [\n\t\t\t\t\"read\",\n\t\t\t\t\"comment\",\n\t\t\t\t\"update\",\n\t\t\t\t\"delete\"\n\t\t\t]\n        },\n        \"commenter\": {\n            \"name\": \"Commenter\",\n            \"permissions\": [\n\t\t\t\t\"read\",\n\t\t\t\t\"comment\"\n\t\t\t]\n        },\n        \"viewer\": {\n            \"name\": \"Viewer\",\n            \"permissions\": [\n\t\t\t\t\"read\"\n\t\t\t]\n        }\n    }\n  }'\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom permit import Permit\n\npermit = Permit(token=\"<YOUR_API_KEY>\", ...)\n\nawait permit.api.create_resource(\n    {\n        \"key\": \"file\",\n        \"name\": \"File\",\n        \"actions\": {\n            \"read\": {},\n            \"comment\": {},\n            \"update\": {},\n            \"delete\": {},\n        },\n        \"roles\": {\n            \"editor\": {\n                \"name\": \"Editor\",\n                \"permissions\": [\n                    \"read\",\n                    \"comment\",\n                    \"update\",\n                    \"delete\",\n                ],\n            },\n            \"commenter\": {\n                \"name\": \"Commenter\",\n                \"permissions\": [\n                    \"read\",\n                    \"comment\",\n                ],\n            },\n            \"viewer\": {\n                \"name\": \"Viewer\",\n                \"permissions\": [\n                    \"read\",\n                ],\n            },\n        },\n    }\n)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Permit } = require(\"permitio\");\n\nconst permit = new Permit({token: \"<YOUR_API_KEY>\", ...});\n\nawait permit.api.createResource(\n    {\n        \"key\": \"file\",\n        \"name\": \"File\",\n        \"actions\": {\n            \"read\": {},\n            \"comment\": {},\n            \"update\": {},\n            \"delete\": {},\n        },\n        \"roles\": {\n            \"editor\": {\n                \"name\": \"Editor\",\n                \"permissions\": [\n                    \"read\",\n                    \"comment\",\n                    \"update\",\n                    \"delete\",\n                ],\n            },\n            \"commenter\": {\n                \"name\": \"Commenter\",\n                \"permissions\": [\n                    \"read\",\n                    \"comment\",\n                ],\n            },\n            \"viewer\": {\n                \"name\": \"Viewer\",\n                \"permissions\": [\n                    \"read\",\n                ],\n            },\n        },\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Rendering MDX Components for Python Documentation\nDESCRIPTION: This JSX code renders the imported MDX components in the document. It displays the introduction content followed by Python-specific examples for implementing Permit.io.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/python/quickstart-python.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<IntroContent />\n<PythonExample />\n```\n\n----------------------------------------\n\nTITLE: Relationship-Based Access Control (ReBAC) with permit.check() in JavaScript\nDESCRIPTION: Demonstrates the use of Relationship-Based Access Control (ReBAC) with permit.check(). It checks permissions based on relationships between identities and resources.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/enforce-permissions/check.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nawait permit.check(userId, \"assign\", `member_group:${group}`);\n```\n\n----------------------------------------\n\nTITLE: Configuring Wire Transfer Resource in Terraform for Permit.io\nDESCRIPTION: This snippet defines the Wire Transfer resource with actions like approve, review, deny, operate, and create. It also includes attributes such as ID, description, date, currency, and amount, which can be used for conditional policy rules.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/mesa-verde.mdx#2025-04-17_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"permitio_resource\" \"Wire_Transfer\" {\n  name        = \"Wire\"\n  key         = \"Wire_Transfer\"\n  actions = {\n      \"approve\" = { name = \"Approve\"}\n      \"review\" = { name = \"Review\" }\n      \"deny\" = { name = \"Deny\" }\n      \"operate\" = { name = \"Operate\" }\n      \"create\" = { name = \"Operate\" }\n  }\n  attributes = {\n      \"id\" = {\n      name = \"ID\"\n      type = \"string\"\n      }\n      \"description\" = {\n      name = \"Description\"\n      type = \"string\"\n      }\n      \"date\" = {\n      name = \"Date\"\n      type = \"string\"\n      }\n      \"currency\" = {\n      name = \"Currency\"\n      type = \"string\"\n      }\n      \"amount\" = {\n      name = \"Amount\"\n      type = \"number\"\n      }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tenant-Specific Permission Check\nDESCRIPTION: Example of checking permissions with tenant specification in the resource object.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/getting-started/_quickstart-parts/_quickstart_ruby.mdx#2025-04-17_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nif permit.check(\"user\", \"action\", { \"key\": \"resource\", \"tenant\": \"tenant\" })\n  # Allow to close document\nend\n```\n\n----------------------------------------\n\nTITLE: Bulk Permission Check in JavaScript\nDESCRIPTION: Demonstrates how to use permit.bulkCheck to validate multiple permissions in a single API call. This example shows checking read permissions for multiple blog posts for a user named Alice.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/overview/advanced-authorization-queries.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<CodeBlock folderPath=\"/bulk-check\" />\n```\n\n----------------------------------------\n\nTITLE: Creating User with Permit SDK\nDESCRIPTION: Demonstrates how to create a new user in Permit using the SDK, including optional role assignments and key user attributes.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/overview/sync-your-first-user-with-sdk.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nrole_assignments: [{ role: \"manager\", tenant: \"default\" }]\n```\n\n----------------------------------------\n\nTITLE: Initializing Permit Object with API Key\nDESCRIPTION: JavaScript code to initialize the Permit object using the API key for authentication and interaction with Permit's API.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/overview/use-the-permit-api-and-sdk.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst permit = new Permit({\n  token: \"<YOUR_API_KEY>\",\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Permit.io SDK\nDESCRIPTION: Configuration and initialization of the Permit.io SDK with API key and PDP endpoint settings\nSOURCE: https://github.com/permitio/docs/blob/master/docs/getting-started/_quickstart-parts/_quickstart_nodejs.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst permit = new Permit({\n  // your API Key\n  token: \"[YOUR_API_KEY]\",\n  // in production, you might need to change this url to fit your deployment\n  pdp: \"http://localhost:7766\",\n  // if you want the SDK to emit logs, uncomment this:\n  // log: {\n  //   level: \"debug\",\n  // },\n  // The SDK returns false if you get a timeout / network error\n  // if you want it to throw an error instead, and let you handle this, uncomment this:\n  // throwOnError: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Assigning User Roles in Permit.io Java SDK\nDESCRIPTION: This code demonstrates how to assign a role to a user within a specific tenant using the Permit.io Java SDK. The method requires the user's custom ID, the role key, and the tenant's external ID as parameters. It returns a RoleAssignmentModel object containing details about the assigned role.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/reference/SDKs/Java/assign_role.mdx#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nassignedRole = permit.api.assignRole(user.customId, Role.key, Tenant.externalId);\n\n// returns the assigned role with RoleAssignmentModel type\n// {\n//     id: string,\n//     role: {\n//         id: string,\n//         name: string,\n//         description: string,\n//         tenantId: string,\n//     },\n//     user: string,\n//     scope: string,\n// }\n```\n\n----------------------------------------\n\nTITLE: Creating a Tenant in Permit.io using Python\nDESCRIPTION: This example shows how to create a new tenant in Permit.io, providing a key, name, and description for the tenant.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/python/usage-example.mdx#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom permit import TenantRead\n\ntenant: TenantRead = await permit.api.tenants.create(\n    {\n        \"key\": \"tesla\",\n        \"name\": \"Tesla Inc\",\n        \"description\": \"The car company\",\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Syncing User from Cognito to Permit in Express.js Backend\nDESCRIPTION: Express.js route handler to sync user information from Cognito to Permit.io, including token verification and user creation/update.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/authentication/cognito/cognito-demo-app.mdx#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// /standalone_be/index.mjs\n\n// init Permit\n\nconst permit = new Permit({\n  token: permitToken,\n  pdp: \"https://cloudpdp.api.permit.io\",\n});\n\napp.post(\"/api/sync\", async (req, res) => {\n  try {\n    const payload = await verifier.verify(\n      req.headers.authorization?.split(\" \")[1] // the JWT as string\n    );\n  } catch (error) {\n    res.status(403).send(\"Token not valid!\");\n  }\n  const syncUser = await permit.api.syncUser({\n    first_name: payload.name,\n    key: payload.sub,\n    email: payload.email,\n  });\n  // you can also assign role to a user here if you have mapping between Cognito groups and Permit roles\n  // with the assign role SDK method\n  // await permit.api.assignRole({\n  //     \"key\": cognitoUser.sub,\n  //     \"role\": caseSensitiveRoleKey,\n  //     \"tenant\": caseSensitiveTenantKey, // if you don't use tenants, use 'default'\n  // });\n  res.status(200).send(syncUser);\n});\n```\n\n----------------------------------------\n\nTITLE: Performing Authorization Check with Local PDP\nDESCRIPTION: JavaScript code demonstrating how to perform an authorization check using the local PDP. This example checks if a user has permission to create a document.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/overview/perform-a-local-policy-check.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst permitted = permit.check(\"user|987654321\", \"create\", \"document\");\n```\n\n----------------------------------------\n\nTITLE: Checking Update Permission for John using Node.js\nDESCRIPTION: This Node.js code snippet uses the Permit.io SDK to check if 'john@acme.com' has update permission for the '2023_report' file resource. It uses an asynchronous function call to the permit.check method.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/google-drive.mdx#2025-04-17_snippet_60\n\nLANGUAGE: javascript\nCODE:\n```\nawait permit.check(\n  // user\n  \"john@acme.com\",\n  // action\n  \"update\",\n  // resource\n  {\n    type: \"file\",\n    key: \"2023_report\",\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Syncing User Data with Permit.io using C# SDK\nDESCRIPTION: Demonstrates how to sync user information to Permit.io cloud using the SyncUser method. The function takes a UserKey object containing user details and returns the synced user data. This should only be used for initial user creation, not for updating roles.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/_Dotnet/sync_user.mdx#2025-04-17_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nUserKey userObj = new UserKey(user.id, user.first_name, user.last_name, user.email);\npermit.Api.SyncUser(userObj);\n\n// SyncUser returns the synced with UserKey type\n// {\n// \"customId\": string,\n// \"email\": string,\n// \"firstName\": string,\n// \"lastName\": string,\n// \"attributes\": Dictionary<string, string>,\n// }\n```\n\n----------------------------------------\n\nTITLE: Checking Permissions with Permit SDK in Node.js\nDESCRIPTION: Demonstrates how to use the permit.check() function to verify if a user has permission to perform an action on a resource.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/nodejs/quickstart-nodejs.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst permitted = await permit.check(\"john@permit.io\", \"read\", \"document\");\n\nif (permitted) {\n  console.log(\"John is PERMITTED to read a document\");\n} else {\n  console.log(\"John is NOT PERMITTED to read a document\");\n}\n```\n\n----------------------------------------\n\nTITLE: Complete FastAPI Application Example\nDESCRIPTION: Full example of a FastAPI application implementing Permit.io permission checks\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/tutorials/_quickstart-parts/_quickstart_python.mdx#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom permit import Permit\nfrom fastapi import FastAPI, status, HTTPException\nfrom fastapi.responses import JSONResponse\n\napp = FastAPI()\n\npermit = Permit(\n    pdp=\"http://localhost:7766\",\n    token=\"[YOUR_API_KEY]\",\n)\n\nuser = {\n    \"key\": \"john@smith.com\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Smith\",\n    \"email\": \"john@smith.com\",\n}\n\n@app.on_event('startup')\nasync def sync_objects():\n    await permit.write(\n        permit.api.sync_user(user),\n        permit.api.assign_role(\"john@smith.com\", \"admin\", \"default\")\n    )\n\n@app.get(\"/\")\nasync def check_permissions():\n    permitted = await permit.check(\"john@smith.com\", \"create\", \"document\")\n    if not permitted:\n        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail={\n            \"result\": f\"{user.get('firstName')} {user.get('lastName')} is NOT PERMITTED to create document!\"\n        })\n\n    return JSONResponse(status_code=status.HTTP_200_OK, content={\n        \"result\": f\"{user.get('firstName')} {user.get('lastName')} is PERMITTED to create document!\"\n    })\n```\n\n----------------------------------------\n\nTITLE: Creating a Resource Instance in Permit.io\nDESCRIPTION: POST request to create a 'training_video' resource instance of the 'social_media' resource type in the 'business' tenant. This represents a specific social media asset that will be managed.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/rebac/groups.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.permit.io/v2/schema/{proj_id}/{env_id}/resource_instances' \\\n -H 'authorization: Bearer API_SECRET_KEY' \\\n --data-raw '{\"key\": \"training_video\", \"tenant\": \"business\", \"resource\":\"social_media\"}'\n```\n\n----------------------------------------\n\nTITLE: Creating Resource Instance with Attributes in Permit.io using JavaScript SDK\nDESCRIPTION: This code shows how to create a new resource instance with custom attributes using the Permit.io SDK. It creates a 'Course' instance with attributes like difficulty level, category, and instructor.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/overview/sync-applications-data.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nawait permit.api.resourceInstances.create({\n    tenant: \"default\",\n    resource: \"Course\",\n    instance: \"course-123\",\n    attributes: {\n        \"difficultyLevel\": \"Advanced\",\n        \"category\": \"Math\",\n        \"instructor\": \"prof.smith@example.com\"\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Permit SDK Instance in Node.js\nDESCRIPTION: Creates a new instance of the Permit SDK with configuration options including API key and PDP URL.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/nodejs/quickstart-nodejs.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst permit = new Permit({\n  token: \"[YOUR_API_KEY]\",\n  pdp: \"http://localhost:7766\",\n  // log: {\n  //   level: \"debug\",\n  // },\n  // throwOnError: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Assigning Roles and Listing Assignments in Permit.io using Python\nDESCRIPTION: These snippets show how to assign a role to a user in a specific tenant and how to list role assignments, including filtering for multiple roles.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/python/usage-example.mdx#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nra = await permit.api.users.assign_role(\n    {\n        # the user key\n        \"user\": \"auth0|elon\",\n        # the role key\n        \"role\": \"viewer\",\n        # the tenant key\n        \"tenant\": \"tesla\",\n    }\n)\n\nassignments = await permit.api.role_assignments.list(\n    tenant=\"tesla\",\n    role=\"viewer\",\n)\n\nassignments = await permit.api.role_assignments.list(\n    tenant=\"tesla\",\n    role=[\"viewer\", \"editor\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Policies with Permit.io SDK in Python\nDESCRIPTION: Code that iterates through defined resources and roles to create them using the Permit.io SDK. It processes role permissions and formats them as required by the API.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/python/sync-policy-script/sync-policy.mdx#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == \"__main__\":\n    for resource in resources:\n        # Creating each resource\n        asyncio.run(permit.api.resources.create(resource))\n\n    for role in roles:\n        # Processing role permissions and creating each role\n        role_permissions = [f\"{permission['resource']}:{action}\" for permission in role['permissions'] for action in permission['actions']]\n        role_obj = {\n            \"name\": role['name'],\n            \"key\": role['name'],\n            \"permissions\": role_permissions,\n        }\n        asyncio.run(permit.api.roles.create(role_obj))\n```\n\n----------------------------------------\n\nTITLE: Syncing Auth0 User Data with Permit.io\nDESCRIPTION: Implementation of server-side functionality that synchronizes Auth0 user information with Permit.io during the post-login process.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/authentication/auth0/auth0-demo-app.mdx#2025-04-17_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n// pages/postLogin/index.tsx\nexport async function getServerSideProps({ req, res }: any) {\n  const session = await getSession(req, res);\n  const permitUserObj = {\n    email: session?.user?.email,\n    key: session?.user?.sub,\n    first_name: session?.user?.name,\n  };\n  const permitUser = await permit.api.syncUser(permitUserObj);\n  //... the sync role logic\n}\n```\n\n----------------------------------------\n\nTITLE: ReBAC Policy Check with Additional Data Object\nDESCRIPTION: This example demonstrates how to use the permit.check() function with an object containing additional data such as the tenant, similar to RBAC implementations.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/build-policies/rebac/building-rebac-policies.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nawait permit.check(userId, \"assign\", {type:\"member_group\", key:\"group3\", tenant:\"Tenant1\"} );\n```\n\n----------------------------------------\n\nTITLE: Complete .NET Application with Permit.io Integration\nDESCRIPTION: A full example of a simple HTTP server in .NET that uses the Permit.io SDK to check permissions before serving requests. Demonstrates initialization, checking permissions, and returning appropriate responses based on permission results.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/tutorials/_quickstart-parts/_quickstart_dotnet.mdx#2025-04-17_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.Text;\nusing System.Net;\nusing System.Threading.Tasks;\nusing PermitSDK;\nusing PermitSDK.Models;\n\nnamespace PermitOnboardingApp\n{\n    class HttpServer\n    {\n        public static HttpListener listener;\n        public static string url = \"http://localhost:4000/\";\n        public static string pageData =\"<p>User {0} is {1} to {2} {3}</p>\";\n        public static async Task HandleIncomingConnections()\n        {\n            bool runServer = true;\n            while (runServer)\n            {\n                HttpListenerContext ctx = await listener.GetContextAsync();\n                HttpListenerResponse resp = ctx.Response;\n\n                // in a real app, you would typically decode the user id from a JWT token\n                UserKey user = new UserKey(\"[user-id]\", \"John\", \"Smith\", \"john@smith.com\");\n                // init Permit SDK\n                string clientToken = \"[YOUR_API_KEY]\";\n                Permit permit = new Permit(\n                    clientToken,\n                    \"http://localhost:7766\",\n                    \"default\",\n                    true\n                );\n                bool permitted = await permit.Check(user.key, \"create\", \"document\");\n                if (permitted)\n                {\n                    await SendResponseAsync(resp, 200, String.Format(pageData, user.firstName + user.lastName, \"Permitted\", \"create\", \"document\"));\n                }\n                else\n                {\n                    await SendResponseAsync(resp, 403, String.Format(pageData, user.firstName + user.lastName, \"NOT Permitted\", \"create\", \"document\"));\n                }\n\n            }\n        }\n        public static async Task SendResponseAsync(HttpListenerResponse resp, int returnCode, string responseContent)\n        {\n            byte[] data = Encoding.UTF8.GetBytes(responseContent);\n            resp.StatusCode = returnCode;\n            await resp.OutputStream.WriteAsync(data, 0, data.Length);\n            resp.Close();\n        }\n\n        public static void Main(string[] args)\n        {\n            // Create a Http server and start listening for incoming connections\n            listener = new HttpListener();\n            listener.Prefixes.Add(url);\n            listener.Start();\n            Console.WriteLine(\"Listening for connections on {0}\", url);\n            Task listenTask = HandleIncomingConnections();\n            listenTask.GetAwaiter().GetResult();\n            listener.Close();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Spring Boot Application with Permit.io Integration\nDESCRIPTION: A full example of a Spring Boot application that initializes the Permit.io SDK, syncs a user, and performs a permission check within an HTTP endpoint. Demonstrates the complete integration flow in a web application context.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/tutorials/_quickstart-parts/_quickstart_java.mdx#2025-04-17_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.myproject;\n\nimport io.permit.sdk.Permit;\nimport io.permit.sdk.PermitConfig;\nimport io.permit.sdk.api.PermitApiException;\nimport io.permit.sdk.enforcement.Resource;\nimport io.permit.sdk.enforcement.User;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.io.IOException;\n\n@RestController\n@SpringBootApplication\npublic class DemoApplication {\n  // You can open http://localhost:4000 to invoke this http\n  // endpoint, and see the outcome of the permission check.\n  @GetMapping(\"/\")\n  ResponseEntity<String> home() throws IOException, PermitApiException {\n    // init the permit SDK\n    Permit permit = new Permit(\n    new PermitConfig.Builder(\"[YOUR_API_KEY]\")\n      // in production, you might need to change this url to fit your deployment\n      .withPdpAddress(\"http://localhost:7766\")\n      .build()\n    );\n\n    // init your user (only needed ONCE, after the user first logins successfully)\n    User user = new User.Builder(\"[A_USER_ID]\")\n      .withEmail(\"john@smith.com\")\n      .withFirstName(\"John\")\n      .withLastName(\"Smith\")\n      .withRoles(new ArrayList<>(List.of(new AssignedRole[]{\n          new AssignedRole(\"roleId\", \"tenantId\"),\n          // assign the user the admin role inside the default tenant\n          new AssignedRole(\"admin\", \"default\"),\n      })))\n      .build();\n\n    // You need to call sync user in order to create the user in the\n    // permission system and be able to ask permit.check() on that user\n    permit.api.syncUser(user);\n\n    boolean permitted = permit.check(\n      user, // you may also call User.fromString(\"[A_USER_ID]\"),\n      \"create\",\n      Resource.fromString(\"document\")\n    );\n\n    if (permitted) {\n      return ResponseEntity.status(HttpStatus.OK).body(\n        \"User is PERMITTED to create a document\"\n      );\n    } else {\n      return ResponseEntity.status(HttpStatus.FORBIDDEN).body(\n        \"User is NOT PERMITTED to create a document\"\n      );\n    }\n  }\n\n  public static void main(String[] args) {\n    SpringApplication.run(DemoApplication.class, args);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Permit Client with Cloud PDP in Node.js\nDESCRIPTION: Creates a Permit client instance in Node.js connected to the managed Cloud PDP. The client requires an API key and the Cloud PDP URL.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/concepts/pdp/overview.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Permit } from \"permit\";\n\nconst permit = new Permit({\n  token: \"[your-api-key]\",\n  pdp: \"https://cloudpdp.api.permit.io\",\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Permit SDK in Python\nDESCRIPTION: Code to create a new instance of the Permit SDK, configuring the API key, PDP URL, and optional timeouts.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/getting-started/_quickstart-parts/_quickstart_python.mdx#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npermit = Permit(\n    token=\"<your-api-key>\",\n    pdp=\"http://localhost:7766\",\n    pdp_timeout=5,\n    api_timeout=5\n)\n```\n\n----------------------------------------\n\nTITLE: Syncing Users and Tenants with Permit.io in Python\nDESCRIPTION: This function demonstrates how to sync a user and create a new tenant using the Permit.io API. It creates a user with roles and a new tenant, then assigns a role to the user for the new tenant.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/getting-started/_quickstart-parts/_quickstart_python_sync.mdx#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef sync_objects():\n    # first let's create a user:\n    user = {\n        \"key\": \"john@smith.com\",\n        \"firstName\": \"John\",\n        \"lastName\": \"Smith\",\n        \"email\": \"john@smith.com\",\n        \"roles\": [{\"role\":\"admin\", \"tenant\": \"default\"}]\n    }\n    permit.write(permit.api.sync_user(user))\n\n    tenant2 = {\n        \"key\": \"tenant2\",\n        \"name\": \"Second Tenant\"\n    }\n\n    # create tenant 2 and assign role viewer to user john\n    permit.write(\n        permit.api.create_tenant(tenant2),\n        permit.api.assign_role(\"john@smith.com\", \"viewer\", \"tenant2\")\n    )\n\nsync_objects()\n```\n\n----------------------------------------\n\nTITLE: Creating Bulk Roles via Permit.io API (Bash)\nDESCRIPTION: This snippet illustrates how to create multiple roles, including both regular and resource-specific roles, in a single API call using cURL. It sends a PUT request to the Permit.io API with a JSON payload containing an array of role definitions, including permissions and optional resource specifications.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/bulk-operations.mdx#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT https://api.permit.io/v2/schema/{proj_id}/{env_id}/bulk/roles \\\n    -H \"Authorization: Bearer {your_permit_token}\" \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\n            \"operations\": [\n                {\n                    \"key\": \"admin\",\n                    \"name\": \"Administrator\",\n                    \"permissions\": [\"document:create\", \"document:delete\"],\n                },\n                {\n                    \"key\": \"editor\",\n                    \"name\": \"Editor\",\n                    \"resource\": \"document\"\n                    \"permissions\": [\"read\", \"write\"],\n                }]\n        }'\n```\n\n----------------------------------------\n\nTITLE: Setting up Project Environment\nDESCRIPTION: Commands for creating project directory and setting up virtual environment\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/tutorials/_quickstart-parts/_quickstart_python.mdx#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nmkdir hello-permissions && cd hello-permissions\n```\n\nLANGUAGE: bash\nCODE:\n```\npyenv virtualenv permissions && pyenv activate permissions\n```\n\nLANGUAGE: bash\nCODE:\n```\npip install permit fastapi \"uvicorn[standard]\"\n```\n\nLANGUAGE: bash\nCODE:\n```\ntouch test.py\n```\n\n----------------------------------------\n\nTITLE: Retrieving Role Information using Permit API in Java\nDESCRIPTION: This snippet demonstrates three different ways to fetch role information using the Permit SDK in Java. It shows how to retrieve a role using the general get() method that accepts both role ID and key, the explicit getByKey() method for key-based lookups, and the getById() method for UUID-based lookups.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/java/role/get.mdx#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.permit.sdk.openapi.models.RoleRead;\n\n// accepts both the role id and the role key\nRoleRead role = permit.api.roles.get(\"[ROLE ID OR KEY]\");\n\n// if you want to be explicit, you can use getByKey\nRoleRead role2 = permit.api.roles.getByKey(\"[ROLE KEY]\");\n\n// or getById\nRoleRead role3 = permit.api.roles.getById(new UUID(\"[ROLE ID]\"));\n```\n\n----------------------------------------\n\nTITLE: Assigning Resource Roles to Users in Permit.io\nDESCRIPTION: This snippet demonstrates how to assign a resource-specific role to a user. It assigns the 'Owner' role for a specific account instance to a user within the 'default' tenant.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/pink-mobile.mdx#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nawait permit.api.roleAssignments.assign({\n    role: \"owner\",\n    resource_instance: `account:harry`,\n    user: \"harry@potter.io\",\n    tenant: \"default\",\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting a Role using Permit.io API in JavaScript\nDESCRIPTION: This code snippet demonstrates how to delete an existing role using the Permit.io API. It requires the roleId parameter which can be either the role's unique identifier or its key. The function returns a response object after the deletion operation is completed.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/nodejs/role/delete-role.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await permit.api.deleteRole(roleId);\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Operation-Level Permission Checks\nDESCRIPTION: This JavaScript function demonstrates how to implement permission checks at the GraphQL operation level. It detects the operation type and name, then performs a Permit.io check before allowing the operation to proceed.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/integrations/GraphQL/overview.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nasync didResolveOperation (context) {\n  const op = context.operationName\n  var user = await getUserFromJWT(\"\");\n  isMutation = context.operation.operation === 'mutation'\n  const allowed = await permit.check(user, isMutation? \"write\": \"read\", op.toLowerCase()) // this will look like \"user:write:launches\" or \"user:read:launches\"\n  if (!allowed) {\n    throw new Error(\"Not allowed\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Ownership Permissions in JavaScript\nDESCRIPTION: This snippet demonstrates how to perform a permission check for resource ownership using Permit.io's JavaScript SDK. It checks if a user has read access to a file based on a list of owner IDs.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/build-policies/abac/patterns.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst permitted = await permit.check(userKey, \"read\", {\n  type: \"file\", // The resource name\n  attributes: {\n    owners: [\n      \"d08c85a349994aeb89a3f02c08bdb340\", // user-1\n      \"48fb889360604253a5189580b48694cf\", // user-2\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Permission for Tenant-Specific Resource in NodeJS\nDESCRIPTION: This snippet demonstrates how to use the Permit.io SDK to check permissions for a resource that belongs to a specific tenant. It shows how to include the tenant key when calling the permit.check() function.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/concepts/multi-tenant-authorization.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst permitted = await permit.check(userKey, \"create\", {\n  type: \"document\", // The resource name\n  tenant: tenantKey, // The tenant key\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Permit SDK with Cloud PDP\nDESCRIPTION: Code snippet showing how to initialize the Permit SDK and connect to the cloud-based Policy Decision Point. Requires an API key from the Permit dashboard.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/getting-started/_quickstart-parts/_quickstart_intro.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst permit = new Permit({\n  pdp: \"https://cloudpdp.api.permit.io\",\n  // your API Key\n  token: \"[YOUR_API_KEY]\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Account-File Relationship with Python\nDESCRIPTION: Creates an 'account' relationship between the 'acme' account and the '2023_report' file using the Python SDK. This links the file to its parent account for permission management.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/google-drive.mdx#2025-04-17_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nawait permit.api.relationship_tuples.create(\n    {\n        \"subject\": \"account:acme\",\n        \"relation\": \"account\",\n        \"object\": \"file:2023_report\",\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Checking Read Permission for John using Node.js\nDESCRIPTION: This Node.js code snippet uses the Permit.io SDK to check if 'john@acme.com' has read permission for the '2023_report' file resource. It uses an asynchronous function call to the permit.check method.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/google-drive.mdx#2025-04-17_snippet_57\n\nLANGUAGE: javascript\nCODE:\n```\nawait permit.check(\n  // user\n  \"john@acme.com\",\n  // action\n  \"read\",\n  // resource\n  {\n    type: \"file\",\n    key: \"2023_report\",\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing ResourceCreate Object in Go for Permit.io API\nDESCRIPTION: This snippet demonstrates how to create a new ResourceCreate object with a key, name, and an action block. It sets up a resource named 'document' with an 'edit' action.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/golang/resource/Create.mdx#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\naction := models.NewActionBlockEditable()\naction.SetName(\"edit\")\nresourceCreate := models.NewResourceCreate(\"resource-key\", \"resource-name\", map[string]models.ActionBlockEditable{\"edit\": *action})\nresourceCreate.SetName(\"document\")\n```\n\n----------------------------------------\n\nTITLE: Basic Permission Check\nDESCRIPTION: Example of checking if a user has permission to perform an action on a resource\nSOURCE: https://github.com/permitio/docs/blob/master/docs/getting-started/_quickstart-parts/_quickstart_python_sync.mdx#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npermitted = await permit.check(\"john@smith.com\", \"create\", \"document\")\n\nif permitted:\n    print(\"John is permitted to create a document\")\nelse:\n    print(\"John is NOT PERMITTED to create document!\")\n```\n\n----------------------------------------\n\nTITLE: Flexible User Path Matching Regex Pattern\nDESCRIPTION: This JSON escaped regex pattern matches any URL containing a user ID, regardless of the exact path structure. It works with various path depths and trailing segments, offering extreme flexibility for complex API structures.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/foaz/regex-url-mapping-check.mdx#2025-04-17_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n//JSON Escaped Regex URL\n\"url\": \"^https?:\\\\/\\\\/[^\\\\/]+(?:.*?\\\\/users(?:\\\\/(?P<user_id>[^\\\\/]+))?(?:\\\\/.*)?)?$\"\n```\n\n----------------------------------------\n\nTITLE: Implementing PDP-Level Filtering with Permit.io SDK in Go\nDESCRIPTION: This Go code snippet demonstrates how to use the Permit.io SDK to perform PDP-Level Filtering. It creates a Permit client, defines a user and resources, and uses the filterObjects function to determine which resources the user has permission to access.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/enforce-permissions/data-filtering.mdx#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n)\nimport p \"github.com/permitio/permit-golang/pkg/permit\"\nimport \"github.com/permitio/permit-golang/pkg/config\"\nimport \"github.com/permitio/permit-golang/pkg/enforcement\"\n\nfunc main() {\n\t// Create permit client\n\tpermitConfig := config.NewConfigBuilder(\"\").Build()\n\tpermit := p.New(permitConfig)\n\n\trequestContext := map[string]string{\n\t\t\"source\": \"docs\",\n\t}\n\tuser := enforcement.UserBuilder(\"john@doe.com\").Build()\n\tvar action enforcement.Action = \"read\"\n\tresourcesToCheck := []enforcement.ResourceI{\n\t\tenforcement.ResourceBuilder(\"document\").WithID(\"document-1\").WithTenant(enforcement.DefaultTenant),\n\t\tenforcement.ResourceBuilder(\"folder\").WithID(\"folder-1\").WithTenant(enforcement.DefaultTenant),\n\t\tenforcement.ResourceBuilder(\"document\").WithID(\"document-2\").WithTenant(enforcement.DefaultTenant),\n\t\tenforcement.ResourceBuilder(\"document\").WithID(\"document-3\").WithTenant(enforcement.DefaultTenant),\n\t}\n\tvar allowedResources []enforcement.ResourceI\n\tvar err error\n\t// Filter the objects\n\tallowedResources, err = permit.FilterObjects(user, action, requestContext, resourcesToCheck...)\n\tif err != nil {\n\t\tfmt.Printf(\"Error enforcing permissions: %s\", err)\n\t} else {\n\t\t// The response indexes correspond to the request indexes\n\t\tfor i, resource := range allowedResources {\n\t\t\tfmt.Printf(\"%d. User '%s' is PERMITTED to '%s' a '%s' with id '%s'\\n\",\n\t\t\t\ti, user.Key, action, resource.GetType(), resource.GetID(),\n\t\t\t)\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Viewer Role Derivation with Node.js\nDESCRIPTION: Updates the 'viewer' role for files to be automatically granted to users who have the 'viewer' role on parent folders using the Node.js SDK. This establishes viewing permission propagation.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/google-drive.mdx#2025-04-17_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nawait permit.api.resourceRoles.update(\"file\", \"viewer\", {\n  granted_to: {\n    users_with_role: [\n      {\n        linked_by_relation: \"parent\",\n        on_resource: \"folder\",\n        role: \"viewer\",\n      },\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Filter Objects Using PDP-level Filtering\nDESCRIPTION: Shows how to use permit.filterObjects to filter blog posts based on user permissions. The example demonstrates filtering posts that Alice has edit permissions for.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/overview/advanced-authorization-queries.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<CodeBlock folderPath=\"/walkthroughs/authz-queries/filter\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Resources and Roles Schema\nDESCRIPTION: Creates arrays to define the resources and roles in your application. This structure will be used to create or update the policy configuration in Permit.io.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/nodejs/sync-policy-script/sync-policy.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst resources = [\n    // Define resources here\n];\n\nconst roles = [\n    // Define roles here\n];\n```\n\n----------------------------------------\n\nTITLE: Flask Application Setup with Permit.io\nDESCRIPTION: Initial setup for a Flask application with Permit.io integration\nSOURCE: https://github.com/permitio/docs/blob/master/docs/getting-started/_quickstart-parts/_quickstart_python_sync.mdx#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport json\n\nfrom permit.sync import Permit\n\nfrom flask import Flask, Response\n\napp = Flask(__name__)\n```\n\n----------------------------------------\n\nTITLE: Creating Auth0 API Route Handler in Next.js\nDESCRIPTION: Implementation of the Auth0 API route handler to manage authentication endpoints in Next.js.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/authentication/auth0/auth0-demo-app.mdx#2025-04-17_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\n// pages/api/auth/[...auth0].ts\nimport { handleAuth } from \"@auth0/nextjs-auth0\";\n\nexport default handleAuth();\n```\n\n----------------------------------------\n\nTITLE: Creating Relationship Tuples with Node.js\nDESCRIPTION: Example of how to create a relationship tuple using the Node.js SDK. This establishes a 'parent' relation between 'folder:finance' and 'file:2023_report'.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/rebac/rebac-api-calls.mdx#2025-04-17_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nawait permit.api.relationshipTuples.create({\n\tsubject: \"folder:finance\",\n\trelation: \"parent\",\n\tobject: \"file:2023_report\",\n});\n```\n\n----------------------------------------\n\nTITLE: User Payload Structure for Permit API\nDESCRIPTION: JSON structure for the user object passed to createUser. Contains the required unique key identifier and optional fields for email, names, and custom attributes.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/nodejs/user/create-user.mdx#2025-04-17_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n{\n\tkey: \"key\",\n\temail: \"email@example.com\",\n\tfirst_name: \"John\",\n\tlast_name: \"Smith\",\n\tattributes: {}\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Tenants with Permit.io API\nDESCRIPTION: HTTP request to retrieve all tenants with pagination and search support. Includes query parameters for search term, page number, and results per page.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/examples/create-tenant.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.permit.io/v2/facts/{project_id}/{env_id}/tenants?search=default&include_total_count=true&page=1&per_page=100' \\\n  -H 'authorization: Bearer API_SECRET_KEY'\n```\n\n----------------------------------------\n\nTITLE: Syncing User Data with Permit.io in TypeScript\nDESCRIPTION: Examples of syncing user data with Permit.io including creating, updating and deleting users with their attributes.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/food-delivery-system-example-using-nuxt.mdx#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// For creating/updating user\npermit.api.users.sync({\n  key: userId,\n  attributes: { number_of_rides: noOfRides },\n});\n\n// For deleting a user\npermit.api.users.delete(userId);\n```\n\n----------------------------------------\n\nTITLE: Creating a New Tenant in Permit.io with JavaScript\nDESCRIPTION: This JavaScript snippet creates a new tenant in Permit.io for each new user, using the user's email as both the tenant key and name for role management purposes.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/mesa-verde.mdx#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nawait permit.api.tenants.create({\n  key: cleanedEmail,\n  name: email,\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Permissions with Permit.io in Java\nDESCRIPTION: Uses the Permit.io SDK to check if a user has permission to perform an action on a resource. Returns a boolean indicating whether the permission is granted.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/tutorials/_quickstart-parts/_quickstart_java.mdx#2025-04-17_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nimport io.permit.sdk.enforcement.Resource;\nimport io.permit.sdk.enforcement.User;\n\nboolean permitted = permit.check(\n  user,\n  \"create\",\n  Resource.fromString(\"document\")\n);\n\nif (permitted) {\n  System.out.println(\"User is PERMITTED to create a document\");\n} else {\n  System.out.println(\"User is NOT PERMITTED to create a document\");\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Usage of AllTenantsCheck in GoLang\nDESCRIPTION: This snippet shows how to use the permit.AllTenantsCheck function in GoLang. It sets up the Permit client, defines user and resource variables, and checks permissions across all tenants. The result is then processed to display allowed tenants and their attributes.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/enforce-permissions/all-tenants-check.mdx#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n)\nimport p \"github.com/permitio/permit-golang/pkg/permit\"\nimport \"github.com/permitio/permit-golang/pkg/config\"\nimport \"github.com/permitio/permit-golang/pkg/enforcement\"\n\nfunc main() {\n\t// Create permit client\n\tpermitConfig := config.NewConfigBuilder(\"<YOUR_API_TOKEN>\").Build()\n\tpermit := p.New(permitConfig)\n\n\t// Create user and resource variables\n\tuser := enforcement.UserBuilder(\"john@doe.com\").Build()\n\tresource := enforcement.ResourceBuilder(\"document\").Build()\n\n\tvar allowedTenants []enforcement.TenantDetails\n\t// Check a user's permissions for a specified action on a resource across all tenants\n\tallowedTenants, err := permit.AllTenantsCheck(user, \"read\", resource)\n\tif err != nil {\n\t\tfmt.Printf(\"Error enforcing permissions: %s\", err)\n\t} else if len(allowedTenants) > 0 {\n\t\tfmt.Println(\"John is PERMITTED to create a document in some tenant in the environment\")\n\t\tfor i, tenant := range allowedTenants {\n\t\t\tattributes, _ := json.MarshalIndent(tenant.Attributes, \"\", \"\\t\")\n\t\t\tfmt.Printf(\"%d. Allowed Tenant is '%s', attributes are:\\n%s\",\n\t\t\t\ti, tenant.Key, attributes,\n\t\t\t)\n\t\t}\n\t} else {\n\t\tfmt.Println(\"John is NOT PERMITTED to create a document in any tenant in the environment\")\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Role Unassignment with Permit.io API in JavaScript\nDESCRIPTION: Example showing how to call the unassignRole API method. The method takes a stringified JSON object containing the role, tenant, and user identifiers.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/nodejs/role/unassign-role.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await permit.api.unassignRole(JSON.stringify(unassignedRole));\n```\n\n----------------------------------------\n\nTITLE: Initializing Permit Client with Local PDP in Node.js\nDESCRIPTION: Creates a Permit client instance in Node.js connected to a locally running PDP. The client requires an API key and the local PDP URL.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/concepts/pdp/overview.mdx#2025-04-17_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Permit } from \"permit\";\n\nconst permit = new Permit({\n  token: \"[your-api-key]\",\n  pdp: \"http://localhost:7766\",\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing FoAz API Request in JavaScript\nDESCRIPTION: Complete JavaScript function for sending an authorized API request through the Permit.io FoAz proxy. Includes JWT authentication, proper headers, and error handling.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/foaz/visual-guide.mdx#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst sendFoazRequest = async (req, res) => {\n\t// This should be the JWT fetched from your current session, depending on the AuthN provider you are using.\n\tconst token = await getJWT();\n\n\t// This is the call to the desired API endpoint via the Permit authorization proxy.\n\tawait fetch(\n\t\t\"https://proxy.api.permit.io/proxy/1fc72853b4de83hdisisj3439fjkefm?url=https://some-rest-api.vercel.app/api/something\",\n\t\t{\n\t\t\tmethod: \"POST\",\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t// Passing in the current logged in user JWT as part of the Authorization header.\n\t\t\t\tAuthorization: `Bearer ${token}`,\n\t\t\t},\n\t\t\tbody: JSON.stringify({ secretCode: 123456 }),\n\t\t}\n\t)\n\t\t.then((response) => response.json())\n\t\t.then((data) => console.log(data))\n\t\t.catch((error) => console.error(\"Error:\", error));\n};\n```\n\n----------------------------------------\n\nTITLE: Syncing User with NodeJS SDK in Permit.io\nDESCRIPTION: Example of using the syncUser function in the NodeJS SDK to create or update a user in Permit.io. This function takes an object with user information including a unique key, email, name, and optional attributes.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/sync-users.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    key: \"key\",\n\n    email: \"email@example.com\",\n\n    first_name: \"John\",\n\n    last_name: \"Smith\",\n\n    attributes: {}\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Permissions with Permit.io SDK\nDESCRIPTION: C# code demonstrating how to check permissions using the Permit.io SDK for RBAC policies.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/getting-started/_quickstart-parts/_quickstart_dotnet.mdx#2025-04-17_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nbool permitted = await permit.Check(user.key, \"create\", \"document\");\nif (permitted)\n{\n  Console.Write(\"User is PERMITTED to create a document\");\n}\nelse\n{\n  Console.Write(\"User is NOT PERMITTED to create a document\");\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Permission Checks in Apollo DataSource\nDESCRIPTION: This JavaScript code shows how to add permission checks to a DataSource in Apollo Server. It demonstrates integrating Permit.io checks before fetching data from the database, providing an example of function-level permission checks.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/integrations/GraphQL/overview.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport DataLoader from 'dataloader';\n\nclass ProductsDataSource {\n  private dbConnection;\n\n  constructor(dbConnection) {\n    this.dbConnection = dbConnection;\n  }\n\n  private batchProducts = new DataLoader(async (ids) => {\n    const productList = await this.dbConnection.fetchAllKeys(ids);\n    return ids.map((id) => productList.find((product) => product.id === id));\n  });\n\n  async getProductFor(id) {\n    // permission check - id, action, resource\n     if (permit.check( JWT.id, \"get\", {type:\"product\", attributes: {id: id} }){\n       return this.batchProducts.load(id);\n     }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Role in Node.js\nDESCRIPTION: Node.js code for assigning a role to a user. Uses the assignRole API method with user ID, role key, and tenant key as parameters.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/tutorials/Onboarding/connect-your-app.mdx#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nassignedRole = permit.api.assignRole(user.customId, Role.key, Tenant.key);\n```\n\n----------------------------------------\n\nTITLE: Creating Editor Role Derivation with cURL\nDESCRIPTION: Updates the 'editor' role for files to be automatically granted to users who have the 'editor' role on parent folders. This implements role inheritance via the 'parent' relationship.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/google-drive.mdx#2025-04-17_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://api.permit.io/v2/schema/$permit_project/$permit_env/resources/file/roles/editor \\\n  -X PATCH \\\n  -H \"Authorization: Bearer $permit_sdk_api_key\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"granted_to\": {\n        \"users_with_role\": [\n            {\n                \"linked_by_relation\": \"parent\",\n                \"on_resource\": \"folder\",\n                \"role\": \"editor\"\n            }\n        ]\n\t}\n  }'\n```\n\n----------------------------------------\n\nTITLE: Comprehensive User Permissions Check in GoLang\nDESCRIPTION: Complete GoLang implementation showing how to check user permissions with Permit.io, including error handling and permission result processing.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/enforce-permissions/user-permissions.mdx#2025-04-17_snippet_2\n\nLANGUAGE: golang\nCODE:\n```\npackage main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n)\nimport p \"github.com/permitio/permit-golang/pkg/permit\"\nimport \"github.com/permitio/permit-golang/pkg/config\"\nimport \"github.com/permitio/permit-golang/pkg/enforcement\"\n\nfunc main() {\n\t// Create permit client\n\tpermitConfig := config.NewConfigBuilder(\"<YOUR_API_TOKEN>\").Build()\n\tpermit := p.New(permitConfig)\n\n\t// Create user and resource variables\n\tuser := enforcement.UserBuilder(\"john@doe.com\").Build()\n\n\tvar userPermissions enforcement.UserPermissions\n\t// List user permissions\n\tuserPermissions, err := permit.GetUserPermissions(\n\t\tuser,\n\t\t// Optionally, you can specify a list of tenants to filter\n\t\t\"tenant-1\",\n\t\t\"tenant-2\",\n    )\n\tif err != nil {\n\t\tfmt.Printf(\"Error getting user permissions: %s\", err)\n\t} else if len(userPermissions) > 0 {\n\t\tfmt.Println(\"John has a role assigned to some tenant in the environment\")\n\t\tfor tenant, permissionsInTenant := range userPermissions {\n\t\t\tattributes, _ := json.MarshalIndent(permissionsInTenant.Tenant.Attributes, \"\", \"\\t\")\n\t\t\tfmt.Printf(\"Allowed Tenant is '%s', attributes are:\\n%s\\nAllowed permissions are:\\n%+q\",\n\t\t\t\ttenant, attributes, permissionsInTenant.Permissions,\n\t\t\t)\n\t\t}\n\t} else {\n\t\tfmt.Println(\"John is NOT PERMITTED to perform any action in any tenant in the environment\")\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Resource Role to User in Go\nDESCRIPTION: This code snippet demonstrates how to use the AssignResourceRole function from the Permit API to assign a resource role to a specific user. It takes context, user key, role key, tenant key, and resource instance as parameters.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/golang/user/AssignResourceRole.mdx#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nresourceRoleAssignment, err := Permit.Api.Users.AssignResourceRole(ctx, \"user-key\", \"role-key\", \"tenant-key\", \"document:doc1\")\n```\n\n----------------------------------------\n\nTITLE: Syncing User Information with Permit.io SDK in Python\nDESCRIPTION: This code demonstrates how to sync a user's information to the Permit.io cloud upon user creation. The function takes user identification details (ID, first name, last name, email) and returns a UserKey object containing the synced user information.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/reference/SDKs/Python/sync_user.mdx#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nuser = UserInput(user.id, user.first_name, user.last_name, user.email)\npermit.write(permit.api.sync_user(user.customId, user.first_name, user.last_name, user.email))\n\n# SyncUser returns the synced with UserKey type\n# {\n# \"customId\": string,\n# \"email\": string,\n# \"firstName\": string,\n# \"lastName\": string,\n# \"attributes\": Dictionary<string, string>,\n# }\n\n```\n\n----------------------------------------\n\nTITLE: Installing Permit PDP Docker Container\nDESCRIPTION: Commands to pull and run the Permit PDP Docker container with basic configuration using environment API key.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/deploy/deploy-to-production.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndocker pull permitio/pdp-v2:latest\n```\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -it \\\n  -p 7766:7000 \\\n  --env PDP_API_KEY=<YOUR_API_KEY> \\\n  --env PDP_DEBUG=True \\\n  permitio/pdp-v2:latest\n```\n\n----------------------------------------\n\nTITLE: Initializing Permit SDK\nDESCRIPTION: Creates a new instance of the Permit SDK with PDP configuration and API key\nSOURCE: https://github.com/permitio/docs/blob/master/docs/getting-started/_quickstart-parts/_quickstart_python_sync.mdx#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npermit = Permit(\n    # in production, you might need to change this url to fit your deployment\n    pdp=\"http://localhost:7766\",\n    # your secret API KEY\n    token=\"<your-api-key>\",\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing API Endpoint for Permission Checks with Permit\nDESCRIPTION: This code snippet creates an API endpoint that handles permission checks using the Permit SDK. It performs bulk permit.check() operations for given resources and actions, considering user attributes and resource attributes.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/feature-flagging.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Permit } from \"permitio\";\n\nconst permit = new Permit({\n  token: \"YOUR_PERMIT_API_KEY\",\n  pdp: \"http://localhost:7766\",\n});\n\nexport default async function handler(req, res) {\n  try {\n    const { resourcesAndActions } = req.body;\n    const { user: userId } = req.query;\n\n    if (!userId) {\n      return res.status(400).json({ error: \"No userId provided.\" });\n    }\n\n    const checkPermissions = async (resourceAndAction) => {\n      const { resource, action, userAttributes, resourceAttributes } = resourceAndAction;\n\n      const allowed = permit.check(\n        {\n          key: userId,\n          attributes: userAttributes,\n        },\n        action,\n        {\n          type: resource,\n          attributes: resourceAttributes,\n          tenant: \"default\",\n        }\n      );\n\n      return allowed;\n    };\n\n    const permittedList = await Promise.all(resourcesAndActions.map(checkPermissions));\n\n    console.log(permittedList); // Printing the result of the checks\n\n    return res.status(200).json({ permittedList });\n  } catch (error) {\n    console.error(error);\n    return res.status(500).json({ error: \"Internal Server Error\" });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Resource Instances with Node.js\nDESCRIPTION: Example of how to create a resource instance using the Node.js SDK. This creates a 'file' resource instance with the key '2023_report' in the 'default' tenant.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/rebac/rebac-api-calls.mdx#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nawait permit.api.resourceInstances.create({\n\tresource: \"file\",\n\tkey: \"2023_report\",\n\ttenant: \"default\",\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Role in JavaScript using Permit.io API\nDESCRIPTION: This code snippet demonstrates how to fetch a single tenant role using the Permit.io API. It requires the roleId parameter, which can be either the role's unique identifier or the role key. The function returns the requested role if it exists.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/nodejs/role/get-role.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst roles = await permit.api.getRole(roleId);\n```\n\n----------------------------------------\n\nTITLE: List All Role Assignments in Python\nDESCRIPTION: Python code example showing how to list all role assignments from the local PDP using the permit.pdp_api.role_assignments.list() function.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/enforce-permissions/list-role-assignments.mdx#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom permit.models.pdp import RoleAssignmentRead\n\npermissions: RoleAssignmentRead = permit.pdp_api.role_assignments.list();\n```\n\n----------------------------------------\n\nTITLE: Assigning Roles to Users with Node.js\nDESCRIPTION: Example of how to assign a role to a user using the Node.js SDK. This assigns the 'viewer' role on the 'file:2023_report' resource instance to the user 'john@acme.com'.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/rebac/rebac-api-calls.mdx#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nawait permit.api.roleAssignments.assign({\n\tuser: \"john@acme.com\",\n\trole: \"viewer\",\n\tresource_instance: \"file:2023_report\",\n});\n```\n\n----------------------------------------\n\nTITLE: Executing the Policy Creation Process\nDESCRIPTION: Calls the createPolicy function and handles the promise resolution. This code executes the policy creation process and provides basic error handling.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/nodejs/sync-policy-script/sync-policy.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncreatePolicy().then(() => {\n    console.log(\"done\");\n}).catch((err) => {\n    console.log(err);\n});\n```\n\n----------------------------------------\n\nTITLE: Listing Roles in Node.js\nDESCRIPTION: Node.js implementation for retrieving available roles. Uses the getRoles method from the cache module and stores the result in an ISyncedRole array.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/tutorials/Onboarding/connect-your-app.mdx#2025-04-17_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nISyncedRole[] roles = permit.cache.getRoles();\n```\n\n----------------------------------------\n\nTITLE: Assigning a Role and Creating Resource Instance Implicitly in Permit.io\nDESCRIPTION: This snippet shows how to assign a role to a user for a file and create the file instance implicitly in Permit.io. It gives 'john@acme.com' the 'viewer' role for '2023_report' file in the 'default' tenant.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/google-drive.mdx#2025-04-17_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://api.permit.io/v2/facts/$permit_project/$permit_env/role_assignments \\\n  -X POST \\\n  -H \"Authorization: Bearer $permit_sdk_api_key\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"user\": \"john@acme.com\",\n    \"role\": \"viewer\",\n    \"resource_instance\": \"file:2023_report\",\n    \"tenant\": \"default\",\n  }'\n```\n\nLANGUAGE: python\nCODE:\n```\nawait permit.api.role_assignments.assign(\n    {\n        \"user\": \"john@acme.com\",\n        \"role\": \"viewer\",\n        \"resource_instance\": \"file:2023_report\",\n        \"tenant\": \"default\",\n    }\n)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nawait permit.api.roleAssignments.assign({\n  user: \"john@acme.com\",\n  role: \"viewer\",\n  resource_instance: \"file:2023_report\",\n  tenant: \"default\",\n});\n```\n\n----------------------------------------\n\nTITLE: Updating a Resource in Permit.io with Python\nDESCRIPTION: This snippet shows how to update an existing resource in Permit.io. It updates the description and adds a new action to the 'document' resource.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/python/usage-example.mdx#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom permit import ResourceRead\n\nresource_after_changes: ResourceRead = await permit.api.resources.update(\n    # the key of the resource\n    \"document\",\n    # updated fields\n    {\n        \"description\": \"wat\",\n        \"actions\": {\n            \"find\": {}\n        }\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Information with Permit SDK in Java\nDESCRIPTION: This code snippet demonstrates three different methods to retrieve user information using the Permit SDK in Java. It shows how to use the general get() method, as well as the more specific getByKey() and getById() methods. The code uses the UserRead model to store the retrieved user data.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/java/user/get.mdx#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.permit.sdk.openapi.models.UserRead;\n\n// accepts both the user id and the user key\nUserRead user = permit.api.users.get(\"[USER ID OR KEY]\");\n\n// if you want to be explicit, you can use getByKey\nUserRead user2 = permit.api.users.getByKey(\"[USER KEY]\");\n\n// or getById\nUserRead user3 = permit.api.users.getById(new UUID(\"[USER ID]\"));\n```\n\n----------------------------------------\n\nTITLE: Implementing syncUser with Permit.io SDK in JavaScript\nDESCRIPTION: Example implementation of the syncUser function call to synchronize a user's information with Permit.io cloud and PDP. This creates or updates the user in Permit.io's system.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/nodejs/user/sync-user.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst user = await permit.api.syncUser(user);\n```\n\n----------------------------------------\n\nTITLE: Syncing a User in Permit.io with Python\nDESCRIPTION: This snippet demonstrates how to create or update a user in Permit.io, including user attributes and personal information.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/python/usage-example.mdx#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom permit import UserRead\n\nuser: UserRead = await permit.api.users.sync(\n    {\n        \"key\": \"auth0|elon\",\n        \"email\": \"elonmusk@tesla.com\",\n        \"first_name\": \"Elon\",\n        \"last_name\": \"Musk\",\n        \"attributes\": {\n            \"age\": 50,\n            \"favorite_color\": \"red\",\n        },\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Permission Enforcement with Permit.check\nDESCRIPTION: Example of using permit.check to enforce combined RBAC, ABAC, and ReBAC policies for delivery authorization.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/food-delivery-system-example-using-nuxt.mdx#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// This auto-checks all policies applying to the \"deliver\" action\nconst canRiderDeliver = await permit.check(\n  userId, // user\n  \"deliver\", // action\n  { type: \"Order\", key: orderId, tenant: \"california\" } // resource\n);\n\n// Prevent the rider from doing the delivery if not authorised\nif (!canRiderDeliver) {\n  return {\n    success: false,\n    message: \"You are not permitted to perform this action\",\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Instance-Specific Resource Authorization in Python\nDESCRIPTION: Example showing how to check authorization for a specific resource instance using permit.authorized_users.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/enforce-permissions/authorized-users.mdx#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom permit import AuthorizedUsersResult\n\nauthorized_users: AuthorizedUsersResult = permit.authorized_users(\n    \"read\", \"repo:OPAL\",\n)\n```\n\n----------------------------------------\n\nTITLE: Tenant-Specific Permission Check\nDESCRIPTION: Permission check example including tenant context for multi-tenant applications\nSOURCE: https://github.com/permitio/docs/blob/master/docs/getting-started/_quickstart-parts/_quickstart_nodejs.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst permitted = await permit.check(\n  // the key of the user\n  \"john@permit.io\",\n  // the action\n  \"read\",\n  {\n    type: \"document\",\n    tenant: \"awesome_inc\",\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Checking Read Permission for Jane using Node.js\nDESCRIPTION: This Node.js code snippet uses the Permit.io SDK to check if 'jane@acme.com' has read permission for the '2023_report' file resource. It uses an asynchronous function call to the permit.check method.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/google-drive.mdx#2025-04-17_snippet_63\n\nLANGUAGE: javascript\nCODE:\n```\nawait permit.check(\n  // user\n  \"jane@acme.com\",\n  // action\n  \"read\",\n  // resource\n  {\n    type: \"file\",\n    key: \"2023_report\",\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Permit Client with Cloud PDP in DotNet\nDESCRIPTION: Creates a Permit client instance in C# connected to the managed Cloud PDP. Requires an API key and the Cloud PDP URL as parameters.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/concepts/pdp/overview.mdx#2025-04-17_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing Permit;\n\nPermit permit = new Permit(\n  \"[your-api-key]\",\n  \"https://cloudpdp.api.permit.io\"\n);\n```\n\n----------------------------------------\n\nTITLE: ABAC Resource Authorization with cURL\nDESCRIPTION: Example of using ABAC (Attribute-Based Access Control) with the authorized_users endpoint via cURL.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/enforce-permissions/authorized-users.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'http://localhost:7766/authorized_users' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer <api key>' \\\n--data '{   \n    \"action\": \"read\",\n    \"resource\": {\n        \"type\": \"Document\",\n        \"tenant\":\"default\",\n        \"attributes\": {\n            \"cost\":500,\n            \"create_at\": 2024\n      },\n    \"context\": {\n        \"enable_abac_authorized_users\": true\n    }  \n }}\n'\n```\n\n----------------------------------------\n\nTITLE: User Permissions Implementation in Java\nDESCRIPTION: Java implementation for retrieving user permissions using Permit.io SDK. Creates a Permit instance and queries permissions for a specific user.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/enforce-permissions/user-permissions.mdx#2025-04-17_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport io.permit.sdk.Permit;\nimport io.permit.sdk.PermitConfig;\nimport io.permit.sdk.enforcement.*;\nimport java.util.Arrays;\n\n\nPermit permit = new Permit(\n    new PermitConfig.Builder(\"[YOUR_API_KEY]\").build()\n);\n\nUserPermissions permissions = permit.getUserPermissions(\n\tnew GetUserPermissionsQuery(\n\t\tUser.fromString(\"john@doe.com\")\n\t)\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Resource Definition with Permit SDK\nDESCRIPTION: Demonstrates how to create a Representatives resource with associated actions using the Permit Node.js SDK. Defines list and assign actions for the resource.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/pink-mobile.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait permit.api.resources.create({\n    key: \"representatives\",\n    name: \"Representatives\",\n    actions: {\n      list: {\n        name: \"List\",\n      },\n      assign: {\n        name: \"Assign\",\n      },\n    },\n  });\n```\n\n----------------------------------------\n\nTITLE: Retrieving Available Roles with Permit.io's Cache in JavaScript\nDESCRIPTION: This function retrieves all available roles from the Permit.io cache, returning an array of ISyncedRole objects. Each role includes its ID, name, description, associated permissions, and any custom metadata.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/reference/SDKs/NodeJS/get_roles.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nISyncedRole[] roles = permit.cache.getRoles();\n// returns your org roles with list of ISyncedRole[] type\n// [{\n//         id: string,\n//         name: string,\n//         description: string,\n//         permissions: string[],\n//         metadata: Dictionary<string, object>,\n//     },\n//    ...\n// }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Tenant Data with Permit.io Java SDK\nDESCRIPTION: Demonstrates three different methods to fetch tenant information using the Permit.io SDK. The code shows how to retrieve tenant data using a generic get() method, getByKey() for key-based lookup, and getById() for UUID-based lookup. All methods return a TenantRead object containing the tenant information.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/java/tenant/get.mdx#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.permit.sdk.openapi.models.TenantRead;\n\n// accepts both the tenant id and the tenant key\nTenantRead tenant = permit.api.tenants.get(\"[TENANT ID OR KEY]\");\n\n// if you want to be explicit, you can use getByKey\nTenantRead tenant2 = permit.api.tenants.getByKey(\"[TENANT KEY]\");\n\n// or getById\nTenantRead tenant3 = permit.api.tenants.getById(new UUID(\"[TENANT ID]\"));\n```\n\n----------------------------------------\n\nTITLE: User Session Validation and Permit.io Check\nDESCRIPTION: Validates user session and checks if the user exists in Permit.io before proceeding. If user exists, redirects to home page. Typically used at the beginning of postLogin function to handle role synchronization.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/authentication/auth0/permit-integration.mdx#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst session = await getSession(req, res);\n// check if user exists in permit\nconst user = await permit.api.getUser(session?.user?.sub);\nif (user) {\n\tconsole.log(\"user exists\");\n\tredirect(res, 302, \"/\");\n\treturn { props: {} };\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Read Permission for Jane using Python\nDESCRIPTION: This Python code snippet uses the Permit.io SDK to check if 'jane@acme.com' has read permission for the '2023_report' file resource. It uses an asynchronous function call to the permit.check method.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/google-drive.mdx#2025-04-17_snippet_62\n\nLANGUAGE: python\nCODE:\n```\nawait permit.check(\n    # user\n    \"jane@acme.com\",\n    # action\n    \"read\",\n    # resource\n    {\n        \"type\": \"file\",\n        \"key\": \"2023_report\",\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Account-File Relationship with Node.js\nDESCRIPTION: Creates an 'account' relationship between the 'acme' account and the '2023_report' file using the Node.js SDK. This establishes account-level ownership of the file.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/google-drive.mdx#2025-04-17_snippet_41\n\nLANGUAGE: python\nCODE:\n```\nawait permit.api.relationshipTuples.create(\n    {\n        \"subject\": \"account:acme\",\n        \"relation\": \"account\",\n        \"object\": \"file:2023_report\",\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Resource Authorization Check in Python\nDESCRIPTION: Simple example of using permit.authorized_users to check who has read access to a repo resource.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/enforce-permissions/authorized-users.mdx#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom permit import AuthorizedUsersResult\n\nauthorized_users: AuthorizedUsersResult = permit.authorized_users(\n    \"read\", \"repo\",\n)\n```\n\n----------------------------------------\n\nTITLE: Syncing User with Permit.io using JavaScript\nDESCRIPTION: Implementation example showing how to sync a user object with Permit.io using the SDK's SyncUser method. This creates or updates the user in Permit.io's cloud and PDP.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/dotnet/user/SyncUser.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar user = await permitClient.Api.SyncUser(userObj);\n```\n\n----------------------------------------\n\nTITLE: Complete Express.js Application with Permit.io Integration\nDESCRIPTION: A full example of a Node.js Express application that integrates the Permit.io SDK. The app initializes the SDK, sets up a basic endpoint, and performs a permission check when the endpoint is accessed.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/tutorials/_quickstart-parts/_quickstart_nodejs.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Permit } = require(\"permitio\");\n\nconst express = require(\"express\");\nconst app = express();\nconst port = 4000;\n\n// This line initializes the SDK and connects your Node.js app\n// to the Permit.io PDP container you've set up in the previous step.\nconst permit = new Permit({\n\t// in production, you might need to change this url to fit your deployment\n\tpdp: \"http://localhost:7766\",\n\t// your secret API Key\n\ttoken: \"[YOUR_API_KEY]\",\n});\n\n// You can open http://localhost:4000 to invoke this http\n// endpoint, and see the outcome of the permission check.\napp.get(\"/\", async (req, res) => {\n\t// Example user object\n\t// You would usually get the user from your authentication layer (e.g. Auth0, Cognito, etc) via a JWT token or a database.\n\tconst user = {\n\t\tid: \"[A_USER_ID]\",\n\t\tfirstName: \"John\",\n\t\tlastName: \"Doe\",\n\t\temail: \"johndoe@permit.io\",\n\t};\n\n\t// check for permissions to a resource and action (in this example, create a document)\n\tconst permitted = await permit.check(user.id, \"create\", \"document\");\n\tif (permitted) {\n\t\tres\n\t\t\t.status(200)\n\t\t\t.send(\n\t\t\t\t`${user.firstName} ${user.lastName} is PERMITTED to create document!`\n\t\t\t);\n\t} else {\n\t\tres\n\t\t\t.status(403)\n\t\t\t.send(\n\t\t\t\t`${user.firstName} ${user.lastName} is NOT PERMITTED to create document!`\n\t\t\t);\n\t}\n});\n\napp.listen(port, () => {\n\tconsole.log(`Example app listening at http://localhost:${port}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Syncing User with Permit.io in Java\nDESCRIPTION: Java code for syncing a user with the Permit.io permission system, including setting user attributes and assigning roles.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/getting-started/_quickstart-parts/_quickstart_java.mdx#2025-04-17_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nimport io.permit.sdk.api.models.CreateOrUpdateResult;\nimport io.permit.sdk.openapi.models.UserRead;\nimport io.permit.sdk.enforcement.User;\n\nHashMap<String, Object> userAttributes = new HashMap<>();\nuserAttributes.put(\"age\", Integer.valueOf(20));\nuserAttributes.put(\"subscription\", \"pro\");\n\nCreateOrUpdateResult<UserRead> response = permit.api.users.sync(\n  (new User.Builder(\"[A_UNIQUE_USER_ID]\"))\n    .withEmail(\"john@smith.com\")\n    .withFirstName(\"John\")\n    .withLastName(\"Smith\")\n    .withAttributes(userAttributes)\n    .build()\n);\n\npermit.api.users.assignRole(user.key, \"admin\", \"default\");\n\nUserRead user = response.getResult();\nboolean wasCreated = response.wasCreated();\n```\n\n----------------------------------------\n\nTITLE: Syncing User in Java\nDESCRIPTION: Java code for syncing a user with Permit.io. Uses a Builder pattern to create a User object with relevant details before calling the syncUser API method.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/tutorials/Onboarding/connect-your-app.mdx#2025-04-17_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nUser userObj = new User.Builder(user.id)\n    .withEmail(user.email)\n    .withFirstName(user.first_name)\n    .withLastName(user.last_name)\n    .build();\n\nuser = permit.api.syncUser(userObj);\n```\n\n----------------------------------------\n\nTITLE: Creating Editor Role Derivation with Node.js\nDESCRIPTION: Updates the 'editor' role for files to be automatically granted to users who have the 'editor' role on parent folders using the Node.js SDK. This implements permission propagation from folders to files.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/google-drive.mdx#2025-04-17_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nawait permit.api.resourceRoles.update(\"file\", \"editor\", {\n  granted_to: {\n    users_with_role: [\n      {\n        linked_by_relation: \"parent\",\n        on_resource: \"folder\",\n        role: \"editor\",\n      },\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Update Permission for John using cURL\nDESCRIPTION: This cURL request checks if the user 'john@acme.com' has update permission for the '2023_report' file resource. It sends a POST request to the PDP endpoint with user, resource, and action details.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/google-drive.mdx#2025-04-17_snippet_58\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:7766/allowed \\\n  -X POST \\\n  -H \"Authorization: Bearer $permit_sdk_api_key\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"user\": {\n            \"key\": \"john@acme.com\"\n        },\n        \"resource\": {\n            \"tenant\": \"default\",\n            \"type\": \"file\",\n            \"key\": \"2023_report\"\n        },\n        \"action\": \"update\"\n  }'\n```\n\n----------------------------------------\n\nTITLE: Filtered User Permissions in Node.js\nDESCRIPTION: Advanced Node.js implementation showing how to filter user permissions by tenants, resource types, and specific resources.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/enforce-permissions/user-permissions.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Permit } = require(\"permitio\");\n\nconst permit = new Permit({token: \"<YOUR_API_KEY>\", ...});\nconst userPermissions = await permit.getUserPermissions(\n    \"john@doe.com\",\n    [\"tenant-1\", \"tenant-2\"], // tenants\n    [\"document:doc-1\", \"document:doc-2\"] // resources\n    [\"document\", \"__tenant\"], // resource_types\n);\n```\n\n----------------------------------------\n\nTITLE: Invalid Attribute-First Age Condition\nDESCRIPTION: Shows an invalid attribute-first condition using an unsupported operator.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/working-with-abac/building-conditions.mdx#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"user.age\": {\n        \"or\": [\n            {\"between\": [15, 18]},\n            {\"greater-than-unsupported\": 40},\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking User Permissions\nDESCRIPTION: Verifies if a user has specific permissions within their account.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/authentication/stytch/permit-integration.mdx#2025-04-17_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst isPermitted = await permit.check(id, \"view-all\", {\n  type: \"Account\",\n  tenant: currentTenant,\n});\n```\n\n----------------------------------------\n\nTITLE: Simple Usage of AllTenantsCheck in Java\nDESCRIPTION: This snippet demonstrates how to use the permit.AllTenantsCheck function in Java to check permissions across all tenants. It initializes the Permit client and performs a check for a user's read permission on a document resource.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/enforce-permissions/all-tenants-check.mdx#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.permit.sdk.Permit;\nimport io.permit.sdk.PermitConfig;\nimport io.permit.sdk.enforcement.*;\nimport java.util.Arrays;\n\n\nPermit permit = new Permit(\n    new PermitConfig.Builder(\"[YOUR_API_KEY]\").build()\n);\n\nList<TenantDetails> allowedTenants = permit.checkInAllTenants(\n\tUser.fromString(\"john@doe.com\"),\n\t\"read\",\n\tnew Resource.Builder(\"document\").build()\n);\n```\n\n----------------------------------------\n\nTITLE: Checking Permissions with Permit.io SDK\nDESCRIPTION: Demonstrates how to check if a user has permission to perform a specific action on a resource using the permit.check() method.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/tutorials/_quickstart-parts/_quickstart_python_sync.mdx#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npermitted = await permit.check(\"john@smith.com\", \"create\", \"document\")\n\nif permitted:\n    print(\"Jack is permitted to create a document\")\nelse:\n    print(\"Jack is NOT PERMITTED to create document!\")\n```\n\n----------------------------------------\n\nTITLE: Launching Policy Decision Point (PDP) Container\nDESCRIPTION: This snippet shows how to run a Docker container for Permit.io's Policy Decision Point (PDP). It sets up environment variables and exposes necessary ports for permission checks.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/google-drive.mdx#2025-04-17_snippet_54\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it \\\n    -e PDP_API_KEY=$permit_sdk_api_key \\\n    -e PDP_CONTROL_PLANE=https://api.permit.io \\\n    -p 7766:7000 \\\n    -p 8081:8081 \\\n    permitio/pdp-v2:latest\n```\n\n----------------------------------------\n\nTITLE: Running Permit.io PDP Container with Docker\nDESCRIPTION: Docker command to run the Permit.io Policy Decision Point (PDP) container. This container makes authorization decisions and connects to Permit.io's cloud service for configuration. It requires setting environment variables for API key, debug mode, and Kong integration.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/integrations/gateways/kong.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndocker run \\\n⁠  -p 7766:7000 \\\n⁠  --env PDP_API_KEY=YOUR_PERMIT_API_KEY \\\n  --env PDP_DEBUG=True \\\n⁠  --env PDP_KONG_INTEGRATION=true \\\n⁠  permitio/pdp-v2:latest\n```\n\n----------------------------------------\n\nTITLE: Defining ReBAC Policy for Organizational Relationships\nDESCRIPTION: Demonstrates how to create a ReBAC policy based on organizational relationships, granting access to resources based on group membership.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/build-policies/rebac/overview.mdx#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n```\nA `user` assigned the role `HR_Group#Member` will also be assigned the `Legal_Docs#Editor` when `HR_Group` is `Parent` of `Legal_Docs`.\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Role in Permit.io with Python\nDESCRIPTION: This snippet demonstrates how to create a new role in Permit.io, specifying its key, name, description, and permissions.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/python/usage-example.mdx#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom permit import RoleRead\n\nadmin: RoleRead = await permit.api.roles.create(\n    {\n        \"key\": \"admin\",\n        \"name\": \"Admin\",\n        \"description\": \"an admin role\",\n        \"permissions\": [\"document:create\", \"document:read\"],\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Permit Client with Cloud PDP in Java\nDESCRIPTION: Creates a Permit client instance in Java connected to the managed Cloud PDP. Uses a builder pattern to configure the client with API key and Cloud PDP URL.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/concepts/pdp/overview.mdx#2025-04-17_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nimport io.permit.sdk.Permit;\nimport io.permit.sdk.PermitConfig;\n\nPermit permit = new Permit(\n    new PermitConfig.Builder(\"[your-api-key]\")\n        .withPdpAddress(\"https://cloudpdp.api.permit.io\")\n        .build()\n);\n```\n\n----------------------------------------\n\nTITLE: Handling Errors in Permit.io Python SDK\nDESCRIPTION: This example shows how to handle common errors when using the Permit.io SDK, such as resource not found and key conflicts during creation.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/python/usage-example.mdx#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom permit import Permit, PermitApiError\n\npermit = Permit(...)\n\n# handle not found error\ntry:\n    await permit.api.resources.get(\"nosuchresource\")\nexcept PermitApiError as e:\n    if e.status_code == 404:\n        print(\"not found\")\n    else:\n        ...\n\n# handle cannot create object due to key conflict:\ntry:\n    await permit.api.resources.create(\n        {\"key\": \"document\", \"name\": \"document2\", \"actions\": {}}\n    )\nexcept PermitApiError as e:\n    if e.status_code == 409:\n        print(\"already exists!\")\n    else:\n        ...\n```\n\n----------------------------------------\n\nTITLE: Basic Permission Check in JavaScript using Permit.io\nDESCRIPTION: Example showing how to check if a user has read permission for an account within a specific tenant context using the permit.check() function.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/mesa-verde.mdx#2025-04-17_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nawait permit.check(user, \"read\", { type: \"Account\", tenant });\n```\n\n----------------------------------------\n\nTITLE: Creating a Role with Permissions using Permit SDK in Node.js\nDESCRIPTION: Demonstrates how to create a new role with specific permissions using the Permit SDK.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/nodejs/quickstart-nodejs.mdx#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nawait permit.api.roles.create({\n    key: \"manager\",\n    name: \"Manager\",\n    permissions: [\n      \"repository:clone\",\n      \"repository:view\",\n    ],\n  });\n```\n\n----------------------------------------\n\nTITLE: Syncing Cognito User to Permit After Login (Frontend)\nDESCRIPTION: This code snippet shows how to sync a user's information with Permit after they've logged in with Cognito. It detects the authorization code in the URL and makes a POST request to the backend sync endpoint with the Cognito access token.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/authentication/cognito/permit-integration.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// frontend/app.mjs\nif (searchParams.get(\"code\") !== null) {\n  //...\n  const syncUser = await fetch(\"api/sync\", {\n    method: \"POST\",\n    headers: new Headers({ Authorization: `Bearer ${tokens.access_token}` }),\n  });\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning a Role to a User for a File in Permit.io\nDESCRIPTION: This snippet demonstrates how to assign a role to a user for a specific file instance in Permit.io. It gives the user 'john@acme.com' the 'viewer' role for the '2023_report' file.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/google-drive.mdx#2025-04-17_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://api.permit.io/v2/facts/$permit_project/$permit_env/role_assignments \\\n  -X POST \\\n  -H \"Authorization: Bearer $permit_sdk_api_key\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"user\": \"john@acme.com\",\n    \"role\": \"viewer\",\n    \"resource_instance\": \"file:2023_report\"\n  }'\n```\n\nLANGUAGE: python\nCODE:\n```\nawait permit.api.role_assignments.assign(\n    {\n        \"user\": \"john@acme.com\",\n        \"role\": \"viewer\",\n        \"resource_instance\": \"file:2023_report\",\n    }\n)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nawait permit.api.roleAssignments.assign({\n  user: \"john@acme.com\",\n  role: \"viewer\",\n  resource_instance: \"file:2023_report\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Tenant with Permit.io API in JavaScript\nDESCRIPTION: Implementation example showing how to call the Permit.io API to create a new tenant. The tenant object is stringified and passed to the createTenant method.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/nodejs/tenant/create-tenant.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await permit.api.createTenant(JSON.stringify(tenant));\n```\n\n----------------------------------------\n\nTITLE: Syncing User with Permit.io in Ruby\nDESCRIPTION: Implementation example of the sync_user function that sends the user object to Permit.io and returns the newly created user. This should only be used for initial user creation, not for role updates.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/ruby/user/sync_user.mdx#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nnew_user := permit.sync_user(user)\n```\n\n----------------------------------------\n\nTITLE: Creating Folder-Account Relation in Permit.io\nDESCRIPTION: This snippet demonstrates how to create a resource relation between 'folder' and 'account' resources using Permit.io's API. It sets up the 'account' as a subject resource for the 'folder' resource.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/google-drive.mdx#2025-04-17_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://api.permit.io/v2/schema/$permit_project/$permit_env/resources/folder/relations \\\n  -X POST \\\n  -H \"Authorization: Bearer $permit_sdk_api_key\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"key\": \"account\",\n    \"name\": \"Account\",\n    \"subject_resource\": \"account\"\n  }'\n```\n\nLANGUAGE: python\nCODE:\n```\nawait permit.api.resource_relations.create(\n    \"folder\",\n    {\n        \"key\": \"account\",\n        \"name\": \"Account\",\n        \"subject_resource\": \"account\",\n    }\n)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nawait permit.api.resourceRelations.create(\"folder\", {\n  key: \"account\",\n  name: \"Account\",\n  subject_resource: \"account\",\n});\n```\n\n----------------------------------------\n\nTITLE: Syncing User Info with Permit after Cognito Login\nDESCRIPTION: Frontend code to sync user information with Permit.io after successful Cognito authentication.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/authentication/cognito/cognito-demo-app.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// /frontend/app.mjs\n//...\nif (searchParams.get(\"code\") !== null) {\n  //... get the tokens from Cognito\n  // After we got the tokens, we need to sync the user info with Permit\n  const syncUser = await fetch(\"http://localhost:8000/api/sync\", {\n    method: \"POST\",\n    headers: new Headers({ Authorization: `Bearer ${tokens.access_token}` }),\n  });\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Updating File Editor Role with Account Global Access using cURL\nDESCRIPTION: Updates the file 'editor' role to grant it to all members of an account through the 'account_global' relation. This enables sharing files with everyone in an account.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/google-drive.mdx#2025-04-17_snippet_51\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://api.permit.io/v2/schema/$permit_project/$permit_env/resources/file/roles/editor \\\n  -X PATCH \\\n  -H \"Authorization: Bearer $permit_sdk_api_key\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"granted_to\": {\n        \"users_with_role\": [\n            {\n                \"linked_by_relation\": \"account_global\",\n                \"on_resource\": \"account\",\n                \"role\": \"member\"\n            }\n            {\n                \"linked_by_relation\": \"account\",\n                \"on_resource\": \"account\",\n                \"role\": \"admin\",\n            },\n            {\n                \"linked_by_relation\": \"parent\",\n                \"on_resource\": \"folder\",\n                \"role\": \"editor\"\n            },\n        ]\n\t}\n  }'\n```\n\n----------------------------------------\n\nTITLE: Creating a New Group in Permit.io\nDESCRIPTION: POST request to create a new group called 'marketing' of type 'teams' in the default tenant. This is the first step in setting up relationship-based access control via groups.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/rebac/groups.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.permit.io/v2/schema/{project_id}/{env_id}/groups' \\\n -H 'authorization: Bearer API_SECRET_KEY' \\\n --data-raw '{\"group_instance_key\": \"marketing\", \"group_resource_type_key\": \"teams\", \"group_tenant\": \"default\"}'\n```\n\n----------------------------------------\n\nTITLE: Creating Parent Relationship Tuple with cURL\nDESCRIPTION: Creates a 'parent' relationship from the '2023_report' file to the 'finance' folder using the Permit.io API. This establishes that the finance folder is the parent container of the 2023_report file.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/google-drive.mdx#2025-04-17_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://api.permit.io/v2/facts/$permit_project/$permit_env/relationship_tuples \\\n  -X POST \\\n  -H \"Authorization: Bearer $permit_sdk_api_key\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"subject\": \"folder:finance\",\n    \"relation\": \"parent\",\n    \"object\": \"file:2023_report\"\n  }'\n```\n\n----------------------------------------\n\nTITLE: Complete Permit PHP SDK Implementation Example\nDESCRIPTION: Comprehensive example showing how to use the Permit PHP SDK to retrieve API key scope, create a user, and perform an authorization check against the Permit.io PDP (Policy Decision Point).\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/php/quickstart-php.mdx#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nrequire 'vendor/autoload.php';\n\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\nuse React\\Http\\Server;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse React\\EventLoop\\Factory;\nuse React\\Socket\\SocketServer;\n\n\n$permitToken = '<Place your Permit Token here>';\n$pdpUrl = 'https://cloudpdp.api.permit.io';\n$apiUrl = 'https://api.permit.io';\n$port = 4000;\n\n$config = OpenAPI\\Client\\Configuration::getDefaultConfiguration()->setAccessToken($permitToken)->setHost($apiUrl);\n\n// Get the scope of the API key\n$apiInstance = new OpenAPI\\Client\\Api\\APIKeysApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\ntry {\n    $scope = $apiInstance->getApiKeyScope();\n    print_r($scope);\n} catch (Exception $e) {\n    echo 'Exception when calling APIKeys';\n}\n\n$usersInstance = new OpenAPI\\Client\\Api\\UsersApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n\n// Create user with the given data\n$user_create = new \\OpenAPI\\Client\\Model\\UserCreate([\n    'key' => 'raz-cohen',\n    'email' => 'raz@permit.io',\n    'first_name' => 'Raz',\n    'last_name' => 'Cohen',\n]);\ntry {\n    $result = $usersInstance->createUser($scope->getProjectId(), $scope->getEnvironmentId(), $user_create);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling UsersApi->createUser: ', $e->getMessage(), PHP_EOL;\n}\n\n\n// Permit check function\n$pdpConfig = OpenAPI\\Client\\Configuration::getDefaultConfiguration()->setAccessToken($permitToken)->setHost($pdpUrl);\n$pdpInstance = new OpenAPI\\Client\\Api\\PDP\\AuthorizationAPIApi(\n    new GuzzleHttp\\Client(),\n    $pdpConfig\n);\n// Create a query object - this is the data we want to check\n// in this case we're checking if the user 'raz-cohen' is allowed to read a document\n$query = new \\OpenAPI\\Client\\Model\\PDP\\Query([\n    'user' => ['key' => 'raz-cohen'],\n    'action' => 'read',\n    'resource' => [\n        'type' => 'document',\n        'tenant' => 'default'\n    ]\n]);\ntry {\n    $is_allowed = $pdpInstance->isAllowedAllowedPost(\n        $query,\n    );\n\n    // We'll print the result to the console\n    if ($is_allowed->getAllow()) {\n        echo \"Permitted\\n\";\n    } else {\n        echo \"Not Permitted\\n\";\n    }\n} catch (Exception $e) {\n    echo 'Exception when calling PDP\\\\AuthorizationAPIApi->isAllowedAllowedPost: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Configuring Cognito JWT Verifier and Permit SDK\nDESCRIPTION: This snippet demonstrates how to initialize and configure the AWS Cognito JWT verifier and Permit SDK on the backend. It sets up the necessary components to validate Cognito tokens and interact with Permit's authorization services.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/authentication/cognito/permit-integration.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// standalone_be/index.mjs\n// init Cognito verifier and Permit SDK\nimport { CognitoJwtVerifier } from \"aws-jwt-verify\";\nimport { Permit } from \"permitio\";\n// verifier for the id token:\nconst verifierIdToken = CognitoJwtVerifier.create({\n    userPoolId: [your user pool id],\n    tokenUse: \"id\",\n    clientId: [your client id],\n}\n);\nconst permit = new Permit(\n    {\n      token: [your permit token],\n      // in production, you might need to change this url to fit your deployment\n      pdp: \"https://cloudpdp.api.permit.io\",\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Login and Authorization with Python Flask, Hasura, and PostgreSQL\nDESCRIPTION: This Python code demonstrates login handling and permission-based access control in a Flask application. It verifies user credentials, generates a JWT token on successful login, and uses permit.check() to enforce access control on the /animals endpoint based on the user's email identifier.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/tutorials/_connecting_to_authentication.mdx#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/login\", methods=[\"POST\"])\ndef login_handler():\n    args = AuthArgs.from_request(request.get_json())\n    user_response = client.find_user_by_email(args.email)\n    user = user_response[\"data\"][\"user\"][0]\n    try:\n        Password.verify(user.get(\"password\"), args.password)\n        rehash_and_save_password_if_needed(user, args.password)\n        return JsonWebToken(generate_token(user)).to_json()\n    except VerifyMismatchError:\n        return {\"message\": \"Invalid credentials\"}, 401\n\n@app.route(\"/animals\", methods=[\"GET\"])\ndef list_animals():\n    try:\n        token = get_token_from_header() # We used the email as our unique identifier (in Prod a UUID would be better)\n        id = token[\"email\"] # enforce app-level access with Permit\n        if permit.check(id, \"list\", \"animals\"):\n            user_response = client.list_animals()\n            return jsonify(user_response[\"data\"][\"user\"])\n        else:\n            return make_response(jsonify({\n                'message': 'Not allowed'\n            } )), 403\n```\n\n----------------------------------------\n\nTITLE: Syncing Auth0 Roles with Permit.io in Next.js\nDESCRIPTION: Code snippet that assigns roles to users in Permit.io based on the roles from Auth0 tokens during the post-login process.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/authentication/auth0/auth0-demo-app.mdx#2025-04-17_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n    if (session?.user['my_app_name/roles']) {\n        session?.user['my_app_name/roles'].map(async (roleKey: string) => {\n            console.log(roleKey);\n            const roleToAssign = {\n                role: roleKey,\n                user: permitUserObj.key,\n                tenant: 'default'\n            }\n            const assignedRole = await permit.api.roleAssignments.assign(roleToAssign);\n            console.log(assignedRole);\n        });\n    }\n    redirect(res, 302, '/');\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing the Permit.io SDK in Python\nDESCRIPTION: Code snippet showing how to initialize the Permit.io SDK with project details. It requires the permit package and connects to the Permit.io cloud PDP using an API token.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/python/sync-policy-script/sync-policy.mdx#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom permit import Permit\n\npermit = Permit(\n    pdp=\"https://cloudpdp.api.permit.io\",  \n    token=\"your_permit_key\",\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource-level Roles with Derivation\nDESCRIPTION: Shows how to create resource-level roles with permissions and role derivation rules for plan resources.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/pink-mobile.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nawait permit.api.resources.create({\n    key: \"plan\",\n    name: \"Plan\",\n    ...\n    roles: {\n        editor: {\n        name: \"Editor\",\n        permissions: [\"view\", \"change\"],\n        granted_to: {\n            users_with_role: [\n            {\n                role: \"editor\",\n                on_resource: \"account\",\n                linked_by_relation: \"parent\",\n            },\n            ],\n        },\n        },\n    },\n    ...\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Account Global Relation for Files using cURL\nDESCRIPTION: Creates a new relation from files to accounts called 'account_global'. This relation enables granting access to all members of an account on specific files.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/google-drive.mdx#2025-04-17_snippet_48\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://api.permit.io/v2/schema/$permit_project/$permit_env/resources/file/relations \\\n  -X POST \\\n  -H \"Authorization: Bearer $permit_sdk_api_key\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"key\": \"account_global\",\n    \"name\": \"Account Global\",\n    \"subject_resource\": \"account\"\n  }'\n```\n\n----------------------------------------\n\nTITLE: Implementing getAssignedRoles Function in JavaScript\nDESCRIPTION: A JavaScript example showing how to call the getAssignedRoles function from the Permit.io API to retrieve all roles assigned to a specific user, optionally filtered by tenant.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/nodejs/role/get-assigned-roles.mdx#2025-04-17_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst roles = await permit.api.getAssignedRoles(userId, tenantId);\n```\n\n----------------------------------------\n\nTITLE: Verifying Cognito ID Token in Express.js Backend\nDESCRIPTION: Express.js route handler to verify the Cognito ID token using CognitoJwtVerifier and return the payload if valid.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/authentication/cognito/cognito-demo-app.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// standalone_be/index.mjs\n// init CognitoJwtVerifier\nconst verifierIdToken = CognitoJwtVerifier.create({\n  userPoolId: userPoolId,\n  tokenUse: \"id\",\n  clientId: clientId,\n});\n\napp.get(\"/api/id\", async (req, res) => {\n  try {\n    const payload = await verifierIdToken.verify(\n      req.headers.authorization?.split(\" \")[1] // the JWT as string\n    );\n    res.status(200).send(payload);\n  } catch {\n    res.status(403).send(\"Token not valid!\");\n  }\n});\n//...\n```\n\n----------------------------------------\n\nTITLE: Representing Relationship Tuple in Healthcare Context\nDESCRIPTION: Illustrates how a relationship tuple is structured in a healthcare context, showing the relationship between a patient's medical record and a doctor.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/build-policies/rebac/overview.mdx#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```\n`Patient` `John Smith` `Medical Record` **treated by** `Doctor` `Jane Doe`\n```\n```\n\n----------------------------------------\n\nTITLE: Creating User Set for Safe Owners in Terraform for Permit.io\nDESCRIPTION: This snippet defines a user set for Safe Owners, with conditions checking if the user's location matches their country and if they have the AccountOwner role. This enables attribute-based access control (ABAC) policies based on user attributes.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/mesa-verde.mdx#2025-04-17_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"permitio_user_set\" \"Safe_Owners\" {\n  key  = \"Safe_Owners\"\n  name = \"Safe Owners\"\n  conditions = jsonencode({\n    \"allOf\" : [\n      {\n        \"user.location\" : {\n          \"equals\" : {\n            \"ref\" : \"user.country\"\n          }\n        }\n      },\n      {\n        \"user.roles\" : {\n          \"array_contains\" : \"AccountOwner\"\n        }\n      }\n    ]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Policy Rules\nDESCRIPTION: Demonstrates how to create policy rules by combining user sets and resource sets with specific permissions.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/pink-mobile.mdx#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nawait permit.api.conditionSetRules.create({\n    user_set: \"active_users\",\n    resource_set: \"owned_plans\",\n    permission: \"plan:view\",\n});\nawait permit.api.conditionSetRules.create({\n    user_set: \"active_users\",\n    resource_set: \"owned_plans\",\n    permission: \"plan:change\",\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Permit SDK with Timeout Options in Java\nDESCRIPTION: This snippet shows how to configure the Permit SDK in Java with additional timeout and policy options for consistent updates.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/manage-data/local-facts-uploader.mdx#2025-04-17_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n// SDK-level configuration (applies to all operations)\nPermitConfig config = new PermitConfig.Builder(\"<your-api-key>\")\n    .withPdpAddress(\"http://localhost:7766\")\n    .withProxyFactsViaPdp(true)\n    .withFactsSyncTimeout(10)           // Optional: Uses PDP default if not specified\n    .withFactsSyncTimeoutPolicy(\"ignore\") // Optional: Uses PDP default if not specified\n    .build();\nPermit permit = new Permit(config);\n\n// All operations will use the SDK-level settings\npermit.api.users.create(userCreate);\n```\n\n----------------------------------------\n\nTITLE: Initializing Permit.io SDK in Node.js\nDESCRIPTION: Imports and initializes the Permit.io SDK with the cloud PDP URL and authentication token. This is the first step required to connect your Node.js application to Permit.io's policy decision point.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/nodejs/sync-policy-script/sync-policy.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Permit } = require('permitio');\nconst permit = new Permit({\n    pdp: 'https://cloudpdp.api.permit.io',\n    token: 'permit_key_',\n});\n```\n\n----------------------------------------\n\nTITLE: Syncing Hanko Users to Permit.io\nDESCRIPTION: JavaScript code that syncs authenticated Hanko users to Permit.io and assigns them the default 'user' role.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/authentication/hankopermit.mdx#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await permit.api.syncUser({\n\nkey,\n  email,\n  attributes: {\n    roles: [\"user\"],\n  },\n});\n\nawait permit.api.roleAssignments.assign({\n\nrole: \"user\",\n  tenant: \"default\",\n  user: key,\n\n});\n```\n\n----------------------------------------\n\nTITLE: Executing Permission Check with Node.js SDK\nDESCRIPTION: This snippet demonstrates how to perform a permission check using the Permit Node.js SDK. It includes the user identifier, action, and resource object with type and tenant information.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/manage-data/pdp-sharding.mdx#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nawait permit.check(\n\t// user\n\t\"user@example.com\",\n\t// action\n\t\"read\",\n\t// resource\n\t{\n\t\ttype: \"document\",\n\t\ttenant: \"default\",\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Assigning Resource-Level Role with JavaScript\nDESCRIPTION: This JavaScript snippet assigns the 'Sender' role to a user for a specific transaction resource instance, enabling ReBAC permissions by establishing the user's relationship to the transaction.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/mesa-verde.mdx#2025-04-17_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nawait permit.api.roleAssignments.assign({\n  role: \"Sender\",\n  tenant,\n  resource_instance: `Transaction:${transaction.id}`,\n  user,\n});\n```\n\n----------------------------------------\n\nTITLE: Syncing User Data with Permit SDK in Node.js\nDESCRIPTION: Illustrates how to synchronize user data from an authentication solution to Permit using the SDK.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/nodejs/quickstart-nodejs.mdx#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nawait permit.api.syncUser({\n  key: \"key\",\n  email: \"example@permit.io\",\n  first_name: \"John\",\n  last_name: \"Smith\",\n  attributes: {},\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Permit.io SDK Instance in C#\nDESCRIPTION: Creates a new instance of the Permit SDK by connecting to the Permit.io PDP container. Requires an API key and the URL of the PDP service.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/tutorials/_quickstart-parts/_quickstart_dotnet.mdx#2025-04-17_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// This line initializes the SDK and connects your .NET app\n// to the Permit.io PDP container you've set up in the previous step.\nPermit permit = new Permit(\n    \"[YOUR_API_KEY]\",\n    \"http://localhost:7766\"\n);\n```\n\n----------------------------------------\n\nTITLE: Creating User Object for Permit.io Sync in .NET\nDESCRIPTION: Example of creating a user object with required and optional fields for syncing with Permit.io. The object includes key (unique identifier), email, first name, last name, and attributes for ABAC policies.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/dotnet/user/SyncUser.mdx#2025-04-17_snippet_0\n\nLANGUAGE: dotnet\nCODE:\n```\nvar userObj = new UserCreate{\n    Key = \"key\",\n    Email = \"email@example.com\",\n    First_name = \"John\",\n    Last_name = \"Smith\",\n    Attributes = {}\n};\n```\n\n----------------------------------------\n\nTITLE: Updating File Editor Role with Account Global Access using Node.js\nDESCRIPTION: Node.js implementation to update the file 'editor' role to include all account members through the 'account_global' relation. This enables sharing files with everyone in an account.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/google-drive.mdx#2025-04-17_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\nawait permit.api.resourceRoles.update(\"file\", \"editor\", {\n  granted_to: {\n    users_with_role: [\n      {\n        linked_by_relation: \"parent\",\n        on_resource: \"folder\",\n        role: \"editor\",\n      },\n      {\n        linked_by_relation: \"account_global\",\n        on_resource: \"account\",\n        role: \"member\",\n      },\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Standard Response Format for Relationship Tuples List in Permit.io\nDESCRIPTION: Shows the standard JSON response format when listing relationship tuples. Each tuple includes detailed information such as IDs, subjects, relations, objects, tenant details, and timestamps.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/nodejs/relationship-tuple/list-relationship-tuples.mdx#2025-04-17_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n[\n  {\n    \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n    \"subject\": \"organization:permitio\",\n    \"relation\": \"owner\",\n    \"object\": \"repo:opal\",\n    \"tenant\": \"stripe-inc\",\n    \"subject_id\": \"7c60d51f-b44e-4682-87d6-449835ea4d11\",\n    \"relation_id\": \"405d8375-3514-403b-8c43-83ae74cfe022\",\n    \"object_id\": \"12f84e49-af17-4b0c-8cd7-01258769c2ba\",\n    \"tenant_id\": \"40ef0e48-a11f-4963-a229-e396c9f7e733\",\n    \"organization_id\": \"7c60d51f-b44e-4682-87d6-449835ea4de6\",\n    \"project_id\": \"405d8375-3514-403b-8c43-83ae74cfe0e9\",\n    \"environment_id\": \"40ef0e48-a11f-4963-a229-e396c9f7e7c4\",\n    \"created_at\": \"2019-08-24T14:15:22Z\",\n    \"updated_at\": \"2019-08-24T14:15:22Z\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating an Access Request using cURL\nDESCRIPTION: This snippet demonstrates how to create a new access request using a POST request with cURL. It includes the necessary headers and request body structure.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/elements/access-request-api.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.permit.io/v2/facts/{proj_id}/{env_id}/access_requests/{elements_config_id}/user/{user_ident}/tenant/{tenant_ident}' \\\n    -H 'authorization: Bearer API_SECRET_KEY' \\\n  -data-raw\n {\n    \"access_request_details\": {\n        \"tenant\": \"34f5c98e-f430-457b-a812-92637d0c6fd0\",\n        \"resource\": \"4d5215ed-38bb-48ed-879a-fdb9ca58522f\",\n        \"resource_instance\": \"2d98d9f8-e1b7-4f1d-baad-2edbf6fa6c66\",\n        \"role\": \"ac4e70c8-d5be-48af-93eb-760f58fc91a9\",\n    },\n    \"reason\": \"done onboarding\",\n } \\\n```\n\n----------------------------------------\n\nTITLE: Implementing User Creation with Permit.io API\nDESCRIPTION: Shows the actual API call to create a new user in the Permit.io system using the previously configured user object. Takes context and user object as parameters.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/golang/user/Create.mdx#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nnewUser, err := Permit.Api.Users.Create(ctx, *user)\n```\n\n----------------------------------------\n\nTITLE: Assigning Roles to Users with Permit.io API\nDESCRIPTION: This snippet shows how to assign roles to users using the Permit.io API. It assigns the admin role to the admin user and the operator role to the regular user.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/rbac/rbac-example.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# assign the admin user to the admin role\ncurl 'https://api.permit.io/v2/facts/{project_id}/{env_id}/role_assignments' \\\n  -H 'authorization: Bearer API_SECRET_KEY' \\\n  --data-raw '{\"role\":\"admin\",\"tenant\":\"default\",\"user\":\"unique_id_for_admin_username\"}'\n\n# assign the operator role to the other operator\ncurl 'https://api.permit.io/v2/facts/{project_id}/{env_id}/role_assignments' \\\n  -H 'authorization: Bearer API_SECRET_KEY' \\\n  --data-raw '{\"role\":\"operator\",\"tenant\":\"default\",\"user\":\"unique_id_for_username\"}'\n```\n\n----------------------------------------\n\nTITLE: Syncing User Information with Permit.io in Java\nDESCRIPTION: This code demonstrates how to use the permit.api.users.sync() function to create or update a user in the Permit.io system. It shows how to build a User object with various attributes including key, email, names, and custom attributes for attribute-based access control.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/java/user/sync.mdx#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.permit.sdk.api.models.CreateOrUpdateResult;\nimport io.permit.sdk.openapi.models.UserRead;\nimport io.permit.sdk.enforcement.User;\n\n// optional attributes for attribute-based access control\nHashMap<String, Object> userAttributes = new HashMap<>();\nuserAttributes.put(\"age\", Integer.valueOf(50));\nuserAttributes.put(\"fav_color\", \"red\");\n\n// this is how you sync the user\nCreateOrUpdateResult<UserRead> result = permit.api.users.sync(\n    (new User.Builder(\"auth0|elon\"))\n        .withEmail(\"elonmusk@tesla.com\")\n        .withFirstName(\"Elon\")\n        .withLastName(\"Musk\")\n        .withAttributes(userAttributes)\n        .build()\n);\nUserRead user = result.getResult();\nboolean wasCreated = result.wasCreated();\n```\n\n----------------------------------------\n\nTITLE: Permit Authorization Implementation\nDESCRIPTION: Implementation of Permit.io authorization checks in API endpoints with user permission verification.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/authentication/auth0/permit-integration.mdx#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// pages/api/tasks.ts\nimport { Permit } from \"permitio\";\n\nexport const permit = new Permit({\n\tpdp: \"https://cloudpdp.api.permit.io\",\n\ttoken: process.env.PERMIT_SDK_TOKEN,\n});\nexport default withApiAuthRequired(async function handler(\n\treq: NextApiRequest,\n\tres: NextApiResponse<Task | Task[] | Response>\n) {\n\tconst session = await getSession(req, res);\n\tif (!session?.user) {\n\t\tres.status(401).json({ message: \"unauthorized\" });\n\t\treturn;\n\t}\n\tconst isAllowedForOperation = await permit.check(\n\t\t(session?.user?.sub as string) || \"\",\n\t\treq.method?.toLowerCase() as string,\n\t\t\"task\"\n\t);\n\tif (!isAllowedForOperation) {\n\t\tres.status(403).json({ message: \"forbidden\" });\n\t\treturn;\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Resource with Permit SDK in Node.js\nDESCRIPTION: Shows how to create a new resource with defined actions using the Permit SDK.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/nodejs/quickstart-nodejs.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nawait permit.api.resource.create({\n  key: \"repository\",\n  name: \"Repository\",\n  actions: {\n    clone: {},\n    push: {},\n    view: {},\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Assigning User Role with Permit.io API in Go\nDESCRIPTION: Assigns a role to a specific user within a tenant context using the Permit.io API. Takes context, user key, role key, and tenant key as parameters and returns a role assignment object or error.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/golang/user/AssignRole.mdx#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nroleAssignment, err := Permit.Api.Users.AssignRole(ctx, \"user-key\", \"role-key\", \"tenant-key\")\n```\n\n----------------------------------------\n\nTITLE: Updating Reviewer Details in an Access Request\nDESCRIPTION: This cURL command demonstrates how to update reviewer details in an access request using a PATCH request. It includes optional data for reviewer comment and role.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/elements/access-request-api.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.permit.io/v2/facts/{proj_id}/{env_id}/access_requests/{elements_config_id}/user/{user_ident}/tenant/{tenant_ident}/{access_request_id}/reviewer' \\\n    -H 'authorization: Bearer API_SECRET_KEY'  \\\n  --data-raw\n     \"reviewer_comment\": \"new employee\",\n     \"role\": \"ac4e70c8-d5be-48af-93eb-760f58fc91a9\",\n } \\\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Deny Rule Logic in Rego for Permit.io\nDESCRIPTION: This snippet demonstrates the implementation of a custom deny rule in Rego. It checks for RBAC decisions, specific roles, and time boundaries to determine access permission.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/integrations/gitops/custom_policy.mdx#2025-04-17_snippet_2\n\nLANGUAGE: rego\nCODE:\n```\nallow {\n    not \"rbac\" in policies.__allow_sources\n} else {\n   not \"tmp-admin\" in rbac.allowing_roles\n} else {\n   time.now_ns() >= time.parse_rfc3339_ns(\"2023-01-01T00:00:00+02:00\")\n   time.now_ns() <= time.parse_rfc3339_ns(\"2024-01-01T00:00:00+02:00\")\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Bulk Role Assignments in Permit (Bash)\nDESCRIPTION: Examples of assigning and unassigning roles in bulk using cURL requests to the Permit API. These operations are useful for managing role assignments efficiently, especially in large-scale systems or when implementing ReBAC relationships.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/bulk-operations.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://api.permit.io/v2/facts/{proj_id}/{env_id}/role_assignments/bulk \\\n    -H \"Authorization: Bearer {your_permit_token}\" \\\n    -H \"Content-Type: application/json\" \\\n    -d '[{\n                \"user\": \"892179821739812389327\",\n                \"role\": \"admin\",\n                \"tenant\": \"default\"\n            }, ...]'\n\ncurl -X DELETE https://api.permit.io/v2/facts/{proj_id}/{env_id}/role_assignments/bulk \\\n    -H \"Authorization: Bearer {your_permit_token}\" \\\n    -H \"Content-Type: application/json\" \\\n    -d '[{\n                \"user\": \"892179821739812389327\",\n                \"role\": \"owner:892179821739812389327\",\n                \"tenant\": \"stripeince\"\n            }, ...]'\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Data with Permit.io Client - .NET\nDESCRIPTION: Demonstrates how to fetch a user's information using their unique userId with the Permit.io client library. The method returns the user object containing all associated user information asynchronously.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/dotnet/user/GetUser.mdx#2025-04-17_snippet_0\n\nLANGUAGE: dotnet\nCODE:\n```\nvar user = await permitClient.Api.GetUser(userId);\n```\n\n----------------------------------------\n\nTITLE: Initializing Permit Object with API Key\nDESCRIPTION: Sets up the Permit instance with environment API key and PDP hostname configuration.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/authentication/stytch/permit-integration.mdx#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Permit } from \"permitio\";\n\nconst permit = new Permit({\n  // The Environment API Key\n  token: process.env.PERMIT_API_KEY,\n  // The URL for the deployed PDP. Usually runs on port 7766.\n  pdp: process.env.PERMIT_PDP_HOSTNAME,\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Permit SDK\nDESCRIPTION: Setup code to initialize the Permit SDK with PDP endpoint and API token configuration\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/tutorials/_quickstart-parts/_quickstart_python.mdx#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npermit = Permit(\n    pdp=\"http://localhost:7766\",\n    token=\"<your-api-key>\",\n)\n```\n\n----------------------------------------\n\nTITLE: Approving Invited User with Python SDK\nDESCRIPTION: This snippet demonstrates how to approve an invited user using the Permit.io Python SDK. It uses the invite code from the URL to validate and approve the new user, creating and syncing them with the chosen role.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/embeddable-uis/email-configuration-and-templates.mdx#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nawait permit.api.users.approve(\n    user_key=\"new_user\",\n    email=\"new-user@example.com\",\n    invite_code=\"ed32bc43e2194a80a5ef5e0339943b44\"\n)\n```\n\n----------------------------------------\n\nTITLE: Synchronizing User Data with Permit.io using Java SDK\nDESCRIPTION: Demonstrates how to create and sync a user object with Permit.io cloud service. The function returns a UserModel object containing user details including ID, name, email, attributes, organization ID, and tenant IDs. This should only be used for initial user creation, not for updating roles.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/reference/SDKs/Java/sync_user.mdx#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nUser testUser = new User.Builder(userKey)\n    .withEmail(userEmail)\n    .withFirstName(userFirstName)\n    .withLastName(userLastName)\n    .build();\nuser = permit.api.syncUser(testUser);\n\n// SyncUser returns the synced with UserModel type\n// {\n//     public String id = null;\n//     public String customId = null;\n//     public String firstName = null;\n//     public String lastName = null;\n//     public String email = null;\n//     public HashMap<String, String> attributes = null;\n//     public String organizationId = null;\n//     public ArrayList<String> tenantIds = null;\n// }\n```\n\n----------------------------------------\n\nTITLE: Checking Update Permission for Jane using cURL\nDESCRIPTION: This cURL request checks if the user 'jane@acme.com' has update permission for the '2023_report' file resource. It sends a POST request to the PDP endpoint with user, resource, and action details.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/google-drive.mdx#2025-04-17_snippet_61\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:7766/allowed \\\n  -X POST \\\n  -H \"Authorization: Bearer $permit_sdk_api_key\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"user\": {\n            \"key\": \"jane@acme.com\"\n        },\n        \"resource\": {\n            \"tenant\": \"default\",\n            \"type\": \"file\",\n            \"key\": \"2023_report\"\n        },\n        \"action\": \"update\"\n  }'\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Data with Permit.io API - JavaScript\nDESCRIPTION: Makes an asynchronous API call to fetch user information using their unique identifier. The userKey parameter can be either the user's ID or key value.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/nodejs/user/get-user.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait permit.api.users.get(userKey);\n```\n\n----------------------------------------\n\nTITLE: Listing Roles using Permit.io API in C#\nDESCRIPTION: This code snippet demonstrates how to asynchronously retrieve all available roles using the Permit.io client. It utilizes the ListRoles method from the API, which returns a response containing the list of roles.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/dotnet/role/ListRoles.mdx#2025-04-17_snippet_0\n\nLANGUAGE: dotnet\nCODE:\n```\nvar response = await permitClient.Api.ListRoles();\n```\n\n----------------------------------------\n\nTITLE: Assigning Role to User\nDESCRIPTION: Assigns the AccountOwner role to a user within a specific tenant.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/authentication/stytch/permit-integration.mdx#2025-04-17_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nawait permit.api.assignRole({\n  role: \"AccountOwner\",\n  tenant: tenantId,\n  user: userId,\n});\n```\n\n----------------------------------------\n\nTITLE: Server-side Login Route with Cookies\nDESCRIPTION: Create a server-side login route to allow clients to log in and access Permit Elements. This example uses cookies for authentication. The loginAs function requires a unique userId and a tenant_key or tenantId.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/elements/access-requests.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\napp.post('/login', async (req, res) => {\n    const { userId, tenant } = req.body;\n    const ticket = await permit.elements.loginAs({ userId, tenant });\n    res.cookie('permit_token', ticket.token, {\n        httpOnly: true,\n        secure: true,\n        sameSite: 'strict'\n    });\n    res.json({ redirect_url: ticket.redirect_url });\n});\n```\n\nLANGUAGE: python\nCODE:\n```\n@app.route('/login', methods=['POST'])\ndef login():\n    user_id = request.json['userId']\n    tenant = request.json['tenant']\n    ticket = permit.elements.login_as(user_id, tenant)\n    response = jsonify({'redirect_url': ticket.redirect_url})\n    response.set_cookie('permit_token', ticket.token, httponly=True, secure=True, samesite='Strict')\n    return response\n```\n\nLANGUAGE: c\nCODE:\n```\n[HttpPost(\"login\")]\npublic async Task<IActionResult> Login([FromBody] LoginRequest request)\n{\n    var ticket = await _permit.Elements.LoginAs(request.UserId, request.Tenant);\n    Response.Cookies.Append(\"permit_token\", ticket.Token, new CookieOptions\n    {\n        HttpOnly = true,\n        Secure = true,\n        SameSite = SameSiteMode.Strict\n    });\n    return Ok(new { redirect_url = ticket.RedirectUrl });\n}\n```\n\nLANGUAGE: java\nCODE:\n```\n@PostMapping(\"/login\")\npublic ResponseEntity<?> login(@RequestBody LoginRequest request) {\n    Ticket ticket = permit.elements().loginAs(request.getUserId(), request.getTenant());\n    ResponseCookie cookie = ResponseCookie.from(\"permit_token\", ticket.getToken())\n            .httpOnly(true)\n            .secure(true)\n            .sameSite(\"Strict\")\n            .build();\n    return ResponseEntity.ok()\n            .header(HttpHeaders.SET_COOKIE, cookie.toString())\n            .body(Map.of(\"redirect_url\", ticket.getRedirectUrl()));\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Stripe Proxy Configuration Example\nDESCRIPTION: Full example of a Proxy Config object for Stripe API integration, including mapping rules, JWKS configuration, and authentication settings.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/foaz/detailed-guide.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"Stripe Proxy Config\",\n    \"key\": \"stripe_proxy_config\",\n    \"mapping_rules\": [\n        {\n            \"url\": \"https://api.stripe.com/v1/balance\",\n            \"method\": \"POST\",\n            \"resource\": \"balance\"\n        },\n        {\n            \"url\": \"https://api.stripe.com/v1/customers/{customer_id}\",\n            \"method\": \"GET\",\n            \"resource\": \"customer\",\n            \"headers\": {\n                \"x-permit-example\": \"\"\n            }\n        }\n    ],\n    \"jwks\": {\n        \"keys\": [\n            {\n                \"alg\": \"RS256\",\n                \"kty\": \"RSA\",\n                \"use\": \"sig\",\n                \"n\": \"****\",\n                \"e\": \"****\",\n                \"kid\": \"****\",\n                \"x5t\": \"****\",\n                \"x5c\": [\n                    \"****\"\n                ]\n            }\n        ]\n    },\n    \"auth_mechanism\": \"Bearer\",\n    \"secret\": \"<YOUR STRIPE API KEY>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Resource Relations with Node.js\nDESCRIPTION: Example of how to create a resource relation using the Node.js SDK. This creates a 'parent' relation for the 'file' resource, where 'folder' is the subject resource.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/rebac/rebac-api-calls.mdx#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nawait permit.api.resourceRelations.create(\"file\", {\n\tkey: \"parent\",\n\tname: \"Parent\",\n\tsubject_resource: \"folder\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Condition Set for Temporary Admin Access using Permit.io API\nDESCRIPTION: This curl command creates a condition set named 'Temporary Admin' that ensures temporary permissions based on user role, expiration time, and tenant key match.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/build-policies/abac/time-based-role.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'https://api.permit.io/v2/schema/default/production/condition_sets' \\\n--header 'Content-Type: application/json' \\\n--header 'Accept: application/json' \\\n--header 'Authorization: Bearer permit_key_' \\\n--data '{\n  \"key\": \"temp-admin\",\n  \"name\": \"Temporary Admin\",\n  \"type\": \"userset\",\n  \"conditions\": {\n    \"allOf\": [\n      {\n        \"allOf\": [\n          { \"user.roles\": { \"array_contains\": \"admin\" } },\n          { \"user.time_based_groups\": { \"any_match\": { \"match\": {\n            \"expires\": { \"greater-than-equals\": { \"ref\": \"user.current_time\" } },\n            \"tenant\": { \"equals\": { \"ref\": \"tenant.key\" } }\n          }}}}\n        ]\n      }\n    ]\n  }\n}'\n```\n\n----------------------------------------\n\nTITLE: Initializing RoleCreate Object in Go for Permit.io API\nDESCRIPTION: This snippet demonstrates how to create a new RoleCreate object with a key and name, and set permissions for the role. It's a prerequisite step before calling the Create method of the Roles API.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/golang/role/Create.mdx#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nroleCreate := models.NewRoleCreate(\"role-key\", \"role-name\")\nroleCreate.SetPermissions([]string{\"resource-key:read\", \"resource-key:write\"})\n```\n\n----------------------------------------\n\nTITLE: Deleting a Tenant Using Permit.io API in JavaScript\nDESCRIPTION: This code demonstrates how to delete a tenant using the Permit.io JavaScript SDK. The function takes a tenant ID (or tenant key) as a parameter and returns a response from the API.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/nodejs/tenant/delete-tenant.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await permit.api.deleteTenant(tenantId);\n```\n\n----------------------------------------\n\nTITLE: Defining User Set for Stanford Full-time Students\nDESCRIPTION: Creates a User Set that identifies full-time students at Stanford University. The conditions check if the user's role is 'student' and their education status is not 'part-time'.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/working-with-abac/examples.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"key\": \"full_time_stanford_students\",\n    \"name\": \"Full-time Stanford Students\",\n    \"type\": \"userset\",\n    \"conditions\": {\n        \"allOf\": [\n            {\n                \"user.role\": {\n                    \"equals\": \"student\"\n                }\n            },\n            {\n                \"user.education\": {\n                    \"not\": [\n                        \"part-time\"\n                    ]\n                }\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Resource Relations with Python\nDESCRIPTION: Example of how to create a resource relation using the Python SDK. This creates a 'parent' relation for the 'file' resource, with 'folder' as the subject resource.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/rebac/rebac-api-calls.mdx#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nawait permit.api.resource_relations.create(\n    \"file\",\n    {\n        \"key\": \"parent\",\n        \"name\": \"Parent\",\n        \"subject_resource\": \"folder\",\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Permit Client in Python\nDESCRIPTION: This snippet initializes the Permit client with the PDP URL and API key. It sets up the connection to the Permit.io PDP container.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/getting-started/_quickstart-parts/_quickstart_python_sync.mdx#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\npermit = Permit(\n    # in production, you might need to change this url to fit your deployment\n    pdp=\"http://localhost:7766\",\n    # your API KEY\n    token=\"[YOUR_API_KEY]\",\n)\n```\n\n----------------------------------------\n\nTITLE: Filtering Role Assignments by User and Tenant\nDESCRIPTION: Filter role assignments by specific user and tenant combinations. This endpoint allows retrieving role assignments for particular users within specific tenants.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/examples/filter-role-associations.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.permit.io/v2/facts/{project_id}/{env_id}/role_assignments?user=bob&tenant=default' \\\n  -H 'authorization: Bearer API_SECRET_KEY'\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"id\": \"25e7915145334ca7815de96a65335902\",\n        \"user\": \"bob\",\n        \"role\": \"editor\",\n        \"tenant\": \"default\",\n        \"resource_instance\": null,\n        \"resource_instance_id\": null,\n        \"user_id\": \"c428e65465f94eea888ac274d2a428a5\",\n        \"role_id\": \"8aef7d34bab64ddea739fd30f10d3e37\",\n        \"tenant_id\": \"8d15d835c04c40429807215e9aee418e\",\n        \"organization_id\": \"47b37e40e1094a2580fc6589ad24fec5\",\n        \"project_id\": \"6b84d0a6705c4c81a8818f4e7bb0f589\",\n        \"environment_id\": \"47e86c08899f4b798657fd19f09b54c1\",\n        \"created_at\": \"2024-06-30T21:30:11+00:00\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Filter Role Assignments by Resource Instance in Python\nDESCRIPTION: Python code example showing how to filter role assignments for a specific resource instance using the permit.pdp_api.role_assignments.list() function with a resource_instance_key filter.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/enforce-permissions/list-role-assignments.mdx#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom permit.models.pdp import RoleAssignmentRead\n\npermissions: RoleAssignmentRead = permit.pdp_api.role_assignments.list(\n    resource_instance_key=\"document:onboarding-doc\",\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Set for After-Hours Bicycle Rentals\nDESCRIPTION: Creates a Resource Set for bicycles that are available after 5PM. The conditions verify that the resource type is 'bicycle' and the availability time is greater than or equal to 17 (5PM).\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/working-with-abac/examples.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"key\": \"rent_bicycle_after_5\",\n    \"name\": \"Rent Bicycles After 5PM\",\n    \"type\": \"resourceset\",\n    \"conditions\": {\n        \"allOf\": [\n            {\n                \"resource.type\": {\n                    \"equals\": \"bicycle\"\n                }\n            },\n            {\n                \"resource.availability\": {\n                    \"greater-than-equals\": [\n                        \"17\"\n                    ]\n                }\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Tenant Object Structure in C#\nDESCRIPTION: This snippet shows the structure of the tenant object used as a payload when creating a new tenant. It includes key, name, description, and attributes fields.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/dotnet/tenant/CreateTenant.mdx#2025-04-17_snippet_0\n\nLANGUAGE: dotnet\nCODE:\n```\n{\n\tKey: \"key\",\n\tName: \"name\",\n\tDescription: \"description\",\n\tAttributes: {}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Resources in Permit.io with Python\nDESCRIPTION: Example of how to define resources with their associated actions. This snippet structures a 'secret' resource with create, read, update, and delete actions.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/python/sync-policy-script/sync-policy.mdx#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresources = [\n    {\n        \"key\": \"secret\",\n        \"name\": \"secret\",\n        \"actions\": {\n            \"create\": {},\n            \"read\": {},\n            \"update\": {},\n            \"delete\": {},\n        },\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Bulk Relationships via Permit.io API (Bash)\nDESCRIPTION: This snippet demonstrates how to create multiple relationship tuples in a single API call using cURL. It sends a POST request to the Permit.io API with a JSON payload containing an array of relationship operations.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/bulk-operations.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://api.permit.io/v2/facts/{proj_id}/{env_id}/relationship_tuples/bulk \n    -H \"Authorization: Bearer {your_permit_token}\" \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\n            \"operations\": [{\n                \"subject\": \"organization:permitio\",\n                \"relation\": \"owner\",\n                \"object\": \"repo:opal\",\n                \"tenant\": \"public\"\n            }, ...]\n        }'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Assigned Roles for a User with Permit API in Java\nDESCRIPTION: This snippet demonstrates how to use the permit.api.users.getAssignedRoles() method to fetch all assigned roles for a specific user. The method takes a user key as a parameter and returns an array of RoleAssignmentRead objects.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/java/role/get-assigned-roles.mdx#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nRoleAssignmentRead[] assignedRoles = permit.api.users.getAssignedRoles(\"[USER KEY]\");\n```\n\n----------------------------------------\n\nTITLE: Replacing Bulk Users with Permit.io API\nDESCRIPTION: A curl command that shows how to replace or update multiple users' data at once using the Permit.io API. The request allows changing user information like email and name while preserving the key identifier.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/nodejs/bulk-requests-examples.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT \\\n'https://api.permit.io/v2/facts/{proj_id}/{env_id}/bulk/users' \\\n  -H 'authorization: Bearer API_SECRET_KEY' \\\n  -D '{\n            \"operations\": [{\n            \"key\": \"user|892179821739812389327\",\n            \"email\": \"jane@coolcompany.com\",\n            \"first_name\": \"Jane\",\n            \"last_name\": \"Doe\",\n            \"attributes\": {}\n            }, ...]\n        }'\n```\n\n----------------------------------------\n\nTITLE: Creating Tenant with Permit.io API in Java\nDESCRIPTION: Demonstrates how to create a new tenant using the Permit.io SDK in Java. Shows initialization of tenant attributes and creation of a tenant with basic information including key, name, and description.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/java/tenant/create.mdx#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.permit.sdk.openapi.models.TenantCreate;\nimport io.permit.sdk.openapi.models.TenantRead;\n\n// optional attributes for attribute-based access control\nHashMap<String, Object> tenantAttributes = new HashMap<>();\ntenantAttributes.put(\"age\", Integer.valueOf(50));\ntenantAttributes.put(\"fav_color\", \"red\");\n\nTenantRead tenant = permit.api.tenants.create(\n    new TenantCreate(\"tesla\", \"Tesla Inc\").withDescription(\"The car company\")\n);\n```\n\n----------------------------------------\n\nTITLE: Assigning User Role in C#\nDESCRIPTION: This code demonstrates how to assign a role to a user using the Permit.io API. The function returns a RoleAssignment object containing the role details, user identifier, and scope information.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/_Dotnet/assign_role.mdx#2025-04-17_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nassignedRole = await permit.Api.AssignRole(user.customId, Role.id, Tenant.externalId);\n\n// returns the assigned role with RoleAssignment type\n// {\n//     id: string,\n//     role: {\n//         id: string,\n//         name: string,\n//         description: string,\n//         tenantId: string,\n//     },\n//     user: string,\n//     scope: string,\n// }\n```\n\n----------------------------------------\n\nTITLE: Initializing Permit.io SDK\nDESCRIPTION: Basic setup code to initialize the Permit.io SDK with an API token.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/getting-started/_quickstart-parts/_quickstart_golang.mdx#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"github.com/permitio/permit-golang/pkg/permit\"\nimport \"github.com/permitio/permit-golang/pkg/config\"\n\nfunc main() {\n\tPermitConfig := config.NewConfigBuilder(\"<YOUR_API_TOKEN>\").Build()\n\tPermit := permit.New(PermitConfig)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Folder Resource with Roles and Permissions\nDESCRIPTION: This snippet demonstrates how to create a Folder resource with defined actions (list-files, create-file, rename) and roles (editor, commenter, viewer) using the Permit.io API. Each role has specific permissions associated with it.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/google-drive.mdx#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://api.permit.io/v2/schema/$permit_project/$permit_env/resources \\\n  -X POST \\\n  -H \"Authorization: Bearer $permit_sdk_api_key\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"key\": \"folder\",\n    \"name\": \"Folder\",\n    \"actions\": {\n        \"list-files\": {},\n        \"create-file\": {},\n        \"rename\": {}\n    },\n    \"roles\": {\n        \"editor\": {\n            \"name\": \"Editor\",\n            \"permissions\": [\n\t\t\t\t\"list-files\",\n\t\t\t\t\"create-file\",\n\t\t\t\t\"rename\"\n\t\t\t]\n        },\n        \"commenter\": {\n            \"name\": \"Commenter\",\n            \"permissions\": [\n\t\t\t\t\"list-files\"\n\t\t\t]\n        },\n        \"viewer\": {\n            \"name\": \"Viewer\",\n            \"permissions\": [\n\t\t\t\t\"list-files\"\n\t\t\t]\n        }\n    }\n  }'\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom permit import Permit\n\npermit = Permit(token=\"<YOUR_API_KEY>\", ...)\n\nawait permit.api.create_resource(\n    {\n        \"key\": \"folder\",\n        \"name\": \"Folder\",\n        \"actions\": {\n            \"list-files\": {},\n            \"create-file\": {},\n            \"rename\": {},\n        },\n        \"roles\": {\n            \"editor\": {\n                \"name\": \"Editor\",\n                \"permissions\": [\n                    \"list-files\",\n                    \"create-file\",\n                    \"rename\",\n                ],\n            },\n            \"commenter\": {\n                \"name\": \"Commenter\",\n                \"permissions\": [\n                    \"list-files\",\n                ],\n            },\n            \"viewer\": {\n                \"name\": \"Viewer\",\n                \"permissions\": [\n                    \"list-files\",\n                ],\n            },\n        },\n    }\n)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Permit } = require(\"permitio\");\n\nconst permit = new Permit({token: \"<YOUR_API_KEY>\", ...});\n\nawait permit.api.createResource(\n    {\n        \"key\": \"folder\",\n        \"name\": \"Folder\",\n        \"actions\": {\n            \"list-files\": {},\n            \"create-file\": {},\n            \"rename\": {},\n        },\n        \"roles\": {\n            \"editor\": {\n                \"name\": \"Editor\",\n                \"permissions\": [\n                    \"list-files\",\n                    \"create-file\",\n                    \"rename\",\n                ],\n            },\n            \"commenter\": {\n                \"name\": \"Commenter\",\n                \"permissions\": [\n                    \"list-files\",\n                ],\n            },\n            \"viewer\": {\n                \"name\": \"Viewer\",\n                \"permissions\": [\n                    \"list-files\",\n                ],\n            },\n        },\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Updating a Role with permit.api.roles.update() in Java\nDESCRIPTION: This code demonstrates how to update an existing role by changing its description using the Permit.io SDK in Java. It imports the RoleUpdate model and calls the update method with the role key and updated properties.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/java/role/update.mdx#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.permit.sdk.openapi.models.RoleUpdate;\n\npermit.api.roles.update(\"admin\", new RoleUpdate().withDescription(\"new description\"));\n```\n\n----------------------------------------\n\nTITLE: ABAC Resource Authorization in Python\nDESCRIPTION: Example of using ABAC (Attribute-Based Access Control) with permit.authorized_users in Python.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/enforce-permissions/authorized-users.mdx#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom permit import AuthorizedUsersResult\n\nauthorized_users: AuthorizedUsersResult = permit.authorized_users(\n    \"read\", {\n        type:\"Document\",\n        attributes:{\n        \"cost\":500,\n        \"create_at\": 2024\n    },{\n        \"enable_abac_authorized_users\": true\n    }},\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Resource Roles with Node.js\nDESCRIPTION: Example of how to update a resource role using the Node.js SDK. This updates the 'editor' role for the 'folder' resource by defining who it's granted to.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/rebac/rebac-api-calls.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nawait permit.api.resourceRoles.update(\"folder\", \"editor\", {\n\tgranted_to: {\n\t\tusers_with_role: [\n\t\t\t{\n\t\t\t\tlinked_by_relation: \"account\",\n\t\t\t\ton_resource: \"account\",\n\t\t\t\trole: \"admin\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tlinked_by_relation: \"parent\",\n\t\t\t\ton_resource: \"folder\",\n\t\t\t\trole: \"editor\",\n\t\t\t},\n\t\t],\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Permit SDK with Timeout Options in Python\nDESCRIPTION: This snippet shows how to configure the Permit SDK in Python with additional timeout and policy options for consistent updates.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/manage-data/local-facts-uploader.mdx#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# SDK-level configuration (applies to all operations)\npermit = Permit(\n    token=\"<your-api-key>\",\n    pdp=\"http://localhost:7766\",\n    proxy_facts_via_pdp=True,\n    facts_sync_timeout=10,           # Optional: Uses PDP default if not specified\n    facts_sync_timeout_policy=\"ignore\" # Optional: Uses PDP default if not specified\n)\n\n# All operations will use the SDK-level settings\nuser = await permit.api.users.create({ /* user data */ })\n```\n\n----------------------------------------\n\nTITLE: Enforcing Permissions with Attributes in Java\nDESCRIPTION: This snippet demonstrates how to use the permit.AllTenantsCheck function in Java with resource attributes. It creates a HashMap of resource attributes and includes them in the permission check.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/enforce-permissions/all-tenants-check.mdx#2025-04-17_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nimport io.permit.sdk.Permit;\nimport io.permit.sdk.PermitConfig;\nimport io.permit.sdk.enforcement.*;\nimport java.util.Arrays;\n\n\nPermit permit = new Permit(\n    new PermitConfig.Builder(\"[YOUR_API_KEY]\").build()\n);\n\nHashMap<String,Object> resourceAttrs = new HashMap<String,Object>();\nresourceAttrs.put(\"colors\", new ArrayList<String>(Arrays.asList(\"red\",\"blue\")));\n\nList<TenantDetails> allowedTenants = permit.checkInAllTenants(\n\tUser.fromString(\"john@doe.com\"),\n\t\"read\",\n\tnew Resource.Builder(\"document\").withAttributes(resourceAttrs).build()\n);\n```\n\n----------------------------------------\n\nTITLE: Performing Bulk Tenant Operations in Permit (Bash)\nDESCRIPTION: Examples of creating new tenants and deleting existing tenants in bulk using cURL requests to the Permit API. These operations are useful for managing tenant data at scale.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/bulk-operations.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Create new tenants\ncurl -X POST https://api.permit.io/v2/facts/{proj_id}/{env_id}/bulk/tenants \\\n    -\n    -H \"Authorization: Bearer {your_permit_token}\" \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\n            \"operations\": [{\n                \"key\": \"cool_company\",\n                \"name\": \"Cool Company\",\n                \"attributes\": {}\n            }, ...]\n        }'\n\n# Delete existing tenants\ncurl -X DELETE https://api.permit.io/v2/facts/{proj_id}/{env_id}/bulk/tenants\n    -H \"Authorization: Bearer {your_permit_token}\" \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\n            \"idents\": [\"stripeince\", ...]\n        }'\n```\n\n----------------------------------------\n\nTITLE: Resource Update Payload Structure\nDESCRIPTION: JSON structure showing the payload format for updating a resource, including optional fields for name, URN, description, actions, attributes, roles, and relations.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/nodejs/resource/update-resource.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\tname: \"name\",\n\turn: \"urn\",\n\tdescription: \"description\",\n\tactions: {},\n\tattributes: {},\n\troles: {},\n\trelations: {}\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Resource Instances with Permit.io API in JavaScript\nDESCRIPTION: This code snippet demonstrates how to retrieve a paginated list of resource instances using the Permit.io API. The example shows filtering by tenant and resource type, with pagination parameters to control the result set size.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/nodejs/resource-instance/list-resource-instances.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait permit.api.resourceInstances.list({\n  tenant: \"default\",\n  resource: \"file\",\n  page: 1,\n  perPage: 20,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Tenant with Attributes in Permit.io using JavaScript SDK\nDESCRIPTION: This snippet shows how to create a new tenant with custom attributes using the Permit.io SDK. It sets the tenant's key and name, along with attributes like region and subscription level.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/overview/sync-applications-data.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nawait permit.api.tenants.create({\n    key: \"acme-corp\",\n    name: \"Acme Corporation\",\n    attributes: {\n        \"region\": \"EU\",\n        \"subscriptionLevel\": \"enterprise\"\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing SyncUser Function Call in Go\nDESCRIPTION: Implementation of the SyncUser function call that syncs the user to Permit.io cloud and PDP. This function takes the context and user object as parameters and returns the newly created user and any error encountered.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/golang/user/SyncUser.mdx#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nnewUser, err := Permit.Api.Users.SyncUser(ctx, *user)\n```\n\n----------------------------------------\n\nTITLE: Adding Users to a Group in Permit.io\nDESCRIPTION: PUT request to add a specific user to a group in the 'business' tenant. Once added, the user will automatically inherit all permissions assigned to the group through role derivation.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/rebac/groups.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT \\\n'https://api.permit.io/v2/schema/{project_id}/{env_id}/groups/{group_resource_type_key}/users/{user_id}' \\\n    -H 'authorization: Bearer API_SECRET_KEY' \\\n     --data-raw '{\"tenant\":\"business\"}'\n```\n\n----------------------------------------\n\nTITLE: Implementing Permit.io Permission Check\nDESCRIPTION: Code snippet showing how to implement a generic permission check using Permit.io's HTTP API for authorization decisions.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/authentication/hankopermit.mdx#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await fetch(`${pdpUrl}/allowed`, {\n    method: \"POST\",\n    headers: {\n        Authorization: `Bearer ${permitApiKey}`,\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n},\nbody: JSON.stringify({\n    user: user,\n    action,\n    resource: resource,\n    context: {},\n    }),\n});\n```\n\n----------------------------------------\n\nTITLE: Cedar and Rego Policy Code Examples\nDESCRIPTION: Sample code showing how Permit.io generates and manages authorization policies using either Cedar or Rego policy languages. The code can be created through the low-code Policy Editor UI or written directly.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/build-policies/policy-basics.mdx#2025-04-17_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Fetching Environment Object with Permit API\nDESCRIPTION: This curl command retrieves the environment object by making a GET request to the environments endpoint using the previously obtained project ID/key. It requires the same API_SECRET_KEY in the authorization header.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/examples/get-project-and-env.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.permit.io/v2/projects/project_id_or_key/envs' \\\n  -H 'authorization: Bearer API_SECRET_KEY'\n```\n\n----------------------------------------\n\nTITLE: Fetching Paginated Tenant List in Go\nDESCRIPTION: Retrieves a paginated list of available tenants using the Permit.io API. Takes context, page number, and items per page as parameters. Returns a collection of tenants and potential error.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/golang/tenant/List.mdx#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntenants, err := Permit.Api.Tenants.List(ctx, 1, 10)\n```\n\n----------------------------------------\n\nTITLE: Creating User via Permit.io API\nDESCRIPTION: Sample request for creating a user using the Permit.io API. This JSON payload includes the user's key, email, name, and custom attributes for attribute-based access control.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/sync-users.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"user|892179821739812389327\",\n  \"email\": \"jane@coolcompany.com\",\n  \"first_name\": \"Jane\",\n  \"last_name\": \"Doe\",\n  \"attributes\": {\n    \"department\": \"marketing\",\n    \"age\": 30,\n    \"subscription\": {\n      \"tier\": \"pro\",\n      \"expired\": false\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning a Role to a User in Java using Permit API\nDESCRIPTION: This snippet demonstrates how to assign the 'admin' role to a user identified by their email within the 'tesla' tenant. The method returns a RoleAssignmentRead object representing the newly created role assignment.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/java/role/assign-role.mdx#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nRoleAssignmentRead ra = permit.api.users.assignRole(\"elon@tesla.com\", \"admin\", \"tesla\");\n```\n\n----------------------------------------\n\nTITLE: Synchronizing User Data with Permit.io in JavaScript\nDESCRIPTION: This snippet demonstrates how to synchronize user information with Permit.io's API. It creates or updates a user with basic personal information such as email, name, and attributes.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/pink-mobile.mdx#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\npermit.api.users.sync({\n    email: \"sirius@pink.mobile\",\n    key: \"sirius@pink.mobile\",\n    first_name: \"Sirius\",\n    last_name: \"Black\",\n    attributes: {},\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Role Assignments with Permit.io SDK in Go\nDESCRIPTION: This snippet demonstrates how to get all roles assigned to a specific user using the Permit.io API. The method takes context, user key, tenant key, page number, and results per page as parameters, returning role assignments for pagination.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/golang/user/GetAssignedRoles.mdx#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nrolesAssignments, err := Permit.Api.Users.GetAssignedRoles(ctx, \"role-key\", \"default\",1,10)\n```\n\n----------------------------------------\n\nTITLE: Valid Complex Logical-First Condition Example\nDESCRIPTION: Shows a valid complex condition using nested logical operators and multiple attributes.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/working-with-abac/building-conditions.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"allOf\": [\n        {\"subject.paying\": {\"equals\": True}},\n        {\n            \"anyOf\": [\n                {\"subject.role\": {\"equals\": \"editor\"}},\n                {\"subject.department\": {\"equals\": \"marketing\"}},\n            ]\n        },\n        {\"environment.location\": {\"in\": [\"US\", \"Canada\"]}},\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Role Payload in JavaScript for Permit.io API\nDESCRIPTION: Example of a JSON payload for defining a role in Permit.io. This payload includes the role name, description, permissions list, and role inheritance through the 'extends' property.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/nodejs/role/update-role.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\tname: \"Editor\",\n\tdescription: \"the editor role can read and write to documents\",\n\tpermissions: [\"document:write\"],\n\textends: []\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Roles using Cache and API in Permit.io C# SDK\nDESCRIPTION: This snippet demonstrates two methods to fetch roles: using the local cache for low-latency access and querying the Permit cloud API. The cache method returns SyncedRole objects, while the API method returns Role objects. The cache method is recommended for frequent or time-critical operations.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/_Dotnet/get_roles.mdx#2025-04-17_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nRole[] roles = await permit.Cache.GetRoles();\n// returns your org roles with list of SyncedRole type\n// [{\n//         id: string,\n//         name: string,\n//         description: string,\n//         permissions: string[],\n//         metadata: Dictionary<string, object>,\n//     },\n//    ...\n// }\n\n\nRole[] roles = await permit.Api.GetRoles();\n// returns your org roles with list of Role type\n// [{\n//         id: string,\n//         name: string,\n//         description: string,\n//         tenantId: string,\n//     },\n//    ...\n// }\n```\n\n----------------------------------------\n\nTITLE: Creating User Object in Ruby for Permit.io\nDESCRIPTION: Defines a user object with required and optional fields for syncing with Permit.io. The key field must be unique and URL-friendly, while other fields like email, names, and custom attributes are optional.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/ruby/user/sync_user.mdx#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nuser = {\"key\": \"user-key\", \"email\": \"john@doe.com\", \"first_name\": \"John\", \"last_name\": \"Doe\", \"attributes\": {\"age\": \"26\"}}\n```\n\n----------------------------------------\n\nTITLE: Defining Roles and Permissions in Terraform for Permit.io\nDESCRIPTION: This snippet creates three roles (AccountOwner, AccountBeneficiary, and AccountMember) with their respective permissions. This configuration enables role-based access control (RBAC) policies.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/mesa-verde.mdx#2025-04-17_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"permitio_role\" \"AccountOwner\" {\n  key  = \"AccountOwner\"\n  name = \"Account Owner\"\n  permissions = [\n    \"Account:add-members\",\n    \"Account:add-beneficiaries\",\n    \"Account:read\",\n    \"Transaction:list\",\n    \"Wire_Transfer:create\",\n    \"Wire_Transfer:approve\",\n  ]\n  depends_on = [permitio_resource.Wire_Transfer, permitio_resource.Transaction, permitio_resource.Account]\n}\n\nresource \"permitio_role\" \"AccountBeneficiary\" {\n  key  = \"AccountBeneficiary\"\n  name = \"Account Beneficiary\"\n  permissions = [\n    \"Account:add-members\",\n    \"Account:read\",\n    \"Transaction:list\",\n  ]\n  depends_on = [permitio_resource.Account, permitio_resource.Transaction]\n}\n\nresource \"permitio_role\" \"AccountMember\" {\n  key  = \"AccountMember\"\n  name = \"Account Member\"\n  permissions = [\n    \"Account:read\",\n  ]\n  depends_on = [permitio_resource.Account]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Tenant Role with Permit.io API in .NET\nDESCRIPTION: This code snippet demonstrates how to get a single tenant role using the Permit.io API client in .NET. It requires the roleId parameter, which can be either the role's ID or key. The method returns the role information asynchronously.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/dotnet/role/GetRole.mdx#2025-04-17_snippet_0\n\nLANGUAGE: dotnet\nCODE:\n```\nvar roles = await permitClient.Api.GetRole(roleId);\n```\n\n----------------------------------------\n\nTITLE: Filtering Data Based on User Roles in Permit.io\nDESCRIPTION: This example demonstrates how to filter data based on user roles. It queries the Permit API to list all users who have been assigned the 'owner' role, which can be used to ensure users only see data they have permission to access.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/pink-mobile.mdx#2025-04-17_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst owners = await permit.api.roleAssignments.list({\n    tenant: \"default\",\n    role: \"owner\",\n  });\n```\n\n----------------------------------------\n\nTITLE: Creating User with Basic Attributes in Java\nDESCRIPTION: Demonstrates how to create a new user with basic information and custom attributes using the Permit API. The example shows setting user identification, personal information, and custom attributes for attribute-based access control.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/java/user/create.mdx#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.permit.sdk.openapi.models.UserCreate;\nimport io.permit.sdk.openapi.models.UserRead;\n\n// optional attributes for attribute-based access control\nHashMap<String, Object> userAttributes = new HashMap<>();\nuserAttributes.put(\"age\", Integer.valueOf(50));\nuserAttributes.put(\"fav_color\", \"red\");\n\nUserRead user = permit.api.users.create(\n    (new UserCreate(\"auth0|elon\"))\n        .withEmail(\"elonmusk@tesla.com\")\n        .withFirstName(\"Elon\")\n        .withLastName(\"Musk\")\n        .withAttributes(userAttributes)\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a User Set Condition for US Based Employees in JavaScript\nDESCRIPTION: This code snippet defines a user set condition for employees located in the United States. It uses the 'allOf' logical operator to combine two conditions: the user must have the role of 'employee' and must be located in the 'US'.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/working-with-abac/condition-sets.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"key\": \"us_based_employees\",\n    \"name\": \"US based employees\",\n    \"type\": \"userset\",\n    \"conditions\": {\n        \"allOf\": [\n            {\n                \"user.role\": {\n                    \"equals\": \"employee\"\n                }\n            },\n            {\n                \"user.location\": {\n                    \"in\": [\n                        \"US\"\n                    ]\n                }\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enforcing Permissions with Attributes in GoLang\nDESCRIPTION: This snippet shows how to use the permit.AllTenantsCheck function in GoLang with both user and resource attributes. It creates user and resource variables with attributes and performs the permission check across all tenants.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/enforce-permissions/all-tenants-check.mdx#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n)\nimport p \"github.com/permitio/permit-golang/pkg/permit\"\nimport \"github.com/permitio/permit-golang/pkg/config\"\nimport \"github.com/permitio/permit-golang/pkg/enforcement\"\n\nfunc main() {\n\t// Create permit client\n\tpermitConfig := config.NewConfigBuilder(\"<YOUR_API_TOKEN>\").Build()\n\tpermit := p.New(permitConfig)\n\n\t// Create user and resource variables with attributes\n\tuser := enforcement.UserBuilder(\"john@doe.com\").WithAttributes(map[string]string{\n        \"location\": \"England\",\n        \"department\": \"Engineering\",\n    }).Build()\n    resource := enforcement.ResourceBuilder(\"document\").WithAttributes(map[string]string{\n        \"hasApproval\": \"true\",\n    }).Build()\n\n\tvar allowedTenants []enforcement.TenantDetails\n\t// Check a user's permissions for a specified action on a resource across all tenants\n\tallowedTenants, err := permit.AllTenantsCheck(user, \"read\", resource);\n    if err != nil {\n\t\tfmt.Printf(\"Error enforcing permissions: %s\", err)\n\t} else if len(allowedTenants) > 0 {\n\t\tfmt.Println(\"John is PERMITTED to create a document in some tenant in the environment\")\n\t\tfor i, tenant := range allowedTenants {\n\t\t\tattributes, _ := json.MarshalIndent(tenant.Attributes, \"\", \"\\t\")\n\t\t\tfmt.Printf(\"%d. Allowed Tenant is '%s', attributes are:\\n%s\",\n\t\t\t\ti, tenant.Key, attributes,\n\t\t\t)\n\t\t}\n\t} else {\n\t\tfmt.Println(\"John is NOT PERMITTED to create a document in any tenant in the environment\")\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Permission Map for GraphQL Operations\nDESCRIPTION: This JavaScript object defines a mapping between GraphQL operations and Permit.io resources and actions. It's used to translate GraphQL queries and mutations into authorization checks.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/integrations/GraphQL/overview.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst PermissionMap = {\n\tlogin: { resource: \"user\", action: \"login\" },\n\tlogout: { resource: \"user\", action: \"logout\" },\n\tme: { resource: \"user\", action: \"get\" },\n\tlaunches: { resource: \"launch\", action: \"getall\" },\n\tgetlaunch: { resource: \"launch\", action: \"get\" },\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Existing Environment's GitOps Branch Name via API in Bash\nDESCRIPTION: This curl command demonstrates how to update an existing environment's GitOps branch name using a PATCH request to the Permit.io API.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/manage-your-account/creating-environments.mdx#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.permit.io/v2/projects/{project_id}/envs/{env_id}' -X 'PATCH' \\\n  -H 'authorization: Bearer {API_SECRET_KEY}'\\\n  --data-raw '{\"custom_branch_name\": \"new-env-branch-name\"}'\n```\n\n----------------------------------------\n\nTITLE: Initializing Permit SDK with Proxy Facts in Node.js\nDESCRIPTION: This snippet shows how to initialize the Permit SDK in Node.js with proxyFactsViaPdp enabled, create a user, and immediately check permissions.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/manage-data/local-facts-uploader.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Permit } from \"permit\";\n\n// Initialize SDK with proxy_facts_via_pdp enabled\nconst permit = new Permit({\n  token: \"<your-api-key>\",\n  pdp: \"http://localhost:7766\",\n  proxyFactsViaPdp: true\n});\n\nasync function createAndCheck() {\n  // Create user\n  const user = await permit.api.users.create({\n    key: \"user123\",\n    email: \"user@example.com\"\n  });\n  \n  // Check for permissions right after\n  const allowed = await permit.check(user.key, \"read\", \"document\");\n  console.log(`Permission granted: ${allowed}`);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a User in Permit.io\nDESCRIPTION: This snippet demonstrates how to create a user in Permit.io's system. It creates a user with the email 'john@acme.com' who will have direct 'viewer' access to a file.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/google-drive.mdx#2025-04-17_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://api.permit.io/v2/facts/$permit_project/$permit_env/users \\\n  -X POST \\\n  -H \"Authorization: Bearer $permit_sdk_api_key\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"key\": \"john@acme.com\"\n  }'\n```\n\nLANGUAGE: python\nCODE:\n```\nawait permit.api.sync_user(\n    {\n        \"key\": \"john@acme.com\",\n    }\n)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nawait permit.api.syncUser({\n  key: \"john@acme.com\",\n});\n```\n\n----------------------------------------\n\nTITLE: Syncing User to Permit Tenant\nDESCRIPTION: Synchronizes user information with Permit system.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/authentication/stytch/permit-integration.mdx#2025-04-17_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nawait permit.api.syncUser({\n  key: userId,\n  email: userEmail,\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Permit.io SDK with API Key\nDESCRIPTION: This code initializes the Permit object with the necessary configuration, including the PDP URL and the secret API key obtained from the Permit.io dashboard.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/integrations/GraphQL/apollo_server.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst permit = new Permit({\n  // in production, you might need to change this url to fit your deployment\n  pdp: \"https://cloudpdp.api.permit.io\",\n  // your api key\n  token: \"permit_key_secret\"\n});\n```\n\n----------------------------------------\n\nTITLE: Syncing User\nDESCRIPTION: Creating a new user in the permissions system using permit.api.sync_user()\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/tutorials/_quickstart-parts/_quickstart_python.mdx#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nuser = {\n    \"key\": \"john@smith.com\", # can be any unique string\n    \"firstName\": \"John\", # optional\n    \"lastName\": \"Smith\", # optional\n    \"email\": \"john@smith.com\", # optional\n}\nawait permit.write(permit.api.sync_user(user))\n```\n\n----------------------------------------\n\nTITLE: Syncing a User to Permit.io in Java\nDESCRIPTION: Creates a user object and synchronizes it with the Permit.io permission system. This is required once after user login to make the user available for permission checks.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/tutorials/_quickstart-parts/_quickstart_java.mdx#2025-04-17_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n// init your user (only needed ONCE, after the user first logins successfully)\nUser user = new User.Builder(\"[A_USER_ID]\")\n  .withEmail(\"john@smith.com\")\n  .withFirstName(\"John\")\n  .withLastName(\"Smith\")\n  // you can assign role to the user at login\n  .withRoles(new ArrayList<>(List.of(new AssignedRole[]{\n      new AssignedRole(\"roleId\", \"tenantId\"),\n      // example assign the user (at login) to the default tenant with an admin role\n      new AssignedRole(\"admin\", \"default\"),\n  })))\n  .build();\n\n// You need to call sync user in order to create the user in the\n// permission system and be able to ask permit.check() on that user\npermit.api.syncUser(user);\n```\n\n----------------------------------------\n\nTITLE: Creating Frontend-only Authorization (FoAz) Proxy in Permit.io\nDESCRIPTION: Configures a Frontend-only Authorization proxy named 'Boaz' with basic authentication and mapping rules for various document-related API endpoints. It defines how different HTTP methods and URLs map to resource actions.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/integrations/infra-as-code/terraform-provider.mdx#2025-04-17_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"permitio_proxy_config\" \"foaz\" {\n  key            = \"foaz\"\n  name           = \"Boaz\"\n  auth_mechanism = \"basic\"\n  auth_secret = {\n    basic = \"hello:world\"\n  }\n  mapping_rules = [\n    {\n      url = \"https://example.com/documents\"\n      http_method = \"post\"\n      resource = \"document\"\n      action = \"read\"\n    },\n    {\n      url = \"https://example.com/documents/{project_id}\"\n      http_method = \"get\"\n      resource = \"document\"\n      action = \"read\"\n    },\n    {\n      url = \"https://example.com/documents/{project_id}\"\n      http_method = \"put\"\n      resource = \"document\"\n      action = \"update\"\n      headers = {\n        \"x-update-id\": \"foaz\"\n      }\n    },\n    {\n      url = \"https://example.com/documents/{project_id}\"\n      http_method = \"delete\"\n      resource = \"document\"\n      action = \"delete\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Server-side Login Method in JavaScript\nDESCRIPTION: Implementation of the loginAs method for server-side authentication in Permit Elements. Requires userId and tenant parameters for user authentication.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/embeddable-uis/element-login.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\npermit.elements.loginAs({ userId, tenant });\n```\n\n----------------------------------------\n\nTITLE: Installing Permit.io SDK via NPM\nDESCRIPTION: Command to install the Permit.io SDK package using npm package manager\nSOURCE: https://github.com/permitio/docs/blob/master/docs/getting-started/_quickstart-parts/_quickstart_nodejs.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install permitio\n```\n\n----------------------------------------\n\nTITLE: Unassigning a Role from a User using Permit.io API in Java\nDESCRIPTION: This code snippet demonstrates how to use the permit.api.users.unassignRole() method to remove a role from a user within a specific tenant. It takes the user identifier, role identifier, and tenant identifier as parameters.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/java/role/unassign-role.mdx#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npermit.api.users.unassignRole(\"elon@tesla.com\", \"admin\", \"tesla\");\n```\n\n----------------------------------------\n\nTITLE: Syncing New User to Permit.io with JavaScript\nDESCRIPTION: This JavaScript snippet synchronizes newly created users with Permit.io by calling the API's syncUser method, passing the user's email as both the key and email identifier.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/mesa-verde.mdx#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Add User to Tenant\nawait permit.api.syncUser({\n  key: email,\n  email,\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Permission Check Example\nDESCRIPTION: Example of performing a basic permission check using string parameters for user, action, and resource.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/getting-started/_quickstart-parts/_quickstart_ruby.mdx#2025-04-17_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'permit-sdk'\npermit = Permit.new(\"TOKEN\", \"localhost:7766\") # the PDP url is optional\n\npermitted = permit.check(\"john@permit.io\", \"create\" , \"document\")\nif permitted\n  puts \"john@permit.io is permitted to create a document\"\nelse\n  puts \"john@permit.io is not permitted to create a document\"\nend\n```\n\n----------------------------------------\n\nTITLE: Updating a Resource with the Permit.io API in Java\nDESCRIPTION: This example demonstrates how to update a resource named 'document' by changing its description using the Permit.io SDK. The update method accepts a resource key and a ResourceUpdate object containing the fields to be updated.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/java/resource/update.mdx#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.permit.sdk.openapi.models.ResourceUpdate;\n\npermit.api.resources.update(\"document\", new ResourceUpdate().withDescription(\"new description\"));\n```\n\n----------------------------------------\n\nTITLE: Creating Editor Role Derivation with Python\nDESCRIPTION: Updates the 'editor' role for files to be automatically granted to users who have the 'editor' role on parent folders using the Python SDK. This creates a permission inheritance pathway.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/google-drive.mdx#2025-04-17_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nawait permit.api.resource_roles.update(\n    \"file\",\n    \"editor\",\n    {\n        \"granted_to\": {\n            \"users_with_role\": [\n                {\n                    \"linked_by_relation\": \"parent\",\n                    \"on_resource\": \"folder\",\n                    \"role\": \"editor\",\n                },\n            ],\n        },\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Timeout for Specific Operations in Python\nDESCRIPTION: This snippet demonstrates how to override the default timeout for a specific operation in Python using the Permit SDK.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/manage-data/local-facts-uploader.mdx#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# SDK initialization with proxy_facts_via_pdp enabled\npermit = Permit(\n    token=\"<your-api-key>\",\n    pdp=\"http://localhost:7766\",\n    proxy_facts_via_pdp=True\n)\n\n# Override the default timeout for a specific operation\nwith permit.wait_for_sync(timeout=15) as p:\n    user = await p.api.users.create({ /* user data */ })\n```\n\n----------------------------------------\n\nTITLE: Creating New Tenant with Permit.io API\nDESCRIPTION: HTTP request to create a new tenant in Permit.io. Requires API secret key, project ID, and environment ID. Creates a tenant with a specified key, name, and description.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/examples/create-tenant.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.permit.io/v2/facts/{project_id}/{env_id}/tenants' \\\n  -H 'authorization: Bearer API_SECRET_KEY'\n  --data-raw '{\"key\":\"new-tenant-name\",\"name\":\"New Tenant Name\",\"description\":\"New tenant description\"}' \\\n```\n\n----------------------------------------\n\nTITLE: Defining ReBAC Policy for Parent-Child Hierarchy\nDESCRIPTION: Shows how to define a ReBAC policy for a parent-child hierarchy, where ownership of a folder implies ownership of files within that folder.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/build-policies/rebac/overview.mdx#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```\nA `user` assigned the role `Folder#Owner` will also be assigned the `File#Owner` when the `Folder instance` is `Parent` of `File instance`.\n```\n```\n\n----------------------------------------\n\nTITLE: Importing Permit.io SDK\nDESCRIPTION: Two methods to import the Permit SDK into Node.js code using either ES6 import syntax or CommonJS require\nSOURCE: https://github.com/permitio/docs/blob/master/docs/getting-started/_quickstart-parts/_quickstart_nodejs.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Permit } from \"permitio\";\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Permit } = require(\"permitio\");\n```\n\n----------------------------------------\n\nTITLE: Get User Permissions Across Resources\nDESCRIPTION: Shows how to use permit.GetUserPermissions to retrieve all permissions for a specific user across different resources and tenants. The example demonstrates listing Bob's permissions for various blog posts.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/overview/advanced-authorization-queries.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<CodeBlock folderPath=\"/walkthroughs/authz-queries/getUserPermissions\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Role Payload in C#\nDESCRIPTION: This snippet demonstrates the structure of a role payload object in C#. It includes properties for the role's key, name, description, permissions, and extended roles.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/dotnet/role/CreateRole.mdx#2025-04-17_snippet_0\n\nLANGUAGE: dotnet\nCODE:\n```\n{\n\tKey: \"editor\",\n\tName: \"Editor\",\n\tDescription: \"the editor role can read and write to documents\",\n\tPermissions: [\"document:write\"],\n\tExtends: [\"viewer\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Permit.io SDK in Java\nDESCRIPTION: Code snippet for creating a new instance of the Permit.io SDK in a Java application.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/getting-started/_quickstart-parts/_quickstart_java.mdx#2025-04-17_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nimport io.permit.sdk.Permit;\nimport io.permit.sdk.PermitConfig;\n\nPermit permit = new Permit(\n    new PermitConfig.Builder(\"[YOUR_API_KEY]\")\n        .withPdpAddress(\"http://localhost:7766\")\n        .withDebugMode(false)\n        .build()\n    );\n```\n\n----------------------------------------\n\nTITLE: Implementing UI Feature Toggling with CASL in React\nDESCRIPTION: Demonstrates conditional rendering of UI components based on user permissions using CASL library integration with Permit.io. Shows how to toggle visibility of wire transfer and user management buttons based on user abilities.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/mesa-verde.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  abilities?.CREATE_WIRE_TRANSFER && (\n    <Button type=\"primary\" onClick={() => setActiveModal(ModalType.WIRE_TRANSFER)}>\n      Send Wire Transfer\n    </Button>\n  );\n}\n{\n  abilities?.ADD_MEMBERS && (\n    <Button\n      type=\"default\"\n      onClick={() => setActiveModal(ModalType.USER_MANAGEMENT)}\n      disabled={!userJwt}\n    >\n      Manage Account Users\n    </Button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting User from Permit.io\nDESCRIPTION: Removes a user from Permit.io system using the user's key. Should be called when removing users from the application to maintain consistency with Auth0.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/authentication/auth0/permit-integration.mdx#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst removedUser = await permit.api.deleteUser(permitUserObj.key);\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Policy Guard Scope by ID using cURL\nDESCRIPTION: This snippet shows how to retrieve details about a specific policy guard scope using its ID. It sends a GET request to the Policy Guard API with the scope ID in the URL path.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/policy-guard/policy_guard_api.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.permit.io/v2/policy_guards/scopes/{policy_guard_scope_id}' \\\n-H 'authorization: Bearer API_SECRET_KEY'\n```\n\n----------------------------------------\n\nTITLE: Deleting a Tenant using Permit.io API in Go\nDESCRIPTION: Implementation example showing how to delete a tenant using the Permit.io API. The operation requires a context object and the tenant key as parameters. The tenant key can be either the tenant ID or the tenant's unique key identifier.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/golang/tenant/Delete.mdx#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nerr := Permit.Api.Tenants.Delete(ctx, \"tenantKey\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Permit Client with Cloud PDP in Ruby\nDESCRIPTION: Creates a Permit client instance in Ruby connected to the managed Cloud PDP. Requires an API key and the Cloud PDP URL as parameters.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/concepts/pdp/overview.mdx#2025-04-17_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'permit'\n\npermit = Permit.new(\n  \"[your-api-key]\",\n  \"https://cloudpdp.api.permit.io\"\n)\n```\n\n----------------------------------------\n\nTITLE: Transaction Permission Check with Attributes in JavaScript\nDESCRIPTION: Advanced permission check example for creating transactions, including user attributes like strongAuth and location, along with transaction-specific attributes.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/mesa-verde.mdx#2025-04-17_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst transactionAllowed = await permit.check(\n  {\n    key: user,\n    attributes: { strongAuth: !!OTP, location },\n  },\n  \"create\",\n  {\n    type: \"Transaction\",\n    attributes: { ...transaction },\n    tenant,\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: User Synchronization in Permit.io v2 SDK\nDESCRIPTION: Example of user synchronization using the v2 Python SDK, demonstrating the simplified API for syncing user data.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/v2-migration-guide.mdx#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nawait permit.api.sync_user(user)\n```\n\n----------------------------------------\n\nTITLE: Assigning a Role to a User\nDESCRIPTION: Assigns a specific role to a user within a particular tenant using the assign_role API method.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/tutorials/_quickstart-parts/_quickstart_python_sync.mdx#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\npermit.write(\n    permit.api.assign_role(\"john@smith.com\", \"viewer\", \"cool_company_inc\")\n)\n```\n\n----------------------------------------\n\nTITLE: Assigning a Project to a Policy Guard Scope using cURL\nDESCRIPTION: This snippet shows how to associate a project with an existing policy guard scope. It sends a POST request to the Policy Guard API with the scope ID in the URL path and the project ID in the request body.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/policy-guard/policy_guard_api.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST 'https://api.permit.io/v2/policy_guards/scopes/{policy_guard_scope_id}/associate' \\\n-H 'authorization: Bearer API_SECRET_KEY' \\\n--data-raw '{\n    \"project_id\": \"c3b6f5d7-8b1e-4c6d-9e9f-8c9d6f8e0c8f\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating Users with Permit.io API\nDESCRIPTION: This snippet demonstrates how to create users using the Permit.io API. It creates an admin user and a regular user, each with a unique identifier and email address.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/rbac/rbac-example.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# create the first user (we will assign this user to the admin role)\ncurl 'https://api.permit.io/v2/facts/{project_id}/{env_id}/users' \\\n  -H 'authorization: Bearer API_SECRET_KEY' \\\n  --data-raw '{\"key\":\"unique_id_for_admin_username\",\"email\":\"admin@domain.com\",\"first_name\":\"\",\"last_name\":\"\"}'\n\n# create another user\n'https://api.permit.io/v2/facts/{project_id}/{env_id}/users' \\\n  -H 'authorization: Bearer API_SECRET_KEY' \\\n  --data-raw '{\"key\":\"unique_id_for_username\",\"email\":\"user@domain.com\",\"first_name\":\"\",\"last_name\":\"\"}'\n```\n\n----------------------------------------\n\nTITLE: Creating an Editor Role in Permit.io\nDESCRIPTION: POST request to create a new role called 'editor' that will be assigned to groups or users who need edit access to resources. This role will later be used in role derivation for group members.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/rebac/groups.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.permit.io/v2/schema/{proj_id}/{env_id}/roles' \\\n -H 'authorization: Bearer API_SECRET_KEY' \\\n --data-raw '{\"key\": \"editor\", \"name\": \"editor\"}'\n```\n\n----------------------------------------\n\nTITLE: Querying Assigned User Roles in .NET\nDESCRIPTION: Demonstrates how to fetch all roles assigned to a specific user using the Permit.io client API. The method accepts a required userId parameter and an optional tenantId parameter to filter results by tenant. If no tenantId is provided, roles from all tenants are returned.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/dotnet/role/ListAssignedRoles.mdx#2025-04-17_snippet_0\n\nLANGUAGE: dotnet\nCODE:\n```\nconst roles = await permitClient.Api.ListAssignedRoles(userId, tenantId);\n```\n\n----------------------------------------\n\nTITLE: Creating Bulk Users with Permit.io API\nDESCRIPTION: A curl command that demonstrates how to create multiple users at once using the Permit.io API. The request allows adding users with their personal details including key, email, name, and custom attributes.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/nodejs/bulk-requests-examples.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n'https://api.permit.io/v2/facts/{proj_id}/{env_id}/bulk/users' \\\n  -H 'authorization: Bearer API_SECRET_KEY' \\\n  -D '{\n            \"operations\": [{\n            \"key\": \"user|892179821739812389327\",\n            \"email\": \"jane@coolcompany.com\",\n            \"first_name\": \"Jane\",\n            \"last_name\": \"Doe\",\n            \"attributes\": {}\n            }, ...]\n        }'\n```\n\n----------------------------------------\n\nTITLE: Configuring Permit SDK with Timeout Options in Node.js\nDESCRIPTION: This snippet demonstrates how to configure the Permit SDK in Node.js with additional timeout and policy options for consistent updates.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/manage-data/local-facts-uploader.mdx#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// SDK-level configuration (applies to all operations)\nconst permit = new Permit({\n  token: \"<your-api-key>\",\n  pdp: \"http://localhost:7766\",\n  proxyFactsViaPdp: true,\n  factsSyncTimeout: 10,           // Optional: Uses PDP default if not specified\n  factsSyncTimeoutPolicy: \"ignore\" // Optional: Uses PDP default if not specified\n});\n\n// All operations will use the SDK-level settings\nconst user = await permit.api.users.create({ /* user data */ });\n```\n\n----------------------------------------\n\nTITLE: Querying Tenants using Permit.io API in JavaScript\nDESCRIPTION: Makes an API call to list tenants with optional search and pagination parameters. Supports filtering tenants by name/key, specifying page number, and results per page (max 100).\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/nodejs/tenant/list-tenants.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait permit.api.tenants.list({\n  search: \"example\",\n  page: 1,\n  perPage: 20,\n});\n```\n\n----------------------------------------\n\nTITLE: Update Tenant API Implementation - JavaScript\nDESCRIPTION: Example showing how to call the updateTenant API method with the tenant ID and updated tenant information payload.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/nodejs/tenant/update-tenant.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await permit.api.updateTenant(\n\ttenantId,\n\tJSON.stringify(tenant)\n);\n```\n\n----------------------------------------\n\nTITLE: Fetching Tenant Information using Permit.io API in C#\nDESCRIPTION: This code snippet demonstrates how to use the GetTenant method of the Permit.io API client to retrieve tenant information. It requires the tenantId parameter, which can be either the tenant's ID or key. The method is asynchronous and returns the tenant object.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/dotnet/tenant/GetTenant.mdx#2025-04-17_snippet_0\n\nLANGUAGE: dotnet\nCODE:\n```\nvar tenant = await permitClient.Api.GetTenant(tenantId);\n```\n\n----------------------------------------\n\nTITLE: Unassigning a Role from a User using Permit.io API in .NET\nDESCRIPTION: This code snippet demonstrates how to use the UnassignRole method from the Permit.io API client to remove a role from a user within a specific tenant. It requires the user ID, role ID, and tenant ID as parameters.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/dotnet/role/UnassignRole.mdx#2025-04-17_snippet_0\n\nLANGUAGE: dotnet\nCODE:\n```\nvar response = await permitClient.Api.UnassignRole(userId, roleId, tenantId);\n```\n\n----------------------------------------\n\nTITLE: Configuring Condition Set Rules for Large Transactions with HCL\nDESCRIPTION: This HCL snippet configures a condition set rule allowing the 'Safe Owners' user set to perform 'create' actions on 'Large Transaction' resources. It uses Terraform to define the permission relationship.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/mesa-verde.mdx#2025-04-17_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"permitio_condition_set_rule\" \"allow_safeowners_large_transactions\" {\n  user_set     = permitio_user_set.Safe_Owners.key\n  resource_set = permitio_resource_set.Large_Transaction.key\n  permission   = \"Transaction:create\"\n  depends_on   = [permitio_resource_set.Large_Transaction, permitio_user_set.Safe_Owners]\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering for Attribute-Based Access Control (ABAC)\nDESCRIPTION: This snippet shows how to use permitState for Attribute-Based Access Control (ABAC). It checks permissions based on user attributes (department, salary) and resource attributes (country).\nSOURCE: https://github.com/permitio/docs/blob/master/docs/integrations/feature-flagging/casl.mdx#2025-04-17_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<div>\n  {permitState?.check(\n    \"view\",\n    \"files_for_poland_engineers\",\n    {\n      department: \"Engineering\",\n      salary: \"100K\",\n    },\n    {\n      country: \"PL\",\n    }\n  )}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing User Creation with Permit Client\nDESCRIPTION: Shows how to use the Permit client to create a new user by calling the CreateUser API with the user object. This async operation returns a response containing the created user details.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/dotnet/user/CreateUser.mdx#2025-04-17_snippet_1\n\nLANGUAGE: dotnet\nCODE:\n```\nvar response = await permitClient.Api.CreateUser(userObj);\n```\n\n----------------------------------------\n\nTITLE: Initializing Tenant Creation Object in Go\nDESCRIPTION: This snippet demonstrates how to create a new TenantCreate object with a key and name, and then update the name. It uses the models package from the Permit SDK.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/golang/tenant/Create.mdx#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntenantCreate := models.NewTenantCreate(\"tenant-key\", \"tenant-name\")\ntenantCreate.SetName(\"tenant-name-new\")\n```\n\n----------------------------------------\n\nTITLE: Checking Permissions with Permit.io SDK in Java\nDESCRIPTION: Java code demonstrating how to perform a permission check using the Permit.io SDK.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/getting-started/_quickstart-parts/_quickstart_java.mdx#2025-04-17_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nimport io.permit.sdk.enforcement.Resource;\nimport io.permit.sdk.enforcement.User;\n\nboolean permitted = permit.check(\n  User.fromString(\"[A_USER_ID]\"),\n  \"create\",\n  new Resource.Builder(\"document\").withTenant(\"default\").build()\n);\n\nif (permitted) {\n  System.out.println(\"User is PERMITTED to create a document\");\n} else {\n  System.out.println(\"User is NOT PERMITTED to create a document\");\n}\n```\n\n----------------------------------------\n\nTITLE: Listing User Tenants with JavaScript\nDESCRIPTION: This JavaScript snippet retrieves a list of tenants from Permit.io, allowing the application to display accounts that a user has assigned roles in. It paginates results with 100 items per page.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/mesa-verde.mdx#2025-04-17_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst tenants = await permit.api.tenants.list({\n  perPage: 100,\n});\n```\n\n----------------------------------------\n\nTITLE: Assigning Role in Java\nDESCRIPTION: Java implementation for assigning a role to a user. Calls the assignRole API method with user ID, role key, and tenant external ID parameters.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/tutorials/Onboarding/connect-your-app.mdx#2025-04-17_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nassignedRole = permit.api.assignRole(user.customId, Role.key, Tenant.externalId);\n```\n\n----------------------------------------\n\nTITLE: Auth0 Post-Login Action to Add Roles to Tokens\nDESCRIPTION: JavaScript code for an Auth0 Action that adds user roles to ID and access tokens after successful authentication.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/authentication/auth0/auth0-demo-app.mdx#2025-04-17_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @param {Event} event - Details about the user and the context in which they are logging in.\n * @param {PostLoginAPI} api - Interface whose methods can be used to change the behavior of the login.\n */\nexports.onExecutePostLogin = async (event, api) => {\n  const namespace = 'my_app_name';\n  if (event.authorization) {\n    api.idToken.setCustomClaim(`${namespace}/roles`, event.authorization.roles);\n    api.accessToken.setCustomClaim(`${namespace}/roles`, event.authorization.roles);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing the createResource API Call\nDESCRIPTION: Demonstrates how to call the Permit.io API's createResource method with a stringified resource object. This async function sends the resource data to the API and awaits the response.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/nodejs/resource/create-resource.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await permit.api.createResource(JSON.stringify(resource));\n```\n\n----------------------------------------\n\nTITLE: Creating Environment-level Role with Permissions\nDESCRIPTION: Demonstrates creation of a Manager role with specific permissions across multiple resources using the Permit SDK.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/pink-mobile.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nawait permit.api.roles.create({\n    key: \"manager\",\n    name: \"Manager\",\n    permissions: [\n      \"representatives:assign\",\n      \"account:view\",\n      \"users:create\",\n      \"representatives:list\",\n      \"plan:view\",\n      \"users:list\",\n    ],\n  });\n```\n\n----------------------------------------\n\nTITLE: Assigning Role to User\nDESCRIPTION: Shows how to assign a role to an existing user in Permit using the API endpoints.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/overview/sync-your-first-user-with-sdk.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nrole_assignments: [{ role: \"manager\", tenant: \"default\" }]\n```\n\n----------------------------------------\n\nTITLE: Initializing Permit in Backend\nDESCRIPTION: Initializes an instance of Permit in the backend using the SDK Secret Key. This is required to use Permit Elements and only needs to be done once.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/elements/operation_approval.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncode.initialize_node\n```\n\nLANGUAGE: python\nCODE:\n```\ncode.initialize_python\n```\n\nLANGUAGE: c\nCODE:\n```\ncode.initialize_dotnet\n```\n\nLANGUAGE: java\nCODE:\n```\ncode.initialize_java\n```\n\n----------------------------------------\n\nTITLE: Defining Condition Set Rule for Repository Cloning in JavaScript\nDESCRIPTION: This code snippet demonstrates how to define a condition set rule using JavaScript object notation. It specifies that US-based employees have permission to clone private repositories.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/working-with-abac/condition-set-rules.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"user_set\": \"us_based_employees\",\n    \"permissions\": [\n        \"repository:clone\"\n    ],\n    \"resource_set\": \"private_repos\"\n}\n```\n\n----------------------------------------\n\nTITLE: Tenant Payload Structure in JavaScript\nDESCRIPTION: JSON structure defining a tenant object for the Permit.io API. Includes required fields like key and name, as well as optional fields like description and attributes.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/nodejs/tenant/create-tenant.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\tkey: \"key\",\n\tname: \"name\",\n\tdescription: \"description\",\n\tattributes: {}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Middleware with Hanko\nDESCRIPTION: Next.js middleware implementation for authenticating users with Hanko and redirecting unauthenticated users to the login page.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/authentication/hankopermit.mdx#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst authenticateUser = async (req: NextRequest): Promise<string> => {\nif (!hankoApiUrl) {\nreturn \"\";\n}\n\n// Get Hanko token from cookie\nconst hanko = req.cookies.get(\"hanko\")?.value;\n\n...\n\n// Authenticate user using Hanko\nconst user = await authenticateUser(req);\n\n// Redirect to login page if user is not authenticated\nif (!user) {\nurlToRedirect.pathname = LOGIN_URL;\nreturn NextResponse.rewrite(urlToRedirect);\n}\n```\n\n----------------------------------------\n\nTITLE: Frontend FoAz API Request Example\nDESCRIPTION: JavaScript example showing how to make a request to the FoAz API using fetch to access Stripe's customer endpoint.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/foaz/detailed-guide.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await fetch(\n\t\"https://proxy.api.permit.io/proxy/<Proxy Config ID>?url=https://api.stripe.com/v1/customers/customer_123\",\n\t{\n\t\tmethod: \"GET\",\n\t\theaders: {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\"x-permit-example\": \"example\"\n\t\t}\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Granting Account Admin Role to Folder Editor using Node.js\nDESCRIPTION: Node.js implementation to update the folder 'editor' role to include account admins. This grants account administrators edit permissions on folders in their account.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/google-drive.mdx#2025-04-17_snippet_44\n\nLANGUAGE: python\nCODE:\n```\nawait permit.api.resourceRoles.update(\n    \"folder\",\n    \"editor\",\n    {\n        \"granted_to\": {\n            \"users_with_role\": [\n                {\n                    \"linked_by_relation\": \"account\",\n                    \"on_resource\": \"account\",\n                    \"role\": \"admin\",\n                },\n                {\n                    \"linked_by_relation\": \"parent\",\n                    \"on_resource\": \"folder\",\n                    \"role\": \"editor\",\n                },\n            ]\n        }\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Assigning a Role to a User in C# using Permit API\nDESCRIPTION: This code snippet demonstrates how to assign a role to a user using the AssignRole function from the Permit API. It takes the user's custom ID, role ID, and tenant's external ID as parameters and returns the assigned role details.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/reference/SDKs/Dotnet/assign_role.mdx#2025-04-17_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nassignedRole = await permit.Api.AssignRole(user.customId, Role.id, Tenant.externalId);\n\n// returns the assigned role with RoleAssignment type\n// {\n//     id: string,\n//     role: {\n//         id: string,\n//         name: string,\n//         description: string,\n//         tenantId: string,\n//     },\n//     user: string,\n//     scope: string,\n// }\n```\n\n----------------------------------------\n\nTITLE: Fetching Resource List with Permit.io API in Java\nDESCRIPTION: Retrieves an array of resources using the Permit.io API client. Supports optional pagination parameters 'page' for selecting the result page number (starting at 1) and 'perPage' for specifying results per page (defaults to 100).\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/java/resource/list.mdx#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nResourceRead[] resources = permit.api.resources.list();\n```\n\n----------------------------------------\n\nTITLE: Creating ResourceUpdate Object in Go for Permit API\nDESCRIPTION: This snippet demonstrates how to create a ResourceUpdate object in Go for updating a resource in the Permit API. It shows setting the name and description of the resource.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/golang/resource/Update.mdx#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nresourceUpdate := models.NewResourceUpdate()\nresourceUpdate.SetName(\"New Name\")\nresourceUpdate.SetDescription(\"New Description\")\n```\n\n----------------------------------------\n\nTITLE: Deleting User with Permit.io API in Go\nDESCRIPTION: Demonstrates how to delete a user from Permit.io using the user key. The delete operation requires a context object and the unique user key as parameters. The function returns an error if the deletion fails.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/golang/user/Delete.mdx#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nerr := Permit.Api.Users.Delete(ctx, \"user-key\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Cloud PDP\nDESCRIPTION: JavaScript code to initialize the Permit SDK with cloud PDP configuration. Requires API key and connects to the Permit.io Cloud PDP service.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/overview/run-pdp.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst permit = new Permit({\n  pdp: \"https://cloudpdp.api.permit.io\",\n  // your API Key\n  token: \"[YOUR_API_KEY]\",\n});\n```\n\n----------------------------------------\n\nTITLE: Synchronizing User with Initial Roles\nDESCRIPTION: Creates a user in Permit.io and assigns initial roles to the user in specified tenants.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/tutorials/_quickstart-parts/_quickstart_python_sync.mdx#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nuser = {\n    \"key\": \"john@smith.com\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Smith\",\n    \"email\": \"john@smith.com\",\n    # John will be assigned the admin role in the default tenant upon creation\n    \"roles\": [{\"role\":\"admin\", \"tenant\": \"default\"}]\n}\npermit.write(permit.api.sync_user(user))\n```\n\n----------------------------------------\n\nTITLE: Creating Role Derivation with cURL\nDESCRIPTION: Example of how to create role derivation using cURL. This grants the 'editor' role on 'file' resources to users who have the 'editor' role on the parent 'folder' resource.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/rebac/rebac-api-calls.mdx#2025-04-17_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://api.permit.io/v2/schema/$permit_project/$permit_env/resources/file/roles/editor \\\n  -X PATCH \\\n  -H \"Authorization: Bearer $permit_sdk_api_key\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"granted_to\": {\n        \"users_with_role\": [\n            {\n                \"linked_by_relation\": \"parent\",\n                \"on_resource\": \"folder\",\n                \"role\": \"editor\"\n            }\n        ]\n\t}\n  }'\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering for Role-Based Access Control (RBAC)\nDESCRIPTION: This example demonstrates how to use permitState to conditionally render a component based on Role-Based Access Control (RBAC). It checks if the user has permission to view a document.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/integrations/feature-flagging/casl.mdx#2025-04-17_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<div>\n  {permitState?.check(\"view\", \"document\") && (\n    <div className=\"bg-white m-4 p-4 h-full\">Document</div>\n  )}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Syncing Resources and Actions with Permit using C#\nDESCRIPTION: This code snippet demonstrates how to define a resource with its associated actions and synchronize them with Permit. It creates a 'document' resource with a 'create' action, sets properties for the action, and uses the SyncResources method to update Permit's permission system.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/_Dotnet/sync_resources.mdx#2025-04-17_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nstring resourceName = \"document\";\nstring actionName = \"create\";\n// define the action title and description (can be empty)\nActionProperties actionProperties = new ActionProperties(\n    \"Create document\",\n    \"Ability to create document\"\n);\n// define the action\nDictionary<string, ActionProperties> resourceActions = new Dictionary<string, ActionProperties>{{ actionName, actionProperties }};\n// define the resource with its actions\nResourceType[] resourcesToSync = { new ResourceType(resourceName, resourceActions) };\n// sync the resources to Permit\nvar syncedResources = await permit.Api.SyncResources(resourcesToSync);\n\n// SyncResources returns true if the resource was synced otherwise false\n```\n\n----------------------------------------\n\nTITLE: Fetching User List with Permit API in Java\nDESCRIPTION: This code snippet demonstrates how to fetch a paginated list of users using the Permit SDK. It imports the necessary model class and calls the list() method on the users API to retrieve user data.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/java/user/list.mdx#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.permit.sdk.openapi.models.PaginatedResultUserRead;\n\nPaginatedResultUserRead users = permit.api.users.list();\n```\n\n----------------------------------------\n\nTITLE: Filtering Roles by Role Attributes using Permit.io API\nDESCRIPTION: Filter roles based on specific attributes like color and access level. The attr_ prefix identifies query parameters as attribute filters, allowing you to narrow down search results based on custom attributes.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/examples/filter-role-associations.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.permit.io/v2/schema/{project}/{environment}/roles?attr_color=red&attr_access_level=high' \\\n  -H 'authorization: Bearer API_SECRET_KEY'\n```\n\n----------------------------------------\n\nTITLE: Get User Permissions for Transactions in JavaScript\nDESCRIPTION: Example demonstrating how to query allowed transaction instances for a user within a specific tenant using getUserPermissions() function.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/mesa-verde.mdx#2025-04-17_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst transactionInstances = await permit.getUserPermissions(key, [tenant], [], [\"Transaction\"]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Role Update in Go\nDESCRIPTION: Executes the role update operation using the Permit API client. Takes a context, role key, and role update model as parameters.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/golang/role/Update.mdx#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nrole, err := Permit.Api.Roles.Create(ctx, \"role-key\", *roleUpdate)\n```\n\n----------------------------------------\n\nTITLE: Server-side Login Using Cookies\nDESCRIPTION: Implements a server-side login route using cookies for authentication. This allows clients to log in and access Permit Elements.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/elements/operation_approval.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncode.cookies_node\n```\n\nLANGUAGE: python\nCODE:\n```\ncode.cookies_python\n```\n\nLANGUAGE: c\nCODE:\n```\ncode.cookies_dotnet\n```\n\nLANGUAGE: java\nCODE:\n```\ncode.cookies_java\n```\n\n----------------------------------------\n\nTITLE: Initializing Permit SDK with Proxy Facts in Go\nDESCRIPTION: This snippet illustrates how to initialize the Permit SDK in Go with WithProxyFactsViaPdp enabled, create a user, and immediately check permissions.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/manage-data/local-facts-uploader.mdx#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/permitio/permit-golang/pkg/config\"\n\t\"github.com/permitio/permit-golang/pkg/models\"\n\t\"github.com/permitio/permit-golang/pkg/permit\"\n)\n\nfunc main() {\n\tctx := context.Background()\n\t\n\t// Initialize SDK with proxy_facts_via_pdp enabled\n\tpermitConfig := config.NewConfigBuilder(\"<YOUR_API_KEY>\").\n\t\tWithPdpUrl(\"http://localhost:7766\").\n\t\tWithProxyFactsViaPdp().\n\t\tBuild()\n\tpermit := permit.New(permitConfig)\n\n\t// Create user\n\tnewUser := models.NewUserCreate(\"user123\")\n\tnewUser.Email = \"user@example.com\"\n\tuser, _ := permit.Api.Users.CreateUser(ctx, *newUser)\n\n    // Check for permissions right after\n\tallowed, _ := permit.Check(user.Key, \"read\", \"document\")\n\tfmt.Printf(\"Permission granted: %v\\n\", allowed)\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Users per Tenant (Bash)\nDESCRIPTION: This curl command retrieves users for a specific tenant using the Permit.io API. It includes the tenant_id parameter and pagination options.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/examples/list-user-permissions.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.permit.io/v2/facts/{project_id}/{env_id}/tenants/tenant_id/users?search=key@permit.io&page=1&per_page=3' \\\n  -H 'authorization: Bearer API_SECRET_KEY'\n```\n\n----------------------------------------\n\nTITLE: Denying Access Request with Permit.io API\nDESCRIPTION: API endpoint for denying an access request. Requires API secret key authentication and accepts optional reviewer comments. Returns the updated access request object with denied status.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/elements/access-request-api.mdx#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.permit.io/v2/facts/{proj_id}/{env_id}/access_requests/{elements_config_id}/user/{user_ident}/tenant/{tenant_ident}/{access_request_id}/deny' \\\n    -H 'authorization: Bearer API_SECRET_KEY'  \\\n  --data-raw\n     \"reviewer_comment\": \"need more info\",\n }\\\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"requesting_user_id\": \"1c1e4ada-f282-40e6-b3b7-20b3a51c93b5\",\n    \"access_request_details\": {\n        \"tenant\": \"34f5c98e-f430-457b-a812-92637d0c6fd0\",\n        \"resource\": \"4d5215ed-38bb-48ed-879a-fdb9ca58522f\",\n        \"resource_instance\": \"2d98d9f8-e1b7-4f1d-baad-2edbf6fa6c66\",\n        \"role\": \"ac4e70c8-d5be-48af-93eb-760f58fc91a9\"\n    },\n    \"reason\": \"done onboarding\",\n    \"org_id\": \"7c60d51f-b44e-4682-87d6-449835ea4de6\",\n    \"project_id\": \"405d8375-3514-403b-8c43-83ae74cfe0e9\",\n    \"env_id\": \"40ef0e48-a11f-4963-a229-e396c9f7e7c4\",\n    \"created_at\": \"2019-08-24T14:15:22Z\",\n    \"updated_at\": \"2019-08-24T14:15:22Z\",\n    \"status\": \"deny\",\n    \"reviewer_user_id\": \"1b287364-14ff-4b72-8953-b40399093a6f\",\n    \"reviewed_at\": \"2019-08-24T14:15:22Z\",\n    \"reviewer_comment\": \"need more info\"\n}\n```\n\n----------------------------------------\n\nTITLE: Granting Account Admin Role to Folder Editor using Python\nDESCRIPTION: Python implementation to update the folder 'editor' role with role derivations for account admins. This permits account administrators to edit any folder in their account.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/google-drive.mdx#2025-04-17_snippet_43\n\nLANGUAGE: python\nCODE:\n```\nawait permit.api.resource_roles.update(\n    \"folder\",\n    \"editor\",\n    {\n        \"granted_to\": {\n            \"users_with_role\": [\n                {\n                    \"linked_by_relation\": \"account\",\n                    \"on_resource\": \"account\",\n                    \"role\": \"admin\",\n                },\n                {\n                    \"linked_by_relation\": \"parent\",\n                    \"on_resource\": \"folder\",\n                    \"role\": \"editor\",\n                },\n            ]\n        }\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Permit SDK with Proxy Facts in Python\nDESCRIPTION: This snippet demonstrates how to initialize the Permit SDK in Python with proxy_facts_via_pdp enabled, create a user, and immediately check permissions.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/manage-data/local-facts-uploader.mdx#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom permit import Permit\n\n# Initialize SDK with proxy_facts_via_pdp enabled\npermit = Permit(\n    token=\"<your-api-key>\",\n    pdp=\"http://localhost:7766\",\n    proxy_facts_via_pdp=True\n)\n\nasync def create_and_check():\n    # Create user\n    user = await permit.api.users.create({\n        \"key\": \"user123\",\n        \"email\": \"user@example.com\"\n    })\n    \n    # Check for permissions right after\n    allowed = await permit.check(user.key, \"read\", \"document\")\n    print(f\"Permission granted: {allowed}\")\n```\n\n----------------------------------------\n\nTITLE: Unassigning a Role from a User Using Permit.io SDK in Go\nDESCRIPTION: This example demonstrates how to unassign a role from a user within a specific tenant using the Permit.io SDK. The function requires a context, user key, role key, and tenant key as parameters and returns the updated user object or an error.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/golang/user/UnassignRole.mdx#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nuser, err := Permit.Api.Users.UnasignRole(ctx, \"user-key\", \"role-key\", \"tenant-key\")\n```\n\n----------------------------------------\n\nTITLE: Multiple Query Parameters Regex Pattern\nDESCRIPTION: This JSON escaped regex pattern matches URLs with specific query parameters in any order, such as https://api.example.com/search?q=test&page=1. It captures both 'query' and 'page' parameters using lookahead assertions.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/foaz/regex-url-mapping-check.mdx#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n//JSON Escaped Regex URL\n\"url\": \"^https://api\\\\.example\\\\.com/search\\\\?(?=.*q=(?P<query>[^&]+))(?=.*page=(?P<page>[0-9]+)).*$\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Auth0 Session in Next.js API Route\nDESCRIPTION: Checking for an authenticated user session in a Next.js API route using Auth0's getSession function.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/authentication/auth0/auth0-demo-app.mdx#2025-04-17_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\n// pages/api/tasks.ts\nimport { getSession } from \"@auth0/nextjs-auth0\";\n//...\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\n\tconst session = await getSession(req, res); // if the user is not logged in, session will be null\n\tif (!session?.user) {\n    res.status(401).json({ message: 'unauthorized' });\n    return;\n  }\n}\n//...\n```\n\n----------------------------------------\n\nTITLE: Granting Account Admin Role to File Editor using Node.js\nDESCRIPTION: Node.js implementation to update the file 'editor' role to include account admins. This grants account administrators edit permissions on files in their account.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/google-drive.mdx#2025-04-17_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\nawait permit.api.resourceRoles.update(\"file\", \"editor\", {\n  granted_to: {\n    users_with_role: [\n      {\n        linked_by_relation: \"account\",\n        on_resource: \"account\",\n        role: \"admin\",\n      },\n      {\n        linked_by_relation: \"parent\",\n        on_resource: \"folder\",\n        role: \"editor\",\n      },\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating User Object in .NET\nDESCRIPTION: Demonstrates how to create a user object with basic user information including key, email, name and attributes. The UserCreate object contains the essential user details that will be used for permission checks.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/dotnet/user/CreateUser.mdx#2025-04-17_snippet_0\n\nLANGUAGE: dotnet\nCODE:\n```\nvar userObj = new UserCreate{\n    Key = \"key\",\n    Email = \"email@example.com\",\n    First_name = \"John\",\n    Last_name = \"Smith\",\n    Attributes = {}\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Tenant Role by Key in Go using Permit SDK\nDESCRIPTION: This snippet demonstrates how to get a single tenant role by its key using the Permit SDK. It requires a context and the role key as parameters. The function returns the role and an error if any occurs.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/golang/role/Get.mdx#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nrole, err := Permit.Api.Roles.Get(ctx, \"role-key\")\n```\n\n----------------------------------------\n\nTITLE: Creating Role Implementation in JavaScript\nDESCRIPTION: API call implementation for creating a new role using the Permit.io SDK. The role object must be stringified before being passed to the API.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/nodejs/role/create-role.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await permit.api.createRole(JSON.stringify(role));\n```\n\n----------------------------------------\n\nTITLE: Creating Account Resource with Node.js SDK\nDESCRIPTION: JavaScript code to create an 'Account' resource type with roles and permissions using the Permit.io Node.js SDK.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/google-drive.mdx#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Permit } = require(\"permitio\");\n\nconst permit = new Permit({token: \"<YOUR_API_KEY>\", ...});\n\nawait permit.api.createResource(\n    {\n        \"key\": \"account\",\n        \"name\": \"Account\",\n        \"actions\": {\n            \"invite-member\": {},\n            \"list-members\": {},\n            \"remove-member\": {}\n        },\n        \"roles\": {\n            \"admin\": {\n                \"name\": \"Admin\",\n                \"permissions\": [\n                    \"invite-member\",\n                    \"list-members\",\n                    \"remove-member\"\n                ]\n            },\n            \"member\": {\n                \"name\": \"Member\",\n                \"permissions\": [\n                    \"list-members\"\n                ]\n            }\n        }\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Running Permit.io PDP Docker Container\nDESCRIPTION: Command to run the Permit.io PDP Docker container locally. It exposes the PDP on localhost:7766 and requires the API key from Permit.io for authentication.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/overview/perform-a-local-policy-check.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it -p 7766:7000 --env PDP_DEBUG=True --env PDP_API_KEY=<YOUR_API_KEY> permitio/pdp-v2:latest\n```\n\n----------------------------------------\n\nTITLE: Listing Role Assignments in Permit.io\nDESCRIPTION: Retrieve all role assignments from a specific project and environment with pagination support. Requires the API secret key for authorization.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/examples/filter-role-associations.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.permit.io/v2/facts/{project_id}/{env_id}/role_assignments?page=1&per_page=10' \\\n  -H 'authorization: Bearer API_SECRET_KEY'\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": \"0e82b2e3d2ed42c1ae0c525256b052f0\",\n    \"user\": \"charlie\",\n    \"role\": \"admin\",\n    \"tenant\": \"default\",\n    \"resource_instance\": null,\n    \"resource_instance_id\": null,\n    \"user_id\": \"9012410ede514dbe854e51f70f79014e\",\n    \"role_id\": \"c9fe4928753f48d79124bedfc760b14d\",\n    \"tenant_id\": \"8d15d835c04c40429807215e9aee418e\",\n    \"organization_id\": \"47b37e40e1094a2580fc6589ad24fec5\",\n    \"project_id\": \"6b84d0a6705c4c81a8818f4e7bb0f589\",\n    \"environment_id\": \"47e86c08899f4b798657fd19f09b54c1\",\n    \"created_at\": \"2024-06-30T21:29:52+00:00\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Viewer Role Derivation with cURL\nDESCRIPTION: Updates the 'viewer' role for files to be automatically granted to users who have the 'viewer' role on parent folders. This implements read-only permission inheritance via the parent relationship.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/google-drive.mdx#2025-04-17_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://api.permit.io/v2/schema/$permit_project/$permit_env/resources/file/roles/viewer \\\n  -X PATCH \\\n  -H \"Authorization: Bearer $permit_sdk_api_key\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"granted_to\": {\n        \"users_with_role\": [\n            {\n                \"linked_by_relation\": \"parent\",\n                \"on_resource\": \"folder\",\n                \"role\": \"viewer\"\n            }\n        ]\n\t}\n  }'\n```\n\n----------------------------------------\n\nTITLE: Initializing Permit Client with Cloud PDP in Python\nDESCRIPTION: Creates a Permit client instance connected to the managed Cloud PDP. The client requires an API key and the Cloud PDP URL.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/concepts/pdp/overview.mdx#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom permit import Permit\n\npermit = Permit(\n    token=\"[your-api-key]\",\n    pdp=\"https://cloudpdp.api.permit.io\",\n)\n```\n\n----------------------------------------\n\nTITLE: Assigning Resource Instance Roles to User in Permit.io using JavaScript SDK\nDESCRIPTION: This snippet illustrates how to assign resource instance-specific roles to a user using the Permit.io SDK. It shows assigning 'Owner' and 'Viewer' roles for different dashboard instances.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/overview/sync-applications-data.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nawait permit.api.users.sync({\n    key: \"user@example.com\",\n    email: \"user@example.com\",\n    first_name: \"John\",\n    last_name: \"Doe\",\n    roles: [\n        {\n            role: \"Owner\",\n            tenant: \"default\",\n            resource: \"Dashboard\",\n            resource_instance: \"dashboard-a\"\n        },\n        {\n            role: \"Viewer\",\n            tenant: \"default\",\n            resource: \"Dashboard\",\n            resource_instance: \"dashboard-b\"\n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Permission Check with Tenant\nDESCRIPTION: Example of checking permissions while specifying a tenant\nSOURCE: https://github.com/permitio/docs/blob/master/docs/getting-started/_quickstart-parts/_quickstart_python_sync.mdx#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\npermitted = await permit.check(\"userId\", \"action\", { type: \"resource\", tenant: \"tenant\" })\n```\n\n----------------------------------------\n\nTITLE: Creating a Resource Object Structure in JavaScript\nDESCRIPTION: This example shows the structure of a resource object that can be passed to the createResource function. It includes both required fields (key, name, actions) and optional fields (urn, description, attributes, roles, relations).\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/nodejs/resource/create-resource.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\tkey: \"key\",\n\tname: \"name\",\n\turn: \"urn\",\n\tdescription: \"description\",\n\tactions: {},\n\tattributes: {},\n\troles: {},\n\trelations: {}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Permit Authorization in Express.js Backend\nDESCRIPTION: Express.js route handler demonstrating Permit.io authorization check for a protected 'say_hello' action, including Cognito token verification.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/authentication/cognito/cognito-demo-app.mdx#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\napp.post(\"/say_hello\", async (req, res) => {\n  try {\n    const payload = await verifierIdToken.verify(\n      req.headers.authorization?.split(\" \")[1] // the JWT as string\n    );\n    // check the request body for the \"message\" property\n    const permitted = await permit.check(\n      payload.sub, // the user id\n      \"say\", // the action\n      \"hello\" // the resource\n    );\n    if (permitted) {\n      res.status(200).send(\"Permitted! to say hello\");\n    } else {\n      res.status(403).send(\"Not permitted to say hello\");\n    }\n  } catch (error) {\n    res.status(403).send(\"Token not valid!\");\n  }\n});\n//... handle the request\n```\n\n----------------------------------------\n\nTITLE: Creating Resource Set for Small Transactions in Terraform for Permit.io\nDESCRIPTION: This snippet defines a resource set for small transactions, with a condition that the transaction amount is less than or equal to 1000. This allows for attribute-based access control (ABAC) policies.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/mesa-verde.mdx#2025-04-17_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"permitio_resource_set\" \"Small_Transaction\" {\n  key      = \"Small_Transaction\"\n  name     = \"Small Transaction\"\n  resource = permitio_resource.Transaction.key\n  conditions = jsonencode({\n    \"allOf\" : [\n      { \"resource.amount\" : { \"less-than-equals\" : 1000 } }\n    ],\n  })\n  depends_on = [permitio_resource.Transaction]\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Human-Readable Decision Log Reason in JavaScript\nDESCRIPTION: This snippet shows an example of a human-readable 'reason' field inside a decision log. It explains why a particular permission was granted or denied, enhancing transparency in the audit process.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/use-audit-logs/types-and-filtering.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"reason\": \"user 'c2fc4a07-7edf-48fb-8fd8-e4989e103a77' does not match any\n           rule that grants him the 'delete' permission on the given\n\t\t   resource of type 'task'\"\n```\n\n----------------------------------------\n\nTITLE: Advanced Permit.io SDK Configuration\nDESCRIPTION: C# code demonstrating advanced configuration options when initializing the Permit.io SDK.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/getting-started/_quickstart-parts/_quickstart_dotnet.mdx#2025-04-17_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nPermit permitClient = new Permit(\n    token: \"[YOUR_API_KEY]\",\n    pdp: \"http://localhost:7766\",\n    defaultTenant: \"default\",\n    useDefaultTenantIfEmpty: true,\n    debugMode: true,\n    level: \"info\",\n    label: \"Permitio-sdk\",\n    logAsJson: false,\n    apiURL: \"https://api.eu-central-1.permit.io\",\n    raiseErrors: false,\n    envId: \"[YOUR_ENVIRONMENT_ID]\",\n    projectId: \"[YOUR_PROJECT_ID]\"\n);\n```\n\n----------------------------------------\n\nTITLE: Performing All Tenants Permission Check with cURL\nDESCRIPTION: This snippet demonstrates how to send a GET request to the '/allowed/all-tenants' endpoint to check if a user has permissions for a specific action on a resource across all tenants. The request includes user ID, action, resource type, and optional context parameters.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/nodejs/all-tenants.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://pdp-api.permit.io/allowed/all-tenants' \\\n  -X GET \\\n  -H 'Authorization: Bearer API_SECRET_KEY' \\\n  -D '{ \"user\": \"employee1\", \"action\": \"read\", \"resource\": \"document\", \"context\": {}, \"sdk\": \"node\" }'\nUpon successful completion, the API returns a response indicating whether the user is allowed to perform the specified action across all tenants.\n```\n\n----------------------------------------\n\nTITLE: Filter Role Assignments by User in Python\nDESCRIPTION: Python code example demonstrating how to filter role assignments for a specific user using the permit.pdp_api.role_assignments.list() function with a user filter.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/enforce-permissions/list-role-assignments.mdx#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom permit.models.pdp import RoleAssignmentRead\n\npermissions: RoleAssignmentRead = permit.pdp_api.role_assignments.list(\n    user=\"John\",\n)\n```\n\n----------------------------------------\n\nTITLE: Filtering Relationship Tuples by Subject Type\nDESCRIPTION: Filter tuples by subject type using resource ID or key.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/examples/filter-relationship-tuple.mdx#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.permit.io/v2/facts/{project_id}/{env_id}/relationship_tuples?subject_type=Folder&page=1&per_page=10' \\\n  -H 'authorization: Bearer API_SECRET_KEY'\n```\n\n----------------------------------------\n\nTITLE: Creating a Role with Permissions in Java using Permit SDK\nDESCRIPTION: Example of creating an admin role with document creation and reading permissions using the Permit.io SDK in Java. The implementation demonstrates how to instantiate a RoleCreate object with a key, name, description, and specific permissions.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/java/role/create.mdx#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.permit.sdk.openapi.models.RoleCreate;\nimport io.permit.sdk.openapi.models.RoleRead;\n\nRoleRead admin = permit.api.roles.create(\n\tnew RoleCreate(\"admin\",\"Admin\")\n\t\t.withDescription(\"an admin role\")\n\t\t.withPermissions(\n\t\t\tnew ArrayList<>(Arrays.asList(\"document:create\", \"document:read\"))\n\t\t)\n);\n```\n\n----------------------------------------\n\nTITLE: RBAC Permissions Table in Markdown\nDESCRIPTION: A markdown table demonstrating role-based permissions for Writer and Reader roles in a writing application, showing which actions (Edit, Delete, Read) are allowed for each role.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/build-policies/rbac/components.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Permission/Role | Writer | Reader |\n| --------------- | ------ | ------ |\n| **Edit**        | Yes    | No     |\n| **Delete**      | Yes    | No     |\n| **Read**        | Yes    | Yes    |\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-side Logout for Permit Elements\nDESCRIPTION: JavaScript function to log out a user from Permit Elements. This should be called as part of the process of logging out the user from the application's authentication system.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/embeddable-uis/embedding-elements.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\npermit.elements.logout();\n```\n\n----------------------------------------\n\nTITLE: Creating Resource Instances in Permit.io with JavaScript\nDESCRIPTION: This JavaScript snippet creates a new Transaction resource instance in Permit.io, including all transaction attributes, allowing for ReBAC policies based on transaction properties.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/mesa-verde.mdx#2025-04-17_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst resourceInstance = await permit.api.resourceInstances.create({\n  resource: \"Transaction\",\n  key: transaction.id,\n  tenant,\n  attributes: {\n    ...transaction,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering Role Assignments by Role Types\nDESCRIPTION: Filter role assignments by specific role types (e.g., admin, editor). This endpoint supports filtering by multiple roles at once to retrieve all users with those roles.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/examples/filter-role-associations.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.permit.io/v2/facts/{project_id}/{env_id}/role_assignments?role=admin&role=editor' \\\n  -H 'authorization: Bearer API_SECRET_KEY'\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"id\": \"0e82b2e3d2ed42c1ae0c525256b052f0\",\n        \"user\": \"charlie\",\n        \"role\": \"admin\",\n        \"tenant\": \"default\",\n        \"resource_instance\": null,\n        \"resource_instance_id\": null,\n        \"user_id\": \"9012410ede514dbe854e51f70f79014e\",\n        \"role_id\": \"c9fe4928753f48d79124bedfc760b14d\",\n        \"tenant_id\": \"8d15d835c04c40429807215e9aee418e\",\n        \"organization_id\": \"47b37e40e1094a2580fc6589ad24fec5\",\n        \"project_id\": \"6b84d0a6705c4c81a8818f4e7bb0f589\",\n        \"environment_id\": \"47e86c08899f4b798657fd19f09b54c1\",\n        \"created_at\": \"2024-06-30T21:29:52+00:00\"\n    },\n    {\n        \"id\": \"25e7915145334ca7815de96a65335902\",\n        \"user\": \"bob\",\n        \"role\": \"editor\",\n        \"tenant\": \"default\",\n        \"resource_instance\": null,\n        \"resource_instance_id\": null,\n        \"user_id\": \"c428e65465f94eea888ac274d2a428a5\",\n        \"role_id\": \"8aef7d34bab64ddea739fd30f10d3e37\",\n        \"tenant_id\": \"8d15d835c04c40429807215e9aee418e\",\n        \"organization_id\": \"47b37e40e1094a2580fc6589ad24fec5\",\n        \"project_id\": \"6b84d0a6705c4c81a8818f4e7bb0f589\",\n        \"environment_id\": \"47e86c08899f4b798657fd19f09b54c1\",\n        \"created_at\": \"2024-06-30T21:30:11+00:00\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Account Resource Instance with Node.js\nDESCRIPTION: Creates an 'acme' account resource instance using the Node.js SDK. This account will serve as the parent resource for folders and files in the system.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/google-drive.mdx#2025-04-17_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nawait permit.api.resourceInstances.create({\n  resource: \"account\",\n  key: \"acme\",\n  tenant: \"default\",\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering Users by Role in Permit.io API\nDESCRIPTION: This snippet shows how to filter users by role using the 'role' query parameter in the Permit.io API. It can be used with both the user and user tenant endpoints. It requires the API secret key, project ID, and environment ID.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/examples/filter-users.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.permit.io/v2/facts/{project_id}/{env_id}/users?search=key@permit.io&role=board&page=1&per_page=3' \\\n  -H 'authorization: Bearer API_SECRET_KEY'\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n \"data\": [\n     {\n         \"key\": \"key@permit.io\",\n         \"id\": \"445ed9ff1bc94caf8bcf686ea3eexxxx\",\n         \"organization_id\": \"903ebc2765b848289d6dfbd3c21exxxx\",\n         \"project_id\": \"3c4244c7bcab4c97990e5bc724daxxxx\",\n         \"environment_id\": \"9ba956da646948538efaee4cf10dxxxx\",\n         \"associated_tenants\": [\n             {\n                 \"tenant\": \"sample_tenant\",\n                 \"roles\": [\n                     \"board\"\n                 ],\n                 \"status\": \"active\"\n             }\n         ],\n         \"roles\": [\n             {\n                 \"role\": \"board\",\n                 \"tenant\": \"sample_tenant\"\n             }\n         ],\n         \"email\": \"email@permit.io\",\n         \"first_name\": \"\",\n         \"last_name\": \"\",\n         \"attributes\": null\n     }\n ],\n \"total_count\": 1,\n \"page_count\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Permit Client with Local PDP in Go\nDESCRIPTION: Creates a Permit client instance in Go connected to a locally running PDP. Uses a config builder to specify the API key and local PDP URL.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/concepts/pdp/overview.mdx#2025-04-17_snippet_9\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"github.com/permitio/permit-golang/pkg/permit\"\nimport \"github.com/permitio/permit-golang/pkg/config\"\n\nfunc main() {\n    PermitConfig := config.NewConfigBuilder(\"[your-api-key]\")\n        .WithPdpUrl(\"http://localhost:7766\")\n        .Build()\n    Permit := permit.New(PermitConfig)\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Bulk User Operations via Permit API (Bash)\nDESCRIPTION: Examples of creating new users, updating existing users, and deleting users in bulk using cURL requests to the Permit API. These operations allow efficient syncing of user data from external systems.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/bulk-operations.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Create new users\ncurl -X POST https://api.permit.io/v2/facts/{proj_id}/{env_id}/bulk/users \\\n    -H \"Authorization: Bearer {your_permit_token}\" \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\n            \"operations\": [{\n            \"key\": \"jane_doe\",\n            \"email\": \"jane@coolcompany.com\",\n            \"first_name\": \"Jane\",\n            \"last_name\": \"Doe\",\n            \"attributes\": {}\n            }, ...]\n        }'\n\n\n# Update existing users\ncurl -X PUT https://api.permit.io/v2/facts/{proj_id}/{env_id}/bulk/users\n    -H \"Authorization: Bearer {your_permit_token}\" \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\n            \"operations\": [{\n            \"key\": \"jane_doe\",\n            \"email\": \"test@permit.io\",\n            \"first_name\": \"Jane\",\n            \"last_name\": \"Doe\",\n            \"attributes\": {}\n            }, ...]\n        }'\n\n# Delete existing users\ncurl -X DELETE https://api.permit.io/v2/facts/{proj_id}/{env_id}/bulk/users\n    -H \"Authorization: Bearer {your_permit_token}\" \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\n            \"idents\": [\"jane_doe\", ...]\n        }'\n```\n\n----------------------------------------\n\nTITLE: Creating a Support Team Group in Permit.io\nDESCRIPTION: POST request to create a new group instance called 'support' in the default tenant. This group will be used to manage access for support team members.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/rebac/groups.mdx#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.permit.io/v2/schema/{project_id}/{env_id}/groups' \\\n\n-H 'authorization: Bearer API_SECRET_KEY' \\\n\n--data-raw '{\"group_instance_key\": \"support\", \"group_tenant\": \"default\"}'\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Apollo Server with Permit.io Authorization Plugin\nDESCRIPTION: This code snippet demonstrates how to set up an Apollo Server instance with the Permit.io authorization plugin included in the plugins list.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/integrations/GraphQL/apollo_server.mdx#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Set up Apollo Server\nconst server = new ApolloServer({\n  debug: true,\n  typeDefs,\n  resolvers,\n  dataSources,\n  context,\n  introspection: true,\n  apollo: {\n    key: process.env.APOLLO_KEY,\n  },\n  plugins: [ApolloServerPluginLandingPageLocalDefault({ embed: true }), permitPlugin]\n});\n```\n\n----------------------------------------\n\nTITLE: Assigning Top-Level Roles to User in Permit.io using JavaScript SDK\nDESCRIPTION: This code demonstrates how to assign top-level roles to a user across multiple tenants using the Permit.io SDK. It shows assigning 'admin' and 'member' roles in different tenants.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/overview/sync-applications-data.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nawait permit.api.users.sync({\n    key: \"user@example.com\",\n    email: \"user@example.com\",\n    first_name: \"John\",\n    last_name: \"Doe\",\n    roles: [\n        { role: \"admin\", tenant: \"default\" },\n        { role: \"member\", tenant: \"acme-corp\" }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx for Permit.io Integration (Nginx)\nDESCRIPTION: Nginx configuration to set up external authorization using Permit.io PDP. It includes location blocks for the main content and the authorization endpoint.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/integrations/gateways/nginx.mdx#2025-04-17_snippet_1\n\nLANGUAGE: nginx\nCODE:\n```\nhttp {\n    # ... other configurations ...\n\n    server {\n        listen 80;\n        server_name example.com;\n\n        location / {\n            auth_request /auth;\n            auth_request_set $auth_status $upstream_status;\n\n            # Set the required Permit.io headers\n            auth_request_set $permit_user_key $upstream_http_permit_user_key;\n            auth_request_set $permit_action $upstream_http_permit_action;\n            auth_request_set $permit_resource_type $upstream_http_permit_resource_type;\n            auth_request_set $permit_tenant_id $upstream_http_permit_tenant_id;\n\n            # Pass the Permit.io headers to the application\n            proxy_set_header permit-user-key $permit_user_key;\n            proxy_set_header permit-action $permit_action;\n            proxy_set_header permit-resource-type $permit_resource_type;\n            proxy_set_header permit-tenant-id $permit_tenant_id;\n\n            # ... your existing location configuration ...\n        }\n\n        location = /auth {\n            internal;\n            # Forward the request to your deployed PDP\n            proxy_pass http://localhost:7766/nginx_allowed;\n            proxy_pass_request_body off;\n            proxy_set_header Content-Length \"\";\n            proxy_set_header X-Original-URI $request_uri;\n\n            # Pass the required Permit.io headers\n            proxy_set_header permit-user-key $http_permit_user_key;\n            proxy_set_header permit-action $http_permit_action;\n            proxy_set_header permit-resource-type $http_permit_resource_type;\n            proxy_set_header permit-tenant-id $http_permit_tenant_id;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Permit SDK with Proxy Facts in Java\nDESCRIPTION: This snippet demonstrates how to initialize the Permit SDK in Java with withProxyFactsViaPdp enabled, create a user, and immediately check permissions.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/manage-data/local-facts-uploader.mdx#2025-04-17_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nimport io.permit.sdk.Permit;\nimport io.permit.sdk.PermitConfig;\nimport io.permit.sdk.api.models.UserCreate;\n\npublic class Example {\n    public static void main(String[] args) {\n        // Initialize SDK with proxy_facts_via_pdp enabled\n        PermitConfig config = new PermitConfig.Builder(\"<your-api-key>\")\n            .withPdpAddress(\"http://localhost:7766\")\n            .withProxyFactsViaPdp(true)\n            .build();\n            \n        Permit permit = new Permit(config);\n\n        // Create user\n        UserCreate userCreate = new UserCreate.Builder(\"user123\")\n            .withEmail(\"user@example.com\")\n            .build();\n        \n        permit.api.users.create(userCreate);\n\n        // Check for permissions right after\n        boolean allowed = permit.check(\"user123\", \"read\", \"document\");\n        System.out.println(\"Permission granted: \" + allowed);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Server-side Authentication Handler\nDESCRIPTION: Server-side implementation for protecting routes and handling session authentication\nSOURCE: https://github.com/permitio/docs/blob/master/docs/authentication/stytch/permit-integration.mdx#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport stytch from \"stytch\";\n\nlet client;\n\nconst loadStytch = () => {\n  if (!client) {\n    client = new stytch.Client({\n      project_id: process.env.STYTCH_PROJECT_ID || \"\",\n      secret: process.env.STYTCH_SECRET || \"\",\n      env: process.env.STYTCH_PROJECT_ENV === \"live\" ? stytch.envs.live : stytch.envs.test,\n    });\n  }\n  return client;\n};\n\nexport async function getServerSideProps({ req }) {\n  const redirectRes = {\n    redirect: {\n      destination: \"/\",\n      permanent: false,\n    },\n  };\n\n  const sessionJWT = req.cookies[\"stytch_session_jwt\"];\n\n  if (!sessionJWT) {\n    return redirectRes;\n  }\n\n  const stytchClient = loadStytch();\n\n  try {\n    await stytchClient.sessions.authenticateJwt(sessionJWT);\n    return { props: {} };\n  } catch (e) {\n    return redirectRes;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Tenant by ID in Go\nDESCRIPTION: Fetches tenant information using the tenant ID (UUID). Takes a context and tenant ID string as parameters and returns a tenant object and error. Can also accept tenant key as the ID parameter.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/golang/tenant/Get.mdx#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntenant, err := Permit.Api.Tenants.GetById(ctx, uuid.String())\n```\n\n----------------------------------------\n\nTITLE: Pulling Permit PDP Docker Container\nDESCRIPTION: Docker command to pull the latest version of the Permit.io PDP container from Docker Hub.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/getting-started/_quickstart-parts/_quickstart_intro.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull permitio/pdp-v2:latest\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema with Permit Directives\nDESCRIPTION: This snippet demonstrates how to add resource and action mapping to a GraphQL schema using custom directives. It shows how to decorate fields with @permit directives to specify the resource and action for authorization checks.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/integrations/GraphQL/overview.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Book {\n\ttitle: String\n\tauthor: Author\n\trating: Int @permit(resource: \"book_rating\", action: \"get\")\n}\n\ntype Author {\n\tname: String\n\tbooks: [Book] @permit(resource: \"author_books\", action: \"get\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PDP Offline Mode\nDESCRIPTION: Docker command to run PDP in offline mode with persistent backup storage.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/deploy/deploy-to-production.mdx#2025-04-17_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -it -p 7766:7000 -p 8181:8181 \\\n  --env PDP_API_KEY=<YOUR_API_KEY> \\\n  --env PDP_ENABLE_OFFLINE_MODE=true \\\n  -v <HOST_BACKUP_DIR_OR_NAMED_VOLUME>:/app/backup\n  permitio/pdp-v2:latest\n```\n\n----------------------------------------\n\nTITLE: Assigning Time-Based Groups to a User in Permit.io\nDESCRIPTION: This JSON snippet demonstrates how to assign the 'admin' role and set time-based groups for a user, including expiration timestamps for different tenants.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/build-policies/abac/time-based-role.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"time_based_groups\": [\n  {\n    \"role\": \"admin\",\n    \"tenant\": \"default\",\n    \"expires\": 1733256879832\n  },\n  {\n    \"role\": \"admin\",\n    \"tenant\": \"coke\",\n    \"expires\": 1733861761081\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Filtering Users by Email, Key, and Name in Permit.io API\nDESCRIPTION: This snippet shows how to filter users by email, key, or name using the 'search' query parameter in the Permit.io API. It requires the API secret key, project ID, and environment ID.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/examples/filter-users.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.permit.io/v2/facts/{project_id}/{env_id}/users?search=key@permit.io&page=1&per_page=3' \\\n  -H 'authorization: Bearer API_SECRET_KEY'\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n \"data\": [\n     {\n         \"key\": \"key@permit.io\",\n         \"id\": \"445ed9ff1bc94caf8bcf686ea3eexxxx\",\n         \"organization_id\": \"903ebc2765b848289d6dfbd3c21exxxx\",\n         \"project_id\": \"3c4244c7bcab4c97990e5bc724daxxxx\",\n         \"environment_id\": \"9ba956da646948538efaee4cf10dxxxx\",\n         \"associated_tenants\": [\n             {\n                 \"tenant\": \"sample_tenant\",\n                 \"roles\": [\n                     \"board\"\n                 ],\n                 \"status\": \"active\"\n             }\n         ],\n         \"roles\": [\n             {\n                 \"role\": \"board\",\n                 \"tenant\": \"sample_tenant\"\n             }\n         ],\n         \"email\": \"email@permit.io\",\n         \"first_name\": \"\",\n         \"last_name\": \"\",\n         \"attributes\": null\n     }\n ],\n \"total_count\": 1,\n \"page_count\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Creating User Object for Permit.io Synchronization in Go\nDESCRIPTION: Example of creating a user object with personal information and custom attributes before syncing with Permit.io. This demonstrates how to set the required user key along with optional fields like email, name, and custom attributes.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/golang/user/SyncUser.mdx#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nuser := models.NewUserCreate(\"user-key\")\nuser.SetEmail(\"john@doe.com\")\nuser.SetFirstName(\"John\")\nuser.SetLastName(\"Doe\")\nuser.SetAttributes(map[string]interface{}{\n    \"age\": \"26\",\n})\n```\n\n----------------------------------------\n\nTITLE: Generating SSH Key for GitHub Deploy Key\nDESCRIPTION: Command to generate a secure ECDSA SSH key pair with 521-bit length for use as a GitHub deploy key.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/integrations/gitops/github.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nssh-keygen -t ecdsa -b 521 -C \"help@permit.io\"\n```\n\n----------------------------------------\n\nTITLE: PDP Sync Error Webhook Payload Structure in JSON\nDESCRIPTION: This JSON snippet illustrates the structure of the payload that Permit.io sends to the defined webhook URL when a PDP sync error occurs. It includes organization, project, environment, and affected PDP IDs.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/pdp-webhooks.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"org_id\": \"a40c5d1f-d889-43e9-94ea-b9b33585fc6b\",\n    \"project_id\": \"405d8339-3514-403b-8c43-83ae74cfe0e9\",\n    \"env_id\": \"3f967d0d-4d55-42f3-97c4-6a5455dfe4a6\",\n    \"pdp_ids\": [\"497f6eca-6276-4993-bfeb-53cbbbba6f08\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Syncing User Attributes from External Source with JavaScript\nDESCRIPTION: This JavaScript snippet fetches user location data from JSONbin, filters it to match existing users in Permit.io, and updates each user's attributes with their country information for ABAC policy enforcement.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/mesa-verde.mdx#2025-04-17_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await fetch(`https://api.jsonbin.io/v3/b/${process.env.JSONBIN_KEY}/latest`);\nconst data = await response.json();\n\nconst envUsers = await permit.api.users.list();\nconst users = envUsers.data.map((user) => user.key);\n\nawait Promise.all(\n  Object.entries(data.record)\n    .filter(([key]) => users.includes(key))\n    .map(([key, country]) => permit.api.users.update(key, { attributes: { country } }))\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving User by ID in Permit.io API (Go)\nDESCRIPTION: This snippet shows how to fetch a user's information using their unique ID. It uses the Permit.Api.Users.Get method, passing the context and user ID (as a UUID string) as parameters. The function returns the user object and any potential error.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/golang/user/Get.mdx#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nuser, err := Permit.Api.Users.Get(ctx, uuid.String())\n```\n\n----------------------------------------\n\nTITLE: Assigning a Role to a User for a Folder in Permit.io\nDESCRIPTION: This snippet demonstrates how to assign a role to a user for a specific folder instance in Permit.io. It gives the user 'jane@acme.com' the 'editor' role for the 'finance' folder.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/google-drive.mdx#2025-04-17_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://api.permit.io/v2/facts/$permit_project/$permit_env/role_assignments \\\n  -X POST \\\n  -H \"Authorization: Bearer $permit_sdk_api_key\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"user\": \"jane@acme.com\",\n    \"role\": \"editor\",\n    \"resource_instance\": \"folder:finance\"\n  }'\n```\n\nLANGUAGE: python\nCODE:\n```\nawait permit.api.role_assignments.assign(\n    {\n        \"user\": \"jane@acme.com\",\n        \"role\": \"editor\",\n        \"resource_instance\": \"folder:finance\",\n    }\n)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nawait permit.api.roleAssignments.assign({\n  user: \"jane@acme.com\",\n  role: \"editor\",\n  resource_instance: \"folder:finance\",\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Role in ReBAC\nDESCRIPTION: Demonstrates how to format a resource role in ReBAC, which is specific to a given resource and only relevant in the context of that resource.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/build-policies/rebac/overview.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\nA `user` who is assigned the role of an `Owner` on a `folder`\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Account-Folder Relationship with Node.js\nDESCRIPTION: Creates an 'account' relationship between the 'acme' account and the 'finance' folder using the Node.js SDK. This establishes account-level ownership of the folder.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/google-drive.mdx#2025-04-17_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nawait permit.api.relationshipTuples.create(\n    {\n        \"subject\": \"account:acme\",\n        \"relation\": \"account\",\n        \"object\": \"folder:finance\",\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Bulk Relationship Tuples with Permit.io API\nDESCRIPTION: A curl command that demonstrates how to create multiple relationship tuples at once using the Permit.io API. The request creates tuples that define permissions relationships between resources (subject, relation, object) within a specific tenant.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/nodejs/bulk-requests-examples.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.permit.io/v2/facts/{proj_id}/{env_id}/relationship_tuples/bulk' \\\n  -H 'authorization: Bearer API_SECRET_KEY'\n  -D '{ \"operations\":[\n                         {\n                         \"subject\": \"organization:permitio\",\n                         \"relation\": \"owner\",\n                         \"object\": \"repo:opal\",\n                         \"tenant\": \"public\"\n                         },\n                     ]\n      }'\n```\n\n----------------------------------------\n\nTITLE: Creating Environment via API in Bash\nDESCRIPTION: This snippet demonstrates how to create a new environment using the Permit.io API. It requires an organization-level or project-level API key for authentication.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/manage-your-account/creating-environments.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.permit.io/v2/projects/<project-id>/envs' \\\n  -H 'authorization: Bearer <api-key>' \\\n  --data-raw '{\"key\":\"new-env-name\",\"name\":\"New Env Name\"}'\n```\n\n----------------------------------------\n\nTITLE: Creating File to Folder Parent Relation\nDESCRIPTION: This snippet demonstrates how to create a parent relation from a File resource to a Folder resource. This relation defines that a file can have a folder as its parent, establishing a hierarchical structure between resources.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/google-drive.mdx#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://api.permit.io/v2/schema/$permit_project/$permit_env/resources/file/relations \\\n  -X POST \\\n  -H \"Authorization: Bearer $permit_sdk_api_key\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"key\": \"parent\",\n    \"name\": \"Parent\",\n    \"subject_resource\": \"folder\"\n  }'\n```\n\nLANGUAGE: python\nCODE:\n```\nawait permit.api.resource_relations.create(\n    \"file\",\n    {\n        \"key\": \"parent\",\n        \"name\": \"Parent\",\n        \"subject_resource\": \"folder\",\n    }\n)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nawait permit.api.resourceRelations.create(\"file\", {\n  key: \"parent\",\n  name: \"Parent\",\n  subject_resource: \"folder\",\n});\n```\n\n----------------------------------------\n\nTITLE: API Route Handler Implementation\nDESCRIPTION: Implementation of an API endpoint that handles bulk permission checks using Permit.io. Supports both RBAC and ABAC with optional user and resource attributes.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/integrations/feature-flagging/casl.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Permit } from \"permitio\";\n\nconst permit = new Permit({\n  token: \"YOUR_PERMIT_API_KEY\",\n  pdp: \"http://localhost:7766\",\n});\n\nexport default async function handler(req, res) {\n  try {\n    const { resourcesAndActions } = req.body;\n    const { user: userId } = req.query;\n\n    if (!userId) {\n      return res.status(400).json({ error: \"No userId provided.\" });\n    }\n\n    const checkPermissions = async (resourceAndAction) => {\n      const { resource, action, userAttributes, resourceAttributes } = resourceAndAction;\n\n      const allowed = permit.check(\n        {\n          key: userId,\n          attributes: userAttributes,\n        },\n        action,\n        {\n          type: resource,\n          attributes: resourceAttributes,\n          tenant: \"default\",\n        }\n      );\n\n      return allowed;\n    };\n\n    const permittedList = await Promise.all(resourcesAndActions.map(checkPermissions));\n\n    console.log(permittedList);\n\n    return res.status(200).json({ permittedList });\n  } catch (error) {\n    console.error(error);\n    return res.status(500).json({ error: \"Internal Server Error\" });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Tenant\nDESCRIPTION: Example of creating a new tenant in Permit to establish isolated permission spaces.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/overview/sync-your-first-user-with-sdk.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nrole_assignments: [{ role: \"manager\", tenant: \"Marketing\" }]\n```\n\n----------------------------------------\n\nTITLE: Getting a Specific Operation Approval\nDESCRIPTION: Makes a GET request to retrieve a specific operation approval by its ID.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/elements/operation_approval.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.permit.io/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/operation_approval/{operation_approval_id}' \\\n  -H 'cookie: <COOKIE FROM LOGIN>'\n  -H 'element_id: ELEMENTS_CONFIG_ID'\n```\n\n----------------------------------------\n\nTITLE: Assigning Roles to Users with cURL\nDESCRIPTION: Example of how to assign a role to a user using cURL. This assigns the 'viewer' role on the 'file:2023_report' resource instance to the user 'john@acme.com'.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/rebac/rebac-api-calls.mdx#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://api.permit.io/v2/facts/$permit_project/$permit_env/role_assignments \\\n  -X POST \\\n  -H \"Authorization: Bearer $permit_sdk_api_key\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"user\": \"john@acme.com\",\n    \"role\": \"viewer\",\n    \"resource_instance\": \"file:2023_report\"\n  }'\n```\n\n----------------------------------------\n\nTITLE: Initializing Permit Client with Local PDP in DotNet\nDESCRIPTION: Creates a Permit client instance in C# connected to a locally running PDP. Requires an API key and the local PDP URL as parameters.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/concepts/pdp/overview.mdx#2025-04-17_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nusing Permit;\n\nPermit permit = new Permit(\n  \"[your-api-key]\",\n  \"http://localhost:7766\"\n);\n```\n\n----------------------------------------\n\nTITLE: Deleting a Tenant using Permit.io .NET Client\nDESCRIPTION: Demonstrates how to delete a tenant using the Permit.io API client. The method accepts a tenantId parameter which can be either the tenant's unique identifier or tenant key. Returns an API response object.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/dotnet/tenant/DeleteTenant.mdx#2025-04-17_snippet_0\n\nLANGUAGE: dotnet\nCODE:\n```\nvar response = await permitClient.Api.DeleteTenant(tenantId);\n```\n\n----------------------------------------\n\nTITLE: Importing Permit SDK\nDESCRIPTION: Basic import statement for the Permit SDK in Python\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/tutorials/_quickstart-parts/_quickstart_python.mdx#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom permit import Permit\n```\n\n----------------------------------------\n\nTITLE: ReBAC Policy Check with Hardcoded Instance Key\nDESCRIPTION: This variant of the permit.check() function shows how to perform a ReBAC policy check using a hardcoded instance key instead of a dynamic one.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/build-policies/rebac/building-rebac-policies.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nawait permit.check(userId, \"assign\", \"member_group:group3\");\n```\n\n----------------------------------------\n\nTITLE: Access Request Response JSON Structure (JSON)\nDESCRIPTION: This JSON structure represents the response format for an access request. It includes details such as user IDs, request details, timestamps, and status information.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/elements/access-requests.mdx#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"requesting_user_id\": \"1c1e4ada-f282-40e6-b3b7-20b3a51c93b5\",\n    \"access_request_details\": {\n        \"tenant\": \"34f5c98e-f430-457b-a812-92637d0c6fd0\",\n        \"resource\": \"4d5215ed-38bb-48ed-879a-fdb9ca58522f\",\n        \"resource_instance\": \"2d98d9f8-e1b7-4f1d-baad-2edbf6fa6c66\",\n        \"role\": \"ac4e70c8-d5be-48af-93eb-760f58fc91a9\",\n    },\n    \"reason\": \"done onboarding\",\n    \"org_id\": \"7c60d51f-b44e-4682-87d6-449835ea4de6\",\n    \"project_id\": \"405d8375-3514-403b-8c43-83ae74cfe0e9\",\n    \"env_id\": \"40ef0e48-a11f-4963-a229-e396c9f7e7c4\",\n    \"created_at\": \"2019-08-24T14:15:22Z\",\n    \"updated_at\": \"2019-08-24T14:15:22Z\",\n    \"status\": \"approved\",\n    \"reviewer_user_id\": \"1b287364-14ff-4b72-8953-b40399093a6f\",\n    \"reviewed_at\": \"2019-08-24T14:15:22Z\",\n    \"reviewer_comment\": \"new employee\",\n}\n```\n\n----------------------------------------\n\nTITLE: Array Matching with Foreign Keys using any_match in JSON for Permit.io\nDESCRIPTION: This snippet demonstrates the use of the 'any_match' operator with foreign keys to check if any issue in a repo is not closed. It uses the 'fk_resource_type' key to specify the foreign resource type for the issues array.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/working-with-abac/operators.mdx#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"allOf\": [\n        {\n            \"resource.issues\": {\n                \"any_match\": {\n                    \"match\": {\n                        \"status\": {\"not-equals\": \"closed\"}\n                    },\n                    \"fk_resource_type\": \"issue\"\n                }\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating User with Attributes in Permit.io using JavaScript SDK\nDESCRIPTION: This code snippet demonstrates how to create a user with custom attributes using the Permit.io SDK. It includes setting the user's key, email, first name, last name, and additional attributes like subscription level.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/overview/sync-applications-data.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait permit.api.users.sync({\n    key: \"user@example.com\",\n    email: \"user@example.com\",\n    first_name: \"John\",\n    last_name: \"Doe\",\n    attributes: {\n        \"subscriptionLevel\": \"pro\"\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Document Resource using permit.api.resources.create() in Java\nDESCRIPTION: This snippet demonstrates how to create a new 'document' resource using the Permit.io SDK in Java. It shows the creation of a ResourceCreate object with various attributes and the subsequent API call to create the resource.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/java/resource/create.mdx#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.permit.sdk.openapi.models.ResourceRead;\nimport io.permit.sdk.openapi.models.ResourceCreate;\n\n// create document resource\nResourceCreate resourceInput = ((\n\tnew ResourceCreate(\"document\", \"Document\", actions)\n)\n\t.withUrn(\"prn:gdrive:document\")\n\t.withDescription(\"google drive document\")\n\t.withAttributes(attributes)\n);\n\nResourceRead document = permit.api.resources.create(resourceInput);\n```\n\n----------------------------------------\n\nTITLE: Restarting Nginx (Bash)\nDESCRIPTION: Command to restart the Nginx service after making configuration changes.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/integrations/gateways/nginx.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl restart nginx\n```\n\n----------------------------------------\n\nTITLE: Subdomain Matching Regex Pattern\nDESCRIPTION: This JSON escaped regex pattern matches URLs with any subdomain, such as api.example.com, staging.example.com, or dev-api.example.com. It allows for flexible subdomain matching while still capturing the user_id parameter.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/foaz/regex-url-mapping-check.mdx#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n//JSON Escaped Regex URL\n\"url\": \"^https://[\\\\w-]+\\\\.example\\\\.com/api/v1/users/(?P<user_id>[0-9]+)$\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Permit.io SDK in Python\nDESCRIPTION: This snippet shows how to initialize the Permit.io SDK with an API key, PDP URL, and logging configuration. It sets up the main Permit object for interacting with the Permit.io system.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/python/usage-example.mdx#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom permit import Permit\n\npermit = Permit(\n    # the API key to the Permit environment you wish to connect to\n    token=\"<YOUR_API_KEY>\",\n    # the url in which the SDK can connect to the PDP container\n    pdp=\"http://localhost:7766\",\n    # use this to turn on sdk logs:\n    log={\"level\": \"debug\", \"enable\": True},\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving User by Key in Permit.io API (Go)\nDESCRIPTION: This snippet demonstrates how to retrieve a user's information using their unique key. It utilizes the Permit.Api.Users.Get method, passing the context and user key as parameters. The function returns the user object and any potential error.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/golang/user/Get.mdx#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nuser, err := Permit.Api.Users.Get(ctx, \"user-key\")\n```\n\n----------------------------------------\n\nTITLE: Fetching Role Permissions (Bash)\nDESCRIPTION: This curl command retrieves permissions for a specific role using the Permit.io API. It requires the role_id_or_key parameter.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/examples/list-user-permissions.mdx#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.permit.io/v2/schema/{project_id}/{env_id}/roles/role_id_or_key' \\\n  -H 'authorization: Bearer API_SECRET_KEY'\n```\n\n----------------------------------------\n\nTITLE: Implementing Bearer Token loginAs with Node.js\nDESCRIPTION: Express.js implementation of the loginAs endpoint using bearer token authentication. Returns the ticket content directly in the response.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/embeddable-uis/element-login.mdx#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require(\"express\");\n const app = express();\n app.post(\"/login_header\", async (req, res) => {\n     // const user_key = get_user_from_jwt();\n     const ticket = await permit.elements.loginAs({userId: user_key, tenantId: TENANT});\n     res.status(200).send(ticket.content);\n });\n app.listen(port, () => {\n   console.log(`Example app listening at http://localhost:${port}`);\n });\n```\n\n----------------------------------------\n\nTITLE: Creating a Resource Set Condition for Private Repositories in JavaScript\nDESCRIPTION: This code snippet defines a resource set condition for private repositories. It specifies that the resource type must be 'repository' and the access level must be 'private', using the 'allOf' operator to combine these conditions.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/working-with-abac/condition-sets.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"key\": \"private_repositories\",\n    \"name\": \"Private Repositories\",\n    \"type\": \"resourceset\",\n    \"conditions\": {\n        \"allOf\": [\n            {\n                \"resource.type\": {\n                    \"equals\": \"repository\"\n                }\n            },\n            {\n                \"resource.access\": {\n                    \"equals\": [\n                        \"private\"\n                    ]\n                }\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Commenter Role Derivation with cURL\nDESCRIPTION: Updates the 'commenter' role for files to be automatically granted to users who have the 'commenter' role on parent folders. This implements permission inheritance for commenting capabilities.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/google-drive.mdx#2025-04-17_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://api.permit.io/v2/schema/$permit_project/$permit_env/resources/file/roles/commenter \\\n  -X PATCH \\\n  -H \"Authorization: Bearer $permit_sdk_api_key\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"granted_to\": {\n        \"users_with_role\": [\n            {\n                \"linked_by_relation\": \"parent\",\n                \"on_resource\": \"folder\",\n                \"role\": \"commenter\"\n            }\n        ]\n\t}\n  }'\n```\n\n----------------------------------------\n\nTITLE: Removing a Permission Rule from a Policy Guard Scope using cURL\nDESCRIPTION: This snippet shows how to remove a permission rule from a policy guard scope. It sends a DELETE request to the Policy Guard API with the scope ID in the URL path and the rule details (resource, role, action) in the request body.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/policy-guard/policy_guard_api.mdx#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X DELETE 'https://api.permit.io/v2/policy_guards/scopes/{policy_guard_scope_id}/rules' \\\n-H 'authorization: Bearer API_SECRET_KEY' \\\n--data-raw '{\n    \"resource_key\": \"documents\",\n    \"role_key\": \"admin\",\n    \"action_key\": \"create\",\n}'\n```\n\n----------------------------------------\n\nTITLE: Assigning a Group to Another Group in Permit.io\nDESCRIPTION: PUT request to create a connection between two group instances, 'org1' and a specified group. This enables role derivation between groups, allowing members of one group to inherit permissions for another group.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/rebac/groups.mdx#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT \\\n\n'https://api.permit.io/v2/schema/{project_id}/{env_id}/groups/{group_instance_key}/assign_group' \\\n\n-H 'authorization: Bearer API_SECRET_KEY' \\\n\n--data-raw '{\"group_instance_key\": \"org1\"}'\n```\n\n----------------------------------------\n\nTITLE: Importing Permit.io Policy Data in Rego for Custom Policy\nDESCRIPTION: This code imports the necessary data from Permit.io's policy configuration to be used in custom policy logic. It allows access to existing policy decisions and RBAC data.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/integrations/gitops/custom_policy.mdx#2025-04-17_snippet_1\n\nLANGUAGE: rego\nCODE:\n```\nimport data.permit.policies\nimport permit.rbac\n```\n\n----------------------------------------\n\nTITLE: Creating Account Global Relation for Files using Node.js\nDESCRIPTION: Node.js implementation to create an 'account_global' relation for files. This enables associating files with accounts for permission management.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/google-drive.mdx#2025-04-17_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\nawait permit.api.resourceRelations.create(\"file\", {\n  key: \"account_global\",\n  name: \"Account Global\",\n  subject_resource: \"account\",\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Permit Client with Local PDP in Java\nDESCRIPTION: Creates a Permit client instance in Java connected to a locally running PDP. Uses a builder pattern to configure the client with API key and local PDP URL.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/concepts/pdp/overview.mdx#2025-04-17_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nimport io.permit.sdk.Permit;\nimport io.permit.sdk.PermitConfig;\n\nPermit permit = new Permit(\n    new PermitConfig.Builder(\"[your-api-key]\")\n        .withPdpAddress(\"http://localhost:7766\")\n        .build()\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Resource Actions in JSON for Permit.io\nDESCRIPTION: JSON payload for configuring custom default actions that will be applied to any new resource. This configuration is applied at the environment level and defines which actions will be automatically populated.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/examples/autopopulate-actions.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"settings\": {\n\t\t\"default_resource_actions\": [\"read\", \"write\", \"allow-review\"]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Permit Client with Cloud PDP in Go\nDESCRIPTION: Creates a Permit client instance in Go connected to the managed Cloud PDP. Uses a config builder to specify the API key and Cloud PDP URL.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/concepts/pdp/overview.mdx#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"github.com/permitio/permit-golang/pkg/permit\"\nimport \"github.com/permitio/permit-golang/pkg/config\"\n\nfunc main() {\n    PermitConfig := config.NewConfigBuilder(\"[your-api-key]\")\n        .WithPdpUrl(\"https://cloudpdp.api.permit.io\")\n        .Build()\n    Permit := permit.New(PermitConfig)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Permit Tenant\nDESCRIPTION: Creates a new tenant in Permit using user email information.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/authentication/stytch/permit-integration.mdx#2025-04-17_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nawait permit.api.tenants.create({\n  key: userEmailId,\n  name: userEmail,\n});\n```\n\n----------------------------------------\n\nTITLE: Running Permit Check for Time-Based Permissions in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to use the Permit.io SDK to check permissions for a user, considering the current time and tenant-specific attributes.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/build-policies/abac/time-based-role.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst permitted = await permit.check(\n  // User object\n  {\n    key: \"george@test.com\",\n    attributes: {\n      current_time: new Date().getTime(),\n    },\n  },\n  // Action\n  \"patch\",\n  // Resource\n  {\n    type: \"_internal_api\",\n    tenant: \"coke\",\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Setting GUNICORN_TIMEOUT Configuration\nDESCRIPTION: Configuration to set the maximum idle / unresponsive time before a worker is killed, in seconds. Default value is 600 seconds.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/concepts/pdp/configuration.mdx#2025-04-17_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nGUNICORN_TIMEOUT\n```\n\n----------------------------------------\n\nTITLE: Creating Role Derivation with Node.js\nDESCRIPTION: Example of how to create role derivation using the Node.js SDK. This grants the 'editor' role on 'file' resources to users who have the 'editor' role on the parent 'folder' resource.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/rebac/rebac-api-calls.mdx#2025-04-17_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nawait permit.api.resourceRoles.update(\"file\", \"editor\", {\n\tgranted_to: {\n\t\tusers_with_role: [\n\t\t\t{\n\t\t\t\tlinked_by_relation: \"parent\",\n\t\t\t\ton_resource: \"folder\",\n\t\t\t\trole: \"editor\",\n\t\t\t},\n\t\t],\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a Permission Rule to a Policy Guard Scope using cURL\nDESCRIPTION: This snippet shows how to add a permission rule to a policy guard scope. It sends a POST request to the Policy Guard API with the scope ID in the URL path and the rule details (resource, role, action, and permission) in the request body.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/policy-guard/policy_guard_api.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST 'https://api.permit.io/v2/policy_guards/scopes/{policy_guard_scope_id}/rules' \\\n-H 'authorization: Bearer API_SECRET_KEY' \\\n--data-raw '{\n    \"resource_key\": \"documents\",\n    \"role_key\": \"admin\",\n    \"action_key\": \"create\",\n    \"is_allowed\": true\n}'\n```\n\n----------------------------------------\n\nTITLE: Defining Role Assignment Payload in JavaScript\nDESCRIPTION: JSON structure for the assignRole payload defining the role, tenant, and user information. Each field accepts either an ID or a key value.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/nodejs/role/assign-role.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\trole: \"role\",\n\ttenant: \"tenant\",\n\tuser: \"user\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Demo Application\nDESCRIPTION: Command to start the development server for the Next.js demo application.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/authentication/hankopermit.mdx#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Removing a Project from a Policy Guard Scope using cURL\nDESCRIPTION: This snippet demonstrates how to disassociate a project from a policy guard scope. It sends a DELETE request to the Policy Guard API with the scope ID in the URL path and the project ID in the request body.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/policy-guard/policy_guard_api.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X DELETE 'https://api.permit.io/v2/policy_guards/scopes/{policy_guard_scope_id}/disassociate' \\\n-H 'authorization: Bearer API_SECRET_KEY' \\\n--data-raw '{\n    \"project_id\": \"c3b6f5d7-8b1e-4c6d-9e9f-8c9d6f8e0c8f\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Listing and Retrieving Resources in Permit.io using Python\nDESCRIPTION: These snippets demonstrate how to list all resources and retrieve a specific resource by its key in Permit.io.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/python/usage-example.mdx#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom permit import ResourceRead\n\nresources: List[ResourceRead] = await permit.api.resources.list()\n\nresource: ResourceRead = await permit.api.resources.get(\"document\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Permit Resources with Terraform HCL\nDESCRIPTION: This snippet demonstrates how to declare Permit resources using Terraform HCL. It defines a 'document' resource with various actions (GET, POST, PUT, DELETE) and attributes, showcasing how to configure authorization policies as infrastructure-as-code.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/integrations/gateways/overview.mdx#2025-04-17_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"permitio_resource\" \"document\" {\n  key         = \"document\"\n  name        = \"document\"\n  description = \"doucments endpoint\"\n  actions = {\n    \"GET\" = {\n      \"name\" = \"read\"\n    }\n    \"POST\" = {\n      \"name\" = \"write\"\n    }\n    \"PUT\" = {\n      \"name\"        = \"update\"\n    }\n    \"DELETE\" = {\n      \"name\"        = \"delete\"\n      \"description\" = \"delete a document\"\n    }\n  }\n  attributes = {\n    \"title\" = {\n      \"description\" = \"the title of the document\"\n      \"type\"        = \"string\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating File Editor Role with Account Global Access using Python\nDESCRIPTION: Python implementation to update the file 'editor' role to include all account members through the 'account_global' relation. This allows sharing files with everyone in an account.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/google-drive.mdx#2025-04-17_snippet_52\n\nLANGUAGE: python\nCODE:\n```\nawait permit.api.resource_roles.update(\n    \"file\",\n    \"editor\",\n    {\n        \"granted_to\": {\n            \"users_with_role\": [\n                {\n                    \"linked_by_relation\": \"parent\",\n                    \"on_resource\": \"folder\",\n                    \"role\": \"editor\",\n                },\n                {\n                    \"linked_by_relation\": \"account_global\",\n                    \"on_resource\": \"account\",\n                    \"role\": \"member\",\n                },\n            ]\n        }\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Account Global Relation for Files using Python\nDESCRIPTION: Python implementation to create an 'account_global' relation for files. This relation enables any file to be connected to an account for permission purposes.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/google-drive.mdx#2025-04-17_snippet_49\n\nLANGUAGE: python\nCODE:\n```\nawait permit.api.resource_relations.create(\n    \"file\",\n    {\n        \"key\": \"account_global\",\n        \"name\": \"Account Global\",\n        \"subject_resource\": \"account\",\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting User with Permit.io Client in .NET\nDESCRIPTION: Demonstrates how to delete a user from the system using their unique user ID. The operation is performed asynchronously using the Permit.io client's API interface.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/dotnet/user/DeleteUser.mdx#2025-04-17_snippet_0\n\nLANGUAGE: dotnet\nCODE:\n```\nvar response = await permitClient.Api.DeleteUser(userId);\n```\n\n----------------------------------------\n\nTITLE: Creating Account-Folder Relationship with cURL\nDESCRIPTION: Creates an 'account' relationship between the 'acme' account and the 'finance' folder. This establishes that the finance folder belongs to the acme account.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/google-drive.mdx#2025-04-17_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://api.permit.io/v2/facts/$permit_project/$permit_env/relationship_tuples \\\n  -X POST \\\n  -H \"Authorization: Bearer $permit_sdk_api_key\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"subject\": \"account:acme\",\n    \"relation\": \"account\",\n    \"object\": \"folder:finance\"\n  }'\n```\n\n----------------------------------------\n\nTITLE: Making Protected API Call with Permit Proxy and Twilio\nDESCRIPTION: Example of using Permit's proxy interface to make a secure API call to Twilio's SMS service with templated secret credentials. The code demonstrates how to use POST request with basic HTTP authentication where sensitive credentials are securely handled by Permit's proxy service.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/foaz/using-permit-overview.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Send an SMS with Twilio via a Permit FoAz protected API call\n// `{{}}` used to template and render secrets into the call at the secure proxy\npermit.proxy.post(\n        'https://api.twilio.com/2010-04-01/Accounts/{{accountSID}}/Messages.json?Body=hello&To=555&From=1337',\n        // Templates to be loaded with actual secrets at proxy.permit.io prior to the actual call to Twilio\n        auth: {\n            username: \"{{accountSID}}\"\n            password: \"{{twilioAuthToken}}\"\n        }\n}).then((res) => {\n        console.log(res, 'res');\n}).catch((err) => {\n        console.log(err);\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting Bulk Relationship Tuples with Permit.io API\nDESCRIPTION: A curl command that shows how to delete multiple relationship tuples at once using the Permit.io API. The request removes specified permission relationships between resources (subject, relation, object).\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/nodejs/bulk-requests-examples.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.permit.io/v2/facts/{proj_id}/{env_id}/relationship_tuples/bulk' \\\n  -H 'authorization: Bearer API_SECRET_KEY'\n  -D '{ \"idents\": [\n                    {\n                    \"subject\": \"organization:permitio\",\n                    \"relation\": \"owner\",\n                    \"object\": \"repo:removed_repo\"\n                    }\n                  ]\n      }'\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Condition Structure in ABAC\nDESCRIPTION: Shows the basic structure for defining conditions in an ABAC policy payload.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/working-with-abac/building-conditions.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"conditions\": {}\n```\n\n----------------------------------------\n\nTITLE: Creating Commenter Role Derivation with Python\nDESCRIPTION: Updates the 'commenter' role for files to be automatically granted to users who have the 'commenter' role on parent folders using the Python SDK. This establishes commenting permission inheritance.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/google-drive.mdx#2025-04-17_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nawait permit.api.resource_roles.update(\n    \"file\",\n    \"commenter\",\n    {\n        \"granted_to\": {\n            \"users_with_role\": [\n                {\n                    \"linked_by_relation\": \"parent\",\n                    \"on_resource\": \"folder\",\n                    \"role\": \"commenter\",\n                }\n            ]\n        }\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Access Requests with Filtering\nDESCRIPTION: This cURL command shows how to retrieve multiple access requests with optional filtering parameters. It includes headers for status, tenant, role, resource, and pagination.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/elements/access-request-api.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.permit.io/v2/facts/{proj_id}/{env_id}/access_requests/{elements_config_id}/user/{user_ident}/tenant/{tenant_ident}' \\\n    -H 'authorization: Bearer API_SECRET_KEY'  \\\n  -H 'status: Status of the access request' \\\n  -H 'tenant: Tenant key of the access request' \\\n  -H 'role: Role key of the access request' \\\n  -H 'resource: Resource key of the access request' \\\n  -H 'resource_instance: Resource instance key of the access request' \\\n  -H 'page: Page number of the results to fetch'  #Default: 1\n  -H 'per_page: The number of results per page (max 100)' #Default: 30\n```\n\n----------------------------------------\n\nTITLE: Retrieving Tenant Role by ID in Go using Permit SDK\nDESCRIPTION: This snippet shows how to get a single tenant role by its ID using the Permit SDK. It takes a context and the role ID (which can also be the role key) as parameters. The function returns the role and an error if any occurs.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/golang/role/Get.mdx#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nrole, err := Permit.Api.Roles.GetById(ctx, uuid.String())\n```\n\n----------------------------------------\n\nTITLE: Creating a Hierarchical Resource Set for Archived Private Repositories in JavaScript\nDESCRIPTION: This code snippet demonstrates condition set hierarchy by creating a resource set for archived private repositories that inherits from the parent 'private_repositories' condition set. It adds an additional condition that the repository must be archived.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/working-with-abac/condition-sets.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"key\": \"private_archived_repos\",\n    \"name\": \"Private Archived Repositories\",\n    \"type\": \"resourceset\",\n    \"parent_id\": \"private_repositories\",\n    \"conditions\": {\n        \"allOf\": [\n            {\n                \"resource.type\": {\n                    \"equals\": \"repository\"\n                }\n            },\n            {\n                \"resource.archived\": {\n                    \"equals\": [\n                        \"true\"\n                    ]\n                }\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Permissions with URL Mapping\nDESCRIPTION: This curl command demonstrates how to check permissions using the /allowed_url endpoint on the PDP. It sends a request with user information, the URL to check, HTTP method, and tenant details.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/foaz/regex-url-mapping-check.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'http://localhost:7766/allowed_url' \\\n--header 'Content-Type: application/json' \\\n--header 'Accept: application/json' \\\n--header 'Authorization: Bearer permit_key_{your_key}' \\\n--data '{\n  \"user\": {\n    \"key\": \"raz@permit.io\"\n  },\n  \"url\": \"https://api.example.com/users/123/profile\",\n  \"http_method\": \"post\",\n  \"tenant\": \"default\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Permit Elements Page\nDESCRIPTION: This code snippet imports various custom React components used to build the Permit Elements overview page. These components include ElementTile, ActionContainer, EmailUpdatesBox, and HelpSupportTile.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/embeddable-uis/overview.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ElementTile from \"@site/src/components/elements/ElementTile.js\";\nimport ActionContainer from \"@site/src/components/elements/ActionContainer.js\";\nimport EmailUpdatesBox from \"@site/src/components/elements/EmailUpdatesBox.js\";\nimport HelpSupportTile from \"@site/src/components/elements/HelpSupportTile.js\";\n```\n\n----------------------------------------\n\nTITLE: Syncing Resources with Actions to Permit.io in C#\nDESCRIPTION: This code demonstrates how to define a resource with actions and synchronize it with Permit.io. It creates a 'document' resource with a 'create' action, defines properties for that action including title and description, and then syncs this configuration to Permit's API.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/reference/SDKs/Dotnet/sync_resources.mdx#2025-04-17_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nstring resourceName = \"document\";\nstring actionName = \"create\";\n// define the action title and description (can be empty)\nActionProperties actionProperties = new ActionProperties(\n    \"Create document\",\n    \"Ability to create document\"\n);\n// define the action\nDictionary<string, ActionProperties> resourceActions = new Dictionary<string, ActionProperties>{{ actionName, actionProperties }};\n// define the resource with its actions\nResourceType[] resourcesToSync = { new ResourceType(resourceName, resourceActions) };\n// sync the resources to Permit\nvar syncedResources = await permit.Api.SyncResources(resourcesToSync);\n\n// SyncResources returns true if the resource was synced otherwise false\n\n```\n\n----------------------------------------\n\nTITLE: Chaining Multiple Mutations\nDESCRIPTION: Example of chaining multiple write operations in a specific order\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/tutorials/_quickstart-parts/_quickstart_python.mdx#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nawait permit.write(\n    permit.api.sync_user({\n        \"key\": \"john@smith.com\",\n        \"firstName\": \"John\",\n        \"lastName\": \"Smith\",\n        \"email\": \"john@smith.com\",\n    }),\n    permit.api.create_tenant({\n        \"key\": \"cool_company_inc\",\n        \"name\": \"Cool Company Inc\"\n    }),\n    permit.api.assign_role(\"john@smith.com\", \"admin\", \"cool_company_inc\")\n)\n```\n\n----------------------------------------\n\nTITLE: Object Match Condition Example\nDESCRIPTION: Demonstrates how to create conditions for matching specific attributes in an object-typed user organization attribute.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/working-with-abac/operators.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"allOf\": [\n        {\n            \"user.organization\": {\n                \"object_match\": {\n                    \"match\": {\n                        \"country\": {\"equals\": \"US\"},\n                        \"subscription\": {\"equals\": \"pro\"}\n                    }\n                }\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding an ABAC Rule to a Policy Guard Scope using cURL\nDESCRIPTION: This snippet demonstrates how to add an Attribute-Based Access Control (ABAC) rule to a policy guard scope. It sends a POST request with user set details, resource, action, and permission information in the request body.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/policy-guard/policy_guard_api.mdx#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST 'https://api.permit.io/v2/policy_guards/scopes/{policy_guard_scope_id}/rules' \\\n-H 'authorization: Bearer API_SECRET_KEY' \\\n--data-raw '{\n    \"resource_key\": \"documents\",\n    \"user_set\": {\n        \"key\": \"user_set_email\",\n        \"attribute\": \"email\",\n        \"values\": \"permit\",\n        \"operator\": \"contains\"\n    },\n    \"action_key\": \"create\",\n    \"is_allowed\": true\n}'\n```\n\n----------------------------------------\n\nTITLE: Assigning a Role to a Group in Permit.io\nDESCRIPTION: POST request to assign the 'editor' role on the 'training_video' resource instance to the 'marketing-team' group. This enables all group members to have editor access to this resource.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/rebac/groups.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.permit.io/v2/schema/{project_id}/{env_id}/group/{group_resource_type_key}/roles' \\\n -H 'authorization: Bearer API_SECRET_KEY' \\\n --data-raw '{\"resource\": \"social_media\", \"resource_instance\": \"training_video\", \"role\": \"editor\", tenant:\"business\"}'\n```\n\n----------------------------------------\n\nTITLE: Installing Permit.io SDK with pip\nDESCRIPTION: Command to install the Permit.io Python SDK using pip package manager\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/tutorials/_quickstart-parts/_quickstart_python.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install permit\n```\n\n----------------------------------------\n\nTITLE: Rendering Configuration Options with ActionContainer Components\nDESCRIPTION: This code snippet shows the use of ActionContainer components to display various configuration and customization options for Permit Elements. Each ActionContainer represents a specific customization feature with its title, description, image, and redirect link.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/embeddable-uis/overview.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ActionContainer\n\ttitle=\"Match your brand\"\n\tdescription=\"Change the background and primary colour of any element to match your brand.\"\n\tsrc=\"/img/elements/colors.png\"\n\tcallToAction={\"Get Started\"}\n\tredirect=\"/embeddable-uis/element/user-management#customising-your-element\"\n/>\n\n<ActionContainer\n\ttitle=\"Add, change or remove a custom title\"\n\tdescription=\"Give the element a name that makes sense to your end users, or hide it.\"\n\tsrc=\"/img/elements/title.png\"\n\treverse\n\tcallToAction={\"Get Started\"}\n\tredirect=\"/embeddable-uis/element/user-management#customising-your-element\"\n/>\n\n<ActionContainer\n\ttitle=\"Control user information\"\n\tdescription=\"Decide if you want to display the user Email, Full Name or both.\"\n\tsrc=\"/img/elements/user-data.png\"\n\tcallToAction={\"Get Started\"}\n\tredirect=\"/embeddable-uis/element/user-management#customising-your-element\"\n/>\n\n<ActionContainer\n\ttitle=\"Configure a webhook\"\n\tdescription=\"Always have full control over how an element is being used by your end users.\"\n\tsrc=\"/img/elements/webhook.png\"\n\treverse\n\tcallToAction={\"How to configure a webhook\"}\n\tredirect=\"/embeddable-uis/element/user-management#configure-your-webhook\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Listing Tenant Users with Permit.io API in JavaScript\nDESCRIPTION: Demonstrates how to list users associated with a tenant using the Permit.io API. The example shows filtering by search term, role, and implementing pagination.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/nodejs/tenant/list-all-tenant-users.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait permit.api.tenants.listTenantUsers({\n  tenantKey: \"default\",\n  search: \"@permit.io\",\n  role: \"admin\",\n  page: 1,\n  perPage: 100,\n});\n```\n\n----------------------------------------\n\nTITLE: Denying Operation Approval in Permit.io API\nDESCRIPTION: This curl command sends a PUT request to deny an operation approval. It requires project ID, environment ID, elements config ID, and operation approval ID. The request can include an optional reviewer comment.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/elements/operation_approval.mdx#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT \\\n'https://api.permit.io/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/operation_approval/{operation_approval_id}/deny' \\\n  -H 'cookie: <COOKIE FROM LOGIN>'\n  -H 'element_id: ELEMENTS_CONFIG_ID'\n  --data-raw\n     \"reviewer_comment\": \"need more info\",\n }\\\n```\n\n----------------------------------------\n\nTITLE: Granting Account Admin Role to File Editor using Python\nDESCRIPTION: Python implementation to update the file 'editor' role with role derivations for account admins. This permits account administrators to edit any file in their account.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/google-drive.mdx#2025-04-17_snippet_46\n\nLANGUAGE: python\nCODE:\n```\nawait permit.api.resource_roles.update(\n    \"file\",\n    \"editor\",\n    {\n        \"granted_to\": {\n            \"users_with_role\": [\n                {\n                    \"linked_by_relation\": \"account\",\n                    \"on_resource\": \"account\",\n                    \"role\": \"admin\",\n                },\n                {\n                    \"linked_by_relation\": \"parent\",\n                    \"on_resource\": \"folder\",\n                    \"role\": \"editor\",\n                },\n            ]\n        }\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Tenant using Permit API in Go\nDESCRIPTION: This snippet shows how to use the Permit API to create a new tenant. It uses the previously created tenantCreate object and a context, and returns the created tenant or an error.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/golang/tenant/Create.mdx#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntenant, err := Permit.Api.Tenants.Create(ctx, *tenantCreate)\n```\n\n----------------------------------------\n\nTITLE: Fetching Tenant List with Permit API in Java\nDESCRIPTION: This code snippet demonstrates how to use the permit.api.tenants.list() method to retrieve an array of TenantRead objects representing available tenants. The method supports pagination with optional 'page' and 'perPage' parameters.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/java/tenant/list.mdx#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nTenantRead[] tenants = permit.api.tenants.list();\n```\n\n----------------------------------------\n\nTITLE: Access Request Webhook schema in Python\nDESCRIPTION: Python schema definition for the webhook payload sent for access requests. Includes requesting user ID, access request details, reason, status, reviewer user ID, and reviewer comment.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/embeddable-uis/webhooks.mdx#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n{\n    requesting_user_id: str,\n    access_request_details: {\n        tenant: str\n        resource: str\n        resource_instance: str\n        action: str\n    },\n    reason: str | None,\n    status: RequestStatus,\n    reviewer_user_id: str | None,\n    reviewer_comment: str | None\n}\n```\n\n----------------------------------------\n\nTITLE: Array Object Matching with Any Match\nDESCRIPTION: Shows how to match conditions against an array of objects using the any_match operator to find matches in organization data.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/working-with-abac/operators.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"allOf\": [\n        {\n            \"user.organizations\": {\n                \"any_match\": {\n                    \"match\": {\n                        \"country\": {\"equals\": \"US\"},\n                        \"subscription\": {\"equals\": \"pro\"}\n                    }\n                }\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Bulk Resource Operations in Permit (Bash)\nDESCRIPTION: Examples of updating and deleting resource instances in bulk using cURL requests to the Permit API. These operations are crucial for maintaining synchronization between resource data and the policy graph in ReBAC policies.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/bulk-operations.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Update existing resource instances\ncurl -X PUT https://api.permit.io/v2/facts/{proj_id}/{env_id}/bulk/resource_instances\n    -H \"Authorization: Bearer {your_permit_token}\" \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\n            \"operations\": [{\n                \"key\": \"react\",\n                \"resource\": \"repository\",\n                \"tenant\": \"default\",\n                \"attributes\": {}\n                }\n            }, ...]\n        }'\n\n# Delete existing resource instances\ncurl -X DELETE https://api.permit.io/v2/facts/{proj_id}/{env_id}/bulk/resource_instances \\\n    -H \"Authorization: Bearer {your_permit_token}\" \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\n            \"idents\": [\"repository:react\", ...]\n        }'\n```\n\n----------------------------------------\n\nTITLE: StytchLogin Component Implementation\nDESCRIPTION: Creation of a StytchLogin component with email magic links and OAuth configuration\nSOURCE: https://github.com/permitio/docs/blob/master/docs/authentication/stytch/permit-integration.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { StytchLogin, Products } from \"@stytch/vanilla-js\";\n\nconst Login = () => {\n  const REDIRECT_URL = \"SEE_STEP_5\";\n\n  const config = {\n    products: [Products.emailMagicLinks, Products.oauth],\n    emailMagicLinksOptions: {\n      loginRedirectURL: REDIRECT_URL,\n      loginExpirationMinutes: 60,\n      signupRedirectURL: REDIRECT_URL,\n      signupExpirationMinutes: 60,\n    },\n    oauthOptions: {\n      providers: [{ type: \"google\" }],\n      loginRedirectURL: REDIRECT_URL,\n      signupRedirectURL: REDIRECT_URL,\n    },\n  };\n\n  return <StytchLogin config={config} styles={{}} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Filtering Relationship Tuples by Relation\nDESCRIPTION: Filter tuples by relation using either relation ID or key.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/examples/filter-relationship-tuple.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.permit.io/v2/facts/{project_id}/{env_id}/relationship_tuples?relation=parent&page=1&per_page=10' \\\n  -H 'authorization: Bearer API_SECRET_KEY'\n```\n\n----------------------------------------\n\nTITLE: Access Request Response Structure\nDESCRIPTION: This JSON structure represents the response received after creating an access request. It includes details about the request, user, and approval status.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/elements/access-request-api.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"requesting_user_id\": \"1c1e4ada-f282-40e6-b3b7-20b3a51c93b5\",\n    \"access_request_details\": {\n        \"tenant\": \"34f5c98e-f430-457b-a812-92637d0c6fd0\",\n        \"resource\": \"4d5215ed-38bb-48ed-879a-fdb9ca58522f\",\n        \"resource_instance\": \"2d98d9f8-e1b7-4f1d-baad-2edbf6fa6c66\",\n        \"role\": \"ac4e70c8-d5be-48af-93eb-760f58fc91a9\",\n    },\n    \"reason\": \"done onboarding\",\n    \"org_id\": \"7c60d51f-b44e-4682-87d6-449835ea4de6\",\n    \"project_id\": \"405d8375-3514-403b-8c43-83ae74cfe0e9\",\n    \"env_id\": \"40ef0e48-a11f-4963-a229-e396c9f7e7c4\",\n    \"created_at\": \"2019-08-24T14:15:22Z\",\n    \"updated_at\": \"2019-08-24T14:15:22Z\",\n    \"status\": null,\n    \"reviewer_user_id\": null,\n    \"reviewed_at\": null,\n    \"reviewer_comment\": null,\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Tenant by Key in Go\nDESCRIPTION: Fetches tenant information using the tenant key. Takes a context and tenant key string as parameters and returns a tenant object and error.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/golang/tenant/Get.mdx#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntenant, err := Permit.Api.Tenants.Get(ctx, \"tenantKey\")\n```\n\n----------------------------------------\n\nTITLE: Managing Order Resources and Role Assignments in Permit.io\nDESCRIPTION: Code examples for syncing orders with Permit.io including creating resources, assigning roles, and deleting orders in a multi-tenant context.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/food-delivery-system-example-using-nuxt.mdx#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Sync a new order with Permit\npermit.api.resourceInstances.create({\n  key: id,\n  resource: \"Order\",\n  attributes: { cost: totalPrice },\n  tenant: \"california\",\n});\n\n// Set the Order's Vendor with Permit\npermit.api.roleAssignments.assign({\n  user: vendor,\n  role: \"Vendor\",\n  resource_instance: `Order:${id}`,\n  tenant: \"california\",\n});\n\n// Sync a deleted order with Permit\npermit.api.resourceInstances.delete(`Order:${id}`);\n```\n\n----------------------------------------\n\nTITLE: Assigning Tenant-Level Role with JavaScript\nDESCRIPTION: This JavaScript snippet assigns the 'AccountOwner' role to a user in the context of their tenant, establishing a tenant-level RBAC relationship in Permit.io.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/mesa-verde.mdx#2025-04-17_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nawait permit.api.assignRole({\n  role: \"AccountOwner\",\n  tenant: cleanedEmail,\n  user: email,\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Quickstart Components in JSX\nDESCRIPTION: This snippet imports the necessary components for the .NET quickstart guide, including an introduction content and a .NET-specific example.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/dotnet/quickstart-dotnet.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport IntroContent from \"@site/docs/getting-started/_quickstart-parts/_quickstart_intro.mdx\";\nimport DotNetExample from \"@site/docs/getting-started/_quickstart-parts/_quickstart_dotnet.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Creating Another User in Permit.io\nDESCRIPTION: This snippet demonstrates creating another user in Permit.io's system. It creates a user with the email 'jane@acme.com' who will have 'editor' access to a folder.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/google-drive.mdx#2025-04-17_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://api.permit.io/v2/facts/$permit_project/$permit_env/users \\\n  -X POST \\\n  -H \"Authorization: Bearer $permit_sdk_api_key\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"key\": \"jane@acme.com\"\n  }'\n```\n\nLANGUAGE: python\nCODE:\n```\nawait permit.api.sync_user(\n    {\n        \"key\": \"jane@acme.com\",\n    }\n)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nawait permit.api.syncUser({\n  key: \"jane@acme.com\",\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Permit.io Elements IFrame Implementation\nDESCRIPTION: HTML iframe implementation for Permit.io Elements with required URL parameters including elementsToken, envId, darkMode, and tenantKey. The iframe needs to be configured with appropriate dimensions and should only be loaded after user authentication.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/embeddable-uis/element-login.mdx#2025-04-17_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n    <iframe\n        src=\"https://embed.permit.io/<ELEMENT_NAME>?envId=<SOME_UNIQUE_ID>&darkMode=false&tenantKey=<TENANT_KEY>&elementsToken=true\"\n        width=\"100%\"\n        height=\"100%\"\n        frameborder=\"0\"/>\n```\n\n----------------------------------------\n\nTITLE: Filtering Relationship Tuples by Object Type\nDESCRIPTION: Filter tuples by object type using resource ID or key.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/examples/filter-relationship-tuple.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.permit.io/v2/facts/{project_id}/{env_id}/relationship_tuples?object_type=File&page=1&per_page=10' \\\n  -H 'authorization: Bearer API_SECRET_KEY'\n```\n\n----------------------------------------\n\nTITLE: Creating a Social Media Resource in Permit.io\nDESCRIPTION: POST request to create a new resource type called 'social_media'. This resource will be used to represent social media assets that marketing team members will need to access.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/rebac/groups.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.permit.io/v2/schema/{proj_id}/{env_id}/resources' \\\n -H 'authorization: Bearer API_SECRET_KEY' \\\n --data-raw '{\"key\": \"social_media\", \"name\": \"social media\", \"actions\":{}}'\n```\n\n----------------------------------------\n\nTITLE: Approving an Access Request\nDESCRIPTION: This cURL command shows how to approve an access request using a PUT request. It includes an optional reviewer comment in the request body.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/elements/access-request-api.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.permit.io/v2/facts/{proj_id}/{env_id}/access_requests/{elements_config_id}/user/{user_ident}/tenant/{tenant_ident}/{access_request_id}/approve' \\\n    -H 'authorization: Bearer API_SECRET_KEY'  \\\n  --data-raw\n {\n     \"reviewer_comment\": \"new employee\",\n }\\\n```\n\n----------------------------------------\n\nTITLE: Fetching JWKS from SuperTokens\nDESCRIPTION: SuperTokens provides a JWKS endpoint that combines the API domain and base path configured in your SuperTokens backend SDK initialization. This endpoint serves the JSON Web Keys needed for JWT verification.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/foaz/fetching-jwks.mdx#2025-04-17_snippet_5\n\nLANGUAGE: http\nCODE:\n```\n{apiDomain}/{apiBasePath}/jwt/jwks.json\n```\n\n----------------------------------------\n\nTITLE: Creating a New Tenant using Permit.io API in C#\nDESCRIPTION: This code demonstrates how to create a new tenant using the Permit.io client library. It calls the CreateTenant method of the API, passing in the tenant object.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/dotnet/tenant/CreateTenant.mdx#2025-04-17_snippet_1\n\nLANGUAGE: dotnet\nCODE:\n```\nvar response = await permitClient.Api.CreateTenant(tenantObj);\n```\n\n----------------------------------------\n\nTITLE: Fetching Tenant Information with Permit.io API in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the getTenant method from the Permit.io API to retrieve tenant information. The function takes a tenantId parameter, which can be either the tenant's unique identifier or the tenant key.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/nodejs/tenant/get-tenant.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst tenant = await permit.api.getTenant(tenantId);\n```\n\n----------------------------------------\n\nTITLE: Granting Account Admin Role to File Editor using cURL\nDESCRIPTION: Updates the file 'editor' role to grant it to users with the 'admin' role on the account. This allows account admins to edit any file in their account.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/google-drive.mdx#2025-04-17_snippet_45\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://api.permit.io/v2/schema/$permit_project/$permit_env/resources/file/roles/editor \\\n  -X PATCH \\\n  -H \"Authorization: Bearer $permit_sdk_api_key\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"granted_to\": {\n        \"users_with_role\": [\n            {\n                \"linked_by_relation\": \"account\",\n                \"on_resource\": \"account\",\n                \"role\": \"admin\"\n            },\n            {\n                \"linked_by_relation\": \"parent\",\n                \"on_resource\": \"folder\",\n                \"role\": \"editor\"\n            }\n        ]\n\t}\n  }'\n```\n\n----------------------------------------\n\nTITLE: Creating a Role using Permit.io API in C#\nDESCRIPTION: This snippet shows how to use the Permit.io client to create a new role. It assumes that a 'role' object has been defined with the necessary properties.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/dotnet/role/CreateRole.mdx#2025-04-17_snippet_1\n\nLANGUAGE: dotnet\nCODE:\n```\nvar response = await permitClient.Api.CreateRole(role);\n```\n\n----------------------------------------\n\nTITLE: Canceling Operation Approval in Permit.io API\nDESCRIPTION: This curl command sends a PUT request to cancel an operation approval. It requires project ID, environment ID, elements config ID, and operation approval ID. The request includes a reason for cancellation.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/elements/operation_approval.mdx#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT \\\n 'https://api.permit.io/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/operation_approval/{operation_approval_id}/cancel' \\\n  -H 'cookie: <COOKIE FROM LOGIN>'\n  -H 'element_id: ELEMENTS_CONFIG_ID'\n  --data-raw\n{\n    \"reason\": \"done onboarding last week\",\n} \\\n```\n\n----------------------------------------\n\nTITLE: Querying Message Delivery Statistics in Bash\nDESCRIPTION: This curl command shows how to retrieve statistics on message delivery for all updates in an environment. It requires the project and environment in the URL path, along with an API key for authentication.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/pdp-statistics.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location \\\n\t--request GET 'https://pdp-statistics.api.permit.io/v2/stats/{project}/{environment}/messages' \\\n\t--header 'Content-Type: application/json' \\\n\t--header 'Authorization: Bearer <YOUR API KEY>'\n```\n\n----------------------------------------\n\nTITLE: Basic Path Parameter Regex Pattern\nDESCRIPTION: This JSON escaped regex pattern matches URLs with a numeric user ID in the path, such as https://api.example.com/users/123/profile. It captures the numeric user ID as a named parameter 'user_id'.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/foaz/regex-url-mapping-check.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n//JSON Escaped Regex URL\n\"url\": \"^https://api\\\\.example\\\\.com/users/(?P<user_id>[0-9]+)/profile$\"\n```\n\n----------------------------------------\n\nTITLE: Filtering Role Assignments by Resource Type\nDESCRIPTION: Filter role assignments by resource type (e.g., document) to retrieve all role assignments related to a specific resource regardless of instance. This helps identify all users with permissions on a particular resource type.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/examples/filter-role-associations.mdx#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.permit.io/v2/facts/{project_id}/{env_id}/role_assignments?resource=document' \\\n  -H 'authorization: Bearer API_SECRET_KEY'\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"id\": \"94fc60c369cb4c5da6f2e497a29eca9f\",\n        \"user\": \"bob\",\n        \"role\": \"owner\",\n        \"tenant\": \"default\",\n        \"resource_instance\": \"document:spreadsheet\",\n        \"resource_instance_id\": \"33234730008f4bbab25b208c62cfb169\",\n        \"user_id\": \"c428e65465f94eea888ac274d2a428a5\",\n        \"role_id\": \"b4f9cb32df60459291a00ca5be7c1bb9\",\n        \"tenant_id\": \"8d15d835c04c40429807215e9aee418e\",\n        \"organization_id\": \"47b37e40e1094a2580fc6589ad24fec5\",\n        \"project_id\": \"6b84d0a6705c4c81a8818f4e7bb0f589\",\n        \"environment_id\": \"47e86c08899f4b798657fd19f09b54c1\",\n        \"created_at\": \"2024-06-30T22:37:58+00:00\"\n    },\n    {\n        \"id\": \"f7bbee0360494e96ba9bf594e807b040\",\n        \"user\": \"alice\",\n        \"role\": \"owner\",\n        \"tenant\": \"default\",\n        \"resource_instance\": \"document:photo\",\n        \"resource_instance_id\": \"560bd95aa9a94032a74541f6c55a883f\",\n        \"user_id\": \"9b14f8deb1274af09931c2cfb3cb4cf8\",\n        \"role_id\": \"b4f9cb32df60459291a00ca5be7c1bb9\",\n        \"tenant_id\": \"8d15d835c04c40429807215e9aee418e\",\n        \"organization_id\": \"47b37e40e1094a2580fc6589ad24fec5\",\n        \"project_id\": \"6b84d0a6705c4c81a8818f4e7bb0f589\",\n        \"environment_id\": \"47e86c08899f4b798657fd19f09b54c1\",\n        \"created_at\": \"2024-06-30T22:36:44+00:00\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Hanko Authentication Component in React\nDESCRIPTION: React code snippet showing how to implement the Hanko authentication component in a Next.js page.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/authentication/hankopermit.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<Paper sx={{ p: 2 }}>\n  <HankoAuth />\n</Paper>\n```\n\n----------------------------------------\n\nTITLE: Approving Access Request using Permit.io API (Bash)\nDESCRIPTION: This snippet shows how to approve an access request using a PUT request to the Permit.io API. It includes an optional reviewer comment in the request body.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/elements/access-requests.mdx#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.permit.io/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/access_requests/{access_request_id}/approve' \\\n    -H 'cookie: <COOKIE FROM LOGIN>' \\\n  -H 'origin: https://api.permit.io'\n  --data-raw\n {\n     \"reviewer_comment\": \"new employee\",\n }\\\n```\n\n----------------------------------------\n\nTITLE: Updating Reviewer Details in Access Request using Permit.io API (Bash)\nDESCRIPTION: This snippet demonstrates how to update an access request's reviewer details using a PATCH request to the Permit.io API. It includes optional data for updating the reviewer comment and role.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/elements/access-requests.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.permit.io/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/access_requests/{access_request_id}/reviewer' \\\n    -H 'cookie: <COOKIE FROM LOGIN>' \\\n  -H 'origin: https://api.permit.io'\n  --data-raw\n     \"reviewer_comment\": \"new employee\",\n     \"role\": \"ac4e70c8-d5be-48af-93eb-760f58fc91a9\",\n } \\\n```\n\n----------------------------------------\n\nTITLE: PermitJS GET Request Example\nDESCRIPTION: JavaScript example showing how to make a GET request using the PermitJS proxy client.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/foaz/detailed-guide.mdx#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\npermitStripeProxy\n\t.get({\n\t\turl: \"https://stripe.com/createPayment\",\n\t\tparams: { test: \"tester\" },\n\t\theaders: { test: \"testHeader\" }\n\t})\n\t.then((res: any) => {\n\t\tconsole.log(\"res\", res);\n\t})\n\t.catch((err: any) => {\n\t\tconsole.log(\"err\", err);\n\t});\n```\n\n----------------------------------------\n\nTITLE: Creating Proxy Configuration with Regex URL Mapping\nDESCRIPTION: This code demonstrates how to create a proxy configuration with a regex URL mapping rule through the Permit.io API. The rule maps a URL pattern with a user_id parameter to a specific resource and action.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/foaz/regex-url-mapping-check.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'https://api.permit.io/v2/facts/{project_id}/{env_id}/proxy_configs' \\\n--header 'Content-Type: application/json' \\\n--header 'Accept: application/json' \\\n--header 'Authorization: Bearer YOUR_PERMIT_KEY' \\\n--data '{\n  \"name\": \"Users API\",\n  \"key\": \"users_api\",\n  \"mapping_rules\": [\n    {\n      \"url\": \"^https://api\\\\.example\\\\.com/api/v1/users/(?P<user_id>[0-9]+)/profile$\",\n      \"http_method\": \"post\",\n      \"resource\": \"users\",\n      \"action\": \"update\",\n      \"url_type\": \"regex\"\n    }\n  ],\n  \"secret\":\"abc123notUsed\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Setting PDP OPA Client Query Timeout in Bash\nDESCRIPTION: Configuration for setting a custom timeout value for bulk permission checking operations. This environment variable helps prevent OPA timeouts during intensive bulk check operations by extending the default query timeout.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/enforce-permissions/bulk-check.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nPDP_OPA_CLIENT_QUERY_TIMEOUT=10\n```\n\n----------------------------------------\n\nTITLE: Creating File-Account Relation in Permit.io\nDESCRIPTION: This snippet shows how to create a resource relation between 'file' and 'account' resources using Permit.io's API. It establishes the 'account' as a subject resource for the 'file' resource.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/google-drive.mdx#2025-04-17_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://api.permit.io/v2/schema/$permit_project/$permit_env/resources/file/relations \\\n  -X POST \\\n  -H \"Authorization: Bearer $permit_sdk_api_key\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"key\": \"account\",\n    \"name\": \"Account\",\n    \"subject_resource\": \"account\"\n  }'\n```\n\nLANGUAGE: python\nCODE:\n```\nawait permit.api.resource_relations.create(\n    \"file\",\n    {\n        \"key\": \"account\",\n        \"name\": \"Account\",\n        \"subject_resource\": \"account\",\n    }\n)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nawait permit.api.resourceRelations.create(\"file\", {\n  key: \"account\",\n  name: \"Account\",\n  subject_resource: \"account\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Account Resource with Python SDK\nDESCRIPTION: Python code to create an 'Account' resource type with roles and permissions using the Permit.io Python SDK.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/google-drive.mdx#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom permit import Permit\n\npermit = Permit(token=\"<YOUR_API_KEY>\", ...)\n\nawait permit.api.create_resource(\n    {\n        \"key\": \"account\",\n        \"name\": \"Account\",\n        \"actions\": {\n            \"invite-member\": {},\n            \"list-members\": {},\n            \"remove-member\": {}\n        },\n        \"roles\": {\n            \"admin\": {\n                \"name\": \"Admin\",\n                \"permissions\": [\n                    \"invite-member\",\n                    \"list-members\",\n                    \"remove-member\"\n                ]\n            },\n            \"member\": {\n                \"name\": \"Member\",\n                \"permissions\": [\n                    \"list-members\"\n                ]\n            }\n        }\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Parent Relationship Tuple with Node.js\nDESCRIPTION: Creates a 'parent' relationship from the '2023_report' file to the 'finance' folder using the Permit.io Node.js SDK. This defines the containment relationship between the folder and file.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/google-drive.mdx#2025-04-17_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nawait permit.api.relationshipTuples.create({\n  subject: \"folder:finance\",\n  relation: \"parent\",\n  object: \"file:2023_report\",\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Resource Using Permit API in Go\nDESCRIPTION: This snippet shows how to call the Update method of the Permit API's Resources service to update a resource. It uses the context, resource key, and the previously created resourceUpdate object.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/golang/resource/Update.mdx#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nresource, err := Permit.Api.Resources.Update(ctx, \"resourceKey\", *resourceUpdate)\n```\n\n----------------------------------------\n\nTITLE: Response Format with Total Count in Permit.io Relationship Tuples List\nDESCRIPTION: Demonstrates the response format when include_total_count is set to true. This format includes the data array with relationship tuples, plus total_count and pagination_count metadata to facilitate pagination.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/nodejs/relationship-tuple/list-relationship-tuples.mdx#2025-04-17_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n{\ndata: [\n  {\n    \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n    \"subject\": \"organization:permitio\",\n    \"relation\": \"owner\",\n    \"object\": \"repo:opal\",\n    \"tenant\": \"stripe-inc\",\n    \"subject_id\": \"7c60d51f-b44e-4682-87d6-449835ea4d11\",\n    \"relation_id\": \"405d8375-3514-403b-8c43-83ae74cfe022\",\n    \"object_id\": \"12f84e49-af17-4b0c-8cd7-01258769c2ba\",\n    \"tenant_id\": \"40ef0e48-a11f-4963-a229-e396c9f7e733\",\n    \"organization_id\": \"7c60d51f-b44e-4682-87d6-449835ea4de6\",\n    \"project_id\": \"405d8375-3514-403b-8c43-83ae74cfe0e9\",\n    \"environment_id\": \"40ef0e48-a11f-4963-a229-e396c9f7e7c4\",\n    \"created_at\": \"2019-08-24T14:15:22Z\",\n    \"updated_at\": \"2019-08-24T14:15:22Z\"\n  }\n],\n total_count: 1 ,\n pagination_count: 1\n}\n```\n\n----------------------------------------\n\nTITLE: Installing PDP on Kubernetes using Helm\nDESCRIPTION: Command to install the PDP on Kubernetes using Helm. It sets the API key, creates a new namespace, and waits for the deployment to complete. Replace <API_KEY> with your actual API key.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/deploy/cloud-hosts/helm.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm install pdp pdp/pdp --set pdp.ApiKey=<API_KEY> --create-namespace --namespace pdp --wait\n```\n\n----------------------------------------\n\nTITLE: Granting Account Admin Role to Folder Editor using cURL\nDESCRIPTION: Updates the folder 'editor' role to grant it to users with the 'admin' role on the linked account. This allows account admins to edit any folder in their account.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/google-drive.mdx#2025-04-17_snippet_42\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://api.permit.io/v2/schema/$permit_project/$permit_env/resources/folder/roles/editor \\\n  -X PATCH \\\n  -H \"Authorization: Bearer $permit_sdk_api_key\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"granted_to\": {\n        \"users_with_role\": [\n            {\n                \"linked_by_relation\": \"account\",\n                \"on_resource\": \"account\",\n                \"role\": \"admin\"\n            },\n            {\n                \"linked_by_relation\": \"parent\",\n                \"on_resource\": \"folder\",\n                \"role\": \"editor\"\n            }\n        ]\n\t}\n  }'\n```\n\n----------------------------------------\n\nTITLE: Fetching Resources using Permit API in Java\nDESCRIPTION: Demonstrates three different methods to retrieve resource information using the Permit API: get() which accepts both resource ID or key, getByKey() for key-based lookup, and getById() for UUID-based lookup. Returns ResourceRead object containing resource information.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/java/resource/get.mdx#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.permit.sdk.openapi.models.ResourceRead;\n\n// accepts both the resource id and the resource key\nResourceRead resource = permit.api.resources.get(\"[RESOURCE ID OR KEY]\");\n\n// if you want to be explicit, you can use getByKey\nResourceRead resource2 = permit.api.resources.getByKey(\"[RESOURCE KEY]\");\n\n// or getById\nResourceRead resource3 = permit.api.resources.getById(new UUID(\"[RESOURCE ID]\"));\n```\n\n----------------------------------------\n\nTITLE: Custom Data Source Policy Example\nDESCRIPTION: Example of using custom data source in Rego policy\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/manage-data/use-external-data-source.mdx#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\ndata.countries[0].capital == \"Bridgetown\"\n```\n\n----------------------------------------\n\nTITLE: ABAC User Permissions via cURL\nDESCRIPTION: Direct API call to retrieve ABAC-enabled user permissions using cURL. Shows how to enable ABAC calculations through the PDP API.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/enforce-permissions/user-permissions.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'http://localhost:7766/user-permissions' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer <api key>' \\\n--data '{\n    \"user\": {\n        \"key\": \"eddie\"\n    },\n    \"resource_types\": [\n        \"document\",\n        \"__tenant\"\n    ],\n    \"context\": {\n        \"enable_abac_user_permissions\": true\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating a Folder Instance in Permit.io\nDESCRIPTION: This snippet shows how to create a folder instance in Permit.io. It creates a folder named 'finance' in the 'default' tenant, which is necessary for maintaining tenant boundaries for resource instances.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/google-drive.mdx#2025-04-17_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://api.permit.io/v2/facts/$permit_project/$permit_env/resource_instances \\\n  -X POST \\\n  -H \"Authorization: Bearer $permit_sdk_api_key\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"resource\": \"folder\",\n    \"key\": \"finance\",\n    \"tenant\": \"default\"\n  }'\n```\n\nLANGUAGE: python\nCODE:\n```\nawait permit.api.resource_instances.create(\n    {\n        \"resource\": \"folder\",\n        \"key\": \"finance\",\n        \"tenant\": \"default\"\n    }\n)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nawait permit.api.resourceInstances.create({\n  resource: \"folder\",\n  key: \"finance\",\n  tenant: \"default\",\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Roles List using Permit API in Java\nDESCRIPTION: Demonstrates how to fetch an array of available roles using the permit.api.roles.list() method. The method supports pagination through page and perPage parameters, with perPage defaulting to 100 results per page.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/java/role/list.mdx#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nRoleRead[] roles = permit.api.roles.list();\n```\n\n----------------------------------------\n\nTITLE: Installing Permit.io SDK with pip\nDESCRIPTION: Command to install the Permit.io SDK using pip package manager.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/getting-started/_quickstart-parts/_quickstart_python.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install permit\n```\n\n----------------------------------------\n\nTITLE: Implementing FrontendOnly Login Method with Permit Elements\nDESCRIPTION: JavaScript code snippet demonstrating how to configure and use the FrontendOnly login method for Permit Elements. It includes setting up login parameters and handling the response.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/embeddable-uis/embedding-elements.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\npermit.elements\n  .login({\n    loginMethod: LoginMethod.frontendOnly,\n    userJwt: \"<YOUR_USER_JWT>\",\n    tenant: \"<YOUR_TENANT_KEY>\",\n    envId: \"<YOUR_ENV_ID>\",\n  })\n  .then((res: any) => {\n    console.log(\"success\", res);\n  })\n  .catch((err: any) => {\n    // you can handle the error either here or in your BE\n    console.log(\"err\", err);\n  });\n```\n\n----------------------------------------\n\nTITLE: Authentication Redirect Handler\nDESCRIPTION: Component to handle authentication redirects and token validation\nSOURCE: https://github.com/permitio/docs/blob/master/docs/authentication/stytch/permit-integration.mdx#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRouter } from \"next/router\";\nimport { useEffect } from \"react\";\nimport stytch from \"stytch\";\n\nexport default function RedirectPage() {\n  const router = useRouter();\n\n  useEffect(() => {\n    const stytch_token_type = router?.query?.stytch_token_type?.toString();\n    const token = router?.query?.token?.toString();\n\n    if (token && stytch_token_type === \"oauth\") {\n      stytch.oauth.authenticate(token, {\n        session_duration_minutes: 60,\n      });\n    } else if (token && stytch_token_type === \"magic_links\") {\n      stytch.magicLinks.authenticate(token, {\n        session_duration_minutes: 60,\n      });\n    }\n  }, [router]);\n\n  return <div>Loading...</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Access Request\nDESCRIPTION: Make a POST request to create a new access request. The request includes details such as tenant, resource, resource instance, role, and reason. The response includes the created access request object.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/elements/access-requests.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.permit.io/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/access_requests' \\\n    -H 'cookie: <COOKIE FROM LOGIN>' \\\n  -H 'origin: https://api.permit.io'\n  -data-raw\n {\n    \"access_request_details\": {\n        \"tenant\": \"34f5c98e-f430-457b-a812-92637d0c6fd0\",\n        \"resource\": \"4d5215ed-38bb-48ed-879a-fdb9ca58522f\",\n        \"resource_instance\": \"2d98d9f8-e1b7-4f1d-baad-2edbf6fa6c66\",\n        \"role\": \"ac4e70c8-d5be-48af-93eb-760f58fc91a9\",\n    },\n    \"reason\": \"done onboarding\",\n } \\\n```\n\n----------------------------------------\n\nTITLE: Creating Condition Set Rule in Permit.io\nDESCRIPTION: Establishes a rule allowing privileged users to read secret documents. It links the previously defined user set and resource set with the 'document:read' permission.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/integrations/infra-as-code/terraform-provider.mdx#2025-04-17_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"permitio_condition_set_rule\" \"allow_privileged_users_to_read_secret_docs\" {\n  user_set     = permitio_user_set.privileged_users.key\n  resource_set = permitio_resource_set.secret_docs.key\n  permission   = \"document:read\"\n}\n```\n\n----------------------------------------\n\nTITLE: User Management - Invite User webhook schema in Python\nDESCRIPTION: Python schema definition for the webhook payload sent when a user is invited. Includes fields for email, role, tenant ID, and webhook type.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/embeddable-uis/webhooks.mdx#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n{\n    email: str\n    role: str\n    tenant_id: str\n    type: ElementsWebhookType = \"invite_user\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a PDP Sync Error Webhook Receiver in Python with FastAPI\nDESCRIPTION: This Python code snippet shows an example implementation of a webhook receiver using FastAPI. It defines a data model for the webhook payload and a route to handle incoming webhook POST requests.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/pdp-webhooks.mdx#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom uuid import UUID\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass PDPErrorWebhook(BaseModel):\n    org_id: UUID\n    project_id: UUID\n    env_id: UUID\n    pdp_ids: list[UUID]\n\n\n@app.post(\"/webhook\")\ndef post_webhook(webhook_data: PDPErrorWebhook):\n    print(f\"Got webhook with {webhook_data}\")\n```\n\n----------------------------------------\n\nTITLE: Creating Account Resource Instance with cURL\nDESCRIPTION: Creates an 'acme' account resource instance that will be used to establish account-level relationships. This forms the basis for account-wide admin permissions.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/google-drive.mdx#2025-04-17_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://api.permit.io/v2/facts/$permit_project/$permit_env/resource_instances \\\n  -X POST \\\n  -H \"Authorization: Bearer $permit_sdk_api_key\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"resource\": \"account\",\n    \"key\": \"acme\",\n    \"tenant\": \"default\"\n  }'\n```\n\n----------------------------------------\n\nTITLE: Creating Role in Permit.io\nDESCRIPTION: Creates a 'reader' role with permission to read documents. It depends on the 'document' resource to ensure proper creation order.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/integrations/infra-as-code/terraform-provider.mdx#2025-04-17_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"permitio_role\" \"reader\" {\n  key         = \"reader\"\n  name        = \"Reader\"\n  description = \"A role that allows reading documents\"\n  permissions = [\n    \"document:read\"\n  ]\n  extends     = []\n  depends_on  = [\n    permitio_resource.document # This is required to ensure that the resource is created before the role (for the permissions assignment)\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Resource using Permit API in Java\nDESCRIPTION: This code snippet demonstrates how to delete a resource using the Permit API in Java. It uses the delete() method of the resources module, which requires the resource key or ID as a parameter.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/java/resource/delete.mdx#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npermit.api.resources.delete(\"[RESOURCE KEY OR ID]\");\n```\n\n----------------------------------------\n\nTITLE: Update Resource Implementation\nDESCRIPTION: Example implementation showing how to call the updateResource API method with a resource ID and stringified resource object.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/nodejs/resource/update-resource.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await permit.api.updateResource(\n\tresourceId,\n\tJSON.stringify(resource)\n);\n```\n\n----------------------------------------\n\nTITLE: Valid Complex Time-Based Condition\nDESCRIPTION: Shows a valid complex condition using time-based rules and nested logical operators.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/working-with-abac/building-conditions.mdx#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"allOf\": [\n        {\n            \"subject.time\": {\n                \"anyOf\": [{\"between\": [9, 12]}, {\"between\": [13, 18]}]\n            }\n        },\n        {\n            \"resource.weekday\": {\n                \"not\": {\"anyOf\": [{\"equals\": \"saturday\"}, {\"equals\": \"sunday\"}]}\n            }\n        },\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Environment Roles to Users in Permit.io\nDESCRIPTION: This example shows how to assign an environment-level role to a user. The code assigns the 'Representative' role to a user within the 'default' tenant.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/pink-mobile.mdx#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nawait permit.api.roleAssignments.assign({\n    role: \"representative\",\n    user: \"sirius@pink.mobile\",\n    tenant: \"default\",\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting a Role with the Permit API in Java\nDESCRIPTION: This code demonstrates how to delete a role from the Permit system using the role's unique key or ID. The method requires a single parameter which is the unique identifier of the role to be deleted.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/java/role/delete.mdx#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npermit.api.roles.delete(\"[ROLE KEY OR ID]\");\n```\n\n----------------------------------------\n\nTITLE: Creating Relationship Tuples Between Resources in Permit.io\nDESCRIPTION: This example shows how to create a relationship between resources. It establishes a 'parent' relationship between an account resource and a plan resource, which enables role derivation between related resources.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/pink-mobile.mdx#2025-04-17_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nawait permit.api.relationshipTuples.create({\n    subject: `account:harry`,\n    object: `plan:harry`,\n    relation: \"parent\",\n    tenant: \"default\",\n})\n```\n\n----------------------------------------\n\nTITLE: Canceled Operation Approval Response JSON Structure in Permit.io API\nDESCRIPTION: This JSON structure represents the response after canceling an operation approval. It includes details such as requesting user, access request details, approval status (canceled), and timestamps. Reviewer fields are null for canceled approvals.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/elements/operation_approval.mdx#2025-04-17_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"requesting_user_id\": \"1c1e4ada-f282-40e6-b3b7-20b3a51c93b5\",\n     \"access_request_details\": {\n        \"tenant\": \"34f5c98e-f430-457b-a812-92637d0c6fd0\",\n        \"resource\": \"4d5215ed-38bb-48ed-879a-fdb9ca58522f\",\n        \"resource_instance\": \"2d98d9f8-e1b7-4f1d-baad-2edbf6fa6c66\",\n    },\n    \"reason\": \"I need to make transfer for my client\",\n    \"org_id\": \"7c60d51f-b44e-4682-87d6-449835ea4de6\",\n    \"project_id\": \"405d8375-3514-403b-8c43-83ae74cfe0e9\",\n    \"env_id\": \"40ef0e48-a11f-4963-a229-e396c9f7e7c4\",\n    \"created_at\": \"2019-08-24T14:15:22Z\",\n    \"updated_at\": \"2019-08-24T14:15:22Z\",\n    \"status\": \"cancel\",\n    \"reviewer_user_id\": null,\n    \"reviewed_at\": null,\n    \"reviewer_comment\": null,\n    \"type\": \"operation_approval\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific Access Request with cURL\nDESCRIPTION: This cURL command demonstrates how to retrieve a specific access request using a GET request. It requires the project ID, environment ID, and access request ID.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/elements/access-request-api.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.permit.io/v2/facts/{proj_id}/{env_id}/access_requests/{elements_config_id}/user/{user_ident}/tenant/{tenant_ident}/{access_request_id}' \\\n    -H 'authorization: Bearer API_SECRET_KEY'  \\\n```\n\n----------------------------------------\n\nTITLE: Deleting a User with Permit API in Java\nDESCRIPTION: This code snippet demonstrates how to delete a user using the permit.api.users.delete() method. It requires the user's unique key or ID as a parameter.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/java/user/delete.mdx#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npermit.api.users.delete(\"[USER KEY OR ID]\");\n```\n\n----------------------------------------\n\nTITLE: Installing Permit.io SDK via pip\nDESCRIPTION: Command to install the Permit.io SDK using pip package manager\nSOURCE: https://github.com/permitio/docs/blob/master/docs/getting-started/_quickstart-parts/_quickstart_python_sync.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install permit\n```\n\n----------------------------------------\n\nTITLE: User Management - Assign Role to User webhook schema in Python\nDESCRIPTION: Python schema definition for the webhook payload sent when a role is assigned to a user. Includes fields for user ID, tenant ID, role, permission level, and webhook type.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/embeddable-uis/webhooks.mdx#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n{\n    user_id: str\n    tenant_id: str\n    role: str\n    permission_level: str\n    type: ElementsWebhookType = \"role_assignment\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running PDP Docker Container\nDESCRIPTION: Command to run the PDP container with debug mode enabled and API key configuration. Exposes port 7766 and requires replacing the API key placeholder.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/overview/run-pdp.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it -p 7766:7000 --env PDP_DEBUG=True --env PDP_API_KEY=<YOUR_API_KEY> permitio/pdp-v2:latest\n```\n\n----------------------------------------\n\nTITLE: Listing Roles in Java\nDESCRIPTION: Java code to get all roles assigned across all tenants. Uses the getAssignedRolesInAllTenants API method and stores the result in a RoleAssignmentList object.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/tutorials/Onboarding/connect-your-app.mdx#2025-04-17_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nRoleAssignmentList roles = permit.Api.getAssignedRolesInAllTenants();\n```\n\n----------------------------------------\n\nTITLE: Reference Operator Example in JSON\nDESCRIPTION: Example showing how to use reference operators to compare user email with first name using nested objects in condition sets.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/working-with-abac/operators.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"allOf\": [\n        {\n            \"user.email\": {\n                \"contains\": {\n                    \"ref\": \"user.first_name\"\n                }\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing CI Flow for Policy Management in Mermaid\nDESCRIPTION: This git graph illustrates the CI flow for policy management, showing the process of creating a staging environment, making changes, testing, and merging into the target environment.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/SDLC/CI-CD.mdx#2025-04-17_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\ngitGraph LR:\n        commit id:\"starting point\"\n        branch \"staging env.\"\n        branch \"target env.\"\n        checkout \"staging env.\"\n        commit id:\"checkout\" tag:\"copy env\"\n        commit id:\"policy changes\"\n        commit id:\"tests\" type: HIGHLIGHT\n        commit id:\"approved\"\n        checkout \"target env.\"\n        merge \"staging env.\" tag:\"copy env\"\n        commit id:\"ongoing changes\"\n```\n\n----------------------------------------\n\nTITLE: Role Assignment Response Schema in JSON\nDESCRIPTION: JSON schema showing the structure of role assignment responses from the PDP API. Each assignment contains user, role, tenant and optional resource instance information.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/enforce-permissions/list-role-assignments.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"user\": \"jane@coolcompany.com\",\n        \"role\": \"admin\",\n        \"tenant\": \"stripe-inc\"\n    },\n    {\n        \"user\": \"jane@coolcompany.com\",\n        \"role\": \"admin\",\n        \"tenant\": \"stripe-inc\",\n        \"resource_instance\": \"document:doc-1234\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Users with Permit.io API\nDESCRIPTION: This snippet demonstrates how to make an API call to retrieve all users in a specific Permit.io environment. It requires the API secret key, project ID, and environment ID.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/examples/filter-users.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.permit.io/v2/facts/{project_id}/{env_id}/users?page=1&per_page=10' \\\n  -H 'authorization: Bearer API_SECRET_KEY'\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n \"data\": [\n     {\n         \"key\": \"key@permit.io\",\n         \"id\": \"445ed9ff1bc94caf8bcf686ea3eexxxx\",\n         \"organization_id\": \"903ebc2765b848289d6dfbd3c21exxxx\",\n         \"project_id\": \"3c4244c7bcab4c97990e5bc724daxxxx\",\n         \"environment_id\": \"9ba956da646948538efaee4cf10dxxxx\",\n         \"associated_tenants\": [\n             {\n                 \"tenant\": \"sample_tenant\",\n                 \"roles\": [\n                     \"board\"\n                 ],\n                 \"status\": \"active\"\n             }\n         ],\n         \"roles\": [\n             {\n                 \"role\": \"board\",\n                 \"tenant\": \"sample_tenant\"\n             }\n         ],\n         \"email\": \"email@permit.io\",\n         \"first_name\": \"\",\n         \"last_name\": \"\",\n         \"attributes\": null\n     }\n ],\n \"total_count\": 1,\n \"page_count\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Role Assignment using Permit.io API\nDESCRIPTION: Example of calling the assignRole method from the Permit.io API. The method requires stringifying the assignedRole object before passing it as a parameter.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/nodejs/role/assign-role.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await permit.api.assignRole(JSON.stringify(assignedRole));\n```\n\n----------------------------------------\n\nTITLE: Role Unassignment Payload Structure in JavaScript\nDESCRIPTION: The JSON payload structure required for unassigning a role from a user. It contains the role to unassign, the tenant context, and the target user identifier.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/nodejs/role/unassign-role.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\trole: \"role\",\n\ttenant: \"tenant\",\n\tuser: \"user\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding User to New Tenant with Role\nDESCRIPTION: Demonstrates how to add an existing user to a new tenant while assigning them a specific role.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/overview/sync-your-first-user-with-sdk.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrole_assignments: [{ role: \"manager\", tenant: \"Marketing\" }]\n```\n\n----------------------------------------\n\nTITLE: Defining Relationship Tuple Format\nDESCRIPTION: Shows the basic format structure for defining relationship tuples in Permit. The format consists of three components: Subject, Relation, and Object, separated by colons.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/overview/sync-applications-data.mdx#2025-04-17_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n<Subject> : <Relation> : <Object>\n```\n\n----------------------------------------\n\nTITLE: Creating Resource Set Conditions\nDESCRIPTION: Shows how to create resource set conditions for owned resources, matching user attributes with resource attributes.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/pink-mobile.mdx#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nawait permit.api.conditionSets.create({\n    key: \"owned_plans\",\n    name: \"Owned Plans\",\n    type: \"resourceset\",\n    resource_id: \"plan\",\n    conditions: {\n      allOf: [\n        { allOf: [{ \"resource.owner\": { equals: { ref: \"user.key\" } } }] },\n      ],\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: PermitJS POST Request Example\nDESCRIPTION: JavaScript example showing how to make a POST request using the PermitJS proxy client.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/foaz/detailed-guide.mdx#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\npermitStripeProxy\n\t.post({\n\t\turl: \"https://stripe.com/createPayment\",\n\t\tdata: { test: \"tester\" },\n\t\theaders: { test: \"testHeader\" }\n\t})\n\t.then((res: any) => {\n\t\tconsole.log(\"res\", res);\n\t})\n\t.catch((err: any) => {\n\t\tconsole.log(\"err\", err);\n\t});\n```\n\n----------------------------------------\n\nTITLE: Wrapping React App with AbilityLoader and ClerkProvider\nDESCRIPTION: This snippet demonstrates how to wrap a React application with AbilityLoader and ClerkProvider components. It allows global access to permitState for authorization checks throughout the app.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/integrations/feature-flagging/casl.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ClerkProvider } from \"@clerk/nextjs\";\nimport { AbilityLoader } from \"../utils/AbilityLoader\";\nimport \"../styles/global.css\";\n\nfunction MyApp({ Component, pageProps }) {\n  return (\n    <ClerkProvider {...pageProps}>\n      <AbilityLoader>\n        <Component {...pageProps} />\n      </AbilityLoader>\n    </ClerkProvider>\n  );\n}\n\nexport default MyApp;\n```\n\n----------------------------------------\n\nTITLE: Creating Resource using Permit.io API in Go\nDESCRIPTION: This snippet shows how to use the Permit.io API to create a new resource. It calls the Create method of the Resources API, passing the context and the resourceCreate object.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/golang/resource/Create.mdx#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nresource, err := Permit.Api.Resources.Create(ctx, *resourceCreate)\n```\n\n----------------------------------------\n\nTITLE: Updating Reviewer Details for Operation Approval in Permit.io API\nDESCRIPTION: This curl command sends a PATCH request to update the reviewer details of an operation approval. It requires project ID, environment ID, elements config ID, and operation approval ID. The request includes a reviewer comment.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/elements/operation_approval.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PATCH \\\n 'https://api.permit.io/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/operation_approval/{operation_approval_id}/reviewer' \\\n  -H 'cookie: <COOKIE FROM LOGIN>'\n  -H 'element_id: ELEMENTS_CONFIG_ID'\n  --data-raw\n     \"reviewer_comment\": \"transfer for a new client\",\n } \\\n```\n\n----------------------------------------\n\nTITLE: Updating Tenant using Permit.io API in C#\nDESCRIPTION: This code demonstrates how to use the Permit.io API client to update a tenant. It requires the tenant ID and the tenant object containing the updated information.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/dotnet/tenant/UpdateTenant.mdx#2025-04-17_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar response = await permitClient.Api.UpdateTenant(tenantId, tenant);\n```\n\n----------------------------------------\n\nTITLE: Deploying PDP with Debug Mode Enabled using Docker\nDESCRIPTION: This snippet shows how to run a Docker container for Permit.io PDP with Debug Mode enabled using environment variables.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/use-audit-logs/debug-mode.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it \\\n  -p 7766:7000 \\\n  --env PDP_API_KEY=<YOUR_API_KEY> \\\n  --env PDP_DEBUG=True \\\n  permitio/pdp-v2:latest\n```\n\n----------------------------------------\n\nTITLE: Conditional UI Rendering with Permission Checks\nDESCRIPTION: Example of conditional rendering using permitState to check user permissions based on country and channel attributes for different UI components.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/feature-flagging.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<div className=\"flex h-full\">\n  <div className=\"flex flex-col flex-grow\">\n    {permitState?.check(\"view\", \"Products\", {\n      country: user.publicMetadata.country,\n      channel: user.publicMetadata.channel,\n    }) && <div className=\"bg-white m-4 p-4 h-[250px]\">Products</div>}\n\n    {permitState?.check(\"view\", \"Product_Configurators\", {\n      country: user.publicMetadata.country,\n      channel: user.publicMetadata.channel,\n    }) && <div className=\"bg-white m-4 p-4 h-[200px]\">Product Configurators</div>}\n\n    {permitState?.check(\"view\", \"Project_Builder\", {\n      country: user.publicMetadata.country,\n      channel: user.publicMetadata.channel,\n    }) && <div className=\"bg-white m-4 p-4 h-[200px]\">Project Builder</div>}\n\n    {permitState?.check(\"view\", \"Topics_for_you\", {\n      country: user.publicMetadata.country,\n      channel: user.publicMetadata.channel,\n    }) && <div className=\"bg-white m-4 p-4 h-[100px]\">Topics for you</div>}\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting PDP_API_KEY Environment Variable in GCP Cloud Run\nDESCRIPTION: This snippet shows how to set the required PDP_API_KEY environment variable when deploying the PDP on GCP Cloud Run. The API key is obtained from Permit.io and should be securely stored and accessed.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/deploy/cloud-hosts/gcp-cloud-run.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nPDP_API_KEY: your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Creating Viewer Role Derivation with Python\nDESCRIPTION: Updates the 'viewer' role for files to be automatically granted to users who have the 'viewer' role on parent folders using the Python SDK. This enables viewing permission inheritance.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/google-drive.mdx#2025-04-17_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nawait permit.api.resource_roles.update(\n    \"file\",\n    \"viewer\",\n    {\n        \"granted_to\": {\n            \"users_with_role\": [\n                {\n                    \"linked_by_relation\": \"parent\",\n                    \"on_resource\": \"folder\",\n                    \"role\": \"viewer\",\n                }\n            ]\n        }\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Custom Rego Policy Definition\nDESCRIPTION: Rego policy definition that creates custom user attributes based on country data from external source\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/manage-data/use-external-data-source.mdx#2025-04-17_snippet_2\n\nLANGUAGE: rego\nCODE:\n```\npackage permit.custom\nimport future.keywords.in\n\nregion_by_common_name[name] := region {\n some _,country in data.countries\n name := country.name.common\n region := country.region\n}\n\ncustom_user_attributes[\"region\"] := region_by_common_name[data.users[input.user.key].attributes.country]\n```\n\n----------------------------------------\n\nTITLE: Sample Project Object Response\nDESCRIPTION: This JSON response shows the structure of a project object returned by the Permit API, containing the project ID, key, and other details. The important fields to extract are either the 'id' or 'key'.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/examples/get-project-and-env.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"key\": \"project_key\",\n    \"urn_namespace\": null,\n    \"id\": \"3c4244c7bcab4c97990e5bc724dxxxx\",\n    \"organization_id\": \"903ebc2765b848289d6dfbd3c21xxxx\",\n    \"created_at\": \"2023-02-28T10:07:44+00:00\",\n    \"updated_at\": \"2023-06-22T08:46:42+00:00\",\n    \"name\": \"Project Name\",\n    \"description\": \"\",\n    \"settings\": {\n        \"abacEnabled\": true\n    },\n    \"active_policy_repo_id\": null\n},\n```\n\n----------------------------------------\n\nTITLE: Frontend Permission Checks with Vue and CASL\nDESCRIPTION: Vue template implementation showing how to check permissions in the UI for different order actions using Permit.io and CASL.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/food-delivery-system-example-using-nuxt.mdx#2025-04-17_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n<script setup lang=\"ts\">\n// ...\n\nconst fulfill = async (orderId: number) => {\n  if (permit.value.check('fulfill', 'Order', {}) {\n    // ...\n  }\n};\n\nconst assignRider = async (e: FormSubmitEvent, orderId: number) => {\n  if (e.valid && permit.value.check('assign-rider', 'Order', {}) {\n    // ...\n  }\n};\n\nconst deliver = async (orderId: number) => {\n  if (permit.value.check('deliver', 'Order', {}) {\n    // ...\n  }\n};\n</script>\n\n<template>\n  <!-- ... --->\n\n  <Button\n    label=\"Fulfill\"\n    v-if=\"!order.fulfilledTime && permit.check('fulfill', 'Order', {})\"\n    @click=\"fulfill(order.id)\"\n  />\n  <Button\n    label=\"Deliver\"\n    v-if=\"!order.deliveredTime && permit.check('deliver', 'Order', {})\"\n    @click=\"deliver(order.id)\"\n  />\n  <Form\n    @submit=\"(e) => assignRider(e, order.id)\"\n    v-if=\"\n      permit.check('assign-rider', 'Order', {}) &&\n      !order.riderAssignedTime\n    \"\n    class=\"flex gap-4 items-end\"\n  >\n    <!-- ... --->\n  </Form>\n\n  <!-- ... --->\n</template>\n```\n\n----------------------------------------\n\nTITLE: Deleting a Role using Permit API in Go\nDESCRIPTION: This code snippet demonstrates how to delete an existing role using the Permit API. It requires the context of the request and the role key or id as parameters. The function call is made to the Roles.Delete method of the Permit.Api object.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/golang/role/Delete.mdx#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nerr := Permit.Api.Roles.Delete(ctx, \"role-key\")\n```\n\n----------------------------------------\n\nTITLE: Assigning a Role to a User in Permit.io SDK\nDESCRIPTION: This snippet demonstrates how to assign a role to a user using the Permit.io SDK. The function returns a RoleAssignment object containing the assigned role details, user identifier, and scope information.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/reference/SDKs/NodeJS/assign_role.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nassignedRole = await permit.write(permit.api.assignRole(user.customId, Role.key, Tenant.key));\n\n\n// returns the assigned role with RoleAssignment type\n// {\n//     id: string,\n//     role: {\n//         id: string,\n//         name: string,\n//         description: string,\n//         tenantId: string,\n//     },\n//     user: string,\n//     scope: string,\n// }\n```\n\n----------------------------------------\n\nTITLE: Installing Permit.io SDK\nDESCRIPTION: Command to add the Permit.io SDK package to the .NET project.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/getting-started/_quickstart-parts/_quickstart_dotnet.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Permit\n```\n\n----------------------------------------\n\nTITLE: Full Spring Boot Application with Permit.io SDK in Java\nDESCRIPTION: Complete example of a Spring Boot application integrating the Permit.io SDK for permission management.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/getting-started/_quickstart-parts/_quickstart_java.mdx#2025-04-17_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.myproject;\n\nimport io.permit.sdk.Permit;\nimport io.permit.sdk.PermitConfig;\nimport io.permit.sdk.api.PermitApiError;\nimport io.permit.sdk.api.PermitContextError;\nimport io.permit.sdk.enforcement.Resource;\nimport io.permit.sdk.enforcement.User;\nimport io.permit.sdk.openapi.models.UserCreate;\nimport io.permit.sdk.openapi.models.UserRead;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.io.IOException;\n\n@RestController\n@SpringBootApplication\npublic class DemoApplication {\n\n\tfinal Permit permit;\n\tfinal UserRead user;\n\n\tpublic DemoApplication() {\n\t\tthis.permit = new Permit(\n\t\t\tnew PermitConfig.Builder(\"[YOUR_API_KEY]\")\n\t\t\t\t.withPdpAddress(\"http://localhost:7766\")\n\t\t\t\t.withApiUrl(\"https://api.stg.permit.io\")\n\t\t\t\t.withDebugMode(true)\n\t\t\t\t.build()\n\t\t);\n\n\t\ttry {\n\t\t\tthis.user = permit.api.users.sync(\n\t\t\t\tnew UserCreate(\"[A_USER_ID]\")\n\t\t\t\t\t.withEmail(\"user@example.com\")\n\t\t\t\t\t.withFirstName(\"Joe\")\n\t\t\t\t\t.withLastName(\"Doe\")\n\t\t\t).getResult();\n\n\t\t\tpermit.api.users.assignRole(user.key, \"admin\", \"default\");\n\t\t} catch (IOException | PermitApiError | PermitContextError e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t}\n\n\t@GetMapping(\"/\")\n\tResponseEntity<String> home() throws IOException, PermitApiError, PermitContextError {\n\t\tUser user = User.fromString(\"[A_USER_ID]\");\n\t\tString action = \"create\";\n\t\tResource resource = new Resource.Builder(\"document\")\n\t\t\t.withTenant(\"default\")\n\t\t\t.build();\n\n\t\tboolean permitted = permit.check(user, action, resource);\n\n\t\tif (permitted) {\n\t\t\treturn ResponseEntity.status(HttpStatus.OK).body(\n\t\t\t\t\"Joe Doe is PERMITTED to create document!\"\n\t\t\t);\n\t\t} else {\n\t\t\treturn ResponseEntity.status(HttpStatus.FORBIDDEN).body(\n\t\t\t\t\"Joe Doe is NOT PERMITTED to create document!\"\n\t\t\t);\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(DemoApplication.class, args);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Ruby Web Application Example\nDESCRIPTION: Full example of a Ruby web application using Permit.io SDK with WEBrick server for permission checks.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/getting-started/_quickstart-parts/_quickstart_ruby.mdx#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngem install permit-sdk webrick\n```\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'webrick'\nrequire 'permit'\n\npermit = Permit.new(\"<YOUR_API_KEY>\")\n\nserver = WEBrick::HTTPServer.new(Port: 4000)\n\nserver.mount_proc '/' do |_, res|\n  res['Content-Type'] = 'application/json'\n\n  permitted = permit.check(\"user@mail.com\", \"read\", \"document\")\n  if permitted\n    res.status = 200\n    res.body = { result: \"user@mail.com is PERMITTED to read document!\" }.to_json\n    next\n  end\n  res.status = 403\n  res.body = { result: \"user@mail.com is NOT PERMITTED to read document\" }.to_json\nend\n\ntrap 'INT' do server.shutdown end\n\nserver.start\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Relationships in Permit\nDESCRIPTION: Shows how to establish parent-child relationships between resources by configuring a Plan resource with Account as its parent.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/pink-mobile.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nawait permit.api.resources.create({\n    key: \"plan\",\n    name: \"Plan\",\n    ...\n    relations: {\n      parent: \"account\",\n    },\n  });\n```\n\n----------------------------------------\n\nTITLE: Creating Environment with Custom GitOps Branch Name via API in Bash\nDESCRIPTION: This curl command shows how to create a new environment with a custom GitOps branch name. This requires the Policy Repo to be activated on the project.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/manage-your-account/creating-environments.mdx#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.permit.io/v2/projects/{project_id}/envs' \\\n  -H 'authorization: Bearer {API_SECRET_KEY}'\\\n  --data-raw '{\"key\":\"new-env-name\",\"name\":\"New Env Name\", \"custom_branch_name\": \"new-env-branch-name\"}'\n```\n\n----------------------------------------\n\nTITLE: Configuring PDP with Organization API Key\nDESCRIPTION: Docker command to run PDP using organization-level API key with project and environment specifications.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/deploy/deploy-to-production.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -it \\\n  -p 7766:7000 \\\n  --env PDP_ORG_API_KEY=<YOUR_ORG_API_KEY> \\\n  --env PDP_ACTIVE_PROJECT=<YOUR_PROJECT_ID_OR_KEY> \\\n  --env PDP_ACTIVE_ENV=<YOUR_ENVIRONMENT_ID_OR_KEY> \\\n  --env PDP_DEBUG=True \\\n  permitio/pdp-v2:latest\n```\n\n----------------------------------------\n\nTITLE: CORS Configuration in Express.js\nDESCRIPTION: Example configuration for handling CORS in an Express.js server to allow requests from frontend applications using Permit Elements.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/embeddable-uis/troubleshooting.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\napp.use(function(req, res, next) {\n    res.header(\"Access-Control-Allow-Origin\", \"http://localhost:3001\"); // update to match the domain you will make the request from\n    res.header(\"Access-Control-Allow-Credentials\", \"true\");\n    res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept, Authorization, X-Permit-User-Key\");\n    next();\n});\n```\n\n----------------------------------------\n\nTITLE: Date-Based Permission Check in JavaScript\nDESCRIPTION: JavaScript condition that checks if the current date falls within the permitted date range for a given user permission.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/rebac-GHC.mdx#2025-04-17_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nif (user[permission].start_date <= today && user[permission].end_date >= today) {\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Tenant Information using Permit API in Java\nDESCRIPTION: This code snippet demonstrates how to update a tenant's description using the Permit API in Java. It uses the TenantUpdate model to create the update payload and the tenants.update() method to perform the update.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/java/tenant/update.mdx#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.permit.sdk.openapi.models.TenantUpdate;\n\npermit.api.tenants.update(\"awesome-inc\", new TenantUpdate().withDescription(\"new description\"));\n```\n\n----------------------------------------\n\nTITLE: Running a Local PDP with Docker\nDESCRIPTION: Docker command to run a Permit PDP locally. Maps port 7000 from the container to port 7766 on the host, sets the API key, and enables debug mode.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/concepts/pdp/overview.mdx#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it \\\n  -p 7766:7000 \\\n  --env PDP_API_KEY=<your-permit-api-key> \\\n  --env PDP_DEBUG=True \\\n  permitio/pdp-v2:latest\n```\n\n----------------------------------------\n\nTITLE: Initialize PermitJS Proxy Client\nDESCRIPTION: JavaScript example demonstrating how to initialize a PermitJS proxy client for FoAz API interactions.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/foaz/detailed-guide.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport permit from \"@permitio/permit-js\";\nconst permitStripeProxy = permit.proxy.getProxy({\n\tproxyId: \"6b120e2ca316430b9f8ea0e1f5ec5555\",\n\ttoken: userJwt\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Permit PDP Helm Repository\nDESCRIPTION: Command to add the Permit PDP Helm repository to your local Helm installation. This allows you to access the PDP charts for deployment.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/deploy/cloud-hosts/helm.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add pdp https://permitio.github.io/PDP\n```\n\n----------------------------------------\n\nTITLE: Creating a New Role using Permit.io API in Go\nDESCRIPTION: This snippet shows how to call the Create method of the Roles API to create a new role. It uses the previously initialized roleCreate object and requires a context. The method returns the created role and any potential error.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/golang/role/Create.mdx#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nrole, err := Permit.Api.Roles.Create(ctx, *roleCreate)\n```\n\n----------------------------------------\n\nTITLE: User Management - Create User webhook schema in Python\nDESCRIPTION: Python schema definition for the webhook payload sent when a new user is created. Includes fields for email, tenant key, role, permission level, and webhook type.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/embeddable-uis/webhooks.mdx#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n{\n    email: str,\n    tenant_key: str,\n    role: str,\n    permission_level: str,\n    type: ElementsWebhookType = \"create_user\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listing All Access Requests\nDESCRIPTION: Make a GET request to retrieve a list of access requests. The request can include filters for status, tenant, role, resource, and resource instance. Pagination parameters can also be specified.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/elements/access-requests.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.permit.io/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/access_requests' \\\n    -H 'cookie: <COOKIE FROM LOGIN>' \\\n  -H 'origin: https://api.permit.io'\n  -H 'status: Status of the access request'\n  -H 'tenant: Tenant key of the access request'\n  -H 'role: Role key of the access request'\n  -H 'resource: Resource key of the access request'\n  -H 'resource_instance: Resource instance key of the access request'\n  -H 'page: Page number of the results to fetch' #Default: 1\n  -H 'per_page: The number of results per page (max 100)' #Default: 30\n```\n\n----------------------------------------\n\nTITLE: Initializing Permit SDK in Node.js\nDESCRIPTION: Setup code for initializing the Permit SDK in a Node.js environment using an API key.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/embeddable-uis/element-login.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfrom permitio import Permit\nconst { Permit } = require(\"permitio\");\nconst permit = new Permit({token: \"<YOUR_API_KEY>\", ...});\n```\n\n----------------------------------------\n\nTITLE: Implementing User Creation with Permit API\nDESCRIPTION: Code example showing how to use the Permit API to create a new user. The function takes a user object containing the information defined in the payload structure.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/nodejs/user/create-user.mdx#2025-04-17_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst response = await permit.api.createUser(user);\n```\n\n----------------------------------------\n\nTITLE: Creating User Set in Permit.io\nDESCRIPTION: Creates a 'privileged_users' user set that includes users with email addresses containing '@admin.com'. It uses JSON-encoded conditions to define the user criteria.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/integrations/infra-as-code/terraform-provider.mdx#2025-04-17_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"permitio_user_set\" \"privileged_users\" {\n  key  = \"privileged_users\"\n  name = \"Privileged Users\"\n  conditions = jsonencode({\n    \"allOf\" : [\n      {\n        \"allOf\" : [\n          {\n            \"subject.email\" = {\n              contains = \"@admin.com\"\n            },\n          }\n        ]\n      }\n    ]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Permit Client with Local PDP in Python\nDESCRIPTION: Creates a Permit client instance in Python connected to a locally running PDP. The client requires an API key and the local PDP URL.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/concepts/pdp/overview.mdx#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom permit import Permit\n\npermit = Permit(\n    token=\"[your-api-key]\",\n    pdp=\"http://localhost:7766\",\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Environment Settings with cURL in Permit.io\nDESCRIPTION: cURL request to update environment settings with custom default actions. This PATCH request targets a specific project and environment, requiring authentication via API key and submits JSON data to configure default resource actions.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/examples/autopopulate-actions.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request PATCH 'https://api.permit.io/v2/projects/:project_id/envs/:env_id' \\\n--header 'authority: api.permit.io' \\\n--header 'authorization: Bearer permit_env_api_key' \\\n--header 'origin: https://app.permit.io' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\"settings\":{\"default_resource_actions\":[\"read\",\"write\"]}}'\n```\n\n----------------------------------------\n\nTITLE: Creating Role Update Model in Go\nDESCRIPTION: Creates a new role update model and sets the permissions for the role. The permissions array specifies the allowed actions on resources.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/golang/role/Update.mdx#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nroleUpdate := models.NewRoleUpdate()\nroleUpdate.SetPermissions([]string{\"resource-key:read\", \"resource-key:write\"})\n```\n\n----------------------------------------\n\nTITLE: Inspecting FactDB Data with SQLite3 (Bash)\nDESCRIPTION: This snippet shows how to use SQLite3 CLI to inspect the data stored in FactDB.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/concepts/pdp/factdb.mdx#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsqlite3 ./pdp-backup/factdb/fact.[id].db\n```\n\n----------------------------------------\n\nTITLE: Configuring Envoy for PDP Cluster\nDESCRIPTION: Envoy configuration file that sets up a load balancer for 7 PDP shards using ring hash load balancing policy. The configuration includes listener setup, routing rules, and endpoint definitions for each PDP shard.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/manage-data/pdp-sharding.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nadmin:\n  address:\n    socket_address: { address: 0.0.0.0, port_value: 9901 }\nstatic_resources:\n  listeners:\n    - name: sdk_requests\n      address:\n        socket_address: { address: 0.0.0.0, port_value: 10000 }\n      filter_chains:\n        - filters:\n            - name: envoy.filters.network.http_connection_manager\n              typed_config:\n                \"@type\": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\n                stat_prefix: ingress_http\n                codec_type: AUTO\n                route_config:\n                  name: local_route\n                  virtual_hosts:\n                    - name: local_service\n                      domains: [\"*\"]\n                      routes:\n                        - match: { prefix: \"/\" }\n                          route:\n                            cluster: pdp_cluster\n                            hash_policy:\n                              - header:\n                                  header_name: X-Tenant-Id\n                http_filters:\n                  - name: envoy.filters.http.router\n                    typed_config:\n                      \"@type\": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router\n  clusters:\n    - name: pdp_cluster\n      connect_timeout: 1s\n      type: STRICT_DNS\n      lb_policy: RING_HASH\n      ring_hash_lb_config:\n        maximum_ring_size: 1024\n      dns_lookup_family: V4_ONLY\n      load_assignment:\n        cluster_name: pdp_cluster\n        endpoints:\n          - lb_endpoints:\n              - endpoint:\n                  address:\n                    socket_address:\n                      address: pdp-shard-0\n                      port_value: 7000\n                metadata:\n                  filter_metadata:\n                    envoy.lb:\n                      hash_key: \"0\"\n              - endpoint:\n                  address:\n                    socket_address:\n                      address: pdp-shard-1\n                      port_value: 7000\n                metadata:\n                  filter_metadata:\n                    envoy.lb:\n                      hash_key: \"1\"\n              - endpoint:\n                  address:\n                    socket_address:\n                      address: pdp-shard-2\n                      port_value: 7000\n                metadata:\n                  filter_metadata:\n                    envoy.lb:\n                      hash_key: \"2\"\n              - endpoint:\n                  address:\n                    socket_address:\n                      address: pdp-shard-3\n                      port_value: 7000\n                metadata:\n                  filter_metadata:\n                    envoy.lb:\n                      hash_key: \"3\"\n              - endpoint:\n                  address:\n                    socket_address:\n                      address: pdp-shard-4\n                      port_value: 7000\n                metadata:\n                  filter_metadata:\n                    envoy.lb:\n                      hash_key: \"4\"\n              - endpoint:\n                  address:\n                    socket_address:\n                      address: pdp-shard-5\n                      port_value: 7000\n                metadata:\n                  filter_metadata:\n                    envoy.lb:\n                      hash_key: \"5\"\n              - endpoint:\n                  address:\n                    socket_address:\n                      address: pdp-shard-6\n                      port_value: 7000\n                metadata:\n                  filter_metadata:\n                    envoy.lb:\n                      hash_key: \"6\"\n```\n\n----------------------------------------\n\nTITLE: Array Matching with Foreign Keys using all_match in JSON for Permit.io\nDESCRIPTION: This example shows how to use the 'all_match' operator with foreign keys to check if all issues in a repo are closed. It uses the 'fk_resource_type' key to specify the foreign resource type for the issues array.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/working-with-abac/operators.mdx#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"allOf\": [\n        {\n            \"resource.issues\": {\n                \"all_match\": {\n                    \"match\": {\n                        \"status\": {\"equals\": \"closed\"}\n                    },\n                    \"fk_resource_type\": \"issue\"\n                }\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Environment Copying via Background API in Bash\nDESCRIPTION: This curl command shows how to use the Background API to copy environments asynchronously, which is useful for large environments where the process may take some time.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/manage-your-account/creating-environments.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'https://api.permit.io/v2/projects/default/envs/staging/copy/async' \\\n  -H 'authorization: Bearer API_SECRET_KEY' \\\n  --data '{\n  \"target_env\": {\n    \"new\": {\n        \"key\": \"prod\",\n        \"name\": \"production\"\n    }\n  }'\n```\n\n----------------------------------------\n\nTITLE: Disabling ReBAC with cURL in Permit.io\nDESCRIPTION: This command makes a PATCH request to the Permit.io API to disable Relationship-Based Access Control (ReBAC) for a specific environment. It requires your project ID, environment ID, and API secret key for authorization.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/rbac/disable-rebac-to-increase-performance.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request PATCH 'https://api.permit.io/v2/projects/<project-id>/envs/<env-id>' \\\n--header 'authorization: Bearer API_SECRET_KEY' \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"settings\": {\n        \"rebac_disabled\": true\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Express.js Private Browser Support Implementation\nDESCRIPTION: Backend implementation for private browsing support using Express.js. Handles login requests and returns element bearer token instead of redirect URL.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/embeddable-uis/element-login.mdx#2025-04-17_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require(\"express\");\nconst app = express();\napp.post(\"/login_private_browser\", async (req, res) => {\n    const ticket = await permit.elements.loginAs({userId: user_key, tenantId: TENANT});\n    // this is the changed part\n    res.status(200).json({url: ticket.element_bearer_token});\n});\napp.listen(port, () => {\n    console.log(`Example app listening at http://localhost:${port}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting Bulk Relationships via Permit.io API (Bash)\nDESCRIPTION: This snippet shows how to delete multiple existing relationship tuples in a single API call using cURL. It sends a DELETE request to the Permit.io API with a JSON payload containing an array of relationship identifiers to be removed.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/bulk-operations.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X DELETE https://api.permit.io/v2/facts/{proj_id}/{env_id}/relationship_tuples/bulk \\\n    -H \"Authorization: Bearer {your_permit_token}\" \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\n            \"idents\": [{\n                \"subject\": \"organization:permitio\",\n                \"relation\": \"owner\",\n                \"object\": \"repo:removed_repo\"\n            }, ...]\n        }'\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Data Update Callbacks in PDP\nDESCRIPTION: Example JSON configuration for the PDP_DATA_UPDATE_CALLBACKS environment variable that specifies callbacks to be executed when data is updated in the PDP. The callback includes URL, optional key, and configuration options.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/concepts/pdp/configuration.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"url\": \"http://example.com/callback\",\n    \"key\": \"example\",  // optional\n    \"config\": {  // optional\n      \"headers\": {\n        \"Authorization\":  \"Bearer token\"\n      },\n      \"method\": \"GET\",\n      \"data\": {\n        \"key\": \"value\"\n      }\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Deleting a Resource using Permit API in JavaScript\nDESCRIPTION: This code snippet demonstrates how to delete a resource using the Permit API. It uses the 'deleteResource' method of the permit.api object, passing in the resourceId as a parameter. The response from the API call is stored in the 'response' variable.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/nodejs/resource/delete-resource.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await permit.api.deleteResource(resourceId);\n```\n\n----------------------------------------\n\nTITLE: Cancelling Access Request using Permit.io API (Bash)\nDESCRIPTION: This snippet shows how to cancel an access request using a PUT request to the Permit.io API. It includes a reason for cancellation in the request body.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/elements/access-requests.mdx#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.permit.io/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/access_requests/{access_request_id}/cancel' \\\n    -H 'cookie: <COOKIE FROM LOGIN>' \\\n  -H 'origin: https://api.permit.io'\n  --data-raw\n{\n    \"reason\": \"done onboarding last week\",\n} \\\n```\n\n----------------------------------------\n\nTITLE: Auth0 NextJS API Route Configuration\nDESCRIPTION: Setting up Auth0 authentication handler and session management in NextJS API routes.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/authentication/auth0/permit-integration.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// pages/api/auth/[...auth0].ts\nimport { handleAuth } from \"@auth0/nextjs-auth0\";\n\nexport default handleAuth();\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// pages/api/tasks.ts\nimport { getSession } from \"@auth0/nextjs-auth0\";\n//...\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\n\tconst session = await getSession(req, res); // if the user is not logged in, session will be null\n\tif (!session?.user) {\n    \tres.status(401).json({ message: 'unauthorized' });\n    \treturn;\n  \t}\n//...\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Relationship Tuples with cURL\nDESCRIPTION: Basic cURL command to fetch all relationship tuples from a specific project and environment. Requires API secret key authentication.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/examples/filter-relationship-tuple.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.permit.io/v2/facts/{project_id}/{env_id}/relationship_tuples?page=1&per_page=10' \\\n  -H 'authorization: Bearer API_SECRET_KEY'\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video in User Management Element Documentation\nDESCRIPTION: This HTML snippet embeds a YouTube video player within the documentation. The video likely provides additional information or a tutorial on embedding the User Management Element into an application.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/embeddable-uis/element/user-management.mdx#2025-04-17_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div className=\"video-container\">\n  <iframe\n    src=\"https://www.youtube.com/embed/xGYdDF65lkQ\"\n    title=\"YouTube video player\"\n    frameBorder=\"0\"\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n    allowFullScreen\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Initializing Permit SDK in Python\nDESCRIPTION: Setup code for initializing the Permit SDK in a Python environment using an API key.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/embeddable-uis/element-login.mdx#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom permitio import Permit\n\npermit = Permit(token=\"<YOUR_API_KEY>\", ...)\n```\n\n----------------------------------------\n\nTITLE: User Object Response (JSON)\nDESCRIPTION: This JSON object represents the response from the user roles API call. It includes user details, associated tenants, and roles.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/examples/list-user-permissions.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n        \"key\": \"key@permit.io\",\n        \"id\": \"d084172f638140e7a90622ff8311xxx\",\n        \"organization_id\": \"903ebc2765b848289d6dfbd3c21exxxx\",\n        \"project_id\": \"3c4244c7bcab4c97990e5bc724daxxxx\",\n        \"environment_id\": \"9ba956da646948538efaee4cf10dxxxx\",\n        \"associated_tenants\": [\n            {\n                \"tenant\": \"default\",\n                \"roles\": [\n                    \"board\",\n                    \"test\",\n                    \"admin\"\n                ],\n                \"status\": \"active\"\n            }\n        ],\n        \"roles\": [\n            {\n                \"role\": \"board\",\n                \"tenant\": \"default\"\n            },\n            {\n                \"role\": \"test\",\n                \"tenant\": \"default\"\n            },\n            {\n                \"role\": \"admin\",\n                \"tenant\": \"default\"\n            }\n        ],\n        \"email\": \"test@gmail.com\",\n        \"first_name\": \"\",\n        \"last_name\": \"\",\n        \"attributes\": {}\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Roles for ReBAC with HCL\nDESCRIPTION: This HCL snippet configures a 'Transaction#Sender' resource role that allows users to list transactions they've sent. The role is assigned 'list' permission on the Transaction resource.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/mesa-verde.mdx#2025-04-17_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"permitio_role\" \"Sender\" {\n  key         = \"Sender\"\n  name        = \"Sender\"\n  resource    = permitio_resource.Transaction.key\n  permissions = [\"list\"]\n  depends_on  = [permitio_resource.Transaction]\n}\n```\n\n----------------------------------------\n\nTITLE: Auth0 Post-Login Action Configuration\nDESCRIPTION: Auth0 action script to add user roles to authentication tokens after login.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/authentication/auth0/permit-integration.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @param {Event} event - Details about the user and the context in which they are logging in.\n * @param {PostLoginAPI} api - Interface whose methods can be used to change the behavior of the login.\n */\nexports.onExecutePostLogin = async (event, api) => {\n  const namespace = 'my_app_name';\n  if (event.authorization) {\n    api.idToken.setCustomClaim(`${namespace}/roles`, event.authorization.roles);\n    api.accessToken.setCustomClaim(`${namespace}/roles`, event.authorization.roles);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: PDP Cluster Migration API Call\nDESCRIPTION: API request to initiate migration to a sharded PDP cluster. The request requires an environment-level API key and specifies the number of shards to create.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/manage-data/pdp-sharding.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://api.permit.io/v2/pdps/{proj_id}/{env_id}/configs/migrate-shards \\\n-X POST \\\n-H \"Authorization: Bearer <PDP_API_KEY>\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n    \"num_shards\": 7\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating Tenant Update Object in Go\nDESCRIPTION: Creates a new tenant update object and sets the tenant name. This object will be used to update the tenant's information.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/golang/tenant/Update.mdx#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntenantUpdate := models.NewUpdateTenant()\ntenantUpdate.SetName(\"New Tenant Name\")\n```\n\n----------------------------------------\n\nTITLE: Triggering Copy Environment API in Bash\nDESCRIPTION: This snippet demonstrates how to trigger the Copy Environment API using curl. It sends a POST request to create a new production environment from the staging environment. The API returns a 202 Accepted response, indicating that the job is being processed in the background.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/background-tasks.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'https://api.permit.io/v2/projects/default/envs/staging/copy/async' \\\n  -H 'authorization: Bearer API_SECRET_KEY'\\\n  --data '{\n  \"target_env\": {\n    \"new\": {\n        \"key\": \"prod\",\n        \"name\": \"production\"\n    }\n  }\n}'\n# Response: 202 Accepted\n```\n\n----------------------------------------\n\nTITLE: Pulling Permit.io PDP Docker Container\nDESCRIPTION: Command to pull the latest version of Permit.io's PDP Docker container from Docker Hub. This is the first step in setting up a local PDP for policy checks.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/overview/perform-a-local-policy-check.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull permitio/pdp-v2:latest\n```\n\n----------------------------------------\n\nTITLE: Creating User Set Conditions\nDESCRIPTION: Demonstrates how to create user set conditions for blocked users using the Permit SDK.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/pink-mobile.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nawait permit.api.conditionSets.create({\n    key: \"blocked_users\",\n    name: \"Blocked Users\",\n    type: \"userset\",\n    conditions: {\n      allOf: [{ allOf: [{ \"user.blocked\": { equals: true } }] }],\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Making Permission Check with cURL Request\nDESCRIPTION: This snippet demonstrates how to send a permission check request using cURL. It includes headers for tenant identification and authentication, along with a JSON payload specifying the user, resource, and action to check.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/manage-data/pdp-sharding.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n-H \"X-Tenant-Id: default\" \\\n-H \"Authorization: Bearer <PDP_API_KEY>\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n        \"user\": {\n            \"key\": \"user@example.com\"\n        },\n        \"resource\": {\n            \"tenant\": \"default\",\n            \"type\": \"document\",\n        },\n            \"action\": \"read\"\n    }'\n```\n\n----------------------------------------\n\nTITLE: Listing all Permission Rules for a Policy Guard Scope using cURL\nDESCRIPTION: This snippet demonstrates how to retrieve all permission rules associated with a specific policy guard scope. It sends a GET request to the Policy Guard API with the scope ID in the URL path.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/policy-guard/policy_guard_api.mdx#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.permit.io/v2/policy_guards/scopes/{policy_guard_scope_id}/rules' \\\n-H 'authorization: Bearer API_SECRET_KEY'\n```\n\n----------------------------------------\n\nTITLE: Creating Resource Set in Permit.io\nDESCRIPTION: Defines a 'secret_docs' resource set that includes documents with 'Rye' in the title. It uses JSON-encoded conditions to specify the filtering criteria.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/integrations/infra-as-code/terraform-provider.mdx#2025-04-17_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"permitio_resource_set\" \"secret_docs\" {\n  key      = \"secret_docs\"\n  name     = \"Secret Docs\"\n  resource = permitio_resource.document.key\n  conditions = jsonencode({\n    \"allOf\" : [\n      {\n        \"allOf\" : [\n          {\n            \"resource.title\" = {\n              contains = \"Rye\"\n            },\n          }\n        ]\n      }\n    ]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Permit SDK in Python\nDESCRIPTION: Import statement to include the Permit SDK in Python code.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/getting-started/_quickstart-parts/_quickstart_python.mdx#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom permit import Permit\n```\n\n----------------------------------------\n\nTITLE: Querying Organization-scoped Objects via REST API\nDESCRIPTION: API endpoints for fetching organization-scoped roles and users using the organization-global API key.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/v2-migration-guide.mdx#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://api.permit.io/v2/schema/v1_global_project/v2_global_env/roles\nhttps://api.permit.io/v2/facts/v1_global_project/v2_global_env/users\n```\n\n----------------------------------------\n\nTITLE: Deleting a User with Permit.io API using JavaScript\nDESCRIPTION: Uses the Permit.io API to delete a user from the system by their unique user ID. The method returns a response object confirming the deletion operation.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/nodejs/user/delete-user.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await permit.api.deleteUser(userId);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Embeddable Elements List using Permit.io API\nDESCRIPTION: This curl command demonstrates how to make an API call to Permit.io to retrieve a list of all available Embeddable Elements for a specific project and environment. The response includes the element_id for each element, which can be used in subsequent API calls.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/elements/overview.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.permit.io/v2/elements/<project_id>/<env_id>/config' \\\n  -H 'authorization: Bearer <API secret key>' \\\n  -H 'origin: https://app.permit.io' \\\n```\n\n----------------------------------------\n\nTITLE: Running FastAPI Application with Uvicorn\nDESCRIPTION: Command to run the FastAPI application using Uvicorn server with hot reloading enabled.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/getting-started/_quickstart-parts/_quickstart_python.mdx#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nuvicorn test:app --reload --port=<YOUR_LOCALHOST_PORT_NUMBER>\n```\n\n----------------------------------------\n\nTITLE: Canceling Access Request with Permit.io API\nDESCRIPTION: API endpoint for canceling an access request. Requires API secret key authentication and accepts a reason for cancellation. Returns the updated access request object with canceled status.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/elements/access-request-api.mdx#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.permit.io/v2/facts/{proj_id}/{env_id}/access_requests/{elements_config_id}/user/{user_ident}/tenant/{tenant_ident}/{access_request_id}/cancel' \\\n    -H 'authorization: Bearer API_SECRET_KEY'  \\\n  --data-raw\n{\n    \"reason\": \"done onboarding last week\",\n} \\\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"requesting_user_id\": \"1c1e4ada-f282-40e6-b3b7-20b3a51c93b5\",\n    \"access_request_details\": {\n        \"tenant\": \"34f5c98e-f430-457b-a812-92637d0c6fd0\",\n        \"resource\": \"4d5215ed-38bb-48ed-879a-fdb9ca58522f\",\n        \"resource_instance\": \"2d98d9f8-e1b7-4f1d-baad-2edbf6fa6c66\",\n        \"role\": \"ac4e70c8-d5be-48af-93eb-760f58fc91a9\"\n    },\n    \"reason\": \"done onboarding\",\n    \"org_id\": \"7c60d51f-b44e-4682-87d6-449835ea4de6\",\n    \"project_id\": \"405d8375-3514-403b-8c43-83ae74cfe0e9\",\n    \"env_id\": \"40ef0e48-a11f-4963-a229-e396c9f7e7c4\",\n    \"created_at\": \"2019-08-24T14:15:22Z\",\n    \"updated_at\": \"2019-08-24T14:15:22Z\",\n    \"status\": \"cancel\",\n    \"reviewer_user_id\": null,\n    \"reviewed_at\": null,\n    \"reviewer_comment\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Bearer Token loginAs with Python\nDESCRIPTION: FastAPI implementation of the loginAs endpoint using bearer token authentication. Returns the ticket content as a JSON response.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/embeddable-uis/element-login.mdx#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\n from starlette.responses import JSONResponse\n app = FastAPI()\n\n\n @app.post(\"/login_header\")\n async def main():\n     # get user from jwt\n     # user_id = get_user_from_jwt(request)\n     ticket = await permit.elements.login_as(USER, TENANT)\n     return JSONResponse(content=ticket.content, status_code=200)\n```\n\n----------------------------------------\n\nTITLE: Deleting Bulk Users with Permit.io API\nDESCRIPTION: A curl command that demonstrates how to delete multiple users at once using the Permit.io API. The request accepts an array of user identifiers to be removed from the system.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/nodejs/bulk-requests-examples.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X DELETE \\\n'https://api.permit.io/v2/facts/{proj_id}/{env_id}/bulk/users' \\\n  -H 'authorization: Bearer API_SECRET_KEY' \\\n  -D '{\n        \"idents\": [\n                    \"user1\",\n                    \"user2\"\n                  ]\n      }'\n```\n\n----------------------------------------\n\nTITLE: ABAC Role Assignment Structure in JSON\nDESCRIPTION: JSON structure showing how date-based access control attributes are assigned to user roles, specifically for caregiver relationships with date boundaries.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/rebac-GHC.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"{user}\": {\n        \"Member:Caregiver:${instance}\": {\n            \"start_date\": \"2024-01-01\",\n            \"end_date\": \"2024-01-31\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing a User from Permit When Deleting from Cognito\nDESCRIPTION: This code snippet shows how to remove a user from Permit when they are removed from the application. It ensures that user data is consistently maintained across both Cognito and Permit services.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/authentication/cognito/permit-integration.mdx#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst removedUser = await permit.api.deleteUser(permitUserObj.key);\n```\n\n----------------------------------------\n\nTITLE: Fetching User Roles via Permit.io API (Bash)\nDESCRIPTION: This snippet demonstrates how to retrieve user roles using the Permit.io API. It requires the API_SECRET_KEY, project_id, and env_id.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/examples/list-user-permissions.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://api.permit.io/v2/facts/{project_id}/{env_id}/users/user_id_or_key\n  -H 'authorization: Bearer API_SECRET_KEY'\n```\n\n----------------------------------------\n\nTITLE: Creating Resource Instances with cURL\nDESCRIPTION: Example of how to create a resource instance using cURL. This creates a 'file' resource instance with the key '2023_report' in the 'default' tenant.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/rebac/rebac-api-calls.mdx#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://api.permit.io/v2/facts/$permit_project/$permit_env/resource_instances \\\n  -X POST \\\n  -H \"Authorization: Bearer $permit_sdk_api_key\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"resource\": \"file\",\n    \"key\": \"2023_report\",\n    \"tenant\": \"default\"\n  }'\n```\n\n----------------------------------------\n\nTITLE: Create Tenant Response Structure\nDESCRIPTION: JSON response structure returned when creating a new tenant. Contains tenant details including ID, organization ID, project ID, environment ID, and timestamps.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/examples/create-tenant.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\"key\": \"new-tenant-name\",\n\"id\": \"1e17ad4486cb4320bba067b2f19exxxx\",\n\"organization_id\": \"903ebc2765b848289d6dfbd3c21exxxx\",\n\"project_id\": \"3c4244c7bcab4c97990e5bc724daxxxx\",\n\"environment_id\": \"9ba956da646948538efaee4cf10dxxxx\",\n\"created_at\": \"2023-07-31T08:16:03+00:00\",\n\"updated_at\": \"2023-07-31T08:16:03+00:00\",\n\"last_action_at\": \"2023-07-31T08:16:03+00:00\",\n\"name\": \"New Tenant Name\",\n\"description\": \"New tenant description\",\n\"attributes\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Permit.io v2 PDP Container\nDESCRIPTION: Docker command to launch a v2 PDP instance with debug mode enabled and API key configuration.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/v2-migration-guide.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 7766:7000 \\\n  --env PDP_API_KEY=permit_key_abcdefghijklmnopqrstuvwxyz \\\n  --env PDP_DEBUG=True \\\n  permitio/pdp-v2:latest\n```\n\n----------------------------------------\n\nTITLE: Fetching Users with curl in Permit.io API\nDESCRIPTION: Command to retrieve all users in your organization using curl. It requires your API key in the Authorization header and specifies project and environment keys in the URL path.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/api-with-cli.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"Authorization: Bearer <API Key>\" https://api.permit.io/v2/facts/{projectKey}/{environmentKey}/users\n```\n\n----------------------------------------\n\nTITLE: Initializing Permit in Backend\nDESCRIPTION: Initialize an instance of Permit in the backend logic. This step is required to use Permit Elements and only needs to be done once. The SDK Secret Key should be passed into the initialized Permit object.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/elements/access-requests.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Permit } = require(\"permitio\");\n\nconst permit = new Permit({\n    // your API Key\n    token: \"<YOUR_API_KEY>\",\n    // your project id\n    projectId: \"<YOUR_PROJECT_ID>\",\n    // your environment id\n    environmentId: \"<YOUR_ENVIRONMENT_ID>\"\n});\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom permit import Permit\n\npermit = Permit(\n    # your API Key\n    token=\"<YOUR_API_KEY>\",\n    # your PDP URL (optional)\n    pdp=\"<YOUR_PDP_URL>\"\n)\n```\n\nLANGUAGE: c\nCODE:\n```\nusing Permit;\n\nvar permit = new Permit(\n    // your API Key\n    token: \"<YOUR_API_KEY>\",\n    // your PDP URL (optional)\n    pdp: \"<YOUR_PDP_URL>\"\n);\n```\n\nLANGUAGE: java\nCODE:\n```\nimport io.permit.sdk.Permit;\n\nPermit permit = new Permit(\n    // your API Key\n    \"<YOUR_API_KEY>\",\n    // your PDP URL (optional)\n    \"<YOUR_PDP_URL>\"\n);\n```\n\n----------------------------------------\n\nTITLE: Operation Approval Response JSON Structure in Permit.io API\nDESCRIPTION: This JSON structure represents the response after updating an operation approval. It includes details such as requesting user, access request details, approval status, reviewer information, and timestamps.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/elements/operation_approval.mdx#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"requesting_user_id\": \"1c1e4ada-f282-40e6-b3b7-20b3a51c93b5\",\n     \"access_request_details\": {\n        \"tenant\": \"34f5c98e-f430-457b-a812-92637d0c6fd0\",\n        \"resource\": \"4d5215ed-38bb-48ed-879a-fdb9ca58522f\",\n        \"resource_instance\": \"2d98d9f8-e1b7-4f1d-baad-2edbf6fa6c66\",\n    },\n    \"reason\": \"I need to make transfer for my client\",\n    \"org_id\": \"7c60d51f-b44e-4682-87d6-449835ea4de6\",\n    \"project_id\": \"405d8375-3514-403b-8c43-83ae74cfe0e9\",\n    \"env_id\": \"40ef0e48-a11f-4963-a229-e396c9f7e7c4\",\n    \"created_at\": \"2019-08-24T14:15:22Z\",\n    \"updated_at\": \"2019-08-24T14:15:22Z\",\n    \"status\": \"approved\",\n    \"reviewer_user_id\": \"1b287364-14ff-4b72-8953-b40399093a6f\",\n    \"reviewed_at\": \"2019-08-24T14:15:22Z\",\n    \"reviewer_comment\": \"transfer for a new client\",\n    \"type\": \"operation_approval\"\n}\n```\n\n----------------------------------------\n\nTITLE: GitOps Configuration JSON Structure\nDESCRIPTION: JSON template for configuring Permit GitOps integration with repository details and SSH credentials.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/integrations/gitops/github.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"url\": \"<your-ssh-url>\",\n  \"main_branch_name\": \"<your-default-branch>\",\n  \"credentials\": {\n    \"auth_type\": \"ssh\",\n    \"username\": \"git\",\n    \"private_key\": \"<your-private-key>\"\n  },\n  \"key\": \"<your-custom-id-string-without-spaces>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Resource using Permit.io API in Go\nDESCRIPTION: This snippet demonstrates how to delete a resource using the Permit.io API. It requires the context of the request and the unique resource key or ID. The function returns an error if the deletion fails.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/golang/resource/Delete.mdx#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nerr := Permit.Api.Resources.Delete(ctx, \"resourceKey\")\n```\n\n----------------------------------------\n\nTITLE: Copying Environments with Scoped Objects via API in Bash\nDESCRIPTION: This curl command demonstrates how to copy environments while excluding or including specific objects using scopes. It supports wildcards for matching multiple objects.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/manage-your-account/creating-environments.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'https://api.permit.io/v2/projects/{project_id}/envs/{env_id}/copy' \\\n  -H 'authorization: Bearer API_SECRET_KEY'\\\n  --data '{\n  \"target_env\": {\n    \"new\": {\n        \"key\": \"prod\",\n        \"name\": \"production\"\n    }\n  },\n  \"scope\": {\n      \"roles\": {\n          \"exclude\": [\"*\"]\n      },\n      \"resources\": {\n          \"include\": [\"folder\", \"file\"]\n      },\n      \"resource_sets\": {\n          \"exclude\": [\"test*\"]\n      },\n      \"user_sets\": {\n          \"exclude\": [\"canada_users\"]\n      },\n      \"custom_policies\": {\n          \"include\": [\"*.rego\"]\n      }\n  }\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating Account-Folder Relationship with Python\nDESCRIPTION: Creates an 'account' relationship between the 'acme' account and the 'finance' folder using the Python SDK. This links the folder to its parent account.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/google-drive.mdx#2025-04-17_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nawait permit.api.relationship_tuples.create(\n    {\n        \"subject\": \"account:acme\",\n        \"relation\": \"account\",\n        \"object\": \"folder:finance\",\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Permit.io SDK Instance\nDESCRIPTION: Creates a new instance of the Permit SDK by specifying the PDP (Policy Decision Point) URL and authentication token.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/tutorials/_quickstart-parts/_quickstart_python_sync.mdx#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# This line initializes the SDK and connects your python app\n# to the Permit.io PDP container you've set up.\npermit = Permit(\n    # in production, you might need to change this url to fit your deployment\n    pdp=\"http://localhost:7766\",\n    # your secret API KEY\n    token=\"<your-api-key>\",\n)\n```\n\n----------------------------------------\n\nTITLE: Operation Approval iFrame with Resource Instance Example\nDESCRIPTION: Example of HTML iframe implementation showing how to include a resource instance key in the Operation Approval Element URL.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/embeddable-uis/element/operation-approval.mdx#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<iframe\n    title=\"Permit Element Name\"\n    src=\"https://embed.permit.io/<ELEMENT_NAME>?envId=<SOME_UNIQUE_ID>&darkMode=false&tenantKey=<TENANT_KEY>&resourceInstanceKey=<RESOURCE_INSTANCE_KEY>\"\n    width=\"100%\"\n    height=\"100%\"\n    style=\"border: none;\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring PDP Sync Error Webhook in Permit.io using cURL\nDESCRIPTION: This snippet demonstrates how to set up a webhook for PDP sync error notifications using a cURL command. It sends a POST request to the Permit.io API with the webhook type and URL.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/pdp-webhooks.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n\t-H 'Authorization: Bearer API_SECRET_KEY' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"type\": \"pdp_sync_error\", \"url\": \"https://your.webhook.receiver/path/to/webhook\"}'\n\t'https://api.permit.io/v2/projects/{project_id}/envs/{env_id}/webooks'\n```\n\n----------------------------------------\n\nTITLE: C# HTTP Server Implementation for Permit.io Login\nDESCRIPTION: Creates an HTTP server that handles login requests and integrates with Permit SDK to generate login tickets. Includes listener setup and response handling.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/embeddable-uis/element-login.mdx#2025-04-17_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic static HttpListener listener;\npublic static string url = \"http://localhost:4000/login_cookie\";\npublic static async Task HandleIncomingConnections()\n{\n    bool runServer = true;\n    while (runServer)\n        HttpListenerContext ctx = await listener.GetContextAsync();\n        HttpListenerResponse resp = ctx.Response;\n        // In the next 6 lines we have the acutal code that is relevant to the Permit SDK\n        // string testUserId = getUserIdFromJWT();\n        EmbeddedLoginContentRequestOutput ticket = await permit.Elements.LoginAs(testUserId, TENANT_ID);\n        byte[] data = Encoding.UTF8.GetBytes(ticket.Content);\n        resp.StatusCode = 200;\n        await resp.OutputStream.WriteAsync(data, 0, data.Length);\n        resp.OutputStream.Close();\n    }\npublic static void Main(string[] args)\n{\n    // Create a Http server and start listening for incoming connections\n    listener = new HttpListener();\n    listener.Prefixes.Add(url);\n    listener.Start();\n    Console.WriteLine(\"Listening for connections on {0}\", url);\n    // Handle requests\n    Task listenTask = HandleIncomingConnections();\n    listenTask.GetAwaiter().GetResult();\n    // Close the listener\n    listener.Close();\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Tenant with permit.api.tenants.delete() in Java\nDESCRIPTION: This method deletes a tenant from the Permit.io system using either its tenant key or ID. The tenant key is the unique identifier for the tenant that needs to be deleted.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/java/tenant/delete.mdx#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npermit.api.tenants.delete(\"[TENANT KEY OR ID]\");\n```\n\n----------------------------------------\n\nTITLE: Get Tenants Response Structure\nDESCRIPTION: JSON response structure returned when retrieving tenants. Contains an array of tenant objects, total count, and page count for pagination.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/examples/create-tenant.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n\"data\": [\n    {\n        \"key\": \"default\",\n        \"id\": \"5620130cc6a74ada9f0c194cab20a53e\",\n        \"organization_id\": \"903ebc2765b848289d6dfbd3c21exxxx\",\n        \"project_id\": \"3c4244c7bcab4c97990e5bc724daxxxx\",\n        \"environment_id\": \"9ba956da646948538efaee4cf10dxxxx\",\n        \"created_at\": \"2023-02-28T10:07:44+00:00\",\n        \"updated_at\": \"2023-02-28T10:07:44+00:00\",\n        \"last_action_at\": \"2023-02-28T10:07:44+00:00\",\n        \"name\": \"Default Tenant\",\n        \"description\": null,\n        \"attributes\": null\n    }\n],\n\"total_count\": 1,\n\"page_count\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Project Object with Permit API\nDESCRIPTION: This curl command retrieves the project object by making a GET request to the Permit API projects endpoint. It requires an API_SECRET_KEY in the authorization header.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/examples/get-project-and-env.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.permit.io/v2/projects' \\\n  -H 'authorization: Bearer API_SECRET_KEY'\n```\n\n----------------------------------------\n\nTITLE: Enabling FactDB on PDPs (Bash)\nDESCRIPTION: This snippet shows how to set the PDP_FACTDB_ENABLED environment variable to enable FactDB on PDPs.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/concepts/pdp/factdb.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -e PDP_API_KEY={YOUR_API_KEY} \\\n           -e PDP_FACTDB_ENABLED=true \\\n           permitio/pdp:latest\n```\n\n----------------------------------------\n\nTITLE: Creating Resource Roles with cURL\nDESCRIPTION: Example of how to create or update a resource role using cURL. This updates the 'editor' role for the 'folder' resource by granting it to users with specific roles in related resources.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/rebac/rebac-api-calls.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://api.permit.io/v2/schema/$permit_project/$permit_env/resources/folder/roles/editor \\\n  -X PATCH \\\n  -H \"Authorization: Bearer $permit_sdk_api_key\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"granted_to\": {\n        \"users_with_role\": [\n            {\n                \"linked_by_relation\": \"account\",\n                \"on_resource\": \"account\",\n                \"role\": \"admin\"\n            },\n            {\n                \"linked_by_relation\": \"parent\",\n                \"on_resource\": \"folder\",\n                \"role\": \"editor\"\n            }\n        ]\n\t}\n  }'\n```\n\n----------------------------------------\n\nTITLE: Defining Tenant Update Payload in C#\nDESCRIPTION: This snippet shows the structure of the payload object used to update a tenant. It includes optional fields for name, description, and attributes.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/dotnet/tenant/UpdateTenant.mdx#2025-04-17_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n{\n\tName: \"name\",\n\tDescription: \"description\",\n\tAttributes: {}\n}\n```\n\n----------------------------------------\n\nTITLE: Redirecting to Cognito Login Page in JavaScript\nDESCRIPTION: Function to redirect users to the Cognito login page, generating necessary state and code challenge parameters.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/authentication/cognito/cognito-demo-app.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// app.mjs\nconst redirectToLogin = async () => {\n  const state = await generateNonce();\n  const codeVerifier = await generateNonce();\n  sessionStorage.setItem(`codeVerifier-${state}`, codeVerifier);\n  const codeChallenge = base64URLEncode(await sha256(codeVerifier));\n  window.location = `${cognitoLoginUrl}/login?response_type=code&client_id=${clientId}&state=${state}&code_challenge_method=S256&code_challenge=${codeChallenge}&redirect_uri=${window.location.origin}`;\n};\n\n//...\n```\n\n----------------------------------------\n\nTITLE: Fetching Tenants with curl in Permit.io API\nDESCRIPTION: Command to retrieve all tenants using curl. Like the users endpoint, it requires your API key in the Authorization header and specifies project and environment keys in the URL path.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/api-with-cli.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"Authorization: Bearer <API Key>\" https://api.permit.io/v2/facts/{projectKey}/{environmentKey}/tenants\n```\n\n----------------------------------------\n\nTITLE: Fetching API Key Scope using Permit SDK\nDESCRIPTION: API request to retrieve the project ID and environment ID using the Permit SDK.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/overview/use-the-permit-api-and-sdk.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data } = await permit.api.get(\"/api/v1/api-key-scope\");\n```\n\n----------------------------------------\n\nTITLE: Operation Approval Webhook schema in Python\nDESCRIPTION: Python schema definition for the webhook payload sent for operation approvals. Includes requesting user ID, operation approval details, reason, status, reviewer user ID, and reviewer comment.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/embeddable-uis/webhooks.mdx#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n{\n    requesting_user_id: str,\n    operation_approval_details: {\n        tenant: str\n        resource: str\n        resource_instance: str\n    },\n    reason: str | None,\n    status: RequestStatus,\n    reviewer_user_id: str | None,\n    reviewer_comment: str | None\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Account Resource with cURL\nDESCRIPTION: cURL command to create an 'Account' resource type with roles and permissions using the Permit.io API.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/google-drive.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://api.permit.io/v2/schema/$permit_project/$permit_env/resources \\\n  -X POST \\\n  -H \"Authorization: Bearer $permit_sdk_api_key\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"key\": \"account\",\n    \"name\": \"Account\",\n    \"actions\": {\n        \"invite-member\": {},\n        \"list-members\": {},\n        \"remove-member\": {}\n    },\n    \"roles\": {\n        \"admin\": {\n            \"name\": \"Admin\",\n            \"permissions\": [\n\t\t\t\t\"invite-member\",\n\t\t\t\t\"list-members\",\n\t\t\t\t\"remove-member\"\n\t\t\t]\n        },\n        \"member\": {\n            \"name\": \"Member\",\n            \"permissions\": [\n\t\t\t\t\"list-members\"\n\t\t\t]\n        }\n    }\n  }'\n```\n\n----------------------------------------\n\nTITLE: Disabling Debug Mode via Permit API\nDESCRIPTION: This curl command disables Debug Mode for a specific PDP configuration using the Permit API.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/use-audit-logs/debug-mode.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"https://api.permit.io/v2/pdps/{proj_id}/{env_id}/configs/{pdp_id}/debug-audit-logs/disable\" \\\n-X PUT \\\n-H \"Authorization: Bearer {api-key}\" \\\n-H 'Content-Type: application/json'\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Handling for Unauthorized Requests (Nginx)\nDESCRIPTION: Nginx configuration for handling 401 Unauthorized errors. It can return a simple message or redirect to a login page.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/integrations/gateways/nginx.mdx#2025-04-17_snippet_2\n\nLANGUAGE: nginx\nCODE:\n```\nerror_page 401 = @error401;\n\nlocation @error401 {\n    return 401 \"Unauthorized\";\n    # Or redirect to a login page:\n    # return 302 /login;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating AbilityLoader Component with Permit.io and CASL\nDESCRIPTION: Implementation of the AbilityLoader component that manages user permissions using Permit.io and CASL. It integrates with Clerk authentication and handles asynchronous permission loading based on user attributes.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/feature-flagging.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { createContext, useEffect, useState } from \"react\";\nimport { useUser } from \"@clerk/nextjs\";\nimport { Ability } from \"@casl/ability\";\nimport { Permit, permitState } from \"permit-fe-sdk\";\n\n// Create Context\nexport const AbilityContext = createContext();\n\nexport const AbilityLoader = ({ children }) => {\n  const { isSignedIn, user } = useUser();\n  const [ability, setAbility] = useState(undefined);\n\n  useEffect(() => {\n    const getAbility = async (loggedInUser) => {\n      const permit = Permit({\n        loggedInUser: loggedInUser,\n        backendUrl: \"/api/something\",\n      });\n\n      await permit.loadLocalStateBulk([\n        {\n          action: \"view\",\n          resource: \"Products\",\n          userAttributes: {\n            country: \"PL\",\n            channel: \"ABC\",\n          },\n        },\n        {\n          action: \"view\",\n          resource: \"Product_Configurators\",\n          userAttributes: {\n            country: \"UK\",\n            channel: \"ABC\",\n          },\n        },\n        {\n          action: \"view\",\n          resource: \"Project_Builder\",\n          userAttributes: {\n            country: \"FR\",\n            channel: \"DEF\",\n          },\n        },\n        {\n          action: \"view\",\n          resource: \"Topics_for_you\",\n          userAttributes: {\n            country: \"ES\",\n            channel: \"DEF\",\n          },\n        },\n      ]);\n\n      const caslConfig = permitState.getCaslJson();\n\n      return caslConfig && caslConfig.length ? new Ability(caslConfig) : undefined;\n    };\n\n    if (isSignedIn) {\n      getAbility(user.id).then((caslAbility) => {\n        setAbility(caslAbility);\n      });\n    }\n  }, [isSignedIn, user]);\n\n  return <AbilityContext.Provider value={ability}>{children}</AbilityContext.Provider>;\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Permit SDK in Java\nDESCRIPTION: Setup code for initializing the Permit SDK in a Java environment using an API key and PermitConfig builder.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/embeddable-uis/element-login.mdx#2025-04-17_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nimport io.permit.sdk.Permit;\nimport io.permit.sdk.PermitConfig;\n\nPermit permit = new Permit(\n    new PermitConfig.Builder(\"[YOUR_API_KEY]\").build()\n);\n```\n\n----------------------------------------\n\nTITLE: Successful Task Completion Response in JSON\nDESCRIPTION: This JSON snippet shows the response structure when a background task has completed successfully. It includes the task_id, status, and the result object containing details of the newly created environment.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/background-tasks.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"task_id\": \"string\",\n  \"status\": \"success\",\n  \"result\": {\n    \"key\": \"prod\",\n    \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n    \"organization_id\": \"7c60d51f-b44e-4682-87d6-449835ea4de6\",\n    \"project_id\": \"405d8375-3514-403b-8c43-83ae74cfe0e9\",\n    \"created_at\": \"2019-08-24T14:15:22Z\",\n    \"updated_at\": \"2019-08-24T14:15:22Z\",\n    \"avp_policy_store_id\": \"\",\n    \"name\": \"production\",\n    \"description\": \"\",\n    \"custom_branch_name\": \"\",\n    \"jwks\": {},\n    \"settings\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Condition Rule for Bicycle Rental Permission\nDESCRIPTION: Combines the User Set and Resource Set to create a complete condition rule that grants bicycle rental permissions to full-time Stanford students after 5PM.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/working-with-abac/examples.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"user_set\": \"full_time_stanford_students\",\n    \"permissions\": [\n        \"bicycle:rent\"\n    ],\n    \"resource_set\": \"rent_bicycle_after_5\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Permit Client with Local PDP in Ruby\nDESCRIPTION: Creates a Permit client instance in Ruby connected to a locally running PDP. Requires an API key and the local PDP URL as parameters.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/concepts/pdp/overview.mdx#2025-04-17_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'permit'\n\npermit = Permit.new(\n  \"[your-api-key]\",\n  \"http://localhost:7766\"\n)\n```\n\n----------------------------------------\n\nTITLE: Exporting Users from Auth0 via API (Bash)\nDESCRIPTION: This curl command initiates a job to export users from Auth0. It specifies the fields to export and the format of the export file.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/authentication/auth0/auth0-sync-script.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'https://[your auth0 domain].auth0.com/api/v2/jobs/users-exports' \\\n--header 'authorization: Bearer [Auth0 management API Key]' \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"connection_id\": \"con_1234567890\",  \n    \"format\": \"csv\",\n    \"limit\": 999999,\n    \"fields\": [\n        {\"name\": \"email\"},\n        {\"name\":\"user_id\"},\n        {\"name\":\"given_name\"},\n        {\"name\":\"last_name\"},\n        {\n            \"name\": \"identities[0].connection\",\n            \"export_as\": \"provider\"\n        }\n    ]\n}'\n```\n\n----------------------------------------\n\nTITLE: Sample Environment Object Response\nDESCRIPTION: This JSON response shows the structure of an environment object returned by the Permit API, containing the environment ID, key, and other details. The important fields to extract are either the 'id' or 'key'.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/examples/get-project-and-env.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"key\": \"env_key\",\n    \"id\": \"20cce46340594f98b03c2189e40cxxxx\",\n    \"organization_id\": \"903ebc2765b848289d6dfbd3c21exxxx\",\n    \"project_id\": \"3c4244c7bcab4c97990e5bc724daxxxx\",\n    \"created_at\": \"2023-05-16T12:47:10+00:00\",\n    \"updated_at\": \"2023-05-16T12:47:10+00:00\",\n    \"name\": \"Env Name\",\n    \"description\": null,\n    \"custom_branch_name\": null,\n    \"jwks\": null,\n    \"settings\": null,\n    \"email_configuration\": null\n},\n```\n\n----------------------------------------\n\nTITLE: Filtering Relationship Tuples by Tenant\nDESCRIPTION: Filter tuples by tenant using tenant key or ID.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/examples/filter-relationship-tuple.mdx#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.permit.io/v2/facts/{project_id}/{env_id}/relationship_tuples?tenant=default&page=1&per_page=10' \\\n  -H 'authorization: Bearer API_SECRET_KEY'\n```\n\n----------------------------------------\n\nTITLE: Creating Volume for PDP Backup (Bash)\nDESCRIPTION: This snippet shows how to create a Docker volume for storing PDP backup data.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/concepts/pdp/factdb.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker volume create pdp-backup\n```\n\n----------------------------------------\n\nTITLE: Creating an Organization Group in Permit.io\nDESCRIPTION: POST request to create a new group instance called 'org1' in the default tenant. This group will represent an organization to which support team members need access.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/rebac/groups.mdx#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.permit.io/v2/schema/{project_id}/{env_id}/groups' \\\n\n-H 'authorization: Bearer API_SECRET_KEY' \\\n\n--data-raw '{\"group_instance_key\": \"org1\", \"group_tenant\": \"default\"}'\n```\n\n----------------------------------------\n\nTITLE: Filtering Users by Tenant in Permit.io API\nDESCRIPTION: This snippet demonstrates how to filter users by tenant using the Permit.io API. It requires the API secret key, project ID, environment ID, and tenant ID or key.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/examples/filter-users.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.permit.io/v2/facts/{project_id}/{env_id}/tenants/tenant_id/users?search=key@permit.io&page=1&per_page=3' \\\n  -H 'authorization: Bearer API_SECRET_KEY'\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n \"data\": [\n     {\n         \"key\": \"key@permit.io\",\n         \"id\": \"d084172f638140e7a90622ff8311xxx\",\n         \"organization_id\": \"903ebc2765b848289d6dfbd3c21exxxx\",\n         \"project_id\": \"3c4244c7bcab4c97990e5bc724daxxxx\",\n         \"environment_id\": \"9ba956da646948538efaee4cf10dxxxx\",\n         \"associated_tenants\": [\n             {\n                 \"tenant\": \"default\",\n                 \"roles\": [\n                     \"board\",\n                     \"test\",\n                     \"admin\"\n                 ],\n                 \"status\": \"active\"\n             }\n         ],\n         \"roles\": [\n             {\n                 \"role\": \"board\",\n                 \"tenant\": \"default\"\n             },\n             {\n                 \"role\": \"test\",\n                 \"tenant\": \"default\"\n             },\n             {\n                 \"role\": \"admin\",\n                 \"tenant\": \"default\"\n             }\n         ],\n         \"email\": \"test@gmail.com\",\n         \"first_name\": \"\",\n         \"last_name\": \"\",\n         \"attributes\": {}\n     }\n ],\n \"total_count\": 1,\n \"page_count\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching JWKS from Auth0\nDESCRIPTION: Auth0 exposes a JWKS endpoint for each tenant at a specific URL pattern. This endpoint contains the JWK used to verify all Auth0-issued JWTs for the tenant. Currently, Auth0 signs with only one JWK at a time, but the endpoint may contain multiple JWKs during key rotation.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/foaz/fetching-jwks.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nhttps://{yourDomain}/.well-known/jwks.json\n```\n\n----------------------------------------\n\nTITLE: Installing Permit.io Golang SDK\nDESCRIPTION: Command to install the Permit.io SDK package for Golang using go get.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/getting-started/_quickstart-parts/_quickstart_golang.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/permitio/permit-golang\n```\n\n----------------------------------------\n\nTITLE: Sample Relationship Tuple Response Structure\nDESCRIPTION: Example JSON response showing the structure of a relationship tuple including subject, relation, object, and various metadata fields.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/examples/filter-relationship-tuple.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"subject\": \"Folder:documents\",\n        \"relation\": \"parent\",\n        \"object\": \"File:my_pdf\",\n        \"id\": \"c76f9a129dbe44f88664b7333fef0cce\",\n        \"tenant\": \"default\",\n        \"subject_id\": \"6e6855d2b2cf438c9bf79136ec72c188\",\n        \"relation_id\": \"9c6aee683f5c482cabd2d536734801c9\",\n        \"object_id\": \"3bdd97e40010426bbf0648d962779122\",\n        \"tenant_id\": \"f9bcad6ad2a54113ba4f45fc014d4bb0\",\n        \"organization_id\": \"78f198a252c04572b098cf3aa70f8520\",\n        \"project_id\": \"1bbb39e66e614bbc831346bb1c15babb\",\n        \"environment_id\": \"6175ea4cb70b4d08add43ebfa6a30004\",\n        \"created_at\": \"2023-11-16T08:30:46+00:00\",\n        \"updated_at\": \"2023-11-16T08:30:46+00:00\",\n        \"subject_details\": {\n            \"key\": \"documents\",\n            \"tenant\": \"default\",\n            \"resource\": \"Folder\",\n            \"attributes\": {}\n        },\n        \"relation_details\": {\n            \"key\": \"parent\",\n            \"name\": \"parent\",\n            \"description\": \"Relation expresses possible 'parent' relation between subject of type 'Folder' to object of type 'File'\"\n        },\n        \"object_details\": {\n            \"key\": \"my_pdf\",\n            \"tenant\": \"default\",\n            \"resource\": \"File\",\n            \"attributes\": {}\n        },\n        \"tenant_details\": {\n            \"key\": \"default\",\n            \"name\": \"Default Tenant\",\n            \"description\": null,\n            \"attributes\": null\n        }\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Apollo Server Plugin for Simplified Authorization\nDESCRIPTION: This alternative plugin implementation uses a simplified approach, treating operation names as resources and operation types (mutation/query) as actions for Permit.io authorization checks.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/integrations/GraphQL/apollo_server.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst permitPlugin = {\n  requestDidStart(requestContext) {\n    return {\n      async didResolveOperation (context) {\n        const op = context.operationName\n        var userId = await getUserIdFromJWT(\"\");\n        isMutation = context.operation.operation === 'mutation'\n        const allowed = await permit.check(userId, isMutation? \"write\": \"read\", op.toLowerCase()) // this will look like \"action: write, resource:launches\" or \"action: read, resource:launches\"\n        if (!allowed) {\n          throw new Error(\"Not allowed\");\n        }\n      },\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieve Authorized Users for a Resource\nDESCRIPTION: Illustrates the use of permit.authorized_users to get a list of users who can perform specific actions on a resource. The example shows checking who can read Blog Post 3.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/overview/advanced-authorization-queries.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<CodeBlock folderPath=\"/walkthroughs/authz-queries/getAuthorizedUsers\" />\n```\n\n----------------------------------------\n\nTITLE: Base URL for Resource Roles API\nDESCRIPTION: The base URL for accessing the Resource Roles API endpoint in Permit.io.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/rebac/rebac-api-calls.mdx#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://api.permit.io/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Environment and Installing Permit\nDESCRIPTION: Commands to set up a virtual environment and install the Permit library for AWS Lambda layer creation.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/integrations/gateways/aws-api-gateway.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir permit-lambda\ncd permit-lambda\npython -m venv venv\nsource venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Defining Permit.io Terraform Provider\nDESCRIPTION: Specifies the required provider block for using the Permit.io Terraform provider. It sets the source and version constraints for the provider.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/integrations/infra-as-code/terraform-provider.mdx#2025-04-17_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    permitio = {\n      source  = \"registry.terraform.io/permitio/permit-io\"\n      version = \"~> 0.0.1\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Cookie-based loginAs with Python\nDESCRIPTION: FastAPI implementation of the loginAs endpoint using cookie authentication. Creates a route that returns a redirect response to the Permit Element.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/embeddable-uis/element-login.mdx#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\n from starlette.responses import JSONResponse\n app = FastAPI()\n @app.post(\"/login_cookie\")\n async def login():\n     # get user from jwt\n     # user_id = get_user_from_jwt(request)\n     ticket = await permit.elements.login_as(USER, TENANT)\n     return JSONResponse(status_code=302, headers={\"Location\": ticket.redirect_url}, content={})\n```\n\n----------------------------------------\n\nTITLE: Fetching JWKS from OneLogin\nDESCRIPTION: OneLogin provides JWKS through an authenticated endpoint. A GET request is required with a bearer access token that can be generated using their Token API. The endpoint returns all signing keys, with only the most recently created one having active status.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/foaz/fetching-jwks.mdx#2025-04-17_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nhttps://<subdomain>.onelogin.com/oidc/2/signing_keys\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom User Attributes with OPA Rego\nDESCRIPTION: This Rego code defines a custom user attribute 'has_intersection' based on the intersection of user and resource attributes. It can be used in combination with Permit.io's ABAC policies.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/build-policies/abac/patterns.mdx#2025-04-17_snippet_1\n\nLANGUAGE: rego\nCODE:\n```\npackage permit.custom\nimport future.keywords.in\n\ndefault custom_user_attributes[\"has_intersection\"] = false\ncustom_user_attributes[\"has_intersection\"] := true {\n    # Convert the two attributes to sets so we can test for intersections\n    user_attr_set = {x | some x in data.users[input.user.key].attributes[\"attr_in_user\"]}\n    res_attr_set = {x | some x in input.resource.attributes[\"attr_in_resource\"]}\n    # Test for an intersection\n    count(user_attr_set & res_attr_set) > 0\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Language Labels and Demo Components in JSX/MDX\nDESCRIPTION: Imports various language-specific label components and demo content examples for the tutorial interface. The code sets up the necessary imports for a tabbed documentation interface that supports multiple programming languages.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/overview/connecting-your-app.mdx#2025-04-17_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport {\n  CSharpLabel,\n  PythonLabel,\n  SyncPythonLabel,\n  JavaLabel,\n  RubyLabel,\n  GolangLabel,\n  NodeJSLabel,\n} from \"@site/src/components/langLabels\";\nimport IntroContent from \"@site/docs/getting-started/_quickstart-parts/_quickstart_intro.mdx\";\nimport DotNetExample from \"@site/docs/getting-started/_quickstart-parts/_quickstart_dotnet.mdx\";\nimport JavaExample from \"@site/docs/getting-started/_quickstart-parts/_quickstart_java.mdx\";\nimport NodeJSExample from \"@site/docs/getting-started/_quickstart-parts/_quickstart_nodejs.mdx\";\nimport GolangExample from \"@site/docs/getting-started/_quickstart-parts/_quickstart_golang.mdx\";\nimport RubyExample from \"@site/docs/getting-started/_quickstart-parts/_quickstart_ruby.mdx\";\nimport PythonExample from \"@site/docs/getting-started/_quickstart-parts/_quickstart_python.mdx\";\nimport SyncPythonExample from \"@site/docs/getting-started/_quickstart-parts/_quickstart_python_sync.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Login Endpoint Implementation in JavaScript\nDESCRIPTION: Example showing correct and incorrect ways to handle login endpoint responses in a server application using Permit Elements.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/embeddable-uis/troubleshooting.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\napp.post(\"/login_cookie\", async (req, res) => {\n    // const user_key = get_user_from_jwt();\n    console.log(USER, TENANT);\n    const ticket = await permit.elements.loginAs({userId: USER, tenantId: TENANT});\n    res.status(200).send(ticket.redirect_url); // WRONG: sending ticket.redirect_url instead of ticket.content\n    res.status(302).redirect(ticket.content); // WRONG: redirecting to ticket.content instead of sending it\n    res.status(200).send(ticket.content); // CORRECT: sending ticket.content\n    res.status(302).redirect(ticket.redirect_url); // CORRECT: redirecting to ticket.redirect_url\n});\n```\n\n----------------------------------------\n\nTITLE: Object Matching with Foreign Key in JSON for Permit.io\nDESCRIPTION: This snippet demonstrates how to use the 'object_match' operator with a foreign key to check if the organization of a repo is located in the US. It uses the 'fk_resource_type' key to specify the foreign resource type.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/working-with-abac/operators.mdx#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"allOf\": [\n        {\n            \"resource.organization\": {\n                \"object_match\": {\n                    \"match\": {\n                        \"country\": {\"equals\": \"US\"}\n                    },\n                    \"fk_resource_type\": \"organization\"\n                }\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Cookie-based loginAs with Node.js\nDESCRIPTION: Express.js implementation of the loginAs endpoint using cookie authentication. Creates a route that redirects to the Permit Element using a ticket.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/embeddable-uis/element-login.mdx#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require(\"express\");\n const app = express();\n app.get(\"/login_cookie\", async (req, res) => {\n     // const user_key = get_user_from_jwt();\n     const ticket = await permit.elements.loginAs({userId: user_key, tenantId: TENANT});\n     res.status(302).redirect(ticket.redirect_url);\n });\n app.listen(port, () => {\n   console.log(`Example app listening at http://localhost:${port}`);\n });\n```\n\n----------------------------------------\n\nTITLE: Exposing OPA within PDP\nDESCRIPTION: Docker command to run PDP with exposed OPA port for direct API access.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/deploy/deploy-to-production.mdx#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -it \\\n  -p 7766:7000 \\\n  -p 8181:8181 \\\n  --env PDP_API_KEY=<YOUR_API_KEY> \\\n  --env PDP_DEBUG=True \\\n  permitio/pdp-v2:latest\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Mode via Permit API\nDESCRIPTION: This curl command enables Debug Mode for a specific PDP configuration using the Permit API.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/use-audit-logs/debug-mode.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"https://api.permit.io/v2/pdps/{proj_id}/{env_id}/configs/{pdp_id}/debug-audit-logs/enable\" \\\n-X PUT \\\n-H \"Authorization: Bearer {api-key}\" \\\n-H 'Content-Type: application/json'\n```\n\n----------------------------------------\n\nTITLE: Creating Account-File Relationship with cURL\nDESCRIPTION: Creates an 'account' relationship between the 'acme' account and the '2023_report' file. This establishes that the file belongs to the acme account.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/google-drive.mdx#2025-04-17_snippet_39\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://api.permit.io/v2/facts/$permit_project/$permit_env/relationship_tuples \\\n  -X POST \\\n  -H \"Authorization: Bearer $permit_sdk_api_key\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"subject\": \"account:acme\",\n    \"relation\": \"account\",\n    \"object\": \"file:2023_report\"\n  }'\n```\n\n----------------------------------------\n\nTITLE: Java Spring Boot Login Controller with Permit.io Integration\nDESCRIPTION: Spring Boot REST controller that implements Permit.io login endpoint using header authentication. Configures Permit SDK and handles login requests.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/embeddable-uis/element-login.mdx#2025-04-17_snippet_10\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.myproject;\n\nimport io.permit.sdk.Permit;\nimport io.permit.sdk.PermitConfig;\nimport io.permit.sdk.api.PermitApiException;\nimport io.permit.sdk.api.models.UserLoginResponse;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.io.IOException;\n\n@RestController\n@SpringBootApplication\npublic class DemoApplication {\n\tPermit permit = new Permit(\n\t\t\tnew PermitConfig.Builder(\"<SET_API_KEY_HERE>\")\n\t\t\t\t\t.withPdpAddress(\"http://localhost:7766\")\n\t\t\t\t\t.withDebugMode(true)\n\t\t\t\t\t.build()\n\t);\n\n\t@GetMapping(\"/login_header\")\n\tpublic ResponseEntity<Object> loginWithHeader() throws IOException, PermitApiException {\n    // String userId = getUserIdFromJWT();\n\t\tUserLoginResponse ticket = permit.elements.loginAs(userId, tenantId);\n\t\treturn new ResponseEntity<>(ticket.content, HttpStatus.OK);\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(DemoApplication.class, args);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Terraform Configuration\nDESCRIPTION: Executes the actions proposed in the Terraform plan to create or update infrastructure.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/deploy/cloud-hosts/terraform.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: Importing Permit.io SDK\nDESCRIPTION: Import statement for including the Permit.io SDK in Golang code.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/getting-started/_quickstart-parts/_quickstart_golang.mdx#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/permitio/permit-golang/pkg/permit\"\n```\n\n----------------------------------------\n\nTITLE: Filtering Role Assignments by Specific Resource Instance\nDESCRIPTION: Filter role assignments for a specific resource instance (e.g., document:photo). This allows retrieving all users who have roles assigned to a particular resource instance.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/examples/filter-role-associations.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.permit.io/v2/facts/{project_id}/{env_id}/role_assignments?resource_instance=document:photo' \\\n  -H 'authorization: Bearer API_SECRET_KEY'\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"id\": \"f7bbee0360494e96ba9bf594e807b040\",\n        \"user\": \"alice\",\n        \"role\": \"owner\",\n        \"tenant\": \"default\",\n        \"resource_instance\": \"document:photo\",\n        \"resource_instance_id\": \"560bd95aa9a94032a74541f6c55a883f\",\n        \"user_id\": \"9b14f8deb1274af09931c2cfb3cb4cf8\",\n        \"role_id\": \"b4f9cb32df60459291a00ca5be7c1bb9\",\n        \"tenant_id\": \"8d15d835c04c40429807215e9aee418e\",\n        \"organization_id\": \"47b37e40e1094a2580fc6589ad24fec5\",\n        \"project_id\": \"6b84d0a6705c4c81a8818f4e7bb0f589\",\n        \"environment_id\": \"47e86c08899f4b798657fd19f09b54c1\",\n        \"created_at\": \"2024-06-30T22:36:44+00:00\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: AbilityLoader Component Implementation\nDESCRIPTION: React component that manages user permissions using CASL and Permit.io. Creates a context provider for sharing permissions across the application.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/integrations/feature-flagging/casl.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { createContext, useEffect, useState } from \"react\";\nimport { useUser } from \"@clerk/nextjs\";\nimport { Ability } from \"@casl/ability\";\nimport { Permit, permitState } from \"permit-fe-sdk\";\n\n// Create Context\nexport const AbilityContext = createContext();\n\nexport const AbilityLoader = ({ children }) => {\n  const { isSignedIn, user } = useUser();\n  const [ability, setAbility] = useState(undefined);\n\n  useEffect(() => {\n    const getAbility = async (loggedInUser) => {\n      const permit = Permit({\n        loggedInUser: loggedInUser,\n        backendUrl: \"/api/something\",\n      });\n\n      await permit.loadLocalStateBulk([\n        { action: \"view\", resource: \"Products\" },\n        { action: \"view\", resource: \"document\" },\n        { action: \"view\", resource: \"file\" },\n        { action: \"view\", resource: \"component\" },\n      ]);\n\n      const caslConfig = permitState.getCaslJson();\n\n      return caslConfig && caslConfig.length ? new Ability(caslConfig) : undefined;\n    };\n\n    if (isSignedIn) {\n      getAbility(user.id).then((caslAbility) => {\n        setAbility(caslAbility);\n      });\n    }\n  }, [isSignedIn, user]);\n\n  return <AbilityContext.Provider value={ability}>{children}</AbilityContext.Provider>;\n};\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Timeout for Specific Operations in Node.js\nDESCRIPTION: This snippet shows how to override the default timeout for a specific operation in Node.js using the Permit SDK.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/manage-data/local-facts-uploader.mdx#2025-04-17_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// SDK initialization with proxy_facts_via_pdp enabled\nconst permit = new Permit({\n  token: \"<your-api-key>\",\n  pdp: \"http://localhost:7766\",\n  proxyFactsViaPdp: true\n});\n\n// Override the default timeout for a specific operation\nconst user = await permit.api.users.waitForSync(15).create({ /* user data */ });\n```\n\n----------------------------------------\n\nTITLE: Running the PDP Docker Container Locally\nDESCRIPTION: Command to run the PDP Docker container locally with proper configuration. Requires replacing the placeholder with your environment API key from Permit.io.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/foaz/visual-guide.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it -p 7766:7000 --env PDP_API_KEY=<YOUR_API_KEY> permitio/pdp-v2:0.2.19-rc.2\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for PDP Cluster\nDESCRIPTION: Docker Compose configuration that defines services for Envoy proxy and 7 PDP shards. Each shard is configured with unique ports and environment variables.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/manage-data/pdp-sharding.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3.9\"\nnetworks:\n  pdp-net:\n    name: pdp-net\nservices:\n  envoy-proxy:\n    image: envoyproxy/envoy:v1.26-latest\n    networks:\n      - pdp-net\n    ports:\n      - \"9901:9901\"\n      - \"10000:10000\"\n    volumes:\n      - \"<PATH_TO_ENVOY_CONV>:/conf\"\n    command:\n      - \"-c /conf/envoy_custom.yaml\"\n  pdp-shard-0:\n    image: permitio/pdp-v2:0.2.19-rc.1\n    networks:\n      - pdp-net\n    environment:\n      - PDP_API_KEY=<PDP_API_KEY>\n      - PDP_SHARD_ID=0\n    ports:\n      - \"18180:8181\"\n  pdp-shard-1:\n    image: permitio/pdp-v2:0.2.19-rc.1\n    networks:\n      - pdp-net\n    environment:\n      - PDP_API_KEY=<PDP_API_KEY>\n      - PDP_SHARD_ID=1\n    ports:\n      - \"18181:8181\"\n  pdp-shard-2:\n    image: permitio/pdp-v2:0.2.19-rc.1\n    networks:\n      - pdp-net\n    environment:\n      - PDP_API_KEY=<PDP_API_KEY>\n      - PDP_SHARD_ID=2\n    ports:\n      - \"18182:8181\"\n  pdp-shard-3:\n    image: permitio/pdp-v2:0.2.19-rc.1\n    networks:\n      - pdp-net\n    environment:\n      - PDP_API_KEY=<PDP_API_KEY>\n      - PDP_SHARD_ID=3\n    ports:\n      - \"18183:8181\"\n  pdp-shard-4:\n    image: permitio/pdp-v2:0.2.19-rc.1\n    networks:\n      - pdp-net\n    environment:\n      - PDP_API_KEY=<PDP_API_KEY>\n      - PDP_SHARD_ID=4\n    ports:\n      - \"18184:8181\"\n  pdp-shard-5:\n    image: permitio/pdp-v2:0.2.19-rc.1\n    networks:\n      - pdp-net\n    environment:\n      - PDP_API_KEY=<PDP_API_KEY>\n      - PDP_SHARD_ID=5\n    ports:\n      - \"18185:8181\"\n  pdp-shard-6:\n    image: permitio/pdp-v2:0.2.19-rc.1\n    networks:\n      - pdp-net\n    environment:\n      - PDP_API_KEY=<PDP_API_KEY>\n      - PDP_SHARD_ID=6\n    ports:\n      - \"18186:8181\"\n```\n\n----------------------------------------\n\nTITLE: Creating Lambda Layer ZIP\nDESCRIPTION: Command to create a ZIP file containing the Permit library and its dependencies for Lambda layer upload.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/integrations/gateways/aws-api-gateway.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nzip -r layer python/\n```\n\n----------------------------------------\n\nTITLE: StytchProvider Setup in Next.js\nDESCRIPTION: Implementation of StytchProvider wrapper component in the root application file\nSOURCE: https://github.com/permitio/docs/blob/master/docs/authentication/stytch/permit-integration.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { StytchProvider, createStytchUIClient } from \"@stytch/nextjs\";\nimport Head from \"next/head\";\n\nconst stytch = createStytchUIClient(process.env.STYTCH_PUBLIC_TOKEN);\n\nexport default function App({ Component, pageProps }) {\n  return (\n    <>\n      <Head>{/* Truncated */}</Head>\n      <StytchProvider stytch={stytch}>\n        <Component {...pageProps} />\n      </StytchProvider>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Full .NET Application Example with Permit.io SDK\nDESCRIPTION: Complete C# code example of a simple HTTP server using the Permit.io SDK for permission checks.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/getting-started/_quickstart-parts/_quickstart_dotnet.mdx#2025-04-17_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.Text;\nusing System.Net;\nusing System.Threading.Tasks;\nusing PermitSDK;\nusing PermitSDK.Models;\n\nnamespace PermitOnboardingApp\n{\n    class HttpServer\n    {\n        public static HttpListener listener;\n        public static string url = \"http://localhost:4000/\";\n        public static string pageData =\"<p>User {0} is {1} to {2} {3}</p>\";\n        public static async Task HandleIncomingConnections()\n        {\n            bool runServer = true;\n            while (runServer)\n            {\n                HttpListenerContext ctx = await listener.GetContextAsync();\n                HttpListenerResponse resp = ctx.Response;\n\n                // in a real app, you would typically decode the user id from a JWT token\n                UserKey user = new UserKey(\"userId\", \"John\", \"Smith\", \"john@permit.io\");\n                // init Permit SDK\n                string clientToken = \"[YOUR_API_KEY]\";\n                Permit permit = new Permit(\n                    clientToken,\n                    \"http://localhost:7766\",\n                    \"default\",\n                    true\n                );\n                // After we created this user in the previous step, we also synced the user's identifier\n                // to permit.io servers with permit.write(permit.api.syncUser(user)). The user identifier\n                // can be anything (email, db id, etc) but must be unique for each user. Now that the\n                // user is synced, we can use its identifier to check permissions with `permit.check()`.\n                bool permitted = await permit.Check(user.key, \"create\", \"task\");\n                if (permitted)\n                {\n                    await SendResponseAsync(resp, 200, String.Format(pageData, user.firstName + user.lastName, \"Permitted\", \"create\", \"task\"));\n                }\n                else\n                {\n                    await SendResponseAsync(resp, 403, String.Format(pageData, user.firstName + user.lastName, \"NOT Permitted\", \"create\", \"task\"));\n                }\n\n            }\n        }\n        public static async Task SendResponseAsync(HttpListenerResponse resp, int returnCode, string responseContent)\n        {\n            byte[] data = Encoding.UTF8.GetBytes(responseContent);\n            resp.StatusCode = returnCode;\n            await resp.OutputStream.WriteAsync(data, 0, data.Length);\n            resp.Close();\n        }\n\n        public static void Main(string[] args)\n        {\n            // Create a Http server and start listening for incoming connections\n            listener = new HttpListener();\n            listener.Prefixes.Add(url);\n            listener.Start();\n            Console.WriteLine(\"Listening for connections on {0}\", url);\n            Task listenTask = HandleIncomingConnections();\n            listenTask.GetAwaiter().GetResult();\n            listener.Close();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending URL Mapping Permission Check Request to PDP\nDESCRIPTION: This cURL command sends a POST request to the PDP's /allowed_url endpoint to check permissions for a specific URL and HTTP method. It includes user information, the target URL, HTTP method, and tenant in the request payload.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/foaz/url-mapping-check.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'http://localhost:7766/allowed_url' \\\n--header 'Content-Type: application/json' \\\n--header 'Accept: application/json' \\\n--header 'Authorization: Bearer permit_key_{your_key}' \\\n--data '{\n  \"user\": {\n    \"key\": \"raz@permit.io\"\n  },\n  \"url\": \"https://example.com/endpoint?param=value\",\n  \"http_method\": \"POST\",\n  \"tenant\": \"default\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Retrieving PDP Configuration via Permit API\nDESCRIPTION: This curl command retrieves the PDP configuration from the Permit API, which is needed before updating the Debug Mode setting.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/use-audit-logs/debug-mode.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"https://api.permit.io/v2/pdps/{proj_id}/{env_id}/configs\" \\\n-H \"Authorization: Bearer {api-key}\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Permit SDK with Local PDP\nDESCRIPTION: JavaScript code example showing how to initialize the Permit SDK to use a local PDP instance.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/deploy/deploy-to-production.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst permit = new Permit({\n  pdp: \"http://localhost:7766\",\n  token: \"<YOUR_API_KEY>\",\n});\n```\n\n----------------------------------------\n\nTITLE: Valid Attribute-First Time Condition\nDESCRIPTION: Demonstrates a valid attribute-first condition combining multiple time-based rules.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/working-with-abac/building-conditions.mdx#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{\"subject.time\": {\"and\": [{\"between\": [9, 12]}, {\"equals\": \"13:00\"}]}}\n```\n\n----------------------------------------\n\nTITLE: Configuring OPAL Scope with REST Countries API\nDESCRIPTION: API call to configure custom data sources in Permit.io using the REST Countries API as an external data source. Sets up data fetching and storage configuration.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/manage-data/use-external-data-source.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\ncurl --location --request PUT 'https://api.permit.io/v2/projects/{project_id}/{env_id}/opal_scope' \\\n--header 'Content-Type: application/json' \\\n--header 'Accept: application/json' \\\n--header 'Authorization: Bearer permit_key_***' \\\n--data '{\n  \"data\": {\n       \"entries\": [\n            {\n                 \"url\": \"https://restcountries.com/v3.1/all?fields=name,region\",\n                 \"dst_path\": \"/countries\",\n                 \"config\": {\n                      \"headers\": {\n                           \"Accept\": \"application/json\"\n                      }\n                 }\n            }\n       ]\n  }\n}'\n```\n\n----------------------------------------\n\nTITLE: Rendering Element Types with ElementTile Components\nDESCRIPTION: This code snippet demonstrates the use of the ElementTile component to display different types of Permit Elements. Each ElementTile represents a specific element type with its image, title, description, and redirect link.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/embeddable-uis/overview.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"elementsBox\">\n<ElementTile\n\tsrc=\"/img/elements/user-management.png\"\n\ttitle=\"User Management\"\n\tdescription=\"Manage user access-control and permissions within your system\"\n\trecommended\n\tredirect=\"/embeddable-uis/element/user-management\"\n/>\n\n<ElementTile\n\tsrc=\"/img/elements/audit-logs.png\"\n\ttitle=\"Audit Logs\"\n\tdescription=\"Monitor decisions made against each policy\"\n\tredirect=\"/features/permit-elements/element/audit-logs\"\n/>\n\n<ElementTile\n\tsrc=\"/img/elements/approval-flows.png\"\n\ttitle=\"Approval Flows\"\n\tdescription=\"Monitor, control and approve decisions made agains policies in real-time\"\n\tredirect=\"/features/permit-elements/element/approval-flows\"\n/>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Parent Relationship Tuple with Python\nDESCRIPTION: Creates a 'parent' relationship from the '2023_report' file to the 'finance' folder using the Permit.io Python SDK. This establishes the hierarchical relationship between the folder and file resources.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/google-drive.mdx#2025-04-17_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nawait permit.api.relationship_tuples.create(\n    {\n        \"subject\": \"folder:finance\",\n        \"relation\": \"parent\",\n        \"object\": \"file:2023_report\",\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Timeout for Specific Operations in Go\nDESCRIPTION: This snippet illustrates how to override the default timeout for a specific operation in Go using the Permit SDK.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/manage-data/local-facts-uploader.mdx#2025-04-17_snippet_10\n\nLANGUAGE: go\nCODE:\n```\n// SDK initialization with proxy_facts_via_pdp enabled\npermitConfig := config.NewConfigBuilder(\"<YOUR_API_KEY>\").\n    WithPdpUrl(\"http://localhost:7766\").\n    WithProxyFactsViaPdp().\n    Build()\npermit := permit.New(permitConfig)\n\n// Override the default timeout for a specific operation\nuser, _ := permit.Api.Users.WaitForSync(15).CreateUser(ctx, *newUser)\n```\n\n----------------------------------------\n\nTITLE: Accessing Relationship Tuples Endpoint in Permit.io Proxy Facts API\nDESCRIPTION: HTTP endpoint for creating relationship tuples via the Proxy Facts API. This endpoint waits for synchronization before returning a response, unlike other APIs that are forwarded directly to the Permit API.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/manage-data/local-facts-uploader.mdx#2025-04-17_snippet_11\n\nLANGUAGE: http\nCODE:\n```\nPOST /facts/relationship_tuples\n```\n\n----------------------------------------\n\nTITLE: Embedding Access Request Element using iframe in HTML\nDESCRIPTION: HTML iframe code snippet for embedding the Access Request Element into an application. The src URL contains placeholder values for element name, environment ID, and tenant key that need to be replaced with actual values.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/embeddable-uis/element/access-request.mdx#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe\n\ttitle=\"Permit Element Name\"\n\tsrc=\"https://embed.permit.io/<ELEMENT_NAME>?envId=<SOME_UNIQUE_ID>&darkMode=false&tenantKey=<TENANT_KEY>\"\n\twidth=\"100%\"\n\theight=\"100%\"\n\tstyle=\"border: none;\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Filtering Relationship Tuples by Subject\nDESCRIPTION: Filter tuples by subject using resource type and instance identifier.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/examples/filter-relationship-tuple.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.permit.io/v2/facts/{project_id}/{env_id}/relationship_tuples?subject=Folder:documents&page=1&per_page=10' \\\n  -H 'authorization: Bearer API_SECRET_KEY'\n```\n\n----------------------------------------\n\nTITLE: Basic Permission Check with Permit.io in JavaScript\nDESCRIPTION: Demonstrates how to initialize Permit.io client and perform basic permission checks within application logic. This code shows the core method for checking if a user has permission to perform an action on a resource.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/authentication/hankopermit.mdx#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nnew Permit({token: <your_permit_token>});\n\npermit.check(user, action, resource);\n```\n\n----------------------------------------\n\nTITLE: Performing Permission Check with Python SDK\nDESCRIPTION: This snippet shows how to use the Permit Python SDK to check if a user has permission to perform an action on a resource. It specifies the user email, action, and resource details.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/manage-data/pdp-sharding.mdx#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nawait permit.check(\n    # user\n    \"user@example.com\",\n    # action\n    \"read\",\n    # resource\n    {\n        \"type\": \"document\",\n        \"tenant\": \"default\",\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Starting a PDP Container for URL Mapping Permissions\nDESCRIPTION: This command starts a Docker container running the Permit.io PDP (Policy Decision Point) with debug mode enabled. The PDP is necessary to use the URL Mapping Permissions Check feature.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/foaz/regex-url-mapping-check.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it \\\n  -p 7766:7000 \\\n  --env PDP_API_KEY=permit_key_{your_permit_env_key} \\\n  --env PDP_DEBUG=True \\\n  permitio/pdp-v2:latest\n```\n\n----------------------------------------\n\nTITLE: Setting UVICORN_NUM_WORKERS Configuration\nDESCRIPTION: Configuration to set the number of parallel workers to run the PDP server on. Default value is 1.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/concepts/pdp/configuration.mdx#2025-04-17_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nUVICORN_NUM_WORKERS\n```\n\n----------------------------------------\n\nTITLE: Rendering MDX Components for Python Permissions Quickstart\nDESCRIPTION: Renders the imported MDX components to display the introductory content and synchronous Python examples in the quickstart guide.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/reference/SDKs/Python/quickstart_python_sync.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<IntroContent />\n<SyncPythonExample />\n```\n\n----------------------------------------\n\nTITLE: Updating Tenant Implementation in Go\nDESCRIPTION: Makes the API call to update a tenant using the provided context, tenant key, and update object. Returns the updated tenant object and any potential errors.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/golang/tenant/Update.mdx#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntenant, err := Permit.Api.Tenants.Update(ctx, \"tenant-key\", *tenantUpdate)\n```\n\n----------------------------------------\n\nTITLE: Checking ABAC Permissions with Permit.io SDK\nDESCRIPTION: C# code showing how to check permissions for ABAC policies using the Permit.io SDK, including user and resource attributes.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/getting-started/_quickstart-parts/_quickstart_dotnet.mdx#2025-04-17_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nUserKey user = new UserKey(\"userId\", \"John\", \"Smith\", \"john@smith.com\");\n\nvar resourceInput = new ResourceInput(\n    \"resource\",\n    tenant: \"tenant\",\n    attributes: new Dictionary<string, string>\n        {\n            {\"hasApproval\", \"True\"}\n        }\n    );\n\nbool permitted = await permit.Check(user, \"action\", resourceInput);\n```\n\n----------------------------------------\n\nTITLE: Tenant Update Payload Structure - JavaScript Object\nDESCRIPTION: JSON structure defining the fields that can be updated for a tenant, including optional name, description and attributes.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/nodejs/tenant/update-tenant.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\tname: \"name\",\n\tdescription: \"description\",\n\tattributes: {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth0 Login Redirect in Next.js\nDESCRIPTION: Modified Auth0 authentication handler that redirects users to a custom post-login page for Permit.io synchronization.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/authentication/auth0/auth0-demo-app.mdx#2025-04-17_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\n// pages/api/auth/[...auth0].ts\nimport { handleAuth, handleLogin } from \"@auth0/nextjs-auth0\";\n\nexport default handleAuth({\n  async login(req, res) {\n    await handleLogin(req, res, {\n      returnTo: \"/postLogin\",\n    });\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Denying Access Request using Permit.io API (Bash)\nDESCRIPTION: This snippet demonstrates how to deny an access request using a PUT request to the Permit.io API. It includes an optional reviewer comment in the request body.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/elements/access-requests.mdx#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.permit.io/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/access_requests/{access_request_id}/deny' \\\n    -H 'cookie: <COOKIE FROM LOGIN>' \\\n  -H 'origin: https://api.permit.io'\n\n  --data-raw\n     \"reviewer_comment\": \"need more info\",\n }\\\n```\n\n----------------------------------------\n\nTITLE: Valid Attribute-First Age Condition\nDESCRIPTION: Shows a valid attribute-first condition with proper age-based rules.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/working-with-abac/building-conditions.mdx#2025-04-17_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"user.age\": {\n        \"or\": [\n            {\"between\": [15, 18]},\n            {\"greater-than\": 40},\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Pulling the PDP Docker Image for FoAz\nDESCRIPTION: Command to pull the Policy Decision Point (PDP) Docker image required for URL mapping permission checks. Uses a specific version supporting URL mapping functionality.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/foaz/visual-guide.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull permitio/pdp-v2:0.2.19-rc.2\n```\n\n----------------------------------------\n\nTITLE: Creating Account Resource Instance with Python\nDESCRIPTION: Creates an 'acme' account resource instance using the Python SDK. This account will be used as the top-level resource in the authorization hierarchy.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/google-drive.mdx#2025-04-17_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nawait permit.api.resource_instances.create(\n    {\n        \"resource\": \"account\",\n        \"key\": \"acme\",\n        \"tenant\": \"default\",\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Folder to Folder Parent Relation\nDESCRIPTION: This snippet shows how to create a recursive parent relation from a Folder resource to another Folder resource. This allows folders to be nested within other folders, creating a hierarchical folder structure.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/google-drive.mdx#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://api.permit.io/v2/schema/$permit_project/$permit_env/resources/folder/relations \\\n  -X POST \\\n  -H \"Authorization: Bearer $permit_sdk_api_key\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"key\": \"parent\",\n    \"name\": \"Parent\",\n    \"subject_resource\": \"folder\"\n  }'\n```\n\nLANGUAGE: python\nCODE:\n```\nawait permit.api.resource_relations.create(\n    \"folder\",\n    {\n        \"key\": \"parent\",\n        \"name\": \"Parent\",\n        \"subject_resource\": \"folder\",\n    }\n)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nawait permit.api.resourceRelations.create(\"folder\", {\n  key: \"parent\",\n  name: \"Parent\",\n  subject_resource: \"folder\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Commenter Role Derivation with Node.js\nDESCRIPTION: Updates the 'commenter' role for files to be automatically granted to users who have the 'commenter' role on parent folders using the Node.js SDK. This enables permission propagation for commenting.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/google-drive.mdx#2025-04-17_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nawait permit.api.resourceRoles.update(\"file\", \"commenter\", {\n  granted_to: {\n    users_with_role: [\n      {\n        linked_by_relation: \"parent\",\n        on_resource: \"folder\",\n        role: \"commenter\",\n      },\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering Role Assignments by Multiple Users and Tenants\nDESCRIPTION: Filter role assignments by multiple users within a tenant. This allows for retrieving role assignments for multiple users at once within a specific tenant.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/examples/filter-role-associations.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.permit.io/v2/facts/{project_id}/{env_id}/role_assignments?user=alice&user=bob&tenant=default' \\\n  -H 'authorization: Bearer API_SECRET_KEY'\n```\n\n----------------------------------------\n\nTITLE: Embedding the PDP API Redoc in an iframe with custom styling\nDESCRIPTION: This snippet demonstrates how to embed the PDP API Redoc documentation inside an iframe with custom styling including box shadow, background color and size constraints.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/pdp-api-reference.mdx#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe\n\tstyle={{\n\t\tboxShadow: \"0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24)\",\n\t\tbackgroundColor: \"#FDFCFC\",\n\t\tmaxWidth: \"80vw\",\n\t}}\n\tsrc={\"https://pdp-api.permit.io/redoc\"}\n\twidth={\"1080px\"}\n\theight={\"600px\"}\n/>\n```\n\n----------------------------------------\n\nTITLE: Querying PDP Statistics for All PDPs in Bash\nDESCRIPTION: This snippet demonstrates how to make a GET request to retrieve statistics for all PDPs connected to your environment. It requires authentication with an API key and specifies the project and environment in the URL path.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/pdp-statistics.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location \\\n\t--request GET 'https://pdp-statistics.api.permit.io/v2/stats/{project}/{environment}/pdps' \\\n\t--header 'Content-Type: application/json' \\\n\t--header 'Authorization: Bearer <YOUR API KEY>'\n```\n\n----------------------------------------\n\nTITLE: Syncing User Information with Permit.io in C#\nDESCRIPTION: This snippet demonstrates how to use the SyncUser function to save a user's information to Permit.io. It creates a UserKey object with user details and calls the SyncUser method on the Permit.io API. The function returns the synced UserKey object containing user information.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/reference/SDKs/Dotnet/sync_user.mdx#2025-04-17_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nUserKey userObj = new UserKey(user.id, user.first_name, user.last_name, user.email);\npermit.Api.SyncUser(userObj);\n\n// SyncUser returns the synced with UserKey type\n// {\n// \"customId\": string,\n// \"email\": string,\n// \"firstName\": string,\n// \"lastName\": string,\n// \"attributes\": Dictionary<string, string>,\n// }\n```\n\n----------------------------------------\n\nTITLE: Querying FactDB Table Contents (SQL)\nDESCRIPTION: This SQL query retrieves the contents of the role_assignments table in FactDB.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/concepts/pdp/factdb.mdx#2025-04-17_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM role_assignments LIMIT 10;\n```\n\n----------------------------------------\n\nTITLE: Sending Audit Log Replay Request in JSON\nDESCRIPTION: Example JSON request for the Audit Log Replay API, demonstrating how to specify the target PDP URL, time range, concurrency, and graceful shutdown period.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/use-audit-logs/audit-log-replay.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"pdp_url\": \"https://example-pdp.permit.io\",\n  \"start_time\": \"1740832387\",\n  \"end_time\": \"1743507187\",\n  \"concurrency\": 5,\n  \"graceful_shutdown_s\": 60\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Permit.io API Key in .env File\nDESCRIPTION: Environment variable setup for the Permit.io API key needed for authorization functionality.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/authentication/auth0/auth0-demo-app.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nPERMIT_API_KEY=<permit_api_key>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Auth0 UserProvider in Next.js App Component\nDESCRIPTION: Wrapping the Next.js application with Auth0's UserProvider to manage authentication state.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/authentication/auth0/auth0-demo-app.mdx#2025-04-17_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// _app.tsx\n//...\n<UserProvider>\n  <Component {...pageProps} />\n</UserProvider>\n//...\n```\n\n----------------------------------------\n\nTITLE: Assigning Role in C#\nDESCRIPTION: C# code for updating a user's role after the user has been synced/created. Uses the AssignRole method with user ID, role ID, and tenant ID parameters.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/tutorials/Onboarding/connect-your-app.mdx#2025-04-17_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nassignedRole = await permit.Api.AssignRole(user.customId, Role.id, Tenant.externalId);\n```\n\n----------------------------------------\n\nTITLE: Defining Account Resource in Terraform for Permit.io\nDESCRIPTION: This snippet defines the Account resource with three actions: read, add-beneficiaries, and add-members. These actions will be used in policy rules to define account user permissions.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/mesa-verde.mdx#2025-04-17_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"permitio_resource\" \"Account\" {\n  key = \"Account\"\n  name = \"Account\"\n  actions = {\n      \"read\" = {\n          name = \"Read\"\n      }\n      \"add-beneficiaries\" = {\n          name = \"Add Beneficiaries\"\n      }\n      \"add-members\" = {\n          name = \"Add Members\"\n      }\n  }\n  attributes = {\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: User Synchronization in Permit.io v1 SDK\nDESCRIPTION: Example of user synchronization using the v1 Python SDK, showing the older method of syncing user data.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/v2-migration-guide.mdx#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nawait permit.write(permit.api.sync_user(\n  user.customId,\n  user.first_name,\n  user.last_name,\n  user.email,\n  ))\n```\n\n----------------------------------------\n\nTITLE: Accessing Auth0 User Data in Next.js Frontend\nDESCRIPTION: Example of using Auth0's useUser hook to access authenticated user information in a Next.js component.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/authentication/auth0/auth0-demo-app.mdx#2025-04-17_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// index.tsx\n//...\nconst { user, isLoading } = useUser();\n//...\n```\n\n----------------------------------------\n\nTITLE: Invalid Age-Based Condition Example\nDESCRIPTION: Shows an invalid condition with conflicting age requirements that would cause an Unbound Error.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/working-with-abac/building-conditions.mdx#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"or\": [\n        {\"user.age\": {\"between\": [15, 18]}},\n        {\"user.age\": {\"greater-than\": 40}},\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Stripe Customer Mapping Rule in JSON\nDESCRIPTION: Example of a mapping rule configuration for Stripe's Customers GET endpoint with dynamic customer_id parameter.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/foaz/detailed-guide.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"url\": \"https://api.stripe.com/v1/customers/{customer_id}\",\n\t\"method\": \"GET\",\n\t\"resource\": \"balance\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Operation Approval iFrame in HTML\nDESCRIPTION: HTML iframe code for embedding the Operation Approval Element into a web application. The iframe requires specific parameters including element name, environment ID, tenant key, and resource instance key.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/embeddable-uis/element/operation-approval.mdx#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe\n\ttitle=\"Permit Element Name\"\n\tsrc=\"https://embed.permit.io/<ELEMENT_NAME>?envId=<SOME_UNIQUE_ID>&darkMode=false&resourceInstanceKey=<RESOURCE_INSTANCE_KEY>&tenantKey=<TENANT_KEY>\"\n\twidth=\"100%\"\n\theight=\"100%\"\n\tstyle=\"border: none;\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Permit API Key in Environment File\nDESCRIPTION: Example of setting the Permit API key in the .env file for authentication with Permit.io services.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/authentication/cognito/cognito-demo-app.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nPERMIT_API_KEY=<permit_api_key>\n```\n\n----------------------------------------\n\nTITLE: Creating a Tenant with Key in Permit.io\nDESCRIPTION: This JSON snippet shows the format for creating a tenant with a specific key in Permit.io.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/build-policies/abac/time-based-role.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"coke\"\n}\n```\n\n----------------------------------------\n\nTITLE: Starting PDP with Attached Volume (Bash)\nDESCRIPTION: This snippet demonstrates how to start a new PDP container with the backup volume attached.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/concepts/pdp/factdb.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -e PDP_API_KEY={YOUR_API_KEY} \\\n           -e PDP_FACTDB_ENABLED=true \\\n           -v pdp-backup:/app/backup \\\n           permitio/pdp:latest\n```\n\n----------------------------------------\n\nTITLE: Configuring Permit.io Environment Variables\nDESCRIPTION: Environment variables configuration for Permit.io API key and PDP URL.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/authentication/hankopermit.mdx#2025-04-17_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nPERMIT_API_KEY=<YOUR_COPIED_API_KEY>\nPERMIT_PDP_URL=[https://cloudpdp.api.permit.io](https://cloudpdp.api.permit.io)\n```\n\n----------------------------------------\n\nTITLE: Example Response from All Tenants Permission Check\nDESCRIPTION: This snippet shows the JSON response format when a user is permitted to perform the specified action across all tenants. The response includes an 'allowed' boolean flag and a message confirming the permission.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/nodejs/all-tenants.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"allowed\": true,\n  \"message\": \"User 'employee1' is permitted to read the document across all tenants.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Getting a Specific Access Request\nDESCRIPTION: Make a GET request to retrieve a specific access request by its ID. The response includes details of the access request, such as the requesting user, access request details, status, and reviewer information.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/elements/access-requests.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.permit.io/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/access_requests/{access_request_id}' \\\n    -H 'cookie: <COOKIE FROM LOGIN>' \\\n  -H 'origin: https://api.permit.io'\n```\n\n----------------------------------------\n\nTITLE: Diagram: Adding Authorization to Existing APIs with FoAz\nDESCRIPTION: A flowchart demonstrating how Permit.io can be used to add authorization to existing APIs without modifying backend code, showing the request flow and permission checks.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/foaz/overview.mdx#2025-04-17_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    Frontend --protected API call--> proxy.Permit.io\n    proxy.Permit.io --\"permit.check()\"--> p[\"Your app [secret route]\"]\n    p --response-->proxy.Permit.io\n    proxy.Permit.io --response-->Frontend\n```\n\n----------------------------------------\n\nTITLE: Querying Lost Messages Statistics in Bash\nDESCRIPTION: This curl command demonstrates how to retrieve statistics for lost messages (sync issues) by using the state query parameter. It requires the project and environment in the URL path, along with an API key for authentication.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/pdp-statistics.mdx#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location \\\n\t--request GET 'https://pdp-statistics.api.permit.io/v2/stats/{project}/{environment}/messages?state=assumed_lost' \\\n\t--header 'Content-Type: application/json' \\\n\t--header 'Authorization: Bearer <YOUR API KEY>'\n```\n\n----------------------------------------\n\nTITLE: Fetching JWKS from AWS Cognito\nDESCRIPTION: To verify JWTs from AWS Cognito, download the public JSON Web Key (JWK) for your user pool from the JWKS URI. The URL pattern requires your AWS region and user pool ID to construct the complete endpoint.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/foaz/fetching-jwks.mdx#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nhttps://cognito-idp.<Region>.amazonaws.com/<userPoolId>/.well-known/jwks.json\n```\n\n----------------------------------------\n\nTITLE: Initializing Terraform\nDESCRIPTION: Initializes Terraform working directory by downloading required providers and modules.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/deploy/cloud-hosts/terraform.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nterraform init\n```\n\n----------------------------------------\n\nTITLE: Array Object Matching with All Match\nDESCRIPTION: Demonstrates using the all_match operator to ensure all items in an array of objects meet specified conditions.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/working-with-abac/operators.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"allOf\": [\n        {\n            \"user.organizations\": {\n                \"all_match\": {\n                    \"match\": {\n                        \"country\": {\"equals\": \"US\"},\n                        \"subscription\": {\"equals\": \"pro\"}\n                    }\n                }\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Roles in C#\nDESCRIPTION: C# code to retrieve available roles. Uses the GetRoles API method and stores the result in a Role array.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/tutorials/Onboarding/connect-your-app.mdx#2025-04-17_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nRole[] roles = await permit.Api.GetRoles();\n```\n\n----------------------------------------\n\nTITLE: Enabling FactDB in Permit Environment (Bash)\nDESCRIPTION: This snippet shows how to update environment settings to enable FactDB using a PATCH request to the Permit.io API.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/concepts/pdp/factdb.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PATCH 'https://api.permit.io/v2/facts/{env_id}' \\\n    -H 'Authorization: Bearer {YOUR_API_KEY}' \\\n    -H 'Content-Type: application/json' \\\n    -d '{\n        \"factdb_engine\": \"enabled\"\n    }'\n```\n\n----------------------------------------\n\nTITLE: Running Permit PDP Docker Container\nDESCRIPTION: Docker command to run the PDP container with required environment variables including API key and debug mode. Exposes port 7766 for communication.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/getting-started/_quickstart-parts/_quickstart_intro.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it -p 7766:7000 --env PDP_DEBUG=True --env PDP_API_KEY=<YOUR_API_KEY> permitio/pdp-v2:latest\n```\n\n----------------------------------------\n\nTITLE: Rendering Quickstart Components in MDX\nDESCRIPTION: This snippet renders the imported MDX components to display the quickstart guide content, including the introduction and Java example.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/reference/SDKs/Java/quickstart_java.mdx#2025-04-17_snippet_1\n\nLANGUAGE: MDX\nCODE:\n```\n<IntroContent />\n<JavaExample />\n```\n\n----------------------------------------\n\nTITLE: Querying PDP Statistics for a Specific PDP in Bash\nDESCRIPTION: This curl command demonstrates how to retrieve statistics for a specific PDP. It requires the project, environment, and PDP ID in the URL path, along with an API key for authentication.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/pdp-statistics.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location \\\n\t--request GET 'https://pdp-statistics.api.permit.io/v2/stats/{project}/{environment}/pdps/{pdp_id}' \\\n\t--header 'Content-Type: application/json' \\\n\t--header 'Authorization: Bearer <YOUR API KEY>'\n```\n\n----------------------------------------\n\nTITLE: Deleting a Policy Guard Scope using cURL\nDESCRIPTION: This snippet demonstrates how to delete a policy guard scope by its ID. It sends a DELETE request to the Policy Guard API with the scope ID in the URL path.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/policy-guard/policy_guard_api.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X DELETE 'https://api.permit.io/v2/policy_guards/scopes/{policy_guard_scope_id}' \\\n-H 'authorization: Bearer API_SECRET_KEY'\n```\n\n----------------------------------------\n\nTITLE: Installing Permit PHP SDK via Composer\nDESCRIPTION: Configuration for Composer's composer.json to install the Permit PHP SDK from GitHub. This sets up the repository source and dependency requirement.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/php/quickstart-php.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"repositories\": [\n    {\n      \"type\": \"vcs\",\n      \"url\": \"https://github.com/permitio/permit-php.git\"\n    }\n  ],\n  \"require\": {\n    \"permitio/permit-php\": \"*@dev\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Stytch User ID\nDESCRIPTION: Retrieves the user ID from Stytch user session.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/authentication/stytch/permit-integration.mdx#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst { user } = useStytchUser();\n\nconst userId = user.user_id;\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for API Calls\nDESCRIPTION: Bash commands to set environment variables required for making API calls to Permit.io using cURL or Postman.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/google-drive.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport permit_project=\"<your-project-key>\" # for example: the `default` project\nexport permit_env=\"<your-environment-key>\" # for example: the `dev` environment\nexport permit_sdk_api_key=\"<your-api-key>\" # for example: `permit_key_...`\n```\n\n----------------------------------------\n\nTITLE: Tenant Attributes JSON Example\nDESCRIPTION: Example of JSON structure used for defining tenant-specific attributes through the Permit.io UI in the Edit Tenant Attributes window.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/build-policies/abac/defining-attributes.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Checking Existing Environment Settings (Bash)\nDESCRIPTION: This snippet demonstrates how to retrieve existing environment settings using a GET request to the Permit.io API.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/concepts/pdp/factdb.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.permit.io/v2/facts/{env_id}' \\\n    -H 'Authorization: Bearer {YOUR_API_KEY}'\n```\n\n----------------------------------------\n\nTITLE: Embedding Approval Management Element with iframe in HTML\nDESCRIPTION: HTML iframe code snippet for embedding the Approval Management Element into an application. The iframe points to the Permit.io embed URL with configurable parameters for element name, environment ID, and dark mode setting.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/embeddable-uis/element/approval-management.mdx#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe\n\ttitle=\"Permit Element Name\"\n\tsrc=\"https://embed.permit.io/<ELEMENT_NAME>?envId=<SOME_UNIQUE_ID>&darkMode=false\"\n\twidth=\"100%\"\n\theight=\"100%\"\n\tstyle=\"border: none;\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Retrieving all tenants with curl in Permit.io API\nDESCRIPTION: This command uses curl to fetch all tenants from the Permit.io API. It requires an access token obtained from the web application, which should be included in the Authorization header.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/reference/api_with_cli.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"Authorization: Bearer <ACCESS_TOKEN>\" https://api.permit.io/v1/tenants\n```\n\n----------------------------------------\n\nTITLE: Error Response for Failed Background Task in JSON\nDESCRIPTION: This JSON snippet demonstrates the response structure when a background task fails. It includes the task_id, status (set to 'failed'), and an error object containing details about the failure, such as error code, title, and message.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/background-tasks.mdx#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"task_id\": \"adf8f4e3-5e01-4140-b512-142533007edd\",\n  \"status\": \"failed\",\n  \"result\": null,\n  \"error\": {\n    \"id\": \"adf8f4e3-5e01-4140-b512-142533007edd\",\n    \"error_code\": \"NOT_FOUND\",\n    \"title\": \"We could not find the requested object/s\",\n    \"message\": \"The requested data could not be found, we could not find 'Environment' with the given filters. Please try again with different filters.\\nIf you are sure there is an object with the given filters, contact our support on Slack for further guidance.\",\n    \"support_link\": \"https://permit-io.slack.com/ssb/redirec\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Client-side Permit.io Login Implementation\nDESCRIPTION: Client-side implementation of Permit.io login using permit-js SDK. Shows different login methods including cookie, bearer token, custom headers, and frontend-only authentication.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/embeddable-uis/element-login.mdx#2025-04-17_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\npermit.elements.login({\n    loginUrl: 'https://your_app_url.com/permit_login',\n    tenant: 'your_tenant_key'\n}).then((res: any) => {//optional handle success\n }).catch((err: any) => {//handle error\n});\n```\n\n----------------------------------------\n\nTITLE: Cloning Admin Scripts Repository (Bash)\nDESCRIPTION: This git command clones the repository containing the Python script for syncing users from Auth0 to Permit.io.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/authentication/auth0/auth0-sync-script.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:permitio/admin-scripts.git\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flask Project Environment\nDESCRIPTION: Commands to create a new project directory and set up a Python virtual environment\nSOURCE: https://github.com/permitio/docs/blob/master/docs/getting-started/_quickstart-parts/_quickstart_python_sync.mdx#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmkdir hello-permissions && cd hello-permissions\n```\n\nLANGUAGE: bash\nCODE:\n```\npyenv virtualenv permissions && pyenv activate permissions\n```\n\nLANGUAGE: bash\nCODE:\n```\npip install permit==1.0.0rc1 flask\n```\n\nLANGUAGE: bash\nCODE:\n```\ntouch test.py\n```\n\n----------------------------------------\n\nTITLE: Installing Permit.io SDK in .NET Application\nDESCRIPTION: Command to add the Permit.io SDK package to a .NET project using the dotnet CLI.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/tutorials/_quickstart-parts/_quickstart_dotnet.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Permit\n```\n\n----------------------------------------\n\nTITLE: Creating a New Policy Guard Scope using cURL\nDESCRIPTION: This snippet demonstrates how to create a new policy guard scope using a POST request to the Policy Guard API. It includes the scope key, organization ID, and project details in the request body.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/policy-guard/policy_guard_api.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST 'https://api.permit.io/v2/policy_guards/scopes' \\\n-H 'authorization: Bearer API_SECRET_KEY' \\\n--data-raw '{\n key\":   \"policy_guard_acme\",\n         \"org_id\": \"c3b6f5d7-8b1e-4c6d-9e9f-8c9d6f8e0c8f\",\n         \"policy_guard_scope_details\": [\n             {\n                 \"proj_id\": \"c3b6f5d7-8b1e-4c6d-9e9f-8c9d6f8e0c8f\",\n             }]\n}'\n```\n\n----------------------------------------\n\nTITLE: Installing Permit.io SDK with Maven in Java\nDESCRIPTION: XML configuration for adding the Permit.io SDK as a dependency in a Maven project.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/getting-started/_quickstart-parts/_quickstart_java.mdx#2025-04-17_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>io.permit</groupId>\n  <artifactId>permit-sdk-java</artifactId>\n  <version>2.0.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Lambda Authorization Function Implementation\nDESCRIPTION: Python implementation of a Lambda function that uses Permit to check user permissions. Includes async handling and permission verification using the Permit SDK.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/integrations/gateways/aws-api-gateway.mdx#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom permit import Permit\n\ndef check_permissions(event, context):\n    permit = Permit(\n        pdp=\"https://cloudpdp.api.permit.io\",\n        token=\"permit_key_xxxxx\", # replace with your API key\n    )\n\n    user = {\n        \"id\": event.get(\"id\"),\n        \"email\": event.get(\"email\"),\n    }\n    return asyncio.get_event_loop().run_until_complete(\n        permit.check(user[\"id\"], event[\"action\"], event[\"resource\"])\n        )\n```\n\n----------------------------------------\n\nTITLE: Including PHP SDK via Manual Installation\nDESCRIPTION: Example of manually including the Permit PHP SDK through the autoload.php file after downloading the SDK files.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/php/quickstart-php.mdx#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once('/path/to/OpenAPIClient-php/vendor/autoload.php');\n```\n\n----------------------------------------\n\nTITLE: Running Development Server\nDESCRIPTION: Command to start the Nuxt.js development server\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/food-delivery-system-example-using-nuxt.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Authenticating Stytch Session\nDESCRIPTION: Performs JWT authentication check for the Stytch session.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/authentication/stytch/permit-integration.mdx#2025-04-17_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst isAutenticated = await stytchClient.sessions.authenticateJwt(sessionJWT);\nif (isAutenticated) {\n  // perform all SDK function calls here, passing in the userId.\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Permit SDK for Python\nDESCRIPTION: Command to install the latest version of the Permit SDK for Python using pip.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/google-drive.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install permit\n```\n\n----------------------------------------\n\nTITLE: User creation webhook payload example in JSON\nDESCRIPTION: Example payload of a webhook that is triggered when a new user is created in the system. Contains user email, role, tenant key, permission level, and event type.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/embeddable-uis/webhooks.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"email\": \"example@gmail.com\",\n    \"role\": \"admin\",\n    \"tenant_key\": \"default\",\n    \"permission_level\": \"LEVEL_3\"\n    \"type: \"create_user\"\n }\n```\n\n----------------------------------------\n\nTITLE: Enabling FactDB and Legacy PDPs Coexistence (Bash)\nDESCRIPTION: This snippet demonstrates how to enable the setting that allows both FactDB-enabled and Legacy PDPs to run in the same environment.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/concepts/pdp/factdb.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PATCH 'https://api.permit.io/v2/facts/{env_id}' \\\n    -H 'Authorization: Bearer {YOUR_API_KEY}' \\\n    -H 'Content-Type: application/json' \\\n    -d '{\n        \"allow_factdb_and_legacy_pdps\": true\n    }'\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Namespace for PDP\nDESCRIPTION: Command to create a new namespace in Kubernetes for the Permit PDP deployment.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/deploy/cloud-hosts/kubernetes-raw.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create namespace permit-pdp\n```\n\n----------------------------------------\n\nTITLE: Deploying Permit PDP with Pulumi\nDESCRIPTION: Command to execute Pulumi deployment and create resources on Kubernetes.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/deploy/cloud-hosts/pulumi.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npulumi up\n```\n\n----------------------------------------\n\nTITLE: Configure Repository in Permit\nDESCRIPTION: API request to configure the Git repository integration with Permit using the prepared JSON configuration.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/integrations/gitops/github.mdx#2025-04-17_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST \"https://api.permit.io/v2/projects/<your-project-id-or-key>/repos\" -H \"Content-Type: application/json\" -H \"Authorization: Bearer {API_KEY from step 4}\" --data-binary @\"path/to/your/json\"\n```\n\n----------------------------------------\n\nTITLE: Starting PDP Docker Container for URL Mapping Permissions Check\nDESCRIPTION: This command starts a Docker container running the Permit.io PDP (Policy Decision Point) for URL mapping permissions checks. It exposes port 7766, sets the PDP API key, and enables debug mode.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/foaz/url-mapping-check.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it \\\n  -p 7766:7000 \\\n  --env PDP_API_KEY=permit_key_{your_permit_env_key} \\\n  --env PDP_DEBUG=True \\\n  permitio/pdp-v2:latest\n```\n\n----------------------------------------\n\nTITLE: Approving Operation Approval in Permit.io API\nDESCRIPTION: This curl command sends a PUT request to approve an operation approval. It requires project ID, environment ID, elements config ID, and operation approval ID. The request can include an optional reviewer comment.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/elements/operation_approval.mdx#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT \\\n 'https://api.permit.io/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/operation_approval/{operation_approval_id}/approve' \\\n  -H 'cookie: <COOKIE FROM LOGIN>'\n  -H 'element_id: ELEMENTS_CONFIG_ID'\n  --data-raw\n {\n     \"reviewer_comment\": \"transfer for a new client\",\n }\\\n```\n\n----------------------------------------\n\nTITLE: Domain-Agnostic URL Pattern Matching in JSON\nDESCRIPTION: Regex pattern that matches URLs across any domain while maintaining a specific API path structure. Useful for matching the same API endpoint across different environments or domains while capturing the user_id parameter.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/foaz/regex-url-mapping-check.mdx#2025-04-17_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n\"url\": \"^https:\\/\\/[^\\/]+\\/api\\/v1\\/users\\/(?P<user_id>[0-9]+)\\/profile$\"\n```\n\n----------------------------------------\n\nTITLE: Checking Task Status API Call in Bash\nDESCRIPTION: This bash snippet demonstrates how to check the status of a background task using the task_id. It sends a GET request to the API endpoint with the task_id to retrieve the current status and result of the task.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/background-tasks.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'https://api.permit.io/v2/projects/default/envs/staging/copy/async/{task_id}/result' \\\n  -H 'authorization: Bearer API_SECRET_KEY'\n```\n\n----------------------------------------\n\nTITLE: Login Page Implementation\nDESCRIPTION: Login page component with user authentication state handling and routing\nSOURCE: https://github.com/permitio/docs/blob/master/docs/authentication/stytch/permit-integration.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useStytchUser } from \"@stytch/nextjs\";\nimport { useRouter } from \"next/router\";\nimport { useEffect } from \"react\";\n\nexport default function LoginPage() {\n  const { user, isInitialized } = useStytchUser();\n  const router = useRouter();\n\n  useEffect(() => {\n    if (isInitialized && user) {\n      router.replace(\"/profile\");\n    }\n  }, [user, isInitialized, router]);\n\n  return <Login />;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Permit.io SDK in C# Code\nDESCRIPTION: Import statements required to use the Permit SDK in a C# application.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/tutorials/_quickstart-parts/_quickstart_dotnet.mdx#2025-04-17_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing PermitSDK;\nusing PermitSDK.Models;\n```\n\n----------------------------------------\n\nTITLE: Tenant-Specific Permission Check\nDESCRIPTION: Example of checking permissions with tenant-specific context.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/getting-started/_quickstart-parts/_quickstart_golang.mdx#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n\tresource := enforcement.ResourceBuilder(\"document\").WithTenant(\"tenant\").Build()\n    const permitted = await permit.check(user, \"create\", resource);\n```\n\n----------------------------------------\n\nTITLE: Importing permitState for Conditional Rendering\nDESCRIPTION: This snippet shows how to import the permitState from the Permit.io frontend SDK. This import is necessary for performing authorization checks in components.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/integrations/feature-flagging/casl.mdx#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { permitState } from \"permit-fe-sdk\";\n```\n\n----------------------------------------\n\nTITLE: Installing Permit.io SDK with Gradle in Java\nDESCRIPTION: Gradle configuration for adding the Permit.io SDK as a dependency in a Gradle project.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/getting-started/_quickstart-parts/_quickstart_java.mdx#2025-04-17_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n  // ...\n\n  implementation 'io.permit:permit-sdk-java:2.0.0'\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Permit.io SDK\nDESCRIPTION: C# code to create a new instance of the Permit.io SDK with basic configuration.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/getting-started/_quickstart-parts/_quickstart_dotnet.mdx#2025-04-17_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nPermit permit = new Permit(\n    \"[YOUR_API_KEY]\",\n    \"http://localhost:7766\"\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Auth0 Export Job Status (Bash)\nDESCRIPTION: This curl command checks the status of the user export job in Auth0 and retrieves the download link for the exported data.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/authentication/auth0/auth0-sync-script.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'https://[your auth0 domain].auth0.com/api/v2/jobs/users-exports/[job_id]' \\\n--header 'authorization: Bearer [Auth0 management API Key]'\n```\n\n----------------------------------------\n\nTITLE: Running the Permit.io Policy Decision Point (PDP) with Docker\nDESCRIPTION: Docker command to run the Permit.io PDP container with debug mode enabled. The command requires replacing the placeholder with your personal Permit API key.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/authentication/supertokens.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 7766:7000 --env PDP_DEBUG=True --env PDP_API_KEY=<YOUR_PERMIT_API_KEY> permitio/pdp\n```\n\n----------------------------------------\n\nTITLE: Initializing Permit.io SDK\nDESCRIPTION: Creates a new instance of the Permit SDK with an API token and optional PDP URL.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/getting-started/_quickstart-parts/_quickstart_ruby.mdx#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'permit-sdk'\npermit = Permit.new(\"TOKEN\", \"localhost:7766\") # the PDP url is optional\n```\n\n----------------------------------------\n\nTITLE: Initializing Permit SDK in .NET\nDESCRIPTION: Setup code for initializing the Permit SDK in a .NET environment using an API key.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/embeddable-uis/element-login.mdx#2025-04-17_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing PermitIO;\n\nvar permit = new Permit(\"<YOUR_API_KEY>\");\n```\n\n----------------------------------------\n\nTITLE: Disabling Default Roles in Environment Creation via Bash\nDESCRIPTION: This curl command shows how to create a new environment with default roles disabled by setting the 'enable_default_roles' flag to false in the request body.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/manage-your-account/creating-environments.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.permit.io/v2/projects/<project-id>/envs' \\\n  -H 'authorization: Bearer <api-key>' \\\n  --data-raw '{\"key\":\"new-env-name\",\"name\":\"New Env Name\", \"settings\": {\"enable_default_roles\": false}}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Permit SDK for Java with Gradle\nDESCRIPTION: Gradle configuration to add the Permit SDK as a dependency in a Gradle project.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/google-drive.mdx#2025-04-17_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    // ...\n\n    implementation 'io.permit:permit-sdk-java:2.0.0'\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning PDP Deployment Examples Repository\nDESCRIPTION: Clones the repository containing Permit PDP deployment examples from GitHub.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/deploy/cloud-hosts/terraform.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/permitio/permit-pdp-deployments-examples\n```\n\n----------------------------------------\n\nTITLE: Importing Permit.io SDK in JavaScript\nDESCRIPTION: Code to import the Permit class from the permitio package in a Node.js application.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/tutorials/_quickstart-parts/_quickstart_nodejs.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Permit } = require(\"permitio\");\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Health Check Configuration for PDP\nDESCRIPTION: This YAML snippet demonstrates how to configure a health check for the PDP in a Docker Compose file. It uses the wget command to check the PDP's health endpoint.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/deploy/overview.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nhealthcheck:\n  test: \"wget --no-verbose --tries=1 --spider http://127.0.0.1:7000/healthy || exit 1\"\n```\n\n----------------------------------------\n\nTITLE: Listing Relationship Tuples with Filtering Parameters in Permit.io JavaScript SDK\nDESCRIPTION: Demonstrates how to use the relationshipTuples.list method with various filtering parameters such as tenant, relation, subject, object, and pagination options. This method retrieves relationship tuples that match the specified criteria.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/nodejs/relationship-tuple/list-relationship-tuples.mdx#2025-04-17_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nawait permit.api.relationshipTuples.list({\n  tenant: \"default\",\n  relation: \"parent\",\n  subject: \"file:file-1\",\n  subjectType: \"file\",\n  object: \"folder:folder-1\",\n  objectType: \"folder\",\n  page: 1,\n  perPage: 20,\n  include_total_count: true\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a New Documentation Version in Docusaurus\nDESCRIPTION: This command creates a new version 1.0 of the documentation by copying the 'docs' folder into 'versioned_docs/version-1.0' and creating a 'versions.json' file.\nSOURCE: https://github.com/permitio/docs/blob/master/docs.backup/tutorial-extras/manage-docs-versions.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run docusaurus docs:version 1.0\n```\n\n----------------------------------------\n\nTITLE: Importing Permit.io SDK\nDESCRIPTION: C# code to import the necessary namespaces from the Permit.io SDK.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/getting-started/_quickstart-parts/_quickstart_dotnet.mdx#2025-04-17_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing PermitSDK;\nusing PermitSDK.Models;\n```\n\n----------------------------------------\n\nTITLE: Rendering MDX Components\nDESCRIPTION: Component rendering statements to display the imported quickstart content and .NET examples.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/_Dotnet/quickstart_dotnet.mdx#2025-04-17_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<IntroContent />\n<DotNetExample />\n```\n\n----------------------------------------\n\nTITLE: Base URL for Role Derivation API\nDESCRIPTION: The base URL for accessing the Role Derivation (Implicit Grants) API endpoint in Permit.io.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/rebac/rebac-api-calls.mdx#2025-04-17_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://api.permit.io/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}/implicit_grants\n```\n\n----------------------------------------\n\nTITLE: Configuring Logs Forwarder in PDP's values.yaml\nDESCRIPTION: This YAML configuration enables the Logs Forwarder and sets up ElasticSearch as the log destination. It includes options for specifying the ElasticSearch host, port, index, and authentication credentials.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/use-audit-logs/logs-forwarder.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npdp:\n  logs_forwarder:\n    enabled: true\n    type: elasticsearch\n    elasticsearch:\n      host: \"your-elasticsearch-host\"\n      port: \"your-elasticsearch-port\"\n      index: \"your-elasticsearch-index\"\n      cloud_auth: \"{user}:{password}\"\n    debug_mode: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Permit SDK for Java with Maven\nDESCRIPTION: XML configuration to add the Permit SDK as a dependency in a Maven project.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/google-drive.mdx#2025-04-17_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>io.permit</groupId>\n  <artifactId>permit-sdk-java</artifactId>\n  <version>2.0.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Assigned Roles Across All Tenants with Permit.io Java SDK\nDESCRIPTION: Makes an API call to fetch all roles assigned across all tenants in the organization. Returns a RoleAssignmentList object containing role details including ID, name, description, and tenant ID for each role assignment.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/reference/SDKs/Java/get_roles.mdx#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nRoleAssignmentList roles = permit.Api.getAssignedRolesInAllTenants();\n// returns your org roles with list of RoleAssignmentList type\n// [{\n//         id: string,\n//         name: string,\n//         description: string,\n//         tenantId: string,\n//     },\n//    ...\n// }\n```\n\n----------------------------------------\n\nTITLE: Fetching Users by Key or Email (Bash)\nDESCRIPTION: This curl command retrieves users by their key or email using the Permit.io API. It includes pagination parameters.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/examples/list-user-permissions.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.permit.io/v2/facts/{project_id}/{env_id}/users?search=key@permit.io&page=1&per_page=3' \\\n  -H 'authorization: Bearer API_SECRET_KEY'\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth0 Credentials in .env File\nDESCRIPTION: Example of environment variables needed for Auth0 configuration in the demo application.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/authentication/auth0/auth0-demo-app.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAUTH0_SECRET='<auth0_secret>'\nAUTH0_BASE_URL='http://localhost:3000'\nAUTH0_ISSUER_BASE_URL='<auth0_issuer_base_url>'\nAUTH0_CLIENT_ID=<auth0_client_id>\nAUTH0_CLIENT_SECRET='<auth0_client_secret>'\n```\n\n----------------------------------------\n\nTITLE: Payload Structure for getAssignedRoles in JavaScript\nDESCRIPTION: The payload structure required when calling the getAssignedRoles function. It includes the user ID and an optional tenant ID parameter.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/nodejs/role/get-assigned-roles.mdx#2025-04-17_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n{\n\tuser: \"userId\",\n\ttenant: \"tenantId\"\n}\n```\n\n----------------------------------------\n\nTITLE: Syncing User in Python\nDESCRIPTION: Python implementation for syncing user data with Permit.io. Creates a UserInput object and uses the write method with sync_user API call to register the user.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/tutorials/Onboarding/connect-your-app.mdx#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nuser = UserInput(user.id, user.first_name, user.last_name, user.email)\n\npermit.write(permit.api.sync_user(user.customId, user.first_name, user.last_name, user.email))\n```\n\n----------------------------------------\n\nTITLE: Advanced Permission Check with Hash Objects\nDESCRIPTION: Example showing permission check using Hash objects for detailed user and resource attributes.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/getting-started/_quickstart-parts/_quickstart_ruby.mdx#2025-04-17_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'permit-sdk'\npermit = Permit.new(\"TOKEN\", \"localhost:7766\") # the PDP url is optional\n\nuser_hash = {\"key\": \"john@permit.io\", \"first_name\": \"john\", \"last_name\": \"doe\", \"email\": \"john@permit.io\"}\nresource_hash = {\"type\": \"document\", \"tenant\": \"default\"}\npermitted = permit.check(user_hash, \"create\" , resource_hash)\nif permitted\n  puts \"john@permit.io is permitted to create a document\"\nelse\n  puts \"john@permit.io is not permitted to create a document\"\nend\n```\n\n----------------------------------------\n\nTITLE: Installing Stytch Dependencies\nDESCRIPTION: Commands to install the necessary Stytch SDK packages for Next.js integration\nSOURCE: https://github.com/permitio/docs/blob/master/docs/authentication/stytch/permit-integration.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @stytch/nextjs @stytch/vanilla-js stytch --save\n```\n\n----------------------------------------\n\nTITLE: Base URL for Relationship Tuples API\nDESCRIPTION: The base URL for accessing the Relationship Tuples API endpoint in Permit.io.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/rebac/rebac-api-calls.mdx#2025-04-17_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://api.permit.io/v2/facts/{proj_id}/{env_id}/relationship_tuples\n```\n\n----------------------------------------\n\nTITLE: Configuring Hanko API URL Environment Variable\nDESCRIPTION: Environment variable configuration for Hanko API URL in .env.local file.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/authentication/hankopermit.mdx#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nNEXT_PUBLIC_HANKO_API_URL=https://a0ae8d5d-9505-415f-ad70-51839c285726.hanko.io\n```\n\n----------------------------------------\n\nTITLE: Checking OPA Data Storage\nDESCRIPTION: Command to verify the data stored inside OPA after configuration\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/manage-data/use-external-data-source.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request GET 'http://localhost:8181/v1/data' \\\n--header 'Authorization: Bearer permit*key* {{secret}}'\n```\n\n----------------------------------------\n\nTITLE: Assigning Role in Python\nDESCRIPTION: Python code for assigning a role to a user. Uses the write method with assign_role API call, passing user ID, role key, and tenant key as parameters.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/tutorials/Onboarding/connect-your-app.mdx#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\npermit.write(permit.api.assign_role(user.customId, Role.key, Tenant.key))\n```\n\n----------------------------------------\n\nTITLE: Configuring i18n in Docusaurus\nDESCRIPTION: This snippet shows how to modify the docusaurus.config.js file to add support for the French locale. It sets the default locale to English and adds French as an additional locale.\nSOURCE: https://github.com/permitio/docs/blob/master/docs.backup/tutorial-extras/translate-your-site.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  i18n: {\n    defaultLocale: 'en',\n    locales: ['en', 'fr'],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a new .NET project\nDESCRIPTION: Command to create a new directory with an empty .NET console project.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/getting-started/_quickstart-parts/_quickstart_dotnet.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir hello-permissions-dotnet && cd hello-permissions-dotnet && dotnet new console\n```\n\n----------------------------------------\n\nTITLE: Implementing Not Logical Operator\nDESCRIPTION: Demonstrates using the not operator to invert condition results.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/working-with-abac/building-conditions.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n\"conditions\": {\n    \"not\": [\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Specific PDP Statistics Response in JSON\nDESCRIPTION: This JSON snippet shows the structure of the response when querying statistics for a specific PDP. It includes detailed information about the PDP instance, including version and system details.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/pdp-statistics.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"3b66379e-0ff0-42c3-b60c-60e5af45025b\",\n  \"org_id\": \"b1c89115-2675-439e-8a27-187461df3b6e\",\n  \"project_id\": \"10a08cfd-475b-444e-bc8e-03f56acb4a3b\",\n  \"env_id\": \"a3c2b50b-b9c5-41be-b3cb-2b3a84041504\",\n  \"first_seen_at\": \"2024-03-24T22:22:59.131906\",\n  \"last_seen_at\": \"2024-03-24T23:25:30.509943\",\n  \"active\": true,\n  \"data_updates_accepted\": 0,\n  \"pdp_version\": \"0.2.37\",\n  \"opa_version\": \"0.62.1\",\n  \"os_name\": \"Linux\",\n  \"os_machine\": \"aarch64\",\n  \"os_release\": \"5.10.124-linuxkit\",\n  \"os_version\": \"#1 SMP PREEMPT Thu Jun 30 08:18:26 UTC 2022\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Permit.io SDK in Java\nDESCRIPTION: Initializes the Permit.io SDK with a configuration that includes the API key and PDP address. This creates the main Permit object used to interact with the permission system.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/tutorials/_quickstart-parts/_quickstart_java.mdx#2025-04-17_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nimport io.permit.sdk.Permit;\nimport io.permit.sdk.PermitConfig;\n\n// This line initializes the SDK and connects your Java app\n// to the Permit.io PDP container you've set up in the previous step.\nPermit permit = new Permit(\n  new PermitConfig.Builder(\"[YOUR_API_KEY]\")\n    // in production, you might need to change this url to fit your deployment\n    .withPdpAddress(\"http://localhost:7766\")\n    .build()\n  );\n```\n\n----------------------------------------\n\nTITLE: Creating Stripe Balance Mapping Rule in JSON\nDESCRIPTION: Example of a mapping rule configuration for Stripe's Balance POST endpoint that maps to the 'balance' resource in Permit.io.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/foaz/detailed-guide.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"url\": \"https://api.stripe.com/v1/balance\",\n\t\"method\": \"POST\",\n\t\"resource\": \"balance\"\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Permit.io API Documentation in HTML\nDESCRIPTION: This snippet demonstrates how to embed the Permit.io API documentation using an iframe with custom styling. It sets the source to the ReDoc API documentation URL and applies specific dimensions and styling.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/api-reference.mdx#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe\n  style={{\n    boxShadow: \"0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24)\",\n    backgroundColor: \"#FDFCFC\",\n    maxWidth: \"80vw\",\n  }}\n  src={\"https://api.permit.io/v2/redoc\"}\n  width={\"1080px\"}\n  height={\"600px\"}\n/>\n```\n\n----------------------------------------\n\nTITLE: Role Permissions Response (JSON)\nDESCRIPTION: This JSON object represents the response from the role permissions API call. It includes role details and a list of permissions associated with the role.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/examples/list-user-permissions.mdx#2025-04-17_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n\"name\": \"board\",\n\"description\": \"\",\n\"permissions\": [\n    \"user:delete\",\n    \"document:create\",\n    \"file:create\",\n    \"user:read\",\n    \"user:login\",\n    \"file:read\",\n    \"user:update\",\n    \"user:get\",\n    \"user:create\"\n],\n\"attributes\": null,\n\"extends\": [],\n\"granted_to\": null,\n\"key\": \"board\",\n\"id\": \"d611591f8f51421aa6877e2aeb6909a8\",\n\"organization_id\": \"903ebc2765b848289d6dfbd3c21e392b\",\n\"project_id\": \"3c4244c7bcab4c97990e5bc724dafe85\",\n\"environment_id\": \"9ba956da646948538efaee4cf10d1815\",\n\"created_at\": \"2023-03-09T12:33:18+00:00\",\n\"updated_at\": \"2023-03-09T12:33:18+00:00\"\n}\n```\n\n----------------------------------------\n\nTITLE: Protected Profile Page\nDESCRIPTION: Implementation of a protected profile page with authentication checks\nSOURCE: https://github.com/permitio/docs/blob/master/docs/authentication/stytch/permit-integration.mdx#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useStytchUser, useStytchSession } from \"@stytch/nextjs\";\nimport { useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\n\nexport default function ProfilePage() {\n  const { user, isInitialized } = useStytchUser();\n  const router = useRouter();\n\n  useEffect(() => {\n    if (isInitialized && !user) {\n      router.replace(\"/\");\n    }\n  }, [user, isInitialized, router]);\n\n  return <div>Profile Page Content</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PDP with Project API Key\nDESCRIPTION: Docker command to run PDP using project-level API key with environment specification.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/deploy/deploy-to-production.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -it \\\n  -p 7766:7000 \\\n  --env PDP_PROJECT_API_KEY=<YOUR_PROJECT_API_KEY> \\\n  --env PDP_ACTIVE_ENV=<YOUR_ENVIRONMENT_ID_OR_KEY> \\\n  --env PDP_DEBUG=True \\\n  permitio/pdp-v2:latest\n```\n\n----------------------------------------\n\nTITLE: Importing Permit SDK in JavaScript\nDESCRIPTION: Code snippet showing how to import the Permit SDK into a JavaScript project.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/overview/use-the-permit-api-and-sdk.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Permit } from \"permitio\";\n```\n\n----------------------------------------\n\nTITLE: Creating a File Instance in Permit.io\nDESCRIPTION: This snippet shows how to create a file instance in Permit.io. It creates a file named '2023_report' in the 'default' tenant, which is necessary for maintaining tenant boundaries for resource instances.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/google-drive.mdx#2025-04-17_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://api.permit.io/v2/facts/$permit_project/$permit_env/resource_instances \\\n  -X POST \\\n  -H \"Authorization: Bearer $permit_sdk_api_key\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"resource\": \"file\",\n    \"key\": \"2023_report\",\n    \"tenant\": \"default\"\n  }'\n```\n\nLANGUAGE: python\nCODE:\n```\nawait permit.api.resource_instances.create(\n    {\n        \"resource\": \"file\",\n        \"key\": \"2023_report\",\n        \"tenant\": \"default\"\n    }\n)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nawait permit.api.resourceInstances.create({\n  resource: \"file\",\n  key: \"2023_report\",\n  tenant: \"default\",\n});\n```\n\n----------------------------------------\n\nTITLE: Timeline Component Implementation\nDESCRIPTION: JSX implementation of the timeline wrapper and step components for structuring the RBAC configuration guide.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/overview/configure-your-first-rbac-policy.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<TimelineWrapper>\n<TimelineStep>\n// Content for each step\n</TimelineStep>\n</TimelineWrapper>\n```\n\n----------------------------------------\n\nTITLE: Synchronizing User Data with Permit.io\nDESCRIPTION: Creates or updates a user in the Permit.io system by specifying user details such as key, name, and email.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/tutorials/_quickstart-parts/_quickstart_python_sync.mdx#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nuser = {\n    \"key\": \"john@smith.com\", # can be any unique string\n    \"firstName\": \"John\", # optional\n    \"lastName\": \"Smith\", # optional\n    \"email\": \"john@smith.com\", # optional\n}\npermit.write(permit.api.sync_user(user))\n```\n\n----------------------------------------\n\nTITLE: Installing Permit SDK via Package Manager\nDESCRIPTION: Command to install the Permit SDK in your project using a package manager.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/overview/use-the-permit-api-and-sdk.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install permitio\n```\n\n----------------------------------------\n\nTITLE: Base URL for Resource Instances API\nDESCRIPTION: The base URL for accessing the Resource Instances API endpoint in Permit.io.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/rebac/rebac-api-calls.mdx#2025-04-17_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://api.permit.io/v2/facts/{proj_id}/{env_id}/resource_instances\n```\n\n----------------------------------------\n\nTITLE: Installing Permit SDK for Node.js\nDESCRIPTION: Command to install the latest version of the Permit SDK for Node.js using npm.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/google-drive.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install permitio\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages\nDESCRIPTION: Command to install the Permit.io SDK and Flask framework for the example application.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/tutorials/_quickstart-parts/_quickstart_python_sync.mdx#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npip install permit flask\n```\n\n----------------------------------------\n\nTITLE: Creating a React Component Page in JSX\nDESCRIPTION: This snippet demonstrates how to create a simple React component that serves as a standalone page. It imports the Layout component from the theme and renders a basic structure with a heading and a paragraph.\nSOURCE: https://github.com/permitio/docs/blob/master/docs.backup/tutorial-basics/create-a-page.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport Layout from '@theme/Layout';\n\nexport default function MyReactPage() {\n  return (\n    <Layout>\n      <h1>My React page</h1>\n      <p>This is a React page</p>\n    </Layout>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Permit.io SDK\nDESCRIPTION: Basic SDK import statement for Ruby applications.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/getting-started/_quickstart-parts/_quickstart_ruby.mdx#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'permit-sdk'\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Handling for Forbidden Requests (Nginx)\nDESCRIPTION: Nginx configuration for handling 403 Forbidden errors. It can return a simple message or redirect to a custom error page.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/integrations/gateways/nginx.mdx#2025-04-17_snippet_3\n\nLANGUAGE: nginx\nCODE:\n```\nerror_page 403 = @error403;\n\nlocation @error403 {\n    return 403 \"Forbidden\";\n    # Or redirect to a custom error page:\n    # return 302 /error403;\n}\n```\n\n----------------------------------------\n\nTITLE: Protocol-Agnostic URL Pattern Matching in JSON\nDESCRIPTION: Regex pattern that matches both HTTP and HTTPS URLs for a specific API endpoint. The pattern captures a user_id parameter and ensures exact path matching with start and end anchors.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/foaz/regex-url-mapping-check.mdx#2025-04-17_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"url\": \"^https?:\\/\\/api\\.example\\.com\\/users\\/(?P<user_id>[0-9]+)\\/profile$\"\n```\n\n----------------------------------------\n\nTITLE: Importing Permit.io SDK in JavaScript\nDESCRIPTION: This code snippet shows how to import the Permit class from the Permit.io SDK in a Node.js environment.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/integrations/GraphQL/apollo_server.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Permit } = require(\"permitio\");\n```\n\n----------------------------------------\n\nTITLE: User Search Response (JSON)\nDESCRIPTION: This JSON object represents the response from the user search API call. It includes a data array with user objects and pagination information.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/examples/list-user-permissions.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n\"data\": [\n    {\n        \"key\": \"key@permit.io\",\n        \"id\": \"445ed9ff1bc94caf8bcf686ea3eexxxx\",\n        \"organization_id\": \"903ebc2765b848289d6dfbd3c21exxxx\",\n        \"project_id\": \"3c4244c7bcab4c97990e5bc724daxxxx\",\n        \"environment_id\": \"9ba956da646948538efaee4cf10dxxxx\",\n        \"associated_tenants\": [\n            {\n                \"tenant\": \"sample_tenant\",\n                \"roles\": [\n                    \"board\"\n                ],\n                \"status\": \"active\"\n            }\n        ],\n        \"roles\": [\n            {\n                \"role\": \"board\",\n                \"tenant\": \"sample_tenant\"\n            }\n        ],\n        \"email\": \"email@permit.io\",\n        \"first_name\": \"\",\n        \"last_name\": \"\",\n        \"attributes\": null\n    }\n],\n\"total_count\": 1,\n\"page_count\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Permit.io SDK with npm\nDESCRIPTION: Command to install the Permit.io SDK in a Node.js project using npm.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/nodejs/quickstart-nodejs.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install permitio\n```\n\n----------------------------------------\n\nTITLE: Waiting for Background Task Completion in Bash\nDESCRIPTION: This bash snippet shows how to use the 'wait' query parameter when triggering a background task. The 'wait' parameter specifies the maximum time (in seconds) to wait for the task to complete before returning a response.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/background-tasks.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'https://api.permit.io/v2/projects/default/envs/staging/copy/async?wait=60` \\\n  -H 'authorization: Bearer API_SECRET_KEY'\n```\n\n----------------------------------------\n\nTITLE: Installing Permit.io SDK for Node.js\nDESCRIPTION: This command installs the Permit.io SDK package for Node.js using npm.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/integrations/GraphQL/apollo_server.mdx#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install permitio\n```\n\n----------------------------------------\n\nTITLE: Message Delivery Statistics Response in JSON\nDESCRIPTION: This JSON snippet demonstrates the structure of the response when querying message delivery statistics. It includes details about sent messages, their status, and acknowledgment information from PDPs.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/pdp-statistics.mdx#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"id\": \"ac52ec15-de8b-4b49-bc20-eebbdc8a79ae\",\n      \"topic\": \"573958d6569b4975b6dccb7c814ed585:data:policy_data/573958d6569b4975b6dccb7c814ed585\",\n      \"urls\": [],\n      \"sent_count\": 2,\n\t  \"retry_count\": 1,\n      \"created_at\": \"2024-03-25T00:11:16.027910\",\n      \"last_sent_at\": \"2024-03-25T00:11:16.054386\",\n      \"next_retry_at\": \"2024-03-25T00:11:25.984686\",\n      \"state\": \"assumed_ack\",\n      \"pdps\": {\n        \"acknowledged_by\": [\n          {\n            \"pdp_instance_id\": \"3b66379e-0ff0-42c3-b60c-60e5af45025b\",\n            \"ack_time\": \"2024-03-25T00:11:17.098168\"\n          }\n        ],\n\t\t\"pending\": [\n\t\t\t{\n\t\t\t\t\"pdp_instance_id\": \"17b00f8b-9871-43e6-a99a-5285a91548cc\",\n\t\t\t\t\"last_seen_at\": \"2024-03-24T20:09:05.856538\",\n\t\t\t\t\"considered\": \"dead\"\n\t\t\t}\n\t\t]\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Waiting for PDP Deployment Readiness\nDESCRIPTION: Optional command to wait for the Permit PDP deployment to be ready, with a timeout of 600 seconds.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/deploy/cloud-hosts/kubernetes-raw.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl wait --for=condition=available --timeout=600s deployment/permit-pdp -n permit-pdp\n```\n\n----------------------------------------\n\nTITLE: Setting UVICORN_PORT Configuration\nDESCRIPTION: Configuration to set the port to run the PDP server on. Default value is 7000.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/concepts/pdp/configuration.mdx#2025-04-17_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nUVICORN_PORT\n```\n\n----------------------------------------\n\nTITLE: Extracting FactDB Data (Bash)\nDESCRIPTION: This snippet demonstrates how to extract FactDB data from the PDP container to a local directory.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/concepts/pdp/factdb.mdx#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -v pdp-backup:/app/backup -v $(pwd)/pdp-backup:/backup \\\n    ubuntu cp -r /app/backup /backup\n```\n\n----------------------------------------\n\nTITLE: Importing Video Components in React\nDESCRIPTION: Import statements for video assets and custom React components used in the documentation page.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/overview/configure-your-first-rbac-policy.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport createRole from \"/static/ui-videos/overview/create-a-role.mp4\";\nimport createResource from \"/static/ui-videos/overview/create-a-resource.mp4\";\nimport createUser from \"/static/ui-videos/overview/creating-a-user.mp4\";\nimport checkPolicies from \"/static/ui-videos/overview/check-policies.mp4\";\n\nimport WhatsNext from \"../../src/components/whats-next/WhatsNext\";\nimport TimelineStep from \"../../src/components/timeline/TimelineStep\";\nimport TimelineWrapper from \"../../src/components/timeline/TimelineWrapper\";\nimport Video from \"../../src/components/video/Video\";\n```\n\n----------------------------------------\n\nTITLE: Format SSH Private Key Command\nDESCRIPTION: Shell command to format SSH private key by replacing newlines with escaped newline characters.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/integrations/gitops/github.mdx#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nawk -v ORS='\\\\n' '1' <private-key-file>\n```\n\n----------------------------------------\n\nTITLE: Cloning the Demo Application Repository\nDESCRIPTION: Command to clone the GitHub repository containing the demo application for Cognito and Permit.io integration.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/authentication/cognito/cognito-demo-app.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/permitio/cognito-integration\n```\n\n----------------------------------------\n\nTITLE: Checking Permissions\nDESCRIPTION: Example of checking user permissions using permit.check() method\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/tutorials/_quickstart-parts/_quickstart_python.mdx#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npermitted = await permit.check(\"john@smith.com\", \"create\", \"document\")\n\nif permitted:\n    print(\"Jack is permitted to create a document\")\nelse:\n    print(\"Jack is NOT PERMITTED to create document!\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Document Metadata in Markdown\nDESCRIPTION: Demonstrates how to add front matter metadata to a Docusaurus document to customize sidebar label and position.\nSOURCE: https://github.com/permitio/docs/blob/master/docs.backup/tutorial-basics/doodle/create-a-document.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\nsidebar_label: 'Hi!'\nsidebar_position: 3\n---\n\n# Hello\n\nThis is my **first Docusaurus document**!\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components for Python Async Documentation\nDESCRIPTION: This code imports MDX components that contain introduction content and Python-specific examples for the quickstart guide. The imported components are then rendered in the document.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/python/quickstart-python.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport IntroContent from \"@site/docs/getting-started/_quickstart-parts/_quickstart_intro.mdx\";\nimport PythonExample from \"@site/docs/getting-started/_quickstart-parts/_quickstart_python.mdx\";\n```\n\n----------------------------------------\n\nTITLE: PDP Statistics Response in JSON\nDESCRIPTION: This JSON snippet shows the structure of the response when querying PDP statistics. It includes details such as PDP IDs, version information, and system details for each PDP instance.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/pdp-statistics.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"id\": \"3b66379e-0ff0-42c3-b60c-60e5af45025b\",\n      \"org_id\": \"b1c89115-2675-439e-8a27-187461df3b6e\",\n      \"project_id\": \"10a08cfd-475b-444e-bc8e-03f56acb4a3b\",\n      \"env_id\": \"a3c2b50b-b9c5-41be-b3cb-2b3a84041504\",\n      \"first_seen_at\": \"2024-03-24T22:22:59.131906\",\n      \"last_seen_at\": \"2024-03-24T23:17:27.941948\",\n      \"active\": true,\n      \"data_updates_accepted\": 0,\n      \"pdp_version\": \"0.2.37\",\n      \"opa_version\": \"0.62.1\",\n      \"os_name\": \"Linux\",\n      \"os_machine\": \"aarch64\",\n      \"os_release\": \"5.10.124-linuxkit\",\n      \"os_version\": \"#1 SMP PREEMPT Thu Jun 30 08:18:26 UTC 2022\"\n    },\n    {\n      \"id\": \"3e3611ea-8238-4950-9a81-412bb16ca460\",\n      \"org_id\": \"b1c89115-2675-439e-8a27-187461df3b6e\",\n      \"project_id\": \"10a08cfd-475b-444e-bc8e-03f56acb4a3b\",\n      \"env_id\": \"a3c2b50b-b9c5-41be-b3cb-2b3a84041504\",\n      \"first_seen_at\": \"2024-03-24T22:03:04.572160\",\n      \"last_seen_at\": \"2024-03-24T22:22:56.454870\",\n      \"active\": false,\n      \"data_updates_accepted\": 0,\n      \"pdp_version\": \"0.2.37\",\n      \"opa_version\": \"0.62.1\",\n      \"os_name\": \"Linux\",\n      \"os_machine\": \"aarch64\",\n      \"os_release\": \"5.10.124-linuxkit\",\n      \"os_version\": \"#1 SMP PREEMPT Thu Jun 30 08:18:26 UTC 2022\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Base Proxy URL Format with Mapping ID\nDESCRIPTION: The base URL structure for the Permit.io proxy service, showing where to include the unique mapping ID that identifies the specific mapping rule being used.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/foaz/visual-guide.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhttps://proxy.api.permit.io/proxy/<UNIQUE-MAPPING-ID>\n```\n\n----------------------------------------\n\nTITLE: Starting Local PDP Docker Container\nDESCRIPTION: Docker command to run the Policy Decision Point (PDP) locally for authorization checks\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/food-delivery-system-example-using-nuxt.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it \\\n    -p 7766:7000 \\\n    --env PDP_API_KEY=your-permit-api-key \\\n    --env PDP_DEBUG=True \\\n    permitio/pdp-v2:latest\n```\n\n----------------------------------------\n\nTITLE: Starting PDP in Offline Mode (Bash)\nDESCRIPTION: This snippet shows how to start a PDP container in offline mode with no network access, using the backup volume.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/concepts/pdp/factdb.mdx#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --network none \\\n           -e PDP_API_KEY={YOUR_API_KEY} \\\n           -e PDP_FACTDB_ENABLED=true \\\n           -v pdp-backup:/app/backup \\\n           permitio/pdp:latest\n```\n\n----------------------------------------\n\nTITLE: Running Auth0 to Permit.io Sync Script (Bash)\nDESCRIPTION: This command executes the Python script that synchronizes users from Auth0 to Permit.io.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/authentication/auth0/auth0-sync-script.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython auth0_sync_users_with_permit.py\n```\n\n----------------------------------------\n\nTITLE: Base URL for Resource Relations API\nDESCRIPTION: The base URL for accessing the Resource Relations API endpoint in Permit.io.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/rebac/rebac-api-calls.mdx#2025-04-17_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://api.permit.io/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/relations\n```\n\n----------------------------------------\n\nTITLE: Fetch Permit Project Details\nDESCRIPTION: API request to retrieve project information from Permit.io using authentication token.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/integrations/gitops/github.mdx#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET \"https://api.permit.io/v2/projects\" -H \"Content-Type: application/json\" -H \"Authorization: Bearer {API_KEY from step 3}\"\n```\n\n----------------------------------------\n\nTITLE: Illustrating PDP Migration to New Policy Environment in Mermaid\nDESCRIPTION: This diagram shows how an application can be migrated to a new policy by redirecting its PDP to a new environment using the API secret.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/SDLC/CI-CD.mdx#2025-04-17_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    ENV --> |Create & Copy Env.| NewEnv\n    PDP --x ENV[Old Env.]\n    PDP -- Sync via API Secret --> NewEnv[New Env.]\n    App -- query --> PDP\n```\n\n----------------------------------------\n\nTITLE: Copying Environments via API in Bash\nDESCRIPTION: This curl command demonstrates how to copy an environment into a new environment using the Permit.io API. It requires an API secret key for authentication.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/manage-your-account/creating-environments.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'https://api.permit.io/v2/projects/{project_id}/envs/{env_id}/copy' \\\n  -H 'authorization: Bearer API_SECRET_KEY' \\\n  --data '{\n  \"target_env\": {\n    \"new\": {\n        \"key\": \"prod\",\n        \"name\": \"production\"\n    }\n  }'\n```\n\n----------------------------------------\n\nTITLE: Adding JWKS Object Format for Frontend-Only Authorization in Permit\nDESCRIPTION: Example format of a JWKS object that should be pasted into the Permit JSON editor. The object contains keys with properties such as algorithm (alg), key type (kty), usage (use), and other cryptographic parameters. The kid property serves as the unique identifier for the JWK.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/foaz/configuring-jwks.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"jwks\": {\n        \"keys\": [\n            {\n                \"alg\": \"RS256\",\n                \"kty\": \"RSA\",\n                \"use\": \"sig\",\n                \"n\": \"****\",\n                \"e\": \"****\",\n                \"kid\": \"****\",\n                \"x5t\": \"****\",\n                \"x5c\": [\n                    \"****\"\n                ]\n            }\n        ]\n    },\n```\n\n----------------------------------------\n\nTITLE: Receiving Audit Log Replay Response in JSON\nDESCRIPTION: Example JSON response from the Audit Log Replay API, indicating the number of documents that will be replayed and a success message.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/use-audit-logs/audit-log-replay.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\"message\": \"Audit log replay started with 2599 documents\",\n\"document_count\": 2599\n}\n```\n\n----------------------------------------\n\nTITLE: Chaining Multiple Permit.io Mutations\nDESCRIPTION: Demonstrates how to combine multiple write operations in a single permit.write() call to execute them in sequence.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/tutorials/_quickstart-parts/_quickstart_python_sync.mdx#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# runs the mutations in order:\npermit.write(\n    # first creates the user \"john\"\n    permit.api.sync_user({\n        \"key\": \"john@smith.com\",\n        \"firstName\": \"John\",\n        \"lastName\": \"Smith\",\n        \"email\": \"john@smith.com\",\n    }),\n    # then, creates the \"cool_company_inc\" tenant\n    permit.api.create_tenant({\n        \"key\": \"cool_company_inc\",\n        \"name\": \"Cool Company Inc\"\n    }),\n    # finally, assigns the role \"admin\" to user \"john\" on the tenant \"cool_company_inc\"\n    permit.api.assign_role(\"john@smith.com\", \"admin\", \"cool_company_inc\")\n)\n```\n\n----------------------------------------\n\nTITLE: Importing Permit State for UI Rendering\nDESCRIPTION: Simple import statement for the permitState utility used in conditional UI rendering.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/feature-flagging.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { permitState } from \"permit-fe-sdk\";\n```\n\n----------------------------------------\n\nTITLE: Rego Policy Configuration\nDESCRIPTION: Rego policy configuration that combines custom and default policy rules for permission evaluation.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/rebac-GHC.mdx#2025-04-17_snippet_4\n\nLANGUAGE: rego\nCODE:\n```\nallow {\n    policies.allow\n    custom.allow\n}\n```\n\n----------------------------------------\n\nTITLE: Building Static Content\nDESCRIPTION: Command to generate static website content in the build directory for production deployment.\nSOURCE: https://github.com/permitio/docs/blob/master/README.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn build\n```\n\n----------------------------------------\n\nTITLE: Rendering MDX Components for NodeJS Permissions Guide\nDESCRIPTION: Renders the imported MDX components to display the quickstart guide content. The components contain the introduction and Node.js-specific implementation examples.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/reference/SDKs/NodeJS/quickstart_nodejs.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<IntroContent />\n<NodeJSExample />\n```\n\n----------------------------------------\n\nTITLE: Rendering Permit.io Documentation Homepage with React Components\nDESCRIPTION: This code snippet renders the homepage for Permit.io documentation walkthroughs. It imports and uses custom React components to create a hero section, display a grid of walkthrough cards, and add styling elements like padding and horizontal rules.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/overview/walkthroughs-intro.mdx#2025-04-17_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<SectionHero\n  title=\"Get started with simple Permit Walkthroughs\"\n  text={\"Get started with a simple guide through all the fundamentals at Permit.\"}\n/>\n\n<PagePadding>\n  <PageVerticalPadding>\n    <Container isGrid>\n      <DocCardList articleClassName={\"col \"} items={firstRow} />\n      <Hr />\n    </Container>\n  </PageVerticalPadding>\n</PagePadding>\n```\n\n----------------------------------------\n\nTITLE: Default Environment Settings in JSON\nDESCRIPTION: This JSON object shows the default settings applied when creating a new environment, including default resource actions and permissions for different roles.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/manage-your-account/creating-environments.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"default_resource_actions\": [\"create\", \"read\", \"update\", \"delete\"],\n  \"default_resource_permissions\": {\n    \"admin\": [\"create\", \"read\", \"update\", \"delete\"],\n    \"editor\": [\"create\", \"read\", \"update\"],\n    \"viewer\": [\"read\"]\n  },\n  \"enable_default_roles\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Pulling Docker PDP Container\nDESCRIPTION: Command to pull the latest version of the Permit.io PDP container from Docker Hub.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/overview/run-pdp.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull permitio/pdp-v2:latest\n```\n\n----------------------------------------\n\nTITLE: API Key Scope Response Structure\nDESCRIPTION: Example JSON response structure when fetching the API key scope, showing project and environment IDs.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/overview/use-the-permit-api-and-sdk.mdx#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"project_id\": \"proj-123abc\",\n  \"env_id\": \"env-456def\"\n}\n```\n\n----------------------------------------\n\nTITLE: Activate Repository in Permit\nDESCRIPTION: API request to activate the configured Git repository integration in Permit.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/integrations/gitops/github.mdx#2025-04-17_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X PUT \"https://api.permit.io/v2/projects/<your-project-id-or-key>/repos/<your-repo-id-or-key>/activate\" -H \"Authorization: Bearer <your-permit-api-key>\"\n```\n\n----------------------------------------\n\nTITLE: Setting OPAL_LOG_SERIALIZE Configuration\nDESCRIPTION: Configuration option to serialize log records as JSON format to STDERR. This is useful for log aggregation services. Default value is False.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/concepts/pdp/configuration.mdx#2025-04-17_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nOPAL_LOG_SERIALIZE\n```\n\n----------------------------------------\n\nTITLE: Health Check Command for PDP in Bash\nDESCRIPTION: This snippet shows how to perform a health check on the PDP using wget. It's useful for monitoring the PDP's status in various deployment scenarios.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/deploy/overview.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwget --no-verbose --tries=1 --spider http://127.0.0.1:7000/healthy || exit 1\n```\n\n----------------------------------------\n\nTITLE: Navigating to Terraform Directory\nDESCRIPTION: Changes directory to the terraform folder containing deployment configurations.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/deploy/cloud-hosts/terraform.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd ./terraform\n```\n\n----------------------------------------\n\nTITLE: Configuring Permit SDK with Timeout Options in Go\nDESCRIPTION: This snippet illustrates how to configure the Permit SDK in Go with additional timeout and policy options for consistent updates.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/manage-data/local-facts-uploader.mdx#2025-04-17_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// SDK-level configuration (applies to all operations)\npermitConfig := config.NewConfigBuilder(\"<YOUR_API_KEY>\").\n    WithPdpUrl(\"http://localhost:7766\").\n    WithProxyFactsViaPdp().\n    WithFactsSyncTimeout(10).             // Optional: Uses PDP default if not specified\n    WithFactsSyncTimeoutPolicy(\"ignore\"). // Optional: Uses PDP default if not specified\n    Build()\npermit := permit.New(permitConfig)\n\n// All operations will use the SDK-level settings\nuser, _ := permit.Api.Users.CreateUser(ctx, *newUser)\n```\n\n----------------------------------------\n\nTITLE: Embedding Permit.io API Documentation iFrame\nDESCRIPTION: HTML iframe element that embeds the Permit.io API documentation from api.permit.io/v1/redoc with custom styling for presentation.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/reference/api_reference.mdx#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe\n  style={{\n    boxShadow: \"0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24)\",\n    backgroundColor: \"#FDFCFC\",\n    maxWidth: \"80vw\",\n  }}\n  src={\"https://api.permit.io/v1/redoc/\"}\n  width={\"1080px\"}\n  height={\"600px\"}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing Permit.io Python SDK\nDESCRIPTION: Command to install the Permit.io SDK via pip package manager.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/tutorials/_quickstart-parts/_quickstart_python_sync.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install permit\n```\n\n----------------------------------------\n\nTITLE: Importing Permit.io Python SDK\nDESCRIPTION: Import statement for the Permit class from the synchronous Python SDK.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/tutorials/_quickstart-parts/_quickstart_python_sync.mdx#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom permit.sync import Permit\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies (Bash)\nDESCRIPTION: This pip command installs the required Python packages for running the sync script.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/authentication/auth0/auth0-sync-script.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Invalid Logical-First Condition Example\nDESCRIPTION: Demonstrates an invalid condition structure using incorrect logical operator names.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/working-with-abac/building-conditions.mdx#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"all_of\": [\n        {\"subject.paying\": {\"equals\": True}},\n        {\n            \"any_of\": [\n                {\"subject.role\": {\"equals\": \"editor\"}},\n                {\"subject.department\": {\"equals\": \"marketing\"}},\n            ]\n        },\n        {\"environment.location\": {\"in\": [\"US\", \"Canada\"]}},\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Bullet Links in JSX\nDESCRIPTION: This snippet demonstrates how to create bullet-style links using JSX. It uses material icons and custom CSS classes to style the links.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/home.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"bullet-links\">\n\t<a className=\"info-link\" href=\"/tutorials/introduction/what-is-permit\">\n\t\t<span className=\"material-icons md-18\">info</span>\n\t\t<span>Learn More</span>\n\t</a>\n\t<a className=\"question-link\" href=\"/faq\">\n\t\t<span className=\"material-icons md-18\">help</span>\n\t\t<span>FAQs</span>\n\t</a>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom Image Component in JSX\nDESCRIPTION: This code snippet shows the usage of a custom NoZoomImage component to display an image with specific properties such as link URL, image URL, and height.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/home.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<NoZoomImage\n\tlinkUrl={\"https://io.permit.io/docs-to-slack\"}\n\timageUrl={\"/img/join-us-on-slack.png\"}\n\theightPX={\"60px\"}\n/>\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration\nDESCRIPTION: Required environment variables for Stytch project configuration\nSOURCE: https://github.com/permitio/docs/blob/master/docs/authentication/stytch/permit-integration.mdx#2025-04-17_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nSTYTCH_PROJECT_ENV=test\nSTYTCH_PROJECT_ID=\"YOUR_STYTCH_PROJECT_ID\"\nSTYTCH_PUBLIC_TOKEN=\"YOUR_STYTCH_PUBLIC_TOKEN\"\nSTYTCH_SECRET=\"YOUR_STYTCH_SECRET\"\n```\n\n----------------------------------------\n\nTITLE: Pulling Permit.io PDP Docker Container\nDESCRIPTION: Command to pull the latest version of the Permit.io PDP container from Docker Hub. Requires Docker to be installed on the system.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/tutorials/_quickstart-parts/_quickstart_intro.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull permitio/pdp:latest\n```\n\n----------------------------------------\n\nTITLE: Implementing AnyOf Logical Operator\nDESCRIPTION: Shows how to use the anyOf operator to combine conditions with OR logic.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/working-with-abac/building-conditions.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n\"conditions\": {\n    \"anyOf\": [\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS ECS Task Definition\nDESCRIPTION: AWS ECS task definition configuration reference for deploying the Permit.io PDP. This definition includes container settings for ports 7000 (PDP API) and 8181 (OPA), along with required environment variables like PDP_API_KEY.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/deploy/cloud-hosts/aws-ecs-fargate.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nhttps://github.com/permitio/permit-pdp-deployments-examples/blob/main/aws/ecs-task-definition.json\n```\n\n----------------------------------------\n\nTITLE: API Response for Background Task Initiation in JSON\nDESCRIPTION: This JSON snippet shows the response structure when initiating a background task. It includes the task_id, status, and placeholders for result and error. The task_id can be used to check the status of the task later.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/background-tasks.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"task_id\": \"adf8f4e3-5e01-4140-b512-142533007edd\",\n  \"status\": \"processing\",\n  \"result\": null,\n  \"error\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Setting OPAL_LOG_DIAGNOSE Configuration\nDESCRIPTION: Configuration option to include diagnosis in log messages. When set to True, it may print sensitive information including secrets. Default value is False.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/concepts/pdp/configuration.mdx#2025-04-17_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nOPAL_LOG_DIAGNOSE\n```\n\n----------------------------------------\n\nTITLE: Running the Flask Application\nDESCRIPTION: Command to run the Flask application with the Permit.io permission checks on localhost.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/tutorials/_quickstart-parts/_quickstart_python_sync.mdx#2025-04-17_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nFLASK_APP=test flask run --host=0.0.0.0\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Permit.io Docs Homepage in React\nDESCRIPTION: This snippet imports various custom React components and data objects used to construct the documentation homepage. It includes components for layout, styling, and navigation, as well as data for different sections of the documentation.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/home.mdx#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport DocCardList from \"../src/theme/DocCardList\";\nimport SectionHero from \"../src/components/home-page/SectionHero\";\nimport PagePadding from \"../src/components/home-page/PagePadding\";\nimport PageVerticalPadding from \"../src/components/home-page/PageVerticalPadding\";\nimport Container from \"../src/components/home-page/Container\";\nimport Hr from \"../src/components/home-page/Hr\";\nimport {\n  firstRow,\n  policyModelingRow,\n  sdkRow,\n  integrationsRow,\n  enforcementRow,\n  devOpsRow,\n  socialsRow,\n} from \"../src/components/home-page/home-cards-links\";\n```\n\n----------------------------------------\n\nTITLE: Creating Resource in Permit.io\nDESCRIPTION: Defines a 'document' resource with 'read' and 'write' actions. This resource represents a confidential document in the authorization system.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/integrations/infra-as-code/terraform-provider.mdx#2025-04-17_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"permitio_resource\" \"document\" {\n  key         = \"document\"\n  name        = \"Document\"\n  description = \"A confidential document\"\n  actions     = {\n    \"read\" : {\n      \"name\" : \"Read\",\n      \"description\" : \"Read a document\",\n    },\n    \"write\" : {\n      \"name\" : \"Write\",\n      \"description\" : \"Write a document\",\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Nginx Module Support (Bash)\nDESCRIPTION: Command to verify if ngx_http_auth_request_module is enabled in the Nginx build.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/integrations/gateways/nginx.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnginx -V\n```\n\n----------------------------------------\n\nTITLE: Cloning and Checking Out the Demo Application Repository in Bash\nDESCRIPTION: Commands to clone the Permit.io Next.js todo starter application repository and check out the auth0-integration branch.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/authentication/auth0/auth0-demo-app.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/permitio/permit-next-todo-starter\ngit checkout auth0-integration\n```\n\n----------------------------------------\n\nTITLE: Building Localized Docusaurus Site\nDESCRIPTION: These bash commands demonstrate how to build the Docusaurus site for a specific locale (French) or for all configured locales at once.\nSOURCE: https://github.com/permitio/docs/blob/master/docs.backup/tutorial-extras/translate-your-site.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build -- --locale fr\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Importing ReactPlayer Component\nDESCRIPTION: Import statement for the ReactPlayer component used in the documentation page.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/features/Audit Logs/types.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ReactPlayer from 'react-player'\n```\n\n----------------------------------------\n\nTITLE: Optional Path Component Regex Pattern\nDESCRIPTION: This JSON escaped regex pattern matches URLs with an optional user ID parameter, such as both https://api.example.com/api/users and https://api.example.com/api/users/123. It makes the user_id segment optional.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/foaz/regex-url-mapping-check.mdx#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n//JSON Escaped Regex URL\n\"url\": \"^https://api\\\\.example\\\\.com/api/users(?:/(?P<user_id>[0-9]+))?$\"\n```\n\n----------------------------------------\n\nTITLE: Rendering ReactPlayer Component for Video Playback\nDESCRIPTION: This code snippet renders a ReactPlayer component to display a video explaining the impact of selected environment on audit logs. It includes controls and specifies the video URL.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/features/Audit Logs/troubleshooting.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ReactPlayer controls url=\"../../video/impact-of-selected-env-on-audit.mp4\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Quickstart Components in JSX\nDESCRIPTION: This snippet renders the imported components for the .NET quickstart guide, displaying the introduction content followed by the .NET-specific example.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/dotnet/quickstart-dotnet.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<IntroContent />\n<DotNetExample />\n```\n\n----------------------------------------\n\nTITLE: Embedding Interactive RBAC Demo iFrame\nDESCRIPTION: HTML code snippet for embedding an interactive RBAC demonstration using an iframe element with various display and security attributes.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/build-policies/rbac/overview.mdx#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe\n\tsrc=\"https://demo.arcade.software/LdEd97Gi0kNSUGw47P28?embed\"\n\tframeborder=\"0\"\n\tloading=\"lazy\"\n\twebkitallowfullscreen\n\tmozallowfullscreen\n\tallowfullscreen\n\tclassName={\"arcade-demo-iframe\"}\n></iframe>\n```\n\n----------------------------------------\n\nTITLE: Running PDP Container with Docker\nDESCRIPTION: Docker command to run the Policy Decision Point (PDP) container locally with the required environment variables and port mappings.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/rebac-GHC.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it \\\n -e PDP_API_KEY=<YOUR_PERMIT_API_KEY> \\\n -p 7766:7000 \\\n -p 8081:8081 \\\n permitio/pdp-v2:latest\n```\n\n----------------------------------------\n\nTITLE: Planning Terraform Deployment\nDESCRIPTION: Creates an execution plan to preview the changes Terraform will make to the infrastructure.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/deploy/cloud-hosts/terraform.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nterraform plan\n```\n\n----------------------------------------\n\nTITLE: Installing Permit-js SDK via npm\nDESCRIPTION: Command to install the Permit-js SDK in your project, which provides access to prebuilt embeddable element components.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/embeddable-uis/embedding-elements.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @permitio/permit-js\n```\n\n----------------------------------------\n\nTITLE: Applying Kubernetes YAML Files for PDP Deployment\nDESCRIPTION: Command to apply all YAML files in the current directory to deploy the Permit PDP on Kubernetes.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/deploy/cloud-hosts/kubernetes-raw.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f.\n```\n\n----------------------------------------\n\nTITLE: MDX Component Import and Usage\nDESCRIPTION: Imports and renders MDX components for quickstart documentation, including an introduction section and Java-specific examples.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/java/quickstart-java.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport IntroContent from \"@site/docs/getting-started/_quickstart-parts/_quickstart_intro.mdx\";\nimport JavaExample from \"@site/docs/getting-started/_quickstart-parts/_quickstart_java.mdx\";\n\n<IntroContent />\n<JavaExample />\n```\n\n----------------------------------------\n\nTITLE: Language Selection Tab Interface Implementation\nDESCRIPTION: Implements a tabbed interface using Docusaurus components to allow users to select their preferred programming language for the demo implementation. Each tab contains language-specific examples and implementation details.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/overview/connecting-your-app.mdx#2025-04-17_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Tabs groupId=\"language\">\n  <TabItem value=\"Node\" label={<NodeJSLabel />} default>\n    <NodeJSExample />\n  </TabItem>\n  <TabItem value=\"Python (sync)\" label={<SyncPythonLabel />}>\n    <SyncPythonExample />\n  </TabItem>\n  <TabItem value=\"Python (asyncio)\" label={<PythonLabel />}>\n    <PythonExample />\n  </TabItem>\n  <TabItem value=\"Java\" label={<JavaLabel />}>\n    <JavaExample />\n  </TabItem>\n  <TabItem value=\"Golang\" label={<GolangLabel />}>\n    <GolangExample />\n  </TabItem>\n  <TabItem value=\"Ruby\" label={<RubyLabel />}>\n    <RubyExample />\n  </TabItem>\n  <TabItem value=\"Dotnet\" label={<CSharpLabel />}>\n    <DotNetExample />\n  </TabItem>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Retrieving all users with curl in Permit.io API\nDESCRIPTION: This command uses curl to fetch all users in your organization from the Permit.io API. It requires an access token obtained from the web application, which should be included in the Authorization header.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/reference/api_with_cli.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"Authorization: Bearer <ACCESS_TOKEN>\" https://api.permit.io/v1/users\n```\n\n----------------------------------------\n\nTITLE: Embedding Video in JSX\nDESCRIPTION: This snippet shows how to embed a video using JSX syntax. It creates a video element with controls and sets the source to the imported video file.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/manage-your-account/workspace-settings.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<video controls>\n\t<source src={memberManagement} />\n</video>\n```\n\n----------------------------------------\n\nTITLE: Creating a Project Directory for Permit.io Example\nDESCRIPTION: Command to create and navigate to a new directory for the permissions-based application example.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/tutorials/_quickstart-parts/_quickstart_python_sync.mdx#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nmkdir hello-permissions && cd hello-permissions\n```\n\n----------------------------------------\n\nTITLE: Cloning the Demo Repository\nDESCRIPTION: Command to clone the Permit-Hanko demo application repository from GitHub.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/authentication/hankopermit.mdx#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone <git@github.com>:permitio/permit-hanko.git\n```\n\n----------------------------------------\n\nTITLE: Starting Localized Docusaurus Site\nDESCRIPTION: This command starts the Docusaurus site in development mode, specifically for the French locale.\nSOURCE: https://github.com/permitio/docs/blob/master/docs.backup/tutorial-extras/translate-your-site.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start -- --locale fr\n```\n\n----------------------------------------\n\nTITLE: Configuring Version Dropdown in Docusaurus Navigation\nDESCRIPTION: This code snippet modifies the 'docusaurus.config.js' file to add a version dropdown to the navigation bar, allowing users to switch between different documentation versions easily.\nSOURCE: https://github.com/permitio/docs/blob/master/docs.backup/tutorial-extras/manage-docs-versions.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  themeConfig: {\n    navbar: {\n      items: [\n        // highlight-start\n        {\n          type: 'docsVersionDropdown',\n        },\n        // highlight-end\n      ],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Structuring Permit.io Docs Homepage with React Components\nDESCRIPTION: This JSX snippet structures the homepage for Permit.io's documentation. It uses custom components to create a hero section, followed by multiple sections with links to different parts of the documentation. Each section is styled and organized using grid layouts and horizontal rules.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/home.mdx#2025-04-17_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<SectionHero\n  title=\"Welcome to Permit.io\"\n  text={\n    \"Here you'll find comprehensive guides and resources to help </br> you get started with Permit and explore our platform.\"\n  }\n/>\n\n<PagePadding>\n  <PageVerticalPadding>\n    <Container isGrid>\n      <DocCardList cols={3} articleClassName={\"col\"} items={firstRow} />\n      <Hr title=\"Policy Modeling & Best Practices\" color=\"#2D7DD2\" />\n      <DocCardList cols={3} articleClassName={\"col\"} items={policyModelingRow} />\n      <Hr title=\"SDKs & Infrastructure as Code\" color=\"#16A085\" />\n      <DocCardList cols={2} articleClassName={\"col\"} items={sdkRow} />\n      <Hr title=\"Integrations & Frontend Entitlements\" color=\"#E67E22\" />\n      <DocCardList articleClassName={\"col\"} items={integrationsRow} />\n      <Hr title=\"Enforcement & Access Control\" color=\"#974ef2\" />\n      <DocCardList articleClassName={\"col\"} items={enforcementRow} />\n      <Hr title=\"DevOps & Automation\" color=\"#2D7DD2\" />\n      <DocCardList cols={2} articleClassName={\"col\"} items={devOpsRow} />\n      <Hr title=\"Community & Resources\" color=\"#846358\" />\n      <DocCardList articleClassName={\"col\"} items={socialsRow} />\n    </Container>\n  </PageVerticalPadding>\n</PagePadding>\n```\n\n----------------------------------------\n\nTITLE: Video Component Implementation\nDESCRIPTION: Implementation of the Video component used to display tutorial content.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/overview/configure-your-first-rbac-policy.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Video src={createRole} controls />\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Quickstart Documentation\nDESCRIPTION: JSX import statements for React components used in the documentation page, including tabs, tab items, and language labels, along with importing content fragments from versioned docs.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/tutorials/quickstart.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\n\nimport {\n\tCSharpLabel,\n\tPythonLabel,\n\tSyncPythonLabel,\n\tJavaLabel,\n\tNodeJSLabel,\n} from \"@site/src/components/langLabels\";\nimport IntroContent from \"@site/versioned_docs/version-1.0.0/tutorials/_quickstart-parts/_quickstart_intro.mdx\";\nimport NodeJSExample from \"@site/versioned_docs/version-1.0.0/tutorials/_quickstart-parts/_quickstart_nodejs.mdx\";\nimport DotNetExample from \"@site/versioned_docs/version-1.0.0/tutorials/_quickstart-parts/_quickstart_dotnet.mdx\";\nimport JavaExample from \"@site/versioned_docs/version-1.0.0/tutorials/_quickstart-parts/_quickstart_java.mdx\";\nimport PythonExample from \"@site/versioned_docs/version-1.0.0/tutorials/_quickstart-parts/_quickstart_python.mdx\";\nimport SyncPythonExample from \"@site/versioned_docs/version-1.0.0/tutorials/_quickstart-parts/_quickstart_python_sync.mdx\";\n```\n\n----------------------------------------\n\nTITLE: User Attributes JSON Example\nDESCRIPTION: Example of JSON structure used for defining user-specific attributes through the Permit.io UI in the Manage Metadata window.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/build-policies/abac/defining-attributes.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Running PDP Container with Custom Scope\nDESCRIPTION: Docker command to run PDP container with OPAL split root data configuration enabled\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/manage-data/use-external-data-source.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull permitio/pdp-v2:latest\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -e PDP_API_KEY=<YOUR-PERMIT-API-KEY> -e OPAL_SPLIT_ROOT_DATA=1 permitio/pdp-v2:latest\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies for SuperTokens and Permit demo\nDESCRIPTION: Command to install the necessary Node.js dependencies for the demo application that integrates SuperTokens with Permit.io.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/authentication/supertokens.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Running Permit.io PDP Container\nDESCRIPTION: Command to run the PDP container with the required API key. Maps port 7766 on the host to port 7000 in the container. The PDP_API_KEY environment variable must be set with a valid API key from the Permit.io dashboard.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/tutorials/_quickstart-parts/_quickstart_intro.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 7766:7000 --env PDP_API_KEY=<YOUR_API_KEY> permitio/pdp\n```\n\n----------------------------------------\n\nTITLE: Fetching JWKS from Clerk.com Backend API\nDESCRIPTION: Clerk.com offers JWKS from their Backend API at a specific endpoint. This provides the JSON Web Keys needed to verify tokens issued by Clerk's authentication service.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/foaz/fetching-jwks.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nhttps://api.clerk.dev/v1/jwks\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Python Virtual Environment\nDESCRIPTION: Optional commands to create and activate a virtual environment for the Permit.io project.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/tutorials/_quickstart-parts/_quickstart_python_sync.mdx#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npyenv virtualenv permissions && pyenv activate permissions\n```\n\n----------------------------------------\n\nTITLE: Embedding Permit Status Monitoring iframe in JSX\nDESCRIPTION: This code embeds an iframe that displays Permit's service status monitoring page. The iframe includes styling to adjust its appearance, including background color, maximum width, scale transformation, and margin adjustments to fit properly in the documentation page.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/status.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<iframe\n  style={{\n    backgroundColor: \"#FDFCFC\",\n    maxWidth: \"80vw\",\n  }}\n  src={\"https://permit-io.instatus.com/\"}\n  width={\"1080px\"}\n  height={\"800px\"}\n  style={{\n    transform: \"scale(0.7)\",\n    transformOrigin: \"0 0\",\n    marginBottom: \"-200px\",\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Roles with Permit SDK in C#\nDESCRIPTION: This snippet demonstrates two methods for retrieving roles: using the Cache function for local access with minimal latency, and using the API function to retrieve roles from Permit cloud. The Cache function returns SyncedRole objects while the API function returns Role objects with slightly different properties.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/reference/SDKs/Dotnet/get_roles.mdx#2025-04-17_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nRole[] roles = await permit.Cache.GetRoles();\n// returns your org roles with list of SyncedRole type\n// [{\n//         id: string,\n//         name: string,\n//         description: string,\n//         permissions: string[],\n//         metadata: Dictionary<string, object>,\n//     },\n//    ...\n// }\n\n\nRole[] roles = await permit.Api.GetRoles();\n// returns your org roles with list of Role type\n// [{\n//         id: string,\n//         name: string,\n//         description: string,\n//         tenantId: string,\n//     },\n//    ...\n// }\n```\n\n----------------------------------------\n\nTITLE: Implementing Apollo Server Plugin for Operation-Based Authorization\nDESCRIPTION: This code defines an Apollo Server plugin that maps GraphQL operation names to Permit.io resources and actions, performing authorization checks for each request.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/integrations/GraphQL/apollo_server.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst PermissionMap = {\n  \"login\": {resource: \"user\", action: \"login\"},\n  \"logout\": {resource: \"user\", action: \"logout\"},\n  \"me\": {resource: \"user\", action: \"get\"},\n  \"launches\": {resource: \"launch\", action: \"getall\"},\n  \"getlaunch\": {resource: \"launch\", action: \"get\"},\n}\n\nconst permitPlugin = {\n  async requestDidStart(context) {\n    const operationName = context.request.operationName;\n    var userId = await getUserIdFromJWT(\"\");\n    let allowed = false;\n    if (operationName.toLowerCase() in PermissionMap) {\n      const { resource, action } = PermissionMap[operationName.toLowerCase()];\n      allowed = await permit.check(userId, action, resource);\n    }\n    else {\n      console.warn('No such operation in PermissionMap', operationName);\n    }\n    if (!allowed) {\n      throw new Error(\"Not allowed\");\n    }\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Role Definition Object in JavaScript\nDESCRIPTION: Example payload structure for defining a new role with key, name, description, permissions, and role inheritance.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/nodejs/role/create-role.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\tkey: \"editor\",\n\tname: \"Editor\",\n\tdescription: \"the editor role can read and write to documents\",\n\tpermissions: [\"document:write\"],\n\textends: [\"viewer\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Running the FastAPI Application\nDESCRIPTION: Command to run the FastAPI application using uvicorn server\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/tutorials/_quickstart-parts/_quickstart_python.mdx#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nuvicorn test:app --reload --port=4000\n```\n\n----------------------------------------\n\nTITLE: Implementing Role Update with Permit.io API in JavaScript\nDESCRIPTION: A code snippet demonstrating how to update an existing role using the Permit.io API. The implementation passes the roleId and a stringified role object to the updateRole method.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/nodejs/role/update-role.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await permit.api.updateRole(roleId, JSON.stringify(role));\n```\n\n----------------------------------------\n\nTITLE: Building Docusaurus Site for Production\nDESCRIPTION: Command to build a Docusaurus site for production. This generates static HTML, JavaScript, and CSS files in the build folder.\nSOURCE: https://github.com/permitio/docs/blob/master/docs.backup/tutorial-basics/deploy-your-site.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Adding Locale Dropdown to Docusaurus Navbar\nDESCRIPTION: This JavaScript snippet modifies the docusaurus.config.js file to add a locale dropdown to the navbar, allowing users to switch between different language versions of the site.\nSOURCE: https://github.com/permitio/docs/blob/master/docs.backup/tutorial-extras/translate-your-site.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  themeConfig: {\n    navbar: {\n      items: [\n        // highlight-start\n        {\n          type: 'localeDropdown',\n        },\n        // highlight-end\n      ],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Language Tabs for SDK Integration Examples\nDESCRIPTION: JSX code for creating a tabbed interface that presents SDK integration examples in different programming languages including Node.js, Python, Java, and .NET.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/tutorials/quickstart.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Tabs groupId=\"language\">\n\t<TabItem value=\"Node\" label={<NodeJSLabel />} default>\n\t\t<NodeJSExample />\n\t</TabItem>\n\t<TabItem value=\"Python (sync)\" label={<SyncPythonLabel />}>\n\t\t<SyncPythonExample />\n\t</TabItem>\n\t<TabItem value=\"Python (asyncio)\" label={<PythonLabel />}>\n\t\t<PythonExample />\n\t</TabItem>\n\t<TabItem value=\"Java\" label={<JavaLabel />}>\n\t\t<JavaExample />\n\t</TabItem>\n\t<TabItem value=\"Dotnet\" label={<CSharpLabel />}>\n\t\t<DotNetExample />\n\t</TabItem>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Python Project Environment\nDESCRIPTION: Commands to create a new directory, set up a virtual environment, and install required packages for the example application.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/getting-started/_quickstart-parts/_quickstart_python.mdx#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmkdir hello-permissions && cd hello-permissions\npyenv virtualenv permissions && pyenv activate permissions\npip install permit fastapi \"uvicorn[standard]\"\ntouch test.py\n```\n\n----------------------------------------\n\nTITLE: Importing Quickstart Components in MDX\nDESCRIPTION: This snippet imports the necessary components for the Golang quickstart guide. It includes an introduction component and a Golang-specific example component.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/golang/quickstart-golang.mdx#2025-04-17_snippet_0\n\nLANGUAGE: MDX\nCODE:\n```\nimport IntroContent from \"@site/docs/getting-started/_quickstart-parts/_quickstart_intro.mdx\";\nimport GolangExample from \"@site/docs/getting-started/_quickstart-parts/_quickstart_golang.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Installing Permit.io SDK with Maven\nDESCRIPTION: XML configuration for adding the Permit.io SDK dependency to a Maven project. This snippet shows how to include the permit-sdk-java library in the project's pom.xml file.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/tutorials/_quickstart-parts/_quickstart_java.mdx#2025-04-17_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>io.permit</groupId>\n  <artifactId>permit-sdk-java</artifactId>\n  <version>0.0.11</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Navigating to Pulumi Directory\nDESCRIPTION: Command to change directory to the Pulumi example folder.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/deploy/cloud-hosts/pulumi.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd ./pulumi\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for the Demo Application\nDESCRIPTION: Command to install NPM dependencies for the Permit-Hanko demo application.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/authentication/hankopermit.mdx#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Initializing New Pulumi Python Project\nDESCRIPTION: Command to create a new Pulumi project using Python template.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/deploy/cloud-hosts/pulumi.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npulumi new python\n```\n\n----------------------------------------\n\nTITLE: Creating a Python File for the Example\nDESCRIPTION: Command to create a new Python file for the Permit.io integration example.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/tutorials/_quickstart-parts/_quickstart_python_sync.mdx#2025-04-17_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ntouch test.py\n```\n\n----------------------------------------\n\nTITLE: Arcade Demo Iframe Implementation\nDESCRIPTION: HTML/JSX code for embedding an interactive demo iframe showing RBAC concepts in action. The demo is loaded from Arcade Software with specific styling and display parameters.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/build-policies/rbac/components.mdx#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div className={\"arcade-demo-container\"}>\n    <iframe\n        src=\"https://demo.arcade.software/LdEd97Gi0kNSUGw47P28?embed\"\n        frameborder=\"0\"\n        loading=\"lazy\"\n        webkitallowfullscreen\n        mozallowfullscreen\n        allowfullscreen\n        className={\"arcade-demo-iframe\"}\n    ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Syncing User with Roles\nDESCRIPTION: Creating a new user with initial role assignments\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/tutorials/_quickstart-parts/_quickstart_python.mdx#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nuser = {\n    \"key\": \"john@smith.com\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Smith\",\n    \"email\": \"john@smith.com\",\n    \"roles\": [{\"role\":\"admin\", \"tenant\": \"default\"}]\n}\nawait permit.write(permit.api.sync_user(user))\n```\n\n----------------------------------------\n\nTITLE: Creating Directory and Copying Files for Translation\nDESCRIPTION: This bash snippet demonstrates how to create the necessary directory structure for translations and copy the intro.md file to be translated into French.\nSOURCE: https://github.com/permitio/docs/blob/master/docs.backup/tutorial-extras/translate-your-site.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p i18n/fr/docusaurus-plugin-content-docs/current/\n\ncp docs/intro.md i18n/fr/docusaurus-plugin-content-docs/current/intro.md\n```\n\n----------------------------------------\n\nTITLE: Running Flask Application with Permit.io Integration\nDESCRIPTION: This command demonstrates how to run the Flask application with Permit.io integration. It sets the FLASK_APP environment variable and starts the Flask development server.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/getting-started/_quickstart-parts/_quickstart_python_sync.mdx#2025-04-17_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nFLASK_APP=test flask run --host=0.0.0.0\n```\n\n----------------------------------------\n\nTITLE: Diagram: Access to 3rd Party Services with FoAz\nDESCRIPTION: A flowchart showing how frontend applications can securely access protected third-party services through the Permit.io proxy, which handles permission checks and secret injection.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/foaz/overview.mdx#2025-04-17_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    Frontend --protected API call--> proxy.Permit.io\n    proxy.Permit.io --\"permit.check() + inject secrets\"--> p[\"Protected Service (e.g. Twilio)\"]\n    p --response-->proxy.Permit.io\n    proxy.Permit.io --response-->Frontend\n```\n\n----------------------------------------\n\nTITLE: Markdown Link Examples\nDESCRIPTION: Shows different ways to create links in Markdown using both URL paths and relative file paths.\nSOURCE: https://github.com/permitio/docs/blob/master/docs.backup/tutorial-basics/markdown-features.mdx#2025-04-17_snippet_1\n\nLANGUAGE: md\nCODE:\n```\nLet's see how to [Create a page](/create-a-page).\n```\n\nLANGUAGE: md\nCODE:\n```\nLet's see how to [Create a page](./create-a-page.md).\n```\n\n----------------------------------------\n\nTITLE: Diagram: FoAz Communication Sequence\nDESCRIPTION: A sequence diagram that details the communication flow between the frontend, authentication provider, Permit.io, and protected services, including JWT exchange and permission checks.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/foaz/overview.mdx#2025-04-17_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    Your Frontend ->> Authentication Provider: login\n    Authentication Provider -->> Your Frontend: JWT\n    Your Frontend->> Permit.io: Login with Permit (JWT for JWT)\n    Permit.io -->> Your Frontend : Permit.io JWT\n    Your Frontend->> Permit.io: Protected API call\n    alt allowed\n        Permit.io ->> Secret Vault : load secrets into protected call\n        Permit.io ->> Protected Service : actual API call\n        Protected Service -->> Permit.io: response\n        Permit.io -->> Your Frontend : response\n    else denied\n        Permit.io -->> Your Frontend : 403\n    end\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video iFrame\nDESCRIPTION: HTML iframe code for embedding a YouTube video demonstrating the Audit Logs Element functionality.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/embeddable-uis/element/audit-logs.mdx#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe\n\tsrc=\"https://www.youtube.com/embed/xGYdDF65lkQ\"\n\ttitle=\"YouTube video player\"\n\tframeBorder=\"0\"\n\tallow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n\tallowFullScreen\n></iframe>\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components for .NET Quickstart\nDESCRIPTION: MDX import statements for loading the quickstart introduction content and .NET-specific examples into the documentation page.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/_Dotnet/quickstart_dotnet.mdx#2025-04-17_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport IntroContent from '@site/docs/getting-started/_quickstart-parts/_quickstart_intro.mdx';\nimport DotNetExample from '@site/docs/getting-started/_quickstart-parts/_quickstart_dotnet.mdx';\n```\n\n----------------------------------------\n\nTITLE: FoAz Proxy URL Structure Example\nDESCRIPTION: Example of a complete FoAz proxy URL structure used to make authenticated API calls. Includes the proxy URL with mapping ID and the target API endpoint URL as a query parameter.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/foaz/visual-guide.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhttps://proxy.api.permit.io/proxy/<UNIQUE-MAPPING-ID>?url=https://some-rest-api.vercel.app/api/something\n```\n\n----------------------------------------\n\nTITLE: Importing Video Assets in JSX\nDESCRIPTION: This snippet demonstrates how to import video assets for use in the documentation. It imports MP4 files for various workspace management features.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/manage-your-account/workspace-settings.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport memberManagement from \"/static/ui-videos/workspace-settings/member-management.mp4\";\nimport invitingUsers from \"/static/ui-videos/workspace-settings/inviting-users.mp4\";\nimport changingMemberRoles from \"/static/ui-videos/workspace-settings/changing-member-roles.mp4\";\n\nimport createNewKey from \"/static/ui-videos/workspace-settings/creating-new-key.mp4\";\nimport rotatingAndDeletingKey from \"/static/ui-videos/workspace-settings/rotating-and-deleting-key.mp4\";\n\nimport apiLogs from \"/static/ui-videos/workspace-settings/api-logs.mp4\";\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Yarn\nDESCRIPTION: Command to install required NPM packages for the documentation website using Yarn package manager.\nSOURCE: https://github.com/permitio/docs/blob/master/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Searching for Available PDP Versions\nDESCRIPTION: Command to search for available versions of the PDP Helm chart. This also verifies that the Helm repository was added successfully.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/deploy/cloud-hosts/helm.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm search repo pdp\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video with HTML\nDESCRIPTION: HTML iframe code for embedding a Permit.io onboarding walkthrough video from YouTube, with configured dimensions and standard YouTube player permissions.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/tutorials/_onboarding_demo.mdx#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe\n\tname=\"youtube\"\n\twidth=\"560\"\n\theight=\"315\"\n\tsrc=\"https://www.youtube.com/embed/DedDAd7P9pk\"\n\ttitle=\"YouTube video player\"\n\tframeborder=\"0\"\n\tallow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n\tallowfullscreen\n></iframe>\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components for NodeJS Permissions Quickstart\nDESCRIPTION: Imports MDX components that contain the introduction content and Node.js example code for the permissions quickstart guide. The imports reference versioned documentation files.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/reference/SDKs/NodeJS/quickstart_nodejs.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport IntroContent from \"@site/versioned_docs/version-1.0.0/tutorials/_quickstart-parts/_quickstart_intro.mdx\";\nimport NodeJSExample from \"@site/versioned_docs/version-1.0.0/tutorials/_quickstart-parts/_quickstart_nodejs.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for User Management Element\nDESCRIPTION: This code snippet imports various custom React components used in the User Management Element documentation page. These components are likely used to enhance the presentation and functionality of the documentation.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/embeddable-uis/element/user-management.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport HelpSupportTile from \"@site/src/components/elements/HelpSupportTile.js\";\nimport ActionContainer from \"@site/src/components/elements/ActionContainer.js\";\nimport ActionTile from \"@site/src/components/elements/ActionTile.js\";\nimport CodeDropdown from \"@site/src/components/elements/CodeDropdown.js\";\nimport FlexWrapper from \"@site/src/components/elements/FlexWrapper.js\";\nimport code from \"@site/src/components/elements/codeBlock.json\";\n\nimport userManagementElementInstances from \"/static/ui-videos/embeddable-uis/user-management-element.mp4\";\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components for Quickstart Tutorial\nDESCRIPTION: This snippet imports MDX components that contain the introduction content and Python-specific example for the quickstart guide.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/reference/SDKs/Python/quickstart_python.mdx#2025-04-17_snippet_0\n\nLANGUAGE: MDX\nCODE:\n```\nimport IntroContent from \"@site/versioned_docs/version-1.0.0/tutorials/_quickstart-parts/_quickstart_intro.mdx\";\nimport PythonExample from \"@site/versioned_docs/version-1.0.0/tutorials/_quickstart-parts/_quickstart_python.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video in HTML\nDESCRIPTION: This code snippet embeds a YouTube video player into the HTML document. It sets various attributes such as width, height, source URL, and allowed features.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/tutorials/_onboarding_demo.mdx#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe\n\tname=\"youtube\"\n\twidth=\"560\"\n\theight=\"315\"\n\tsrc=\"https://www.youtube.com/embed/DedDAd7P9pk\"\n\ttitle=\"YouTube video player\"\n\tframeborder=\"0\"\n\tallow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n\tallowfullscreen\n></iframe>\n```\n\n----------------------------------------\n\nTITLE: Syncing User in Node.js\nDESCRIPTION: Node.js implementation for syncing a user with Permit.io. Creates an IPermitUser object with user details and assigned roles, then uses the write method with syncUser API call.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/tutorials/Onboarding/connect-your-app.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst userData: IPermitUser = {\n  key: user.id,\n  firstName: user.first_name,\n  lastName: user.last_name,\n  email: user.email,\n  roles: [\n    {\n      role: \"admin\",\n      tenant: board.id,\n    },\n  ],\n};\n\nawait permit.write(permit.api.syncUser(userData));\n```\n\n----------------------------------------\n\nTITLE: Creating a Markdown Page\nDESCRIPTION: This snippet shows the content of a simple Markdown file that can be used as a standalone page. It includes a main heading and a paragraph of text.\nSOURCE: https://github.com/permitio/docs/blob/master/docs.backup/tutorial-basics/create-a-page.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# My Markdown page\n\nThis is a Markdown page\n```\n\n----------------------------------------\n\nTITLE: Testing Docusaurus Production Build Locally\nDESCRIPTION: Command to test the production build locally by serving the build folder. This makes the site accessible at http://localhost:3000/.\nSOURCE: https://github.com/permitio/docs/blob/master/docs.backup/tutorial-basics/deploy-your-site.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run serve\n```\n\n----------------------------------------\n\nTITLE: Users per Tenant Response (JSON)\nDESCRIPTION: This JSON object represents the response from the users per tenant API call. It includes a data array with user objects and pagination information.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/examples/list-user-permissions.mdx#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n\"data\": [\n    {\n        \"key\": \"key@permit.io\",\n        \"id\": \"d084172f638140e7a90622ff8311xxx\",\n        \"organization_id\": \"903ebc2765b848289d6dfbd3c21exxxx\",\n        \"project_id\": \"3c4244c7bcab4c97990e5bc724daxxxx\",\n        \"environment_id\": \"9ba956da646948538efaee4cf10dxxxx\",\n        \"associated_tenants\": [\n            {\n                \"tenant\": \"default\",\n                \"roles\": [\n                    \"board\",\n                    \"test\",\n                    \"admin\"\n                ],\n                \"status\": \"active\"\n            }\n        ],\n        \"roles\": [\n            {\n                \"role\": \"board\",\n                \"tenant\": \"default\"\n            },\n            {\n                \"role\": \"test\",\n                \"tenant\": \"default\"\n            },\n            {\n                \"role\": \"admin\",\n                \"tenant\": \"default\"\n            }\n        ],\n        \"email\": \"test@gmail.com\",\n        \"first_name\": \"\",\n        \"last_name\": \"\",\n        \"attributes\": {}\n    }\n],\n\"total_count\": 1,\n\"page_count\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Permit.io SDK via NPM\nDESCRIPTION: Command to install the Permit.io SDK package in a Node.js project using NPM.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/tutorials/_quickstart-parts/_quickstart_nodejs.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install permitio\n```\n\n----------------------------------------\n\nTITLE: Fetching JWKS from Clerk.com Frontend API\nDESCRIPTION: Clerk.com also offers JWKS from their Frontend API through a well-known endpoint. This URL requires your Frontend API domain to construct the complete endpoint.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/foaz/fetching-jwks.mdx#2025-04-17_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nhttps://<YOUR_FRONTEND_API>/.well-known/jwks.json\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server\nDESCRIPTION: Command to start the local development server on port 3000 with live reload capabilities.\nSOURCE: https://github.com/permitio/docs/blob/master/README.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Rendering Quickstart Components in MDX\nDESCRIPTION: This snippet renders the imported components for the Golang quickstart guide. It displays the introduction content followed by the Golang-specific example.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/golang/quickstart-golang.mdx#2025-04-17_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<IntroContent />\n<GolangExample />\n```\n\n----------------------------------------\n\nTITLE: Filtering Relationship Tuples by Object\nDESCRIPTION: Filter tuples by object using resource type and instance identifier.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/examples/filter-relationship-tuple.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.permit.io/v2/facts/{project_id}/{env_id}/relationship_tuples?object=File:my_pdf&page=1&per_page=10' \\\n  -H 'authorization: Bearer API_SECRET_KEY'\n```\n\n----------------------------------------\n\nTITLE: Video Element in JSX\nDESCRIPTION: JSX code for rendering the organization usage video with autoplay and loop settings\nSOURCE: https://github.com/permitio/docs/blob/master/docs/manage-your-account/workspace-usage.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<video controls autoPlay loop muted playsInline>\n  <source src={orgUsage} type=\"video/mp4\" />\n</video>\n```\n\n----------------------------------------\n\nTITLE: Environment Example Path\nDESCRIPTION: Example of environment naming convention in Permit.io\nSOURCE: https://github.com/permitio/docs/blob/master/docs/manage-your-account/projects-and-env.mdx#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nproduction\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for the documentation page, setting up sidebar position, title, and display options.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/authentication/permit-and-authentication.mdx#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\nsidebar_position: 0\ntitle: Permit.io and Authentication\nsidebar_label: Permit.io and Authentication\nhide_table_of_contents: false\n---\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Blog Post with Frontmatter in Docusaurus\nDESCRIPTION: This snippet demonstrates how to create a Docusaurus blog post with proper frontmatter configuration. It includes settings for slug, title, authors (with their details and images), and tags. The sample also includes basic post content.\nSOURCE: https://github.com/permitio/docs/blob/master/docs.backup/tutorial-basics/doodle/create-a-blog-post.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nslug: greetings\ntitle: Greetings!\nauthors:\n  - name: Joel Marcey\n    title: Co-creator of Docusaurus 1\n    url: https://github.com/JoelMarcey\n    image_url: https://github.com/JoelMarcey.png\n  - name: Sébastien Lorber\n    title: Docusaurus maintainer\n    url: https://sebastienlorber.com\n    image_url: https://github.com/slorber.png\ntags: [greetings]\n---\n\nCongratulations, you have made your first post!\n\nFeel free to play around and edit this post as much you like.\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Permit.io Documentation\nDESCRIPTION: This code snippet imports the ReactPlayer component for video playback and a custom NoZoomImage component for displaying images without zoom functionality in the documentation.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/features/Audit Logs/troubleshooting.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ReactPlayer from \"react-player\";\nimport NoZoomImage from \"@site/src/components/NoZoomImage\";\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video in Markdown\nDESCRIPTION: This code snippet demonstrates how to embed a YouTube video player within a Markdown document using an iframe. It includes various attributes for configuration and accessibility.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/build-policies/abac/building-abac-policy.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<div className=\"video-container\">\n\t<iframe\n\t\tsrc=\"https://www.youtube.com/embed/QCsWlsjEE5A\"\n\t\ttitle=\"YouTube video player\"\n\t\tframeBorder=\"0\"\n\t\tallow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n\t\tallowFullScreen\n\t></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components for Python Permissions Quickstart\nDESCRIPTION: Imports MDX components that contain the introductory content and synchronous Python code examples for the permissions quickstart guide.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/reference/SDKs/Python/quickstart_python_sync.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport IntroContent from \"@site/versioned_docs/version-1.0.0/tutorials/_quickstart-parts/_quickstart_intro.mdx\";\nimport SyncPythonExample from \"@site/versioned_docs/version-1.0.0/tutorials/_quickstart-parts/_quickstart_python_sync.mdx\";\n```\n\n----------------------------------------\n\nTITLE: URL Query Parameter Format\nDESCRIPTION: The query parameter format for specifying the target API endpoint URL that will be called securely through the Permit.io proxy.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/foaz/visual-guide.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n?url=https://some-rest-api.vercel.app/api/something\n```\n\n----------------------------------------\n\nTITLE: Retrieving Roles API Response in JSON\nDESCRIPTION: This JSON snippet shows the structure of the response when querying the Permit.io API for available roles. It includes details such as role name, description, attributes, settings, ID, permissions, and whether it's a built-in role.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/reference/SDKs/Python/get_roles.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"url\": \"string\",\n\t\"data\": [\n\t\t{\n\t\t\t\"name\": \"string\",\n\t\t\t\"description\": \"string\",\n\t\t\t\"attributes\": {},\n\t\t\t\"settings\": {},\n\t\t\t\"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n\t\t\t\"permissions\": [],\n\t\t\t\"isBuiltIn\": false\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Permit.io SDK with Gradle\nDESCRIPTION: Gradle configuration for adding the Permit.io SDK dependency to a Gradle project. This shows how to include the permit-sdk-java library in the project's build.gradle file.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/tutorials/_quickstart-parts/_quickstart_java.mdx#2025-04-17_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n  // ...\n\n  implementation 'io.permit:permit-sdk-java:0.0.11'\n}\n```\n\n----------------------------------------\n\nTITLE: Default Project Reference\nDESCRIPTION: Reference to the default project name in Permit.io\nSOURCE: https://github.com/permitio/docs/blob/master/docs/manage-your-account/projects-and-env.mdx#2025-04-17_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nDefault Project\n```\n\n----------------------------------------\n\nTITLE: Viewing FactDB Table Schemas (SQL)\nDESCRIPTION: This SQL query displays the schemas of available tables in the FactDB.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/concepts/pdp/factdb.mdx#2025-04-17_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\n.schema\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video in JSX\nDESCRIPTION: This code snippet demonstrates how to embed a YouTube video player using an iframe in JSX. It includes necessary attributes for responsiveness and security.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/quickstart.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"video-container\">\n  <iframe\n    src=\"https://www.youtube.com/embed/mNRtLTBUUVQ\"\n    title=\"YouTube video player\"\n    frameBorder=\"0\"\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n    allowFullScreen\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Modifying Docusaurus Sidebar Configuration\nDESCRIPTION: Shows how to explicitly configure the sidebar in sidebars.js by adding a document reference to the items array.\nSOURCE: https://github.com/permitio/docs/blob/master/docs.backup/tutorial-basics/doodle/create-a-document.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  tutorialSidebar: [\n    {\n      type: 'category',\n      label: 'Tutorial',\n-     items: [...],\n+     items: ['hello'],\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering NoZoomImage Component for Slack Community Link\nDESCRIPTION: This code snippet renders a NoZoomImage component to display a clickable image linking to the Permit.io Slack community. It specifies the link URL, image URL, and height of the image.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/features/Audit Logs/troubleshooting.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<NoZoomImage\n\tlinkUrl={\"https://io.permit.io/docs-to-slack\"}\n\timageUrl={\"/img/join-us-on-slack.png\"}\n\theightPX={\"60px\"}\n/>\n```\n\n----------------------------------------\n\nTITLE: Example User Object in JSON\nDESCRIPTION: A sample JSON structure representing a user object from Auth0, showing typical user properties that would be used when integrating with Permit.io.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/tutorials/Onboarding/connect-your-app.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"user\": {\n    \"id\": \"abc123livrjeoigv\",\n    \"tenant\": \"my-tenant\",\n    \"username\": \"user1\",\n    \"password\": \"xxxxxxx\",\n    \"email\": \"user1@foo.com\",\n    \"first_name\": \"John\",\n    \"last_name\": \"Smith\",\n    \"emailVerified\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Root Allow Block in Rego for Custom Policy Integration\nDESCRIPTION: This snippet shows how to modify the root.rego file to enforce the custom deny policy. It combines the default Permit.io policies with the custom policy using an 'and' operator.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/integrations/gitops/custom_policy.mdx#2025-04-17_snippet_4\n\nLANGUAGE: rego\nCODE:\n```\nallow {\n    policies.allow\n    custom.allow\n}\n```\n\n----------------------------------------\n\nTITLE: React Timeline Component Import\nDESCRIPTION: Import statements for custom Timeline components used in the documentation interface.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/authentication/permit-and-authentication.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport TimelineStep from \"../../src/components/timeline/TimelineStep\";\nimport TimelineWrapper from \"../../src/components/timeline/TimelineWrapper\";\n```\n\n----------------------------------------\n\nTITLE: React Component Hello Docusaurus\nDESCRIPTION: Example of a simple React component written in JSX that renders a hello message.\nSOURCE: https://github.com/permitio/docs/blob/master/docs.backup/tutorial-basics/markdown-features.mdx#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nfunction HelloDocusaurus() {\n  return <h1>Hello, Docusaurus!</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Syncing Resources and Actions with Permit.io in JavaScript\nDESCRIPTION: This code snippet demonstrates how to define resource types with their associated actions and sync them to Permit.io. The example creates 'task' and 'board' resources with various actions like 'list', 'create', 'update', and 'delete'. The syncResources function returns an array of ResourceStub objects containing details about the synced resources.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/reference/SDKs/NodeJS/sync_resources.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst resourcesTypes : ResourcesTypes = {\n  resources: [\n    {\n      type: \"task\",\n      actions: {\n        list: {},\n        retrieve: {},\n        create: {},\n        update: {},\n        delete: {},\n      },\n    },\n    {\n      type: \"board\",\n      actions: {\n        list: {},\n        create: {},\n        update: {},\n        delete: {},\n      },\n    },\n  ],\n}\n\npermit.syncResources(resourcesTypes);\n\n\n// SyncResources returns ResourceStub[] type\n// {\n//     \"url\": string,\n//     \"data\": [\n//         {\n//         \"type\": string,\n//         \"description\": string,\n//         \"attributes\": { },\n//         \"name\": string,\n//         \"path\": string,\n//         \"id\": string,\n//         \"actions\": [],\n//         \"isBuiltIn\": false\n//         }\n//     ]\n// }\n```\n\n----------------------------------------\n\nTITLE: Video Import Statement in JSX\nDESCRIPTION: Import statement for loading the organization usage video asset in React/JSX\nSOURCE: https://github.com/permitio/docs/blob/master/docs/manage-your-account/workspace-usage.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport orgUsage from \"/static/ui-videos/usage/usage-fhd.mp4\";\n```\n\n----------------------------------------\n\nTITLE: Visualizing Application and Policy Branch Relationships in Mermaid\nDESCRIPTION: This diagram illustrates the relationship between application branches, policy branches, and how they connect through PDPs and PEPs using environment API keys.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/SDLC/CI-CD.mdx#2025-04-17_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    App -->|code changes| NewApp[New App Version]\n    Policy --> |policy changes| NewPolicy[New Policy Env.]\n    NewPolicy --> |Prod. Env API-Key| PDP\n    NewApp --> |Build / CD| Build[App Build]\n    PDP --> Deployment\n    Build --> Deployment\n```\n\n----------------------------------------\n\nTITLE: Syncing Resources and Actions with Permit.io using Java SDK\nDESCRIPTION: Demonstrates how to create and sync resources and actions to Permit.io using the Java SDK. The example shows creating a 'document' resource type with a 'create' action, including specifying action title and description. The function returns a ResourceList containing the synchronized resources data.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/reference/SDKs/Java/sync_resources.mdx#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nstring resourceType = \"document\";\nstring actionName = \"create\";\n// define the action title and description (can be empty)\nActionSpec actionSpec = new ActionSpec.Builder()\n    .withTitle(\"Create a document\")\n    .withDescription(\"Ability to create document\")\n    .build();\n// define the action\nHashMap<String, ActionSpec> resourceActions = new HashMap<String, ActionSpec>(actionName, actionSpec);\n// define the resource with its actions\nArrayList<ResourceSpec> resourcesToSync = { new ResourceSpec(resourceType, resourceActions) };\n// sync the resources to Permit\nResourceList syncedResources = permit.api.syncResources(resourcesToSync);\n\n// SyncResources returns ResourceList type\n// {\n//     \"url\": string,\n//     \"data\": [\n//         {\n//         \"type\": string,\n//         \"description\": string,\n//         \"attributes\": { },\n//         \"name\": string,\n//         \"path\": string,\n//         \"id\": string,\n//         \"actions\": [],\n//         \"isBuiltIn\": false\n//         }\n//     ]\n// }\n```\n\n----------------------------------------\n\nTITLE: Importing Permit SDK\nDESCRIPTION: Import statement for the synchronous version of the Permit SDK\nSOURCE: https://github.com/permitio/docs/blob/master/docs/getting-started/_quickstart-parts/_quickstart_python_sync.mdx#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom permit.sync import Permit\n```\n\n----------------------------------------\n\nTITLE: Implementing a User Sync API Endpoint for Cognito and Permit\nDESCRIPTION: This code implements a backend API endpoint that verifies a Cognito JWT token and synchronizes the user data with Permit.io. It extracts user information from the Cognito token and creates or updates the corresponding user in Permit's system.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/authentication/cognito/permit-integration.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// sync user route\napp.post(\"/api/sync\", async (req, res) => {\n    try {\n        const cognitoUser = await verifier.verify(\n        req.headers.authorization?.split(\" \")[1] // the JWT as string\n        );\n    } catch (error) {\n        res.status(403).send(\"Token not valid!\");\n    }\n    const syncUser = await permit.api.syncUser({\n        \"first_name\": cognitoUser.name,\n        \"key\": cognitoUser.sub,\n        \"email\": cognitoUser.email,\n    }\n    );\n    // you can also assign role to a user here if you have mapping between Cognito groups and Permit roles\n    // with the assign role SDK method\n    // await permit.api.assignRole({\n    //     \"key\": cognitoUser.sub,\n    //     \"role\": caseSensitiveRoleKey,\n    //     \"tenant\": caseSensitiveTenantKey, // if you don't use tenants, use 'default'\n    // });\n    res.status(200).send(syncUser);\n\n}\n);\n```\n\n----------------------------------------\n\nTITLE: Running the .NET Application\nDESCRIPTION: Command to run the .NET application with the Permit.io SDK integration.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/getting-started/_quickstart-parts/_quickstart_dotnet.mdx#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndotnet run\n```\n\n----------------------------------------\n\nTITLE: Interactive MDX Component with Styling\nDESCRIPTION: Advanced example showing a React component with styling and click handling, demonstrating MDX capabilities in Docusaurus.\nSOURCE: https://github.com/permitio/docs/blob/master/docs.backup/tutorial-basics/markdown-features.mdx#2025-04-17_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nexport const Highlight = ({children, color}) => (\n  <span\n    style={{\n      backgroundColor: color,\n      borderRadius: '20px',\n      color: '#fff',\n      padding: '10px',\n      cursor: 'pointer',\n    }}\n    onClick={() => {\n      alert(`You clicked the color ${color} with label ${children}`)\n    }}>\n    {children}\n  </span>\n);\n\nThis is <Highlight color=\"#25c2a0\">Docusaurus green</Highlight> !\n\nThis is <Highlight color=\"#1877F2\">Facebook blue</Highlight> !\n```\n\n----------------------------------------\n\nTITLE: Starting the SuperTokens and Permit demo application\nDESCRIPTION: Command to start the development server for the demo application. Once started, users can access the application at localhost:3000.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/authentication/supertokens.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Docusaurus Document in Markdown\nDESCRIPTION: Example of creating a simple Docusaurus document using markdown syntax. Shows basic structure with a title and formatted text.\nSOURCE: https://github.com/permitio/docs/blob/master/docs.backup/tutorial-basics/doodle/create-a-document.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Hello\n\nThis is my **first Docusaurus document**!\n```\n\n----------------------------------------\n\nTITLE: Implementing Login and Permission Checks in Python Flask with Hasura\nDESCRIPTION: Example showing login handler implementation and animal listing endpoint with Permit.io permission checks. Uses email as identifier and JWT tokens for authentication.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/tutorials/_connecting_to_authentication.mdx#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/login\", methods=[\"POST\"])\ndef login_handler():\n    args = AuthArgs.from_request(request.get_json())\n    user_response = client.find_user_by_email(args.email)\n    user = user_response[\"data\"][\"user\"][0]\n    try:\n        Password.verify(user.get(\"password\"), args.password)\n        rehash_and_save_password_if_needed(user, args.password)\n        return JsonWebToken(generate_token(user)).to_json()\n    except VerifyMismatchError:\n        return {\"message\": \"Invalid credentials\"}, 401\n\n@app.route(\"/animals\", methods=[\"GET\"])\ndef list_animals():\n    try:\n        token = get_token_from_header()\n        id = token[\"email\"]\n        if permit.check(id, \"list\", \"animals\"):\n            user_response = client.list_animals()\n            return jsonify(user_response[\"data\"][\"user\"])\n        else:\n            return make_response(jsonify({\n                'message': 'Not allowed'\n            } )), 403\n```\n\n----------------------------------------\n\nTITLE: Installing Permit.io Ruby SDK\nDESCRIPTION: Command to install the Permit.io SDK using Ruby's package manager gem.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/getting-started/_quickstart-parts/_quickstart_ruby.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngem install permit-sdk\n```\n\n----------------------------------------\n\nTITLE: Cloning and Installing Dependencies\nDESCRIPTION: Commands to clone the example repository and install required npm dependencies\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/food-delivery-system-example-using-nuxt.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/permitio/permit-nuxt-example.git\ncd permit-nuxt-example\ngit checkout all-features\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Permission Check Implementation in Node.js Express with Auth0\nDESCRIPTION: Example of implementing permission checks in an Express route handler using Permit.io. Shows integration with Auth0 authentication and tenant-specific permissions.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/tutorials/_connecting_to_authentication.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.post(\n\t\"\",\n\tasync function (\n\t\treq: express.Request,\n\t\tres: express.Response,\n\t\tnext: express.NextFunction\n\t) {\n\t\t// permissions check\n\t\tconst permitted = await permit.check(req.activeUser?.id, \"create\", {\n\t\t\ttype: \"task\",\n\t\t\ttenant: req.params.boardId,\n\t\t});\n\t\tif (!permitted) {\n\t\t\tres.status(403).send(\"Forbidden: not allowed by policy!\");\n\t\t\treturn;\n\t\t}\n\t\t// ...\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Environment Types\nDESCRIPTION: Examples of environment types used in Permit.io\nSOURCE: https://github.com/permitio/docs/blob/master/docs/manage-your-account/projects-and-env.mdx#2025-04-17_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ndev, staging, production\n```\n\n----------------------------------------\n\nTITLE: Syncing User in C#\nDESCRIPTION: C# code snippet for syncing a user's data with Permit.io PDP during user creation. Creates a UserKey object with user details and syncs it using the Permit API.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/tutorials/Onboarding/connect-your-app.mdx#2025-04-17_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nUserKey userObj = new UserKey(user.id, user.first_name, user.last_name, user.email);\n\npermit.Api.SyncUser(userObj);\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video in JSX\nDESCRIPTION: This snippet demonstrates how to embed a YouTube video player using JSX. It sets up an iframe with specific attributes for YouTube embedding.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/home.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"video-container\">\n\t<iframe\n\t\tsrc=\"https://www.youtube.com/embed/IUgiCp0MIvE\"\n\t\ttitle=\"YouTube video player\"\n\t\tframeBorder=\"0\"\n\t\tallow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n\t\tallowFullScreen\n\t></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Policy Function Skeleton\nDESCRIPTION: Defines an async function that will handle the creation and updating of policies. This function will contain the implementation logic for processing resources and roles.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/sdk/nodejs/sync-policy-script/sync-policy.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst createPolicy = async () => {\n    // Implementation here\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Package and Default Allow in Rego for Permit.io Custom Policy\nDESCRIPTION: This snippet shows the basic structure of a custom Rego file for Permit.io, including the package declaration and default allow rule. It sets up the foundation for custom policy logic.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/integrations/gitops/custom_policy.mdx#2025-04-17_snippet_0\n\nLANGUAGE: rego\nCODE:\n```\npackage permit.custom\n\ndefault allow := false\n```\n\n----------------------------------------\n\nTITLE: Front Matter Example in Markdown\nDESCRIPTION: Demonstrates the structure of front matter metadata at the top of a Markdown document including id, title, description and custom URL slug.\nSOURCE: https://github.com/permitio/docs/blob/master/docs.backup/tutorial-basics/markdown-features.mdx#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n---\nid: my-doc-id\ntitle: My document title\ndescription: My document description\nslug: /my-custom-url\n---\n\n## Markdown heading\n\nMarkdown text with [links](./hello.md)\n```\n\n----------------------------------------\n\nTITLE: Embedding Video in User Management Element Documentation\nDESCRIPTION: This HTML snippet embeds a video demonstrating the User Management Element's functionality, specifically focusing on ReBAC resource switching. The video source is dynamically set using a JavaScript variable.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/embeddable-uis/element/user-management.mdx#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<video controls>\n  <source src={userManagementElementInstances} />\n</video>\n```\n\n----------------------------------------\n\nTITLE: Importing Quickstart Components in MDX\nDESCRIPTION: This snippet imports the necessary MDX components for the quickstart guide, including an introduction and a Java-specific example.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/reference/SDKs/Java/quickstart_java.mdx#2025-04-17_snippet_0\n\nLANGUAGE: MDX\nCODE:\n```\nimport IntroContent from \"@site/versioned_docs/version-1.0.0/tutorials/_quickstart-parts/_quickstart_intro.mdx\";\nimport JavaExample from \"@site/versioned_docs/version-1.0.0/tutorials/_quickstart-parts/_quickstart_java.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Rendering MDX Components for Quickstart Tutorial\nDESCRIPTION: This snippet renders the imported MDX components to display the introduction content and Python example in the quickstart guide.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/reference/SDKs/Python/quickstart_python.mdx#2025-04-17_snippet_1\n\nLANGUAGE: MDX\nCODE:\n```\n<IntroContent />\n<PythonExample />\n```\n\n----------------------------------------\n\nTITLE: Implementing AllOf Logical Operator\nDESCRIPTION: Demonstrates the structure for using the allOf operator to combine multiple conditions with AND logic.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/api/working-with-abac/building-conditions.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\"conditions\": {\n    \"allOf\": [\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Permit Package\nDESCRIPTION: Command to install the Permit library into a specific directory for Lambda layer creation.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/integrations/gateways/aws-api-gateway.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install permit -t python\n```\n\n----------------------------------------\n\nTITLE: Cloning Permit PDP Deployments Examples Repository\nDESCRIPTION: Command to clone the repository containing Permit PDP deployment examples.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/deploy/cloud-hosts/pulumi.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/permitio/permit-pdp-deployments-examples\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages\nDESCRIPTION: Commands for installing necessary dependencies using npm or yarn package managers.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/integrations/feature-flagging/casl.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @casl/ability @casl/react permit-fe-sdk permitio\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @casl/ability @casl/react permit-fe-sdk permitio\n```\n\n----------------------------------------\n\nTITLE: Setting Permit API Key in Pulumi Configuration\nDESCRIPTION: Command to securely set the Permit API key in Pulumi configuration.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/deploy/cloud-hosts/pulumi.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npulumi config set --secret apiKey <YOUR_API_KEY>\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration\nDESCRIPTION: Environment variables setup for Permit.io token and PDP configuration\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/food-delivery-system-example-using-nuxt.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nPERMIT_TOKEN=permit_key_XXXXXXXXXXXXXXXXXXXXXXXXX\nPERMIT_PDP=http://localhost:7766\n```\n\n----------------------------------------\n\nTITLE: Cloning Healthcare Demo Repository\nDESCRIPTION: Command to clone the Galactic Health Corporation demo application repository from GitHub.\nSOURCE: https://github.com/permitio/docs/blob/master/docs/modeling/rebac-GHC.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/permitio/Galactic-Health-Corporation.git\n```\n\n----------------------------------------\n\nTITLE: Starting PDP Cluster\nDESCRIPTION: Command to start the PDP cluster using Docker Compose\nSOURCE: https://github.com/permitio/docs/blob/master/docs/how-to/manage-data/pdp-sharding.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up\n```\n\n----------------------------------------\n\nTITLE: Markdown Image Example\nDESCRIPTION: Demonstrates how to embed images in Markdown using the standard image syntax.\nSOURCE: https://github.com/permitio/docs/blob/master/docs.backup/tutorial-basics/markdown-features.mdx#2025-04-17_snippet_2\n\nLANGUAGE: md\nCODE:\n```\n![Docusaurus logo](/img/docusaurus.png)\n```\n\n----------------------------------------\n\nTITLE: Creating a Tenant\nDESCRIPTION: Creating a new tenant using permit.api.create_tenant()\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/tutorials/_quickstart-parts/_quickstart_python.mdx#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ncool_company_tenant = {\n    \"key\": \"cool_company_inc\",\n    \"name\": \"Cool Company Inc\"\n}\n\nawait permit.write(permit.api.create_tenant(cool_company_tenant))\n```\n\n----------------------------------------\n\nTITLE: Rendering Facebook Like Button in JSX\nDESCRIPTION: This code snippet renders a Facebook Like button using an iframe element in JSX. It includes attributes for styling, scrolling, and permissions.\nSOURCE: https://github.com/permitio/docs/blob/master/versioned_docs/version-1.0.0/features/coming-soon.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<iframe\n\tsrc=\"https://www.facebook.com/plugins/like.php?href=https%3A%2F%2Fdocs.permit.io%2Ffeatures%2Fapi_key_management&width=108&layout=button_count&action=like&size=large&share=false&height=21&appId=310304597626926\"\n\twidth=\"108\"\n\theight=\"30\"\n\tstyle={{ border: \"none\", overflow: \"hidden\" }}\n\tscrolling=\"no\"\n\tframeborder=\"0\"\n\tallowfullscreen=\"true\"\n\tallow=\"autoplay; clipboard-write; encrypted-media; picture-in-picture; web-share\"\n></iframe>\n```"
  }
]