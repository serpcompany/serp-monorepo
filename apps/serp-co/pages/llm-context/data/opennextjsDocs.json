[
  {
    "owner": "opennextjs",
    "repo": "docs",
    "content": "TITLE: Configuring OpenNext with TypeScript\nDESCRIPTION: A complete example of OpenNext configuration file that defines server functions, middleware settings, image optimization, and advanced deployment options. The configuration supports multiple server types including Lambda functions, Docker containers, and Cloudflare workers, with customizable wrappers, converters, and caching mechanisms.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/config/full_example.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { OpenNextConfig } from \"@opennextjs/aws/types/open-next\";\nconst config = {\n  default: {\n    override: {\n      wrapper: \"aws-lambda-streaming\",\n      converter: \"aws-apigw-v2\",\n      incrementalCache: \"s3\",\n      proxyExternalRequest: \"node\",\n      tagCache: \"dynamodb\",\n      queue: () =>\n        Promise.resolve({\n          send: async (message) => {\n            //Your custom code here\n          },\n        }),\n    },\n    install: {\n      packages: [\"sharp@0.33.5\"],\n      arch: \"arm64\",\n    },\n    minify: true,\n  },\n  functions: {\n    ssr: {\n      routes: [\n        \"app/api/isr/route\",\n        \"app/api/sse/route\",\n        \"app/api/revalidateTag/route\",\n        \"app/route1/page\",\n        \"app/route2/page\",\n        \"pages/route3\",\n      ],\n      patterns: [\"api/*\", \"route1\", \"route2\", \"route3\"],\n      override: {\n        wrapper: \"aws-lambda-streaming\",\n      },\n      experimentalBundledNextServer: true,\n    },\n    pageSsr: {\n      routes: [\"pages/pageSsr\"],\n      patterns: [\"pageSsr\", \"_next/data/BUILD_ID/pageSsr.json\"],\n      override: {\n        wrapper: \"node\",\n        converter: \"node\",\n        generateDockerfile: true,\n      },\n    },\n    edge: {\n      runtime: \"edge\",\n      routes: [\"app/ssr/page\"],\n      patterns: [\"ssr\"],\n      override: {},\n    },\n  },\n  middleware: {\n    external: true,\n  },\n  imageOptimization: {\n    loader: \"s3-lite\",\n    install: {\n      packages: [\"sharp@0.32.6\"],\n      arch: \"arm64\",\n      nodeVersion: \"18\",\n      libc: \"glibc\",\n    },\n  },\n  initializationFunction: {\n    tagCache: \"dynamodb-lite\",\n  },\n  revalidate: {\n    override: {\n      wrapper: \"aws-lambda\",\n      converter: \"aws-apigw-v2\",\n    },\n  },\n  warmer: {\n    invokeFunction: \"aws-lambda\",\n    override: {\n      wrapper: \"aws-lambda\",\n      converter: \"aws-apigw-v2\",\n    },\n  },\n  buildCommand: \"echo 'skipping build'\",\n  dangerous: {\n    disableTagCache: true,\n    disableIncrementalCache: true,\n    enableCacheInterception: true,\n    headersAndCookiesPriority: (event) => {\n      if (event.rawPath.startsWith(\"/api\")) {\n        return \"middleware\";\n      }\n      return \"handler\";\n    },\n  },\n  buildOutputPath: \"build\",\n  appPath: \"app\",\n  packageJsonPath: \"package.json\",\n  edgeExternals: [],\n} satisfies OpenNextConfig;\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: OpenNext Configuration\nDESCRIPTION: TypeScript configuration file for OpenNext with R2 incremental cache setup\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/get-started.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineCloudflareConfig } from \"@opennextjs/cloudflare\";\nimport r2IncrementalCache from \"@opennextjs/cloudflare/overrides/incremental-cache/r2-incremental-cache\";\n\nexport default defineCloudflareConfig({\n  incrementalCache: r2IncrementalCache,\n});\n```\n\n----------------------------------------\n\nTITLE: Bundling for Classic Node Server with Function Splitting in OpenNextJS\nDESCRIPTION: This configuration example demonstrates how to bundle OpenNextJS for a classic Node server while implementing function splitting. It includes overrides for the default server and defines a separate function for API routes.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/config/simple_example.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { OpenNextConfig } from \"@opennextjs/aws/types/open-next.js\";\nconst config = {\n  // In this case, the default server is meant to run as a classic Node server\n  // To execute the server you need to run `node index.mjs` inside `.open-next/server-functions/default`\n  default: {\n    override: {\n      wrapper: \"node\",\n      converter: \"node\",\n      // This is necessary to generate a simple dockerfile and for the generated output to know that it needs to deploy on docker\n      // You can also provide a string here (i.e. the content of your Dockerfile) which will be used to create the dockerfile\n      // You don't have to provide this if you plan on not using docker, or if you plan on using your own custom dockerfile\n      generateDockerfile: true,\n    },\n  },\n  // You can define multiple functions here, each with its own routes, patterns and overrides\n  functions: {\n    // In this case both the api route is in lambda and the rest is in node\n    myFn: {\n      // Patterns needs to use the glob pattern\n      patterns: [\"api/*\"],\n      routes: [\"app/api/test/route\", \"app/api/test2/route\"],\n    },\n  },\n} satisfies OpenNextConfig;\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Accessing Cloudflare Request Context and Lifecycle Methods\nDESCRIPTION: Shows how to access the Cloudflare cf object for request context and ctx object for lifecycle methods using getCloudflareContext(). This enables enhanced control over request handling and worker execution.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/bindings.mdx#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getCloudflareContext } from \"@opennextjs/cloudflare\";\n\nexport async function GET(request) {\n  const { env, cf, ctx } = getCloudflareContext();\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Wrapper Type Structure for Open Next.js Backends\nDESCRIPTION: Defines the type structure for wrappers, which are the main entry points for Open Next.js backends. Includes the WrapperHandler type and the Wrapper type that extends BaseOverride.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/inner_workings/components/overview.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype WrapperHandler<\n  E extends BaseEventOrResult = InternalEvent,\n  R extends BaseEventOrResult = InternalResult,\n> = (handler: OpenNextHandler<E, R>, converter: Converter<E, R>) => Promise<(...args: any[]) => any>;\n\nexport type Wrapper<\n  E extends BaseEventOrResult = InternalEvent,\n  R extends BaseEventOrResult = InternalResult,\n> = BaseOverride & {\n  wrapper: WrapperHandler<E, R>;\n  supportStreaming: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Cloudflare KV Namespace in Next.js Route Handler\nDESCRIPTION: Demonstrates how to use getCloudflareContext to access a KV Namespace binding in a Next.js route handler. The example shows retrieving the binding from the context, writing a key-value pair, and then reading it back.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/bindings.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getCloudflareContext } from \"@opennextjs/cloudflare\";\n\nexport async function GET(request) {\n  let responseText = \"Hello World\";\n\n  const myKv = getCloudflareContext().env.MY_KV_NAMESPACE;\n  await myKv.put(\"foo\", \"bar\");\n  const foo = await myKv.get(\"foo\");\n\n  return new Response(foo);\n}\n```\n\n----------------------------------------\n\nTITLE: Splitting the Server in OpenNextJS Configuration\nDESCRIPTION: This configuration example shows how to split the server into multiple functions in OpenNextJS. It defines a default server and a custom function with specific routes and patterns, demonstrating function splitting capabilities.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/config/simple_example.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { OpenNextConfig } from \"@opennextjs/aws/types/open-next.js\";\nconst config = {\n  // This is the default server, similar to the server-function in open-next v2\n  // In this case we are not providing any override, so it will generate a normal lambda (i.e. no streaming)\n  default: {},\n  // You can define multiple functions here, each with its own routes, patterns and overrides\n  functions: {\n    myFn: {\n      // Patterns needs to use the glob pattern\n      patterns: [\"route1\", \"route2\", \"route3\"],\n      // For app dir, you need to include route|page, no need to include layout or loading\n      // It needs to be prepended with app/ or pages/ depending on the directory used\n      routes: [\"app/route1/page\", \"app/route2/page\", \"pages/route3\"],\n      override: {\n        wrapper: \"aws-lambda-streaming\",\n      },\n    },\n  },\n} satisfies OpenNextConfig;\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring R2 Cache with Regional Cache in OpenNextJS for Cloudflare\nDESCRIPTION: This snippet demonstrates how to configure R2 incremental cache with optional regional cache in an OpenNextJS project. The regional cache can be configured in either 'short-lived' or 'long-lived' mode, with options for lazy updating of cache entries.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/caching.mdx#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// open-next.config.ts\nimport { defineCloudflareConfig } from \"@opennextjs/cloudflare\";\nimport r2IncrementalCache from \"@opennextjs/cloudflare/overrides/incremental-cache/r2-incremental-cache\";\nimport { withRegionalCache } from \"@opennextjs/cloudflare/overrides/incremental-cache/regional-cache\";\n// ...\n\n// With regional cache enabled:\nexport default defineCloudflareConfig({\n  incrementalCache: withRegionalCache(r2IncrementalCache, {\n    mode: \"long-lived\",\n    shouldLazilyUpdateOnCacheHit: true,\n  }),\n  // ...\n});\n\n// Without regional cache:\nexport default defineCloudflareConfig({\n  incrementalCache: r2IncrementalCache,\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: OpenNext CDK Construct Implementation in TypeScript\nDESCRIPTION: A reference implementation of an AWS CDK construct that deploys OpenNext applications with required AWS infrastructure. Creates and configures S3 buckets, DynamoDB tables, SQS queues, Lambda functions, and CloudFront distributions to support Next.js applications.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/reference-implementation.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Construct } from \"constructs\";\nimport { readFileSync } from \"fs\";\nimport path from \"path\";\nimport { BlockPublicAccess, Bucket } from \"aws-cdk-lib/aws-s3\";\nimport { BucketDeployment, Source } from \"aws-cdk-lib/aws-s3-deployment\";\nimport { CustomResource, Duration, Fn, RemovalPolicy, Stack } from \"aws-cdk-lib/core\";\nimport {\n  AllowedMethods,\n  BehaviorOptions,\n  CacheCookieBehavior,\n  CacheHeaderBehavior,\n  CachePolicy,\n  CacheQueryStringBehavior,\n  CachedMethods,\n  Distribution,\n  ICachePolicy,\n  ViewerProtocolPolicy,\n  FunctionEventType,\n  OriginRequestPolicy,\n  Function as CloudfrontFunction,\n  FunctionCode,\n} from \"aws-cdk-lib/aws-cloudfront\";\nimport { HttpOrigin, S3Origin } from \"aws-cdk-lib/aws-cloudfront-origins\";\nimport {\n  Code,\n  Function as CdkFunction,\n  FunctionUrlAuthType,\n  InvokeMode,\n  Runtime,\n} from \"aws-cdk-lib/aws-lambda\";\nimport { TableV2 as Table, AttributeType, Billing } from \"aws-cdk-lib/aws-dynamodb\";\nimport { Service, Source as AppRunnerSource, Memory, HealthCheck, Cpu } from \"@aws-cdk/aws-apprunner-alpha\";\nimport { DockerImageAsset } from \"aws-cdk-lib/aws-ecr-assets\";\nimport { Queue } from \"aws-cdk-lib/aws-sqs\";\nimport { SqsEventSource } from \"aws-cdk-lib/aws-lambda-event-sources\";\nimport { IGrantable } from \"aws-cdk-lib/aws-iam\";\nimport { Provider } from \"aws-cdk-lib/custom-resources\";\nimport { RetentionDays } from \"aws-cdk-lib/aws-logs\";\n\ntype BaseFunction = {\n  handler: string;\n  bundle: string;\n};\n\ntype OpenNextFunctionOrigin = {\n  type: \"function\";\n  streaming?: boolean;\n} & BaseFunction;\n\ntype OpenNextECSOrigin = {\n  type: \"ecs\";\n  bundle: string;\n  dockerfile: string;\n};\n\ntype OpenNextS3Origin = {\n  type: \"s3\";\n  originPath: string;\n  copy: {\n    from: string;\n    to: string;\n    cached: boolean;\n    versionedSubDir?: string;\n  }[];\n};\n\ntype OpenNextOrigins = OpenNextFunctionOrigin | OpenNextECSOrigin | OpenNextS3Origin;\n\ninterface OpenNextOutput {\n  edgeFunctions: {\n    [key: string]: BaseFunction;\n  };\n  origins: {\n    s3: OpenNextS3Origin;\n    default: OpenNextFunctionOrigin | OpenNextECSOrigin;\n    imageOptimizer: OpenNextFunctionOrigin | OpenNextECSOrigin;\n    [key: string]: OpenNextOrigins;\n  };\n  behaviors: {\n    pattern: string;\n    origin?: string;\n    edgeFunction?: string;\n  }[];\n  additionalProps?: {\n    disableIncrementalCache?: boolean;\n    disableTagCache?: boolean;\n    initializationFunction?: BaseFunction;\n    warmer?: BaseFunction;\n    revalidationFunction?: BaseFunction;\n  };\n}\n\ninterface OpenNextCdkReferenceImplementationProps {\n  openNextPath: string;\n}\n\nexport class OpenNextCdkReferenceImplementation extends Construct {\n  private openNextOutput: OpenNextOutput;\n  private bucket: Bucket;\n  private table: Table;\n  private queue: Queue;\n\n  private staticCachePolicy: ICachePolicy;\n  private serverCachePolicy: CachePolicy;\n\n  public distribution: Distribution;\n\n  constructor(scope: Construct, id: string, props: OpenNextCdkReferenceImplementationProps) {\n    super(scope, id);\n    this.openNextOutput = JSON.parse(\n      readFileSync(path.join(props.openNextPath, \"open-next.output.json\"), \"utf-8\")\n    ) as OpenNextOutput;\n\n    this.bucket = new Bucket(this, \"OpenNextBucket\", {\n      publicReadAccess: false,\n      blockPublicAccess: BlockPublicAccess.BLOCK_ALL,\n      autoDeleteObjects: true,\n      removalPolicy: RemovalPolicy.DESTROY,\n      enforceSSL: true,\n    });\n    this.table = this.createRevalidationTable();\n    this.queue = this.createRevalidationQueue();\n\n    const origins = this.createOrigins();\n    this.serverCachePolicy = this.createServerCachePolicy();\n    this.staticCachePolicy = this.createStaticCachePolicy();\n    this.distribution = this.createDistribution(origins);\n  }\n\n  private createRevalidationTable() {\n    const table = new Table(this, \"RevalidationTable\", {\n      partitionKey: { name: \"tag\", type: AttributeType.STRING },\n      sortKey: { name: \"path\", type: AttributeType.STRING },\n      pointInTimeRecovery: true,\n      billing: Billing.onDemand(),\n      globalSecondaryIndexes: [\n        {\n          indexName: \"revalidate\",\n          partitionKey: { name: \"path\", type: AttributeType.STRING },\n          sortKey: { name: \"revalidatedAt\", type: AttributeType.NUMBER },\n        },\n      ],\n      removalPolicy: RemovalPolicy.DESTROY,\n    });\n\n    const initFn = this.openNextOutput.additionalProps?.initializationFunction;\n\n    const insertFn = new CdkFunction(this, \"RevalidationInsertFunction\", {\n      description: \"Next.js revalidation data insert\",\n      handler: initFn?.handler ?? \"index.handler\",\n      // code: Code.fromAsset(initFn?.bundle ?? \"\"),\n      code: Code.fromAsset(\".open-next/dynamodb-provider\"),\n      runtime: Runtime.NODEJS_18_X,\n      timeout: Duration.minutes(15),\n      memorySize: 128,\n      environment: {\n        CACHE_DYNAMO_TABLE: table.tableName,\n      },\n    });\n\n    const provider = new Provider(this, \"RevalidationProvider\", {\n      onEventHandler: insertFn,\n      logRetention: RetentionDays.ONE_DAY,\n    });\n\n    new CustomResource(this, \"RevalidationResource\", {\n      serviceToken: provider.serviceToken,\n      properties: {\n        version: Date.now().toString(),\n      },\n    });\n\n    return table;\n  }\n\n  private createOrigins() {\n    const {\n      s3: s3Origin,\n      default: defaultOrigin,\n      imageOptimizer: imageOrigin,\n      ...restOrigins\n    } = this.openNextOutput.origins;\n    const s3 = new S3Origin(this.bucket, {\n      originPath: s3Origin.originPath,\n    });\n    for (const copy of s3Origin.copy) {\n      new BucketDeployment(this, `OpenNextBucketDeployment${copy.from}`, {\n        sources: [Source.asset(copy.from)],\n        destinationBucket: this.bucket,\n        destinationKeyPrefix: copy.to,\n        prune: false,\n      });\n    }\n    const origins = {\n      s3: new S3Origin(this.bucket, {\n        originPath: s3Origin.originPath,\n        originAccessIdentity: undefined,\n      }),\n      default:\n        defaultOrigin.type === \"function\"\n          ? this.createFunctionOrigin(\"default\", defaultOrigin)\n          : this.createAppRunnerOrigin(\"default\", defaultOrigin),\n      imageOptimizer:\n        imageOrigin.type === \"function\"\n          ? this.createFunctionOrigin(\"imageOptimizer\", imageOrigin)\n          : this.createAppRunnerOrigin(\"imageOptimizer\", imageOrigin),\n      ...Object.entries(restOrigins).reduce(\n        (acc, [key, value]) => {\n          if (value.type === \"function\") {\n            acc[key] = this.createFunctionOrigin(key, value);\n          } else if (value.type === \"ecs\") {\n            acc[key] = this.createAppRunnerOrigin(key, value);\n          }\n          return acc;\n        },\n        {} as Record<string, HttpOrigin>\n      ),\n    };\n    return origins;\n  }\n\n  private createRevalidationQueue() {\n    const queue = new Queue(this, \"RevalidationQueue\", {\n      fifo: true,\n      receiveMessageWaitTime: Duration.seconds(20),\n    });\n    const consumer = new CdkFunction(this, \"RevalidationFunction\", {\n      description: \"Next.js revalidator\",\n      handler: \"index.handler\",\n      code: Code.fromAsset(this.openNextOutput.additionalProps?.revalidationFunction?.bundle ?? \"\"),\n      runtime: Runtime.NODEJS_18_X,\n      timeout: Duration.seconds(30),\n    });\n    consumer.addEventSource(new SqsEventSource(queue, { batchSize: 5 }));\n    return queue;\n  }\n\n  private getEnvironment() {\n    return {\n      CACHE_BUCKET_NAME: this.bucket.bucketName,\n      CACHE_BUCKET_KEY_PREFIX: \"_cache\",\n      CACHE_BUCKET_REGION: Stack.of(this).region,\n      REVALIDATION_QUEUE_URL: this.queue.queueUrl,\n      REVALIDATION_QUEUE_REGION: Stack.of(this).region,\n      CACHE_DYNAMO_TABLE: this.table.tableName,\n      // Those 2 are used only for image optimizer\n      BUCKET_NAME: this.bucket.bucketName,\n      BUCKET_KEY_PREFIX: \"_assets\",\n    };\n  }\n\n  private grantPermissions(grantable: IGrantable) {\n    this.bucket.grantReadWrite(grantable);\n    this.table.grantReadWriteData(grantable);\n    this.queue.grantSendMessages(grantable);\n  }\n\n  private createFunctionOrigin(key: string, origin: OpenNextFunctionOrigin) {\n    const environment = this.getEnvironment();\n    const fn = new CdkFunction(this, `${key}Function`, {\n      runtime: Runtime.NODEJS_18_X,\n      handler: origin.handler,\n      code: Code.fromAsset(origin.bundle),\n      environment,\n      memorySize: 1024,\n    });\n    const fnUrl = fn.addFunctionUrl({\n      authType: FunctionUrlAuthType.NONE,\n      invokeMode: origin.streaming ? InvokeMode.RESPONSE_STREAM : InvokeMode.BUFFERED,\n    });\n    this.grantPermissions(fn);\n    return new HttpOrigin(Fn.parseDomainName(fnUrl.url));\n  }\n\n  private createAppRunnerOrigin(key: string, origin: OpenNextECSOrigin): HttpOrigin {\n    const imageAsset = new DockerImageAsset(this, `${key}ImageAsset`, {\n      directory: origin.bundle,\n    });\n    const service = new Service(this, `${key}Service`, {\n      source: AppRunnerSource.fromAsset({\n        asset: imageAsset,\n        imageConfiguration: {\n          port: 3000,\n          environmentVariables: this.getEnvironment(),\n        },\n      }),\n    });\n```\n\n----------------------------------------\n\nTITLE: Creating CloudFront Distribution with Origins in AWS CDK\nDESCRIPTION: Implements a method that creates a CloudFront distribution with multiple origin configurations. It sets up behaviors for different paths, cache policies, and associates a CloudFront function to forward host headers.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/reference-implementation.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nprivate createDistribution(origins: Record<string, HttpOrigin | S3Origin>) {\n    const cloudfrontFunction = new CloudfrontFunction(this, \"OpenNextCfFunction\", {\n      code: FunctionCode.fromInline(`\n\t\t\tfunction handler(event) {\n\t\t\t\tvar request = event.request;\n\t\t\t\trequest.headers[\"x-forwarded-host\"] = request.headers.host;\n\t\t\t\treturn request;\n\t\t\t}\n\t\t\t`),\n    });\n    const fnAssociations = [\n      {\n        function: cloudfrontFunction,\n        eventType: FunctionEventType.VIEWER_REQUEST,\n      },\n    ];\n\n    const distribution = new Distribution(this, \"OpenNextDistribution\", {\n      defaultBehavior: {\n        origin: origins.default,\n        viewerProtocolPolicy: ViewerProtocolPolicy.REDIRECT_TO_HTTPS,\n        allowedMethods: AllowedMethods.ALLOW_GET_HEAD_OPTIONS,\n        cachedMethods: CachedMethods.CACHE_GET_HEAD_OPTIONS,\n        cachePolicy: this.serverCachePolicy,\n        originRequestPolicy: OriginRequestPolicy.ALL_VIEWER_EXCEPT_HOST_HEADER,\n        functionAssociations: fnAssociations,\n      },\n      additionalBehaviors: this.openNextOutput.behaviors\n        .filter((b) => b.pattern !== \"*\")\n        .reduce(\n          (acc, behavior) => {\n            return {\n              ...acc,\n              [behavior.pattern]: {\n                origin: behavior.origin ? origins[behavior.origin] : origins.default,\n                viewerProtocolPolicy: ViewerProtocolPolicy.REDIRECT_TO_HTTPS,\n                allowedMethods: AllowedMethods.ALLOW_GET_HEAD_OPTIONS,\n                cachedMethods: CachedMethods.CACHE_GET_HEAD_OPTIONS,\n                cachePolicy: behavior.origin === \"s3\" ? this.staticCachePolicy : this.serverCachePolicy,\n                originRequestPolicy:\n                  behavior.origin === \"s3\" ? undefined : OriginRequestPolicy.ALL_VIEWER_EXCEPT_HOST_HEADER,\n                functionAssociations: fnAssociations,\n              },\n            };\n          },\n          {} as Record<string, BehaviorOptions>\n        ),\n    });\n    return distribution;\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating Code Overrides for Open-next ESBuild Plugin in TypeScript\nDESCRIPTION: Demonstrates how to create a TypeScript file with override directives for the Open-next ESBuild plugin. It shows the syntax for importing, overriding imports, and overriding functions.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/v2/inner_workings/plugin.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n//#import\n// Everything inside here will be placed at the top of the file\nconst test = \"test\";\n//#endImport\n\n//#override import\n// Everything inside here will replace the content of the override with the given id: import\n// To get the id you'll need to look at the file you want to override\nimport { requestHandler } from \"./util.js\";\n//#endOverride\n\n//#override fnId\n// Everything inside here will replace the content of the override with the given id: fnId\nexport const fnId = (req: IncomingMessage, res: ServerResponse) => {\n  requestHandler(req, res);\n};\n//#endOverride\n```\n\n----------------------------------------\n\nTITLE: Accessing Cloudflare KV Binding in Next.js Route Handler\nDESCRIPTION: Demonstrates how to use getCloudflareContext() to access a KV namespace binding in a Next.js route handler. This example shows how to put a value into KV and then retrieve it for the response.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.6/bindings.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getCloudflareContext } from \"@opennextjs/cloudflare\";\n\nexport async function GET(request) {\n  let responseText = \"Hello World\";\n\n  const myKv = getCloudflareContext().env.MY_KV_NAMESPACE;\n  await myKv.put(\"foo\", \"bar\");\n  const foo = await myKv.get(\"foo\");\n\n  return new Response(foo);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js for Including Missing Files in Bundle\nDESCRIPTION: Shows how to use outputFileTracingIncludes in next.config.ts to include missing files or dependencies in the server functions bundle, supporting both global and route-specific inclusions.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/common_issues.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextConfig } from \"next\";\n\nconst nextConfig: NextConfig = {\n  /* config options here */\n  outputFileTracingIncludes: {\n    \"*\": [\"sentry.server.config.ts\"],\n    // can also be a glob pattern\n    \"/api/*\": [\"node_modules/.prisma/client/**/*\"],\n  },\n};\n\nexport default nextConfig;\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// open-next.config.ts\nimport type { OpenNextConfig } from \"@opennextjs/aws/types/open-next\";\nconst config = {\n  default: {},\n  functions: {\n    extraFunction: {\n      patterns: [\"api/test\"],\n      // this is the route that will be used in this function\n      routes: [\"app/api/test/route\"],\n      override: {\n        wrapper: \"aws-lambda-streaming\",\n      },\n    },\n  },\n} satisfies OpenNextConfig;\n\n// next.config.ts\nimport type { NextConfig } from \"next\";\n\nconst nextConfig: NextConfig = {\n  outputFileTracingIncludes: {\n    // these files will be copied only to the extraFunction bundle\n    \"/api/test\": [\"sentry.config.ts\", \"node_modules/.prisma/client/**/*\"],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Converter Type Structure for Open Next.js Backends\nDESCRIPTION: Defines the type structure for converters, which are used to convert events and results between different formats. Includes the Converter type that extends BaseOverride.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/inner_workings/components/overview.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Converter<\n  E extends BaseEventOrResult = InternalEvent,\n  R extends BaseEventOrResult = InternalResult,\n> = BaseOverride & {\n  convertFrom: (event: any) => Promise<E>;\n  convertTo: (result: R, originalRequest?: any) => any;\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Stripe with FetchHttpClient in Cloudflare Workers\nDESCRIPTION: Demonstrates how to create a Stripe instance using FetchHttpClient instead of the default node:https implementation for compatibility with Cloudflare Workers. The code shows the proper configuration of Stripe object with the httpClient option set to use Fetch API.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/howtos/stripeAPI.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Stripe from \"stripe\";\n\nconst stripe = Stripe(STRIPE_API_KEY, {\n  // Cloudflare Workers use the Fetch API for their API requests.\n  httpClient: Stripe.createFetchHttpClient(),\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring D1 Tag Cache with R2 and Queue in OpenNextJS\nDESCRIPTION: This configuration sets up D1 tag cache along with R2 incremental cache and Durable Object queue for OpenNextJS. This combination supports on-demand revalidation with the D1 database storing tag-to-path mappings.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/caching.mdx#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// open-next.config.ts\nimport { defineCloudflareConfig } from \"@opennextjs/cloudflare\";\nimport r2IncrementalCache from \"@opennextjs/cloudflare/overrides/incremental-cache/r2-incremental-cache\";\nimport doQueue from \"@opennextjs/cloudflare/overrides/queue/do-queue\";\nimport d1NextTagCache from \"@opennextjs/cloudflare/overrides/tag-cache/d1-next-tag-cache\";\n\nexport default defineCloudflareConfig({\n  incrementalCache: r2IncrementalCache,\n  queue: doQueue,\n  tagCache: d1NextTagCache,\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up Durable Object Queue for Revalidation in OpenNextJS\nDESCRIPTION: This code configures a Durable Object queue for handling revalidation requests in OpenNextJS. The queue supports de-duplicating requests and can process up to 50 concurrent ISR revalidations by default.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/caching.mdx#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// open-next.config.ts\nimport { defineCloudflareConfig } from \"@opennextjs/cloudflare\";\n// ...\nimport r2IncrementalCache from \"@opennextjs/cloudflare/overrides/incremental-cache/r2-incremental-cache\";\nimport doQueue from \"@opennextjs/cloudflare/overrides/queue/do-queue\";\n\nexport default defineCloudflareConfig({\n  // ...\n  incrementalCache: r2IncrementalCache,\n  queue: doQueue,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Cloudflare Worker with Extended Handlers\nDESCRIPTION: Creates a custom Cloudflare Worker that combines the default fetch handler with additional functionality like scheduled events. Includes optional re-exports for Durable Object Queue and Tag Cache support.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/howtos/custom-worker.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// custom-worker.ts\n\n// @ts-ignore `.open-next/worker.ts` is generated at build time\nimport { default as handler } from \"./.open-next/worker.js\";\n\nexport default {\n  fetch: handler.fetch,\n\n  async scheduled(event) {\n    // ...\n  },\n} satisfies ExportedHandler<CloudflareEnv>;\n\n// The re-export is only required if your app uses the DO Queue and DO Tag Cache\n// See https://opennext.js.org/cloudflare/caching for details\n// @ts-ignore `.open-next/worker.ts` is generated at build time\nexport { DOQueueHandler, DOShardedTagCache } from \"./.open-next/worker.js\";\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Cloudflare Image Loader in TypeScript\nDESCRIPTION: This snippet defines a custom image loader function for Next.js that leverages Cloudflare's image transformation capabilities. It formats the image URL with width and quality parameters and includes a special case for development mode.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/howtos/image.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// image-loader.ts\nimport type { ImageLoaderProps } from \"next/image\";\n\nconst normalizeSrc = (src: string) => {\n  return src.startsWith(\"/\") ? src.slice(1) : src;\n};\n\nexport default function cloudflareLoader({ src, width, quality }: ImageLoaderProps) {\n  if (process.env.NODE_ENV === \"development\") {\n    // Serve the original image when using `next dev`\n    return src;\n  }\n  const params = [`width=${width}`];\n  if (quality) {\n    params.push(`quality=${quality}`);\n  }\n  const paramsString = params.join(\",\");\n  return `/cdn-cgi/image/${paramsString}/${normalizeSrc(src)}`;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring D1 Database and Service Binding for Tag Cache\nDESCRIPTION: This configuration adds a D1 database binding and service binding to the wrangler.jsonc file. The D1 database is used for the tag cache to store information about tags, paths, and revalidation times.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/caching.mdx#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n// wrangler.jsonc\n{\n  // ...\n  \"d1_databases\": [\n    {\n      \"binding\": \"NEXT_TAG_CACHE_D1\",\n      \"database_id\": \"<DATABASE_ID>\",\n      \"database_name\": \"<DATABASE_NAME>\",\n    },\n  ],\n  \"services\": [\n    {\n      \"binding\": \"WORKER_SELF_REFERENCE\",\n      \"service\": \"<WORKER_NAME>\",\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying NextRequest Constructor for CloudFront Geolocation Data\nDESCRIPTION: A code diff showing how the NextRequest constructor is modified to initialize geolocation data from CloudFront headers instead of using the default empty object. This enables access to geolocation data in middleware when deployed on AWS.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/v2/advanced/workaround.mdx#2025-04-23_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n- geo: init.geo || {}\n+ geo: init.geo || {\n+   country: this.headers(\"cloudfront-viewer-country\"),\n+   countryName: this.headers(\"cloudfront-viewer-country-name\"),\n+   region: this.headers(\"cloudfront-viewer-country-region\"),\n+   regionName: this.headers(\"cloudfront-viewer-country-region-name\"),\n+   city: this.headers(\"cloudfront-viewer-city\"),\n+   postalCode: this.headers(\"cloudfront-viewer-postal-code\"),\n+   timeZone: this.headers(\"cloudfront-viewer-time-zone\"),\n+   latitude: this.headers(\"cloudfront-viewer-latitude\"),\n+   longitude: this.headers(\"cloudfront-viewer-longitude\"),\n+   metroCode: this.headers(\"cloudfront-viewer-metro-code\"),\n+ }\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Cache Policy for Next.js in CloudFront\nDESCRIPTION: Creates a custom server cache policy for CloudFront distribution that handles Next.js server components and routing. It configures query string behavior, allowed headers, and TTL settings.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/reference-implementation.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nprivate createServerCachePolicy() {\n    return new CachePolicy(this, \"OpenNextServerCachePolicy\", {\n      queryStringBehavior: CacheQueryStringBehavior.all(),\n      headerBehavior: CacheHeaderBehavior.allowList(\n        \"accept\",\n        \"accept-encoding\",\n        \"rsc\",\n        \"next-router-prefetch\",\n        \"next-router-state-tree\",\n        \"next-url\",\n        \"x-prerender-revalidate\"\n      ),\n      cookieBehavior: CacheCookieBehavior.none(),\n      defaultTtl: Duration.days(0),\n      maxTtl: Duration.days(365),\n      minTtl: Duration.days(0),\n    });\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Wrangler for Next.js App Deployment\nDESCRIPTION: Wrangler configuration file (wrangler.jsonc) that defines how the Next.js app should be deployed to Cloudflare Workers, including settings for compatibility flags, assets, services, and KV namespaces.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.6/get-started.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"$schema\": \"node_modules/wrangler/config-schema.json\",\n  \"main\": \".open-next/worker.js\",\n  \"name\": \"my-app\",\n  \"compatibility_date\": \"2024-12-30\",\n  \"compatibility_flags\": [\"nodejs_compat\"],\n  \"assets\": {\n    \"directory\": \".open-next/assets\",\n    \"binding\": \"ASSETS\",\n  },\n  \"services\": [\n    {\n      \"binding\": \"WORKER_SELF_REFERENCE\",\n      // The service should match the \"name\" of your worker\n      \"service\": \"my-app\",\n    },\n  ],\n  \"kv_namespaces\": [\n    // Create a KV binding with the binding name \"NEXT_INC_CACHE_KV\"\n    // to enable the KV based caching:\n    // {\n    //   \"binding\": \"NEXT_INC_CACHE_KV\",\n    //   \"id\": \"<BINDING_ID>\"\n    // }\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Sharp Package for Default Server with ARM64 Architecture in OpenNext\nDESCRIPTION: This code snippet demonstrates how to configure the default server to install the Sharp package with ARM64 architecture support. The configuration sets up the installation parameters including the specific package version, architecture type, and ensures proper TypeScript type checking.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/config/reference.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { OpenNextConfig } from '@opennextjs/aws/types/open-next';\nconst config = {\ndefault: {\n  install: {\n    packages: ['sharp@0.33.5'],\n    arch: 'arm64',\n  },\n},\n} satisfies OpenNextConfig;\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Implementing API Handler for Next.js Page Revalidation with CloudFront Invalidation\nDESCRIPTION: An API handler function that revalidates a specific page in the Next.js cache and invalidates the corresponding CloudFront cache. This is necessary because updating ISR cache files on S3 doesn't automatically update the CloudFront cache.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/v2/common_issues/isr.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// pages/api/revalidate.js\nexport default async function handler(req, res) {\n  await res.revalidate(\"/foo\");\n  await invalidateCloudFrontPaths([\"/foo\"]);\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenNext with Durable Objects for Cache and Queue\nDESCRIPTION: Configuration for OpenNext with Durable Objects implementation for improved caching. This setup uses KV for incremental cache, Durable Objects for tag cache with regional caching enabled, and Durable Objects for the queue system.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.6/caching.mdx#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// open-next.config.ts\nimport { defineCloudflareConfig } from \"@opennextjs/cloudflare\";\nimport kvIncrementalCache from \"@opennextjs/cloudflare/overrides/incremental-cache/kv-incremental-cache\";\nimport memoryQueue from \"@opennextjs/cloudflare/overrides/queue/do-queue\";\nimport doShardedTagCache from \"@opennextjs/cloudflare/overrides/tag-cache/do-sharded-tag-cache\";\n\nexport default defineCloudflareConfig({\n  incrementalCache: kvIncrementalCache,\n  tagCache: doShardedTagCache({ baseShardSize: 12, regionalCache: true }),\n  queue: memoryQueue,\n});\n```\n\n----------------------------------------\n\nTITLE: Patching Fetch Behavior for Consistent ISR Revalidation in Next.js 13.5.1+\nDESCRIPTION: A code snippet to fix inconsistent revalidation behavior in Next.js ISR when using fetch. This patch modifies the fetch function in the root layout to prevent the issue where all fetches use the lowest revalidate value regardless of their individual settings.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/v2/common_issues/isr.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function RootLayout() {\n  const asyncStorage = require(\"next/dist/client/components/static-generation-async-storage.external\");\n  //@ts-ignore\n  const staticStore = (fetch as any).__nextGetStaticStore?.() || asyncStorage.staticGenerationAsyncStorage;\n  const store = staticStore.getStore();\n  store.isOnDemandRevalidate = store.isOnDemandRevalidate && !(process.env.OPEN_NEXT_ISR === 'true');\n  return <>...</>;\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Variables for DynamoDB-Lite TagCache\nDESCRIPTION: Required environment variables for the DynamoDB-Lite TagCache implementation. This lighter version uses aws4fetch instead of the full AWS SDK and requires AWS credentials to be provided.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/config/overrides/tag_cache.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nCACHE_DYNAMO_TABLE\nCACHE_BUCKET_REGION\nAWS_ACCESS_KEY_ID\nAWS_SECRET_ACCESS_KEY\nAWS_SESSION_TOKEN\n```\n\n----------------------------------------\n\nTITLE: Using getCloudflareContext in Async Mode for SSG Routes\nDESCRIPTION: Shows how to use getCloudflareContext in asynchronous mode, which is required for Static Site Generation (SSG) routes. This enables access to Cloudflare bindings during build-time static generation.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/bindings.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst context = await getCloudflareContext({ async: true });\n```\n\n----------------------------------------\n\nTITLE: Accessing Geolocation Data in Next.js Middleware\nDESCRIPTION: Example showing how to access user geolocation data inside Next.js middleware through the NextRequest object. This demonstrates the standard Vercel pattern that AWS deployments need to replicate.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/v2/advanced/workaround.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport function middleware(request: NextRequest) {\n  request.geo.country;\n  request.geo.city;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Edge Runtime Split Function in OpenNextJS\nDESCRIPTION: This configuration sets up an edge runtime split function in OpenNextJS. It defines a default server and an edge function with specific routes and patterns, demonstrating how to deploy functions in the edge runtime for reduced cold start times.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/config/simple_example.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { OpenNextConfig } from \"@opennextjs/aws/types/open-next.js\";\nconst config = {\n  default: {},\n  functions: {\n    edge: {\n      runtime: \"edge\",\n      //placement: \"global\", If you want your function to be deployed globally (i.e. lambda@edge) uncomment this line. Otherwise it will be deployed in the region specified in the stack\n      routes: [\"app/api/test/route\"],\n      patterns: [\"api/test\"],\n    },\n  },\n} satisfies OpenNextConfig;\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring KV Incremental Cache in OpenNextJS\nDESCRIPTION: This snippet shows how to configure the KV incremental cache in an OpenNextJS Cloudflare project. KV provides a global key-value storage mechanism that can be used for caching page content.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/caching.mdx#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// open-next.config.ts\nimport { defineCloudflareConfig } from \"@opennextjs/cloudflare\";\nimport kvIncrementalCache from \"@opennextjs/cloudflare/overrides/incremental-cache/kv-incremental-cache\";\n// ...\n\nexport default defineCloudflareConfig({\n  incrementalCache: kvIncrementalCache,\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: R2 Bucket Wrangler Configuration\nDESCRIPTION: Wrangler configuration for R2 bucket and service binding setup.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/caching.mdx#2025-04-23_snippet_6\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"name\": \"<WORKER_NAME>\",\n  \"r2_buckets\": [\n    {\n      \"binding\": \"NEXT_INC_CACHE_R2_BUCKET\",\n      \"bucket_name\": \"<BUCKET_NAME>\",\n    },\n  ],\n  \"services\": [\n    {\n      \"binding\": \"WORKER_SELF_REFERENCE\",\n      \"service\": \"<WORKER_NAME>\",\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Lambda@Edge in OpenNextJS\nDESCRIPTION: This snippet shows how to configure OpenNextJS to run in Lambda@Edge. It sets the placement to 'global' and uses the 'aws-cloudfront' converter for edge compatibility.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/config/simple_example.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { OpenNextConfig } from \"@opennextjs/aws/types/open-next.js\";\nconst config = {\n  default: {\n    placement: \"global\",\n    override: {\n      converter: \"aws-cloudfront\",\n    },\n  },\n} satisfies OpenNextConfig;\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Defining Queue Interface for Next.js Revalidation\nDESCRIPTION: TypeScript interface for implementing a custom revalidation queue in OpenNext. It defines the message structure and the required methods for sending revalidation messages.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/inner_workings/components/server/node.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface QueueMessage {\n  MessageDeduplicationId: string;\n  MessageBody: {\n    host: string;\n    url: string;\n  };\n  MessageGroupId: string;\n}\n\nexport interface Queue {\n  send(message: QueueMessage): Promise<void>;\n  name: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Durable Objects in Wrangler for Cloudflare\nDESCRIPTION: Wrangler configuration for setting up Durable Objects and service bindings needed for improved caching. This configuration creates Durable Objects for the queue and tag cache, and sets up a self-reference to the worker.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.6/caching.mdx#2025-04-23_snippet_8\n\nLANGUAGE: jsonc\nCODE:\n```\n// wrangler.jsonc\n{\n  // ...\n  \"durable_objects\": {\n    \"bindings\": [\n      {\n        \"name\": \"NEXT_CACHE_DO_QUEUE\",\n        \"class_name\": \"DurableObjectQueueHandler\",\n      },\n      {\n        \"name\": \"NEXT_TAG_CACHE_DO_SHARDED\",\n        \"class_name\": \"DOShardedTagCache\",\n      },\n    ],\n  },\n  \"migrations\": [\n    {\n      \"tag\": \"v1\",\n      \"new_sqlite_classes\": [\"DurableObjectQueueHandler\", \"DOShardedTagCache\"],\n    },\n  ],\n  \"services\": [\n    {\n      \"binding\": \"WORKER_SELF_REFERENCE\",\n      \"service\": \"<WORKER_NAME>\",\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Revalidating Next.js Cache and Invalidating CloudFront Cache\nDESCRIPTION: This code snippet demonstrates how to revalidate the Next.js cache for a specific page and invalidate the corresponding CloudFront cache. It includes handling for both the App Router and Pages Router.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/inner_workings/caching.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// pages/api/revalidate.js\nexport default async function handler(req, res) {\n  await res.revalidate(\"/foo\");\n  await invalidateCloudFrontPaths([\"/foo\"]);\n  // ...\n}\n\n// For Pages Router\nawait invalidateCloudFrontPaths([\"/foo\", `/_next/data/${process.env.NEXT_BUILD_ID}/foo.json`]);\n```\n\n----------------------------------------\n\nTITLE: Initializing Cloudflare Context in NextAuth\nDESCRIPTION: Implementation showing how to properly initialize Cloudflare context within NextAuth callbacks to resolve local development issues with Cloudflare bindings.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/howtos/NextAuth.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const { handlers, auth, signIn, signOut } = NextAuth(async _ => {\n\tlet { env } = await getCloudflareContext({async: true})\n        ..\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CloudFront Cache Invalidation Function\nDESCRIPTION: This function uses the AWS SDK to create a CloudFront invalidation for specified paths. It demonstrates how to set up the CloudFront client and send an invalidation command.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/inner_workings/caching.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CloudFrontClient, CreateInvalidationCommand } from \"@aws-sdk/client-cloudfront\";\n\nconst cloudFront = new CloudFrontClient({});\n\nasync function invalidateCloudFrontPaths(paths: string[]) {\n  await cloudFront.send(\n    new CreateInvalidationCommand({\n      // Set CloudFront distribution ID here\n      DistributionId: distributionId,\n      InvalidationBatch: {\n        CallerReference: `${Date.now()}`,\n        Paths: {\n          Quantity: paths.length,\n          Items: paths,\n        },\n      },\n    })\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring R2 Cache in OpenNext\nDESCRIPTION: TypeScript configuration for enabling R2 cache with optional regional caching in OpenNext.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.6/caching.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineCloudflareConfig } from \"@opennextjs/cloudflare\";\nimport r2IncrementalCache from \"@opennextjs/cloudflare/overrides/incremental-cache/r2-incremental-cache\";\nimport { withRegionalCache } from \"@opennextjs/cloudflare/overrides/incremental-cache/regional-cache\";\n\nexport default defineCloudflareConfig({\n  incrementalCache: withRegionalCache(r2IncrementalCache, {\n    mode: \"long-lived\",\n    shouldLazilyUpdateOnCacheHit: true,\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating OpenNext Configuration for Nx Integration\nDESCRIPTION: Creates an open-next.config.ts file that configures OpenNext to work with the Nx monorepo structure, specifying build commands and paths.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/config/nx.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport type { OpenNextConfig } from '@opennextjs/aws/types/open-next';\n\nconst config = {\n  default: {},\n  buildCommand: 'exit 0', // in my example we set up Nx task distribution to handle the order of building.\n  buildOutputPath: '.',\n  appPath: '.',\n  packageJsonPath: '../../', // again, path to the root of your repo (where the package.json is)\n} satisfies OpenNextConfig;\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Using getCloudflareContext in SSG Routes\nDESCRIPTION: Example of how to use getCloudflareContext in async mode for Static Site Generation (SSG) routes. The async option must be set to true to make the function return a promise.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.6/bindings.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst context = await getCloudflareContext({ async: true });\n```\n\n----------------------------------------\n\nTITLE: Retrieving Paths by Tag from DynamoDB for Next.js Cache Revalidation\nDESCRIPTION: A function to query DynamoDB for paths associated with a specific tag when using on-demand revalidation. It formats the tag with the build ID to match how it's stored in DynamoDB and returns the paths after removing the build ID prefix.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/v2/common_issues/isr.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getByTag(tag: string) {\n  try {\n    const { Items } = await this.dynamoClient.send(\n      new QueryCommand({\n        TableName: process.env.CACHE_DYNAMO_TABLE,\n        KeyConditionExpression: \"#tag = :tag\",\n        ExpressionAttributeNames: {\n          \"#tag\": \"tag\",\n        },\n        ExpressionAttributeValues: {\n          \":tag\": { S: `${process.env.NEXT_BUILD_ID}/${tag}` },\n        },\n      })\n    );\n    return (\n      // We need to remove the buildId from the path\n      Items?.map(({ path: { S: key } }) => key?.replace(`${process.env.NEXT_BUILD_ID}/`, \"\") ?? \"\") ?? []\n    );\n  } catch (e) {\n    error(\"Failed to get by tag\", e);\n    return [];\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring External Middleware in OpenNextJS\nDESCRIPTION: This configuration example demonstrates how to use external middleware in OpenNextJS. It's useful for scenarios like edge runtime or function splitting with middleware rewrites. The middleware is set to be external rather than bundled with the lambda function.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/config/simple_example.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { OpenNextConfig } from \"@opennextjs/aws/types/open-next.js\";\nconst config = {\n  default: {},\n  functions: {\n    myFn: {\n      patterns: [\"route1\", \"route2\", \"route3\"],\n      routes: [\"app/route1/page\", \"app/route2/page\", \"pages/route3\"],\n      override: {\n        wrapper: \"aws-lambda-streaming\",\n      },\n    },\n  },\n  middleware: {\n    external: true,\n  },\n} satisfies OpenNextConfig;\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js to Use the Custom Image Loader\nDESCRIPTION: This configuration snippet shows how to update the Next.js config file to use the custom Cloudflare image loader. It sets the loader to 'custom' and specifies the path to the loader file.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/howtos/image.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// next.config.ts\nimport type { NextConfig } from \"next\";\n\nconst nextConfig: NextConfig = {\n  // ...\n  images: {\n    loader: \"custom\",\n    loaderFile: \"./image-loader.ts\",\n  },\n};\n\nexport default nextConfig;\n```\n\n----------------------------------------\n\nTITLE: Configuring Headers and Cookies Priority in OpenNext\nDESCRIPTION: Demonstrates how to customize the priority between middleware and handler headers/cookies based on request path. The function determines which set of headers/cookies takes precedence during request processing.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/config/reference.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// In this case, if the request starts with /api, the middleware headers and cookies will take precedence otherwise the handler headers and cookies will take precedence\nheadersAndCookiesPriority: (event) => {\n  if (event.rawPath.startsWith('/api')) {\n    return 'middleware';\n  }\n  return 'handler';\n},\n```\n\n----------------------------------------\n\nTITLE: Configuring Streaming with Lambda in OpenNextJS\nDESCRIPTION: This snippet demonstrates how to enable Lambda streaming in an OpenNextJS configuration. It uses the 'aws-lambda-streaming' wrapper to enable streaming functionality.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/config/simple_example.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { OpenNextConfig } from \"@opennextjs/aws/types/open-next.js\";\nconst config = {\n  default: {\n    override: {\n      wrapper: \"aws-lambda-streaming\", // This is necessary to enable lambda streaming\n    },\n  },\n} satisfies OpenNextConfig;\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenNext with D1 Database for Tag Cache\nDESCRIPTION: Configuration for OpenNext using D1 database for tag cache implementation. This setup uses KV for incremental cache, D1 for tag cache, and memory queue for revalidation requests.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.6/caching.mdx#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// open-next.config.ts\nimport { defineCloudflareConfig } from \"@opennextjs/cloudflare\";\nimport kvIncrementalCache from \"@opennextjs/cloudflare/overrides/incremental-cache/kv-incremental-cache\";\nimport d1TagCache from \"@opennextjs/cloudflare/overrides/tag-cache/d1-tag-cache\";\nimport memoryQueue from \"@opennextjs/cloudflare/overrides/queue/memory-queue\";\n\nexport default defineCloudflareConfig({\n  incrementalCache: kvIncrementalCache,\n  tagCache: d1TagCache,\n  queue: memoryQueue,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring KV Namespace and Service Binding in Wrangler\nDESCRIPTION: This configuration adds a KV namespace binding and service binding to the Cloudflare Worker configuration in wrangler.jsonc. The KV binding is used for the incremental cache and the service binding provides a self-reference to the worker.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/caching.mdx#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n// wrangler.jsonc\n{\n  // ...\n  \"name\": \"<WORKER_NAME>\",\n  \"kv_namespaces\": [\n    {\n      \"binding\": \"NEXT_INC_CACHE_KV\",\n      \"id\": \"<BINDING_ID>\",\n    },\n  ],\n  \"services\": [\n    {\n      \"binding\": \"WORKER_SELF_REFERENCE\",\n      \"service\": \"<WORKER_NAME>\",\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Node.js Middleware Runtime in Next.js\nDESCRIPTION: Configuration example showing how to enable Node.js runtime for middleware in Next.js 15+ and OpenNext. This includes setting the experimental flag in next.config.ts and specifying the runtime in middleware.ts.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/inner_workings/routing.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst nextConfig: NextConfig = {\n  experimental: {\n    nodeMiddleware: true,\n  },\n};\n// and then in your `middleware.ts` you put:\nexport const config = {\n  runtime: \"nodejs\",\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom App and Build Output Paths in OpenNext\nDESCRIPTION: Examples for specifying custom application and build output paths in a monorepo setup, allowing commands to be executed from the root directory. Shows both CLI and JavaScript API approaches.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/v2/advanced/options.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# CLI\nopen-next build --build-command \"pnpm custom:build\" --app-path \"./apps/example-app\" --build-output-path \"./dist/apps/example-app\"\n```\n\nLANGUAGE: ts\nCODE:\n```\n// JS\nimport { build } from \"open-next/build.js\";\n\nawait build({\n  buildCommand: \"pnpm custom:build\",\n  appPath: \"./apps/example-app\",\n  buildOutputPath: \"./dist/apps/example-app\",\n});\n```\n\n----------------------------------------\n\nTITLE: Interpreting Warmer Function Logs in OpenNextJS\nDESCRIPTION: This snippet shows the structure of warmer function logs in OpenNextJS. It includes metrics for sent requests, successful invocations, and unique servers warmed. These logs provide insights into the effectiveness of the warming process.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/v2/advanced/debugging.mdx#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n{ event: 'warmer result', sent: 2, success: 2, uniqueServersWarmed: 2 }\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Interception in OpenNext\nDESCRIPTION: Configuration code to enable cache interception in OpenNext through open-next.config.ts. Demonstrates setting up the enableCacheInterception flag in the dangerous options section of the configuration.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/inner_workings/cache_interception.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// open-next.config.ts\nimport type { OpenNextConfig } from \"@opennextjs/aws/types/open-next.js\";\nconst config = {\n  default: {},\n  dangerous: {\n    enableCacheInterception: true,\n  },\n} satisfies OpenNextConfig;\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Using getCloudflareContext in Async Mode for SSG Routes\nDESCRIPTION: This snippet shows how to use getCloudflareContext in SSG routes by enabling async mode. This is required when using the function in static site generation context, but comes with a warning about using development secrets during build.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.5/bindings.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst context = await getCloudflareContext({ async: true });\n```\n\n----------------------------------------\n\nTITLE: Accessing Cloudflare Request Context and Lifecycle Methods\nDESCRIPTION: Example of how to access the cf object (request context) and ctx object (Worker lifecycle methods) using getCloudflareContext(). These objects provide additional Cloudflare-specific functionality.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.6/bindings.mdx#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getCloudflareContext } from \"@opennextjs/cloudflare\";\n\nexport async function GET(request) {\n  const { env, cf, ctx } = getCloudflareContext();\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Open-next ESBuild Plugin in TypeScript\nDESCRIPTION: Shows how to use the Open-next ESBuild plugin in a build configuration. It demonstrates setting the plugin name, target file pattern, and replacement file path.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/v2/inner_workings/plugin.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport openNextPlugin from \"./plugin.js\";\n\nopenNextPlugin({\n  name: \"name of the plugin\",\n  target: /plugins\\/serverHandler\\.js/g, // regex to match the file to override\n  replacements: [\"./serverHandler.replacement.js\"], // path to the files containing the overrides\n}),\n```\n\n----------------------------------------\n\nTITLE: Small Site OpenNext Configuration\nDESCRIPTION: OpenNext configuration for a small site implementing R2 incremental cache, DO queue, and D1 tag cache.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/caching.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineCloudflareConfig } from \"@opennextjs/cloudflare\";\nimport r2IncrementalCache from \"@opennextjs/cloudflare/overrides/incremental-cache/r2-incremental-cache\";\nimport d1NextTagCache from \"@opennextjs/cloudflare/overrides/tag-cache/d1-next-tag-cache\";\nimport doQueue from \"@opennextjs/cloudflare/overrides/queue/do-queue\";\n\nexport default defineCloudflareConfig({\n  incrementalCache: r2IncrementalCache,\n  queue: doQueue,\n  tagCache: d1NextTagCache,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Queue in OpenNext\nDESCRIPTION: TypeScript configuration for setting up a Durable Object Queue for revalidation requests.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.6/caching.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineCloudflareConfig } from \"@opennextjs/cloudflare\";\nimport doQueue from \"@opennextjs/cloudflare/overrides/queue/do-queue\";\n\nexport default defineCloudflareConfig({\n  queue: doQueue,\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Cloudflare Request Context and Lifecycle Methods in Next.js\nDESCRIPTION: Shows how to access the Cloudflare 'cf' object (containing request context information) and 'ctx' object (containing lifecycle methods) from a Next.js route handler using getCloudflareContext().\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.2/bindings.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getCloudflareContext } from \"@opennextjs/cloudflare\";\n\nexport async function GET(request) {\n  const { env, cf, ctx } = await getCloudflareContext();\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SST for AWS Deployment\nDESCRIPTION: Creates an SST configuration file that sets up NextJS deployment to AWS, configured to work with the Nx build system.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/config/nx.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference path=\"./.sst/platform/config.d.ts\" />\n\nexport default $config({\n  app(input) {\n    return {\n      name: \"next-site\", // use whatever your project is called here\n      removal: input?.stage === \"production\" ? \"retain\" : \"remove\",\n      home: \"aws\",\n    };\n  },\n  async run() {\n    new sst.aws.Nextjs(\"Site\", {\n      buildCommand: \"exit 0;\", // again, we want to get Nx to handle building\n    });\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Durable Objects in Wrangler\nDESCRIPTION: JSON configuration for setting up Durable Objects bindings and migrations in Wrangler.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.6/caching.mdx#2025-04-23_snippet_6\n\nLANGUAGE: jsonc\nCODE:\n```\n\"durable_objects\": {\n    \"bindings\": [\n      {\n        \"name\": \"NEXT_CACHE_DO_QUEUE\",\n        \"class_name\": \"DurableObjectQueueHandler\"\n      }\n    ]\n  },\n  \"migrations\": [\n    {\n      \"tag\": \"v1\",\n      \"new_sqlite_classes\": [\"DurableObjectQueueHandler\"]\n    }\n  ],\n```\n\n----------------------------------------\n\nTITLE: Adding OpenNext Build Target to Nx Project Configuration\nDESCRIPTION: Modifies the project.json file to add an open-next-build target that depends on the NextJS build and configures caching and outputs.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/config/nx.mdx#2025-04-23_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n{\n  \"name\": \"next-site\",\n  \"$schema\": \"../../node_modules/nx/schemas/project-schema.json\",\n  \"sourceRoot\": \"apps/next-site\",\n  \"projectType\": \"application\",\n  \"tags\": [],\n  \"targets\": {\n+    \"open-next-build\": { // name of the target, this is what you will call\n+      \"executor\": \"nx:run-commands\",\n+      \"dependsOn\": [\"build\"], // this ensures that Nx will build our next app before running this command.\n+      \"cache\": true, // cache the output, good for if you want to use DTE/Nx cloud\n+      \"outputs\": [\"{projectRoot}/.open-next\"], // tell nx where the output lives\n+      \"options\": {\n+        \"cwd\": \"apps/next-site\", // where we run the command\n+        \"command\": \"open-next build\" // what command we want to run\n+      }\n+    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic OpenNext Configuration in TypeScript\nDESCRIPTION: Minimal required configuration for OpenNext setup in a TypeScript file. This configuration file must be placed at the same level as next.config.js.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/config.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  default: {},\n};\n```\n\n----------------------------------------\n\nTITLE: Next.js Configuration with OpenNext\nDESCRIPTION: Next.js configuration file with OpenNext Cloudflare integration for development\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/get-started.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// next.config.ts\nimport type { NextConfig } from \"next\";\n\nconst nextConfig: NextConfig = {\n  /* config options here */\n};\n\nexport default nextConfig;\n\nimport { initOpenNextCloudflareForDev } from \"@opennextjs/cloudflare\";\ninitOpenNextCloudflareForDev();\n```\n\n----------------------------------------\n\nTITLE: Configuring Routes and Patterns for Splitted Server in OpenNext\nDESCRIPTION: This example shows how to specify routes and URL patterns for a splitted server configuration in OpenNext. The routes define the Next.js app and page routes to include, while patterns specify the URL matching patterns for CloudFront.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/config/reference.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nroutes: [\"app/api/test/route\", \"app/page\", \"pages/admin\"]\n```\n\nLANGUAGE: typescript\nCODE:\n```\npatterns: [\n// This one will match all the routes that start with /api/\n\"/api/*\",\n// For a single route, this one will only match /page\n\"/page\",\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenNextJS Cache Settings\nDESCRIPTION: TypeScript configuration for OpenNextJS cache settings, including R2 incremental cache, Durable Object queue, and sharded tag cache with customizable options.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/caching.mdx#2025-04-23_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineCloudflareConfig } from \"@opennextjs/cloudflare\";\nimport r2IncrementalCache from \"@opennextjs/cloudflare/overrides/incremental-cache/r2-incremental-cache\";\nimport doQueue from \"@opennextjs/cloudflare/overrides/queue/do-queue\";\nimport doShardedTagCache from \"@opennextjs/cloudflare/overrides/tag-cache/do-sharded-tag-cache\";\n\nexport default defineCloudflareConfig({\n  incrementalCache: r2IncrementalCache,\n  tagCache: doShardedTagCache({ baseShardSize: 12, regionalCache: true }),\n  queue: doQueue,\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Base Override Type Structure for Open Next.js\nDESCRIPTION: Defines the basic type structure for Open Next.js overrides, including the BaseOverride type and the LazyLoadedOverride type wrapper that all custom overrides must use.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/inner_workings/components/overview.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype BaseOverride = {\n  name: string;\n};\n\n// This is the type of the override\ntype LazyLoadedOverride<T extends BaseOverride> = () => Promise<T>;\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Declarations for Cloudflare Bindings\nDESCRIPTION: Command to generate TypeScript type declarations for Cloudflare bindings using Wrangler. This helps ensure type safety when accessing the env object from getCloudflareContext().\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.6/bindings.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx wrangler types --experimental-include-runtime\n```\n\n----------------------------------------\n\nTITLE: Invalidating CloudFront Path for Pages Router with Build ID\nDESCRIPTION: Example of invalidating both the page path and the data JSON path when using the Pages Router. This requires accessing the Next.js build ID, which can be found in the build output or accessed via the NEXT_BUILD_ID environment variable.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/v2/common_issues/isr.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait invalidateCloudFrontPaths([\"/foo\", `/_next/data/${process.env.NEXT_BUILD_ID}/foo.json`]);\n```\n\n----------------------------------------\n\nTITLE: Setting Static Cache Policy for Next.js Assets in CloudFront\nDESCRIPTION: Implements a method that returns an optimized caching policy for static assets from a Next.js application. Uses a predefined AWS CloudFront caching policy.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/reference-implementation.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nprivate createStaticCachePolicy() {\n    return CachePolicy.CACHING_OPTIMIZED;\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating D1 Database Tables\nDESCRIPTION: SQL commands to create necessary tables for tag revalidation in D1 database.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.5/caching.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nwrangler d1 execute NEXT_CACHE_D1 --command \"CREATE TABLE IF NOT EXISTS tags (tag TEXT NOT NULL, path TEXT NOT NULL, UNIQUE(tag, path) ON CONFLICT REPLACE)\"\nwrangler d1 execute NEXT_CACHE_D1 --command \"CREATE TABLE IF NOT EXISTS revalidations (tag TEXT NOT NULL, revalidatedAt INTEGER NOT NULL, UNIQUE(tag) ON CONFLICT REPLACE)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenNext Edge Plugin in TypeScript\nDESCRIPTION: Demonstrates the configuration of the OpenNext Edge Plugin for compiling edge runtime routes and middleware. Includes options for specifying Next.js directory, edge function handler, and Cloudflare Workers support.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/contribute/plugin.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nopenNextEdgePlugin({\n  // The path to the .next directory\n  nextDir: \"next\",\n  // The path to the edgeFunctionHandler.js file that we'll use to bundle the routing\n  edgeFunctionHandlerPath: \"./edgeFunctionHandler.js\",\n  // The middlewareInfo from the middlware manifest file\n  middlewareInfo: middlewareInfo\n  // If the app should be bundled for cloudflare workers\n  isInCloudflare: true\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Initialization Function Events and Results in TypeScript\nDESCRIPTION: This TypeScript interface defines the structure of initialization function events and results. It includes properties for the event type, request type, and resource ID. The result type is defined as the same as the event type.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/inner_workings/components/initializer.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface InitializationFunctionEvent {\n  type: \"initializationFunction\";\n  requestType: \"create\" | \"update\" | \"delete\";\n  resourceId: typeof PHYSICAL_RESOURCE_ID;\n}\n\ntype InitializationFunctionResult = InitializationFunctionEvent;\n```\n\n----------------------------------------\n\nTITLE: Configuring Wrangler for D1 Database\nDESCRIPTION: Wrangler configuration for setting up D1 database and service bindings for tag revalidation.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.5/caching.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"d1_databases\": [\n    {\n      \"binding\": \"NEXT_CACHE_D1\",\n      \"database_id\": \"<DATABASE_ID>\",\n      \"database_name\": \"<DATABASE_NAME>\",\n    },\n  ],\n  \"services\": [\n    {\n      \"binding\": \"NEXT_CACHE_REVALIDATION_WORKER\",\n      \"service\": \"<WORKER_NAME>\",\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Setting x-forwarded-host Header with CloudFront Function in TypeScript\nDESCRIPTION: A CloudFront function that runs on Viewer Request to set the frontend hostname as the x-forwarded-host header. This allows the server function to know the actual frontend host rather than using the Lambda service hostname.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/v2/advanced/workaround.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction handler(event) {\n  var request = event.request;\n  request.headers[\"x-forwarded-host\"] = request.headers.host;\n  return request;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenNext for Cloudflare\nDESCRIPTION: Example open-next.config.ts file to configure OpenNext for Cloudflare, including incremental cache setup using KV storage.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.5/get-started.mdx#2025-04-23_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineCloudflareConfig } from \"@opennextjs/cloudflare\";\nimport kvIncrementalCache from \"@opennextjs/cloudflare/kv-cache\";\n\nexport default defineCloudflareConfig({\n  incrementalCache: kvIncrementalCache,\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Scripts to package.json for OpenNextJS Cloudflare\nDESCRIPTION: JSON snippet to add to the package.json file, defining scripts for building, previewing, and deploying the Next.js app with OpenNextJS on Cloudflare, as well as generating TypeScript types.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.6/get-started.mdx#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"preview\": \"opennextjs-cloudflare build && opennextjs-cloudflare preview\",\n\"deploy\": \"opennextjs-cloudflare build && opennextjs-cloudflare deploy\",\n\"cf-typegen\": \"wrangler types --env-interface CloudflareEnv cloudflare-env.d.ts\",\n```\n\n----------------------------------------\n\nTITLE: Configuring D1 Database in Wrangler for Next.js Tag Cache\nDESCRIPTION: Wrangler configuration for setting up a D1 database and service binding for Next.js tag cache. This setup is not recommended for production use but provides an alternative caching implementation.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.6/caching.mdx#2025-04-23_snippet_10\n\nLANGUAGE: jsonc\nCODE:\n```\n// wrangler.jsonc\n{\n  // ...\n  \"name\": \"<WORKER_NAME>\",\n  \"d1_databases\": [\n    {\n      \"binding\": \"NEXT_TAG_CACHE_D1\",\n      \"database_id\": \"<DATABASE_ID>\",\n      \"database_name\": \"<DATABASE_NAME>\",\n    },\n  ],\n  \"services\": [\n    {\n      \"binding\": \"WORKER_SELF_REFERENCE\",\n      \"service\": \"<WORKER_NAME>\",\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: OpenNext Configuration Setup\nDESCRIPTION: TypeScript configuration file for OpenNext defining cache settings and middleware handling.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.3/get-started.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { OpenNextConfig } from \"@opennextjs/aws/types/open-next.js\";\nimport cache from \"@opennextjs/cloudflare/kvCache\";\n\nconst config: OpenNextConfig = {\n  default: {\n    override: {\n      wrapper: \"cloudflare-node\",\n      converter: \"edge\",\n      // set `incrementalCache` to \"dummy\" to disable KV cache\n      incrementalCache: async () => cache,\n      tagCache: \"dummy\",\n      queue: \"dummy\",\n    },\n  },\n\n  middleware: {\n    external: true,\n    override: {\n      wrapper: \"cloudflare-edge\",\n      converter: \"edge\",\n      proxyExternalRequest: \"fetch\",\n    },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring ShardedDOTagCache in TypeScript - After Migration\nDESCRIPTION: Updated configuration of ShardedDOTagCache for version 1.0.0-beta, using the new consolidated shardReplication property structure.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/migrate-from-0.6-to-1.0.0-beta.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nshardedDOTagCache({\n  baseShardSize: 4,\n  shardReplication: {\n    numberOfSoftReplicas: 4,\n    numberOfHardReplicas: 2,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining WARM_PARAMS Environment Variable Structure in TypeScript\nDESCRIPTION: This snippet shows the structure of the WARM_PARAMS environment variable used by the default invoke function. It's an array of objects containing concurrency and function name.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/inner_workings/components/warmer.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  concurrency: number;\n  function: string;\n}[]\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenNext for Local Development with TypeScript\nDESCRIPTION: A TypeScript configuration file for OpenNext that overrides default components with development-friendly alternatives. It includes settings for the default server, image optimization, and optional build command customization.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/contribute/local_run.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// open-next.local.config.ts -\n// A good practice would be to use a different name so that it doesn't conflict\n// with your existing open-next.config.ts i.e. open-next.local.config.ts\n// You could also customize it by using custom overrides if you need to.\nimport type { OpenNextConfig } from \"@opennextjs/aws/types/open-next.js\";\n\nexport default {\n  default: {\n    override: {\n      wrapper: \"express-dev\",\n      converter: \"node\",\n      incrementalCache: \"fs-dev\",\n      queue: \"direct\",\n      tagCache: \"fs-dev\",\n    },\n  },\n\n  imageOptimization: {\n    override: {\n      wrapper: \"dummy\",\n      converter: \"dummy\",\n    },\n    loader: \"fs-dev\",\n    // This part is not needed on arm linux, and image optimization will only work in linux\n    install: {\n      arch: \"x64\",\n      packages: [\"sharp\"],\n    },\n  },\n\n  // You can override the build command here so that you don't have to rebuild next every time you make a change\n  //buildCommand: \"echo 'No build command'\",\n} satisfies OpenNextConfig;\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring KV Namespace in Wrangler Configuration\nDESCRIPTION: JSON configuration for binding the KV namespace to your Cloudflare Worker. The binding must be named 'NEXT_CACHE_WORKERS_KV' for the Next.js caching system to recognize it.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.3/caching.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...\n  \"kv_namespaces\": [\n    {\n      \"binding\": \"NEXT_CACHE_WORKERS_KV\",\n      \"id\": \"<BINDING_ID>\",\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Cloudflare CF and CTX Objects in Next.js Routes\nDESCRIPTION: This example shows how to access the Cloudflare CF object (which provides request metadata) and CTX object (which provides lifecycle methods) from a Next.js route handler using the getCloudflareContext function.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.5/bindings.mdx#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getCloudflareContext } from \"@opennextjs/cloudflare\";\n\nexport async function GET(request) {\n  const { env, cf, ctx } = getCloudflareContext();\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic KV Cache in OpenNext for Cloudflare\nDESCRIPTION: Basic configuration for OpenNext with Cloudflare, enabling KV incremental cache, D1 Next tag cache, and memory queue. This setup creates a minimal caching implementation for Next.js applications.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.6/caching.mdx#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// open-next.config.ts\nimport { defineCloudflareConfig } from \"@opennextjs/cloudflare\";\nimport kvIncrementalCache from \"@opennextjs/cloudflare/kv-cache\";\nimport d1NextTagCache from \"@opennextjs/cloudflare/d1-next-tag-cache\";\nimport memoryQueue from \"@opennextjs/cloudflare/memory-queue\";\n\nexport default defineCloudflareConfig({\n  incrementalCache: kvIncrementalCache,\n  tagCache: d1NextTagCache,\n  queue: memoryQueue,\n});\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Declarations with Custom Path\nDESCRIPTION: Command to generate TypeScript type declarations with a custom output path. This allows saving the runtime.d.ts file to a specific location for better version control.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.6/bindings.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx wrangler types --experimental-include-runtime=\"./runtime.d.ts\"\n```\n\n----------------------------------------\n\nTITLE: Defining Warmer Event and Response Interfaces in TypeScript\nDESCRIPTION: These interfaces define the structure of the warmer event and its corresponding response. The event includes details like warmerId, index, concurrency, and delay, while the response contains the serverId.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/inner_workings/components/warmer.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface WarmerEvent {\n  type: \"warmer\";\n  warmerId: string;\n  index: number;\n  concurrency: number;\n  delay: number;\n}\n\ninterface WarmerResponse {\n  type: \"warmer\";\n  serverId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenNext.js Cloudflare Dev Environment in Next.js\nDESCRIPTION: Example configuration showing how to initialize OpenNext.js Cloudflare adapter for development environment using the new initOpenNextCloudflareForDev utility in next.config.mjs file.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/migrate-from-0.3-to-0.4.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// next.config.mjs\n\nimport { initOpenNextCloudflareForDev } from \"@opennextjs/cloudflare\";\n\ninitOpenNextCloudflareForDev();\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = {};\n\nexport default nextConfig;\n```\n\n----------------------------------------\n\nTITLE: Configuring Wrangler for KV and Service Bindings\nDESCRIPTION: Wrangler configuration for setting up KV namespace and service bindings for the worker.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.5/caching.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"kv_namespaces\": [\n    {\n      \"binding\": \"NEXT_CACHE_WORKERS_KV\",\n      \"id\": \"<BINDING_ID>\",\n    },\n  ],\n  \"services\": [\n    {\n      \"binding\": \"NEXT_CACHE_REVALIDATION_WORKER\",\n      \"service\": \"<WORKER_NAME>\",\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth.js Custom Encoding\nDESCRIPTION: Configuration setup for NextAuth.js using custom encode/decode functions to work around missing createCipheriv implementation. Uses SubtleCrypto-based implementations instead of default Node.js crypto.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/howtos/NextAuth.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { encode, decode } from \"@/lib/webcrypto\";\n\nexport const NEXT_AUTH_CONFIG = {\n  // ...\n  jwt: {\n    encode,\n    decode,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom App Component in Next.js\nDESCRIPTION: This code defines the default App component that wraps all pages in a Next.js application. It receives Component and pageProps as parameters and renders the Component with the pageProps spread as its properties.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/_app.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function App({ Component, pageProps }) {\n  return <Component {...pageProps} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ShardedDOTagCache in TypeScript - Before Migration\nDESCRIPTION: Example configuration of ShardedDOTagCache before the 1.0.0-beta migration, showing the deprecated enableShardReplication and shardReplicationOptions structure.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/migrate-from-0.6-to-1.0.0-beta.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nshardedDOTagCache({\n  baseShardSize: 4,\n  enableShardReplication: true,\n  shardReplicationOptions: {\n    numberOfSoftReplicas: 4,\n    numberOfHardReplicas: 2,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Small Site Wrangler Configuration\nDESCRIPTION: Wrangler configuration for a small Next.js site using R2 for incremental cache, Durable Objects for queue, and D1 for tag cache.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/caching.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"name\": \"<WORKER_NAME>\",\n  \"services\": [\n    {\n      \"binding\": \"WORKER_SELF_REFERENCE\",\n      \"service\": \"<WORKER_NAME>\",\n    },\n  ],\n  \"r2_buckets\": [\n    {\n      \"binding\": \"NEXT_INC_CACHE_R2_BUCKET\",\n      \"bucket_name\": \"<BUCKET_NAME>\",\n    },\n  ],\n  \"durable_objects\": {\n    \"bindings\": [\n      {\n        \"name\": \"NEXT_CACHE_DO_QUEUE\",\n        \"class_name\": \"DOQueueHandler\",\n      },\n    ],\n  },\n  \"migrations\": [\n    {\n      \"tag\": \"v1\",\n      \"new_sqlite_classes\": [\"DOQueueHandler\"],\n    },\n  ],\n  \"d1_databases\": [\n    {\n      \"binding\": \"NEXT_TAG_CACHE_D1\",\n      \"database_id\": \"<DATABASE_ID>\",\n      \"database_name\": \"<DATABASE_NAME>\",\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Wrangler for Next.js on Cloudflare\nDESCRIPTION: Example wrangler.jsonc configuration file for deploying a Next.js app on Cloudflare Workers. It includes necessary settings for compatibility and asset handling.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.5/get-started.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"$schema\": \"node_modules/wrangler/config-schema.json\",\n  \"main\": \".open-next/worker.js\",\n  \"name\": \"my-app\",\n  \"compatibility_date\": \"2024-12-30\",\n  \"compatibility_flags\": [\"nodejs_compat\"],\n  \"assets\": {\n    \"directory\": \".open-next/assets\",\n    \"binding\": \"ASSETS\"\n  },\n  \"kv_namespaces\": [\n    // Create a KV binding with the binding name \"NEXT_CACHE_WORKERS_KV\"\n    // to enable the KV based caching:\n    // {\n    //   \"binding\": \"NEXT_CACHE_WORKERS_KV\",\n    //   \"id\": \"<BINDING_ID>\"\n    // }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js for Cloudflare Development\nDESCRIPTION: Update the Next.js configuration to use initOpenNextCloudflareForDev, allowing access to Cloudflare resources during local development with next dev.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/howtos/dev-deploy.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// next.config.ts\nimport type { NextConfig } from \"next\";\n\nconst nextConfig: NextConfig = {\n  /* config options here */\n};\n\nexport default nextConfig;\n\nimport { initOpenNextCloudflareForDev } from \"@opennextjs/cloudflare\";\ninitOpenNextCloudflareForDev();\n```\n\n----------------------------------------\n\nTITLE: Handling Type Imports in Open-next ESBuild Plugin Overrides\nDESCRIPTION: Illustrates the correct way to handle type imports when using the Open-next ESBuild plugin. It shows how to place type imports outside of override blocks to avoid issues with ESBuild comment removal.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/v2/inner_workings/plugin.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { PluginHandler } from \"../next-types.js\";\nimport type { IncomingMessage } from \"../request.js\";\nimport type { ServerResponse } from \"../response.js\";\n\n//#override imports\nimport { requestHandler } from \"./util.js\";\n//#endOverride\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenNextJS for Cloudflare\nDESCRIPTION: TypeScript configuration file (open-next.config.ts) that defines settings for OpenNextJS, including setting up KV-based incremental cache for Next.js applications on Cloudflare.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.6/get-started.mdx#2025-04-23_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineCloudflareConfig } from \"@opennextjs/cloudflare\";\nimport kvIncrementalCache from \"@opennextjs/cloudflare/overrides/incremental-cache/kv-incremental-cache\";\n\nexport default defineCloudflareConfig({\n  incrementalCache: kvIncrementalCache,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating open-next.config.ts for OpenNext.js 0.3\nDESCRIPTION: This snippet demonstrates how to create the open-next.config.ts file required for OpenNext.js 0.3. It configures the Cloudflare adapter settings, including cache, wrapper, and converter options.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/migrate-from-0.2-to-0.3.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { OpenNextConfig } from \"@opennextjs/aws/types/open-next.js\";\nimport cache from \"@opennextjs/cloudflare/kvCache\";\n\nconst config: OpenNextConfig = {\n  default: {\n    override: {\n      wrapper: \"cloudflare-node\",\n      converter: \"edge\",\n      // Set `incrementalCache` to \"dummy\" to disable KV cache\n      incrementalCache: async () => cache,\n      tagCache: \"dummy\",\n      queue: \"dummy\",\n    },\n  },\n\n  middleware: {\n    external: true,\n    override: {\n      wrapper: \"cloudflare-edge\",\n      converter: \"edge\",\n      proxyExternalRequest: \"fetch\",\n    },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js to Exclude Unwanted Packages\nDESCRIPTION: Demonstrates how to configure next.config.js to exclude specific packages from the output file tracing, which can help reduce bundle size.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/common_issues.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexperimental: {\n    outputFileTracingExcludes: {\n      \"*\": [\"node_modules/the-unwanted-package\"],\n    },\n  },\n```\n\n----------------------------------------\n\nTITLE: Configuring Cloudflare Wrangler Settings\nDESCRIPTION: Wrangler configuration for setting up Durable Objects bindings, migrations, and service references. Includes setup for queue handler and sharded tag cache.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/caching.mdx#2025-04-23_snippet_18\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"durable_objects\": {\n    \"bindings\": [\n      {\n        \"name\": \"NEXT_CACHE_DO_QUEUE\",\n        \"class_name\": \"DOQueueHandler\",\n      },\n      {\n        \"name\": \"NEXT_TAG_CACHE_DO_SHARDED\",\n        \"class_name\": \"DOShardedTagCache\",\n      },\n    ],\n  },\n  \"migrations\": [\n    {\n      \"tag\": \"v1\",\n      \"new_sqlite_classes\": [\"DOQueueHandler\", \"DOShardedTagCache\"],\n    },\n  ],\n  \"services\": [\n    {\n      \"binding\": \"WORKER_SELF_REFERENCE\",\n      \"service\": \"<WORKER_NAME>\",\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Wrangler Configuration Setup\nDESCRIPTION: Configuration file for Wrangler defining Worker settings, assets, and KV namespace bindings.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.3/get-started.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"$schema\": \"node_modules/wrangler/config-schema.json\",\n  \"main\": \".open-next/worker.js\",\n  \"name\": \"my-app\",\n  \"compatibility_date\": \"2024-12-30\",\n  \"compatibility_flags\": [\"nodejs_compat\"],\n  \"assets\": {\n    \"directory\": \".open-next/assets\",\n    \"binding\": \"ASSETS\"\n  },\n  \"kv_namespaces\": [\n    // Create a KV binding with the binding name \"NEXT_CACHE_WORKERS_KV\"\n    // to enable the KV based caching:\n    // {\n    //   \"binding\": \"NEXT_CACHE_WORKERS_KV\",\n    //   \"id\": \"<BINDING_ID>\"\n    // }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DynamoDB Tag Structure in TypeScript\nDESCRIPTION: TypeScript interface defining the structure of tags stored in DynamoDB for Next.js page revalidation. Each tag includes the page path, the tag name, and a timestamp of when the page was last revalidated.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/inner_workings/components/server/node.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Tag = {\n  path: string; // The path of the page\n  tag: string; // The tag of the page\n  revalidatedAt: number; // The time at which the page has been revalidated\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing KV Namespace Bindings in Next.js Route Handlers with OpenNextJS\nDESCRIPTION: This code demonstrates how to access a Cloudflare KV Namespace binding from a Next.js route handler using the getCloudflareContext function from @opennextjs/cloudflare. It shows storing and retrieving a value from the KV namespace.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.5/bindings.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getCloudflareContext } from \"@opennextjs/cloudflare\";\n\nexport async function GET(request) {\n  let responseText = \"Hello World\";\n\n  const myKv = getCloudflareContext().env.MY_KV_NAMESPACE;\n  await myKv.put(\"foo\", \"bar\");\n  const foo = await myKv.get(\"foo\");\n\n  return new Response(foo);\n}\n```\n\n----------------------------------------\n\nTITLE: Building Next.js App with OpenNext for AWS Deployment\nDESCRIPTION: This command builds a Next.js application using OpenNext, preparing it for deployment to AWS. It's a prerequisite step when using frameworks other than SST for deployment.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/get_started.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx @opennextjs/aws@latest build\n```\n\n----------------------------------------\n\nTITLE: Inline CloudFront Function for Request Header Modification\nDESCRIPTION: JavaScript function that runs at the CloudFront edge to modify request headers. It adds the 'x-forwarded-host' header with the value of the original host header to preserve host information.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/reference-implementation.mdx#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction handler(event) {\n\tvar request = event.request;\n\trequest.headers[\"x-forwarded-host\"] = request.headers.host;\n\treturn request;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring KV Namespace Binding in Worker Configuration\nDESCRIPTION: TOML configuration for binding the KV namespace to a Cloudflare Worker. The binding name 'NEXT_CACHE_WORKERS_KV' is used by default but can be customized using the __OPENNEXT_KV_BINDING_NAME environment variable.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.2/caching.mdx#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[[kv_namespaces]]\nbinding = \"NEXT_CACHE_WORKERS_KV\"\nid = \"<YOUR_NAMESPACE_ID>\"\n```\n\n----------------------------------------\n\nTITLE: Package.json Scripts Configuration\nDESCRIPTION: NPM scripts for building, previewing, and deploying the application to Cloudflare Workers.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.3/get-started.mdx#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"build:worker\": \"opennextjs-cloudflare\",\n\"dev:worker\": \"wrangler dev --port 8771\",\n\"preview\": \"npm run build:worker && npm run dev:worker\",\n\"deploy\": \"npm run build:worker && wrangler deploy\",\n\"cf-typegen\": \"wrangler types --env-interface CloudflareEnv cloudflare-env.d.ts\"\n```\n\n----------------------------------------\n\nTITLE: Defining RevalidateEvent and RevalidateResult Interfaces in TypeScript for OpenNextJS\nDESCRIPTION: This code snippet defines two TypeScript interfaces: RevalidateEvent and RevalidateResult. RevalidateEvent represents the structure of a revalidation event, containing an array of records with host and URL information. RevalidateResult is a simple interface indicating the type of the result.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/inner_workings/components/revalidation.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RevalidateEvent {\n  type: \"revalidate\";\n  records: {\n    host: string;\n    url: string;\n  }[];\n}\ninterface RevalidateResult {\n  type: \"revalidate\";\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing KV Storage from Next.js Route Handler using Cloudflare Bindings\nDESCRIPTION: Shows how to access a Cloudflare KV namespace binding from a Next.js route handler using getCloudflareContext(). This example demonstrates retrieving the environment bindings, storing a value in KV storage, and returning it in the response.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.2/bindings.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getCloudflareContext } from \"@opennextjs/cloudflare\";\n\nexport async function GET(request) {\n  let responseText = \"Hello World\";\n\n  const myKv = (await getCloudflareContext()).env.MY_KV_NAMESPACE;\n  await myKv.put(\"foo\", \"bar\");\n  const foo = await myKv.get(\"foo\");\n\n  return new Response(foo);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Wrangler Environment Variables for NPM Package Compatibility\nDESCRIPTION: These environment variables modify how Wrangler resolves multiple exports in NPM packages. Setting WRANGLER_BUILD_PLATFORM to \"node\" ensures that the Node.js export is used when available, which can resolve compatibility issues with certain packages.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/troubleshooting.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nWRANGLER_BUILD_CONDITIONS=\"\"\nWRANGLER_BUILD_PLATFORM=\"node\"\n```\n\n----------------------------------------\n\nTITLE: Origin Resolver Type Definition\nDESCRIPTION: TypeScript type definition for the custom origin resolver function that can be implemented to override default origin resolution behavior.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/inner_workings/components/middleware.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype OriginResolver = BaseOverride & {\n  resolve: (path: string) => Promise<Origin | false>;\n};\n```\n\n----------------------------------------\n\nTITLE: Wrangler Configuration\nDESCRIPTION: Configuration file for Wrangler CLI defining Worker settings and resource bindings\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/get-started.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"$schema\": \"node_modules/wrangler/config-schema.json\",\n  \"main\": \".open-next/worker.js\",\n  \"name\": \"my-app\",\n  \"compatibility_date\": \"2024-12-30\",\n  \"compatibility_flags\": [\"nodejs_compat\"],\n  \"assets\": {\n    \"directory\": \".open-next/assets\",\n    \"binding\": \"ASSETS\"\n  },\n  \"services\": [\n    {\n      \"binding\": \"WORKER_SELF_REFERENCE\",\n      \"service\": \"my-app\"\n    }\n  ],\n  \"r2_buckets\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Next.js App for Cloudflare with OpenNextJS\nDESCRIPTION: This command creates a new Next.js application pre-configured to run on Cloudflare using the @opennextjs/cloudflare adapter. It uses Cloudflare's CLI tool with the experimental flag to set up the project structure.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.3/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create cloudflare@latest -- my-next-app --framework=next --experimental\n```\n\n----------------------------------------\n\nTITLE: Defining ImageLoader Type for Next.js Image Optimization in TypeScript\nDESCRIPTION: This code snippet defines the ImageLoader type used for customizing the image loader in Next.js. It extends BaseOverride and includes a load function that returns a Promise with optional body, contentType, and cacheControl properties.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/inner_workings/components/image_optimization.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype ImageLoader = BaseOverride & {\n  load: (url: string) => Promise<{\n    body?: Readable;\n    contentType?: string;\n    cacheControl?: string;\n  }>;\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling Powered-By Header in Next.js Configuration\nDESCRIPTION: Configuration to opt out of the default x-powered-by header in Next.js and OpenNext. This setting is added to the next.config.js file.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/config.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nmodule.exports = {\n  poweredByHeader: false,\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a New Next.js App for Cloudflare Deployment\nDESCRIPTION: Command to create a new Next.js application pre-configured to run on Cloudflare using the @opennextjs/cloudflare adapter. This uses the Cloudflare CLI to scaffold a project with the necessary dependencies and configuration.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.2/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create cloudflare@latest -- my-next-app --framework=next --experimental\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.config.js for OpenNext in Nx Monorepo\nDESCRIPTION: Updates the next.config.js file to add 'output: standalone' and configure the output file tracing root to support OpenNext in a monorepo context.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/config/nx.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n//@ts-check\n\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst { composePlugins, withNx } = require('@nx/next');\nconst { join } = require('node:path');\n\n/**\n * @type {import('@nx/next/plugins/with-nx').WithNxOptions}\n **/\nconst nextConfig = {\n   nx: {\n     // Set this to true if you would like to use SVGR\n     // See: https://github.com/gregberge/svgr\n     svgr: false,\n   },\n+   output: 'standalone',\n+   experimental: {\n+      // this should be the path to the root of your repo, in this case it's just two levels down. needed for open-next to detect that it's a monorepo\n+     outputFileTracingRoot: join(__dirname, '../../'),\n+   },\n};\n\nconst plugins = [\n   // Add more Next.js plugins to this list if needed.\n   withNx,\n];\n\nmodule.exports = composePlugins(...plugins)(nextConfig);\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Types with Custom Output Path\nDESCRIPTION: Command to generate TypeScript type declarations for Cloudflare bindings with a custom output path. This allows you to save the generated types file to a specific location that can be committed to version control.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/bindings.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx wrangler types --env-interface CloudflareEnv ./runtime.d.ts\n```\n\n----------------------------------------\n\nTITLE: Creating a New Next.js App for Cloudflare with OpenNextJS\nDESCRIPTION: Command to create a new Next.js application pre-configured to run on Cloudflare using @opennextjs/cloudflare through the Cloudflare CLI.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.6/get-started.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm create cloudflare@latest -- my-next-app --framework=next --experimental\n```\n\n----------------------------------------\n\nTITLE: Using Wildcard Paths for Cost-Effective CloudFront Invalidation\nDESCRIPTION: Examples showing how to use wildcard paths for CloudFront invalidation to reduce costs. Invalidating individual paths incurs charges after the first 1,000 paths per month, while using wildcards can be more cost-effective.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/v2/common_issues/isr.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// This costs $0.005 x 3 = $0.015 after the first 1000 paths\nawait invalidateCloudFrontPaths([\"/page/a\", \"/page/b\", \"/page/c\"]);\n\n// This costs $0.005, but also invalidates other routes such as \"page/d\"\nawait invalidateCloudFrontPaths([\"/page/*\"]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js for Cloudflare Development\nDESCRIPTION: TypeScript code snippet showing how to modify the Next.js configuration file to integrate with the OpenNext Cloudflare adapter for local development.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.5/get-started.mdx#2025-04-23_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\n// next.config.ts\nimport type { NextConfig } from \"next\";\n\nconst nextConfig: NextConfig = {\n  /* config options here */\n};\n\nexport default nextConfig;\n\nimport { initOpenNextCloudflareForDev } from \"@opennextjs/cloudflare\";\ninitOpenNextCloudflareForDev();\n```\n\n----------------------------------------\n\nTITLE: Creating a New Next.js App for Cloudflare Workers\nDESCRIPTION: Command to create a new Next.js application pre-configured to run on Cloudflare using @opennextjs/cloudflare.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/howtos/dev-deploy.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create cloudflare@latest -- my-next-app --framework=next --platform=workers\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Mode in OpenNext\nDESCRIPTION: Examples for enabling debug mode in OpenNext, which prevents minification, enables sourcemaps, and adds additional logging. This is useful for development but not recommended for production due to increased code size and logging volume.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/v2/advanced/options.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# CLI\nOPEN_NEXT_DEBUG=true npx open-next@latest build\n```\n\nLANGUAGE: ts\nCODE:\n```\n// JS\nimport { build } from \"open-next/build.js\";\n\nawait build({\n  debug: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Types with Custom Path for Cloudflare Worker Bindings\nDESCRIPTION: Command to generate TypeScript types for Cloudflare Worker bindings with a custom output path, which makes it easier to commit the type definitions to version control.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.5/bindings.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx wrangler types --experimental-include-runtime=\"./runtime.d.ts\"\n```\n\n----------------------------------------\n\nTITLE: Creating New Next.js App with Cloudflare Integration\nDESCRIPTION: Command to create a new Next.js application that's pre-configured to run on Cloudflare using the @opennextjs/cloudflare package. Uses the experimental flag for latest features.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.3/examples.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create cloudflare@latest -- my-next-app --framework=next --experimental\n```\n\n----------------------------------------\n\nTITLE: Cache Control Configuration for Hashed Assets\nDESCRIPTION: Cache control header configuration for hashed files stored in .open-next/assets/_next. These files contain hash values in filenames and should be cached at both CDN and browser levels.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/inner_workings/architecture.mdx#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npublic,max-age=31536000,immutable\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenNextJS Cloudflare in Next.js Config\nDESCRIPTION: Next.js configuration file that initializes OpenNextJS Cloudflare integration for local development, enabling access to local versions of Cloudflare bindings in server code.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.6/get-started.mdx#2025-04-23_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\n// next.config.ts\nimport type { NextConfig } from \"next\";\n\nconst nextConfig: NextConfig = {\n  /* config options here */\n};\n\nexport default nextConfig;\n\nimport { initOpenNextCloudflareForDev } from \"@opennextjs/cloudflare\";\ninitOpenNextCloudflareForDev();\n```\n\n----------------------------------------\n\nTITLE: Installing Wrangler CLI\nDESCRIPTION: Command to install the Wrangler CLI as a dev dependency, which is required for deploying Next.js apps using @opennextjs/cloudflare.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.5/get-started.mdx#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev wrangler@latest\n```\n\n----------------------------------------\n\nTITLE: Monorepo Server Function Structure\nDESCRIPTION: Directory structure showing the organization of NextServer, dependencies, and server function adapter in a monorepo setup.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/inner_workings/architecture.mdx#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n  packages/\n    web/\n      .next/                -> NextServer\n+     .open-next/\n      node_modules/          -> dependencies from root node_modules (optional)\n+     index.mjs              -> server function adapter\n  node_modules/              -> dependencies from package node_modules\n+ index.mjs                  -> adapter wrapper\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Types for Cloudflare Worker Bindings\nDESCRIPTION: Command to generate TypeScript type declarations for Cloudflare Worker bindings to ensure type safety when accessing bindings. This allows TypeScript to correctly type the env object returned by getCloudflareContext().\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.5/bindings.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx wrangler types --experimental-include-runtime\n```\n\n----------------------------------------\n\nTITLE: Installing OpenNext Cloudflare Package\nDESCRIPTION: Command to install the @opennextjs/cloudflare package as a development dependency.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.2/get-started.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev @opennextjs/cloudflare\n```\n\n----------------------------------------\n\nTITLE: Cache Control Configuration for Un-hashed Assets\nDESCRIPTION: Cache control header configuration for un-hashed files from public/ folder. These files should be cached at CDN level but not browser level, requiring CDN cache invalidation on content updates.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/inner_workings/architecture.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\npublic,max-age=0,s-maxage=31536000,must-revalidate\n```\n\n----------------------------------------\n\nTITLE: Analyzing Node Module Sizes in Bash\nDESCRIPTION: Command to identify large modules in the server-function node_modules directory by listing them sorted by size in descending order.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/v2/common_issues/bundle_size.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndu -hs .open-next/server-function/node_modules/* | sort -rh\n```\n\n----------------------------------------\n\nTITLE: Installing Wrangler CLI\nDESCRIPTION: Command to install Wrangler CLI as a development dependency for Cloudflare Workers deployment\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/get-started.mdx#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev wrangler@latest\n```\n\n----------------------------------------\n\nTITLE: Standard Server Function Structure\nDESCRIPTION: Directory structure showing the organization of NextServer, dependencies, and server function adapter in a standard setup.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/inner_workings/architecture.mdx#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n  .next/                -> NextServer\n+ .open-next/\n  node_modules/         -> dependencies\n+ index.mjs             -> server function adapter\n```\n\n----------------------------------------\n\nTITLE: Large Site Wrangler Configuration\nDESCRIPTION: Wrangler configuration for a large Next.js site using ShardedDOTagCache for improved performance.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/caching.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"name\": \"<WORKER_NAME>\",\n  \"services\": [\n    {\n      \"binding\": \"WORKER_SELF_REFERENCE\",\n      \"service\": \"<WORKER_NAME>\",\n    },\n  ],\n  \"r2_buckets\": [\n    {\n      \"binding\": \"NEXT_INC_CACHE_R2_BUCKET\",\n      \"bucket_name\": \"<BUCKET_NAME>\",\n    },\n  ],\n  \"durable_objects\": {\n    \"bindings\": [\n      {\n        \"name\": \"NEXT_CACHE_DO_QUEUE\",\n        \"class_name\": \"DOQueueHandler\",\n      },\n      {\n        \"name\": \"NEXT_TAG_CACHE_DO_SHARDED\",\n        \"class_name\": \"DOShardedTagCache\",\n      },\n    ],\n  },\n  \"migrations\": [\n    {\n      \"tag\": \"v1\",\n      \"new_sqlite_classes\": [\n        \"DOQueueHandler\",\n        \"DOShardedTagCache\",\n      ],\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Build Warning for Durable Objects in OpenNext\nDESCRIPTION: Console output showing the warning message that appears during Next.js build when Durable Objects are configured for caching. The warning indicates that internal Durable Objects bindings won't work in local development but will function in production.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/known-issues.mdx#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n┌─────────────────────────────────┐\n│ OpenNext — Building Next.js app │\n└─────────────────────────────────┘\n\n\n> next build\n\n   ▲ Next.js 15.2.4\n\n▲ [WARNING] \t\t\t\tYou have defined bindings to the following internal Durable Objects:\n\n  \t\t\t\t- {\"name\":\"NEXT_CACHE_DO_QUEUE\",\"class_name\":\"DOQueueHandler\"}\n  \t\t\t\tThese will not work in local development, but they should work in production.\n\n  \t\t\t\tIf you want to develop these locally, you can define your DO in a separate Worker, with a\n  separate configuration file.\n  \t\t\t\tFor detailed instructions, refer to the Durable Objects section here:\n  https://developers.cloudflare.com/workers/wrangler/api#supported-bindings\n\n   Creating an optimized production build ...\nworkerd/server/server.c++:1951: warning: A DurableObjectNamespace in the config referenced the class \"DOQueueHandler\", but no such Durable Object class is exported from the worker. Please make sure the class name matches, it is exported, and the class extends 'DurableObject'. Attempts to call to this Durable Object class will fail at runtime, but historically this was not a startup-time error. Future versions of workerd may make this a startup-time error.\n```\n\n----------------------------------------\n\nTITLE: OpenNext External Request Proxy Options\nDESCRIPTION: Overview of three different proxy implementation options available in OpenNext: node-based proxy using node-proxy, fetch-based proxy for non-Node.js environments, and a dummy implementation that throws a FatalError.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/config/overrides/proxy_external_request.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### node\n\nThis uses node-proxy to proxy the request to the external service.\n\n### fetch\n\nThis uses fetch to proxy the request to the external service. It doesn't work in Node.js\n\n### dummy\n\nThis is a dummy implementation that throws a FatalError.\n```\n\n----------------------------------------\n\nTITLE: Enabling Server Function Minification in OpenNext\nDESCRIPTION: Examples showing how to enable the experimental server function minification feature, which can reduce bundle size by approximately 40% using node-minify. Shows both CLI and JavaScript API approaches.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/v2/advanced/options.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# CLI\nopen-next build --minify\n```\n\nLANGUAGE: ts\nCODE:\n```\n// JS\nimport { build } from \"open-next/build.js\";\n\nawait build({\n  minify: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Updating wrangler.toml for OpenNext.js 0.3\nDESCRIPTION: This snippet shows the necessary changes to the wrangler.toml file for OpenNext.js 0.3. It updates the main entry point and assets directory location.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/migrate-from-0.2-to-0.3.mdx#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n# CHANGED: new entry point location\nmain = \".open-next/worker.js\"\nname = \"my-app\"\n\ncompatibility_date = \"2024-09-23\"\ncompatibility_flags = [\"nodejs_compat\"]\n\n# The binding name must be \"ASSETS\" when the cache is enabled\n# CHANGED: output folder location\nassets = { directory = \".open-next/assets\", binding = \"ASSETS\" }\n```\n\n----------------------------------------\n\nTITLE: Adding SST Deploy Target to Nx Project Configuration\nDESCRIPTION: Adds a deploy target to the Nx project configuration that depends on the open-next-build target and configures stage-based deployments.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/config/nx.mdx#2025-04-23_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n{\n  \"name\": \"next-site\",\n  \"$schema\": \"../../node_modules/nx/schemas/project-schema.json\",\n  \"sourceRoot\": \"apps/next-site\",\n  \"projectType\": \"application\",\n  \"tags\": [],\n  \"targets\": {\n    \"open-next-build\": {\n      \"executor\": \"nx:run-commands\",\n      \"dependsOn\": [\"build\"],\n      \"cache\": true,\n      \"outputs\": [\"{projectRoot}/.open-next\"],\n      \"options\": {\n        \"cwd\": \"apps/next-site\",\n        \"command\": \"open-next build\"\n      }\n+    },\n+    \"deploy\": {\n+      \"executor\": \"nx:run-commands\",\n+      \"dependsOn\": [\"open-next-build\"],\n+      \"options\": {\n+        \"cwd\": \"apps/next-site\",\n+        \"command\": \"sst deploy --stage {args.stage}\", // here we use nx's interpolation to allow --stage to be passed, with some configuration examples below\n+        \"forwardAllArgs\": true\n+      },\n+      \"defaultConfiguration\": \"dev\",\n+      \"configurations\": {\n+        \"production\": {\n+          \"args\": [\"--stage=production\"]\n+        },\n+        \"staging\": {\n+          \"args\": [\"--stage=staging\"]\n+        },\n+        \"dev\": {\n+          \"args\": [\"--stage=development\"]\n+        }\n+      }\n+    }\n+  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling KV Cache in OpenNext Config\nDESCRIPTION: TypeScript configuration to enable KV incremental cache in OpenNext project settings.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.6/caching.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineCloudflareConfig } from \"@opennextjs/cloudflare\";\nimport kvIncrementalCache from \"@opennextjs/cloudflare/overrides/incremental-cache/kv-incremental-cache\";\n\nexport default defineCloudflareConfig({\n  incrementalCache: kvIncrementalCache,\n});\n```\n\n----------------------------------------\n\nTITLE: Adding .dev.vars file for OpenNext.js 0.3\nDESCRIPTION: This snippet shows the content of the .dev.vars file needed for OpenNext.js 0.3. It sets the NEXTJS_ENV variable for local development.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/migrate-from-0.2-to-0.3.mdx#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nNEXTJS_ENV=development\n```\n\n----------------------------------------\n\nTITLE: Exploring the OpenNext Directory Structure for AWS Deployment\nDESCRIPTION: Shows the directory structure created by OpenNext in the .open-next folder after transforming a Next.js application. The structure includes static assets, server functions, and specialized Lambda handlers for revalidation, image optimization, and other AWS-specific components.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/inner_workings.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmy-next-app/\n  .open-next/\n    cache/                         -> ISR cache files to upload - This cannot be directly served\n    assets/                        -> Static files to upload\n    server-functions/\n      default/                     -> Handler code for the default server\n      other-fn/                    -> Handler code for another backend\n    revalidation-function/         -> Handler code for revalidation backend\n    image-optimization-function/   -> Handler code for image optimization backend\n    warmer-function/               -> Cron job code to keep server function warm - Not mandatory\n    dynamodb-provider/               -> Code for a custom resource to populate the Tag Cache - Only necessary for app dir\n```\n\n----------------------------------------\n\nTITLE: Initializing the Cache During OpenNextJS Deployments\nDESCRIPTION: These commands are used to initialize the cache during deployment of an OpenNextJS application. They populate the cache with build-time revalidation data to ensure proper functionality of ISR and on-demand revalidation.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/caching.mdx#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n# Populate remote and deploy the worker immediately.\nopennextjs-cloudflare deploy\n\n# Populate remote and upload a new version of the worker.\nopennextjs-cloudflare upload\n\n# Populate local and start dev server.\nopennextjs-cloudflare preview\n```\n\n----------------------------------------\n\nTITLE: Removing next-on-pages Configuration\nDESCRIPTION: Diff showing the removal of @cloudflare/next-on-pages configuration from package.json\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.2/get-started.mdx#2025-04-23_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n\"scripts\": {\n-    \"pages:build\": \"npx @cloudflare/next-on-pages\",\n-    \"preview\": \"npm run pages:build && wrangler pages dev\",\n-    \"deploy\": \"npm run pages:build && wrangler pages deploy\"\n\n\"devDependencies\": {\n-    \"@cloudflare/next-on-pages\": \"*\",\n```\n\n----------------------------------------\n\nTITLE: Running Nx Deploy Commands with SST\nDESCRIPTION: Examples of how to run the deploy command with different stage configurations using the Nx CLI.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/config/nx.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ nx deploy next-site --configuration dev # using dev configuration (which sets the stage to development)\n# nx deploy next-site -c dev # OR\n# nx deploy next-site --stage my-stage # Custom Stage\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenNext Cache with KV and Memory Queue\nDESCRIPTION: TypeScript configuration for setting up KV incremental cache and memory queue in OpenNext.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.5/caching.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineCloudflareConfig } from \"@opennextjs/cloudflare\";\nimport kvIncrementalCache from \"@opennextjs/cloudflare/kv-cache\";\nimport memoryQueue from \"@opennextjs/cloudflare/memory-queue\";\n\nexport default defineCloudflareConfig({\n  incrementalCache: kvIncrementalCache,\n  queue: memoryQueue,\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Next.js Config\nDESCRIPTION: Diff showing the removal of setupDevPlatform configuration from next.config.mjs\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.2/get-started.mdx#2025-04-23_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n- import { setupDevPlatform } from '@cloudflare/next-on-pages/next-dev';\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = {};\n\n- if (process.env.NODE_ENV === 'development') {\n-   await setupDevPlatform();\n- }\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenNext Replacement Plugin in TypeScript\nDESCRIPTION: Demonstrates the setup of the OpenNext Replacement Plugin for modifying source code. The plugin allows replacing specific code blocks and injecting imports at the top of files using special comment markers.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/contribute/plugin.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nopenNextPlugin({\n    // The target file to replace code in\n    target: /plugins\\/default\\.js/g,\n    // This is where the plugin will look for the code to replace\n    replacements: [require.resolve(\"./plugins/default.js\")],\n    // This is to delete some code from the target file\n    deletes: [\"id1\"],\n  })\n\n  //To inject arbritary code by using (import at top of file):\n\n  //#import\n\n  import data from 'data'\n  const datum = data.datum\n\n  //#endImport\n\n  To replace code:\n\n  //#override id1\n\n  export function overrideMe() {\n     // I will replace the \"id1\" block in the target file\n  }\n\n  //#endOverride\n```\n\n----------------------------------------\n\nTITLE: Configuring Wrangler\nDESCRIPTION: Basic Wrangler configuration file (wrangler.toml) setup for Next.js application deployment.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.2/get-started.mdx#2025-04-23_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\nmain = \".worker-next/index.mjs\"\nname = \"my-app\"\ncompatibility_date = \"2024-09-23\"\ncompatibility_flags = [\"nodejs_compat\"]\nassets = { directory = \".worker-next/assets\", binding = \"ASSETS\" }\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Types for Cloudflare Bindings with Wrangler\nDESCRIPTION: Command to generate TypeScript type declarations for Cloudflare bindings that match your Worker's configuration. This ensures type safety when accessing bindings through getCloudflareContext().env.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/bindings.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx wrangler types --env-interface CloudflareEnv\n```\n\n----------------------------------------\n\nTITLE: Excluding Canvas Module in Next.js Configuration\nDESCRIPTION: Next.js configuration to exclude the canvas module from output file tracing, which helps reduce bundle size when using pdfjs.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/v2/common_issues/bundle_size.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n  experimental: {\n    outputFileTracingExcludes: {\n      \"*\": [\"node_modules/canvas\"],\n    },\n  },\n```\n\n----------------------------------------\n\nTITLE: Next.js Import Statements\nDESCRIPTION: Import statements for Callout component from nextra and WindowsSupport component\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.5/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Callout } from \"nextra/components\";\nimport WindowsSupport from \"../../../../shared/WindowsSupport.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Creating New Next.js App with Cloudflare\nDESCRIPTION: Command to create a new Next.js application pre-configured for Cloudflare using @opennextjs/cloudflare\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/get-started.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm create cloudflare@latest -- my-next-app --framework=next --platform=workers\n```\n\n----------------------------------------\n\nTITLE: Adding NPM Scripts\nDESCRIPTION: Package.json script configurations for building, developing, previewing, and deploying the Next.js application.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.2/get-started.mdx#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"build:worker\": \"cloudflare\",\n\"dev:worker\": \"wrangler dev --port 8771\",\n\"preview:worker\": \"npm run build:worker && npm run dev:worker\",\n\"deploy:worker\": \"npm run build:worker && wrangler deploy\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Paths for On-Demand Revalidation Tags\nDESCRIPTION: This function queries a DynamoDB table to retrieve paths associated with a given tag for on-demand revalidation. It uses the AWS SDK for DynamoDB and handles error cases.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/inner_workings/caching.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DynamoDBClient, QueryCommand } from \"@aws-sdk/client-dynamodb\";\n\nconst client = new DynamoDBClient({ region: process.env.CACHE_BUCKET_REGION });\n\nasync function getPaths(tag: string) {\n  try {\n    const { Items } = await client.send(\n      new QueryCommand({\n        TableName: process.env.CACHE_DYNAMO_TABLE,\n        KeyConditionExpression: \"#tag = :tag\",\n        ExpressionAttributeNames: {\n          \"#tag\": \"tag\",\n        },\n        ExpressionAttributeValues: {\n          \":tag\": { S: `${process.env.NEXT_BUILD_ID}/${tag}` },\n        },\n      })\n    );\n    return Items?.map((item) => item.path?.S?.replace(`${process.env.NEXT_BUILD_ID}/`, \"\") ?? \"\") ?? [];\n  } catch (e) {\n    console.error(\"Failed to get by tag\", e);\n    return [];\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Build Command in OpenNext\nDESCRIPTION: Examples of how to specify a custom build command instead of the default 'build' script in package.json. Shows both CLI and JavaScript API approaches.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/v2/advanced/options.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# CLI\nopen-next build --build-command \"pnpm custom:build\"\n```\n\nLANGUAGE: ts\nCODE:\n```\n// JS\nimport { build } from \"open-next/build.js\";\n\nawait build({\n  buildCommand: \"pnpm custom:build\",\n});\n```\n\n----------------------------------------\n\nTITLE: Importing SITE Configuration and Callout Component in Next.js\nDESCRIPTION: This snippet imports the SITE configuration and the Callout component from Nextra, which are likely used for site-wide settings and UI elements in the Next.js application.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/netlify/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SITE } from \"../../config\";\nimport { Callout } from \"nextra/components\";\n```\n\n----------------------------------------\n\nTITLE: Calculating Monthly Cost for Lambda Warmed Instances\nDESCRIPTION: Calculates the total monthly cost for keeping multiple Lambda instances warm, including EventBridge scheduler, warmer function, and server function costs.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/v2/inner_workings/warming.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n$0.00864 + $0.145728288 + $0.0161280288 x 50 = $0.960769728\n```\n\n----------------------------------------\n\nTITLE: Environment Variables for DynamoDB TagCache\nDESCRIPTION: Required environment variables that must be set for the DynamoDB TagCache implementation. The implementation uses @aws-sdk/client-dynamodb and requires a DynamoDB table with specific primary and sort keys.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/config/overrides/tag_cache.mdx#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCACHE_DYNAMO_TABLE\nCACHE_BUCKET_REGION\n```\n\n----------------------------------------\n\nTITLE: Building Open Next.js with Streaming Support\nDESCRIPTION: Command to build an Open Next.js project with experimental streaming support enabled. This is required to use AWS Lambda's response streaming capability.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/v2/inner_workings/streaming.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopen-next build --streaming\n```\n\n----------------------------------------\n\nTITLE: Deploying to Cloudflare Workers\nDESCRIPTION: Command to deploy the Next.js application to Cloudflare Workers\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/get-started.mdx#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nnpm run deploy\n```\n\n----------------------------------------\n\nTITLE: Using aws4fetch in OpenNextJS Configuration\nDESCRIPTION: This configuration demonstrates how to use aws4fetch instead of AWS SDK in OpenNextJS. It overrides the default settings for tag cache, incremental cache, and queue to use lightweight versions, potentially reducing cold start times.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/config/simple_example.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { OpenNextConfig } from \"@opennextjs/aws/types/open-next.js\";\nconst config = {\n  default: {\n    override: {\n      tagCache: \"dynamodb-lite\",\n      incrementalCache: \"s3-lite\",\n      queue: \"sqs-lite\",\n    },\n  },\n} satisfies OpenNextConfig;\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Wrangler for KV Cache\nDESCRIPTION: Wrangler configuration for setting up KV namespace and service bindings for the worker.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.6/caching.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"name\": \"<WORKER_NAME>\",\n  \"kv_namespaces\": [\n    {\n      \"binding\": \"NEXT_INC_CACHE_KV\",\n      \"id\": \"<BINDING_ID>\",\n    },\n  ],\n  \"services\": [\n    {\n      \"binding\": \"WORKER_SELF_REFERENCE\",\n      \"service\": \"<WORKER_NAME>\",\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Static Site OpenNext Configuration\nDESCRIPTION: OpenNext configuration for a static site using Workers Static Assets for the incremental cache.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/caching.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineCloudflareConfig } from \"@opennextjs/cloudflare\";\nimport staticAssetsIncrementalCache from \"@opennextjs/cloudflare/overrides/incremental-cache/static-assets-incremental-cache\";\n\nexport default defineCloudflareConfig({\n  incrementalCache: staticAssetsIncrementalCache,\n});\n```\n\n----------------------------------------\n\nTITLE: Deploying Next.js App to Cloudflare Workers\nDESCRIPTION: Command to build and deploy the Next.js application to Cloudflare Workers using the OpenNextJS deploy script configured in package.json.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.6/get-started.mdx#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nnpm run deploy\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App for Cloudflare with OpenNextJS\nDESCRIPTION: This command creates a new Next.js application pre-configured to run on Cloudflare using @opennextjs/cloudflare. It uses the Cloudflare CLI to set up the project with the Next.js framework targeting the Workers platform.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/examples.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create cloudflare@latest -- my-next-app --framework=next --platform=workers\n```\n\n----------------------------------------\n\nTITLE: Configuring External Middleware in OpenNext\nDESCRIPTION: Configuration snippet to enable external middleware processing by setting middleware.external to true in open-next.config.ts file.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/inner_workings/components/middleware.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  middleware: {\n    external: true;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Assets Incremental Cache in OpenNextJS\nDESCRIPTION: This configuration enables the static assets cache for OpenNextJS on Cloudflare. The Workers Static Assets cache is read-only and requests attempting to modify it will be ignored.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/caching.mdx#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// open-next.config.ts\nimport { defineCloudflareConfig } from \"@opennextjs/cloudflare\";\nimport staticAssetsIncrementalCache from \"@opennextjs/cloudflare/overrides/incremental-cache/static-assets-incremental-cache\";\n\nexport default defineCloudflareConfig({\n  incrementalCache: staticAssetsIncrementalCache,\n});\n```\n\n----------------------------------------\n\nTITLE: Building OpenNext from Source\nDESCRIPTION: Commands for cloning the repository and building the OpenNext project locally using pnpm.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/contribute.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd opennextjs-aws\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Implementing a React Form Component with Netlify Forms Submission\nDESCRIPTION: A React client component that handles form submission to a static HTML file for Netlify Forms. It captures form data, submits it to the static form endpoint, and includes placeholders for success and error handling.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/netlify/forms.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n\"use client\";\n\nexport function FeedbackForm() {\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    const formData = new FormData(event.target);\n    await fetch(\"/__forms.html\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\n      body: new URLSearchParams(formData).toString(),\n    });\n    // Success and error handling ...\n  };\n\n  return (\n    <form name=\"feedback\" onSubmit={handleFormSubmit}>\n      <input type=\"hidden\" name=\"form-name\" value=\"feedback\" />\n      <input name=\"name\" type=\"text\" placeholder=\"Name\" required />\n      <input name=\"email\" type=\"text\" placeholder=\"Email (optional)\" />\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating package.json scripts for OpenNextJS Cloudflare 0.6\nDESCRIPTION: This snippet shows how to update the 'preview' and 'deploy' scripts in package.json to use the new CLI commands introduced in OpenNextJS Cloudflare 0.6. The new commands separate the build process from preview and deploy operations.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/migrate-from-0.5-to-0.6.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"preview\": \"opennextjs-cloudflare build && opennextjs-cloudflare preview\",\n\"deploy\": \"opennextjs-cloudflare build && opennextjs-cloudflare deploy\",\n```\n\n----------------------------------------\n\nTITLE: Creating KV Namespace for OpenNextJS on Cloudflare\nDESCRIPTION: This command creates a KV namespace for use with OpenNextJS on Cloudflare. KV namespaces are used for caching but are eventually consistent with updates taking up to 60 seconds to propagate globally.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/caching.mdx#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpx wrangler@latest kv namespace create <YOUR_NAMESPACE_NAME>\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental Streaming Support in OpenNext\nDESCRIPTION: Command to enable experimental streaming support for server functions, which can decrease time to first byte. This feature is not recommended for production use.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/v2/advanced/options.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nopen-next build --streaming\n```\n\n----------------------------------------\n\nTITLE: Updating Wrangler Configuration for Custom Worker\nDESCRIPTION: Updates the wrangler.jsonc configuration file to point to the custom worker implementation instead of the default worker.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/howtos/custom-worker.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n// wrangler.jsonc\n{\n-  \"main\": \"./.open-next/worker.js\"\n+  \"main\": \"./path/to/custom-worker.ts\",\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying to Cloudflare Workers\nDESCRIPTION: Command to deploy the Next.js application to Cloudflare Workers.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.2/get-started.mdx#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nnpm run deploy:worker\n```\n\n----------------------------------------\n\nTITLE: Patching Fetch Behavior for ISR in Next.js 13.5.1+\nDESCRIPTION: Modifies the fetch function in the root layout component to fix inconsistent revalidate values when using ISR and fetch in Next.js applications.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/common_issues.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function RootLayout() {\n  const asyncStorage = require('next/dist/client/components/static-generation-async-storage.external');\n  //@ts-ignore\n  const staticStore =\n    (fetch as any).__nextGetStaticStore?.() ||\n    asyncStorage.staticGenerationAsyncStorage;\n  const store = staticStore.getStore();\n  store.isOnDemandRevalidate =\n    store.isOnDemandRevalidate && !(process.env.OPEN_NEXT_ISR === 'true');\n  return <>...</>;\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling DynamoDB Cache in OpenNext\nDESCRIPTION: Command to disable the experimental DynamoDB cache, which will prevent next/cache revalidation from working.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/v2/advanced/options.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nopen-next build --dangerously-disable-dynamodb-cache\n```\n\n----------------------------------------\n\nTITLE: Creating a New Next.js App with Cloudflare Integration\nDESCRIPTION: Command to bootstrap a new Next.js application pre-configured to run on Cloudflare using the @opennextjs/cloudflare package. This uses Cloudflare's CLI tool with the experimental Next.js framework option.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.5/examples.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create cloudflare@latest -- my-next-app --framework=next --experimental\n```\n\n----------------------------------------\n\nTITLE: Deploying to Cloudflare Workers with Arguments\nDESCRIPTION: Example of using the opennextjs-cloudflare deploy command with additional arguments passed to wrangler for environment-specific deployment.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/howtos/dev-deploy.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nopennextjs-cloudflare deploy -- --env=prod\n```\n\n----------------------------------------\n\nTITLE: Removing Serverless Target Configuration in next.config.js\nDESCRIPTION: When migrating from serverless-nextjs to OpenNext, the 'target: \"serverless\"' configuration must be removed from next.config.js to avoid build errors. This snippet shows what needs to be removed from the configuration file.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/migration.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  // ...\n  target: \"serverless\", // remove this\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Creating KV Namespace with Wrangler CLI\nDESCRIPTION: Command to create a new KV namespace using Wrangler CLI for caching implementation.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.6/caching.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx wrangler@latest kv namespace create <YOUR_NAMESPACE_NAME>\n```\n\n----------------------------------------\n\nTITLE: Deploying Next.js App to Cloudflare Workers\nDESCRIPTION: Command to deploy the Next.js application to Cloudflare Workers using the configured scripts in package.json.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.5/get-started.mdx#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nnpm run deploy\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Local Development\nDESCRIPTION: Content of the .dev.vars file for setting local-only environment variables, specifically the NEXTJS_ENV variable for development.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.5/get-started.mdx#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nNEXTJS_ENV=development\n```\n\n----------------------------------------\n\nTITLE: Large Site OpenNext Configuration\nDESCRIPTION: OpenNext configuration for a large site with regional caching and sharded tag cache implementation.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/caching.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineCloudflareConfig } from \"@opennextjs/cloudflare\";\nimport r2IncrementalCache from \"@opennextjs/cloudflare/overrides/incremental-cache/r2-incremental-cache\";\nimport { withRegionalCache } from \"@opennextjs/cloudflare/overrides/incremental-cache/regional-cache\";\nimport doShardedTagCache from \"@opennextjs/cloudflare/overrides/tag-cache/do-sharded-tag-cache\";\nimport doQueue from \"@opennextjs/cloudflare/overrides/queue/do-queue\";\n\nexport default defineCloudflareConfig({\n  incrementalCache: withRegionalCache(r2IncrementalCache, { mode: \"short-lived\" }),\n  queue: doQueue,\n  tagCache: doShardedTagCache({ baseShardSize: 12 }),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a KV Namespace with Wrangler CLI for Next.js Caching\nDESCRIPTION: Command to create a new KV namespace using Cloudflare's Wrangler CLI. This namespace will be used to store cached data for your Next.js application.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.3/caching.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx wrangler@latest kv namespace create <YOUR_NAMESPACE_NAME>\n```\n\n----------------------------------------\n\nTITLE: Creating a New Next.js App for Cloudflare\nDESCRIPTION: Command to create a new Next.js app pre-configured for Cloudflare using @opennextjs/cloudflare.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.5/get-started.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm create cloudflare@latest -- my-next-app --framework=next --experimental\n```\n\n----------------------------------------\n\nTITLE: Development Environment Variables\nDESCRIPTION: Environment variable configuration for local development using .dev.vars file.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.3/get-started.mdx#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nNEXTJS_ENV=development\n```\n\n----------------------------------------\n\nTITLE: Implementing CloudFront Cache Invalidation Function with AWS SDK\nDESCRIPTION: A function using the AWS SDK for CloudFront to create invalidation requests for specified paths. It requires setting the distribution ID and properly formatting the invalidation batch with the paths to invalidate.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/v2/common_issues/isr.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CloudFrontClient, CreateInvalidationCommand } from \"@aws-sdk/client-cloudfront\";\n\nconst cloudFront = new CloudFrontClient({});\n\nasync function invalidateCloudFrontPaths(paths: string[]) {\n  await cloudFront.send(\n    new CreateInvalidationCommand({\n      // Set CloudFront distribution ID here\n      DistributionId: distributionId,\n      InvalidationBatch: {\n        CallerReference: `${Date.now()}`,\n        Paths: {\n          Quantity: paths.length,\n          Items: paths,\n        },\n      },\n    })\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating R2 Bucket with Wrangler CLI\nDESCRIPTION: Command to create a new R2 bucket using Wrangler CLI for object storage.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.6/caching.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx wrangler@latest r2 bucket create <YOUR_BUCKET_NAME>\n```\n\n----------------------------------------\n\nTITLE: Creating New Next.js App with Cloudflare\nDESCRIPTION: Command to create a new Next.js application pre-configured for Cloudflare using the create-cloudflare CLI.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.3/get-started.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create cloudflare@latest -- my-next-app --framework=next --experimental\n```\n\n----------------------------------------\n\nTITLE: Viewing Module Error in CloudWatch Logs\nDESCRIPTION: This code snippet shows an example of the 'Cannot find module' error that might appear in AWS CloudWatch logs, typically occurring in monorepo setups with multiple lock files.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/v2/common_issues.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nCannot find module 'next'\n```\n\n----------------------------------------\n\nTITLE: Importing Callout Component from Nextra\nDESCRIPTION: Import statement for the Callout component used in the documentation for displaying warning messages.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/config/overrides/queue.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Callout } from \"nextra/components\";\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Mode in OpenNext\nDESCRIPTION: Sets the OPEN_NEXT_DEBUG environment variable to true, enabling verbose logging and disabling minification. This can result in larger output and should not be used in production.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/common_issues.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nOPEN_NEXT_DEBUG=true npx open-next@latest build\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenNext with D1 Tag Cache\nDESCRIPTION: TypeScript configuration for setting up KV cache, D1 tag cache, and memory queue in OpenNext.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.5/caching.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineCloudflareConfig } from \"@opennextjs/cloudflare\";\nimport kvIncrementalCache from \"@opennextjs/cloudflare/kv-cache\";\nimport d1TagCache from \"@opennextjs/cloudflare/d1-tag-cache\";\nimport memoryQueue from \"@opennextjs/cloudflare/memory-queue\";\n\nexport default defineCloudflareConfig({\n  incrementalCache: kvIncrementalCache,\n  tagCache: d1TagCache,\n  queue: memoryQueue,\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing D1 Cache During Deployment\nDESCRIPTION: Command to initialize the D1 cache with build-time revalidation data during deployment.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.5/caching.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nwrangler d1 execute NEXT_CACHE_D1 --file .open-next/cloudflare/cache-assets-manifest.sql\n```\n\n----------------------------------------\n\nTITLE: Configuring Durable Objects Bindings for Queue in Wrangler\nDESCRIPTION: This snippet adds the necessary Durable Objects bindings to the wrangler.jsonc file for the queue functionality. It defines the DOQueueHandler class and sets up the required migrations.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/caching.mdx#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n\"durable_objects\": {\n    \"bindings\": [\n      {\n        \"name\": \"NEXT_CACHE_DO_QUEUE\",\n        \"class_name\": \"DOQueueHandler\"\n      }\n    ]\n  },\n  \"migrations\": [\n    {\n      \"tag\": \"v1\",\n      \"new_sqlite_classes\": [\"DOQueueHandler\"]\n    }\n  ],\n```\n\n----------------------------------------\n\nTITLE: Running OpenNext in Development Mode\nDESCRIPTION: Command to run OpenNext in watch mode for development purposes.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/contribute.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Executing OpenNextJS Cache Population Command\nDESCRIPTION: Command to populate the cache with either local or remote target options.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/caching.mdx#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nopennextjs-cloudflare populateCache local\n```\n\n----------------------------------------\n\nTITLE: Creating KV Namespace with Wrangler\nDESCRIPTION: Command to create a new KV namespace using Wrangler CLI for caching purposes.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.5/caching.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx wrangler@latest kv namespace create <YOUR_NAMESPACE_NAME>\n```\n\n----------------------------------------\n\nTITLE: Accessing Extended Geolocation Properties in Next.js Middleware on AWS\nDESCRIPTION: Example showing how to access the extended geolocation data in Next.js middleware when deployed on AWS with OpenNext. This includes both standard Next.js properties and additional AWS-specific properties.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/v2/advanced/workaround.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport function middleware(request: NextRequest) {\n  // Supported by Next.js\n  request.geo.country;\n  request.geo.region;\n  request.geo.city;\n  request.geo.latitude;\n  request.geo.longitude;\n\n  // Also supported by OpenNext\n  request.geo.countryName;\n  request.geo.regionName;\n  request.geo.postalCode;\n  request.geo.timeZone;\n  request.geo.metroCode;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Wrangler CLI for Cloudflare Development\nDESCRIPTION: Command to install Wrangler, Cloudflare's CLI tool for developing and deploying Workers, as a development dependency. Version 3.99.0 or later is required.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.6/get-started.mdx#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev wrangler@latest\n```\n\n----------------------------------------\n\nTITLE: Installing OpenNext Cloudflare Package\nDESCRIPTION: Command to install the @opennextjs/cloudflare package as a development dependency.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.3/get-started.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev @opennextjs/cloudflare@latest\n```\n\n----------------------------------------\n\nTITLE: Creating New Next.js App with Cloudflare\nDESCRIPTION: Command to create a new Next.js application pre-configured for Cloudflare using the create-cloudflare CLI.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.2/get-started.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm create cloudflare@latest -- my-next-app --framework=next --experimental\n```\n\n----------------------------------------\n\nTITLE: Installing OpenNext Cloudflare Package\nDESCRIPTION: Command to install the @opennextjs/cloudflare package for existing Next.js applications\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/get-started.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @opennextjs/cloudflare@latest\n```\n\n----------------------------------------\n\nTITLE: Updating package.json Scripts for Cloudflare Deployment\nDESCRIPTION: JSON snippet showing the scripts to add to package.json for previewing, deploying, and generating types for a Next.js app on Cloudflare.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.5/get-started.mdx#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"preview\": \"opennextjs-cloudflare && wrangler dev\",\n\"deploy\": \"opennextjs-cloudflare && wrangler deploy\",\n\"cf-typegen\": \"wrangler types --env-interface CloudflareEnv cloudflare-env.d.ts\"\n```\n\n----------------------------------------\n\nTITLE: Installing Wrangler CLI\nDESCRIPTION: Command to install Wrangler CLI as a development dependency for local development and deployment.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.2/get-started.mdx#2025-04-23_snippet_2\n\nLANGUAGE: npm\nCODE:\n```\nnpm install -D wrangler@latest\n```\n\n----------------------------------------\n\nTITLE: Installing @opennextjs/cloudflare Package\nDESCRIPTION: Command to install the @opennextjs/cloudflare package as a dev dependency in an existing Next.js project.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.5/get-started.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev @opennextjs/cloudflare@latest\n```\n\n----------------------------------------\n\nTITLE: Importing Site Configuration in OpenNext\nDESCRIPTION: Simple import statement for the SITE configuration object from a config file.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SITE } from \"../config\";\n```\n\n----------------------------------------\n\nTITLE: Development Environment Variables\nDESCRIPTION: Local development environment variables configuration for Next.js\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/get-started.mdx#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nNEXTJS_ENV=development\n```\n\n----------------------------------------\n\nTITLE: Testing OpenNext with a Next.js Application\nDESCRIPTION: Commands to navigate to a Next.js application directory and build it using the locally compiled version of OpenNext to test changes.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/contribute.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd path/to/my/nextjs/app\npath/to/opennextjs-aws/packages/open-next/dist/index.js build\n```\n\n----------------------------------------\n\nTITLE: Installing OpenNextJS Cloudflare Adapter\nDESCRIPTION: Command to install the @opennextjs/cloudflare package which enables Next.js applications to run on Cloudflare Workers.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.6/get-started.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev @opennextjs/cloudflare@latest\n```\n\n----------------------------------------\n\nTITLE: Deploying to Cloudflare Workers\nDESCRIPTION: Command to deploy the application to Cloudflare Workers using Wrangler.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.3/get-started.mdx#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nnpm run deploy:worker\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Local Development\nDESCRIPTION: A .dev.vars file that contains environment variables for local development. The NEXTJS_ENV variable defines which environment to use when loading Next.js .env files.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.6/get-started.mdx#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nNEXTJS_ENV=development\n```\n\n----------------------------------------\n\nTITLE: Creating KV Namespace using Wrangler CLI\nDESCRIPTION: Command to create a new KV namespace using Cloudflare's Wrangler CLI tool for caching purposes in Next.js applications.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.2/caching.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx wrangler@latest kv namespace create <YOUR_NAMESPACE_NAME>\n```\n\n----------------------------------------\n\nTITLE: Creating a New Next.js App with Cloudflare Integration\nDESCRIPTION: Command to create a new Next.js application pre-configured to run on Cloudflare using @opennextjs/cloudflare. This uses the Cloudflare CLI with the 'next' framework option and an experimental flag.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.6/examples.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create cloudflare@latest -- my-next-app --framework=next --experimental\n```\n\n----------------------------------------\n\nTITLE: Installing Wrangler CLI\nDESCRIPTION: Command to install Wrangler CLI as a development dependency for local development and deployment.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.3/get-started.mdx#2025-04-23_snippet_2\n\nLANGUAGE: npm\nCODE:\n```\nnpm install --save-dev wrangler@latest\n```\n\n----------------------------------------\n\nTITLE: Updating ESLint Configuration for SST Integration\nDESCRIPTION: Updates the ESLint configuration to ignore SST-generated files and configuration to prevent linting errors.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/config/nx.mdx#2025-04-23_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n{\n  \"extends\": [\n    \"plugin:@nx/react-typescript\",\n    \"next\",\n    \"next/core-web-vitals\",\n    \"../../.eslintrc.json\"\n  ],\n  \"ignorePatterns\": [\n    \"!**/*\",\n    \".next/**/*\",\n+    \".open-next/**/*\",\n+    \".sst/**/*\",\n+    \"sst.config.ts\"\n  ],\n  \"overrides\": [\n    {\n      \"files\": [\"*.ts\", \"*.tsx\", \"*.js\", \"*.jsx\"],\n      \"rules\": {}\n    },\n    {\n      \"files\": [\"*.ts\", \"*.tsx\"],\n      \"rules\": {}\n    },\n    {\n      \"files\": [\"*.js\", \"*.jsx\"],\n      \"rules\": {}\n    },\n    {\n      \"files\": [\"*.spec.ts\", \"*.spec.tsx\", \"*.spec.js\", \"*.spec.jsx\"],\n      \"env\": {\n        \"jest\": true\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating ESLint to Ignore Generated Files\nDESCRIPTION: Updates the ESLint configuration to ignore generated directories from NextJS and OpenNext to prevent linting errors.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/config/nx.mdx#2025-04-23_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n{\n  \"extends\": [\n    \"plugin:@nx/react-typescript\",\n    \"next\",\n    \"next/core-web-vitals\",\n    \"../../.eslintrc.json\"\n  ],\n  \"ignorePatterns\": [\n    \"!**/*\",\n+    \".next/**/*\",\n+    \".open-next/**/*\"\n  ],\n  \"overrides\": [\n    {\n      \"files\": [\"*.ts\", \"*.tsx\", \"*.js\", \"*.jsx\"],\n      \"rules\": {}\n    },\n    {\n      \"files\": [\"*.ts\", \"*.tsx\"],\n      \"rules\": {}\n    },\n    {\n      \"files\": [\"*.js\", \"*.jsx\"],\n      \"rules\": {}\n    },\n    {\n      \"files\": [\"*.spec.ts\", \"*.spec.tsx\", \"*.spec.js\", \"*.spec.jsx\"],\n      \"env\": {\n        \"jest\": true\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Next.js App for Cloudflare using OpenNextJS\nDESCRIPTION: This command creates a new Next.js application pre-configured to run on Cloudflare using @opennextjs/cloudflare. It utilizes the Cloudflare CLI with the 'next' framework option and the experimental flag.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.2/examples.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create cloudflare@latest -- my-next-app --framework=next --experimental\n```\n\n----------------------------------------\n\nTITLE: Creating a New Next.js App for Cloudflare Workers\nDESCRIPTION: Command to create a new Next.js application pre-configured to run on Cloudflare Workers using the @opennextjs/cloudflare adapter. This uses Cloudflare's CLI tool to scaffold a new project.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create cloudflare@latest -- my-next-app --framework=next --platform=workers\n```\n\n----------------------------------------\n\nTITLE: Origin Resolution Configuration Type\nDESCRIPTION: Type definition for the OPEN_NEXT_ORIGIN environment variable that defines origin mapping for different functions.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/inner_workings/components/middleware.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  // Key should be the same as the one used in `open-next.config.ts` for the functions\n  [origin: string]: {\n    host: string;\n    protocol: \"http\" | \"https\";\n    port?: number;\n    customHeaders?: Record<string, string>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Static HTML Form Template for Netlify Form Detection\nDESCRIPTION: A minimal HTML template that should be placed in the public directory to enable Netlify's form detection at deploy time. This file contains the form structure with necessary data-netlify attributes that Netlify scans for during deployment.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/netlify/forms.mdx#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head></head>\n  <body>\n    <form name=\"feedback\" data-netlify=\"true\" hidden>\n      <input type=\"hidden\" name=\"form-name\" value=\"feedback\" />\n      <input name=\"name\" type=\"text\" />\n      <input name=\"email\" type=\"text\" />\n      <input name=\"message\" type=\"text\" />\n    </form>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Creating New Next.js App for Cloudflare\nDESCRIPTION: Command to create a new Next.js application pre-configured for Cloudflare deployment using the @opennextjs/cloudflare adapter\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.5/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create cloudflare@latest -- my-next-app --framework=next --experimental\n```\n\n----------------------------------------\n\nTITLE: Configuring Sentry for Server-Side Error Tracking in Next.js\nDESCRIPTION: Demonstrates how to set up Sentry for server-side error tracking in Next.js applications without using dynamic imports in instrumentation.ts.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/common_issues.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Sentry from \"@sentry/nextjs\";\nimport { initSentry } from \"../sentry.server.config\";\n\nexport const onRequestError = Sentry.captureRequestError;\n\nexport async function register() {\n  initSentry(process.env.NEXT_RUNTIME as \"nodejs\" | \"edge\");\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Sentry from \"@sentry/nextjs\";\n\nexport const initSentry = (runtime: \"nodejs\" | \"edge\") => {\n  Sentry.init({\n    dsn: \"https://...\",\n\n    //...rest of your config\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: ISR Cache-Control Header Example\nDESCRIPTION: This snippet shows the default Cache-Control header used for Incremental Static Regeneration (ISR) pages while waiting for revalidation to complete, which helps prevent server overload during revalidation.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/v2/common_issues.mdx#2025-04-23_snippet_1\n\nLANGUAGE: http\nCODE:\n```\ns-maxage=2, stale-while-revalidate=2592000\n```\n\n----------------------------------------\n\nTITLE: Importing Callout Component from Nextra\nDESCRIPTION: Import statement for the Callout component from the nextra/components package, which is used for displaying information and warning messages in the documentation.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/compatibility.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Callout } from \"nextra/components\";\n```\n\n----------------------------------------\n\nTITLE: Running OpenNext Locally with Bash Commands\nDESCRIPTION: Commands to build OpenNext with a custom configuration file and then run the server locally for development purposes.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/contribute/local_run.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# This is to build (the config-path is needed if you use a different name than the default one)\nnode /path/to/opennextjs-aws/packages/open-next/dist/index.js build --config-path open-next.local.config.ts\n# Then to run the server\nnode .open-next/server-functions/default/index.mjs\n```\n\n----------------------------------------\n\nTITLE: Disabling Incremental Cache in OpenNext\nDESCRIPTION: Command to disable the incremental cache, causing all pages to be revalidated on each request. This is appropriate only for SSR-only applications and will also disable the DynamoDB cache.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/v2/advanced/options.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nopen-next build --dangerously-disable-incremental-cache\n```\n\n----------------------------------------\n\nTITLE: XML Error Response for Access Denied\nDESCRIPTION: Example of an XML error response when encountering an Access Denied error during page refresh or direct URL access to dynamic/static routes.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/common_issues.mdx#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<Error>\n   <Code>AccessDenied</Code>\n   <Message>Access Denied</Message>\n   <RequestId>R4E6T9G2Q1S0Z5X8</RequestId>\n   <HostId>S7h9F3g2T0z5K8d6A2s1W4x3C7v8B9m2L0j3K4i7H8g9F0r3A5q8w9E8r7t6Y5h4U3i2O1p0</HostId>\n</Error>\n```\n\n----------------------------------------\n\nTITLE: Importing Callout Component from Nextra\nDESCRIPTION: This code imports the Callout component from the Nextra components library, which is used for creating callout boxes in documentation.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/community.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Callout } from \"nextra/components\";\n```\n\n----------------------------------------\n\nTITLE: R2 Bucket Creation Command\nDESCRIPTION: Command to create an R2 bucket for incremental cache storage.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/caching.mdx#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnpx wrangler@latest r2 bucket create <YOUR_BUCKET_NAME>\n```\n\n----------------------------------------\n\nTITLE: Configuring Public Hoisting for pnpm in Next.js Project\nDESCRIPTION: This snippet shows the content of an .npmrc file that enables public hoisting for pnpm in a Next.js project. This configuration is necessary when using pnpm with Next.js on Netlify.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/netlify/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npublic-hoist-pattern[]=*\n```\n\n----------------------------------------\n\nTITLE: Rendering Callout Component with Deprecation Notice in JSX\nDESCRIPTION: This code snippet renders a Callout component containing a deprecation notice for OpenNext V2. It informs users about the upcoming deprecation and potential security updates.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/v2.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Callout>\n  OpenNext V2 will be deprecated soon and will not receive new features or updates. We might release security\n  updates if needed. They will be listed on this page.\n</Callout>\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Types for Cloudflare Bindings\nDESCRIPTION: Command to generate TypeScript type declarations that match your Worker's configuration, ensuring type safety when using bindings. This creates a d.ts file with appropriate type definitions.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.2/bindings.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx wrangler types --experimental-include-runtime\n```\n\n----------------------------------------\n\nTITLE: Importing Callout Component from Nextra in JSX\nDESCRIPTION: This code snippet imports the Callout component from the Nextra framework, which is used to display important notices or alerts in the documentation.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/v2.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Callout } from \"nextra/components\";\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Types with Custom Path for Cloudflare Bindings\nDESCRIPTION: Command to generate TypeScript type declarations for Cloudflare bindings with a custom output path. This example saves the runtime.d.ts file to the root directory for easy access and version control.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/0.2/bindings.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx wrangler types --experimental-include-runtime=\"./runtime.d.ts\"\n```\n\n----------------------------------------\n\nTITLE: Importing Callout Component in Next.js Documentation\nDESCRIPTION: This code imports the Callout component from nextra/components, which is used to display warning messages in the documentation.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/config/overrides/automatic_cdn_invalidation.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Callout } from \"nextra/components\";\n```\n\n----------------------------------------\n\nTITLE: Importing Callout Component from Nextra\nDESCRIPTION: This code snippet imports the Callout component from the Nextra library, which is used to display warning messages in the documentation.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/v2/inner_workings/isr.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Callout } from \"nextra/components\";\n```\n\n----------------------------------------\n\nTITLE: Netlify Form Verification Error Message\nDESCRIPTION: The error message displayed during build when Netlify detects incompatible form implementation. This occurs when form attributes are found in React code but no static HTML files with form attributes exist in the public directory.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/netlify/forms.mdx#2025-04-23_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\n@netlify/plugin-nextjs@5 requires migration steps to support Netlify Forms. Refer to https://ntl.fyi/next-runtime-forms-migration for migration example.\n```\n\n----------------------------------------\n\nTITLE: Setting Development Environment in Cloudflare Worker Configuration\nDESCRIPTION: Example showing how to set the NEXTJS_ENV variable in a .dev.vars file to specify the development environment for local worker execution.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/howtos/env-vars.mdx#2025-04-23_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\n# .dev.vars\nNEXTJS_ENV=development\n```\n\n----------------------------------------\n\nTITLE: Worker Size Limit Example Output\nDESCRIPTION: Example output from Wrangler showing the original and compressed sizes of a built Cloudflare Worker. Only the compressed (gzip) size is relevant for the Cloudflare Worker size limit.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nTotal Upload: 13833.20 KiB / gzip: 2295.89 KiB\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenNext Resolve Plugin in TypeScript\nDESCRIPTION: Shows how to set up the OpenNext Resolve Plugin to optimize bundle size by replacing dynamic imports with specific overrides. This plugin helps avoid bundling entire libraries in the final build.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/contribute/plugin.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nopenNextResolvePlugin({\n  overrides: {\n    wrapper: \"node\",\n    converter: \"node\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Updating package.json for OpenNext.js 0.3\nDESCRIPTION: This snippet demonstrates the change required in package.json to use the new CLI name 'opennextjs-cloudflare' for building the worker.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/cloudflare/former-releases/migrate-from-0.2-to-0.3.mdx#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"build:worker\": \"opennextjs-cloudflare\"\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Configuration in Next.js Documentation\nDESCRIPTION: Import statements for site configuration, Nextra components, and shared MDX components used in the documentation page.\nSOURCE: https://github.com/opennextjs/docs/blob/main/pages/aws/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SITE } from \"../../config\";\nimport { Callout } from \"nextra/components\";\nimport WindowsSupport from \"../../shared/WindowsSupport.mdx\";\n```"
  }
]