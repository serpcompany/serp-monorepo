[
  {
    "owner": "serversideup",
    "repo": "docker-php",
    "content": "TITLE: Multi-stage Dockerfile Configuration\nDESCRIPTION: Complex example showing development, CI, and production configurations in a single Dockerfile using multi-stage builds.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/docs/content/docs/5.customizing-the-image/2.installing-additional-php-extensions.md#2025-04-21_snippet_6\n\nLANGUAGE: dockerfile\nCODE:\n```\n############################################\n# Base Image\n############################################\n\n# Learn more about the Server Side Up PHP Docker Images at:\n# https://serversideup.net/open-source/docker-php/\nFROM serversideup/php:8.4-fpm-nginx AS base\n\n# Switch to root before installing our PHP extensions\nUSER root\nRUN install-php-extensions bcmath gd\n\n############################################\n# Development Image\n############################################\nFROM base AS development\n\n# We can pass USER_ID and GROUP_ID as build arguments\n# to ensure the www-data user has the same UID and GID\n# as the user running Docker.\nARG USER_ID\nARG GROUP_ID\n\n# Switch to root so we can set the user ID and group ID\nUSER root\nRUN docker-php-serversideup-set-id www-data $USER_ID:$GROUP_ID  && \\\n    docker-php-serversideup-set-file-permissions --owner $USER_ID:$GROUP_ID --service nginx\n\n# Switch back to the unprivileged www-data user\nUSER www-data\n\n############################################\n# CI image\n############################################\nFROM base AS ci\n\n# Sometimes CI images need to run as root\n# so we set the ROOT user and configure\n# the PHP-FPM pool to run as www-data\nUSER root\nRUN echo \"user = www-data\" >> /usr/local/etc/php-fpm.d/docker-php-serversideup-pool.conf && \\\n    echo \"group = www-data\" >> /usr/local/etc/php-fpm.d/docker-php-serversideup-pool.conf\n\n############################################\n# Production Image\n############################################\nFROM base AS deploy\nCOPY --chown=www-data:www-data . /var/www/html\nUSER www-data\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for Laravel Horizon\nDESCRIPTION: Example Docker Compose configuration for running Laravel Horizon with Redis. It includes service definitions for PHP, Redis, and Horizon, with specific settings for graceful shutdown and health checks.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/docs/content/docs/4.laravel/4.laravel-horizon.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  php:\n    image: my/laravel-app\n\n  redis:\n    image: redis:6\n    command: \"redis-server --appendonly yes --requirepass redispassword\"\n\n  horizon:\n    image: my/laravel-app\n    command: [\"php\", \"/var/www/html/artisan\", \"horizon\"]\n    stop_signal: SIGTERM # Set this for graceful shutdown if you're using fpm-apache or fpm-nginx\n    healthcheck:\n      # This is our native healthcheck script for Horizon\n      test: [\"CMD\", \"healthcheck-horizon\"]\n      start_period: 10s\n```\n\n----------------------------------------\n\nTITLE: Configuring Laravel Queue in Docker Compose\nDESCRIPTION: A simplified Docker Compose configuration for running a Laravel application with a separate queue worker. It demonstrates how to set up the queue service, including the command, stop signal, and healthcheck.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/docs/content/docs/4.laravel/3.laravel-queue.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  php:\n    image: my/laravel-app\n\n  queue:\n    image: my/laravel-app\n    command: [\"php\", \"/var/www/html/artisan\", \"queue:work\", \"--tries=3\"]\n    stop_signal: SIGTERM # Set this for graceful shutdown if you're using fpm-apache or fpm-nginx\n    healthcheck:\n      # This is our native healthcheck script for the queue\n      test: [\"CMD\", \"healthcheck-queue\"]\n      start_period: 10s\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Laravel with Reverb\nDESCRIPTION: An example Docker Compose configuration that sets up both a Laravel application container and a separate Reverb container with Traefik routing labels. The configuration includes proper healthchecks and stop signals for graceful shutdown.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/docs/content/docs/4.laravel/4.laravel-reverb.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  php:\n    image: my/laravel-app\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.http.routers.laravel.tls=true\"\n      - \"traefik.http.routers.laravel.entrypoints=websecure\"\n      - \"traefik.http.routers.laravel.rule=Host(`https://app.example.com`)\"\n      - \"traefik.http.services.laravel.loadbalancer.server.port=8080\"\n      - \"traefik.http.services.laravel.loadbalancer.server.scheme=http\"\n\n  reverb:\n    image: my/laravel-app\n    command: [\"php\", \"/var/www/html/artisan\", \"--port=8000\", \"reverb:start\"]\n    stop_signal: SIGTERM # Set this for graceful shutdown if you're using fpm-apache or fpm-nginx\n    healthcheck:\n      # This is our native healthcheck script for Reverb\n      test: [\"CMD\", \"healthcheck-reverb\"]\n      start_period: 10s\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.http.routers.reverb.tls=true\"\n      - \"traefik.http.routers.reverb.entrypoints=websecure\"\n      - \"traefik.http.routers.reverb.rule=Host(`https://reverb.example.com`)\"\n      - \"traefik.http.services.reverb.loadbalancer.server.port=8000\"\n      - \"traefik.http.services.reverb.loadbalancer.server.scheme=http\"\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-stage Dockerfile for Different Environments with v3 Images\nDESCRIPTION: Example Dockerfile that creates multiple build targets (base, development, CI, and production) using the v3 PHP images. Includes proper user permission handling for each environment.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/docs/content/docs/3.guide/100.migrating-from-v2-to-v3.md#2025-04-21_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\n############################################\n# Base Image\n############################################\n\n# Learn more about the Server Side Up PHP Docker Images at:\n# https://serversideup.net/open-source/docker-php/\nFROM serversideup/php:8.4-fpm-nginx AS base\n\n## Uncomment if you need to install additional PHP extensions\n# USER root\n# RUN install-php-extensions bcmath gd\n\n############################################\n# Development Image\n############################################\nFROM base AS development\n\n# We can pass USER_ID and GROUP_ID as build arguments\n# to ensure the www-data user has the same UID and GID\n# as the user running Docker.\nARG USER_ID\nARG GROUP_ID\n\n# Switch to root so we can set the user ID and group ID\nUSER root\nRUN docker-php-serversideup-set-id www-data $USER_ID:$GROUP_ID  && \\\n    docker-php-serversideup-set-file-permissions --owner $USER_ID:$GROUP_ID --service nginx\nUSER www-data\n\n############################################\n# CI image\n############################################\nFROM base AS ci\n\n# Sometimes CI images need to run as root\n# so we set the ROOT user and configure\n# the PHP-FPM pool to run as www-data\nUSER root\nRUN echo \"user = www-data\" >> /usr/local/etc/php-fpm.d/docker-php-serversideup-pool.conf && \\\n    echo \"group = www-data\" >> /usr/local/etc/php-fpm.d/docker-php-serversideup-pool.conf\n\n############################################\n# Production Image\n############################################\nFROM base AS deploy\nCOPY --chown=www-data:www-data . /var/www/html\nUSER www-data\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for Laravel Task Scheduler\nDESCRIPTION: A simplified Docker Compose configuration showing how to set up a dedicated container for running Laravel's schedule:work command with proper health checks and graceful shutdown settings.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/docs/content/docs/4.laravel/2.laravel-task-scheduler.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  php:\n    image: my/laravel-app\n\n  task:\n    image: my/laravel-app\n    command: [\"php\", \"/var/www/html/artisan\", \"schedule:work\"]\n    stop_signal: SIGTERM # Set this for graceful shutdown if you're using fpm-apache or fpm-nginx\n    healthcheck:\n      # This is our native healthcheck script for the scheduler\n      test: [\"CMD\", \"healthcheck-schedule\"]\n      start_period: 10s\n```\n\n----------------------------------------\n\nTITLE: Setting Up Docker Compose for Development with Host User IDs\nDESCRIPTION: A Docker Compose configuration that targets the development build and passes the host user's UID and GID as build arguments. This enables seamless file permissions between the container and host system.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/docs/content/docs/3.guide/2.understanding-file-permissions.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  php:\n    build:\n      context: .\n      target: development\n      args:\n        # UID and GID must be set as environment variables on the host machine\n        USER_ID: $UID\n        GROUP_ID: $GID\n    ports:\n      - 80:8080\n    volumes:\n      - .:/var/www/html\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker PHP Container with Dynamic User IDs\nDESCRIPTION: A Dockerfile example that creates both development and production targets, where the development target dynamically sets the www-data user's UID/GID to match the host machine's user. This approach maintains container security while solving file permission issues.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/docs/content/docs/3.guide/2.understanding-file-permissions.md#2025-04-21_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\n############################################\n# Base Image\n############################################\nFROM serversideup/php:8.4-fpm-nginx-bookworm AS base\n\n############################################\n# Development Image\n############################################\nFROM base AS development\n\n# Switch to root so we can do root things\nUSER root\n\n# Save the build arguments as a variable\nARG USER_ID\nARG GROUP_ID\n\n# Use the build arguments to change the UID \n# and GID of www-data while also changing \n# the file permissions for NGINX\nRUN docker-php-serversideup-set-id www-data $USER_ID:$GROUP_ID && \\\n    \\\n    # Update the file permissions for our NGINX service to match the new UID/GID\n    docker-php-serversideup-set-file-permissions --owner $USER_ID:$GROUP_ID --service nginx\n\n# Drop back to our unprivileged user\nUSER www-data\n\n############################################\n# Production Image\n############################################\n\n# Since we're calling \"base\", production isn't\n# calling any of that permission stuff\nFROM base AS production\n\n# Copy our app files as www-data (33:33)\nCOPY --chown=www-data:www-data . /var/www/html\n```\n\n----------------------------------------\n\nTITLE: Changing PHP upload size limits using Docker Compose\nDESCRIPTION: This YAML configuration for Docker Compose shows how to set PHP_POST_MAX_SIZE and PHP_UPLOAD_MAX_FILE_SIZE environment variables to increase the maximum upload size to 500MB. It also configures SSL mode and exposes the necessary ports.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/docs/content/docs/5.customizing-the-image/1.changing-common-php-settings.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\nservices:\n  php:\n    image: serversideup/php:8.2.12-unit-bookworm\n    environment:\n      PHP_POST_MAX_SIZE: \"500M\"\n      PHP_UPLOAD_MAX_FILE_SIZE: \"500M\"\n      SSL_MODE: \"mixed\"\n    ports:\n      - 80:8080\n      - 443:8443\n    volumes:\n      - .:/var/www/html/\n```\n\n----------------------------------------\n\nTITLE: Replacing default PHP configuration in Dockerfile\nDESCRIPTION: This Dockerfile extends the base PHP image, removes the default configuration file, and replaces it with a custom one. This approach gives complete control over the PHP configuration without inheriting any default settings.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/docs/content/docs/5.customizing-the-image/1.changing-common-php-settings.md#2025-04-21_snippet_4\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM serversideup/php:8.4-fpm-nginx-bookworm\n\nRUN rm /usr/local/etc/php/conf.d/serversideup-docker-php.ini\nCOPY zzz-custom-php.ini /usr/local/etc/php/conf.d/\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom SSL Certificates in Docker Compose YAML\nDESCRIPTION: This snippet shows how to provide custom SSL certificates to a Docker service. It sets environment variables for the certificate files and mounts them from a local directory.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/docs/content/docs/5.customizing-the-image/4.configuring-ssl.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  php:\n    image: serversideup/php:8.4-fpm-nginx\n    ports:\n      - 80:8080\n      - 443:8443\n    environment:\n      SSL_MODE: \"mixed\"\n      SSL_PRIVATE_KEY_FILE: \"/etc/ssl/private/test-key.pem\"\n      SSL_CERTIFICATE_FILE: \"/etc/ssl/private/test.pem\"\n    volumes:\n      - ./app:/var/www/html\n      - ./certs/:/etc/ssl/private/\n```\n\n----------------------------------------\n\nTITLE: Adding custom PHP configuration in Dockerfile\nDESCRIPTION: This Dockerfile extends the base PHP image and copies a custom PHP configuration file to the appropriate directory. The configuration file will be loaded alongside the default settings provided by the base image.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/docs/content/docs/5.customizing-the-image/1.changing-common-php-settings.md#2025-04-21_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM serversideup/php:8.4-fpm-nginx-bookworm\n\nCOPY zzz-custom-php.ini /usr/local/etc/php/conf.d/\n```\n\n----------------------------------------\n\nTITLE: Installing PHP intl Extension in Dockerfile\nDESCRIPTION: Example showing how to install the intl PHP extension using install-php-extensions tool while maintaining proper user permissions.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/docs/content/docs/5.customizing-the-image/2.installing-additional-php-extensions.md#2025-04-21_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM serversideup/php:8.2.12-fpm-nginx-bookworm\n\n# Switch to root so we can do root things\nUSER root\n\n# Install the intl extension with root permissions\nRUN install-php-extensions intl\n\n# Drop back to our unprivileged user\nUSER www-data\n```\n\n----------------------------------------\n\nTITLE: Setting User and Group ID in Docker PHP\nDESCRIPTION: This command sets the user and group ID of a specified user (typically www-data) in the container. It's useful for development environments to match permissions with the host machine's user and group IDs.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/docs/content/docs/7.reference/2.command-reference.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n#  docker-php-serversideup-set-id [username] [uid]:[gid]\ndocker-php-serversideup-set-id www-data 1000:1000\n```\n\n----------------------------------------\n\nTITLE: Installing PHP Extensions in Docker\nDESCRIPTION: This command is a wrapper around docker-php-ext-install from the official PHP Docker images. It simplifies installing PHP extensions with a single command, as demonstrated with the 'intl' extension.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/docs/content/docs/7.reference/2.command-reference.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ninstall-php-extensions intl\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL Mode to Mixed in Docker Compose YAML\nDESCRIPTION: This snippet demonstrates how to set up a Docker service with SSL mode set to 'mixed', allowing both HTTP and HTTPS traffic. It uses the serversideup/php image and exposes ports 80 and 443.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/docs/content/docs/5.customizing-the-image/4.configuring-ssl.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  php:\n    image: serversideup/php:8.4-fpm-nginx\n    ports:\n      - 80:8080\n      - 443:8443\n    environment:\n      SSL_MODE: \"mixed\"\n    volumes:\n      - .:/var/www/html\n```\n\n----------------------------------------\n\nTITLE: Configuring Dockerfile to Include Custom Entrypoint Scripts\nDESCRIPTION: Shows how to modify the Dockerfile to copy custom entrypoint scripts into the container and set appropriate permissions.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/docs/content/docs/5.customizing-the-image/3.adding-your-own-start-up-scripts.md#2025-04-21_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM serversideup/php:8.4-unit\n\nCOPY --chmod=755 ./entrypoint.d/ /etc/entrypoint.d/\n```\n\n----------------------------------------\n\nTITLE: Custom PHP configuration file\nDESCRIPTION: This PHP INI file contains custom settings for mysqli persistent connections and OpCache configuration. The filename starts with 'zzz' to ensure it's loaded last in alphabetical order when PHP reads configuration files.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/docs/content/docs/5.customizing-the-image/1.changing-common-php-settings.md#2025-04-21_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nmysqli.max_persistent = 300\nopcache.max_file_size = 10M\nopcache.log_verbosity_level = 3\n```\n\n----------------------------------------\n\nTITLE: Configuring Laravel Horizon Health Check in Docker Compose\nDESCRIPTION: A YAML configuration for setting up a Docker health check that monitors Laravel Horizon service using the provided healthcheck-horizon command.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/docs/content/docs/3.guide/3.using-healthchecks-with-laravel.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhealthcheck:\n  test: [\"CMD\", \"healthcheck-horizon\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Laravel Reverb Health Check in Docker Compose\nDESCRIPTION: A YAML configuration for setting up a Docker health check that monitors Laravel Reverb service using the provided healthcheck-reverb command.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/docs/content/docs/3.guide/3.using-healthchecks-with-laravel.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nhealthcheck:\n  test: [\"CMD\", \"healthcheck-reverb\"]\n```\n\n----------------------------------------\n\nTITLE: Manually Updating Alpine-based PHP Docker Images\nDESCRIPTION: Example Dockerfile showing how to manually update an Alpine-based serversideup/php image using apk commands. This approach updates all packages and cleans the package cache to maintain an optimized image size.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/docs/content/docs/2.getting-started/3.upgrade-guide.md#2025-04-21_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM serversideup/php:8.4.1-fpm-nginx-alpine\n\nRUN apk update \\\n    && apk upgrade \\\n    && rm -rf /var/cache/apk/*\n```\n\n----------------------------------------\n\nTITLE: Implementing Laravel Task Scheduler in Kernel.php (Laravel ≤10)\nDESCRIPTION: Example implementation of task scheduling in Laravel 10 and earlier versions using the Kernel.php file. Shows how to configure commands to run at specific times with timezone settings.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/docs/content/docs/4.laravel/2.laravel-task-scheduler.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Console;\n\nuse Illuminate\\Console\\Scheduling\\Schedule;\nuse Illuminate\\Foundation\\Console\\Kernel as ConsoleKernel;\n\nclass Kernel extends ConsoleKernel\n{\n    /**\n     * The Artisan commands provided by your application.\n     *\n     * @var array\n     */\n    protected $commands = [\n        //\n    ];\n\n    /**\n     * Define the application's command schedule.\n     *\n     * @param  \\Illuminate\\Console\\Scheduling\\Schedule  $schedule\n     * @return void\n     */\n    protected function schedule(Schedule $schedule)\n    {\n        $schedule->command('process:invoices')->daily()->at('02:00')->timezone('America/Chicago');\n        $schedule->command('process:latefees')->daily()->at('04:00')->timezone('America/Chicago');\n    }\n\n    /**\n     * Register the commands for the application.\n     *\n     * @return void\n     */\n    protected function commands()\n    {\n        $this->load(__DIR__.'/Commands');\n\n        require base_path('routes/console.php');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Laravel Task Scheduler in console.php (Laravel ≥11)\nDESCRIPTION: Example implementation of task scheduling in Laravel 11 and newer versions using the routes/console.php file. Demonstrates how to schedule a database cleanup operation at a specific time with timezone setting.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/docs/content/docs/4.laravel/2.laravel-task-scheduler.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n \nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Schedule;\n \nSchedule::call(function () {\n    DB::table('recent_users')->delete();\n})->daily()->at('04:00')->timezone('America/Chicago');\n```\n\n----------------------------------------\n\nTITLE: Setting PHP timezone with Docker CLI\nDESCRIPTION: This bash command demonstrates how to run a PHP Docker container with a specific timezone setting (America/New_York) using the Docker CLI. It maps port 80 to the container's port 8080 and mounts the current directory to /var/www/html.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/docs/content/docs/5.customizing-the-image/1.changing-common-php-settings.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d \\\n  -p 80:8080 \\\n  -v $(pwd):/var/www/html \\\n  -e PHP_DATE_TIMEZONE=\"America/New_York\" \\\n  serversideup/php:8.2.12-fpm-nginx-bookworm\n```\n\n----------------------------------------\n\nTITLE: Setting File Permissions for Docker Services\nDESCRIPTION: This command sets file permissions for a specific service in the container. It's particularly useful in development environments where you need to match user and group IDs with the host machine.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/docs/content/docs/7.reference/2.command-reference.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Usage: docker-php-serversideup-set-file-permissions --owner USER:GROUP --service SERVICE\ndocker-php-serversideup-set-file-permissions --owner 1000:1000 --service nginx\n```\n\n----------------------------------------\n\nTITLE: PHP Docker Image Variations Table\nDESCRIPTION: Markdown table displaying ServerSideUp PHP Docker image variations with size badges and links to Docker Hub. Shows different configurations (cli, fpm, fpm-apache, fpm-nginx, unit) across PHP versions 7.4-8.4.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/docs/content/docs/2.getting-started/7.contributing.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| ⚙️ Variation | 🚀 Version |\n| ------------ | ---------- |\n| cli          | [![serversideup/php:beta-8.4-cli](https://img.shields.io/docker/image-size/serversideup/php/beta-8.4-cli?label=serversideup%2Fphp%3Abeta-8.4-cli)](https://hub.docker.com/r/serversideup/php/?name=beta-8.4-cli&page=1&ordering=-name) |\n| fpm          | [![serversideup/php:beta-8.4-fpm](https://img.shields.io/docker/image-size/serversideup/php/beta-8.4-fpm?label=serversideup%2Fphp%3Abeta-8.4-fpm)](https://hub.docker.com/r/serversideup/php/?name=beta-8.4-fpm&page=1&ordering=-name) |\n| fpm-apache   | [![serversideup/php:beta-8.4-fpm-apache](https://img.shields.io/docker/image-size/serversideup/php/beta-8.4-fpm-apache?label=serversideup%2Fphp%3Abeta-8.4-fpm-apache)](https://hub.docker.com/r/serversideup/php/?name=beta-8.4-fpm-apache&page=1&ordering=-name) |\n| fpm-nginx    | [![serversideup/php:beta-8.4-fpm-nginx](https://img.shields.io/docker/image-size/serversideup/php/beta-8.4-fpm-nginx?label=serversideup%2Fphp%3Abeta-8.4-fpm-nginx)](https://hub.docker.com/r/serversideup/php/?name=beta-8.4-fpm-nginx&page=1&ordering=-name) |\n| unit         | [![serversideup/php:beta-8.4-unit](https://img.shields.io/docker/image-size/serversideup/php/beta-8.4-unit?label=serversideup%2Fphp%3Abeta-8.4-unit)](https://hub.docker.com/r/serversideup/php/?name=beta-8.4-unit&page=1&ordering=-name) |\n```\n\n----------------------------------------\n\nTITLE: Configuring Laravel Scheduler Health Check in Docker Compose\nDESCRIPTION: A YAML configuration for setting up a Docker health check that monitors Laravel Scheduler using the provided healthcheck-schedule command.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/docs/content/docs/3.guide/3.using-healthchecks-with-laravel.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nhealthcheck:\n  test: [\"CMD\", \"healthcheck-schedule\"]\n```\n\n----------------------------------------\n\nTITLE: Running Docker PHP FPM-NGINX on Standard Web Ports\nDESCRIPTION: This command demonstrates how to use Docker's port mapping feature to run the serversideup/php fpm-nginx container on standard HTTP and HTTPS ports (80 and 443) instead of the default unprivileged ports (8080 and 8443).\nSOURCE: https://github.com/serversideup/docker-php/blob/main/docs/content/docs/2.getting-started/3.default-configurations.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 80:8080 -p 443:8443 serversideup/php:8.4-fpm-nginx\n```\n\n----------------------------------------\n\nTITLE: Installing Debian Packages in Docker PHP\nDESCRIPTION: This command installs packages on Debian-based systems. It detects the operating system type and only proceeds with installation if it's Debian-based, making it useful for multi-OS Dockerfile configurations.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/docs/content/docs/7.reference/2.command-reference.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Usage: docker-php-serversideup-dep-install-debian [debian-packages]\ndocker-php-serversideup-dep-install-debian git\n```\n\n----------------------------------------\n\nTITLE: Installing PHP imagick Extension in Dockerfile\nDESCRIPTION: Example of installing the imagick PHP extension while maintaining proper user permissions.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/docs/content/docs/5.customizing-the-image/2.installing-additional-php-extensions.md#2025-04-21_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM serversideup/php:8.2.12-fpm-nginx-bookworm\n\n# Switch to root so we can do root things\nUSER root\n\n# Install the imagick extension with root permissions\nRUN install-php-extensions imagick\n\n# Drop back to our unprivileged user\nUSER www-data\n```\n\n----------------------------------------\n\nTITLE: Configuring Laravel Queue Health Check in Docker Compose\nDESCRIPTION: A YAML configuration for setting up a Docker health check that monitors Laravel Queue workers using the provided healthcheck-queue command.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/docs/content/docs/3.guide/3.using-healthchecks-with-laravel.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nhealthcheck:\n  test: [\"CMD\", \"healthcheck-queue\"]\n```\n\n----------------------------------------\n\nTITLE: Pulling Latest PHP 8.3 with FPM-NGINX from GitHub Packages\nDESCRIPTION: Command to pull the latest version of PHP 8.3.x running with FPM and NGINX from GitHub Packages registry.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/docs/content/docs/2.getting-started/2.installation.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nghcr.io/serversideup/php:8.3-fpm-nginx\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Custom Entrypoint Script in Bash\nDESCRIPTION: Demonstrates a basic custom entrypoint script that prints a greeting message. The script is named 99-my-script.sh to ensure it runs after default scripts.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/docs/content/docs/5.customizing-the-image/3.adding-your-own-start-up-scripts.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/sh\necho \"👋 Hello, world!\"\n```\n\n----------------------------------------\n\nTITLE: Exploring PHP Docker Image with Bash Shell\nDESCRIPTION: Command to run a bash shell in the PHP 8.3 FPM-NGINX container for exploration and debugging purposes.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/docs/content/docs/2.getting-started/2.installation.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm --name php -it serversideup/php:8.3-fpm-nginx bash\n```\n\n----------------------------------------\n\nTITLE: Installing PHP Extension Installer in Docker\nDESCRIPTION: This helper script simplifies the installation of the PHP extension installer in Docker containers. It accepts a version parameter to specify which version of the installer to use.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/docs/content/docs/7.reference/2.command-reference.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Usage: docker-php-serversideup-install-php-ext-installer [version]\ndocker-php-serversideup-install-php-ext-installer 2.2.0\n```\n\n----------------------------------------\n\nTITLE: Installing Alpine Packages in Docker PHP\nDESCRIPTION: This command installs packages on Alpine-based systems. It detects the operating system type and only proceeds with installation if it's Alpine-based, making it useful for multi-OS Dockerfile configurations.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/docs/content/docs/7.reference/2.command-reference.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Usage: docker-php-serversideup-dep-install-alpine [alpine-packages]\ndocker-php-serversideup-dep-install-alpine git\n```\n\n----------------------------------------\n\nTITLE: Updating Docker Image Reference\nDESCRIPTION: Example showing how to change the base image reference from official PHP image to serversideup/php image. The migration involves simply prepending 'serversideup/' to the existing image name while maintaining the same version and variant tags.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/docs/content/docs/3.guide/1.migrating-from-official-php-images.md#2025-04-21_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nphp:8.4-cli-alpine\n```\n\nLANGUAGE: dockerfile\nCODE:\n```\nserversideup/php:8.4-cli-alpine\n```\n\n----------------------------------------\n\nTITLE: Updated Docker Compose Configuration\nDESCRIPTION: Modified Docker Compose configuration using build context for custom Dockerfile.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/docs/content/docs/5.customizing-the-image/2.installing-additional-php-extensions.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  php:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    volumes:\n      - .:/var/www/html/:cached\n```\n\n----------------------------------------\n\nTITLE: Setting Up docker-compose.yml for Custom Entrypoint Scripts\nDESCRIPTION: Configures the docker-compose.yml file to build the custom image and mount the project directory into the container.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/docs/content/docs/5.customizing-the-image/3.adding-your-own-start-up-scripts.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  php:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    ports:\n      - 80:8080\n    volumes:\n      - .:/var/www/html\n```\n\n----------------------------------------\n\nTITLE: Using Docker PHP Image Pattern\nDESCRIPTION: Template pattern for using ServerSideUp PHP Docker images with version and variation specifications.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nserversideup/php:{{version}}-{{variation-name}}\n```\n\n----------------------------------------\n\nTITLE: Enabling Laravel Automations in Docker PHP\nDESCRIPTION: The Laravel Automations script is disabled by default and can be enabled by setting the AUTORUN_ENABLED environment variable to true. This is recommended for production environments only.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/docs/content/docs/4.laravel/1.laravel-automations.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nAUTORUN_ENABLED=true\n```\n\n----------------------------------------\n\nTITLE: Using Docker PHP CLI Image\nDESCRIPTION: Example of Docker PHP CLI image reference syntax. The default variation uses the latest supported Debian release if no specific variation is specified.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/docs/content/docs/2.getting-started/2.installation.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\ncli\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Structure for Custom Entrypoint Script\nDESCRIPTION: Shows the directory structure for a project with a custom entrypoint script. Includes Dockerfile, docker-compose.yml, and the custom script location.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/docs/content/docs/5.customizing-the-image/3.adding-your-own-start-up-scripts.md#2025-04-21_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n.\n├── Dockerfile\n├── docker-compose.yml\n├── entrypoint.d\n│   └── 99-my-script.sh\n└── public\n    └── index.php\n```\n\n----------------------------------------\n\nTITLE: Running Laravel Reverb Command\nDESCRIPTION: The standard command to start Laravel Reverb service from within a Laravel application. This is the basic command that will be passed to the Docker container to start the Reverb process.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/docs/content/docs/4.laravel/4.laravel-reverb.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nphp artisan reverb:start\n```\n\n----------------------------------------\n\nTITLE: Enabling Isolated Laravel Migrations\nDESCRIPTION: To enable the --isolated flag for Laravel migrations, which ensures no other containers are running migrations simultaneously, set the AUTORUN_LARAVEL_MIGRATION_ISOLATION environment variable to true. This requires Laravel v9.38.0+ and a database that supports database locks.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/docs/content/docs/4.laravel/1.laravel-automations.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAUTORUN_LARAVEL_MIGRATION_ISOLATION=true\n```\n\n----------------------------------------\n\nTITLE: Original Docker Compose Configuration\nDESCRIPTION: Initial Docker Compose configuration using direct image reference.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/docs/content/docs/5.customizing-the-image/2.installing-additional-php-extensions.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  php:\n    image: serversideup/php:8.2.12-fpm-nginx-bookworm\n    volumes:\n      - .:/var/www/html/:cached\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Structure for SSL Configuration\nDESCRIPTION: This snippet illustrates the folder structure for a project using custom SSL certificates. It shows the locations of the application files, certificate files, and the docker-compose.yml file.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/docs/content/docs/5.customizing-the-image/4.configuring-ssl.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n.\n├── app\n│   └── public\n│       └── index.php\n├── certs\n│   ├── test-key.pem\n│   └── test.pem\n└── docker-compose.yml\n```\n\n----------------------------------------\n\nTITLE: Copying Environment Configuration in Bash\nDESCRIPTION: Copies the example environment variable file to create a new .env file for configuration.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/docs/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.example .env\n```\n\n----------------------------------------\n\nTITLE: Docker PHP FPM-NGINX Example\nDESCRIPTION: Example of using a specific PHP version (8.2) with FPM and NGINX configuration.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nserversideup/php:8.2-fpm-nginx\n```\n\n----------------------------------------\n\nTITLE: Docker PHP Image Tag Format\nDESCRIPTION: The standard format for ServerSideUp PHP Docker image tags, showing the registry URL, release prefix, PHP version, variation name, operating system, and GitHub release version.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/docs/content/docs/2.getting-started/2.installation.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n{{registry-url}}/serversideup/php:{{release-prefix}}-{{php-version}}-{{variation-name}}-{{operating-system}}-{{github-release-version}}\n```\n\n----------------------------------------\n\nTITLE: Modifying Docker Compose File to Lock v2 Image Version\nDESCRIPTION: Shows how to update your docker-compose.yml file to pin to v2.2.1 to prevent automatic upgrades to v3. This ensures stability during migration planning.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/docs/content/docs/3.guide/100.migrating-from-v2-to-v3.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  php:\n    image: serversideup/php:8.2-fpm-nginx\n    ports:\n      - 80:80\n    volumes:\n      - .:/var/www/html\n```\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  php:\n    image: serversideup/php:8.2-fpm-nginx-v2.2.1\n    ports:\n      - 80:80\n    volumes:\n      - .:/var/www/html\n```\n\n----------------------------------------\n\nTITLE: Manually Updating Debian-based PHP Docker Images\nDESCRIPTION: Example Dockerfile showing how to manually update a Debian-based serversideup/php image using apt-get. The commands update packages, clean up unnecessary files, and remove cache to optimize the image size.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/docs/content/docs/2.getting-started/3.upgrade-guide.md#2025-04-21_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM serversideup/php:8.4.1-fpm-nginx\n\nRUN apt-get update \\\n    && apt-get upgrade -y \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* /usr/share/doc/*\n```\n\n----------------------------------------\n\nTITLE: Viewing Docker Compose Output with Custom Entrypoint Script\nDESCRIPTION: Displays the output of 'docker compose up' command, showing the execution of the custom entrypoint script along with other initialization processes.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/docs/content/docs/5.customizing-the-image/3.adding-your-own-start-up-scripts.md#2025-04-21_snippet_4\n\nLANGUAGE: txt\nCODE:\n```\nexample-project  | init-unit: Stopping Unit daemon after initial configuration...\nexample-project  | 2023/12/05 19:52:37 [notice] 29#29 process 33 exited with code 0\nexample-project  | init-unit: Waiting for control socket to be removed...\nexample-project  | 2023/12/05 19:52:37 [notice] 29#29 process 34 exited with code 0\nexample-project  | \nexample-project  | init-unit: Unit initial configuration complete; ready for start up...\nexample-project  | \nexample-project  | 👋 Hello, world!\nexample-project  | 2023/12/05 19:52:38 [info] 1#1 unit 1.31.1 started\nexample-project  | 2023/12/05 19:52:38 [info] 65#65 discovery started\nexample-project  | 2023/12/05 19:52:38 [notice] 65#65 module: php 8.4.0 \"/usr/lib/unit/modules/php.unit.so\"\nexample-project  | 2023/12/05 19:52:38 [info] 1#1 controller started\nexample-project  | 2023/12/05 19:52:38 [notice] 1#1 process 65 exited with code 0\nexample-project  | 2023/12/05 19:52:38 [info] 67#67 router started\nexample-project  | 2023/12/05 19:52:38 [info] 67#67 OpenSSL 3.0.11 19 Sep 2023, 300000b0\n```\n\n----------------------------------------\n\nTITLE: Running a Test Web Server with Docker PHP\nDESCRIPTION: Example command to run a simple container for testing purposes. This mounts the current directory to the container's web root and exposes ports 80 and 443, mapping them to container ports 8080 and 8443 respectively.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/docs/content/docs/2.getting-started/7.contributing.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -v $(pwd):/var/www/html -p 80:8080 -p 443:8443 serversideup/php:8.4-fpm-nginx\n```\n\n----------------------------------------\n\nTITLE: Pulling Docker PHP Image\nDESCRIPTION: Simple command to download a PHP 8.3 FPM-NGINX image using Docker.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/docs/content/docs/2.getting-started/2.installation.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull serversideup/php:8.3-fpm-nginx\n```\n\n----------------------------------------\n\nTITLE: Pulling Specific PHP Version with FPM-Apache on Alpine\nDESCRIPTION: Command to pull PHP 8.1.16 running FPM with Apache on Alpine from DockerHub, locked to the v3.0.0 GitHub release for stability.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/docs/content/docs/2.getting-started/2.installation.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nserversideup/php:8.1.16-fpm-apache-alpine-v3.0.0\n```\n\n----------------------------------------\n\nTITLE: Running Laravel Horizon Command in Shell\nDESCRIPTION: The standard command to start Laravel Horizon process. This command is typically run inside a Docker container when using Docker.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/docs/content/docs/4.laravel/4.laravel-horizon.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nphp artisan horizon\n```\n\n----------------------------------------\n\nTITLE: Running Laravel Queue Command in Shell\nDESCRIPTION: The standard command to start a Laravel queue worker with 3 retry attempts.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/docs/content/docs/4.laravel/3.laravel-queue.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nphp artisan queue:work --tries=3\n```\n\n----------------------------------------\n\nTITLE: Using Docker PHP FPM-Apache Image\nDESCRIPTION: Example of Docker PHP FPM-Apache image reference syntax for running PHP with Apache integration.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/docs/content/docs/2.getting-started/2.installation.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nfpm-apache\n```\n\n----------------------------------------\n\nTITLE: Using Docker PHP FPM Image\nDESCRIPTION: Example of Docker PHP FPM image reference syntax for running PHP-FPM processes.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/docs/content/docs/2.getting-started/2.installation.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nfpm\n```\n\n----------------------------------------\n\nTITLE: Building PHP Unit Image with Docker\nDESCRIPTION: Command to build a local Docker PHP image with Unit web server on Debian Bookworm. This example demonstrates building PHP version 8.2.12 using the project's development script.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/docs/content/docs/2.getting-started/7.contributing.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbash scripts/dev.sh --variation unit --version 8.2.12 --os bookworm\n```\n\n----------------------------------------\n\nTITLE: Pulling Beta PHP CLI Image\nDESCRIPTION: Command to pull the latest beta version of the repository (not PHP itself) running PHP CLI 8.x.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/docs/content/docs/2.getting-started/2.installation.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nserversideup/php:beta-8\n```\n\n----------------------------------------\n\nTITLE: Project Directory Structure\nDESCRIPTION: Example project file structure showing the relationship between Docker configuration files.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/docs/content/docs/5.customizing-the-image/2.installing-additional-php-extensions.md#2025-04-21_snippet_4\n\nLANGUAGE: txt\nCODE:\n```\n.\n├── Dockerfile\n├── docker-compose.yml\n└── public\n    └── index.php\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Rebuild Command\nDESCRIPTION: Command to rebuild Docker containers when Dockerfile changes are made.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/docs/content/docs/5.customizing-the-image/2.installing-additional-php-extensions.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ndocker compose up --build\n```\n\n----------------------------------------\n\nTITLE: Defining Marketing Page Layout Structure in Markdown/Frontmatter\nDESCRIPTION: The file defines a marketing page structure using custom Vue/Nuxt components within markdown frontmatter. Each component is referenced using custom syntax with double colons and empty content blocks.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/docs/content/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: marketing\n---\n::marketing-hero\n::\n\n::marketing-grid\n::\n\n::marketing-optimized\n::\n\n::marketing-dev-to-prod\n::\n\n::marketing-testimonials\n::\n\n::landing-signup\n::\n\n::marketing-follow-along\n::\n```\n\n----------------------------------------\n\nTITLE: Markdown Link to Contribution Guide\nDESCRIPTION: A markdown heading and link directing contributors to the official documentation page for contribution guidelines.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Contribution Guide\nSee our Contribution Guide: https://serversideup.net/open-source/docker-php/docs/getting-started/contributing\n```\n\n----------------------------------------\n\nTITLE: Building the Documentation Site for Production\nDESCRIPTION: Compiles and optimizes the documentation site for production deployment.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/docs/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Previewing Production Build Locally\nDESCRIPTION: Serves the production build locally to verify functionality before deployment.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/docs/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn preview\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server with Yarn\nDESCRIPTION: Launches the development server on http://localhost:3000 for local development and preview.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/docs/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Yarn\nDESCRIPTION: Installs all required dependencies for the documentation site using Yarn package manager.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/docs/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Navigating to Documentation Directory in Bash\nDESCRIPTION: Changes the current directory to the docs/ folder where the documentation site is located.\nSOURCE: https://github.com/serversideup/docker-php/blob/main/docs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd docs/\n```"
  }
]