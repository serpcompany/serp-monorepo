[
  {
    "owner": "processing",
    "repo": "p5.js",
    "content": "TITLE: Defining a class using JSDoc @class and @constructor tags in JavaScript\nDESCRIPTION: This snippet illustrates the use of JSDoc annotations to define a class named p5.Color, including its purpose, properties, and constructor parameters. It helps in generating structured documentation and describing class behavior within the p5.js library.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/contributing_to_the_p5js_reference.md#_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * A class to describe a color. Each `p5.Color` object stores the color mode\n * and level maxes that were active during its construction. These values are\n * used to interpret the arguments passed to the object's constructor. They\n * also determine output formatting such as when\n * <a href=\"#/p5/saturation\">saturation()</a> is called.\n *\n * Color is stored internally as an array of ideal RGBA values in floating\n * point form, normalized from 0 to 1. These values are used to calculate the\n * closest screen colors, which are RGBA levels from 0 to 255. Screen colors\n * are sent to the renderer.\n *\n * When different color representations are calculated, the results are cached\n * for performance. These values are normalized, floating-point numbers.\n *\n * <a href=\"#/p5/color\">color()</a> is the recommended way to create an instance\n * of this class.\n *\n * @class p5.Color\n * @constructor\n * @param {p5} [pInst]                  pointer to p5 instance.\n *\n * @param {Number[]|String} vals        an array containing the color values\n *                                      for red, green, blue and alpha channel\n *                                      or CSS color.\n */\n```\n\n----------------------------------------\n\nTITLE: JSON Example: File Load Error with Suggestion\nDESCRIPTION: Shows an example of a translation item for a file load error with a suggestion using interpolation in p5.js's FES.  The `{{suggestion}}` placeholder is used to dynamically insert a suggestion message.  This allows providing context-specific advice for resolving the error.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/friendly_error_system.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n\"image\": \"It looks like there was a problem loading your image. {{suggestion}}\"\n```\n\n----------------------------------------\n\nTITLE: Validating Method Parameters in p5.js Using FES - JavaScript\nDESCRIPTION: Demonstrates the use of p5._validateParameters() to perform automated argument validation in custom p5.js methods. This ensures that any invocation of the method adheres to the defined signature, enabling the emission of contextual Friendly Error messages for incorrect parameter counts or types. Place this validation at the start of the method implementation; the first parameter is the method name, and the second is the special 'arguments' object. Requires the Friendly Error System to be enabled in the non-minified p5.js build.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/how-to-add-friendly-error-messages.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\np5._validateParameters('circle', arguments);\n```\n\n----------------------------------------\n\nTITLE: Reporting Errors with _report() in JavaScript\nDESCRIPTION: The `_report()` function is the primary function used to print error messages to the console. When running tests, it uses `p5._fesLogger` instead of `console.log` to pass errors to Mocha. The function accepts a message string, an optional function name, and an optional CSS color code for the message. The `func` input is used to append a reference link to the end of the error message.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/fes_contribution_guide.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n_report(message);\n\n_report(message, func);\n\n_report(message, func, color);\n```\n\n----------------------------------------\n\nTITLE: Generating Library Error Messages in p5.js with p5._friendlyError\nDESCRIPTION: This snippet illustrates how to call `p5._friendlyError()` with a custom error message and method name to generate a Friendly Error message for library methods. This example targets the `bezierVertex()` method.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/how-to-add-friendly-error-messages.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\np5._friendlyError(\n\t\t'vertex() must be used once before calling bezierVertex()',\n\t\t'bezierVertex'\n\t);\n```\n\n----------------------------------------\n\nTITLE: Handling File Load Errors in p5.js with p5._friendlyFileLoadError\nDESCRIPTION: This snippet demonstrates how to use `p5._friendlyFileLoadError()` within an error callback in the `httpDo.call()` method to provide a user-friendly error message when a file fails to load. It specifies case 3 (string-based file loading) and passes the file path as arguments.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/how-to-add-friendly-error-messages.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\np5.prototype.httpDo.call(\n\t\tthis,\n\t\targs[0],\n\t\t'GET',\n\t\t'text',\n\t\tdata => {\n\t\t\t// [... code omitted ...]\n\t\t},\n\t\tfunction(err) {\n\t\t\t// Error handling\n\t\t\tp5._friendlyFileLoadError(3, args[0]);\n\t\t\t// [... code omitted ...]\n\t\t}\n\t);\n```\n\n----------------------------------------\n\nTITLE: JavaScript: Printing a Friendly Error Message\nDESCRIPTION: Illustrates how to print a generated friendly error message to the console in p5.js. The `p5._friendlyError()` function is used to display the error message generated by the `translator` function.  This ensures consistent formatting and display of FES messages.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/friendly_error_system.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\np5._friendlyError(\n  translator('fes.globalErrors.type.notfunc', translationObj)\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Modules JavaScript\nDESCRIPTION: This snippet shows how to define a module using JSDoc tags. The `@module` tag defines a group of functionality, while `@submodule` defines sub-modules. The `@for` tag defines the relationship between the module and the `p5` class. `@requires` defines the required dependencies.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ko/contributing_to_the_p5js_reference.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @module Color\n * @submodule Creating & Reading\n * @for p5\n * @requires core\n * @requires constants\n */\n```\n\n----------------------------------------\n\nTITLE: Grid Output Update Function in gridOutput.js\nDESCRIPTION: The _updateGridOutput() function rebuilds the grid layout description of canvas shapes, including a summary, positional map, and shape details, for accessibility tools. It updates the associated data only when content changes, providing a spatially accurate representation for screen reader users.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ja/web_accessibility.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// src/accessibility/gridOutput.js\n\nthis._updateGridOutput = function() {\n  // Build grid summary, positional map, shape details.\n  // Update only if content differs from previous.\n  // Use helper functions: _gridSummary(), _gridMap(), _gridShapeDetails().\n}\n\n```\n\n----------------------------------------\n\nTITLE: HTML Output Structure Generated by p5.js gridOutput - HTML\nDESCRIPTION: This HTML snippet illustrates the DOM structure generated by p5.js's `gridOutput()` function within the canvas. It provides a summary, a table (`gridOutput_map`) that spatially maps shapes to cells, and a list (`gridOutput_shapeDetails`) detailing shape properties. This structure presents canvas content in a grid format suitable for screen readers.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/web_accessibility.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<canvas id=\"defaultCanvas0\" class=\"p5Canvas\" style=\"width: 400px; height: 400px;\" width=\"400\" height=\"400\">\n  <div id=\"defaultCanvas0accessibleOutput\" role=\"region\" aria-label=\"Canvas Outputs\">\n    <div id=\"defaultCanvas0gridOutput\">\n      Grid Output\n      <p id=\"defaultCanvas0gridOutput_summary\" aria-label=\"grid output summary\">\n     white canvas, 400 by 400 pixels, contains 2 shapes:  1 circle 1 square\n   </p>\n      <table id=\"defaultCanvas0gridOutput_map\" summary=\"grid output content\">\n        <tbody>\n          <tr></tr>\n          <tr></tr>\n          <tr>\n            <td><a href=\"#defaultCanvas0gridOutputshape0\">orange circle</a></td>\n          </tr>\n          <tr></tr>\n          <tr></tr>\n          <tr></tr>\n          <tr></tr>\n          <tr></tr>\n          <tr>\n            <td><a href=\"#defaultCanvas0gridOutputshape1\">fuchsia square</a></td>\n          </tr>\n          <tr></tr>\n        </tbody>\n      </table>\n      <ul id=\"defaultCanvas0gridOutput_shapeDetails\" aria-label=\"grid output shape details\">\n        <li id=\"defaultCanvas0gridOutputshape0\">orange circle, location = top left, area = 1 %</li>\n        <li id=\"defaultCanvas0gridOutputshape1\">fuchsia square, location = bottom right, area = 2 %</li>\n      </ul>\n    </div>\n  </div>\n</canvas>\n```\n\n----------------------------------------\n\nTITLE: Color Naming with _rgbColorName() in color_namer.js\nDESCRIPTION: The _rgbColorName() function converts an RGBA color array to a human-readable color name, utilizing HSV conversion and a lookup table. It supports accessibility by providing descriptive color labels, which are used in background and shape coloring functions to communicate visually distinct colors to screen reader users.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ja/web_accessibility.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// src/accessibility/color_namer.js\n\nfunction _rgbColorName(rgba) {\n  const hsba = color_conversion._rgbaToHSBA(rgba[0], rgba[1], rgba[2], rgba[3]);\n  return _calculateColor(hsba); // Returns color name based on HSV\n}\n\n// _calculateColor compares HSV to predefined lookup to find color name.\nfunction _calculateColor(hsba) {\n  // HSV comparison logic here.\n  // Returns name like 'red', 'blue', 'gray', etc.\n}\n\n```\n\n----------------------------------------\n\nTITLE: Reporting Errors with _report\nDESCRIPTION: The `_report()` function is the primary function for printing error helper messages directly to the console. It takes a message as input, and optionally a function name and color. When `_fesLogger` is set (e.g., during testing), it calls `_fesLogger` instead of `console.log`.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ja/fes_reference_dev_notes.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n_report(message)\n```\n\nLANGUAGE: javascript\nCODE:\n```\n_report(message, func)\n```\n\nLANGUAGE: javascript\nCODE:\n```\n_report(message, func, color)\n```\n\n----------------------------------------\n\nTITLE: Measuring Average Frame Rate for Performance Testing in p5.js - JavaScript\nDESCRIPTION: This code sample enables performance benchmarking for p5.js sketches by computing and displaying an average frame rate over a sliding window. It requires p5.js and should be placed inside a sketch. Key variables include 'numSamples' (window size), 'avgFrameRates' (rolling record of recent frame rates), and 'frameRateP' (display element). Expected output is an HTML element at (0,0) showing the rounded average FPS. Disable extra error handlers such as friendly errors for more accurate measurement in production.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/webgl_contribution_guide.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet frameRateP;\nlet avgFrameRates = [];\nlet frameRateSum = 0;\nconst numSamples = 30;\nfunction setup() {\n  // ...\n  frameRateP = createP();\n  frameRateP.position(0, 0);\n}\nfunction draw() {\n  // ...\n  const rate = frameRate() / numSamples;\n  avgFrameRates.push(rate);\n  frameRateSum += rate;\n  if (avgFrameRates.length > numSamples) {\n    frameRateSum -= avgFrameRates.shift();\n  }\n\n  frameRateP.html(round(frameRateSum) + ' avg fps');\n}\n```\n\n----------------------------------------\n\nTITLE: Amending Git History and Handling Conflicts During Rebase - bash and git\nDESCRIPTION: This snippet outlines a sequence of Git commands used during rebasing to update a fork with changes from the upstream repository and resolve conflicts if any arise. It shows adding the upstream remote, fetching the updated main branch, rebasing your branch onto upstream/main, adding changes after conflict resolution, continuing the rebase, and finally pushing the updated branch to the remote fork. This process ensures that your pull request branch remains compatible with the latest main branch changes and resolves conflicts cleanly.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ko/contributor_guidelines.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add upstream https://github.com/processing/p5.js\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit fetch upstream\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit rebase upstream/main\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\ngit add -u\ngit rebase --continue\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit push\n```\n\n----------------------------------------\n\nTITLE: Accessing p5.js Methods via 'this' in Addon (JavaScript)\nDESCRIPTION: Shows the correct way to define a `p5.prototype` method using the traditional `function()` keyword to ensure `this` correctly references the p5 sketch instance. This allows the addon method to access and use other p5.js functions and variables provided by the sketch context, like `this.hour()` and `this.minute()`.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/creating_libraries.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\np5.prototype.loadCSV = function (filename) {\n  // Prints 'I will load the CSV file data.csv at 10:30'\n  // to the console.\n  console.log(`I will load the CSV file ${filename} at ${this.hour()}:${this.minute()}!`);\n};\n```\n\n----------------------------------------\n\nTITLE: Describing Canvas Content with describe() in p5.js\nDESCRIPTION: This JavaScript snippet demonstrates how to use the `describe()` function in p5.js to add a screen reader-accessible description to a canvas. It creates a pink background, draws a red heart shape, and then uses `describe()` with the `LABEL` parameter to create a visible description below the canvas. The description provides context for users who rely on screen readers.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/web_accessibility.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction setup() {\n  background('pink');\n\n  fill('red');\n  noStroke();\n  circle(67, 67, 20);\n  circle(83, 67, 20);\n  triangle(91, 73, 75, 95, 59, 73);\n\n  describe('A pink square with a red heart in the bottom-right corner.', LABEL);\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Parameter Type Validation in p5.js\nDESCRIPTION: Example showing how FES validates parameter types and generates error messages when incorrect data types are passed to the arc() function.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ko/friendly_error_system.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\narc('1', 1, 10.5, 10, 0, Math.PI, 'pie');\n/// 콘솔에 다음의 메시지가 생성됩니다.:\n/// > p5.js:arc() 함수의 입력 파라미터 중 0번째 자리에는(인덱스는 0부터 시작)에는 숫자가 들어와야 하는데 문자열이 들어왔습니다. [https://p5js.org/reference/#p5/arc]\n```\n\n----------------------------------------\n\nTITLE: Creating a color and drawing rectangles - JavaScript\nDESCRIPTION: This example demonstrates how to use the `color()`, `fill()`, `rect()`, and `red()` functions in p5.js.  It shows how to create a color, fill a rectangle with that color, then extract the red component and use that to fill another rectangle. It uses the `describe()` function to create an accessible description of the canvas.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ko/contributing_to_the_p5js_reference.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n * @example\n * <div>\n * <code>\n * const c = color(255, 204, 0);\n * fill(c);\n * rect(15, 20, 35, 60);\n * // Sets 'redValue' to 255.\n * const redValue = red(c);\n * fill(redValue, 0, 0);\n * rect(50, 20, 35, 60);\n * describe(\n *   'Two rectangles with black edges. The rectangle on the left is yellow and the one on the right is red.'\n * );\n * </code>\n * </div>\n```\n\n----------------------------------------\n\nTITLE: Checking User Defined Functions with checkForUserDefinedFunctions\nDESCRIPTION: `checkForUserDefinedFunctions()` checks for incorrect casing of user-defined function calls. The function generates error messages that inform users of potential misspelling issues using the `fes.checkUserDefinedFns` key. The function takes the current context as a parameter (either `window` or a p5 instance).\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/fes_reference_dev_notes.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncheckForUserDefinedFunctions(context)\n```\n\n----------------------------------------\n\nTITLE: Measuring and Displaying Average Frame Rate in p5.js Sketch - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates a performance test in p5.js that tracks recent frame rates and displays the rolling average on a sketch. It samples frame rates in 'draw()', maintains a moving sum and array of the last N samples, and updates a display element with the rounded average. Dependencies include the p5.js library. Key parameters are 'numSamples' for averaging and the 'frameRate()' function. Inputs are real-time frame events; output is a text element showing the average frames per second. Limitations include variability due to browser or system load, and averaging strategy.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ko/webgl_contribution_guide.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet frameRateP;\nlet avgFrameRates = [];\nlet frameRateSum = 0;\nconst numSamples = 30;\nfunction setup() {\n  // ...\n  frameRateP = createP();\n  frameRateP.position(0, 0);\n}\nfunction draw() {\n  // ...\n  const rate = frameRate() / numSamples;\n  avgFrameRates.push(rate);\n  frameRateSum += rate;\n  if (avgFrameRates.length > numSamples) {\n    frameRateSum -= avgFrameRates.shift();\n  }\n\n  frameRateP.html(round(frameRateSum) + ' avg fps');\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous loadCSV Function in p5.js\nDESCRIPTION: This snippet demonstrates how to create an asynchronous `loadCSV()` function for a p5.js addon using the Fetch API to load and parse a CSV file. It includes basic error handling by logging to the console and demonstrates the structure for making the loading asynchronous.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/creating_libraries.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\np5.prototype.loadCSV = function(filename){\n  console.log(`I will load the CSV file ${filename} at ${this.hour()}:${this.minute()}!`);\n\n  let result = [];\n\n  fetch(filename)\n    .then((res) => res.text())\n    .then((data) => {\n      data.split('\\n').forEach((line) => {\n        result.push(line.split(','));\n      });\n    });\n\n  return result;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a File Load Error Case in the Friendly Error System - JavaScript\nDESCRIPTION: Illustrates how to implement a new error case inside the fileLoadErrorCases switch statement within p5.js's FES. Each case returns a structured error message using the translator utility and includes a method tag for context. To define a new error, replace the placeholders with the appropriate tag and method names, and increment the case number sequentially. Requires integration into the core/friendly_errors/file_errors.js file and knowledge of i18next usage.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/how-to-add-friendly-error-messages.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\ncase {{next available case number}}:\n  return {\n    message: translator('fes.fileLoadError.{{tag name}}', {\n      suggestion\n    }),\n    method: '{{name of your method}}'\n  };\n```\n\n----------------------------------------\n\nTITLE: Implementing Immediate-Mode Buttons in p5.js JavaScript\nDESCRIPTION: This snippet demonstrates creating a button using an Immediate-Mode GUI approach with the p5.touchgui extension for p5.js. The setup function initializes the canvas and the GUI system and sets up a container object for the button variable. The draw function clears the background, starts the GUI system, and renders a button at a specified position. If the button is pressed, a message is printed to the console. Dependencies include the p5.js library and p5.touchgui, with the button label, position, and callback as key parameters. This approach requires passing JavaScript objects by reference and is limited in styling and multi-touch support.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/project_wrapups/L05_GSOC_2019.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet x;\n\nfunction setup() {\n    createCanvas(400, 400);\n    createGui();\n\n    x = {val: 0.5};\n}\n\nfunction draw() {\n    background(220);\n    startGui();\n\n    if (button(\"Button 1\", 50, 50)) {\n        print(\"Button 1 pressed.\");\n    }\n\n    endGui();\n}\n```\n\n----------------------------------------\n\nTITLE: Asynchronous function with getData and callback\nDESCRIPTION: This snippet presents an example of an asynchronous function using a callback function for handling data. It creates an object to store data loaded from an asynchronous source and provides a method to get the data. The example includes the handling of callback function and the preloading method.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ja/creating_libraries.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// preload()内またはコールバックと一緒に使用する非同期関数の例。\np5.prototype.getData = function (callback) {\n\n  // 非同期関数からデータをクローンして返すオブジェクトを作成します。\n  // 以下でこのオブジェクトを更新しますが、上書き/再割り当てしません。\n  // preload()のために、元のポインタ/リファレンスを保持することが非常に重要です。\n  // constで変数を宣言することで、誤って再割り当てされるのを防ぎます。\n  const ret = {};\n\n  // 処理しているいくつかの非同期関数。\n  loadDataFromSpace(function (data) {\n\n    // dataのプロパティを反復処理します。\n    for (let prop in data) {\n      // retのプロパティをdataのプロパティ（クローン）に設定します。\n      // つまり、受け取ったデータで空のretオブジェクトのプロパティを更新します。\n      // しかし、retを別のオブジェクトで上書き/再割り当てすることはできません。\n      // その内容を更新する必要があります。\n      ret[prop] = data[prop];\n    }\n    // callbackが実際に関数であるかどうかをチェックします。\n    if (typeof callback == 'function') {\n      callback(data); // コールバックを実行します。\n    }\n  });\n  // 上記のデータで埋められたオブジェクトを返します。\n  return ret;\n};\n\n```\n\n----------------------------------------\n\nTITLE: Using Strict Equality in p5.js JavaScript\nDESCRIPTION: Guidelines for using === and !== instead of == and !=. Strict equality operators avoid type coercion and provide more predictable results.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/documentation_style_guide.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n// Bad.\nif (mouseIsPressed) {\n  // ...\n}\n\n// Good.\nif (mouseIsPressed === true) {\n  // ...\n}\n\n// Bad.\nif (name) {\n  // ...\n}\n\n// Good.\nif (name !== '') {\n  // ...\n}\n\n// Bad.\nif (collection.length) {\n  // ...\n}\n\n// Good.\nif (collection.length > 0) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Misused Top Level Code p5.js\nDESCRIPTION: The `helpForMisusedAtTopLevelCode()` function checks for misuse of p5.js functions outside of `setup()` or `draw()`. It is called on window load by `fes_core.js`.  It uses `translator()` to print a friendly error message using the key `fes.misusedTopLevel`.  Parameters include an error event and a boolean `log` for debugging purposes.  Dependencies: `fes_core.js`, `translator()`, window load event.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/fes_contribution_guide.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n@param {*}        err    Error event\n@param {Boolean}  log    false\n```\n\n----------------------------------------\n\nTITLE: Registering loadCSV with registerPreloadMethod in p5.js\nDESCRIPTION: This snippet shows the correct implementation of `loadCSV()` with `registerPreloadMethod()`. It adds `this._decrementPreload()` after the data is loaded and processed to signal p5.js that the asynchronous loading is complete.  Also, it includes a comment regarding the `result` variable must be an object, and the return can only alter the object's contents.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/creating_libraries.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\np5.prototype.loadCSV = function (filename){\n  console.log(`I will load the CSV file ${filename} at ${this.hour()}:${this.minute()}!`);\n\n  let result = [];\n\n  fetch(filename)\n    .then((res) => res.text())\n    .then((data) => {\n      data.split('\\n').forEach((line) => {\n        result.push(line.split(','));\n      });\n\n      this._decrementPreload();\n    });\n\n  return result;\n};\n\np5.prototype.registerPreloadMethod('loadCSV', p5.prototype);\n```\n\n----------------------------------------\n\nTITLE: Validating Parameters in p5.js Methods Using JavaScript\nDESCRIPTION: This snippet shows how to invoke the internal parameter validation function `p5._validateParameters()` within a p5.js method implementation to check argument count and types. It is typically called at the start of the method to prevent further execution if parameters are invalid. This approach depends on the method's inline documentation containing full parameter specs and integrates with the p5.js Friendly Error System (FES) to generate user-friendly error messages dynamically. The example demonstrates argument handling and eventually calling an internal rendering method.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/how-to-add-friendly-error-messages.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\np5._validateParameters('circle', arguments);\np5.prototype.circle = function() {\n  p5._validateParameters('circle', arguments);\n  const args = Array.prototype.slice.call(arguments, 0, 2);\n  args.push(arguments[2]);\n  args.push(arguments[2]);\n  return this._renderEllipse(...args);\n};\n```\n\n----------------------------------------\n\nTITLE: Unregistering a Method in p5.js\nDESCRIPTION: This snippet shows how to remove an action hook using the `unregisterMethod()` function.  This allows the addon to clean up or disable functionality at runtime.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/creating_libraries.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\np5.prototype.unregisterMethod('remove', p5.prototype.doRemoveStuff);\n```\n\n----------------------------------------\n\nTITLE: Registering custom preload method with registerPreloadMethod()\nDESCRIPTION: This snippet shows how to register a custom asynchronous method to be invoked during preload() using registerPreloadMethod(). It helps ensure external data or assets load properly before setup() proceeds. In this example, 'loadSound' from p5.sound is registered for preloading.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/creating_libraries.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\np5.prototype.registerPreloadMethod('loadSound', p5.prototype);\n```\n\n----------------------------------------\n\nTITLE: Rebase local branch with upstream\nDESCRIPTION: This command rebases the current local branch onto the `main` branch of the \"upstream\" repository.  This integrates the latest changes from the official p5.js repository into the local fork and helps resolve potential conflicts.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/contributor_guidelines.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngit rebase upstream/main\n```\n\n----------------------------------------\n\nTITLE: Documenting a p5.js Variable with YUIDoc (JavaScript)\nDESCRIPTION: Provides a complete YUIDoc comment block example for documenting a p5.js system variable (`mouseX`). It uses `@property` instead of `@method` to define the variable's name and type, includes the `@readOnly` tag to indicate it shouldn't be modified by users, and contains an `@example` block.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/contributing_to_the_p5js_reference.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * The system variable mouseX always contains the current horizontal\n * position of the mouse, relative to (0, 0) of the canvas. The value at\n * the top-left corner is (0, 0) for 2-D and (-width/2, -height/2) for WebGL.\n * If touch is used instead of mouse input, mouseX will hold the x value\n * of the most recent touch point.\n *\n * @property {Number} mouseX\n * @readOnly\n *\n * @example\n * <div>\n * <code>\n * // Move the mouse across the canvas\n * function draw() {\n *   background(244, 248, 252);\n *   line(mouseX, 0, mouseX, 100);\n *   describe('horizontal black line moves left and right with mouse x-position');\n * }\n * </code>\n * </div>\n */\n```\n\n----------------------------------------\n\nTITLE: Scope Error Example - JavaScript\nDESCRIPTION: This snippet showcases a common scope error made by beginners in JavaScript.  The variable `a` is defined within the `setup` function and is not accessible within the `draw` function, resulting in a reference error. The FES aims to provide helpful explanations and resources for resolving such errors.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/project_wrapups/akshaypadte_gsoc_2020.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction setup() {\n  let a = 5;\n}\nfunction draw() {\n  let b = a + 5;\n}\n```\n\n----------------------------------------\n\nTITLE: Including p5.js and Addon Script in HTML (HTML)\nDESCRIPTION: Shows the essential HTML structure for loading both the core p5.js library (`p5.js`) and a custom addon library file (`p5.loadcsv.js`). These script tags should be placed within the `<head>` section of the HTML document to make the addon functionalities available to the sketch.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/creating_libraries.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<html>\n  <head>\n    <!-- Other tags -->\n\n    <script src=\"./p5.js\"></script>\n    <script src=\"./p5.loadcsv.js\"></script>\n\n    <!-- Other tags -->\n  </head>\n\n  <!-- Other tags -->\n\n</html>\n```\n\n----------------------------------------\n\nTITLE: Pushing a Branch to Remote Repository\nDESCRIPTION: This command pushes the local branch to the remote repository. The `-u` flag sets up tracking of the remote branch, so subsequent pushes can be done with a simple `git push`. `[支店名]` should be replaced by the name of your working branch.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ja/contributor_guidelines.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\ngit push -u origin [支店名]\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with npm\nDESCRIPTION: This code snippet shows how to install the project's dependencies using npm. It is assumed that Node.js is already installed.  The command `npm ci` is used to ensure consistent installs by using a package-lock.json or a shrinkwrap file. This is a crucial first step for setting up a local development environment.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ja/contributor_guidelines.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nnpm ci\n```\n\n----------------------------------------\n\nTITLE: Standard Reference Comment Structure Example in p5.js\nDESCRIPTION: A complete example of a reference comment block for the sin() function showing proper format with description, method signature, parameters, return value, and usage examples.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/hi/contributing_to_the_p5js_reference.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * एक कोण का साइन कैलकुलेट करता है। sin() बहुत से रचनात्मक कोडिंग में ज्यामिति कार्यों के लिए उपयोगी होता है।\n *  इनपुट कोण बढ़ने पर वापसी की गई मान बीच -1 और 1 के बीच ओसिलेट करती है।\n *  sin() में वर्तमान को संज्ञान में लेता है।\n * <a href=\"#/p5/angleMode\">angleMode</a>.\n *\n * @method sin\n * @param  {Number} angle the angle.\n * @return {Number} sine of the angle.\n *\n * @example\n * <div>\n * <code>\n * function draw() {\n *   background(200);\n *\n *   let t = frameCount;\n *   let x = 50;\n *   let y = 30 * sin(t * 0.05) + 50;\n *   line(x, 50, x, y);\n *   circle(x, y, 20);\n *\n *   describe('A white ball on a string oscillates up and down.');\n * }\n * </code>\n * </div>\n *\n * <div>\n * <code>\n * function draw() {\n *   let x = frameCount;\n *   let y = 30 * sin(x * 0.1) + 50;\n *   point(x, y);\n *\n *   describe('A series of black dots form a wave pattern.');\n * }\n * </code>\n * </div>\n *\n * <div>\n * <code>\n * function draw() {\n *   let t = frameCount;\n *   let x = 30 * cos(t * 0.1) + 50;\n *   let y = 10 * sin(t * 0.2) + 50;\n *   point(x, y);\n *\n *   describe('A series of black dots form an infinity symbol.');\n * }\n * </code>\n * </div>\n */\n```\n\n----------------------------------------\n\nTITLE: Handling File Load Errors by Calling p5._friendlyFileLoadError in JavaScript\nDESCRIPTION: Example of invoking the Friendly Error System’s file load error helper function `p5._friendlyFileLoadError()` within an error callback during a file loading operation. It is passed a case number corresponding to one in the error cases list and the problematic file path, to generate a helpful localized error message for the user. This pattern is used in `loadStrings()` and similar methods that perform asynchronous file loads to enhance error feedback.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/how-to-add-friendly-error-messages.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\np5.prototype.httpDo.call(\n  this,\n  args[0],\n  'GET',\n  'text',\n  data => {\n    // [... omitted ...]\n  },\n  function(err) {\n    // 错误处理\n    p5._friendlyFileLoadError(3, args[0]);\n    // [... omitted ...]\n  }\n );\n```\n\n----------------------------------------\n\nTITLE: Viewing Git Diffs\nDESCRIPTION: This command displays the differences between the current files in the working directory and the last commit. This is used to review all of your changes before committing, providing a detailed diff view.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ja/contributor_guidelines.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\ngit diff\n```\n\n----------------------------------------\n\nTITLE: Asynchronous data retrieval with callback in getData() method\nDESCRIPTION: This snippet illustrates defining an asynchronous method 'getData()' on p5.prototype that loads data with a callback, updates a retained object, and returns it. It ensures data consistency during async operations and integrates with preload() correctly. Use of loadDataFromSpace() is assumed as a placeholder for an actual async data fetch.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/creating_libraries.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\np5.prototype.getData = function (callback) {\n\n  const ret = {};\n\n  loadDataFromSpace(function (data) {\n\n    for (let prop in data) {\n      ret[prop] = data[prop];\n    }\n    if (typeof callback == 'function') {\n      callback(data);\n    }\n  });\n  return ret;\n};\n```\n\n----------------------------------------\n\nTITLE: Checking Git Status\nDESCRIPTION: This command, executed via the command-line, retrieves the current status of the Git repository.  It displays the files that have been modified and the changes that are pending to be committed.  It is crucial for understanding the state of changes before committing them.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ja/contributor_guidelines.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\ngit status\n```\n\n----------------------------------------\n\nTITLE: JavaScript Example: Interpolation Usage\nDESCRIPTION: This JavaScript snippet demonstrates the use of the `translator` function along with the JSON definition to generate dynamic messages within the FES. It passes the key 'greeting' and the variable 'who' with the value 'everyone' to produce a personalized greeting message. It is dependent on the i18next translator function.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/friendly_error_system.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ntranslator('greeting', { who: 'everyone' } );\n```\n\n----------------------------------------\n\nTITLE: Detecting Redeclaration of p5.js Variables\nDESCRIPTION: This JavaScript snippet demonstrates a scenario where a user accidentally redefines the p5.js 'text' function, leading to unexpected behavior. The code illustrates a common issue that the `sketch_reader.js` feature aims to address by detecting and reporting such redeclarations. The example shows how the user-defined function shadows the intended p5.js functionality.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/project_wrapups/shantanuKaushik_gsoc_2021.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n//user redefines p5.js's \"text\" function \nlet text = function(){\n  console.log('hello world');\n}\n//if the user intends to user p5.js text function somewhere in their code then it won't work\n```\n\n----------------------------------------\n\nTITLE: File Loading Error Example in JavaScript\nDESCRIPTION: This code example demonstrates how a missing font file triggers a Friendly Error message. When the `loadFont()` function fails to load the font, FES generates a message in the console to guide the user. This message provides information about checking the file path, hosting the file online, or running a local server. It also shows how the error message is supplemented with a link to the p5.js wiki for more information.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/fes_contribution_guide.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n/// missing font file\nlet myFont;\nfunction preload() {\n  myFont = loadFont('assets/OpenSans-Regular.ttf');\n}\nfunction setup() {\n  fill('#ED225D');\n  textFont(myFont);\n  textSize(36);\n  text('p5*js', 10, 50);\n}\nfunction draw() {}\n```\n\nLANGUAGE: js\nCODE:\n```\n🌸 p5.js says: It looks like there was a problem loading your font. Try checking if the file path (assets/OpenSans-Regular.ttf) is correct, hosting the file online, or running a local server.\n\n+ More info: https://github.com/processing/p5.js/wiki/Local-server\n```\n\n----------------------------------------\n\nTITLE: Setting background color with background() - JavaScript\nDESCRIPTION: This example shows how to document multiple signatures for the `background()` function in p5.js. It showcases different parameter options, including color strings and grayscale values. The documentation uses `@method` and `@param` tags to specify the parameters for each signature.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ko/contributing_to_the_p5js_reference.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * @method background\n * @param {String} colorstring color string, possible formats include: integer\n *                         rgb() or rgba(), percentage rgb() or rgba(),\n *                         3-digit hex, 6-digit hex\n * @param {Number} [a] alpha value\n */\n\n/**\n * @method background\n * @param {Number} gray specifies a value between white and black\n * @param {Number} [a]\n */\n```\n\n----------------------------------------\n\nTITLE: Documenting Function: Sine Calculation in p5.js\nDESCRIPTION: This code snippet demonstrates how to document a function, specifically the `sin()` function, in p5.js using specialized comments.  It includes a description of the function's purpose, the `@method` tag to define the function name, the `@param` tag to document the input parameter 'angle', the `@return` tag to describe the returned sine value, and example code showcasing its usage.  This format enables the generation of the `sin()` function's reference page on the p5.js website.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/es/contributing_to_the_p5js_reference.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * Calculates the sine of an angle. `sin()` is useful for many geometric tasks\n * in creative coding. The values returned oscillate between -1 and 1 as the\n * input angle increases. `sin()` takes into account the current\n * <a href=\"#/p5/angleMode\">angleMode</a>.\n *\n * @method sin\n * @param  {Number} angle the angle.\n * @return {Number} sine of the angle.\n *\n * @example\n * <div>\n * <code>\n * function draw() {\n *   background(200);\n *\n *   let t = frameCount;\n *   let x = 50;\n *   let y = 30 * sin(t * 0.05) + 50;\n *   line(x, 50, x, y);\n *   circle(x, y, 20);\n *\n *   describe('A white ball on a string oscillates up and down.');\n * }\n * </code>\n * </div>\n *\n * <div>\n * <code>\n * function draw() {\n *   let x = frameCount;\n *   let y = 30 * sin(x * 0.1) + 50;\n *   point(x, y);\n *\n *   describe('A series of black dots form a wave pattern.');\n * }\n * </code>\n * </div>\n *\n * <div>\n * <code>\n * function draw() {\n *   let t = frameCount;\n *   let x = 30 * cos(t * 0.1) + 50;\n *   let y = 10 * sin(t * 0.2) + 50;\n *   point(x, y);\n *\n *   describe('A series of black dots form an infinity symbol.');\n * }\n * </code>\n * </div>\n */\n```\n\n----------------------------------------\n\nTITLE: Preload Error Example p5.js\nDESCRIPTION: Demonstrates an internal error occurring in `preload()` when `background()` is called. This example triggers an error because `background()` cannot be called from `preload()`. The FES will generate a specific message providing guidance and pointing to the `preload()` documentation. Dependencies: p5.js library, background() function.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/fes_contribution_guide.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfunction preload() {\n  // error in background() due to it being called in\n  // preload\n  background(200);\n}\n```\n\n----------------------------------------\n\nTITLE: Writing a Function Description in YUIDoc (JavaScript)\nDESCRIPTION: Shows the initial part of a YUIDoc comment block, focusing on the textual description for the `sin()` function. This description explains the function's purpose and behavior, and can include markdown syntax and HTML tags like `<code>` and `<a>`.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/contributing_to_the_p5js_reference.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Calculates the sine of an angle. `sin()` is useful for many geometric tasks\n * in creative coding. The values returned oscillate between -1 and 1 as the\n * input angle increases. `sin()` takes into account the current\n * <a href=\"#/p5/angleMode\">angleMode</a>.\n```\n\n----------------------------------------\n\nTITLE: JavaScript Array Initialization and Manipulation\nDESCRIPTION: Demonstrates creating arrays using literal syntax, adding items with 'push', copying arrays via 'slice', and formatting multi-line arrays for better readability. These practices improve code clarity and performance.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/documentation_style_guide.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Array creation using literals.\nlet images = [];\n\n// Adding items with 'push'.\nlet lyrics = [];\nlyrics.push('Little rough around the edges, but I keep it smooth');\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Copying arrays with 'slice()'.\nlet numbersCopy = numbers.slice();\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Multi-line array definition for readability.\nlet matrix = [\n  [1, 0, 0],\n  [0, 1, 0],\n  [0, 0, 1],\n];\n```\n\n----------------------------------------\n\nTITLE: Error Monitoring Parameter p5.js\nDESCRIPTION: The `@param` parameter is used by `fesErrorMonitor` and takes an error event. The event is the data passed to the `fesErrorMonitor()` that describes the error and allows for the generation of more user friendly messages.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/fes_contribution_guide.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n@param {*}  e     Error event\n```\n\n----------------------------------------\n\nTITLE: Applying Multiple Materials in p5.js WEBGL\nDESCRIPTION: This code demonstrates the implementation of multiple materials in p5.js's WEBGL mode using ambient, specular, and emissive properties to control the visual appearance of the geometry. It initializes the canvas with WEBGL, sets up lights using `ambientLight` and `directionalLight`, and then utilizes `ambientMaterial` and `specularMaterial` functions to control the color properties of spheres within `push` and `pop` blocks. These blocks allow for material properties that contribute separately to the lighting of the surface, allowing different surface appearances.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/project_wrapups/shubham_sharma_gsoc_2022.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction setup() {\n createCanvas(600, 600, WEBGL);\n smooth(8);\n noStroke();\n}\nfunction draw() {\n background(0);\n \n ambientLight(128, 128, 128);\n \n directionalLight(128, 128, 128, cos(frameCount * 0.1), 1, -1);\n \n push();\n translate(-width * 0.25, 0, 0);\n \n ambientMaterial(255, 0, 0);\n specularMaterial(0, 0, 0);\n sphere(width * 0.2);\n \n pop();\n \n push();\n translate(width * 0.25, 0, 0);\n \n ambientMaterial(255, 0, 0);\n specularMaterial(255, 255, 255);\n sphere(width * 0.2);\n \n pop();\n}\n \n```\n\n----------------------------------------\n\nTITLE: Committing Changes with Git\nDESCRIPTION: This command commits the staged changes with a descriptive message, saving them to the local Git repository. The `[your_commit_message]` should be replaced with a concise description of the changes made.  It's important to add detailed descriptions to changes.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ja/contributor_guidelines.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\ngit commit -m \"[your_commit_message]\"\n```\n\n----------------------------------------\n\nTITLE: Cloning a Git Repository Using Command Line\nDESCRIPTION: Command to clone a forked p5.js repository to your local machine using Git CLI. Replace [git_url] with your fork's URL copied from GitHub.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/hi/contributor_guidelines.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone [git_url]\n```\n\n----------------------------------------\n\nTITLE: Checking Git Repository Status - Bash\nDESCRIPTION: Displays the state of the working directory and the staging area. It shows which changes have been staged, which haven't, and which files are not being tracked by Git.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/contributor_guidelines.md#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\ngit status\n```\n\n----------------------------------------\n\nTITLE: Registering a Preload Method\nDESCRIPTION: This snippet demonstrates how to register a method using `registerPreloadMethod()` within p5.js. It's used to register methods that can be called inside `preload()` to handle asynchronous operations. By doing this, p5.js ensures that the sketch waits until these operations are complete before running setup().\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ja/creating_libraries.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n  p5.prototype.registerPreloadMethod('loadSound', p5.prototype);\n\n```\n\n----------------------------------------\n\nTITLE: Basic p5.js JSDoc @example Structure\nDESCRIPTION: Demonstrates the standard JSDoc format for adding a single, runnable p5.js code example to the reference documentation. The example uses basic p5.js functions (`color`, `fill`, `rect`, `describe`) enclosed within `<div>` and `<code>` HTML tags within the JSDoc comment block.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/contributing_to_the_p5js_reference.md#_snippet_0\n\nLANGUAGE: JSDoc\nCODE:\n```\n * @example\n * <div>\n * <code>\n * const c = color(255, 204, 0);\n * fill(c);\n * rect(15, 20, 35, 60);\n * // Sets 'redValue' to 255.\n * const redValue = red(c);\n * fill(redValue, 0, 0);\n * rect(50, 20, 35, 60);\n * describe(\n *   'Two rectangles with black edges. The rectangle on the left is yellow and the one on the right is red.'\n * );\n * </code>\n * </div>\n```\n\n----------------------------------------\n\nTITLE: Multiple p5.js Examples in Documentation\nDESCRIPTION: Illustrates how to include multiple separate runnable examples for a single function within JSDoc comments. Each example is contained within its own `<div><code>...</code></div>` block, separated by a blank line.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/es/contributing_to_the_p5js_reference.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n* @example\n* <div>\n* <code>\n* arc(50, 50, 80, 80, 0, PI + QUARTER_PI, OPEN);\n* describe('An ellipse created using an arc with its top right open.');\n* </code>\n* </div>\n*\n* <div>\n* <code>\n* arc(50, 50, 80, 80, 0, PI, OPEN);\n* describe('The bottom half of an ellipse created using arc.');\n* </code>\n* </div>\n```\n\n----------------------------------------\n\nTITLE: Calling p5.js Addon Function with Parameter (JavaScript)\nDESCRIPTION: Demonstrates how to use the updated `loadCSV` function, which now requires a filename argument. It shows calling `loadCSV` within the p5 `setup` function, passing the string `'data.csv'` as the filename.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/creating_libraries.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction setup() {\n  createCanvas(400, 400);\n\n  // Prints \"I will load the CSV file data.csv soon!\" to the console.\n  loadCSV('data.csv');\n}\n```\n\n----------------------------------------\n\nTITLE: Running all unit tests with npm test command\nDESCRIPTION: This code snippet shows the command to execute all unit tests in the repository using npm. It is used after setting up the test scripts in package.json, facilitating automated testing across the codebase.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/hi/unit_testing.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm test\n```\n\n----------------------------------------\n\nTITLE: Using Variables for Animation\nDESCRIPTION: Shows how to use variables to store and update the position and speed of an ellipse, creating a simple animation where the shape moves across the canvas.\nSOURCE: https://github.com/processing/p5.js/blob/main/test/unit/assets/many_lines.txt#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet x = 50;\nlet y = 50;\nlet speedX = 2;\nlet speedY = 3;\n\nfunction setup() {\n  createCanvas(400, 400);\n}\n\nfunction draw() {\n  background(220);\n  ellipse(x, y, 80, 80);\n\n  // Update position\n  x = x + speedX;\n  y = y + speedY;\n\n  // Check boundaries and reverse direction\n  if (x > width - 40 || x < 40) {\n    speedX = -speedX;\n  }\n  if (y > height - 40 || y < 40) {\n    speedY = -speedY;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Asynchronous 3D Model Rendering Visual Test - JavaScript\nDESCRIPTION: This code snippet demonstrates how to perform an asynchronous visual test, specifically for rendering a 3D model in p5.js. The `visualTest` function uses a Promise to manage the asynchronous loading of an OBJ model.  The test waits for `loadModel` to complete before taking a screenshot.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/unit_testing.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nvisualSuite('3D Model rendering', function() {\n  visualTest('OBJ model is displayed correctly', function(p5, screenshot) {\n    // Return a Promise to ensure the test runner waits for the asynchronous operation to complete\n    return new Promise(resolve => {\n      p5.createCanvas(50, 50, p5.WEBGL);\n      // Load the model asynchronously\n      p5.loadModel('unit/assets/teapot.obj', model => {\n        p5.background(200);\n        p5.rotateX(10 * 0.01);\n        p5.rotateY(10 * 0.01);\n        p5.model(model);\n        // Take a screenshot for visual comparison\n        screenshot();\n        // Resolve the Promise to indicate completion\n        resolve();\n      });\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using describe() for Accessibility in YUIDoc Examples (JavaScript)\nDESCRIPTION: Provides two distinct `@example` blocks demonstrating the mandatory use of the p5.js `describe()` function within example code. `describe()` takes a string argument that provides a textual description of the visual output, making the examples accessible to screen reader users.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/contributing_to_the_p5js_reference.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n* @example\n* <div>\n* <code>\n* let xoff = 0.0;\n* function draw() {\n*   background(204);\n*   xoff = xoff + 0.01;\n*   let n = noise(xoff) * width;\n*   line(n, 0, n, height);\n*   describe('A vertical line moves randomly from left to right.');\n* }\n* </code>\n* </div>\n*\n* <div>\n* <code>\n* let noiseScale = 0.02;\n* function draw() {\n*   background(0);\n*   for (let x = 0; x < width; x += 1) {\n*     let noiseVal = noise((mouseX + x) * noiseScale, mouseY * noiseScale);\n*     stroke(noiseVal*255);\n*     line(x, mouseY + noiseVal * 80, x, height);\n*   }\n*   describe('A horizontal wave pattern moves in the opposite direction of the mouse.');\n* }\n* </code>\n* </div>\n```\n\n----------------------------------------\n\nTITLE: Reading current horizontal mouse position mouseX - JavaScript\nDESCRIPTION: This code demonstrates how to document the `mouseX` variable in p5.js. It includes a description of the variable, its type, and its behavior in 2D and WebGL modes.  The `@property` and `@readOnly` tags are used to specify the variable's properties. The example shows how `mouseX` can be used to draw a line that follows the mouse's horizontal position.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ko/contributing_to_the_p5js_reference.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * The system variable mouseX always contains the current horizontal\n * position of the mouse, relative to (0, 0) of the canvas. The value at\n * the top-left corner is (0, 0) for 2-D and (-width/2, -height/2) for WebGL.\n * If touch is used instead of mouse input, mouseX will hold the x value\n * of the most recent touch point.\n *\n * @property {Number} mouseX\n * @readOnly\n *\n * @example\n * <div>\n * <code>\n * // Move the mouse across the canvas\n * function draw() {\n *   background(244, 248, 252);\n *   line(mouseX, 0, mouseX, 100);\n *   describe('horizontal black line moves left and right with mouse x-position');\n * }\n * </code>\n * </div>\n */\n```\n\n----------------------------------------\n\nTITLE: Excluding Examples from Rendering and Testing in YUIDoc (JavaScript)\nDESCRIPTION: Shows how to prevent a YUIDoc example from being rendered on the website and also exclude it from automated tests. Add both `norender` and `notest` classes to the `<div>` tag. This is useful for examples needing user interaction or external setup (like saving files).\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/contributing_to_the_p5js_reference.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n* @example\n* <div class='norender notest'><code>\n* function setup() {\n*   let c = createCanvas(100, 100);\n*   saveCanvas(c, 'myCanvas', 'jpg');\n* }\n* </code></div>\n```\n\n----------------------------------------\n\nTITLE: Calculates sine of an angle using sin() function - JavaScript\nDESCRIPTION: This code block demonstrates how to use the `sin()` function in p5.js to calculate the sine of an angle. It includes examples of how `sin()` can be used to create oscillating motion and wave patterns. The examples incorporate `frameCount`, `cos()`, `line()`, and `circle()` functions.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ko/contributing_to_the_p5js_reference.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * Calculates the sine of an angle. `sin()` is useful for many geometric tasks\n * in creative coding. The values returned oscillate between -1 and 1 as the\n * input angle increases. `sin()` takes into account the current\n * <a href=\"#/p5/angleMode\">angleMode</a>.\n *\n * @method sin\n * @param  {Number} angle the angle.\n * @return {Number} sine of the angle.\n *\n * @example\n * <div>\n * <code>\n * function draw() {\n *   background(200);\n *\n *   let t = frameCount;\n *   let x = 50;\n *   let y = 30 * sin(t * 0.05) + 50;\n *   line(x, 50, x, y);\n *   circle(x, y, 20);\n *\n *   describe('A white ball on a string oscillates up and down.');\n * }\n * </code>\n * </div>\n *\n * <div>\n * <code>\n * function draw() {\n *   let x = frameCount;\n *   let y = 30 * sin(x * 0.1) + 50;\n *   point(x, y);\n *\n *   describe('A series of black dots form a wave pattern.');\n * }\n * </code>\n * </div>\n *\n * <div>\n * <code>\n * function draw() {\n *   let t = frameCount;\n *   let x = 30 * cos(t * 0.1) + 50;\n *   let y = 10 * sin(t * 0.2) + 50;\n *   point(x, y);\n *\n *   describe('A series of black dots form an infinity symbol.');\n * }\n * </code>\n * </div>\n */\n```\n\n----------------------------------------\n\nTITLE: Monitoring Errors with fesErrorMonitor\nDESCRIPTION: `fesErrorMonitor()` handles various errors that appear in the browser, generating global error messages. It uses `fes.globalErrors.syntax.*`, `fes.globalErrors.reference.*`, and `fes.globalErrors.type.*` keys for generating friendly errors. It is also responsible for handling internal library errors via `fes.wrongPreload` and `fes.libraryError`, and stack trace messages with `fes.globalErrors.stackTop` and `fes.globalErrors.stackSubseq`.  It can be triggered by error events, unhandled rejection events or manually in a catch block.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ja/fes_reference_dev_notes.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfesErrorMonitor(event)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction preload() {\n  // プリロードでのbackground()の呼び出しにより発生します。\n  // 間違い\n  background(200);\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction setup() {\n  cnv = createCanvas(200, 200);\n  cnv.mouseClicked();\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction setup() {\n  let b = 1;\n}\nfunction draw() {\n  b += 1;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction setup() {\n  colour(1, 2, 3);\n}\n```\n\n----------------------------------------\n\nTITLE: Marking Private Functions with @private in YUIDoc (JavaScript)\nDESCRIPTION: Illustrates the use of the `@private` tag in YUIDoc comments. This tag prevents the documented function or variable (e.g., the internal `_start` method) from appearing in the generated public reference documentation. The corresponding JavaScript function definition is often placed immediately after the comment block.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/contributing_to_the_p5js_reference.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * _start calls preload() setup() and draw()\n *\n * @method _start\n * @private\n */\n```\n\nLANGUAGE: javascript\nCODE:\n```\np5.prototype._start = function () {\n```\n\n----------------------------------------\n\nTITLE: Continue Git rebase\nDESCRIPTION: These commands are used during the rebase process to mark conflicts as resolved, stage the resolved files, and continue the rebase. After running `npm test`, `git add -u` stages the resolved conflicts, and `git rebase --continue` proceeds with the rebase process.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/contributor_guidelines.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit add -u\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit rebase --continue\n```\n\n----------------------------------------\n\nTITLE: Setting Up Dependencies with npm\nDESCRIPTION: Commands for navigating to the project directory and installing all required packages using npm. This prepares the development environment.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cd p5.js\n$ npm ci\n```\n\n----------------------------------------\n\nTITLE: Commands for generating and previewing p5.js reference documentation with npm\nDESCRIPTION: These commands facilitate automatic documentation generation and real-time previewing for p5.js reference pages. 'npm run docs' produces static reference files and a data JSON, whereas 'npm run docs:dev' launches a live preview that updates with each change, streamlining the documentation process.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/contributing_to_the_p5js_reference.md#_snippet_18\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run docs\n\n// Generates reference documentation files and main data.json for website rendering.\n```\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run docs:dev\n\n// Starts a live preview server for reference documentation with automatic updates upon changes.\n```\n\n----------------------------------------\n\nTITLE: Live Previewing p5.js Documentation via npm\nDESCRIPTION: Specifies the npm command used to start a development server that provides a live preview of the p5.js reference documentation, automatically updating when source files change (requires page refresh).\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/contributing_to_the_p5js_reference.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run docs:dev\n```\n\n----------------------------------------\n\nTITLE: Spelling Error Example p5.js\nDESCRIPTION: Demonstrates a misspelling error. Calling `xolor()` instead of `color()` will trigger an error message. FES would correct this misspelling to point out to the user. Dependencies: p5.js, the color() function\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/fes_contribution_guide.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nfunction setup() {\n  xolor(1, 2, 3);\n}\n```\n\n----------------------------------------\n\nTITLE: Extending p5 core with createImg function\nDESCRIPTION: This snippet extends the p5 core by adding a `createImg()` function to `p5.prototype`. The function creates an HTML image element and sets its source. The `addElement()` function (assumed to be defined elsewhere) then adds the element to the DOM. This extension allows users to create images directly using the p5.js environment.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ja/creating_libraries.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n  p5.prototype.createImg = function (src) {\n    const elt = document.createElement('img');\n    //const elt = new Image; // もう 1 つの短い代替案。\n\n    elt.src = src;\n    return addElement(elt, this);\n  };\n\n```\n\n----------------------------------------\n\nTITLE: Example Unit Test for Parameter Validation Using Mocha in JavaScript\nDESCRIPTION: This code snippet illustrates a unit test using Mocha that checks the correct triggering of parameter validation errors from p5.js' friendly error system. It validates that calling `p5._validateParameters()` with incorrect types raises a validation error as expected. This approach is advised to ensure new friendly error messages function properly and maintain code quality.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/how-to-add-friendly-error-messages.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nsuite('validateParameters: multi-format', function() {\n  test('color(): 可选参数，类型不正确', function() {\n    assert.validationError(function() {\n      p5._validateParameters('color', [0, 0, 0, 'A']);\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Helping Misused Top Level Code with helpForMisusedAtTopLevelCode\nDESCRIPTION: `helpForMisusedAtTopLevelCode()` is called when the window loads to identify the incorrect use of p5.js functions outside of `setup()` or `draw()`.  It reports errors using the `fes.misusedTopLevel` key. It takes an error event and a boolean log value as parameters.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/fes_reference_dev_notes.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Disable FES in JavaScript\nDESCRIPTION: Shows how to disable the Friendly Error System (FES) in p5.js for performance optimization by setting `p5.disableFriendlyErrors` to `true`.  This prevents FES from running, potentially improving the speed of the sketch.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ja/friendly_error_system.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\np5.disableFriendlyErrors = true;\n\nfunction setup() {\n  createCanvas(100, 50);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing describeElement() and related functions in p5.js\nDESCRIPTION: This snippet demonstrates how to use describeElement() with the LABEL parameter to create accessible descriptions for custom-drawn shapes in p5.js. It explains the role of auxiliary functions such as _elementName(), _descriptionText(), and _describeElementHTML() to process inputs and generate HTML structures for accessibility, enhancing the interaction for users utilizing screen readers.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/web_accessibility.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction setup() {\n  background('pink');\n  noStroke();\n\n  describeElement('Heart', 'A red heart in the bottom-right corner.', LABEL);\n  fill('red');\n  circle(66.6, 66.6, 20);\n  circle(83.2, 66.6, 20);\n  triangle(91.2, 72.6, 75, 95, 58.6, 72.6);\n\n  describe('A red heart and yellow circle over a pink background.', LABEL);\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Custom p5.js Addon Function (JavaScript)\nDESCRIPTION: Provides a basic p5.js sketch structure demonstrating how to call the custom `loadCSV` function defined in the addon library. This function, added to `p5.prototype`, is called directly within the `setup` function after canvas initialization, similar to calling standard p5 functions.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/creating_libraries.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction setup() {\n  createCanvas(400, 400);\n  loadCSV();\n}\n```\n\n----------------------------------------\n\nTITLE: Push changes after Git rebase\nDESCRIPTION: This command pushes the rebased local branch to the remote repository after resolving conflicts and continuing the rebase.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/contributor_guidelines.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ngit push\n```\n\n----------------------------------------\n\nTITLE: JSON Translation File Example\nDESCRIPTION: Illustrates the basic format of a JSON translation file used by i18next. Keys are enclosed in double quotes, and values represent the translated messages. This example shows a simple key-value pair.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ja/friendly_error_system.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{ \"key\": \"value\" }\n```\n\n----------------------------------------\n\nTITLE: Handling Missing Parameter with _validateParameters() in JavaScript\nDESCRIPTION: This example showcases the error message generated when a function is called with fewer arguments than expected. The arc() function requires at least 6 arguments, but only 4 are provided. FES detects this discrepancy and generates an error message indicating the missing arguments and provides a link to the p5.js reference for the arc() function.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/fes_contribution_guide.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\narc(1, 1, 10.5, 10);\n```\n\nLANGUAGE: js\nCODE:\n```\n🌸 p5.js says: [sketch.js, line 13] arc() was expecting at least 6 arguments, but received only 4. (https://p5js.org/reference/p5/arc)\n```\n\n----------------------------------------\n\nTITLE: Using Chai helpers for assertions in tests\nDESCRIPTION: Refers to 'test/js/chai_helpers.js', which enhances Chai assertion capabilities with additional functions or custom assertions for more expressive test validations. It simplifies writing assertions within unit tests for p5.js.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/hi/unit_testing.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Core Accessibility Output Functions in outputs.js\nDESCRIPTION: This set of functions manages the creation and updating of accessible text and grid outputs for shapes on the canvas. They initialize output structures, update content based on current shape data, and handle background and color information. These functions enable screen reader users to understand canvas contents via descriptive text or grid layouts, with optional label handling for additional context.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ja/web_accessibility.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n# src/accessibility/outputs.js\n\n// Initializes text output for accessibility and optionally adds label.\nthis.textOutput = function(label) {\n  this._accessibleOutputs.text = true;\n  this._createOutput('textOutput', 'Fallback');\n  if (label !== undefined) {\n    this._accessibleOutputs.textLabel = true;\n    this._createOutput('textOutput', 'Label');\n  }\n}\n\n// Initializes grid output for accessibility and optionally adds label.\nthis.gridOutput = function(label) {\n  this._accessibleOutputs.grid = true;\n  this._createOutput('gridOutput', 'Fallback');\n  if (label !== undefined) {\n    this._accessibleOutputs.gridLabel = true;\n    this._createOutput('gridOutput', 'Label');\n  }\n}\n\n// Creates HTML structure for specific accessibility output types.\nthis._createOutput = function(type, labelType) {\n  this._accessibleOutputs[type] = true;\n  // Initialize data container for output contents.\n  this.ingredients = {\n    shapes: [],\n    colors: {},\n    shapeData: [],\n    shapeDetails: [],\n    summary: '',\n    labelType: labelType || 'Fallback'\n  };\n  if (!this.dummyDOM) {\n    this.dummyDOM = document.createElement('body');\n  }\n  // Build HTML output structure depending on output type.\n}\n\n// Updates accessible representations based on current shape data.\nthis._updateAccsOutput = function() {\n  if (this._accessibleOutputs.text) {\n    this._updateTextOutput();\n  }\n  if (this._accessibleOutputs.grid) {\n    this._updateGridOutput();\n  }\n}\n\n// Adds background color info when background() is called.\nthis._accsBackground = function() {\n  this.ingredients.shapes = [];\n  if (this._currentBackgroundColor !== this._lastBackgroundColor) {\n    this.ingredients.colors.background = _rgbColorName(this._currentBackgroundColor);\n    this._lastBackgroundColor = this._currentBackgroundColor;\n  }\n}\n\n// Stores fill and stroke colors after fill()/stroke() calls.\nthis._accsCanvasColors = function() {\n  this.ingredients.colors.fill = _rgbColorName(p5.prototype._renderer._fillValue);\n  this.ingredients.colors.stroke = _rgbColorName(p5.prototype._renderer._strokeValue);\n}\n\n// Collects shape details and updates this.ingredients.shapes.\nthis._accsOutput = function(shape) {\n  // Collect shape info: type, position, area\n  // Call specific helpers depending on shape type.\n}\n\n// Helper functions to get shape centers, positions, areas, etc.\nthis._getMiddle = function(shape) { /* ... */ }\nthis._getPos = function(shape) { /* ... */ }\nthis._canvasLocator = function(shape) { /* ... */ }\nthis._getArea = function(shape) { /* ... */ }\n\n```\n\n----------------------------------------\n\nTITLE: Reporting Error Messages via _report\nDESCRIPTION: The `_report()` function is a core component of the p5.js FES. It's responsible for printing error messages to the console. It leverages the `_fesLogger` if it's set for testing, otherwise, uses `console.log`.  It can take a message, an optional function name, and a color.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/fes_reference_dev_notes.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n_report(message)\n```\n\nLANGUAGE: javascript\nCODE:\n```\n_report(message, func)\n```\n\nLANGUAGE: javascript\nCODE:\n```\n_report(message, func, color)\n```\n\n----------------------------------------\n\nTITLE: Wrapping console methods for enhanced error messages\nDESCRIPTION: This code snippet attempts to wrap the `window.console` methods (log, warn, error) to modify their behavior and provide better formatted error messages. It demonstrates the basic structure for intercepting and processing console messages, but the implementation is incomplete.  This is an idea for the future work with FES.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/fes_reference_dev_notes.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// 这段代码片段使用新函数包装了 window.console 方法，以修改其功能\n// 目前尚未实现，但可以使用它来提供更好格式的错误消息\nconst original = window.console;\nconst original_functions = {\n    log: original.log,\n    warn: original.warn,\n    error: original.error\n}\n[\"log\", \"warn\", \"error\"].forEach(function(func){\n    window.console[func] = function(msg) {\n      // 在包装函数中处理捕获的消息，然后调用原始函数\n      original_functions[func].apply(original, arguments)\n    };\n});\n```\n\n----------------------------------------\n\nTITLE: WebGL Vertex Color Interpolation Unit Test - JavaScript\nDESCRIPTION: This JavaScript unit test verifies correct color interpolation for a shape rendered in WebGL mode in p5.js. It uses Mocha for test execution and p5.js for rendering, requiring access to myp5 and an assertion library. Key parameters include multiple vertex fill colors set during the definition of a quadrilateral, asserting that the color in the center is a blend of the four. Outputs are checked by fetching the pixel color at a specific canvas location. This test assumes knowledge of the renderer's internal color blending and may need adjustment for different color precision settings.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/webgl_contribution_guide.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest('color interpolation', function() {\n  const renderer = myp5.createCanvas(256, 256, myp5.WEBGL);\n  // upper color: (200, 0, 0, 255);\n  // lower color: (0, 0, 200, 255);\n  // expected center color: (100, 0, 100, 255);\n  myp5.beginShape();\n  myp5.fill(200, 0, 0);\n  myp5.vertex(-128, -128);\n  myp5.fill(200, 0, 0);\n  myp5.vertex(128, -128);\n  myp5.fill(0, 0, 200);\n  myp5.vertex(128, 128);\n  myp5.fill(0, 0, 200);\n  myp5.vertex(-128, 128);\n  myp5.endShape(myp5.CLOSE);\n  assert.equal(renderer._useVertexColor, true);\n  assert.deepEqual(myp5.get(128, 128), [100, 0, 100, 255]);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a p5.js Function Reference with YUIDoc (JavaScript)\nDESCRIPTION: Complete YUIDoc comment block example for the p5.js `sin()` function. It demonstrates the structure including a description (supporting markdown/HTML), function signature tags (@method, @param, @return), and multiple @example blocks showing usage with embedded HTML/code and the required `describe()` function for accessibility.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/contributing_to_the_p5js_reference.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Calculates the sine of an angle. `sin()` is useful for many geometric tasks\n * in creative coding. The values returned oscillate between -1 and 1 as the\n * input angle increases. `sin()` takes into account the current\n * <a href=\"#/p5/angleMode\">angleMode</a>.\n *\n * @method sin\n * @param  {Number} angle the angle.\n * @return {Number} sine of the angle.\n *\n * @example\n * <div>\n * <code>\n * function draw() {\n *   background(200);\n *\n *   let t = frameCount;\n *   let x = 50;\n *   let y = 30 * sin(t * 0.05) + 50;\n *   line(x, 50, x, y);\n *   circle(x, y, 20);\n *\n *   describe('A white ball on a string oscillates up and down.');\n * }\n * </code>\n * </div>\n *\n * <div>\n * <code>\n * function draw() {\n *   let x = frameCount;\n *   let y = 30 * sin(x * 0.1) + 50;\n *   point(x, y);\n *\n *   describe('A series of black dots form a wave pattern.');\n * }\n * </code>\n * </div>\n *\n * <div>\n * <code>\n * function draw() {\n *   let t = frameCount;\n *   let x = 30 * cos(t * 0.1) + 50;\n *   let y = 10 * sin(t * 0.2) + 50;\n *   point(x, y);\n *\n *   describe('A series of black dots form an infinity symbol.');\n * }\n * </code>\n * </div>\n */\n```\n\n----------------------------------------\n\nTITLE: Setting up p5 helpers for sketch testing\nDESCRIPTION: Mentions 'test/js/p5_helpers.js', which provides auxiliary functions or objects to facilitate testing of p5.js sketches and methods, streamlining test setup and execution for graphical or interactive components.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/hi/unit_testing.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Creating arcs with arc() function - JavaScript\nDESCRIPTION: This code block showcases the usage of the `arc()` function in p5.js to create different arc shapes. It demonstrates how to define the start and stop angles to draw specific portions of an ellipse. The examples use predefined constants like `PI` and `QUARTER_PI` and explain how to leave the arc open. It uses the `describe()` function to create an accessible description of the canvas.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ko/contributing_to_the_p5js_reference.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n* @example\n* <div>\n* <code>\n* arc(50, 50, 80, 80, 0, PI + QUARTER_PI, OPEN);\n* describe('An ellipse created using an arc with its top right open.');\n* </code>\n* </div>\n*\n* <div>\n* <code>\n* arc(50, 50, 80, 80, 0, PI, OPEN);\n* describe('The bottom half of an ellipse created using arc.');\n* </code>\n* </div>\n```\n\n----------------------------------------\n\nTITLE: JavaScript Example: Disable Friendly Errors\nDESCRIPTION: This snippet shows how to disable the FES functionality in p5.js by setting `p5.disableFriendlyErrors` to `true`. This disables the error messages, which could be useful for performance optimization. Requires the p5.js library to be included.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/friendly_error_system.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\np5.disableFriendlyErrors = true;\n\nfunction setup() {\n  createCanvas(100, 50);\n}\n```\n\n----------------------------------------\n\nTITLE: Performance Testing Template for p5.js\nDESCRIPTION: A code snippet for measuring and displaying average frame rates in p5.js sketches, useful for performance testing before and after code changes to ensure optimizations don't negatively impact rendering speed.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/es/webgl_contribution_guide.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet frameRateP;\nlet avgFrameRates = [];\nlet frameRateSum = 0;\nconst numSamples = 30;\nfunction setup() {\n  // ...\n  frameRateP = createP();\n  frameRateP.position(0, 0);\n}\nfunction draw() {\n  // ...\n  const rate = frameRate() / numSamples;\n  avgFrameRates.push(rate);\n  frameRateSum += rate;\n  if (avgFrameRates.length > numSamples) {\n    frameRateSum -= avgFrameRates.shift();\n  }\n\n  frameRateP.html(round(frameRateSum) + ' avg fps');\n}\n```\n\n----------------------------------------\n\nTITLE: Extending p5.js Prototype Object in JavaScript\nDESCRIPTION: Demonstrates best practices for adding custom classes and methods to the p5 prototype without overwriting existing core classes. It shows how to correctly namespace new classes or methods under a unique property rather than using the reserved 'p5.' prefix meant for core classes. This snippet helps avoid conflicts and maintain compatibility with the p5.js framework. Dependencies include using the p5.js library in instance or global mode. Inputs include method names or class definitions, and outputs are the extended prototype objects for user access. Key limitation is avoiding naming collisions with native JavaScript objects and existing p5 properties.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/creating_libraries.md#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Do not do this\np5.prototype.p5.MyClass = class {\n};\n\n// Do this\np5.prototype.myAddon.MyClass = class {\n};\n\n// Or this\np5.prototype.myMethod = function(){\n};\n```\n\n----------------------------------------\n\nTITLE: Drawing a Static Ellipse\nDESCRIPTION: Demonstrates drawing a simple ellipse on the canvas using fixed coordinates and dimensions within the `draw` function.\nSOURCE: https://github.com/processing/p5.js/blob/main/test/unit/assets/many_lines.txt#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction setup() {\n  createCanvas(400, 400);\n}\n\nfunction draw() {\n  background(220);\n  ellipse(50, 50, 80, 80); // Draw an ellipse at (50, 50) with width and height 80\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Static Vector Normalization in p5.js\nDESCRIPTION: This snippet illustrates the static approach to vector normalization using `p5.Vector.normalize()`. This class method takes an existing vector (`v0`) as input and returns a *new* `p5.Vector` instance (`v1`) representing the normalized vector, without altering the original vector (`v0`). This is useful when the original vector needs to be preserved.\nSOURCE: https://github.com/processing/p5.js/blob/main/src/math/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst v0 = new p5.Vector(10, 0, 0);\nconst v1 = p5.Vector.normalize(v0);\nprint(v0); // [10, 0, 0] <- original vector is unchanged\nprint(v1); // [1, 0, 0] <- newly returned normalized vector\n```\n\n----------------------------------------\n\nTITLE: Preparing p5.js Objects for FES Parameter Validation\nDESCRIPTION: Shows how to assign a `name` property within a p5.js object's constructor or definition to enable its use in FES parameter validation. This allows FES to check if arguments passed to functions match expected object types, enhancing error checking capabilities.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ja/fes_reference_dev_notes.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\np5.newObject = function(parameter) {\n   this.parameter = 'some parameter';\n   this.name = 'p5.newObject';\n};\n```\n\n----------------------------------------\n\nTITLE: Avoiding Empty Constructors\nDESCRIPTION: This snippet describes how to avoid empty constructors. Classes have a default constructor if one isn't specified. The example provides 'Bad' and 'Good' examples.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/documentation_style_guide.md#_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\n// Bad.\nclass Dot {\n  constructor() {}\n\n  render() {\n    circle(mouseX, mouseY, 50);\n  }\n}\n\n// Good.\nclass Dot {\n  render() {\n    circle(mouseX, mouseY, 50);\n  }\n}\n\n// Bad.\nclass DragonBall extends Ball {\n  constructor(x, y, d) {\n    super(x, y, d);\n  }\n}\n\n// Good.\nclass DragonBall extends Ball {\n  constructor(x, y, d, numStars) {\n    super(x, y, d);\n    this.numStars = numStars;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Arrow Functions and Implicit Returns\nDESCRIPTION: Shows the use of arrow functions for concise anonymous callback functions, especially in 'loadImage' usage, and how to leverage implicit returns for cleaner expression. Also emphasizes enclosing parameters in parentheses for consistency and error reduction.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/documentation_style_guide.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Arrow function with explicit return.\nloadImage('assets/moonwalk.jpg', (img) => {\n  image(img, 0, 0);\n});\n\n// Using implicit return for simple expressions.\n[1, 2, 3].map((number) => `${number} squared is ${number ** 2}.`);\n\n// Parameters with parentheses.\n[1, 2, 3].map((number) => number * number);\n```\n\n----------------------------------------\n\nTITLE: Implementing remove action hook in p5.js\nDESCRIPTION: This snippet demonstrates how to use an action hook with `registerMethod()` to create custom behavior in the `remove` lifecycle event. It calls a function named `doRemoveStuff` during the sketch removal process for the addon to perform any needed cleanup.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/creating_libraries.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\np5.prototype.doRemoveStuff = function (){\n  // Addon library related cleanup\n};\np5.prototype.registerMethod(\"remove\", p5.prototype.doRemoveStuff);\n```\n\n----------------------------------------\n\nTITLE: Setting Text Alignment in HTML Canvas\nDESCRIPTION: This snippet demonstrates how to set text alignment in HTML Canvas. It highlights the simplicity of using `ctx.textAlign = \"left\";` compared to the more complex implementation in p5.js. This illustrates a key difference in typography handling between the native API and the p5.js implementation.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/project_wrapups/munusshih_gsoc_2023.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nctx.textAlign = \"left\";\n```\n\n----------------------------------------\n\nTITLE: Handling File Load Errors via _friendlyFileLoadError\nDESCRIPTION: `_friendlyFileLoadError()` is used to handle errors that occur during file loading within p5.js. It's called by `loadX()` functions, like `loadImage()`, `loadFont()`, etc. It generates and displays user-friendly error messages using `fes.fileLoadError.*` keys. The function receives an error type and the file path as parameters. It also checks for large file sizes and generates warnings.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/fes_reference_dev_notes.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n_friendlyFileLoadError(errorType, filePath)\n```\n\n----------------------------------------\n\nTITLE: JSON Translation File with ASCII Art\nDESCRIPTION: Shows an example of including ASCII art within a JSON translation file. The message associated with the \"logo\" key contains multi-line ASCII characters representing a graphical element.  Note the newline characters.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ja/friendly_error_system.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n\"logo\": \"    _ \\n /\\\\| |/\\\\ \\n \\\\ ` ' /  \\n / , . \\\\  \\n \\\\/|_|\\\\/ \\n\\n\"\n```\n\n----------------------------------------\n\nTITLE: Parentheses in Arrow Functions\nDESCRIPTION: This snippet highlights the necessity of including parentheses around arguments in arrow functions to reduce bugs when changing the number of parameters. The example provides 'Bad' and 'Good' examples.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/documentation_style_guide.md#_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\n// Bad.\n[1, 2, 3].map(number => number * number);\n\n// Good.\n[1, 2, 3].map((number) => number * number);\n```\n\n----------------------------------------\n\nTITLE: Comparing Pixel Output in p5.js Unit Test - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates a unit test that compares pixel data between 2D and WebGL rendering modes in p5.js, ensuring visual consistency for coplanar strokes. It utilizes the Mocha testing framework and p5.js API. Necessary dependencies are p5.js and a compatible local testing environment with Mocha and Assertion libraries installed. Function parameters include 'mode' (rendering mode), and the expected outcome is that output pixels from both modes match exactly. Minor differences may occur due to antialiasing; use caution with shapes where precision may vary.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/webgl_contribution_guide.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest('coplanar strokes match 2D', function() {\n  const getColors = function(mode) {\n    myp5.createCanvas(20, 20, mode);\n    myp5.pixelDensity(1);\n    myp5.background(255);\n    myp5.strokeCap(myp5.SQUARE);\n    myp5.strokeJoin(myp5.MITER);\n    if (mode === myp5.WEBGL) {\n      myp5.translate(-myp5.width/2, -myp5.height/2);\n    }\n    myp5.stroke('black');\n    myp5.strokeWeight(4);\n    myp5.fill('red');\n    myp5.rect(10, 10, 15, 15);\n    myp5.fill('blue');\n    myp5.rect(0, 0, 15, 15);\n    myp5.loadPixels();\n    return [...myp5.pixels];\n  };\n  assert.deepEqual(getColors(myp5.P2D), getColors(myp5.WEBGL));\n});\n```\n\n----------------------------------------\n\nTITLE: Error Monitoring Syntax p5.js\nDESCRIPTION: The `fesErrorMonitor()` function is the core function for monitoring errors. It takes an error event as input, analyzes it, and provides user-friendly error messages.  It uses the p5.js library and relies on error events.  It is called automatically by error and unhandledrejection events and can also be called manually.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/fes_contribution_guide.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfesErrorMonitor(event);\n```\n\n----------------------------------------\n\nTITLE: Cloning the p5.js Repository in Git\nDESCRIPTION: Commands for cloning the forked p5.js repository to a local machine. This is a fundamental step in the development workflow for contributors.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/您的用户名/p5.js.git\n```\n\n----------------------------------------\n\nTITLE: Accessing Object Properties\nDESCRIPTION: This snippet illustrates the correct way to access object properties using dot notation (`.`) instead of bracket notation (`[]`) when the property name is known and valid. This improves readability and code clarity. This snippet provides a 'Bad' and 'Good' example.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/documentation_style_guide.md#_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nlet turtle = {\n  name: 'Leonardo',\n  color: 'dodgerblue',\n  weapon: '🗡️',\n  food: '🍕',\n};\n\n// Bad.\nlet turtleName = turtle['name'];\n\n// Good.\nlet turtleName = turtle.name;\n```\n\n----------------------------------------\n\nTITLE: Incorrect 'this' Context with Arrow Function on p5.prototype (JavaScript)\nDESCRIPTION: Illustrates a common pitfall when defining p5.js addon methods using arrow functions (`=>`). In this context, `this` does not refer to the p5 sketch instance but rather to the global `window` object, preventing access to p5 sketch methods and properties.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/creating_libraries.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\np5.prototype.loadCSV = (filename) => {\n  // this === window is true because\n  // \"this\" refers to the window object.\n  // This is almost never what you want.\n  console.log(this === window);\n};\n```\n\n----------------------------------------\n\nTITLE: Defining p5.js object with name for parameter validation in FES\nDESCRIPTION: This code snippet demonstrates how to define a p5.js object with a `name` property, which is required for parameter validation within the Friendly Error System (FES). The `name` property is used to identify the object type during error checking.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/fes_reference_dev_notes.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\np5.newObject = function(parameter) {\n   this.parameter = 'some parameter';\n   this.name = 'p5.newObject';\n};\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Parameter Validation for Missing Parameters in p5.js\nDESCRIPTION: Example showing how FES validates function parameters and provides helpful error messages when required parameters are missing from an arc() function call.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ko/friendly_error_system.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\narc(1, 1, 10.5, 10);\n/// 콘솔에 다음의 메시지가 생성됩니다.:\n/// > pt.js: arc() 함수의 입력 파라미터 중 4번째 자리(인덱스는 0부터 시작)에 빈 값이 들어온 것 같습니다. 의도한 것이 아니라면, 이것은 종종 범위의 문제입니다.: [https://p5js.org/examples/data-variable-scope.html]. [https://p5js.org/reference/#p5/arc]\n/// > pt.js: arc() 함수의 입력 파라미터 중 5번째 자리(인덱스는 0부터 시작)에 빈 값이 들어온 것 같습니다. 의도한 것이 아니라면, 이것은 종종 범위의 문제입니다.: [https://p5js.org/examples/data-variable-scope.html]. [https://p5js.org/reference/#p5/arc]\n```\n\n----------------------------------------\n\nTITLE: Semicolon Usage in p5.js JavaScript\nDESCRIPTION: Guidelines for using semicolons at the end of statements. Semicolons should always be used to prevent bugs caused by JavaScript's automatic semicolon insertion.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/documentation_style_guide.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Bad.\nlet x = 0\n\n// Good.\nlet x = 0;\n```\n\n----------------------------------------\n\nTITLE: Adding Additional background() Signatures\nDESCRIPTION: This snippet demonstrates how to add alternative function signatures for functions with multiple parameter options, as seen with the `background()` function. It shows the usage of `@method` and `@param` tags to define the different signatures. The first signature is listed as the primary, and then other signatures follow as needed. The use of additional signatures should be minimized to avoid confusion or unnecessary repetition in the reference.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ja/contributing_to_the_p5.js_reference.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @method background\n * @param {String} colorstring color string, possible formats include: integer\n *                         rgb() or rgba(), percentage rgb() or rgba(),\n *                         3-digit hex, 6-digit hex\n * @param {Number} [a] alpha value\n */\n\n/**\n * @method background\n * @param {Number} gray specifies a value between white and black\n * @param {Number} [a]\n */\n```\n\n----------------------------------------\n\nTITLE: Marking Internal Features with @private in JSDoc\nDESCRIPTION: Illustrates the use of the `@private` JSDoc tag to mark internal methods or properties (like `_start` in the example). Features marked as private are documented in the source code but excluded from the generated public reference website.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/contributing_to_the_p5js_reference.md#_snippet_5\n\nLANGUAGE: JSDoc\nCODE:\n```\n/**\n * _start calls preload() setup() and draw()\n *\n * @method _start\n * @private\n */\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\np5.prototype._start = function () {\n```\n\n----------------------------------------\n\nTITLE: Implementing Retained-Mode Buttons in p5.js JavaScript\nDESCRIPTION: This snippet illustrates the Retained-Mode GUI approach in p5.touchgui, where GUI objects such as buttons are instantiated and their state is accessible via member variables. The setup function initializes the canvas, GUI system, and creates a Button object at a specified position. The draw function renders the GUI and checks if the button's isPressed property is true to trigger an action. Dependencies include p5.js and p5.touchgui, and key parameters are the button label, position, and member states. This approach supports custom styling, multi-touch, and performance optimizations using event handlers. Expected input is user interaction via mouse or touch; output is a console message when the button is pressed.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/project_wrapups/L05_GSOC_2019.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet gui;\nlet b;\n\nfunction setup() {\n  createCanvas(400, 400);\n  \n  gui = createGui();\n  b = createButton(\"Button\", 50, 50);\n}\n\nfunction draw() {\n  background(220);\n  drawGui();\n\n  if(b.isPressed) {\n    print(b.label + \" is pressed.\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Assertions with Chai in JavaScript Unit Tests\nDESCRIPTION: Example of using Chai's assert methods to verify that a value is a boolean in a JavaScript unit test.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ja/unit_testing.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\ntest('keyIsPressed is a boolean', function() {\n  assert.isBoolean(myp5.keyIsPressed); // アサート値はブール値です。\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Test Suite Structure\nDESCRIPTION: This snippet provides the basic structure of a test suite using Mocha. It sets up the `suite` and `test` blocks to organize individual test cases within a test suite.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/unit_testing.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nsuite('p5.prototype.keyIsPressed', function() {\n  test('keyIsPressed is a boolean', function() {\n    // 在这里编写测试\n  });\n\n  test('keyIsPressed is true on key press', function() {\n    // 在这里编写测试\n  });\n\n  test('keyIsPressed is false when no keys are pressed', function() {\n    // 在这里编写测试\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using let for Variable Declarations in p5.js JavaScript\nDESCRIPTION: Guidelines for using let to declare variables instead of const or var. Variables are often reassigned in sketches, making let more appropriate than const for most cases.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/documentation_style_guide.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// Bad.\nflower = '🌸';\nvar flower = '🌸';\nconst flower = '🌸';\n\n// Good.\nlet flower = '🌸';\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Examples with @example in YUIDoc (JavaScript)\nDESCRIPTION: Shows how to include multiple runnable examples for a single function (`arc()`) within YUIDoc comments. Simply add additional `<div><code>...</code></div>` blocks immediately following the previous one, separated by a blank line.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/contributing_to_the_p5js_reference.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n* @example\n* <div>\n* <code>\n* arc(50, 50, 80, 80, 0, PI + QUARTER_PI, OPEN);\n* describe('An ellipse created using an arc with its top right open.');\n* </code>\n* </div>\n*\n* <div>\n* <code>\n* arc(50, 50, 80, 80, 0, PI, OPEN);\n* describe('The bottom half of an ellipse created using arc.');\n* </code>\n* </div>\n```\n\n----------------------------------------\n\nTITLE: Accessible Canvas Description Functions: describe() and describeElement()\nDESCRIPTION: The describe() function creates an accessible description of the entire canvas, adding supplementary `<div>` elements if 'LABEL' is specified, enhancing usability for screen readers. The describeElement() function provides accessible descriptions for specific shapes or groups, with similar optional labeling, aiding users to understand individual elements via text descriptions.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ja/web_accessibility.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// src/accessibility/describe.js\n\n// describe() creates a textual description of the canvas.\nthis.describe = function(text, mode) {\n  // Append description to DOM, handle LABEL option.\n  // Use _descriptionText() to format.\n}\n\n// describeElement() describes a specific element or shape.\nthis.describeElement = function(name, description, mode) {\n  // Append element description to DOM, handle LABEL mode.\n  // Use _elementName(), _descriptionText(), _describeElementHTML().\n}\n\n// Helper to format description text with punctuation.\nfunction _descriptionText(text) {\n  // Ensure text ends with proper punctuation.\n  if (!'.,;?!'.includes(text.slice(-1))) {\n    text += '.';\n  }\n  return text;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Running Release with Bower Shell\nDESCRIPTION: This command runs a full test release and specifies a bower releaser username. It is used when testing the release process with a modified package name and enables the user to select where to push the bower release and website updates.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ko/release_process.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run release -- --bowerReleaser=username\n```\n\n----------------------------------------\n\nTITLE: Spacing in Control Statements and Function Calls in p5.js JavaScript\nDESCRIPTION: Guidelines for using spaces in control statements and function calls. Place spaces before parentheses in control statements but not between function names and argument lists.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/documentation_style_guide.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Bad.\nif(keyIsPressed === true) {\n  doStuff ();\n}\n\n// Good.\nif (keyIsPressed === true) {\n  doStuff();\n}\n\n// Bad.\nfunction setup () {\n  createCanvas (400, 400);\n}\n\n// Good.\nfunction setup() {\n  createCanvas(400, 400);\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Color Interpolation in WebGL\nDESCRIPTION: A test function that validates color interpolation in WebGL mode by creating a shape with different colors at the vertices and checking that the interpolated color at the center matches the expected value.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/es/webgl_contribution_guide.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest('color interpolation', function() {\n  const renderer = myp5.createCanvas(256, 256, myp5.WEBGL);\n  // upper color: (200, 0, 0, 255);\n  // lower color: (0, 0, 200, 255);\n  // expected center color: (100, 0, 100, 255);\n  myp5.beginShape();\n  myp5.fill(200, 0, 0);\n  myp5.vertex(-128, -128);\n  myp5.fill(200, 0, 0);\n  myp5.vertex(128, -128);\n  myp5.fill(0, 0, 200);\n  myp5.vertex(128, 128);\n  myp5.fill(0, 0, 200);\n  myp5.vertex(-128, 128);\n  myp5.endShape(myp5.CLOSE);\n  assert.equal(renderer._useVertexColor, true);\n  assert.deepEqual(myp5.get(128, 128), [100, 0, 100, 255]);\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Method to p5.Element Prototype (JavaScript)\nDESCRIPTION: Illustrates how to extend other specific p5.js classes, such as `p5.Element`, by adding methods to their prototypes. The `shout()` method adds a `<span>` containing an exclamation mark to the inner HTML of the element it is called upon.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/creating_libraries.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\np5.Element.prototype.shout = function () {\n  this.elt.innerHTML += '<span>!</span>';\n};\n```\n\n----------------------------------------\n\nTITLE: Fragment Shader for Specular Image-Based Lighting with Importance Sampling in GLSL (src/webgl/shaders/imageLightSpecular.frag)\nDESCRIPTION: Fragment shader implementing specular Image-Based Lighting using prefiltered environment maps and importance sampling techniques. It includes GLSL functions `HammersleyNoBitOps()`, `VanDerCorput()`, and `ImportanceSampleGGX()` to perform low-discrepancy sequence sampling of the hemisphere, approximating specular reflections. The shader uses a BRDF integration map and prefiltered maps to compute realistic specular highlights based on surface roughness and view angles. It relies on WebGL 2.0 features and GLSL ES 3.0 syntax.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/project_wrapups/aryan_koundal_gsoc_2023.md#_snippet_5\n\nLANGUAGE: GLSL\nCODE:\n```\n#version 300 es\nprecision highp float;\nin vec3 vNormal;\nin vec3 vViewDir;\nuniform samplerCube prefilteredEnvMap;\nuniform sampler2D brdfLUT;\nuniform float roughness;\nout vec4 fragColor;\n\nvec2 VanDerCorput(uint n, uint base) {\n\t// Computes VanDerCorput radical inverse for Hammersley sequence\n}\n\nvec2 HammersleyNoBitOps(uint i, uint N) {\n\t// Generates 2D sample point in [0,1]^2 for sample i of N\n}\n\nvec3 ImportanceSampleGGX(vec2 Xi, vec3 N, float roughness) {\n\t// Computes GGX distribution sample direction\n}\n\nvoid main() {\n\t// Sample prefiltered environment map with Importance Sampling\n\t// Use BRDF LUT for Fresnel and geometry terms\n\tfragColor = vec4(1.0); // Placeholder output\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling the Friendly Error System in p5.js\nDESCRIPTION: Example showing how to disable the Friendly Error System to improve performance in production environments, which can speed up code execution by up to 10 times in some cases.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ko/friendly_error_system.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\np5.disableFriendlyErrors = true; // FES 비활성화\n\nfunction setup() {\n  // 설정 작업\n}\n\nfunction draw() {\n  // 실행 작업\n}\n```\n\n----------------------------------------\n\nTITLE: Guidelines for adding new unit tests for p5.js components\nDESCRIPTION: Provides instructions on creating new test files in 'test/unit' following the existing directory structure. It emphasizes the importance of matching tests to their source files, and choosing the correct environment (browser or Node.js) for each test case.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/hi/unit_testing.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Placing Variables in a Reasonable Place in p5.js JavaScript\nDESCRIPTION: Guidelines for placing variable declarations where they're needed. Since let is block scoped, variables should be declared in the appropriate scope to improve readability and performance.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/documentation_style_guide.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// Bad - unnecessary search.\nfunction getCharacter(name = 'default') {\n  let character = characters.find((c) => c.name === name);\n\n  if (name === 'default') {\n    return false;\n  }\n\n  if (character) {\n    return character;\n  }\n  \n  return false;\n}\n\n// Good.\nfunction getCharacter(name = 'default') {\n  if (name === 'default') {\n    return false;\n  }\n\n  let character = characters.find((c) => c.name === name);\n\n  if (character) {\n    return character;\n  }\n  \n  return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Show Git diff\nDESCRIPTION: This command shows the changes between the working directory and the last commit. It allows review of the exact modifications made to each file before committing.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/contributor_guidelines.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit diff\n```\n\n----------------------------------------\n\nTITLE: Build p5.js\nDESCRIPTION: This command builds the p5.js library without running tests. It creates `p5.js` and `p5.min.js` files in the `lib/` folder. These files can then be used for testing or integration into other projects.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/contributor_guidelines.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Resource Loading Best Practices in p5.js\nDESCRIPTION: Standardizes asset loading from a dedicated 'assets' directory, promoting organized project structure and consistent resource referencing across examples and documentation.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/documentation_style_guide.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Loading resources from 'assets' folder.\nfunction preload() {\n  img = loadImage('assets/moonwalk.jpg');\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Object Creation and Property Access Best Practices\nDESCRIPTION: Examples demonstrating the use of object literals, property access via dot notation, and proper syntax with quotes for invalid identifiers. Emphasizes clarity, performance, and idiomatic JavaScript style, including avoiding leading commas and trailing commas outside object definitions.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/documentation_style_guide.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Creating object with literal syntax.\nlet ball = {};\n\n// Using dot notation for property access.\nlet turtle = {\n  name: 'Leonardo',\n  color: 'dodgerblue',\n  weapon: '🗡️',\n  food: '🍕',\n};\nlet turtleName = turtle.name;\n\n// Using bracket notation with variables.\nfunction getProp(prop) {\n  return turtle[prop];\n}\nlet turtleNameVar = getProp('name');\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Property names with invalid identifiers.\nlet secretObject = {\n  x: 100,\n  y: 200,\n  'top-secret': 'classified',\n};\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Avoid leading commas in object definitions.\nlet mathematician = {\n  firstName: 'Ada',\n  lastName: 'Lovelace'\n};\n\n// Proper trailing comma inside object.\nlet artist = {\n  firstName: 'Lauren',\n  lastName: 'McCarthy',\n};\n```\n\n----------------------------------------\n\nTITLE: String Length Guidelines in p5.js JavaScript\nDESCRIPTION: Guidelines for handling long strings that exceed 80 characters. Long strings should be kept on a single line when possible, as broken strings reduce readability and searchability.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/documentation_style_guide.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// Bad.\nlet essay = 'You see us as you want to see us: \\\nin the simplest terms, in the most convenient definitions.';\n\n// Bad.\nlet essay = 'You see us as you want to see us: ' +\n  'in the simplest terms, in the most convenient definitions.';\n\n// Good.\nlet essay = 'You see us as you want to see us: in the simplest terms, in the most convenient definitions.';\n```\n\n----------------------------------------\n\nTITLE: Managing Git Version Tags and Push for Release in Shell\nDESCRIPTION: This shell snippet demonstrates the commands for checking out the main branch, incrementing the project version following semantic versioning (major, minor, or patch), and pushing both the branch and created version tag to the remote repository. It assumes the developer has Git, node.js, and npm installed and appropriate permissions for pushing to the remote repository. The snippet is critical as it triggers the creation of tags that activate the GitHub Actions CI release workflow configured to match version tags in the format 'v*.*.*'.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/release_process.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ git checkout main\n$ npm version [major|minor|patch] # 选择适当的版本标签\n$ git push origin main\n$ git push origin v1.4.2 # 用刚刚创建的版本号替换此处的版本号\n```\n\n----------------------------------------\n\nTITLE: Using describe() for Accessibility in Examples\nDESCRIPTION: Provides examples demonstrating the required use of the `describe()` function within p5.js documentation examples. `describe()` adds an accessible description of the canvas content for screen readers.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/es/contributing_to_the_p5js_reference.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n* @example\n* <div>\n* <code>\n* let xoff = 0.0;\n* function draw() {\n*   background(204);\n*   xoff = xoff + 0.01;\n*   let n = noise(xoff) * width;\n*   line(n, 0, n, height);\n*   describe('A vertical line moves randomly from left to right.');\n* }\n* </code>\n* </div>\n*\n* <div>\n* <code>\n* let noiseScale = 0.02;\n* function draw() {\n*   background(0);\n*   for (let x = 0; x < width; x += 1) {\n*     let noiseVal = noise((mouseX + x) * noiseScale, mouseY * noiseScale);\n*     stroke(noiseVal*255);\n*     line(x, mouseY + noiseVal * 80, x, height);\n*   }\n*   describe('A horizontal wave pattern moves in the opposite direction of the mouse.');\n* }\n* </code>\n* </div>\n```\n\n----------------------------------------\n\nTITLE: Running Live Documentation Preview JavaScript\nDESCRIPTION: This snippet provides the command to continuously render the documentation preview with updates when changes are made. The `npm run docs:dev` command initiates a real-time preview that automatically updates the documentation when changes are detected in the source code. The live preview is especially useful for previsualizing example codes running in a browser. Changes to the source require the page to be refreshed.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ko/contributing_to_the_p5js_reference.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nnpm run docs:dev\n```\n\n----------------------------------------\n\nTITLE: Push changes to remote Git repository\nDESCRIPTION: This command pushes the local branch to the remote repository (origin) and sets up tracking.  This makes it easy to push subsequent changes without specifying the remote and branch names. Replace `[分支名称]` with the actual name of the branch you are pushing.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/contributor_guidelines.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit push -u origin [分支名称]\n```\n\n----------------------------------------\n\nTITLE: Fetch from upstream repository\nDESCRIPTION: This command fetches the latest changes from the \"upstream\" remote repository without merging them into the local branch.  This step is necessary before rebasing.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/contributor_guidelines.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngit fetch upstream\n```\n\n----------------------------------------\n\nTITLE: One Declaration per Variable in p5.js JavaScript\nDESCRIPTION: Guidelines for using one let declaration per variable or assignment. This approach makes the code easier to read and allows for adding new variable declarations.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/documentation_style_guide.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// Bad.\nlet positions = getPositions(),\n  startSearch = true,\n  dragonball = 'z';\n\n// Good.\nlet positions = getPositions();\nlet startSearch = true;\nlet dragonball = 'z';\n```\n\n----------------------------------------\n\nTITLE: PascalCase for Classes in p5.js JavaScript\nDESCRIPTION: Guidelines for naming classes using PascalCase. Class names should start with an uppercase letter to distinguish them from other identifiers.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/documentation_style_guide.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// Bad.\nclass player {\n  constructor(name) {\n    this.name = name;\n  }\n}\n\n// Good.\nclass Player {\n  constructor(name) {\n    this.name = name;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Friendly Error System (FES) in p5.js\nDESCRIPTION: This code snippet shows how to disable the Friendly Error System (FES) in p5.js to improve performance.  Setting `p5.disableFriendlyErrors` to `true` disables the parameter checking part of FES.  This should be set at the top of the sketch.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/fes_reference_dev_notes.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\np5.disableFriendlyErrors = true; // 禁用 FES\n\nfunction setup() {\n  // 执行设置操作\n}\n\nfunction draw() {\n  // 执行绘图操作\n}\n```\n\n----------------------------------------\n\nTITLE: Module Definition & Tags\nDESCRIPTION: This snippet shows the usage of the `@module`, `@submodule`, `@for`, and `@requires` tags to organize the documentation into logical units. The `@module` tag defines the top-level module, and `@submodule` defines the internal modules within that. The `@for` tag defines the relationship between the module and the `p5` class, effectively indicating that the module is part of the `p5` class. The `@requires` tag specifies the dependencies that the current module depends on.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ja/contributing_to_the_p5.js_reference.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @module Color\n * @submodule Creating & Reading\n * @for p5\n * @requires core\n * @requires constants\n */\n```\n\n----------------------------------------\n\nTITLE: Text Output Update Function in textOutput.js\nDESCRIPTION: The _updateTextOutput() function refreshes the textual description for accessibility based on current shape information, including a summary, shape list, and detailed table. It compares new content with existing output to avoid unnecessary updates, enabling screen reader users to understand the current canvas state through descriptive text.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ja/web_accessibility.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// src/accessibility/textOutput.js\n\nthis._updateTextOutput = function() {\n  // Generate summary, shape list, and details.\n  // Compare with existing output and update if changed.\n  // Use helper functions: _textSummary(), _shapeList(), _shapeDetails().\n}\n\n```\n\n----------------------------------------\n\nTITLE: Running YUI Dev Task with Grunt\nDESCRIPTION: This Grunt task runs documentation and library builds, then starts a local server to preview the reference pages. It monitors source code changes and rebuilds documentation and the library automatically. Useful for previewing inline documentation changes without rebuilding the entire website.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/steward_guidelines.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt yui:dev\n```\n\n----------------------------------------\n\nTITLE: Verifying Vertex Color Interpolation in p5.js WebGL Mode - JavaScript\nDESCRIPTION: This code snippet defines a JavaScript unit test that ensures correct vertex color interpolation using p5.js in WebGL mode. It draws a quadrilateral with vertices colored red on top and blue on the bottom, then checks the resulting center pixel color matches the expected interpolated value. The test relies on access to p5.js and the test/asserion infrastructure (including 'assert.equal' and 'assert.deepEqual'). Inputs include specific vertex positions and color values, while outputs are the pixel color at a particular canvas coordinate. The snippet assumes correct use of vertex color attributes in the renderer and may be impacted by rendering accuracy and anti-aliasing.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ko/webgl_contribution_guide.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest('color interpolation', function() {\n  const renderer = myp5.createCanvas(256, 256, myp5.WEBGL);\n  // upper color: (200, 0, 0, 255);\n  // lower color: (0, 0, 200, 255);\n  // expected center color: (100, 0, 100, 255);\n  myp5.beginShape();\n  myp5.fill(200, 0, 0);\n  myp5.vertex(-128, -128);\n  myp5.fill(200, 0, 0);\n  myp5.vertex(128, -128);\n  myp5.fill(0, 0, 200);\n  myp5.vertex(128, 128);\n  myp5.fill(0, 0, 200);\n  myp5.vertex(-128, 128);\n  myp5.endShape(myp5.CLOSE);\n  assert.equal(renderer._useVertexColor, true);\n  assert.deepEqual(myp5.get(128, 128), [100, 0, 100, 255]);\n});\n```\n\n----------------------------------------\n\nTITLE: Running Watch Tasks with Grunt\nDESCRIPTION: These tasks watch a set of files for changes and then run associated build tasks.  `grunt watch` runs all builds and tests, `grunt watch:main` runs the library build and tests, and `grunt watch:quick` runs only the library build. The difference is the scope of tasks it runs when changes are detected.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/steward_guidelines.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt watch\ngrunt watch:main\ngrunt watch:quick\n```\n\n----------------------------------------\n\nTITLE: JSON Translation File Structure\nDESCRIPTION: Illustrates the basic structure of a translation file used by i18next for the p5.js Friendly Error System (FES). It shows the key-value pair format where the key is an identifier and the value is the translated message.  This format is used to store error messages and other text content for different languages.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/friendly_error_system.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{ \"key\": \"value\" }\n```\n\n----------------------------------------\n\nTITLE: Testing for a Boolean Value Using assert.isBoolean\nDESCRIPTION: This is an example of using chai's `assert` to check if a variable's value is a boolean. This demonstrates the syntax and use of assertion libraries within a test case.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/unit_testing.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\ntest('keyIsPressed is a boolean', function() {\n  assert.isBoolean(myp5.keyIsPressed); // 断言值为布尔值。\n});\n```\n\n----------------------------------------\n\nTITLE: Spacing Between Operators in p5.js JavaScript\nDESCRIPTION: Guidelines for placing spaces between operators in expressions. Spaces should be used on both sides of operators to improve readability.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/documentation_style_guide.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Bad.\nlet y=x+5;\n\n// Good.\nlet y = x + 5;\n```\n\n----------------------------------------\n\nTITLE: Avoiding Unnecessary Character Escaping in p5.js JavaScript\nDESCRIPTION: Guidelines for avoiding unnecessary character escaping in strings. Backslashes reduce readability and should only be used when necessary.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/documentation_style_guide.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n// Bad.\nlet bad = '\\'this\\' \\i\\s \\\"quoted\\\"';\n\n// Good.\nlet good = 'Air quotes make you look \"cool\".';\n```\n\n----------------------------------------\n\nTITLE: Skipping a Test Suite Using .skip\nDESCRIPTION: This demonstrates skipping a test suite using the `.skip()` method. This allows you to temporarily disable a test suite from running. The skipped tests will be marked as pending.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/unit_testing.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// Example: suite.skip('some suite', function() { ... });\n```\n\n----------------------------------------\n\nTITLE: Using Arrow Functions\nDESCRIPTION: This snippet promotes the use of arrow function notation for anonymous functions, especially for callbacks. It highlights the benefits of concise syntax and context of `this`.  The snippet also shows examples where to replace the anonymous function with a declared function, if the function is complex. This example has 'Bad' and 'Good' examples.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/documentation_style_guide.md#_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\n// Bad.\nfunction setup() {\n  loadImage('assets/moonwalk.jpg', function (img) {\n    image(img, 0, 0);\n  });\n}\n\n\n// Good.\nfunction setup() {\n  loadImage('assets/moonwalk.jpg', (img) => {\n    image(img, 0, 0);\n  });\n}\n\n// Bad.\nfunction preload() {\n  loadImage('assets/moonwalk.jpg', (img) => {\n    // Complex preprocessing...\n  });\n}\n\n// Good.\nfunction preload() {\n  loadImage('assets/moonwalk.jpg', processImage);\n}\n\nfunction processImage(img) {\n  // Complex preprocessing...\n}\n```\n\n----------------------------------------\n\nTITLE: Check npm login Shell\nDESCRIPTION: This command confirms the user is logged in npm. It is a pre-requisite step before attempting to publish a new version of the library.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ko/release_process.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm whoami\n```\n\n----------------------------------------\n\nTITLE: Version Tagging and Release Command Usage in Shell\nDESCRIPTION: This snippet demonstrates the shell commands required to create and push version tags for the p5.js release process. It requires Git and NPM to be installed. The commands include checking out the main branch, updating the version number using 'npm version' with the appropriate semver level ('major', 'minor', or 'patch'), and pushing both the main branch and the created version tag to the origin remote. This prepares the git repo for triggering the GitHub Actions CI to perform automated release steps.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ja/release_process.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git checkout main\n$ npm version [major|minor|patch] # 選択选合のバージョンタグラブ\n$ git push origin main\n$ git push origin v1.4.2 # 位はご機能のバージョン番号で描述\n```\n\n----------------------------------------\n\nTITLE: Implicit Returns in Arrow Functions\nDESCRIPTION: This snippet describes the use of implicit returns in arrow functions when the function body consists of a single statement without side effects, omitting the braces and return statement for conciseness. The example also provides 'Bad' and 'Good' examples.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/documentation_style_guide.md#_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\n// Bad.\n[1, 2, 3].map((number) => {\n  let squared = number ** 2;\n  `${number} squared is ${squared}.`;\n});\n\n// Bad.\n[1, 2, 3].map((number) => {\n  let squared = number ** 2;\n  return `${number} squared is ${squared}.`;\n});\n\n// Good.\n[1, 2, 3].map((number) => `${number} squared is ${number ** 2}.`);\n```\n\n----------------------------------------\n\nTITLE: Multiple Signatures for Background Function in p5.js\nDESCRIPTION: Example showing how to document a function with multiple parameter signatures, in this case for the background() function which accepts different parameter combinations.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/hi/contributing_to_the_p5js_reference.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * @method background\n * @param {String} colorstring color string, possible formats include: integer\n *                         rgb() or rgba(), percentage rgb() or rgba(),\n *                         3-digit hex, 6-digit hex\n * @param {Number} [a] alpha value\n */\n\n/**\n * @method background\n * @param {Number} gray specifies a value between white and black\n * @param {Number} [a]\n */\n```\n\n----------------------------------------\n\nTITLE: Updating From Upstream and Rebasing with Git CLI in Bash\nDESCRIPTION: This snippet outlines the process for syncing a forked repository with the upstream source and rebasing local changes on top of it using Git in bash. 'git remote add upstream' adds the main project as a remote, 'git fetch upstream' retrieves changes, and 'git rebase upstream/main' rebases the current branch. Prerequisites: the contributor's forked repository; proper authentication set up. Replace URLs and branch names as necessary. The expected result is the local branch updated with the latest upstream changes. Conflicts may require manual resolution.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/contributor_guidelines.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add upstream https://github.com/processing/p5.js\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit fetch upstream\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit rebase upstream/main\n```\n\n----------------------------------------\n\nTITLE: Disabling the Friendly Error System (FES) in p5.js\nDESCRIPTION: Illustrates how to disable the p5.js Friendly Error System by setting `p5.disableFriendlyErrors` to `true` at the beginning of the sketch, typically before the `setup()` function. This is often done to improve performance, especially in production environments, as FES error checking can introduce overhead.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ja/fes_reference_dev_notes.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\np5.disableFriendlyErrors = true; // FESを無効にする\n\nfunction setup() {\n  // セットアップ操作を実行する\n}\n\nfunction draw() {\n  // 描画操作を実行する\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Friendly Error Messages via _friendlyError\nDESCRIPTION: `_friendlyError()` is a function that generates and prints user-friendly error messages in p5.js. It's designed to provide helpful feedback to users when errors occur during code execution. It's used by several internal functions within the FES. The function takes a message, an optional function name, and a color.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/fes_reference_dev_notes.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n_friendlyError(message)\n```\n\nLANGUAGE: javascript\nCODE:\n```\n_friendlyError(message, func)\n```\n\nLANGUAGE: javascript\nCODE:\n```\n_friendlyError(message, func, color)\n```\n\n----------------------------------------\n\nTITLE: Managing Diffused and Specular Texture Maps and Uniforms in JavaScript (src/webgl/p5.RendererGL.js)\nDESCRIPTION: This snippet includes functions managing diffusedTextures and specularTextures caches which store processed p5 graphics or images in blurry or filtered states for Image-Based Lighting. The functions `getDiffusedTexture()` and `getSpecularTexture()` create or retrieve these processed textures from input images, enabling efficient reuse. The `_setImageLightUniforms()` function prepares and binds these textures as uniforms to the WebGL shader program before rendering. These functions depend on WebGL texture features and p5.js renderer data structures.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/project_wrapups/aryan_koundal_gsoc_2023.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst diffusedTextures = new Map();\nconst specularTextures = new Map();\n\nfunction getDiffusedTexture(img) {\n\t// Checks if diffused texture for img exists\n\t// If not, creates a blurry version (mipmap) of the input img\n\t// Stores and returns the processed texture\n}\n\nfunction getSpecularTexture(img) {\n\t// Similar to getDiffusedTexture but creates prefiltered environment map\n\t// Generates mipmaps corresponding to roughness levels\n\t// Stores and returns the processed texture\n}\n\nfunction _setImageLightUniforms(shader, img) {\n\t// Ensures diffused and specular textures are prepared\n\t// Binds textures to shader uniforms for diffuse and specular IBL\n\t// Sets any additional necessary uniform parameters\n}\n```\n\n----------------------------------------\n\nTITLE: Avoiding var for Variable Declarations in p5.js JavaScript\nDESCRIPTION: Guidelines for avoiding the use of var to declare variables. The confusing scoping rules of var can lead to subtle bugs, so let should be used instead.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/documentation_style_guide.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// Bad, because it looks reasonable.\ncircle(x, y, 50);\nvar x = 200;\nvar y = 200;\n\n// Good, because it throws a ReferenceError.\ncircle(x, y, 50);\nlet x = 200;\nlet y = 200;\n```\n\n----------------------------------------\n\nTITLE: Using loadCSV and printing the result\nDESCRIPTION: This snippet demonstrates how to use the `loadCSV()` function and print its output in the `setup()` function, highlighting the initial problem of asynchronous data loading: the `myCSV` array is empty because the fetch request has not completed yet before the return happens.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/creating_libraries.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction setup(){\n  createCanvas(400, 400);\n  let myCSV = loadCSV('data.csv');\n  print(myCSV);\n}\n```\n\n----------------------------------------\n\nTITLE: Connect Server Task for Testing\nDESCRIPTION: References the connect:server task that starts a local web server to host test files and built source code for running automated tests in Chrome.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ja/steward_guidelines.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconnect:server\n```\n\n----------------------------------------\n\nTITLE: JavaScript Example:  Friendly Error Display\nDESCRIPTION: This JavaScript snippet demonstrates calling the  `_friendlyError()` function of p5.js, which is responsible for displaying the friendly error message on the console. This function receives the translated message, obtained using the `translator()` function (not shown here).  This depends on the context of p5.js.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/friendly_error_system.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\np5._friendlyError(\n  translator('fes.globalErrors.type.notfunc', translationObj)\n);\n```\n\n----------------------------------------\n\nTITLE: Describing canvas content using describe() - JavaScript\nDESCRIPTION: This example shows how to use the `describe()` function in p5.js to add a screen reader accessible description of the canvas content. The `describe()` function takes a string as a parameter, which should briefly describe what is happening in the canvas. Multiple examples are provided, each describing a different canvas visualization.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ko/contributing_to_the_p5js_reference.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n* @example\n* <div>\n* <code>\n* let xoff = 0.0;\n* function draw() {\n*   background(204);\n*   xoff = xoff + 0.01;\n*   let n = noise(xoff) * width;\n*   line(n, 0, n, height);\n*   describe('A vertical line moves randomly from left to right.');\n* }\n* </code>\n* </div>\n*\n* <div>\n* <code>\n* let noiseScale = 0.02;\n* function draw() {\n*   background(0);\n*   for (let x = 0; x < width; x += 1) {\n*     let noiseVal = noise((mouseX + x) * noiseScale, mouseY * noiseScale);\n*     stroke(noiseVal*255);\n*     line(x, mouseY + noiseVal * 80, x, height);\n*   }\n*   describe('A horizontal wave pattern moves in the opposite direction of the mouse.');\n* }\n* </code>\n* </div>\n```\n\n----------------------------------------\n\nTITLE: Non-Testing p5.js Example Documentation\nDESCRIPTION: Demonstrates how to embed a p5.js code example that should be excluded from automated testing suites, typically used for examples requiring user interaction or involving operations like saving files. This uses the `notest` class in the `<div>` tag, often combined with `norender`.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/es/contributing_to_the_p5js_reference.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n* @example\n* <div class='norender notest'><code>\n* function setup() {\n*   let c = createCanvas(100, 100);\n*   saveCanvas(c, 'myCanvas', 'jpg');\n* }\n* </code></div>\n```\n\n----------------------------------------\n\nTITLE: Registering Preload with p5.js\nDESCRIPTION: This JavaScript snippet registers a method with p5.js to ensure that AudioWorklet modules are loaded before the sketch's `setup()` function. The method checks for an existing `preload()` function, creates one if it doesn't exist, and then uses p5.js's preload system to asynchronously load AudioWorklet modules, decrementing p5's preload counter upon completion. It relies on p5.js's internal `_preloadCount` and `_decrementPreload()` methods. The `loadAudioWorkletModules()` function is called to trigger the asynchronous loading. This approach avoids forcing users to define a `preload()` function every time and allows for asynchronous loading of the modules.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/project_wrapups/orenshoham_gsoc_2019.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\np5.prototype.registerMethod('init', function() {\n  // ensure that a preload function exists so that p5 will wait for preloads to finish\n  if (!this.preload && !window.preload) {\n    this.preload = function() {};\n  }\n  // use p5's preload system to load necessary AudioWorklet modules before setup()\n  this._preloadCount++;\n  const onWorkletModulesLoad = function() {\n    this._decrementPreload();\n  }.bind(this);\n  loadAudioWorkletModules().then(onWorkletModulesLoad);\n});\n\n```\n\n----------------------------------------\n\nTITLE: Extending p5.Element with html function\nDESCRIPTION: This code snippet extends the `p5.Element.prototype` with an `html()` function, enabling setting the inner HTML of a p5.Element object. This provides a way to modify the content of an HTML element directly within the p5.js environment, using the provided HTML string.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ja/creating_libraries.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n  p5.Element.prototype.html = function (html) {\n    this.elt.innerHTML = html;\n    //this.elt.textContent = html; // innerHTML のより安全な代替として textContent を使用してください。\n  };\n\n```\n\n----------------------------------------\n\nTITLE: Building p5.js Library - Bash\nDESCRIPTION: Executes the 'build' script defined in the project's package.json file. This compiles the p5.js source code into distribution files (p5.js and p5.min.js), usually located in the `lib/` folder.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/contributor_guidelines.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Mipmap Texture Class for Texture Management in JavaScript (src/webgl/p5.Texture.js)\nDESCRIPTION: Implements the `MipmapTexture` class used for managing textures with multiple mipmap levels typically required for prefiltered specular environment maps in Image-Based Lighting. This class handles creation, updating, and binding of textures with different resolution levels to optimize sampling based on roughness parameters. It depends on WebGL texture APIs and p5.js renderer integration.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/project_wrapups/aryan_koundal_gsoc_2023.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass MipmapTexture {\n\tconstructor(p5Instance) {\n\t\t// Initializes texture storage and WebGL handlers\n\t}\n\tupdate(imageLevels) {\n\t\t// Updates the texture with given mipmap levels\n\t}\n\tbind(unit) {\n\t\t// Binds texture to specified texture unit\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for p5.js Development\nDESCRIPTION: Command to install all required Node.js dependencies for p5.js development using npm ci, which ensures exact versions specified in package-lock.json are installed.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/hi/contributor_guidelines.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm ci\n```\n\n----------------------------------------\n\nTITLE: Post-Rebase Conflict Resolution and Push Workflow with NPM and Git in Bash\nDESCRIPTION: This snippet covers post-rebase tasks including running tests, staging resolved files, continuing the rebase, and pushing updates to the remote. 'npm test' verifies code integrity, 'git add -u' stages updated files, 'git rebase --continue' proceeds after manual conflict resolution, and 'git push' updates the remote repository. Dependencies: node/npm, Git, and passing tests in your project. All commands assume you are in the root of your repository. This sequence is used after resolving merge conflicts locally and before finalizing a pull request.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/contributor_guidelines.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\ngit add -u\ngit rebase --continue\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit push\n```\n\n----------------------------------------\n\nTITLE: JSON Example: Logo Definition\nDESCRIPTION: This snippet demonstrates the use of JSON to store a multiline string representing an ASCII art logo.  The key is 'logo' and the value is a string containing the logo art. This structure is employed to be displayed in the appropriate context.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/friendly_error_system.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"logo\": \"    _ \\n /\\\\| |/\\\\ \\n \\\\ ` ' /  \\n / , . \\\\  \\n \\\\/|_|\\\\/ \\n\\n\"\n}\n```\n\n----------------------------------------\n\nTITLE: Interactive Ellipse Following Mouse\nDESCRIPTION: Demonstrates using the built-in `mouseX` and `mouseY` variables to make an ellipse follow the mouse cursor's position on the canvas.\nSOURCE: https://github.com/processing/p5.js/blob/main/test/unit/assets/many_lines.txt#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction setup() {\n  createCanvas(400, 400);\n}\n\nfunction draw() {\n  background(220);\n  // Draw an ellipse at the mouse position\n  ellipse(mouseX, mouseY, 80, 80);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing npm Dependencies - Bash\nDESCRIPTION: Installs project dependencies from the package-lock.json or npm-shrinkwrap.json file. This command is recommended for clean installs in automated environments or when reproducible builds are needed.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/contributor_guidelines.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nnpm ci\n```\n\n----------------------------------------\n\nTITLE: GLSL Functions Calculating Diffuse and Specular Image-Based Lighting Outputs (src/webgl/shaders/lighting.glsl)\nDESCRIPTION: Contains helper functions `calculateImageDiffuse()` and `calculateImageSpecular()` which compute final lighting colors based on the input textures for diffuse irradiance and specular prefiltered environment maps. These functions are invoked only when the `imageLight()` function is active during rendering and serve to encapsulate IBL calculations within shader code. They take inputs such as normals, roughness, view direction, and sample the necessary maps to produce lighting contributions.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/project_wrapups/aryan_koundal_gsoc_2023.md#_snippet_6\n\nLANGUAGE: GLSL\nCODE:\n```\nvec3 calculateImageDiffuse(vec3 normal) {\n\t// Samples the irradiance map based on surface normal\n\treturn texture(irradianceMap, normal).rgb;\n}\n\nvec3 calculateImageSpecular(vec3 normal, vec3 viewDir, float roughness) {\n\t// Samples prefiltered environment map and BRDF lookup texture\n\t// Uses importance sampling and Fresnel-Schlick approximation\n\treturn vec3(1.0); // Placeholder for specular calculation\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Example: Greeting with Interpolation\nDESCRIPTION: This JSON snippet demonstrates the use of interpolation within the FES. It showcases a greeting with a placeholder for a variable. The message uses `{{who}}` as a placeholder for a name or greeting recipient. This illustrates the ability to dynamically populate messages in the translations.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/friendly_error_system.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"greeting\": \"你好，{{who}}！\"\n```\n\n----------------------------------------\n\nTITLE: Preferred Multiline Comment Usage in JavaScript (JavaScript)\nDESCRIPTION: This set of JavaScript examples instructs on the preferred way to write multi-line comments in documentation code samples for p5.js: using repeated single-line comments (//) above each line, rather than block comments (/** ... */ or /* ... */). Demonstrates both discouraged and recommended styles, without functional code execution. No input/output involved beyond style compliance.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/documentation_style_guide.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Bad.\n/**\n * I will use // for multiline comments.\n * I will use // for multiline comments.\n * I will use // for multiline comments.\n * I will use // for multiline comments.\n * I will use // for multiline comments.\n */\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n//Bad.\n/*\n I will use // for multiline comments.\n I will use // for multiline comments.\n I will use // for multiline comments.\n I will use // for multiline comments.\n I will use // for multiline comments.\n */\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Good.\n// I will use // for multiline comments.\n// I will use // for multiline comments.\n// I will use // for multiline comments.\n// I will use // for multiline comments.\n// I will use // for multiline comments.\n```\n\n----------------------------------------\n\nTITLE: Committing Git Changes with Message - Bash\nDESCRIPTION: Records the staged changes to the repository history as a new commit. The `-m` flag allows providing a commit message directly on the command line.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/contributor_guidelines.md#_snippet_8\n\nLANGUAGE: Bash\nCODE:\n```\ngit commit -m \"[your_commit_message]\"\n```\n\n----------------------------------------\n\nTITLE: Documenting Class Constructors in p5.js\nDESCRIPTION: Provides an example of a JSDoc comment block for documenting a p5.js class constructor, specifically `p5.Color`. It uses the `@class` tag to define the class and the `@constructor` tag to indicate the constructor function, along with descriptions and parameter documentation.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/es/contributing_to_the_p5js_reference.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * A class to describe a color. Each `p5.Color` object stores the color mode\n * and level maxes that were active during its construction. These values are\n * used to interpret the arguments passed to the object's constructor. They\n * also determine output formatting such as when\n * <a href=\"#/p5/saturation\">saturation()</a> is called.\n *\n * Color is stored internally as an array of ideal RGBA values in floating\n * point form, normalized from 0 to 1. These values are used to calculate the\n * closest screen colors, which are RGBA levels from 0 to 255. Screen colors\n * are sent to the renderer.\n *\n * When different color representations are calculated, the results are cached\n * for performance. These values are normalized, floating-point numbers.\n *\n * <a href=\"#/p5/color\">color()</a> is the recommended way to create an instance\n * of this class.\n *\n * @class p5.Color\n * @constructor\n * @param {p5} [pInst]                  pointer to p5 instance.\n *\n * @param {Number[]|String} vals        an array containing the color values\n *                                      for red, green, blue and alpha channel\n *                                      or CSS color.\n */\n```\n\n----------------------------------------\n\nTITLE: Loading AudioWorklet Modules\nDESCRIPTION: This snippet demonstrates how to load AudioWorklet modules asynchronously by creating Blobs from stringified module sources, creating object URLs for the blobs, and then passing these URLs to the audioWorklet.addModule() method. This approach is used because the processors need to be loaded as separate files, but are included in a single file for sketch inclusion. Dependencies include the AudioWorklet API, Blob objects, and URL.createObjectURL(). The function takes an array of module source strings as input and returns a Promise that resolves when all modules are loaded.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/project_wrapups/orenshoham_gsoc_2019.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction loadAudioWorkletModules() {\n  return Promise.all(moduleSources.map(function(moduleSrc) {\n    const blob = new Blob([moduleSrc], { type: 'application/javascript' });\n    const objectURL = URL.createObjectURL(blob);\n    return ac.audioWorklet.addModule(objectURL);\n  }));\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Browserify Transform for Babel in package.json - JSON\nDESCRIPTION: This JSON configuration snippet defines the browserify transform settings applied in package.json to enable Babel compilation using the '@babel/preset-env' preset. It resolves test failures caused by incompatibilities in module imports and JavaScript versions during bundling. This setup is essential for transpiling modern JavaScript syntax to compatible code when running tests or bundling the Friendly Error System (FES) files externally. The snippet includes nested arrays to specify the transform parameters precisely within the browserify key.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/project_wrapups/ayush23dash_gsoc_2023.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n \"browserify\": {\n\n \"transform\": [\n \n [\n\n \"babelify\",\n\n {\n\n \"presets\": [\n\n \"@babel/preset-env\"\n\n ]\n\n }\n\n ]\n\n ]\n\n }\n```\n\n----------------------------------------\n\nTITLE: JavaScript Translator Usage\nDESCRIPTION: Illustrates how to call the `translator` function in JavaScript to generate a dynamic message using i18next interpolation. It passes a key (`greeting`) and an object containing the variable value (`who: 'everyone'`) to the translator function. The result is a personalized greeting.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ja/friendly_error_system.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\ntranslator('greeting', { who: 'everyone' } );\n```\n\n----------------------------------------\n\nTITLE: Git Commit: Save Changes with Message\nDESCRIPTION: This command commits the staged changes with a descriptive message. The message should clearly explain the purpose of the changes for better understanding.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/es/contributor_guidelines.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m \"[your_commit_message]\"\n```\n\n----------------------------------------\n\nTITLE: Example of FES Limitation with Ambiguous Function Signatures\nDESCRIPTION: Demonstrates a known limitation where FES might not detect incorrect parameters for functions like `line()` if a valid signature pattern (e.g., the 2D version with four numbers) matches the provided arguments, even if the intended usage or context (e.g., 3D) requires different parameters or types. This specific example shows using `line` with potentially undefined 3D coordinates which might bypass FES checks.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ja/fes_reference_dev_notes.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n\nconst x3; // 未定義\nline(0, 0, 100, 100, x3, Math.PI);\n\n```\n\n----------------------------------------\n\nTITLE: Committing Code Changes with Git\nDESCRIPTION: Git commands for staging and committing local code changes to the repository.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ git add -u\n$ git commit -m \"YOUR COMMIT MESSAGE\"\n```\n\n----------------------------------------\n\nTITLE: Module-Level Documentation Structure in p5.js\nDESCRIPTION: Shows the standard JSDoc comment block used at the beginning of p5.js source files to define modules and their relationships. It uses `@module`, `@submodule`, `@for`, and `@requires` tags to structure the documentation.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/es/contributing_to_the_p5js_reference.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @module Color\n * @submodule Creating & Reading\n * @for p5\n * @requires core\n * @requires constants\n */\n```\n\n----------------------------------------\n\nTITLE: Creating rounded rectangle in p5.js WEBGL\nDESCRIPTION: This code snippet demonstrates the implementation of rounded corners for the rect() function in WEBGL mode within p5.js. It utilizes the `createCanvas`, `background`, `fill`, and `stroke` functions to set up the canvas, background color, fill color, and stroke color respectively. The `rect()` function is then called with parameters to define the position, size, and corner radius of the rectangle, rendered within the WEBGL environment. The primary purpose is to allow rounded corners to be displayed in WEBGL mode, addressing an existing issue.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/project_wrapups/shubham_sharma_gsoc_2022.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction setup() {\n // Create the canvas\n createCanvas(720, 400, WEBGL);\n background(200);\n \n // Set colors\n fill(204, 101, 192, 127);\n stroke(127, 63, 120);\n \n // A rectangle\n rect(-100, -100, 200, 80, 40, 1, 5, 1);\n}\n \n```\n\n----------------------------------------\n\nTITLE: Reading Code with fesCodeReader\nDESCRIPTION: `fesCodeReader()` checks for the use of p5.js constants and functions outside of `setup()` and `draw()` and for redefinitions of reserved words. It generates friendly error messages using `fes.sketchReaderErrors.reservedConst` and `fes.sketchReaderErrors.reservedFunc`. This function is executed when the `load` event is triggered. The examples showcase how the reader identifies problems.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/fes_reference_dev_notes.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Installing dependencies for p5.js with npm\nDESCRIPTION: This code snippet shows how to install the necessary dependencies for building and running tests for p5.js using npm. It assumes that Node.js and npm are installed. The `npm ci` command performs a clean install of the dependencies listed in `package-lock.json`.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/es/contributor_guidelines.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm ci\n```\n\n----------------------------------------\n\nTITLE: Testing Pixel Consistency Between 2D and WebGL Modes in p5.js - JavaScript\nDESCRIPTION: This JavaScript unit test verifies that rendered results using the same drawing commands are visually identical in both 2D and WebGL modes in p5.js. It draws shapes to canvases in each mode, reads out pixel data, and compares the results for exactness using deep equality. Required dependencies include the p5.js library and a test harness supporting the 'test' and 'assert.deepEqual' functions. Inputs are the modes 'P2D' and 'WEBGL', and outputs are the pixel arrays for each. The test is limited by the fact that anti-aliasing behaviors may differ between modes, causing imperfect matches in cases other than axis-aligned shapes.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ko/webgl_contribution_guide.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest('coplanar strokes match 2D', function() {\n  const getColors = function(mode) {\n    myp5.createCanvas(20, 20, mode);\n    myp5.pixelDensity(1);\n    myp5.background(255);\n    myp5.strokeCap(myp5.SQUARE);\n    myp5.strokeJoin(myp5.MITER);\n    if (mode === myp5.WEBGL) {\n      myp5.translate(-myp5.width/2, -myp5.height/2);\n    }\n    myp5.stroke('black');\n    myp5.strokeWeight(4);\n    myp5.fill('red');\n    myp5.rect(10, 10, 15, 15);\n    myp5.fill('blue');\n    myp5.rect(0, 0, 15, 15);\n    myp5.loadPixels();\n    return [...myp5.pixels];\n  };\n  assert.deepEqual(getColors(myp5.P2D), getColors(myp5.WEBGL));\n});\n```\n\n----------------------------------------\n\nTITLE: Indicating Chainable Methods with @chainable in YUIDoc (JavaScript)\nDESCRIPTION: Shows the `@chainable` tag used in YUIDoc. This tag indicates that a method returns its parent object, enabling method chaining. It replaces the need for an `@return` tag in such cases.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/contributing_to_the_p5js_reference.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n@chainable\n```\n\n----------------------------------------\n\nTITLE: Running ESLint & Prettier\nDESCRIPTION: This snippet shows how to run ESLint and Prettier to check the code style of your contributions. It highlights the importance of following the project's coding style to maintain consistency.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/sk/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm run lint\n```\n\n----------------------------------------\n\nTITLE: Generating p5.js Documentation\nDESCRIPTION: Shell command using npm to generate the p5.js reference documentation (`data.json`) from the JSDoc comments in the source code.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/es/contributing_to_the_p5js_reference.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nnpm run docs\n```\n\n----------------------------------------\n\nTITLE: Describing a MouseX System Variable\nDESCRIPTION: This code block provides an example of documenting a variable (`mouseX`) using a reference comment block. It uses the `@property` tag to define the variable and `@readOnly` to indicate the variable is not intended to be overwritten. The block includes a description of the variable's purpose and behavior, and adds an `@example` tag to provide a code example.  The `@example` tag is included to show how it's implemented in a basic draw() function.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ja/contributing_to_the_p5.js_reference.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * The system variable mouseX always contains the current horizontal\n * position of the mouse, relative to (0, 0) of the canvas. The value at\n * the top-left corner is (0, 0) for 2-D and (-width/2, -height/2) for WebGL.\n * If touch is used instead of mouse input, mouseX will hold the x value\n * of the most recent touch point.\n *\n * @property {Number} mouseX\n * @readOnly\n *\n * @example\n * <div>\n * <code>\n * // Move the mouse across the canvas\n * function draw() {\n *   background(244, 248, 252);\n *   line(mouseX, 0, mouseX, 100);\n *   describe('horizontal black line moves left and right with mouse x-position');\n * }\n * </code>\n * </div>\n */\n```\n\n----------------------------------------\n\nTITLE: Setup MouseClicked Example p5.js\nDESCRIPTION: Demonstrates an internal library error when using `mouseClicked()` function. Calling `mouseClicked()` on the result of `createCanvas()` is an error. The FES would generate a specific message to assist users. Dependencies: p5.js library, createCanvas(), mouseClicked()\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/fes_contribution_guide.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction setup() {\n  cnv = createCanvas(200, 200);\n  cnv.mouseClicked();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing p5.js Method with Parameter Validation - JavaScript\nDESCRIPTION: Defines a p5.js prototype method ('circle') that utilizes the parameter validation function before performing further logic. This structure enforces correct parameter usage, provides user-friendly error feedback, and maintains consistency across API methods. The code extracts arguments, adapts parameters as necessary, and calls the internal draw function. Place the validation as the first line for best results. Requires the Friendly Error System and the p5.js core library.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/how-to-add-friendly-error-messages.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\np5.prototype.circle = function() {\n  p5._validateParameters('circle', arguments);\n  const args = Array.prototype.slice.call(arguments, 0, 2);\n  args.push(arguments[2]);\n  args.push(arguments[2]);\n  return this._renderEllipse(...args);\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Image-Based Lighting Function and Examples in JavaScript (src/webgl/light.js)\nDESCRIPTION: Contains the main function `imageLight()` which implements the Image-Based Lighting feature in p5.js. This function integrates environment-based lighting into shader programs. The file also includes example usages of `imageLight()` to demonstrate rendering illuminated 3D scenes. This code depends on p5.js WebGL renderer internals and texture management. It processes environment textures to enable realistic lighting effects for 3D geometries.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/project_wrapups/aryan_koundal_gsoc_2023.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction imageLight() {\n\t// Implementation of Image-Based Lighting (IBL) functionality\n\t// Applies environment map lighting effects to 3D models in p5.js WebGL\n\t// Uses precalculated diffuse and specular textures\n\t// This function is called during rendering to update shader uniforms\n}\n\n// Example usage:\n// setup() and draw() sketches demonstrating imageLight() in action\nfunction setup() {\n\tcreateCanvas(400, 400, WEBGL);\n\t// Load environment texture and initialize lighting maps\n}\n\nfunction draw() {\n\tbackground(0);\n\timageLight();\n\t// Render 3D objects with IBL applied\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Contributor Profile HTML\nDESCRIPTION: This HTML snippet defines a table cell (`<td>`) used to display information for a single project contributor. It includes centering alignment, specified width, a hyperlink (`<a>`) wrapping a profile image (`<img>`), and the contributor's name styled as subscript (`<sub><b>`). Each contributor entry links to their personal or project page.\nSOURCE: https://github.com/processing/p5.js/blob/main/README.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n      <td align=\"center\" valign=\"top\" width=\"16.66%\"><a href=\"http://sepans.com\"><img src=\"https://avatars3.githubusercontent.com/u/687513?v=4?s=120\" width=\"120px;\" alt=\"Sepand Ansari\"/><br /><sub><b>Sepand Ansari</b></sub></a><br /></td>\n```\n\n----------------------------------------\n\nTITLE: Requested Features Table\nDESCRIPTION: The table provides a list of requested features related to typography, along with their status, coding progress, pull request status, and whether they have been pushed. This shows the ongoing efforts to improve the typography capabilities of p5.js and the progress achieved.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/project_wrapups/munusshih_gsoc_2023.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nIf they're not dependent/relevant, we should do seperate PRs.\n```\n\n----------------------------------------\n\nTITLE: Documenting a Variable: mouseX in p5.js\nDESCRIPTION: This snippet shows how to document a variable, specifically `mouseX`, in p5.js using specialized comments. It contains the description of the variable and utilizes the `@property` tag to define the variable name and type. The `@readOnly` tag indicates that the variable's value should not be directly modified by the user.  Example code demonstrates how the variable is used.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/es/contributing_to_the_p5js_reference.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * The system variable mouseX always contains the current horizontal\n * position of the mouse, relative to (0, 0) of the canvas. The value at\n * the top-left corner is (0, 0) for 2-D and (-width/2, -height/2) for WebGL.\n * If touch is used instead of mouse input, mouseX will hold the x value\n * of the most recent touch point.\n *\n * @property {Number} mouseX\n * @readOnly\n *\n * @example\n * <div>\n * <code>\n * // Move the mouse across the canvas\n * function draw() {\n *   background(244, 248, 252);\n *   line(mouseX, 0, mouseX, 100);\n *   describe('horizontal black line moves left and right with mouse x-position');\n * }\n * </code>\n * </div>\n */\n```\n\n----------------------------------------\n\nTITLE: Example Usage of checkForUserDefinedFunctions in p5.js\nDESCRIPTION: Demonstrates a scenario where `checkForUserDefinedFunctions` would detect a potential typo in a user-defined function name (e.g., `preLoad` instead of `preload`) and generate a helpful error message in the console. This function checks for incorrect capitalization in standard p5.js function names.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ja/fes_reference_dev_notes.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction preLoad() {\n  loadImage('myimage.png');\n}\n```\n\n----------------------------------------\n\nTITLE: Saving the canvas with saveCanvas() function - JavaScript\nDESCRIPTION: This example shows how to save the p5.js canvas to a file using the `saveCanvas()` function. It sets up a canvas with `createCanvas()` and then uses `saveCanvas()` to save it as a JPG image. The example also includes the `norender notest` classes in the div tag to prevent the code from rendering and prevent it from running in automated tests.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ko/contributing_to_the_p5js_reference.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n* @example\n* <div class='norender notest'><code>\n* function setup() {\n*   let c = createCanvas(100, 100);\n*   saveCanvas(c, 'myCanvas', 'jpg');\n* }\n* </code></div>\n```\n\n----------------------------------------\n\nTITLE: Using Parentheses with Mixed Operators in p5.js JavaScript\nDESCRIPTION: Guidelines for using parentheses when mixing operators. Parentheses clarify operator precedence and help avoid subtle bugs, except with arithmetic operators +, -, and **.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/documentation_style_guide.md#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n// Bad.\nlet huh = a && b < 0 || c > 0 || d + 1 === 0;\n\n// Good.\nlet huh = (a && b < 0) || c > 0 || (d + 1 === 0);\n\n// Bad.\nif (a || b && c) {\n  return d;\n}\n\n// Good.\nif (a || (b && c)) {\n  return d;\n}\n\n// Bad.\nlet what = a + b / c * d;\n\n// Good.\nlet what = a + (b / c) * d;\n```\n\n----------------------------------------\n\nTITLE: Single Line and Multiline Comment Formatting Guidelines (JavaScript)\nDESCRIPTION: This series of JavaScript code examples illustrates proper and improper ways to place single line and multiline comments according to the p5.js documentation style. It highlights preferred practices for comment placement (above code rather than inline or after code), whitespace usage, and initialization of code blocks. No dependencies other than familiarity with JavaScript basics. Expected input/output: examples are for formatting, not functional invocation. Covers both good and bad examples for educational clarity.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/documentation_style_guide.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Bad.\nlet magicWord = 'Please';  // Remember this.\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Good.\n// Remember this.\nlet magicWord = 'Please';\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Bad.\nif (keyIsPressed === true) {\n  thing1();\n  // This is an important note.\n  thing2();\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Good.\nif (keyIsPressed === true) {\n  thing1();\n\n  // This is an important note.\n  thing2();\n}\n```\n\n----------------------------------------\n\nTITLE: Commenting and Documenting JavaScript Functions in p5.js (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates best practices for commenting above functions within p5.js documentation samples. Dependencies/prerequisites: familiarity with JavaScript functions. It shows standard comment styling, placement, and briefly illustrates function definition. No specific parameters or return values are described. Expected input: typical parameters for fractal drawing functions. Output: presumed visual output from function body (not shown). Only the comment and header are provided to model documentation style.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/documentation_style_guide.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Draws a fractal from a Julia set.\nfunction drawFractal(c, radius, maxIter) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Braces with Multiline Blocks in p5.js JavaScript\nDESCRIPTION: Guidelines for using braces with conditional blocks. Braces should be used with all multiline blocks to improve readability and prevent errors when adding more statements.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/documentation_style_guide.md#_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n// Bad.\nif (mouseIsPressed === true)\n  circle(mouseX, mouseY, 50);\n\n// Better.\nif (mouseIsPressed === true) circle(mouseX, mouseY, 50);\n\n// Best.\nif (mouseIsPressed === true) {\n  circle(mouseX, mouseY, 50);\n}\n```\n\n----------------------------------------\n\nTITLE: Pushing a Branch with Git CLI in Bash\nDESCRIPTION: This snippet demonstrates how to push a local Git branch to a remote repository (origin) using the bash command line. The command 'git push -u origin [branch_name]' sets the upstream tracking reference, making subsequent pushes and pulls easier. Replace '[branch_name]' with the actual name of your branch. Dependencies: Git installed and properly configured; local repository cloned and changes committed. Expected input is the branch name; output is the branch pushed to the remote and upstream set. No special constraints, but authentication with the remote is required.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/contributor_guidelines.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngit push -u origin [branch_name]\n```\n\n----------------------------------------\n\nTITLE: Specifying Constant Values for @param in YUIDoc (JavaScript)\nDESCRIPTION: Explains how to document a parameter that accepts specific constant values (defined elsewhere, e.g., `constants.js`). Use the type `{Constant}` and list the allowed values (e.g., LEFT, CENTER, RIGHT) in the description, often preceded by 'either'.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/contributing_to_the_p5js_reference.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n@param {Constant} horizAlign horizontal alignment, either LEFT, CENTER, or RIGHT\n```\n\n----------------------------------------\n\nTITLE: Defining Modules and Dependencies with YUIDoc (JavaScript)\nDESCRIPTION: Shows a typical YUIDoc comment block found at the beginning of p5.js source files. It uses `@module` to group related functionalities, `@submodule` for finer categorization, `@for p5` to link it to the main p5 class, and `@requires` to declare dependencies on other modules (e.g., core, constants).\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/contributing_to_the_p5js_reference.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @module Color\n * @submodule Creating & Reading\n * @for p5\n * @requires core\n * @requires constants\n */\n```\n\n----------------------------------------\n\nTITLE: Structuring @example Blocks in YUIDoc (JavaScript)\nDESCRIPTION: Demonstrates the required structure for adding runnable code examples within YUIDoc comments using the `@example` tag. Each example must be enclosed in `<div>` and `<code>` HTML tags, contain the p5.js example code, and include a `describe()` function call with a string argument for screen reader accessibility.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/contributing_to_the_p5js_reference.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n * @example\n * <div>\n * <code>\n * const c = color(255, 204, 0);\n * fill(c);\n * rect(15, 20, 35, 60);\n * // Sets 'redValue' to 255.\n * const redValue = red(c);\n * fill(redValue, 0, 0);\n * rect(50, 20, 35, 60);\n * describe(\n *   'Two rectangles with black edges. The rectangle on the left is yellow and the one on the right is red.'\n * );\n * </code>\n * </div>\n```\n\n----------------------------------------\n\nTITLE: Sample test suite for p5.prototype.keyIsPressed method\nDESCRIPTION: Demonstrates how to structure a Mocha test suite with 'suite' and 'test' functions for the 'keyIsPressed' property. This setup includes placeholders for assertions to verify the property's type and behavior when keys are pressed or not. It employs Chai assertions like 'assert.isBoolean' and 'assert.strictEqual' to validate the expected outcomes.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/hi/unit_testing.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nsuite('p5.prototype.keyIsPressed', function() {\n  test('keyIsPressed is a boolean', function() {\n    // परीक्षण यहाँ लिखें\n    assert.isBoolean(myp5.keyIsPressed);\n  });\n\n  test('keyIsPressed is true on key press', function() {\n    // परीक्षण यहाँ लिखें\n  });\n\n  test('keyIsPressed is false when no keys are pressed', function() {\n    // परीक्षण यहाँ लिखें\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: JavaScript Class Syntax and Inheritance Best Practices\nDESCRIPTION: Details proper use of ES6 'class' syntax for object-oriented programming, avoiding direct prototype manipulations. Also covers inheritance with 'extends', overriding methods carefully, and avoiding redundant or empty constructors to maintain code clarity.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/documentation_style_guide.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Using class syntax instead of function prototypes.\nclass Mover {\n  constructor(x, y, radius) {\n    this.x = x;\n    this.y = y;\n    this.radius = radius;\n  }\n\n  update() {\n    this.x += 1;\n    this.y += 1;\n  }\n\n  render() {\n    circle(this.x, this.y, 2 * this.radius);\n  }\n}\n\n// Using inheritance.\nclass RandomMover extends Mover {\n  update() {\n    this.x += random(-1, 1);\n    this.y += random(-1, 1);\n  }\n}\n\n// Avoid side effects in 'toString()' methods.\nclass Mover {\n  toString() {\n    return `Mover at (${this.x}, ${this.y})`;\n  }\n}\n\n// Avoid empty constructors; rely on defaults or superclass.\nclass Dot {\n  render() {\n    circle(mouseX, mouseY, 50);\n  }\n}\n\nclass DragonBall extends Ball {\n  constructor(x, y, d, numStars) {\n    super(x, y, d);\n    this.numStars = numStars;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mocha setup for browser-based tests\nDESCRIPTION: This snippet references the JavaScript setup file 'test/js/mocha_setup.js', which configures Mocha options for browser-based testing environments. It ensures that tests run with desired configurations and helpers in a browser context, such as Headless Chrome.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/hi/unit_testing.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Checking User-Defined Functions p5.js\nDESCRIPTION: The `checkForUserDefinedFunctions()` function checks for capitalization mistakes in user-defined functions (e.g., `setup()`, `draw()`).  It uses `translator()` to generate a Friendly Error message with the key `fes.checkUserDefinedFns`.  The input is the current context.  It's important to correct the mistake if it's unintentional.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/fes_contribution_guide.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ncheckForUserDefinedFunctions(context);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating p5.Camera Methods in JavaScript\nDESCRIPTION: This snippet demonstrates how to create, manipulate, and switch between p5.Camera objects in p5.js. It shows camera movement methods like pan(), tilt(), and move(), position setting, creating copies of cameras, and switching between camera instances.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/project_wrapups/aidannelson_gsoc_2018.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet cam1 = createCamera(); // create an instance of p5.Camera object\n\ncam1.pan(angle); // pans the camera by an angle\ncam1.tilt(angle); // tilts the camera by an angle\n\ncam1.move(x, y, z); // moves along the camera's local axes\ncam1.setPosition(x, y, z); // sets the camera's position in world-space\n\nlet cam2 = cam1.copy(); // create a copy of the camera\n\nsetCamera(cam2); // switch between multiple p5.Camera instances\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests with Grunt\nDESCRIPTION: Command to execute the unit tests for p5.js using Grunt task runner after dependencies have been installed.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ko/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ grunt\n```\n\n----------------------------------------\n\nTITLE: Defining p5.js Modules with JSDoc Tags\nDESCRIPTION: Shows the standard JSDoc block used at the top of p5.js source files to define modules and submodules. It utilizes `@module`, `@submodule`, `@for` (linking to the `p5` class), and `@requires` (listing dependencies) tags.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/contributing_to_the_p5js_reference.md#_snippet_6\n\nLANGUAGE: JSDoc\nCODE:\n```\n/**\n * @module Color\n * @submodule Creating & Reading\n * @for p5\n * @requires core\n * @requires constants\n */\n```\n\n----------------------------------------\n\nTITLE: Using Classes in JavaScript\nDESCRIPTION: This snippet advocates for using the `class` syntax instead of directly manipulating `prototype` for class definitions. This improves code readability and conciseness. This snippet also provides 'Bad' and 'Good' examples. The only exception to this rule is when explaining how to create libraries.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/documentation_style_guide.md#_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\n// Bad.\nfunction Mover(x, y, radius) {\n  this.x = x;\n  this.y = y;\n  this.radius = radius;\n}\n\nMover.prototype.update = function () {\n  this.x += 1;\n  this.y += 1;\n};\n\nMover.prototype.render = function () {\n  circle(this.x, this.y, 2 * this.radius);\n};\n\n// Good.\nclass Mover {\n  constructor(x, y, radius) {\n    this.x = x;\n    this.y = y;\n    this.radius = radius;\n  }\n\n  update() {\n    this.x += 1;\n    this.y += 1;\n  }\n\n  render() {\n    circle(this.x, this.y, 2 * this.radius);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Test Suite with .only Modifier in JavaScript\nDESCRIPTION: Example of how to modify a test suite to run only specific tests by adding the .only modifier to a suite in a JavaScript test file.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ja/unit_testing.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nsuite.only('color/p5.ColorConversion', function() {\n```\n\n----------------------------------------\n\nTITLE: HTML Dropdown Menu Structure for p5.js Website Navigation\nDESCRIPTION: This HTML snippet defines the structure for a dropdown menu used in the proposed redesign of the p5.js website navigation. It includes a topic navigation link, a dropdown container, and inner navigation links with descriptions. The structure is designed to provide users with a summary of each page before navigating to it.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/project_wrapups/josephhong_gsoc_2021.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<li class=\"navItem\">\n <a href=\"/index\" class=\"navLink\">Topic Navigation Link Name</a>\n <div class=\"dropdown\">\n   <ul class=\"dropdownContent\">\n     <!-- Default Text -->\n     <li><div class=\"dropdownTextDefault\">\n       <p class=\"pageName\">Cool Subject Title Here!</p>\n       <p class=\"pageDescription\">Snarky description here.</p>\n     </div></li>\n     <!-- Inner Navigation Link(s) -->\n     <li class=\"dropdownEntry\">\n       <a href=\"link/to/page\" class=\"innerNav\">PageName\n         <div class=\"dropdownText\">\n           <p class=\"pageName\">PageName</p>\n           <p class=\"pageDescription\">Fun/Detailed description here.</p>\n         </div>\n       </a>\n     </li>\n   </ul>\n </div>\n</li>\n```\n\n----------------------------------------\n\nTITLE: Generating Custom Friendly Library Errors in p5.js Using p5._friendlyError (JavaScript)\nDESCRIPTION: This snippet exemplifies raising a custom friendly error message within a p5.js library method when detecting API misuse or internal inconsistencies. By calling `p5._friendlyError()` with a human readable error message and a method name, developers can provide end users with detailed, localized, and actionable feedback when internal errors occur. This mechanism improves debugging by associating the error with a reference URL and expected usage context.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/how-to-add-friendly-error-messages.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\np5._friendlyError(\n  '在调用bezierVertex()之前必须先使用vertex()',\n  'bezierVertex'\n);\n```\n\n----------------------------------------\n\nTITLE: Adding File Load Error Cases in p5.js Using JavaScript\nDESCRIPTION: This snippet demonstrates how to add a new file load error case in the `fileLoadErrorCases` switch statement within the p5.js Friendly Error System. Each case corresponds to a specific file loading error scenario with a unique case number, method name, and an i18next translation key for localized error message generation. This code is dependent on prior agreement with maintainers and follows existing case conventions to maintain consistency.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/how-to-add-friendly-error-messages.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\ncase 3:\n  return {\n    message: translator('fes.fileLoadError.strings', {\n      suggestion\n    }),\n    method: 'loadStrings'\n  };\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation Command\nDESCRIPTION: This snippet provides the command for generating the documentation from the source code's reference comments. The `npm run docs` command processes the source code comments and creates the preview files, particularly `docs/reference/data.json`, which is used to render the reference pages on the website. This command is run within the p5.js repository to build and render documentation.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ko/contributing_to_the_p5js_reference.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nnpm run docs\n```\n\n----------------------------------------\n\nTITLE: Registering the Test Task in Grunt\nDESCRIPTION: Defines the main test task in Grunt that builds the library, starts a server, runs tests in Chrome, runs Node.js tests, and generates a code coverage report.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ja/steward_guidelines.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\ngrunt.registerTask('test', [\n  'build',\n  'connect:server',\n  'mochaChrome',\n  'mochaTest',\n  'nyc:report'\n]);\n```\n\n----------------------------------------\n\nTITLE: Fragment Shader Calculating Diffused Image-Based Lighting in GLSL (src/webgl/shaders/imageLightDiffused.frag)\nDESCRIPTION: Fragment shader responsible for computing the diffuse portion of Image-Based Lighting. It samples the precomputed irradiance map to simulate diffused light reflection from the environment. Inputs include surface normals and texture samplers representing irradiance. The output is the color modulated by the diffuse lighting component. Requires WebGL 2.0 and GLSL ES 3.0 support.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/project_wrapups/aryan_koundal_gsoc_2023.md#_snippet_4\n\nLANGUAGE: GLSL\nCODE:\n```\n#version 300 es\nprecision highp float;\nin vec3 vNormal;\nuniform samplerCube irradianceMap;\nout vec4 fragColor;\n\nvoid main() {\n\tvec3 n = normalize(vNormal);\n\tvec3 irradiance = texture(irradianceMap, n).rgb;\n\t// Calculate diffuse IBL lighting\n\tfragColor = vec4(irradiance, 1.0);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Lint Task with Subtasks in Grunt - JavaScript\nDESCRIPTION: This snippet defines the 'lint' task in the Grunt build system, subdivided into source linting and sample linting stages. The 'lint:source' subtask runs ESLint on build scripts, source code, and test scripts, validating code quality. The 'lint:samples' subtask first runs YUIDoc-related tasks and then a custom ESLint check on documentation example code. This layered approach ensures consistent coding standards across code and documentation.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/hi/steward_guidelines.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ngrunt.registerTask('lint', ['lint:source', 'lint:samples']);\n```\n\n----------------------------------------\n\nTITLE: Adding Git Upstream Remote for p5.js Fork - Bash\nDESCRIPTION: This snippet shows the git command needed to configure a local fork of the p5.js repository by adding the original p5.js repository as an upstream remote. Running this command enables synchronizing the forked repository with the latest changes from the upstream source. This step is prerequisite for keeping the local development environment up-to-date.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/es/contributor_guidelines.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add upstream https://github.com/processing/p5.js\n```\n\n----------------------------------------\n\nTITLE: Defining a Class Constructor JavaScript\nDESCRIPTION: This snippet demonstrates the definition of a class constructor using `@class` and `@constructor` tags in JSDoc. The example defines the `p5.Color` class.  The class is described, specifying constructor parameters like `pInst` and `vals` with their associated types and descriptions. The constructor's purpose is to describe a color, store its color mode and level maxes, and to provide the recommended way to create an instance of the class.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ko/contributing_to_the_p5js_reference.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * A class to describe a color. Each `p5.Color` object stores the color mode\n * and level maxes that were active during its construction. These values are\n * used to interpret the arguments passed to the object's constructor. They\n * also determine output formatting such as when\n * <a href=\"#/p5/saturation\">saturation()</a> is called.\n *\n * Color is stored internally as an array of ideal RGBA values in floating\n * point form, normalized from 0 to 1. These values are used to calculate the\n * closest screen colors, which are RGBA levels from 0 to 255. Screen colors\n * are sent to the renderer.\n *\n * When different color representations are calculated, the results are cached\n * for performance. These values are normalized, floating-point numbers.\n *\n * <a href=\"#/p5/color\">color()</a> is the recommended way to create an instance\n * of this class.\n *\n * @class p5.Color\n * @constructor\n * @param {p5} [pInst]                  pointer to p5 instance.\n *\n * @param {Number[]|String} vals        an array containing the color values\n *                                      for red, green, blue and alpha channel\n *                                      or CSS color.\n */\n```\n\n----------------------------------------\n\nTITLE: Testing Parameter Error Cases in p5.js Sketches - JavaScript\nDESCRIPTION: Provides examples of calling a method (circle) with various incorrect argument combinations: missing arguments, too many arguments, and wrong argument types. These calls trigger Friendly Error messages when executed in a p5.js sketch running in development mode. Intended for direct use in test scripts to verify correct error message generation.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/how-to-add-friendly-error-messages.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Missing arguments\ncircle(100);\n// Wrong number of arguments (more than required)\n// Notice this code still successfully draws a circle.\ncircle(100, 100, 100, 1000);\n// Wrong type(s) of argument(s)\ncircle(100, 100, 'hello');\n```\n\n----------------------------------------\n\nTITLE: Using describe() for Accessibility in p5.js Examples\nDESCRIPTION: Highlights the requirement to include the `describe()` function in every p5.js example to provide screen-reader accessible descriptions of the canvas content. Two examples using `noise()` demonstrate its usage.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/contributing_to_the_p5js_reference.md#_snippet_4\n\nLANGUAGE: JSDoc\nCODE:\n```\n* @example\n* <div>\n* <code>\n* let xoff = 0.0;\n* function draw() {\n*   background(204);\n*   xoff = xoff + 0.01;\n*   let n = noise(xoff) * width;\n*   line(n, 0, n, height);\n*   describe('A vertical line moves randomly from left to right.');\n* }\n* </code>\n* </div>\n*\n* <div>\n* <code>\n* let noiseScale = 0.02;\n* function draw() {\n*   background(0);\n*   for (let x = 0; x < width; x += 1) {\n*     let noiseVal = noise((mouseX + x) * noiseScale, mouseY * noiseScale);\n*     stroke(noiseVal*255);\n*     line(x, mouseY + noiseVal * 80, x, height);\n*   }\n*   describe('A horizontal wave pattern moves in the opposite direction of the mouse.');\n* }\n* </code>\n* </div>\n```\n\n----------------------------------------\n\nTITLE: Documenting p5.js Classes with JSDoc\nDESCRIPTION: Provides an example of documenting a class constructor (`p5.Color`) using the `@class` and `@constructor` JSDoc tags. It includes a class description and parameter documentation (`@param`).\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/contributing_to_the_p5js_reference.md#_snippet_7\n\nLANGUAGE: JSDoc\nCODE:\n```\n/**\n * A class to describe a color. Each `p5.Color` object stores the color mode\n * and level maxes that were active during its construction. These values are\n * used to interpret the arguments passed to the object's constructor. They\n * also determine output formatting such as when\n * <a href=\"#/p5/saturation\">saturation()</a> is called.\n *\n * Color is stored internally as an array of ideal RGBA values in floating\n * point form, normalized from 0 to 1. These values are used to calculate the\n * closest screen colors, which are RGBA levels from 0 to 255. Screen colors\n * are sent to the renderer.\n *\n * When different color representations are calculated, the results are cached\n * for performance. These values are normalized, floating-point numbers.\n *\n * <a href=\"#/p5/color\">color()</a> is the recommended way to create an instance\n * of this class.\n *\n * @class p5.Color\n * @constructor\n * @param {p5} [pInst]                  pointer to p5 instance.\n *\n * @param {Number[]|String} vals        an array containing the color values\n *                                      for red, green, blue and alpha channel\n *                                      or CSS color.\n */\n```\n\n----------------------------------------\n\nTITLE: Multi-line Array Literals\nDESCRIPTION: This snippet suggests writing array literals on multiple lines when it improves readability, adding line breaks after the opening bracket and before the closing bracket. Using a trailing comma is also encouraged. The example shows 'Bad' and 'Good' examples, emphasizing improved readability.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/documentation_style_guide.md#_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\n// Bad.\nlet matrix = [[1, 0, 0],\n                [0, 1, 0],\n                [0, 0, 1]];\n\n// Good.\nlet matrix = [\n  [1, 0, 0],\n  [0, 1, 0],\n  [0, 0, 1],\n];\n\n// Also good.\nlet matrix = [[1, 0, 0], [0, 1, 0], [0, 0, 1]];\n```\n\n----------------------------------------\n\nTITLE: Defining Default Grunt Task for p5.js\nDESCRIPTION: Registers the default Grunt task that runs linting and tests when executing 'grunt' command or 'npm test'.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ja/steward_guidelines.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ngrunt.registerTask('default', ['lint', 'test']);\n```\n\n----------------------------------------\n\nTITLE: Using p5.xr Viewer Properties for VR Embodiment (JavaScript/p5.js)\nDESCRIPTION: Describes how to use p5.xr properties and functions to align objects with the viewer's position and orientation in VR. `viewerPosition` provides the camera's location, `viewerPoseMatrix` gives its full pose (position and orientation), `applyMatrix()` applies this pose to an object (like an avatar's head), and `translate()` shifts the coordinate system based on the viewer's position, making subsequent drawing relative.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/project_wrapups/anaisgonzalez_gsoc_2021.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nviewerPosition\n```\n\nLANGUAGE: javascript\nCODE:\n```\nviewerPoseMatrix\n```\n\nLANGUAGE: javascript\nCODE:\n```\napplyMatrix(viewerPoseMatrix)\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntranslate(viewerPosition)\n```\n\n----------------------------------------\n\nTITLE: Testing WebGL and 2D Mode Consistency in JavaScript\nDESCRIPTION: A test function that compares rendering between WebGL and 2D modes by drawing rectangles in both modes and ensuring the resulting pixels match, demonstrating how to verify consistent behavior across rendering modes.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/es/webgl_contribution_guide.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest('coplanar strokes match 2D', function() {\n  const getColors = function(mode) {\n    myp5.createCanvas(20, 20, mode);\n    myp5.pixelDensity(1);\n    myp5.background(255);\n    myp5.strokeCap(myp5.SQUARE);\n    myp5.strokeJoin(myp5.MITER);\n    if (mode === myp5.WEBGL) {\n      myp5.translate(-myp5.width/2, -myp5.height/2);\n    }\n    myp5.stroke('black');\n    myp5.strokeWeight(4);\n    myp5.fill('red');\n    myp5.rect(10, 10, 15, 15);\n    myp5.fill('blue');\n    myp5.rect(0, 0, 15, 15);\n    myp5.loadPixels();\n    return [...myp5.pixels];\n  };\n  assert.deepEqual(getColors(myp5.P2D), getColors(myp5.WEBGL));\n});\n```\n\n----------------------------------------\n\nTITLE: Else Placement in p5.js JavaScript\nDESCRIPTION: Guidelines for placing else statements on the same line as the closing brace of the preceding if block. This style is more consistent and improves readability.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/documentation_style_guide.md#_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n// Bad.\nif (mouseIsPressed === true) {\n  thing1();\n  thing2();\n}\nelse {\n  thing3();\n}\n\n// Good.\nif (mouseIsPressed === true) {\n  thing1();\n  thing2();\n} else {\n  thing3();\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Custom Modular Builds with Grunt - Shell\nDESCRIPTION: This shell command invokes the Grunt task to combine user-selected modules into a custom build of p5.js. Dependencies include Node.js, Grunt, Browserify, and the appropriate Grunt configuration. Users specify desired modules as colon-separated arguments, corresponding to module folder names (such as color, events, math). The resulting bundle is output to the lib/modules directory and always includes the core module by default.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/project_wrapups/sakshamsaxena_gsoc_2017.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngrunt combineModules:module_a[:module_b][:module_c]\n```\n\n----------------------------------------\n\nTITLE: JavaScript: Disabling the Friendly Error System\nDESCRIPTION: Shows how to disable the Friendly Error System (FES) in p5.js. Setting `p5.disableFriendlyErrors` to `true` turns off the FES, potentially improving performance.  This can be useful in production environments or when debugging is not required.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/friendly_error_system.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\np5.disableFriendlyErrors = true;\n\nfunction setup() {\n  createCanvas(100, 50);\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Optional Parameters with @param in YUIDoc (JavaScript)\nDESCRIPTION: Shows how to indicate an optional parameter in YUIDoc by enclosing the parameter name in square brackets within the `@param` tag: `@param {type} [name] Description here.`.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/contributing_to_the_p5js_reference.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n@param {type} [name] Description here.\n```\n\n----------------------------------------\n\nTITLE: Using Grunt Watch Tasks\nDESCRIPTION: These Grunt watch tasks monitor file changes and run relevant tasks to build the reference documentation or library. Different variations exist to control the scope of changes, from full rebuilds to quick library builds. Choosing the most appropriate task can save time during development.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/steward_guidelines.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt watch\ngrunt watch:main\ngrunt watch:quick\n```\n\n----------------------------------------\n\nTITLE: Documenting Private Methods in p5.js\nDESCRIPTION: Illustrates how to use the `@private` JSDoc tag to mark internal methods or properties within the p5.js library. Features marked as private are documented in the source code but excluded from the generated public reference.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/es/contributing_to_the_p5js_reference.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * _start calls preload() setup() and draw()\n *\n * @method _start\n * @private\n */\np5.prototype._start = function () {\n```\n\n----------------------------------------\n\nTITLE: Creating a New p5.js Object with Name Parameter\nDESCRIPTION: Example showing the proper way to create a new p5.js object with a name parameter, which is necessary for FES to correctly identify the object type during parameter validation.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ko/friendly_error_system.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\np5.newObject = function(parameter) {\n   this.parameter = '파라미터';\n   this.name = 'p5.newObject';\n};\n```\n\n----------------------------------------\n\nTITLE: Documenting Background Function with Multiple Signatures in p5.js\nDESCRIPTION: This example demonstrates documenting a function with multiple possible parameter combinations, using the `background()` function in p5.js as an example. Each signature is documented in a separate comment block, using the `@method` tag to denote it as a signature for the `background` function. The first signature includes a description and parameter details. Subsequent signatures only provide the `@method` tag and parameter details.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/es/contributing_to_the_p5js_reference.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * @method background\n * @param {String} colorstring color string, possible formats include: integer\n *                         rgb() or rgba(), percentage rgb() or rgba(),\n *                         3-digit hex, 6-digit hex\n * @param {Number} [a] alpha value\n */\n\n/**\n * @method background\n * @param {Number} gray specifies a value between white and black\n * @param {Number} [a]\n */\n```\n\n----------------------------------------\n\nTITLE: Implementing Trie-like Data Structure for validateParameters - JavaScript\nDESCRIPTION: This snippet demonstrates the use of a trie-like data structure to optimize the `validateParameters` function in p5.js.  By caching argument sequences, the function avoids redundant computations when called multiple times with the same arguments, improving both speed and preventing console flooding.  The implementation details are available in the linked GitHub source code.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/project_wrapups/akshaypadte_gsoc_2020.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nhttps://github.com/processing/p5.js/blob/8226395d40a9df0113b13e42c983ae578b3856fa/src/core/error_helpers.js#L300\n```\n\n----------------------------------------\n\nTITLE: Using Default Parameters\nDESCRIPTION: This snippet advises the use of default parameter syntax (e.g., `function createBall(diameter = 50) { ... }`) instead of mutating function arguments, such as `diameter = diameter || 50;`. This promotes code clarity and avoids potential side effects. The example also provides 'Bad' and 'Good' examples.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/documentation_style_guide.md#_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\n// Bad.\nfunction createBall(diameter) {\n  diameter = diameter || 50;\n  // ...\n}\n\n// Good.\nfunction createBall(diameter = 50) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Diagramming p5.js WebGL Class Structure - Mermaid\nDESCRIPTION: This Mermaid diagram illustrates the key classes in the p5.js WebGL renderer. It depicts the inheritance structure, showing p5.Renderer2D and p5.RendererGL inheriting from p5.Renderer. It also shows how p5.RendererGL aggregates or uses instances of p5.Geometry, p5.Shader, p5.Texture, and p5.Framebuffer for rendering tasks.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/webgl_mode_architecture.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\n---\ntitle: p5.js WebGL Classes\n---\nclassDiagram\n    class Base[\"p5.Renderer\"] {\n    }\n    class P2D[\"p5.Renderer2D\"] {\n    }\n    class WebGL[\"p5.RendererGL\"] {\n    }\n    class Geometry[\"p5.Geometry\"] {\n    }\n    class Shader[\"p5.Shader\"] {\n    }\n    class Texture[\"p5.Texture\"] {\n    }\n    class Framebuffer[\"p5.Framebuffer\"] {\n    }\n    Base <|-- P2D\n    Base <|-- WebGL\n    WebGL \"*\" o-- \"*\" Geometry\n    WebGL \"1\" *-- \"*\" Shader\n    WebGL \"1\" *-- \"*\" Texture\n    WebGL \"1\" *-- \"*\" Framebuffer\n```\n\n----------------------------------------\n\nTITLE: Existing File Load Error Case Example (String-based File) - JavaScript\nDESCRIPTION: Shows an existing file loading error handler for string-based files in the p5.js fileLoadErrorCases. This case returns an i18next-translated error message specific to the loadStrings method, including a suggestion property in the translation context. Use this template for handling similar file type errors or as a reference when adding new specialized error cases.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/how-to-add-friendly-error-messages.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\ncase 3:\n  return {\n    message: translator('fes.fileLoadError.strings', {\n      suggestion\n    }),\n    method: 'loadStrings'\n  };\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Function Signatures in YUIDoc (JavaScript)\nDESCRIPTION: Illustrates how to document overloaded functions (functions with multiple valid parameter sets) like `background()` in YUIDoc. After the primary comment block, add separate, minimal blocks containing only `@method` and `@param` tags for each additional signature.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/contributing_to_the_p5js_reference.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @method background\n * @param {String} colorstring color string, possible formats include: integer\n *                         rgb() or rgba(), percentage rgb() or rgba(),\n *                         3-digit hex, 6-digit hex\n * @param {Number} [a] alpha value\n */\n\n/**\n * @method background\n * @param {Number} gray specifies a value between white and black\n * @param {Number} [a]\n */\n```\n\n----------------------------------------\n\nTITLE: Complex Text Alignment in p5.js\nDESCRIPTION: This code snippet shows how text alignment is handled within p5.js. It uses a `switch` statement to determine the alignment and calculates the `x` position accordingly, demonstrating a more involved process than the HTML Canvas API approach. This highlights the necessity to reinvent functions which already have native API support, which leads to maintenance challenges.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/project_wrapups/munusshih_gsoc_2023.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nswitch (this._textAlign) {\n  case constants.CENTER:\n    x += maxWidth / 2;\n    break;\n  case constants.RIGHT:\n    x += maxWidth;\n    break;\n}\n```\n\n----------------------------------------\n\nTITLE: Switching to Unminified p5.js for Friendly Error Testing - HTML\nDESCRIPTION: Instructs how to update an HTML script tag to load the unminified p5.js version, which includes support for Friendly Error messages. This ensures that full error diagnostics are enabled during development and testing, as the minified version does not implement these features. The snippet belongs in the <head> section of your test HTML file.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/how-to-add-friendly-error-messages.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"../p5.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Sample Mocha Test Suite for p5.prototype.keyIsPressed Variable\nDESCRIPTION: This snippet defines a Mocha test suite for the p5.js variable 'keyIsPressed'. It includes three individual test cases to verify the variable's type and behavior on key press and when no keys are pressed. The setup function initializes a p5 instance for testing, assigning it to 'myp5' for access within tests.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/unit_testing.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nsuite('p5.prototype.keyIsPressed', function() {\n  test('keyIsPressed is a boolean', function() {\n    //write test here\n  });\n\n  test('keyIsPressed is true on key press', function() {\n    //write test here\n  });\n\n  test('keyIsPressed is false when no keys are pressed', function() {\n    //write test here\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Adding ARIA Labels to iframe Elements for Accessibility\nDESCRIPTION: This JS code demonstrates how to add informative aria-label attributes to iframe elements containing example images on the p5.js website, thereby improving screen reader accessibility. It is intended for use in scripts that modify DOM elements to include descriptive labels based on curated alt text. The code presumes the existence of iframe elements to enhance accessibility for users with visual impairments.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/project_wrapups/katiejliu_gsoc_2021.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst iframe = document.querySelector('iframe');\niframe.setAttribute('aria-label', 'Mustard yellow background');\n```\n\n----------------------------------------\n\nTITLE: Using @private Tag\nDESCRIPTION: This snippet shows the use of the `@private` tag. It is used to mark internal functions or variables that are not meant to be part of the public API. This particular example documents the `_start` method, which is called by the library to call `preload()`, `setup()`, and `draw()`. The `@private` tag ensures that these methods will not be included in the reference documentation.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ja/contributing_to_the_p5.js_reference.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * _start calls preload() setup() and draw()\n *\n * @method _start\n * @private\n */\np5.prototype._start = function () {\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: This command installs all dependencies required for the p5.js project, including those needed for unit testing.  Dependencies are installed using `npm ci`, ensuring consistent builds.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/sk/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ npm ci\n```\n\n----------------------------------------\n\nTITLE: Best Practices -  Multiple Screenshots - JavaScript\nDESCRIPTION: This JavaScript snippet showcases creating multiple screenshots within a single visual test for p5.js.  It uses the `screenshot()` function to capture images at different stages of the sketch, showcasing stroke weight variations.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/unit_testing.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nvisualTest('stroke weight variations', function(p5, screenshot) {\n  p5.createCanvas(50, 50);\n  \n  // Test thin stroke\n  p5.background(200);\n  p5.stroke(0);\n  p5.strokeWeight(1);\n  p5.line(10, 25, 40, 25);\n  screenshot(); // Screenshot with thin lines\n  \n  // Test thick stroke\n  p5.background(200);\n  p5.strokeWeight(5);\n  p5.line(10, 25, 40, 25);\n  screenshot(); // Screenshot with thick lines\n});\n```\n\n----------------------------------------\n\nTITLE: Error Detection with Regex Matching in browser_errors.js - JavaScript\nDESCRIPTION: This code snippet uses regular expressions to detect and classify browser errors in p5.js.  It matches error messages against a prebuilt lookup table of template strings with placeholders.  The regex sequences help extract relevant details from the error message.  The implementation details are available in the linked GitHub source code.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/project_wrapups/akshaypadte_gsoc_2020.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nhttps://github.com/processing/p5.js/blob/b52226962eebf9f58f70eed68c4ce32661677d23/src/core/friendly_errors/browser_errors.js\n```\n\n----------------------------------------\n\nTITLE: Extending p5.prototype with createImg() to add DOM image element\nDESCRIPTION: This snippet demonstrates how to extend the p5.js core by adding a custom method 'createImg' to p5.prototype, enabling users to create and add an HTMLImageElement to the DOM within their sketch, similar to existing p5 functions like createCanvas(). It depends on internal DOM helper functions such as addElement().\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/creating_libraries.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\np5.prototype.createImg = function (src) {\n    const elt = document.createElement('img');\n    //const elt = new Image; // Alternative shorter syntax.\n\n    elt.src = src;\n    return addElement(elt, this);\n};\n```\n\n----------------------------------------\n\nTITLE: Calling p5._validateParameters to Trigger Parameter Validation in JavaScript\nDESCRIPTION: A minimal example illustrating the invocation of `p5._validateParameters()` for a specified method by passing its name and the actual arguments object. This call prompts the Friendly Error System to validate parameters based on documented specs, producing appropriate friendly error messages if discrepancies are found. This function acts as the error message generator for parameter-related issues.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/how-to-add-friendly-error-messages.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\np5._validateParameters('circle', arguments);\n```\n\n----------------------------------------\n\nTITLE: Wrapping Console Methods for Enhanced Error Handling\nDESCRIPTION: Example showing how to wrap window.console methods with custom functions to potentially provide better-formatted error messages. This is shown as a future implementation possibility for FES.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ko/friendly_error_system.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// 이 코드 조각은 window.console 메소드를 그 기능을 수정하는 새 함수로 감싼다.\n// 이것은 현재 구현되어 있지 않지만, 더 잘 형식을 갖춘 오류 메시지를 제공할 수 있을 것이다.\nconst original = window.console;\nconst original_functions  = {\n  log: original.log,\n  warn:  original.warn,\n  error: original.error\n}\n\n[\"log\", \"warn\", \"error\"].forEach(function(func){\nwindow.console[func] = function(msg) {\n// 래퍼 함수에서 잡아낸 'msg'로 무엇인가 처리한 다음 원래 함수를 호출하라.\noriginal_functions[func].apply(original, arguments)\n};\n});\n```\n\n----------------------------------------\n\nTITLE: Multiple p5.js JSDoc @example Blocks\nDESCRIPTION: Illustrates how to include multiple distinct code examples for a single documented feature. Each example is contained within its own `<div><code>...</code></div>` block, separated by a blank line within the JSDoc comment.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/contributing_to_the_p5js_reference.md#_snippet_1\n\nLANGUAGE: JSDoc\nCODE:\n```\n* @example\n* <div>\n* <code>\n* arc(50, 50, 80, 80, 0, PI + QUARTER_PI, OPEN);\n* describe('An ellipse created using an arc with its top right open.');\n* </code>\n* </div>\n*\n* <div>\n* <code>\n* arc(50, 50, 80, 80, 0, PI, OPEN);\n* describe('The bottom half of an ellipse created using arc.');\n* </code>\n* </div>\n```\n\n----------------------------------------\n\nTITLE: Setting GitHub Token Environment Variable for Release - Shell\nDESCRIPTION: This command exports the GitHub access token as an environment variable, a required step before automating the release process with Grunt. The user must obtain a valid personal access token from GitHub and replace \\<token goes here\\> accordingly. This setup ensures authentication for release publishing; it is typically executed once per system.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/project_wrapups/sakshamsaxena_gsoc_2017.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport GITHUB_TOKEN=<token goes here>\n```\n\n----------------------------------------\n\nTITLE: Basic p5.js Example Documentation\nDESCRIPTION: Demonstrates the basic structure for embedding a runnable p5.js code example within a JSDoc comment using the `@example` tag, enclosed in `<div>` and `<code>` HTML tags. This specific example shows drawing colored rectangles and using the `red()` function.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/es/contributing_to_the_p5js_reference.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n * @example\n * <div>\n * <code>\n * const c = color(255, 204, 0);\n * fill(c);\n * rect(15, 20, 35, 60);\n * // Sets 'redValue' to 255.\n * const redValue = red(c);\n * fill(redValue, 0, 0);\n * rect(50, 20, 35, 60);\n * describe(\n *   'Two rectangles with black edges. The rectangle on the left is yellow and the one on the right is red.'\n * );\n * </code>\n * </div>\n```\n\n----------------------------------------\n\nTITLE: Handling File Load Errors with _friendlyFileLoadError\nDESCRIPTION: `_friendlyFileLoadError()` is called by `loadX()` functions when an error occurs during file loading. It generates a friendly error message, using the `fes.fileLoadError.*` keys. The function also checks for files that are too large to load. It supports error messages for image, XML, table, text, json and font files.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ja/fes_reference_dev_notes.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n_friendlyFileLoadError(errorType, filePath)\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/// missing font file\nlet myFont;\nfunction preload() {\n  myFont = loadFont('assets/OpenSans-Regular.ttf');\n};\nfunction setup() {\n  fill('#ED225D');\n  textFont(myFont);\n  textSize(36);\n  text('p5*js', 10, 50);\n};\nfunction draw() {};\n```\n\n----------------------------------------\n\nTITLE: Avoiding Duplicate Class Members\nDESCRIPTION: This snippet recommends avoiding duplicate class members. Duplicate member declarations often indicate a bug and can lead to unexpected behavior as the last declaration will be used.  The example provides 'Bad' and 'Good' examples.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/documentation_style_guide.md#_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\n// Bad.\nclass Mover {\n  // ...\n\n  update() {\n    this.x += this.xspeed;\n    this.y += this.yspeed;\n  }\n\n  update() {\n    this.x = 0;\n    this.y = 0;\n  }\n}\n\n// Good.\nclass Mover {\n  // ...\n  \n  update() {\n    this.x += this.xspeed;\n    this.y += this.yspeed;\n  }\n\n  reset() {\n    this.x = 0;\n    this.y = 0;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Looping Constructs and Array Iteration Best Practices\nDESCRIPTION: Guidelines illustrating proper use of 'for' loops over fixed counts and avoiding 'while' or 'do-while' where unnecessary. Also, promotes using array methods like 'forEach' and creating arrays via literals, enhancing code clarity and avoiding traditional 'for' loops for array traversal.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/documentation_style_guide.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Using 'for' loop for fixed iterations.\nlet numPetals = 7;\nfor (let i = 0; i < numPetals; i += 1) {\n  ellipse(0, 0, 20, 80);\n  rotate(PI / numPetals);\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Avoid 'while' loop unless necessary.\n// Using 'for' loop instead.\nlet i = 0;\nwhile (i < numPetals) {\n  ellipse(0, 0, 20, 80);\n  rotate(PI / numPetals);\n  i += 1;\n}\n\n// Using array methods for iteration.\nlet diameters = [50, 40, 30, 20, 10];\ndiameters.forEach((d) => circle(0, 0, d));\n```\n\n----------------------------------------\n\nTITLE: Whitespace Indentation in p5.js JavaScript\nDESCRIPTION: Guidelines for proper indentation in p5.js code. Blocks should be indented with 2 spaces, not 1 or 4 spaces, to maintain consistency and readability.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/documentation_style_guide.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Bad.\nfunction setup() {\n∙∙∙∙createCanvas(400, 400);\n}\n\n// Bad.\nfunction setup() {\n∙createCanvas(400, 400);\n}\n\n// Good.\nfunction setup() {\n∙∙createCanvas(400, 400);\n}\n```\n\n----------------------------------------\n\nTITLE: Using p5.js textOutput with Basic Shapes - JavaScript\nDESCRIPTION: This snippet demonstrates a basic p5.js sketch that draws an ellipse and a rectangle on the canvas. It includes a call to `textOutput()` within the `draw` loop to enable library-generated screen reader-accessible text descriptions of the drawn shapes. This function facilitates basic accessibility for dynamic sketches.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/web_accessibility.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction setup() {\n  createCanvas(400, 400);\n}\n\nfunction draw() {\n  background(\"#ccccff\");\n  textOutput();\n  fill(\"orange\");\n  ellipse(100, 100, 50);\n  fill(\"fuchsia\");\n  rect(300, 300, 50, 50);\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Table Structure for GitHub Contributors in p5.js\nDESCRIPTION: HTML markup displaying a grid of p5.js project contributors with their avatars, names, and contribution types. The table uses a responsive layout with cells taking up approximately 16.66% width each, organized in multiple rows.\nSOURCE: https://github.com/processing/p5.js/blob/main/README.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\" valign=\"top\" width=\"16.66%\"><a href=\"https://github.com/OleksiiBulba\"><img src=\"https://avatars.githubusercontent.com/u/41155673?v=4?s=120\" width=\"120px;\" alt=\"Oleksii Bulba\"/><br /><sub><b>Oleksii Bulba</b></sub></a><br /><a href=\"https://github.com/processing/p5.js/commits?author=OleksiiBulba\" title=\"Code\">💻</a></td>\n```\n\n----------------------------------------\n\nTITLE: Visual Test - p5.js\nDESCRIPTION: This JavaScript snippet defines a visual test case for p5.js. The test creates a canvas, sets up a simple 2D drawing (a red rectangle), and captures a screenshot for visual comparison.  It takes a `p5` instance and a `screenshot` function as arguments.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/unit_testing.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nvisualTest('2D objects maintain correct size', function(p5, screenshot) {\n  p5.createCanvas(50, 50, p5.WEBGL);\n  p5.noStroke();\n  p5.fill('red');\n  p5.rectMode(p5.CENTER);\n  p5.rect(0, 0, p5.width/2, p5.height/2);\n  screenshot();\n});\n```\n\n----------------------------------------\n\nTITLE: Key parameters for Visual Testing\nDESCRIPTION: Defines the parameters used by the algorithm for visual testing in p5.js. `MIN_CLUSTER_SIZE` specifies the minimum size (in pixels) of a difference cluster for it to be considered significant. `MAX_TOTAL_DIFF_PIXELS` specifies the maximum number of individual pixels that are allowed to be different before a test fails. The main purpose is to handle rendering variations and prevent tests from failing incorrectly.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/unit_testing.md#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nconst MIN_CLUSTER_SIZE = 4;       // Minimum significant cluster size\nconst MAX_TOTAL_DIFF_PIXELS = 40; // Maximum allowed significant differences\n```\n\n----------------------------------------\n\nTITLE: Running ESLint for Code Style Checking\nDESCRIPTION: Command to check for code style errors using ESLint, which helps maintain consistent code quality.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run lint\n```\n\n----------------------------------------\n\nTITLE: Declaring Functions in JavaScript\nDESCRIPTION: This snippet recommends using function declarations (`function foo() { ... }`) instead of named function expressions (e.g. `let foo = function() { ... }`) because they are considered easier to understand for beginners. The example also provides 'Bad' and 'Good' examples.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/documentation_style_guide.md#_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\n// Bad.\nlet foo = function () {\n  // ...\n};\n\n// Bad.\nlet foo = () => {\n  // ...\n};\n\n// Good.\nfunction foo() {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating File Loading Error in p5.js\nDESCRIPTION: Example showing how FES provides friendly error messages when a font file fails to load, helping users identify potential issues with file paths or server configuration.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ko/friendly_error_system.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/// 폰트 파일 누락\nlet myFont;\nfunction preload() {\n  myFont = loadFont('assets/OpenSans-Regular.ttf');\n};\nfunction setup() {\n  fill('#ED225D');\n  textFont(myFont);\n  textSize(36);\n  text('p5*js', 10, 50);\n};\nfunction draw() {};\n/// 콘솔에 다음의 메시지가 생성됩니다.:\n/// > p5.js: 폰트를 로드하는 데 문제가 있는 것 같습니다. 파일 경로 [assets / OpenSans-Regular.ttf]가 올바른지, 폰트를 온라인 호스팅하는지, 또는 로컬 서버가 실행 중인지 확인하십시오.\n```\n\n----------------------------------------\n\nTITLE: Building p5.js Library Without Running Tests\nDESCRIPTION: Command to build the p5.js library files (p5.js and p5.min.js) without running the test suite, which is faster when you just need to generate the library.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/hi/contributor_guidelines.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Performing Mutable Vector Normalization in p5.js\nDESCRIPTION: This snippet demonstrates the mutable approach to vector normalization in p5.js. The `normalize()` method is called directly on the `p5.Vector` instance (`v`), modifying its components (x, y, z) in place to represent a unit vector. The original vector's value is altered, as shown by the subsequent `print()` call.\nSOURCE: https://github.com/processing/p5.js/blob/main/src/math/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet v = new p5.Vector(10, 0, 0);\nv.normalize();\nprint(v); // [1, 0, 0]\n```\n\n----------------------------------------\n\nTITLE: JavaScript Friendly Error Display\nDESCRIPTION: Demonstrates how to use `p5._friendlyError()` to output a generated friendly error message to the console. The message is obtained from the `translator` function using a specific key and a translation object. This method is central to displaying FES messages within p5.js.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ja/friendly_error_system.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\np5._friendlyError(\n  translator('fes.globalErrors.type.notfunc', translationObj)\n);\n```\n\n----------------------------------------\n\nTITLE: Extending p5.Element.prototype with html() method to set inner HTML\nDESCRIPTION: This snippet adds an 'html()' method to p5.Element.prototype, allowing users to set the innerHTML of an element directly. It enhances element manipulation capabilities and depends on the p5.Element class. The method updates the existing element's content in place for more dynamic interactions.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/creating_libraries.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\np5.Element.prototype.html = function (html) {\n    this.elt.innerHTML = html;\n    //this.elt.textContent = html; // Safer alternative to innerHTML.\n};\n```\n\n----------------------------------------\n\nTITLE: Reading Code with fesCodeReader\nDESCRIPTION: `fesCodeReader()` checks if p5.js constants or functions are used outside of `setup()` or `draw()`, and if p5.js reserved constants or functions are redefined. It generates friendly error messages using the `fes.sketchReaderErrors.reservedConst` and `fes.sketchReaderErrors.reservedFunc` error types.  This function is executed when the `load` event fires.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ja/fes_reference_dev_notes.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction setup() {\n  // PI は p5.js の予約定数です\n  let PI = 100;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction setup() {\n  // text は p5.js の予約関数です\n  let text = 100;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Properties with Variables\nDESCRIPTION: This code shows how to use bracket notation to access object properties when the property name is stored in a variable. This allows for dynamic property access. The example defines a function `getProp` to demonstrate this.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/documentation_style_guide.md#_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nlet turtle = {\n  name: 'Leonardo',\n  color: 'dodgerblue',\n  weapon: '🗡️',\n  food: '🍕',\n};\n\nfunction getProp(prop) {\n  return turtle[prop];\n}\n\nlet turtleName = getProp('name');\n```\n\n----------------------------------------\n\nTITLE: Git Workflow Commands for Contributing to p5.js\nDESCRIPTION: Series of Git commands for checking status of changes, viewing detailed differences, staging all changes, and committing with a descriptive message.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/hi/contributor_guidelines.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit status\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit diff\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m \"[your_commit_message]\"\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m \"Add documentation example to circle() function\"\n```\n\n----------------------------------------\n\nTITLE: Using Array Methods for Iteration in p5.js JavaScript\nDESCRIPTION: Guidelines for using array methods instead of for loops when iterating over arrays. Methods like forEach(), map(), and filter() are more expressive and reduce the chance of off-by-one errors.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/documentation_style_guide.md#_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nlet diameters = [50, 40, 30, 20, 10];\n\n// Bad.\nfor (let i = 0; i < diameters.length; i += 1) {\n  circle(0, 0, diameters[i]);\n}\n\n// Bad.\nfor (let d of diameters) {\n  circle(0, 0, d);\n}\n\n// Good.\ndiameters.forEach((d) => circle(0, 0, d));\n```\n\n----------------------------------------\n\nTITLE: Non-Rendering and Non-Testing p5.js JSDoc Example\nDESCRIPTION: Demonstrates using both `norender` and `notest` classes within the `<div>` tag. This prevents the example code (e.g., one using `saveCanvas`) from being automatically executed on the page and also excludes it from automated testing suites.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/contributing_to_the_p5js_reference.md#_snippet_3\n\nLANGUAGE: JSDoc\nCODE:\n```\n* @example\n* <div class='norender notest'><code>\n* function setup() {\n*   let c = createCanvas(100, 100);\n*   saveCanvas(c, 'myCanvas', 'jpg');\n* }\n* </code></div>\n```\n\n----------------------------------------\n\nTITLE: Building p5.js with npm\nDESCRIPTION: This snippet demonstrates how to build the p5.js library using npm.  It executes the build process, generating the `p5.js` and `p5.min.js` files inside the `lib/` directory. This is useful if you simply want to build the project without running tests.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ja/contributor_guidelines.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Monitoring Errors with fesErrorMonitor\nDESCRIPTION: `fesErrorMonitor()` handles various browser errors and generates global error messages. It generates friendly error messages, internal library error messages, stack trace messages, and spelling check messages. It can be triggered by error events, unhandled rejections, or manual calls within `catch` blocks.  The function takes an error event as a parameter.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/fes_reference_dev_notes.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfesErrorMonitor(event)\n```\n\n----------------------------------------\n\nTITLE: Avoiding Side Effects in toString\nDESCRIPTION: This snippet suggests that custom `toString()` methods should not have side effects. Side effects in `toString()` can lead to unexpected behavior. The example provides 'Bad' and 'Good' examples.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/documentation_style_guide.md#_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\n// Bad.\nclass Mover {\n  // ...\n\n  toString() {\n    this.x += 1;\n    return `Mover at (${this.x}, ${this.y})`;\n  }\n}\n\n// Good.\nclass Mover {\n  // ...\n\n  toString() {\n    return `Mover at (${this.x}, ${this.y})`;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Lint Task for p5.js\nDESCRIPTION: Registers the 'lint' task that runs source code linting and sample code linting tasks.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ja/steward_guidelines.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ngrunt.registerTask('lint', ['lint:source', 'lint:samples']);\n```\n\n----------------------------------------\n\nTITLE: MochaTest Task for Node.js Tests\nDESCRIPTION: References the mochaTest task that runs tests in a Node.js environment, intended for a small subset of library functionality that doesn't require a browser.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ja/steward_guidelines.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nmochaTest\n```\n\n----------------------------------------\n\nTITLE: Adding Parameter to p5.prototype Method (JavaScript)\nDESCRIPTION: Modifies the `loadCSV` function added to `p5.prototype` to accept a `filename` argument. This allows the function to be more flexible and operate on different files specified by the caller. The console log message is updated to include the provided filename using template literals.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/creating_libraries.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\np5.prototype.loadCSV = function (filename) {\n  console.log(`I will load the CSV file ${filename} soon!`);\n};\n```\n\n----------------------------------------\n\nTITLE: Unit Testing p5.js Friendly Error Messages\nDESCRIPTION: This snippet demonstrates how to write a unit test for a p5.js Friendly Error message, specifically for parameter validation of the `color()` function. It uses `assert.validationError()` to check if an error is thrown when an incorrect type is passed as a parameter.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/how-to-add-friendly-error-messages.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nsuite('validateParameters: multi-format', function() {\n\ttest('color(): optional parameter, incorrect type', function() {\n\t\tassert.validationError(function() {\n\t\t\tp5._validateParameters('color', [0, 0, 0, 'A']);\n\t\t});\n\t});\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Switching Git Branch - Bash\nDESCRIPTION: Creates a new branch with the specified `branch_name` and switches the working directory to it. This allows developers to work on changes in isolation from the main branch.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/contributor_guidelines.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\ngit checkout -b branch_name\n```\n\n----------------------------------------\n\nTITLE: JavaScript: Calling translator for File Load Error\nDESCRIPTION: Demonstrates how to call the `translator` function in p5.js to generate a file load error message with a dynamic suggestion. The `translator` function is called with the key `fes.fileLoadError.image` and an object containing the suggestion value. This dynamically generates a user-friendly error message about file loading issues.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/friendly_error_system.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\ntranslator('fes.fileLoadError.image', { suggestion });\n```\n\n----------------------------------------\n\nTITLE: Enforcing Space at Start of Single Line Comments (JavaScript)\nDESCRIPTION: This JavaScript snippet compares correct and incorrect placement of a space after the '//' in single-line comments as per the p5.js documentation style guide. Ensures greater readability and consistency. Dependencies: none. The snippet contains only declarations and comments for style demonstration.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/documentation_style_guide.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Bad.\n//Remember this.\nlet magicWord = 'Please';\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Good.\n// Remember this.\nlet magicWord = 'Please';\n```\n\n----------------------------------------\n\nTITLE: Adding contributors using @all-contributors bot\nDESCRIPTION: This snippet demonstrates how to use the @all-contributors bot to add new contributors to the README.md file. The command adds a new contributor to the project's contributor list using their GitHub handle and specifies their contribution type. This ensures that all contributors are properly credited for their work.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/es/steward_guidelines.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n`@all-contributors` `please` `add` `@[GitHub` `handle]` `for` `[contribution` `type]`\n```\n\n----------------------------------------\n\nTITLE: Test Setup for p5.js Instance Mode for Unit Tests\nDESCRIPTION: This setup code initializes a p5.js instance in a testing environment and assigns it to the variable 'myp5'. It ensures that 'myp5' refers to a valid p5 object before executing tests. This setup is necessary to access p5.js variables and functions within tests using instance mode.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/unit_testing.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet myp5;\n\nsetup(function(done) {\n  new p5(function(p) {\n    p.setup = function() {\n      myp5 = p;\n      done();\n    };\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Friendly Errors with _friendlyError\nDESCRIPTION: `_friendlyError()` creates and outputs friendly error messages. It can be called from any p5 function to provide informative error messages. It relies on several internal functions for error handling including `_fesErrorMonitor` and parameter validation. The error messages are then reported via `_report`.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ja/fes_reference_dev_notes.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n_friendlyError(message)\n```\n\nLANGUAGE: javascript\nCODE:\n```\n_friendlyError(message, func)\n```\n\nLANGUAGE: javascript\nCODE:\n```\n_friendlyError(message, func, color)\n```\n\n----------------------------------------\n\nTITLE: Create a New Git Branch - Bash\nDESCRIPTION: This git command creates and checks out a new branch from the main branch. The developer should provide a descriptive branch name to demarcate the feature or bug fix being worked on. This workflow supports organized code changes and easy collaboration.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/es/contributor_guidelines.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b [branch_name]\n```\n\n----------------------------------------\n\nTITLE: Registering method for specific p5 lifecycle event with registerMethod()\nDESCRIPTION: The code registers a custom cleanup function 'doRemoveStuff' to be called during the 'remove' event of p5.js lifecycle using registerMethod(), allowing proper cleanup when the sketch is removed. Ensure that the function is defined prior to registration.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/creating_libraries.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\np5.prototype.doRemoveStuff = function () { \n    // 清理工作\n};\np5.prototype.registerMethod('remove', p5.prototype.doRemoveStuff);\n```\n\n----------------------------------------\n\nTITLE: Loading Assets in p5.js\nDESCRIPTION: This snippet emphasizes the importance of always loading assets from a folder named \"assets\". This promotes good project organization and is a requirement for assets to load correctly on the p5.js website.  The example provides 'Bad' and 'Good' examples.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/documentation_style_guide.md#_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\nlet img;\n\n// Bad.\nfunction preload() {\n  img = loadImage('moonwalk.jpg');\n}\n\n// Good.\nfunction preload() {\n  img = loadImage('assets/moonwalk.jpg');\n}\n```\n\n----------------------------------------\n\nTITLE: Basic p5.js Sketch for Drawing Circles on Mouse Movement\nDESCRIPTION: This code initializes a p5.js sketch that creates a 400x400 canvas with a white background and draws a circle following the mouse cursor at each frame. It demonstrates core p5.js functions setup() and draw() for interactive graphics.\nSOURCE: https://github.com/processing/p5.js/blob/main/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction setup() {\n  createCanvas(400, 400);\n  background(255);\n}\n\nfunction draw() {\n  circle(mouseX, mouseY, 80);\n}\n```\n\n----------------------------------------\n\nTITLE: Running YUI Documentation Server with Grunt\nDESCRIPTION: This task runs the documentation and library builds, then spins up a web server to serve a local version of the reference page.  It monitors source code changes and rebuilds the documentation and library accordingly. This is useful for previewing inline documentation changes before pushing them to the main website.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/steward_guidelines.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt yui:dev\n```\n\n----------------------------------------\n\nTITLE: Check Node.js Version - Bash\nDESCRIPTION: This command checks the installed version of Node.js on the local system. It ensures that Node.js is installed, and meets the minimum version requirement (at least version 18) necessary for working with the p5.js development environment.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/es/contributor_guidelines.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnode -v\n```\n\n----------------------------------------\n\nTITLE: Variable Scope Error Example p5.js\nDESCRIPTION: Demonstrates a scope error. The variable `b` is not defined within the scope of the `draw()` function, which will cause an error message. FES would give a message indicating where the error occurred and how to fix it. Dependencies: p5.js.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/fes_contribution_guide.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction setup() {\n  let b = 1;\n}\nfunction draw() {\n  b += 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Arrays in JavaScript\nDESCRIPTION: This snippet highlights the preferred method for array creation using literal syntax (`[]`) instead of the `new Array()` constructor for better readability and potentially more efficient execution. The example also provides a 'Bad' example.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/documentation_style_guide.md#_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\n// Bad.\nlet images = new Array();\n\n// Good.\nlet images = [];\n```\n\n----------------------------------------\n\nTITLE: Copying Arrays\nDESCRIPTION: This snippet advocates for using the `slice()` method to create a copy of an array instead of manually iterating to copy elements. The `slice()` method provides a concise and efficient approach. The example also provides a 'Bad' example.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/documentation_style_guide.md#_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\n// Bad.\nlet numbersCopy = [];\n\nfor (let i = 0; i < numbers.length; i += 1) {\n  numbersCopy[i] = numbers[i];\n}\n\n// Good.\nlet numbersCopy = numbers.slice();\n```\n\n----------------------------------------\n\nTITLE: Monitoring Error Messages p5.js\nDESCRIPTION: The `fesErrorMonitor()` function monitors browser error messages to provide guidance.  It uses `translator()` to generate and print messages using `fes.globalErrors.*` keys. Dependencies include `translator()` function and  `translations/en/translation.json`.  It is triggered by `error` and `unhandledrejection` events at `window` or called within a catch block. Expected input is an error event.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/fes_contribution_guide.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ntry { someCode(); } catch(err) { p5._fesErrorMonitor(err); }\n```\n\n----------------------------------------\n\nTITLE: Registering Default Task in Grunt Build - JavaScript\nDESCRIPTION: This snippet registers the default task for the Grunt build system. When running `grunt` or the npm test script, the 'default' task executes the linting and testing procedures sequentially. It ensures code quality and correctness by automating these crucial steps in the build workflow.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/hi/steward_guidelines.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ngrunt.registerTask('default', ['lint', 'test']);\n```\n\n----------------------------------------\n\nTITLE: Run p5.js tests\nDESCRIPTION: This command builds p5.js from scratch and runs all unit tests to ensure the code is functioning correctly.  It helps to verify that changes haven't introduced any regressions. It's a good practice to run tests frequently, especially when modifying the source code.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/contributor_guidelines.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Cloning p5.js Repository Using Git CLI\nDESCRIPTION: This snippet demonstrates cloning the p5.js repository from a given Git URL using the command-line interface (CLI).  It assumes that Git is installed and provides the necessary command to download a local copy of the repository. The `[git_url]` is replaced with the actual URL of the repository.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ja/contributor_guidelines.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ngit clone [git_url]\n```\n\n----------------------------------------\n\nTITLE: Declaring Private Methods JavaScript\nDESCRIPTION: This snippet demonstrates the use of the `@private` tag in JSDoc to mark a method as private. The `@private` tag ensures that the method is not rendered in the website's reference documentation. This is used for internal library functions. This example marks the `_start` method as private.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ko/contributing_to_the_p5js_reference.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * _start calls preload() setup() and draw()\n *\n * @method _start\n * @private\n */\np5.prototype._start = function () {\n\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests with npm\nDESCRIPTION: This snippet executes the unit tests for the p5.js project using npm. This command runs all tests in the test suite to ensure that the changes made haven't broken any existing functionality. This is essential to verify code integrity before contributing changes.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ja/contributor_guidelines.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Avoiding Function Chaining\nDESCRIPTION: This snippet recommends avoiding function chaining in favor of individual function calls to accommodate users who may be less familiar with function chaining concepts. The example provides 'Bad' and 'Good' examples.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/documentation_style_guide.md#_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\n// Bad.\nfill(0)\n  .strokeWeight(6)\n  .textSize(20);\n\n// Bad.\nfill(0).strokeWeight(6).textSize(20);\n\n// Good.\nfill(0);\nstrokeWeight(6);\ntextSize(20);\n```\n\n----------------------------------------\n\nTITLE: Registering the 'test' Task with Grunt\nDESCRIPTION: This task registers a task named 'test' with Grunt. When executed, it runs a sequence of other Grunt tasks in the specified order: 'build', 'connect:server', 'mochaChrome', 'mochaTest', and 'nyc:report'. This is the main task for running all tests.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/steward_guidelines.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.registerTask('test', [\n  'build',\n  'connect:server',\n  'mochaChrome',\n  'mochaTest',\n  'nyc:report'\n]);\n```\n\n----------------------------------------\n\nTITLE: Constant Parameter Documentation Example\nDESCRIPTION: This snippet illustrates how to document a parameter that accepts constant values defined in `constants.js`. The parameter type is specified as `{Constant}`, and the valid values are listed in the comment after the `either` keyword. This clearly indicates the expected input values for the parameter.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/es/contributing_to_the_p5js_reference.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n@param {Constant} horizAlign horizontal alignment, either LEFT, CENTER, or RIGHT\n```\n\n----------------------------------------\n\nTITLE: Staging Changes with Git\nDESCRIPTION: This command stages all modified files, preparing them to be included in the next commit.  The `git add .` command stages all tracked files. This step is important to create a commit with specific changes.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ja/contributor_guidelines.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\ngit add .\n```\n\n----------------------------------------\n\nTITLE: JavaScript Translator Usage for FES\nDESCRIPTION: Shows how the `translator()` function is called within the FES to generate an error message with a dynamic suggestion. It uses the `fes.fileLoadError.image` key and a pre-generated `suggestion` value. This call results in a user-friendly error message with context-specific advice.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ja/friendly_error_system.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\ntranslator('fes.fileLoadError.image', { suggestion });\n```\n\n----------------------------------------\n\nTITLE: Example Assertion of 'keyIsPressed' Being a Boolean\nDESCRIPTION: This assertion checks whether 'myp5.keyIsPressed' is of boolean type using Chai's 'assert.isBoolean()' function. It verifies the correctness of the variable's type during testing, which is essential for ensuring expected behavior when handling key press states in p5.js.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/unit_testing.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nassert.isBoolean(myp5.keyIsPressed);\n```\n\n----------------------------------------\n\nTITLE: JavaScript Conditional Statements with Proper Bracing and Formatting\nDESCRIPTION: Examples demonstrating best practices for writing conditional statements in JavaScript with proper use of braces, line breaks, and positioning of 'else'. These snippets promote readability and maintainability by standardizing formatting and avoiding common pitfalls.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/documentation_style_guide.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Improved if statement with braces.\nif (mouseIsPressed === true) {\n  circle(mouseX, mouseY, 50);\n}\n\n// Single-line if statement recommended for short cases.\nif (mouseIsPressed === true) circle(mouseX, mouseY, 50);\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Proper placement of 'else' on the same line as '}':\nif (mouseIsPressed === true) {\n  thing1();\n  thing2();\n} else {\n  thing3();\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Avoid 'else' after 'return' in 'if' block.\nfunction mouseIsOnLeft() {\n  if (mouseX < width * 0.5) {\n    return true;\n  }\n  return false;\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Long conditions split across multiple lines with logical operators starting new lines.\nif (\n  (number === 123 || letters === 'abc')\n  && mouseIsPressed === true\n  && keyIsPressed === true\n) {\n  doStuff();\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Avoid using logical '&&' directly as statement.\nif (refrigeratorIsRunning === true) {\n  goCatchIt();\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Long Conditions in p5.js JavaScript\nDESCRIPTION: Guidelines for formatting long conditions across multiple lines. Place each grouped condition on a new line with the logical operator at the beginning of the line for better readability.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/documentation_style_guide.md#_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\n// Bad.\nif ((number === 123 || letters === 'abc') && mouseIsPressed === true && keyIsPressed === true) {\n  doStuff();\n}\n\n// Good.\nif (\n  (number === 123 || letters === 'abc')\n  && mouseIsPressed === true\n  && keyIsPressed === true\n) {\n  doStuff();\n}\n```\n\n----------------------------------------\n\nTITLE: Skipping and Only Running Test Suites - JavaScript\nDESCRIPTION: This code snippet demonstrates how to skip specific test suites or run only a selected suite within a testing framework.  It utilizes `.skip` to prevent a suite from executing and `.only` to ensure only a specific suite runs.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/unit_testing.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// This test suite will not run\nsuite.skip('p5.prototype.yourFunction', function() {\n\n});\n\n// Only this test suite will be run, all other suites will be ignored\nsuite.only('p5.prototype.yourFunction', function() {\n\n});\n```\n\n----------------------------------------\n\nTITLE: Viewing Git Changes - Bash\nDESCRIPTION: Shows the differences between commits, or between the working tree and the index or a tree. Useful for reviewing specific line-by-line changes before staging or committing.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/contributor_guidelines.md#_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\ngit diff\n```\n\n----------------------------------------\n\nTITLE: JSON Example: ASCII Logo Translation\nDESCRIPTION: Shows an example of storing an ASCII logo within a JSON translation file for the p5.js FES.  The logo is represented as a string value assigned to the key \"logo\".  This demonstrates how to include multiline strings in the translation file.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/friendly_error_system.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n\"logo\": \"    _ \\n /\\\\| |/\\\\ \\n \\\\ ` ' /  \\n / , . \\\\  \\n \\\\/|_|\\\\/ \\n\\n\"\n```\n\n----------------------------------------\n\nTITLE: Non-Rendering p5.js JSDoc Example\nDESCRIPTION: Shows how to prevent a code example from being executed on the reference page by adding the `norender` class to the enclosing `<div>` tag. The code will be displayed but not run.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/contributing_to_the_p5js_reference.md#_snippet_2\n\nLANGUAGE: JSDoc\nCODE:\n```\n* @example\n* <div class=\"norender\">\n* <code>\n* arc(50, 50, 80, 80, 0, PI + QUARTER_PI, OPEN);\n* describe('ellipse created using arc with its top right open');\n* </code>\n* </div>\n```\n\n----------------------------------------\n\nTITLE: JSON Translation File with Interpolation\nDESCRIPTION: Demonstrates how to use i18next interpolation within a JSON translation file. The `{{who}}` placeholder is used to dynamically insert a variable value into the translated message.  This requires passing a value for 'who' to the translator function.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ja/friendly_error_system.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n\"greeting\": \"你好，{{who}}！\"\n```\n\n----------------------------------------\n\nTITLE: JSON Example: Interpolation in Translation\nDESCRIPTION: Demonstrates how to use interpolation in a JSON translation file with i18next for the p5.js FES.  The `{{who}}` placeholder is used to dynamically insert a value into the \"greeting\" message.  This allows for creating personalized or context-specific error messages.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/friendly_error_system.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n\"greeting\": \"Hello, {{who}}!\"\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to GitHub\nDESCRIPTION: Git command for pushing committed changes to your fork on GitHub, preparing for a pull request.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ git push\n```\n\n----------------------------------------\n\nTITLE: Attempting preload and the problem with preload\nDESCRIPTION: This snippet attempts to address the asynchronous nature of `loadCSV()` by calling it in the `preload()` function. It demonstrates the issue of the value still printing as `[]` and the limitation of `preload()` alone without more modifications.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/creating_libraries.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nlet myCSV;\n\nfunction preload(){\n  myCSV = loadCSV('data.csv');\n}\n\nfunction setup(){\n  createCanvas(400, 400);\n  print(myCSV); // Still prints []\n}\n```\n\n----------------------------------------\n\nTITLE: Non-Rendering p5.js Example Documentation\nDESCRIPTION: Shows how to embed a p5.js code example that should only be displayed as code and not executed in the reference page. This is achieved by adding the `norender` class to the containing `<div>` tag.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/es/contributing_to_the_p5js_reference.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n* @example\n* <div class=\"norender\">\n* <code>\n* arc(50, 50, 80, 80, 0, PI + QUARTER_PI, OPEN);\n* describe('ellipse created using arc with its top right open');\n* </code>\n* </div>\n```\n\n----------------------------------------\n\nTITLE: Avoiding Leading Commas\nDESCRIPTION: This snippet demonstrates the avoidance of leading commas in object literals. Leading commas can cause unexpected behavior and reduce code readability. This snippet provides a 'Bad' and 'Good' example.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/documentation_style_guide.md#_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\n// Bad.\nlet mathematician = {\n    firstName: 'Ada'\n  , lastName: 'Lovelace'\n};\n\n// Good.\nlet mathematician = {\n  firstName: 'Ada',\n  lastName: 'Lovelace',\n};\n```\n\n----------------------------------------\n\nTITLE: Cloning p5.js repository with Git\nDESCRIPTION: This code snippet demonstrates how to clone a forked p5.js repository from GitHub to a local machine using the Git command-line interface. It assumes Git is installed and configured. Replace `[git_url]` with the actual URL of your forked repository. The repository is downloaded to a directory named `p5.js` in the current working directory.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/es/contributor_guidelines.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit clone [git_url]\n```\n\n----------------------------------------\n\nTITLE: Run Test Suite for p5.js - Bash\nDESCRIPTION: This npm command executes the project's test suite to verify that existing functionality has not been broken by new code changes. Frequent testing during development helps maintain code quality and stability.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/es/contributor_guidelines.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Commit changes to Git\nDESCRIPTION: This command commits the staged changes to the Git repository with a descriptive message. The message should clearly explain the purpose of the changes, avoiding vague statements. Use the `-m` flag to provide the commit message directly in the command.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/contributor_guidelines.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m \"[your_commit_message]\"\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m \"Add documentation example to circle() function\"\n```\n\n----------------------------------------\n\nTITLE: Using Single Quotes for Strings in p5.js JavaScript\nDESCRIPTION: Guidelines for using single quotes for string literals. Single quotes are the preferred way to define strings in p5.js code, with template literals reserved for interpolation or multiline strings.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/documentation_style_guide.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// Bad.\nlet name = \"Hilma af Klint\";\n\n// Bad - template literals should contain interpolation or newlines.\nlet name = `Hilma af Klint`;\n\n// Good.\nlet name = 'Hilma af Klint';\n```\n\n----------------------------------------\n\nTITLE: Avoiding Increments and Decrements in p5.js JavaScript\nDESCRIPTION: Guidelines for avoiding unary increments (++) and decrements (--). These operators can cause silent errors due to automatic semicolon insertion, so explicit addition and subtraction are preferred.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/documentation_style_guide.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// Bad.\nlet num = 1;\nnum++;\n--num;\n\n// Good.\nlet num = 1;\nnum += 1;\nnum -= 1;\n```\n\n----------------------------------------\n\nTITLE: Executing p5.js Release Commands in Shell\nDESCRIPTION: Terminal commands to prepare and initiate a new p5.js release. This includes checking out the main branch, incrementing the version number according to semver standards, and pushing the changes to the remote repository.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/release_process.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ git checkout main\n$ npm version [major|minor|patch] # Choose the appropriate version tag\n$ git push origin main\n$ git push origin v1.4.2 # Replace the version number with the one just created above\n```\n\n----------------------------------------\n\nTITLE: Git Diff: View Detailed File Changes\nDESCRIPTION: This command displays the differences between the current working directory and the last commit. It shows the specific changes made within each file, enabling thorough review before committing.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/es/contributor_guidelines.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngit diff\n```\n\n----------------------------------------\n\nTITLE: Install Project Dependencies using npm - Bash\nDESCRIPTION: This command installs all the necessary dependencies for the p5.js project defined in the npm configuration. Using 'npm ci' ensures a clean, reproducible install based on the lockfile, which is essential for consistent development and testing environments.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/es/contributor_guidelines.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm ci\n```\n\n----------------------------------------\n\nTITLE: Registering the 'build' Task with Grunt\nDESCRIPTION: This task registers a task named 'build' with Grunt. It sequentially executes 'browserify', 'browserify:min', 'uglify', and 'browserify:test' tasks to build the p5.js library and prepare it for testing. The task combines and minifies the p5.js library.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/steward_guidelines.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.registerTask('build', [\n  'browserify',\n  'browserify:min',\n  'uglify',\n  'browserify:test'\n]);\n```\n\n----------------------------------------\n\nTITLE: Git Commit Example\nDESCRIPTION: This provides a concrete example of using the git commit command with a descriptive message that details the changes that have been made to the code.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/es/contributor_guidelines.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m \"Add documentation example to circle() function\"\n```\n\n----------------------------------------\n\nTITLE: Fixing Automatic Style Errors\nDESCRIPTION: Command to automatically fix certain code style errors detected by the linter.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run lint:fix\n```\n\n----------------------------------------\n\nTITLE: Fixing ESLint Errors\nDESCRIPTION: This command automatically fixes some of the syntax errors detected by ESLint. It's important to note that not all errors can be fixed automatically.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/sk/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ npm run lint:fix\n```\n\n----------------------------------------\n\nTITLE: Formatting the @param Tag in YUIDoc (JavaScript)\nDESCRIPTION: Illustrates the standard format for the `@param` tag in YUIDoc: `@param {type} name Description here.`. This defines the expected data type, the parameter name used in the function, and a textual description.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/contributing_to_the_p5js_reference.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n@param {type} name Description here.\n```\n\n----------------------------------------\n\nTITLE: Check Git status\nDESCRIPTION: This command displays the status of the working directory, showing any modified files.  It helps to verify that only the intended changes are staged for commit, preventing accidental inclusion of unwanted files.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/contributor_guidelines.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit status\n```\n\n----------------------------------------\n\nTITLE: Structuring a Unit Test Suite in JavaScript with Mocha\nDESCRIPTION: Example showing how to structure a test suite for p5.prototype.keyIsPressed with multiple test cases using Mocha's suite and test functions.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ja/unit_testing.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nsuite('p5.prototype.keyIsPressed', function() {\n  test('keyIsPressed is a boolean', function() {\n    // ここにテストを書きます\n  });\n\n  test('keyIsPressed is true on key press', function() {\n    // ここにテストを書きます\n  });\n\n  test('keyIsPressed is false when no keys are pressed', function() {\n    // ここにテストを書きます\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: checkForUserDefinedFunctions Example p5.js\nDESCRIPTION: An example demonstrating capitalization error detection within the `checkForUserDefinedFunctions()` function. This shows a function misspelling of preload `preLoad`. The FES would identify and provide a message. Dependencies: p5.js library.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/fes_contribution_guide.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nfunction preload() {\n  loadImage('myimage.png');\n}\n```\n\n----------------------------------------\n\nTITLE: Git Status: Check Modified Files\nDESCRIPTION: This command checks the status of the git repository, showing which files have been modified, staged, or untracked. It helps ensure you are committing the correct changes.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/es/contributor_guidelines.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngit status\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Grunt for Building\nDESCRIPTION: Command for installing Grunt, which is required to build the library from source code.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run grunt\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to Remote Fork Using Git CLI - bash\nDESCRIPTION: This snippet shows the Git command used to push a local branch to the origin remote repository. It is a prerequisite to publishing committed changes on GitHub and enabling pull request creation. The branch_name parameter should be replaced with the actual working branch name. The command includes the -u flag to set the upstream tracking reference for easier future pushes and pulls.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ko/contributor_guidelines.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit push -u origin [branch_name]\n```\n\n----------------------------------------\n\nTITLE: Building p5.js Library\nDESCRIPTION: This command builds the p5.js library without running tests, generating `p5.js` and `p5.min.js` in the `lib/` directory. These files can then be used for testing or other purposes.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/es/contributor_guidelines.md#_snippet_8\n\nLANGUAGE: npm\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Chainable Method Documentation Example\nDESCRIPTION: This example demonstrates how to document a method that returns the superclass object, indicating that it's chainable. Instead of using the `@return` tag, the `@chainable` tag is used to clearly convey this behavior.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/es/contributing_to_the_p5js_reference.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n@chainable\n```\n\n----------------------------------------\n\nTITLE: Adding Trailing Commas\nDESCRIPTION: This snippet demonstrates the use of trailing commas in object literals to improve code readability and facilitate easier editing. This snippet provides a 'Bad' and 'Good' example.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/documentation_style_guide.md#_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\n// Bad.\nlet artist = {\n  firstName: 'Lauren',\n  lastName: 'McCarthy'\n};\n\n// Good.\nlet artist = {\n  firstName: 'Lauren',\n  lastName: 'McCarthy',\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling FES p5.js\nDESCRIPTION: This code snippet disables the Friendly Error System (FES) in p5.js by setting `p5.disableFriendlyErrors = true;`. This is done to prevent FES functions from slowing down the process. It disables some FES features like argument checking while leaving others. Dependency: p5.js.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/fes_contribution_guide.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\np5.disableFriendlyErrors = true; // disables FES\nfunction setup() {\n  // Do setup stuff\n}\nfunction draw() {\n  // Do drawing stuff\n}\n```\n\n----------------------------------------\n\nTITLE: Avoiding Underscores in Variable Names in p5.js JavaScript\nDESCRIPTION: Guidelines for avoiding leading or trailing underscores in variable names. JavaScript doesn't have private properties, so using underscores to indicate privacy is misleading.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/documentation_style_guide.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// Bad.\nclass Spy {\n  constructor(secret) {\n    this._secret = secret;\n  }\n}\n\n// Good.\nclass Spy {\n  constructor(secret) {\n    this.secret = secret;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Descriptive Naming in p5.js JavaScript\nDESCRIPTION: Guidelines for creating descriptive function and variable names. Avoid single letter names and use descriptive identifiers that clearly convey the purpose.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/documentation_style_guide.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// Bad.\nfunction f(x, y) {\n  // ...\n}\n\n// Good.\nfunction vectorField(x, y) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Spacing Before Braces in p5.js JavaScript\nDESCRIPTION: Guidelines for placing spaces before leading braces in function declarations. One space should be placed before the leading brace to improve readability.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/documentation_style_guide.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Bad.\nfunction setup(){\n  createCanvas(400, 400);\n}\n\n// Good.\nfunction setup() {\n  createCanvas(400, 400);\n}\n```\n\n----------------------------------------\n\nTITLE: Running npm Tests - Bash\nDESCRIPTION: Executes the 'test' script defined in the project's package.json file. This typically builds the library and runs all unit tests to verify that changes haven't introduced regressions.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/contributor_guidelines.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Avoiding Selection Operators in Place of Conditionals in p5.js JavaScript\nDESCRIPTION: Guidelines for using explicit conditionals instead of selection operators. Explicit if statements are clearer and more readable, especially for beginners.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/documentation_style_guide.md#_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n// Bad.\nrefrigeratorIsRunning && goCatchIt();\n\n// Good.\nif (refrigeratorIsRunning === true) {\n  goCatchIt();\n}\n```\n\n----------------------------------------\n\nTITLE: Basic p5.js Sketch Structure\nDESCRIPTION: Illustrates the fundamental structure of a p5.js sketch, defining the `setup` function (which runs once at the start) and the `draw` function (which runs repeatedly).\nSOURCE: https://github.com/processing/p5.js/blob/main/test/unit/assets/many_lines.txt#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction setup() {\n  // code here runs once\n  createCanvas(400, 400);\n}\n\nfunction draw() {\n  // code here runs repeatedly\n  background(220);\n}\n```\n\n----------------------------------------\n\nTITLE: Watch Tasks for Automated Rebuilding\nDESCRIPTION: Defines watch tasks that monitor file changes and automatically rebuild the library and/or documentation. Different variants are available depending on what needs to be rebuilt.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ja/steward_guidelines.md#_snippet_9\n\nLANGUAGE: js\nCODE:\n```\ngrunt watch\ngrunt watch:main\ngrunt watch:quick\n```\n\n----------------------------------------\n\nTITLE: Ordering Default Parameters\nDESCRIPTION: This snippet specifies the correct order of parameters in a function, placing default parameters last. This ensures that optional arguments are handled correctly. The example also provides a 'Bad' and 'Good' example.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/documentation_style_guide.md#_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\n// Bad.\nfunction drawSpiral(angle = 90, length) {\n  // ...\n}\n\n// Good.\nfunction drawSpiral(length, angle = 90) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: CamelCase for Objects, Functions, and Instances in p5.js JavaScript\nDESCRIPTION: Guidelines for naming objects, functions, and instances using camelCase. This convention improves code readability and maintains consistency.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/documentation_style_guide.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// Bad.\nlet OBJEcttsssss = {};\n\n// Bad.\nlet this_is_my_object = {};\n\n// Good.\nlet thisIsMyObject = {};\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Test Suite Using .only\nDESCRIPTION: This snippet demonstrates how to run only a specific test suite using `.only`. This allows for focused testing of a subset of tests, helpful for debugging or developing specific features.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/unit_testing.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nsuite.only('color/p5.ColorConversion', function() {\n```\n\n----------------------------------------\n\nTITLE: Running Release Process Shell\nDESCRIPTION: This command initiates the release process for the p5.js project. It leverages npm's run scripts to execute the necessary steps for building, testing, and publishing a new version of the library.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ko/release_process.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm run release\n```\n\n----------------------------------------\n\nTITLE: Install npm dependencies\nDESCRIPTION: This command installs the necessary dependencies for building and testing p5.js. It should be executed after cloning the p5.js repository and navigating to the project directory.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/contributor_guidelines.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm ci\n```\n\n----------------------------------------\n\nTITLE: YUI Documentation Development Task\nDESCRIPTION: The task that builds documentation and library, starts a web server to provide local reference pages, and watches for source code changes to rebuild automatically.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ja/steward_guidelines.md#_snippet_8\n\nLANGUAGE: js\nCODE:\n```\ngrunt yui:dev\n```\n\n----------------------------------------\n\nTITLE: Testing p5.js Project\nDESCRIPTION: This command runs all unit tests for the p5.js project. It's essential to ensure no errors before making changes and submitting them.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/es/contributor_guidelines.md#_snippet_7\n\nLANGUAGE: npm\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Add changes to Git staging area\nDESCRIPTION: This command adds all changes in the current directory to the Git staging area.  These changes are then ready to be committed to the repository.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/contributor_guidelines.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\n```\n\n----------------------------------------\n\nTITLE: Using Template Strings in p5.js JavaScript\nDESCRIPTION: Guidelines for using template strings for string interpolation. Template strings provide a more concise and readable syntax for strings that include variable values.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/documentation_style_guide.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nlet name = 'Dave';\n\n// Bad.\ntext(name + ', this conversation can serve no purpose anymore. Goodbye.' + name, 0, 0);\n\n// Good.\ntext(`${name}, this conversation can serve no purpose anymore. Goodbye.`, 0, 0);\n```\n\n----------------------------------------\n\nTITLE: Initializing Objects in JavaScript\nDESCRIPTION: This snippet demonstrates the preferred method for object creation using literal syntax (`{}`) instead of the `new Object()` constructor. This is recommended for better readability and potential performance optimization by JavaScript engines.  The example also provides a 'Bad' example of using new Object().\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/documentation_style_guide.md#_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\n// Bad.\nlet ball = new Object();\n\n// Good.\nlet ball = {};\n```\n\n----------------------------------------\n\nTITLE: Git Add: Stage Changes\nDESCRIPTION: This command stages all changes in the current directory to be included in the next commit. This prepares the changes to be recorded in the repository.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/es/contributor_guidelines.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\n```\n\n----------------------------------------\n\nTITLE: Staging Git Changes - Bash\nDESCRIPTION: Adds changes from the working directory to the staging area. The command `git add .` stages all changes in the current directory and its subdirectories.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/contributor_guidelines.md#_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\ngit add .\n```\n\n----------------------------------------\n\nTITLE: Example Git Commit Message - Bash\nDESCRIPTION: A concrete example demonstrating a descriptive commit message for a specific change when using the `git commit -m` command, as recommended for clarity.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/contributor_guidelines.md#_snippet_9\n\nLANGUAGE: Bash\nCODE:\n```\ngit commit -m \"Add documentation example to circle() function\"\n```\n\n----------------------------------------\n\nTITLE: Live Previewing p5.js Documentation\nDESCRIPTION: Shell command using npm to launch a live-reloading development server for previewing the p5.js reference documentation as changes are made to the source code or documentation comments.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/es/contributing_to_the_p5js_reference.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nnpm run docs:dev\n```\n\n----------------------------------------\n\nTITLE: Running Tests for p5.js\nDESCRIPTION: Command to build p5.js from source and run all unit tests to ensure your changes don't break existing functionality.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/hi/contributor_guidelines.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Using For Loops Over While Loops in p5.js JavaScript\nDESCRIPTION: Guidelines for using for loops instead of while or do-while loops when iterating a fixed number of times. For loops make the iteration bounds explicit and are generally more readable.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/documentation_style_guide.md#_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nlet numPetals = 7;\n\n// Bad.\nlet i = 0;\nwhile (i < numPetals) {\n  ellipse(0, 0, 20, 80);\n  rotate(PI / numPetals);\n  i += 1;\n}\n\n// Good.\nfor (let i = 0; i < numPetals; i += 1) {\n  ellipse(0, 0, 20, 80);\n  rotate(PI / numPetals);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Items to Arrays\nDESCRIPTION: This snippet recommends using the `Array#push` method to add items to an array instead of directly assigning to an index using `[]`. This approach is cleaner and avoids potential issues. The example also provides a 'Bad' example.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/documentation_style_guide.md#_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nlet lyrics = [];\n\n// Bad.\nlyrics[lyrics.length] = 'Little rough around the edges, but I keep it smooth';\n\n// Good.\nlyrics.push('Little rough around the edges, but I keep it smooth');\n```\n\n----------------------------------------\n\nTITLE: Generating p5.js Documentation via npm\nDESCRIPTION: Specifies the npm command used to generate the p5.js reference documentation (`data.json`) from JSDoc comments in the source code.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/contributing_to_the_p5js_reference.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run docs\n```\n\n----------------------------------------\n\nTITLE: Cloning Git Repository - Bash\nDESCRIPTION: Downloads a copy of a git repository from a remote URL to the local machine. Replace `[git_url]` with the actual URL of the repository.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/contributor_guidelines.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ngit clone [git_url]\n```\n\n----------------------------------------\n\nTITLE: Running All Unit Tests using npm test\nDESCRIPTION: This command runs all the unit tests defined in the project. It is executed from the root directory of the repository.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/unit_testing.md#_snippet_0\n\nLANGUAGE: shellsession\nCODE:\n```\n$ npm test\n```\n\n----------------------------------------\n\nTITLE: MochaChrome Task for Browser Tests\nDESCRIPTION: References the mochaChrome task defined in ./tasks/test/mocha-chrome.js that runs tests in a headless Chrome browser using Puppeteer.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ja/steward_guidelines.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nmochaChrome\n```\n\n----------------------------------------\n\nTITLE: Code Coverage Report Task\nDESCRIPTION: References the nyc:report task that collects and outputs test coverage data generated during test execution to the console.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ja/steward_guidelines.md#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nnyc:report\n```\n\n----------------------------------------\n\nTITLE: Starting a Development Server\nDESCRIPTION: This command starts a development server which allows you to run the unit tests in a browser. This helps with debugging.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/sk/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ npm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for p5.js Unit Testing\nDESCRIPTION: Command to install all dependencies required for p5.js development and testing using npm ci.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ko/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm ci\n```\n\n----------------------------------------\n\nTITLE: Object Property Quoting\nDESCRIPTION: This example shows when to quote object properties. Only quote object properties that are invalid identifiers. This leads to increased readability and potential optimization by JavaScript engines. This snippet provides a 'Bad' and 'Good' example.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/documentation_style_guide.md#_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\n// Bad.\nlet secretObject = {\n  'x': 100,\n  'y': 200,\n  'top-secret': 'classified',\n};\n\n// Good.\nlet secretObject = {\n  x: 3,\n  y: 4,\n  'top-secret': 'classified',\n};\n```\n\n----------------------------------------\n\nTITLE: Using Inheritance\nDESCRIPTION: This snippet recommends using the `extends` keyword for inheritance. This ensures code clarity and adherence to modern JavaScript practices.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/documentation_style_guide.md#_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\nclass RandomMover extends Mover {\n  update() {\n    this.x += random(-1, 1);\n    this.y += random(-1, 1);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Parameters with validateParameters\nDESCRIPTION: `validateParameters()` validates function input parameters by comparing them with information from `docs/reference/data.json`. It checks that function calls have the correct number and types of parameters. It utilizes `fes.friendlyParamError.*` keys for generating errors. The function can be called via `p5._validateParameters(FUNCT_NAME, ARGUMENTS)` or `p5.prototype._validateParameters(FUNCT_NAME, ARGUMENTS)`.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ja/fes_reference_dev_notes.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n_validateParameters(func, args)\n```\n\nLANGUAGE: javascript\nCODE:\n```\narc(1, 1, 10.5, 10);\n```\n\nLANGUAGE: javascript\nCODE:\n```\narc('1', 1, 10.5, 10, 0, Math.PI, 'pie');\n```\n\n----------------------------------------\n\nTITLE: Parameter Validation with validateParameters\nDESCRIPTION: `validateParameters()` validates function arguments against the information defined in `docs/reference/data.json`. It checks for the correct number and types of arguments.  The error messages generated use the `fes.friendlyParamError.*` keys.  The function can be called with `p5._validateParameters(FUNCT_NAME, ARGUMENTS)` (static) or  `p5.prototype._validateParameters(FUNCT_NAME, ARGUMENTS)` (instance).\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/fes_reference_dev_notes.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n_validateParameters(func, args)\n```\n\n----------------------------------------\n\nTITLE: Running All Unit Tests with npm\nDESCRIPTION: Command to run all unit tests from the root directory of the repository using npm.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ja/unit_testing.md#_snippet_0\n\nLANGUAGE: shellsession\nCODE:\n```\n$ npm test\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests\nDESCRIPTION: This command executes the unit tests for the p5.js project using Grunt.  These tests ensure the library functions correctly.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/sk/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ grunt\n```\n\n----------------------------------------\n\nTITLE: Registering a method for cleanup using registerMethod\nDESCRIPTION: This code demonstrates how to register a method to be called at a specific point in the p5.js sketch lifecycle using `registerMethod()`. The example defines a `doRemoveStuff()` function for library cleanup and registers it to be called when `remove()` is invoked.  This is useful for releasing resources when the sketch is being removed.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ja/creating_libraries.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n  p5.prototype.doRemoveStuff = function () { \n    // ライブラリのクリーンアップ\n  };\n  p5.prototype.registerMethod('remove', p5.prototype.doRemoveStuff);\n\n```\n\n----------------------------------------\n\nTITLE: Checking for existing p5.js methods\nDESCRIPTION: This snippet shows how to check if a p5.js method already exists using `hasOwnProperty()`. This is important to avoid overwriting existing methods in p5.js, ensuring that the new functionality integrates safely with the existing p5 environment.  The code logs the boolean result of the check.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ja/creating_libraries.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n  console.log(p5.prototype.hasOwnProperty('rect'));\n\n```\n\n----------------------------------------\n\nTITLE: Automating p5.js Release with Grunt - Shell\nDESCRIPTION: This shell command triggers the Grunt release task for p5.js, automating build steps such as testing, version bump, documentation generation, and publication to multiple platforms. The user specifies the release type (minor, major, patch, or tag name); if omitted, the default action is a patch release. Prior configuration of authentication credentials is required.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/project_wrapups/sakshamsaxena_gsoc_2017.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngrunt release-p5:minor\n```\n\n----------------------------------------\n\nTITLE: Handling Autoplay Errors with _friendlyAutoplayError\nDESCRIPTION: `_friendlyAutoplayError()` is called internally to handle errors related to media playback, specifically addressing issues caused by browser autoplay policies.  It produces friendly error messages with the `fes.autoplay` key.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/fes_reference_dev_notes.md#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: JavaScript Function Declaration and Default Parameters\nDESCRIPTION: Highlights the use of function declarations over anonymous functions, and emphasizes defining default parameters with syntax suited for clarity and stability. Also recommends placing default parameters at the end of parameter lists for consistency.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/documentation_style_guide.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Function declaration for clarity.\nfunction foo() {\n  // ...\n}\n\n// Using default parameter syntax.\nfunction createBall(diameter = 50) {\n  // ...\n}\n\n// Default parameters placed last.\nfunction drawSpiral(length, angle = 90) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Type Mismatch with _validateParameters() in JavaScript\nDESCRIPTION: This example demonstrates the error message displayed when a function receives an argument of the wrong type. The arc() function expects a Number for the first parameter, but a string is provided. FES detects this type mismatch and generates an error message explaining the expected type and the type received.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/fes_contribution_guide.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\narc(1, ',1', 10.5, 10, 0, Math.PI);\n```\n\nLANGUAGE: js\nCODE:\n```\n🌸 p5.js says: [sketch.js, line 14] arc() was expecting Number for the first parameter, received string instead. (https://p5js.org/reference/p5/arc)\n```\n\n----------------------------------------\n\nTITLE: Defining a Function's Sine Calculation\nDESCRIPTION: This snippet demonstrates the structure of a reference comment block for a function, specifically the `sin()` function. It includes a description, method definition using `@method`, parameter definitions with `@param`, return value with `@return`, and an example using `@example`.  It explains the use of markdown and HTML within the description. The description should be concise and explain the function's behavior, including its performance and any unusual behavior. The method, parameter, and return tags, are explained in detail.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ja/contributing_to_the_p5.js_reference.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Calculates the sine of an angle. `sin()` is useful for many geometric tasks\n * in creative coding. The values returned oscillate between -1 and 1 as the\n * input angle increases. `sin()` takes into account the current\n * <a href=\"#/p5/angleMode\">angleMode</a>.\n *\n * @method sin\n * @param  {Number} angle the angle.\n * @return {Number} sine of the angle.\n *\n * @example\n * <div>\n * <code>\n * function draw() {\n *   background(200);\n *\n *   let t = frameCount;\n *   let x = 50;\n *   let y = 30 * sin(t * 0.05) + 50;\n *   line(x, 50, x, y);\n *   circle(x, y, 20);\n *\n *   describe('A white ball on a string oscillates up and down.');\n * }\n * </code>\n * </div>\n *\n * <div>\n * <code>\n * function draw() {\n *   let x = frameCount;\n *   let y = 30 * sin(x * 0.1) + 50;\n *   point(x, y);\n *\n *   describe('A series of black dots form a wave pattern.');\n * }\n * </code>\n * </div>\n *\n * <div>\n * <code>\n * function draw() {\n *   let t = frameCount;\n *   let x = 30 * cos(t * 0.1) + 50;\n *   let y = 10 * sin(t * 0.2) + 50;\n *   point(x, y);\n *\n *   describe('A series of black dots form an infinity symbol.');\n * }\n * </code>\n * </div>\n */\n```\n\n----------------------------------------\n\nTITLE: Implementing the pre action hook in p5.js\nDESCRIPTION: This code snippet demonstrates how to use the `pre` action hook to set a default background color using `registerMethod()` before the draw cycle begins. This ensures that the background is set at the start of each frame.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/creating_libraries.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\np5.prototype.setDefaultBackground = function(){\n  // Set background to be p5 pink by default\n  this.background(\"#ed225d\");\n};\np5.prototype.registerMethod(\"pre\", p5.prototype.setDefaultBackground);\n```\n\n----------------------------------------\n\nTITLE: Avoiding Unnecessary Else Blocks in p5.js JavaScript\nDESCRIPTION: Guidelines for avoiding unnecessary else blocks after if blocks with return statements. When an if block always returns, the else block is redundant and can be simplified.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/documentation_style_guide.md#_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n// Bad.\nfunction mouseIsOnLeft() {\n  if (mouseX < width * 0.5) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n// Good.\nfunction mouseIsOnLeft() {\n  if (mouseX < width * 0.5) {\n    return true;\n  }\n\n  return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Example code that escapes FES parameter detection\nDESCRIPTION: This code snippet illustrates a case where the Friendly Error System (FES) fails to detect an error due to a mismatch between the intended usage and the defined parameter patterns.  Specifically, an undefined variable is passed to the line function with extra parameters, but FES does not catch this because the line function is overloaded.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/fes_reference_dev_notes.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst x3; // 未定义\nline(0, 0, 100, 100, x3, Math.PI);\n```\n\n----------------------------------------\n\nTITLE: Adding Basic Method to p5.prototype (JavaScript)\nDESCRIPTION: Demonstrates the fundamental way to extend p5.js by adding a new method, `loadCSV`, to the `p5.prototype` object. This makes the function globally available in a p5 sketch, allowing it to be called like any built-in p5 function. Currently, it only logs a static message.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/creating_libraries.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\np5.prototype.loadCSV = function(){\n  console.log('I will load a CSV file soon!');\n};\n```\n\n----------------------------------------\n\nTITLE: JavaScript Chain Style Calls Versus Sequential Calls\nDESCRIPTION: Recommends separating chained function calls into individual statements to enhance readability and help users unfamiliar with method chaining understand code flow, especially in p5.js contexts.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/documentation_style_guide.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Chain calls (less preferred for clarity).\nfill(0).strokeWeight(6).textSize(20);\n\n// Separate calls (preferred for clarity).\nfill(0);\nstrokeWeight(6);\ntextSize(20);\n```\n\n----------------------------------------\n\nTITLE: Add remote upstream repository\nDESCRIPTION: This command adds a remote repository named \"upstream\" that points to the official p5.js repository.  This allows fetching changes from the official repository to keep the local fork synchronized.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/contributor_guidelines.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add upstream https://github.com/processing/p5.js\n```\n\n----------------------------------------\n\nTITLE: Preventing Example Rendering with 'norender' in YUIDoc (JavaScript)\nDESCRIPTION: Explains how to display an example's code on the reference page without executing and rendering it. Add the `norender` class attribute to the enclosing `<div>` tag within the `@example` block.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/contributing_to_the_p5js_reference.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n* @example\n* <div class=\"norender\">\n* <code>\n* arc(50, 50, 80, 80, 0, PI + QUARTER_PI, OPEN);\n* describe('ellipse created using arc with its top right open');\n* </code>\n* </div>\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server for Browser-Based Testing\nDESCRIPTION: Command to start a development server that allows running tests in a browser environment instead of command line.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ko/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ npm run dev\n```\n\n----------------------------------------\n\nTITLE: JSON FES Item with Interpolation\nDESCRIPTION: Illustrates a specific example from the FES translation file, showing how interpolation is used for the `image` key within the `fes.fileLoadError` section. The `{{suggestion}}` placeholder allows a dynamically generated suggestion to be included in the error message. This shows how FES messages can be customized.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ja/friendly_error_system.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n\"image\": \"看起来加载图像时出现问题。{{suggestion}}\"\n```\n\n----------------------------------------\n\nTITLE: Formatting the @return Tag in YUIDoc (JavaScript)\nDESCRIPTION: Demonstrates the standard format for the `@return` tag in YUIDoc: `@return {type} Description of the data returned.`. This specifies the data type of the value returned by the function and provides a description.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/contributing_to_the_p5js_reference.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n@return {type} Description of the data returned.\n```\n\n----------------------------------------\n\nTITLE: JavaScript Example: Translator Invocation with Suggestion\nDESCRIPTION: This JavaScript snippet shows how `translator()` is used with the `fes.fileLoadError.image` key, and a pre-generated `suggestion` value for dynamically generating the error message during file loading. The functionality is dependent on the translation files.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/friendly_error_system.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ntranslator('fes.fileLoadError.image', { suggestion });\n```\n\n----------------------------------------\n\nTITLE: JavaScript: Using the translator Function\nDESCRIPTION: Illustrates how to use the `translator` function with i18next to dynamically generate a translated message in p5.js.  The `translator` function takes a key and an object containing the values to be interpolated.  It returns the translated message with the values inserted into the placeholders.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/friendly_error_system.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\ntranslator('greeting', { who: 'everyone' } );\n```\n\n----------------------------------------\n\nTITLE: Git Checkout: Create New Branch\nDESCRIPTION: This command creates and switches to a new branch to isolate changes. It's good practice to use descriptive branch names.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/es/contributor_guidelines.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b branch_name\n```\n\n----------------------------------------\n\nTITLE: Running Release Preview Shell\nDESCRIPTION: This command allows for a preview of the release process without making any actual changes to the remote repository. It can be used for testing purposes and to ensure that the release process runs smoothly without impacting the main project.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ko/release_process.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run release---preview\n```\n\n----------------------------------------\n\nTITLE: Vertex Shader for Image-Based Lighting in GLSL (src/webgl/shaders/imageLight.vert)\nDESCRIPTION: Defines the vertex shader specifically for the Image-Based Lighting functionality. This shader processes vertex positions and normals to prepare data for the fragment shaders that calculate diffuse and specular lighting contributions. The shader is intended for use with p5.js WebGL renderer and requires compatible vertex attributes and uniform inputs.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/project_wrapups/aryan_koundal_gsoc_2023.md#_snippet_3\n\nLANGUAGE: GLSL\nCODE:\n```\n#version 300 es\n\nin vec3 aPosition;\nin vec3 aNormal;\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\nout vec3 vNormal;\nout vec3 vPosition;\n\nvoid main() {\n\tvNormal = mat3(uModelViewMatrix) * aNormal;\n\tvPosition = (uModelViewMatrix * vec4(aPosition, 1.0)).xyz;\n\tgl_Position = uProjectionMatrix * vec4(vPosition, 1.0);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Structure for FES\nDESCRIPTION: This JSON snippet defines a basic key-value pair structure for translation files used by the i18next library within the FES. The format uses double quotes for both keys and values, encapsulating them within curly braces.  This example presents a basic logo representation.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/friendly_error_system.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"value\"\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Example: Image Loading Error\nDESCRIPTION: This JSON snippet displays an error message related to image loading, which uses the i18next interpolation feature.  The key `image` includes `{{suggestion}}` as a placeholder for an error suggestion.  This structure shows the flexibility of injecting dynamic information within the error message.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/friendly_error_system.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"image\": \"看起来加载图像时出现问题。{{suggestion}}\"\n```\n\n----------------------------------------\n\nTITLE: Wrapping Console Methods for Enhanced FES Output (Concept)\nDESCRIPTION: Presents a conceptual JavaScript code snippet demonstrating how `window.console` methods (`log`, `warn`, `error`) could potentially be wrapped. This technique could allow FES to intercept console messages, potentially reformat them or add context before calling the original console function, thus providing better-integrated error reporting. This is noted as a future consideration and not currently implemented.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ja/fes_reference_dev_notes.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n// 这段代码片段使用新函数包装了 window.console 方法，以修改其功能\n// 目前尚未实现，但可以使用它来提供更好格式的错误消息\nconst original = window.console;\nconst original_functions = {\n    log: original.log,\n    warn: original.warn,\n    error: original.error\n}\n[\"log\", \"warn\", \"error\"].forEach(function(func){\n    window.console[func] = function(msg) {\n      // 在包装函数中处理捕获的消息，然后调用原始函数\n      original_functions[func].apply(original, arguments)\n    };\n});\n```\n\n----------------------------------------\n\nTITLE: Defining the Build Task in Grunt\nDESCRIPTION: Registers the build task that bundles the p5.js library using browserify, creates a minified version, and prepares a test version with code coverage instrumentation.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/ja/steward_guidelines.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\ngrunt.registerTask('build', [\n  'browserify',\n  'browserify:min',\n  'uglify',\n  'browserify:test'\n]);\n```\n\n----------------------------------------\n\nTITLE: Property Reference Documentation Example in p5.js\nDESCRIPTION: Example of how to document a system variable (mouseX) with @property tag instead of @method, showing the proper format for documenting read-only variables.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/hi/contributing_to_the_p5js_reference.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * सिस्टम चर mouseX हमेशा माउस के वर्तमान केंद्रीय स्थान को संदर्भित करता है,\n * कैनवास के (0, 0) के प्रति। शीर्ष-बाएं कोने में मान (0, 0) होता है\n *  2-डी के लिए और WebGL के लिए (-चौड़ाई/2, -ऊचाई/2)।\n * यदि माउस इनपुट की जगह स्पर्श का उपयोग किया जाता है, तो mouseX एक्स वैल्यू को धारण करेगा\n * सबसे हाल के स्पर्श बिंदु की।\n *\n * @property {Number} mouseX\n * @readOnly\n *\n * @example\n * <div>\n * <code>\n * // Move the mouse across the canvas\n * function draw() {\n *   background(244, 248, 252);\n *   line(mouseX, 0, mouseX, 100);\n *   describe('horizontal black line moves left and right with mouse x-position');\n * }\n * </code>\n * </div>\n */\n```\n\n----------------------------------------\n\nTITLE: Defining HTML Table for Contributors\nDESCRIPTION: This HTML structure creates a table (`<table>`) organized into rows (`<tr>`) and cells (`<td>`) to display project contributors. Each cell contains a hyperlink (`<a>`) wrapping a contributor's GitHub avatar (`<img>`), their name (`<sub>`), and optional links to specific contributions (e.g., bug reports, code, documentation, examples, blogposts). It's a standard method for presenting a list of individuals with associated links and images using basic HTML elements.\nSOURCE: https://github.com/processing/p5.js/blob/main/README.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n      <td align=\"center\" valign=\"top\" width=\"16.66%\"><a href=\"https://github.com/arsenijesavic\"><img src=\"https://avatars0.githubusercontent.com/u/7712798?v=4?s=120\" width=\"120px;\" alt=\"Arsenije Savic\"/><br /><sub><b>Arsenije Savic</b></sub></a><br /></td>\n      <td align=\"center\" valign=\"top\" width=\"16.66%\"><a href=\"http://www.linkedin.com/in/lukeburgessyeo\"><img src=\"https://avatars1.githubusercontent.com/u/15360369?v=4?s=120\" width=\"120px;\" alt=\"Luke Burgess-Yeo\"/><br /><sub><b>Luke Burgess-Yeo</b></sub></a><br /></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"16.66%\"><a href=\"https://github.com/slfmessi\"><img src=\"https://avatars3.githubusercontent.com/u/3071467?v=4?s=120\" width=\"120px;\" alt=\"Sun Lifei\"/><br /><sub><b>Sun Lifei</b></sub></a><br /></td>\n      <td align=\"center\" valign=\"top\" width=\"16.66%\"><a href=\"http://himo.boy.jp/\"><img src=\"https://avatars3.githubusercontent.com/u/1988660?v=4?s=120\" width=\"120px;\" alt=\"naoyashiga\"/><br /><sub><b>naoyashiga</b></sub></a><br /></td>\n      <td align=\"center\" valign=\"top\" width=\"16.66%\"><a href=\"http://facebook.com/Jimish.Fotariya\"><img src=\"https://avatars0.githubusercontent.com/u/8057628?v=4?s=120\" width=\"120px;\" alt=\"Jimish Fotariya\"/><br /><sub><b>Jimish Fotariya</b></sub></a><br /></td>\n      <td align=\"center\" valign=\"top\" width=\"16.66%\"><a href=\"http://www.moro.es\"><img src=\"https://avatars1.githubusercontent.com/u/703744?v=4?s=120\" width=\"120px;\" alt=\"Jorge Moreno\"/><br /><sub><b>Jorge Moreno</b></sub></a><br /><a href=\"https://github.com/processing/p5.js/issues?q=author%3Aalterebro\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/processing/p5.js/commits?author=alterebro\" title=\"Code\">💻</a> <a href=\"https://github.com/processing/p5.js/commits?author=alterebro\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"16.66%\"><a href=\"http://stevengreens10.github.io\"><img src=\"https://avatars3.githubusercontent.com/u/26755396?v=4?s=120\" width=\"120px;\" alt=\"Steven Green\"/><br /><sub><b>Steven Green</b></sub></a><br /></td>\n      <td align=\"center\" valign=\"top\" width=\"16.66%\"><a href=\"http://www.marcusparsons.com\"><img src=\"https://avatars2.githubusercontent.com/u/10608765?v=4?s=120\" width=\"120px;\" alt=\"Marcus Parsons\"/><br /><sub><b>Marcus Parsons</b></sub></a><br /></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"16.66%\"><a href=\"https://github.com/nthitz\"><img src=\"https://avatars1.githubusercontent.com/u/1482377?v=4?s=120\" width=\"120px;\" alt=\"Nick Yahnke\"/><br /><sub><b>Nick Yahnke</b></sub></a><br /></td>\n      <td align=\"center\" valign=\"top\" width=\"16.66%\"><a href=\"http://www.radialglo.com\"><img src=\"https://avatars3.githubusercontent.com/u/1859451?v=4?s=120\" width=\"120px;\" alt=\"Anthony Su\"/><br /><sub><b>Anthony Su</b></sub></a><br /></td>\n      <td align=\"center\" valign=\"top\" width=\"16.66%\"><a href=\"http://www.kroko.me/\"><img src=\"https://avatars3.githubusercontent.com/u/720976?v=4?s=120\" width=\"120px;\" alt=\"kroko / Reinis Adovičs\"/><br /><sub><b>kroko / Reinis Adovičs</b></sub></a><br /></td>\n      <td align=\"center\" valign=\"top\" width=\"16.66%\"><a href=\"https://github.com/robynitp\"><img src=\"https://avatars2.githubusercontent.com/u/5854770?v=4?s=120\" width=\"120px;\" alt=\"Robyn Overstreet\"/><br /><sub><b>Robyn Overstreet</b></sub></a><br /></td>\n      <td align=\"center\" valign=\"top\" width=\"16.66%\"><a href=\"https://github.com/benhinchley\"><img src=\"https://avatars1.githubusercontent.com/u/7188324?v=4?s=120\" width=\"120px;\" alt=\"Ben Hinchley\"/><br /><sub><b>Ben Hinchley</b></sub></a><br /></td>\n      <td align=\"center\" valign=\"top\" width=\"16.66%\"><a href=\"http://ello.co/maxkolyanov\"><img src=\"https://avatars1.githubusercontent.com/u/3266989?v=4?s=120\" width=\"120px;\" alt=\"Max Kolyanov\"/><br /><sub><b>Max Kolyanov</b></sub></a><br /></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"16.66%\"><a href=\"http://zenozeng.com\"><img src=\"https://avatars3.githubusercontent.com/u/2544489?v=4?s=120\" width=\"120px;\" alt=\"Zeno Zeng\"/><br /><sub><b>Zeno Zeng</b></sub></a><br /></td>\n      <td align=\"center\" valign=\"top\" width=\"16.66%\"><a href=\"http://www.sethkranzler.com\"><img src=\"https://avatars0.githubusercontent.com/u/8644048?v=4?s=120\" width=\"120px;\" alt=\"Seth\"/><br /><sub><b>Seth</b></sub></a><br /></td>\n      <td align=\"center\" valign=\"top\" width=\"16.66%\"><a href=\"https://github.com/plural\"><img src=\"https://avatars2.githubusercontent.com/u/396562?v=4?s=120\" width=\"120px;\" alt=\"plural\"/><br /><sub><b>plural</b></sub></a><br /></td>\n      <td align=\"center\" valign=\"top\" width=\"16.66%\"><a href=\"http://ucodia.space\"><img src=\"https://avatars3.githubusercontent.com/u/1795860?v=4?s=120\" width=\"120px;\" alt=\"Lionel Ringenbach\"/><br /><sub><b>Lionel Ringenbach</b></sub></a><br /></td>\n      <td align=\"center\" valign=\"top\" width=\"16.66%\"><a href=\"https://github.com/darkcoderrises\"><img src=\"https://avatars3.githubusercontent.com/u/9111606?v=4?s=120\" width=\"120px;\" alt=\"Harshil Goel\"/><br /><sub><b>Harshil Goel</b></sub></a><br /></td>\n      <td align=\"center\" valign=\"top\" width=\"16.66%\"><a href=\"http://becker.codes\"><img src=\"https://avatars0.githubusercontent.com/u/12414183?v=4?s=120\" width=\"120px;\" alt=\"Joshua Storm Becker\"/><br /><sub><b>Joshua Storm Becker</b></sub></a><br /></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"16.66%\"><a href=\"http://twitter.com/maxdevjs\"><img src=\"https://avatars2.githubusercontent.com/u/22229196?v=4?s=120\" width=\"120px;\" alt=\"maxdevjs\"/><br /><sub><b>maxdevjs</b></sub></a><br /></td>\n      <td align=\"center\" valign=\"top\" width=\"16.66%\"><a href=\"http://timorychert.de/\"><img src=\"https://avatars2.githubusercontent.com/u/9803905?v=4?s=120\" width=\"120px;\" alt=\"trych\"/><br /><sub><b>trych</b></sub></a><br /></td>\n      <td align=\"center\" valign=\"top\" width=\"16.66%\"><a href=\"https://www.alejandratrejo.com/\"><img src=\"https://avatars1.githubusercontent.com/u/15284993?v=4?s=120\" width=\"120px;\" alt=\"Alejandra Trejo\"/><br /><sub><b>Alejandra Trejo</b></sub></a><br /></td>\n      <td align=\"center\" valign=\"top\" width=\"16.66%\"><a href=\"http://www.pgupta.com\"><img src=\"https://avatars0.githubusercontent.com/u/9909241?v=4?s=120\" width=\"120px;\" alt=\"Prashant Gupta\"/><br /><sub><b>Prashant Gupta</b></sub></a><br /></td>\n      <td align=\"center\" valign=\"top\" width=\"16.66%\"><a href=\"https://github.com/rasca0027\"><img src=\"https://avatars2.githubusercontent.com/u/5270022?v=4?s=120\" width=\"120px;\" alt=\"Kai-han Chang\"/><br /><sub><b>Kai-han Chang</b></sub></a><br /></td>\n      <td align=\"center\" valign=\"top\" width=\"16.66%\"><a href=\"https://github.com/kjav\"><img src=\"https://avatars0.githubusercontent.com/u/9029686?v=4?s=120\" width=\"120px;\" alt=\"kjav\"/><br /><sub><b>kjav</b></sub></a><br /></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"16.66%\"><a href=\"http://maddy.zone\"><img src=\"https://avatars0.githubusercontent.com/u/1965049?v=4?s=120\" width=\"120px;\" alt=\"maddy\"/><br /><sub><b>maddy</b></sub></a><br /></td>\n      <td align=\"center\" valign=\"top\" width=\"16.66%\"><a href=\"http://digitalcoleman.com\"><img src=\"https://avatars3.githubusercontent.com/u/2354476?v=4?s=120\" width=\"120px;\" alt=\"Christopher Coleman\"/><br /><sub><b>Christopher Coleman</b></sub></a><br /></td>\n      <td align=\"center\" valign=\"top\" width=\"16.66%\"><a href=\"http://boazsender.com\"><img src=\"https://avatars3.githubusercontent.com/u/122117?v=4?s=120\" width=\"120px;\" alt=\"Boaz\"/><br /><sub><b>Boaz</b></sub></a><br /></td>\n      <td align=\"center\" valign=\"top\" width=\"16.66%\"><a href=\"https://github.com/wangyasai\"><img src=\"https://avatars1.githubusercontent.com/u/13515645?v=4?s=120\" width=\"120px;\" alt=\"Yasai\"/><br /><sub><b>Yasai</b></sub></a><br /><a href=\"#blog-wangyasai\" title=\"Blogposts\">📝</a></td>\n      <td align=\"center\" valign=\"top\" width=\"16.66%\"><a href=\"https://github.com/hackertron\"><img src=\"https://avatars3.githubusercontent.com/u/7667514?s=460&v=4?s=120\" width=\"120px;\" alt=\"Jay Gupta\"/><br /><sub><b>Jay Gupta</b></sub></a><br /></td>\n      <td align=\"center\" valign=\"top\" width=\"16.66%\"><a href=\"https://github.com/bansalnitish\"><img src=\"https://avatars1.githubusercontent.com/u/22434689?v=4?s=120\" width=\"120px;\" alt=\"Nitish Bansal\"/><br /><sub><b>Nitish Bansal</b></sub></a><br /></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"16.66%\"><a href=\"https://caro.io/\"><img src=\"https://avatars0.githubusercontent.com/u/8083973?s=460&v=4?s=120\" width=\"120px;\" alt=\"Caroline Hermans\"/><br /><sub><b>Caroline Hermans</b></sub></a><br /><a href=\"#example-carolinehermans\" title=\"Examples\">💡</a> <a href=\"https://github.com/processing/p5.js/commits?author=carolinehermans\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"16.66%\"><a href=\"https://github.com/faithwyu\"><img src=\"https://avatars3.githubusercontent.com/u/19146133?s=460&v=4?s=120\" width=\"120px;\" alt=\"Faith Wuyue Yu\"/><br /><sub><b>Faith Wuyue Yu</b></sub></a><br /></td>\n      <td align=\"center\" valign=\"top\" width=\"16.66%\"><a href=\"https://aatishb.com\"><img src=\"https://avatars2.githubusercontent.com/u/1878638?s=400&v=4?s=120\" width=\"120px;\" alt=\"Aatish Bhatia\"/><br /><sub><b>Aatish Bhatia</b></sub></a><br /><a href=\"https://github.com/processing/p5.js/commits?author=aatishb\" title=\"Documentation\">📖</a> <a href=\"https://github.com/processing/p5.js/issues?q=author%3Aaatishb\" title=\"Bug reports\">🐛</a> <a href=\"#example-aatishb\" title=\"Examples\">💡</a></td>\n      <td align=\"center\" valign=\"top\" width=\"16.66%\"><a href=\"https://github.com/dekmm\"><img src=\"https://avatars3.githubusercontent.com/u/7628664?v=4?s=120\" width=\"120px;\" alt=\"Mislav Milicevic\"/><br /><sub><b>Mislav Milicevic</b></sub></a><br /><a href=\"https://github.com/processing/p5.js/commits?author=dekmm\" title=\"Code\">💻</a> <a href=\"https://github.com/processing/p5.js/issues?q=author%3Adekmm\" title=\"Bug reports\">🐛</a></td>\n```\n\n----------------------------------------\n\nTITLE: Using @method, @param, @return Tags in YUIDoc (JavaScript)\nDESCRIPTION: Demonstrates the usage of `@method`, `@param`, and `@return` tags within a YUIDoc comment block to define a function's name (`sin`), its parameters (type, name, description), and its return value (type, description).\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/zh-Hans/contributing_to_the_p5js_reference.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n * @method sin\n * @param  {Number} angle  the angle.\n * @return {Number} sine of the angle.\n```\n\n----------------------------------------\n\nTITLE: HTML Output Structure Generated by p5.js textOutput - HTML\nDESCRIPTION: This HTML snippet shows the DOM structure generated by p5.js's `textOutput()` function within the canvas element. It includes a summary paragraph, a list of shapes with links, and a table detailing shape properties like location and area, utilizing ARIA attributes and roles for screen reader accessibility.\nSOURCE: https://github.com/processing/p5.js/blob/main/contributor_docs/web_accessibility.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<canvas id=\"defaultCanvas0\" class=\"p5Canvas\" style=\"width: 400px; height: 400px;\" width=\"400\" height=\"400\">\n  <div id=\"defaultCanvas0accessibleOutput\" role=\"region\" aria-label=\"Canvas Outputs\">\n    <div id=\"defaultCanvas0textOutput\">\n      Text Output\n      <div id=\"defaultCanvas0textOutputSummary\" aria-label=\"text output summary\">\n        <p id=\"defaultCanvas0textOutput_summary\">\n          Your output is a, 400 by 400 pixels, white canvas containing the following 2 shapes:\n        </p>\n        <ul id=\"defaultCanvas0textOutput_list\">\n          <li>\n            <a href=\"#defaultCanvas0textOutputshape0\">orange circle</a>, at top left, covering 1% of the canvas.\n          </li>\n          <li>\n            <a href=\"#defaultCanvas0textOutputshape1\">fuchsia square</a>, at bottom right, covering 2% of the canvas.\n          </li>\n        </ul>\n      </div>\n      <table id=\"defaultCanvas0textOutput_shapeDetails\" summary=\"text output shape details\">\n        <tbody>\n          <tr id=\"defaultCanvas0textOutputshape0\">\n            <th>orange circle</th>\n            <td>location = top left</td>\n            <td> area = 1%</td>\n          </tr>\n          <tr id=\"defaultCanvas0textOutputshape1\">\n            <th>fuchsia square</th>\n            <td>location = bottom right</td>\n            <td> area = 2%</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n</canvas>\n```"
  }
]