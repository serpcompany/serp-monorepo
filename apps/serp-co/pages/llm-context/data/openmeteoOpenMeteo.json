[
  {
    "owner": "open-meteo",
    "repo": "open-meteo",
    "content": "TITLE: Running Open-Meteo with Docker\nDESCRIPTION: This snippet demonstrates how to deploy the Open-Meteo API using Docker. It includes pulling the latest image, creating a Docker volume for data storage, starting the API service, downloading weather data, and querying the API for a forecast. Requires Docker to be installed.\nSOURCE: https://github.com/open-meteo/open-meteo/blob/main/docs/getting-started.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Get the latest image\ndocker pull ghcr.io/open-meteo/open-meteo\n\n# Create a Docker volume to store weather data\ndocker volume create --name open-meteo-data\n\n# Start the API service on http://127.0.0.1:8080\ndocker run -d --rm -v open-meteo-data:/app/data -p 8080:8080 ghcr.io/open-meteo/open-meteo\n\n# Download the latest ECMWF IFS 0.4° open-data forecast for temperature (50 MB)\ndocker run -it --rm -v open-meteo-data:/app/data ghcr.io/open-meteo/open-meteo sync ecmwf_ifs04 temperature_2m\n\n# Get your forecast\ncurl \"http://127.0.0.1:8080/v1/forecast?latitude=47.1&longitude=8.4&models=ecmwf_ifs04&hourly=temperature_2m\"\n```\n\n----------------------------------------\n\nTITLE: Installing Open-Meteo on Ubuntu 22.04\nDESCRIPTION: This snippet shows how to install Open-Meteo API on Ubuntu 22.04 using prebuilt packages. It involves adding the Open-Meteo APT repository, updating the package list, installing the openmeteo-api package, downloading weather data, and querying the API. Requires Ubuntu 22.04 and root privileges.\nSOURCE: https://github.com/open-meteo/open-meteo/blob/main/docs/getting-started.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo gpg --keyserver hkps://keys.openpgp.org --no-default-keyring --keyring /usr/share/keyrings/openmeteo-archive-keyring.gpg  --recv-keys E6D9BD390F8226AE\necho \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/openmeteo-archive-keyring.gpg] https://apt.open-meteo.com $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/openmeteo-api.list\n\nsudo apt update\nsudo apt install openmeteo-api\n\n# Download the latest ECMWF IFS 0.4° open-data forecast for temperature (50 MB)\nsudo chown -R $(id -u):$(id -g) /var/lib/openmeteo-api\ncd /var/lib/openmeteo-api\nopenmeteo-api sync ecmwf_ifs04 temperature_2m\n\n# Get your forecast\ncurl \"http://127.0.0.1:8080/v1/forecast?latitude=47.1&longitude=8.4&models=ecmwf_ifs04&hourly=temperature_2m\"\n```\n\n----------------------------------------\n\nTITLE: Open-Meteo API Help\nDESCRIPTION: Displays the available commands for the Open-Meteo API executable. This command provides a list of available subcommands such as benchmark, convert-om, download, serve, and sync. It's useful for understanding the capabilities of the API and discovering available options.\nSOURCE: https://github.com/open-meteo/open-meteo/blob/main/docs/downloading-datasets.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# openmeteo-api --help                          \nUsage: /usr/local/bin/openmeteo-api <command>\n\nCommands:\n                   benchmark Benchmark Open-Meteo core functions like data manipulation and compression\n                        boot Boots the application's providers.\n                  convert-om Convert an om file to to NetCDF\n                     cronjob Emits the cronjob definition\n                    download Download a specified icon model run\n               download-cams Download global and european CAMS air quality forecasts\n              download-cmip6 Download CMIP6 data and convert\n                download-dem Convert digital elevation model\n              download-ecmwf Download a specified ecmwf model run\n               download-era5 Download ERA5 from the ECMWF climate data store and convert\n                download-gem Download Gem models\n                download-gfs Download GFS from NOAA NCEP\n             download-glofas Download river discharge data from GloFAS\n           download-iconwave Download a specified wave model run\n                download-jma Download JMA models\n        download-meteofrance Download MeteoFrance models\n              download-metno Download MetNo models\n          download-satellite Download satellite datasets\n  download-seasonal-forecast Download seasonal forecasts from Copernicus\n                      export Export to dataset to NetCDF\n                      routes Displays all registered routes.\n                       serve Begins serving the app over HTTP.\n                        sync Synchronise weather database from a remote server\n\nUse `/usr/local/bin/openmeteo-api <command> [--help,-h]` for more information on a command.\n```\n\n----------------------------------------\n\nTITLE: DWD ICON Model Download\nDESCRIPTION: Downloads a specified run of the DWD ICON model with the Open-Meteo API.  The `--run` argument specifies the model run (e.g., 00), and `--only-variables` limits the download to specific weather variables (e.g., temperature_2m, weather_code).  Omitting `--only-variables` downloads all variables, which can be time-consuming.\nSOURCE: https://github.com/open-meteo/open-meteo/blob/main/docs/downloading-datasets.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n<exe> download icon --run 00 --only-variables temperature_2m,weather_code\n```\n\n----------------------------------------\n\nTITLE: DWD ICON Model Download Cronjobs\nDESCRIPTION: Defines cronjob entries to download DWD ICON model data (surface level). The scripts use the `openmeteo-api` command-line tool to download data and redirect output to log files. Error handling includes capturing standard error and outputting to the log file.\nSOURCE: https://github.com/open-meteo/open-meteo/blob/main/docs/cronjobs.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n41 2,8,14,20  * * * /usr/local/bin/openmeteo-api download icon --group surface > ~/log/icon.log 2>&1 || cat ~/log/icon.log\n41 2,5,8,11,14,17,20,23  * * * /usr/local/bin/openmeteo-api download icon-eu --group surface > ~/log/icon-eu.log 2>&1 || cat ~/log/icon-eu.log\n44 0,3,6,9,12,15,18,21 * * * /usr/local/bin/openmeteo-api download icon-d2 --group surface > ~/log/icon-d2.log 2>&1 || cat ~/log/icon-d2.log\n```\n\n----------------------------------------\n\nTITLE: GFS Model Download Cronjobs\nDESCRIPTION: Configures cronjobs for downloading GFS model data using the `openmeteo-api download-gfs` command. The configuration specifies the GFS model version (gfs025 and gfs013), and logs the output. The cronjob schedules are defined at specific hours of the day.\nSOURCE: https://github.com/open-meteo/open-meteo/blob/main/docs/cronjobs.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n40 3,9,15,21 * * * /usr/local/bin/openmeteo-api download-gfs gfs025 > ~/log/gfs025.log 2>&1 || cat ~/log/gfs025.log\n40 3,9,15,21 * * * /usr/local/bin/openmeteo-api download-gfs gfs013 > ~/log/gfs013.log 2>&1 || cat ~/log/gfs013.log\n```\n\n----------------------------------------\n\nTITLE: ECMWF Model Download Cronjobs\nDESCRIPTION: Configures cronjobs for downloading ECMWF model data using `openmeteo-api download-ecmwf`. It includes configurations with different domains (`ifs025`, `aifs025`) and concurrency options.  The jobs are scheduled at different times to fetch the data, logging output to separate files.\nSOURCE: https://github.com/open-meteo/open-meteo/blob/main/docs/cronjobs.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n45  7,19 * * * /usr/local/bin/openmeteo-api download-ecmwf --concurrent 4 > ~/log/ecmwf.log 2>&1 || cat ~/log/ecmwf.log\n0  1,13 * * * /usr/local/bin/openmeteo-api download-ecmwf --concurrent 4 > ~/log/ecmwf.log 2>&1 || cat ~/log/ecmwf.log\n45  7,19 * * * /usr/local/bin/openmeteo-api download-ecmwf --concurrent 4 --domain ifs025 > ~/log/ecmwf025.log 2>&1 || cat ~/log/ecmwf025.log\n0  1,13 * * * /usr/local/bin/openmeteo-api download-ecmwf --concurrent 4 --domain ifs025 > ~/log/ecmwf025.log 2>&1 || cat ~/log/ecmwf025.log\n45  7,19 * * * /usr/local/bin/openmeteo-api download-ecmwf --concurrent 4 --domain aifs025 > ~/log/ecmwfa025.log 2>&1 || cat ~/log/ecmwfa025.log\n0  1,13 * * * /usr/local/bin/openmeteo-api download-ecmwf --concurrent 4 --domain aifs025 > ~/log/ecmwfa025.log 2>&1 || cat ~/log/ecmwfa025.log\n```\n\n----------------------------------------\n\nTITLE: Managing Open-Meteo Service on Ubuntu\nDESCRIPTION: This snippet demonstrates how to manage the Open-Meteo API service on Ubuntu using systemctl and journalctl. It includes commands for checking service status, restarting the service, and viewing service logs. Requires systemd and root privileges.\nSOURCE: https://github.com/open-meteo/open-meteo/blob/main/docs/getting-started.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl status openmeteo-api\nsudo systemctl restart openmeteo-api\nsudo journalctl -u openmeteo-api.service\n```\n\n----------------------------------------\n\nTITLE: MeteoFrance Model Download Cronjobs\nDESCRIPTION: Configures cronjobs for downloading data from MeteoFrance using `openmeteo-api download-meteofrance`. These cronjobs source an environment file (`~/mfkey.env`) containing the API key.  It downloads different models like `arpege_world`, `arome_france`, and `arome_france_hd` with various configurations. The cronjobs are scheduled at specific times and log the output.\nSOURCE: https://github.com/open-meteo/open-meteo/blob/main/docs/cronjobs.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n15 3,9,15,21 * * * bash -c \"source ~/mfkey.env; /usr/local/bin/openmeteo-api download-meteofrance arpege_world > ~/log/arpege_world.log 2>&1 || cat ~/log/arpege_world.log\"\n15 2,5,8,11,14,17,20,23 * * * bash -c \"source ~/mfkey.env; /usr/local/bin/openmeteo-api download-meteofrance arome_france > ~/log/arome_france.log 2>&1 || cat ~/log/arome_france.log\"\n15 3,9,15,21 * * * bash -c \"source ~/mfkey.env; /usr/local/bin/openmeteo-api download-meteofrance arpege_europe > ~/log/arpege_europe.log 2>&1 || cat ~/log/arpege_europe.log\"\n15 2,5,8,11,14,17,20,23 * * * bash -c \"source ~/mfkey.env; /usr/local/bin/openmeteo-api download-meteofrance arome_france_hd > ~/log/arome_france_hd.log 2>&1 || cat ~/log/arome_france_hd.log\"\n17 * * * * bash -c \"source ~/mfkey.env; /usr/local/bin/openmeteo-api download-meteofrance arome_france_15min > ~/log/arome_france_15min.log 2>&1 || cat ~/log/arome_france_15min.log\"\n17 * * * * bash -c \"source ~/mfkey.env; /usr/local/bin/openmeteo-api download-meteofrance arome_france_hd_15min > ~/log/arome_france_hd_15min.log 2>&1 || cat ~/log/arome_france_hd_15min.log\"\n15 9,21 * * * bash -c \"source ~/mfkey.env; /usr/local/bin/openmeteo-api download-meteofrance arpege_europe_probabilities > ~/log/arpege_europe_probabilities.log 2>&1 || cat ~/log/arpege_europe_probabilities.log\"\n```\n\n----------------------------------------\n\nTITLE: UK Met Office Model Download Cronjobs\nDESCRIPTION: Defines cronjobs to download data from the UK Met Office using `openmeteo-api download-ukmo`. It configures downloads for global and UK deterministic models, specifying surface, pressure, and height levels. The cronjobs are scheduled at varying intervals and log the output.\nSOURCE: https://github.com/open-meteo/open-meteo/blob/main/docs/cronjobs.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n0 3,9,15,19 * * * /usr/local/bin/openmeteo-api download-ukmo global_deterministic_10km --surface --pressure --height > ~/log/ukmo_global.log 2>&1 || cat ~/log/ukmo_global.log\n0 1-23/2 * * * /usr/local/bin/openmeteo-api download-ukmo uk_deterministic_2km --surface --pressure --height > ~/log/ukmo_uk.log 2>&1 || cat ~/log/ukmo_uk.log\n0 */2 * * * /usr/local/bin/openmeteo-api download-ukmo uk_deterministic_2km --surface --pressure --height > ~/log/ukmo_uk2.log 2>&1 || cat ~/log/ukmo_uk2.log\n```\n\n----------------------------------------\n\nTITLE: ECMWF IFS Model Download\nDESCRIPTION: Downloads ECMWF forecasts using the Open-Meteo API. The `--run` argument specifies the model run (e.g., 00). Currently, it is not possible to download a subset of weather variables, so all variables are downloaded.\nSOURCE: https://github.com/open-meteo/open-meteo/blob/main/docs/downloading-datasets.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n<exe> download-ecmwf --run 00\n```\n\n----------------------------------------\n\nTITLE: Running Open-Meteo Sync Command\nDESCRIPTION: This bash command runs the `openmeteo-api sync` command to synchronize data between a client and a server. It specifies the weather models, variables to synchronize, API key, server URL, and repeat interval. The process runs indefinitely, retrying every 5 minutes.\nSOURCE: https://github.com/open-meteo/open-meteo/blob/main/docs/sync-command.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nopenmeteo-api sync cmc_gem_gdps,dwd_icon temperature_2m,shortwave_radiation --apikey mykey123 --server https://myserver.com/ --repeat-interval 5\n```\n\n----------------------------------------\n\nTITLE: GEM Model Download Cronjobs\nDESCRIPTION: Configures cronjobs to download GEM model data, including `gem_hrdps_continental`, `gem_regional`, and `gem_global`, using `openmeteo-api download-gem`. The cronjobs run at specific times and log output to separate files.\nSOURCE: https://github.com/open-meteo/open-meteo/blob/main/docs/cronjobs.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n7 3,9,15,21 * * * /usr/local/bin/openmeteo-api download-gem gem_hrdps_continental > ~/log/gem_hrdps_continental.log 2>&1 || cat ~/log/gem_hrdps_continental.log\n47 2,8,14,20 * * * /usr/local/bin/openmeteo-api download-gem gem_regional > ~/log/gem_regional.log 2>&1 || cat ~/log/gem_regional.log\n39 3,15 * * * /usr/local/bin/openmeteo-api download-gem gem_global > ~/log/gem_global.log 2>&1 || cat ~/log/gem_global.log\n```\n\n----------------------------------------\n\nTITLE: Download GFS data\nDESCRIPTION: Downloads GFS (Global Forecast System) data using the openmeteo-api tool. Includes configurations for different resolutions and variables, with options for second-flush runs. Requires the `openmeteo-api` tool to be installed and configured.\nSOURCE: https://github.com/open-meteo/open-meteo/blob/main/docs/cronjobs.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n40 3,15 * * * /usr/local/bin/openmeteo-api download-gfs gfs025_ens > ~/log/gfs025_ens.log 2>&1 || cat ~/log/gfs025_ens.log\n40 3,15 * * * /usr/local/bin/openmeteo-api download-gfs gfs05_ens > ~/log/gfs05_ens.log 2>&1 || cat ~/log/gfs05_ens.log\n40 9,21 * * * /usr/local/bin/openmeteo-api download-gfs gfs025_ens > ~/log/gfs025_ens2.log 2>&1 || cat ~/log/gfs025_ens2.log\n40 9,21 * * * /usr/local/bin/openmeteo-api download-gfs gfs05_ens > ~/log/gfs05_ens2.log 2>&1 || cat ~/log/gfs05_ens2.log\n40 3,9,15,21 * * * /usr/local/bin/openmeteo-api download-gfs gfs05_ens --only-variables temperature_850hPa,temperature_500hPa,geopotential_height_850hPa,geopotential_height_500hPa > ~/log/gfs05_ens_upper.log 2>&1 || cat ~/log/gfs05_ens_upper.log\n55 23 * * * /usr/local/bin/openmeteo-api download-gfs gfs05_ens --second-flush --run 0 > ~/log/gfs05_ens-second-flush.log 2>&1 || cat ~/log/gfs05_ens-second-flush.log\n55 23 * * * /usr/local/bin/openmeteo-api download-gfs gfs05_ens --second-flush --run 0 --only-variables temperature_850hPa,temperature_500hPa,geopotential_height_850hPa,geopotential_height_500hPa > ~/log/gfs05_ens-second-flush_upper.log 2>&1 || cat ~/log/gfs05_ens-second-flush_upper.log\n```\n\n----------------------------------------\n\nTITLE: HRRR Model Download Cronjobs\nDESCRIPTION: Sets up cronjobs to download HRRR model data using `openmeteo-api download-gfs`. Two configurations exist: `hrrr_conus` and `hrrr_conus_15min`. The cronjobs run every minute and log the output.\nSOURCE: https://github.com/open-meteo/open-meteo/blob/main/docs/cronjobs.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n55 * * * * /usr/local/bin/openmeteo-api download-gfs hrrr_conus > ~/log/hrrr_conus.log 2>&1 || cat ~/log/hrrr_conus.log\n55 * * * * /usr/local/bin/openmeteo-api download-gfs hrrr_conus_15min > ~/log/hrrr_conus_15min.log 2>&1 || cat ~/log/hrrr_conus_15min.log\n```\n\n----------------------------------------\n\nTITLE: ERA5 Data Download\nDESCRIPTION: Downloads ERA5 data using the Open-Meteo API. The `<domain>` argument specifies the domain (e.g., era5). The `--cdskey` argument is required and should contain the Copernicus API key. The `--timeinterval` argument specifies the time range to download.\nSOURCE: https://github.com/open-meteo/open-meteo/blob/main/docs/downloading-datasets.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n<exe> download-era5 <domain> --cdskey XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n```\n\nLANGUAGE: bash\nCODE:\n```\n<exe> download-era5 <domain> --timeinterval 20220101-20220131 --cdskey ...\n```\n\nLANGUAGE: bash\nCODE:\n```\n<exe> download-era5 <domain> --timeinterval 20210101-20211231 --cdskey\n```\n\n----------------------------------------\n\nTITLE: DWD Ensemble Model Download Cronjobs\nDESCRIPTION: Configures cronjobs to download DWD ensemble model data (ICON-EPS, ICON-EU-EPS, ICON-D2-EPS) using `openmeteo-api download`. These are scheduled to run at specific times and log the output.  One entry includes the `--only-variables` flag to limit data downloaded.\nSOURCE: https://github.com/open-meteo/open-meteo/blob/main/docs/cronjobs.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n37 2,14  * * * /usr/local/bin/openmeteo-api download icon-eps > ~/log/icon-eps.log 2>&1 || cat ~/log/icon-eps.log\n37 2,8,14,20  * * * /usr/local/bin/openmeteo-api download icon-eu-eps > ~/log/icon-eu-eps.log 2>&1 || cat ~/log/icon-eu-eps.log\n30 1,4,7,10,13,16,19,22  * * * /usr/local/bin/openmeteo-api download icon-d2-eps > ~/log/icon-d2-eps.log 2>&1 || cat ~/log/icon-d2-eps.log\n30 1,4,7,10,13,16,19,22  * * * /usr/local/bin/openmeteo-api download icon-d2-eps --only-variables temperature_850hPa,temperature_500hPa,geopotential_height_850hPa,geopotential_height_500hPa > ~/log/icon-d2-eps_upper.log 2>&1 || cat ~/log/icon-d2-eps_upper.log\n```\n\n----------------------------------------\n\nTITLE: Download ERA5 data\nDESCRIPTION: Downloads ERA5 reanalysis data using the openmeteo-api tool. Requires a CDS API key. Different commands download ERA5, ERA5-Land, and ECMWF IFS data. Requires the `openmeteo-api` tool to be installed and configured, and a valid CDS API key and ECMWF account.\nSOURCE: https://github.com/open-meteo/open-meteo/blob/main/docs/cronjobs.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n30 0 * * * /usr/local/bin/openmeteo-api download-era5 era5 --cdskey xxxxxx-xxxx-xxx... > ~/log/era5.log 2>&1 || cat ~/log/era5.log\n0  0 * * * /usr/local/bin/openmeteo-api download-era5 era5_land --cdskey xxxxxx-xxxx-xxx... > ~/log/era5_land.log 2>&1 || cat ~/log/era5_land.log\n1  1 * * * /usr/local/bin/openmeteo-api download-era5 ecmwf_ifs --cdskey xxxxxxx --email xxxxxxxx > ~/log/ecmwf_archive.log 2>&1 || cat ~/log/ecmwf_archive.log\n```\n\n----------------------------------------\n\nTITLE: GFS GraphCast Model Download Cronjob\nDESCRIPTION: Defines a cronjob to download GFS GraphCast model data using `openmeteo-api download-gfs-graphcast`. It utilizes the `graphcast025` data source and specifies concurrency of 4. The cronjob is scheduled to run at specific hours.\nSOURCE: https://github.com/open-meteo/open-meteo/blob/main/docs/cronjobs.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n0 3,9,15,21 * * * /usr/local/bin/openmeteo-api download-gfs-graphcast graphcast025 --concurrent 4 > ~/log/graphcast025.log  2>&1 || cat ~/log/graphcast025.log\n```\n\n----------------------------------------\n\nTITLE: ECMWF Ensemble Model Download Cronjobs\nDESCRIPTION: Defines cronjobs for downloading ECMWF ensemble model data using `openmeteo-api download-ecmwf`. The configurations specify domains (`ifs04_ensemble`, `ifs025_ensemble`) and concurrency settings. The cronjobs are scheduled to run at particular times and log the output.\nSOURCE: https://github.com/open-meteo/open-meteo/blob/main/docs/cronjobs.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n45 7,19 * * * /usr/local/bin/openmeteo-api download-ecmwf --domain ifs04_ensemble > ~/log/ifs04_ensemble.log 2>&1 || cat ~/log/ifs04_ensemble.log\n0  1,13 * * * /usr/local/bin/openmeteo-api download-ecmwf --domain ifs04_ensemble > ~/log/ifs04_ensemble.log 2>&1 || cat ~/log/ifs04_ensemble.log\n45 7,19 * * * /usr/local/bin/openmeteo-api download-ecmwf --domain ifs025_ensemble --concurrent 4 > ~/log/ifs025_ensemble.log 2>&1 || cat ~/log/ifs025_ensemble.log\n0  1,13 * * * /usr/local/bin/openmeteo-api download-ecmwf --domain ifs025_ensemble --concurrent 4 > ~/log/ifs025_ensemble.log 2>&1 || cat ~/log/ifs025_ensemble.log\n```\n\n----------------------------------------\n\nTITLE: Download DEM Data\nDESCRIPTION: Downloads digital elevation model (DEM) data from AWS S3 using the `awscli`. It downloads Copernicus DSM COG 30m DEM files to the `dem-90m` directory. Requires `awscli` to be installed.\nSOURCE: https://github.com/open-meteo/open-meteo/blob/main/docs/downloading-datasets.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install awscli\naws s3 sync --no-sign-request --exclude \"*\" --include \"Copernicus_DSM_COG_30*/*_DEM.tif\" s3://copernicus-dem-90m/ dem-90m\n```\n\n----------------------------------------\n\nTITLE: Download ECMWF WAM data\nDESCRIPTION: Downloads ECMWF WAM (Wave Action Model) data using the openmeteo-api tool. Uses concurrent downloads and specifies the domain. Requires the `openmeteo-api` tool to be installed and configured.\nSOURCE: https://github.com/open-meteo/open-meteo/blob/main/docs/cronjobs.md#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n45  7,19 * * * /usr/local/bin/openmeteo-api download-ecmwf --concurrent 4 --domain wam025 > ~/log/ecmwf_wam025.log 2>&1 || cat ~/log/ecmwf_wam025.log\n0  1,13 * * * /usr/local/bin/openmeteo-api download-ecmwf --concurrent 4 --domain wam025 > ~/log/ecmwf_wam025.log 2>&1 || cat ~/log/ecmwf_wam025.log\n45  7,19 * * * /usr/local/bin/openmeteo-api download-ecmwf --concurrent 4 --domain wam025_ens > ~/log/ecmwf_wam025_ens.log 2>&1 || cat ~/log/ecmwf_wam025_ens.log\n0  1,13 * * * /usr/local/bin/openmeteo-api download-ecmwf --concurrent 4 --domain wam025_ens > ~/log/ecmwf_wam025_ens.log 2>&1 || cat ~/log/ecmwf_wam025_ens.log\n```\n\n----------------------------------------\n\nTITLE: Download GEM data\nDESCRIPTION: Downloads GEM (Global Environmental Multiscale Model) data using the openmeteo-api tool.  The first command downloads all variables, while the second downloads only temperature and geopotential height at specific pressure levels. Requires the `openmeteo-api` tool to be installed and configured.\nSOURCE: https://github.com/open-meteo/open-meteo/blob/main/docs/cronjobs.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n45 4,16 * * * /usr/local/bin/openmeteo-api download-gem gem_global_ensemble > ~/log/gem_global_ensemble.log 2>&1 || cat ~/log/gem_global_ensemble.log\n45 4,16 * * * /usr/local/bin/openmeteo-api download-gem gem_global_ensemble --only-variables temperature_850hPa,temperature_500hPa,geopotential_height_850hPa,geopotential_height_500hPa > ~/log/gem_global_ensemble_upper.log 2>&1 || cat ~/log/gem_global_ensemble_upper.log\n```\n\n----------------------------------------\n\nTITLE: Cronjobs for Cleaning Up Old Data\nDESCRIPTION: These cronjob commands automatically clean up old data by removing files based on their age and name patterns. The first command removes pressure level data older than 10 days, and the second command removes surface level data older than 90 days. The data is stored in `/var/lib/openmeteo-api/data/`.\nSOURCE: https://github.com/open-meteo/open-meteo/blob/main/docs/sync-command.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Remove pressure level data after 10 days\n0 * * * * find /var/lib/openmeteo-api/data/ -type f -name \"chunk_*\" -wholename \"*hPa*\" -mtime +10 -delete\n\n# Remove surface level data after 90 days\n5 * * * * find /var/lib/openmeteo-api/data/ -type f -name \"chunk_*\" -mtime +90 -delete\n```\n\n----------------------------------------\n\nTITLE: Automatic Data Synchronization Service Management\nDESCRIPTION: This snippet shows how to manage the automatic data synchronization service on Ubuntu. It includes commands for checking service status, restarting the service, and viewing service logs. Requires systemd and root privileges.\nSOURCE: https://github.com/open-meteo/open-meteo/blob/main/docs/getting-started.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl status openmeteo-sync\nsudo systemctl restart openmeteo-sync\nsudo journalctl -u openmeteo-sync.service\n```\n\n----------------------------------------\n\nTITLE: Download ERA5 Ocean data\nDESCRIPTION: Downloads ERA5 ocean wave data using the openmeteo-api tool. Downloads only wave height, direction, and period. Requires a CDS API key. Requires the `openmeteo-api` tool to be installed and configured, and a valid CDS API key.\nSOURCE: https://github.com/open-meteo/open-meteo/blob/main/docs/cronjobs.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n30 0 * * * /usr/local/bin/openmeteo-api download-era5 era5_ocean --only-variables wave_height,wave_direction,wave_period --cdskey xxxxxx-xxxx-xxx... > ~/log/era5_ocean.log 2>&1 || cat ~/log/era5_ocean.log\n```\n\n----------------------------------------\n\nTITLE: metno Model Download Cronjob\nDESCRIPTION: Sets up a cronjob to download data from met.no using `openmeteo-api download-metno`. The specific data source is `nordic_pp`.  The cronjob is scheduled to run every minute at the 27th second.\nSOURCE: https://github.com/open-meteo/open-meteo/blob/main/docs/cronjobs.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n27 * * * * /usr/local/bin/openmeteo-api download-metno nordic_pp > ~/log/nordic_pp.log 2>&1 || cat ~/log/nordic_pp.log\n```\n\n----------------------------------------\n\nTITLE: Download BOM data\nDESCRIPTION: Downloads BOM (Bureau of Meteorology) data using the openmeteo-api tool. Requires a server address and concurrent download setting.  Requires the `openmeteo-api` tool to be installed and configured, and the BOM server address.\nSOURCE: https://github.com/open-meteo/open-meteo/blob/main/docs/cronjobs.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n15 2,8,14,20 * * * /usr/local/bin/openmeteo-api download-bom access_global_ensemble --server xxxxxx --concurrent 4 > ~/log/bom_access_global_ensemble.log 2>&1 || cat ~/log/bom_access_global_ensemble.log\n```\n\n----------------------------------------\n\nTITLE: NBM Model Download Cronjob\nDESCRIPTION: Defines a cronjob to download NBM model data using `openmeteo-api download-nbm`. The configuration uses `nbm_conus` as the data source. The cronjob is executed every minute at the 55th second, logging its output.\nSOURCE: https://github.com/open-meteo/open-meteo/blob/main/docs/cronjobs.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n55 * * * * /usr/local/bin/openmeteo-api download-nbm nbm_conus > ~/log/nbm_conus.log 2>&1 || cat ~/log/nbm_conus.log\n```\n\n----------------------------------------\n\nTITLE: Build Docker Image from Source (Open-Meteo)\nDESCRIPTION: This snippet clones the Open-Meteo repository, builds a Docker image, creates a Docker volume for data storage, runs the API service, downloads digital elevation models, and temperature forecasts, then makes a curl request to the API.\nSOURCE: https://github.com/open-meteo/open-meteo/blob/main/docs/development.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Get Source code\ngit clone https://github.com/open-meteo/open-meteo.git\ncd open-meteo\n\n# Build Docker image\ndocker build -t open-meteo .\n\n# Create a Docker volume to store weather data\ndocker volume create --name open-meteo-data\n\n# Start the API service on http://127.0.0.1:8080\ndocker run -d --rm -v open-meteo-data:/app/data -p 8080:8080 open-meteo\n\n# Download the digital elevation model\ndocker run -it --rm -v open-meteo-data:/app/data open-meteo sync copernicus_dem90 static\n\n# Download global temperature forecast from GFS 13 km resolution \ndocker run -it --rm -v open-meteo-data:/app/data open-meteo sync ncep_gfs013 temperature_2m --past-days 3\n\n# Get your forecast\ncurl \"http://127.0.0.1:8080/v1/forecast?latitude=47.1&longitude=8.4&models=gfs_global&hourly=temperature_2m\"\n```\n\n----------------------------------------\n\nTITLE: ItaliaMeteoArpae Model Download Cronjob\nDESCRIPTION: Defines a cronjob to download data from ItaliaMeteoArpae using `openmeteo-api download-italia-meteo-arpae`. It uses the `icon_2i` data source with concurrency set to 4. The cronjob is scheduled to run at specific times of the day.\nSOURCE: https://github.com/open-meteo/open-meteo/blob/main/docs/cronjobs.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n0 2,14 * * * /usr/local/bin/openmeteo-api download-italia-meteo-arpae icon_2i --concurrent 4 > ~/log/icon_2i.log 2>&1 || cat ~/log/icon_2i.log\n```\n\n----------------------------------------\n\nTITLE: ERA5 Download Help\nDESCRIPTION: Displays the help information for the `openmeteo-api download-era5` command. It shows available options like `--timeinterval`, `--year`, and `--cdskey`.  Provides information about usage and downloading ERA5 data.\nSOURCE: https://github.com/open-meteo/open-meteo/blob/main/docs/downloading-datasets.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# openmeteo-api download-era5 --help\nUsage: openmeteo-api download-era5 <domain> [--timeinterval,-t] [--stripseaYear,-s] [--cdskey,-k]\n\nDownload ERA5 from the ECMWF climate data store and convert\n\nOptions:\n  timeinterval Timeinterval to download with format 20220101-20220131\n          year Download one year\n        cdskey CDS API key like: f412e2d2-4123-456...\n```\n\n----------------------------------------\n\nTITLE: Cronjobs for Removing Older Data\nDESCRIPTION: These cronjobs automatically remove older weather data files. The first one removes pressure level data older than 10 days, and the second removes surface level data older than 90 days. Requires cron to be installed and configured. The paths are hardcoded and might need to be adjusted.\nSOURCE: https://github.com/open-meteo/open-meteo/blob/main/docs/getting-started.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Remove pressure level data after 10 days\n0 * * * * find /var/lib/openmeteo-api/data/ -type f -name \"chunk_*\" -wholename \"*hPa*\" -mtime +10 -delete\n\n# Remove surface level data after 90 days\n5 * * * * find /var/lib/openmeteo-api/data/ -type f -name \"chunk_*\" -mtime +90 -delete\n```\n\n----------------------------------------\n\nTITLE: Download GloFAS data\nDESCRIPTION: Downloads GloFAS (Global Flood Awareness System) data using the openmeteo-api tool. Requires FTP credentials.  Includes commands for forecast and seasonal datasets. Requires the `openmeteo-api` tool to be installed and configured, along with GloFAS FTP credentials.\nSOURCE: https://github.com/open-meteo/open-meteo/blob/main/docs/cronjobs.md#_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\n0 12 * * *  /usr/local/bin/openmeteo-api download-glofas forecast --ftpuser xxxxx --ftppassword xxxxx > ~/log/glofas_forecast.log 2>&1 || cat ~/log/glofas_forecast.log\n0 14 10 * * /usr/local/bin/openmeteo-api download-glofas seasonal --ftpuser xxxxx --ftppassword xxxxx > ~/log/glofas_seasonal.log 2>&1 || cat ~/log/glofas_seasonal.log\n```\n\n----------------------------------------\n\nTITLE: Download MeteoFrance wave and current data\nDESCRIPTION: Downloads MeteoFrance wave and current data using the openmeteo-api tool. Uses concurrent downloads. Requires the `openmeteo-api` tool to be installed and configured.\nSOURCE: https://github.com/open-meteo/open-meteo/blob/main/docs/cronjobs.md#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n0  0,12 * * * /usr/local/bin/openmeteo-api download-mfwave mfwave --concurrent 4 > ~/log/mfwave.log 2>&1 || cat ~/log/mfwave.log\n0    12 * * * /usr/local/bin/openmeteo-api download-mfwave mfcurrents --concurrent 4 > ~/log/mfcurrents.log 2>&1 || cat ~/log/mfcurrents.log\n```\n\n----------------------------------------\n\nTITLE: Download DWD ICON wave data\nDESCRIPTION: Downloads DWD ICON wave model data (GWAM and EWAM) using the openmeteo-api tool. Requires the `openmeteo-api` tool to be installed and configured.\nSOURCE: https://github.com/open-meteo/open-meteo/blob/main/docs/cronjobs.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n40  3,15 * * * /usr/local/bin/openmeteo-api download-iconwave gwam > ~/log/iconwave_gwam.log 2>&1 || cat ~/log/iconwave_gwam.log\n30  3,15 * * * /usr/local/bin/openmeteo-api download-iconwave ewam > ~/log/iconwave_ewam.log 2>&1 || cat ~/log/iconwave_ewam.log\n```\n\n----------------------------------------\n\nTITLE: Download GFS wave data\nDESCRIPTION: Downloads GFS wave model data using the openmeteo-api tool. Includes configurations for different resolutions. Requires the `openmeteo-api` tool to be installed and configured.\nSOURCE: https://github.com/open-meteo/open-meteo/blob/main/docs/cronjobs.md#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n40 3,9,15,21 * * * /usr/local/bin/openmeteo-api download-gfs gfswave025 > ~/log/gfswave025.log 2>&1 || cat ~/log/gfswave025.log\n40 3,9,15,21 * * * /usr/local/bin/openmeteo-api download-gfs gfswave016 > ~/log/gfswave016.log 2>&1 || cat ~/log/gfswave016.log\n40 3,9,15,21 * * * /usr/local/bin/openmeteo-api download-gfs gfswave025_gfs > ~/log/gfswave025_gfs.log 2>&1 || cat ~/log/gfswave025_gfs.log\n```\n\n----------------------------------------\n\nTITLE: Download CAMS data\nDESCRIPTION: Downloads CAMS (Copernicus Atmosphere Monitoring Service) data using the openmeteo-api tool. Requires FTP credentials or a CDS API key, depending on the dataset. Includes commands for global and European datasets. Requires the `openmeteo-api` tool to be installed and configured, along with FTP credentials or a CDS API key.\nSOURCE: https://github.com/open-meteo/open-meteo/blob/main/docs/cronjobs.md#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\n30 8,20 * * * /usr/local/bin/openmeteo-api download-cams cams_global --ftpuser xxxxx --ftppassword xxxxx > ~/log/cams_global.log 2>&1 || cat ~/log/cams_global.log\n30 9 * * * /usr/local/bin/openmeteo-api download-cams cams_europe --cdskey xxxxxx-xxxx-xxx... > ~/log/cams_europe.log 2>&1 || cat ~/log/cams_europe.log\n30 9 * * * /usr/local/bin/openmeteo-api download-cams cams_global_greenhouse_gases --cdskey xxxxxx-xxxx-xxx... > ~/log/cams_global_greenhouse_gases.log 2>&1 || cat ~/log/cams_global_greenhouse_gases.log\n```\n\n----------------------------------------\n\nTITLE: Develop with Docker (Open-Meteo)\nDESCRIPTION: This snippet clones the Open-Meteo repository, creates a Docker volume, builds a development Docker image, runs the image with volume mounts and security options, and executes swift commands inside the container to run the API and download data.\nSOURCE: https://github.com/open-meteo/open-meteo/blob/main/docs/development.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/open-meteo/open-meteo.git\ncd open-meteo\n\n# Create a Docker volume to store weather data\ndocker volume create --name open-meteo-data\n\n# Install docker\ndocker build -f Dockerfile.development -t open-meteo-development .\ndocker run -it --security-opt seccomp=unconfined -p 8080:8080 -v ${PWD}:/app -v open-meteo-data:/app/data -t open-meteo-development /bin/bash\n# Run commands inside docker container:\nswift run\nswift run openmeteo-api download-ecmwf --run 00\n```\n\n----------------------------------------\n\nTITLE: Convert DEM Data\nDESCRIPTION: Converts the downloaded DEM data using the Open-Meteo API and removes the original data. It requires `gdal` to be installed and `gdal_translate` to be available. After conversion, the original `dem-90m` directory and the intermediate `data/dem90/` directory are removed.\nSOURCE: https://github.com/open-meteo/open-meteo/blob/main/docs/downloading-datasets.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n<exe> download-dem dem-90m\n```\n\nLANGUAGE: bash\nCODE:\n```\nrm -R dem-90m data/dem90/\n```\n\n----------------------------------------\n\nTITLE: Download Seasonal Forecast data (NCEP)\nDESCRIPTION: Downloads seasonal forecast data from NCEP using the openmeteo-api tool. Requires the `openmeteo-api` tool to be installed and configured.\nSOURCE: https://github.com/open-meteo/open-meteo/blob/main/docs/cronjobs.md#_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\n20 5,11,17,23 * * * /usr/local/bin/openmeteo-api download-seasonal-forecast ncep > ~/log/seasonal_ncep.log 2>&1 || cat ~/log/seasonal_ncep.log\n```\n\n----------------------------------------\n\nTITLE: Attribution Link Example\nDESCRIPTION: This snippet provides the HTML code for attributing Open-Meteo weather data. It includes a link to the Open-Meteo website, as required by the Attribution 4.0 International (CC BY 4.0) license.\nSOURCE: https://github.com/open-meteo/open-meteo/blob/main/README.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"https://open-meteo.com/\">Weather data by Open-Meteo.com</a>\n```\n\n----------------------------------------\n\nTITLE: Data Cleanup\nDESCRIPTION: Deletes forecast files older than 30 days. This script removes data to save storage space. Requires `find` command.\nSOURCE: https://github.com/open-meteo/open-meteo/blob/main/docs/cronjobs.md#_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\n5 * * * * find /var/lib/openmeteo-api/data/ -type f -name \"chunk_*\" -mtime +30 -delete\n```\n\n----------------------------------------\n\nTITLE: Develop on macOS (Open-Meteo)\nDESCRIPTION: This snippet clones the Open-Meteo repository and installs necessary dependencies via brew, then opens the Package.swift file to run the Swift project.\nSOURCE: https://github.com/open-meteo/open-meteo/blob/main/docs/development.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/open-meteo/open-meteo.git\ncd open-meteo\n\n# Install Xcode from the App store\n# Install brew\nbrew install netcdf cdo bzip2\nopen Package.swift\n# `swift run` works as well\n```\n\n----------------------------------------\n\nTITLE: Develop on Linux natively (Open-Meteo)\nDESCRIPTION: This snippet clones the Open-Meteo repository, installs the swift compiler and required dependencies on a Linux system, and then runs the Swift project.\nSOURCE: https://github.com/open-meteo/open-meteo/blob/main/docs/development.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/open-meteo/open-meteo.git\ncd open-meteo\n\n# Install the swift compiler as pointed out in the Vapor development guide\nsudo apt install libnetcdf-dev libeccodes-dev libbz2-dev build-essential cdo curl\nsudo apt-get install binutils git gnupg2 libc6-dev libcurl4-openssl-dev libedit2 libgcc-9-dev libpython3.8 \\\n  libsqlite3-0 libstdc++-9-dev libxml2-dev libz3-dev pkg-config tzdata unzip zlib1g-dev\nsudo apt install libbz2-dev libz-dev\n\nwget https://download.swift.org/swift-5.8.1-release/ubuntu2204/swift-5.8.1-RELEASE/swift-5.8.1-RELEASE-ubuntu22.04.tar.gz\ntar xvzf swift-5.8.1-RELEASE-ubuntu22.04.tar.gz\nsudo mv swift-5.8.1-RELEASE-ubuntu22.04 /opt\nln -s /opt/swift-5.8.1-RELEASE-ubuntu22.04/ /opt/swift\necho 'export PATH=/opt/swift/usr/bin:$PATH' >> ~/.bashrc\nsource ~/.bashrc\n\n# Test if swift is working\nswift --version\n\nswift run\nswift run openmeteo-api download-ecmwf --run 00\n```\n\n----------------------------------------\n\nTITLE: DWD ICON Download Help\nDESCRIPTION: Displays the help information for the `openmeteo-api download` command. It shows the required arguments (domain and run) and optional flags like `--only-variables` and `--skip-existing`. Provides information about the usage and available options for downloading ICON model data.\nSOURCE: https://github.com/open-meteo/open-meteo/blob/main/docs/downloading-datasets.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\napi# openmeteo-api download --help\nUsage: openmeteo-api download <domain> <run> [--only-variables] [--skip-existing]\n\nDownload a specified icon model run\n\nArguments:\n         domain            run\nOptions:\n  only-variables\nFlags:\n  skip-existing\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx for Open-Meteo API Server\nDESCRIPTION: This nginx configuration snippet sets up a reverse proxy for the Open-Meteo API server, enabling the NGINX sendfile feature for improved performance. It maps the `/data-internal` location to the Open-Meteo data directory and configures proxy settings for forwarding requests to the API server.\nSOURCE: https://github.com/open-meteo/open-meteo/blob/main/docs/sync-command.md#_snippet_0\n\nLANGUAGE: nginx\nCODE:\n```\nupstream vapor {\n    server 127.0.0.1:8080 fail_timeout=0;\n    keepalive 2048;\n}\n\nserver {\n    server_name myserver.com;\n\n    location /data-internal {\n       internal;\n       alias /var/lib/openmeteo-api/data;\n    }\n\n    location / {\n        try_files $uri @proxy;\n    }\n\n\n    location @proxy {\n        proxy_pass http://vapor;\n        proxy_set_header Connection \"\";\n        proxy_http_version 1.1;\n\t    proxy_pass_header Server;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_pass_header Server;\n        proxy_connect_timeout 3s;\n        proxy_read_timeout 10s;\n    }\n}\n```"
  }
]