[
  {
    "owner": "remix-run",
    "repo": "react-router",
    "content": "TITLE: Rendering Nested Routes with Outlet in React\nDESCRIPTION: Shows how to use the Outlet component from React Router to render child routes within a parent route component. This is crucial for creating nested layouts in React Router applications.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/framework/routing.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Outlet } from \"react-router\";\n\nexport default function Dashboard() {\n  return (\n    <div>\n      <h1>Dashboard</h1>\n      {/* will either be home.tsx or settings.tsx */}\n      <Outlet />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Routes with Route Components in React Router\nDESCRIPTION: This code snippet illustrates how to declare routes using Route components from React Router. It shows the basic structure for defining routes and their corresponding components, including examples of static and dynamic routes.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/declarative/index.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Route } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div>\n      <Route path=\"/\" element={<Home />} />\n      <Route path=\"/about\" element={<About />} />\n      <Route path=\"/projects/:projectId\" element={<Project />} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Server Data Loading with React Router\nDESCRIPTION: This snippet shows how to use the loader function for server-side data loading in React Router. It demonstrates fetching data from a fake database and using it in the component.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/framework/data-loading.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// route(\"products/:pid\", \"./product.tsx\");\nimport type { Route } from \"./+types/product\";\nimport { fakeDb } from \"../db\";\n\nexport async function loader({ params }: Route.LoaderArgs) {\n  const product = await fakeDb.getProduct(params.pid);\n  return product;\n}\n\nexport default function Product({\n  loaderData,\n}: Route.ComponentProps) {\n  const { name, description } = loaderData;\n  return (\n    <div>\n      <h1>{name}</h1>\n      <p>{description}</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Cookie Secret Rotation Implementation\nDESCRIPTION: Complete example showing how to implement cookie secret rotation in a React Router application.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/explanation/sessions-and-cookies.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport const cookie = createCookie(\"user-prefs\", {\n  secrets: [\"n3wsecr3t\", \"olds3cret\"],\n});\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { data } from \"react-router\";\nimport { cookie } from \"../cookies.server\";\nimport type { Route } from \"./+types/my-route\";\n\nexport async function loader({\n  request,\n}: Route.LoaderArgs) {\n  const oldCookie = request.headers.get(\"Cookie\");\n  // oldCookie may have been signed with \"olds3cret\", but still parses ok\n  const value = await cookie.parse(oldCookie);\n\n  return data(\"...\", {\n    headers: {\n      // Set-Cookie is signed with \"n3wsecr3t\"\n      \"Set-Cookie\": await cookie.serialize(value),\n    },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Action Function for Creating Contacts in React Router (TypeScript)\nDESCRIPTION: This snippet demonstrates how to export an action function in the root route to handle creating new contacts. It uses the createEmptyContact function and returns the created contact.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/tutorials/address-book.md#2025-04-22_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createEmptyContact } from \"./data\";\n\nexport async function action() {\n  const contact = await createEmptyContact();\n  return { contact };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Complex Routes in React Router\nDESCRIPTION: This snippet shows a more complex route configuration, including nested routes, index routes, and routes with parameters. It demonstrates how to structure a larger application with multiple pages and nested layouts.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/declarative/routing.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Routes>\n  <Route index element={<Home />} />\n  <Route path=\"about\" element={<About />} />\n\n  <Route element={<AuthLayout />}>\n    <Route path=\"login\" element={<Login />} />\n    <Route path=\"register\" element={<Register />} />\n  </Route>\n\n  <Route path=\"concerts\">\n    <Route index element={<ConcertsHome />} />\n    <Route path=\":city\" element={<City />} />\n    <Route path=\"trending\" element={<Trending />} />\n  </Route>\n</Routes>\n```\n\n----------------------------------------\n\nTITLE: Implementing Optimistic UI with Fetcher in React Router\nDESCRIPTION: Demonstrates how to implement optimistic UI updates using fetcher.formData to immediately reflect user input before the server responds.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/fetchers.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Component() {\n  let data = useLoaderData();\n  let fetcher = useFetcher();\n  let title = fetcher.formData?.get(\"title\") || data.title;\n\n  return (\n    <div>\n      <h1>{title}</h1>\n\n      <fetcher.Form method=\"post\">\n        <input type=\"text\" name=\"title\" />\n        {fetcher.state !== \"idle\" && <p>Saving...</p>}\n      </fetcher.Form>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Headers in Loader Function (TSX)\nDESCRIPTION: Shows how to set headers within a loader function by wrapping the return value in a data function. This method is useful when headers depend on loader data.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/headers.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { data } from \"react-router\";\n\nexport async function loader({ params }: LoaderArgs) {\n  let [page, ms] = await fakeTimeCall(\n    await getPage(params.id)\n  );\n\n  return data(page, {\n    headers: {\n      \"Server-Timing\": `page;dur=${ms};desc=\"Page query\"`,\n    },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: NavLink with Dynamic Children Render\nDESCRIPTION: Demonstrates using NavLink with a render function as children to conditionally render content based on active state.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/declarative/navigating.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<NavLink to=\"/message\">\n  {({ isActive }) => (\n    <span className={isActive ? \"active\" : \"\"}>\n      {isActive ? \"👉\" : \"\"} Tasks\n    </span>\n  )}\n</NavLink>\n```\n\n----------------------------------------\n\nTITLE: Implementing Complete User Profile with File Upload\nDESCRIPTION: Full implementation of user profile page with file upload handling, storage integration, and image display.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/file-uploads.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  type FileUpload,\n  parseFormData,\n} from \"@mjackson/form-data-parser\";\nimport {\n  fileStorage,\n  getStorageKey,\n} from \"~/avatar-storage.server\";\nimport type { Route } from \"./+types/user-profile\";\n\nexport async function action({\n  request,\n  params,\n}: Route.ActionArgs) {\n  async function uploadHandler(fileUpload: FileUpload) {\n    if (\n      fileUpload.fieldName === \"avatar\" &&\n      fileUpload.type.startsWith(\"image/\")\n    ) {\n      let storageKey = getStorageKey(params.id);\n\n      // FileUpload objects are not meant to stick around for very long (they are\n      // streaming data from the request.body); store them as soon as possible.\n      await fileStorage.set(storageKey, fileUpload);\n\n      // Return a File for the FormData object. This is a LazyFile that knows how\n      // to access the file's content if needed (using e.g. file.stream()) but\n      // waits until it is requested to actually read anything.\n      return fileStorage.get(storageKey);\n    }\n  }\n\n  const formData = await parseFormData(\n    request,\n    uploadHandler\n  );\n}\n\nexport default function UserPage({\n  actionData,\n  params,\n}: Route.ComponentProps) {\n  return (\n    <div>\n      <h1>User {params.id}</h1>\n      <form\n        method=\"post\"\n        // The form's enctype must be set to \"multipart/form-data\" for file uploads\n        encType=\"multipart/form-data\"\n      >\n        <input type=\"file\" name=\"avatar\" accept=\"image/*\" />\n        <button>Submit</button>\n      </form>\n\n      <img\n        src={`/user/${params.id}/avatar`}\n        alt=\"user avatar\"\n      />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Complex Routes in React Router\nDESCRIPTION: Illustrates a more complex route configuration with nested routes, including index routes and parameterized paths. This example shows how to structure a larger application with multiple pages and nested layouts.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/data/routing.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\ncreateBrowserRouter([\n  {\n    path: \"/\",\n    Component: Root,\n    children: [\n      { index: true, Component: Home },\n      { path: \"about\", Component: About },\n      {\n        path: \"auth\",\n        Component: AuthLayout,\n        children: [\n          { path: \"login\", Component: Login },\n          { path: \"register\", Component: Register },\n        ],\n      },\n      {\n        path: \"concerts\",\n        children: [\n          { index: true, Component: ConcertsHome },\n          { path: \":city\", Component: ConcertsCity },\n          { path: \"trending\", Component: ConcertsTrending },\n        ],\n      },\n    ],\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Using useActionData Hook with Form Submission in React Router\nDESCRIPTION: This snippet demonstrates how to use the useActionData hook in conjunction with a Form component to handle form submissions and display the returned action data. It includes an action function that processes the form data and a component that renders the form and displays the result.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/hooks/useActionData.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Form, useActionData } from \"react-router\";\n\nexport async function action({ request }) {\n  const body = await request.formData();\n  const name = body.get(\"visitorsName\");\n  return { message: `Hello, ${name}` };\n}\n\nexport default function Invoices() {\n  const data = useActionData();\n  return (\n    <Form method=\"post\">\n      <input type=\"text\" name=\"visitorsName\" />\n      {data ? data.message : \"Waiting...\"}\n    </Form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Loader Data in React Router Components\nDESCRIPTION: Shows how to use the useLoaderData hook to access data provided by the route loader within a React component. The data is automatically typed based on the loader's return type.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/data/data-loading.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLoaderData } from \"react-router\";\n\nfunction MyRoute() {\n  const { records } = useLoaderData();\n  return <div>{records.length}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a City Search Combobox Component with React Router Fetcher\nDESCRIPTION: This code snippet demonstrates the implementation of a CitySearchCombobox component using React Router's useFetcher hook. It handles real-time search as the user types, automatically managing request cancellation to prevent stale results.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/explanation/race-conditions.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport function CitySearchCombobox() {\n  const fetcher = useFetcher();\n\n  return (\n    <fetcher.Form action=\"/city-search\">\n      <Combobox aria-label=\"Cities\">\n        <ComboboxInput\n          name=\"q\"\n          onChange={(event) =>\n            // submit the form onChange to get the list of cities\n            fetcher.submit(event.target.form)\n          }\n        />\n\n        {fetcher.data ? (\n          <ComboboxPopover className=\"shadow-popup\">\n            {fetcher.data.length > 0 ? (\n              <ComboboxList>\n                {fetcher.data.map((city) => (\n                  <ComboboxOption\n                    key={city.id}\n                    value={city.name}\n                  />\n                ))}\n              </ComboboxList>\n            ) : (\n              <span>No results found</span>\n            )}\n          </ComboboxPopover>\n        ) : null}\n      </Combobox>\n    </fetcher.Form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Meta Tags with React Router's Meta Component in TSX\nDESCRIPTION: This snippet demonstrates how to use the Meta component from react-router to render meta tags in the head of an HTML document. The Meta component is responsible for rendering all the <meta> tags created by the meta export in route modules.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/components/Meta.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Meta } from \"react-router\";\n\nexport default function Root() {\n  return (\n    <html>\n      <head>\n        <Meta />\n      </head>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Preloading Lazy Routes Before Hydration in React Router\nDESCRIPTION: This code snippet shows the recommended approach for handling lazy routes in DIY SSR applications. It manually matches routes against the initial location, loads and updates any lazy routes before creating the router, ensuring synchronous hydration of SSR-rendered content.\nSOURCE: https://github.com/remix-run/react-router/blob/main/decisions/0002-lazy-route-modules.md#2025-04-22_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n// Determine if any of the initial routes are lazy\nlet lazyMatches = matchRoutes(routes, window.location)?.filter(\n  (m) => m.route.lazy\n);\n\n// Load the lazy matches and update the routes before creating your router\n// so we can hydrate the SSR-rendered content synchronously\nif (lazyMatches && lazyMatches.length > 0) {\n  await Promise.all(\n    lazyMatches.map(async (m) => {\n      let routeModule = await m.route.lazy!();\n      Object.assign(m.route, { ...routeModule, lazy: undefined });\n    })\n  );\n}\n\n// Create router and hydrate\nlet router = createBrowserRouter(routes)\nReactDOM.hydrateRoot(\n  document.getElementById(\"app\")!,\n  <RouterProvider router={router} fallbackElement={null} />\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Routes with React Router\nDESCRIPTION: Demonstrates how to set up a basic route configuration using createBrowserRouter. It shows the minimum required properties for a route: path and component.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/data/routing.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createBrowserRouter } from \"react-router\";\n\nfunction Root() {\n  return <h1>Hello world</h1>;\n}\n\nconst router = createBrowserRouter([\n  { path: \"/\", Component: Root },\n]);\n```\n\n----------------------------------------\n\nTITLE: Calling Actions with Form in React Router\nDESCRIPTION: Shows how to use the Form component from react-router to submit data to an action. This method causes a navigation and adds a new entry to the browser history.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/data/actions.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Form } from \"react-router\";\n\nfunction SomeComponent() {\n  return (\n    <Form action=\"/projects/123\" method=\"post\">\n      <input type=\"text\" name=\"title\" />\n      <button type=\"submit\">Submit</button>\n    </Form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Layout Routes in React Router\nDESCRIPTION: Illustrates how to create layout routes by omitting the path property. This example shows how to set up layouts for different sections of an application without adding URL segments.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/data/routing.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\ncreateBrowserRouter([\n  {\n    // no path on this parent route, just the component\n    Component: MarketingLayout,\n    children: [\n      { index: true, Component: Home },\n      { path: \"contact\", Component: Contact },\n    ],\n  },\n\n  {\n    path: \"projects\",\n    children: [\n      { index: true, Component: ProjectsHome },\n      {\n        // again, no path, just a component for the layout\n        Component: ProjectLayout,\n        children: [\n          { path: \":pid\", Component: Project },\n          { path: \":pid/edit\", Component: EditProject },\n        ],\n      },\n    ],\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Segments in React Router\nDESCRIPTION: Shows how to use dynamic segments in route paths and access them in loaders and components. This example demonstrates parsing URL parameters for a team page.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/data/routing.md#2025-04-22_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\n{\n  path: \"teams/:teamId\",\n  loader: async ({ params }) => {\n    // params are available in loaders/actions\n    let team = await fetchTeam(params.teamId);\n    return { name: team.name };\n  },\n  Component: Team,\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Search Params with useSearchParams Hook in React Router\nDESCRIPTION: This snippet shows how to update search parameters using the useSearchParams hook. It demonstrates setting new values, deleting parameters, and replacing the entire search string.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/search-params.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { useSearchParams } from \"react-router-dom\";\n\nfunction App() {\n  let [searchParams, setSearchParams] = useSearchParams();\n  function handleSubmit(event) {\n    event.preventDefault();\n    // The serialize function is some custom logic\n    let params = serialize(event.target);\n    setSearchParams(params);\n  }\n  return <form onSubmit={handleSubmit}>...<!-- your form elements --></form>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Route Objects with Loaders in React Router\nDESCRIPTION: Shows how to use route objects to define advanced behavior like data loading. This example demonstrates the use of a loader function to fetch data before rendering a component.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/data/routing.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  createBrowserRouter,\n  useLoaderData,\n} from \"react-router\";\n\ncreateBrowserRouter([\n  {\n    path: \"/teams/:teamId\",\n    loader: async ({ params }) => {\n      let team = await fetchTeam(params.teamId);\n      return { name: team.name };\n    },\n    Component: Team,\n  },\n]);\n\nfunction Team() {\n  let data = useLoaderData();\n  return <h1>{data.name}</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Links Component in React Router\nDESCRIPTION: Shows how to use the Links component to render all aggregated link elements from route modules in the app root.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/framework/route-module.md#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Links } from \"react-router\";\n\nexport default function Root() {\n  return (\n    <html>\n      <head>\n        <Links />\n      </head>\n\n      <body />\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nested Routes in React Router\nDESCRIPTION: This snippet demonstrates how to set up nested routes in React Router. It shows a dashboard route with nested home and settings routes, illustrating how parent routes automatically include their path in child routes.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/declarative/routing.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Routes>\n  <Route path=\"dashboard\" element={<Dashboard />}>\n    <Route index element={<Home />} />\n    <Route path=\"settings\" element={<Settings />} />\n  </Route>\n</Routes>\n```\n\n----------------------------------------\n\nTITLE: Optimized Form-based URL Parameter Management\nDESCRIPTION: Shows the recommended approach using React Router's Form component to manage view state directly through URL parameters without additional state synchronization.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/explanation/state-management.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Form, useSearchParams } from \"react-router\";\n\nexport function List() {\n  const [searchParams] = useSearchParams();\n  const view = searchParams.get(\"view\") || \"list\";\n\n  return (\n    <div>\n      <Form>\n        <button name=\"view\" value=\"list\">\n          View as List\n        </button>\n        <button name=\"view\" value=\"details\">\n          View with Details\n        </button>\n      </Form>\n      {view === \"list\" ? <ListView /> : <DetailView />}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Server-Side Routes in React Router\nDESCRIPTION: This snippet shows how to define server-side routes for React Router, including path, component, and loader definitions.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/data/custom.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport default [\n  {\n    path: \"/\",\n    Component: Root,\n    children: [\n      {\n        path: \"shows/:showId\",\n        Component: Show,\n        loader: ({ params }) => {\n          return db.loadShow(params.id);\n        },\n      },\n    ],\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Using reloadDocument for Full Page Navigation\nDESCRIPTION: Shows how to make a link use full document navigation instead of client-side routing.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/components/NavLink.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<Link to=\"/logout\" reloadDocument />\n```\n\n----------------------------------------\n\nTITLE: Using Props in React Router Route Component\nDESCRIPTION: Illustrates how to use the automatically generated props in a route component, including loaderData, actionData, params, and matches.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/framework/route-module.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Route } from \"./+types/route-name\";\n\nexport default function MyRouteComponent({\n  loaderData,\n  actionData,\n  params,\n  matches,\n}: Route.ComponentProps) {\n  return (\n    <div>\n      <h1>Welcome to My Route with Props!</h1>\n      <p>Loader Data: {JSON.stringify(loaderData)}</p>\n      <p>Action Data: {JSON.stringify(actionData)}</p>\n      <p>Route Parameters: {JSON.stringify(params)}</p>\n      <p>Matched Routes: {JSON.stringify(matches)}</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing NavLink Navigation Component in React Router\nDESCRIPTION: Demonstrates how to create a navigation menu using NavLink component for links that need active state styling. The NavLink component automatically adds an 'active' class when the route matches.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/declarative/navigating.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NavLink } from \"react-router\";\n\nexport function MyAppNav() {\n  return (\n    <nav>\n      <NavLink to=\"/\" end>\n        Home\n      </NavLink>\n      <NavLink to=\"/trending\" end>\n        Trending Concerts\n      </NavLink>\n      <NavLink to=\"/concerts\">All Concerts</NavLink>\n      <NavLink to=\"/account\">Account</NavLink>\n    </nav>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Loader Function in React Router\nDESCRIPTION: Demonstrates how to use a loader function to provide data to a route component before rendering, using useLoaderData hook.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/data/route-object.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  useLoaderData,\n  createBrowserRouter,\n} from \"react-router\";\n\ncreateBrowserRouter([\n  {\n    path: \"/\",\n    loader: loader,\n    Component: MyRoute,\n  },\n]);\n\nasync function loader({ params }) {\n  return { message: \"Hello, world!\" };\n}\n\nfunction MyRoute() {\n  let data = useLoaderData();\n  return <h1>{data.message}</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using useParams Hook in React Router\nDESCRIPTION: Demonstrates how to import and use the useParams hook to access URL parameters in a React component. The example shows accessing a postId parameter that would match a route pattern like /posts/:postId.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/hooks/useParams.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useParams } from \"react-router\"\n\nfunction SomeComponent() {\n  let params = useParams()\n  params.postId\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing File Upload Form Component\nDESCRIPTION: Creates a form component with file upload handling using parseFormData and upload handler function.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/file-uploads.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  type FileUpload,\n  parseFormData,\n} from \"@mjackson/form-data-parser\";\n\nexport async function action({\n  request,\n}: ActionFunctionArgs) {\n  const uploadHandler = async (fileUpload: FileUpload) => {\n    if (fileUpload.fieldName === \"avatar\") {\n      // process the upload and return a File\n    }\n  };\n\n  const formData = await parseFormData(\n    request,\n    uploadHandler\n  );\n  // 'avatar' has already been processed at this point\n  const file = formData.get(\"avatar\");\n}\n\nexport default function Component() {\n  return (\n    <form method=\"post\" encType=\"multipart/form-data\">\n      <input type=\"file\" name=\"avatar\" />\n      <button>Submit</button>\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Search Params with useSearchParams Hook in React Router\nDESCRIPTION: This snippet demonstrates how to use the useSearchParams hook to read search parameters from the URL. It shows how to access specific parameter values and check for their existence.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/search-params.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { useSearchParams } from \"react-router-dom\";\n\nfunction App() {\n  let [searchParams] = useSearchParams();\n  return (\n    <div>\n      <h1>Search Params</h1>\n      <p>x = {searchParams.get(\"x\")}</p>\n      <p>y is set: {searchParams.has(\"y\") ? \"true\" : \"false\"}</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Programmatic Navigation with useNavigate Hook\nDESCRIPTION: Example of using the useNavigate hook for programmatic navigation after form submission or other events.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/declarative/navigating.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useNavigate } from \"react-router\";\n\nexport function LoginPage() {\n  let navigate = useNavigate();\n\n  return (\n    <>\n      <MyHeader />\n      <MyLoginForm\n        onSuccess={() => {\n          navigate(\"/dashboard\");\n        }}\n      />\n      <MyFooter />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Segments in Route Configuration\nDESCRIPTION: Shows how to define routes with dynamic segments using the ':' prefix. It demonstrates how these dynamic segments are passed as params to the loader and component functions.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/framework/routing.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nroute(\"teams/:teamId\", \"./team.tsx\"),\n```\n\n----------------------------------------\n\nTITLE: Linking Between Routes in React Router\nDESCRIPTION: This snippet shows how to create links between routes using the Link and NavLink components from React Router. It demonstrates creating a navigation header with active state styling for the home link.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/declarative/routing.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NavLink, Link } from \"react-router\";\n\nfunction Header() {\n  return (\n    <nav>\n      {/* NavLink makes it easy to show active states */}\n      <NavLink\n        to=\"/\"\n        className={({ isActive }) =>\n          isActive ? \"active\" : \"\"\n        }\n      >\n        Home\n      </NavLink>\n\n      <Link to=\"/concerts/salt-lake-city\">Concerts</Link>\n    </nav>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding State to Location with Links\nDESCRIPTION: Shows how to add persistent client-side routing state when navigating to a new location.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/components/NavLink.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<Link to=\"/somewhere/else\" state={{ some: \"value\" }} />\n```\n\n----------------------------------------\n\nTITLE: Skipping Server Hop with Client and Server Loaders in React Router\nDESCRIPTION: This snippet demonstrates how to bypass the React Router server and communicate directly with a backend API using both server and client loaders. The server loader is used on initial load, while the client loader is used for subsequent navigations.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/client-data.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport async function loader({\n  request,\n}: Route.LoaderArgs) {\n  const data = await fetchApiFromServer({ request }); // (1)\n  return data;\n}\n\nexport async function clientLoader({\n  request,\n}: Route.ClientLoaderArgs) {\n  const data = await fetchApiFromClient({ request }); // (2)\n  return data;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Parameters using useParams Hook\nDESCRIPTION: Shows how to access route parameters using the useParams hook from React Router. The example demonstrates accessing a city parameter and using it to fetch data.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/declarative/url-values.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useParams } from \"react-router\";\n\nfunction City() {\n  let { city } = useParams();\n  let data = useFakeDataLibrary(`/api/v2/cities/${city}`);\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding State to Link Navigation in React Router\nDESCRIPTION: Demonstrates how to add persistent client-side routing state to the next location when using the Link component in React Router.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/components/Link.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<Link to=\"/somewhere/else\" state={{ some: \"value\" }} />\n```\n\n----------------------------------------\n\nTITLE: React 19 Suspense Implementation with React.use\nDESCRIPTION: Demonstrates the React 19 approach using React.use instead of Await component. Shows both the Suspense wrapper and the component implementation for handling promised data.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/suspense.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<React.Suspense fallback={<div>Loading...</div>}>\n  <NonCriticalUI p={nonCriticalData} />\n</React.Suspense>\n```\n\nLANGUAGE: tsx\nCODE:\n```\nfunction NonCriticalUI({ p }: { p: Promise<string> }) {\n  let value = React.use(p);\n  return <h3>Non critical value {value}</h3>;\n}\n```\n\n----------------------------------------\n\nTITLE: Navigation Form Pending State in React Router\nDESCRIPTION: Shows how to handle pending states for standard form submissions that cause navigation, using the useNavigation hook to track form submission state.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/framework/pending-ui.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useNavigation, Form } from \"react-router\";\n\nfunction NewProjectForm() {\n  const navigation = useNavigation();\n\n  return (\n    <Form method=\"post\" action=\"/projects/new\">\n      <input type=\"text\" name=\"title\" />\n      <button type=\"submit\">\n        {navigation.formAction === \"/projects/new\"\n          ? \"Submitting...\"\n          : \"Submit\"}\n      </button>\n    </Form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Styling NavLinks with style Prop\nDESCRIPTION: Shows how to use both static and dynamic styles with NavLink based on active and pending states.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/components/NavLink.md#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n<NavLink to=\"/tasks\" style={{ color: \"red\" }} />\n<NavLink to=\"/tasks\" style={({ isActive, isPending }) => ({\n  color:\n    isActive ? \"red\" :\n    isPending ? \"blue\" : \"black\"\n})} />\n```\n\n----------------------------------------\n\nTITLE: Installing React Router via npm\nDESCRIPTION: Installs the React Router package using npm. This command adds React Router as a dependency to the project.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/data/installation.md#2025-04-22_snippet_1\n\nLANGUAGE: shellscript\nCODE:\n```\nnpm i react-router\n```\n\n----------------------------------------\n\nTITLE: Using useRouteLoaderData Hook in React Router\nDESCRIPTION: Example showing how to import and use the useRouteLoaderData hook to access route loader data from a root route.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/hooks/useRouteLoaderData.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useRouteLoaderData } from \"react-router\";\n\nfunction SomeComponent() {\n  const { user } = useRouteLoaderData(\"root\");\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Root Error Boundary Component in React Router\nDESCRIPTION: Root error boundary component that handles three main error cases: route error responses, Error instances with stack traces, and unknown errors. This serves as the primary error handler for the application.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/error-boundary.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Route } from \"./+types/root\";\n\nexport function ErrorBoundary({\n  error,\n}: Route.ErrorBoundaryProps) {\n  if (isRouteErrorResponse(error)) {\n    return (\n      <>\n        <h1>\n          {error.status} {error.statusText}\n        </h1>\n        <p>{error.data}</p>\n      </>\n    );\n  } else if (error instanceof Error) {\n    return (\n      <div>\n        <h1>Error</h1>\n        <p>{error.message}</p>\n        <p>The stack trace is:</p>\n        <pre>{error.stack}</pre>\n      </div>\n    );\n  } else {\n    return <h1>Unknown Error</h1>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Route Configuration in TypeScript\nDESCRIPTION: Demonstrates how to configure basic routes using the route function from React Router. It shows the structure of a route with a path pattern and a file path to the route module.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/framework/routing.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  type RouteConfig,\n  route,\n} from \"@react-router/dev/routes\";\n\nexport default [\n  route(\"some/path\", \"./some/file.tsx\"),\n  // pattern ^           ^ module file\n] satisfies RouteConfig;\n```\n\n----------------------------------------\n\nTITLE: Creating and Rendering a React Router Configuration\nDESCRIPTION: Sets up a basic React Router configuration using createBrowserRouter and renders it using RouterProvider. This snippet demonstrates how to define a simple route and integrate it into a React application.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/data/installation.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  createBrowserRouter,\n  RouterProvider,\n} from \"react-router\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\n\nconst router = createBrowserRouter([\n  {\n    path: \"/\",\n    element: <div>Hello World</div>,\n  },\n]);\n\nconst root = document.getElementById(\"root\");\n\nReactDOM.createRoot(root).render(\n  <RouterProvider router={router} />\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring 'to' Prop for Link in React Router\nDESCRIPTION: Illustrates different ways to configure the 'to' prop for the Link component in React Router, including string and object formats.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/components/Link.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<Link to=\"/some/path\" />\n\n<Link\n  to={{\n    pathname: \"/some/path\",\n    search: \"?query=string\",\n    hash: \"#hash\",\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Client Actions in React Router\nDESCRIPTION: Demonstrates how to define and use a client-side action in a React Router component. The action handles form submission to update a project title.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/framework/actions.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// route('/projects/:projectId', './project.tsx')\nimport type { Route } from \"./+types/project\";\nimport { Form } from \"react-router\";\nimport { someApi } from \"./api\";\n\nexport async function clientAction({\n  request,\n}: Route.ClientActionArgs) {\n  let formData = await request.formData();\n  let title = formData.get(\"title\");\n  let project = await someApi.updateProject({ title });\n  return project;\n}\n\nexport default function Project({\n  actionData,\n}: Route.ComponentProps) {\n  return (\n    <div>\n      <h1>Project</h1>\n      <Form method=\"post\">\n        <input type=\"text\" name=\"title\" />\n        <button type=\"submit\">Submit</button>\n      </Form>\n      {actionData ? (\n        <p>{actionData.title} updated</p>\n      ) : null}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: User Preferences Component with Cookie Integration\nDESCRIPTION: Complete example of a React component using cookies for user preferences, including loader and action functions for reading and writing cookie data.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/explanation/sessions-and-cookies.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Link, Form, redirect } from \"react-router\";\nimport type { Route } from \"./+types/home\";\n\nimport { userPrefs } from \"../cookies.server\";\n\nexport async function loader({\n  request,\n}: Route.LoaderArgs) {\n  const cookieHeader = request.headers.get(\"Cookie\");\n  const cookie =\n    (await userPrefs.parse(cookieHeader)) || {};\n  return { showBanner: cookie.showBanner };\n}\n\nexport async function action({\n  request,\n}: Route.ActionArgs) {\n  const cookieHeader = request.headers.get(\"Cookie\");\n  const cookie =\n    (await userPrefs.parse(cookieHeader)) || {};\n  const bodyParams = await request.formData();\n\n  if (bodyParams.get(\"bannerVisibility\") === \"hidden\") {\n    cookie.showBanner = false;\n  }\n\n  return redirect(\"/\", {\n    headers: {\n      \"Set-Cookie\": await userPrefs.serialize(cookie),\n    },\n  });\n}\n\nexport default function Home({\n  loaderData,\n}: Route.ComponentProps) {\n  return (\n    <div>\n      {loaderData.showBanner ? (\n        <div>\n          <Link to=\"/sale\">Don't miss our sale!</Link>\n          <Form method=\"post\">\n            <input\n              type=\"hidden\"\n              name=\"bannerVisibility\"\n              value=\"hidden\"\n            />\n            <button type=\"submit\">Hide</button>\n          </Form>\n        </div>\n      ) : null}\n      <h1>Welcome!</h1>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using New Route.LoaderArgs and Route.ActionArgs Types in React Router v7\nDESCRIPTION: This snippet demonstrates how to use the new Route.LoaderArgs and Route.ActionArgs types in a route file after migrating to React Router v7. It shows type-safe access to the context object in loaders and actions.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/upgrading/remix.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Route } from \"./+types/my-route\";\n\nexport function loader({ context }: Route.LoaderArgs) {}\n// { whatever: string }  ^^^^^^^\n\nexport function action({ context }: Route.ActionArgs) {}\n// { whatever: string }  ^^^^^^^\n\n```\n\n----------------------------------------\n\nTITLE: Using navigate() with replace option in React Router\nDESCRIPTION: This snippet shows how to use the navigate function with the replace option to replace the current entry in the history stack. This prevents users from returning to the login page when using the back button after authentication.\nSOURCE: https://github.com/remix-run/react-router/blob/main/examples/auth/README.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nnavigate(\"/dashboard\", { replace: true });\n```\n\n----------------------------------------\n\nTITLE: Using NavLink for Active Link Styling in React Router\nDESCRIPTION: This code demonstrates how to use NavLink component for active link styling in React Router, including handling active and pending states.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/tutorials/address-book.md#2025-04-22_snippet_28\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Form, Link, NavLink, Outlet } from \"react-router\";\n\n// existing imports and exports\n\nexport default function SidebarLayout({\n  loaderData,\n}: Route.ComponentProps) {\n  const { contacts } = loaderData;\n\n  return (\n    <>\n      <div id=\"sidebar\">\n        {/* existing elements */}\n        <ul>\n          {contacts.map((contact) => (\n            <li key={contact.id}>\n              <NavLink\n                className={({ isActive, isPending }) =>\n                  isActive\n                    ? \"active\"\n                    : isPending\n                    ? \"pending\"\n                    : \"\"\n                }\n                to={`contacts/${contact.id}`}\n              >\n                {/* existing elements */}\n              </NavLink>\n            </li>\n          ))}\n        </ul>\n        {/* existing elements */}\n      </div>\n      {/* existing elements */}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Actions with useSubmit in React Router\nDESCRIPTION: Shows how to call an action imperatively using the useSubmit hook in React Router. This example sets up a timer to submit form data after 10 minutes.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/framework/actions.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCallback } from \"react\";\nimport { useSubmit } from \"react-router\";\nimport { useFakeTimer } from \"fake-lib\";\n\nfunction useQuizTimer() {\n  let submit = useSubmit();\n\n  let cb = useCallback(() => {\n    submit(\n      { quizTimedOut: true },\n      { action: \"/end-quiz\", method: \"post\" }\n    );\n  }, []);\n\n  let tenMinutes = 10 * 60 * 1000;\n  useFakeTimer(tenMinutes, cb);\n}\n```\n\n----------------------------------------\n\nTITLE: Using useNavigate Hook in React Component\nDESCRIPTION: Demonstrates how to use the useNavigate hook from React Router to enable programmatic navigation. This example shows a button that navigates back one step in the browser history when clicked.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/hooks/useNavigate.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useNavigate } from \"react-router\";\n\nfunction SomeComponent() {\n  let navigate = useNavigate();\n  return (\n    <button\n      onClick={() => {\n        navigate(-1);\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Actions Imperatively with Fetcher in React Router\nDESCRIPTION: Shows how to call an action imperatively using the submit method of a fetcher in React Router.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/framework/actions.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nfetcher.submit(\n  { title: \"New Title\" },\n  { action: \"/update-task/123\", method: \"post\" }\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom Children in NavLink for React Router\nDESCRIPTION: This example demonstrates how to use the children prop of NavLink as a function. It allows for custom rendering based on the link's active state.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/framework/navigating.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<NavLink to=\"/tasks\">\n  {({ isActive, isPending, isTransitioning }) => (\n    <span className={isActive ? \"active\" : \"\"}>Tasks</span>\n  )}\n</NavLink>\n```\n\n----------------------------------------\n\nTITLE: Using redirect in React Router Loader\nDESCRIPTION: This snippet illustrates how to use the redirect function in a route loader. It checks for user authentication and redirects to the login page if the user is not authenticated.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/framework/navigating.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { redirect } from \"react-router\";\n\nexport async function loader({ request }) {\n  let user = await getUser(request);\n  if (!user) {\n    return redirect(\"/login\");\n  }\n  return { userName: user.name };\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Server and Client Data in React Router\nDESCRIPTION: This code snippet shows how to combine data from both server and client sources before rendering a component. It uses a server loader for partial data, a client loader to combine data, and a HydrateFallback component for SSR rendering.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/client-data.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport async function loader({\n  request,\n}: Route.LoaderArgs) {\n  const partialData = await getPartialDataFromDb({\n    request,\n  }); // (1)\n  return partialData;\n}\n\nexport async function clientLoader({\n  request,\n  serverLoader,\n}: Route.ClientLoaderArgs) {\n  const [serverData, clientData] = await Promise.all([\n    serverLoader(),\n    getClientData(request),\n  ]);\n  return {\n    ...serverData, // (4)\n    ...clientData, // (4)\n  };\n}\nclientLoader.hydrate = true as const; // (3)\n\nexport function HydrateFallback() {\n  return <p>Skeleton rendered during SSR</p>; // (2)\n}\n\nexport default function Component({\n  // This will always be the combined set of server + client data\n  loaderData,\n}: Route.ComponentProps) {\n  return <>...</>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Actions in React Router\nDESCRIPTION: Shows how to define and use a server-side action in a React Router component. The action handles form submission to update a project title in a database.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/framework/actions.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// route('/projects/:projectId', './project.tsx')\nimport type { Route } from \"./+types/project\";\nimport { Form } from \"react-router\";\nimport { fakeDb } from \"../db\";\n\nexport async function action({\n  request,\n}: Route.ActionArgs) {\n  let formData = await request.formData();\n  let title = formData.get(\"title\");\n  let project = await fakeDb.updateProject({ title });\n  return project;\n}\n\nexport default function Project({\n  actionData,\n}: Route.ComponentProps) {\n  return (\n    <div>\n      <h1>Project</h1>\n      <Form method=\"post\">\n        <input type=\"text\" name=\"title\" />\n        <button type=\"submit\">Submit</button>\n      </Form>\n      {actionData ? (\n        <p>{actionData.title} updated</p>\n      ) : null}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Basic Route Configuration in React Router\nDESCRIPTION: Basic setup for using flatRoutes from @react-router/fs-routes to provide route configuration in app/routes.ts file.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/file-route-conventions.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type RouteConfig } from \"@react-router/dev/routes\";\nimport { flatRoutes } from \"@react-router/fs-routes\";\n\nexport default flatRoutes() satisfies RouteConfig;\n```\n\n----------------------------------------\n\nTITLE: Implementing an Error Boundary with useRouteError in React Router\nDESCRIPTION: Example of creating an Error Boundary component that uses the useRouteError hook to access and display error messages thrown during action functions, loader functions, or component renders.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/hooks/useRouteError.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport function ErrorBoundary() {\n  const error = useRouteError();\n  return <div>{error.message}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Project Setup and Development Server\nDESCRIPTION: Commands to navigate to the project directory, install dependencies, and start the development server.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/framework/installation.md#2025-04-22_snippet_1\n\nLANGUAGE: shellscript\nCODE:\n```\ncd my-react-router-app\nnpm i\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Implementing Action Function for Updating Contacts in React Router (TypeScript)\nDESCRIPTION: This snippet shows how to implement an action function to handle updating contacts. It uses FormData to extract form data, updates the contact, and redirects to the contact page.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/tutorials/address-book.md#2025-04-22_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Form, redirect } from \"react-router\";\n// existing imports\n\nimport { getContact, updateContact } from \"../data\";\n\nexport async function action({\n  params,\n  request,\n}: Route.ActionArgs) {\n  const formData = await request.formData();\n  const updates = Object.fromEntries(formData);\n  await updateContact(params.contactId, updates);\n  return redirect(`/contacts/${params.contactId}`);\n}\n```\n\n----------------------------------------\n\nTITLE: Submitting JSON data using useSubmit hook - JavaScript\nDESCRIPTION: This code demonstrates how to submit JSON data using the `useSubmit` hook in React Router with `application/json` encoding. It shows how to specify the `encType` option during submission and how to access the submitted data in the server-side action.\nSOURCE: https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#_snippet_42\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction Component() {\n  let navigation = useNavigation();\n  let submit = useSubmit();\n  submit({ key: \"value\" }, { method: \"post\", encType: \"application/json\" });\n  // navigation.formEncType => \"application/json\"\n  // navigation.json        => { key: \"value\" }\n}\n\nasync function action({ request }) {\n  // request.headers.get(\"Content-Type\") => \"application/json\"\n  // await request.json()                => { key: \"value\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Using useSearchParams Hook in React Router\nDESCRIPTION: Example of importing and using the useSearchParams hook in a React component. This hook returns the current URL search parameters and a function to update them, causing navigation when modified.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/hooks/useSearchParams.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSearchParams } from \"react-router\";\n\nexport function SomeComponent() {\n  const [searchParams, setSearchParams] = useSearchParams();\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Headers in Route Module (TSX)\nDESCRIPTION: Demonstrates how to export a headers function from a route module to set various HTTP headers. The function returns an object with key-value pairs representing header names and values.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/headers.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Route } from \"./+types/some-route\";\n\nexport function headers(_: Route.HeadersArgs) {\n  return {\n    \"Content-Security-Policy\": \"default-src 'self'\",\n    \"X-Frame-Options\": \"DENY\",\n    \"X-Content-Type-Options\": \"nosniff\",\n    \"Cache-Control\": \"max-age=3600, s-maxage=86400\",\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Actions with Fetcher in React Router\nDESCRIPTION: Illustrates how to use a fetcher to submit data to actions without causing a navigation. This example includes both declarative (Form) and imperative (submit) approaches.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/data/actions.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useFetcher } from \"react-router\";\n\nfunction Task() {\n  let fetcher = useFetcher();\n  let busy = fetcher.state !== \"idle\";\n\n  return (\n    <fetcher.Form method=\"post\" action=\"/update-task/123\">\n      <input type=\"text\" name=\"title\" />\n      <button type=\"submit\">\n        {busy ? \"Saving...\" : \"Save\"}\n      </button>\n    </fetcher.Form>\n  );\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nfetcher.submit(\n  { title: \"New Title\" },\n  { action: \"/update-task/123\", method: \"post\" }\n);\n```\n\n----------------------------------------\n\nTITLE: Using Search Parameters with useSearchParams Hook\nDESCRIPTION: Demonstrates how to access URL search parameters using the useSearchParams hook. The example shows how to retrieve and display a search query parameter.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/declarative/url-values.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction SearchResults() {\n  let [searchParams] = useSearchParams();\n  return (\n    <div>\n      <p>\n        You searched for <i>{searchParams.get(\"q\")}</i>\n      </p>\n      <FakeSearchResults />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useAsyncValue Hook with Await Component in React Router\nDESCRIPTION: This example demonstrates how to use the useAsyncValue hook to access a resolved promise value from the closest parent Await component in a React Router application.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/hooks/useAsyncValue.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nfunction SomeDescendant() {\n  const value = useAsyncValue();\n  // ...\n}\n\n// somewhere in your app\n<Await resolve={somePromise}>\n  <SomeDescendant />\n</Await>;\n```\n\n----------------------------------------\n\nTITLE: Redirecting to Edit Page After Creating New Contact\nDESCRIPTION: This snippet shows how to redirect to the edit page of a newly created contact in React Router.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/tutorials/address-book.md#2025-04-22_snippet_27\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n  isRouteErrorResponse,\n  redirect,\n} from \"react-router\";\n// existing imports\n\nexport async function action() {\n  const contact = await createEmptyContact();\n  return redirect(`/contacts/${contact.id}/edit`);\n}\n\n// existing code\n```\n\n----------------------------------------\n\nTITLE: Initiating Streamed Response in Loader using defer() - TypeScript\nDESCRIPTION: Demonstrates how to use the defer() utility in a loader to initiate a streamed response. It shows how to handle both critical (awaited) and lazy (streamed) data.\nSOURCE: https://github.com/remix-run/react-router/blob/main/decisions/0004-streaming-apis.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function loader() {\n  return defer({\n    // Await this, don't stream\n    critical: await fetchCriticalData(),\n    // Don't await this - stream it!\n    lazy: fetchLazyData(),\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Location Object with useLocation Hook\nDESCRIPTION: Shows how to use the useLocation hook to access the current location object for analytics and scroll restoration purposes. Demonstrates usage in custom hooks.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/declarative/url-values.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nfunction useAnalytics() {\n  let location = useLocation();\n  useEffect(() => {\n    sendFakeAnalytics(location.pathname);\n  }, [location]);\n}\n\nfunction useScrollRestoration() {\n  let location = useLocation();\n  useEffect(() => {\n    fakeRestoreScroll(location.key);\n  }, [location]);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Index Routes in React Router\nDESCRIPTION: This snippet shows how to configure index routes in React Router. Index routes render into their parent's Outlet at the parent's URL, acting as a default child route. They are configured using the index prop.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/declarative/routing.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<Routes>\n  <Route path=\"/\" element={<Root />}>\n    {/* renders into the outlet in <Root> at \"/\" */}\n    <Route index element={<Home />} />\n\n    <Route path=\"dashboard\" element={<Dashboard />}>\n      {/* renders into the outlet in <Dashboard> at \"/dashboard\" */}\n      <Route index element={<DashboardHome />} />\n      <Route path=\"settings\" element={<Settings />} />\n    </Route>\n  </Route>\n</Routes>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Link Component in React Router\nDESCRIPTION: Demonstrates the basic usage of the Link component for client-side navigation in React Router.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/components/Link.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Link } from \"react-router\";\n\n<Link to=\"/dashboard\">Dashboard</Link>;\n\n<Link\n  to={{\n    pathname: \"/some/path\",\n    search: \"?query=string\",\n    hash: \"#hash\",\n  }}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Using useLoaderData Hook with TypeScript in React Router\nDESCRIPTION: Demonstrates how to use the useLoaderData hook to retrieve data from a loader function in a React component. The loader function fetches invoices from a fake database, and the component uses the hook to access this data.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/hooks/useLoaderData.md#2025-04-22_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport { useLoaderData } from \"react-router\";\n\nexport async function loader() {\n  return await fakeDb.invoices.findAll();\n}\n\nexport default function Invoices() {\n  let invoices = useLoaderData<typeof loader>();\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Client Action in React Router\nDESCRIPTION: Illustrates how to implement a client-side action that can also call the server action if needed.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/framework/route-module.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nexport async function clientAction({ serverAction }) {\n  fakeInvalidateClientSideCache();\n  // can still call the server action if needed\n  const data = await serverAction();\n  return data;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Outlet Component in React Router\nDESCRIPTION: This snippet demonstrates how to use the Outlet component in a parent route to render matching child routes. The Outlet renders the matching child route at the specified location in the parent component.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/components/Outlet.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Outlet } from \"react-router\";\n\nexport default function SomeParent() {\n  return (\n    <div>\n      <h1>Parent Content</h1>\n      <Outlet />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useFetcher Hook in React Router\nDESCRIPTION: Demonstrates the basic usage of useFetcher hook including state tracking, form handling, and data operations. The hook provides methods for loading data and submitting forms without causing navigation, while maintaining independent state management.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/hooks/useFetcher.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useFetcher } from \"react-router\"\n\nfunction SomeComponent() {\n  let fetcher = useFetcher()\n\n  // states are available on the fetcher\n  fetcher.state // \"idle\" | \"loading\" | \"submitting\"\n  fetcher.data // the data returned from the action or loader\n\n  // render a form\n  <fetcher.Form method=\"post\" />\n\n  // load data\n  fetcher.load(\"/some/route\")\n\n  // submit data\n  fetcher.submit(someFormRef, { method: \"post\" })\n  fetcher.submit(someData, {\n    method: \"post\",\n    encType: \"application/json\"\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using Form Component in React Router\nDESCRIPTION: Example of using the Form component in React Router to create a new event form that submits data to the /events endpoint using a POST method.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/components/Form.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Form } from \"react-router\";\n\nfunction NewEvent() {\n  return (\n    <Form action=\"/events\" method=\"post\">\n      <input name=\"title\" type=\"text\" />\n      <input name=\"description\" type=\"text\" />\n    </Form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Login Form Component with React Router Hooks\nDESCRIPTION: Example of a login form component that uses useActionData hook from React Router to handle form validation errors and display them to the user.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/framework/testing.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useActionData } from \"react-router\";\n\nexport function LoginForm() {\n  const { errors } = useActionData();\n  return (\n    <Form method=\"post\">\n      <label>\n        <input type=\"text\" name=\"username\" />\n        {errors?.username && <div>{errors.username}</div>}\n      </label>\n\n      <label>\n        <input type=\"password\" name=\"password\" />\n        {errors?.password && <div>{errors.password}</div>}\n      </label>\n\n      <button type=\"submit\">Login</button>\n    </Form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Search Box with Progressive Enhancement in React Router\nDESCRIPTION: This snippet demonstrates a simple search box implementation using React Router's Form component. It works without JavaScript and uses the URL as the source of truth for the UI.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/explanation/progressive-enhancement.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport function SearchBox() {\n  return (\n    <Form method=\"get\" action=\"/search\">\n      <input type=\"search\" name=\"query\" />\n      <SearchIcon />\n    </Form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Route Component in React Router\nDESCRIPTION: Shows how to define a Component property in a route object and implement the corresponding React component.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/data/route-object.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\ncreateBrowserRouter([\n  {\n    path: \"/\",\n    Component: MyRouteComponent,\n  },\n]);\n\nfunction MyRouteComponent() {\n  return (\n    <div>\n      <h1>Look ma!</h1>\n      <p>\n        I'm still using React Router after like 10 years.\n      </p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ignored Route Files in React Router\nDESCRIPTION: Example of using the ignoredRouteFiles option to specify files that should not be included as routes.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/file-route-conventions.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type RouteConfig } from \"@react-router/dev/routes\";\nimport { flatRoutes } from \"@react-router/fs-routes\";\n\nexport default flatRoutes({\n  ignoredRouteFiles: [\"home.tsx\"],\n}) satisfies RouteConfig;\n```\n\n----------------------------------------\n\nTITLE: Accessing Action Data in React Router\nDESCRIPTION: Shows how to access action data using the useActionData hook in a route component. This example displays a confirmation message after updating a project title.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/data/actions.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Project() {\n  let actionData = useActionData();\n  return (\n    <div>\n      <h1>Project</h1>\n      <Form method=\"post\">\n        <input type=\"text\" name=\"title\" />\n        <button type=\"submit\">Submit</button>\n      </Form>\n      {actionData ? (\n        <p>{actionData.title} updated</p>\n      ) : null}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Await Implementation with Loader\nDESCRIPTION: Provides a full example of using Await with a loader function, showing how promises are passed through the component tree.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/components/Await.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useLoaderData, Await } from \"react-router\";\n\nexport async function loader() {\n  let reviews = getReviews(); // not awaited\n  let book = await getBook();\n  return {\n    book,\n    reviews, // this is a promise\n  };\n}\n\nexport default function Book() {\n  const {\n    book,\n    reviews, // this is the same promise\n  } = useLoaderData();\n\n  return (\n    <div>\n      <h1>{book.title}</h1>\n      <p>{book.description}</p>\n      <React.Suspense fallback={<ReviewsSkeleton />}>\n        <Await\n          // and is the promise we pass to Await\n          resolve={reviews}\n        >\n          <Reviews />\n        </Await>\n      </React.Suspense>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useNavigate Hook in React Router\nDESCRIPTION: This snippet demonstrates the use of the useNavigate hook from React Router. It shows how to programmatically navigate the user to a new page without user interaction, in this case, logging out after inactivity.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/framework/navigating.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useNavigate } from \"react-router\";\n\nexport function useLogoutAfterInactivity() {\n  let navigate = useNavigate();\n\n  useFakeInactivityHook(() => {\n    navigate(\"/logout\");\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Lazy Loading in React Router\nDESCRIPTION: Shows how to use lazy loading to dynamically import route components and loaders, reducing initial bundle size.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/data/route-object.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\ncreateBrowserRouter([\n  {\n    path: \"/app\",\n    lazy: async () => {\n      // load component and loader in parallel before rendering\n      const [Component, loader] = await Promise.all([\n        import(\"./app\"),\n        import(\"./app-loader\"),\n      ]);\n      return { Component, loader };\n    },\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Search on User Input with Fetcher in React Router\nDESCRIPTION: Demonstrates how to use fetcher.submit to trigger a search on user input in a combobox component.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/fetchers.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<fetcher.Form method=\"get\" action=\"/search-users\">\n  <input\n    type=\"text\"\n    name=\"q\"\n    onChange={(event) => {\n      fetcher.submit(event.currentTarget.form);\n    }}\n  />\n</fetcher.Form>\n```\n\n----------------------------------------\n\nTITLE: Basic Link View Transition Setup - TSX\nDESCRIPTION: Simple example of enabling view transitions on a Link component in React Router.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/view-transitions.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Link to=\"/about\" viewTransition>\n  About\n</Link>\n```\n\n----------------------------------------\n\nTITLE: Lazy Route Loading - React Router (JSX)\nDESCRIPTION: Demonstrates how to use the `lazy` property in React Router to enable code-splitting for routes.  The `lazy` property accepts an async function (typically a dynamic import) that resolves the route's non-route-matching properties (`loader`, `action`, `element`/`Component`, `errorElement`/`ErrorBoundary`, `shouldRevalidate`, `handle`). This allows for on-demand loading of route modules, improving initial load time.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router/CHANGELOG.md#_snippet_34\n\nLANGUAGE: jsx\nCODE:\n```\n// In this example, we assume most folks land on the homepage so we include that\n// in our critical-path bundle, but then we lazily load modules for /a and /b so\n// they don't load until the user navigates to those routes\nlet routes = createRoutesFromElements(\n  <Route path=\"/\" element={<Layout />}>\n    <Route index element={<Home />} />\n    <Route path=\"a\" lazy={() => import(\"./a\")} />\n    <Route path=\"b\" lazy={() => import(\"./b\")} />\n  </Route>\n);\n\n```\n\n----------------------------------------\n\nTITLE: Organizing Routes with Folders in React Router\nDESCRIPTION: This code snippet illustrates how to use folders for route organization in React Router. Each folder contains a route.tsx file defining the route module, allowing for better code organization.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/file-route-conventions.md#2025-04-22_snippet_9\n\nLANGUAGE: text\nCODE:\n```\napp/\n├── routes/\n│   ├── _landing._index/\n│   │   ├── route.tsx\n│   │   └── scroll-experience.tsx\n│   ├── _landing.about/\n│   │   ├── employee-profile-card.tsx\n│   │   ├── get-employee-data.server.ts\n│   │   ├── route.tsx\n│   │   └── team-photo.jpg\n│   ├── _landing/\n│   │   ├── footer.tsx\n│   │   ├── header.tsx\n│   │   └── route.tsx\n│   ├── app._index/\n│   │   ├── route.tsx\n│   │   └── stats.tsx\n│   ├── app.projects/\n│   │   ├── get-projects.server.ts\n│   │   ├── project-buttons.tsx\n│   │   ├── project-card.tsx\n│   │   └── route.tsx\n│   ├── app/\n│   │   ├── footer.tsx\n│   │   ├── primary-nav.tsx\n│   │   └── route.tsx\n│   ├── app_.projects.$id.roadmap/\n│   │   ├── chart.tsx\n│   │   ├── route.tsx\n│   │   └── update-timeline.server.ts\n│   └── contact-us.tsx\n└── root.tsx\n```\n\n----------------------------------------\n\nTITLE: Custom Database Session Storage Implementation\nDESCRIPTION: Example of creating a custom session storage implementation using a database, including CRUD operations for session data management.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/explanation/sessions-and-cookies.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSessionStorage } from \"react-router\";\n\nfunction createDatabaseSessionStorage({\n  cookie,\n  host,\n  port,\n}) {\n  const db = createDatabaseClient(host, port);\n\n  return createSessionStorage({\n    cookie,\n    async createData(data, expires) {\n      const id = await db.insert(data);\n      return id;\n    },\n    async readData(id) {\n      return (await db.select(id)) || null;\n    },\n    async updateData(id, data, expires) {\n      await db.update(id, data);\n    },\n    async deleteData(id) {\n      await db.delete(id);\n    },\n  });\n}\n\nconst { getSession, commitSession, destroySession } =\n  createDatabaseSessionStorage({\n    host: \"localhost\",\n    port: 1234,\n    cookie: {\n      name: \"__session\",\n      sameSite: \"lax\",\n    },\n  });\n```\n\n----------------------------------------\n\nTITLE: Initializing RouterProvider with createBrowserRouter in React Router\nDESCRIPTION: This example demonstrates how to set up a React Router application using RouterProvider and createBrowserRouter. It shows the typical pattern of creating a router instance and rendering it at the root of the application.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/data-routers/RouterProvider.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  RouterProvider,\n  createBrowserRouter,\n} from \"react-router\";\nimport { createRoot } from \"react-dom/client\";\nlet router = createBrowserRouter();\ncreateRoot(document.getElementById(\"root\")).render(\n  <RouterProvider router={router} />\n);\n```\n\n----------------------------------------\n\nTITLE: Client Data Loading with React Router\nDESCRIPTION: This snippet demonstrates how to use clientLoader for fetching data on the client side in React Router. It includes a loading fallback component and shows how to use the loaded data in the main component.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/framework/data-loading.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// route(\"products/:pid\", \"./product.tsx\");\nimport type { Route } from \"./+types/product\";\n\nexport async function clientLoader({\n  params,\n}: Route.ClientLoaderArgs) {\n  const res = await fetch(`/api/products/${params.pid}`);\n  const product = await res.json();\n  return product;\n}\n\n// HydrateFallback is rendered while the client loader is running\nexport function HydrateFallback() {\n  return <div>Loading...</div>;\n}\n\nexport default function Product({\n  loaderData,\n}: Route.ComponentProps) {\n  const { name, description } = loaderData;\n  return (\n    <div>\n      <h1>{name}</h1>\n      <p>{description}</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Context with Outlet in React Router\nDESCRIPTION: This snippet shows how to pass context down to child routes using the context prop of the Outlet component. The context value can be accessed in child routes using the useOutletContext hook.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/components/Outlet.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Outlet context={myContextValue} />\n```\n\n----------------------------------------\n\nTITLE: Implementing useOutlet Hook in React Router with TypeScript\nDESCRIPTION: Function signature for the useOutlet hook which returns the element for child routes at the current level of route hierarchy. The hook takes an optional context parameter and returns undefined.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/hooks/useOutlet.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nuseOutlet(context): undefined\n```\n\n----------------------------------------\n\nTITLE: Configuring Nested Routes in React Router\nDESCRIPTION: Demonstrates how to set up nested routes using the children property. This example shows how to create a dashboard layout with nested routes for different sections.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/data/routing.md#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\ncreateBrowserRouter([\n  {\n    path: \"/dashboard\",\n    Component: Dashboard,\n    children: [\n      { index: true, Component: Home },\n      { path: \"settings\", Component: Settings },\n    ],\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Implementing an Action in React Router\nDESCRIPTION: Shows how to create an action function for handling form submissions and data mutations, with automatic revalidation of loader data.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/framework/route-module.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// route(\"/list\", \"./list.tsx\")\nimport { Form } from \"react-router\";\nimport { TodoList } from \"~/components/TodoList\";\n\n// this data will be loaded after the action completes...\nexport async function loader() {\n  const items = await fakeDb.getItems();\n  return { items };\n}\n\n// ...so that the list here is updated automatically\nexport default function Items({ loaderData }) {\n  return (\n    <div>\n      <List items={loaderData.items} />\n      <Form method=\"post\" navigate={false} action=\"/list\">\n        <input type=\"text\" name=\"title\" />\n        <button type=\"submit\">Create Todo</button>\n      </Form>\n    </div>\n  );\n}\n\nexport async function action({ request }) {\n  const data = await request.formData();\n  const todo = await fakeDb.addItem({\n    title: data.get(\"title\"),\n  });\n  return { ok: true };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Route Configuration for Automatic Code Splitting in React Router\nDESCRIPTION: This snippet demonstrates how to define a simple route configuration in React Router that enables automatic code splitting. It uses the 'route' function to associate URL paths with their corresponding component files.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/explanation/code-splitting.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  type RouteConfig,\n  route,\n} from \"@react-router/dev/routes\";\n\nexport default [\n  route(\"/contact\", \"./contact.tsx\"),\n  route(\"/about\", \"./about.tsx\"),\n] satisfies RouteConfig;\n```\n\n----------------------------------------\n\nTITLE: Defining Headers in React Router\nDESCRIPTION: Demonstrates how to set HTTP headers for server-rendered responses using the headers function in a route module.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/framework/route-module.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nexport function headers() {\n  return {\n    \"X-Stretchy-Pants\": \"its for fun\",\n    \"Cache-Control\": \"max-age=300, s-maxage=3600\",\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Loader in React Router Configuration\nDESCRIPTION: Demonstrates how to configure a data loader function in React Router route definition that provides data to route components. The loader function can return asynchronous data that will be available to the route component.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/data/data-loading.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ncreateBrowserRouter([\n  {\n    path: \"/\",\n    loader: () => {\n      // return data from here\n      return { records: await getSomeRecords() };\n    },\n    Component: MyRoute,\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Calling Actions with Fetcher in React Router\nDESCRIPTION: Demonstrates how to call an action using a fetcher in React Router. Fetchers allow submitting data to actions without causing a navigation.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/framework/actions.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useFetcher } from \"react-router\";\n\nfunction Task() {\n  let fetcher = useFetcher();\n  let busy = fetcher.state !== \"idle\";\n\n  return (\n    <fetcher.Form method=\"post\" action=\"/update-task/123\">\n      <input type=\"text\" name=\"title\" />\n      <button type=\"submit\">\n        {busy ? \"Saving...\" : \"Save\"}\n      </button>\n    </fetcher.Form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Route Groups with Path Prefixes in React Router\nDESCRIPTION: Demonstrates how to create a group of routes with a common path prefix without introducing a layout component. This is useful for organizing related routes under a common URL structure.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/data/routing.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\ncreateBrowserRouter([\n  {\n    // no component, just a path\n    path: \"/projects\",\n    children: [\n      { index: true, Component: ProjectsHome },\n      { path: \":pid\", Component: Project },\n      { path: \":pid/edit\", Component: EditProject },\n    ],\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Using Document Navigation with Link in React Router\nDESCRIPTION: Demonstrates how to use document navigation instead of client-side routing with the Link component in React Router.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/components/Link.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<Link to=\"/logout\" reloadDocument />\n```\n\n----------------------------------------\n\nTITLE: Configuring Routes in React Router\nDESCRIPTION: Sets up the initial route configuration for the signup form using React Router's route definition.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/form-validation.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  type RouteConfig,\n  route,\n} from \"@react-router/dev/routes\";\n\nexport default [\n  route(\"signup\", \"signup.tsx\"),\n] satisfies RouteConfig;\n```\n\n----------------------------------------\n\nTITLE: Using Outlet Component for Nested Routes in React Router\nDESCRIPTION: This snippet shows how to use the Outlet component from React Router to render child routes within a parent component. It demonstrates the implementation of a Dashboard component that renders its child routes.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/declarative/routing.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Outlet } from \"react-router\";\n\nexport default function Dashboard() {\n  return (\n    <div>\n      <h1>Dashboard</h1>\n      {/* will either be <Home/> or <Settings/> */}\n      <Outlet />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Client Data Loading in React Router TypeScript\nDESCRIPTION: Sets up client-side data loading for contacts using React Router's clientLoader function and renders the data in the root component. Includes contact list rendering with conditional formatting.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/tutorials/address-book.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nexport async function clientLoader() {\n  const contacts = await getContacts();\n  return { contacts };\n}\n\nexport default function App({ loaderData }) {\n  const { contacts } = loaderData;\n\n  return (\n    <>\n      <div id=\"sidebar\">\n        <nav>\n          {contacts.length ? (\n            <ul>\n              {contacts.map((contact) => (\n                <li key={contact.id}>\n                  <Link to={`contacts/${contact.id}`}>\n                    {contact.first || contact.last ? (\n                      <>\n                        {contact.first} {contact.last}\n                      </>\n                    ) : (\n                      <i>No Name</i>\n                    )}\n                    {contact.favorite ? (\n                      <span>★</span>\n                    ) : null}\n                  </Link>\n                </li>\n              ))}\n            </ul>\n          ) : (\n            <p>\n              <i>No contacts</i>\n            </p>\n          )}\n        </nav>\n      </div>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: JSX Route Configuration\nDESCRIPTION: Illustrates a basic JSX route configuration using BrowserRouter and Routes, defining routes for Home and Dashboard components. The Dashboard route uses a splat (*) to match any path segment after /dashboard.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router/CHANGELOG.md#_snippet_21\n\nLANGUAGE: jsx\nCODE:\n```\n<BrowserRouter>\n  <Routes>\n    <Route path=\"/\" element={<Home />} />\n    <Route path=\"dashboard/*\" element={<Dashboard />} />\n  </Routes>\n</BrowserRouter>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Loader in React Router\nDESCRIPTION: Shows how to define a loader function to provide data to a route component before rendering.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/framework/route-module.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport async function loader() {\n  return { message: \"Hello, world!\" };\n}\n\nexport default function MyRoute({ loaderData }) {\n  return <h1>{loaderData.message}</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling URL Params in Loader for Contact Page in TypeScript React\nDESCRIPTION: Implements a loader function for the contact page that fetches data based on URL params.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/tutorials/address-book.md#2025-04-22_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getContact } from \"../data\";\nimport type { Route } from \"./+types/contact\";\n\nexport async function loader({ params }: Route.LoaderArgs) {\n  const contact = await getContact(params.contactId);\n  return { contact };\n}\n\nexport default function Contact({\n  loaderData,\n}: Route.ComponentProps) {\n  const { contact } = loaderData;\n\n  // existing code\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Routing with Outlet in React Router\nDESCRIPTION: This snippet demonstrates how to implement nested routing using the Outlet component from React Router. It shows a layout component with a nested route, allowing for shared UI elements across multiple routes.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/declarative/index.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Outlet } from \"react-router-dom\";\n\nfunction Layout() {\n  return (\n    <div>\n      <h1>Website Title</h1>\n      <nav>\n        <Link to=\"/\">Home</Link>\n        <Link to=\"/about\">About</Link>\n      </nav>\n      <Outlet />\n      <footer>Copyright 2023</footer>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <Route path=\"/\" element={<Layout />}>\n      <Route path=\"/\" element={<Home />} />\n      <Route path=\"/about\" element={<About />} />\n    </Route>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Location State in Components\nDESCRIPTION: Demonstrates how to access the state passed through Link components in the target component.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/components/NavLink.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nfunction SomeComp() {\n  const location = useLocation();\n  location.state; // { some: \"value\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic NavLink Import and Usage\nDESCRIPTION: Shows how to import and use the NavLink component in a React Router application.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/components/NavLink.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NavLink } from \"react-router\";\n<NavLink to=\"/message\" />;\n```\n\n----------------------------------------\n\nTITLE: Implementing Navigation Confirmation with unstable_usePrompt in React Router\nDESCRIPTION: This code snippet demonstrates how to use the unstable_usePrompt hook in a React component to prompt users for confirmation before navigating away from a form with unsaved changes. It blocks navigation when data has been entered into the input field.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/hooks/unstable_usePrompt.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nfunction ImportantForm() {\n  let [value, setValue] = React.useState(\"\");\n\n  // Block navigating elsewhere when data has been entered into the input\n  unstable_usePrompt({\n    message: \"Are you sure?\",\n    when: ({ currentLocation, nextLocation }) =>\n      value !== \"\" &&\n      currentLocation.pathname !== nextLocation.pathname,\n  });\n\n  return (\n    <Form method=\"post\">\n      <label>\n        Enter some important data:\n        <input\n          name=\"data\"\n          value={value}\n          onChange={(e) => setValue(e.target.value)}\n        />\n      </label>\n      <button type=\"submit\">Save</button>\n    </Form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useNavigate() Hook in React Router\nDESCRIPTION: This snippet demonstrates the usage of the useNavigate() hook for imperative navigation after form submission in React Router. It's typically used in event handlers or effects.\nSOURCE: https://github.com/remix-run/react-router/blob/main/examples/auth/README.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst navigate = useNavigate();\n// ...\nnavigate('/dashboard');\n```\n\n----------------------------------------\n\nTITLE: Using Navigate Component in React Router\nDESCRIPTION: This snippet shows how to use the <Navigate> component for declarative navigation, especially useful for redirecting unauthenticated users. It's typically used in render methods or as a child in JSX.\nSOURCE: https://github.com/remix-run/react-router/blob/main/examples/auth/README.md#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Navigate to=\"/login\" state={{ from: location }} replace />\n```\n\n----------------------------------------\n\nTITLE: Importing StaticRouter for Server-Side Rendering\nDESCRIPTION: This code snippet shows the import of StaticRouter from react-router-dom, which is used for server-side rendering. It allows rendering of React Router components on the server with a predefined location.\nSOURCE: https://github.com/remix-run/react-router/blob/main/examples/ssr/README.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { StaticRouter } from 'react-router-dom/server';\n```\n\n----------------------------------------\n\nTITLE: Implementing NavLink Component in React Router\nDESCRIPTION: This snippet demonstrates how to use the NavLink component from React Router to create navigation links with active state styling. It shows the basic usage of NavLink with different routes.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/framework/navigating.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NavLink } from \"react-router\";\n\nexport function MyAppNav() {\n  return (\n    <nav>\n      <NavLink to=\"/\" end>\n        Home\n      </NavLink>\n      <NavLink to=\"/trending\" end>\n        Trending Concerts\n      </NavLink>\n      <NavLink to=\"/concerts\">All Concerts</NavLink>\n      <NavLink to=\"/account\">Account</NavLink>\n    </nav>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Search Params with Different Methods in React Router\nDESCRIPTION: This snippet demonstrates various ways to update search parameters using the setSearchParams function. It shows how to set individual parameters, merge with existing params, and replace all params.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/search-params.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// Set one parameter\nsetSearchParams({ sort: \"ascending\" });\n\n// Merge with existing parameters\nsetSearchParams(prevParams => {\n  prevParams.set(\"sort\", \"ascending\");\n  return prevParams;\n});\n\n// Replace all existing parameters\nsetSearchParams({ sort: \"ascending\", filter: \"name\" });\n```\n\n----------------------------------------\n\nTITLE: Combining Server and Client Loaders in React Router\nDESCRIPTION: This snippet demonstrates how to use both loader and clientLoader functions together in React Router. It shows server-side rendering, client-side navigation, and merging data from both sources.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/framework/data-loading.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// route(\"products/:pid\", \"./product.tsx\");\nimport type { Route } from \"./+types/product\";\nimport { fakeDb } from \"../db\";\n\nexport async function loader({ params }: Route.LoaderArgs) {\n  return fakeDb.getProduct(params.pid);\n}\n\nexport async function clientLoader({\n  serverLoader,\n  params,\n}: Route.ClientLoaderArgs) {\n  const res = await fetch(`/api/products/${params.pid}`);\n  const serverData = await serverLoader();\n  return { ...serverData, ...res.json() };\n}\n\nexport default function Product({\n  loaderData,\n}: Route.ComponentProps) {\n  const { name, description } = loaderData;\n\n  return (\n    <div>\n      <h1>{name}</h1>\n      <p>{description}</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Validation Errors in Form\nDESCRIPTION: Updates the signup component to display validation errors returned from the action using fetcher.data.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/form-validation.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Signup(_: Route.ComponentProps) {\n  let fetcher = useFetcher();\n  let errors = fetcher.data?.errors;\n  return (\n    <fetcher.Form method=\"post\">\n      <p>\n        <input type=\"email\" name=\"email\" />\n        {errors?.email ? <em>{errors.email}</em> : null}\n      </p>\n\n      <p>\n        <input type=\"password\" name=\"password\" />\n        {errors?.password ? (\n          <em>{errors.password}</em>\n        ) : null}\n      </p>\n\n      <button type=\"submit\">Sign Up</button>\n    </fetcher.Form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Signing Cookies with Secrets\nDESCRIPTION: Example demonstrating how to sign cookies with secrets and rotate secrets for enhanced security.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/explanation/sessions-and-cookies.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst cookie = createCookie(\"user-prefs\", {\n  secrets: [\"s3cret1\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Prefetch Behavior for Links\nDESCRIPTION: Demonstrates how to configure data and module prefetching behavior using the prefetch prop.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/components/NavLink.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<Link prefetch=\"intent\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Pending State for Fetcher in React Router\nDESCRIPTION: Shows how to render a pending state UI when the fetcher is in a non-idle state during form submission.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/fetchers.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Component() {\n  let data = useLoaderData();\n  let fetcher = useFetcher();\n  return (\n    <div>\n      <h1>{data.title}</h1>\n\n      <fetcher.Form method=\"post\">\n        <input type=\"text\" name=\"title\" />\n        {fetcher.state !== \"idle\" && <p>Saving...</p>}\n      </fetcher.Form>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling View Transitions for Navigation\nDESCRIPTION: Shows how to enable View Transitions API for smooth visual transitions between pages.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/components/NavLink.md#2025-04-22_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n<Link to={to} viewTransition>\n  Click me\n</Link>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Active Link Component in React Router\nDESCRIPTION: Demonstrates how to use useMatch() and useResolvedPath() hooks from React Router to create a custom Link component that can display different content when the current route matches the link's destination. The component extends the standard Link functionality to include active state awareness.\nSOURCE: https://github.com/remix-run/react-router/blob/main/examples/custom-link/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Link, useMatch, useResolvedPath } from \"react-router-dom\";\n\nfunction CustomLink({ children, to, ...props }) {\n  let resolved = useResolvedPath(to);\n  let match = useMatch({ path: resolved.pathname, end: true });\n\n  return (\n    <div>\n      <Link\n        style={{ textDecoration: match ? \"underline\" : \"none\" }}\n        to={to}\n        {...props}\n      >\n        {children}\n      </Link>\n      {match && \" (active)\"}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Login Form Implementation with Session Management\nDESCRIPTION: Complete implementation of a login form route with session handling, including loader and action functions for authentication flow and error handling.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/explanation/sessions-and-cookies.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { data, redirect } from \"react-router\";\nimport type { Route } from \"./+types/login\";\n\nimport {\n  getSession,\n  commitSession,\n} from \"../sessions.server\";\n\nexport async function loader({\n  request,\n}: Route.LoaderArgs) {\n  const session = await getSession(\n    request.headers.get(\"Cookie\")\n  );\n\n  if (session.has(\"userId\")) {\n    return redirect(\"/\");\n  }\n\n  return data(\n    { error: session.get(\"error\") },\n    {\n      headers: {\n        \"Set-Cookie\": await commitSession(session),\n      },\n    }\n  );\n}\n\nexport async function action({\n  request,\n}: Route.ActionArgs) {\n  const session = await getSession(\n    request.headers.get(\"Cookie\")\n  );\n  const form = await request.formData();\n  const username = form.get(\"username\");\n  const password = form.get(\"password\");\n\n  const userId = await validateCredentials(\n    username,\n    password\n  );\n\n  if (userId == null) {\n    session.flash(\"error\", \"Invalid username/password\");\n    return redirect(\"/login\", {\n      headers: {\n        \"Set-Cookie\": await commitSession(session),\n      },\n    });\n  }\n\n  session.set(\"userId\", userId);\n\n  return redirect(\"/\", {\n    headers: {\n      \"Set-Cookie\": await commitSession(session),\n    },\n  });\n}\n\nexport default function Login({\n  loaderData,\n}: Route.ComponentProps) {\n  const { error } = loaderData;\n\n  return (\n    <div>\n      {error ? <div className=\"error\">{error}</div> : null}\n      <form method=\"POST\">\n        <div>\n          <p>Please sign in</p>\n        </div>\n        <label>\n          Username: <input type=\"text\" name=\"username\" />\n        </label>\n        <label>\n          Password:{\" \"}\n          <input type=\"password\" name=\"password\" />\n        </label>\n      </form>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling HTTP Methods in Resource Routes\nDESCRIPTION: Implementation of loader and action functions to handle different HTTP methods. Loader handles GET requests while action handles POST, PUT, PATCH, and DELETE.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/resource-routes.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Route } from \"./+types/resource\";\n\nexport function loader(_: Route.LoaderArgs) {\n  return Response.json({ message: \"I handle GET\" });\n}\n\nexport function action(_: Route.ActionArgs) {\n  return Response.json({\n    message: \"I handle everything else\",\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Image Gallery Route Implementation - TSX\nDESCRIPTION: Implementation of an image gallery route component with view transitions enabled on navigation links.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/view-transitions.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NavLink } from \"react-router\";\n\nexport const images = [\n  \"https://remix.run/blog-images/headers/the-future-is-now.jpg\",\n  \"https://remix.run/blog-images/headers/waterfall.jpg\",\n  \"https://remix.run/blog-images/headers/webpack.png\",\n  // ... more images ...\n];\n\nexport default function ImageGalleryRoute() {\n  return (\n    <div className=\"image-list\">\n      <h1>Image List</h1>\n      <div>\n        {images.map((src, idx) => (\n          <NavLink\n            key={src}\n            to={`/image/${idx}`}\n            viewTransition // Enable view transitions for this link\n          >\n            <p>Image Number {idx}</p>\n            <img\n              className=\"max-w-full contain-layout\"\n              src={src}\n            />\n          </NavLink>\n        ))}\n      </div>\n    </div>\n  );\n```\n\n----------------------------------------\n\nTITLE: Enhancing Add to Cart Functionality with Client-Side Behavior in React Router\nDESCRIPTION: This snippet shows how to enhance the Add to Cart button with client-side behavior using React Router's useFetcher hook. It maintains the original functionality while adding pending UI state.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/explanation/progressive-enhancement.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useFetcher } from \"react-router\";\n\nexport function AddToCart({ id }) {\n  const fetcher = useFetcher();\n\n  return (\n    <fetcher.Form method=\"post\" action=\"/add-to-cart\">\n      <input name=\"id\" value={id} />\n      <button type=\"submit\">\n        {fetcher.state === \"submitting\"\n          ? \"Adding...\"\n          : \"Add To Cart\"}\n      </button>\n    </fetcher.Form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Optimistic UI with React Router Fetcher\nDESCRIPTION: Component implementing optimistic updates for a favorite toggle button using React Router's useFetcher hook. The code demonstrates how to immediately update UI state based on form submission data before server confirmation, with automatic rollback on failure.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/tutorials/address-book.md#2025-04-22_snippet_44\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Favorite({\n  contact,\n}: {\n  contact: Pick<ContactRecord, \"favorite\">;\n}) {\n  const fetcher = useFetcher();\n  const favorite = fetcher.formData\n    ? fetcher.formData.get(\"favorite\") === \"true\"\n    : contact.favorite;\n\n  return (\n    <fetcher.Form method=\"post\">\n      <button\n        aria-label={\n          favorite\n            ? \"Remove from favorites\"\n            : \"Add to favorites\"\n        }\n        name=\"favorite\"\n        value={favorite ? \"false\" : \"true\"}\n      >\n        {favorite ? \"★\" : \"☆\"}\n      </button>\n    </fetcher.Form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Root Route Component in React Router\nDESCRIPTION: Root route implementation containing the global layout, error boundary, and document shell for the address book application.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/tutorials/address-book.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Form,\n  Scripts,\n  ScrollRestoration,\n  isRouteErrorResponse,\n} from \"react-router\";\nimport type { Route } from \"./+types/root\";\n\nimport appStylesHref from \"./app.css?url\";\n\nexport default function App() {\n  return (\n    <>\n      <div id=\"sidebar\">\n        <h1>React Router Contacts</h1>\n        <div>\n          <Form id=\"search-form\" role=\"search\">\n            <input\n              aria-label=\"Search contacts\"\n              id=\"q\"\n              name=\"q\"\n              placeholder=\"Search\"\n              type=\"search\"\n            />\n            <div\n              aria-hidden\n              hidden={true}\n              id=\"search-spinner\"\n            />\n          </Form>\n          <Form method=\"post\">\n            <button type=\"submit\">New</button>\n          </Form>\n        </div>\n        <nav>\n          <ul>\n            <li>\n              <a href={`/contacts/1`}>Your Name</a>\n            </li>\n            <li>\n              <a href={`/contacts/2`}>Your Friend</a>\n            </li>\n          </ul>\n        </nav>\n      </div>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Pending State in React Router Combobox with Fetcher\nDESCRIPTION: Shows how to render a pending state in a combobox component when the fetcher is loading data.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/fetchers.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useFetcher } from \"react-router\";\n\nexport function UserSearchCombobox() {\n  let fetcher = useFetcher<typeof Search.action>();\n  return (\n    <div>\n      <fetcher.Form method=\"get\" action=\"/search-users\">\n        <input type=\"text\" name=\"q\" />\n      </fetcher.Form>\n      {fetcher.data && (\n        <ul\n          style={{\n            opacity: fetcher.state === \"idle\" ? 1 : 0.25,\n          }}\n        >\n          {fetcher.data.map((user) => (\n            <li key={user.id}>{user.name}</li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: NavLink with Dynamic className Prop\nDESCRIPTION: Example of using NavLink with a callback function for className to conditionally style based on active state.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/declarative/navigating.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<NavLink\n  to=\"/messages\"\n  className={({ isActive }) =>\n    isActive ? \"text-red-500\" : \"text-black\"\n  }\n>\n  Messages\n</NavLink>\n```\n\n----------------------------------------\n\nTITLE: Using NavLink with Dynamic className in React Router\nDESCRIPTION: This example illustrates how to use the className prop of NavLink with a callback function. It dynamically applies classes based on the link's active, pending, and transitioning states.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/framework/navigating.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<NavLink\n  to=\"/messages\"\n  className={({ isActive, isPending, isTransitioning }) =>\n    [\n      isPending ? \"pending\" : \"\",\n      isActive ? \"active\" : \"\",\n      isTransitioning ? \"transitioning\" : \"\",\n    ].join(\" \")\n  }\n>\n  Messages\n</NavLink>\n```\n\n----------------------------------------\n\nTITLE: Creating an Action Handler for Favorite Toggle in React Router\nDESCRIPTION: Implements an action function to handle the favorite toggle form submission, updating the contact's favorite status in the database based on form data values.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/tutorials/address-book.md#2025-04-22_snippet_43\n\nLANGUAGE: tsx\nCODE:\n```\n// existing imports\nimport { getContact, updateContact } from \"../data\";\n// existing imports\n\nexport async function action({\n  params,\n  request,\n}: Route.ActionArgs) {\n  const formData = await request.formData();\n  return updateContact(params.contactId, {\n    favorite: formData.get(\"favorite\") === \"true\",\n  });\n}\n\n// existing code\n```\n\n----------------------------------------\n\nTITLE: Demonstrating React Fast Refresh Compatibility with Component Types in TypeScript\nDESCRIPTION: This snippet illustrates which types of React components are compatible with React Fast Refresh. It shows that function components and arrow function components work, while class components and HOCs returning class components do not preserve state.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/explanation/hot-module-replacement.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport class ComponentA extends Component {} // ❌\n\nexport const ComponentB = HOC(ComponentC); // ❌ Won't work if HOC returns a class component\n\nexport function ComponentD() {} // ✅\nexport const ComponentE = () => {}; // ✅\nexport default function ComponentF() {} // ✅\n```\n\n----------------------------------------\n\nTITLE: Server-Only Data Loading in React Router\nDESCRIPTION: This snippet demonstrates how to implement a route that only depends on server data. It exports a loader function to fetch data from the server and uses it in the component.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/client-data.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport async function loader({\n  request,\n}: Route.LoaderArgs) {\n  const data = await getServerData(request);\n  return data;\n}\n\nexport default function Component({\n  loaderData, // (1) - server data\n}: Route.ComponentProps) {\n  return <>...</>;\n}\n```\n\n----------------------------------------\n\nTITLE: NavLink with Dynamic Style Prop\nDESCRIPTION: Shows how to use NavLink with inline style prop to conditionally style based on active state.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/declarative/navigating.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<NavLink\n  to=\"/messages\"\n  style={({ isActive }) => ({\n    color: isActive ? \"red\" : \"black\",\n  })}\n>\n  Messages\n</NavLink>\n```\n\n----------------------------------------\n\nTITLE: Implementing Full Sidebar Layout with Data Fetching in TypeScript React\nDESCRIPTION: Expands the sidebar layout to include client-side data loading and rendering of contacts.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/tutorials/address-book.md#2025-04-22_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Form, Link, Outlet } from \"react-router\";\nimport { getContacts } from \"../data\";\nimport type { Route } from \"./+types/sidebar\";\n\nexport async function clientLoader() {\n  const contacts = await getContacts();\n  return { contacts };\n}\n\nexport default function SidebarLayout({\n  loaderData,\n}: Route.ComponentProps) {\n  const { contacts } = loaderData;\n\n  return (\n    <>\n      <div id=\"sidebar\">\n        <h1>\n          <Link to=\"about\">React Router Contacts</Link>\n        </h1>\n        <div>\n          <Form id=\"search-form\" role=\"search\">\n            <input\n              aria-label=\"Search contacts\"\n              id=\"q\"\n              name=\"q\"\n              placeholder=\"Search\"\n              type=\"search\"\n            />\n            <div\n              aria-hidden\n              hidden={true}\n              id=\"search-spinner\"\n            />\n          </Form>\n          <Form method=\"post\">\n            <button type=\"submit\">New</button>\n          </Form>\n        </div>\n        <nav>\n          {contacts.length ? (\n            <ul>\n              {contacts.map((contact) => (\n                <li key={contact.id}>\n                  <Link to={`contacts/${contact.id}`}>\n                    {contact.first || contact.last ? (\n                      <>\n                        {contact.first} {contact.last}\n                      </>\n                    ) : (\n                      <i>No Name</i>\n                    )}\n                    {contact.favorite ? (\n                      <span>★</span>\n                    ) : null}\n                  </Link>\n                </li>\n              ))}\n            </ul>\n          ) : (\n            <p>\n              <i>No contacts</i>\n            </p>\n          )}\n        </nav>\n      </div>\n      <div id=\"detail\">\n        <Outlet />\n      </div>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating useSearchParams() Hook Usage in React Router\nDESCRIPTION: This code snippet shows how to use the useSearchParams() hook in React Router to manipulate the search portion of the URL. It's used in a component that searches for GitHub users and displays their profiles.\nSOURCE: https://github.com/remix-run/react-router/blob/main/examples/search-params/README.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n[![Open in StackBlitz](https://developer.stackblitz.com/img/open_in_stackblitz.svg)](https://stackblitz.com/github/remix-run/react-router/tree/main/examples/search-params?file=src/App.tsx)\n```\n\n----------------------------------------\n\nTITLE: Proposed Type Inference with typeof Operator\nDESCRIPTION: The proposed solution using the typeof operator to infer return types from loader functions, providing end-to-end type safety without redundant type declarations.\nSOURCE: https://github.com/remix-run/react-router/blob/main/decisions/0003-infer-types-for-useloaderdata-and-useactiondata-from-loader-and-action-via-generics.md#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nexport const loader = async (args: LoaderArgs) => {\n  // ...\n  return json(/*...*/);\n};\n\nexport default function Route() {\n  const data = useLoaderData<typeof loader>();\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nested Routes in TypeScript\nDESCRIPTION: Demonstrates how to configure nested routes using the route function. It shows a parent route with child routes, illustrating the automatic path inclusion for child routes.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/framework/routing.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  type RouteConfig,\n  route,\n  index,\n} from \"@react-router/dev/routes\";\n\nexport default [\n  // parent route\n  route(\"dashboard\", \"./dashboard.tsx\", [\n    // child routes\n    index(\"./home.tsx\"),\n    route(\"settings\", \"./settings.tsx\"),\n  ]),\n] satisfies RouteConfig;\n```\n\n----------------------------------------\n\nTITLE: useRouteLoaderData Hook Signature\nDESCRIPTION: Type definition showing the function signature of the useRouteLoaderData hook.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/hooks/useRouteLoaderData.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nuseRouteLoaderData(routeId): undefined\n```\n\n----------------------------------------\n\nTITLE: Enabling Server Side Rendering in React Router\nDESCRIPTION: This code demonstrates how to enable server-side rendering in React Router. It requires a deployment that supports SSR, and individual routes can still use client data loading or be statically pre-rendered.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/framework/rendering.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Config } from \"@react-router/dev/config\";\n\nexport default {\n  ssr: true,\n} satisfies Config;\n```\n\n----------------------------------------\n\nTITLE: Implementing an Action Function in React Router\nDESCRIPTION: Shows how to use an action function for server-side data mutations with automatic revalidation, using Form component and useLoaderData hook.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/data/route-object.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  createBrowserRouter,\n  useLoaderData,\n  useActionData,\n  Form,\n} from \"react-router\";\nimport { TodoList } from \"~/components/TodoList\";\n\ncreateBrowserRouter([\n  {\n    path: \"/items\",\n    action: action,\n    loader: loader,\n    Component: Items,\n  },\n]);\n\nasync function action({ request }) {\n  const data = await request.formData();\n  const todo = await fakeDb.addItem({\n    title: data.get(\"title\"),\n  });\n  return { ok: true };\n}\n\nasync function loader() {\n  const items = await fakeDb.getItems();\n  return { items };\n}\n\nexport default function Items() {\n  let data = useLoaderData();\n  return (\n    <div>\n      <List items={data.items} />\n      <Form method=\"post\" navigate={false}>\n        <input type=\"text\" name=\"title\" />\n        <button type=\"submit\">Create Todo</button>\n      </Form>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Actions with useSubmit in React Router\nDESCRIPTION: Demonstrates using the useSubmit hook to imperatively submit form data to an action. This example sets up a timer to automatically submit data after 10 minutes.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/data/actions.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCallback } from \"react\";\nimport { useSubmit } from \"react-router\";\nimport { useFakeTimer } from \"fake-lib\";\n\nfunction useQuizTimer() {\n  let submit = useSubmit();\n\n  let cb = useCallback(() => {\n    submit(\n      { quizTimedOut: true },\n      { action: \"/end-quiz\", method: \"post\" }\n    );\n  }, []);\n\n  let tenMinutes = 10 * 60 * 1000;\n  useFakeTimer(tenMinutes, cb);\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing Scroll Reset with Links\nDESCRIPTION: Shows how to prevent scroll position reset when navigating to a new URL using preventScrollReset prop.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/components/NavLink.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<Link to=\"?tab=one\" preventScrollReset />\n```\n\n----------------------------------------\n\nTITLE: Implementing CSP Nonce in React Router Components\nDESCRIPTION: Examples of how to implement nonce attributes on various React Router components and rendering methods for Content-Security-Policy compliance. This is necessary when using CSP with unsafe-inline directives.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/security.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Scripts nonce=\"[your-nonce-value]\" />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<ScrollRestoration nonce=\"[your-nonce-value]\" />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<ServerRouter nonce=\"[your-nonce-value]\" />\n```\n\nLANGUAGE: jsx\nCODE:\n```\nrenderToPipeableStream(element, { nonce: \"[your-nonce-value]\" })\n```\n\nLANGUAGE: jsx\nCODE:\n```\nrenderToReadableStream(element, { nonce: \"[your-nonce-value]\" })\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Route Component in React\nDESCRIPTION: Demonstrates how to create a simple route component as the default export in a route module file.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/framework/route-module.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function MyRouteComponent() {\n  return (\n    <div>\n      <h1>Look ma!</h1>\n      <p>\n        I'm still using React Router after like 10 years.\n      </p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Await Children Prop with Function Pattern\nDESCRIPTION: Shows how to use the children prop as a function to access resolved promise values directly.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/components/Await.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Await resolve={reviewsPromise}>\n  {(resolvedReviews) => <Reviews items={resolvedReviews} />}\n</Await>\n```\n\n----------------------------------------\n\nTITLE: Configuring Layout Routes in React Router\nDESCRIPTION: This snippet demonstrates how to use layout routes in React Router. Layout routes don't have a path and don't add segments to the URL, but they create new nesting for their children, allowing for shared layouts across multiple routes.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/declarative/routing.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Routes>\n  <Route element={<MarketingLayout />}>\n    <Route index element={<MarketingHome />} />\n    <Route path=\"contact\" element={<Contact />} />\n  </Route>\n\n  <Route path=\"projects\">\n    <Route index element={<ProjectsHome />} />\n    <Route element={<ProjectsLayout />}>\n      <Route path=\":pid\" element={<Project />} />\n      <Route path=\":pid/edit\" element={<EditProject />} />\n    </Route>\n  </Route>\n</Routes>\n```\n\n----------------------------------------\n\nTITLE: Client-Side Caching in React Router\nDESCRIPTION: This snippet demonstrates how to implement client-side caching in React Router. It uses both server and client loaders, sets up cache management, and includes a client action for cache invalidation.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/client-data.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport async function loader({\n  request,\n}: Route.LoaderArgs) {\n  const data = await getDataFromDb({ request }); // (1)\n  return data;\n}\n\nexport async function action({\n  request,\n}: Route.ActionArgs) {\n  await saveDataToDb({ request });\n  return { ok: true };\n}\n\nlet isInitialRequest = true;\n\nexport async function clientLoader({\n  request,\n  serverLoader,\n}: Route.ClientLoaderArgs) {\n  const cacheKey = generateKey(request);\n\n  if (isInitialRequest) {\n    isInitialRequest = false;\n    const serverData = await serverLoader();\n    cache.set(cacheKey, serverData); // (2)\n    return serverData;\n  }\n\n  const cachedData = await cache.get(cacheKey);\n  if (cachedData) {\n    return cachedData; // (3)\n  }\n\n  const serverData = await serverLoader();\n  cache.set(cacheKey, serverData);\n  return serverData;\n}\nclientLoader.hydrate = true; // (2)\n\nexport async function clientAction({\n  request,\n  serverAction,\n}: Route.ClientActionArgs) {\n  const cacheKey = generateKey(request);\n  cache.delete(cacheKey); // (4)\n  const serverData = await serverAction();\n  return serverData;\n}\n```\n\n----------------------------------------\n\nTITLE: Fetcher Form Pending State in React Router\nDESCRIPTION: Implements pending state for form submissions using useFetcher hook, which provides independent state management for form submissions without causing global navigation.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/framework/pending-ui.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useFetcher } from \"react-router\";\n\nfunction NewProjectForm() {\n  const fetcher = useFetcher();\n\n  return (\n    <fetcher.Form method=\"post\">\n      <input type=\"text\" name=\"title\" />\n      <button type=\"submit\">\n        {fetcher.state !== \"idle\"\n          ? \"Submitting...\"\n          : \"Submit\"}\n      </button>\n    </fetcher.Form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Href Utility in React Router (TypeScript)\nDESCRIPTION: This code snippet demonstrates the usage of the `href` utility in React Router to create type-safe links. It ensures that the generated links point to valid paths within the application by using a type-safe approach.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router-dev/CHANGELOG.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { href } from \"react-router\";\n\nexport default function Component() {\n  const link = href(\"/blog/:slug\", { slug: \"my-first-post\" });\n  return (\n    <main>\n      <Link to={href(\"/products/:id\", { id: \"asdf\" })} />\n      <NavLink to={href(\"/:lang?/about\", { lang: \"en\" })} />\n    </main>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Await Children Prop with useAsyncValue Hook\nDESCRIPTION: Demonstrates using the children prop with React elements and accessing resolved values via useAsyncValue hook.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/components/Await.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Await resolve={reviewsPromise}>\n  <Reviews />\n</Await>;\n\nfunction Reviews() {\n  const resolvedReviews = useAsyncValue();\n  return <div>...</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Component for URL Parameter Navigation in React Router\nDESCRIPTION: This example demonstrates the use of the Form component from React Router to navigate with URL search parameters. It shows a simple search form that appends the query to the URL.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/framework/navigating.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<Form action=\"/search\">\n  <input type=\"text\" name=\"q\" />\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Configuring Layout Routes and Route Prefixes\nDESCRIPTION: Demonstrates the use of layout routes and route prefixes to create nested structures without affecting URL paths. It shows how to use the layout and prefix functions to organize routes.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/framework/routing.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  type RouteConfig,\n  route,\n  layout,\n  index,\n  prefix,\n} from \"@react-router/dev/routes\";\n\nexport default [\n  layout(\"./marketing/layout.tsx\", [\n    index(\"./marketing/home.tsx\"),\n    route(\"contact\", \"./marketing/contact.tsx\"),\n  ]),\n  ...prefix(\"projects\", [\n    index(\"./projects/home.tsx\"),\n    layout(\"./projects/project-layout.tsx\", [\n      route(\":pid\", \"./projects/project.tsx\"),\n      route(\":pid/edit\", \"./projects/edit-project.tsx\"),\n    ]),\n  ]),\n] satisfies RouteConfig;\n```\n\n----------------------------------------\n\nTITLE: Implementing Avatar Resource Route\nDESCRIPTION: Creates a resource route for serving uploaded avatar files with proper content type headers.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/file-uploads.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  fileStorage,\n  getStorageKey,\n} from \"~/avatar-storage.server\";\nimport type { Route } from \"./+types/avatar\";\n\nexport async function loader({ params }: Route.LoaderArgs) {\n  const storageKey = getStorageKey(params.id);\n  const file = await fileStorage.get(storageKey);\n\n  if (!file) {\n    throw new Response(\"User avatar not found\", {\n      status: 404,\n    });\n  }\n\n  return new Response(file.stream(), {\n    headers: {\n      \"Content-Type\": file.type,\n      \"Content-Disposition\": `attachment; filename=${file.name}`,\n    },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Global Navigation Pending State with useNavigation in React Router\nDESCRIPTION: Demonstrates how to implement a global pending state indicator during route navigation using the useNavigation hook. Shows how to conditionally render a spinner while navigating between pages.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/framework/pending-ui.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useNavigation } from \"react-router\";\n\nexport default function Root() {\n  const navigation = useNavigation();\n  const isNavigating = Boolean(navigation.location);\n\n  return (\n    <html>\n      <body>\n        {isNavigating && <GlobalSpinner />}\n        <Outlet />\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Handling in Contact Loader in TypeScript\nDESCRIPTION: Updates the contact loader to throw a 404 response when a contact is not found.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/tutorials/address-book.md#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function loader({ params }: Route.LoaderArgs) {\n  const contact = await getContact(params.contactId);\n  if (!contact) {\n    throw new Response(\"Not Found\", { status: 404 });\n  }\n  return { contact };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Middleware on Routes (TSX)\nDESCRIPTION: This TSX snippet shows how to define middleware functions for both framework and library modes in React Router.  It defines server-side and client-side middleware for logging and authentication in the framework mode. It also illustrates the use of middleware in library mode for Single Page Applications (SPAs).\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router/CHANGELOG.md#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// Framework mode\nexport const unstable_middleware = [serverLogger, serverAuth]; // server\nexport const unstable_clientMiddleware = [clientLogger]; // client\n\n// Library mode\nconst routes = [\n  {\n    path: \"/\",\n    // Middlewares are client-side for library mode SPA's\n    unstable_middleware: [clientLogger, clientAuth],\n    loader: rootLoader,\n    Component: Root,\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Calling Actions with Form in React Router\nDESCRIPTION: Demonstrates how to call an action using a Form component in React Router. This method causes a navigation and adds a new entry to the browser history.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/framework/actions.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Form } from \"react-router\";\n\nfunction SomeComponent() {\n  return (\n    <Form action=\"/projects/123\" method=\"post\">\n      <input type=\"text\" name=\"title\" />\n      <button type=\"submit\">Submit</button>\n    </Form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useLocation Hook for Side Effects in React Router\nDESCRIPTION: This snippet demonstrates how to use the useLocation hook from react-router to perform side effects when the location changes, such as sending pageview data to Google Analytics.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/hooks/useLocation.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react'\nimport { useLocation } from 'react-router'\n\nfunction SomeComponent() {\n  let location = useLocation()\n\n  React.useEffect(() => {\n    // Google Analytics\n    ga('send', 'pageview')\n  }, [location]);\n\n  return (\n    // ...\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Actions in React Router\nDESCRIPTION: Demonstrates how to define a route action that updates a project title using form data. The action is associated with a specific route and revalidates loader data after completion.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/data/actions.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createBrowserRouter } from \"react-router\";\nimport { someApi } from \"./api\";\n\nlet router = createBrowserRouter([\n  {\n    path: \"/projects/:projectId\",\n    Component: Project,\n    action: async ({ request }) => {\n      let formData = await request.formData();\n      let title = formData.get(\"title\");\n      let project = await someApi.updateProject({ title });\n      return project;\n    },\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Updating Route Definition for Lazy Loading (TypeScript)\nDESCRIPTION: Example of updating a route definition to use lazy loading with the convert function. This change allows for code-splitting and conforms to the Route Module API.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/upgrading/router-provider.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nlet router = createBrowserRouter([\n  // ... other routes\n  {\n    path: \"about\",\n-   loader: aboutLoader,\n-   Component: About,\n+   lazy: () => import(\"./routes/about\").then(convert),\n  },\n  // ... other routes\n]);\n```\n\n----------------------------------------\n\nTITLE: Layout Component with Error Handling\nDESCRIPTION: Implementation of the Layout component that handles both successful and error states, using defensive programming to ensure reliable error boundary rendering.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/explanation/special-files.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport function Layout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  const data = useRouteLoaderData(\"root\");\n  const error = useRouteError();\n\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta\n          name=\"viewport\"\n          content=\"width=device-width, initial-scale=1\"\n        />\n        <Meta />\n        <Links />\n        <style\n          dangerouslySetInnerHTML={{\n            __html: `\n              :root {\n                --themeVar: ${\n                  data?.themeVar || defaultThemeVar\n                }\n              }\n            `,\n          }}\n        />\n      </head>\n      <body>\n        {data ? (\n          <Analytics token={data.analyticsToken} />\n        ) : null}\n        {children}\n        <ScrollRestoration />\n        <Scripts />\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Fetcher Form in Combobox Component for React Router\nDESCRIPTION: Demonstrates how to create a combobox component using a fetcher to load data from a search route.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/fetchers.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useFetcher } from \"react-router\";\n\nexport function UserSearchCombobox() {\n  let fetcher = useFetcher();\n  return (\n    <div>\n      <fetcher.Form method=\"get\" action=\"/search-users\">\n        <input type=\"text\" name=\"q\" />\n      </fetcher.Form>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating URLSearchParams with Arrays in React Router\nDESCRIPTION: Demonstrates how to use createSearchParams to create a URLSearchParams object with array values, which is more convenient than using the standard URLSearchParams constructor for multiple values.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/utils/createSearchParams.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nlet searchParams = createSearchParams({\n  sort: ['name', 'price']\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Suspense and Await Components in React Router\nDESCRIPTION: Shows how to use React Suspense and React Router's Await component to handle loading states and render resolved data. Demonstrates proper component structure for streaming data.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/suspense.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from \"react\";\nimport { Await } from \"react-router\";\n\n// [previous code]\n\nexport default function MyComponent({\n  loaderData,\n}: Route.ComponentProps) {\n  let { criticalData, nonCriticalData } = loaderData;\n\n  return (\n    <div>\n      <h1>Streaming example</h1>\n      <h2>Critical data value: {criticalData}</h2>\n\n      <React.Suspense fallback={<div>Loading...</div>}>\n        <Await resolve={nonCriticalData}>\n          {(value) => <h3>Non critical value: {value}</h3>}\n        </Await>\n      </React.Suspense>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Splat Route Parameters in React Router\nDESCRIPTION: This code snippet demonstrates how to access the matched path value in a splat route's params using the \"*\" key in the serverLoader function.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/file-route-conventions.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nexport async function serverLoader({ params }) {\n  const filePath = params[\"*\"];\n  return fake.getFileInfo(filePath);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Await Component Usage with React Router Loader\nDESCRIPTION: Demonstrates the primary usage of Await component with loader data and suspense handling. Shows how to fetch and render both immediate and deferred data.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/components/Await.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Await, useLoaderData } from \"react-router\";\n\nexport function loader() {\n  // not awaited\n  const reviews = getReviews();\n  // awaited (blocks the transition)\n  const book = await fetch(\"/api/book\").then((res) =>\n    res.json()\n  );\n  return { book, reviews };\n}\n\nfunction Book() {\n  const { book, reviews } = useLoaderData();\n  return (\n    <div>\n      <h1>{book.title}</h1>\n      <p>{book.description}</p>\n      <React.Suspense fallback={<ReviewsSkeleton />}>\n        <Await\n          resolve={reviews}\n          errorElement={\n            <div>Could not load reviews 😬</div>\n          }\n          children={(resolvedReviews) => (\n            <Reviews items={resolvedReviews} />\n          )}\n        />\n      </React.Suspense>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Await Error Handling with ErrorElement\nDESCRIPTION: Shows basic error handling using the errorElement prop to display fallback content on promise rejection.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/components/Await.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Await\n  errorElement={<div>Oops</div>}\n  resolve={reviewsPromise}\n>\n  <Reviews />\n</Await>\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Parameters in React Components\nDESCRIPTION: Demonstrates how to access route parameters within React components using the useParams hook. This is useful for components that need to render data based on URL parameters.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/data/routing.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useParams } from \"react-router\";\n\nfunction Team() {\n  // params are available in components through useParams\n  let params = useParams();\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Route Configuration with useRoutes in React Router\nDESCRIPTION: Demonstrates how to use the useRoutes hook to define a route configuration object that includes nested routes and multiple paths. The hook returns a React element that can be directly rendered.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/hooks/useRoutes.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from \"react\";\nimport { useRoutes } from \"react-router\";\n\nfunction App() {\n  let element = useRoutes([\n    {\n      path: \"/\",\n      element: <Dashboard />,\n      children: [\n        {\n          path: \"messages\",\n          element: <DashboardMessages />,\n        },\n        { path: \"tasks\", element: <DashboardTasks /> },\n      ],\n    },\n    { path: \"team\", element: <AboutPage /> },\n  ]);\n\n  return element;\n}\n```\n\n----------------------------------------\n\nTITLE: Using useFetchers Hook in React Router\nDESCRIPTION: Demonstrates how to use the useFetchers hook to access an array of all in-flight fetchers. This is useful for implementing optimistic UI updates across components that didn't create the fetchers.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/hooks/useFetchers.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useFetchers } from \"react-router\";\n\nfunction SomeComponent() {\n  const fetchers = useFetchers();\n  fetchers[0].formData; // FormData\n  fetchers[0].state; // etc.\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Link to Prop with Different Formats\nDESCRIPTION: Shows different ways to configure the destination URL using the to prop, including string and object formats.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/components/NavLink.md#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n<Link to=\"/some/path\" />\n\n<Link\n  to={{\n    pathname: \"/some/path\",\n    search: \"?query=string\",\n    hash: \"#hash\",\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Combined Error Boundary Implementation in TypeScript\nDESCRIPTION: Example of unified error boundary implementation that handles both Response errors and other types of errors, replacing the separate Error and Catch boundaries.\nSOURCE: https://github.com/remix-run/react-router/blob/main/decisions/0005-remixing-react-router.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nfunction NewErrorBoundary() {\n  const error = useRouteError();\n\n  if (error instanceof Response) {\n    return <MyOldCatchBoudnary error={error} />;\n  } else {\n    return <MyOldErrorBoundary error={error} />;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Logout Route Implementation\nDESCRIPTION: Implementation of a logout route with session destruction functionality and confirmation UI.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/explanation/sessions-and-cookies.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  getSession,\n  destroySession,\n} from \"../sessions.server\";\nimport type { Route } from \"./+types/logout\";\n\nexport async function action({\n  request,\n}: Route.ActionArgs) {\n  const session = await getSession(\n    request.headers.get(\"Cookie\")\n  );\n  return redirect(\"/login\", {\n    headers: {\n      \"Set-Cookie\": await destroySession(session),\n    },\n  });\n}\n\nexport default function LogoutRoute() {\n  return (\n    <>\n      <p>Are you sure you want to log out?</p>\n      <Form method=\"post\">\n        <button>Logout</button>\n      </Form>\n      <Link to=\"/\">Never mind</Link>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Destroy Action for Deleting Contacts in React Router\nDESCRIPTION: This code implements the destroy action for deleting contacts in React Router, including the deletion logic and redirect after successful deletion.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/tutorials/address-book.md#2025-04-22_snippet_32\n\nLANGUAGE: tsx\nCODE:\n```\nimport { redirect } from \"react-router\";\nimport type { Route } from \"./+types/destroy-contact\";\n\nimport { deleteContact } from \"../data\";\n\nexport async function action({ params }: Route.ActionArgs) {\n  await deleteContact(params.contactId);\n  return redirect(\"/\");\n}\n```\n\n----------------------------------------\n\nTITLE: Using the useNavigation Hook in React Router\nDESCRIPTION: Example of importing and using the useNavigation hook to access navigation state and formData in a React component.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/hooks/useNavigation.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useNavigation } from \"react-router\";\n\nfunction SomeComponent() {\n  let navigation = useNavigation();\n  navigation.state;\n  navigation.formData;\n  // etc.\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Search UI Feedback with Class Toggling in React Router\nDESCRIPTION: Adds visual feedback to the search form by toggling CSS classes based on the searching state, showing a spinner during search operations.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/tutorials/address-book.md#2025-04-22_snippet_39\n\nLANGUAGE: tsx\nCODE:\n```\n// existing imports & exports\n\nexport default function SidebarLayout({\n  loaderData,\n}: Route.ComponentProps) {\n  // existing code\n\n  return (\n    <>\n      <div id=\"sidebar\">\n        {/* existing elements */}\n        <div>\n          <Form\n            id=\"search-form\"\n            onChange={(event) =>\n              submit(event.currentTarget)\n            }\n            role=\"search\"\n          >\n            <input\n              aria-label=\"Search contacts\"\n              className={searching ? \"loading\" : \"\"}\n              defaultValue={q || \"\"}\n              id=\"q\"\n              name=\"q\"\n              placeholder=\"Search\"\n              type=\"search\"\n            />\n            <div\n              aria-hidden\n              hidden={!searching}\n              id=\"search-spinner\"\n            />\n          </Form>\n          {/* existing elements */}\n        </div>\n        {/* existing elements */}\n      </div>\n      {/* existing elements */}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Type-Safe Context in React Router Middleware\nDESCRIPTION: Demonstrates how to create a type-safe context with unstable_createContext and use it within middleware functions. The example shows creating a user context, setting it in middleware, and retrieving it in a loader.\nSOURCE: https://github.com/remix-run/react-router/blob/main/decisions/0014-context-middleware.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlet userContext = unstable_createContext<User>();\n\nconst userMiddleware: Route.unstable_MiddlewareFunction = async ({\n  context,\n  request,\n}) => {\n  context.set(userContext, await getUser(request));\n};\n\nexport const middleware = [userMiddleware];\n\n// In some other route\nexport async function loader({ context }: Route.LoaderArgs) {\n  let user = context.get(userContext);\n  let posts = await getPosts(user);\n  return { posts };\n}\n```\n\n----------------------------------------\n\nTITLE: Combining File System Routing with Manual Configuration\nDESCRIPTION: Demonstrates how to combine file system routing using @react-router/fs-routes with manually configured routes. This allows for a mix of convention-based and explicitly defined routes.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/framework/routing.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  type RouteConfig,\n  route,\n} from \"@react-router/dev/routes\";\nimport { flatRoutes } from \"@react-router/fs-routes\";\n\nexport default [\n  route(\"/\", \"./home.tsx\"),\n\n  ...(await flatRoutes()),\n] satisfies RouteConfig;\n```\n\n----------------------------------------\n\nTITLE: Preventing Scroll Reset with Link in React Router\nDESCRIPTION: Shows how to prevent scroll position reset when using the Link component with ScrollRestoration in React Router.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/components/Link.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Link to=\"?tab=one\" preventScrollReset />\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Routes in React Router\nDESCRIPTION: This snippet demonstrates how to set up basic routes using BrowserRouter, Routes, and Route components from React Router. It shows the root configuration for a React application using React Router.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/declarative/routing.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport { BrowserRouter, Routes, Route } from \"react-router\";\nimport App from \"./app\";\n\nconst root = document.getElementById(\"root\");\n\nReactDOM.createRoot(root).render(\n  <BrowserRouter>\n    <Routes>\n      <Route path=\"/\" element={<App />} />\n    </Routes>\n  </BrowserRouter>\n);\n```\n\n----------------------------------------\n\nTITLE: Optimizing History Stack Management for Search in React Router\nDESCRIPTION: Implements history stack management by conditionally replacing history entries during search operations, preventing excessive entries when typing in the search box.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/tutorials/address-book.md#2025-04-22_snippet_41\n\nLANGUAGE: tsx\nCODE:\n```\n// existing imports & exports\n\nexport default function SidebarLayout({\n  loaderData,\n}: Route.ComponentProps) {\n  // existing code\n\n  return (\n    <>\n      <div id=\"sidebar\">\n        {/* existing elements */}\n        <div>\n          <Form\n            id=\"search-form\"\n            onChange={(event) => {\n              const isFirstSearch = q === null;\n              submit(event.currentTarget, {\n                replace: !isFirstSearch,\n              });\n            }}\n            role=\"search\"\n          >\n            {/* existing elements */}\n          </Form>\n          {/* existing elements */}\n        </div>\n        {/* existing elements */}\n      </div>\n      {/* existing elements */}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Rendering Fetcher Form in React Router Component\nDESCRIPTION: Demonstrates how to create a fetcher using useFetcher hook and render a form using fetcher.Form in a React Router component.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/fetchers.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLoaderData, useFetcher } from \"react-router\";\n\n// ...\n\nexport default function Component() {\n  let data = useLoaderData();\n  let fetcher = useFetcher();\n  return (\n    <div>\n      <h1>{data.title}</h1>\n\n      <fetcher.Form method=\"post\">\n        <input type=\"text\" name=\"title\" />\n      </fetcher.Form>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: useFetcher Hook Type Signature\nDESCRIPTION: Shows the TypeScript type signature for the useFetcher hook, which returns a FetcherWithComponents object when called with optional parameters.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/hooks/useFetcher.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nuseFetcher(options): FetcherWithComponents\n```\n\n----------------------------------------\n\nTITLE: Dashboard Component with Nested Routes\nDESCRIPTION: Demonstrates a Dashboard component rendering nested routes using the Routes component. It includes navigation links and routes for DashboardHome, DashboardTeam, and DashboardProjects components.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router/CHANGELOG.md#_snippet_22\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Dashboard() {\n  return (\n    <div>\n      <h2>Dashboard</h2>\n      <nav>\n        <Link to=\"/\">Dashboard Home</Link>\n        <Link to=\"team\">Team</Link>\n        <Link to=\"projects\">Projects</Link>\n      </nav>\n\n      <Routes>\n        <Route path=\"/\" element={<DashboardHome />} />\n        <Route path=\"team\" element={<DashboardTeam />} />\n        <Route path=\"projects\" element={<DashboardProjects />} />\n      </Routes>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Path for Route in React Router\nDESCRIPTION: The path prop defines the path to match against the current location. This is a crucial prop for determining when the route should be rendered.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/components/Route.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Route path=\"/users/:id\" element={<UserProfile />} />\n```\n\n----------------------------------------\n\nTITLE: Defining Routes with Element and Component - React Router (JSX)\nDESCRIPTION: Demonstrates two equivalent ways to define routes in React Router: using React Elements with `element` and `errorElement` props, and using React Components with the `Component` and `ErrorBoundary` props.  This snippet highlights the syntax for each approach, showing how both achieve the same routing functionality.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router/CHANGELOG.md#_snippet_32\n\nLANGUAGE: jsx\nCODE:\n```\n// Both of these work the same:\nconst elementRoutes = [{\n  path: '/',\n  element: <Home />,\n  errorElement: <HomeError />,\n}]\n\nconst componentRoutes = [{\n  path: '/',\n  Component: Home,\n  ErrorBoundary: HomeError,\n}]\n\nfunction Home() { ... }\nfunction HomeError() { ... }\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Handler in React Router Server Entry\nDESCRIPTION: Implementation of the handleError function in the server entry module to handle and report errors caught by React Router during server-side execution. The handler includes logic to avoid logging aborted requests and supports custom error reporting.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/error-reporting.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type HandleErrorFunction } from \"react-router\";\n\nexport const handleError: HandleErrorFunction = (\n  error,\n  { request }\n) => {\n  // React Router may abort some interrupted requests, don't log those\n  if (!request.signal.aborted) {\n    myReportError(error);\n\n    // make sure to still log the error so you can see it\n    console.error(error);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Client-Side Data Router Context Support (TypeScript)\nDESCRIPTION: This TypeScript snippet shows how to create and use context on the client-side in React Router data routers. It creates a user context, sets the user in middleware, and retrieves the user in a loader. It highlights the usage of `unstable_RouterContextProvider` for client-side context management.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router/CHANGELOG.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { unstable_createContext } from \"react-router\";\n\ntype User = {\n  /*...*/\n};\n\nlet userContext = unstable_createContext<User>();\n\nfunction sessionMiddleware({ context }) {\n  let user = await getUser();\n  context.set(userContext, user);\n}\n\n// ... then in some downstream loader\nfunction loader({ context }) {\n  let user = context.get(userContext);\n  let profile = await getProfile(user.id);\n  return { profile };\n}\n```\n\n----------------------------------------\n\nTITLE: Throwing Data with Status Code in React Router Loader\nDESCRIPTION: Example of throwing data with a 404 status code when a record is not found in a loader function, demonstrating proper error handling for missing resources.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/error-boundary.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { data } from \"react-router\";\n\nexport async function loader({ params }) {\n  let record = await fakeDb.getRecord(params.id);\n  if (!record) {\n    throw data(\"Record Not Found\", { status: 404 });\n  }\n  return record;\n}\n```\n\n----------------------------------------\n\nTITLE: Persistent Sidebar State with LocalStorage\nDESCRIPTION: Advanced implementation using localStorage to persist sidebar state across page refreshes, with proper handling of server-side rendering limitations.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/explanation/state-management.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Sidebar() {\n  const [isOpen, setIsOpen] = useState(false);\n\n  // synchronize initially\n  useLayoutEffect(() => {\n    const isOpen = window.localStorage.getItem(\"sidebar\");\n    setIsOpen(isOpen);\n  }, []);\n\n  // synchronize on change\n  useEffect(() => {\n    window.localStorage.setItem(\"sidebar\", isOpen);\n  }, [isOpen]);\n\n  return (\n    <div>\n      <button onClick={() => setIsOpen((open) => !open)}>\n        {isOpen ? \"Close\" : \"Open\"}\n      </button>\n      <aside hidden={!isOpen}>\n        <Outlet />\n      </aside>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Route for Deleting Contacts in React Router\nDESCRIPTION: This code demonstrates how to create a new route for deleting contacts in React Router using the command line and route configuration.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/tutorials/address-book.md#2025-04-22_snippet_30\n\nLANGUAGE: shellscript\nCODE:\n```\ntouch app/routes/destroy-contact.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing PDF Resource Route Handler\nDESCRIPTION: Implementation of a resource route loader that generates and serves a PDF file. The absence of a default export marks this as a resource route.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/resource-routes.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Route } from \"./+types/pdf-report\";\n\nexport async function loader({ params }: Route.LoaderArgs) {\n  const report = await getReport(params.id);\n  const pdf = await generateReportPDF(report);\n  return new Response(pdf, {\n    status: 200,\n    headers: {\n      \"Content-Type\": \"application/pdf\",\n    },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Local Navigation Pending States with NavLink in React Router\nDESCRIPTION: Shows how to implement localized pending states for individual navigation links using NavLink component. Demonstrates both render prop and style prop approaches for showing pending states.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/framework/pending-ui.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NavLink } from \"react-router\";\n\nfunction Navbar() {\n  return (\n    <nav>\n      <NavLink to=\"/home\">\n        {({ isPending }) => (\n          <span>Home {isPending && <Spinner />}</span>\n        )}\n      </NavLink>\n      <NavLink\n        to=\"/about\"\n        style={({ isPending }) => ({\n          color: isPending ? \"gray\" : \"black\",\n        })}\n      >\n        About\n      </NavLink>\n    </nav>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing React Router Components for SSR\nDESCRIPTION: This snippet demonstrates the import of BrowserRouter for client-side routing in a React application using TypeScript. It's typically used in the browser entry point for hydrating the server-rendered content.\nSOURCE: https://github.com/remix-run/react-router/blob/main/examples/ssr/README.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { BrowserRouter } from 'react-router-dom';\n```\n\n----------------------------------------\n\nTITLE: Preventing Main Screen Fading During Search in React Router\nDESCRIPTION: Modifies the detail area's class to prevent the loading animation when performing a search, improving the user experience by only showing loading indicators in relevant areas.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/tutorials/address-book.md#2025-04-22_snippet_40\n\nLANGUAGE: tsx\nCODE:\n```\n// existing imports & exports\n\nexport default function SidebarLayout({\n  loaderData,\n}: Route.ComponentProps) {\n  // existing code\n\n  return (\n    <>\n      {/* existing elements */}\n      <div\n        className={\n          navigation.state === \"loading\" && !searching\n            ? \"loading\"\n            : \"\"\n        }\n        id=\"detail\"\n      >\n        <Outlet />\n      </div>\n      {/* existing elements */}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Forcing Client Loader Hydration in React Router\nDESCRIPTION: This snippet shows how to force the client loader to run during hydration in React Router. It includes setting the hydrate property and providing a HydrateFallback component.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/framework/data-loading.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nexport async function loader() {\n  /* ... */\n}\n\nexport async function clientLoader() {\n  /* ... */\n}\n\n// force the client loader to run during hydration\nclientLoader.hydrate = true as const; // `as const` for type inference\n\nexport function HydrateFallback() {\n  return <div>Loading...</div>;\n}\n\nexport default function Product() {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling React.startTransition future flag - JSX\nDESCRIPTION: This code shows how to enable the `v7_startTransition` future flag for `BrowserRouter` and `RouterProvider`. This flag enables React's `startTransition` feature within React Router, which is recommended for better compatibility with React concurrent mode. It is recommended to enable this flag before v7 to identify any potential issues related to promise creation during the render cycle.\nSOURCE: https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#_snippet_45\n\nLANGUAGE: JSX\nCODE:\n```\n<BrowserRouter future={{ v7_startTransition: true }}>\n  <Routes>{/*...*/}</Routes>\n</BrowserRouter>\n\n<RouterProvider router={router} future={{ v7_startTransition: true }}/>\n```\n\n----------------------------------------\n\nTITLE: Configuring React Router in Data Mode\nDESCRIPTION: Setup for Data Mode using createBrowserRouter to enable advanced features like data loading and actions with route configuration outside React rendering.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/modes.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  createBrowserRouter,\n  RouterProvider,\n} from \"react-router\";\n\nlet router = createBrowserRouter([\n  {\n    path: \"/\",\n    Component: Root,\n    loader: loadRootData,\n  },\n]);\n\nReactDOM.createRoot(root).render(\n  <RouterProvider router={router} />\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Server and Client-side Logic in a React Router Route Module\nDESCRIPTION: This code snippet illustrates a route module in React Router that contains both server-side functions (loader, action, headers) and a client-side React component. After building for the browser, only the Component will be included in the bundle, allowing for server-only code in other exports.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/explanation/code-splitting.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport async function loader() {\n  return { message: \"hello\" };\n}\n\nexport async function action() {\n  console.log(Date.now());\n  return { ok: true };\n}\n\nexport async function headers() {\n  return { \"Cache-Control\": \"max-age=300\" };\n}\n\nexport default function Component({ loaderData }) {\n  return <div>{loaderData.message}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Real-time Form Submission with useSubmit in React Router\nDESCRIPTION: Adds onChange event handling to the search form that automatically submits the form as the user types using the useSubmit hook from React Router. This creates a responsive filtering experience without requiring the user to press Enter.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/tutorials/address-book.md#2025-04-22_snippet_37\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Form,\n  Link,\n  NavLink,\n  Outlet,\n  useNavigation,\n  useSubmit,\n} from \"react-router\";\n// existing imports & exports\n\nexport default function SidebarLayout({\n  loaderData,\n}: Route.ComponentProps) {\n  const { contacts, q } = loaderData;\n  const navigation = useNavigation();\n  const submit = useSubmit();\n\n  // existing code\n\n  return (\n    <>\n      <div id=\"sidebar\">\n        {/* existing elements */}\n        <div>\n          <Form\n            id=\"search-form\"\n            onChange={(event) =>\n              submit(event.currentTarget)\n            }\n            role=\"search\"\n          >\n            {/* existing elements */}\n          </Form>\n          {/* existing elements */}\n        </div>\n        {/* existing elements */}\n      </div>\n      {/* existing elements */}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Route Module in React Router\nDESCRIPTION: Example of how to define a route module in the routes.ts file, specifying the path and the corresponding component file.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/framework/route-module.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nroute(\"teams/:teamId\", \"./team.tsx\"),\n```\n\n----------------------------------------\n\nTITLE: Lazy Route Modules - Defining Routes\nDESCRIPTION: Shows how to use the `lazy` property in `react-router` to dynamically import route modules. This enables code-splitting and reduces the initial bundle size.  The `lazy` function should return a promise that resolves to a module containing the route's configuration.\nSOURCE: https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#_snippet_51\n\nLANGUAGE: JSX\nCODE:\n```\n// In this example, we assume most folks land on the homepage so we include that\n// in our critical-path bundle, but then we lazily load modules for /a and /b so\n// they don't load until the user navigates to those routes\nlet routes = createRoutesFromElements(\n  <Route path=\"/\" element={<Layout />}>\n    <Route index element={<Home />} />\n    <Route path=\"a\" lazy={() => import(\"./a\")} />\n    <Route path=\"b\" lazy={() => import(\"./b\")} />\n  </Route>\n);\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Fetcher Data in React Router Combobox\nDESCRIPTION: Demonstrates how to render the data returned by the fetcher in a combobox component.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/fetchers.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useFetcher } from \"react-router\";\n\nexport function UserSearchCombobox() {\n  let fetcher = useFetcher<typeof Search.action>();\n  return (\n    <div>\n      <fetcher.Form method=\"get\" action=\"/search-users\">\n        <input type=\"text\" name=\"q\" />\n      </fetcher.Form>\n      {fetcher.data && (\n        <ul>\n          {fetcher.data.map((user) => (\n            <li key={user.id}>{user.name}</li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Improved Route Definition with Component Property\nDESCRIPTION: Example of the new Component-based route definition approach, which allows for more natural component usage, inline component functions, and direct hook access.\nSOURCE: https://github.com/remix-run/react-router/blob/main/decisions/0002-lazy-route-modules.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst routes = [\n  {\n    path: \"/\",\n    // You can include just the component\n    Component: Homepage,\n  },\n  {\n    path: \"/a\",\n    // Or you can inline your component and pass props\n    Component: () => <Homepage prop=\"value\" />,\n  },\n  {\n    path: \"/b\",\n    // And even use use hooks without indirection 💥\n    Component: () => {\n      let data = useLoaderData();\n      return <Homepage data={data} />;\n    },\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Route Segments in React Router\nDESCRIPTION: This code snippet demonstrates the file structure for optional route segments in React Router. Optional segments are wrapped in parentheses, allowing for flexible URL matching.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/file-route-conventions.md#2025-04-22_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n app/\n├── routes/\n│   ├── ($lang)._index.tsx\n│   ├── ($lang).$productId.tsx\n│   └── ($lang).categories.tsx\n└── root.tsx\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Route Parameters in React Router\nDESCRIPTION: Demonstrates how to define a route with dynamic parameters using the Route component in React Router. The example shows a route definition with a dynamic :city parameter.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/declarative/url-values.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Route path=\"/concerts/:city\" element={<City />} />\n```\n\n----------------------------------------\n\nTITLE: Using Route Module Types (TS)\nDESCRIPTION: Illustrates how to use generated types for route modules in React Router. These types provide type safety for `Params`, `LoaderData`, and `ActionData` within your route components and loaders, improving the overall type safety of your application.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router/CHANGELOG.md#_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\n// app/routes/product.tsx\nimport type * as Route from \"./+types.product\";\n\nexport function loader({ params }: Route.LoaderArgs) {}\n\nexport default function Component({ loaderData }: Route.ComponentProps) {}\n```\n\n----------------------------------------\n\nTITLE: Accessing Location State in React Router\nDESCRIPTION: Shows how to access the location state added through the Link component in a React component using useLocation hook.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/components/Link.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nfunction SomeComp() {\n  const location = useLocation();\n  location.state; // { some: \"value\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Providing Initial Context with unstable_getContext (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to provide initial context values using the `unstable_getContext` function in React Router. It sets up a logger context and provides an initial logger function.  It shows how to initialize the context for every request with default values.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router/CHANGELOG.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst loggerContext = unstable_createContext<(...args: unknown[]) => void>();\n\nfunction logger(...args: unknown[]) {\n  console.log(new Date.toISOString(), ...args);\n}\n\nfunction unstable_getContext() {\n  let map = new Map();\n  map.set(loggerContext, logger);\n  return map;\n}\n```\n\n----------------------------------------\n\nTITLE: Optional Params Usage - React Router (JSX)\nDESCRIPTION: Illustrates how to define optional route parameters in React Router using the `?` symbol.  This makes entire path segments optional, matching URLs with or without the specified parameter.  The example showcases optional dynamic parameters and optional static segments.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router/CHANGELOG.md#_snippet_36\n\nLANGUAGE: jsx\nCODE:\n```\n// Old behavior at URL /prefix-123\n<Route path=\"prefix-:id\" element={<Comp /> }>\n\nfunction Comp() {\n  let params = useParams(); // { id: '123' }\n  let id = params.id; // \"123\"\n  ...\n}\n\n// New behavior at URL /prefix-123\n<Route path=\":id\" element={<Comp /> }>\n\nfunction Comp() {\n  let params = useParams(); // { id: 'prefix-123' }\n  let id = params.id.replace(/^prefix-/, ''); // \"123\"\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Edit Contact Page UI in React Router (TypeScript)\nDESCRIPTION: This snippet demonstrates the implementation of the edit contact page UI using React Router's Form component. It includes a loader function to fetch contact data and a form with input fields for editing contact information.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/tutorials/address-book.md#2025-04-22_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Form } from \"react-router\";\nimport type { Route } from \"./+types/edit-contact\";\n\nimport { getContact } from \"../data\";\n\nexport async function loader({ params }: Route.LoaderArgs) {\n  const contact = await getContact(params.contactId);\n  if (!contact) {\n    throw new Response(\"Not Found\", { status: 404 });\n  }\n  return { contact };\n}\n\nexport default function EditContact({\n  loaderData,\n}: Route.ComponentProps) {\n  const { contact } = loaderData;\n\n  return (\n    <Form key={contact.id} id=\"contact-form\" method=\"post\">\n      <p>\n        <span>Name</span>\n        <input\n          aria-label=\"First name\"\n          defaultValue={contact.first}\n          name=\"first\"\n          placeholder=\"First\"\n          type=\"text\"\n        />\n        <input\n          aria-label=\"Last name\"\n          defaultValue={contact.last}\n          name=\"last\"\n          placeholder=\"Last\"\n          type=\"text\"\n        />\n      </p>\n      <label>\n        <span>Twitter</span>\n        <input\n          defaultValue={contact.twitter}\n          name=\"twitter\"\n          placeholder=\"@jack\"\n          type=\"text\"\n        />\n      </label>\n      <label>\n        <span>Avatar URL</span>\n        <input\n          aria-label=\"Avatar URL\"\n          defaultValue={contact.avatar}\n          name=\"avatar\"\n          placeholder=\"https://example.com/avatar.jpg\"\n          type=\"text\"\n        />\n      </label>\n      <label>\n        <span>Notes</span>\n        <textarea\n          defaultValue={contact.notes}\n          name=\"notes\"\n          rows={6}\n        />\n      </label>\n      <p>\n        <button type=\"submit\">Save</button>\n        <button type=\"button\">Cancel</button>\n      </p>\n    </Form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Routes in Framework Mode\nDESCRIPTION: Route configuration in Framework Mode using the Route Module API with typesafe routing and advanced features.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/modes.md#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { index, route } from \"@react-router/dev/routes\";\n\nexport default [\n  index(\"./home.tsx\"),\n  route(\"products/:pid\", \"./product.tsx\"),\n];\n```\n\n----------------------------------------\n\nTITLE: Rendering Nested Routes with Outlet in React Router\nDESCRIPTION: Shows how to use the Outlet component to render child routes within a parent component. This example demonstrates the implementation of a dashboard layout that can render different child components.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/data/routing.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Outlet } from \"react-router\";\n\nexport default function Dashboard() {\n  return (\n    <div>\n      <h1>Dashboard</h1>\n      {/* will either be <Home> or <Settings> */}\n      <Outlet />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useRevalidator for Window Focus Revalidation in React Router\nDESCRIPTION: Example demonstrating how to use the useRevalidator hook to trigger data revalidation when the browser window regains focus. The component displays a loading indicator during revalidation.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/hooks/useRevalidator.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useRevalidator } from \"react-router\";\n\nfunction WindowFocusRevalidator() {\n  const revalidator = useRevalidator();\n\n  useFakeWindowFocus(() => {\n    revalidator.revalidate();\n  });\n\n  return (\n    <div hidden={revalidator.state === \"idle\"}>\n      Revalidating...\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Enhancing Search Box with Loading Indicator in React Router\nDESCRIPTION: This snippet shows how to enhance the search box with a loading indicator using React Router's useNavigation hook. It maintains the original functionality while adding a visual cue for the search state.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/explanation/progressive-enhancement.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useNavigation } from \"react-router\";\n\nexport function SearchBox() {\n  const navigation = useNavigation();\n  const isSearching =\n    navigation.location.pathname === \"/search\";\n\n  return (\n    <Form method=\"get\" action=\"/search\">\n      <input type=\"search\" name=\"query\" />\n      {isSearching ? <Spinner /> : <SearchIcon />}\n    </Form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Optimistic UI Updates in React Router\nDESCRIPTION: Demonstrates implementing optimistic UI updates using form submission data, allowing immediate UI feedback before the server response is received.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/framework/pending-ui.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Task({ task }) {\n  const fetcher = useFetcher();\n\n  let isComplete = task.status === \"complete\";\n  if (fetcher.formData) {\n    isComplete =\n      fetcher.formData.get(\"status\") === \"complete\";\n  }\n\n  return (\n    <div>\n      <div>{task.title}</div>\n      <fetcher.Form method=\"post\">\n        <button\n          name=\"status\"\n          value={isComplete ? \"incomplete\" : \"complete\"}\n        >\n          {isComplete ? \"Mark Incomplete\" : \"Mark Complete\"}\n        </button>\n      </fetcher.Form>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Type Checking Remix Cookie Objects\nDESCRIPTION: Utility function that validates whether a given object is a Remix cookie container by checking its type.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/utils/isCookie.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isCookie(value: any): boolean\n```\n\n----------------------------------------\n\nTITLE: Using Link Component in React Router\nDESCRIPTION: This snippet shows how to use the Link component from React Router for basic navigation without active styling. It's used within a component to create a simple login link.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/framework/navigating.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Link } from \"react-router\";\n\nexport function LoggedOutMessage() {\n  return (\n    <p>\n      You've been logged out.{\" \"}\n      <Link to=\"/login\">Login again</Link>\n    </p>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useResolvedPath Hook in React Router\nDESCRIPTION: Example showing how to use useResolvedPath hook to resolve relative paths against the current location. The hook returns a Path object containing pathname, search, and hash properties.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/hooks/useResolvedPath.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useResolvedPath } from \"react-router\";\n\nfunction SomeComponent() {\n  // if the user is at /dashboard/profile\n  let path = useResolvedPath(\"../accounts\");\n  path.pathname; // \"/dashboard/accounts\"\n  path.search; // \"\"\n  path.hash; // \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Route Object in React Router\nDESCRIPTION: Demonstrates how to create a simple route object with a path and Component property using createBrowserRouter.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/data/route-object.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ncreateBrowserRouter([\n  {\n    path: \"/\",\n    Component: App,\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Defining Routes Configuration\nDESCRIPTION: Route configuration setup that maps URL patterns to corresponding route modules using TypeScript.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/explanation/special-files.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  type RouteConfig,\n  route,\n} from \"@react-router/dev/routes\";\n\nexport default [\n  route(\"some/path\", \"./some/file.tsx\"),\n  // pattern ^           ^ module file\n] satisfies RouteConfig;\n```\n\n----------------------------------------\n\nTITLE: Illustrating Hook Destructuring Impact on React Fast Refresh\nDESCRIPTION: This code example shows how changing the destructured key of a hook's return value can affect React Fast Refresh's ability to preserve component state. It demonstrates that renaming a destructured key can lead to loss of state in child components.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/explanation/hot-module-replacement.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Component({ loaderData }) {\n  const { pet } = useMyCustomHook();\n  return (\n    <div>\n      <input />\n      <p>My dog's name is {pet.name}!</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Intentional Error in React Router Loader\nDESCRIPTION: Demonstration of an intentional error in a loader function that will trigger the error boundary's Error instance handling branch.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/error-boundary.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport async function loader() {\n  return undefined();\n}\n```\n\n----------------------------------------\n\nTITLE: Server-side Cookie Management in React Router\nDESCRIPTION: Shows how to set up server action and loader to read and write cookie state for sidebar preferences.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/explanation/state-management.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { data, Outlet } from \"react-router\";\nimport type { Route } from \"./+types/sidebar\";\n\nimport { prefs } from \"./prefs-cookie\";\n\n// read the state from the cookie\nexport async function loader({\n  request,\n}: Route.LoaderArgs) {\n  const cookieHeader = request.headers.get(\"Cookie\");\n  const cookie = (await prefs.parse(cookieHeader)) || {};\n  return data({ sidebarIsOpen: cookie.sidebarIsOpen });\n}\n\n// write the state to the cookie\nexport async function action({\n  request,\n}: Route.ActionArgs) {\n  const cookieHeader = request.headers.get(\"Cookie\");\n  const cookie = (await prefs.parse(cookieHeader)) || {};\n  const formData = await request.formData();\n\n  const isOpen = formData.get(\"sidebar\") === \"open\";\n  cookie.sidebarIsOpen = isOpen;\n\n  return data(isOpen, {\n    headers: {\n      \"Set-Cookie\": await prefs.serialize(cookie),\n    },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Route Module in TypeScript\nDESCRIPTION: Shows the structure of a route module file, including the loader function for data fetching and the default export component for rendering. It demonstrates type safety and data passing between the loader and component.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/framework/routing.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// provides type safety/inference\nimport type { Route } from \"./+types/team\";\n\n// provides `loaderData` to the component\nexport async function loader({ params }: Route.LoaderArgs) {\n  let team = await fetchTeam(params.teamId);\n  return { name: team.name };\n}\n\n// renders after the loader is done\nexport default function Component({\n  loaderData,\n}: Route.ComponentProps) {\n  return <h1>{loaderData.name}</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Client-Side Feature Detection Module\nDESCRIPTION: Example of a .client module that performs browser-specific feature detection. Demonstrates how to handle browser-only code that would break server-side execution.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/explanation/special-files.md#2025-04-22_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nexport const supportsVibrationAPI =\n  \"vibrate\" in window.navigator;\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Loader with Promise Returns in React Router\nDESCRIPTION: Demonstrates how to create a loader function that returns both immediate critical data and deferred non-critical data using promises. The loader awaits critical data while passing through the non-critical data promise.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/suspense.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Route } from \"./+types/my-route\";\n\nexport async function loader({}: Route.LoaderArgs) {\n  // note this is NOT awaited\n  let nonCriticalData = new Promise((res) =>\n    setTimeout(() => res(\"non-critical\"), 5000)\n  );\n\n  let criticalData = await new Promise((res) =>\n    setTimeout(() => res(\"critical\"), 300)\n  );\n\n  return { nonCriticalData, criticalData };\n}\n```\n\n----------------------------------------\n\nTITLE: Image Detail Route Component - TSX\nDESCRIPTION: Implementation of the detail view route component with view transition support.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/view-transitions.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Link } from \"react-router\";\nimport { images } from \"./home\";\nimport type { Route } from \"./+types/image-details\";\n\nexport default function ImageDetailsRoute({\n  params,\n}: Route.ComponentProps) {\n  return (\n    <div className=\"image-detail\">\n      <Link to=\"/\" viewTransition>\n        Back\n      </Link>\n      <h1>Image Number {params.id}</h1>\n      <img src={images[Number(params.id)]} />\n    </div>\n  );\n```\n\n----------------------------------------\n\nTITLE: Importing HydratedRouter - React Router DOM\nDESCRIPTION: This snippet illustrates how to import `HydratedRouter` from `react-router/dom` in a Vite project.  This is required to properly enable react-dom as an optional peerDependency and resolve issues with ReactDOM.flushSync() during SSR.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router/CHANGELOG.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// If you are using the Vite plugin, use this in your entry.client.tsx:\n// import { HydratedRouter } from 'react-router/dom'\n```\n\n----------------------------------------\n\nTITLE: Advanced View Transition with Render Props - TSX\nDESCRIPTION: Example of using render props for more precise control over view transitions.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/view-transitions.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<NavLink to={`/image/${idx}`} viewTransition>\n  {({ isTransitioning }) => (\n    <>\n      <p\n        style={{\n          viewTransitionName: isTransitioning\n            ? \"image-title\"\n            : \"none\",\n        }}\n      >\n        Image Number {idx}\n      </p>\n      <img\n        src={src}\n        style={{\n          viewTransitionName: isTransitioning\n            ? \"image-expand\"\n            : \"none\",\n        }}\n      />\n    </>\n  )}\n</NavLink>\n```\n\n----------------------------------------\n\nTITLE: Await Error Handling with useAsyncError Hook\nDESCRIPTION: Demonstrates advanced error handling using useAsyncError hook to access detailed error information.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/components/Await.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Await\n  errorElement={<ReviewsError />}\n  resolve={reviewsPromise}\n>\n  <Reviews />\n</Await>;\n\nfunction ReviewsError() {\n  const error = useAsyncError();\n  return <div>Error loading reviews: {error.message}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Cookie Attributes Configuration\nDESCRIPTION: Example showing how to configure various cookie attributes like path, sameSite, httpOnly, secure, expires, and maxAge.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/explanation/sessions-and-cookies.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst cookie = createCookie(\"user-prefs\", {\n  // These are defaults for this cookie.\n  path: \"/\",\n  sameSite: \"lax\",\n  httpOnly: true,\n  secure: true,\n  expires: new Date(Date.now() + 60_000),\n  maxAge: 60,\n});\n\n// You can either use the defaults:\ncookie.serialize(userPrefs);\n\n// Or override individual ones as needed:\ncookie.serialize(userPrefs, { sameSite: \"strict\" });\n```\n\n----------------------------------------\n\nTITLE: Function Signature for createBrowserRouter in React Router\nDESCRIPTION: Defines the TypeScript signature for the createBrowserRouter function, which creates a DataRouter instance from routes and optional configuration. The function takes routes and optional parameters to configure browser-based routing.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/data-routers/createBrowserRouter.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ncreateBrowserRouter(routes, opts): DataRouter\n```\n\n----------------------------------------\n\nTITLE: Creating Routes from JSX Elements in React Router\nDESCRIPTION: Function signature for createRoutesFromElements that transforms JSX route elements into route objects. Takes children elements and optional parentPath as parameters.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/utils/createRoutesFromElements.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ncreateRoutesFromElements(children, parentPath): undefined\n```\n\n----------------------------------------\n\nTITLE: Creating Cookie in React Router\nDESCRIPTION: Example of creating a cookie with maxAge attribute for user preferences using React Router's createCookie function.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/explanation/sessions-and-cookies.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createCookie } from \"react-router\";\n\nexport const userPrefs = createCookie(\"user-prefs\", {\n  maxAge: 604_800, // one week\n});\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Form Input with URL Parameters in React Router\nDESCRIPTION: Updates the loader function to return the search query parameter and sets it as the default value for the search input. This ensures the input field displays the current search term when refreshing the page after a search.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/tutorials/address-book.md#2025-04-22_snippet_35\n\nLANGUAGE: tsx\nCODE:\n```\n// existing imports & exports\n\nexport async function loader({\n  request,\n}: Route.LoaderArgs) {\n  const url = new URL(request.url);\n  const q = url.searchParams.get(\"q\");\n  const contacts = await getContacts(q);\n  return { contacts, q };\n}\n\nexport default function SidebarLayout({\n  loaderData,\n}: Route.ComponentProps) {\n  const { contacts, q } = loaderData;\n  const navigation = useNavigation();\n\n  return (\n    <>\n      <div id=\"sidebar\">\n        {/* existing elements */}\n        <div>\n          <Form id=\"search-form\" role=\"search\">\n            <input\n              aria-label=\"Search contacts\"\n              defaultValue={q || \"\"}\n              id=\"q\"\n              name=\"q\"\n              placeholder=\"Search\"\n              type=\"search\"\n            />\n            {/* existing elements */}\n          </Form>\n          {/* existing elements */}\n        </div>\n        {/* existing elements */}\n      </div>\n      {/* existing elements */}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Client Loader in React Router\nDESCRIPTION: Demonstrates how to implement a client loader that can call the server loader and/or fetch data on the client side.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/framework/route-module.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport async function clientLoader({ serverLoader }) {\n  // call the server loader\n  const serverData = await serverLoader();\n  // And/or fetch data on the client\n  const data = getDataFromClient();\n  // Return the data to expose through useLoaderData()\n  return data;\n}\n\nclientLoader.hydrate = true as const;\n```\n\n----------------------------------------\n\nTITLE: Defining Route Module in React Router (TypeScript)\nDESCRIPTION: Example of converting a route definition into a route module following the Route Module API. It exports a clientLoader function and a default component.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/upgrading/router-provider.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport async function clientLoader() {\n  return {\n    title: \"About\",\n  };\n}\n\nexport default function About() {\n  let data = useLoaderData();\n  return <div>{data.title}</div>;\n}\n\n// clientAction, ErrorBoundary, etc.\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for NavLink States\nDESCRIPTION: Shows CSS classes that can be used to style NavLink in different states including active, pending, and transitioning.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/components/NavLink.md#2025-04-22_snippet_2\n\nLANGUAGE: css\nCODE:\n```\na.active {\n  color: red;\n}\na.pending {\n  color: blue;\n}\na.transitioning {\n  view-transition-name: my-transition;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Product Route Module\nDESCRIPTION: Example of a Product route module implementation using Framework Mode with typed loader arguments and component props.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/modes.md#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { Route } from \"+./types/product.tsx\";\n\nexport async function loader({ params }: Route.LoaderArgs) {\n  let product = await getProduct(params.pid);\n  return { product };\n}\n\nexport default function Product({\n  loaderData,\n}: Route.ComponentProps) {\n  return <div>{loaderData.product.name}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Route Configuration with Layout and Prefix\nDESCRIPTION: Shows a more complex route configuration using layout, index, and prefix functions. It demonstrates how to create nested routes, layout routes, and prefixed routes.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/framework/routing.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  type RouteConfig,\n  route,\n  index,\n  layout,\n  prefix,\n} from \"@react-router/dev/routes\";\n\nexport default [\n  index(\"./home.tsx\"),\n  route(\"about\", \"./about.tsx\"),\n\n  layout(\"./auth/layout.tsx\", [\n    route(\"login\", \"./auth/login.tsx\"),\n    route(\"register\", \"./auth/register.tsx\"),\n  ]),\n\n  ...prefix(\"concerts\", [\n    index(\"./concerts/home.tsx\"),\n    route(\":city\", \"./concerts/city.tsx\"),\n    route(\"trending\", \"./concerts/trending.tsx\"),\n  ]),\n] satisfies RouteConfig;\n```\n\n----------------------------------------\n\nTITLE: Split Route Module with Shared Import - Main (TSX)\nDESCRIPTION: The main component chunk after extracting the shared code into its own module, also importing the shared code.\nSOURCE: https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MassiveComponent } from \"~/components\";\nimport { shared } from \"./shared\";\n\nexport default function Component({ loaderData }) {\n  shared();\n  return <MassiveComponent data={loaderData} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Relative Links in Dashboard Component\nDESCRIPTION: Code diff showing how to update relative links within components to accommodate the new routing behavior.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/upgrading/v6.md#2025-04-22_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\nfunction Dashboard() {\n  return (\n    <div>\n      <h2>Dashboard</h2>\n      <nav>\n-        <Link to=\"/\">Dashboard Home</Link>\n-        <Link to=\"team\">Team</Link>\n-        <Link to=\"projects\">Projects</Link>\n+        <Link to=\"../\">Dashboard Home</Link>\n+        <Link to=\"../team\">Team</Link>\n+        <Link to=\"../projects\">Projects</Link>\n      </nav>\n\n      <Routes>\n        <Route path=\"/\" element={<DashboardHome />} />\n        <Route path=\"team\" element={<DashboardTeam />} />\n        <Route\n          path=\"projects\"\n          element={<DashboardProjects />}\n        />\n      </Routes>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pre-rendering Options in React Router\nDESCRIPTION: Shows different ways to configure pre-rendering in react-router.config.ts including boolean flags, static paths, and async functions for CMS integration.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/pre-rendering.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Config } from \"@react-router/dev/config\";\n\nexport default {\n  // Can be omitted - defaults to true\n  ssr: true,\n\n  // all static paths (no dynamic segments like \"/post/:slug\")\n  prerender: true,\n\n  // specific paths\n  prerender: [\"/\", \"/blog\", \"/blog/popular-post\"],\n\n  // async function for dependencies like a CMS\n  async prerender({ getStaticPaths }) {\n    let posts = await fakeGetPostsFromCMS();\n    return [\n      \"/\",\n      \"/blog\",\n      ...posts.map((post) => post.href),\n    ];\n  },\n} satisfies Config;\n```\n\n----------------------------------------\n\nTITLE: Nested Route Configuration with Error Boundaries\nDESCRIPTION: Example of nested route configuration showing error boundary inheritance and how different routes handle errors based on their position in the routing hierarchy.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/error-boundary.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nroute(\"/app\", \"app.tsx\", [\n  route(\"invoices\", \"invoices.tsx\", [\n    route(\"invoices/:id\", \"invoice-page.tsx\", [\n      route(\"payments\", \"payments.tsx\"),\n    ]),\n  ]),\n]);\n```\n\n----------------------------------------\n\nTITLE: Exporting Custom Values in a Separate Module for React Router\nDESCRIPTION: This snippet demonstrates how to export custom values in a separate non-route module to avoid causing full reloads in React Router when using Hot Module Replacement.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/explanation/hot-module-replacement.md#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nexport const myValue = \"some value\";\n```\n\n----------------------------------------\n\nTITLE: Overwriting Parent Headers (TSX)\nDESCRIPTION: Shows how to overwrite headers set by a parent route using the set method. This is useful when the child route needs to replace a specific header value.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/headers.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nexport function headers({ parentHeaders }: HeadersArgs) {\n  parentHeaders.set(\n    \"Cache-Control\",\n    \"max-age=3600, s-maxage=86400\"\n  );\n  return parentHeaders;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Link Discovery Behavior\nDESCRIPTION: Shows how to configure the link discovery behavior using the discover prop.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/components/NavLink.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Link discover=\"render\" />\n```\n\n----------------------------------------\n\nTITLE: Accessing Multiple URL Parameters in React Router Loader\nDESCRIPTION: Example of accessing multiple URL parameters in a loader function for a route with multiple dynamic segments.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/file-route-conventions.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nexport async function serverLoader({ params }) {\n  return fake.db.getConcerts({\n    date: params.date,\n    city: params.city,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Client-side Sidebar Component with Cookie State\nDESCRIPTION: Implementation of a sidebar component that uses cookie-based state with optimistic UI updates.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/explanation/state-management.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Sidebar({ loaderData }: Route.ComponentProps) {\n  const fetcher = useFetcher();\n  let { sidebarIsOpen } = loaderData;\n\n  // use optimistic UI to immediately change the UI state\n  if (fetcher.formData?.has(\"sidebar\")) {\n    sidebarIsOpen =\n      fetcher.formData.get(\"sidebar\") === \"open\";\n  }\n\n  return (\n    <div>\n      <fetcher.Form method=\"post\">\n        <button\n          name=\"sidebar\"\n          value={sidebarIsOpen ? \"closed\" : \"open\"}\n        >\n          {sidebarIsOpen ? \"Close\" : \"Open\"}\n        </button>\n      </fetcher.Form>\n      <aside hidden={!sidebarIsOpen}>\n        <Outlet />\n      </aside>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Validation Action\nDESCRIPTION: Defines the server-side action function that handles form validation logic and returns appropriate responses.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/form-validation.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport async function action({\n  request,\n}: Route.ActionArgs) {\n  const formData = await request.formData();\n  const email = String(formData.get(\"email\"));\n  const password = String(formData.get(\"password\"));\n\n  const errors = {};\n\n  if (!email.includes(\"@\")) {\n    errors.email = \"Invalid email address\";\n  }\n\n  if (password.length < 12) {\n    errors.password =\n      \"Password should be at least 12 characters\";\n  }\n\n  if (Object.keys(errors).length > 0) {\n    return data({ errors }, { status: 400 });\n  }\n\n  // Redirect to dashboard if validation is successful\n  return redirect(\"/dashboard\");\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ScrollRestoration in React Router\nDESCRIPTION: This snippet demonstrates how to use the ScrollRestoration component in a React Router application. It should be rendered once, typically just before the Scripts component.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/components/ScrollRestoration.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ScrollRestoration } from \"react-router\";\n\nexport default function Root() {\n  return (\n    <html>\n      <body>\n        <ScrollRestoration />\n        <Scripts />\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useFormAction Hook in React Router\nDESCRIPTION: Demonstrates basic usage of useFormAction hook to resolve URLs relative to the closest route. Shows both default usage and usage with an action parameter.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/hooks/useFormAction.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useFormAction } from \"react-router\";\n\nfunction SomeComponent() {\n  // closest route URL\n  let action = useFormAction();\n\n  // closest route URL + \"destroy\"\n  let destroyAction = useFormAction(\"destroy\");\n}\n```\n\n----------------------------------------\n\nTITLE: Simplified React Router Form Implementation\nDESCRIPTION: Streamlined form implementation using React Router's built-in features for state management and validation.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/explanation/state-management.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useNavigation } from \"react-router\";\nimport type { Route } from \"./+types/signup\";\n\nexport async function action({\n  request,\n}: ActionFunctionArgs) {\n  const errors = await validateSignupRequest(request);\n  if (errors) {\n    return { ok: false, errors: errors };\n  }\n  await signupUser(request);\n  return { ok: true, errors: null };\n}\n\nexport function Signup({\n  actionData,\n}: Route.ComponentProps) {\n  const navigation = useNavigation();\n\n  const userNameError = actionData?.errors?.userName;\n  const passwordError = actionData?.errors?.password;\n  const isSubmitting = navigation.formAction === \"/signup\";\n\n  return (\n    <Form method=\"post\">\n      <p>\n        <input type=\"text\" name=\"username\" />\n        {userNameError ? <i>{userNameError}</i> : null}\n      </p>\n\n      <p>\n        <input type=\"password\" name=\"password\" />\n        {passwordError ? <i>{passwordError}</i> : null}\n      </p>\n\n      <button disabled={isSubmitting} type=\"submit\">\n        Sign Up\n      </button>\n\n      {isSubmitting ? <BusyIndicator /> : null}\n    </Form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Redirecting After Form Submission in React Router\nDESCRIPTION: This code shows how to perform a redirect after a successful form submission in a React Router action function.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/tutorials/address-book.md#2025-04-22_snippet_26\n\nLANGUAGE: tsx\nCODE:\n```\nexport async function action({\n  params,\n  request,\n}: Route.ActionArgs) {\n  invariant(params.contactId, \"Missing contactId param\");\n  const formData = await request.formData();\n  const updates = Object.fromEntries(formData);\n  await updateContact(params.contactId, updates);\n  return redirect(`/contacts/${params.contactId}`);\n}\n```\n\n----------------------------------------\n\nTITLE: Mixing Config-Based and File System Routes\nDESCRIPTION: This code snippet illustrates how to combine config-based routes with file system routes in React Router. It spreads the results of the async `flatRoutes` function into the array of config-based routes, allowing for a flexible route configuration strategy.  The `rootDirectory` option allows specifying the root directory for the file system routes.\nSOURCE: https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#_snippet_29\n\nLANGUAGE: ts\nCODE:\n```\n// app/routes.ts\nimport { type RouteConfig, route } from \"@react-router/dev/routes\";\nimport { flatRoutes } from \"@react-router/fs-routes\";\n\nexport const routes: RouteConfig = [\n  // Example config-based route:\n  route(\"/hello\", \"./routes/hello.tsx\"),\n\n  // File system routes scoped to a different directory:\n  ...(await flatRoutes({\n    rootDirectory: \"fs-routes\",\n  })),\n];\n```\n\n----------------------------------------\n\nTITLE: Updating React Router Import in JavaScript/TypeScript\nDESCRIPTION: This code snippet demonstrates how to update the import statement for the Routes component when migrating from react-router-dom to react-router. It shows the difference between the old and new import syntax.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router-dom/README.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n-import { Routes } from \"react-router-dom\"\n+import { Routes } from \"react-router\"\n```\n\n----------------------------------------\n\nTITLE: Updating DOM-specific React Router imports\nDESCRIPTION: Diff showing how to update imports for DOM-specific components like RouterProvider from react-router-dom to react-router/dom.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/upgrading/v6.md#2025-04-22_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n-import { RouterProvider } from \"react-router-dom\";\n+import { RouterProvider } from \"react-router/dom\";\n```\n\n----------------------------------------\n\nTITLE: Router Configuration with the New Lazy Route Modules API\nDESCRIPTION: Example of configuring a router with both eager and lazy-loaded routes using the new 'lazy' property. This demonstrates loading the homepage in the main bundle while lazily loading the about page.\nSOURCE: https://github.com/remix-run/react-router/blob/main/decisions/0002-lazy-route-modules.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// app.jsx\nconst router = createBrowserRouter([\n  {\n    path: \"/\",\n    Component: Layout,\n    children: [\n      {\n        index: true,\n        Component: Home,\n      },\n      {\n        path: \"about\",\n        lazy: () => import(\"./about\"),\n      },\n    ],\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Static File Server Pre-rendering\nDESCRIPTION: Shows how to configure pre-rendering for static file servers by disabling runtime SSR while enabling pre-rendering for static routes.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/pre-rendering.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Config } from \"@react-router/dev/config\";\n\nexport default {\n  ssr: false, // disable runtime server rendering\n  prerender: true, // pre-render all static routes\n} satisfies Config;\n```\n\n----------------------------------------\n\nTITLE: Accessing URL Parameters in React Router Loader\nDESCRIPTION: Example of accessing URL parameters in a loader function for a dynamic route segment.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/file-route-conventions.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport async function serverLoader({ params }) {\n  return fakeDb.getAllConcertsForCity(params.city);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Search Loading State with useNavigation in React Router\nDESCRIPTION: Implements a search state indicator using useNavigation hook to determine when a search is in progress, allowing UI feedback during search operations.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/tutorials/address-book.md#2025-04-22_snippet_38\n\nLANGUAGE: tsx\nCODE:\n```\n// existing imports & exports\n\nexport default function SidebarLayout({\n  loaderData,\n}: Route.ComponentProps) {\n  const { contacts, q } = loaderData;\n  const navigation = useNavigation();\n  const submit = useSubmit();\n  const searching =\n    navigation.location &&\n    new URLSearchParams(navigation.location.search).has(\n      \"q\"\n    );\n\n  // existing code\n}\n```\n\n----------------------------------------\n\nTITLE: Using HeadersArgs in Remix\nDESCRIPTION: This TypeScript code demonstrates how to use the `HeadersArgs` type in a Remix route module to define a `headers` function. This function allows you to customize the HTTP headers sent with the response.  It leverages `loaderHeaders` to potentially customize based on request data.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router-dev/CHANGELOG.md#_snippet_32\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { HeadersArgs } from \"@remix-run/node\"; // or cloudflare/deno\n\nexport function headers({ loaderHeaders }: HeadersArgs) {\n  return {\n    \"x-my-custom-thing\": loaderHeaders.get(\"x-my-custom-thing\") || \"fallback\",\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Routes for File Upload in React Router\nDESCRIPTION: Sets up the route configuration for handling file uploads, defining routes for user profile and avatar endpoints.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/file-uploads.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  type RouteConfig,\n  route,\n} from \"@react-router/dev/routes\";\n\nexport default [\n  // ... other routes\n  route(\"user/:id\", \"pages/user-profile.tsx\", [\n    route(\"avatar\", \"api/avatar.tsx\"),\n  ]),\n] satisfies RouteConfig;\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading Route Configuration with Action - TypeScript\nDESCRIPTION: This code snippet demonstrates how to configure a route with lazy loading using the object-based API for loader, action, and component.  It showcases the lazy loading of the action function. It depends on separate files for each lazy-loaded property (show.loader.js, show.action.js, show.component.js).\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router/CHANGELOG.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncreateBrowserRouter([\n    {\n      path: \"/show/:showId\",\n      lazy: {\n        loader: async () => (await import(\"./show.loader.js\")).loader,\n        action: async () => (await import(\"./show.action.js\")).action,\n        Component: async () => (await import(\"./show.component.js\")).Component,\n      },\n    },\n  ]);\n```\n\n----------------------------------------\n\nTITLE: Server Module Directory Structure\nDESCRIPTION: Example directory structure showing the usage of .server modules and directories to mark server-only code in React Router applications.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/explanation/special-files.md#2025-04-22_snippet_6\n\nLANGUAGE: txt\nCODE:\n```\napp\n├── .server 👈 marks all files in this directory as server-only\n│   ├── auth.ts\n│   └── db.ts\n├── cms.server.ts 👈 marks this file as server-only\n├── root.tsx\n└── routes.ts\n```\n\n----------------------------------------\n\nTITLE: useResolvedPath Hook Signature\nDESCRIPTION: Function signature for the useResolvedPath hook showing its parameters and return type. The hook takes a 'to' parameter and named parameters, returning a Path object.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/hooks/useResolvedPath.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nuseResolvedPath(to, __namedParameters): Path\n```\n\n----------------------------------------\n\nTITLE: Configuring Pre-rendering in TypeScript\nDESCRIPTION: Updates the React Router configuration to pre-render the about page.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/tutorials/address-book.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type Config } from \"@react-router/dev/config\";\n\nexport default {\n  ssr: false,\n  prerender: [\"/about\"],\n} satisfies Config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Routes with TypeScript in React Router\nDESCRIPTION: Demonstrates how to configure routes using TypeScript in React Router with type safety. Shows the basic route configuration for a product route with an ID parameter.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/explanation/type-safety.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  type RouteConfig,\n  route,\n} from \"@react-router/dev/routes\";\n\nexport default [\n  route(\"products/:id\", \"./routes/product.tsx\"),\n] satisfies RouteConfig;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating ScrollRestoration Component Usage in React Router\nDESCRIPTION: This code snippet shows how to implement scroll restoration in a React Router application using the ScrollRestoration component. It includes examples of restoring scroll position based on location.key and location.pathname, as well as preventing scroll resetting when using the Link component.\nSOURCE: https://github.com/remix-run/react-router/blob/main/examples/scroll-restoration/README.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ScrollRestoration />\n```\n\n----------------------------------------\n\nTITLE: Using useViewTransitionState Hook in React Router\nDESCRIPTION: The hook returns a boolean indicating if there's an active View Transition to the specified location. It requires view transitions to be enabled via LinkProps.viewTransition or other navigation methods like Form, submit, or navigate calls.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/hooks/useViewTransitionState.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nuseViewTransitionState(to, opts): boolean\n```\n\n----------------------------------------\n\nTITLE: Client-Side Hydration with DataBrowserRouter\nDESCRIPTION: Demonstrates the client-side setup for hydrating server-rendered content using DataBrowserRouter and ReactDOM.hydrateRoot(). This setup ensures proper hydration of server-rendered HTML.\nSOURCE: https://github.com/remix-run/react-router/blob/main/examples/ssr-data-router/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// src/entry.client.tsx\nimport { DataBrowserRouter } from '@remix-run/router';\nimport { hydrateRoot } from 'react-dom/client';\n\n// Use DataBrowserRouter for routing context\n// Hydrate the app using ReactDOM.hydrateRoot()\n```\n\n----------------------------------------\n\nTITLE: Configuring Verbatim Module Syntax\nDESCRIPTION: TSConfig setting to enable automatic type-only import modifiers.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/route-module-type-safety.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"verbatimModuleSyntax\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading Route Configuration in React Router\nDESCRIPTION: This code snippet demonstrates how to configure lazy loading for route properties (loader, action, Component) in React Router using the `route.lazy` object API. It shows the modular approach for importing these properties which improve performance.\nSOURCE: https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ncreateBrowserRouter([\n  {\n    path: \"/show/:showId\",\n    lazy: {\n      loader: async () => (await import(\"./show.loader.js\")).loader,\n      action: async () => (await import(\"./show.action.js\")).action,\n      Component: async () => (await import(\"./show.component.js\")).Component,\n    },\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Setting Global Headers in entry.server.tsx (TSX)\nDESCRIPTION: Illustrates how to set global headers in the entry.server.tsx file using the handleRequest export. This method allows adding headers that apply to all routes.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/headers.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function handleRequest(\n  request,\n  responseStatusCode,\n  responseHeaders,\n  routerContext,\n  loadContext\n) {\n  // set, append global headers\n  responseHeaders.set(\n    \"X-App-Version\",\n    routerContext.manifest.version\n  );\n\n  return new Response(await getStream(), {\n    headers: responseHeaders,\n    status: responseStatusCode,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Relative Path Behavior for Link in React Router\nDESCRIPTION: Illustrates how to define relative path behavior for the Link component in React Router using the 'relative' prop.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/components/Link.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Link to=\"..\" /> // default: \"route\"\n<Link relative=\"route\" />\n<Link relative=\"path\" />\n```\n\n----------------------------------------\n\nTITLE: Testing React Router Component with createRoutesStub\nDESCRIPTION: Test implementation using createRoutesStub to simulate routing context and test a login form component. Demonstrates how to set up route stubs with actions and test form submission behavior.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/framework/testing.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createRoutesStub } from \"react-router\";\nimport {\n  render,\n  screen,\n  waitFor,\n} from \"@testing-library/react\";\nimport userEvent from \"@testing-library/user-event\";\nimport { LoginForm } from \"./LoginForm\";\n\ntest(\"LoginForm renders error messages\", async () => {\n  const USER_MESSAGE = \"Username is required\";\n  const PASSWORD_MESSAGE = \"Password is required\";\n\n  const Stub = createRoutesStub([\n    {\n      path: \"/login\",\n      Component: LoginForm,\n      action() {\n        return {\n          errors: {\n            username: USER_MESSAGE,\n            password: PASSWORD_MESSAGE,\n          },\n        };\n      },\n    },\n  ]);\n\n  // render the app stub at \"/login\"\n  render(<Stub initialEntries={[\"/login\"]} />);\n\n  // simulate interactions\n  userEvent.click(screen.getByText(\"Login\"));\n  await waitFor(() => screen.findByText(USER_MESSAGE));\n  await waitFor(() => screen.findByText(PASSWORD_MESSAGE));\n});\n```\n\n----------------------------------------\n\nTITLE: Running Type Generation Command in React Router\nDESCRIPTION: Shows the command line instruction for manually generating types in React Router using the typegen command.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/explanation/type-safety.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nreact-router typegen\n```\n\n----------------------------------------\n\nTITLE: Server-Side Redirect Middleware (TSX)\nDESCRIPTION: This TSX snippet demonstrates a server-side middleware function that checks for 404 errors and attempts to redirect using CMS data. It exemplifies how to handle 404 status codes and perform redirects based on custom logic.  It showcases error handling and CMS integration.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router/CHANGELOG.md#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nconst redirects: Route.unstable_MiddlewareFunction = async ({\n  request,\n  next,\n}) => {\n  // attempt to handle the request\n  let res = await next();\n\n  // if it's a 404, check the CMS for a redirect, do it last\n  // because it's expensive\n  if (res.status === 404) {\n    let cmsRedirect = await checkCMSRedirects(request.url);\n    if (cmsRedirect) {\n      throw redirect(cmsRedirect, 302);\n    }\n  }\n\n  return res;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Routes (TS)\nDESCRIPTION: Shows an example of defining nested routes in React Router. This setup is used to demonstrate how headers are merged between parent and child routes.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/headers.md#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nroute(\"pages\", \"pages-layout-with-nav.tsx\", [\n  route(\":slug\", \"page.tsx\"),\n]);\n```\n\n----------------------------------------\n\nTITLE: Defining Index Routes in React Router\nDESCRIPTION: Shows how to create index routes using the index property. This example demonstrates how to set up default child routes for parent routes.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/data/routing.md#2025-04-22_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\ncreateBrowserRouter([\n  // renders at \"/\"\n  { index: true, Component: Home },\n  {\n    Component: Dashboard,\n    path: \"/dashboard\",\n    children: [\n      // renders at \"/dashboard\"\n      { index: true, Component: DashboardHome },\n      { path: \"settings\", Component: DashboardSettings },\n    ],\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Type-safe href utility in React Router\nDESCRIPTION: This code snippet showcases the type-safe `href` utility introduced in React Router, which provides path auto-completion and parameter validation for links. It prevents errors caused by incorrect path values or parameters.\nSOURCE: https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport { href } from \"react-router\";\n\nexport default function Component() {\n  const link = href(\"/blog/:slug\", { slug: \"my-first-post\" });\n  //                ^ type-safe!     ^ Also type-safe!\n\n  return (\n    <main>\n      <Link to={href(\"/products/:id\", { id: \"asdf\" })} />\n      <NavLink to={href(\"/:lang?/about\", { lang: \"en\" })} />\n    </main>\n  );\n}\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst badPath = href(\"/not/a/valid/path\");\n//                   ^ Error!\n\nconst badParam = href(\"/blog/:slug\", { oops: \"bad param\" });\n//                                     ^ Error!\n```\n\n----------------------------------------\n\nTITLE: Defining Routes with Sidebar Layout in TypeScript\nDESCRIPTION: Updates the route configuration to include the sidebar layout for specific routes.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/tutorials/address-book.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { RouteConfig } from \"@react-router/dev/routes\";\nimport {\n  index,\n  layout,\n  route,\n} from \"@react-router/dev/routes\";\n\nexport default [\n  layout(\"layouts/sidebar.tsx\", [\n    index(\"routes/home.tsx\"),\n    route(\"contacts/:contactId\", \"routes/contact.tsx\"),\n  ]),\n  route(\"about\", \"routes/about.tsx\"),\n] satisfies RouteConfig;\n```\n\n----------------------------------------\n\nTITLE: Configuring SPA Fallback with Pre-rendering\nDESCRIPTION: Demonstrates how to configure specific paths for pre-rendering while maintaining SPA fallback functionality for non-pre-rendered routes.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/pre-rendering.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Config } from \"@react-router/dev/config\";\n\nexport default {\n  ssr: false,\n\n  // SPA fallback will be written to build/client/index.html\n  prerender: [\"/about-us\"],\n\n  // SPA fallback will be written to build/client/__spa-fallback.html\n  prerender: [\"/\", \"/about-us\"],\n} satisfies Config;\n```\n\n----------------------------------------\n\nTITLE: Initial Data Strategy Implementation\nDESCRIPTION: First attempt at implementing data strategy with context and middleware support, demonstrating sequential context processing and parallel loader execution.\nSOURCE: https://github.com/remix-run/react-router/blob/main/decisions/0003-data-strategy.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nasync function dataStrategy({ request, params, matches, type }) {\n  // Run context/middleware sequentially\n  let contexts = {};\n  for (let match of matches) {\n    if (m.route.handle?.context) {\n      for (let [id, ctx] of Object.entries(m.route.handle.context)) {\n        contexts[key] = ctx();\n      }\n    }\n    if (m.route.handle?.middleware) {\n      m.route.handle.middleware(context);\n    }\n  }\n\n  // Run loaders in parallel (or run the solo action)\n  return Promise.all(\n    matches.map(async (m, i) => {\n      // Only expose contexts from this level and above\n      let context = matches.slice(0, i + 1).reduce((acc, m) => {\n        Object.keys(m.route.handle?.context).forEach((k) => {\n          acc[k] = contexts[k];\n        });\n        return acc;\n      }, {});\n      try {\n        return {\n          type: ResultType.data,\n          data: await m.route[type]?.({ request, params, context });\n        };\n      } catch (error) {\n        return {\n          type: ResultType.error,\n          error,\n        };\n      }\n    })\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Dynamic Segments in Route Module\nDESCRIPTION: Demonstrates how to access dynamic segments as params in the loader and component functions of a route module. It shows type inference for the params object.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/framework/routing.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Route } from \"./+types/team\";\n\nexport async function loader({ params }: Route.LoaderArgs) {\n  //                           ^? { teamId: string }\n}\n\nexport default function Component({\n  params,\n}: Route.ComponentProps) {\n  params.teamId;\n  //        ^ string\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Router Data as Props (JSX)\nDESCRIPTION: Shows how to access router data like `params`, `loaderData`, and `actionData` as props in route components, hydrate fallbacks, and error boundaries. This allows direct access to these values within the component definition.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router/CHANGELOG.md#_snippet_18\n\nLANGUAGE: JSX\nCODE:\n```\nexport default function Component({ params, loaderData, actionData }) {}\n\nexport function HydrateFallback({ params }) {}\nexport function ErrorBoundary({ params, loaderData, actionData }) {}\n```\n\n----------------------------------------\n\nTITLE: Installing React Router Dev Dependencies\nDESCRIPTION: Commands to install the React Router Vite plugin and runtime adapter\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/upgrading/component-routes.md#2025-04-22_snippet_0\n\nLANGUAGE: shellscript\nCODE:\n```\nnpm install -D @react-router/dev\n```\n\nLANGUAGE: shellscript\nCODE:\n```\nnpm install @react-router/node\n```\n\n----------------------------------------\n\nTITLE: Creating Cookie Session Storage in React Router\nDESCRIPTION: Example of creating a cookie-based session storage with TypeScript, defining session data types and configuring cookie options like domain, expiration, and security settings.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/explanation/sessions-and-cookies.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createCookieSessionStorage } from \"react-router\";\n\ntype SessionData = {\n  userId: string;\n};\n\ntype SessionFlashData = {\n  error: string;\n};\n\nconst { getSession, commitSession, destroySession } =\n  createCookieSessionStorage<SessionData, SessionFlashData>(\n    {\n      cookie: {\n        name: \"__session\",\n        domain: \"reactrouter.com\",\n        httpOnly: true,\n        maxAge: 60,\n        path: \"/\",\n        sameSite: \"lax\",\n        secrets: [\"s3cret1\"],\n        secure: true,\n      },\n    }\n  );\n\nexport { getSession, commitSession, destroySession };\n```\n\n----------------------------------------\n\nTITLE: Updating Remix Imports (v2.0.0)\nDESCRIPTION: This code snippet demonstrates how to update imports from the 'remix' package to the specific '@remix-run/*' packages in Remix v2.0.0. This change is necessary because the 'remix' package no longer supports \"magic exports\". It shows how to import ActionArgs from '@remix-run/node', json from '@remix-run/node', and useLoaderData from '@remix-run/react'.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router-dev/CHANGELOG.md#_snippet_20\n\nLANGUAGE: Diff\nCODE:\n```\n  - import type { ActionArgs } from \"remix\";\n  - import { json, useLoaderData } from \"remix\";\n  + import type { ActionArgs } from \"@remix-run/node\";\n  + import { json } from \"@remix-run/node\";\n  + import { useLoaderData } from \"@remix-run/react\";\n```\n\n----------------------------------------\n\nTITLE: Updating Root Component in TypeScript React\nDESCRIPTION: Simplifies the root component to only render an Outlet after moving layout logic to sidebar.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/tutorials/address-book.md#2025-04-22_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function App() {\n  return <Outlet />;\n}\n```\n\n----------------------------------------\n\nTITLE: Using useMatch Hook in React Router\nDESCRIPTION: The useMatch function accepts a pattern parameter and returns a PathMatch object if the pattern matches the current URL. This is typically used to determine if a route is active.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/hooks/useMatch.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nuseMatch(pattern): undefined\n```\n\n----------------------------------------\n\nTITLE: Server-Side Authentication Middleware (TSX)\nDESCRIPTION: This TSX snippet showcases a server-side authentication middleware function in React Router. It checks for a user session and redirects to the login page if the user is not authenticated. It illustrates how to short-circuit the remaining processing using a `redirect`.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router/CHANGELOG.md#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { sessionContext } from \"../context\";\nconst serverAuth: Route.unstable_MiddlewareFunction = (\n  { request, params, context },\n  next\n) => {\n  let session = context.get(sessionContext);\n  let user = session.get(\"user\");\n  if (!user) {\n    session.set(\"returnTo\", request.url);\n    throw redirect(\"/login\", 302);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Side Rendering in React Router\nDESCRIPTION: This snippet shows how to disable server-side rendering in React Router, which results in client-side rendering for all routes. This configuration is suitable for building Single Page Applications.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/framework/rendering.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Config } from \"@react-router/dev/config\";\n\nexport default {\n  ssr: false,\n} satisfies Config;\n```\n\n----------------------------------------\n\nTITLE: Implementing Non-Navigating Forms with useFetcher in React Router\nDESCRIPTION: Creates a favorite toggle feature using useFetcher hook to submit form data without causing page navigation, allowing in-place data updates without affecting the browsing history.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/tutorials/address-book.md#2025-04-22_snippet_42\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Form, useFetcher } from \"react-router\";\n\n// existing imports & exports\n\nfunction Favorite({\n  contact,\n}: {\n  contact: Pick<ContactRecord, \"favorite\">;\n}) {\n  const fetcher = useFetcher();\n  const favorite = contact.favorite;\n\n  return (\n    <fetcher.Form method=\"post\">\n      <button\n        aria-label={\n          favorite\n            ? \"Remove from favorites\"\n            : \"Add to favorites\"\n        }\n        name=\"favorite\"\n        value={favorite ? \"false\" : \"true\"}\n      >\n        {favorite ? \"★\" : \"☆\"}\n      </button>\n    </fetcher.Form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing react-router-dom with react-router\nDESCRIPTION: Commands to uninstall react-router-dom and install react-router, as v7 simplifies package structure.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/upgrading/v6.md#2025-04-22_snippet_6\n\nLANGUAGE: shellscript\nCODE:\n```\nnpm uninstall react-router-dom\nnpm install react-router@latest\n```\n\n----------------------------------------\n\nTITLE: Using useAsyncError Hook with Await Component in React Router\nDESCRIPTION: Example showing how to use the useAsyncError hook to access error information from a rejected promise in an Await component. The hook returns the rejection value which can be used to display a custom error message.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/hooks/useAsyncError.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Await, useAsyncError } from \"react-router\";\n\nfunction ErrorElement() {\n  const error = useAsyncError();\n  return (\n    <p>Uh Oh, something went wrong! {error.message}</p>\n  );\n}\n\n// somewhere in your app\n<Await\n  resolve={promiseThatRejects}\n  errorElement={<ErrorElement />}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Updating Loader Function Type Definition (TypeScript)\nDESCRIPTION: This code snippet illustrates how to update the type definition of a loader function in React Router to enable automatic type inference. It involves importing the LoaderArgs type from `@remix-run/node` and using it to type the arguments of the loader function. This eliminates the need to manually define a LoaderData type.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router-node/CHANGELOG.md#_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n  - import type { LoaderFunction } from \"@remix-run/node\";\n  + import type { LoaderArgs } from \"@remix-run/node\";\n\n  - export const loader: LoaderFunction = async (args) => {\n  -   return json<LoaderData>(data);\n  - }\n  + export async function loader(args: LoaderArgs) {\n  +   return json(data);\n  + }\n```\n\n----------------------------------------\n\nTITLE: Returning Headers from Route Module (TSX)\nDESCRIPTION: Illustrates how to return headers set in loaders or actions using the headers export in a route module. This step is necessary to send headers from loaders and actions.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/headers.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport function headers({\n  actionHeaders,\n  loaderHeaders,\n}: HeadersArgs) {\n  return actionHeaders ? actionHeaders : loaderHeaders;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Type Safety to React Router Component Props\nDESCRIPTION: Implements type safety for the App component's loader data using React Router's generated Route types.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/tutorials/address-book.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function App({\n  loaderData,\n}: Route.ComponentProps) {\n  const { contacts } = loaderData;\n\n  // existing code\n}\n```\n\n----------------------------------------\n\nTITLE: Setting 404 Status Code in React Router Loader\nDESCRIPTION: This code snippet shows how to set a 404 status code in a React Router loader function. It attempts to fetch a project by ID and throws a 404 error if the project is not found.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/status.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// route('/projects/:projectId', './project.tsx')\nimport type { Route } from \"./+types/project\";\nimport { data } from \"react-router\";\nimport { fakeDb } from \"../db\";\n\nexport async function loader({ params }: Route.ActionArgs) {\n  let project = await fakeDb.getProject(params.id);\n  if (!project) {\n    // throw to ErrorBoundary\n    throw data(null, { status: 404 });\n  }\n  return project;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Type Inference to Fetcher in React Router Combobox\nDESCRIPTION: Shows how to add type inference to the fetcher in a combobox component using the search route's action type.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/fetchers.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useFetcher } from \"react-router\";\nimport type { Search } from \"./search-users\";\n\nexport function UserSearchCombobox() {\n  let fetcher = useFetcher<typeof Search.action>();\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Client-Only Data Loading in React Router\nDESCRIPTION: This code snippet shows how to implement a route that only depends on client data. It exports a clientLoader function, sets hydrate to true, and includes a HydrateFallback component for SSR rendering.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/client-data.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport async function clientLoader({\n  request,\n}: Route.ClientLoaderArgs) {\n  const clientData = await getClientData(request);\n  return clientData;\n}\n// Note: you do not have to set this explicitly - it is implied if there is no `loader`\nclientLoader.hydrate = true;\n\n// (2)\nexport function HydrateFallback() {\n  return <p>Skeleton rendered during SSR</p>;\n}\n\nexport default function Component({\n  loaderData, // (2) - client data\n}: Route.ComponentProps) {\n  return <>...</>;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Basic React Router Features in JSX\nDESCRIPTION: This code snippet illustrates the core concepts of React Router, including nested routes, index routes, catch-all routes, and the use of Outlet and Link components. It provides a foundation for understanding how to structure a React application with routing.\nSOURCE: https://github.com/remix-run/react-router/blob/main/examples/basic/README.md#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport * as React from \"react\";\nimport { Routes, Route, Outlet, Link } from \"react-router-dom\";\n\nexport default function App() {\n  return (\n    <div>\n      <h1>Basic Example</h1>\n\n      <p>\n        This example demonstrates some of the core features of React Router\n        including nested <code>&lt;Route&gt;</code>s, <code>&lt;Outlet&gt;</code>s,\n        <code>&lt;Link&gt;</code>s, and using a \"*\" route (aka \"splat route\") to\n        render a \"not found\" page when someone visits an unrecognized URL.\n      </p>\n\n      {/* Routes nest inside one another. Nested route paths build upon\n            parent route paths, and nested route elements render inside\n            parent route elements. See the note about <Outlet> below. */}\n      <Routes>\n        <Route path=\"/\" element={<Layout />}>\n          <Route index element={<Home />} />\n          <Route path=\"about\" element={<About />} />\n          <Route path=\"dashboard\" element={<Dashboard />} />\n\n          {/* Using path=\"*\"\" means \"match anything\", so this route\n                acts like a catch-all for URLs that we don't have explicit\n                routes for. */}\n          <Route path=\"*\" element={<NoMatch />} />\n        </Route>\n      </Routes>\n    </div>\n  );\n}\n\nfunction Layout() {\n  return (\n    <div>\n      {/* A \"layout route\" is a good place to put markup you want to\n          share across all the pages on your site, like navigation. */}\n      <nav>\n        <ul>\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            <Link to=\"/about\">About</Link>\n          </li>\n          <li>\n            <Link to=\"/dashboard\">Dashboard</Link>\n          </li>\n          <li>\n            <Link to=\"/nothing-here\">Nothing Here</Link>\n          </li>\n        </ul>\n      </nav>\n\n      <hr />\n\n      {/* An <Outlet> renders whatever child route is currently active,\n          so you can think about this <Outlet> as a placeholder for\n          the child routes we defined above. */}\n      <Outlet />\n    </div>\n  );\n}\n\nfunction Home() {\n  return (\n    <div>\n      <h2>Home</h2>\n    </div>\n  );\n}\n\nfunction About() {\n  return (\n    <div>\n      <h2>About</h2>\n    </div>\n  );\n}\n\nfunction Dashboard() {\n  return (\n    <div>\n      <h2>Dashboard</h2>\n    </div>\n  );\n}\n\nfunction NoMatch() {\n  return (\n    <div>\n      <h2>Nothing to see here!</h2>\n      <p>\n        <Link to=\"/\">Go to the home page</Link>\n      </p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing Expensive Client Middleware in React Router\nDESCRIPTION: Demonstrates how to optimize expensive client-side middleware functions by caching results in context to avoid duplicate computation when the middleware runs separately for actions and loaders.\nSOURCE: https://github.com/remix-run/react-router/blob/main/decisions/0014-context-middleware.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst expensiveMiddleware: Route.unstable_ClientMiddleware = async function ({\n  request,\n  context,\n}) {\n  // Guard this such that we use the existing value if it exists from the action pass\n  context.something = context.something ?? (await getExpensiveValue());\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Streamed Data in Component - TypeScript/JSX\nDESCRIPTION: Shows how to access streamed data in a component using useLoaderData(). The critical data is resolved, while the lazy data is still a Promise.\nSOURCE: https://github.com/remix-run/react-router/blob/main/decisions/0004-streaming-apis.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction Component() {\n  const data = useLoaderData();\n  // data.critical is a resolved value\n  // data.lazy is a Promise\n}\n```\n\n----------------------------------------\n\nTITLE: View Transition with useViewTransitionState Hook - TSX\nDESCRIPTION: Implementation using the useViewTransitionState hook for managing transition states.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/view-transitions.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nfunction NavImage(props: { src: string; idx: number }) {\n  const href = `/image/${props.idx}`;\n  // Hook provides transition state for specific route\n  const isTransitioning = useViewTransitionState(href);\n\n  return (\n    <Link to={href} viewTransition>\n      <p\n        style={{\n          viewTransitionName: isTransitioning\n            ? \"image-title\"\n            : \"none\",\n        }}\n      >\n        Image Number {props.idx}\n      </p>\n      <img\n        src={props.src}\n        style={{\n          viewTransitionName: isTransitioning\n            ? \"image-expand\"\n            : \"none\",\n        }}\n      />\n    </Link>\n  );\n```\n\n----------------------------------------\n\nTITLE: Updating Route Configuration in TypeScript\nDESCRIPTION: This snippet shows how to update the route configuration file when upgrading from Remix v2 to React Router v7. It includes changes to import statements and the use of the flatRoutes function.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/upgrading/remix.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// app/routes.ts\n-import { type RouteConfig } from \"@remix-run/route-config\";\n-import { flatRoutes } from \"@remix-run/fs-routes\";\n-import { remixRoutesOptionAdapter } from \"@remix-run/routes-option-adapter\";\n+import { type RouteConfig } from \"@react-router/dev/routes\";\n+import { flatRoutes } from \"@react-router/fs-routes\";\n+import { remixRoutesOptionAdapter } from \"@react-router/remix-routes-option-adapter\";\n\nexport default [\n  // however your routes are defined\n] satisfies RouteConfig;\n```\n\n----------------------------------------\n\nTITLE: Function Signature for createSearchParams in React Router\nDESCRIPTION: Defines the TypeScript signature for the createSearchParams function, which takes an initializer and returns a URLSearchParams object.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/utils/createSearchParams.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\ncreateSearchParams(init): URLSearchParams\n```\n\n----------------------------------------\n\nTITLE: Creating a Browser Router in React Router\nDESCRIPTION: This snippet demonstrates how to create a browser router using the createBrowserRouter function from React Router. It includes route definitions with loaders and components.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/data/custom.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createBrowserRouter } from \"react-router\";\n\nlet router = createBrowserRouter([\n  {\n    path: \"/\",\n    Component: Root,\n    children: [\n      {\n        path: \"shows/:showId\",\n        Component: Show,\n        loader: ({ request, params }) =>\n          fetch(`/api/show/${params.id}.json`, {\n            signal: request.signal,\n          }),\n      },\n    ],\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Disabling Runtime Server Rendering in React Router Config\nDESCRIPTION: This snippet shows how to disable server-side rendering by setting the 'ssr' flag to false in the React Router configuration file. This enables SPA mode, which generates a static index.html file at build time.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/spa.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type Config } from \"@react-router/dev/config\";\n\nexport default {\n  ssr: false,\n} satisfies Config;\n```\n\n----------------------------------------\n\nTITLE: Handling Fetcher Data and Validation in React Router\nDESCRIPTION: Shows how to handle data returned from an action in the fetcher, including displaying error messages for failed mutations.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/fetchers.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// ...\n\nexport async function clientAction({ request }) {\n  await new Promise((res) => setTimeout(res, 1000));\n  let data = await request.formData();\n\n  let title = data.get(\"title\") as string;\n  if (title.trim() === \"\") {\n    return { ok: false, error: \"Title cannot be empty\" };\n  }\n\n  localStorage.setItem(\"title\", title);\n  return { ok: true, error: null };\n}\n\nexport default function Component() {\n  let data = useLoaderData();\n  let fetcher = useFetcher();\n  let title = fetcher.formData?.get(\"title\") || data.title;\n\n  return (\n    <div>\n      <h1>{title}</h1>\n\n      <fetcher.Form method=\"post\">\n        <input type=\"text\" name=\"title\" />\n        {fetcher.state !== \"idle\" && <p>Saving...</p>}\n        {fetcher.data?.error && (\n          <p style={{ color: \"red\" }}>\n            {fetcher.data.error}\n          </p>\n        )}\n      </fetcher.Form>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useSubmit hook with Form component in React Router\nDESCRIPTION: This example demonstrates how to use the useSubmit hook to programmatically submit a form when its content changes. The submit function is called on the onChange event of a Form component, passing the current form element as the target for submission.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/hooks/useSubmit.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSubmit } from \"react-router\";\n\nfunction SomeComponent() {\n  const submit = useSubmit();\n  return (\n    <Form\n      onChange={(event) => {\n        submit(event.currentTarget);\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-Side Routing with Link Component\nDESCRIPTION: Updates the root component to use Link components for client-side routing instead of regular anchor tags.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/tutorials/address-book.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Form,\n  Link,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n  isRouteErrorResponse,\n} from \"react-router\";\n\nexport default function App() {\n  return (\n    <>\n      <div id=\"sidebar\">\n        {/* other elements */}\n        <nav>\n          <ul>\n            <li>\n              <Link to={`/contacts/1`}>Your Name</Link>\n            </li>\n            <li>\n              <Link to={`/contacts/2`}>Your Friend</Link>\n            </li>\n          </ul>\n        </nav>\n      </div>\n      {/* other elements */}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Vite Config for React Router (TypeScript)\nDESCRIPTION: Changes required in the Vite configuration file to replace the React plugin with the React Router plugin.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/upgrading/router-provider.md#2025-04-22_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\n-import react from '@vitejs/plugin-react'\n+import { reactRouter } from \"@react-router/dev/vite\";\nimport { defineConfig } from \"vite\";\n\n\nexport default defineConfig({\n  plugins: [\n-    react()\n+    reactRouter()\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Updating React Router imports\nDESCRIPTION: Diff showing how to update imports from react-router-dom to react-router in JavaScript/TypeScript files.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/upgrading/v6.md#2025-04-22_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n-import { useLocation } from \"react-router-dom\";\n+import { useLocation } from \"react-router\";\n```\n\n----------------------------------------\n\nTITLE: Initializing Sidebar Layout Component in TypeScript React\nDESCRIPTION: Creates a basic sidebar layout component that renders an Outlet.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/tutorials/address-book.md#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Outlet } from \"react-router\";\n\nexport default function SidebarLayout() {\n  return <Outlet />;\n}\n```\n\n----------------------------------------\n\nTITLE: Preserving Previous Location with location.state in React Router\nDESCRIPTION: This code demonstrates how to use location.state to preserve the previous location when redirecting to the login page. This allows returning the user to their intended destination after authentication.\nSOURCE: https://github.com/remix-run/react-router/blob/main/examples/auth/README.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { from } = location.state || { from: { pathname: \"/\" } };\nnavigate(from, { replace: true });\n```\n\n----------------------------------------\n\nTITLE: Using useBeforeUnload Hook in React Router\nDESCRIPTION: The useBeforeUnload hook signature showing its function definition with callback and options parameters. This hook allows setting up a callback that will fire when the window's beforeunload event is triggered.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/hooks/useBeforeUnload.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nuseBeforeUnload(callback, options): void\n```\n\n----------------------------------------\n\nTITLE: Using Routes with Route Components in React Router\nDESCRIPTION: Demonstrates how to use the Routes component to render different Route components based on the current location. This example shows a simple navigation structure with three routes: an index route and two path-based routes.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/components/Routes.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Routes, Route } from \"react-router\"\n\n<Routes>\n <Route index element={<StepOne />} />\n <Route path=\"step-2\" element={<StepTwo />} />\n <Route path=\"step-3\" element={<StepThree />} />\n</Routes>\n```\n\n----------------------------------------\n\nTITLE: Filtering Contacts with URLSearchParams in React Router Loader\nDESCRIPTION: Implements filtering functionality for contacts by accessing URLSearchParams from the request object in a loader function. This demonstrates how React Router handles GET submissions and utilizes URL parameters for data filtering.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/tutorials/address-book.md#2025-04-22_snippet_34\n\nLANGUAGE: tsx\nCODE:\n```\n// existing imports & exports\n\nexport async function loader({\n  request,\n}: Route.LoaderArgs) {\n  const url = new URL(request.url);\n  const q = url.searchParams.get(\"q\");\n  const contacts = await getContacts(q);\n  return { contacts };\n}\n\n// existing code\n```\n\n----------------------------------------\n\nTITLE: Creating Client Entry Module for React Router (TypeScript/JSX)\nDESCRIPTION: Example of creating an entry.client.tsx file as the new client entry point for React Router, using HydratedRouter instead of the custom App component.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/upgrading/router-provider.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport { HydratedRouter } from \"react-router/dom\";\n\nReactDOM.hydrateRoot(\n  document,\n  <React.StrictMode>\n    <HydratedRouter />\n  </React.StrictMode>\n);\n```\n\n----------------------------------------\n\nTITLE: Using HydrateFallback with clientLoader\nDESCRIPTION: Code references showing HydrateFallback and useLoaderData hooks in React Router. The component is used during initial page load and hydration when clientLoader.hydrate is true or when there's a clientLoader without a server loader.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/explanation/hydration.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nuseLoaderData()\n```\n\nLANGUAGE: javascript\nCODE:\n```\nclientLoader.hydrate=true\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Outlet/>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nuseRouteLoaderData()\n```\n\nLANGUAGE: javascript\nCODE:\n```\nuseMatches()\n```\n\n----------------------------------------\n\nTITLE: Create HTTPS Express server with TLS\nDESCRIPTION: This TypeScript code snippet demonstrates how to create an HTTPS server using Express and Node.js's `https` module. It reads the TLS key and certificate files and passes them to `https.createServer` to enable HTTPS. Requires installing express and @types/express.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router-dev/CHANGELOG.md#_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from \"node:fs\";\nimport https from \"node:https\";\n\nimport express from \"express\";\n\nconst app = express();\n\n// ...code setting up your express app...\n\nconst appServer = https.createServer(\n  {\n    key: fs.readFileSync(\"key.pem\"),\n    cert: fs.readFileSync(\"cert.pem\"),\n  },\n  app\n);\n\nappServer.listen(3000, () => {\n  console.log(\"Ready on https://localhost:3000\");\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing View Transitions with Link Component (JSX)\nDESCRIPTION: Demonstrates how to use the `<Link unstable_viewTransition>` component to enable View Transitions API for navigation updates. It wraps the DOM update with `document.startViewTransition`.\nSOURCE: https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#_snippet_38\n\nLANGUAGE: jsx\nCODE:\n```\n<Link to={to} unstable_viewTransition>\n  <img\n    src={src}\n    alt={alt}\n    style={{}}\n  />\n</Link>\n```\n\n----------------------------------------\n\nTITLE: Updating Scripts for Remix Vite Commands (JSON)\nDESCRIPTION: This snippet illustrates how to update the `scripts` section in a `package.json` file to use the `remix vite:dev` and `remix vite:build` commands instead of directly calling `vite dev` and `vite build`. This change is recommended to handle upcoming Remix features that may impact the number of required Vite builds.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router-dev/CHANGELOG.md#_snippet_14\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"remix vite:dev\",\n    \"build\": \"remix vite:build\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Form Input with Browser Navigation using useEffect\nDESCRIPTION: Uses useEffect to update the search input value when navigating with browser back/forward buttons. This ensures the input field stays in sync with the URL parameters and search results during navigation.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/tutorials/address-book.md#2025-04-22_snippet_36\n\nLANGUAGE: tsx\nCODE:\n```\n// existing imports\nimport { useEffect } from \"react\";\n\n// existing imports & exports\n\nexport default function SidebarLayout({\n  loaderData,\n}: Route.ComponentProps) {\n  const { contacts, q } = loaderData;\n  const navigation = useNavigation();\n\n  useEffect(() => {\n    const searchField = document.getElementById(\"q\");\n    if (searchField instanceof HTMLInputElement) {\n      searchField.value = q || \"\";\n    }\n  }, [q]);\n\n  // existing code\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Static Handler for Server-Side Rendering\nDESCRIPTION: This code demonstrates how to create a static handler for server-side rendering using createStaticHandler from react-router.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/data/custom.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createStaticHandler } from \"react-router\";\nimport routes from \"./some-routes\";\n\nlet { query, dataRoutes } = createStaticHandler(routes);\n```\n\n----------------------------------------\n\nTITLE: Creating Contact Route Configuration\nDESCRIPTION: Route configuration for the contact page, defining dynamic routing with parameters.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/tutorials/address-book.md#2025-04-22_snippet_2\n\nLANGUAGE: shellscript\nCODE:\n```\nmkdir app/routes\ntouch app/routes/contact.tsx\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { RouteConfig } from \"@react-router/dev/routes\";\nimport { route } from \"@react-router/dev/routes\";\n\nexport default [\n  route(\"contacts/:contactId\", \"routes/contact.tsx\"),\n] satisfies RouteConfig;\n```\n\n----------------------------------------\n\nTITLE: Implementing Static Pre-rendering in React Router\nDESCRIPTION: This snippet shows how to configure static pre-rendering in React Router. It defines an async function that returns a list of URLs to be pre-rendered at build time, which is useful for SEO and performance, especially for deployments without server rendering.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/framework/rendering.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Config } from \"@react-router/dev/config\";\n\nexport default {\n  // return a list of URLs to prerender at build time\n  async prerender() {\n    return [\"/\", \"/about\", \"/contact\"];\n  },\n} satisfies Config;\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side Data Fetching in TypeScript\nDESCRIPTION: Updates the sidebar layout to use server-side data fetching with the loader function.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/tutorials/address-book.md#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function loader() {\n  const contacts = await getContacts();\n  return { contacts };\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Route Definitions to TypeScript\nDESCRIPTION: Converting router configuration from createBrowserRouter to a typed route configuration file using RouteConfig type.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/upgrading/router-provider.md#2025-04-22_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n+import type { RouteConfig } from \"@react-router/dev/routes\";\n\n-const router = createBrowserRouter([\n+export default [\n  {\n    path: \"/\",\n    lazy: () => import(\"./routes/layout\").then(convert),\n    children: [\n      {\n        index: true,\n        lazy: () => import(\"./routes/home\").then(convert),\n      },\n      {\n        path: \"about\",\n        lazy: () => import(\"./routes/about\").then(convert),\n      },\n      {\n        path: \"todos\",\n        lazy: () => import(\"./routes/todos\").then(convert),\n        children: [\n          {\n            path: \":id\",\n            lazy: () =>\n              import(\"./routes/todo\").then(convert),\n          },\n        ],\n      },\n    ],\n  },\n-]);\n+] satisfies RouteConfig;\n```\n\n----------------------------------------\n\nTITLE: Defining Routes with element/errorElement - JSX\nDESCRIPTION: Demonstrates defining routes using the traditional `element` and `errorElement` properties in JSX syntax using `createRoutesFromElements`. This is one way to define the UI components associated with a specific route.\nSOURCE: https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#_snippet_47\n\nLANGUAGE: JSX\nCODE:\n```\n// Both of these work the same:\nconst elementRoutes = createRoutesFromElements(\n  <Route path='/' element={<Home />} errorElement={<HomeError /> } />\n);\n\nfunction Home() { ... }\nfunction HomeError() { ... }\n```\n\n----------------------------------------\n\nTITLE: Creating New React Project with Vite\nDESCRIPTION: Command to create a new React project using Vite's project creation tool.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/declarative/installation.md#2025-04-22_snippet_0\n\nLANGUAGE: shellscript\nCODE:\n```\nnpx create-vite@latest\n```\n\n----------------------------------------\n\nTITLE: Processing GitHub Webhooks with TypeScript and React Router\nDESCRIPTION: Implementation of a GitHub webhook handler that validates incoming webhook requests using the X-Hub-Signature-256 header. The code verifies the webhook signature using HMAC SHA-256 and processes POST requests while rejecting other HTTP methods. Requires GITHUB_WEBHOOK_SECRET environment variable to be set.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/webhook.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Route } from \"./+types/github\";\n\nimport crypto from \"node:crypto\";\n\nexport const action = async ({\n  request,\n}: Route.ActionArgs) => {\n  if (request.method !== \"POST\") {\n    return Response.json(\n      { message: \"Method not allowed\" },\n      {\n        status: 405,\n      }\n    );\n  }\n  const payload = await request.json();\n\n  /* Validate the webhook */\n  const signature = request.headers.get(\n    \"X-Hub-Signature-256\"\n  );\n  const generatedSignature = `sha256=${crypto\n    .createHmac(\"sha256\", process.env.GITHUB_WEBHOOK_SECRET)\n    .update(JSON.stringify(payload))\n    .digest(\"hex\")}`;\n  if (signature !== generatedSignature) {\n    return Response.json(\n      { message: \"Signature mismatch\" },\n      {\n        status: 401,\n      }\n    );\n  }\n\n  /* process the webhook (e.g. enqueue a background job) */\n\n  return Response.json({ success: true });\n};\n```\n\n----------------------------------------\n\nTITLE: Creating routes.ts File in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a new routes.ts file using the flatRoutes function from @react-router/fs-routes when upgrading to React Router v7.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/upgrading/remix.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type RouteConfig } from \"@react-router/dev/routes\";\nimport { flatRoutes } from \"@react-router/fs-routes\";\n\nexport default flatRoutes() satisfies RouteConfig;\n```\n\n----------------------------------------\n\nTITLE: Rendering ServerRouter in React Router Entry File\nDESCRIPTION: The ServerRouter component is rendered at the top of the app in a custom entry.server.tsx file. It accepts props for context, nonce, and url, but their specific uses are not documented.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/components/ServerRouter.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ServerRouter\n  context={/* value */}\n  nonce={/* value */}\n  url={/* value */}\n>\n  {/* app components */}\n</ServerRouter>\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Pending UI with useNavigation in React Router\nDESCRIPTION: This snippet shows how to implement global pending UI using the useNavigation hook in React Router to provide feedback during navigation.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/tutorials/address-book.md#2025-04-22_snippet_29\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Form,\n  Link,\n  NavLink,\n  Outlet,\n  useNavigation,\n} from \"react-router\";\n\nexport default function SidebarLayout({\n  loaderData,\n}: Route.ComponentProps) {\n  const { contacts } = loaderData;\n  const navigation = useNavigation();\n\n  return (\n    <>\n      {/* existing elements */}\n      <div\n        className={\n          navigation.state === \"loading\" ? \"loading\" : \"\"\n        }\n        id=\"detail\"\n      >\n        <Outlet />\n      </div>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Route Loaders to File Format\nDESCRIPTION: Converting lazy-loaded route imports to direct file references in the route configuration.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/upgrading/router-provider.md#2025-04-22_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\nexport default [\n  {\n    path: \"/\",\n-   lazy: () => import(\"./routes/layout\").then(convert),\n+   file: \"./routes/layout.tsx\",\n    children: [\n      {\n        index: true,\n-       lazy: () => import(\"./routes/home\").then(convert),\n+       file: \"./routes/home.tsx\",\n      },\n      {\n        path: \"about\",\n-       lazy: () => import(\"./routes/about\").then(convert),\n+       file: \"./routes/about.tsx\",\n      },\n      {\n        path: \"todos\",\n-       lazy: () => import(\"./routes/todos\").then(convert),\n+       file: \"./routes/todos.tsx\",\n        children: [\n          {\n            path: \":id\",\n-           lazy: () => import(\"./routes/todo\").then(convert),\n+           file: \"./routes/todo.tsx\",\n          },\n        ],\n      },\n    ],\n  },\n] satisfies RouteConfig;\n```\n\n----------------------------------------\n\nTITLE: Configuring serverNodeBuiltinsPolyfill (Remix)\nDESCRIPTION: This JavaScript code snippet shows how to configure the `serverNodeBuiltinsPolyfill` option in a Remix application to polyfill Node.js built-in globals like `Buffer`.  It configures both global and module polyfills. It's necessary to also polyfill the underlying 'buffer' module. This is relevant for environments where Node.js built-ins are not available.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router-dev/CHANGELOG.md#_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  serverNodeBuiltinsPolyfill: {\n    globals: {\n      Buffer: true,\n    },\n    // You'll probably need to polyfill the \"buffer\" module\n    // too since the global polyfill imports this:\n    modules: {\n      buffer: true,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping a React Project with Vite\nDESCRIPTION: Uses npx to create a new React project using the Vite template. This command initiates the project setup process.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/data/installation.md#2025-04-22_snippet_0\n\nLANGUAGE: shellscript\nCODE:\n```\nnpx create-vite@latest\n```\n\n----------------------------------------\n\nTITLE: useFormAction Hook Signature\nDESCRIPTION: TypeScript function signature for the useFormAction hook showing its parameters and return type.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/hooks/useFormAction.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nuseFormAction(action, __namedParameters): string\n```\n\n----------------------------------------\n\nTITLE: Loading Vite Server Build Diff\nDESCRIPTION: This snippet demonstrates how to load the Vite server build in the request handler using the new `unstable_viteServerBuildModuleId` provided by Remix. It replaces the `unstable_loadViteServerBuild` function with a direct call to `vite.ssrLoadModule` using the provided module ID.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router-dev/CHANGELOG.md#_snippet_17\n\nLANGUAGE: diff\nCODE:\n```\n app.all(\n    \"*\",\n    createRequestHandler({\n      build: vite\n  -      ? () => unstable_loadViteServerBuild(vite)\n  +      ? () => vite.ssrLoadModule(unstable_viteServerBuildModuleId)\n        : await import(\"./build/server/index.js\"),\n    })\n  );\n```\n\n----------------------------------------\n\nTITLE: Registering AppLoadContext Types in TypeScript for React Router\nDESCRIPTION: This snippet demonstrates how to use module augmentation to register AppLoadContext types and temporarily augment LoaderFunctionArgs and ActionFunctionArgs. It's a transitional step when migrating from Remix v2 to React Router v7.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/upgrading/remix.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module \"react-router\" {\n  // Your AppLoadContext used in v2\n  interface AppLoadContext {\n    whatever: string;\n  }\n\n  // TODO: remove this once we've migrated to `Route.LoaderArgs` instead for our loaders\n  interface LoaderFunctionArgs {\n    context: AppLoadContext;\n  }\n\n  // TODO: remove this once we've migrated to `Route.ActionArgs` instead for our actions\n  interface ActionFunctionArgs {\n    context: AppLoadContext;\n  }\n}\n\nexport {}; // necessary for TS to treat this as a module\n```\n\n----------------------------------------\n\nTITLE: SSR and Pre-rendering Configuration\nDESCRIPTION: Setting up server-side rendering and static pre-rendering options in React Router config file.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/upgrading/router-provider.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Config } from \"@react-router/dev/config\";\n\nexport default {\n  ssr: true,\n  async prerender() {\n    return [\"/\", \"/about\", \"/contact\"];\n  },\n} satisfies Config;\n```\n\n----------------------------------------\n\nTITLE: Enabling View Transition for Link in React Router\nDESCRIPTION: Demonstrates how to enable a View Transition for navigation using the Link component in React Router.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/components/Link.md#2025-04-22_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<Link to={to} viewTransition>\n  Click me\n</Link>\n```\n\n----------------------------------------\n\nTITLE: Rendering React Router Provider in the Browser\nDESCRIPTION: This code snippet shows how to render the React Router provider in the browser using createRoot from react-dom/client and RouterProvider from react-router.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/data/custom.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  createBrowserRouter,\n  RouterProvider,\n} from \"react-router\";\nimport { createRoot } from \"react-dom/client\";\n\ncreateRoot(document.getElementById(\"root\")).render(\n  <RouterProvider router={router} />\n);\n```\n\n----------------------------------------\n\nTITLE: Installing React Router via NPM\nDESCRIPTION: Command to install the core react-router package using the npm package manager\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i react-router\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Segments in React Router\nDESCRIPTION: This snippet demonstrates how to use dynamic segments in React Router. Dynamic segments start with a colon and allow for parameterized routes. The useParams hook is used to access the dynamic segment values in the component.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/declarative/routing.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<Route path=\"teams/:teamId\" element={<Team />} />\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useParams } from \"react-router\";\n\nexport default function Team() {\n  let params = useParams();\n  // params.teamId\n}\n```\n\n----------------------------------------\n\nTITLE: Defining matchRoutes Function Signature in React Router\nDESCRIPTION: Function signature for matchRoutes that takes routes, locationArg, and basename as parameters and returns undefined. Used to match given routes to a location and return match data.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/utils/matchRoutes.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nmatchRoutes(routes, locationArg, basename): undefined\n```\n\n----------------------------------------\n\nTITLE: Client-side Context Example (TypeScript)\nDESCRIPTION: This example demonstrates the usage of the unstable client-side context feature in React Router. It shows how to create a context, define a middleware to populate the context with user data, and access the context in a client loader function. Dependencies: react-router.\nSOURCE: https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { unstable_createContext } from \"react-router\";\n\ntype User = {\n  /*...*/\n};\n\nconst userContext = unstable_createContext<User>();\n\nconst sessionMiddleware: Route.unstable_ClientMiddlewareFunction = async ({\n  context,\n}) => {\n  let user = await getUser();\n  context.set(userContext, user);\n};\n\nexport const unstable_clientMiddleware = [sessionMiddleware];\n\nexport function clientLoader({ context }: Route.ClientLoaderArgs) {\n  let user = context.get(userContext);\n  let profile = await getProfile(user.id);\n  return { profile };\n}\n```\n\n----------------------------------------\n\nTITLE: Async Product Component in React Server Components\nDESCRIPTION: This snippet shows an async Product component that fetches product data from a fake database and renders it. It demonstrates how individual components can be asynchronous in the context of React Server Components.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/react-server-components.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport async function Product({ id }: { id: string }) {\n  const product = await fakeDb.getProduct(id);\n  return (\n    <div>\n      <h1>{product.title}</h1>\n      <p>{product.description}</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Local File Storage\nDESCRIPTION: Sets up local file storage configuration for storing avatar files with a key generation function.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/file-uploads.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LocalFileStorage } from \"@mjackson/file-storage/local\";\n\nexport const fileStorage = new LocalFileStorage(\n  \"./uploads/avatars\"\n);\n\nexport function getStorageKey(userId: string) {\n  return `user-${userId}-avatar`;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Client Loader and Action in React Router SPA\nDESCRIPTION: This code demonstrates how to use clientLoader and clientAction functions in a React Router SPA. These functions manage route data and mutations on the client side when server-side rendering is disabled.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/spa.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Route } from \"./+types/some-route\";\n\nexport async function clientLoader({\n  params,\n}: Route.ClientLoaderArgs) {\n  let data = await fetch(`/some/api/stuff/${params.id}`);\n  return data;\n}\n\nexport async function clientAction({\n  request,\n}: Route.ClientActionArgs) {\n  let formData = await request.formData();\n  return await processPayment(formData);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Navigation with Link Components in React Router\nDESCRIPTION: This snippet demonstrates how to use Link components from React Router to create navigation links in a React application. It shows how to define links to different routes and how they translate to anchor tags in the rendered HTML.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/declarative/index.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link } from \"react-router-dom\";\n\nfunction Nav() {\n  return (\n    <nav>\n      <Link to=\"/\">Home</Link>\n      <Link to=\"/about\">About</Link>\n      <Link to=\"/projects/123\">Project 123</Link>\n    </nav>\n  );\n}\n\n// Renders:\n<nav>\n  <a href=\"/\">Home</a>\n  <a href=\"/about\">About</a>\n  <a href=\"/projects/123\">Project 123</a>\n</nav>\n```\n\n----------------------------------------\n\nTITLE: Using Children Render Prop with NavLink\nDESCRIPTION: Example of using the children render prop to customize rendering based on the link's active state.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/components/NavLink.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<NavLink to=\"/tasks\">\n  {({ isActive }) => (\n    <span className={isActive ? \"active\" : \"\"}>Tasks</span>\n  )}\n</NavLink>\n```\n\n----------------------------------------\n\nTITLE: useNavigation Hook Signature in React Router\nDESCRIPTION: The function signature for the useNavigation hook showing it returns a Navigation object.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/hooks/useNavigation.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nuseNavigation(): Navigation\n```\n\n----------------------------------------\n\nTITLE: Automatically updating React Router imports (Linux)\nDESCRIPTION: Shell command to automatically update imports in source files for Linux systems using GNU sed.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/upgrading/v6.md#2025-04-22_snippet_9\n\nLANGUAGE: shellscript\nCODE:\n```\nfind ./path/to/src \\( -name \"*.tsx\" -o -name \"*.ts\" -o -name \"*.js\" -o -name \"*.jsx\" \\) -type f -exec sed -i 's|from \"react-router-dom\"|from \"react-router\"|g' {} +\n```\n\n----------------------------------------\n\nTITLE: Updating TypeScript Configuration\nDESCRIPTION: This snippet shows the necessary changes to the tsconfig.json file when upgrading to React Router v7, including updates to the include, types, and rootDirs fields.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/upgrading/remix.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"include\": [\n    /* ... */\n+   \".react-router/types/**/*\"\n  ],\n  \"compilerOptions\": {\n-   \"types\": [\"@remix-run/node\", \"vite/client\"],\n+   \"types\": [\"@react-router/node\", \"vite/client\"],\n    /* ... */\n+   \"rootDirs\": [\".\", \"./.react-router/types\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading Middleware with Route Configuration - TypeScript\nDESCRIPTION: This code snippet shows how to configure a route with lazy loading of middleware using the object-based API.  It showcases the lazy loading of middleware. It depends on a separate file for the middleware (show.middleware.js). The unstable_lazyMiddleware property is used for lazy loading.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router/CHANGELOG.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ncreateBrowserRouter([\n    {\n      path: \"/show/:showId\",\n      lazy: {\n        unstable_middleware: async () =>\n          (await import(\"./show.middleware.js\")).middleware,\n        // etc.\n      },\n    },\n  ]);\n```\n\n----------------------------------------\n\nTITLE: Type Generic Definition in TypeScript\nDESCRIPTION: Illustrates how to define a single-argument type generic in TypeScript. In `.ts` files, JSX is not interpreted, so a comma is not needed to disambiguate the generic from a JSX element.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router-dev/CHANGELOG.md#_snippet_22\n\nLANGUAGE: TypeScript\nCODE:\n```\n// this works in .ts files\nconst id = <T>(x: T) => x;\n//          ^ single-argument type generic\n```\n\n----------------------------------------\n\nTITLE: Defining useBlocker Hook Signature in React Router\nDESCRIPTION: The type signature for the useBlocker hook that accepts a shouldBlock parameter and returns a Blocker object. Used to prevent unwanted navigation away from forms or unsaved content.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/hooks/useBlocker.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nuseBlocker(shouldBlock): Blocker\n```\n\n----------------------------------------\n\nTITLE: Type Casting vs Generic Type Parameters\nDESCRIPTION: Recommendation for explicit type casting over generic parameters when not using type inference, clearly communicating when assumptions are being made about data types.\nSOURCE: https://github.com/remix-run/react-router/blob/main/decisions/0003-infer-types-for-useloaderdata-and-useactiondata-from-loader-and-action-via-generics.md#2025-04-22_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\ntype MyLoaderData = {\n  /*...*/\n};\n\nexport default function Route() {\n  const dataGeneric = useLoaderData<MyLoaderData>(); // <-- will be deprecated\n  const dataCast = useLoaderData() as MyLoaderData; // <- use this instead\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Signup Form Component\nDESCRIPTION: Implements the initial signup form component using React Router's useFetcher hook for form handling.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/form-validation.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Route } from \"./+types/signup\";\nimport { useFetcher } from \"react-router\";\n\nexport default function Signup(_: Route.ComponentProps) {\n  let fetcher = useFetcher();\n  return (\n    <fetcher.Form method=\"post\">\n      <p>\n        <input type=\"email\" name=\"email\" />\n      </p>\n\n      <p>\n        <input type=\"password\" name=\"password\" />\n      </p>\n\n      <button type=\"submit\">Sign Up</button>\n    </fetcher.Form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Standard URLSearchParams Constructor Usage in React Router\nDESCRIPTION: Shows the standard way of creating a URLSearchParams object with multiple values for a single key using the URLSearchParams constructor, which is less convenient than using createSearchParams.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/utils/createSearchParams.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nlet searchParams = new URLSearchParams([\n  [\"sort\", \"name\"],\n  [\"sort\", \"price\"],\n]);\n```\n\n----------------------------------------\n\nTITLE: Running Development Server\nDESCRIPTION: Command to start the development server using the new configuration.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/upgrading/router-provider.md#2025-04-22_snippet_14\n\nLANGUAGE: shellscript\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Using useNavigationType Hook in React Router\nDESCRIPTION: Hook signature that returns the current navigation action type (pop, push, or replace) indicating how the router arrived at the current location in the history stack.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/hooks/useNavigationType.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nuseNavigationType(): NavigationType\n```\n\n----------------------------------------\n\nTITLE: Checking Route Error Response in React Router\nDESCRIPTION: Function signature for checking if an error is a route error response. Used to identify if an error originates from a 4xx/5xx HTTP response thrown from an action or loader in React Router.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/utils/isRouteErrorResponse.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nisRouteErrorResponse(error): error\n```\n\n----------------------------------------\n\nTITLE: Displaying Supported Versions Table in Markdown\nDESCRIPTION: This code snippet shows a markdown table that lists the supported versions of React Router for security updates. It uses checkmarks and X marks to indicate support status.\nSOURCE: https://github.com/remix-run/react-router/blob/main/SECURITY.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Version | Supported          |\n| ------- | ------------------ |\n| 7.x     | :white_check_mark: |\n| 6.x     | :white_check_mark: |\n| < 6.0   | :x:                |\n```\n\n----------------------------------------\n\nTITLE: Server-Side Rendering with React Router\nDESCRIPTION: This extensive snippet shows the complete process of server-side rendering with React Router, including creating a static handler, querying routes, rendering to string, and sending the response.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/data/custom.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { renderToString } from \"react-dom/server\";\nimport {\n  createStaticHandler,\n  createStaticRouter,\n  StaticRouterProvider,\n} from \"react-router\";\n\nimport routes from \"./some-routes.js\";\n\nlet { query, dataRoutes } = createStaticHandler(routes);\n\nexport async function handler(request: Request) {\n  // 1. run actions/loaders to get the routing context with `query`\n  let context = await query(request);\n\n  // If `query` returns a Response, send it raw (a route probably a redirected)\n  if (context instanceof Response) {\n    return context;\n  }\n\n  // 2. Create a static router for SSR\n  let router = createStaticRouter(dataRoutes, context);\n\n  // 3. Render everything with StaticRouterProvider\n  let html = renderToString(\n    <StaticRouterProvider\n      router={router}\n      context={context}\n    />\n  );\n\n  // Setup headers from action and loaders from deepest match\n  let leaf = context.matches[context.matches.length - 1];\n  let actionHeaders = context.actionHeaders[leaf.route.id];\n  let loaderHeaders = context.loaderHeaders[leaf.route.id];\n  let headers = new Headers(actionHeaders);\n  if (loaderHeaders) {\n    for (let [key, value] of loaderHeaders.entries()) {\n      headers.append(key, value);\n    }\n  }\n\n  headers.set(\"Content-Type\", \"text/html; charset=utf-8\");\n\n  // 4. send a response\n  return new Response(`<!DOCTYPE html>${html}`, {\n    status: context.statusCode,\n    headers,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing City Search Loader in React Router\nDESCRIPTION: This code snippet defines a loader function for a city search route in React Router. It extracts the search query from the request URL and calls a searchCities function with the query.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/explanation/race-conditions.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// route(\"/city-search\", \"./search-cities.ts\")\nexport async function loader({ request }) {\n  const { searchParams } = new URL(request.url);\n  return searchCities(searchParams.get(\"q\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Form Data in React Router Action\nDESCRIPTION: This snippet demonstrates how to access form data in a React Router action function using the formData API.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/tutorials/address-book.md#2025-04-22_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\nexport const action = async ({\n  params,\n  request,\n}: ActionFunctionArgs) => {\n  const formData = await request.formData();\n  const firstName = formData.get(\"first\");\n  const lastName = formData.get(\"last\");\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Using useHref Hook in React Router\nDESCRIPTION: Demonstrates basic usage of the useHref hook to resolve a relative URL path against the current location. The hook returns a fully resolved URL string.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/hooks/useHref.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useHref } from \"react-router\";\n\nfunction SomeComponent() {\n  let href = useHref(\"some/where\");\n  // \"/resolved/some/where\"\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Type Alignment with JSON Helper Functions\nDESCRIPTION: Example demonstrating how users must currently maintain type consistency by manually specifying the same types in json helper calls within loader and action functions.\nSOURCE: https://github.com/remix-run/react-router/blob/main/decisions/0003-infer-types-for-useloaderdata-and-useactiondata-from-loader-and-action-via-generics.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nexport const loader: LoaderFunction = () => {\n  return json<MyLoaderData>({\n    /* ... */\n  });\n};\n\nexport const action: ActionFunction = () => {\n  return json<MyActionData>({\n    /* ... */\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Updated Splat Route Configuration\nDESCRIPTION: Illustrates an updated route configuration to address the splat route issue, recommending moving the splat to its own route and using '../' for links to sibling pages. This ensures correct path resolution for relative links.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router/CHANGELOG.md#_snippet_26\n\nLANGUAGE: jsx\nCODE:\n```\n<BrowserRouter>\n  <Routes>\n    <Route path=\"dashboard\">\n      <Route index path=\"*\" element={<Dashboard />} />\n    </Route>\n  </Routes>\n</BrowserRouter>\n```\n\n----------------------------------------\n\nTITLE: useAsyncValue Hook Signature in React Router\nDESCRIPTION: The function signature for the useAsyncValue hook in React Router, showing that it returns an unknown type which represents the resolved promise value.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/hooks/useAsyncValue.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nuseAsyncValue(): unknown\n```\n\n----------------------------------------\n\nTITLE: Defining Route Middlewares in React Router (Framework/Library Mode)\nDESCRIPTION: This code snippet showcases how to define middleware functions for routes in both framework and library modes of React Router. It demonstrates the use of `unstable_middleware` and `unstable_clientMiddleware` arrays to specify middleware functions for specific routes.\nSOURCE: https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// Framework mode\nexport const unstable_middleware = [serverLogger, serverAuth]; // server\nexport const unstable_clientMiddleware = [clientLogger]; // client\n\n// Library mode\nconst routes = [\n  {\n    path: \"/\",\n    // Middlewares are client-side for library mode SPA's\n    unstable_middleware: [clientLogger, clientAuth],\n    loader: rootLoader,\n    Component: Root,\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Nested Splat Route Configuration\nDESCRIPTION: Shows a nested splat route configuration using BrowserRouter and Routes.  A Dashboard component is rendered for any path under the /dashboard route.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router/CHANGELOG.md#_snippet_24\n\nLANGUAGE: jsx\nCODE:\n```\n<BrowserRouter>\n  <Routes>\n    <Route path=\"dashboard\">\n      <Route path=\"*\" element={<Dashboard />} />\n    </Route>\n  </Routes>\n</BrowserRouter>\n```\n\n----------------------------------------\n\nTITLE: Synchronized State with URL Parameters\nDESCRIPTION: Demonstrates state synchronization between React state and URL parameters using useNavigate and useSearchParams. This implementation shows common anti-patterns in React Router applications.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/explanation/state-management.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useNavigate, useSearchParams } from \"react-router\";\n\nexport function List() {\n  const navigate = useNavigate();\n  const [searchParams] = useSearchParams();\n  const [view, setView] = useState(\n    searchParams.get(\"view\") || \"list\"\n  );\n\n  return (\n    <div>\n      <div>\n        <button\n          onClick={() => {\n            setView(\"list\");\n            navigate(`?view=list`);\n          }}\n        >\n          View as List\n        </button>\n        <button\n          onClick={() => {\n            setView(\"details\");\n            navigate(`?view=details`);\n          }}\n        >\n          View with Details\n        </button>\n      </div>\n      {view === \"list\" ? <ListView /> : <DetailView />}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite Manifest Generation (TypeScript)\nDESCRIPTION: This TypeScript snippet shows how to explicitly enable the generation of Vite manifest files by setting `build.manifest` to `true` in the Vite configuration. This is required after the breaking change that made manifest generation opt-in.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router-dev/CHANGELOG.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n    build: { manifest: true },\n    // ...\n  });\n```\n\n----------------------------------------\n\nTITLE: Custom Revalidation Logic in TypeScript\nDESCRIPTION: Implementation of shouldRevalidate function that controls when route loaders should re-run, allowing custom logic while maintaining ability to fall back to default behavior.\nSOURCE: https://github.com/remix-run/react-router/blob/main/decisions/0005-remixing-react-router.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction shouldRevalidate({ defaultShouldRevalidate }) {\n  // Don't revalidate for this case\n  if (someEdgeCase()) {\n    return false;\n  }\n\n  // Otherwise, do what we would have done by default\n  return defaultShouldRevalidate;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing shouldRevalidate in React Router\nDESCRIPTION: Demonstrates how to implement the shouldRevalidate function to control when a route should be revalidated after actions.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/framework/route-module.md#2025-04-22_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { ShouldRevalidateFunctionArgs } from \"react-router\";\n\nexport function shouldRevalidate(\n  arg: ShouldRevalidateFunctionArgs\n) {\n  return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Explicit Type Parameters with useLoaderData and useActionData\nDESCRIPTION: Example showing the current approach of manually specifying types through generic parameters for the useLoaderData and useActionData hooks.\nSOURCE: https://github.com/remix-run/react-router/blob/main/decisions/0003-infer-types-for-useloaderdata-and-useactiondata-from-loader-and-action-via-generics.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ntype MyLoaderData = {\n  /* ... */\n};\ntype MyActionData = {\n  /* ... */\n};\n\nexport default function Route() {\n  const loaderData = useLoaderData<MyLoaderData>();\n  const actionData = useActionData<MyActionData>();\n  return <div>{/* ... */}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining redirectDocument Function Signature in React Router\nDESCRIPTION: This code snippet shows the function signature for the redirectDocument function in React Router. It takes a URL and an optional init parameter, and returns a Response object.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/utils/redirectDocument.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nredirectDocument(url, init): Response\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading HydrateFallback in React Router\nDESCRIPTION: This code snippet demonstrates how to lazy load the `HydrateFallback` component to avoid downloading it if the route is not present during hydration, improving performance. It uses a separate file for the `HydrateFallback` component to prevent unnecessary downloads.\nSOURCE: https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ncreateBrowserRouter([\n  {\n    path: \"/show/:showId\",\n    lazy: {\n      loader: async () => (await import(\"./show.loader.js\")).loader,\n      Component: async () =>\n        (await import(\"./show.component.js\")).Component,\n      HydrateFallback: async () =>\n        (await import(\"./show.hydrate-fallback.js\")).HydrateFallback,\n    },\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Comparing Link and Form GET Methods in HTML\nDESCRIPTION: Demonstrates the functional equivalence between a link and a form submission using GET method, showing how both approaches achieve the same search query functionality.\nSOURCE: https://github.com/remix-run/react-router/blob/main/decisions/0005-remixing-react-router.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"/search?query=matt\">Search</a>\n\n<form action=\"/search\">\n  <input name=\"query\" value=\"matt\" />\n  <button type=\"submit\">Search</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Defining Routes in Framework Mode for React Router\nDESCRIPTION: This code snippet shows how to define routes in Framework Mode for React Router. It demonstrates the use of the 'createElement' function to create route elements dynamically.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/framework/index.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createElement } from \"react\";\nimport { Route, RouterProvider } from \"react-router-dom\";\n\nconst routes = [\n  {\n    path: \"/\",\n    element: createElement(Root),\n    children: [\n      {\n        path: \"dashboard\",\n        element: createElement(Dashboard),\n      },\n      {\n        path: \"about\",\n        element: createElement(About),\n      },\n    ],\n  },\n];\n\nfunction App() {\n  return <RouterProvider router={router} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Route Component in React Router\nDESCRIPTION: The Route component is used to render an element when a specific pattern matches the current location. It must be used within a Routes element. This component does not handle data loading, actions, code splitting, or other route module features.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/components/Route.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Routes>\n  <Route path=\"/example\" element={<ExampleComponent />} />\n</Routes>\n```\n\n----------------------------------------\n\nTITLE: Configuring Destroy Contact Route in React Router\nDESCRIPTION: This snippet shows how to configure the route for deleting contacts in React Router's route configuration file.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/tutorials/address-book.md#2025-04-22_snippet_31\n\nLANGUAGE: tsx\nCODE:\n```\nexport default [\n  // existing routes\n  route(\n    \"contacts/:contactId/destroy\",\n    \"routes/destroy-contact.tsx\"\n  ),\n  // existing routes\n] satisfies RouteConfig;\n```\n\n----------------------------------------\n\nTITLE: Using Meta Component in React Router\nDESCRIPTION: Shows how to use the Meta component to render all aggregated meta tags from route modules in the app root.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/framework/route-module.md#2025-04-22_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Meta } from \"react-router\";\n\nexport default function Root() {\n  return (\n    <html>\n      <head>\n        <Meta />\n      </head>\n\n      <body />\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Route Config with React Router Vite Plugin\nDESCRIPTION: This code snippet shows how to define routes using the React Router Vite plugin in `app/routes.ts`. It utilizes `RouteConfig`, `route`, `index`, and `layout` helper functions from `@react-router/dev/routes` to create type-safe route definitions.\nSOURCE: https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#_snippet_27\n\nLANGUAGE: ts\nCODE:\n```\n// app/routes.ts\nimport {\n  type RouteConfig,\n  route,\n  index,\n  layout,\n} from \"@react-router/dev/routes\";\n\nexport const routes: RouteConfig = [\n  index(\"./home.tsx\"),\n  route(\"about\", \"./about.tsx\"),\n\n  layout(\"./auth/layout.tsx\", [\n    route(\"login\", \"./auth/login.tsx\"),\n    route(\"register\", \"./auth/register.tsx\"),\n  ]),\n\n  route(\"concerts\", [\n    index(\"./concerts/home.tsx\"),\n    route(\":city\", \"./concerts/city.tsx\"),\n    route(\"trending\", \"./concerts/trending.tsx\"),\n  ]),\n];\n```\n\n----------------------------------------\n\nTITLE: Updating Server Entry File in TypeScript\nDESCRIPTION: This snippet demonstrates the changes needed in the entry.server.tsx file when upgrading from Remix to React Router v7, including updating import statements and component names.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/upgrading/remix.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n-import { RemixServer } from \"@remix-run/react\";\n+import { ServerRouter } from \"react-router\";\n\n-<RemixServer context={remixContext} url={request.url} />,\n+<ServerRouter context={remixContext} url={request.url} />,\n```\n\n----------------------------------------\n\nTITLE: Configuring React Router in a React Application\nDESCRIPTION: Basic setup of React Router in a React application. This snippet demonstrates how to import necessary components, define routes, and render them within the app structure.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/index.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport {\n  createBrowserRouter,\n  RouterProvider,\n} from \"react-router-dom\";\n\nconst router = createBrowserRouter([\n  {\n    path: \"/\",\n    element: <div>Hello world!</div>,\n  },\n]);\n\ncreateRoot(document.getElementById(\"root\")).render(\n  <RouterProvider router={router} />\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Hot-fix Release for React Router\nDESCRIPTION: Process for creating emergency hot-fix releases directly from the main branch, including testing and version updates.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/community/contributing.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# From the main branch, make sure to run the build and all tests\n# before creating a new release.\npnpm install && pnpm build && pnpm test\n\n# Assuming the tests pass, create the release tag and update\n# version references throughout the codebase.\npnpm run version [nextVersion]\n\n# Push changes along with the new release tag.\ngit push origin main --follow-tags\n\n# When the hot-fix is done, merge the changes into dev and clean\n# up conflicts as needed.\ngit checkout dev\ngit merge main\ngit push origin dev\n```\n\n----------------------------------------\n\nTITLE: Implementing Root Loader and HydrateFallback with Data in React Router\nDESCRIPTION: This snippet shows how to implement a loader function for the root route and use its data in the HydrateFallback component. The loader is called at build time, and its data is available via the loaderData prop in the HydrateFallback component.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/spa.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Route } from \"./+types/root\";\n\nexport async function loader() {\n  return {\n    version: await getVersion(),\n  };\n}\n\nexport function HydrateFallback({\n  loaderData,\n}: Route.ComponentProps) {\n  return (\n    <div>\n      <h1>Loading version {loaderData.version}...</h1>\n      <AwesomeSpinner />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Express Server with broadcastDevReady\nDESCRIPTION: This JavaScript code snippet demonstrates how to integrate `broadcastDevReady` from `@remix-run/node` into an Express server to notify the Remix development server that the app server is ready.  This is necessary when not using Remix App Server.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router-dev/CHANGELOG.md#_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\n// server.js\n// <other imports>\nimport { broadcastDevReady } from \"@remix-run/node\";\n\n// Path to Remix's server build directory ('build/' by default)\nconst BUILD_DIR = path.join(process.cwd(), \"build\");\n\n// <code setting up your express server>\n\napp.listen(3000, () => {\n  const build = require(BUILD_DIR);\n  console.log(\"Ready: http://localhost:\" + port);\n\n  // in development, call `broadcastDevReady` _after_ your server is up and running\n  if (process.env.NODE_ENV === \"development\") {\n    broadcastDevReady(build);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using href Function in React Router for URL Path Resolution\nDESCRIPTION: Demonstrates how to use the href function from React Router to resolve URL paths from route patterns and parameters. The first example shows basic usage with an optional parameter, while the second shows how to use it with Link components.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/utils/href.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst h = href(\"/:lang?/about\", { lang: \"en\" })\n// -> `/en/about`\n\n<Link to={href(\"/products/:id\", { id: \"abc123\" })} />\n```\n\n----------------------------------------\n\nTITLE: Setting Status Codes in React Router Action\nDESCRIPTION: This code snippet demonstrates how to set status codes 400 and 201 in a React Router action function. It handles form submission for creating or updating a project, validating the title and returning appropriate status codes.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/status.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// route('/projects/:projectId', './project.tsx')\nimport type { Route } from \"./+types/project\";\nimport { data } from \"react-router\";\nimport { fakeDb } from \"../db\";\n\nexport async function action({\n  request,\n}: Route.ActionArgs) {\n  let formData = await request.formData();\n  let title = formData.get(\"title\");\n  if (!title) {\n    return data(\n      { message: \"Invalid title\" },\n      { status: 400 }\n    );\n  }\n\n  if (!projectExists(title)) {\n    let project = await fakeDb.createProject({ title });\n    return data(project, { status: 201 });\n  } else {\n    let project = await fakeDb.updateProject({ title });\n    // the default status code is 200, no need for `data`\n    return project;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Loader Function with TypeScript in React Router\nDESCRIPTION: This snippet demonstrates the use of a defineLoader function to type-check a loader in React Router. It shows how to create a loader that returns an object with a 'planet' property.\nSOURCE: https://github.com/remix-run/react-router/blob/main/decisions/0012-type-inference.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineLoader } from \"./+types.product\";\n\nexport const loader = defineLoader(() => {\n  return { planet: \"world\" };\n});\n```\n\n----------------------------------------\n\nTITLE: Using type-safe href utility in React Router\nDESCRIPTION: This snippet demonstrates how to use the new type-safe `href` utility from React Router to generate URLs with type checking for route parameters. It imports the `href` function and utilizes it within a React component to create links and navigation links with specified parameters.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router/CHANGELOG.md#_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport { href } from \"react-router\";\n\nexport default function Component() {\n  const link = href(\"/blog/:slug\", { slug: \"my-first-post\" });\n  return (\n    <main>\n      <Link to={href(\"/products/:id\", { id: \"asdf\" })} />\n      <NavLink to={href(\"/:lang?/about\", { lang: \"en\" })} />\n    </main>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Typesafe Links (JSX)\nDESCRIPTION: Demonstrates how typesafe links will be implemented in future releases using the `<Link>` component.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router/CHANGELOG.md#_snippet_20\n\nLANGUAGE: JSX\nCODE:\n```\n<Link to=\"/products/:id\" params={{ id: 1 }} />\n//        ^^^^^^^^^^^^^          ^^^^^^^^^\n// typesafe `to` and `params` based on the available routes in your app\n```\n\n----------------------------------------\n\nTITLE: Synchronous DOM Updates with flushSync in React Router\nDESCRIPTION: Demonstrates how to use the `unstable_flushSync` option with `useSubmit` to force synchronous DOM updates, allowing for immediate focus/scroll to pending/optimistic UI changes. It opts out of React.startTransition and into ReactDOM.flushSync for state updates. Requires React and ReactDOM.\nSOURCE: https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#_snippet_36\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction handleClick() {\n  submit(data, { flushSync: true });\n  // Everything is flushed to the DOM so you can focus/scroll to your pending/optimistic UI\n  setFocusAndOrScrollToNewlyAddedThing();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Contact Component UI\nDESCRIPTION: Contact route component implementation with form handling, contact details display, and favorite toggling functionality.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/tutorials/address-book.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Form } from \"react-router\";\n\nimport type { ContactRecord } from \"../data\";\n\nexport default function Contact() {\n  const contact = {\n    first: \"Your\",\n    last: \"Name\",\n    avatar: \"https://placecats.com/200/200\",\n    twitter: \"your_handle\",\n    notes: \"Some notes\",\n    favorite: true,\n  };\n\n  return (\n    <div id=\"contact\">\n      <div>\n        <img\n          alt={`${contact.first} ${contact.last} avatar`}\n          key={contact.avatar}\n          src={contact.avatar}\n        />\n      </div>\n\n      <div>\n        <h1>\n          {contact.first || contact.last ? (\n            <>\n              {contact.first} {contact.last}\n            </>\n          ) : (\n            <i>No Name</i>\n          )}\n          <Favorite contact={contact} />\n        </h1>\n\n        {contact.twitter ? (\n          <p>\n            <a\n              href={`https://twitter.com/${contact.twitter}`}\n            >\n              {contact.twitter}\n            </a>\n          </p>\n        ) : null}\n\n        {contact.notes ? <p>{contact.notes}</p> : null}\n\n        <div>\n          <Form action=\"edit\">\n            <button type=\"submit\">Edit</button>\n          </Form>\n\n          <Form\n            action=\"destroy\"\n            method=\"post\"\n            onSubmit={(event) => {\n              const response = confirm(\n                \"Please confirm you want to delete this record.\"\n              );\n              if (!response) {\n                event.preventDefault();\n              }\n            }}\n          >\n            <button type=\"submit\">Delete</button>\n          </Form>\n        </div>\n      </div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @react-router/fs-routes package using npm\nDESCRIPTION: This command installs the @react-router/fs-routes package, which provides file system routing conventions for React Router. It allows developers to structure their routes based on the file system layout.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router-fs-routes/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @react-router/fs-routes\n```\n\n----------------------------------------\n\nTITLE: Defining Routes with Element and Component - React Router (JSX Syntax)\nDESCRIPTION: Demonstrates the usage of `createRoutesFromElements` to define routes using both React Elements and React Components. It highlights the alternative syntax using `<Route>` components and either the `element`/`errorElement` props or the `Component`/`ErrorBoundary` props. The two approaches are functionally equivalent.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router/CHANGELOG.md#_snippet_33\n\nLANGUAGE: jsx\nCODE:\n```\n// Both of these work the same:\nconst elementRoutes = createRoutesFromElements(\n  <Route path='/' element={<Home />} errorElement={<HomeError /> } />\n);\n\nconst componentRoutes = createRoutesFromElements(\n  <Route path='/' Component={Home} ErrorBoundary={HomeError} />\n);\n\nfunction Home() { ... }\nfunction HomeError() { ... }\n```\n\n----------------------------------------\n\nTITLE: Adding Action to Route Module for Fetcher in React Router\nDESCRIPTION: Adds an action function to the route module that handles form submissions and updates localStorage.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/fetchers.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLoaderData } from \"react-router\";\n\nexport async function clientLoader({ request }) {\n  // ...\n}\n\nexport async function clientAction({ request }) {\n  await new Promise((res) => setTimeout(res, 1000));\n  let data = await request.formData();\n  localStorage.setItem(\"title\", data.get(\"title\"));\n  return { ok: true };\n}\n\nexport default function Component() {\n  let data = useLoaderData();\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring React Router SSR Settings\nDESCRIPTION: Configuration file showing SSR settings for React Router, setting server-side rendering to false for SPA mode.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/tutorials/address-book.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type Config } from \"@react-router/dev/config\";\n\nexport default {\n  ssr: false,\n} satisfies Config;\n```\n\n----------------------------------------\n\nTITLE: Creating New React Router Project\nDESCRIPTION: Command to create a new React Router project using the official template creator.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/framework/installation.md#2025-04-22_snippet_0\n\nLANGUAGE: shellscript\nCODE:\n```\nnpx create-react-router@latest my-react-router-app\n```\n\n----------------------------------------\n\nTITLE: Installing Globals in server.js - Javascript\nDESCRIPTION: This code snippet demonstrates how to install globals using the `@remix-run/node` package within a server.js file. It's necessary when using your own app server with Remix and handling fetch implementations. This snippet provides a way to inject necessary global variables for the Remix runtime environment.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router-express/CHANGELOG.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { installGlobals } from \"@remix-run/node\";\n\ninstallGlobals();\n```\n\n----------------------------------------\n\nTITLE: Installing source-map-support in server.js - Javascript\nDESCRIPTION: This code snippet shows how to integrate `source-map-support` into a server.js file for Remix. It installs source map support for improved debugging. This is required from Remix v2.0.0 onwards when using a custom app server.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router-express/CHANGELOG.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport sourceMapSupport from \"source-map-support\";\nsourceMapSupport.install();\n```\n\n----------------------------------------\n\nTITLE: Setting Case Sensitivity for Route Path in React Router\nDESCRIPTION: The caseSensitive prop determines whether the path should be matched in a case-sensitive manner. This prop is applicable in framework, data, and declarative modes.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/components/Route.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Route path=\"/example\" caseSensitive={true} element={<ExampleComponent />} />\n```\n\n----------------------------------------\n\nTITLE: Resolving Paths in React Router\nDESCRIPTION: Function signature for resolvePath that takes a target path and base pathname to resolve against. Returns a Path object containing the resolved path information.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/utils/resolvePath.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nresolvePath(to, fromPathname): Path\n```\n\n----------------------------------------\n\nTITLE: Importing Generated Types in TypeScript\nDESCRIPTION: Example showing how generated types can be imported in a route module using the proposed typegen solution.\nSOURCE: https://github.com/remix-run/react-router/blob/main/decisions/0012-type-inference.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LoaderArgs, DefaultProps } from \"./+types.product\";\n```\n\n----------------------------------------\n\nTITLE: Defining useOutletContext Hook Signature in TypeScript\nDESCRIPTION: This code snippet shows the TypeScript signature for the useOutletContext hook in React Router. It returns the Context type from the parent route's Outlet.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/hooks/useOutletContext.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nuseOutletContext(): Context\n```\n\n----------------------------------------\n\nTITLE: Migrating to new `buildDirectory` option (Diff)\nDESCRIPTION: This diff demonstrates how to migrate from the deprecated `assetsBuildDirectory` and `serverBuildDirectory` options to the new `buildDirectory` option in the Remix Vite plugin configuration.  This combines the client and server build outputs into a single directory.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router-dev/CHANGELOG.md#_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\nimport { unstable_vitePlugin as remix } from \"@remix-run/dev\";\n  import { defineConfig } from \"vite\";\n\n  export default defineConfig({\n    plugins: [\n      remix({\n  -      serverBuildDirectory: \"dist/server\",\n  -      assetsBuildDirectory: \"dist/client\",\n  +      buildDirectory: \"dist\",\n      })\n    ],\n  });\n```\n\n----------------------------------------\n\nTITLE: Creating Project from Specific Template\nDESCRIPTION: Command to create a new React Router project using a specific template from the official templates repository.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/framework/installation.md#2025-04-22_snippet_2\n\nLANGUAGE: shellscript\nCODE:\n```\nnpx create-react-router@latest --template remix-run/react-router-templates/<template-name>\n```\n\n----------------------------------------\n\nTITLE: Running React Router Tests\nDESCRIPTION: Commands for running tests either for all packages or for specific packages in the React Router monorepo.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/community/contributing.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Test all packages\npnpm test\n\n# Test only react-router-dom\npnpm test --projects packages/react-router-dom\n```\n\n----------------------------------------\n\nTITLE: Converting HTML to React Root Component (TypeScript/JSX)\nDESCRIPTION: Example of converting an index.html file to a React component in root.tsx, including necessary imports and layout structure for React Router.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/upgrading/router-provider.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Links,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n} from \"react-router\";\n\nexport function Layout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charSet=\"UTF-8\" />\n        <meta\n          name=\"viewport\"\n          content=\"width=device-width, initial-scale=1.0\"\n        />\n        <title>My App</title>\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        {children}\n        <ScrollRestoration />\n        <Scripts />\n      </body>\n    </html>\n  );\n}\n\nexport default function Root() {\n  return <Outlet />;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Dynamic Styles to NavLink in React Router\nDESCRIPTION: This snippet shows how to use the style prop of NavLink with a callback function. It applies inline styles based on the link's active, pending, and transitioning states.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/framework/navigating.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<NavLink\n  to=\"/messages\"\n  style={({ isActive, isPending, isTransitioning }) => {\n    return {\n      fontWeight: isActive ? \"bold\" : \"\",\n      color: isPending ? \"red\" : \"black\",\n      viewTransitionName: isTransitioning ? \"slide\" : \"\",\n    };\n  }}\n>\n  Messages\n</NavLink>\n```\n\n----------------------------------------\n\nTITLE: Hydrating React Router in the Browser\nDESCRIPTION: This snippet demonstrates how to hydrate React Router in the browser, using the hydration data embedded in the window object and creating a browser router.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/data/custom.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StrictMode } from \"react\";\nimport { hydrateRoot } from \"react-dom/client\";\nimport { RouterProvider } from \"react-router/dom\";\nimport routes from \"./app/routes.js\";\nimport { createBrowserRouter } from \"react-router\";\n\nlet router = createBrowserRouter(routes, {\n  hydrationData: window.__staticRouterHydrationData,\n});\n\nhydrateRoot(\n  document,\n  <StrictMode>\n    <RouterProvider router={router} />\n  </StrictMode>\n);\n```\n\n----------------------------------------\n\nTITLE: Vite Plugin Install Globals Usage\nDESCRIPTION: This code demonstrates how to explicitly opt-in to automatic global Node polyfill installation in the Vite config by calling the `installGlobals` function. This is necessary after the removal of automatic installation from the built-in Vite dev server.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router-dev/CHANGELOG.md#_snippet_19\n\nLANGUAGE: diff\nCODE:\n```\n import { unstable_vitePlugin as remix } from \"@remix-run/dev\";\n  +import { installGlobals } from \"@remix-run/node\";\n  import { defineConfig } from \"vite\";\n\n  +installGlobals();\n\n  export default defineConfig({\n    plugins: [remix()],\n  });\n```\n\n----------------------------------------\n\nTITLE: Creating Search Route for Data Loading with Fetcher in React Router\nDESCRIPTION: Sets up a search route with a loader function that filters users based on a query parameter.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/fetchers.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n// { path: '/search-users', filename: './search-users.tsx' }\nconst users = [\n  { id: 1, name: \"Ryan\" },\n  { id: 2, name: \"Michael\" },\n  // ...\n];\n\nexport async function loader({ request }) {\n  await new Promise((res) => setTimeout(res, 300));\n  let url = new URL(request.url);\n  let query = url.searchParams.get(\"q\");\n  return users.filter((user) =>\n    user.name.toLowerCase().includes(query.toLowerCase())\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Link Component Usage\nDESCRIPTION: Shows how to use the basic Link component for navigation without active state styling.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/declarative/navigating.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Link } from \"react-router\";\n\nexport function LoggedOutMessage() {\n  return (\n    <p>\n      You've been logged out.{\" \"}\n      <Link to=\"/login\">Login again</Link>\n    </p>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: useParams Hook Type Signature\nDESCRIPTION: Shows the TypeScript type signature for the useParams hook, indicating it returns a readonly object of parameters.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/hooks/useParams.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nuseParams(): Readonly\n```\n\n----------------------------------------\n\nTITLE: Optional Params Example Usage (React Router)\nDESCRIPTION: This code snippet illustrates how to use optional parameters within React Router's `<Route>` component.  It demonstrates the flexibility of matching different URL patterns based on the presence or absence of specific route segments. The example showcases handling of both dynamic and static optional segments.\nSOURCE: https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#_snippet_54\n\nLANGUAGE: JSX\nCODE:\n```\n// Old behavior at URL /prefix-123\n<Route path=\"prefix-:id\" element={<Comp /> }>\n\nfunction Comp() {\n  let params = useParams(); // { id: '123' }\n  let id = params.id; // \"123\"\n  ...\n}\n\n// New behavior at URL /prefix-123\n<Route path=\":id\" element={<Comp /> }>\n\nfunction Comp() {\n  let params = useParams(); // { id: 'prefix-123' }\n  let id = params.id.replace(/^prefix-/, ''); // \"123\"\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing JSON-LD Schema with React Router Meta Function\nDESCRIPTION: Example showing how to implement structured data using JSON-LD schema in React Router's meta function. This snippet demonstrates setting up organization metadata using schema.org format.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/meta.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport function meta() {\n  return [\n    {\n      \"script:ld+json\": {\n        \"@context\": \"https://schema.org\",\n        \"@type\": \"Organization\",\n        name: \"React Router\",\n        url: \"https://reactrouter.com\",\n      },\n    },\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining createStaticRouter Function Signature in TypeScript/React\nDESCRIPTION: This code snippet shows the signature of the createStaticRouter function. It takes routes, context, and options as parameters and returns a DataRouter object. The function is likely used for creating a static router configuration in React applications.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/data-routers/createStaticRouter.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ncreateStaticRouter(routes, context, opts): DataRouter\n```\n\n----------------------------------------\n\nTITLE: Installing React Router Vite Plugin (Shell)\nDESCRIPTION: Command to install the React Router Vite plugin as a development dependency using npm.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/upgrading/router-provider.md#2025-04-22_snippet_3\n\nLANGUAGE: shellscript\nCODE:\n```\nnpm install -D @react-router/dev\n```\n\n----------------------------------------\n\nTITLE: Replacing History Entry with Link in React Router\nDESCRIPTION: Shows how to replace the current history entry instead of pushing a new one when using the Link component in React Router.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/components/Link.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<Link replace />\n```\n\n----------------------------------------\n\nTITLE: Linking to Resource Routes in React Router\nDESCRIPTION: Example of creating a link to a resource route using Link component with reloadDocument prop to trigger a full page reload.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/resource-routes.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Link reloadDocument to=\"/reports/pdf/123\">\n  View as PDF\n</Link>\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-Side Context in React Router\nDESCRIPTION: Demonstrates how to set up client-side context using the unstable_createContext API and the getContext method. Shows implementation in both library and framework modes with a logger context example.\nSOURCE: https://github.com/remix-run/react-router/blob/main/decisions/0014-context-middleware.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nlet loggerContext = unstable_createContext<(...args: unknown[]) => void>();\n\nfunction getContext() {\n  return new Map([[loggerContext, (...args) => console.log(...args)]])\n}\n\n// library mode\nlet router = createBrowserRouter(routes, { unstable_getContext: getContext })\n\n// framework mode\nreturn <HydratedRouter unstable_getContext={getContext}>\n```\n\n----------------------------------------\n\nTITLE: Installing @react-router/fs-routes Package\nDESCRIPTION: Command to install the @react-router/fs-routes package using npm.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/file-route-conventions.md#2025-04-22_snippet_0\n\nLANGUAGE: shellscript\nCODE:\n```\nnpm i @react-router/fs-routes\n```\n\n----------------------------------------\n\nTITLE: Installing source-map-support - Bash\nDESCRIPTION: This command installs the `source-map-support` package, which is required when using your own app server with Remix. It allows for better debugging by providing source map support. This dependency becomes a responsibility of the app server starting from Remix v2.0.0\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router-express/CHANGELOG.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i source-map-support\n```\n\n----------------------------------------\n\nTITLE: Broken Form Example in Data Routers\nDESCRIPTION: Demonstrates a broken Form component in Data Routers (and Remix) where the form incorrectly submits to the parent route instead of its own route action due to the splat route issue. This results in a 405 error.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router/CHANGELOG.md#_snippet_25\n\nLANGUAGE: jsx\nCODE:\n```\nlet router = createBrowserRouter({\n  path: \"/dashboard\",\n  children: [\n    {\n      path: \"*\",\n      action: dashboardAction,\n      Component() {\n        // ❌ This form is broken!  It throws a 405 error when it submits because\n        // it tries to submit to /dashboard (without the splat value) and the parent\n        // `/dashboard` route doesn't have an action\n        return <Form method=\"post\">...</Form>;\n      },\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for React Router Types\nDESCRIPTION: TSConfig settings to include generated types and configure root directories for proper type resolution.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/route-module-type-safety.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"include\": [\".react-router/types/**/*\"],\n  \"compilerOptions\": {\n    \"rootDirs\": [\".\", \"./.react-router/types\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Image Gallery Transition Styles - CSS\nDESCRIPTION: CSS styles for image gallery layout and view transition animations between routes.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/view-transitions.md#2025-04-22_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n/* Layout styles for the image grid */\n.image-list > div {\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  column-gap: 10px;\n}\n\n.image-list h1 {\n  font-size: 2rem;\n  font-weight: 600;\n}\n\n.image-list img {\n  max-width: 100%;\n  contain: layout;\n}\n\n.image-list p {\n  width: fit-content;\n}\n\n/* Assign transition names to elements during navigation */\n.image-list a.transitioning img {\n  view-transition-name: image-expand;\n}\n\n.image-list a.transitioning p {\n  view-transition-name: image-title;\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Virtual Module for Server Build (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to reference the virtual module name `\"virtual:remix/server-build\"` when calling `ssrLoadModule` in development with the Remix Vite plugin. This replaces the use of `unstable_viteServerBuildModuleId` to avoid inadvertently requiring `@remix-run/dev` in production dependencies. It assumes that `vite` and `createRequestHandler` are already defined.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router-dev/CHANGELOG.md#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\napp.all(\n  \"*\",\n  createRequestHandler({\n    build: vite\n      ? () => vite.ssrLoadModule(\"virtual:remix/server-build\")\n      : await import(\"./build/server/index.js\"),\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Router Initialization with Future Flags - JavaScript\nDESCRIPTION: This code snippet demonstrates how to initialize a React Router with future flags enabled. It showcases the configuration of the router using `createBrowserRouter` and setting the `future` option to customize behavior.\nSOURCE: https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = createBrowserRouter(routes, {\n  future: {\n    // specify future flags here\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Update package.json scripts for CSS (PostCSS)\nDESCRIPTION: This diff shows how to update the `package.json` scripts to remove explicit PostCSS commands when the new `postcss` option in `remix.config.js` is enabled. Remix now handles PostCSS automatically.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router-dev/CHANGELOG.md#_snippet_33\n\nLANGUAGE: diff\nCODE:\n```\n{\n  \"scripts\": {\n-    \"dev:css\": \"postcss styles --base styles --dir app/styles -w\",\n-    \"build:css\": \"postcss styles --base styles --dir app/styles --env production\",\n-    \"dev\": \"concurrently \\\"npm run dev:css\\\" \\\"remix dev\\\"\"\n+    \"dev\": \"remix dev\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing New Dependencies\nDESCRIPTION: This command installs the updated dependencies after running the codemod or manually updating the package.json file.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/upgrading/remix.md#2025-04-22_snippet_2\n\nLANGUAGE: shellscript\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Old React Router Implementation with DataBrowserRouter\nDESCRIPTION: Example showing the previous implementation using DataBrowserRouter component with nested Route components.\nSOURCE: https://github.com/remix-run/react-router/blob/main/decisions/0005-remixing-react-router.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nfunction OldApp() {\n  return (\n    <DataBrowserRouter>\n      <Route path=\"/\" element={<Layout />}>\n        <Route index element={<Home />} />\n      </Route>\n    </DataBrowserRouter>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Router Package\nDESCRIPTION: NPM command to install the React Router package as a project dependency.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/declarative/installation.md#2025-04-22_snippet_1\n\nLANGUAGE: shellscript\nCODE:\n```\nnpm i react-router\n```\n\n----------------------------------------\n\nTITLE: Creating a new React Router app using npm\nDESCRIPTION: This command uses npm to create a new React Router application. It initializes a new project with the necessary dependencies and configuration for React Router.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/create-react-router/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm create react-router\n```\n\n----------------------------------------\n\nTITLE: Basic Route Configuration with Middleware\nDESCRIPTION: Example of route configuration with middleware and context definitions using the handle property.\nSOURCE: https://github.com/remix-run/react-router/blob/main/decisions/0003-data-strategy.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlet route = {\n  id: \"parent\",\n  path: \"/parent\",\n  loader: () => {},\n  handle: {\n    // context can provide multiple keyed contexts\n    context: {\n      parent: () => ({ id: \"parent\" }),\n    },\n    // middleware receives context as an argument\n    middleware(context) {\n      context.parent.whatever = \"PARENT MIDDLEWARE\";\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing BrowserRouter Configuration\nDESCRIPTION: React code showing how to wrap the main App component with BrowserRouter for routing functionality. Demonstrates the basic router setup in the application's entry point.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/declarative/installation.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport { BrowserRouter } from \"react-router\";\nimport App from \"./app\";\n\nconst root = document.getElementById(\"root\");\n\nReactDOM.createRoot(root).render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n);\n```\n\n----------------------------------------\n\nTITLE: Migrating useFetcher Usage - React Router\nDESCRIPTION: This snippet demonstrates how to update the usage of `useFetcher` in React Router v7 to align with the new generic type expectation.  Previously, the data type was expected, but now the type of the loader/action function is required. This change is relevant for those migrating from Remix v2.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router/CHANGELOG.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// ❌ useFetcher<LoaderData>()\n// ✅ useFetcher<typeof loader>()\n```\n\n----------------------------------------\n\nTITLE: Image Detail Transition Styles - CSS\nDESCRIPTION: CSS styles for image detail view with matching transition names for smooth animations.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/view-transitions.md#2025-04-22_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n/* Match transition names from the list view */\n.image-detail h1 {\n  font-size: 2rem;\n  font-weight: 600;\n  width: fit-content;\n  view-transition-name: image-title;\n}\n\n.image-detail img {\n  max-width: 100%;\n  contain: layout;\n  view-transition-name: image-expand;\n}\n```\n\n----------------------------------------\n\nTITLE: useLoaderData Hook Signature in TypeScript\nDESCRIPTION: Defines the TypeScript signature for the useLoaderData hook. It shows that the hook returns a SerializeFrom type, which represents the serialized data from the loader function.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/hooks/useLoaderData.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nuseLoaderData(): SerializeFrom\n```\n\n----------------------------------------\n\nTITLE: Replace Function Signature in React Router\nDESCRIPTION: Function signature for the replace method that creates a redirect response performing history.replaceState. The function returns a Response object and sets a default 302 Found status code along with Location header.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/utils/replace.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nreplace(url, init): Response\n```\n\n----------------------------------------\n\nTITLE: Implementing PrefetchPageLinks in React Router\nDESCRIPTION: Example showing basic usage of PrefetchPageLinks component to prefetch modules and data for another page. The component renders link tags with prefetch and modulepreload relations to enable instant navigation.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/components/PrefetchPageLinks.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PrefetchPageLinks } from \"react-router\";\n\n<PrefetchPageLinks page=\"/absolute/path\" />;\n```\n\n----------------------------------------\n\nTITLE: BrowserRouter with Routes Component\nDESCRIPTION: Illustrates the existing behavior of using `<BrowserRouter>` and `<Routes>` components without the `React.startTransition` feature.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router/CHANGELOG.md#_snippet_28\n\nLANGUAGE: jsx\nCODE:\n```\n<BrowserRouter>\n  <Routes>{/*...*/}</Routes>\n</BrowserRouter>\n```\n\n----------------------------------------\n\nTITLE: Update package.json scripts for Tailwind\nDESCRIPTION: This diff shows how to update the `package.json` scripts to remove explicit Tailwind CSS commands when the new `tailwind` option in `remix.config.js` is enabled. Remix now handles Tailwind CSS automatically.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router-dev/CHANGELOG.md#_snippet_36\n\nLANGUAGE: diff\nCODE:\n```\n{\n  // ...\n  \"scripts\": {\n-    \"build\": \"run-s \\\"build:*\\\"\",\n+    \"build\": \"remix build\",\n-    \"build:css\": \"npm run generate:css -- --minify\",\n-    \"build:remix\": \"remix build\",\n-    \"dev\": \"run-p \\\"dev:*\\\"\",\n+    \"dev\": \"remix dev\",\n-    \"dev:css\": \"npm run generate:css -- --watch\",\n-    \"dev:remix\": \"remix dev\",\n-    \"generate:css\": \"npx tailwindcss -o ./app/tailwind.css\",\n    \"start\": \"remix-serve build\"\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing History Stack Entry with replace Prop\nDESCRIPTION: Demonstrates how to replace the current entry in the history stack instead of adding a new one.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/components/NavLink.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<Link replace />\n```\n\n----------------------------------------\n\nTITLE: Styling Active NavLink with CSS\nDESCRIPTION: Shows how to style active NavLink components using CSS by targeting the automatically added .active class.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/declarative/navigating.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\na.active {\n  color: red;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Source Map Support\nDESCRIPTION: This code snippet shows how to install source map support when using a custom app server. Source map support is now the responsibility of the app server, and this snippet demonstrates how to add it using the `source-map-support` package.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router-serve/CHANGELOG.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport sourceMapSupport from \"source-map-support\";\nsourceMapSupport.install();\n```\n\n----------------------------------------\n\nTITLE: Configuring Prerendering in React Router (TS)\nDESCRIPTION: Demonstrates how to configure prerendering in the React Router vite plugin. The `prerender` option allows you to pre-render HTML and data files at build time, either by providing a static array of paths or a function that dynamically generates paths.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router/CHANGELOG.md#_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\n// react-router.config.ts\nimport type { Config } from \"@react-router/dev/config\";\n\nexport default {\n  async prerender() {\n    let slugs = await fakeGetSlugsFromCms();\n    // Prerender these paths into `.html` files at build time, and `.data`\n    // files if they have loaders\n    return [\"/\", \"/about\", ...slugs.map((slug) => `/product/${slug}`)];\n  },\n} satisfies Config;\n\nasync function fakeGetSlugsFromCms() {\n  await new Promise((r) => setTimeout(r, 1000));\n  return [\"shirt\", \"hat\"];\n}\n```\n\n----------------------------------------\n\nTITLE: Initialize Ion (AWS) Application\nDESCRIPTION: This command initializes a new application based on the ion template. It uses `degit` to clone the template from GitHub. The resulting application can be deployed to AWS using SST.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/framework/deploying.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpx degit @sst/react-template my-app\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Router Configuration in TSX\nDESCRIPTION: Example showing a basic router setup with nested routes and path configurations using WhateverRouter component.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/elements.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<WhateverRouter initialEntries={[\"/events/123\"]}>\n  <Route path=\"/\" element={<Root />} loader={rootLoader}>\n    <Route\n      path=\"events/:id\"\n      element={<Event />}\n      loader={eventLoader}\n    />\n  </Route>\n</WhateverRouter>\n```\n\n----------------------------------------\n\nTITLE: Initializing React Router in Declarative Mode\nDESCRIPTION: Basic setup for Declarative mode using BrowserRouter to enable fundamental routing features like URL matching and navigation.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/modes.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { BrowserRouter } from \"react-router\";\n\nReactDOM.createRoot(root).render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Sidebar Layout Directory in Shell\nDESCRIPTION: Creates a new directory for layouts and touches a new file for the sidebar layout.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/tutorials/address-book.md#2025-04-22_snippet_11\n\nLANGUAGE: shellscript\nCODE:\n```\nmkdir app/layouts\ntouch app/layouts/sidebar.tsx\n```\n\n----------------------------------------\n\nTITLE: Creating Server-Side Middleware in React Router\nDESCRIPTION: Shows how to define and export a server-side middleware function that can perform operations before and after handlers are called. Demonstrates modifying the request context and response headers.\nSOURCE: https://github.com/remix-run/react-router/blob/main/decisions/0014-context-middleware.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst myMiddleware: Route.unstable_MiddlewareFunction = async (\n  { request, context },\n  next\n) => {\n  // Do stuff before the handlers are called\n  context.user = await getUser(request);\n  // Call handlers and generate the Response\n  let res = await next();\n  // Amend the response if needed\n  res.headers.set(\"X-Whatever\", \"stuff\");\n  // Propagate the response up the middleware chain\n  return res;\n};\n\n// Export an array of middlewares per-route which will run left-to-right on\n// the server\nexport const middleware = [myMiddleware];\n\n// You can also export an array of client middlewares that run before/after\n// `clientLoader`/`clientAction`\nconst myClientMiddleware: Route.unstable_ClientMiddlewareFunction = (\n  { context },\n  next\n) => {\n  //...\n};\n\nexport const clientMiddleware = [myClientSideMiddleware];\n```\n\n----------------------------------------\n\nTITLE: Basic React State Implementation for View Toggle\nDESCRIPTION: Example showing a basic React useState implementation for toggling between list and detail views. This approach is considered suboptimal as it doesn't leverage React Router's capabilities.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/explanation/state-management.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport function List() {\n  const [view, setView] = useState(\"list\");\n  return (\n    <div>\n      <div>\n        <button onClick={() => setView(\"list\")}>\n          View as List\n        </button>\n        <button onClick={() => setView(\"details\")}>\n          View with Details\n        </button>\n      </div>\n      {view === \"list\" ? <ListView /> : <DetailView />}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updated Route Configuration Export Pattern\nDESCRIPTION: Example of the new route configuration pattern using default export instead of named exports in the routes.ts file.\nSOURCE: https://github.com/remix-run/react-router/blob/main/decisions/0013-react-router-config-ts.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// app/routes.ts\nexport default {\n  // route configuration\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Imports from remix to @remix-run/* packages\nDESCRIPTION: This code demonstrates how to update imports from the deprecated `remix` package to the corresponding `@remix-run/*` packages. This change is required after upgrading to React Router v2.0.0.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router-node/CHANGELOG.md#_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n- import type { ActionArgs } from \"remix\";\n- import { json, useLoaderData } from \"remix\";\n+ import type { ActionArgs } from \"@remix-run/node\";\n+ import { json } from \"@remix-run/node\";\n+ import { useLoaderData } from \"@remix-run/react\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Links Component in React Router\nDESCRIPTION: Example showing how to use the Links component from React Router to render all link tags created by route module links export. This component should be placed inside the head section of the HTML document.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/components/Links.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Links } from \"react-router\";\n\nexport default function Root() {\n  return (\n    <html>\n      <head>\n        <Links />\n      </head>\n      <body></body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating Current Loader Data Type Inference in TypeScript\nDESCRIPTION: Example demonstrating how loader data types are currently inferred within a route module, requiring manual generic specification.\nSOURCE: https://github.com/remix-run/react-router/blob/main/decisions/0012-type-inference.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport function loader() {\n  // define here 👇\n  return { planet: \"world\" };\n}\n\nexport default function Component() {\n  // access here 👇\n  const data = useLoaderData<typeof loader>();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code Settings for Deno\nDESCRIPTION: VS Code settings configuration that enables Deno support and references the import map file for type resolution. This complements the import map for providing proper editor support while using npm for runtime dependencies.\nSOURCE: https://github.com/remix-run/react-router/blob/main/decisions/0001-use-npm-to-manage-npm-dependencies-for-deno-projects.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"deno.enable\": true,\n  \"deno.importMap\": \"./.vscode/resolve_npm_imports_in_deno.json\"\n}\n```\n\n----------------------------------------\n\nTITLE: BrowserRouter JSX Route Definition with Element Props\nDESCRIPTION: Example of traditional JSX-based route definition using BrowserRouter, showing how elements are defined with props in a render tree structure.\nSOURCE: https://github.com/remix-run/react-router/blob/main/decisions/0002-lazy-route-modules.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<BrowserRouter>\n  <Routes>\n    <Route path=\"/\" element={<Homepage prop=\"value\" />} />\n  </Routes>\n</BrowserRouter>\n```\n\n----------------------------------------\n\nTITLE: Implementing an Error Boundary in React Router\nDESCRIPTION: Demonstrates how to create an ErrorBoundary component to handle and display errors in routes.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/framework/route-module.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  isRouteErrorResponse,\n  useRouteError,\n} from \"react-router\";\n\nexport function ErrorBoundary() {\n  const error = useRouteError();\n\n  if (isRouteErrorResponse(error)) {\n    return (\n      <div>\n        <h1>\n          {error.status} {error.statusText}\n        </h1>\n        <p>{error.data}</p>\n      </div>\n    );\n  } else if (error instanceof Error) {\n    return (\n      <div>\n        <h1>Error</h1>\n        <p>{error.message}</p>\n        <p>The stack trace is:</p>\n        <pre>{error.stack}</pre>\n      </div>\n    );\n  } else {\n    return <h1>Unknown Error</h1>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Router v7\nDESCRIPTION: Command to install the latest version of react-router-dom using npm.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/upgrading/v6.md#2025-04-22_snippet_5\n\nLANGUAGE: shellscript\nCODE:\n```\nnpm install react-router-dom@latest\n```\n\n----------------------------------------\n\nTITLE: Implementing useInRouterContext Hook in React Router\nDESCRIPTION: This code snippet shows the TypeScript signature for the useInRouterContext hook, which returns a boolean indicating whether the component is being rendered within a Router context. This is useful for ensuring components are used within a Router component.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/hooks/useInRouterContext.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nuseInRouterContext(): boolean\n```\n\n----------------------------------------\n\nTITLE: Lazy-loaded Module Exports for a Route\nDESCRIPTION: Example of a lazily loaded route module file exporting the Component and loader functions that will be used to define the route when it's loaded.\nSOURCE: https://github.com/remix-run/react-router/blob/main/decisions/0002-lazy-route-modules.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// about.jsx\nexport function loader() { ... }\n\nexport function Component() { ... }\n```\n\n----------------------------------------\n\nTITLE: useAsyncError Function Signature in React Router\nDESCRIPTION: The type signature for the useAsyncError hook, which returns an unknown value representing the rejection from the closest Await component.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/hooks/useAsyncError.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nuseAsyncError(): unknown\n```\n\n----------------------------------------\n\nTITLE: Updating Root Component with Global Providers (TypeScript/JSX)\nDESCRIPTION: Example of moving global styles and context providers from App.tsx to root.tsx to be shared across all routes.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/upgrading/router-provider.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n+import \"./index.css\";\n\n// ... other imports and Layout\n\nexport default function Root() {\n  return (\n+   <OtherProviders>\n+     <AppLayout>\n        <Outlet />\n+     </AppLayout>\n+   </OtherProviders>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Implementation of useBlocker Hook\nDESCRIPTION: Defines the TypeScript types and implementation example for the useBlocker hook in React Router v6. Shows how to handle form state and display custom confirmation dialogs when attempting to navigate away from unsaved changes.\nSOURCE: https://github.com/remix-run/react-router/blob/main/decisions/0001-use-blocker.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Blocker =\n  | {\n      state: \"unblocked\";\n      reset: undefined;\n      proceed: undefined;\n    }\n  | {\n      state: \"blocked\";\n      reset(): void;\n      proceed(): void;\n    }\n  | {\n      state: \"proceeding\";\n      reset: undefined;\n      proceed: undefined;\n    };\n\ndeclare function useBlocker(shouldBlock: boolean | () => boolean): Blocker;\n\nfunction MyFormComponent() {\n  let [formIsDirty, setFormIsDirty] = React.useState(false);\n  let blocker = useBlocker(formIsDirty);\n\n  return (\n    <Form method=\"post\" onChange={(e) => setFormIsDirty(true)}>\n      <label>\n        First name:\n        <input name=\"firstname\" required />\n      </label>\n      <label>\n        Last name:\n        <input name=\"lastname\" required />\n      </label>\n      <button type=\"submit\">Submit</button>\n\n      {blocker.state === \"blocked\" ? (\n        <div>\n          <p>You have unsaved changes!<p>\n          <button onClick={() => blocker.reset()}>\n            Oh shoot - I need them keep me here!\n          </button>\n          <button onClick={() => blocker.proceed()}>\n            I know! They don't matter - let me out of here!\n          </button>\n        </div>\n      ) : blocker.state === \"proceeding\" ? (\n        <p>Navigating away with unsaved changes...</p>\n      ) : null}\n    </Form>\n  );\n```\n\n----------------------------------------\n\nTITLE: Enabling Middleware Types in React Router Config (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to enable middleware types and the unstable_middleware feature flag in the react-router-config.ts file. This configuration is necessary to utilize the new middleware functionality in React Router. It imports the required types and declares a module to extend the Future interface.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router/CHANGELOG.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Config } from \"@react-router/dev/config\";\nimport type { Future } from \"react-router\";\n\ndeclare module \"react-router\" {\n  interface Future {\n    unstable_middleware: true; // 👈 Enable middleware types\n  }\n}\n\nexport default {\n  future: {\n    unstable_middleware: true, // 👈 Enable middleware\n  },\n} satisfies Config;\n```\n\n----------------------------------------\n\nTITLE: Root Component Implementation\nDESCRIPTION: Root component setup with layout and meta components for React Router\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/upgrading/component-routes.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Links,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n} from \"react-router\";\n\nexport function Layout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charSet=\"UTF-8\" />\n        <meta\n          name=\"viewport\"\n          content=\"width=device-width, initial-scale=1.0\"\n        />\n        <title>My App</title>\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        {children}\n        <ScrollRestoration />\n        <Scripts />\n      </body>\n    </html>\n  );\n}\n\nexport default function Root() {\n  return <Outlet />;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Import Map for VS Code Deno Extension\nDESCRIPTION: A sample import map configuration for the VS Code Deno extension to enable type hints for NPM-managed dependencies. This is only for editor support and not for runtime dependency resolution, as Remix does not support import maps.\nSOURCE: https://github.com/remix-run/react-router/blob/main/decisions/0001-use-npm-to-manage-npm-dependencies-for-deno-projects.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"// This import map is used solely for the denoland.vscode-deno extension.\": \"\",\n  \"// Remix does not support import maps.\": \"\",\n  \"// Dependency management is done through `npm` and `node_modules/` instead.\": \"\",\n  \"// Deno-only dependencies may be imported via URL imports (without using import maps).\": \"\",\n\n  \"imports\": {\n    \"react\": \"https://esm.sh/react@18.0.0\",\n    \"react-dom\": \"https://esm.sh/react-dom@18.0.0\",\n    \"react-dom/server\": \"https://esm.sh/react-dom@18.0.0/server\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining matchPath Function Signature in React Router\nDESCRIPTION: Shows the TypeScript function signature for the matchPath utility, which takes a pattern and pathname parameter and returns undefined. This function is used for URL pattern matching in React Router.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/utils/matchPath.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nmatchPath(pattern, pathname): undefined\n```\n\n----------------------------------------\n\nTITLE: Opening Custom Filter Link Example in StackBlitz\nDESCRIPTION: This snippet provides a link to open the custom filter link example in StackBlitz, allowing users to interact with the code directly in their browser.\nSOURCE: https://github.com/remix-run/react-router/blob/main/examples/custom-filter-link/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![Open in StackBlitz](https://developer.stackblitz.com/img/open_in_stackblitz.svg)](https://stackblitz.com/github/remix-run/react-router/tree/main/examples/custom-filter-link?file=src/App.tsx)\n```\n\n----------------------------------------\n\nTITLE: RouterProvider with Router Object\nDESCRIPTION: Illustrates the existing behavior of using `<RouterProvider>` with a router object without the `React.startTransition` feature.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router/CHANGELOG.md#_snippet_29\n\nLANGUAGE: jsx\nCODE:\n```\n<RouterProvider router={router} />\n```\n\n----------------------------------------\n\nTITLE: Defining Headers with HeadersArgs in Remix\nDESCRIPTION: This code snippet demonstrates how to define custom headers in Remix using the `HeadersArgs` type. It imports the type from `@remix-run/node` and uses it to define a `headers` function that takes `loaderHeaders` as an argument. The function returns an object containing the custom header, allowing access to loader headers.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router-serve/CHANGELOG.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { HeadersArgs } from \"@remix-run/node\"; // or cloudflare/deno\n\nexport function headers({ loaderHeaders }: HeadersArgs) {\n  return {\n    \"x-my-custom-thing\": loaderHeaders.get(\"x-my-custom-thing\") || \"fallback\",\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Updated Dashboard Component with Relative Links\nDESCRIPTION: Presents an updated Dashboard component with relative links using '../' to correctly navigate to sibling pages.  This ensures correct path resolution when the splat route fix is applied.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router/CHANGELOG.md#_snippet_27\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Dashboard() {\n  return (\n    <div>\n      <h2>Dashboard</h2>\n      <nav>\n        <Link to=\"..\">Dashboard Home</Link>\n        <Link to=\"../team\">Team</Link>\n        <Link to=\"../projects\">Projects</Link>\n      </nav>\n\n      <Routes>\n        <Route path=\"/\" element={<DashboardHome />} />\n        <Route path=\"team\" element={<DashboardTeam />} />\n        <Route path=\"projects\" element={<DashboardProjects />} />\n      </Routes>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Data Router Features List in Markdown\nDESCRIPTION: A markdown list outlining the key features of Data Router demonstrated in the example.\nSOURCE: https://github.com/remix-run/react-router/blob/main/examples/data-router/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Loader functions\n- Action functions\n- <Link> and <Form> navigations\n- <fetcher.Form> submissions\n```\n\n----------------------------------------\n\nTITLE: Installing React Router Express Package via NPM\nDESCRIPTION: Command to install the @react-router/express package using npm package manager. This package enables Express.js server-side handling for React Router.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router-express/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @react-router/express\n```\n\n----------------------------------------\n\nTITLE: Configure Remix dev server TLS options in config\nDESCRIPTION: This code snippet shows how to configure the Remix development server to use TLS by specifying the paths to the TLS key and certificate files in the `remix.config.js` file. The `tlsKey` and `tlsCert` options are used within the `future.unstable_dev` configuration.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router-dev/CHANGELOG.md#_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  future: {\n    unstable_dev: {\n      tlsKey: \"key.pem\",\n      tlsCert: \"cert.pem\",\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing React Router Server Package\nDESCRIPTION: Command to install the @react-router/serve package using npm package manager. This package provides server-side functionality for React Router applications.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router-serve/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @react-router/serve\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Limitations of defineLoader Type Checking\nDESCRIPTION: This snippet illustrates a limitation of the defineLoader approach, where TypeScript doesn't pinpoint incorrect return statements accurately. It shows how the error is assigned to the entire function rather than the specific problematic line.\nSOURCE: https://github.com/remix-run/react-router/blob/main/decisions/0012-type-inference.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst defineLoader = <T extends Loader>(loader: T): T => loader;\n\nexport const loader = defineLoader(() => {\n  //                               ^^^^^^^\n  // Argument of type '() => \"string\" | 1' is not assignable to parameter of type 'Loader'.\n  //   Type 'string | number' is not assignable to type 'number'.\n  //     Type 'string' is not assignable to type 'number'.(2345)\n\n  if (Math.random() > 0.5) return \"string\"; // 👈 don't you wish the error was here instead?\n  return 1;\n});\n```\n\n----------------------------------------\n\nTITLE: Defining renderMatches Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the renderMatches function. It takes a 'matches' parameter and returns undefined.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/utils/renderMatches.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nrenderMatches(matches): undefined\n```\n\n----------------------------------------\n\nTITLE: Setting Link Discovery Behavior in React Router\nDESCRIPTION: Shows how to set the link discovery behavior using the 'discover' prop in React Router's Link component.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/components/Link.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Link discover=\"render\" />\n```\n\n----------------------------------------\n\nTITLE: Updating Vite Configuration\nDESCRIPTION: Diff showing how to replace React plugin with React Router in Vite config\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/upgrading/component-routes.md#2025-04-22_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n-import react from '@vitejs/plugin-react'\n+import { reactRouter } from \"@react-router/dev/vite\";\nimport { defineConfig } from \"vite\";\n\n\nexport default defineConfig({\n  plugins: [\n-    react()\n+    reactRouter()\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Loading for Pre-rendered Routes\nDESCRIPTION: Demonstrates how to implement data loading in pre-rendered routes using the loader function, which works the same way as in server rendering.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/pre-rendering.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport async function loader({ request, params }) {\n  let post = await getPost(params.slug);\n  return post;\n}\n\nexport function Post({ loaderData }) {\n  return <div>{loaderData.title}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: useRevalidator Method Signature in React Router\nDESCRIPTION: The type signature for the useRevalidator hook in React Router, which returns undefined when called.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/hooks/useRevalidator.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nuseRevalidator(): undefined\n```\n\n----------------------------------------\n\nTITLE: Implementing About Page Route\nDESCRIPTION: Creates an about page component with static content and navigation links using React Router.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/tutorials/address-book.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Link } from \"react-router\";\n\nexport default function About() {\n  return (\n    <div id=\"about\">\n      <Link to=\"/\">← Go to demo</Link>\n      <h1>About React Router Contacts</h1>\n\n      <div>\n        <p>\n          This is a demo application showing off some of the\n          powerful features of React Router, including\n          dynamic routing, nested routes, loaders, actions,\n          and more.\n        </p>\n\n        <h2>Features</h2>\n        <p>\n          Explore the demo to see how React Router handles:\n        </p>\n        <ul>\n          <li>\n            Data loading and mutations with loaders and\n            actions\n          </li>\n          <li>\n            Nested routing with parent/child relationships\n          </li>\n          <li>URL-based routing with dynamic segments</li>\n          <li>Pending and optimistic UI</li>\n        </ul>\n\n        <h2>Learn More</h2>\n        <p>\n          Check out the official documentation at{\" \"}\n          <a href=\"https://reactrouter.com\">\n            reactrouter.com\n          </a>{\" \"}\n          to learn more about building great web\n          applications with React Router.\n        </p>\n      </div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Router via npm\nDESCRIPTION: Command to install React Router using npm package manager. This is the first step in setting up React Router in a project.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/index.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install react-router-dom\n```\n\n----------------------------------------\n\nTITLE: Route Module with Shared Code (TSX)\nDESCRIPTION: This example shows a route module where the `clientLoader` and the component share code (the `shared` function).  This prevents the module from being split, leading to a performance de-optimization.\nSOURCE: https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MassiveComponent } from \"~/components\";\n\nconst shared = () => console.log(\"hello\");\n\nexport async function clientLoader() {\n  shared();\n  return await fetch(\"https://example.com/api\").then((response) =>\n    response.json()\n  );\n}\n\nexport default function Component({ loaderData }) {\n  shared();\n  return <MassiveComponent data={loaderData} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Context in Middleware and Loaders (TypeScript)\nDESCRIPTION: This TypeScript snippet shows how to create and use a context in React Router middleware and loaders using `unstable_createContext`. It illustrates setting and retrieving values from the context within middleware and loaders. It highlights type-safe context usage for sharing data across requests.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router/CHANGELOG.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { unstable_createContext } from \"react-router\";\nimport { Route } from \"./+types/root\";\nimport type { Session } from \"./sessions.server\";\nimport { getSession } from \"./sessions.server\";\n\nlet sessionContext = unstable_createContext<Session>();\n\nconst sessionMiddleware: Route.unstable_MiddlewareFunction = ({\n  context,\n  request,\n}) => {\n  let session = await getSession(request);\n  context.set(sessionContext, session);\n  //                          ^ must be of type Session\n};\n\n// ... then in some downstream middleware\nconst loggerMiddleware: Route.unstable_MiddlewareFunction = ({\n  context,\n  request,\n}) => {\n  let session = context.get(sessionContext);\n  //  ^ typeof Session\n  console.log(session.get(\"userId\"), request.method, request.url);\n};\n\n// ... or some downstream loader\nexport function loader({ context }: Route.LoaderArgs) {\n  let session = context.get(sessionContext);\n  let profile = await getProfile(session.get(\"userId\"));\n  return { profile };\n}\n```\n\n----------------------------------------\n\nTITLE: Using Navigate Component in React Router (TSX)\nDESCRIPTION: Demonstrates the basic usage of the Navigate component in React Router. It navigates to the '/tasks' route when rendered.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/components/Navigate.md#2025-04-22_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\n<Navigate to=\"/tasks\" />\n```\n\n----------------------------------------\n\nTITLE: Migrating Remix Vite Plugin Imports\nDESCRIPTION: This code demonstrates how to update import statements for the Remix Vite plugin when migrating to React Router v7. The `vitePlugin` and `cloudflareDevProxyVitePlugin` exports from `@remix/dev` are replaced with `reactRouter` and `cloudflareDevProxy` from `@react-router/dev/vite`.\nSOURCE: https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#_snippet_25\n\nLANGUAGE: diff\nCODE:\n```\n-import {\n-  vitePlugin as remix,\n-  cloudflareDevProxyVitePlugin,\n-} from \"@remix/dev\";\n\n+import { reactRouter } from \"@react-router/dev/vite\";\n+import { cloudflareDevProxy } from \"@react-router/dev/vite/cloudflare\";\n```\n\n----------------------------------------\n\nTITLE: Using Render Props with Await Component - JSX\nDESCRIPTION: Demonstrates how to use the render props pattern with the Await component, bypassing the need for useAsyncValue().\nSOURCE: https://github.com/remix-run/react-router/blob/main/decisions/0004-streaming-apis.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Await resolve={data.lazy}>{(value) => <p>Resolved: {value}</p>}</Await>\n```\n\n----------------------------------------\n\nTITLE: Implementing Root Component in React Router\nDESCRIPTION: Required root component implementation that serves as the parent to all routes and manages the document-level components including meta tags, links, and scripts.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/explanation/special-files.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { LinksFunction } from \"react-router\";\nimport {\n  Links,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n} from \"react-router\";\n\nimport \"./global-styles.css\";\n\nexport default function App() {\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta\n          name=\"viewport\"\n          content=\"width=device-width, initial-scale=1\"\n        />\n\n        {/* All `meta` exports on all routes will render here */}\n        <Meta />\n\n        {/* All `link` exports on all routes will render here */}\n        <Links />\n      </head>\n      <body>\n        {/* Child routes render here */}\n        <Outlet />\n\n        {/* Manages scroll position for client-side transitions */}\n        {/* If you use a nonce-based content security policy for scripts, you must provide the `nonce` prop. Otherwise, omit the nonce prop as shown here. */}\n        <ScrollRestoration />\n\n        {/* Script tags go here */}\n        {/* If you use a nonce-based content security policy for scripts, you must provide the `nonce` prop. Otherwise, omit the nonce prop as shown here. */}\n        <Scripts />\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Memory Router Function Signature in React Router\nDESCRIPTION: Defines the signature of the createMemoryRouter function that returns a DataRouter instance. This function creates an in-memory router that doesn't use the browser URL, making it useful for testing and non-browser environments.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/data-routers/createMemoryRouter.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ncreateMemoryRouter(routes, opts): DataRouter\n```\n\n----------------------------------------\n\nTITLE: Updating React Router imports for non-DOM contexts\nDESCRIPTION: Diff showing how to update imports for non-DOM contexts, such as Jest tests, using top-level imports from react-router.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/upgrading/v6.md#2025-04-22_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n-import { RouterProvider } from \"react-router-dom\";\n+import { RouterProvider } from \"react-router\";\n```\n\n----------------------------------------\n\nTITLE: Starting a new pre-release with Changesets\nDESCRIPTION: Commands for entering pre-release mode with Changesets, committing the changes, and pushing the branch to GitHub to trigger the CI workflow.\nSOURCE: https://github.com/remix-run/react-router/blob/main/DEVELOPMENT.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout release-next\npnpm changeset pre enter pre\ngit commit -a -m \"Enter prerelease mode\"\ngit push --set-upstream origin release-next\n```\n\n----------------------------------------\n\nTITLE: Adding React Router Types Directory to GitIgnore\nDESCRIPTION: Configuration to exclude the React Router generated types directory from Git version control.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/route-module-type-safety.md#2025-04-22_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n.react-router/\n```\n\n----------------------------------------\n\nTITLE: Rendering Streamed Data with Await Component - TypeScript/JSX\nDESCRIPTION: Demonstrates the full set of render-time APIs for handling streamed data, including the Await component, Suspense, and hooks for accessing resolved values and errors.\nSOURCE: https://github.com/remix-run/react-router/blob/main/decisions/0004-streaming-apis.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Component() {\n  const data = useLoaderData(); // data.lazy is a Promise\n\n  return (\n    <React.Suspense fallback={<p>Loading...</p>}>\n      <Await resolve={data.lazy} errorElement={<MyError />}>\n        <MyData />\n      </Await>\n    </React.Suspense>\n  );\n}\n\nfunction MyData() {\n  const value = useAsyncValue(); // Get the resolved value\n  return <p>Resolved: {value}</p>;\n}\n\nfunction MyError() {\n  const error = useAsyncError(); // Get the rejected value\n  return <p>Error: {error.message}</p>;\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Navigation Blocking Example in StackBlitz\nDESCRIPTION: This code snippet provides a clickable badge that opens the navigation blocking example in StackBlitz. It allows users to easily view and interact with the live example.\nSOURCE: https://github.com/remix-run/react-router/blob/main/examples/navigation-blocking/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n[![Open in StackBlitz](https://developer.stackblitz.com/img/open_in_stackblitz.svg)](https://stackblitz.com/github/remix-run/react-router/tree/main/examples/navigation-blocking?file=src/App.tsx)\n```\n\n----------------------------------------\n\nTITLE: Creating Route Module Conversion Function (TypeScript)\nDESCRIPTION: Helper function to convert route module definitions into the format expected by the data router. It extracts clientLoader, clientAction, and default export, renaming them to match the expected format.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/upgrading/router-provider.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction convert(m: any) {\n  let {\n    clientLoader,\n    clientAction,\n    default: Component,\n    ...rest\n  } = m;\n  return {\n    ...rest,\n    loader: clientLoader,\n    action: clientAction,\n    Component,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @react-router/remix-routes-option-adapter via npm\nDESCRIPTION: This command installs the @react-router/remix-routes-option-adapter package using npm. This adapter is used for integrating Remix's 'routes' config option with React Router.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router-remix-routes-option-adapter/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @react-router/remix-routes-option-adapter\n```\n\n----------------------------------------\n\nTITLE: Custom Scroll Restoration Key Function in TypeScript\nDESCRIPTION: Implementation of getKey function for ScrollRestoration component that determines how scroll positions are restored based on location and route matches.\nSOURCE: https://github.com/remix-run/react-router/blob/main/decisions/0005-remixing-react-router.md#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nfunction getKey(location: Location, matches: DataRouteMatch[]) {\n  // Restore by pathname on /tweets\n  if (location.pathname === \"/tweets\") {\n    return location.pathname;\n  }\n  // Otherwise use the key\n  return location.key;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vanilla Extract Caching in Remix\nDESCRIPTION: This snippet demonstrates how to enable experimental Vanilla Extract caching in a Remix project using the `remix.config.js` file.  It requires at least version `v1.10.0` of `@vanilla-extract/css` and uses a new Vanilla Extract compiler.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router-dev/CHANGELOG.md#_snippet_42\n\nLANGUAGE: JavaScript\nCODE:\n```\nfuture.unstable_vanillaExtract: { cache: true }\n```\n\n----------------------------------------\n\nTITLE: Implementing shouldRevalidate Function in React Router\nDESCRIPTION: Demonstrates how to use the shouldRevalidate function to control route revalidation after actions.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/data/route-object.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { ShouldRevalidateFunctionArgs } from \"react-router\";\n\nfunction shouldRevalidate(\n  arg: ShouldRevalidateFunctionArgs\n) {\n  return true; // false\n}\n\ncreateBrowserRouter([\n  {\n    path: \"/\",\n    shouldRevalidate: shouldRevalidate,\n    Component: MyRoute,\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Supported Exports for React Fast Refresh in React Router\nDESCRIPTION: This snippet shows which exports are supported by React Fast Refresh in React Router when using Vite. It illustrates that route-specific exports are handled by the React Router Vite plugin, while custom exports can cause full reloads.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/explanation/hot-module-replacement.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// These exports are handled by the React Router Vite plugin\n// to be HMR-compatible\nexport const meta = { title: \"Home\" }; // ✅\nexport const links = [\n  { rel: \"stylesheet\", href: \"style.css\" },\n]; // ✅\n\n// These exports are removed by the React Router Vite plugin\n// so they never affect HMR\nexport const headers = { \"Cache-Control\": \"max-age=3600\" }; // ✅\nexport const loader = async () => {}; // ✅\nexport const action = async () => {}; // ✅\n\n// This is not a route module export, nor a component export,\n// so it will cause a full reload for this route\nexport const myValue = \"some value\"; // ❌\n\nexport default function Route() {} // ✅\n```\n\n----------------------------------------\n\nTITLE: Setting up for a v6 release\nDESCRIPTION: Commands for preparing the repository for a 6.x release, including checking out the v6 branch and creating a release-v6 branch.\nSOURCE: https://github.com/remix-run/react-router/blob/main/DEVELOPMENT.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout v6 && git pull origin v6\ngit checkout -b release-v6\npnpm changeset pre enter pre-v6\n```\n\n----------------------------------------\n\nTITLE: Proposed Route-Specific Type Inference in TypeScript\nDESCRIPTION: Conceptual example of how route-specific types could be provided as arguments to route exports for improved type inference.\nSOURCE: https://github.com/remix-run/react-router/blob/main/decisions/0012-type-inference.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport function loader({ params }: LoaderArgs) {}\n\nexport function clientLoader({ params, serverLoader }: ClientLoaderArgs) {}\n\nexport default function Component({\n  params,\n  loaderData,\n  actionData,\n}: DefaultProps) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from AppLoadContext to Type-Safe Context in React Router\nDESCRIPTION: Shows how to migrate an existing application that uses AppLoadContext to the new type-safe context API while maintaining the same object structure. The diff demonstrates the necessary changes to maintain compatibility.\nSOURCE: https://github.com/remix-run/react-router/blob/main/decisions/0014-context-middleware.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n+ let appContext = unstable_createContext<AppLoadContext>()\n\nfunction getLoadContext(req, res) {\n  let appLoadContext = { /* your existing object */ };\n\n-  return appLoadContext\n+  return new Map([[appContext, appLoadContext]]);\n}\n\nfunction loader({ context }) {\n-  context.foo.something();\n+  // Hopefully this can be done via find/replace or a codemod\n+  context.get(appContext).foo.something()\n   // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading Route Configuration with HydrateFallback - TypeScript\nDESCRIPTION: This code snippet demonstrates how to configure a route with lazy loading using the object-based API. It showcases the lazy loading of the loader, component, and HydrateFallback properties.  This optimization avoids downloading unused hydration code during initial load after hydration. It depends on separate files for each lazy-loaded property (show.loader.js, show.component.js, show.hydrate-fallback.js).\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router/CHANGELOG.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncreateBrowserRouter([\n    {\n      path: \"/show/:showId\",\n      lazy: {\n        loader: async () => (await import(\"./show.loader.js\")).loader,\n        Component: async () => (await import(\"./show.component.js\")).Component,\n        HydrateFallback: async () =>\n          (await import(\"./show.hydrate-fallback.js\")).HydrateFallback,\n      },\n    },\n  ]);\n```\n\n----------------------------------------\n\nTITLE: Creating Route Files with Shell Commands\nDESCRIPTION: Shell commands to create the necessary route configuration files.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/upgrading/router-provider.md#2025-04-22_snippet_10\n\nLANGUAGE: shellscript\nCODE:\n```\ntouch src/routes.ts src/catchall.tsx\n```\n\n----------------------------------------\n\nTITLE: Updating Vite Configuration for React Router\nDESCRIPTION: This snippet shows the changes needed in the vite.config.ts file when upgrading from Remix to React Router v7. It replaces the Remix plugin with the React Router plugin.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/upgrading/remix.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n-import { vitePlugin as remix } from \"@remix-run/dev\";\n+import { reactRouter } from \"@react-router/dev/vite\";\nimport { defineConfig } from \"vite\";\nimport tsconfigPaths from \"vite-tsconfig-paths\";\n\nexport default defineConfig({\n  plugins: [\n-   remix(),\n+   reactRouter(),\n    tsconfigPaths(),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Route Configuration with 'use' Property Specification\nDESCRIPTION: An example of route configuration with a 'use' property to specify which exports should be used from the lazy-loaded module. This approach had tight coupling between file contents and route definitions.\nSOURCE: https://github.com/remix-run/react-router/blob/main/decisions/0002-lazy-route-modules.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst route = {\n  path: \"/\",\n  module: () => import(\"./route\"),\n  use: [\"loader\", \"element\"],\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Form Data Parser Package\nDESCRIPTION: Command to install the form-data-parser package for handling file upload streams.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/file-uploads.md#2025-04-22_snippet_1\n\nLANGUAGE: shellscript\nCODE:\n```\nnpm i @mjackson/form-data-parser\n```\n\n----------------------------------------\n\nTITLE: Implementing useLinkClickHandler Hook Signature in React Router\nDESCRIPTION: TypeScript signature for the useLinkClickHandler hook that handles click behavior for router Link components. The hook takes a 'to' parameter for the destination and additional named parameters for configuration.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/hooks/useLinkClickHandler.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nuseLinkClickHandler(to, __namedParameters): undefined\n```\n\n----------------------------------------\n\nTITLE: Automatically updating React Router imports (macOS/BSD)\nDESCRIPTION: Shell command to automatically update imports in source files for macOS or BSD systems using sed.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/upgrading/v6.md#2025-04-22_snippet_8\n\nLANGUAGE: shellscript\nCODE:\n```\nfind ./path/to/src \\( -name \"*.tsx\" -o -name \"*.ts\" -o -name \"*.js\" -o -name \"*.jsx\" \\) -type f -exec sed -i '' 's|from \"react-router-dom\"|from \"react-router\"|g' {} +\n```\n\n----------------------------------------\n\nTITLE: Original POC Implementation for Lazy Route Loading in React Router\nDESCRIPTION: The original proof-of-concept implementation that transforms route module functions into React.lazy() calls and handles lazy loading of loaders and actions. This approach suffered from limitations in user-land implementation.\nSOURCE: https://github.com/remix-run/react-router/blob/main/decisions/0002-lazy-route-modules.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Assuming route.module is a function returning a Remix-style route module\nlet Component = React.lazy(route.module);\nroute.element = <Component />;\nroute.loader = async (args) => {\n  const { loader } = await route.module();\n  return typeof loader === \"function\" ? loader(args) : null;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Links in React Router\nDESCRIPTION: Illustrates how to specify link elements to be rendered in the document head using the links function in a route module.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/framework/route-module.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nexport function links() {\n  return [\n    {\n      rel: \"icon\",\n      href: \"/favicon.png\",\n      type: \"image/png\",\n    },\n    {\n      rel: \"stylesheet\",\n      href: \"https://example.com/some/styles.css\",\n    },\n    {\n      rel: \"preload\",\n      href: \"/images/banner.jpg\",\n      as: \"image\",\n    },\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Component Routes in React Router\nDESCRIPTION: Shows how to define routes using React components directly in the component tree. This approach is useful for more dynamic routing scenarios but lacks some features of route modules.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/framework/routing.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Routes, Route } from \"react-router\";\n\nfunction Wizard() {\n  return (\n    <div>\n      <h1>Some Wizard with Steps</h1>\n      <Routes>\n        <Route index element={<StepOne />} />\n        <Route path=\"step-2\" element={<StepTwo />} />\n        <Route path=\"step-3\" element={<StepThree />} />\n      </Routes>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Sidebar Toggle with React State\nDESCRIPTION: Simple implementation of a sidebar toggle using React useState, demonstrating temporary state storage that doesn't persist across page refreshes.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/explanation/state-management.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Sidebar() {\n  const [isOpen, setIsOpen] = useState(false);\n  return (\n    <div>\n      <button onClick={() => setIsOpen((open) => !open)}>\n        {isOpen ? \"Close\" : \"Open\"}\n      </button>\n      <aside hidden={!isOpen}>\n        <Outlet />\n      </aside>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Remix Route Path Collision Warning\nDESCRIPTION: This code shows the warning message displayed when Remix detects multiple routes defining the same URL. It informs the user that only the first route found will be used.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router-dev/CHANGELOG.md#_snippet_43\n\nLANGUAGE: Log\nCODE:\n```\n⚠️ Route Path Collision: \"/dashboard\"\n\nThe following routes all define the same URL, only the first one will be used\n\n🟢️️ routes/dashboard/route.tsx\n⭕️️ routes/dashboard.tsx\n```\n\nLANGUAGE: Log\nCODE:\n```\n⚠️ Route Path Collision: \"/\"\n\nThe following routes all define the same URL, only the first one will be used\n\n🟢️️ routes/_landing._index.tsx\n⭕️️ routes/_dashboard._index.tsx\n⭕️ routes/_index.tsx\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter for API Documentation Page\nDESCRIPTION: This is a YAML frontmatter block that defines metadata for a documentation page. It sets the title to 'API' and specifies an order value of 3, indicating its position in a documentation navigation structure.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: API\norder: 3\n---\n```\n\n----------------------------------------\n\nTITLE: Script Import Example\nDESCRIPTION: HTML example showing how to import React library from unpkg CDN with cross-origin attribute.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/elements.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- Other HTML for your app goes here -->\n<!-- prettier-ignore -->\n<script src=\"https://unpkg.com/react@>=16.8/umd/react.development.js\" crossorigin></script>\n```\n\n----------------------------------------\n\nTITLE: useFetchers Hook Signature in React Router\nDESCRIPTION: Defines the function signature for the useFetchers hook. It takes no parameters and returns an undefined type.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/hooks/useFetchers.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nuseFetchers(): undefined\n```\n\n----------------------------------------\n\nTITLE: React Router Implementation using createRoutesFromElements\nDESCRIPTION: Alternative implementation using createRoutesFromElements for developers who prefer JSX notation for route definition.\nSOURCE: https://github.com/remix-run/react-router/blob/main/decisions/0005-remixing-react-router.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nconst routes = createRoutesFromElements(\n  <Route path=\"/\" element={<Layout />}>\n    <Route index element={<Home />} />\n  </Route>\n);\nconst router = createBrowserRouter(routes);\n\nfunction App() {\n  return <RouterProvider router={router} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Awkward Exports for Lazy Loaded Route with Element\nDESCRIPTION: Example showing how exporting elements for lazy-loaded routes can be awkward as it requires exporting JSX elements directly rather than component functions.\nSOURCE: https://github.com/remix-run/react-router/blob/main/decisions/0002-lazy-route-modules.md#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n// home.jsx\nexport const element = <Homepage />\n\nfunction Homepage() { ... }\n```\n\n----------------------------------------\n\nTITLE: Function Signature of useLocation Hook in React Router\nDESCRIPTION: This code block shows the TypeScript function signature for the useLocation hook in React Router. It returns a Location object.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/hooks/useLocation.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nuseLocation(): Location\n```\n\n----------------------------------------\n\nTITLE: useHref Hook Function Signature\nDESCRIPTION: Defines the TypeScript function signature for the useHref hook, showing it accepts a 'to' parameter and named parameters, returning a string.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/hooks/useHref.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nuseHref(to, __namedParameters): string\n```\n\n----------------------------------------\n\nTITLE: RouterProvider with Future Flag\nDESCRIPTION: Demonstrates how to enable the `React.startTransition` feature using the `future` prop on `<RouterProvider>`. This flag enables React concurrent mode compatibility.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router/CHANGELOG.md#_snippet_31\n\nLANGUAGE: jsx\nCODE:\n```\n<RouterProvider router={router} future={{ v7_startTransition: true }}/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Node Builtins Polyfill in JavaScript\nDESCRIPTION: Shows how to configure the `serverNodeBuiltinsPolyfill` option in `remix.config.js`. This allows disabling or enabling polyfills for Node.js built-in modules for non-Node.js server platforms. It supports disabling all polyfills or enabling specific ones with options for JSPM or empty polyfills.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router-dev/CHANGELOG.md#_snippet_24\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Disable all polyfills\nexports.serverNodeBuiltinsPolyfill = { modules: {} };\n\n// Enable specific polyfills\nexports.serverNodeBuiltinsPolyfill = {\n  modules: {\n    crypto: true, // Provide a JSPM polyfill\n    fs: \"empty\", // Provide an empty polyfill\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: SSR and Prerendering Configuration\nDESCRIPTION: Configuration for enabling server-side rendering and static pre-rendering\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/upgrading/component-routes.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Config } from \"@react-router/dev/config\";\n\nexport default {\n  ssr: true,\n  async prerender() {\n    return [\"/\", \"/about\", \"/contact\"];\n  },\n} satisfies Config;\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter for How-To Documentation\nDESCRIPTION: YAML frontmatter defining the title and order of a documentation page for React Router how-to guides.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: How-Tos\norder: 4\n---\n```\n\n----------------------------------------\n\nTITLE: Example Client-Side Component with Server Import Issue\nDESCRIPTION: Demonstrates a problematic pattern where server-side code is incorrectly imported into a client component, leading to runtime errors despite passing type checks\nSOURCE: https://github.com/remix-run/react-router/blob/main/decisions/0010-splitting-up-client-and-server-code-in-vite.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getFortune } from \"~/db.server.ts\";\n\nexport default function Route() {\n  const [fortune, setFortune] = useState(null);\n  return (\n    <>\n      {user ? (\n        <h1>Your fortune of the day: {fortune}</h1>\n      ) : (\n        <button onClick={() => setFortune(getFortune())}>\n          Open fortune cookie 🥠\n        </button>\n      )}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: AB Testing defer() Responses in Loader - TypeScript\nDESCRIPTION: Shows how to conditionally use defer() in a loader for AB testing, and how to handle the response in the component without changing the UI code.\nSOURCE: https://github.com/remix-run/react-router/blob/main/decisions/0004-streaming-apis.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function loader({ request }: LoaderArgs) {\n  const shouldAwait = isUserInTestGroup(request);\n  return {\n    maybeLazy: shouldAwait ? await fetchData() : fetchData(),\n  };\n}\n\nfunction Component() {\n  const data = useLoaderData();\n\n  // No code forks even if data.maybeLazy is not a Promise!\n  return (\n    <React.Suspense fallback={<p>Loading...</p>}>\n      <Await resolve={data.maybeLazy} errorElement={<MyError />}>\n        <MyData />\n      </Await>\n    </React.Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Scripts Component in React Router\nDESCRIPTION: Demonstrates how to use the Scripts component in a React Router application's root component. The Scripts component should be rendered inside the body tag to handle client runtime functionality.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/components/Scripts.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Scripts } from \"react-router\";\n\nexport default function Root() {\n  return (\n    <html>\n      <head />\n      <body>\n        <Scripts />\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: useRouteError Function Signature in React Router\nDESCRIPTION: The type signature for the useRouteError hook, showing that it returns an unknown type since the error could be of any type depending on what was thrown.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/hooks/useRouteError.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nuseRouteError(): unknown\n```\n\n----------------------------------------\n\nTITLE: Remove and Move Tailwind CSS File\nDESCRIPTION: These shell commands demonstrate how to remove the old `app/tailwind.css` file and move the Tailwind CSS source file from `styles/tailwind.css` to `app/tailwind.css` after enabling the new `tailwind` option in `remix.config.js`.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router-dev/CHANGELOG.md#_snippet_34\n\nLANGUAGE: sh\nCODE:\n```\nrm app/tailwind.css\nmv styles/tailwind.css app/tailwind.css\n```\n\n----------------------------------------\n\nTITLE: Opening StackBlitz Example for View Transitions in React Router\nDESCRIPTION: A markdown snippet that provides a clickable button to open the example project in StackBlitz. This allows users to easily view and interact with the live demo of view transitions in React Router.\nSOURCE: https://github.com/remix-run/react-router/blob/main/examples/view-transitions/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![Open in StackBlitz](https://developer.stackblitz.com/img/open_in_stackblitz.svg)](https://stackblitz.com/github/remix-run/react-router/tree/main/examples/view-transitions?file=src/App.tsx)\n```\n\n----------------------------------------\n\nTITLE: Submitting Text data using useSubmit hook - JavaScript\nDESCRIPTION: This code snippet illustrates how to submit text data using the `useSubmit` hook in React Router with `text/plain` encoding. It shows the usage of the `encType` option and how the text data can be accessed within the server-side action.\nSOURCE: https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#_snippet_43\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction Component() {\n  let navigation = useNavigation();\n  let submit = useSubmit();\n  submit(\"Text submission\", { method: \"post\", encType: \"text/plain\" });\n  // navigation.formEncType => \"text/plain\"\n  // navigation.text        => \"Text submission\"\n}\n\nasync function action({ request }) {\n  // request.headers.get(\"Content-Type\") => \"text/plain\"\n  // await request.text()                => \"Text submission\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Router Node Package\nDESCRIPTION: NPM installation command for adding the React Router Node.js platform abstractions package to a project.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router-node/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @react-router/node\n```\n\n----------------------------------------\n\nTITLE: Setting up React Router Address Book Project\nDESCRIPTION: Initial project setup commands using create-react-router template and npm commands to install dependencies and start the development server.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/tutorials/address-book.md#2025-04-22_snippet_0\n\nLANGUAGE: shellscript\nCODE:\n```\nnpx create-react-router@latest --template remix-run/react-router/tutorials/address-book\n```\n\nLANGUAGE: shellscript\nCODE:\n```\n# cd into the app directory\ncd {wherever you put the app}\n\n# install dependencies if you haven't already\nnpm install\n\n# start the server\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Exiting pre-release mode for stable release\nDESCRIPTION: Command to exit Changesets pre-release mode when ready to publish a stable release.\nSOURCE: https://github.com/remix-run/react-router/blob/main/DEVELOPMENT.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm changeset pre exit\n```\n\n----------------------------------------\n\nTITLE: Simplified Middleware Without Next Function in React Router\nDESCRIPTION: Demonstrates a simplified middleware implementation that only performs operations before the request handlers are called, without manually invoking the next function in the middleware chain.\nSOURCE: https://github.com/remix-run/react-router/blob/main/decisions/0014-context-middleware.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst myMiddleware: Route.unstable_MiddlewareFunction = async ({\n  request,\n  context,\n}) => {\n  context.user = await getUser(request);\n  // Look ma, no next!\n};\n```\n\n----------------------------------------\n\nTITLE: Importing createCookieSessionStorage in React Router\nDESCRIPTION: Function that creates a SessionStorage object for storing session data directly in cookies. Useful for scenarios where database storage isn't needed or desired, though limited by browser cookie size constraints.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/utils/createCookieSessionStorage.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncreateCookieSessionStorage\n```\n\n----------------------------------------\n\nTITLE: Creating an experimental release\nDESCRIPTION: Commands for creating an experimental release, including branching, committing changes, updating version numbers, and pushing to GitHub.\nSOURCE: https://github.com/remix-run/react-router/blob/main/DEVELOPMENT.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b release-experimental\ngit add . && git commit \"experimental changes!\"\npnpm run version:experimental\ngit push origin --follow-tags\n```\n\n----------------------------------------\n\nTITLE: Using ScrollRestoration with CSP nonce in React Router\nDESCRIPTION: This example shows how to pass a nonce prop to the ScrollRestoration component for Content Security Policy (CSP) support. The nonce is passed to the inline script tag to prevent scroll flashing.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/components/ScrollRestoration.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<ScrollRestoration nonce={cspNonce} />\n```\n\n----------------------------------------\n\nTITLE: Package Scripts Configuration\nDESCRIPTION: NPM script configuration for running React Router development server\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/upgrading/component-routes.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"react-router dev\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing source-map-support for Node.js\nDESCRIPTION: This snippet shows how to install and integrate `source-map-support` in a Node.js server.  This is necessary for applications using React Router v2.0.0+ when running their own server instead of `remix-serve` to enable source map support for debugging.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router-node/CHANGELOG.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport sourceMapSupport from \"source-map-support\";\nsourceMapSupport.install();\n```\n\n----------------------------------------\n\nTITLE: Frontmatter Metadata for React Router Docs\nDESCRIPTION: YAML frontmatter defining the title and order for a documentation page about React Router explanations.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/explanation/index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Explanations\norder: 5\n---\n```\n\n----------------------------------------\n\nTITLE: Running Remix in SPA Mode (Shell)\nDESCRIPTION: These shell commands demonstrate how to develop, build, and run a Remix application in SPA Mode. `remix vite:dev` starts the development server, `remix vite:build` builds the application for production, and `npx http-server build/client` serves the built client assets.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router-dev/CHANGELOG.md#_snippet_12\n\nLANGUAGE: Shell\nCODE:\n```\nremix vite:dev\n```\n\nLANGUAGE: Shell\nCODE:\n```\nremix vite:build\n```\n\nLANGUAGE: Shell\nCODE:\n```\nnpx http-server build/client\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter block defining metadata for a documentation page about community resources.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/community/index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Community\norder: 6\n---\n```\n\n----------------------------------------\n\nTITLE: Navigation State Type Definition in TypeScript\nDESCRIPTION: Type definition showing the new flattened structure of the navigation state object returned by useNavigation() hook, which replaces the previous useTransition() implementation.\nSOURCE: https://github.com/remix-run/react-router/blob/main/decisions/0005-remixing-react-router.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  state: \"idle\" | \"loading\" | \"submitting\";\n  location: Location;\n  formMethod?: FormMethod;\n  formAction?: string;\n  formEncType?: FormEncType;\n  formData?: FormData;\n}\n```\n\n----------------------------------------\n\nTITLE: Initialize Epic Stack Application\nDESCRIPTION: This command initializes a new application based on the Epic Stack template. It uses `degit` to clone the template from GitHub. This is used for deploying a fullstack React Router application on Fly.io.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/framework/deploying.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpx degit @epicweb-dev/template my-app\n```\n\n----------------------------------------\n\nTITLE: Enforcing Split Route Modules (TSX)\nDESCRIPTION: This code snippet shows how to enable the `unstable_splitRouteModules` future flag with the `enforce` option in the React Router configuration. This will raise an error if any route modules cannot be split.\nSOURCE: https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nexport default {\n  future: {\n    unstable_splitRouteModules: \"enforce\",\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Function signature for useSubmit hook in React Router\nDESCRIPTION: The type definition for the useSubmit hook, showing that it returns a SubmitFunction with no required parameters. This function can be used to programmatically submit form data.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/hooks/useSubmit.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nuseSubmit(): SubmitFunction\n```\n\n----------------------------------------\n\nTITLE: Cloning React Router Repository\nDESCRIPTION: Instructions for cloning the React Router repository locally and checking out the dev branch for code changes.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/community/contributing.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# in a terminal, cd to parent directory where you want your clone to be, then\ngit clone https://github.com/<your_github_username>/react-router.git\ncd react-router\n\n# if you are making *any* code changes, make sure to checkout the dev branch\ngit checkout dev\n```\n\n----------------------------------------\n\nTITLE: Opening React Router Error Boundaries Example in StackBlitz\nDESCRIPTION: This code snippet provides a clickable badge that opens the error boundaries example in StackBlitz. It demonstrates how to link to a live, editable version of the code for easy exploration and testing.\nSOURCE: https://github.com/remix-run/react-router/blob/main/examples/error-boundaries/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![Open in StackBlitz](https://developer.stackblitz.com/img/open_in_stackblitz.svg)](https://stackblitz.com/github/remix-run/react-router/tree/main/examples/error-boundaries?file=src/App.tsx)\n```\n\n----------------------------------------\n\nTITLE: Implementing Feature-Flagged Static Handler in Remix Server Runtime\nDESCRIPTION: This code snippet demonstrates how to implement a feature-flagged static handler in the Remix server runtime. It compares the results of the current implementation with the new React Router 6.4 static handler, ensuring functional equivalence before full adoption.\nSOURCE: https://github.com/remix-run/react-router/blob/main/decisions/0007-remix-on-react-router-6-4-0.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// Runtime-agnostic flag to enable behavior, will always be committed as\n// `false` initially, and toggled to true during local dev\nconst ENABLE_REMIX_ROUTER = false;\n\nasync function handleDocumentRequest({ request }) {\n  const appState = {\n    trackBoundaries: true,\n    trackCatchBoundaries: true,\n    catchBoundaryRouteId: null,\n    renderBoundaryRouteId: null,\n    loaderBoundaryRouteId: null,\n    error: undefined,\n    catch: undefined,\n  };\n\n  // ... do all the current stuff\n\n  const serverHandoff = {\n    actionData,\n    appState: appState,\n    matches: entryMatches,\n    routeData,\n  };\n\n  const entryContext = {\n    ...serverHandoff,\n    manifest: build.assets,\n    routeModules,\n    serverHandoffString: createServerHandoffString(serverHandoff),\n  };\n\n  // If the flag is enabled, process the request again with the new static\n  // handler and confirm we get the same data on the other side\n  if (ENABLE_REMIX_ROUTER) {\n    const staticHandler = unstable_createStaticHandler(routes);\n    const context = await staticHandler.query(request);\n\n    // Note: == only used for brevity ;)\n    assert(entryContext.matches === context.matches);\n    assert(entryContext.routeData === context.loaderData);\n    assert(entryContext.actionData === context.actionData);\n\n    if (catchBoundaryRouteId) {\n      assert(appState.catch === context.errors[catchBoundaryRouteId]);\n    }\n\n    if (loaderBoundaryRouteId) {\n      assert(appState.error === context.errors[loaderBoundaryRouteId]);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: useActionData Hook Signature in React Router\nDESCRIPTION: This snippet shows the TypeScript signature for the useActionData hook. The hook returns undefined if there hasn't been a recent POST navigation form submission.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/hooks/useActionData.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nuseActionData(): undefined\n```\n\n----------------------------------------\n\nTITLE: Configuring Prefetch Behavior for Link in React Router\nDESCRIPTION: Demonstrates how to set the prefetch behavior for data and module prefetching in React Router's Link component.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/components/Link.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Link prefetch=\"intent\" />\n```\n\n----------------------------------------\n\nTITLE: Appending Headers to Parent Route (TSX)\nDESCRIPTION: Demonstrates how to append headers to those set by a parent route. This method preserves the parent headers while adding new ones in the child route.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/headers.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport function headers({ parentHeaders }: HeadersArgs) {\n  parentHeaders.append(\n    \"Permissions-Policy: geolocation=()\"\n  );\n  return parentHeaders;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Remix Project with CLI Options\nDESCRIPTION: Demonstrates the CLI prompt for creating a new Remix project, including the option to choose between TypeScript and JavaScript.\nSOURCE: https://github.com/remix-run/react-router/blob/main/decisions/0008-only-support-js-conversion-for-app-code.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n❯ npx create-remix@latest\n? Where would you like to create your app? ./my-remix-app\n? What type of app do you want to create? Just the basics\n? Where do you want to deploy? Choose Remix App Server if you're unsure; it's easy to change deployment targets. Remix App Server\n? TypeScript or JavaScript? (Use arrow keys)\n❯ TypeScript\n  JavaScript\n```\n\n----------------------------------------\n\nTITLE: Remix Dev with --no-restart flag\nDESCRIPTION: This shell command demonstrates how to use the `--no-restart` flag with the `remix dev` command to prevent the dev server from restarting the app server when builds succeed, enabling manual server management.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router-dev/CHANGELOG.md#_snippet_41\n\nLANGUAGE: sh\nCODE:\n```\nremix dev -c \"node ./server.js\" --no-restart\n```\n\n----------------------------------------\n\nTITLE: Defining Redirect Function Signature in React Router\nDESCRIPTION: This code snippet shows the TypeScript signature for the redirect function in React Router. It takes a URL and an optional init parameter, returning a Response object.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/utils/redirect.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nredirect(url, init): Response\n```\n\n----------------------------------------\n\nTITLE: Using Environment-Specific Routers in React Router\nDESCRIPTION: Shows that instead of rendering Router directly, you would typically use environment-specific routers like BrowserRouter or StaticRouter.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/declarative-routers/Router.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<BrowserRouter>\n<StaticRouter>\n```\n\n----------------------------------------\n\nTITLE: Configuring React Router with TypeScript\nDESCRIPTION: Configuration file setup for React Router using TypeScript, allowing customization of app settings like server-side rendering and directory locations.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/explanation/special-files.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Config } from \"@react-router/dev/config\";\n\nexport default {\n  // Config options...\n} satisfies Config;\n```\n\n----------------------------------------\n\nTITLE: Manual Route ID Configuration in React Router\nDESCRIPTION: Example demonstrating how to manually specify a route ID when defining routes in React Router.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/hooks/useRouteLoaderData.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nroute(\"/\", \"containers/app.tsx\", { id: \"app\" }})\n```\n\n----------------------------------------\n\nTITLE: New React Router Implementation with RouterProvider\nDESCRIPTION: Updated implementation using createBrowserRouter and RouterProvider, demonstrating the new approach with route configuration objects.\nSOURCE: https://github.com/remix-run/react-router/blob/main/decisions/0005-remixing-react-router.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst router = createBrowserRouter([\n  {\n    path: \"/\",\n    element: <Layout />,\n    children: [\n      {\n        index: true,\n        element: <Home />,\n      },\n    ],\n  },\n]);\n\nfunction NewApp() {\n  return <RouterProvider router={router} />;\n}\n```\n\n----------------------------------------\n\nTITLE: ADR Template Structure in Markdown\nDESCRIPTION: Standard template for creating Architecture Decision Records (ADRs) with sections for title, date, status, context, decision, and consequences. Includes a status field that can reference other ADRs.\nSOURCE: https://github.com/remix-run/react-router/blob/main/decisions/template.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Title\n\nDate: YYYY-MM-DD\n\nStatus: proposed | rejected | accepted | deprecated | … | superseded by [0005](0005-example.md)\n\n## Context\n\n## Decision\n\n## Consequences\n```\n\n----------------------------------------\n\nTITLE: Remix Dev Server Custom Command\nDESCRIPTION: This shell command demonstrates how to use the `-c` or `--command` flag with the `remix dev` command to specify a custom app server to use instead of the default Remix App Server.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router-dev/CHANGELOG.md#_snippet_37\n\nLANGUAGE: sh\nCODE:\n```\nremix dev # uses `remix-serve <serve build path>` as the app server\nremix dev -c \"node ./server.js\" # uses your custom app server at `./server.js`\n```\n\n----------------------------------------\n\nTITLE: Revealing entry.server.tsx (Shell)\nDESCRIPTION: Provides a command to reveal the entry.server.tsx file if it doesn't exist in the project. This is useful for setting up global header configuration.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/headers.md#2025-04-22_snippet_7\n\nLANGUAGE: shellscript\nCODE:\n```\nreact-router reveal\n```\n\n----------------------------------------\n\nTITLE: Creating Major Release for React Router\nDESCRIPTION: Complete process for creating a new major release, including version updates, branch management, and tag creation.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/community/contributing.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Start from the dev branch.\ngit checkout dev\n\n# Merge the main branch into dev to ensure that any hotfixes and\n# docs updates are available in the release.\ngit merge main\n\n# Create a new release branch from dev.\ngit checkout -b release/v6.1.0\n\n# Create a new tag and update version references throughout the\n# codebase.\npnpm run version [nextVersion]\n\n# Push the release branch along with the new release tag.\ngit push origin release/v6.1.0 --follow-tags\n\n# Wait for GitHub actions to run all tests. If the tests pass, the\n# release is ready to go! Merge the release branch into main and dev.\ngit checkout main\ngit merge release/v6.1.0\ngit checkout dev\ngit merge release/v6.1.0\n\n# The release branch can now be deleted.\ngit branch -D release/v6.1.0\ngit push origin --delete release/v6.1.0\n```\n\n----------------------------------------\n\nTITLE: Adding Headers with HeadersArgs in Remix\nDESCRIPTION: This code demonstrates how to use the HeadersArgs type in Remix to define custom headers for a route. It imports the HeadersArgs type from @remix-run/node and exports a headers function that takes HeadersArgs as an argument. This allows for accessing loaderHeaders and setting custom headers based on the loader's data. It enables using function declarations as opposed to arrow function expressions.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router-node/CHANGELOG.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { HeadersArgs } from \"@remix-run/node\"; // or cloudflare/deno\n\nexport function headers({ loaderHeaders }: HeadersArgs) {\n  return {\n    \"x-my-custom-thing\": loaderHeaders.get(\"x-my-custom-thing\") || \"fallback\",\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Running Codemod for Automated Upgrades\nDESCRIPTION: This command runs a codemod to automatically update packages and imports when upgrading from Remix v2 to React Router v7.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/upgrading/remix.md#2025-04-22_snippet_1\n\nLANGUAGE: shellscript\nCODE:\n```\nnpx codemod remix/2/react-router/upgrade\n```\n\n----------------------------------------\n\nTITLE: Function Signature for unstable_usePrompt in React Router\nDESCRIPTION: This code snippet shows the function signature for the unstable_usePrompt hook in React Router. It takes an options object as a parameter and returns void.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/hooks/unstable_usePrompt.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nunstable_usePrompt(options): void\n```\n\n----------------------------------------\n\nTITLE: Route Objects Link Example in Markdown\nDESCRIPTION: Example link to StackBlitz demonstration of Route Objects implementation in React Router\nSOURCE: https://github.com/remix-run/react-router/blob/main/examples/route-objects/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![Open in StackBlitz](https://developer.stackblitz.com/img/open_in_stackblitz.svg)](https://stackblitz.com/github/remix-run/react-router/tree/main/examples/route-objects?file=src/App.tsx)\n```\n\n----------------------------------------\n\nTITLE: Installing Runtime Adapter for Node (Shell)\nDESCRIPTION: Command to install the Node runtime adapter for React Router using npm.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/upgrading/router-provider.md#2025-04-22_snippet_4\n\nLANGUAGE: shellscript\nCODE:\n```\nnpm install @react-router/node\n```\n\n----------------------------------------\n\nTITLE: Creating Cookie Object in React Router\nDESCRIPTION: Demonstrates how to create a cookie object using React Router's createCookie function for state persistence.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/explanation/state-management.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createCookie } from \"react-router\";\nexport const prefs = createCookie(\"prefs\");\n```\n\n----------------------------------------\n\nTITLE: Enabling Server-Side Rendering in TypeScript\nDESCRIPTION: Modifies the React Router configuration to enable server-side rendering.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/tutorials/address-book.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  ssr: true,\n  prerender: [\"/about\"],\n} satisfies Config;\n```\n\n----------------------------------------\n\nTITLE: Install Local CA\nDESCRIPTION: This command installs mkcert's local Certificate Authority (CA) to enable trust for locally generated certificates.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router-dev/CHANGELOG.md#_snippet_26\n\nLANGUAGE: sh\nCODE:\n```\nmkcert -install\n```\n\n----------------------------------------\n\nTITLE: Initializing Context (TypeScript)\nDESCRIPTION: This example demonstrates how to initialize the unstable client-side context with initial data using the `unstable_getContext` function. This function returns a Map of context's and initial values. The example shows creating a logger context and setting its initial value to a logger function.  Dependencies: react-router.\nSOURCE: https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst loggerContext = unstable_createContext<(...args: unknown[]) => void>();\n\nfunction logger(...args: unknown[]) {\n  console.log(new Date().toISOString(), ...args);\n}\n\nfunction unstable_getContext() {\n  let map = new Map();\n  map.set(loggerContext, logger);\n  return map;\n}\n```\n\n----------------------------------------\n\nTITLE: Remix Dev with --no-restart and chokidar\nDESCRIPTION: This javascript snippet demonstrates how to use `chokidar` to watch for changes in the build directory, purge the require cache, load the updated server build, and then call `broadcastDevReady` to notify the remix dev server of changes.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router-dev/CHANGELOG.md#_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\n// server.dev.js\nconst BUILD_PATH = path.resolve(__dirname, \"build\");\n\nconst watcher = chokidar.watch(BUILD_PATH);\n\nwatcher.on(\"change\", () => {\n  // 1. purge require cache\n  purgeRequireCache();\n  // 2. load updated server build\n  const build = require(BUILD_PATH);\n  // 3. tell dev server that this app server is now ready\n  broadcastDevReady(build);\n});\n```\n\n----------------------------------------\n\nTITLE: Lazy Route Module Exports - React Router (JSX)\nDESCRIPTION: Demonstrates the structure of a lazy route module, showcasing how to export properties like `loader`, `Component`, and `ErrorBoundary`.  These exported functions/components are then used by React Router when the lazy route is loaded. This enables dynamic loading of route-specific logic and UI components.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router/CHANGELOG.md#_snippet_35\n\nLANGUAGE: jsx\nCODE:\n```\nexport async function loader({ request }) {\n  let data = await fetchData(request);\n  return json(data);\n}\n\n// Export a `Component` directly instead of needing to create a React Element from it\nexport function Component() {\n  let data = useLoaderData();\n\n  return (\n    <>\n      <h1>You made it!</h1>\n      <p>{data}</p>\n    </>\n  );\n}\n\n// Export an `ErrorBoundary` directly instead of needing to create a React Element from it\nexport function ErrorBoundary() {\n  let error = useRouteError();\n  return isRouteErrorResponse(error) ? (\n    <h1>\n      {error.status} {error.statusText}\n    </h1>\n  ) : (\n    <h1>{error.message || error}</h1>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Hydration Fallback Component\nDESCRIPTION: Creates a fallback component to display during initial client-side hydration of the React Router application.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/tutorials/address-book.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nexport function HydrateFallback() {\n  return (\n    <div id=\"loading-splash\">\n      <div id=\"loading-splash-spinner\" />\n      <p>Loading, please wait...</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Install mkcert via Homebrew\nDESCRIPTION: This command installs mkcert, a tool for creating locally trusted development certificates, using the Homebrew package manager on macOS.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router-dev/CHANGELOG.md#_snippet_25\n\nLANGUAGE: sh\nCODE:\n```\nbrew install mkcert\n```\n\n----------------------------------------\n\nTITLE: Visualizing Linear Workflow Process with Mermaid Diagram\nDESCRIPTION: This diagram illustrates the standard flow of a Linear issue through various status states from intake to completion. It shows how issues move from Triage to either Backlog or Canceled, then through Todo, In Progress, In Review, and finally to Done, with options for handling blocked work via the Needs Feedback status.\nSOURCE: https://github.com/remix-run/react-router/blob/main/decisions/0006-linear-workflow.md#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    A(Github/Discord/???) -->|intake| Triage\n    Triage -->|accepted| Backlog\n    Triage -->|rejected| Canceled\n    Backlog -->|planned| Todo\n    Todo -->|picked up| InProgress(In Progress)\n    InProgress -->|PR| InReview(In Review)\n    InProgress -->|stopped| Todo\n    InProgress -->|blocked| NeedsFeedback(Needs Feedback)\n    NeedsFeedback -->|unblocked| InProgress\n    InReview -->|larger changes| InProgress\n    InReview -->|small comments| InReview\n    InReview -->|merged| Done\n```\n\n----------------------------------------\n\nTITLE: Extending App Context Types in React Router\nDESCRIPTION: TypeScript module declaration to extend the AppLoadContext interface for custom context properties.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/route-module-type-safety.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"react-router\";\ndeclare module \"react-router\" {\n  interface AppLoadContext {\n    // add context properties here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Remix Config for unstable_dev options\nDESCRIPTION: This Javascript snippet demonstrates how to set `unstable_dev` configuration options like `httpPort` within `remix.config.js`.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router-dev/CHANGELOG.md#_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\n// remix.config.js\nmodule.exports = {\n  future: {\n    unstable_dev: {\n      httpPort: 8001,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: useRoutes Hook Function Signature\nDESCRIPTION: Shows the TypeScript function signature for the useRoutes hook, which takes a routes configuration and optional location argument and returns undefined.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/hooks/useRoutes.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nuseRoutes(routes, locationArg): undefined\n```\n\n----------------------------------------\n\nTITLE: Creating React Router Config File (TypeScript)\nDESCRIPTION: Example of a React Router configuration file specifying the app directory and disabling server-side rendering.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/upgrading/router-provider.md#2025-04-22_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport type { Config } from \"@react-router/dev/config\";\n\nexport default {\n  appDirectory: \"src\",\n  ssr: false,\n} satisfies Config;\n```\n\n----------------------------------------\n\nTITLE: Creating Index Route Component\nDESCRIPTION: Implements a home page component as the index route for the React Router application with basic content.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/tutorials/address-book.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Home() {\n  return (\n    <p id=\"index-page\">\n      This is a demo for React Router.\n      <br />\n      Check out{\" \"}\n      <a href=\"https://reactrouter.com\">\n        the docs at reactrouter.com\n      </a>\n      .\n    </p>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Documentation Comment in HTML\nDESCRIPTION: HTML comment indicating needed content about the Location object's purpose and usage examples, including scroll restoration functionality.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/explanation/location.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- put some stuff about what it is and how it can be used, probably good opportunity for a couple how-tos as well with scroll restoration, etc -->\n```\n\n----------------------------------------\n\nTITLE: Client Module Usage Example\nDESCRIPTION: Demonstrates how to properly import and use values from .client modules, showing the difference between server and client-side behavior.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/explanation/special-files.md#2025-04-22_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport { supportsVibrationAPI } from \"./feature-check.client.ts\";\n\nconsole.log(supportsVibrationAPI);\n// server: undefined\n// client: true | false\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server in React Router\nDESCRIPTION: Command to run the development server for local development and testing.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/create-react-router/__tests__/fixtures/basic/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shellscript\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Route Module with Loader in React Router\nDESCRIPTION: Sets up a basic route module with a loader function that retrieves data from localStorage and a component that renders the data.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/fetchers.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLoaderData } from \"react-router\";\n\nexport async function clientLoader({ request }) {\n  let title = localStorage.getItem(\"title\") || \"No Title\";\n  return { title };\n}\n\nexport default function Component() {\n  let data = useLoaderData();\n  return (\n    <div>\n      <h1>{data.title}</h1>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating URL Paths with createPath Function in React Router\nDESCRIPTION: Function signature showing how to use createPath to generate a string URL path from pathname, search, and hash components. The function accepts a single parameter object containing these components.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/utils/createPath.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ncreatePath(__namedParameters): string\n```\n\n----------------------------------------\n\nTITLE: Importing RouterProvider - React Router DOM\nDESCRIPTION: This code shows how to import `RouterProvider` from `react-router/dom` when not using the Vite plugin and manually calling `createBrowserRouter` or `createHashRouter`. This ensures compatibility with non-DOM environments and correct usage of `ReactDOM.flushSync()`.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router/CHANGELOG.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// If you are not using the Vite plugin and are manually calling createBrowserRouter/createHashRouter:\n// import { RouterProvider } from \"react-router/dom\"\n```\n\n----------------------------------------\n\nTITLE: Referencing the Router Component in React Router\nDESCRIPTION: Example of how to reference the Router component in React Router. The component provides location context for the rest of the app and is typically not rendered directly.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/declarative-routers/Router.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<Router>\n```\n\n----------------------------------------\n\nTITLE: Installing Globals for Node.js Fetch API\nDESCRIPTION: This snippet demonstrates how to install the necessary globals for using the Fetch API in a Node.js environment when using React Router v2.0.0 and later.  This is required when using your own server instead of `remix-serve`.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router-node/CHANGELOG.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { installGlobals } from \"@remix-run/node\";\n\ninstallGlobals();\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in JavaScript/TypeScript\nDESCRIPTION: This snippet shows how to update import statements when upgrading from Remix v2 to React Router v7. It demonstrates changing the import source from '@remix-run/node' to 'react-router'.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/upgrading/remix.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n-import { redirect } from \"@remix-run/node\";\n+import { redirect } from \"react-router\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Pre-rendering in React Router\nDESCRIPTION: This snippet shows how to configure pre-rendering in React Router. It demonstrates specifying URLs to pre-render by reading product data from a CSV file.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/framework/data-loading.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Config } from \"@react-router/dev/config\";\n\nexport default {\n  async prerender() {\n    let products = await readProductsFromCSVFile();\n    return products.map(\n      (product) => `/products/${product.id}`\n    );\n  },\n} satisfies Config;\n```\n\n----------------------------------------\n\nTITLE: Lazy Route Discovery with `unstable_patchRoutesOnMiss` in React Router\nDESCRIPTION: Demonstrates the usage of `unstable_patchRoutesOnMiss` for lazy route discovery in React Router. This allows patching new routes into the route tree during navigation when a given path cannot be matched.  It's used to load portions of the route tree lazily, improving code-splitting.\nSOURCE: https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#_snippet_35\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst router = createBrowserRouter(\n  [\n    {\n      id: \"root\",\n      path: \"/\",\n      Component: RootComponent,\n    },\n  ],\n  {\n    async unstable_patchRoutesOnMiss({ path, patch }) {\n      if (path === \"/a\") {\n        // Load the `a` route (`{ path: 'a', Component: A }`)\n        let route = await getARoute();\n        // Patch the `a` route in as a new child of the `root` route\n        patch(\"root\", [route]);\n      }\n    },\n  }\n);\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Markdown Frontmatter for React Router Tutorial\nDESCRIPTION: Frontmatter metadata block defining the page title as 'Tutorials' and setting the display order to 3.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/tutorials/index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Tutorials\norder: 3\n---\n```\n\n----------------------------------------\n\nTITLE: Route Configuration Setup\nDESCRIPTION: Basic route configuration with a catchall route\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/upgrading/component-routes.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  type RouteConfig,\n  route,\n} from \"@react-router/dev/routes\";\n\nexport default [\n  route(\"*?\", \"catchall.tsx\"),\n] satisfies RouteConfig;\n```\n\n----------------------------------------\n\nTITLE: Installing React Router Architect Handler via npm\nDESCRIPTION: This command installs the @react-router/architect package, which provides the Architect server request handler for React Router. It enables seamless integration of React Router with Architect-based server applications.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router-architect/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @react-router/architect\n```\n\n----------------------------------------\n\nTITLE: Renaming Vite Plugins in React Router\nDESCRIPTION: This snippet shows the renaming and relocation of Vite plugins for React Router. It demonstrates how to update imports from `@remix/dev` to `@react-router/dev/vite` and `@react-router/dev/vite/cloudflare`. The `vitePlugin` is renamed to `reactRouter`, and `cloudflareDevProxyVitePlugin` is renamed to `cloudflareDevProxy`.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router-dev/CHANGELOG.md#_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n  -import {\n  -  vitePlugin as remix,\n  -  cloudflareDevProxyVitePlugin,\n  -} from \"@remix/dev\";\n\n  +import { reactRouter } from \"@react-router/dev/vite\";\n  +import { cloudflareDevProxy } from \"@react-router/dev/vite/cloudflare\";\n```\n\n----------------------------------------\n\nTITLE: Merging release branch to main after stable release\nDESCRIPTION: Commands for merging the release-next branch back into main using a non-fast-forward merge after a stable release is published.\nSOURCE: https://github.com/remix-run/react-router/blob/main/DEVELOPMENT.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout main\ngit merge --no-ff release-next\ngit push origin main\n```\n\n----------------------------------------\n\nTITLE: Meta Function Argument Changes in Remix\nDESCRIPTION: This code shows the changes to the meta function's arguments when using the future.v2_meta flag in Remix. It demonstrates how to access loader data using the matches array instead of parentsData, and how to find route matches using the id property instead of the route.id property. These changes simplify the meta function's arguments and provide more direct access to relevant data.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router-node/CHANGELOG.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n// before\nexport function meta({ parentsData }) {\n  return [{ title: parentsData[\"routes/some-route\"].title }];\n}\n// after\nexport function meta({ matches }) {\n  return [\n    {\n      title: matches.find((match) => match.id === \"routes/some-route\")\n        .data.title,\n    },\n  ];\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n// before\nexport function meta({ matches }) {\n  const rootModule = matches.find((match) => match.route.id === \"root\");\n}\n// after\nexport function meta({ matches }) {\n  const rootModule = matches.find((match) => match.id === \"root\");\n}\n```\n\n----------------------------------------\n\nTITLE: Generate TLS key and certificate using mkcert\nDESCRIPTION: This command uses mkcert to generate a TLS key (key.pem) and certificate (cert.pem) for localhost. These files are used to enable HTTPS for local development.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router-dev/CHANGELOG.md#_snippet_28\n\nLANGUAGE: sh\nCODE:\n```\nmkcert -key-file key.pem -cert-file cert.pem localhost\n```\n\n----------------------------------------\n\nTITLE: Route Component Props in React Router\nDESCRIPTION: This snippet illustrates how to access route parameters, loader data, and action data as props for route component exports. The `Component`, `HydrateFallback`, and `ErrorBoundary` components now receive `params`, `loaderData`, and `actionData` as props. This simplifies data access within route components.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router-dev/CHANGELOG.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function Component({ params, loaderData, actionData }) {}\n\nexport function HydrateFallback({ params }) {}\nexport function ErrorBoundary({ params, loaderData, actionData }) {}\n```\n\n----------------------------------------\n\nTITLE: Server-Side Routing with DataStaticRouter Setup\nDESCRIPTION: Shows how to set up server-side rendering using createStaticHandler and DataStaticRouter in React Router. The code demonstrates handling incoming requests and setting up static routing for SSR.\nSOURCE: https://github.com/remix-run/react-router/blob/main/examples/ssr-data-router/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// src/entry.server.tsx\nimport { createStaticHandler, DataStaticRouter } from '@remix-run/router';\n\n// Convert Express request to Web Fetch Request\n// Use createStaticHandler for data loading\n// Render app using DataStaticRouter\n```\n\n----------------------------------------\n\nTITLE: Using unstable_createContext for Context in React Router Middleware\nDESCRIPTION: This snippet shows how to create and use a type-safe context using `unstable_createContext` in React Router middleware. It defines a session context and uses it to store and retrieve session data within middleware and loaders.\nSOURCE: https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { unstable_createContext } from \"react-router\";\nimport { Route } from \"./+types/root\";\nimport type { Session } from \"./sessions.server\";\nimport { getSession } from \"./sessions.server\";\n\nlet sessionContext = unstable_createContext<Session>();\n\nconst sessionMiddleware: Route.unstable_MiddlewareFunction = ({\n  context,\n  request,\n}) => {\n  let session = await getSession(request);\n  context.set(sessionContext, session);\n  //                          ^ must be of type Session\n};\n\n// ... then in some downstream middleware\nconst loggerMiddleware: Route.unstable_MiddlewareFunction = ({\n  context,\n  request,\n}) => {\n  let session = context.get(sessionContext);\n  //  ^ typeof Session\n  console.log(session.get(\"userId\"), request.method, request.url);\n};\n\n// ... or some downstream loader\nexport function loader({ context }: Route.LoaderArgs) {\n  let session = context.get(sessionContext);\n  let profile = await getProfile(session.get(\"userId\"));\n  return { profile };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Cancel Button with useNavigate in React Router\nDESCRIPTION: Adds a cancel button to the edit contact form that navigates back one step in the browser history using the useNavigate hook from React Router. This demonstrates how to implement navigation actions for non-form-submitting buttons.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/tutorials/address-book.md#2025-04-22_snippet_33\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Form, redirect, useNavigate } from \"react-router\";\n// existing imports & exports\n\nexport default function EditContact({\n  loaderData,\n}: Route.ComponentProps) {\n  const { contact } = loaderData;\n  const navigate = useNavigate();\n\n  return (\n    <Form key={contact.id} id=\"contact-form\" method=\"post\">\n      {/* existing elements */}\n      <p>\n        <button type=\"submit\">Save</button>\n        <button onClick={() => navigate(-1)} type=\"button\">\n          Cancel\n        </button>\n      </p>\n    </Form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Prerendering with React Router Vite Plugin\nDESCRIPTION: This code snippet shows how to configure prerendering using the `prerender` config in the React Router Vite plugin.  The `getStaticPaths` function is used to get the initially defined static paths, which can be combined with other dynamic path generation techniques to pre-render all HTML and data files at build time for static serving.\nSOURCE: https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#_snippet_32\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineConfig({\n  plugins: [\n    reactRouter({\n      async prerender({ getStaticPaths }) {\n        let slugs = await fakeGetSlugsFromCms();\n        return [\n          ...getStaticPaths(),\n          ...slugs.map((slug) => `/product/${slug}`),\n        ];\n      },\n    }),\n    tsconfigPaths(),\n  ],\n});\n\nasync function fakeGetSlugsFromCms() {\n  await new Promise((r) => setTimeout(r, 1000));\n  return [\"shirt\", \"hat\"];\n}\n```\n\n----------------------------------------\n\nTITLE: Server-Side Logging Middleware (TSX)\nDESCRIPTION: This TSX snippet demonstrates a server-side logging middleware function in React Router. It logs the navigation time and URL to the console. It demonstrates how to capture and return the HTTP response from the `next` function, allowing for modifications if necessary.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router/CHANGELOG.md#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst serverLogger: Route.unstable_MiddlewareFunction = async (\n  { request, params, context },\n  next\n) => {\n  let start = performance.now();\n\n  // 👇 Grab the response here\n  let res = await next();\n\n  let duration = performance.now() - start;\n  console.log(`Navigated to ${request.url} (${duration}ms)`);\n\n  // 👇 And return it here (optional if you don't modify the response)\n  return res;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a new changeset for pre-release iteration\nDESCRIPTION: Command for creating a new changeset when iterating on a pre-release, which is required even if changes won't be included in logs.\nSOURCE: https://github.com/remix-run/react-router/blob/main/DEVELOPMENT.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm changeset\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Bundles in Vite Plugin (TypeScript)\nDESCRIPTION: This code snippet shows how to configure the `unstable_serverBundles` option in the Remix Vite plugin to split server code into multiple request handlers. It uses a function that receives a `branch` parameter to determine whether a route requires authentication and returns a corresponding bundle name.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router-dev/CHANGELOG.md#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { unstable_vitePlugin as remix } from \"@remix-run/dev\";\nimport { defineConfig } from \"vite\";\n\nexport default defineConfig({\n  plugins: [\n    remix({\n      unstable_serverBundles: ({ branch }) => {\n        const isAuthenticatedRoute = branch.some(\n          (route) => route.id === \"routes/_authenticated\"\n        );\n\n        return isAuthenticatedRoute ? \"authenticated\" : \"unauthenticated\";\n      },\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Replacing Vite Plugin's manifest option with buildEnd hook\nDESCRIPTION: This snippet demonstrates replacing the `manifest` option of the Vite plugin with a `buildEnd` hook to write the build manifest to disk. It uses the `writeFile` function from `node:fs/promises` to write the `buildManifest` to a JSON file. This allows for more flexible handling of the build manifest.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router-dev/CHANGELOG.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// react-router.config.ts\nimport type { Config } from \"@react-router/dev/config\";\nimport { writeFile } from \"node:fs/promises\";\n\nexport default {\n  async buildEnd({ buildManifest }) {\n    await writeFile(\n      \"build/manifest.json\",\n      JSON.stringify(buildManifest, null, 2),\n      \"utf-8\"\n    );\n  },\n} satisfies Config;\n```\n\n----------------------------------------\n\nTITLE: Rendering Async Components in React Router Loader\nDESCRIPTION: This snippet demonstrates how async components can be rendered in loaders like any other data in a future implementation of React Server Components with React Router. It includes a loader function that returns JSX components and a component that renders these loaded components.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/react-server-components.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// route(\"products/:pid\", \"./product-page.tsx\");\nimport type { Route } from \"./+types/product\";\nimport Product from \"./product\";\nimport Reviews from \"./reviews\";\n\nexport async function loader({ params }: Route.LoaderArgs) {\n  return {\n    product: <Product id={params.pid} />,\n    reviews: <Reviews productId={params.pid} />,\n  };\n}\n\nexport default function ProductPage({\n  loaderData,\n}: Route.ComponentProps) {\n  return (\n    <div>\n      {loaderData.product}\n      <Suspense fallback={<div>loading...</div>}>\n        {loaderData.reviews}\n      </Suspense>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: React Router HMR Disposal Implementation\nDESCRIPTION: Hot Module Replacement setup for proper router disposal during development.\nSOURCE: https://github.com/remix-run/react-router/blob/main/decisions/0005-remixing-react-router.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nif (import.meta.hot) {\n  import.meta.hot.dispose(() => router.dispose());\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Client Entry File in TypeScript\nDESCRIPTION: This snippet shows the changes required in the entry.client.tsx file when upgrading from Remix to React Router v7, including updating import statements and component names.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/upgrading/remix.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n-import { RemixBrowser } from \"@remix-run/react\";\n+import { HydratedRouter } from \"react-router/dom\";\n\nhydrateRoot(\n  document,\n  <StrictMode>\n-   <RemixBrowser />\n+   <HydratedRouter />\n  </StrictMode>,\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Canonical URL with React Router Meta Function\nDESCRIPTION: Example demonstrating how to set a canonical URL using React Router's meta function by returning a link tag descriptor. This is useful for SEO optimization and preventing duplicate content issues.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/meta.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport function meta() {\n  return [\n    {\n      tagName: \"link\",\n      rel: \"canonical\",\n      href: \"https://reactrouter.com\",\n    },\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Relative Path Routing in React Router\nDESCRIPTION: Illustrates the correct relative path calculation in React Router when using `relative=\"path\"` within nested routes. The `Link` component's `to` prop calculates the relative path based on the current contextual route's pathname instead of the full location pathname. It requires React Router's Route, Link and Outlet components.\nSOURCE: https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#_snippet_37\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Route path=\"/a\">\n  <Route path=\"/b\" element={<Component />}>\n    <Route path=\"/c\" />\n  </Route>\n</Route>;\n\nfunction Component() {\n  return (\n    <>\n      {/* This is now correctly relative to /a/b, not /a/b/c */}\n      <Link to=\"..\" relative=\"path\" />\n      <Outlet />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Server-Side Middleware for Handling 404s and Redirects in React Router\nDESCRIPTION: This code snippet demonstrates a server-side middleware function in React Router for handling 404 errors and checking for CMS redirects. It attempts to handle the request, and if it results in a 404, it checks the CMS for a redirect.\nSOURCE: https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nconst redirects: Route.unstable_MiddlewareFunction = async ({\n  request,\n  next,\n}) => {\n  // attempt to handle the request\n  let res = await next();\n\n  // if it's a 404, check the CMS for a redirect, do it last\n  // because it's expensive\n  if (res.status === 404) {\n    let cmsRedirect = await checkCMSRedirects(request.url);\n    if (cmsRedirect) {\n      throw redirect(cmsRedirect, 302);\n    }\n  }\n\n  return res;\n};\n```\n\n----------------------------------------\n\nTITLE: Advanced Data Strategy with Match Resolution\nDESCRIPTION: Improved implementation using match.resolve() function that handles route lazy loading, revalidation, and middleware context passing.\nSOURCE: https://github.com/remix-run/react-router/blob/main/decisions/0003-data-strategy.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nasync function dataStrategy({ matches }) {\n  let ctx = {};\n  let results = [];\n  for (let match of matches) {\n    let result = await m.resolve((handler) => {\n      return handler(ctx);\n    });\n    results.push(result);\n  });\n  return results;\n}\n```\n\n----------------------------------------\n\nTITLE: Removing LiveReload Component in App (Diff)\nDESCRIPTION: This diff shows the removal of the `<LiveReload />` component and illustrates the reliance on `<Scripts />` for including Vite's client-side runtime and other dev-only scripts. This is a breaking change for projects using the unstable Vite plugin.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router-dev/CHANGELOG.md#_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n  import {\n  -   LiveReload,\n      Outlet,\n      Scripts,\n    }\n\n    export default function App() {\n      return (\n        <html>\n          <head>\n          </head>\n          <body>\n            <Outlet />\n            <Scripts />\n  -         <LiveReload />\n          </body>\n        </html>\n      )\n    }\n```\n\n----------------------------------------\n\nTITLE: Sample Implementation of Sequential Data Loading Strategy\nDESCRIPTION: A sample implementation of a dataStrategy function that runs loaders sequentially rather than in parallel. This demonstrates how custom data loading strategies can be implemented.\nSOURCE: https://github.com/remix-run/react-router/blob/main/decisions/0003-data-strategy.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Sample strategy to run sequentially\nasync function dataStrategy({ request, params, matches, type }) {\n  let results = [];\n  for (let match of matches) {\n    let result = await match.route[type]({ request, params });\n    result.push(result);\n  }\n  return results;\n}\n```\n\n----------------------------------------\n\nTITLE: Broken Link Example in DashboardTeam\nDESCRIPTION: Illustrates a broken link example within the DashboardTeam component when using relative routing with a splat route. The link using \".\" incorrectly resolves to the parent route instead of the current route.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router/CHANGELOG.md#_snippet_23\n\nLANGUAGE: jsx\nCODE:\n```\nfunction DashboardTeam() {\n  // ❌ This is broken and results in <a href=\"/dashboard\">\n  return <Link to=\".\">A broken link to the Current URL</Link>;\n\n  // ✅ This is fixed but super unintuitive since we're already at /dashboard/team!\n  return <Link to=\"./team\">A broken link to the Current URL</Link>;\n}\n```\n\n----------------------------------------\n\nTITLE: Proper Return Pattern for Type Inference\nDESCRIPTION: Example showing the correct pattern for returning data from loader functions when using type inference, emphasizing the need to use the json helper function.\nSOURCE: https://github.com/remix-run/react-router/blob/main/decisions/0003-infer-types-for-useloaderdata-and-useactiondata-from-loader-and-action-via-generics.md#2025-04-22_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nconst loader = () => {\n  // NO\n  return { hello: \"world\" };\n\n  // YES\n  return json({ hello: \"world\" });\n};\n```\n\n----------------------------------------\n\nTITLE: Client Entry Point Implementation\nDESCRIPTION: Client-side entry point setup for hydrating the React Router application in the browser with strict mode enabled.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/explanation/special-files.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { startTransition, StrictMode } from \"react\";\nimport { hydrateRoot } from \"react-dom/client\";\nimport { HydratedRouter } from \"react-router/dom\";\n\nstartTransition(() => {\n  hydrateRoot(\n    document,\n    <StrictMode>\n      <HydratedRouter />\n    </StrictMode>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Lazy Route Modules - Exporting Route Properties\nDESCRIPTION: Illustrates how to export `loader`, `Component`, and `ErrorBoundary` from a lazy route module. These exported values are used by React Router to configure the route, load data, and handle errors.  Dependencies include `useLoaderData`, `useRouteError`, and `isRouteErrorResponse` from `react-router`.\nSOURCE: https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#_snippet_52\n\nLANGUAGE: JSX\nCODE:\n```\nexport async function loader({ request }) {\n  let data = await fetchData(request);\n  return json(data);\n}\n\n// Export a `Component` directly instead of needing to create a React Element from it\nexport function Component() {\n  let data = useLoaderData();\n\n  return (\n    <>\n      <h1>You made it!</h1>\n      <p>{data}</p>\n    </>\n  );\n}\n\n// Export an `ErrorBoundary` directly instead of needing to create a React Element from it\nexport function ErrorBoundary() {\n  let error = useRouteError();\n  return isRouteErrorResponse(error) ? (\n    <h1>\n      {error.status} {error.statusText}\n    </h1>\n  ) : (\n    <h1>{error.message || error}</h1>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: BrowserRouter with Future Flag\nDESCRIPTION: Demonstrates how to enable the `React.startTransition` feature using the `future` prop on `<BrowserRouter>`. This flag enables React concurrent mode compatibility.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router/CHANGELOG.md#_snippet_30\n\nLANGUAGE: jsx\nCODE:\n```\n<BrowserRouter future={{ v7_startTransition: true }}>\n  <Routes>{/*...*/}</Routes>\n</BrowserRouter>\n```\n\n----------------------------------------\n\nTITLE: Complex Form Validation with Client-side State\nDESCRIPTION: Example of form validation implementation with extensive client-side state management and network handling.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/explanation/state-management.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nexport function Signup() {\n  // A multitude of React State declarations\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const [userName, setUserName] = useState(\"\");\n  const [userNameError, setUserNameError] = useState(null);\n\n  const [password, setPassword] = useState(null);\n  const [passwordError, setPasswordError] = useState(\"\");\n\n  // Replicating server-side logic in the client\n  function validateForm() {\n    setUserNameError(null);\n    setPasswordError(null);\n    const errors = validateSignupForm(userName, password);\n    if (errors) {\n      if (errors.userName) {\n        setUserNameError(errors.userName);\n      }\n      if (errors.password) {\n        setPasswordError(errors.password);\n      }\n    }\n    return Boolean(errors);\n  }\n\n  // Manual network interaction handling\n  async function handleSubmit() {\n    if (validateForm()) {\n      setSubmitting(true);\n      const res = await postJSON(\"/api/signup\", {\n        userName,\n        password,\n      });\n      const json = await res.json();\n      setIsSubmitting(false);\n\n      // Server state synchronization to the client\n      if (json.errors) {\n        if (json.errors.userName) {\n          setUserNameError(json.errors.userName);\n        }\n        if (json.errors.password) {\n          setPasswordError(json.errors.password);\n        }\n      }\n    }\n  }\n\n  return (\n    <form\n      onSubmit={(event) => {\n        event.preventDefault();\n        handleSubmit();\n      }}\n    >\n      <p>\n        <input\n          type=\"text\"\n          name=\"username\"\n          value={userName}\n          onChange={() => {\n            // Synchronizing form state for the fetch\n            setUserName(event.target.value);\n          }}\n        />\n        {userNameError ? <i>{userNameError}</i> : null}\n      </p>\n\n      <p>\n        <input\n          type=\"password\"\n          name=\"password\"\n          onChange={(event) => {\n            // Synchronizing form state for the fetch\n            setPassword(event.target.value);\n          }}\n        />\n        {passwordError ? <i>{passwordError}</i> : null}\n      </p>\n\n      <button disabled={isSubmitting} type=\"submit\">\n        Sign Up\n      </button>\n\n      {isSubmitting ? <BusyIndicator /> : null}\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Routes with Component/ErrorBoundary - JSON\nDESCRIPTION: Illustrates how to define routes using the `Component` and `ErrorBoundary` properties within a JSON-like array structure. This approach allows directly associating React Components (instead of React Elements) to route paths, providing an alternative way for defining route rendering and error handling logic.\nSOURCE: https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#_snippet_50\n\nLANGUAGE: JSX\nCODE:\n```\nconst componentRoutes = [{\n  path: '/',\n  Component: Home,\n  ErrorBoundary: HomeError,\n}]\n\nfunction Home() { ... }\nfunction HomeError() { ... }\n```\n\n----------------------------------------\n\nTITLE: TS Error Handling Example\nDESCRIPTION: This code snippet shows an example of a TypeScript error that users might encounter when using `react-router`. This specific error relates to type checking issues with the `redirectSymbol` when using `symbol` for filtering redirect responses. It highlights the potential issues that arise when external modules cannot be correctly named.\nSOURCE: https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nerror TS4058: Return type of exported function has or is using name 'redirectSymbol' from external module \"node_modules/...\" but cannot be named.\n```\n\n----------------------------------------\n\nTITLE: Configuring v7_relativeSplatPath Flag\nDESCRIPTION: Examples showing how to enable the v7_relativeSplatPath flag in both BrowserRouter and createBrowserRouter configurations.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/upgrading/v6.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<BrowserRouter\n  future={{\n    v7_relativeSplatPath: true,\n  }}\n/>\n```\n\nLANGUAGE: typescript\nCODE:\n```\ncreateBrowserRouter(routes, {\n  future: {\n    v7_relativeSplatPath: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Globals for Fetch API\nDESCRIPTION: This code snippet demonstrates how to install globals for the Fetch API when using a custom app server. This is required because the responsibility for installing fetch globals has been moved to the app server. The `installGlobals` function from `@remix-run/node` is used to achieve this.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router-serve/CHANGELOG.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { installGlobals } from \"@remix-run/node\";\n\ninstallGlobals();\n```\n\n----------------------------------------\n\nTITLE: Client-Side Logging Middleware (TSX)\nDESCRIPTION: This TSX snippet illustrates a simple client-side logging middleware function in React Router. It measures the navigation time and logs the URL and duration to the console.  It showcases the use of the `next` function to proceed with remaining middlewares and route loaders.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router/CHANGELOG.md#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst clientLogger: Route.unstable_ClientMiddlewareFunction = async (\n  { request },\n  next\n) => {\n  let start = performance.now();\n\n  // Run the remaining middlewares and all route loaders\n  await next();\n\n  let duration = performance.now() - start;\n  console.log(`Navigated to ${request.url} (${duration}ms)`);\n};\n```\n\n----------------------------------------\n\nTITLE: Configure Vite for Static Hosting\nDESCRIPTION: This code snippet configures the Vite build tool for static hosting of a React Router application. It sets the `ssr` flag to `false` to disable server-side rendering, ensuring the application can be served statically. It requires the `@react-router/dev/vite` plugin and the `vite` package.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/framework/deploying.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport react from \"@react-router/dev/vite\";\nimport { defineConfig } from \"vite\";\nexport default defineConfig({\n  plugins: [react({ ssr: false })],\n});\n```\n\n----------------------------------------\n\nTITLE: Client-Side Logging Middleware in React Router\nDESCRIPTION: This code snippet presents an example of a client-side logging middleware function in React Router. It logs the navigation URL and duration to the console after the route loaders have completed.  It uses the `performance` API to calculate the navigation duration.\nSOURCE: https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst clientLogger: Route.unstable_ClientMiddlewareFunction = async (\n  { request },\n  next\n) => {\n  let start = performance.now();\n\n  // Run the remaining middlewares and all route loaders\n  await next();\n\n  let duration = performance.now() - start;\n  console.log(`Navigated to ${request.url} (${duration}ms)`);\n};\n```\n\n----------------------------------------\n\nTITLE: Import Updates for Vite Plugin\nDESCRIPTION: This snippet shows the updated imports required when migrating from the deprecated `unstable_createViteServer` and `unstable_loadViteServerBuild` to the new `unstable_viteServerBuildModuleId`. It highlights the removal of the old functions and the addition of the new module ID import.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router-dev/CHANGELOG.md#_snippet_18\n\nLANGUAGE: diff\nCODE:\n```\n -import {\n  -  unstable_createViteServer,\n  -  unstable_loadViteServerBuild,\n  -} from \"@remix-run/dev\";\n  +import { unstable_viteServerBuildModuleId } from \"@remix-run/dev\";\n```\n\n----------------------------------------\n\nTITLE: Defining Routes with element/errorElement - JSON\nDESCRIPTION: Illustrates how to define routes using the `element` and `errorElement` properties within a JSON-like array structure. This method provides a data-oriented way to configure routes, associating React Elements with specific paths for rendering and error handling.\nSOURCE: https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#_snippet_49\n\nLANGUAGE: JSX\nCODE:\n```\n// Both of these work the same:\nconst elementRoutes = [{\n  path: '/',\n  element: <Home />,\n  errorElement: <HomeError />,\n}]\n\nfunction Home() { ... }\nfunction HomeError() { ... }\n```\n\n----------------------------------------\n\nTITLE: Creating a Remix project with Cloudflare template (Shell)\nDESCRIPTION: This command creates a new Remix project using the `unstable-vite-cloudflare` template. It leverages the `create-remix` CLI tool to scaffold a project pre-configured for Cloudflare Pages.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router-dev/CHANGELOG.md#_snippet_6\n\nLANGUAGE: shellscript\nCODE:\n```\nnpx create-remix@latest --template remix-run/remix/templates/unstable-vite-cloudflare\n```\n\n----------------------------------------\n\nTITLE: Defining Routes with Component/ErrorBoundary - JSX\nDESCRIPTION: Demonstrates defining routes using the new `Component` and `ErrorBoundary` properties in JSX syntax with `createRoutesFromElements`. This approach allows directly specifying React Components instead of React Elements for route rendering and error handling. It achieves the same result as the `element`/`errorElement` approach.\nSOURCE: https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#_snippet_48\n\nLANGUAGE: JSX\nCODE:\n```\nconst componentRoutes = createRoutesFromElements(\n  <Route path='/' Component={Home} ErrorBoundary={HomeError} />\n);\n\nfunction Home() { ... }\nfunction HomeError() { ... }\n```\n\n----------------------------------------\n\nTITLE: NavLink with View Transitions (JSX)\nDESCRIPTION: Shows how to use `<NavLink unstable_viewTransition>` for view transitions, automatically adding a `transitioning` class to the `<a>` element during the transition.\nSOURCE: https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#_snippet_40\n\nLANGUAGE: jsx\nCODE:\n```\n<NavLink to={to} unstable_viewTransition>\n  <img src={src} alt={alt} />\n</NavLink>\n```\n\n----------------------------------------\n\nTITLE: Implementing Splat Routes in React Router\nDESCRIPTION: This code snippet shows the file structure for splat routes in React Router. Splat routes use the $ symbol to match the rest of a URL, including slashes.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/file-route-conventions.md#2025-04-22_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n app/\n├── routes/\n│   ├── _index.tsx\n│   ├── $.tsx\n│   ├── about.tsx\n│   └── files.$.tsx\n└── root.tsx\n```\n\n----------------------------------------\n\nTITLE: Server-Side Authentication Middleware with Redirect in React Router\nDESCRIPTION: This code snippet provides an example of a server-side authentication middleware function in React Router. It checks if a user is authenticated and redirects to the login page if not. It leverages the `redirect` function to short-circuit remaining processing.\nSOURCE: https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { sessionContext } from \"../context\";\nconst serverAuth: Route.unstable_MiddlewareFunction = (\n  { request, params, context },\n  next\n) => {\n  let session = context.get(sessionContext);\n  let user = session.get(\"user\");\n  if (!user) {\n    session.set(\"returnTo\", request.url);\n    throw redirect(\"/login\", 302);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Adding HydrateFallback Component to Root Route in React Router\nDESCRIPTION: This code demonstrates how to add a HydrateFallback component to the root route in React Router. The HydrateFallback component provides a loading UI that is rendered into the index.html file at build time, improving the initial user experience.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/spa.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport LoadingScreen from \"./components/loading-screen\";\n\nexport function Layout() {\n  return <html>{/*...*/}</html>;\n}\n\nexport function HydrateFallback() {\n  return <LoadingScreen />;\n}\n\nexport default function App() {\n  return <Outlet />;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating useLoaderData Hook Usage (TypeScript)\nDESCRIPTION: This code snippet shows how to update the usage of the `useLoaderData` hook to leverage automatic type inference based on the loader function's return type. It involves passing `typeof loader` as a type variable to the hook. This allows the hook to infer the type of the loaded data without requiring a manual type assertion.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router-node/CHANGELOG.md#_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n  - let data = useLoaderData() as LoaderData;\n  + let data = useLoaderData<typeof loader>();\n```\n\n----------------------------------------\n\nTITLE: Single Fetch Data Strategy Implementation\nDESCRIPTION: Advanced implementation showing how to handle single fetch scenarios with custom error handling and data processing.\nSOURCE: https://github.com/remix-run/react-router/blob/main/decisions/0003-data-strategy.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nasync function dataStrategy({ matches }) {\n  let singleFetchData = await makeSingleFetchCall()\n  let results = [];\n  for (let match of matches) {\n    let result = await m.resolve(() => {\n      if (singleFetchData.errors?.[m.route.id]) {\n        return {\n          type: 'error',\n          result: singleFetchData.errors?.[m.route.id]\n        }\n      }\n      return {\n        type: 'data',\n        result: singleFetchData.data?.[m.route.id]\n      }\n    });\n    results.push(result);\n  });\n  return results;\n}\n```\n\n----------------------------------------\n\nTITLE: Adapting Remix v1 Route Conventions\nDESCRIPTION: This code snippet demonstrates how to adapt Remix v1 route conventions to React Router using `@react-router/remix-config-routes-adapter` and `@remix-run/v1-route-convention`.  This is useful when migrating from Remix v2 to React Router v7 and maintaining existing route structures.\nSOURCE: https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#_snippet_30\n\nLANGUAGE: ts\nCODE:\n```\n// app/routes.ts\nimport { type RouteConfig } from \"@react-router/dev/routes\";\nimport { remixConfigRoutes } from \"@react-router/remix-config-routes-adapter\";\nimport { createRoutesFromFolders } from \"@remix-run/v1-route-convention\";\n\nexport const routes: RouteConfig = remixConfigRoutes(async (defineRoutes) => {\n  return createRoutesFromFolders(defineRoutes, {\n    ignoredFilePatterns: [\"**/.*\", \"**/*.css\"],\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Unstable Middleware in React Router\nDESCRIPTION: This code snippet demonstrates how to enable the `unstable_middleware` feature in React Router by setting the corresponding flag and types in the `react-router.config.ts` file. It involves modifying the `Future` interface and the `future` configuration.\nSOURCE: https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Config } from \"@react-router/dev/config\";\nimport type { Future } from \"react-router\";\n\ndeclare module \"react-router\" {\n  interface Future {\n    unstable_middleware: true; // 👈 Enable middleware types\n  }\n}\n\nexport default {\n  future: {\n    unstable_middleware: true, // 👈 Enable middleware\n  },\n} satisfies Config;\n```\n\n----------------------------------------\n\nTITLE: Submitting FormData using useSubmit hook - JSX\nDESCRIPTION: This example demonstrates the default behavior of `useSubmit` which encodes data into `FormData` with `application/x-www-form-urlencoded` encoding if no `encType` is specified. This behavior is slated to change in v7.\nSOURCE: https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#_snippet_44\n\nLANGUAGE: JSX\nCODE:\n```\nfunction Component() {\n  let navigation = useNavigation();\n  let submit = useSubmit();\n  submit({ key: \"value\" }, { method: \"post\" });\n  // navigation.formEncType => \"application/x-www-form-urlencoded\"\n  // navigation.formData    => FormData instance\n}\n\nasync function action({ request }) {\n  // request.headers.get(\"Content-Type\") => \"application/x-www-form-urlencoded\"\n  // await request.formData()            => FormData instance\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Route Handle in React Router\nDESCRIPTION: Shows how to define a route handle, which can be used to add custom data to route matches for use in abstractions like breadcrumbs.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/framework/route-module.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nexport const handle = {\n  its: \"all yours\",\n};\n```\n\n----------------------------------------\n\nTITLE: Importing React Router APIs\nDESCRIPTION: This code snippet illustrates how to import runtime-specific and runtime-agnostic APIs from React Router in v7. Runtime-specific APIs are imported from the runtime packages (e.g., `@react-router/node`), while common APIs are imported directly from `react-router`. This avoids unnecessary dependencies.\nSOURCE: https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#_snippet_24\n\nLANGUAGE: jsx\nCODE:\n```\n// Runtime-specific APIs\nimport { createFileSessionStorage } from \"@react-router/node\";\n// Runtime-agnostic APIs\nimport { redirect, useLoaderData } from \"react-router\";\n```\n\n----------------------------------------\n\nTITLE: Migrating Config-Based Routes from Remix\nDESCRIPTION: This diff demonstrates the minimal code changes required when adapting config-based routes from Remix to React Router by refactoring the `routes` definition.  It shows how to directly use the `route` function within the `RouteConfig` array instead of relying on `remixConfigRoutes`.\nSOURCE: https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#_snippet_31\n\nLANGUAGE: diff\nCODE:\n```\n// app/routes.ts\n-import { type RouteConfig } from \"@react-router/dev/routes\";\n+import { type RouteConfig, route } from \"@react-router/dev/routes\";\n-import { remixConfigRoutes } from \"@react-router/remix-config-routes-adapter\";\n\n-export const routes: RouteConfig = remixConfigRoutes(async (defineRoutes) => {\n-  defineRoutes((route) => {\n-    route(\"/parent\", \"./routes/parent.tsx\", () => [\n-      route(\"/child\", \"./routes/child.tsx\"),\n-    ]);\n-  });\n-});\n+export const routes: RouteConfig = [\n+  route(\"/parent\", \"./routes/parent.tsx\", [\n+    route(\"/child\", \"./routes/child.tsx\"),\n+  ]),\n+];\n```\n\n----------------------------------------\n\nTITLE: Defining the DataStrategy Function Interface in TypeScript\nDESCRIPTION: This code shows the type definition for the dataStrategy function which accepts matches to load and returns an array of results. It includes the interfaces for the function arguments.\nSOURCE: https://github.com/remix-run/react-router/blob/main/decisions/0003-data-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction dataStrategy(arg: DataStrategyFunctionArgs): DataResult[];\n\ninterface DataStrategyFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {\n  matches: AgnosticDataStrategyMatch[];\n}\n\ninterface DataFunctionArgs<Context> {\n  request: Request;\n  params: Params;\n  context?: Context;\n}\n```\n\n----------------------------------------\n\nTITLE: Building React Router Project for Production\nDESCRIPTION: Command to create a production build of the React Router application.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/create-react-router/__tests__/fixtures/basic/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Static Data Loading with React Router\nDESCRIPTION: This snippet illustrates static data loading in React Router using a loader function. It shows how to fetch data from a CSV file during the production build process.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/framework/data-loading.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// route(\"products/:pid\", \"./product.tsx\");\nimport type { Route } from \"./+types/product\";\n\nexport async function loader({ params }: Route.LoaderArgs) {\n  let product = await getProductFromCSVFile(params.pid);\n  return product;\n}\n\nexport default function Product({\n  loaderData,\n}: Route.ComponentProps) {\n  const { name, description } = loaderData;\n  return (\n    <div>\n      <h1>{name}</h1>\n      <p>{description}</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing RouterProvider without Vite\nDESCRIPTION: This snippet shows how to import RouterProvider from react-router/dom when you are not using the Vite plugin and are manually calling createBrowserRouter/createHashRouter. This import ensures the proper component is used for DOM environments with ReactDOM.flushSync().\nSOURCE: https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RouterProvider } from \"react-router/dom\"\n```\n\n----------------------------------------\n\nTITLE: Creating Initial Context Values in Custom Servers (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to create initial context values for React Router in a custom server using `unstable_createContext` and `unstable_InitialContext`. It illustrates passing adapter-specific context from the server layer to the React Router context.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router/CHANGELOG.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nlet adapterContext = unstable_createContext<MyAdapterContext>();\n\nfunction getLoadContext(req, res): unstable_InitialContext {\n  let map = new Map();\n  map.set(adapterContext, getAdapterContext(req));\n  return map;\n}\n```\n\n----------------------------------------\n\nTITLE: Using unstable_InitialContext with getLoadContext in React Router\nDESCRIPTION: This snippet demonstrates how to use `unstable_InitialContext` with a custom server's `getLoadContext` function in React Router.  It illustrates how to pass initial context values from the server adapter layer using a Map.\nSOURCE: https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nlet adapterContext = unstable_createContext<MyAdapterContext>();\n\nfunction getLoadContext(req, res): unstable_InitialContext {\n  let map = new Map();\n  map.set(adapterContext, getAdapterContext(req));\n  return map;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Add to Cart Functionality with Progressive Enhancement in React\nDESCRIPTION: This snippet demonstrates a simple Add to Cart button implementation using React Router's Form component. It works without JavaScript and can be progressively enhanced with client-side behavior.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/explanation/progressive-enhancement.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport function AddToCart({ id }) {\n  return (\n    <Form method=\"post\" action=\"/add-to-cart\">\n      <input type=\"hidden\" name=\"id\" value={id} />\n      <button type=\"submit\">Add To Cart</button>\n    </Form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Route Module Example (TSX)\nDESCRIPTION: This is a basic example of a React Router route module using TypeScript. It imports a component, defines a `clientLoader` function to fetch data, and exports a default component that uses the fetched data.\nSOURCE: https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MassiveComponent } from \"~/components\";\n\nexport async function clientLoader() {\n  return await fetch(\"https://example.com/api\").then((response) =>\n    response.json()\n  );\n}\n\nexport default function Component({ loaderData }) {\n  return <MassiveComponent data={loaderData} />;\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for View Transitions\nDESCRIPTION: Demonstrates the CSS required to apply a view transition name to an image during a view transition when using `<NavLink unstable_viewTransition>`\nSOURCE: https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#_snippet_41\n\nLANGUAGE: css\nCODE:\n```\na.transitioning img {\n  view-transition-name: \"image-expand\";\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Current Path Parameter Type Inference in TypeScript\nDESCRIPTION: Example showing how path parameters are currently typed in Remix, requiring manual specification of parameter names.\nSOURCE: https://github.com/remix-run/react-router/blob/main/decisions/0012-type-inference.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst params = useParams<\"id\">();\nparams.id;\n```\n\n----------------------------------------\n\nTITLE: MemoryRouter Props Definition - React Router\nDESCRIPTION: Lists the available props for the MemoryRouter component including basename, children, initialEntries, and initialIndex. This is a memory-based router implementation that stores navigation history in memory rather than using the browser's history API.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/declarative-routers/MemoryRouter.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<MemoryRouter\n  basename={string}\n  children={node}\n  initialEntries={array}\n  initialIndex={number}\n/>\n```\n\n----------------------------------------\n\nTITLE: Minimal Route Config with File System Routes\nDESCRIPTION: This code snippet demonstrates how to create a minimal route config that reproduces the default Remix setup using `@react-router/fs-routes`.  The `flatRoutes` function generates routes based on the file system structure.\nSOURCE: https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#_snippet_28\n\nLANGUAGE: ts\nCODE:\n```\n// app/routes.ts\nimport { type RouteConfig } from \"@react-router/dev/routes\";\nimport { flatRoutes } from \"@react-router/fs-routes\";\n\nexport const routes: RouteConfig = flatRoutes();\n```\n\n----------------------------------------\n\nTITLE: Replacing Vite Plugin Manifest Option\nDESCRIPTION: This code snippet shows how to replace the `manifest` option in the React Router Vite plugin with a `buildEnd` hook.  The `buildEnd` hook is given the `buildManifest` argument and allows you to write any logic depending on the build manifest directly within the hook. The example demonstrates writing the manifest to disk.\nSOURCE: https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#_snippet_26\n\nLANGUAGE: js\nCODE:\n```\n// react-router.config.ts\nimport { type Config } from \"@react-router/dev/config\";\nimport { writeFile } from \"node:fs/promises\";\n\nexport default {\n  async buildEnd({ buildManifest }) {\n    await writeFile(\n      \"build/manifest.json\",\n      JSON.stringify(buildManifest, null, 2),\n      \"utf-8\"\n    );\n  },\n} satisfies Config;\n```\n\n----------------------------------------\n\nTITLE: Absolute URLs in Link Component - TypeScript\nDESCRIPTION: Demonstrates how the `<Link>` component in React Router handles absolute URLs. If the URL refers to the current origin, it performs a client-side navigation. If it points to a different origin, a full document request is initiated.\nSOURCE: https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#_snippet_53\n\nLANGUAGE: TypeScript\nCODE:\n```\n<Link to=\"https://neworigin.com/some/path\">    {/* Document request */}\n<Link to=\"//neworigin.com/some/path\">          {/* Document request */}\n<Link to=\"https://www.currentorigin.com/path\"> {/* Client-side navigation */}\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Handler in React Router\nDESCRIPTION: Custom error handler function for React Router server-side errors. Allows control over error logging and reporting to external services. Includes logic to avoid logging aborted requests.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/explanation/special-files.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nexport function handleError(\n  error: unknown,\n  {\n    request,\n    params,\n    context,\n  }: LoaderFunctionArgs | ActionFunctionArgs\n) {\n  if (!request.signal.aborted) {\n    sendErrorToErrorReportingService(error);\n    console.error(formatErrorForJsonLogging(error));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Request-Specific Middleware Logic in TypeScript\nDESCRIPTION: Example showing middleware behavior differences between document and data submissions. The code demonstrates a pattern that works differently for POST requests in document submissions versus data submissions with revalidations.\nSOURCE: https://github.com/remix-run/react-router/blob/main/decisions/0014-context-middleware.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nfunction weirdMiddleware({ request }) {\n  if (request.method === \"POST\") {\n    // ✅ Runs before the action/loaders on document submissions\n    // ✅ Runs before the action on data submissions\n    // ❌ Does not runs before the loaders on data submission revalidations\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: useNavigate Hook Signature\nDESCRIPTION: Shows the TypeScript signature for the useNavigate hook, which returns a NavigateFunction that can be used for programmatic navigation.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/hooks/useNavigate.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nuseNavigate(): NavigateFunction\n```\n\n----------------------------------------\n\nTITLE: Configuring Framework Mode in React Router\nDESCRIPTION: This snippet demonstrates how to configure Framework Mode in React Router. It shows the setup for both Remix and Next.js frameworks, highlighting the differences in configuration.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/framework/index.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createBrowserRouter } from \"react-router-dom\";\n\n// Remix\nconst router = createBrowserRouter(routes, {\n  future: {\n    v7_partialHydration: true,\n  },\n});\n\n// Next.js\nconst router = createBrowserRouter(routes, {\n  basename: process.env.BASE_PATH,\n  future: {\n    v7_partialHydration: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Hydrate Fallback in React Router\nDESCRIPTION: Shows how to implement a HydrateFallback component that renders during initial page load while waiting for the client loader to finish.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/framework/route-module.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nexport async function clientLoader() {\n  const data = await fakeLoadLocalGameData();\n  return data;\n}\n\nexport function HydrateFallback() {\n  return <p>Loading Game...</p>;\n}\n\nexport default function Component({ loaderData }) {\n  return <Game data={loaderData} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Split Route Module - clientLoader (TSX)\nDESCRIPTION: This is the split `clientLoader` module from the original route module, created when the `unstable_splitRouteModules` flag is enabled. It contains only the `clientLoader` function, allowing it to be downloaded and executed independently.\nSOURCE: https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nexport async function clientLoader() {\n  return await fetch(\"https://example.com/api\").then((response) =>\n    response.json()\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Build React App with Vite\nDESCRIPTION: This command builds the React application using Vite. It compiles the application's source code into static assets that can be deployed to a static hosting provider. It depends on Vite being configured correctly.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/framework/deploying.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nnpx vite build\n```\n\n----------------------------------------\n\nTITLE: Migrating Cloudflare Preset in Remix Vite Config\nDESCRIPTION: This code snippet demonstrates the breaking change in Remix Vite plugin configuration related to Cloudflare support. The `unstable_cloudflarePreset` has been removed and replaced with a new Vite plugin, `cloudflareDevProxyVitePlugin`. This requires updating the Vite configuration file.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router-dev/CHANGELOG.md#_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n   import {\n      unstable_vitePlugin as remix,\n  -   unstable_cloudflarePreset as cloudflare,\n  +   cloudflareDevProxyVitePlugin as remixCloudflareDevProxy,\n    } from \"@remix-run/dev\";\n    import { defineConfig } from \"vite\";\n\n    export default defineConfig({\n      plugins: [\n  +     remixCloudflareDevProxy(),\n  +     remix(),\n  -     remix({\n  -       presets: [cloudflare()],\n  -     }),\n      ],\n  -   ssr: {\n  -     resolve: {\n  -       externalConditions: [\"workerd\", \"worker\"],\n  -     },\n  -   },\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring Router Future Flags\nDESCRIPTION: Examples of enabling various future flags including v7_startTransition, v7_fetcherPersist, v7_normalizeFormMethod, and v7_partialHydration.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/upgrading/v6.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ncreateBrowserRouter(routes, {\n  future: {\n    v7_startTransition: true,\n    v7_fetcherPersist: true,\n    v7_normalizeFormMethod: true,\n    v7_partialHydration: true,\n    v7_skipActionErrorRevalidation: true\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Edit Contact Route to Route Configuration (TypeScript)\nDESCRIPTION: This snippet shows how to add the edit contact route to the route configuration file. It specifies the path and the corresponding route file.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/tutorials/address-book.md#2025-04-22_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nexport default [\n  layout(\"layouts/sidebar.tsx\", [\n    index(\"routes/home.tsx\"),\n    route(\"contacts/:contactId\", \"routes/contact.tsx\"),\n    route(\n      \"contacts/:contactId/edit\",\n      \"routes/edit-contact.tsx\"\n    ),\n  ]),\n  route(\"about\", \"routes/about.tsx\"),\n] satisfies RouteConfig;\n```\n\n----------------------------------------\n\nTITLE: Styling NavLink States with CSS in React Router\nDESCRIPTION: This CSS snippet shows how to style different states of NavLink components, including active, pending, and transitioning states. It demonstrates the default class names applied by NavLink.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/framework/navigating.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\na.active {\n  color: red;\n}\n\na.pending {\n  animate: pulse 1s infinite;\n}\n\na.transitioning {\n  /* css transition is running */\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Lazy Loading in React Router\nDESCRIPTION: This example demonstrates how to implement lazy loading for route components, loaders, and actions using the lazy property in route definitions.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/data/custom.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\ncreateBrowserRouter([\n  {\n    path: \"/show/:showId\",\n    lazy: {\n      loader: async () =>\n        (await import(\"./show.loader.js\")).loader,\n      action: async () =>\n        (await import(\"./show.action.js\")).action,\n      Component: async () =>\n        (await import(\"./show.component.js\")).Component,\n    },\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Importing HydratedRouter in Vite Client Entry\nDESCRIPTION: This snippet demonstrates how to import HydratedRouter in your entry.client.tsx file when using the Vite plugin with React Router. This import is necessary to ensure proper handling of ReactDOM.flushSync() in DOM environments.\nSOURCE: https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HydratedRouter } from 'react-router/dom'\n```\n\n----------------------------------------\n\nTITLE: Defining createHashRouter Function Signature in TypeScript\nDESCRIPTION: This code snippet shows the TypeScript signature for the createHashRouter function. It takes routes and options as parameters and returns a DataRouter object.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/data-routers/createHashRouter.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ncreateHashRouter(routes, opts): DataRouter\n```\n\n----------------------------------------\n\nTITLE: Implementing redirect in React Router Action\nDESCRIPTION: This example shows how to use the redirect function in a route action. It creates a new project and then redirects to the project's page after creation.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/framework/navigating.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { redirect } from \"react-router\";\n\nexport async function action({ request }) {\n  let formData = await request.formData();\n  let project = await createProject(formData);\n  return redirect(`/projects/${project.id}`);\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing URL Path with React Router parsePath Function\nDESCRIPTION: Function signature for parsePath that takes a URL path string and returns an object containing the separated pathname, search, and hash components. Returns a Partial type containing the parsed components.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/utils/parsePath.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nparsePath(path): Partial\n```\n\n----------------------------------------\n\nTITLE: Updating Vite config for MDX plugin ordering (Diff)\nDESCRIPTION: This diff demonstrates the required plugin ordering change in `vite.config.ts` to ensure MDX transpilation occurs before the Remix plugin processes the files. The MDX plugin must come before the Remix plugin in the `plugins` array.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router-dev/CHANGELOG.md#_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n  import mdx from \"@mdx-js/rollup\";\n  import { unstable_vitePlugin as remix } from \"@remix-run/dev\";\n  import { defineConfig } from \"vite\";\n\n  export default defineConfig({\n    plugins: [\n  +     mdx(),\n        remix()\n  -     mdx(),\n    ],\n  });\n```\n\n----------------------------------------\n\nTITLE: Creating StackBlitz Preview Link for React Router Outlet Modal Example\nDESCRIPTION: This code snippet provides a markdown link to open the outlet modal example in StackBlitz. It uses an SVG image for the 'Open in StackBlitz' button and links to the specific GitHub repository and file.\nSOURCE: https://github.com/remix-run/react-router/blob/main/examples/modal-route-with-outlet/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![Open in StackBlitz](https://developer.stackblitz.com/img/open_in_stackblitz.svg)](https://stackblitz.com/github/remix-run/react-router/tree/main/examples/modal-route-with-outlet?file=src/App.tsx)\n```\n\n----------------------------------------\n\nTITLE: Configuring Root Directory for Routes in React Router\nDESCRIPTION: Example of using the rootDirectory option to specify a custom directory for routes relative to the app directory.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/file-route-conventions.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type RouteConfig } from \"@react-router/dev/routes\";\nimport { flatRoutes } from \"@react-router/fs-routes\";\n\nexport default flatRoutes({\n  rootDirectory: \"file-routes\",\n}) satisfies RouteConfig;\n```\n\n----------------------------------------\n\nTITLE: Updating AppLoadContext Types for React Router v7\nDESCRIPTION: This snippet shows how to update AppLoadContext types after adopting the new type generation in React Router v7. It removes the temporary augmentations for LoaderFunctionArgs and ActionFunctionArgs.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/upgrading/remix.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module \"react-router\" {\n  // Your AppLoadContext used in v2\n  interface AppLoadContext {\n    whatever: string;\n  }\n}\n\nexport {}; // necessary for TS to treat this as a module\n```\n\n----------------------------------------\n\nTITLE: useSearchParams Function Signature in React Router\nDESCRIPTION: The type signature of the useSearchParams hook showing it accepts an optional defaultInit parameter and returns undefined.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/hooks/useSearchParams.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nuseSearchParams(defaultInit): undefined\n```\n\n----------------------------------------\n\nTITLE: Using NavLink with Render Props for State-Based Styling\nDESCRIPTION: Demonstrates how to use NavLink with className function prop to conditionally apply styles based on link states.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/components/NavLink.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<NavLink\n  to=\"/messages\"\n  className={({ isActive, isPending }) =>\n    isPending ? \"pending\" : isActive ? \"active\" : \"\"\n  }\n>\n  Messages\n</NavLink>\n```\n\n----------------------------------------\n\nTITLE: Creating Route Stubs in React Router\nDESCRIPTION: Function signature for createRoutesStub that creates route stubs. Used in framework and data modes, it takes routes and context parameters and returns undefined.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/utils/createRoutesStub.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ncreateRoutesStub(routes, context): undefined\n```\n\n----------------------------------------\n\nTITLE: Defining Meta Tags in React Router\nDESCRIPTION: Demonstrates how to specify meta tags to be rendered in the document head using the meta function in a route module.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/framework/route-module.md#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nexport function meta() {\n  return [\n    { title: \"Very cool app\" },\n    {\n      property: \"og:title\",\n      content: \"Very cool app\",\n    },\n    {\n      name: \"description\",\n      content: \"This app is the best\",\n    },\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Running React Router in Production\nDESCRIPTION: Command to start the application in production mode after building.\nSOURCE: https://github.com/remix-run/react-router/blob/main/tutorials/address-book/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Typesafety with React Router Route Modules\nDESCRIPTION: This snippet demonstrates how to access types for route modules, which are generated by React Router. It shows how to import types for `LoaderArgs` and `ComponentProps` from `./+types.<route filename without extension>`. This enables type inference for `Params`, `LoaderData`, and `ActionData` within route modules.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router-dev/CHANGELOG.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// app/routes/product.tsx\nimport type * as Route from \"./+types.product\";\n\nexport function loader({ params }: Route.LoaderArgs) {}\n\nexport default function Component({ loaderData }: Route.ComponentProps) {}\n```\n\n----------------------------------------\n\nTITLE: Markdown Configuration Header\nDESCRIPTION: Frontmatter configuration for the documentation page defining the title and TOC settings.\nSOURCE: https://github.com/remix-run/react-router/blob/main/examples/auth-router-provider/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Authentication (using RouterProvider)\ntoc: false\n---\n```\n\n----------------------------------------\n\nTITLE: Shared Code Module (TSX)\nDESCRIPTION: This module contains the shared code that was previously within the route module. Extracting the shared code into its own module allows the original route module to be split successfully.\nSOURCE: https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nexport const shared = () => console.log(\"hello\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Type-Safe Route Component in React Router\nDESCRIPTION: Shows how to implement a type-safe route component with loader function and component props using generated types. Demonstrates usage of route-specific types for params and loader data.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/explanation/type-safety.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Route } from \"./+types/product\";\n\nexport function loader({ params }: Route.LoaderArgs) {\n  return { planet: `world #${params.id}` };\n}\n\nexport default function Component({\n  loaderData,\n}: Route.ComponentProps) {\n  return <h1>Hello, {loaderData.planet}!</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Vite Server Creation Diff\nDESCRIPTION: This code snippet illustrates the changes required when creating a Vite server in middleware mode using the updated Remix Vite plugin. It replaces the deprecated `unstable_createViteServer` function with Vite's native `createServer` method, configuring it for middleware mode.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router-dev/CHANGELOG.md#_snippet_16\n\nLANGUAGE: diff\nCODE:\n```\n const vite =\n    process.env.NODE_ENV === \"production\"\n      ? undefined\n  -    : await unstable_createViteServer();\n  +    : await import(\"vite\").then(({ createServer }) =>\n  +        createServer({\n  +          server: {\n  +            middlewareMode: true,\n  +          },\n  +        })\n  +      );\n```\n\n----------------------------------------\n\nTITLE: React Router Configuration\nDESCRIPTION: Basic configuration for React Router defining app directory and SSR settings\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/upgrading/component-routes.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Config } from \"@react-router/dev/config\";\n\nexport default {\n  appDirectory: \"src\",\n  ssr: false,\n} satisfies Config;\n```\n\n----------------------------------------\n\nTITLE: Set NODE_EXTRA_CA_CERTS environment variable\nDESCRIPTION: This command sets the NODE_EXTRA_CA_CERTS environment variable to point to the rootCA.pem file generated by mkcert. This informs Node.js about the location of your local CA certificates, enabling secure connections with self-signed certificates.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router-dev/CHANGELOG.md#_snippet_27\n\nLANGUAGE: sh\nCODE:\n```\nexport NODE_EXTRA_CA_CERTS=\"$(mkcert -CAROOT)/rootCA.pem\"\n```\n\n----------------------------------------\n\nTITLE: Illustrating Naming Requirements for Function Components in React Fast Refresh\nDESCRIPTION: This code snippet demonstrates the naming requirements for function components to work with React Fast Refresh. It shows that named function components and named arrow functions are supported, while anonymous functions are not.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/explanation/hot-module-replacement.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport default () => {}; // ❌\nexport default function () {} // ❌\n\nconst ComponentA = () => {};\nexport default ComponentA; // ✅\n\nexport default function ComponentB() {} // ✅\n```\n\n----------------------------------------\n\nTITLE: Configuring Relative Path Behavior\nDESCRIPTION: Demonstrates different relative path resolution behaviors for links using the relative prop.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/components/NavLink.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<Link to=\"..\" /> // default: \"route\"\n<Link relative=\"route\" />\n<Link relative=\"path\" />\n```\n\n----------------------------------------\n\nTITLE: Server-side Signup Handler\nDESCRIPTION: Backend endpoint implementation for handling signup requests with validation.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/explanation/state-management.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nexport async function signupHandler(request: Request) {\n  const errors = await validateSignupRequest(request);\n  if (errors) {\n    return { ok: false, errors: errors };\n  }\n  await signupUser(request);\n  return { ok: true, errors: null };\n}\n```\n\n----------------------------------------\n\nTITLE: Client Entry Configuration\nDESCRIPTION: Client-side entry point setup with HydratedRouter component\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/upgrading/component-routes.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport { HydratedRouter } from \"react-router/dom\";\nimport \"./index.css\";\n\nReactDOM.hydrateRoot(\n  document,\n  <React.StrictMode>\n    <HydratedRouter />\n  </React.StrictMode>\n);\n```\n\n----------------------------------------\n\nTITLE: Using unstable_useViewTransitionState Hook (JSX)\nDESCRIPTION: Illustrates the usage of `unstable_useViewTransitionState` hook to determine if a view transition is in progress. This allows applying dynamic styles or classes based on the transition state.\nSOURCE: https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#_snippet_39\n\nLANGUAGE: jsx\nCODE:\n```\nfunction ImageLink(to, src, alt) {\n  const isTransitioning = unstable_useViewTransitionState(to);\n  return (\n    <Link to={to} unstable_viewTransition>\n      <img\n        src={src}\n        alt={alt}\n        style={{\n          viewTransitionName: isTransitioning ? \"image-expand\" : \"\",\n        }}\n      />\n    </Link>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Starting React Router Development Server\nDESCRIPTION: Command to start the application in development mode with hot reload capabilities for asset rebuilding on file changes.\nSOURCE: https://github.com/remix-run/react-router/blob/main/tutorials/address-book/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Hydrating Lazy Routes in DIY SSR React Router Application\nDESCRIPTION: This code snippet demonstrates how to create a browser router with hydration data for lazy-loaded routes in a DIY SSR application. It highlights the potential issue where the router has the data but not the route definition during hydration.\nSOURCE: https://github.com/remix-run/react-router/blob/main/decisions/0002-lazy-route-modules.md#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nconst routes = [{\n  path: '/',\n  lazy: () => import(\"./route\"),\n}]\nlet router = createBrowserRouter(routes, {\n  hydrationData: window.__hydrationData,\n});\n\n// ⚠️ At this point, the router has the data but not the route definition!\n\nReactDOM.hydrateRoot(\n  document.getElementById(\"app\")!,\n  <RouterProvider router={router} fallbackElement={null} />\n);\n```\n\n----------------------------------------\n\nTITLE: Defining the HandlerResult Interface for DataStrategy\nDESCRIPTION: Definition of the HandlerResult interface which simplifies the output requirements for dataStrategy implementations. It consists of a type field and a result value that can be processed by React Router internally.\nSOURCE: https://github.com/remix-run/react-router/blob/main/decisions/0003-data-strategy.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface HandlerResult {\n  type: ResultType.success | ResultType.error;\n  result: any;\n}\n```\n\n----------------------------------------\n\nTITLE: Route Module Importing Shared Code (TSX)\nDESCRIPTION: This is the modified route module that imports the shared code from the `shared.tsx` module. This allows React Router to split the module into separate chunks for the `clientLoader` and the main component.\nSOURCE: https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MassiveComponent } from \"~/components\";\nimport { shared } from \"./shared\";\n\nexport async function clientLoader() {\n  shared();\n  return await fetch(\"https://example.com/api\").then((response) =>\n    response.json()\n  );\n}\n\nexport default function Component({ loaderData }) {\n  shared();\n  return <MassiveComponent data={loaderData} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Building React Router for Production\nDESCRIPTION: Command to create a production build of the React Router application.\nSOURCE: https://github.com/remix-run/react-router/blob/main/tutorials/address-book/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Create tailwind.css\nDESCRIPTION: This CSS snippet demonstrates how to create the new `app/tailwind.css` file with the required Tailwind directives.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router-dev/CHANGELOG.md#_snippet_35\n\nLANGUAGE: css\nCODE:\n```\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\n----------------------------------------\n\nTITLE: Server-Side Logging Middleware in React Router\nDESCRIPTION: This code snippet illustrates a server-side logging middleware function in React Router. It logs the navigation URL and duration and allows the middleware to modify or replace the `Response` object. It intercepts the HTTP response from `next()` before returning it.\nSOURCE: https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nconst serverLogger: Route.unstable_MiddlewareFunction = async (\n  { request, params, context },\n  next\n) => {\n  let start = performance.now();\n\n  // 👇 Grab the response here\n  let res = await next();\n\n  let duration = performance.now() - start;\n  console.log(`Navigated to ${request.url} (${duration}ms)`);\n\n  // 👇 And return it here (optional if you don't modify the response)\n  return res;\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Remix Build Command for Vite\nDESCRIPTION: This snippet shows the change in the Remix build command to use Vite for both client-side and server-side rendering builds.\nSOURCE: https://github.com/remix-run/react-router/blob/main/integration/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `remix build` 👉 `vite build && vite build --ssr`\n```\n\n----------------------------------------\n\nTITLE: Split Route Module with Shared Import - clientLoader (TSX)\nDESCRIPTION: The `clientLoader` chunk after extracting the shared code into its own module, now importing the shared code.\nSOURCE: https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nimport { shared } from \"./shared\";\n\nexport async function clientLoader() {\n  shared();\n  return await fetch(\"https://example.com/api\").then((response) =>\n    response.json()\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Static Route Definition with Element Property\nDESCRIPTION: Example of defining routes for RouterProvider using the element property, which can feel awkward outside of JSX context and makes it difficult to use hooks inline.\nSOURCE: https://github.com/remix-run/react-router/blob/main/decisions/0002-lazy-route-modules.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst routes = [\n  {\n    path: \"/\",\n    element: <Homepage prop=\"value\" />,\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Installing Latest React Router v6\nDESCRIPTION: Command to update to the latest version of React Router v6 before migrating to v7.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/upgrading/v6.md#2025-04-22_snippet_0\n\nLANGUAGE: shellscript\nCODE:\n```\nnpm install react-router-dom@6\n```\n\n----------------------------------------\n\nTITLE: Updating Remix Dev Command for Vite\nDESCRIPTION: This snippet demonstrates the change in the Remix dev command to use Vite's development server.\nSOURCE: https://github.com/remix-run/react-router/blob/main/integration/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- `remix dev` 👉 `vite dev`\n```\n\n----------------------------------------\n\nTITLE: Defining Route Path in React Router\nDESCRIPTION: Example of defining a route path for a PDF resource in React Router.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/resource-routes.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nroute(\"/reports/pdf/:id\", \"pdf-report.ts\");\n```\n\n----------------------------------------\n\nTITLE: Build Output Example for Pre-rendered Files\nDESCRIPTION: Shows the terminal output during the build process, displaying the generated pre-rendered files and their locations.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/pre-rendering.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n> react-router build\nvite v5.2.11 building for production...\n...\nvite v5.2.11 building SSR bundle for production...\n...\nPrerender: Generated build/client/index.html\nPrerender: Generated build/client/blog.data\nPrerender: Generated build/client/blog/index.html\nPrerender: Generated build/client/blog/my-first-post.data\nPrerender: Generated build/client/blog/my-first-post/index.html\n...\n```\n\n----------------------------------------\n\nTITLE: Setting up for a new release from dev branch\nDESCRIPTION: Commands for preparing the repository for a new 7.x release, including pulling the latest changes from GitHub, checking out the dev branch, and creating a release-next branch.\nSOURCE: https://github.com/remix-run/react-router/blob/main/DEVELOPMENT.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout main && git pull origin main\ngit checkout dev && git pull origin dev\ngit checkout dev\ngit checkout -b release-next\ngit merge --no-ff main\n```\n\n----------------------------------------\n\nTITLE: Installing File Storage Package\nDESCRIPTION: Command to install the file-storage package for implementing local file storage.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/file-uploads.md#2025-04-22_snippet_3\n\nLANGUAGE: shellscript\nCODE:\n```\nnpm i @mjackson/file-storage\n```\n\n----------------------------------------\n\nTITLE: Custom Data Strategy with Middleware Support in React Router\nDESCRIPTION: Shows how to implement a custom data strategy that still leverages React Router's middleware functionality using the defaultMiddleware utility passed to the dataStrategy function.\nSOURCE: https://github.com/remix-run/react-router/blob/main/decisions/0014-context-middleware.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nasync function dataStrategy({ request, matches, defaultMiddleware }) {\n  let results = await defaultMiddleware(() => {\n    // custom loader/action execution logic here\n  });\n  return results;\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Example in StackBlitz\nDESCRIPTION: This markdown snippet provides a clickable button to open the scroll restoration example in StackBlitz, allowing users to interactively explore the implementation.\nSOURCE: https://github.com/remix-run/react-router/blob/main/examples/scroll-restoration/README.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[![Open in StackBlitz](https://developer.stackblitz.com/img/open_in_stackblitz.svg)](https://stackblitz.com/github/remix-run/react-router/tree/main/examples/scroll-restoration?file=src/App.tsx)\n```\n\n----------------------------------------\n\nTITLE: Router Configuration with Routes Wrapper Example\nDESCRIPTION: Example demonstrating incorrect router configuration using Routes wrapper, marked as bad practice.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/elements.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<WhateverRouter initialEntries={[\"/events/123\"]}>\n  <Routes>\n    <Route path=\"/\" element={<Root />} loader={rootLoader}>\n      <Route\n        path=\"events/:id\"\n        element={<Event />}\n        loader={eventLoader}\n      />\n    </Route>\n  </Routes>\n</WhateverRouter>\n```\n\n----------------------------------------\n\nTITLE: Installing React Router Cloudflare Dependencies\nDESCRIPTION: NPM command to install both the React Router Cloudflare integration package and Cloudflare Workers type definitions. These packages enable React Router to work with Cloudflare's edge platform.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router-cloudflare/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @react-router/cloudflare @cloudflare/workers-types\n```\n\n----------------------------------------\n\nTITLE: Displaying Mode Icons in Markdown\nDESCRIPTION: This snippet demonstrates how to display icons indicating which mode of React Router (framework, data, declarative) the content is relevant to using Markdown syntax.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[MODES: framework, data, declarative]\n```\n\n----------------------------------------\n\nTITLE: Configuring SPA Mode in Remix Vite Plugin (JavaScript)\nDESCRIPTION: This code snippet shows how to enable SPA Mode in a Remix application using the `unstable_ssr` option within the Remix Vite plugin configuration. This is done inside `vite.config.ts`, and it alters how the Remix application is built and served, allowing for single-page application behavior.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router-dev/CHANGELOG.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\n// vite.config.ts\nimport { unstable_vitePlugin as remix } from \"@remix-run/dev\";\nimport { defineConfig } from \"vite\";\n\nexport default defineConfig({\n  plugins: [remix({ unstable_ssr: false })],\n});\n```\n\n----------------------------------------\n\nTITLE: Running Type Generation in Watch Mode\nDESCRIPTION: Demonstrates how to run the type generation command in watch mode to automatically regenerate types when files change.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/explanation/type-safety.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nreact-router typegen --watch\n```\n\n----------------------------------------\n\nTITLE: Creating Data Responses with React Router's data Function\nDESCRIPTION: Function signature for the React Router 'data' function that creates responses containing status and headers without serialization into an actual Response object. Used by Remix for single fetch operations.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/utils/data.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ndata(data, init): DataWithResponseInit\n```\n\n----------------------------------------\n\nTITLE: Run Remix dev server with TLS options\nDESCRIPTION: This command starts the Remix development server with TLS enabled, specifying the paths to the TLS key and certificate files using command-line flags. The `tls-key` and `tls-cert` flags are used to provide the paths to the key.pem and cert.pem files generated using mkcert.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router-dev/CHANGELOG.md#_snippet_29\n\nLANGUAGE: sh\nCODE:\n```\nremix dev --tls-key=key.pem --tls-cert=cert.pem\n```\n\n----------------------------------------\n\nTITLE: Installing React Router Dev Tools via NPM\nDESCRIPTION: NPM installation command for adding React Router development tools as a dev dependency. This package enables features like server rendering, code splitting, and hot module reloading through bundler integration.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router-dev/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @react-router/dev --save-dev\n```\n\n----------------------------------------\n\nTITLE: Configuring NPM Dev Script\nDESCRIPTION: Adding the development script to package.json for running the React Router dev server.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/upgrading/router-provider.md#2025-04-22_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  \"dev\": \"react-router dev\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Route Configuration for Splat Paths\nDESCRIPTION: Code diff showing how to split multi-segment splat routes into parent and child routes to support the new relative path behavior.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/upgrading/v6.md#2025-04-22_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n<Routes>\n  <Route path=\"/\" element={<Home />} />\n-  <Route path=\"dashboard/*\" element={<Dashboard />} />\n+  <Route path=\"dashboard\">\n+    <Route path=\"*\" element={<Dashboard />} />\n+  </Route>\n</Routes>\n\n// or\ncreateBrowserRouter([\n  { path: \"/\", element: <Home /> },\n  {\n-    path: \"dashboard/*\",\n-    element: <Dashboard />,\n+    path: \"dashboard\",\n+    children: [{ path: \"*\", element: <Dashboard /> }],\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Split Route Module - Main Component (TSX)\nDESCRIPTION: This is the split main component module from the original route module, created when the `unstable_splitRouteModules` flag is enabled. It contains the default component export and any necessary imports.\nSOURCE: https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MassiveComponent } from \"~/components\";\n\nexport default function Component({ loaderData }) {\n  return <MassiveComponent data={loaderData} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Merging release branch to dev after stable release\nDESCRIPTION: Commands for merging the release-next branch back into dev using a non-fast-forward merge after a stable release is published.\nSOURCE: https://github.com/remix-run/react-router/blob/main/DEVELOPMENT.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout dev\ngit merge --no-ff release-next\ngit push origin dev\n```\n\n----------------------------------------\n\nTITLE: Referencing Promise Teleportation Concept in React Router\nDESCRIPTION: A markdown link referencing a tweet about the concept of promise teleportation, which is relevant to the discussion of deferred loading in React Router.\nSOURCE: https://github.com/remix-run/react-router/blob/main/decisions/0004-streaming-apis.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n[promise teleportation]: https://twitter.com/ebey_jacob/status/1548817107546095616\n```\n\n----------------------------------------\n\nTITLE: Configuring React Router with TypeScript Configuration File\nDESCRIPTION: Example showing the basic structure of a react-router.config.ts file that exports a default configuration object satisfying the Config type from @react-router/dev/config.\nSOURCE: https://github.com/remix-run/react-router/blob/main/decisions/0013-react-router-config-ts.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// react-router.config.ts\nimport { type Config } from '@react-router/dev/config';\n\nexport default {\n  // configuration options\n} satisfies Config;\n```\n\n----------------------------------------\n\nTITLE: Defining generatePath Function Signature in React Router\nDESCRIPTION: Function signature showing the generatePath utility that takes an original path and params object to generate an interpolated path string. Used for dynamically creating route paths with parameter values.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/utils/generatePath.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ngeneratePath(originalPath, params): string\n```\n\n----------------------------------------\n\nTITLE: Defining useMatches Hook Signature in TypeScript\nDESCRIPTION: Shows the TypeScript signature for the useMatches hook in React Router which returns active route matches. The hook returns undefined as shown in this signature snippet.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/hooks/useMatches.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nuseMatches(): undefined\n```\n\n----------------------------------------\n\nTITLE: Mermaid State Diagram for Navigation Blocker\nDESCRIPTION: Visualizes the state transitions of the navigation blocker, showing the flow between unblocked, blocked, and proceeding states based on user actions and navigation events.\nSOURCE: https://github.com/remix-run/react-router/blob/main/decisions/0001-use-blocker.md#2025-04-22_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD;\n    Unblocked -->|navigate| A{shouldBlock?};\n    A -->|false| Unblocked;\n    A -->|true| Blocked;\n    Blocked -->|blocker.proceed| Proceeding;\n    Blocked -->|Unblocked Navigation| Unblocked;\n    Blocked -->|blocker.reset| Unblocked;\n    Proceeding -->|Navigation Complete| Unblocked;\n    Proceeding -->|Navigation Interrupted| Unblocked;\n```\n\n----------------------------------------\n\nTITLE: Setting up Type Generation Script\nDESCRIPTION: NPM script configuration to generate types before running type checking.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/route-module-type-safety.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"typecheck\": \"react-router typegen && tsc\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fix for unstable_SerializesTo type inference in React Router\nDESCRIPTION: This code snippet illustrates the issue and resolution related to `unstable_SerializesTo` in React Router. The original implementation with an optional brand property broke type inference, and the fix involved marking the brand property as required, potentially requiring casts for library/framework authors.\nSOURCE: https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// without the brand being marked as optional\nlet x1 = 42 as unknown as unstable_SerializesTo<number>;\n//          ^^^^^^^^^^\n\n// with the brand being marked as optional\nlet x2 = 42 as unstable_SerializesTo<number>;\n```\n\n----------------------------------------\n\nTITLE: Function Signature for createStaticHandler in React Router\nDESCRIPTION: Defines the signature of the createStaticHandler function which creates a StaticHandler for handling routes statically. It takes routes and options as parameters and returns a StaticHandler object.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/utils/createStaticHandler.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ncreateStaticHandler(routes, opts): StaticHandler\n```\n\n----------------------------------------\n\nTITLE: Revealing Server Entry Module in React Router CLI\nDESCRIPTION: Command to reveal the default server entry module (entry.server.tsx) in a React Router application.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/how-to/error-reporting.md#2025-04-22_snippet_0\n\nLANGUAGE: shellscript\nCODE:\n```\nreact-router reveal\n```\n\n----------------------------------------\n\nTITLE: Finding changelog files for review\nDESCRIPTION: Command to locate and open all CHANGELOG.md files within the packages directory for review and editing.\nSOURCE: https://github.com/remix-run/react-router/blob/main/DEVELOPMENT.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfind packages -name 'CHANGELOG.md' -mindepth 2 -maxdepth 2 -exec code {} \\;\n```\n\n----------------------------------------\n\nTITLE: Type Mismatch with Date Serialization Example\nDESCRIPTION: Demonstration of a type safety issue where useLoaderData incorrectly reports a serialized Date as a Date object instead of a string, creating a potential runtime error.\nSOURCE: https://github.com/remix-run/react-router/blob/main/decisions/0003-infer-types-for-useloaderdata-and-useactiondata-from-loader-and-action-via-generics.md#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\ntype MyLoaderData = {\n  birthday: Date;\n};\n\nexport const loader: LoaderFunction = () => {\n  return json<MyLoaderData>({ birthday: new Date(\"February 15, 1992\") });\n};\n\nexport default function Route() {\n  const { birthday } = useLoaderData<MyLoaderData>();\n  // ^ `useLoaderData` tricks Typescript into thinking this is a `Date`, when in fact its a `string`!\n}\n```\n\n----------------------------------------\n\nTITLE: Running React Router in Production Mode\nDESCRIPTION: Command to start the application in production mode after building.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/create-react-router/__tests__/fixtures/basic/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Defining Markdown Frontmatter for Upgrade Guide\nDESCRIPTION: YAML frontmatter metadata defining the title and order of the upgrade guide documentation page.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/upgrading/index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Upgrading\norder: 2\n---\n```\n\n----------------------------------------\n\nTITLE: JSX Element vs Type Generic in TypeScript\nDESCRIPTION: Demonstrates the difference between a JSX element and a single-argument type generic in `.tsx` files.  The comma is required to indicate a generic rather than a JSX element.\nSOURCE: https://github.com/remix-run/react-router/blob/main/packages/react-router-dev/CHANGELOG.md#_snippet_23\n\nLANGUAGE: TypeScript\nCODE:\n```\n// this doesn't work in .tsx files\nconst id = <T,>(x: T) => x;\n//          ^ is this a JSX element? or a single-argument type generic?\n\n// this works in .tsx files\nconst id = <T,>(x: T) => x;\n//           ^ comma: this is a generic, not a JSX element\nconst component = <h1>hello</h1>;\n//                   ^ no comma: this is a JSX element\n```\n\n----------------------------------------\n\nTITLE: Gitignore Configuration\nDESCRIPTION: Adding React Router build directory to .gitignore file.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/upgrading/router-provider.md#2025-04-22_snippet_15\n\nLANGUAGE: txt\nCODE:\n```\n.react-router/\n```\n\n----------------------------------------\n\nTITLE: Importing Helper Module in JavaScript\nDESCRIPTION: Illustrates the challenge of converting TypeScript imports to JavaScript, particularly with file extensions in ESM-style imports.\nSOURCE: https://github.com/remix-run/react-router/blob/main/decisions/0008-only-support-js-conversion-for-app-code.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// ./script.mjs (converted from ./script.js)\nimport myHelper from \"./my-helper\";\n\n// Should this be converted to `./my-helper.mjs`?\n// Probably, but can we be sure?\n\nmyHelper();\n```\n\n----------------------------------------\n\nTITLE: Setting Data Mode Metadata in Markdown Frontmatter\nDESCRIPTION: Frontmatter configuration for a documentation page specifying the title and order of the Data Mode section\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/start/data/index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Data Mode\norder: 3\n---\n```\n\n----------------------------------------\n\nTITLE: Defining HashRouter Component Props - React Router Documentation\nDESCRIPTION: Documentation structure for HashRouter component showing available props (basename, children, window) with support for declarative modes. Each prop section is marked as requiring documentation.\nSOURCE: https://github.com/remix-run/react-router/blob/main/docs/api/declarative-routers/HashRouter.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# HashRouter\n\n[MODES: declarative]\n\n## Summary\n\n[Reference Documentation ↗](https://api.reactrouter.com/v7/functions/react_router.HashRouter.html)\n\nA `<Router>` for use in web browsers. Stores the location in the hash\nportion of the URL.\n\n## Props\n\n### basename\n\n[modes: declarative]\n\n_No documentation_\n\n### children\n\n[modes: declarative]\n\n_No documentation_\n\n### window\n\n[modes: declarative]\n\n_No documentation_\n```"
  }
]