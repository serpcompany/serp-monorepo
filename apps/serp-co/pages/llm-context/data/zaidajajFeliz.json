[
  {
    "owner": "zaid-ajaj",
    "repo": "feliz",
    "content": "TITLE: PigeonMaps with Hover Popover Markers using Feliz.Popover in F#\nDESCRIPTION: Demonstrates how to create a map with markers that display popover information on hover. It uses Feliz.Popover to render the popover content for each city marker.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/PigeonMaps/README.md#2025-04-22_snippet_2\n\nLANGUAGE: fsharp\nCODE:\n```\nopen Feliz\nopen Feliz.Popover\n\ntype City = {\n    Name: string\n    Latitude: float\n    Longitude: float\n}\n\nlet cities = [\n    { Name = \"Utrecht\"; Latitude = 52.090736; Longitude = 5.121420 }\n    { Name = \"Nijmegen\"; Latitude = 51.812565; Longitude = 5.837226 }\n    { Name = \"Amsterdam\"; Latitude = 52.370216; Longitude = 4.895168 }\n    { Name = \"Rotterdam\"; Latitude = 51.924419; Longitude = 4.477733 }\n]\n\ntype MarkerProps = {\n    City: City\n    Hovered: bool\n}\n\nlet markerWithPopover (marker: MarkerProps)  =\n    Popover.popover [\n        popover.body [\n            Html.div [\n                prop.text marker.City.Name\n                prop.style [\n                    style.backgroundColor.black\n                    style.padding 10\n                    style.borderRadius 5\n                    style.color.lightGreen\n                ]\n            ]\n        ]\n        popover.isOpen marker.Hovered\n        popover.enterExitTransitionDurationMs 0\n        popover.disableTip\n        popover.children [\n            Html.i [\n                prop.key marker.City.Name\n                prop.className [ \"fa\"; \"fa-map-marker\"; \"fa-2x\" ]\n                if marker.Hovered then prop.style [\n                    style.cursor.pointer\n                    style.color.red\n                ]\n            ]\n        ]\n    ]\n\nlet renderMarker city =\n    PigeonMaps.marker [\n        marker.anchor(city.Latitude, city.Longitude)\n        marker.offsetLeft 15\n        marker.offsetTop 30\n        marker.render (fun marker -> [\n            markerWithPopover {\n                City = city\n                Hovered = marker.hovered\n            }\n        ])\n    ]\n\nlet initialCenter =\n    cities\n    |> List.tryHead\n    |> Option.map (fun city -> city.Latitude, city.Longitude)\n    |> Option.defaultValue (51.812565, 5.837226)\n\nlet citiesMap = React.functionComponent(fun () ->\n    let (zoom, setZoom) = React.useState 8\n    let (center, setCenter) = React.useState initialCenter\n    PigeonMaps.map [\n        map.center center\n        map.zoom zoom\n        map.height 350\n        map.onBoundsChanged (fun args -> setZoom (int args.zoom); setCenter args.center)\n        map.markers [ for city in cities -> renderMarker city ]\n    ])\n```\n\n----------------------------------------\n\nTITLE: Building MVU-Style Components with React.useReducer in F#\nDESCRIPTION: Shows how to implement a model-view-update pattern within a React component using React.useReducer hook. The component implements a counter with increment and decrement actions.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/React/StatefulComponents.md#2025-04-22_snippet_4\n\nLANGUAGE: fsharp\nCODE:\n```\ntype State = { Count : int }\n\ntype Msg = Increment | Decrement\n\nlet initialState = { Count = 0 }\n\nlet update (state: State) = function\n    | Increment -> { state with Count = state.Count + 1 }\n    | Decrement -> { state with Count = state.Count - 1 }\n\n[<ReactComponent>]\nlet Counter() =\n    let (state, dispatch) = React.useReducer(update, initialState)\n    Html.div [\n        Html.button [\n            prop.onClick (fun _ -> dispatch Increment)\n            prop.text \"Increment\"\n        ]\n\n        Html.button [\n            prop.onClick (fun _ -> dispatch Decrement)\n            prop.text \"Decrement\"\n        ]\n\n        Html.h1 state.Count\n    ]\n```\n\n----------------------------------------\n\nTITLE: Implementing a Counter Component with Feliz in F#\nDESCRIPTION: This snippet demonstrates how to create a simple counter component using Feliz with React hooks. It includes state management with useState, event handlers, and rendering HTML elements with properly typed props.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: F#\nCODE:\n```\nmodule App\n\nopen Feliz\n\n[<ReactComponent>]\nlet Counter() =\n    let (count, setCount) = React.useState(0)\n    Html.div [\n        Html.button [\n            prop.style [ style.marginRight 5 ]\n            prop.onClick (fun _ -> setCount(count + 1))\n            prop.text \"Increment\"\n        ]\n\n        Html.button [\n            prop.style [ style.marginLeft 5 ]\n            prop.onClick (fun _ -> setCount(count - 1))\n            prop.text \"Decrement\"\n        ]\n\n        Html.h1 count\n    ]\n\nopen Browser.Dom\n\nlet root = ReactDOM.createRoot(document.getElementById \"root\")\nroot.render(Counter())\n```\n\n----------------------------------------\n\nTITLE: Implementing a Counter Component with Feliz in F#\nDESCRIPTION: This snippet demonstrates how to create a simple counter component using Feliz. It utilizes React hooks for state management and Feliz's HTML DSL for rendering the UI elements.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/README.md#2025-04-22_snippet_0\n\nLANGUAGE: F#\nCODE:\n```\nmodule App\n\nopen Feliz\n\n[<ReactComponent>]\nlet Counter() =\n    let (count, setCount) = React.useState(0)\n    Html.div [\n        Html.button [\n            prop.style [ style.marginRight 5 ]\n            prop.onClick (fun _ -> setCount(count + 1))\n            prop.text \"Increment\"\n        ]\n\n        Html.button [\n            prop.style [ style.marginLeft 5 ]\n            prop.onClick (fun _ -> setCount(count - 1))\n            prop.text \"Decrement\"\n        ]\n\n        Html.h1 count\n    ]\n\nopen Browser.Dom\n\nlet root = ReactDOM.createRoot (document.getElementById \"root\")\nroot.render (Counter())\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Code Splitting in F# with Feliz\nDESCRIPTION: Demonstrates basic code splitting implementation using React.lazy and React.suspense. Includes a synchronously loaded component, an asynchronously loaded component, and a spinner component for loading states. Shows proper module-level dynamic import setup.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/React/CodeSplitting.md#2025-04-22_snippet_0\n\nLANGUAGE: fsharp\nCODE:\n```\n// CodeSplitting.fs\nmodule CodeSplitting\n\nopen Fable.Core.JsInterop\nopen Feliz\n\nlet myCodeSplitComponent = React.functionComponent(fun () ->\n    Html.div [\n        prop.text \"I was loaded asynchronously!\"\n    ])\n\nexportDefault myCodeSplitComponent\n\n// Example.fs\nlet myNonCodeSplitComponent = React.functionComponent(fun () ->\n    Html.div [\n        prop.text \"I was loaded synchronously!\"\n    ])\n\nlet centeredSpinner =\n    Html.div [\n        prop.style [\n            style.textAlign.center\n            style.marginLeft length.auto\n            style.marginRight length.auto\n            style.marginTop 50\n        ]\n        prop.children [\n            Html.li [\n                prop.className [\n                    FA.Fa\n                    FA.FaRefresh\n                    FA.FaSpin\n                    FA.Fa3X\n                ]\n            ]\n        ]\n    ]\n\nlet asyncComponent : JS.Promise<unit -> ReactElement> = JsInterop.importDynamic \"./CodeSplitting.fs\"\n\nlet codeSplitting = React.functionComponent(fun () ->\n    Html.div [\n        prop.children [\n            myNonCodeSplitComponent()\n            React.suspense([\n                Html.div [\n                    React.lazy'(asyncComponent,())\n                ]\n            ], centeredSpinner)\n        ]\n    ])\n```\n\n----------------------------------------\n\nTITLE: Building a Login Form with useDeferredCallback in F#\nDESCRIPTION: A more complex example demonstrating how to use React.useDeferredCallback to implement a login form. The component manages form state, handles user input, performs validation, and displays different UI states based on the login process status.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz.UseDeferred/Index.md#2025-04-22_snippet_2\n\nLANGUAGE: fsharp\nCODE:\n```\nopen Feliz\nopen Feliz.UseDeferred\n\nlet login username password = async {\n    do! Async.Sleep 1500\n    if username = \"admin\" && password = \"admin\"\n    then return Ok \"admin\"\n    else return Error \"Credentials incorrect\"\n}\n\n[<ReactComponent>]\nlet LoginForm() =\n    let (loginState, setLoginState) = React.useState(Deferred.HasNotStartedYet)\n    let usernameRef = React.useInputRef()\n    let passwordRef = React.useInputRef()\n\n    let login() =\n        match usernameRef.current, passwordRef.current with\n        | Some username, Some password -> login username.value password.value\n        | _ -> failwith \"Component hasn't been initialized\"\n\n    let startLogin = React.useDeferredCallback(login, setLoginState)\n\n    let message =\n        match loginState with\n        | Deferred.HasNotStartedYet -> Html.none\n        | Deferred.InProgress -> Html.none\n        | Deferred.Failed error ->\n            Html.p [\n                prop.style [ style.color.red ]\n                prop.text (sprintf \"Internal error: %s\" error.Message)\n            ]\n\n        | Deferred.Resolved (Ok user) ->\n            Html.p [\n                prop.style [ style.color.green ]\n                prop.text (sprintf \"User %s logged in\" user)\n            ]\n\n        | Deferred.Resolved (Error error) ->\n            Html.p [\n                prop.style [ style.color.red ]\n                prop.text (sprintf \"Login error: %s\" error)\n            ]\n\n    Html.div [\n        Html.div [\n            prop.className \"field\"\n            prop.children [\n                Html.label [ prop.className \"label\"; prop.text \"Username\" ]\n                Html.div [\n                    prop.className \"control\"\n                    prop.children [\n                        Html.input [\n                            prop.className \"input\"\n                            prop.ref usernameRef\n                            prop.placeholder \"Username\"\n                            prop.disabled (Deferred.inProgress loginState)\n                        ]\n                    ]\n                ]\n            ]\n        ]\n\n        Html.div [\n            prop.className \"field\"\n            prop.children [\n                Html.label [ prop.className \"label\"; prop.text \"Password\" ]\n                Html.div [\n                    prop.className \"control\"\n                    prop.children [\n                        Html.input [\n                            prop.className \"input\"\n                            prop.ref passwordRef\n                            prop.placeholder \"Password\"\n                            prop.disabled (Deferred.inProgress loginState)\n                            prop.type'.password\n                        ]\n                    ]\n                ]\n            ]\n        ]\n\n        message\n\n        Html.button [\n            prop.className [\n                \"button is-primary\";\n                if Deferred.inProgress loginState\n                then \"is-loading\"\n            ]\n\n            prop.text \"Login\"\n            prop.disabled (Deferred.inProgress loginState)\n            prop.onClick(fun _ -> startLogin())\n        ]\n    ])\n```\n\n----------------------------------------\n\nTITLE: Implementing Markers with Close Buttons in Feliz PigeonMaps (F#)\nDESCRIPTION: This snippet demonstrates how to create interactive map markers with custom popovers that include close buttons. It shows how to handle marker state, toggle popover visibility, and customize the appearance based on interaction state.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/PigeonMaps/README.md#2025-04-22_snippet_4\n\nLANGUAGE: fsharp\nCODE:\n```\nopen Feliz\nopen Feliz.Popover\n\ntype City = {\n    Name: string\n    Latitude: float\n    Longitude: float\n}\n\nlet cities = [\n    { Name = \"Utrecht\"; Latitude = 52.090736; Longitude = 5.121420 }\n    { Name = \"Nijmegen\"; Latitude = 51.812565; Longitude = 5.837226 }\n    { Name = \"Amsterdam\"; Latitude = 52.370216; Longitude = 4.895168 }\n    { Name = \"Rotterdam\"; Latitude = 51.924419; Longitude = 4.477733 }\n]\n\ntype MarkerProps = {\n    City: City\n    Hovered: bool\n}\n\nlet markerWithPopover = React.functionComponent(fun (marker: MarkerProps) ->\n    let (popoverOpen, toggleOpen) = React.useState false\n    Popover.popover [\n        popover.body [\n            Html.div [\n                prop.style [\n                    style.backgroundColor.black\n                    style.padding 10\n                    style.borderRadius 5\n                ]\n                prop.children [\n                    Html.span [\n                        Html.i [\n                            prop.className [ \"fa\"; \"fa-times\" ]\n                            prop.style [ style.marginRight 10; style.cursor.pointer; style.color.red ]\n                            prop.onClick (fun _ -> toggleOpen(false))\n                        ]\n                    ]\n                    Html.span [\n                        prop.style [ style.color.lightGreen ]\n                        prop.text marker.City.Name\n                    ]\n                ]\n            ]\n        ]\n        popover.isOpen popoverOpen\n        popover.disableTip\n        popover.children [\n            Html.i [\n                prop.key marker.City.Name\n                prop.className [ \"fa\"; \"fa-map-marker\"; \"fa-2x\" ]\n                prop.onClick (fun _ -> toggleOpen(not popoverOpen))\n                prop.style [\n                    if marker.Hovered then style.cursor.pointer\n                    if popoverOpen then style.color.red\n                ]\n            ]\n        ]\n    ])\n\nlet renderMarker city =\n    PigeonMaps.marker [\n        marker.anchor(city.Latitude, city.Longitude)\n        marker.offsetLeft 15\n        marker.offsetTop 30\n        marker.render (fun marker -> [\n            markerWithPopover {\n                City = city\n                Hovered = marker.hovered\n            }\n        ])\n    ]\n\nlet initialCenter =\n    cities\n    |> List.tryHead\n    |> Option.map (fun city -> city.Latitude, city.Longitude)\n    |> Option.defaultValue (51.812565, 5.837226)\n\nlet citiesMap = React.functionComponent(fun () ->\n    let (zoom, setZoom) = React.useState 8\n    let (center, setCenter) = React.useState initialCenter\n    PigeonMaps.map [\n        map.center center\n        map.zoom zoom\n        map.height 350\n        map.onBoundsChanged (fun args -> setZoom (int args.zoom); setCenter args.center)\n        map.markers [ for city in cities -> renderMarker city ]\n    ])\n```\n\n----------------------------------------\n\nTITLE: Implementing Counter Application with Feliz and Elmish in F#\nDESCRIPTION: This code snippet demonstrates a complete counter application using Feliz for rendering and Elmish for state management. It includes state definition, message types, init and update functions, and a render function that uses Feliz's Html module to create the UI.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/UseWithElmish.md#2025-04-22_snippet_0\n\nLANGUAGE: F#\nCODE:\n```\nmodule App\n\nopen Feliz\nopen Elmish\n\ntype State = { Count: int }\n\ntype Msg =\n    | Increment\n    | Decrement\n\nlet init() = { Count = 0 }, Cmd.none\n\nlet update (msg: Msg) (state: State) =\n    match msg with\n    | Increment -> { state with Count = state.Count + 1 }, Cmd.none\n    | Decrement -> { state with Count = state.Count - 1 }, Cmd.none\n\nlet render (state: State) (dispatch: Msg -> unit) =\n    Html.div [\n        Html.button [\n            prop.onClick (fun _ -> dispatch Increment)\n            prop.text \"Increment\"\n        ]\n\n        Html.button [\n            prop.onClick (fun _ -> dispatch Decrement)\n            prop.text \"Decrement\"\n        ]\n\n        Html.h1 state.Count\n    ]\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Stateful Counter Component in F# with React.useState\nDESCRIPTION: Demonstrates how to create a simple stateful counter component using React.useState hook. The component maintains a count value and provides a button to increment it.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/React/StatefulComponents.md#2025-04-22_snippet_0\n\nLANGUAGE: fsharp\nCODE:\n```\n[<ReactComponent>]\nlet Stateful() =\n    let (count, setCount) = React.useState(0)\n    Html.div [\n        Html.h1 count\n        Html.button [\n            prop.text \"Increment\"\n            prop.onClick (fun _ -> setCount(count + 1))\n        ]\n    ]\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Data Fetching with useDeferred in F#\nDESCRIPTION: A simple example of using React.useDeferred hook to fetch data asynchronously and render different UI states based on the loading status. The component renders nothing while not started, a spinner while loading, an error message if failed, or the content when resolved.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz.UseDeferred/Index.md#2025-04-22_snippet_0\n\nLANGUAGE: fsharp\nCODE:\n```\nopen Feliz\nopen Feliz.UseDeferred\n\n[<ReactComponent>]\nlet BasicDeferred() =\n    let loadData = async {\n        do! Async.Sleep 1000\n        return \"Hello!\"\n    }\n\n    let data = React.useDeferred(loadData, [| |])\n\n    match data with\n    | Deferred.HasNotStartedYet -> Html.none\n    | Deferred.InProgress -> Html.i [ prop.className [ \"fa\"; \"fa-refresh\"; \"fa-spin\"; \"fa-2x\" ] ]\n    | Deferred.Failed error -> Html.div error.Message\n    | Deferred.Resolved content -> Html.h1 content\n```\n\n----------------------------------------\n\nTITLE: Executing Effect Once on Mount in Feliz\nDESCRIPTION: This example shows how to use React.useEffect to load data asynchronously when a component mounts. It demonstrates using an empty dependency array to ensure the effect runs only once.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/React/EffectfulComponents.md#2025-04-22_snippet_1\n\nLANGUAGE: fsharp\nCODE:\n```\n[<ReactComponent>]\nlet EffectWithAsyncOnce() =\n    let (isLoading, setLoading) = React.useState(false)\n    let (content, setContent) = React.useState(\"\")\n\n    let loadData() = async {\n        setLoading true\n        do! Async.Sleep 1500\n        setLoading false\n        setContent \"Content\"\n    }\n\n    React.useEffect(loadData >> Async.StartImmediate, [| |])\n\n    Html.div [\n        if isLoading\n        then Html.h1 \"Loading\"\n        else Html.h1 content\n    ]\n```\n\n----------------------------------------\n\nTITLE: Executing Effect with Dependencies in Feliz\nDESCRIPTION: This example shows how to use React.useEffect with a dependency array to re-execute the effect when specific state variables change. It simulates loading user information based on a userId state variable.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/React/EffectfulComponents.md#2025-04-22_snippet_3\n\nLANGUAGE: fsharp\nCODE:\n```\nlet rnd = System.Random()\n\n[<ReactComponent>]\nlet EffectsUsingDependencies() =\n    let (isLoading, setLoading) = React.useState(false)\n    let (content, setContent) = React.useState(\"\")\n    let (userId, setUserId) = React.useState(0)\n    let (textColor, setTextColor) = React.useState(color.red)\n\n    let loadData() = async {\n        setLoading true\n        do! Async.Sleep 1500\n        setLoading false\n        setContent (sprintf \"User %d\" userId)\n    }\n\n    React.useEffect(loadData >> Async.StartImmediate, [| box userId |])\n\n    Html.div [\n        Html.h1 [\n            prop.style [ style.color textColor ]\n            prop.text (if isLoading then \"Loading\" else content)\n        ]\n\n        Html.button [\n            prop.text \"Red\"\n            prop.onClick (fun _ -> setTextColor(color.red))\n        ]\n\n        Html.button [\n            prop.text \"Blue\"\n            prop.onClick (fun _ -> setTextColor(color.blue))\n        ]\n\n        Html.button [\n            prop.text \"Update User ID\"\n            prop.onClick (fun _ -> setUserId(rnd.Next(1, 100)))\n        ]\n    ]\n```\n\n----------------------------------------\n\nTITLE: Implementing Delay with Custom Fallback in React Component (F#)\nDESCRIPTION: Shows how to use React.delay with a custom fallback component. In this case, a centered spinner is displayed while waiting for the main content to render after a 2-second delay.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz.Delay/Index.md#2025-04-22_snippet_1\n\nLANGUAGE: fsharp\nCODE:\n```\nopen Feliz\nopen Feliz.Delay\n\n[<ReactComponent>]\nlet DelayWithFallback() =\n    React.delay [\n        delay.waitFor 2000\n\n        delay.children [\n            Html.text \"Here I am!\"\n        ]\n\n        delay.fallback centeredSpinner\n    ]\n```\n\n----------------------------------------\n\nTITLE: Managing Multiple State Variables in a F# React Component\nDESCRIPTION: Example showing how to manage multiple state variables within a single component. The component tracks both a counter value and text color state, with buttons to control each independently.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/React/StatefulComponents.md#2025-04-22_snippet_2\n\nLANGUAGE: fsharp\nCODE:\n```\n[<ReactComponent>]\nlet MultipleVariables() =\n    let (count, setCount) = React.useState(0)\n    let (textColor, setTextColor) = React.useState(color.red)\n\n    Html.div [\n        Html.h1 [\n            prop.style [ style.color textColor ]\n            prop.text count\n        ]\n\n        Html.button [\n            prop.text \"Increment\"\n            prop.onClick (fun _ -> setCount(count + 1))\n        ]\n\n        Html.button [\n            prop.text \"Red\"\n            prop.onClick (fun _ -> setTextColor(color.red))\n        ]\n\n        Html.button [\n            prop.text \"Blue\"\n            prop.onClick (fun _ -> setTextColor(color.blue))\n        ]\n    ]\n```\n\n----------------------------------------\n\nTITLE: Defining a Stateless React Component in F# with Feliz\nDESCRIPTION: This snippet shows how to define a simple stateless React component using the [<ReactComponent>] attribute. The component takes an optional name parameter and renders a greeting.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/React/StatelessComponents.md#2025-04-22_snippet_0\n\nLANGUAGE: fsharp\nCODE:\n```\nopen Feliz\n\n[<ReactComponent>]\nlet Greeting(name: string option) : ReactElement =\n    Html.div [\n        Html.span \"Hello, \"\n        Html.span (Option.defaultValue \"World\" name)\n    ]\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive PigeonMaps with City Markers in F#\nDESCRIPTION: Shows how to create an interactive map with multiple city markers. The map's center and zoom can be changed by clicking on markers. It uses React state hooks to manage the map's center and zoom level.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/PigeonMaps/README.md#2025-04-22_snippet_1\n\nLANGUAGE: fsharp\nCODE:\n```\nopen Feliz\nopen Feliz.PigeonMaps\n\ntype City = {\n    Name: string\n    Latitude: float\n    Longitude: float\n}\n\nlet cities = [\n    { Name = \"Utrecht\"; Latitude = 52.090736; Longitude = 5.121420 }\n    { Name = \"Nijmegen\"; Latitude = 51.812565; Longitude = 5.837226 }\n    { Name = \"Amsterdam\"; Latitude = 52.370216; Longitude = 4.895168 }\n    { Name = \"Rotterdam\"; Latitude = 51.924419; Longitude = 4.477733 }\n]\n\nlet renderMarker (city: City) clicked =\n    PigeonMaps.marker [\n        marker.anchor(city.Latitude, city.Longitude)\n        marker.offsetLeft 15\n        marker.offsetTop 30\n        marker.render (fun marker -> Html.i [\n            if marker.hovered\n            then prop.style [ style.color.red; style.cursor.pointer ]\n            prop.className [ \"fa\"; \"fa-map-marker\"; \"fa-2x\" ]\n            prop.onClick (fun _ -> clicked (city.Latitude, city.Longitude))\n        ])\n    ]\n\nlet initialCenter =\n    cities\n    |> List.tryHead\n    |> Option.map (fun city -> city.Latitude, city.Longitude)\n    |> Option.defaultValue (51.812565, 5.837226)\n\nlet citiesMap = React.functionComponent(fun () ->\n    let (center, setCenter) = React.useState initialCenter\n    let (zoom, setZoom) = React.useState 8\n    PigeonMaps.map [\n        map.center center\n        map.zoom zoom\n        map.height 350\n        map.onBoundsChanged (fun args -> setZoom (int args.zoom); setCenter (args.center))\n        map.markers [ for city in cities -> renderMarker city setCenter ]\n    ])\n```\n\n----------------------------------------\n\nTITLE: Using Type-Safe CSS Styling with Feliz in F#\nDESCRIPTION: A comprehensive example showing the type-safe styling capabilities of Feliz. This snippet demonstrates numerous CSS properties including display, font, border, margin, box-shadow, and transformations all with type safety. The style module ensures that only valid CSS values can be used.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/TypeSafeStyling.md#2025-04-22_snippet_0\n\nLANGUAGE: F#\nCODE:\n```\nlet exampleDiv =\n    Html.div [\n        prop.style [\n            style.display.flex\n            style.display.none\n            style.fontSize 20\n            style.borderRadius 15\n            style.textAlign.center\n            style.alignContent.flexStart\n            style.textDecorationColor.blue\n            style.visibility.hidden\n            style.textDecoration.lineThrough\n            style.position.sticky\n            style.borderBottomWidth 20\n            style.borderBottomWidth (length.em 10)\n            style.borderBottomColor color.red\n            style.borderBottomStyle borderStyle.dashed\n            style.borderStyle.dotted\n            style.margin(length.em 1, length.em 0)\n            style.marginBottom 10\n            style.marginBottom (length.em 1)\n            style.boxShadow(10, 10, color.black)\n            style.boxShadow(10, 10, 10, color.black)\n            style.boxShadow(0, 0, 10, color.black)\n            style.boxShadow(0, 0, 10, 10, color.darkGray)\n            style.boxShadow.none\n            style.height length.auto\n            style.borderRadius 20\n            style.borderRadius (length.rem 10)\n            style.margin 10\n            style.backgroundRepeat.repeatX\n            style.backgroundPosition.fixedNoScroll\n            style.margin (length.px 10)\n            style.margin(10, 10, 10, 20)\n            style.margin(10, 10, 10)\n            style.margin(10, 10)\n            style.width 10\n            style.height 100\n            style.height (length.vh 50)\n            style.height (length.percent 100)\n            style.backgroundColor.fuchsia\n            style.backgroundColor \"#FFFFFF\"\n            style.border(3, borderStyle.dashed, color.crimson)\n            style.borderColor.blue\n            style.transform.scale3D(20, 20, 20)\n            style.transform.translateX(100)\n            style.transform.translateY(100)\n            style.transform.translateZ(100)\n            style.textTransform.capitalize\n            style.textTransform.lowercase\n            style.fontStretch.extraCondensed\n            style.fontVariant.smallCaps\n            style.fontStyle.italic\n            style.fontSize 20\n            style.fontSize (length.em 2)\n            style.color.crimson\n            style.color \"#000000\"\n        ]\n    ]\n```\n\n----------------------------------------\n\nTITLE: Basic Elmish Counter Component in Feliz\nDESCRIPTION: Demonstrates how to create a basic counter component using Elmish within a Feliz React component. It uses the React.useElmish hook to manage state and update logic.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz.UseElmish/Index.md#2025-04-22_snippet_1\n\nLANGUAGE: fsharp\nCODE:\n```\nopen Feliz\nopen Feliz.UseElmish\nopen Elmish\n\ntype Msg =\n    | Increment\n    | Decrement\n\ntype State = { Count : int }\n\nlet init() = { Count = 0 }, Cmd.none\n\nlet update msg state =\n    match msg with\n    | Increment -> { state with Count = state.Count + 1 }, Cmd.none\n    | Decrement -> { state with Count = state.Count - 1 }, Cmd.none\n\n[<ReactComponent>]\nlet Counter() =\n    let state, dispatch = React.useElmish(init, update, [| |])\n    Html.div [\n        Html.h1 state.Count\n        Html.button [\n            prop.text \"Increment\"\n            prop.onClick (fun _ -> dispatch Increment)\n        ]\n\n        Html.button [\n            prop.text \"Decrement\"\n            prop.onClick (fun _ -> dispatch Decrement)\n        ]\n    ]\n\nopen Browser.Dom\n\nReactDOM.render(Counter(), document.getElementById \"feliz-app\")\n```\n\n----------------------------------------\n\nTITLE: Creating a React Context in F#\nDESCRIPTION: Creating a React context with a default value for theme propagation. This establishes the context container that will be used to share theme information across components.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/React/ContextPropagation.md#2025-04-22_snippet_1\n\nLANGUAGE: fsharp\nCODE:\n```\nlet themeContext = React.createContext(name=\"Theme\", defaultValue=Theme.Light)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Context Provider in Feliz\nDESCRIPTION: Setting up a React context provider to make the theme state implicitly available to child components. The provider wraps child components and supplies them with the context value.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/React/ContextPropagation.md#2025-04-22_snippet_2\n\nLANGUAGE: fsharp\nCODE:\n```\n[<ReactComponent>]\nlet render (state: State, dispatch: Msg -> unit) =\n    React.contextProvider(themeContext, state.Theme, React.fragment [\n        RenderContent()\n    ])\n```\n\n----------------------------------------\n\nTITLE: Initializing Effect on Every Render in Feliz\nDESCRIPTION: This snippet demonstrates how to use React.useEffect to update the document title on every render cycle. It includes a counter component that changes the tab title with each count update.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/React/EffectfulComponents.md#2025-04-22_snippet_0\n\nLANGUAGE: fsharp\nCODE:\n```\n[<ReactComponent>]\nlet TabCounter() =\n    let (count, setCount) = React.useState(0)\n    // execute this effect on every render cycle\n    React.useEffect(fun () -> Browser.Dom.document.title <- sprintf \"Count = %d\" count)\n\n    Html.div [\n        Html.h1 count\n        Html.button [\n            prop.text \"Increment\"\n            prop.onClick (fun _ -> setCount(count + 1))\n        ]\n    ]\n```\n\n----------------------------------------\n\nTITLE: Using useMediaQuery Hook in F# React Components\nDESCRIPTION: This example demonstrates how to use the useMediaQuery hook to create responsive components based on a specific width breakpoint. It renders different text content depending on whether the screen width is less than or greater than 850px.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz.UseMediaQuery/Index.md#2025-04-22_snippet_0\n\nLANGUAGE: fsharp\nCODE:\n```\n[<ReactComponent>]\nlet UseMediaQueryExample() =\n    let matches = React.useMediaQuery(\"(max-width: 850px)\")\n    Html.div [\n        let text =\n            if matches then\n                \"850px or less\"\n            else\n                \"More than 850px\"\n\n        prop.children [\n            Html.h1 text\n            Html.p \"Resize your screen to get the media query hook to re-render the component with updated information.\"\n        ]\n    ]\n```\n\n----------------------------------------\n\nTITLE: Implementing Timer Subscription with React.useEffect in F#\nDESCRIPTION: Creates a timer component that can be paused/resumed, demonstrating proper cleanup of interval subscriptions using IDisposable when the component unmounts.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/React/SubscriptionsWithEffects.md#2025-04-22_snippet_0\n\nLANGUAGE: fsharp\nCODE:\n```\nopen Feliz\nopen Fable.Core.JS\n\n[<ReactComponent>]\nlet EffectfulTimer() =\n    let (paused, setPaused) = React.useState(false)\n    // using useStateWithUpdater instead of useState\n    // to avoid stale closures in React.useEffect\n    let (value, setValue) = React.useStateWithUpdater(0)\n\n    let subscribeToTimer() =\n        // start the timer\n        let subscriptionId = setInterval (fun _ -> if not paused then setValue (fun prev -> prev + 1)) 1000\n        // return IDisposable with cleanup code that stops the timer\n        { new IDisposable with member this.Dispose() = clearTimeout(subscriptionId) }\n\n    React.useEffect(subscribeToTimer, [| box paused |])\n\n    Html.div [\n        Html.h1 value\n\n        Html.button [\n            prop.className [\n                Bulma.Button\n                Bulma.IsLarge\n                if paused then Bulma.IsWarning else Bulma.IsPrimary\n            ]\n\n            prop.onClick (fun _ -> setPaused(not paused))\n            prop.text (if paused then \"Resume\" else \"Pause\")\n        ]\n    ]\n```\n\n----------------------------------------\n\nTITLE: Creating Hover Animations with React Components in F#\nDESCRIPTION: This code defines a custom React component 'AnimationsOnHover' that implements hover animations without CSS. It uses React's useState hook to manage hover state and applies different styles based on mouse enter and leave events. The component demonstrates smooth transitions for background color and text color.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/React/HoverAnimations.md#2025-04-22_snippet_0\n\nLANGUAGE: fsharp\nCODE:\n```\n[<ReactComponents>]\nlet AnimationsOnHover(content: ReactElement list) =\n    let (hovered, setHovered) = React.useState(false)\n    Html.div [\n        prop.style [\n            style.padding 10\n            style.transitionDuration (TimeSpan.FromMilliseconds 1000.0)\n            style.transitionProperty [\n                transitionProperty.backgroundColor\n                transitionProperty.color\n            ]\n\n            if hovered then\n               style.backgroundColor.lightBlue\n               style.color.black\n            else\n               style.backgroundColor.limeGreen\n               style.color.white\n        ]\n        prop.onMouseEnter (fun _ -> setHovered(true))\n        prop.onMouseLeave (fun _ -> setHovered(false))\n        prop.children content\n    ]\n\nHtml.div [\n    AnimationsOnHover [ Html.span \"Hover me!\" ]\n    AnimationsOnHover [ Html.p \"So smooth\" ]\n]\n```\n\n----------------------------------------\n\nTITLE: Using useResponsive Hook with Default Breakpoints\nDESCRIPTION: This example shows how to use the useResponsive hook with default breakpoints. It renders different text content based on predefined screen size categories (Mobile, MobileLandscape, Tablet, Desktop, WideScreen).\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz.UseMediaQuery/Index.md#2025-04-22_snippet_1\n\nLANGUAGE: fsharp\nCODE:\n```\n[<ReactComponent>]\nlet UseResponsiveExample() =\n    // defaults = {MobileLandscape = 576; Tablet = 768; Desktop = 1024; WideScreen = 1216}\n    let width = React.useResponsive()\n    Html.div [\n        let text =\n            match width with\n            | ScreenSize.Mobile -> \"Mobile\"\n            | ScreenSize.MobileLandscape -> \"MobileLandscape\"\n            | ScreenSize.Tablet -> \"Tablet\"\n            | ScreenSize.Desktop -> \"Desktop\"\n            | ScreenSize.WideScreen -> \"WideScreen\"\n        prop.children [\n            Html.h1 text\n            Html.p \"Resize your screen to get the media query hook to re-render the component with updated information.\"\n        ]\n    ]\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Delays in React Components (F#)\nDESCRIPTION: Demonstrates how to compose delayed components for customized handling based on time intervals. This example shows two nested delay components with different fallback behaviors.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz.Delay/Index.md#2025-04-22_snippet_2\n\nLANGUAGE: fsharp\nCODE:\n```\nopen Feliz\nopen Feliz.Delay\n\n[<ReactComponent>]\nlet DelayWithCustomFallback() =\n    React.delay [\n        delay.waitFor 2000\n\n        delay.children [\n            Html.text \"Here I am!\"\n        ]\n\n        delay.fallback centeredSpinner\n    ]\n\n[<ReactComponent>]\nlet AnotherDelayWithCustomFallback() =\n    React.delay [\n        delay.waitFor 2000\n\n        delay.children [\n            delayWithCustomFallback()\n        ]\n\n        delay.fallback [\n            Html.text \"Hanging out for a little bit...\"\n        ]\n    ]\n```\n\n----------------------------------------\n\nTITLE: Implementing a Stateful Counter Component in F# with Feliz\nDESCRIPTION: A complete example of a React component in F# using Feliz to create a counter with state management via React hooks. The component uses React.useState to maintain count state and renders a counter with an increment button.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/React/Standalone.md#2025-04-22_snippet_0\n\nLANGUAGE: fsharp\nCODE:\n```\nmodule App\n\nopen Feliz\n\n[<ReactComponent>]\nlet Counter() =\n    let (count, setCount) = React.useState(0)\n    Html.div [\n        Html.h1 count\n        Html.button [\n            prop.text \"Increment\"\n            prop.onClick (fun _ -> setCount(count + 1))\n        ]\n    ])\n\nopen Browser.Dom\n\nReactDOM.render(Counter(), document.getElementById \"root\")\n```\n\n----------------------------------------\n\nTITLE: Using React.useEffectOnce in Feliz\nDESCRIPTION: This snippet demonstrates the use of React.useEffectOnce, which is a shorthand for React.useEffect with an empty dependency array. It's used to load data asynchronously only once when the component mounts.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/React/EffectfulComponents.md#2025-04-22_snippet_2\n\nLANGUAGE: fsharp\nCODE:\n```\n[<ReactComponent>]\nlet EffectWithAsyncOnce() =\n    let (isLoading, setLoading) = React.useState(false)\n    let (content, setContent) = React.useState(\"\")\n\n    let loadData() = async {\n        setLoading true\n        do! Async.Sleep 1500\n        setLoading false\n        setContent \"Content\"\n    }\n\n    React.useEffectOnce(loadData >> Async.StartImmediate)\n\n    Html.div [\n        if isLoading\n        then Html.h1 \"Loading\"\n        else Html.h1 content\n    ]\n```\n\n----------------------------------------\n\nTITLE: Implementing Delayed Code Splitting in F# with Feliz\nDESCRIPTION: Extends the basic code splitting example by adding an artificial delay using Promise.sleep. This helps demonstrate the loading state more clearly by forcing a 2-second delay before loading the async component.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/React/CodeSplitting.md#2025-04-22_snippet_1\n\nLANGUAGE: fsharp\nCODE:\n```\nlet codeSplittingDelayed = React.functionComponent(fun () ->\n    Html.div [\n        prop.children [\n            myNonCodeSplitComponent()\n            React.suspense([\n                Html.div [\n                    React.lazy'((fun () ->\n                        promise {\n                            do! Promise.sleep 2000\n                            return! asyncComponent\n                        }\n                    ),())\n                ]\n            ], centeredSpinner)\n        ]\n    ])\n```\n\n----------------------------------------\n\nTITLE: Focusing Input Element using React.useRef in F#\nDESCRIPTION: This snippet demonstrates how to use React.useRef to create a reference to an input element and focus it on button click. It showcases the usage of ref in Feliz and type casting of HTMLElement.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/React/UsingReferences.md#2025-04-22_snippet_0\n\nLANGUAGE: F#\nCODE:\n```\n[<ReactComponent>]\nlet FullFocusInputExample() =\n    // obtain a reference\n    let inputRef = React.useRef(None)\n\n    let focusTextInput() =\n        match inputRef.current with\n        | None -> ()\n        | Some element ->\n            let inputElement = unbox<HTMLInputElement> element\n            inputElement.focus()\n\n    Html.div [\n        Html.input [\n            prop.ref inputRef\n            prop.type'.text\n        ]\n\n        Html.button [\n            prop.onClick (fun _ -> focusTextInput())\n            prop.text \"Focus Input\"\n        ]\n    ]\n```\n\n----------------------------------------\n\nTITLE: Combining Elmish with React Hooks\nDESCRIPTION: Demonstrates how to combine React.useElmish with other React hooks like useState and useEffect. It includes a timer subscription example and local state management.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz.UseElmish/Index.md#2025-04-22_snippet_3\n\nLANGUAGE: fsharp\nCODE:\n```\n[<ReactComponent>]\nlet Counter() =\n    let localCount, setLocalCount = React.useState(0)\n    let state, dispatch = React.useElmish(init, update, [| |])\n\n    let subscribeToTimer() =\n        // start the ticking\n        let subscriptionId = setTimeout (fun _ -> dispatch Increment) 1000\n        // return IDisposable with cleanup code\n        { new IDisposable with member this.Dispose() = clearTimeout(subscriptionId) }\n\n    React.useEffect(subscribeToTimer, [| |])\n\n    Html.div [\n        Html.h1 (state.Count + localCount)\n        Html.button [\n            prop.text \"Increment\"\n            prop.onClick (fun _ -> dispatch Increment)\n        ]\n\n        Html.button [\n            prop.text \"Decrement\"\n            prop.onClick (fun _ -> dispatch Decrement)\n        ]\n\n        Html.button [\n            prop.text \"Increment local state\"\n            prop.onClick (fun _ -> setLocalCount(localCount + 1))\n        ]\n    ]\n```\n\n----------------------------------------\n\nTITLE: Alternative Timer Subscription using React.createDisposable in F#\nDESCRIPTION: Demonstrates an alternative approach using React.createDisposable for cleanup handling.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/React/SubscriptionsWithEffects.md#2025-04-22_snippet_2\n\nLANGUAGE: fsharp\nCODE:\n```\nlet subscribeToTimer() =\n    // start the ticking\n    let subscriptionId = setTimeout (fun _ -> if not paused then setValue (fun prev -> prev  + 1)) 1000\n    // return IDisposable with cleanup code that stops the timer\n    React.createDisposable(fun _ -> clearTimeout subscriptionId)\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Value Selection in Feliz.SelectSearch Dropdown in F#\nDESCRIPTION: Demonstrates how to enable multiple value selection in a Feliz.SelectSearch dropdown using selectSearch.multiple and selectSearch.printOptions.onFocus attributes. This example uses the component in a controlled form.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/SelectSearch/README.md#2025-04-22_snippet_5\n\nLANGUAGE: fsharp\nCODE:\n```\nlet (selectedValues, setSelectedValues) = React.useState<string list> [ ]\n\nSelectSearch.selectSearch [\n    selectSearch.value selectedValues\n    selectSearch.placeholder \"Select a language\"\n    selectSearch.multiple true\n    selectSearch.printOptions.onFocus\n    selectSearch.onChange (fun (values: string list) -> setSelectedValues values)\n    selectSearch.options [\n        { value = \"en-GB\"; name = \"English\"; disabled = false }\n        { value = \"fr-FR\"; name = \"French\"; disabled = false }\n        { value = \"nl-NL\"; name = \"Dutch\"; disabled = false }\n    ]\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Fetching with useDeferredCallback in F#\nDESCRIPTION: An alternative implementation using React.useDeferredCallback which provides more explicit control over when the asynchronous operation is executed and how its result is handled. This approach separates state management from the async operation.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz.UseDeferred/Index.md#2025-04-22_snippet_1\n\nLANGUAGE: fsharp\nCODE:\n```\n[<ReactComponent>]\nlet BasicDeferred() =\n    let loadData = async {\n        do! Async.Sleep 1000\n        return \"Hello!\"\n    }\n\n    let (data, setData) = React.useState(Deferred.HasNotStartedYet)\n\n    let startLoadingData = React.useDeferredCallback((fun () -> loadData), setData)\n\n    React.useEffect(startLoadingData, [| |])\n\n    match data with\n    | Deferred.HasNotStartedYet -> Html.none\n    | Deferred.InProgress -> Html.i [ prop.className [ \"fa\"; \"fa-refresh\"; \"fa-spin\"; \"fa-2x\" ] ]\n    | Deferred.Failed error -> Html.div error.Message\n    | Deferred.Resolved content -> Html.h1 content\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Date Input in Feliz\nDESCRIPTION: Demonstrates how to create a basic date input element that manages its state using React.useState. This component uses prop.type'.date to render a date picker and updates the selectedDate state when the input changes.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/React/WorkingWithDates.md#2025-04-22_snippet_0\n\nLANGUAGE: fsharp\nCODE:\n```\n[<ReactComponent>]\nlet SimpleDateInput() =\n    let (selectedDate, updateDate) = React.useState(DateTime.Now)\n    Html.input [\n        prop.type'.date\n        prop.value selectedDate\n        prop.onChange (fun newValue -> updateDate newValue)\n    ]\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Dropdown with Feliz.SelectSearch in F#\nDESCRIPTION: Demonstrates how to create a basic dropdown using Feliz.SelectSearch. It includes a placeholder, onChange event handler, and a list of language options.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/SelectSearch/README.md#2025-04-22_snippet_1\n\nLANGUAGE: fsharp\nCODE:\n```\nopen Feliz\nopen Feliz.SelectSearch\n\n[<ReactComponent>]\nlet BasicDropdown() =\n    let (selectedValue, setSelectedValue) = React.useState<string option>(None)\n    Html.div [\n        prop.style [ style.width 400 ]\n        prop.children [\n            SelectSearch.selectSearch [\n                selectSearch.placeholder \"Select a language\"\n                selectSearch.onChange (fun value -> setSelectedValue(Some value))\n                selectSearch.options [\n                    { value = \"en-GB\"; name = \"English\"; disabled = false }\n                    { value = \"fr-FR\"; name = \"French\"; disabled = false }\n                    { value = \"nl-NL\"; name = \"Dutch\"; disabled = false }\n                ]\n            ]\n\n            match selectedValue with\n            | None -> Html.h3 \"No value selected\"\n            | Some value -> Html.h3 (sprintf \"Selected value '%s'\" value)\n        ]\n    ]\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Styling in Feliz with F# 4.7\nDESCRIPTION: This example demonstrates how to apply conditional styling in Feliz using F# 4.7 features. It shows how to conditionally set style properties based on component state without needing to use the 'yield' keyword, resulting in cleaner and more concise code.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/TypeSafeStyling.md#2025-04-22_snippet_1\n\nLANGUAGE: F#\nCODE:\n```\nHtml.div [\n    prop.style [\n        style.margin 10\n        style.borderRadius 15\n        if state.Errored\n        then style.color.red\n        else style.color.green\n    ]\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Search Predicate in Feliz.SelectSearch Dropdown in F#\nDESCRIPTION: Shows how to customize the search functionality in a Feliz.SelectSearch dropdown using the selectSearch.filterOptions attribute. This example filters out disabled items and only returns items whose names start with the search query.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/SelectSearch/README.md#2025-04-22_snippet_4\n\nLANGUAGE: fsharp\nCODE:\n```\nSelectSearch.selectSearch [\n    selectSearch.placeholder \"Select a language\"\n    selectSearch.search true\n    selectSearch.onChange (fun value -> setSelectedValue(Some value))\n    selectSearch.filterOptions (fun item searchQuery -> not item.disabled && item.name.StartsWith searchQuery)\n    selectSearch.options [\n        { value = \"en-GB\"; name = \"English\"; disabled = true }\n        { value = \"fr-FR\"; name = \"French\"; disabled = false }\n        { value = \"nl-NL\"; name = \"Dutch\"; disabled = false }\n    ]\n]\n```\n\n----------------------------------------\n\nTITLE: Creating a Searchable Dropdown with Feliz.SelectSearch in F#\nDESCRIPTION: Shows how to enable searching in a Feliz.SelectSearch dropdown by using the selectSearch.search attribute set to true.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/SelectSearch/README.md#2025-04-22_snippet_2\n\nLANGUAGE: fsharp\nCODE:\n```\nSelectSearch.selectSearch [\n    selectSearch.placeholder \"Select a language\"\n    selectSearch.search true\n    selectSearch.onChange (fun value -> setSelectedValue(Some value))\n    selectSearch.options [\n        { value = \"en-GB\"; name = \"English\"; disabled = false }\n        { value = \"fr-FR\"; name = \"French\"; disabled = false }\n        { value = \"nl-NL\"; name = \"Dutch\"; disabled = false }\n    ]\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Feliz using NuGet or Paket in F#\nDESCRIPTION: This snippet shows how to install the Feliz package using either NuGet or Paket package managers for F# projects.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/Installation.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# nuget\ndotnet add package Feliz\n# paket\npaket add Feliz --project ./project/path\n```\n\n----------------------------------------\n\nTITLE: Implementing Area Chart with Dynamic Fill Colors in F# using Feliz.Recharts\nDESCRIPTION: Creates an area chart that displays data with different fill colors above and below zero using linear gradients. The implementation includes data structure definition, gradient offset calculation based on data values, and chart component configuration using Feliz.Recharts components.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Recharts/AreaCharts/AreaChartFillByValue.md#2025-04-22_snippet_0\n\nLANGUAGE: fsharp\nCODE:\n```\nmodule App\n\nopen Feliz\nopen Feliz.Recharts\nopen Fable.Core.Experimental\n\ntype Point = { name: string; uv: int; pv: int }\n\nlet data = [\n    { name = \"Page A\"; uv = 4000; pv = 2400 }\n    { name = \"Page B\"; uv = 3000; pv = 1398 }\n    { name = \"Page C\"; uv = -1000; pv = 9800 }\n    { name = \"Page D\"; uv = 500; pv = 3908 }\n    { name = \"Page E\"; uv = -2000; pv = 4800 }\n    { name = \"Page F\"; uv = -250; pv = 3800 }\n    { name = \"Page G\"; uv = 3490; pv = 4300 }\n]\n\nlet getOffset (data: Point list) =\n    match data with\n    | [ ] -> 0.0\n    | points ->\n        let dataMax = points |> List.maxBy (fun point -> point.uv)\n        let dataMin = points |> List.minBy (fun point -> point.uv)\n\n        if dataMax.uv <= 0\n        then 0.0\n        elif dataMin.uv >= 0\n        then 1.0\n        else float dataMax.uv / (float dataMax.uv - float dataMin.uv)\n\nlet getGradientDefinition (gradientId: string) (data: Point list) =\n    let offset = getOffset data\n    Html.defs [\n        Html.linearGradient [\n            prop.id gradientId\n            prop.x1 0; prop.x2 0\n            prop.y1 0; prop.y2 1\n            prop.children [\n                Html.stop [\n                    prop.offset offset\n                    prop.stopColor \"green\"\n                    prop.stopOpacity 1.0\n                ]\n\n                Html.stop [\n                    prop.offset offset\n                    prop.stopColor \"red\"\n                    prop.stopOpacity 1.0\n                ]\n            ]\n        ]\n    ]\n\n[<ReactComponent>]\nlet Chart() =\n    Recharts.areaChart [\n        areaChart.height 400\n        areaChart.width 500\n        areaChart.data data\n        areaChart.margin(top=10, right=30)\n        areaChart.children [\n            Recharts.cartesianGrid [ cartesianGrid.strokeDasharray(3, 3) ]\n            Recharts.xAxis [ xAxis.dataKey (fun point -> point.name) ]\n            Recharts.yAxis [ ]\n            Recharts.tooltip [ ]\n            getGradientDefinition \"splitColor\" data\n            Recharts.area [\n                area.monotone\n                area.dataKey (fun point -> point.uv)\n                area.stroke color.black\n                area.fill \"url(#splitColor)\"\n            ]\n        ]\n    ]\n\nopen Browser.Dom\n\nReactDOM.render(Chart(), document.getElementById \"root\")\n```\n\n----------------------------------------\n\nTITLE: Using CancellationToken for Async Operations in F# React Components\nDESCRIPTION: Demonstrates how to use React.useCancellationToken to properly handle component unmounting during async operations.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/React/SubscriptionsWithEffects.md#2025-04-22_snippet_3\n\nLANGUAGE: fsharp\nCODE:\n```\n[<ReactComponent>]\nlet UseToken(failedCallback: unit -> unit) =\n    let token = React.useCancellationToken()\n    React.useEffect(fun () ->\n        async {\n            do! Async.Sleep 4000\n            failedCallback()\n        }\n        |> fun a -> Async.StartImmediate(a,token.current)\n    )\n\n    Html.none\n\n[<ReactComponent>]\nlet Result(text: string) = Html.div text\n\n[<ReactComponent>]\nlet Main() =\n    let renderChild,setRenderChild = React.useState true\n    let resultText,setResultText = React.useState \"Pending...\"\n\n    let setFailed = React.useCallbackRef(fun () -> setResultText \"You didn't cancel me in time!\")\n\n    Html.div [\n        if renderChild then UseToken(setFailed)\n        Result(resultText)\n        Html.button [\n            prop.classes [ Bulma.Button; Bulma.HasBackgroundPrimary; Bulma.HasTextWhite ]\n            prop.disabled(resultText = \"Disposed\")\n            prop.text \"Dispose\"\n            prop.onClick(fun _ ->\n                async {\n                    setResultText \"Disposed\"\n                    setRenderChild false\n                }\n                |> Async.StartImmediate\n            )\n        ]\n\n        Html.button [\n            prop.classes [ Bulma.Button; Bulma.HasBackgroundPrimary; Bulma.HasTextWhite ]\n            prop.disabled (renderChild && resultText = \"Pending...\")\n            prop.text \"Reset\"\n            prop.onClick(fun _ ->\n                async {\n                    setResultText \"Pending...\"\n                    setRenderChild true\n                }\n                |> Async.StartImmediate\n            )\n        ]\n    ]\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic PigeonMaps Map with Marker in F#\nDESCRIPTION: Demonstrates how to create a basic map using Feliz.PigeonMaps with a custom marker. The map is centered on specific coordinates, has a set zoom level, and includes a marker with hover effects.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/PigeonMaps/README.md#2025-04-22_snippet_0\n\nLANGUAGE: fsharp\nCODE:\n```\nopen Feliz\nopen Feliz.PigeonMaps\n\nlet pigeonMap = PigeonMaps.map [\n    map.center(50.879, 4.6997)\n    map.zoom 12\n    map.height 350\n    map.markers [\n        PigeonMaps.marker [\n            marker.anchor(50.879, 4.6997)\n            marker.offsetLeft 15\n            marker.offsetTop 30\n            marker.render (fun marker -> [\n                Html.i [\n                    if marker.hovered\n                    then prop.style [ style.color.red; style.cursor.pointer ]\n                    prop.className [ \"fa\"; \"fa-map-marker\"; \"fa-2x\" ]\n                ]\n            ])\n        ]\n    ]\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Two-Level Pie Chart with Feliz.Recharts in F#\nDESCRIPTION: This code demonstrates creating a two-level pie chart with inner and outer rings using Feliz.Recharts. It defines a data model for pie slices, creates two series of data, and configures a pie chart component with specific dimensions, radii, and styling options for each level.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Recharts/PieCharts/TwoLevelPieChart.md#2025-04-22_snippet_0\n\nLANGUAGE: fsharp\nCODE:\n```\nopen Feliz\nopen Feliz.Recharts\n\ntype PieSlice = { name: string; value: int }\n\nlet firstSerie = [\n    { name = \"Group A\"; value = 400 }\n    { name = \"Group B\"; value = 300 }\n    { name = \"Group C\"; value = 300 }\n    { name = \"Group D\"; value = 200 }\n]\n\nlet secondSerie = [\n    { name = \"A1\"; value = 100 }\n    { name = \"A2\"; value = 300 }\n    { name = \"B1\"; value = 100 }\n    { name = \"B2\"; value = 80 }\n    { name = \"B3\"; value = 40 }\n    { name = \"B4\"; value = 30 }\n    { name = \"B5\"; value = 50 }\n    { name = \"C1\"; value = 100 }\n    { name = \"C2\"; value = 200 }\n    { name = \"D1\"; value = 150 }\n    { name = \"D2\"; value = 50 }\n]\n\n[<ReactComponent>]\nlet PieChart() =\n    Recharts.pieChart [\n        pieChart.height 400\n        pieChart.width 400\n        pieChart.children [\n            Recharts.pie [\n                pie.data firstSerie\n                pie.dataKey (fun point -> point.value)\n                pie.cx 200\n                pie.cy 200\n                pie.outerRadius 60\n                pie.fill \"#8884d8\"\n            ]\n            Recharts.pie [\n                pie.data secondSerie\n                pie.dataKey (fun point -> point.value)\n                pie.cx 200\n                pie.cy 200\n                pie.innerRadius 70\n                pie.outerRadius 90\n                pie.fill \"#82ca9d\"\n                pie.label true\n            ]\n        ]\n    ]\n\nopen Browser.Dom\n\nReactDOM.render(PieChart(), document.getElementById \"root\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Portals and Popup components in Feliz (F#)\nDESCRIPTION: This F# code snippet demonstrates how to create a reusable Portal component using ReactDOM.createPortal, and how to implement a PortalsPopup component. It also includes a PortalsContainer component that uses the Portal to render the popup outside its DOM hierarchy.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/React/Portals.md#2025-04-22_snippet_1\n\nLANGUAGE: fsharp\nCODE:\n```\nopen Browser.Dom\n\n[<ReactComponent>]\nlet Portal(content: ReactElement) =\n    let root = document.getElementById(\"root\")\n    ReactDOM.createPortal(content, root)\n\n[<ReactComponent>]\nlet PortalsPopup() =\n    Html.div [\n        prop.style [\n            style.position.absolute\n            style.top 10\n            style.right 10\n            style.padding 10\n            style.backgroundColor.lightGreen\n        ]\n        prop.children [\n            Html.p [\n                prop.text \"Portals can be used to escape the parent component.\"\n            ]\n        ]\n    ]\n\n[<ReactComponent>]\nlet PortalsContainer() =\n    Html.div [\n        prop.style [\n            style.padding 10\n            style.overflow.hidden\n        ]\n        prop.children [\n            Portal(PortalsPopup())\n        ]\n    ]\n```\n\n----------------------------------------\n\nTITLE: Implementing Paid Custom Tile Provider with MapTiler in Feliz PigeonMaps (F#)\nDESCRIPTION: This snippet demonstrates how to integrate a paid map tile provider (MapTiler) with PigeonMaps. It shows how to configure the provider with an API key and map ID to load custom map tiles.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/PigeonMaps/README.md#2025-04-22_snippet_6\n\nLANGUAGE: fsharp\nCODE:\n```\nlet mapTilerKey = \"YOUR-KEY-HERE\"\nlet mapTilerId = \"SOME-MAP-ID\"\n\nlet mapTilerProvider x y z dpr =\n    sprintf \"https://api.maptiler.com/maps/%s/256/%A/%A/%A.png?key=%s\" mapTilerId z x y mapTilerKey\n\nlet pigeonMap = PigeonMaps.map [\n    map.center(50.879, 4.6997)\n    map.zoom 12\n    map.height 350\n    map.provider mapTilerProvider\n    map.markers [\n        PigeonMaps.marker [\n            marker.anchor(50.879, 4.6997)\n            marker.offsetLeft 15\n            marker.offsetTop 30\n            marker.render (fun marker -> [\n                Html.i [\n                    if marker.hovered\n                    then prop.style [ style.color.red; style.cursor.pointer ]\n                    prop.className [ \"fa\"; \"fa-map-marker\"; \"fa-2x\" ]\n                ]\n            ])\n        ]\n    ]\n]\n```\n\n----------------------------------------\n\nTITLE: Using the 'attr' Alias in a Feliz React Component\nDESCRIPTION: This example demonstrates using the custom 'attr' alias instead of 'prop' in a simple React counter component. The component uses the alias for setting button text and click event handlers.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/React/AliasingProp.md#2025-04-22_snippet_1\n\nLANGUAGE: fsharp\nCODE:\n```\nmodule App\n\nopen Feliz\n\n[<ReactComponent>]\nlet Counter() =\n    let (count, setCount) = React.useState(0)\n    Html.div [\n        Html.h1 count\n        Html.button [\n            attr.text \"Increment\"\n            attr.onClick (fun _ -> setCount(count + 1))\n        ]\n    ]\n```\n\n----------------------------------------\n\nTITLE: Using React.useImperativeHandle for Custom Ref Behavior in F#\nDESCRIPTION: This snippet shows how to use React.useImperativeHandle to override the behavior of a forwarded ref. It demonstrates modifying the focus behavior to set text in a div instead of focusing an input element.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/React/UsingReferences.md#2025-04-22_snippet_3\n\nLANGUAGE: F#\nCODE:\n```\nlet forwardRefImperativeChild = React.forwardRef(fun ((), ref) ->\n    let divText,setDivText = React.useState \"\"\n    let inputRef = React.useInputRef()\n\n    React.useImperativeHandle(ref, fun () ->\n        inputRef.current\n        |> Option.map(fun innerRef ->\n            {| focus = fun () -> setDivText innerRef.className |})\n    )\n\n    Html.div [\n        Html.input [\n            prop.className \"Howdy!\"\n            prop.type'.text\n            prop.ref inputRef\n        ]\n        Html.div [\n            prop.text divText\n        ]\n    ])\n\nlet forwardRefImperativeParent = React.functionComponent(fun () ->\n    let ref = React.useRef<{| focus: unit -> unit |} option>(None)\n\n    Html.div [\n        forwardRefImperativeChild((), ref)\n        Html.button [\n            prop.text \"Focus Input\"\n            prop.onClick <| fun ev ->\n                ref.current\n                |> Option.iter (fun elem -> elem.focus())\n        ]\n    ])\n```\n\n----------------------------------------\n\nTITLE: User Profile Component with Dependency Array\nDESCRIPTION: Illustrates the use of the dependencies array in React.useElmish to reinitialize the component when input props change. It also shows integration with Feliz.Router for URL-based user profile loading.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz.UseElmish/Index.md#2025-04-22_snippet_2\n\nLANGUAGE: fsharp\nCODE:\n```\n[<ReactComponent>]\nlet UserProfile(userId: int) =\n    let state, dispatch = React.useElmish(init userId, update, [| box userId |])\n    renderUserProfile state disptch\n\nopen Feliz.Router\n\n[<ReactComponent>]\nlet App() =\n    let currentUrl, updateCurrentUrl = React.useState(Router.currentUrl())\n    React.router [\n        router.onUrlChanged updateCurrentUrl\n        router.children [\n            match currentUrl with\n            | [ \"user\"; Route.Int userId ] -> UserProfile(userId)\n            | _ -> Html.h1 \"Not found\"\n        ]\n    ]\n\nopen Browser.Dom\n\nReactDOM.render(App(), document.getElementById \"feliz-app\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Global Alias for 'prop' in Feliz using F#\nDESCRIPTION: This snippet defines an AutoOpen module that creates a global alias 'attr' for the Feliz 'prop' type. The AutoOpen attribute ensures the alias is available throughout the application without explicit imports.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/React/AliasingProp.md#2025-04-22_snippet_0\n\nLANGUAGE: fsharp\nCODE:\n```\n[<AutoOpen>]\nmodule FelizExtensions\n\nopen Feliz\n\ntype attr = prop\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Interactive Charts with Feliz.RoughViz\nDESCRIPTION: Shows how to create an interactive bar chart that updates as data and configurations change. Demonstrates React state management, event handling, and interactive features like clicking on bars to select datapoints.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/RoughViz/Index.md#2025-04-22_snippet_5\n\nLANGUAGE: fsharp\nCODE:\n```\nopen Feliz\nopen Feliz.RoughViz\n\nlet dynamicRoughChart = React.functionComponent(fun () ->\n    let (data, setData) = React.useStateWithUpdater [\n        (\"point1\", 70.0)\n        (\"point2\", 40.0)\n        (\"point3\", 65.0)\n    ]\n\n    let roughness, setRoughness = React.useState 3\n\n    let title, setTitle = React.useState \"Random Data Points\"\n\n    let addDataPoint() = setData <| fun previousState ->\n        let pointCount = List.length previousState\n        let pointLabel = \"point\" + string (pointCount + 1)\n        let nextPoint = (pointLabel, System.Random().NextDouble() * 100.0)\n        List.append previousState [ nextPoint ]\n\n    let barClicked (pointIndex: int) =\n        let (label, value) = List.item pointIndex data\n        setTitle (sprintf \"Clicked %s: %f\" label value)\n\n    Html.div [\n\n        Html.button [\n            prop.className \"button is-primary\"\n            prop.onClick (fun _ -> addDataPoint())\n            prop.text \"Add Datapoint\"\n        ]\n\n        Html.h3 (sprintf \"Roughness: %d\" roughness)\n\n        Html.input [\n            prop.className \"input\"\n            prop.type'.range\n            prop.min 1\n            prop.max 10\n            prop.valueOrDefault roughness\n            prop.onChange (fun (value: string) -> try setRoughness(int value) with | _ -> ())\n            prop.style [ style.marginBottom 20 ]\n        ]\n\n        RoughViz.barChart [\n            barChart.title title\n            barChart.data data\n            barChart.roughness roughness\n            barChart.color color.skyBlue\n            barChart.stroke color.darkCyan\n            barChart.axisFontSize 18\n            barChart.fillStyle.crossHatch\n            barChart.highlight color.lightGreen\n            barChart.barClicked (fun index -> barClicked index)\n        ]\n    ])\n```\n\n----------------------------------------\n\nTITLE: Forwarding Refs to Child Components in F# React\nDESCRIPTION: This example demonstrates how to use React.forwardRef to pass refs from a parent component to a child component. It shows the implementation of both the child and parent components using Feliz.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/React/UsingReferences.md#2025-04-22_snippet_2\n\nLANGUAGE: F#\nCODE:\n```\nlet forwardRefChild = React.forwardRef(fun ((), ref) ->\n    Html.input [\n        prop.type'.text\n        prop.ref ref\n    ])\n\nlet forwardRefParent = React.functionComponent(fun () ->\n    let inputRef = React.useInputRef()\n\n    Html.div [\n        forwardRefChild((), inputRef)\n        Html.button [\n            prop.text \"Focus Input\"\n            prop.onClick <| fun ev ->\n                inputRef.current\n                |> Option.iter (fun elem -> elem.focus())\n        ]\n    ])\n```\n\n----------------------------------------\n\nTITLE: Implementing Lazy State Initialization in F# React Components\nDESCRIPTION: Demonstrates how to use lazy state initialization to improve performance with expensive initialization operations by using a function parameter with React.useState.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/React/StatefulComponents.md#2025-04-22_snippet_3\n\nLANGUAGE: fsharp\nCODE:\n```\n[<ReactComponent>]\nlet UseStateNormal() =\n    let count,setCount = React.useState (sortNumbers())\n    Html.div [\n        prop.classes [ Bulma.Box ]\n        prop.children [\n            Html.div [\n                prop.text (sprintf \"Normal Count: %i\" count)\n            ]\n        ]\n    ]\n\n[<ReactComponent>]\nlet UseStateLazy() =\n    let count,setCount = React.useState (fun () -> sortNumbers())\n    Html.div [\n        prop.classes [ Bulma.Box ]\n        prop.children [\n            Html.div [\n                prop.text (sprintf \"Lazy Count: %i\" count)\n            ]\n        ]\n    ]\n```\n\n----------------------------------------\n\nTITLE: Implementing a SimpleLineChart with Feliz.Recharts in F#\nDESCRIPTION: This code snippet demonstrates how to create a simple line chart with multiple data series using Feliz.Recharts. It defines a data model, initializes sample data, and configures chart components including axes, grid, tooltip, and legend. Two lines with different colors are added to visualize different data properties (uv and pv).\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Recharts/LineCharts/SimpleLineChart.md#2025-04-22_snippet_0\n\nLANGUAGE: fsharp\nCODE:\n```\nmodule App\n\nopen Feliz\nopen Feliz.Recharts\n\ntype Point = { name: string; uv: int; pv: int; }\n\nlet data = [\n    { name = \"Page A\"; uv = 4000; pv = 2400 }\n    { name = \"Page B\"; uv = 3000; pv = 1398 }\n    { name = \"Page C\"; uv = 2000; pv = 9800 }\n    { name = \"Page D\"; uv = 2780; pv = 3908 }\n    { name = \"Page E\"; uv = 1890; pv = 4800 }\n    { name = \"Page F\"; uv = 2390; pv = 3800 }\n    { name = \"Page G\"; uv = 3490; pv = 4300 }\n]\n\n[<ReactComponent>]\nlet SimpleLineChart() =\n    Recharts.lineChart [\n        lineChart.width 500\n        lineChart.height 300\n        lineChart.data data\n        lineChart.margin(top=5, right=30)\n        lineChart.children [\n            Recharts.cartesianGrid [ cartesianGrid.strokeDasharray(3, 3) ]\n            Recharts.xAxis [ xAxis.dataKey (fun point -> point.name) ]\n            Recharts.yAxis [ ]\n            Recharts.tooltip [ ]\n            Recharts.legend [ ]\n            Recharts.line [\n                line.monotone\n                line.dataKey (fun point -> point.pv)\n                line.stroke \"#8884d8\"\n            ]\n\n            Recharts.line [\n                line.monotone\n                line.dataKey (fun point -> point.uv)\n                line.stroke \"#82ca9d\"\n            ]\n        ]\n    ]\n\nopen Browser.Dom\n\nReactDOM.render(SimpleLineChart(), document.getElementById \"root\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Bar Chart with Feliz.Recharts in F#\nDESCRIPTION: This code demonstrates how to create a simple bar chart using the Feliz.Recharts library. It defines a data model, creates sample data points, and constructs a React component that renders a bar chart with two series (pv and uv values). The chart includes features like a grid, axes, tooltips, and a legend.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Recharts/BarCharts/SimpleBarChart.md#2025-04-22_snippet_0\n\nLANGUAGE: fsharp\nCODE:\n```\nmodule App\n\nopen Feliz\nopen Feliz.Recharts\n\ntype Point = { name: string; uv: int; pv: int; }\n\nlet data = [\n    { name = \"Page A\"; uv = 4000; pv = 2400 }\n    { name = \"Page B\"; uv = 3000; pv = 1398 }\n    { name = \"Page C\"; uv = 2000; pv = 9800 }\n    { name = \"Page D\"; uv = 2780; pv = 3908 }\n    { name = \"Page E\"; uv = 1890; pv = 4800 }\n    { name = \"Page F\"; uv = 2390; pv = 3800 }\n    { name = \"Page G\"; uv = 3490; pv = 4300 }\n]\n\n\nlet chart = React.functionComponent(fun () ->\n    Recharts.barChart [\n        barChart.width 500\n        barChart.height 300\n        barChart.data data\n        barChart.children [\n            Recharts.cartesianGrid [ cartesianGrid.strokeDasharray(3, 3) ]\n            Recharts.xAxis [ xAxis.dataKey (fun point -> point.name) ]\n            Recharts.yAxis [ ]\n            Recharts.tooltip [ ]\n            Recharts.legend [ ]\n            Recharts.bar [\n                bar.dataKey (fun point -> point.pv)\n                bar.fill \"#8884d8\"\n            ]\n\n            Recharts.bar [\n                bar.dataKey (fun point -> point.uv)\n                bar.fill \"#82ca9d\"\n            ]\n        ]\n    ])\n\nopen Browser.Dom\n\nReactDOM.render(chart, document.getElementById \"root\")\n```\n\n----------------------------------------\n\nTITLE: Installing Feliz.PigeonMaps using Femto in Bash\nDESCRIPTION: This snippet shows how to use Femto to install Feliz.PigeonMaps. Femto is a tool that can install both the NuGet package and npm dependency in one command.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/PigeonMaps/Installation.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd ./project\nfemto install Feliz.PigeonMaps\n```\n\n----------------------------------------\n\nTITLE: Implementing React Strict Mode with Warning Example in F#/Feliz\nDESCRIPTION: Demonstrates the implementation of React's Strict Mode in Feliz by creating a component that intentionally uses an unsafe lifecycle method (componentWillMount) to trigger a warning. The example shows how strict mode helps identify potential issues in development.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/React/StrictMode.md#2025-04-22_snippet_0\n\nLANGUAGE: fsharp\nCODE:\n```\ntype StrictModeWarning () =\n    inherit Fable.React.Component<obj,obj>()\n\n    // The unsafe call.\n    override _.componentWillMount() = ()\n\n    override _.render () =\n        Html.div [\n            prop.text \"I cause a warning!\"\n        ]\n\n[<ReactComponent>]\nlet StrictModeExample() =\n    Html.div [\n        prop.style [\n            style.display.inheritFromParent\n        ]\n        prop.children [\n            React.strictMode [\n                Fable.React.Helpers.ofType<StrictModeWarning,obj,obj> \"\" []\n            ]\n        ]\n    ]\n```\n\n----------------------------------------\n\nTITLE: Managing Parallel Async Operations with useDeferredParallel in F#\nDESCRIPTION: An example of using React.useDeferredParallel to handle multiple dependent asynchronous operations in parallel while maintaining individual state tracking for each operation. This approach is useful when needing to load items that depend on the results of a previous operation.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz.UseDeferred/Index.md#2025-04-22_snippet_3\n\nLANGUAGE: fsharp\nCODE:\n```\n[<ReactComponent>]\nlet ParallelDeferred() =\n    let loadIds = async {\n        do! Async.Sleep 1000\n        return [ 1 .. 5 ]\n    }\n\n    let loadItem itemId = async {\n        do! Async.Sleep (itemId * 1000)\n        return sprintf \"Loaded item %d\" itemId\n    }\n\n    let itemIds = React.useDeferred(loadIds, [|  |])\n\n    let items = React.useDeferredParallel(itemIds, fun ids -> [ for itemId in ids -> itemId, loadItem itemId ])\n\n    match itemIds with\n    | Deferred.HasNotStartedYet -> Html.none\n    | Deferred.InProgress -> Html.i [ prop.className [ \"fa\"; \"fa-refresh\"; \"fa-spin\"; \"fa-2x\" ] ]\n    | Deferred.Failed error -> Html.h1 \"oops\"\n    | Deferred.Resolved ids ->\n        Html.ul [\n            for (id, item) in items ->\n            React.keyedFragment(id, [\n                match item with\n                | Deferred.HasNotStartedYet -> Html.none\n                | Deferred.InProgress -> Html.li [ Html.i [ prop.className [ \"fa\"; \"fa-refresh\"; \"fa-spin\" ] ] ]\n                | Deferred.Failed error -> Html.h1 \"Oops\"\n                | Deferred.Resolved item -> Html.li item\n            ])\n        ]\n```\n\n----------------------------------------\n\nTITLE: Creating a Mixed Bar Chart with Feliz.Recharts in F#\nDESCRIPTION: This snippet demonstrates how to create a mixed bar chart using Feliz.Recharts, a F# wrapper for Recharts. It defines a data structure for the chart points, creates sample data, and renders a bar chart with two stacked bars and one standalone bar. The chart includes grid lines, axes, tooltips, and a legend.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Recharts/BarCharts/MixBarChart.md#2025-04-22_snippet_0\n\nLANGUAGE: fsharp\nCODE:\n```\nmodule App\n\nopen Feliz\nopen Feliz.Recharts\n\ntype Point = { name: string; uv: int; pv: int; amt : int }\n\nlet data = [\n    { name = \"Page A\"; uv = 4000; pv = 2400; amt = 2400 }\n    { name = \"Page B\"; uv = 3000; pv = 1398; amt = 2210 }\n    { name = \"Page C\"; uv = 2000; pv = 9800; amt = 2290 }\n    { name = \"Page D\"; uv = 2780; pv = 3908; amt = 2000 }\n    { name = \"Page E\"; uv = 1890; pv = 4800; amt = 2181 }\n    { name = \"Page F\"; uv = 2390; pv = 3800; amt = 2500 }\n    { name = \"Page G\"; uv = 3490; pv = 4300; amt = 2100 }\n]\n\nlet chart = React.functionComponent(fun () ->\n    Recharts.barChart [\n        barChart.width 500\n        barChart.height 300\n        barChart.data data\n        barChart.children [\n            Recharts.cartesianGrid [ cartesianGrid.strokeDasharray(3, 3) ]\n            Recharts.xAxis [ xAxis.dataKey (fun point -> point.name) ]\n            Recharts.yAxis [ ]\n            Recharts.tooltip [ ]\n            Recharts.legend [ ]\n            Recharts.bar [\n                bar.dataKey (fun point -> point.pv)\n                bar.fill \"#8884d8\"\n                bar.stackId \"a\"\n            ]\n\n            Recharts.bar [\n                bar.dataKey (fun point -> point.uv)\n                bar.fill \"#82ca9d\"\n                bar.stackId \"a\"\n            ]\n\n            Recharts.bar [\n                bar.dataKey (fun point -> point.amt)\n                bar.fill \"#ffc658\"\n            ]\n        ]\n    ])\n\nopen Browser.Dom\n\nReactDOM.render(chart, document.getElementById \"root\")\n```\n\n----------------------------------------\n\nTITLE: Implementing a Biaxial Line Chart with Feliz.Recharts in F#\nDESCRIPTION: This code creates a biaxial line chart with two Y-axes displaying different data series. It defines a data structure, populates sample data, and configures a chart with grid lines, axes, tooltips, and two separate line series with different colors.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Recharts/LineCharts/BiaxialLineChart.md#2025-04-22_snippet_0\n\nLANGUAGE: fsharp\nCODE:\n```\nmodule App\n\nopen Feliz\nopen Feliz.Recharts\n\ntype Point = { name: string; uv: int; pv: int; }\n\nlet data = [\n    { name = \"Page A\"; uv = 4000; pv = 2400 }\n    { name = \"Page B\"; uv = 3000; pv = 1398 }\n    { name = \"Page C\"; uv = 2000; pv = 9800 }\n    { name = \"Page D\"; uv = 2780; pv = 3908 }\n    { name = \"Page E\"; uv = 1890; pv = 4800 }\n    { name = \"Page F\"; uv = 2390; pv = 3800 }\n    { name = \"Page G\"; uv = 3490; pv = 4300 }\n]\n\n[<ReactComponent>]\nlet BiaxialLineChart() =\n    Recharts.lineChart [\n        lineChart.width 500\n        lineChart.height 300\n        lineChart.data data\n        lineChart.margin(top=5, right=30)\n        lineChart.children [\n            Recharts.cartesianGrid [ cartesianGrid.strokeDasharray(3, 3) ]\n            Recharts.xAxis [ xAxis.dataKey (fun point -> point.name) ]\n            Recharts.yAxis [ yAxis.yAxisId \"left\" ]\n            Recharts.yAxis [ yAxis.yAxisId \"right\"; yAxis.orientation.right ]\n            Recharts.tooltip [ ]\n            Recharts.legend [ ]\n            Recharts.line [\n                line.yAxisId \"left\"\n                line.monotone\n                line.dataKey (fun point -> point.pv)\n                line.stroke \"#8884d8\"\n            ]\n\n            Recharts.line [\n                line.yAxisId \"right\"\n                line.monotone\n                line.dataKey (fun point -> point.uv)\n                line.stroke \"#82ca9d\"\n            ]\n        ]\n    ]\n\nopen Browser.Dom\n\nReactDOM.render(BiaxialLineChart(), document.getElementById \"root\")\n```\n\n----------------------------------------\n\nTITLE: Defining React Components as Static Class Members in F# with Feliz\nDESCRIPTION: This snippet shows how to define React components as static members of a class, allowing for named parameters at the call-site. It includes a component definition and usage example.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/React/StatelessComponents.md#2025-04-22_snippet_2\n\nLANGUAGE: fsharp\nCODE:\n```\nopen Feliz\n\ntype Components() =\n    [<ReactComponent>]\n    static member Greeting(name: string, age: int) =\n        Html.div [\n            Html.span $\"Hello, {name}! You are {age} years old\"\n        ]\n\nHtml.div [\n    prop.className \"content\"\n    prop.children [\n        // call-site is more readable because of the named parameters\n        Components.Greeting(name=\"Jane\", age=20)\n        Components.Greeting(name=\"John\", age=25)\n    ]\n]\n```\n\n----------------------------------------\n\nTITLE: React.useState Syntax Pattern in F#\nDESCRIPTION: Shows the general syntax pattern for using React.useState hook to create state variables in F# components, including the expected types for the returned values and setter function.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/React/StatefulComponents.md#2025-04-22_snippet_1\n\nLANGUAGE: fsharp\nCODE:\n```\nlet (value, setValue) = React.useState (initialValue)\n```\n\nLANGUAGE: fsharp\nCODE:\n```\nval initialValue : 'T\nval value : 'T\nval setValue : 'T -> unit\n```\n\n----------------------------------------\n\nTITLE: Creating a Responsive Line Chart with Feliz.Recharts in F#\nDESCRIPTION: This code demonstrates how to implement a responsive line chart using Feliz.Recharts. It defines a data model, creates a line chart with multiple data series, and wraps it in a responsive container that adjusts to 100% of the parent width while maintaining a fixed height of 300px.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Recharts/LineCharts/ResponsiveFullWidth.md#2025-04-22_snippet_0\n\nLANGUAGE: fsharp\nCODE:\n```\nmodule App\n\nopen Feliz\nopen Feliz.Recharts\n\ntype Point = { name: string; uv: int; pv: int; }\n\nlet data = [\n    { name = \"Page A\"; uv = 4000; pv = 2400 }\n    { name = \"Page B\"; uv = 3000; pv = 1398 }\n    { name = \"Page C\"; uv = 2000; pv = 9800 }\n    { name = \"Page D\"; uv = 2780; pv = 3908 }\n    { name = \"Page E\"; uv = 1890; pv = 4800 }\n    { name = \"Page F\"; uv = 2390; pv = 3800 }\n    { name = \"Page G\"; uv = 3490; pv = 4300 }\n]\n\n[<ReactComponent>]\nlet ResponsiveChart() =\n    let responsiveChart =\n        Recharts.lineChart [\n            lineChart.data data\n            lineChart.margin(top=5, right=30)\n            lineChart.children [\n                Recharts.cartesianGrid [ cartesianGrid.strokeDasharray(3, 3) ]\n                Recharts.xAxis [ xAxis.dataKey (fun point -> point.name) ]\n                Recharts.yAxis [ ]\n                Recharts.tooltip [ ]\n                Recharts.legend [ ]\n                Recharts.line [\n                    line.monotone\n                    line.dataKey (fun point -> point.pv)\n                    line.stroke \"#8884d8\"\n                ]\n                Recharts.line [\n                    line.monotone\n                    line.dataKey (fun point -> point.uv)\n                    line.stroke \"#82ca9d\"\n                ]\n            ]\n        ]\n\n    Recharts.responsiveContainer [\n        responsiveContainer.width (length.percent 100)\n        responsiveContainer.height 300\n        responsiveContainer.chart responsiveChart\n    ]\n\nopen Browser.Dom\n\nReactDOM.render(ResponsiveChart(), document.getElementById \"root\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Area Chart with Feliz.Recharts in F#\nDESCRIPTION: This code creates a simple area chart using Feliz.Recharts. It defines a data model, creates sample data points, and builds a React component that renders an area chart with customized axes, grid, tooltip, and styling. The chart is then rendered to a DOM element with id 'root'.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Recharts/AreaCharts/SimpleAreaChart.md#2025-04-22_snippet_0\n\nLANGUAGE: F#\nCODE:\n```\nmodule Main\n\nopen Feliz\nopen Feliz.Recharts\n\ntype Point = { name: string; uv: int; pv: int }\n\nlet data = [\n    { name = \"Page A\"; uv = 4000; pv = 2400 }\n    { name = \"Page B\"; uv = 3000; pv = 1398 }\n    { name = \"Page C\"; uv = 2000; pv = 9800 }\n    { name = \"Page D\"; uv = 2780; pv = 3908 }\n    { name = \"Page E\"; uv = 1890; pv = 4800 }\n    { name = \"Page F\"; uv = 2390; pv = 3800 }\n    { name = \"Page G\"; uv = 3490; pv = 4300 }\n]\n\n[<ReactComponent>]\nlet Chart() =\n    Recharts.areaChart [\n        areaChart.width 500\n        areaChart.height 400\n        areaChart.data data\n        areaChart.margin(top=10, right=30)\n        areaChart.children [\n            Recharts.xAxis [ xAxis.dataKey (fun point -> point.name) ]\n            Recharts.yAxis [ ]\n            Recharts.tooltip [ ]\n            Recharts.cartesianGrid [ cartesianGrid.strokeDasharray(3, 3) ]\n            Recharts.area [\n                area.monotone\n                area.dataKey (fun point -> point.uv)\n                area.stroke \"#8884d8\"\n                area.fill \"#8884d8\"\n            ]\n        ]\n    ]\n\nopen Browser.Dom\n\nReactDOM.render(Chart(), document.getElementById \"root\")\n```\n\n----------------------------------------\n\nTITLE: Switching Between Date and DateTime Input Types in Feliz\nDESCRIPTION: Demonstrates a more complex example that allows toggling between date and dateTimeLocal input types. The component manages both the selected date (as an optional DateTime) and a boolean flag to control the input type, with buttons to reset the date or switch input modes.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/React/WorkingWithDates.md#2025-04-22_snippet_2\n\nLANGUAGE: fsharp\nCODE:\n```\n[<ReactComponent>]\nlet SwitchingBetweenDateAndDateTime() =\n    let (date, setDate) = React.useState<DateTime option>(None)\n    let (dateAndTime, toggleDateAndTime) = React.useState(false)\n\n    let formattedDate =\n        match date with\n        | None -> \"No date selected yet\"\n        | Some date -> \"Input: \" + date.ToString \"yyyy-MM-dd hh:mm\"\n\n    Html.div [\n        Html.h3 formattedDate\n\n        Html.input [\n            prop.value(date, includeTime=dateAndTime)\n            if dateAndTime\n            then prop.type'.dateTimeLocal\n            else prop.type'.date\n            prop.onChange (fun newValue -> setDate(Some newValue))\n        ]\n\n        Html.button [\n            prop.text \"Reset selected date\"\n            prop.disabled date.IsNone\n            prop.onClick (fun _ -> setDate(None))\n        ]\n\n        Html.button [\n            prop.text \"Toggle date and time\"\n            prop.disabled date.IsNone\n            prop.onClick (fun _ -> toggleDateAndTime(not dateAndTime))\n        ]\n    ]\n```\n\n----------------------------------------\n\nTITLE: Implementing Delayed Suspense in React Component (F#)\nDESCRIPTION: Shows how to use React.delaySuspense for code-split components. This example displays a loader after 500ms if the main content hasn't rendered, useful for handling fast connections with occasional delays.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz.Delay/Index.md#2025-04-22_snippet_3\n\nLANGUAGE: fsharp\nCODE:\n```\nopen Feliz\nopen Feliz.Delay\n\n[<ReactComponent>]\nlet DelaySuspense() =\n    React.delaySuspense [\n        delaySuspense.delay [\n            delay.waitFor 500\n\n            delay.children [\n                centeredSpinner\n            ]\n        ]\n\n        delaySuspense.children [\n            slowImport()\n        ]\n    ]\n```\n\n----------------------------------------\n\nTITLE: Implementing Stacked Area Chart with Feliz.Recharts in F#\nDESCRIPTION: This snippet demonstrates how to create a stacked area chart using Feliz.Recharts. It defines a Point type, sample data, and a Chart component that renders the stacked area chart with three areas representing different data series.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Recharts/AreaCharts/StackedAreaChart.md#2025-04-22_snippet_0\n\nLANGUAGE: F#\nCODE:\n```\nmodule App\n\nopen Feliz\nopen Feliz.Recharts\n\ntype Point = { name: string; uv: int; pv: int; amt: int }\n\nlet data = [\n    { name = \"Page A\"; uv = 4000; pv = 2400; amt = 2400 }\n    { name = \"Page B\"; uv = 3000; pv = 1398; amt = 2210 }\n    { name = \"Page C\"; uv = 2000; pv = 9800; amt = 2290 }\n    { name = \"Page D\"; uv = 2780; pv = 3908; amt = 2000 }\n    { name = \"Page E\"; uv = 1890; pv = 4800; amt = 2181 }\n    { name = \"Page F\"; uv = 2390; pv = 3800; amt = 2500 }\n    { name = \"Page G\"; uv = 3490; pv = 4300; amt = 2100 }\n]\n\n[<ReactComponent>]\nlet Chart() =\n    Recharts.areaChart [\n        areaChart.width 500\n        areaChart.height 400\n        areaChart.data data\n        areaChart.margin(top=10, right=30)\n        areaChart.children [\n            Recharts.cartesianGrid [ cartesianGrid.strokeDasharray(3, 3) ]\n            Recharts.xAxis [ xAxis.dataKey (fun point -> point.name) ]\n            Recharts.yAxis [ ]\n            Recharts.tooltip [ ]\n\n            Recharts.area [\n                area.monotone\n                area.dataKey (fun point -> point.uv)\n                area.stackId \"1\"\n                area.stroke \"#8884d8\"\n                area.fill \"#8884d8\"\n            ]\n\n            Recharts.area [\n                area.monotone\n                area.dataKey (fun point -> point.pv)\n                area.stackId \"1\"\n                area.stroke \"#82ca9d\"\n                area.fill \"#82ca9d\"\n            ]\n\n            Recharts.area [\n                area.monotone\n                area.dataKey (fun point -> point.amt)\n                area.stackId \"1\"\n                area.stroke \"#ffc658\"\n                area.fill \"#ffc658\"\n            ]\n        ]\n    ]\n\nopen Browser.Dom\n\nReactDOM.render(Chart(), document.getElementById \"root\")\n```\n\n----------------------------------------\n\nTITLE: Implementing a Responsive Area Chart with Gradients using Feliz.Recharts in F#\nDESCRIPTION: This code demonstrates how to create a responsive area chart using Feliz.Recharts. It defines a data structure for chart points, creates gradient definitions for area fills, builds an area chart with multiple series, and wraps it in a responsive container to enable automatic resizing to fit the parent element.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Recharts/AreaCharts/ResponsiveFullWidth.md#2025-04-22_snippet_0\n\nLANGUAGE: fsharp\nCODE:\n```\nmodule App\n\nopen Feliz\nopen Feliz.Recharts\n\ntype Point = { name: string; uv: int; pv: int }\n\nlet data = [\n    { name = \"Page A\"; uv = 4000; pv = 2400 }\n    { name = \"Page B\"; uv = 3000; pv = 1398 }\n    { name = \"Page C\"; uv = 2000; pv = 9800 }\n    { name = \"Page D\"; uv = 2780; pv = 3908 }\n    { name = \"Page E\"; uv = 1890; pv = 4800 }\n    { name = \"Page F\"; uv = 2390; pv = 3800 }\n    { name = \"Page G\"; uv = 3490; pv = 4300 }\n]\n\n\nlet createGradient (id: string) color =\n    Svg.linearGradient [\n        svg.id id\n        svg.x1 0; svg.x2 0\n        svg.y1 0; svg.y2 1\n        svg.children [\n            Svg.stop [\n                svg.offset(length.percent 5)\n                svg.stopColor color\n                svg.stopOpacity 0.8\n            ]\n            Svg.stop [\n                svg.offset(length.percent 95)\n                svg.stopColor color\n                svg.stopOpacity 0.0\n            ]\n        ]\n    ]\n\n[<ReactComponent>]\nlet Chart() =\n    let responsiveChart =\n        Recharts.areaChart [\n            areaChart.data data\n            areaChart.margin(top=10, right=30)\n            areaChart.children [\n                Svg.defs [\n                    createGradient \"colorUv\" \"#8884d8\"\n                    createGradient \"colorPv\" \"#82ca9d\"\n                ]\n                Recharts.xAxis [ xAxis.dataKey (fun point -> point.name) ]\n                Recharts.yAxis [ ]\n                Recharts.tooltip [ ]\n                Recharts.cartesianGrid [ cartesianGrid.strokeDasharray(3, 3) ]\n                Recharts.area [\n                    area.monotone\n                    area.dataKey (fun point -> point.uv)\n                    area.stroke \"#8884d8\"\n                    area.fillOpacity 1\n                    area.fill \"url(#colorUv)\"\n                ]\n                Recharts.area [\n                    area.monotone\n                    area.dataKey (fun point -> point.pv)\n                    area.stroke \"#82ca9d\"\n                    area.fillOpacity 1\n                    area.fill \"url(#colorPv)\"\n                ]\n            ]\n        ]\n\n    Recharts.responsiveContainer [\n        responsiveContainer.width (length.percent 100)\n        responsiveContainer.height 300\n        responsiveContainer.chart responsiveChart\n    ]\n\nopen Browser.Dom\n\nReactDOM.render(Chart(), document.getElementById \"root\")\n```\n\n----------------------------------------\n\nTITLE: Simplified Input Focus Example using Specialized Ref Hook in F#\nDESCRIPTION: This snippet shows a simplified version of the input focus example using a specialized React.useInputRef hook. It demonstrates how to focus an input element without explicit type casting.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/React/UsingReferences.md#2025-04-22_snippet_1\n\nLANGUAGE: F#\nCODE:\n```\n[<ReactComponent>]\nlet FocusInputExample() =\n    let inputRef = React.useInputRef()\n    let focusTextInput() = inputRef.current |> Option.iter (fun inputElement -> inputElement.focus())\n\n    Html.div [\n        Html.input [\n            prop.ref inputRef\n            prop.type'.text\n        ]\n\n        Html.button [\n            prop.onClick (fun _ -> focusTextInput())\n            prop.text \"Focus Input\"\n        ]\n    ]\n```\n\n----------------------------------------\n\nTITLE: Using useResponsive Hook with Custom Breakpoints\nDESCRIPTION: This example demonstrates how to use the useResponsive hook with custom breakpoint values. It defines a custom breakpoints record with specific pixel widths and renders different text content based on the current screen size.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz.UseMediaQuery/Index.md#2025-04-22_snippet_2\n\nLANGUAGE: fsharp\nCODE:\n```\n[<ReactComponent>]\nlet UseResponsiveCustomBreakpointsExample() =\n    let customBreakpoints = {\n        MobileLandscape = 600\n        Tablet = 960\n        Desktop = 1280\n        WideScreen = 1920\n    }\n\n    let width = React.useResponsive(customBreakpoints)\n\n    Html.div [\n        let text =\n            match width with\n            | ScreenSize.Mobile -> \"Mobile\"\n            | ScreenSize.MobileLandscape -> \"MobileLandscape\"\n            | ScreenSize.Tablet -> \"Tablet\"\n            | ScreenSize.Desktop -> \"Desktop\"\n            | ScreenSize.WideScreen -> \"WideScreen\"\n        prop.children [\n            Html.h1 text\n            Html.p \"Resize your screen to get the media query hook to re-render the component with updated information.\"\n        ]\n    ]\n```\n\n----------------------------------------\n\nTITLE: Creating Area Charts with Optional Values using Feliz.Recharts\nDESCRIPTION: Demonstrates the implementation of two area charts using Feliz.Recharts, showing different handling of null values. The first chart disconnects at null values while the second connects across them. Uses a custom Point type with optional UV values and includes standard chart elements like grid, axes, and tooltips.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Recharts/AreaCharts/OptionalValues.md#2025-04-22_snippet_0\n\nLANGUAGE: fsharp\nCODE:\n```\nopen Feliz\nopen Feliz.Recharts\n\ntype Point = { name: string; uv: int option }\n\nlet data = [\n    { name = \"Page A\"; uv = Some 4000 }\n    { name = \"Page B\"; uv = Some 3000 }\n    { name = \"Page C\"; uv = Some 2000 }\n    { name = \"Page D\"; uv = None }\n    { name = \"Page E\"; uv = Some 1890 }\n    { name = \"Page F\"; uv = Some 2390 }\n    { name = \"Page G\"; uv = Some 3490 }\n]\n\n[<ReactComponent>]\nlet Chart() =\n    React.fragment [\n        Recharts.areaChart [\n            areaChart.width 600\n            areaChart.height 200\n            areaChart.data data\n            areaChart.margin(top=10)\n            areaChart.children [\n                Recharts.cartesianGrid [ cartesianGrid.strokeDasharray(3, 3) ]\n                Recharts.xAxis [ xAxis.dataKey (fun point -> point.name) ]\n                Recharts.yAxis [ ]\n                Recharts.tooltip [ ]\n                Recharts.area [\n                    area.monotone\n                    area.connectNulls false\n                    area.dataKey (fun point -> point.uv)\n                    area.stroke \"#8884d8\"\n                    area.fill \"#8884d8\"\n                ]\n            ]\n        ]\n        Recharts.areaChart [\n            areaChart.width 600\n            areaChart.height 200\n            areaChart.data data\n            areaChart.margin(top=20)\n            areaChart.children [\n                Recharts.cartesianGrid [ cartesianGrid.strokeDasharray(3, 3) ]\n                Recharts.xAxis [ xAxis.dataKey (fun point -> point.name) ]\n                Recharts.yAxis [ ]\n                Recharts.tooltip [ ]\n                Recharts.area [\n                    area.monotone\n                    area.connectNulls true\n                    area.dataKey (fun point -> point.uv)\n                    area.stroke \"#8884d8\"\n                    area.fill \"#8884d8\"\n                ]\n            ]\n        ]\n    ]\n\n\nopen Browser.Dom\n\nReactDOM.render(Chart(), document.getElementById \"root\")\n```\n\n----------------------------------------\n\nTITLE: Creating Synchronized Area Charts with Feliz.Recharts in F#\nDESCRIPTION: Demonstrates how to create two synchronized area charts that share the same data but display different metrics (UV and PV). The charts are synchronized using the syncId property, allowing coordinated interactions between them. Includes data model definition, chart configuration, and styling.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Recharts/AreaCharts/SynchronizedAreaChart.md#2025-04-22_snippet_0\n\nLANGUAGE: fsharp\nCODE:\n```\nmodule App\n\nopen Feliz\nopen Feliz.Recharts\n\ntype Point = { name: string; uv: int; pv: int }\n\nlet data = [\n    { name = \"Page A\"; uv = 4000; pv = 2400 }\n    { name = \"Page B\"; uv = 3000; pv = 1398 }\n    { name = \"Page C\"; uv = 2000; pv = 9800 }\n    { name = \"Page D\"; uv = 2780; pv = 3908 }\n    { name = \"Page E\"; uv = 1890; pv = 4800 }\n    { name = \"Page F\"; uv = 2390; pv = 3800 }\n    { name = \"Page G\"; uv = 3490; pv = 4300 }\n]\n\n[<ReactComponent>]\nlet Chart() =\n    Html.div [\n        Html.h4 \"A demo of synchronized AreaCharts\"\n        Recharts.areaChart [\n            areaChart.width 500\n            areaChart.height 200\n            areaChart.data data\n            areaChart.syncId \"anyId\"\n            areaChart.margin(top=10, right=30)\n            areaChart.children [\n                Recharts.cartesianGrid [ cartesianGrid.strokeDasharray(3, 3) ]\n                Recharts.xAxis [ xAxis.dataKey (fun point -> point.name) ]\n                Recharts.yAxis [ ]\n                Recharts.tooltip [ ]\n                Recharts.area [\n                    area.monotone\n                    area.dataKey (fun point -> point.uv)\n                    area.stroke \"#8884d8\"\n                    area.fill \"#8884d8\"\n                ]\n            ]\n        ]\n\n        Html.p \"Maybe some other content\"\n\n        Recharts.areaChart [\n            areaChart.width 500\n            areaChart.height 200\n            areaChart.data data\n            areaChart.syncId \"anyId\"\n            areaChart.margin(top=10, right=30)\n            areaChart.children [\n                Recharts.cartesianGrid [ cartesianGrid.strokeDasharray(3, 3) ]\n                Recharts.xAxis [ xAxis.dataKey (fun point -> point.name) ]\n                Recharts.yAxis [ ]\n                Recharts.tooltip [ ]\n                Recharts.area [\n                    area.monotone\n                    area.dataKey (fun point -> point.pv)\n                    area.stroke \"#82ca9d\"\n                    area.fill \"#82ca9d\"\n                ]\n            ]\n        ]\n    ]\n\nopen Browser.Dom\n\nReactDOM.render(Chart(), document.getElementById \"root\")\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Delayed Suspense Template in React (F#)\nDESCRIPTION: Shows how to create a custom React.delaySuspense component using React.Templates.delaySuspense. This template function allows for consistent usage of delayed suspense components across an application.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz.Delay/Index.md#2025-04-22_snippet_5\n\nLANGUAGE: fsharp\nCODE:\n```\nopen Feliz\nopen Feliz.Delay\nopen Feliz.Delay.Templates\n\nlet myDelaySuspense =\n    React.Templates.delaySuspense [\n        delay.waitFor 500\n\n        delay.fallback [\n            Html.text \"Delay template!\"\n        ]\n\n        delay.children [\n            centeredSpinner\n        ]\n    ]\n\n[<ReactComponent>]\nlet CustomDelay() = myDelaySuspense [\n    slowImport()\n]\n```\n\n----------------------------------------\n\nTITLE: Rendering React Elements to Static Markup Using ReactDOMServer.renderToStaticMarkup in F#\nDESCRIPTION: This snippet shows how to generate HTML markup without React-specific attributes using ReactDOMServer.renderToStaticMarkup in Feliz. It creates a div with styled padding and child elements, then converts it to static HTML markup displayed in a pre element.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/React/RenderStaticHtml.md#2025-04-22_snippet_1\n\nLANGUAGE: fsharp\nCODE:\n```\n[<ReactComponent>]\nlet StaticMarkup() =\n    let html = Html.div [\n        prop.style [ style.padding 20 ]\n        prop.children [\n            Html.h1 \"Html content\"\n            Html.br [ ]\n        ]\n    ]\n\n    Html.pre [\n        Html.text (ReactDOMServer.renderToStaticMarkup html)\n    ]\n```\n\n----------------------------------------\n\nTITLE: Creating Area Chart with Feliz.Recharts in F#\nDESCRIPTION: Demonstrates how to create an interactive area chart using Feliz.Recharts bindings. The example shows gradient fills, multiple data series, axis configuration, and tooltips. Uses a custom Point type to represent data points with name, uv, and pv properties.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Recharts/README.md#2025-04-22_snippet_0\n\nLANGUAGE: fsharp\nCODE:\n```\nopen Feliz\nopen Feliz.Recharts\n\ntype Point = { name: string; uv: int; pv: int }\n\nlet data = [\n    { name = \"Page A\"; uv = 4000; pv = 2400 }\n    { name = \"Page B\"; uv = 3000; pv = 1398 }\n    { name = \"Page C\"; uv = 2000; pv = 9800 }\n    { name = \"Page D\"; uv = 2780; pv = 3908 }\n    { name = \"Page E\"; uv = 1890; pv = 4800 }\n    { name = \"Page F\"; uv = 2390; pv = 3800 }\n    { name = \"Page G\"; uv = 3490; pv = 4300 }\n]\n\nlet createGradient (id: string) color =\n    Svg.linearGradient [\n        svg.id id\n        svg.x1 0; svg.x2 0\n        svg.y1 0; svg.y2 1\n        svg.children [\n            Svg.stop [\n                svg.offset(length.percent 5)\n                svg.stopColor color\n                svg.stopOpacity 0.8\n            ]\n            Svg.stop [\n                svg.offset(length.percent 95)\n                svg.stopColor color\n                svg.stopOpacity 0.0\n            ]\n        ]\n    ]\n\n[<ReactComponent>]\nlet SampleChart() =\n    Recharts.areaChart [\n        areaChart.width 730\n        areaChart.height 250\n        areaChart.data data\n        areaChart.margin(top=10, right=30)\n        areaChart.children [\n            Html.defs [\n                createGradient \"colorUv\" \"#8884d8\"\n                createGradient \"colorPv\" \"#82ca9d\"\n            ]\n            Recharts.xAxis [ xAxis.dataKey (fun point -> point.name) ]\n            Recharts.yAxis [ ]\n            Recharts.tooltip [ ]\n            Recharts.cartesianGrid [ cartesianGrid.strokeDasharray(3, 3) ]\n\n            Recharts.area [\n                area.monotone\n                area.dataKey (fun point -> point.uv)\n                area.stroke \"#8884d8\"\n                area.fillOpacity 1\n                area.fill \"url(#colorUv)\"\n            ]\n\n            Recharts.area [\n                area.monotone\n                area.dataKey (fun point -> point.pv)\n                area.stroke \"#82ca9d\"\n                area.fillOpacity 1\n                area.fill \"url(#colorPv)\"\n            ]\n        ]\n    ]\n\nopen Browser.Dom\n\nReactDOM.render(SampleChart(), document.getElementById \"root\")\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Delay Template in React (F#)\nDESCRIPTION: Demonstrates how to create a custom React.delay component using React.Templates.delay. This approach allows for reusable delay components with predefined settings across an application.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz.Delay/Index.md#2025-04-22_snippet_4\n\nLANGUAGE: fsharp\nCODE:\n```\nopen Feliz\nopen Feliz.Delay\nopen Feliz.Delay.Templates\n\nlet myDelay =\n    React.Templates.delay [\n        delay.waitFor 2000\n        delay.fallback [\n            Html.text \"Delay template!\"\n        ]\n    ]\n\n[<ReactComponent>]\nlet CustomDelay() = myDelay [\n    Html.div \"Here I am from the template!\"\n]\n```\n\n----------------------------------------\n\nTITLE: Timer Subscription Implementation in F#\nDESCRIPTION: Shows the core timer subscription logic that returns an IDisposable for cleanup.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/React/SubscriptionsWithEffects.md#2025-04-22_snippet_1\n\nLANGUAGE: fsharp\nCODE:\n```\nlet subscribeToTimer() =\n    // start the timer\n    let subscriptionId = setInterval (fun _ -> if not paused then setValue (fun prev -> prev  + 1)) 1000\n    // return IDisposable with cleanup code that stops the timer\n    { new IDisposable with member this.Dispose() = clearTimeout(subscriptionId) }\n```\n\n----------------------------------------\n\nTITLE: Correct React Component Implementation with Anonymous Record in F#\nDESCRIPTION: This example shows a correct implementation of a React component using an anonymous record for input parameters. This approach satisfies React's requirement for a single object as input.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/React/CommonPitfalls.md#2025-04-22_snippet_1\n\nLANGUAGE: fsharp\nCODE:\n```\nlet counter = React.functionComponent(fun (input: {| min: int; max: int |}) ->\n    let (count, setCount) = React.useState(input.min)\n    Html.div [\n        Html.h1 count\n        Html.button [\n            prop.text \"Increment\"\n            prop.onClick (fun _ -> if count < input.max then setCount(count + 1))\n        ]\n    ])\n```\n\n----------------------------------------\n\nTITLE: Correct React Component Implementation with Named Record Type in F#\nDESCRIPTION: An alternative correct implementation using a named record type to define component props. This approach is more explicit and provides better type safety compared to anonymous records.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/React/CommonPitfalls.md#2025-04-22_snippet_2\n\nLANGUAGE: fsharp\nCODE:\n```\ntype CounterProps = { min: int; max: int }\n\nlet counter = React.functionComponent(fun (input: CounterProps) ->\n    let (count, setCount) = React.useState(input.min)\n    Html.div [\n        Html.h1 count\n        Html.button [\n            prop.text \"Increment\"\n            prop.onClick (fun _ -> if count < input.max then setCount(count + 1))\n        ]\n    ])\n```\n\n----------------------------------------\n\nTITLE: Basic Popover Implementation in F# using Feliz.Popover\nDESCRIPTION: A complete example of implementing a popover component in F# using Feliz.Popover. It demonstrates creating a functional component that manages popover state, configuring popover options, and reusing the component with different content.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Popover/README.md#2025-04-22_snippet_3\n\nLANGUAGE: fsharp\nCODE:\n```\nopen Feliz\nopen Feliz.Popover\n\nlet popoverWithText' = React.functionComponent(fun (input: {| content: string |}) ->\n    let (popoverOpen, toggleOpen) = React.useState false\n    Popover.popover [\n        popover.body [\n            // the body is the content of the pop over when it is opened\n            Html.div [\n                prop.text input.content\n                prop.style [\n                    style.backgroundColor.white\n                    style.padding 20\n                    style.borderRadius 10\n                    style.boxShadow(0, 0, 10, color.black)\n                ]\n            ]\n        ]\n        popover.isOpen popoverOpen\n        popover.place.above\n        popover.disableTip\n        popover.onOuterAction (fun _ -> toggleOpen(false))\n        popover.children [\n            /// The content that this popover will orient itself around.\n            Html.button [\n                prop.text \"Open popover\"\n                prop.onClick (fun _ -> toggleOpen(not popoverOpen))\n            ]\n        ]\n    ])\n\nlet sample = Html.div [\n    popoverWithText' {| content = \"Popover Content\" |}\n    popoverWithText' {| content = \"Another Popover\" |}\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Stateful Counter Component in F#/Feliz\nDESCRIPTION: A stateful counter component implementation using Feliz that demonstrates React hooks (useState) and event handling in F#. The component renders a counter value and an increment button that updates the state.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/ReactApiSupport.md#2025-04-22_snippet_0\n\nLANGUAGE: fsharp\nCODE:\n```\nmodule App\n\nopen Feliz\n\n[<ReactComponent>]\nlet Counter() =\n    let (count, setCount) = React.useState(0)\n    Html.div [\n        Html.h1 count\n        Html.button [\n            prop.text \"Increment\"\n            prop.onClick (fun _ -> setCount(count + 1))\n        ]\n    ]\n\nopen Browser.Dom\n\nReactDOM.render(Counter(), document.getElementById \"root\")\n```\n\n----------------------------------------\n\nTITLE: Creating React Component in JSX\nDESCRIPTION: Demonstrates a basic React component written in JSX that accepts a title prop and renders formatted content with styles and links.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/UsingJsx.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\";\n\nexport const About = ({ title }) => {\n    return (\n        <div style={{ padding: 10 }}>\n            <h1>{title}</h1>\n            <p>This component is written in JSX and can be easily imported from Feliz applications.</p>\n            <p>It accepts parameters or props like <strong style={{ color: \"red\" }}>title</strong> that come from F#</p>\n            <p>You can learn all about Feliz <a href=\"https://zaid-ajaj.github.io/Feliz\">here</a></p>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Stacked Bar Chart with Feliz.Recharts in F#\nDESCRIPTION: Implements a stacked bar chart component using Feliz.Recharts. The chart displays two data series (UV and PV values) stacked on top of each other, with configurable width, height, axes, grid lines, tooltip, and legend. The data is structured as a list of records containing name and value properties.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Recharts/BarCharts/StackedBarChart.md#2025-04-22_snippet_0\n\nLANGUAGE: fsharp\nCODE:\n```\nmodule App\n\nopen Feliz\nopen Feliz.Recharts\n\ntype Point = { name: string; uv: int; pv: int; }\n\nlet data = [\n    { name = \"Page A\"; uv = 4000; pv = 2400 }\n    { name = \"Page B\"; uv = 3000; pv = 1398 }\n    { name = \"Page C\"; uv = 2000; pv = 9800 }\n    { name = \"Page D\"; uv = 2780; pv = 3908 }\n    { name = \"Page E\"; uv = 1890; pv = 4800 }\n    { name = \"Page F\"; uv = 2390; pv = 3800 }\n    { name = \"Page G\"; uv = 3490; pv = 4300 }\n]\n\n\nlet chart = React.functionComponent(fun () ->\n    Recharts.barChart [\n        barChart.width 500\n        barChart.height 300\n        barChart.data data\n        barChart.children [\n            Recharts.cartesianGrid [ cartesianGrid.strokeDasharray(3, 3) ]\n            Recharts.xAxis [ xAxis.dataKey (fun point -> point.name) ]\n            Recharts.yAxis [ ]\n            Recharts.tooltip [ ]\n            Recharts.legend [ ]\n            Recharts.bar [\n                bar.dataKey (fun point -> point.pv)\n                bar.fill \"#8884d8\"\n                bar.stackId \"a\"\n            ]\n\n            Recharts.bar [\n                bar.dataKey (fun point -> point.uv)\n                bar.fill \"#82ca9d\"\n                bar.stackId \"a\"\n            ]\n        ]\n    ])\n\nopen Browser.Dom\n\nReactDOM.render(chart, document.getElementById \"root\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Customized Label Line Chart with Feliz.Recharts in F#\nDESCRIPTION: This code demonstrates how to implement a line chart with customized labels using Feliz.Recharts. It defines sample data points, creates a custom label renderer function, and builds a React component with two lines (one with labels, one without). The chart includes standard features like grid, axes, tooltip, and legend.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Recharts/LineCharts/CustomizedLabelLineChart.md#2025-04-22_snippet_0\n\nLANGUAGE: fsharp\nCODE:\n```\nmodule App\n\nopen Feliz\nopen Feliz.Recharts\n\ntype Point = { name: string; uv: int; pv: int; }\n\nlet data = [\n    { name = \"Page A\"; uv = 4000; pv = 2400 }\n    { name = \"Page B\"; uv = 3000; pv = 1398 }\n    { name = \"Page C\"; uv = 2000; pv = 9800 }\n    { name = \"Page D\"; uv = 2780; pv = 3908 }\n    { name = \"Page E\"; uv = 1890; pv = 4800 }\n    { name = \"Page F\"; uv = 2390; pv = 3800 }\n    { name = \"Page G\"; uv = 3490; pv = 4300 }\n]\n\nlet renderCustomLabel (input: ILabelProperties) =\n    Svg.text [\n        svg.x(input.x)\n        svg.y(input.y)\n        svg.textAnchor.middle\n        svg.dy(-4)\n        svg.fontSize 10\n        svg.fill color.black\n        svg.text input.value\n    ]\n\n[<ReactComponent>]\nlet CustomizedLabelChart() =\n    Recharts.lineChart [\n        lineChart.width 500\n        lineChart.height 300\n        lineChart.data data\n        lineChart.margin(top=20, right=30, left=20, bottom=10)\n        lineChart.children [\n            Recharts.cartesianGrid [ cartesianGrid.strokeDasharray(3, 3) ]\n            Recharts.xAxis [ xAxis.dataKey (fun point -> point.name) ]\n            Recharts.yAxis [ ]\n            Recharts.tooltip [ ]\n            Recharts.legend [ ]\n            Recharts.line [\n                line.monotone\n                line.dataKey (fun point -> point.pv)\n                line.label renderCustomLabel\n                line.stroke \"#8884d8\"\n            ]\n\n            Recharts.line [\n                line.monotone\n                line.dataKey (fun point -> point.uv)\n                line.stroke \"#82ca9d\"\n            ]\n        ]\n    ]\n\nopen Browser.Dom\n\nReactDOM.render(CustomizedLabelChart(), document.getElementById \"root\")\n```\n\n----------------------------------------\n\nTITLE: Using Imported Component in F# React Code\nDESCRIPTION: Shows how to use the imported JSX component within F# React code with named arguments.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/UsingJsx.md#2025-04-22_snippet_3\n\nLANGUAGE: fsharp\nCODE:\n```\nHtml.div [\n    Html.h1 \"Content\"\n    Components.About(title=\"Feliz\")\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Line Chart with Optional Values in Feliz.Recharts (F#)\nDESCRIPTION: Creates two line charts demonstrating how to handle optional (null) values in a dataset. The first chart breaks the line when null values are encountered (connectNulls=false), while the second chart connects across null values (connectNulls=true). It defines a Point type with an optional uv field and renders both charts for comparison.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Recharts/LineCharts/OptionalValues.md#2025-04-22_snippet_0\n\nLANGUAGE: fsharp\nCODE:\n```\nopen Feliz\nopen Feliz.Recharts\n\ntype Point = { name: string; uv: int option }\n\nlet data = [\n    { name = \"Page A\"; uv = Some 4000 }\n    { name = \"Page B\"; uv = Some 3000 }\n    { name = \"Page C\"; uv = Some 2000 }\n    { name = \"Page D\"; uv = None }\n    { name = \"Page E\"; uv = Some 1890 }\n    { name = \"Page F\"; uv = Some 2390 }\n    { name = \"Page G\"; uv = Some 3490 }\n]\n\n[<ReactComponent>]\nlet OptionalValuesChart() =\n    React.fragment [\n        Recharts.lineChart [\n            lineChart.width 500\n            lineChart.height 300\n            lineChart.data data\n            lineChart.margin(top=10)\n            lineChart.children [\n                Recharts.cartesianGrid [ cartesianGrid.strokeDasharray(3, 3) ]\n                Recharts.xAxis [ xAxis.dataKey (fun point -> point.name) ]\n                Recharts.yAxis [ ]\n                Recharts.tooltip [ ]\n                Recharts.line [\n                    line.monotone\n                    line.connectNulls false\n                    line.dataKey (fun point -> point.uv)\n                    line.stroke \"#8884d8\"\n                    line.fill \"#8884d8\"\n                ]\n            ]\n        ]\n        Recharts.lineChart [\n            lineChart.width 500\n            lineChart.height 300\n            lineChart.data data\n            lineChart.margin(top=20)\n            lineChart.children [\n                Recharts.cartesianGrid [ cartesianGrid.strokeDasharray(3, 3) ]\n                Recharts.xAxis [ xAxis.dataKey (fun point -> point.name) ]\n                Recharts.yAxis [ ]\n                Recharts.tooltip [ ]\n                Recharts.line [\n                    line.monotone\n                    line.connectNulls true\n                    line.dataKey (fun point -> point.uv)\n                    line.stroke \"#8884d8\"\n                    line.fill \"#8884d8\"\n                ]\n            ]\n        ]\n    ]\n\nopen Browser.Dom\n\nReactDOM.render(OptionalValuesChart(), document.getElementById \"root\")\n```\n\n----------------------------------------\n\nTITLE: Creating Positive and Negative Bar Chart with Feliz.Recharts in F#\nDESCRIPTION: Implementation of a bar chart that displays both positive and negative values using Feliz.Recharts. The chart includes two data series (uv and pv), a reference line at y=0, and supporting elements like grid, axes, tooltip, and legend. The data is represented through a custom Point type with name, uv, and pv properties.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Recharts/BarCharts/PositiveAndNegative.md#2025-04-22_snippet_0\n\nLANGUAGE: fsharp\nCODE:\n```\nmodule App\n\nopen Feliz\nopen Feliz.Recharts\n\ntype Point = { name: string; uv: int; pv: int; }\n\nlet data = [\n    { name = \"Page A\"; uv = 4000; pv = 2400 }\n    { name = \"Page B\"; uv = -3000; pv = 1398 }\n    { name = \"Page C\"; uv = -2000; pv = -9800 }\n    { name = \"Page D\"; uv = 2780; pv = 3908 }\n    { name = \"Page E\"; uv = -1890; pv = 4800 }\n    { name = \"Page F\"; uv = 2390; pv = -3800 }\n    { name = \"Page G\"; uv = 3490; pv = 4300 }\n]\n\nlet chart = React.functionComponent(fun () ->\n    Recharts.barChart [\n        barChart.width 500\n        barChart.height 300\n        barChart.data data\n        barChart.children [\n            Recharts.cartesianGrid [ cartesianGrid.strokeDasharray(3, 3) ]\n            Recharts.xAxis [ xAxis.dataKey (fun point -> point.name) ]\n            Recharts.yAxis [ ]\n            Recharts.tooltip [ ]\n            Recharts.legend [ ]\n\n            Recharts.referenceLine [\n                referenceLine.y 0\n                referenceLine.stroke \"#000\"\n            ]\n\n            Recharts.bar [\n                bar.dataKey (fun point -> point.pv)\n                bar.fill \"#8884d8\"\n            ]\n\n            Recharts.bar [\n                bar.dataKey (fun point -> point.uv)\n                bar.fill \"#82ca9d\"\n            ]\n        ]\n    ])\n\nopen Browser.Dom\n\nReactDOM.render(chart, document.getElementById \"root\")\n```\n\n----------------------------------------\n\nTITLE: Rendering React Elements to HTML Strings Using ReactDOMServer.renderToString in F#\nDESCRIPTION: This code demonstrates how to render a React element to an HTML string using ReactDOMServer.renderToString in Feliz. It creates a div element with styled padding and children elements, then renders it to a string which is displayed inside a pre element.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/React/RenderStaticHtml.md#2025-04-22_snippet_0\n\nLANGUAGE: fsharp\nCODE:\n```\n[<ReactComponent>]\nlet StaticHtml() =\n    let html = Html.div [\n        prop.style [ style.padding 20 ]\n        prop.children [\n            Html.h1 \"Html content\"\n            Html.br [ ]\n        ]\n    ]\n\n    Html.pre [\n        Html.text (ReactDOMServer.renderToString html)\n    ]\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Radar Chart with Feliz.Recharts in F#\nDESCRIPTION: This code demonstrates how to create a radar chart using Feliz.Recharts library. It defines a data structure for chart points with subjects and values, configures radar chart components including polar grid, axes, and radar plot with custom styling, and renders the chart to the DOM.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Recharts/RadarCharts/SimpleRadarChart.md#2025-04-22_snippet_0\n\nLANGUAGE: fsharp\nCODE:\n```\nmodule App\n\nopen Feliz\nopen Feliz.Recharts\n\ntype Point = { subject: string; a: int; b: int; fullMark: int }\n\nlet data = [\n    { subject = \"Math\"; a = 120; b = 110; fullMark = 150 }\n    { subject = \"Chinese\"; a = 98; b = 130; fullMark = 150 }\n    { subject = \"English\"; a = 86; b = 130; fullMark = 150 }\n    { subject = \"Geography\"; a = 99; b = 100; fullMark = 150 }\n    { subject = \"Physics\"; a = 85; b = 90; fullMark = 150 }\n    { subject = \"History\"; a = 65; b = 85; fullMark = 150 }\n]\n\n[<ReactComponent>]\nlet Chart() =\n    Recharts.radarChart [\n        radarChart.data data\n        radarChart.width 400\n        radarChart.height 300\n        radarChart.children [\n            Recharts.polarGrid []\n            Recharts.polarAngleAxis [\n                polarAngleAxis.dataKey (fun point -> point.subject)\n            ]\n            Recharts.polarRadiusAxis []\n            Recharts.radar [\n                radar.dataKey (fun point -> point.a)\n                radar.stroke \"#8884d8\"\n                radar.fill \"#8884d8\"\n                radar.fillOpacity 0.6\n            ]\n        ]\n    ]\n\n\nopen Browser.Dom\n\nReactDOM.render(Chart(), document.getElementById \"root\")\n```\n\n----------------------------------------\n\nTITLE: Creating Customized Label Pie Chart with Feliz.Recharts in F#\nDESCRIPTION: This code snippet demonstrates how to create a pie chart with customized labels using Feliz.Recharts. It defines the data structure, sets up color schemes, implements a custom label renderer, and composes the chart with various properties.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Recharts/PieCharts/CustomizedLabelPieChart.md#2025-04-22_snippet_0\n\nLANGUAGE: fsharp\nCODE:\n```\nopen Feliz\nopen Feliz.Recharts\n\ntype PieSlice = { name: string; value: int }\n\nlet data = [\n    { name = \"Group A\"; value = 400 }\n    { name = \"Group B\"; value = 300 }\n    { name = \"Group C\"; value = 300 }\n    { name = \"Group D\"; value = 200 }\n]\n\nlet bgColors = [|\n    \"#0088FE\"\n    \"#00C49F\"\n    \"#FFBB28\"\n    \"#FF8042\"\n|]\n\nlet renderCustomLabel (input: IPieLabelProperties) =\n    let radius = input.innerRadius + (input.outerRadius - input.innerRadius) * 0.5;\n    let radian = System.Math.PI / 180.\n    let x = (input.cx + radius * cos (-input.midAngle * radian))\n    let y = (input.cy + radius * sin (-input.midAngle * radian))\n\n    Svg.text [\n        svg.fill color.white\n        svg.x x\n        svg.y y\n        svg.dominantBaseline.central\n        if x > input.cx then svg.textAnchor.startOfText else svg.textAnchor.endOfText\n        svg.text (sprintf \"%.0f%%\" (100. * input.percent))\n    ]\n\n[<ReactComponent>]\nlet PieChart() =\n    let cells =\n        data\n        |> List.mapi (fun index _ ->\n            Recharts.cell [\n                cell.fill bgColors.[ index % bgColors.Length ]\n            ])\n\n    Recharts.pieChart [\n        pieChart.width 800\n        pieChart.height 400\n        pieChart.children [\n            Recharts.pie [\n                pie.data data\n                pie.cx 300\n                pie.cy 200\n                pie.labelLine false\n                pie.label renderCustomLabel\n                pie.outerRadius 80\n                pie.fill \"#8884d8\"\n                pie.children cells\n            ]\n        ]\n    ]\n\nopen Browser.Dom\n\nReactDOM.render(PieChart(), document.getElementById \"root\")\n```\n\n----------------------------------------\n\nTITLE: Using Feliz.Kawaii Components in F#\nDESCRIPTION: Example showing how to use Kawaii components with different properties like size, mood and color. Demonstrates usage of the Mug component with various configurations.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz.Kawaii/README.md#2025-04-22_snippet_1\n\nLANGUAGE: fsharp\nCODE:\n```\nopen Feliz\nopen Feliz.Kawaii\n\nHtml.div [\n    Kawaii.Mug()\n    Kawaii.Mug(size=200)\n    Kawaii.Mug(size=200, mood=Mood.Happy)\n    Kawaii.Mug(size=200, mood=Mood.Happy, color=color.lightBlue)\n]\n```\n\n----------------------------------------\n\nTITLE: Single Element Child Syntax in Feliz F#\nDESCRIPTION: Illustrates different ways to specify a single element child in Feliz, showing equivalent syntax options.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/Syntax.md#2025-04-22_snippet_3\n\nLANGUAGE: fsharp\nCODE:\n```\nHtml.h1 (Html.strong \"I am bold\")\n\n// same as\n\nHtml.h1 [ Html.strong \"I am bold\" ]\n\n// same as\n\nHtml.h1 [\n    prop.children [ Html.strong \"I am bold\" ]\n]\n```\n\n----------------------------------------\n\nTITLE: Creating a Straight Angle Pie Chart with Feliz.Recharts in F#\nDESCRIPTION: This code creates a semicircular pie chart with a straight angle (180 degrees) using Feliz.Recharts. It defines a data structure for pie slices, initializes sample data, and renders a pie chart with specific positioning and angle configurations.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Recharts/PieCharts/StraightAngle.md#2025-04-22_snippet_0\n\nLANGUAGE: fsharp\nCODE:\n```\nmodule App\n\nopen Feliz\nopen Feliz.Recharts\n\ntype PieSlice = { name: string; value: int }\n\nlet data = [\n    { name = \"Group A\"; value = 400 }\n    { name = \"Group B\"; value = 300 }\n    { name = \"Group C\"; value = 300 }\n    { name = \"Group D\"; value = 200 }\n    { name = \"Group E\"; value = 278 }\n    { name = \"Group F\"; value = 189 }\n]\n\n[<ReactComponent>]\nlet PieChart() =\n    Recharts.pieChart [\n        pieChart.width 400\n        pieChart.height 400\n        pieChart.children [\n            Recharts.pie [\n                pie.data data\n                pie.dataKey (fun point -> point.value)\n                pie.startAngle 180\n                pie.endAngle 0\n                pie.cx 200\n                pie.cy 200\n                pie.outerRadius 80\n                pie.fill \"#8884d8\"\n                pie.label true\n            ]\n        ]\n    ]\n\nopen Browser.Dom\n\nReactDOM.render(PieChart(), document.getElementById \"root\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Pie Chart with Feliz.RoughViz\nDESCRIPTION: Demonstrates how to create a pie chart using Feliz.RoughViz to visualize fruit sales data with customized appearance properties like roughness and fill styles.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/RoughViz/Index.md#2025-04-22_snippet_4\n\nLANGUAGE: fsharp\nCODE:\n```\nopen Feliz\nopen Feliz.RoughViz\n\nlet fruitSales = [\n    (\"Oranges\", 5.0)\n    (\"Apples\", 8.2)\n    (\"Strawberry\", 10.0)\n    (\"Peach\", 2.0)\n    (\"Pineapple\", 17.0)\n    (\"Bananas\", 10.0)\n    (\"Mango\", 6.4)\n]\n\nlet roughPieChart = React.functionComponent(fun () ->\n    RoughViz.pieChart [\n        pieChart.title \"Fruit Sales\"\n        pieChart.data fruitSales\n        pieChart.roughness 3\n        pieChart.fillStyle.crossHatch\n        pieChart.highlight color.lightGreen\n    ])\n```\n\n----------------------------------------\n\nTITLE: Installing Feliz Template with .NET CLI\nDESCRIPTION: This snippet shows how to quickly set up a new Feliz project using the .NET CLI template. It includes commands for installing the template, creating a new project, and starting the development server.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet new -i Feliz.Template\ndotnet new feliz -n MyProject\ncd MyProject\nnpm install\nnpm start\n```\n\n----------------------------------------\n\nTITLE: PigeonMaps with Click-to-Open Popover Markers using Feliz.Popover in F#\nDESCRIPTION: Shows how to create a map with markers that display popover information when clicked. It uses Feliz.Popover and React state hooks to manage the open/closed state of each marker's popover.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/PigeonMaps/README.md#2025-04-22_snippet_3\n\nLANGUAGE: fsharp\nCODE:\n```\nopen Feliz\nopen Feliz.PigeonMaps\nopen Feliz.Popover\n\ntype City = {\n    Name: string\n    Latitude: float\n    Longitude: float\n}\n\nlet cities = [\n    { Name = \"Utrecht\"; Latitude = 52.090736; Longitude = 5.121420 }\n    { Name = \"Nijmegen\"; Latitude = 51.812565; Longitude = 5.837226 }\n    { Name = \"Amsterdam\"; Latitude = 52.370216; Longitude = 4.895168 }\n    { Name = \"Rotterdam\"; Latitude = 51.924419; Longitude = 4.477733 }\n]\n\ntype MarkerProps = {\n    City: City\n    Hovered: bool\n}\n\nlet markerWithPopover = React.functionComponent(fun (marker: MarkerProps) ->\n    let (popoverOpen, toggleOpen) = React.useState false\n    Popover.popover [\n        popover.body [\n            Html.div [\n                prop.text marker.City.Name\n                prop.style [\n                    style.backgroundColor.black\n                    style.padding 10\n                    style.borderRadius 5\n                    style.color.lightGreen\n                ]\n            ]\n        ]\n        popover.isOpen popoverOpen\n        popover.enterExitTransitionDurationMs 0\n        popover.disableTip\n        popover.onOuterAction (fun _ -> toggleOpen(false))\n        popover.children [\n            Html.i [\n                prop.key marker.City.Name\n                prop.className [ \"fa\"; \"fa-map-marker\"; \"fa-2x\" ]\n                prop.onClick (fun _ -> toggleOpen(not popoverOpen))\n                prop.style [\n                    if marker.Hovered then style.cursor.pointer\n                    if popoverOpen then style.color.red\n                ]\n            ]\n        ]\n    ])\n\nlet renderMarker city =\n    PigeonMaps.marker [\n        marker.anchor(city.Latitude, city.Longitude)\n        marker.offsetLeft 15\n        marker.offsetTop 30\n        marker.render (fun marker -> [\n            markerWithPopover {\n                City = city\n                Hovered = marker.hovered\n            }\n        ])\n    ]\n\nlet initialCenter =\n    cities\n    |> List.tryHead\n    |> Option.map (fun city -> city.Latitude, city.Longitude)\n    |> Option.defaultValue (51.812565, 5.837226)\n\nlet citiesMap = React.functionComponent(fun () ->\n    let (zoom, setZoom) = React.useState 8\n    let (center, setCenter) = React.useState initialCenter\n    PigeonMaps.map [\n        map.center center\n        map.zoom zoom\n        map.height 350\n        map.onBoundsChanged (fun args -> setZoom (int args.zoom); setCenter args.center)\n        map.markers [ for city in cities -> renderMarker city ]\n    ])\n```\n\n----------------------------------------\n\nTITLE: Creating a Bar Chart with Feliz.RoughViz\nDESCRIPTION: Demonstrates how to create a basic bar chart using Feliz.RoughViz, showing fruit sales data with customized appearance properties like roughness, colors, and fill styles.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/RoughViz/Index.md#2025-04-22_snippet_2\n\nLANGUAGE: fsharp\nCODE:\n```\nopen Feliz\nopen Feliz.RoughViz\n\nlet fruitSales = [\n    (\"Oranges\", 5.0)\n    (\"Apples\", 8.2)\n    (\"Strawberry\", 10.0)\n    (\"Peach\", 2.0)\n    (\"Pineapple\", 17.0)\n    (\"Bananas\", 10.0)\n    (\"Mango\", 6.4)\n]\n\nlet roughBarChart = React.functionComponent(fun () ->\n    RoughViz.barChart [\n        barChart.title \"Fruit Sales\"\n        barChart.data fruitSales\n        barChart.roughness 3\n        barChart.color color.skyBlue\n        barChart.stroke color.darkCyan\n        barChart.axisFontSize 18\n        barChart.fillStyle.crossHatch\n        barChart.highlight color.lightGreen\n    ])\n```\n\n----------------------------------------\n\nTITLE: Installing Feliz and dependencies using Femto\nDESCRIPTION: This snippet shows how to use Femto to automatically install both the Feliz package and its npm dependencies in one command.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/Installation.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd ./project\nfemto install Feliz\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Tile Provider in Feliz PigeonMaps (F#)\nDESCRIPTION: This example shows how to use a custom tile provider (Stamen Terrain) with PigeonMaps instead of the default OpenStreetMap provider. It demonstrates how to define a custom provider function and apply it to the map.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/PigeonMaps/README.md#2025-04-22_snippet_5\n\nLANGUAGE: fsharp\nCODE:\n```\nopen Feliz\nopen Feliz.PigeonMaps\n\nlet stamenTerrain x y z dpr =\n    sprintf \"https://stamen-tiles.a.ssl.fastly.net/terrain/%A/%A/%A.png\" z x y\n\nlet pigeonMap = PigeonMaps.map [\n    map.center(50.879, 4.6997)\n    map.zoom 12\n    map.height 350\n    map.provider stamenTerrain\n    map.markers [\n        PigeonMaps.marker [\n            marker.anchor(50.879, 4.6997)\n            marker.offsetLeft 15\n            marker.offsetTop 30\n            marker.render (fun marker -> [\n                Html.i [\n                    if marker.hovered\n                    then prop.style [ style.color.red; style.cursor.pointer ]\n                    prop.className [ \"fa\"; \"fa-map-marker\"; \"fa-2x\" ]\n                ]\n            ])\n        ]\n    ]\n]\n```\n\n----------------------------------------\n\nTITLE: Creating a Horizontal Bar Chart with Feliz.RoughViz\nDESCRIPTION: Shows how to create a horizontal bar chart using Feliz.RoughViz with the same properties as the vertical bar chart, also visualizing fruit sales data.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/RoughViz/Index.md#2025-04-22_snippet_3\n\nLANGUAGE: fsharp\nCODE:\n```\nopen Feliz\nopen Feliz.RoughViz\n\nlet fruitSales = [\n    (\"Oranges\", 5.0)\n    (\"Apples\", 8.2)\n    (\"Strawberry\", 10.0)\n    (\"Peach\", 2.0)\n    (\"Pineapple\", 17.0)\n    (\"Bananas\", 10.0)\n    (\"Mango\", 6.4)\n]\n\nlet roughHorizontalBarChart = React.functionComponent(fun () ->\n    RoughViz.horizontalBarChart [\n        barChart.title \"Fruit Sales\"\n        barChart.data fruitSales\n        barChart.roughness 3\n        barChart.color color.skyBlue\n        barChart.stroke color.darkCyan\n        barChart.axisFontSize 18\n        barChart.fillStyle.crossHatch\n        barChart.highlight color.lightGreen\n    ])\n```\n\n----------------------------------------\n\nTITLE: Installing Feliz.Recharts NuGet Package\nDESCRIPTION: Commands for installing the Feliz.Recharts NuGet package using either the dotnet CLI or Paket package manager.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Recharts/Installation.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# nuget\ndotnet add package Feliz.Recharts\n# paket\npaket add Feliz.Recharts --project ./project/path\n```\n\n----------------------------------------\n\nTITLE: Using Stateless React Components in F# with Feliz\nDESCRIPTION: This snippet demonstrates how to use previously defined React components within other UI elements. It shows passing both Some and None values to the Greeting component.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/React/StatelessComponents.md#2025-04-22_snippet_1\n\nLANGUAGE: fsharp\nCODE:\n```\nHtml.div [\n    prop.className \"content\"\n    prop.children [\n        Greeting (Some \"John\")\n        Greeting None\n    ]\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Delay in React Component (F#)\nDESCRIPTION: Demonstrates how to use React.delay to postpone rendering of a component for 2 seconds. The example shows a basic usage where the content is displayed after the specified delay.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz.Delay/Index.md#2025-04-22_snippet_0\n\nLANGUAGE: fsharp\nCODE:\n```\nopen Feliz\nopen Feliz.Delay\n\n[<ReactComponent>]\nlet UseDelayExample() =\n    React.delay [\n        delay.waitFor 2000\n\n        delay.children [\n            Html.text \"Here I am!\"\n        ]\n    ]\n```\n\n----------------------------------------\n\nTITLE: Installing Feliz.RoughViz with Femto\nDESCRIPTION: Shows how to install the Feliz.RoughViz package using Femto, a package manager for F# projects.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/RoughViz/Index.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfemto install Feliz.RoughViz\n```\n\n----------------------------------------\n\nTITLE: Implementing Manual Theme Propagation in F#\nDESCRIPTION: Traditional approach for propagating theme information through explicit parameters in component functions. This approach requires passing the theme parameter through each level of the component hierarchy.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/React/ContextPropagation.md#2025-04-22_snippet_0\n\nLANGUAGE: fsharp\nCODE:\n```\ntype Theme = Dark | Light\n\ntype State = { Theme : Theme }\n\nlet init() = { Theme = Light }\n\nlet update msg state = (* . . . *)\n\nlet renderNavbar (theme: Theme) =\n    Html.nav [ ]\n\nlet renderSidebar (theme: Theme) =\n    Html.aside [ ]\n\nlet renderContent (theme: Theme) =\n    Html.div [\n        renderNavbar theme\n        renderSidebar theme\n    ]\n\nlet render (state: State) (dispatch: Msg -> unit) =\n    renderContent state.Theme\n```\n\n----------------------------------------\n\nTITLE: Using Record Types for Component Props in F#\nDESCRIPTION: Shows different approaches to using record types (anonymous and named) for component properties in F#.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/UsingJsx.md#2025-04-22_snippet_5\n\nLANGUAGE: fsharp\nCODE:\n```\nopen Feliz\n\n// using an anonymous record is input\n[<ReactComponent(import=\"About\", from=\"./About.jsx\")>]\nlet About (props: {| title: string; description: string |}) = React.imported()\n\ntype AboutProps = {\n    title: string\n    description: string\n}\n\n// or using a function module\n[<ReactComponent(import=\"About\", from=\"./About.jsx\")>]\nlet About (props: AboutProps) = React.imported()\n```\n\n----------------------------------------\n\nTITLE: Installing Feliz.Kawaii Package using Femto\nDESCRIPTION: Command to install the Feliz.Kawaii package using the Femto package manager.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz.Kawaii/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nfemto install Feliz.Kawaii\n```\n\n----------------------------------------\n\nTITLE: Using TypedCssClasses with FontAwesome in Feliz\nDESCRIPTION: A complete example demonstrating how to use the TypedCssClasses type provider to generate type-safe access to FontAwesome CSS classes. This approach provides intellisense support and compile-time checking of CSS class names.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/TypeSafeCss.md#2025-04-22_snippet_2\n\nLANGUAGE: fsharp\nCODE:\n```\nopen Feliz\nopen Zanaptak.TypedCssClasses\n\ntype Icon = CssClasses<\"https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css\", Naming.PascalCase>\n\nlet centeredSpinner =\n    Html.div [\n        prop.style [\n            style.textAlign.center\n            style.marginLeft length.auto\n            style.marginRight length.auto\n            style.marginTop 50\n        ]\n        prop.children [\n            Html.li [\n                prop.className [\n                    Icon.Fa\n                    Icon.FaRefresh\n                    Icon.FaSpin\n                    Icon.Fa3X\n                ]\n            ]\n        ]\n    ]\n```\n\n----------------------------------------\n\nTITLE: Creating a Dropdown with Disabled Values using Feliz.SelectSearch in F#\nDESCRIPTION: Demonstrates how to create a dropdown with some disabled items that cannot be selected using Feliz.SelectSearch.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/SelectSearch/README.md#2025-04-22_snippet_3\n\nLANGUAGE: fsharp\nCODE:\n```\nSelectSearch.selectSearch [\n    selectSearch.placeholder \"Select a language\"\n    selectSearch.search true\n    selectSearch.onChange (fun value -> setSelectedValue(Some value))\n    selectSearch.options [\n        { value = \"en-GB\"; name = \"English\"; disabled = true }\n        { value = \"fr-FR\"; name = \"French\"; disabled = false }\n        { value = \"nl-NL\"; name = \"Dutch\"; disabled = false }\n    ]\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Feliz.Popover using dotnet CLI\nDESCRIPTION: Command to install the Feliz.Popover package via the dotnet CLI. This adds the F# bindings to your project.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Popover/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Feliz.Popover\n```\n\n----------------------------------------\n\nTITLE: Equivalent React Counter Component in JavaScript\nDESCRIPTION: The JavaScript equivalent of the F# counter component, demonstrating how Feliz maps directly to standard React concepts. The component uses useState hook to manage state and renders a counter with an increment button.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/React/Standalone.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport ReactDOM from 'react-dom'\nimport React, { useState } from 'react';\n\nfunction Counter() {\n  // Declare a new state variable, which we'll call \"count\"\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <h1>{count}</h1>\n      <button onClick={() => setCount(count + 1)}>\n        Increment\n      </button>\n    </div>\n  );\n}\n\nReactDOM.render(<Counter />, document.getElementById(\"root\"))\n```\n\n----------------------------------------\n\nTITLE: Customizing Buttons in Feliz.SelectSearch Dropdown in F#\nDESCRIPTION: Demonstrates how to customize the rendering of options in a Feliz.SelectSearch dropdown using the selectSearch.renderOption attribute. This example adds images to the dropdown options.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/SelectSearch/README.md#2025-04-22_snippet_7\n\nLANGUAGE: fsharp\nCODE:\n```\nSelectSearch.selectSearch [\n    selectSearch.placeholder \"Choose food category\"\n    selectSearch.search true\n    selectSearch.options [\n        SelectOption.Group {\n            name = \"Asian\"\n            items = [\n                { value = \"sushi\"; name = \"Sushi\"; disabled = false }\n                { value = \"ramen\"; name = \"Ramen\"; disabled = false }\n            ]\n        }\n        SelectOption.Group {\n            name = \"Italian\"\n            items = [\n                { value = \"pasta\"; name = \"Pasta\"; disabled = false }\n                { value = \"pizza\"; name = \"Pizza\"; disabled = false }\n            ]\n        }\n    ]\n    selectSearch.renderOption (fun properties ->\n        Html.button [\n            yield! properties.attributes\n            prop.className properties.className\n            prop.children [\n                Html.img [\n                    prop.height 32\n                    prop.width 38\n                    prop.style [ style.marginRight 10 style.borderRadius 16 ]\n                    prop.src (imageUrlByValue properties.option.value)\n                ]\n                Html.span properties.option.name\n            ]\n        ]\n    )\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Feliz Template via dotnet CLI\nDESCRIPTION: This command installs the Feliz template into your dotnet project templates, making it available for use when creating new projects.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/ProjectTemplate.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet new -i Feliz.Template\n```\n\n----------------------------------------\n\nTITLE: Equivalent React Counter Implementation in JavaScript\nDESCRIPTION: The JavaScript/React equivalent of the counter component, showing how the F#/Feliz implementation maps directly to standard React concepts including useState hook and JSX syntax.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/ReactApiSupport.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport ReactDOM from 'react-dom'\nimport React, { useState } from 'react';\n\nfunction Counter() {\n  // Declare a new state variable, which we'll call \"count\"\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <h1>{count}</h1>\n      <button onClick={() => setCount(count + 1)>\n        Increment\n      </button>\n    </div>\n  );\n}\n\nReactDOM.render(<Counter />, document.getElementById(\"root\"))\n```\n\n----------------------------------------\n\nTITLE: Creating Grouped Options in Feliz.SelectSearch Dropdown in F#\nDESCRIPTION: Shows how to create grouped options in a Feliz.SelectSearch dropdown using the SelectOption.Group construct.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/SelectSearch/README.md#2025-04-22_snippet_6\n\nLANGUAGE: fsharp\nCODE:\n```\nSelectSearch.selectSearch [\n    selectSearch.placeholder \"Choose food category\"\n    selectSearch.search true\n    selectSearch.options [\n        SelectOption.Group {\n            name = \"Asian\"\n            items = [\n                { value = \"sushi\"; name = \"Sushi\"; disabled = false }\n                { value = \"ramen\"; name = \"Ramen\"; disabled = false }\n            ]\n        }\n        SelectOption.Group {\n            name = \"Italian\"\n            items = [\n                { value = \"pasta\"; name = \"Pasta\"; disabled = false }\n                { value = \"pizza\"; name = \"Pizza\"; disabled = false }\n            ]\n        }\n    ]\n]\n```\n\n----------------------------------------\n\nTITLE: Creating a New Feliz Application\nDESCRIPTION: This command scaffolds a new Feliz application with the provided name. It creates the project structure inside a directory with the specified name.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/ProjectTemplate.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet new feliz -n AwesomeApp\n```\n\n----------------------------------------\n\nTITLE: Creating a DateTime Local Input in Feliz\nDESCRIPTION: Shows how to implement a date and time selector using prop.type'.dateTimeLocal. This component includes the includeTime parameter set to true, which formats the date with time information as required by the browser.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/React/WorkingWithDates.md#2025-04-22_snippet_1\n\nLANGUAGE: fsharp\nCODE:\n```\n[<ReactComponent>]\nlet SimpleDateAndTimeInput() =\n    let (selectedDate, updateDate) = React.useState(DateTime.Now)\n    Html.input [\n        prop.type'.dateTimeLocal\n        prop.value(selectedDate, includeTime=true)\n        prop.onChange (fun newValue -> updateDate newValue)\n    ]\n```\n\n----------------------------------------\n\nTITLE: Incorrect Nested React Component Definition in F#\nDESCRIPTION: This example shows an incorrect pattern where a React component is defined inside another function. This causes the component's internal state to reset whenever the parent function is re-evaluated.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/React/CommonPitfalls.md#2025-04-22_snippet_3\n\nLANGUAGE: fsharp\nCODE:\n```\nlet counter (start: int) =\n    let counter' = React.functionComponent(fun (input: {| start: int |}) ->\n        let (count, setCount) = React.useState(input.start)\n        Html.div [\n            Html.h1 count\n            Html.button [\n                prop.text \"Increment\"\n                prop.onClick (fun _ -> setCount(count + 1))\n            ]\n        ])\n\n    counter' {| start = start |}\n```\n\n----------------------------------------\n\nTITLE: Installing Node Dependencies for Feliz Project\nDESCRIPTION: This command installs all the required Node.js dependencies defined in the package.json file of the scaffolded Feliz application.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/ProjectTemplate.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Multiple Props Component Import in F#\nDESCRIPTION: Demonstrates importing a JSX component that accepts multiple properties using both function and static class approaches.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/UsingJsx.md#2025-04-22_snippet_4\n\nLANGUAGE: fsharp\nCODE:\n```\nopen Feliz\n\n// using a static function\ntype Components =\n    [<ReactComponent(import=\"About\", from=\"./About.jsx\")>]\n    static member About (title: string, description: string) = React.imported()\n\n// or using a function module\n[<ReactComponent(import=\"About\", from=\"./About.jsx\")>]\nlet About (title: string, description: string) = React.imported()\n```\n\n----------------------------------------\n\nTITLE: Correct Module-Level React Component Definition in F#\nDESCRIPTION: This example demonstrates the correct pattern for defining React components at the module level and then creating wrapper functions that use them. This preserves component state between renders.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/React/CommonPitfalls.md#2025-04-22_snippet_4\n\nLANGUAGE: fsharp\nCODE:\n```\nlet counter' = React.functionComponent(\"Counter\", fun (input: {| start: int |}) ->\n    let (count, setCount) = React.useState(input.start)\n    Html.div [\n        Html.h1 count\n        Html.button [\n            prop.text \"Increment\"\n            prop.onClick (fun _ -> setCount(count + 1))\n        ]\n    ])\n\nlet counter (start: int) = counter' {| start = start |}\n```\n\n----------------------------------------\n\nTITLE: Starting the Feliz Development Server\nDESCRIPTION: These commands start the webpack-dev-server for the Feliz application, making it available at http://localhost:8080. Both commands do the same thing, with the second one being a shorthand version.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/ProjectTemplate.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\nnpm start # for short\n```\n\n----------------------------------------\n\nTITLE: Importing JSX Component as Static Class Member in F#\nDESCRIPTION: Demonstrates importing a JSX component as a static class member in F#, allowing for named arguments usage.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/UsingJsx.md#2025-04-22_snippet_2\n\nLANGUAGE: fsharp\nCODE:\n```\nopen Feliz\n\ntype Components =\n    [<ReactComponent(import=\"About\", from=\"./About.jsx\")>]\n    static member About (title: string) = React.imported()\n```\n\n----------------------------------------\n\nTITLE: Creating Basic HTML Elements with Feliz in F#\nDESCRIPTION: Demonstrates how to create simple HTML elements using Feliz syntax, including headings, divs, and lists with child elements.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/Syntax.md#2025-04-22_snippet_0\n\nLANGUAGE: fsharp\nCODE:\n```\nHtml.h1 42\n\nHtml.div \"Hello there!\"\n\nHtml.div [ Html.h1 \"So lightweight\" ]\n\nHtml.ul [\n  Html.li \"One\"\n  Html.li [ Html.strong \"Two\" ]\n  Html.li [ Html.em \"Three\" ]\n]\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server with Hot Module Reloading\nDESCRIPTION: Command to install dependencies and start the development server with hot module reloading. After completion, the application will be available at http://localhost:8080.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/Feliz.Template/Content/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Enhanced Keyboard Event Handling in Feliz F#\nDESCRIPTION: Illustrates how to use enhanced keyboard event handlers in Feliz, including matching specific keys and key combinations.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/Syntax.md#2025-04-22_snippet_8\n\nLANGUAGE: fsharp\nCODE:\n```\nHtml.input [\n    prop.onKeyUp (key.enter, fun _ -> dispatch Login)\n    prop.onChange (UsernameChanged >> dispatch)\n    prop.value state.Username\n]\n\n// Enter only\nprop.onKeyUp (key.enter, fun _ -> dispatch Login)\n// Enter + CTRL\nprop.onKeyUp (key.ctrl(key.enter), fun _ -> dispatch Login)\n// Enter + SHIFT\nprop.onKeyUp (key.shift(key.enter), fun _ -> dispatch Login)\n// Enter + CTRL + SHIFT\nprop.onKeyUp (key.ctrlAndShift(key.enter), fun _ -> dispatch Login)\n```\n\n----------------------------------------\n\nTITLE: onChange Event Types in Feliz F#\nDESCRIPTION: Defines the various overloaded types for the onChange event handler in Feliz, covering different input scenarios.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/Syntax.md#2025-04-22_snippet_5\n\nLANGUAGE: fsharp\nCODE:\n```\n// generic onChange event\ntype onChange = Event -> unit\n// onChange for textual input boxes\ntype onChange = string -> unit\n// onChange for boolean input boxes, i.e. checkbox\ntype onChange = bool -> unit\n// onChange for single file uploads\ntype onChange = File -> unit\n// onChange for multiple file upload when prop.multiple true\ntype onChange = File list -> unit\n// onChange for input elements where type=date or type=dateTimeLocal\ntype onChange = DateTime -> unit\n```\n\n----------------------------------------\n\nTITLE: Building the Application for Production\nDESCRIPTION: Command to build the application for production deployment. The generated files will be placed in the 'deploy' directory, which can be configured in webpack.config.js.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/Feliz.Template/Content/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Specifying Class Names in Feliz F#\nDESCRIPTION: Shows different ways to specify class names for HTML elements using Feliz syntax, including single and multiple classes.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/Syntax.md#2025-04-22_snippet_7\n\nLANGUAGE: fsharp\nCODE:\n```\nprop.className \"button\" // => \"button\"\nprop.className [ \"btn\"; \"btn-primary\" ] // => \"btn btn-primary\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Module for CSS Class Names\nDESCRIPTION: An example of creating a custom F# module to encapsulate CSS class names as literal values. This approach improves discoverability but requires manual maintenance of the class names.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/TypeSafeCss.md#2025-04-22_snippet_1\n\nLANGUAGE: fsharp\nCODE:\n```\nmodule Bulma =\n    let [<Literal>] Button = \"button\"\n    let [<Literal>] IsPrimary = \"is-primary\"\n    // etc.\n```\n\n----------------------------------------\n\nTITLE: Running Tests in Watch Mode\nDESCRIPTION: Command to run tests in browser watch mode. This starts a development server for the test application, making it available at http://localhost:8085.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/Feliz.Template/Content/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test:live\n```\n\n----------------------------------------\n\nTITLE: Creating Form Inputs with Feliz in F#\nDESCRIPTION: Shows how to create form input elements using Feliz, including text and checkbox inputs with value binding and event handling.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/Syntax.md#2025-04-22_snippet_4\n\nLANGUAGE: fsharp\nCODE:\n```\nHtml.input [\n    prop.className \"input\"\n    prop.value state.Crendentials.Password // string\n    prop.onChange (SetPassword >> dispatch) // (string -> unit)\n    prop.type'.password\n]\n\nHtml.input [\n    prop.className \"input checkbox\"\n    prop.value state.RememberMe // boolean\n    prop.onChange (SetRememberMe >> dispatch) // (bool -> unit)\n    prop.type'.checkbox\n]\n```\n\n----------------------------------------\n\nTITLE: Importing JSX Component as Function in F#\nDESCRIPTION: Shows how to import a JSX component using a function approach with the ReactComponent attribute in F#.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/UsingJsx.md#2025-04-22_snippet_1\n\nLANGUAGE: fsharp\nCODE:\n```\nopen Feliz\n\n[<ReactComponent(import=\"About\", from=\"./About.jsx\")>]\nlet About (title: string) = React.imported()\n```\n\n----------------------------------------\n\nTITLE: Running Tests via Command Line\nDESCRIPTION: Command to run tests using Mocha in Node.js environment. This is suitable for CI servers and command-line testing without a browser.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/Feliz.Template/Content/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Using prop.text for Single Text Child in Feliz F#\nDESCRIPTION: Demonstrates the use of prop.text as an alias for specifying a single Html.text child element in Feliz.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/Syntax.md#2025-04-22_snippet_2\n\nLANGUAGE: fsharp\nCODE:\n```\nHtml.h1 [\n    prop.className \"title\"\n    prop.text \"Hello there\"\n]\n```\n\n----------------------------------------\n\nTITLE: Project Structure for Context Definitions\nDESCRIPTION: Example project structure showing the proper organization of files for React contexts in F# applications. Contexts must be defined before the components that use them due to F# compilation order.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/React/ContextPropagation.md#2025-04-22_snippet_4\n\nLANGUAGE: fsharp\nCODE:\n```\nApp.fsproj\n  |\n  | -- Types.fs\n  | -- Contexts.fs // <-- Contexts have to be defined at this point to access them\n  | -- About.fs    //     But also to make them usable from the About, Home or App components\n  | -- Home.fs\n  | -- App.fs\n```\n\n----------------------------------------\n\nTITLE: Expanding HTML Element Attributes in Feliz F#\nDESCRIPTION: Shows how to expand HTML element attributes using Feliz syntax, including setting class names and specifying child elements.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/Syntax.md#2025-04-22_snippet_1\n\nLANGUAGE: fsharp\nCODE:\n```\nHtml.h1 [\n    prop.className \"title\"\n    prop.children [\n        Html.text \"Hello there\"\n    ]\n]\n```\n\n----------------------------------------\n\nTITLE: Installing React dependencies for Feliz using npm\nDESCRIPTION: This snippet demonstrates how to install the required npm dependencies (react and react-dom) for Feliz.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/Installation.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react@17.0.1 react-dom@17.0.1\n```\n\n----------------------------------------\n\nTITLE: Using CSS Classes Manually in Feliz\nDESCRIPTION: A basic example showing how to manually specify CSS class names from the Bulma framework in an F# Feliz application. This approach requires remembering class names and provides no autocomplete assistance.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/TypeSafeCss.md#2025-04-22_snippet_0\n\nLANGUAGE: fsharp\nCODE:\n```\nHtml.button [\n    prop.className [ \"button\"; \"is-primary\" ]\n    prop.text \"Click\"\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Required npm Dependencies\nDESCRIPTION: Command for installing the recharts npm package that Feliz.Recharts depends on, specifying version 2.0.9.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Recharts/Installation.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install recharts@2.0.9\n```\n\n----------------------------------------\n\nTITLE: Using Femto for Automated Installation\nDESCRIPTION: Command for installing Feliz.Recharts using Femto, which handles both the NuGet package and npm dependencies in a single step.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Recharts/Installation.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd ./project\nfemto install Feliz.Recharts\n```\n\n----------------------------------------\n\nTITLE: Installing Feliz.UseElmish Package\nDESCRIPTION: Commands to install the Feliz.UseElmish package using npm and dotnet CLI or femto.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz.UseElmish/Index.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install use-sync-external-store\ndotnet add package Feliz.UseElmish\n\nor\n\ndotnet femto install Feliz.UseElmish\n```\n\n----------------------------------------\n\nTITLE: Creating TinyAreaChart with Feliz.Recharts in F#\nDESCRIPTION: Implements a small area chart component using Feliz.Recharts. The chart displays UV data points across different pages with a purple fill and stroke. Uses monotone interpolation and custom dimensions with minimal margins.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Recharts/AreaCharts/TinyAreaChart.md#2025-04-22_snippet_0\n\nLANGUAGE: fsharp\nCODE:\n```\nmodule App\n\nopen Feliz\nopen Feliz.Recharts\n\ntype Point = { name: string; uv: int; pv: int; amt: int }\n\nlet data = [\n    { name = \"Page A\"; uv = 4000; pv = 2400; amt = 2400 }\n    { name = \"Page B\"; uv = 3000; pv = 1398; amt = 2210 }\n    { name = \"Page C\"; uv = 2000; pv = 9800; amt = 2290 }\n    { name = \"Page D\"; uv = 2780; pv = 3908; amt = 2000 }\n    { name = \"Page E\"; uv = 1890; pv = 4800; amt = 2181 }\n    { name = \"Page F\"; uv = 2390; pv = 3800; amt = 2500 }\n    { name = \"Page G\"; uv = 3490; pv = 4300; amt = 2100 }\n]\n\n[<ReactComponent>]\nlet Chart() =\n    Recharts.areaChart [\n        areaChart.width 200\n        areaChart.height 60\n        areaChart.data data\n        areaChart.margin(top=5, bottom=5)\n        areaChart.children [\n            Recharts.area [\n                area.monotone\n                area.dataKey (fun point -> point.uv)\n                area.stroke \"#8884d8\"\n                area.fill \"#8884d8\"\n            ]\n        ]\n    ]\n\nopen Browser.Dom\n\nReactDOM.render(Chart(), document.getElementById \"root\")\n```\n\n----------------------------------------\n\nTITLE: Installing Feliz.Popover using Femto\nDESCRIPTION: Command to install both the Feliz.Popover F# package and its JavaScript dependencies using Femto. This simplifies the installation process by handling both aspects in one command.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Popover/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd ./project\nfemto install Feliz.Popover\n```\n\n----------------------------------------\n\nTITLE: Creating a TinyBarChart with Feliz.Recharts in F#\nDESCRIPTION: This snippet demonstrates how to create a tiny bar chart using Feliz.Recharts. It defines a data model, populates it with sample data, and renders a minimal bar chart with specific dimensions. The example uses React function components and the Feliz API to configure chart properties.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Recharts/BarCharts/TinyBarChart.md#2025-04-22_snippet_0\n\nLANGUAGE: fsharp\nCODE:\n```\nmodule App\n\nopen Feliz\nopen Feliz.Recharts\n\ntype Point = { name: string; uv: int }\n\nlet data = [\n    { name = \"Page A\"; uv = 4000; }\n    { name = \"Page B\"; uv = 3000; }\n    { name = \"Page C\"; uv = 2000; }\n    { name = \"Page D\"; uv = 2780; }\n    { name = \"Page E\"; uv = 1890; }\n    { name = \"Page F\"; uv = 2390; }\n    { name = \"Page G\"; uv = 3490; }\n]\n\n\nlet chart = React.functionComponent(fun () ->\n    Recharts.barChart [\n        barChart.width 150\n        barChart.height 40\n        barChart.data data\n        barChart.children [\n            Recharts.bar [\n                bar.dataKey (fun point -> point.uv)\n                bar.fill \"#8884d8\"\n            ]\n        ]\n    ])\n\nopen Browser.Dom\n\nReactDOM.render(chart, document.getElementById \"root\")\n```\n\n----------------------------------------\n\nTITLE: Installing react-popover using npm\nDESCRIPTION: Command to install the underlying react-popover JavaScript library via npm. This is required as Feliz.Popover is just a binding library.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Popover/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save react-popover\n```\n\n----------------------------------------\n\nTITLE: Incorrect React Component Implementation with Tuple Parameters in F#\nDESCRIPTION: This example demonstrates an incorrect way to implement a React component using tuple parameters instead of a record. React expects a single object as input properties, making this approach problematic.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/React/CommonPitfalls.md#2025-04-22_snippet_0\n\nLANGUAGE: fsharp\nCODE:\n```\nlet counter = React.functionComponent(fun (min: int, max: int) ->\n    let (count, setCount) = React.useState(min)\n    Html.div [\n        Html.h1 count\n        Html.button [\n            prop.text \"Increment\"\n            prop.onClick (fun _ -> if count < max then setCount(count + 1))\n        ]\n    ])\n```\n\n----------------------------------------\n\nTITLE: Installing Feliz.SelectSearch using Femto in F#\nDESCRIPTION: Shows how to install the Feliz.SelectSearch package using the Femto package manager. This snippet assumes a working CSS loader is enabled.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/SelectSearch/README.md#2025-04-22_snippet_0\n\nLANGUAGE: fsharp\nCODE:\n```\nfemto install Feliz.SelectSearch\n```\n\n----------------------------------------\n\nTITLE: Installing Pigeon Maps npm Dependency Manually in Bash\nDESCRIPTION: This command installs the corresponding npm dependency 'pigeon-maps' for Feliz.PigeonMaps using npm.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/PigeonMaps/Installation.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev pigeon-maps\n```\n\n----------------------------------------\n\nTITLE: Installing Feliz.PigeonMaps NuGet Package Manually in Bash\nDESCRIPTION: This command installs the Feliz.PigeonMaps NuGet package manually using the dotnet CLI.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/PigeonMaps/Installation.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Feliz.PigeonMaps\n```\n\n----------------------------------------\n\nTITLE: Rendering Empty Element with Feliz in F#\nDESCRIPTION: Demonstrates how to render an empty element (nothing) using Html.none in Feliz.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/Syntax.md#2025-04-22_snippet_6\n\nLANGUAGE: fsharp\nCODE:\n```\nmatch state with\n| None -> Html.none\n| Some data -> render data\n```\n\n----------------------------------------\n\nTITLE: Manual Installation of Feliz.RoughViz\nDESCRIPTION: Instructions for manually installing the Feliz.RoughViz package and its npm dependency.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/RoughViz/Index.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Feliz.RoughViz\nnpm install --save @inocan/rough-viz\n```\n\n----------------------------------------\n\nTITLE: Updating the Feliz Template\nDESCRIPTION: These commands update the Feliz template by first uninstalling the current version and then installing the latest version, ensuring you get the most recent template updates.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/ProjectTemplate.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet new -u Feliz.Template\ndotnet new -i Feliz.Template\n```\n\n----------------------------------------\n\nTITLE: Linking to Feliz.Recharts Overview in Markdown\nDESCRIPTION: This snippet demonstrates how to create a link in Markdown to the Feliz.Recharts Overview section. It uses the Markdown link syntax with a specific anchor format.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/Contributing.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Feliz.Recharts](#/Recharts/Overiew)\n```\n\n----------------------------------------\n\nTITLE: Consuming Context in Child Components with useContext\nDESCRIPTION: Accessing theme context within nested child components using React.useContext hook. This allows components to access the theme value without having it explicitly passed through props.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/React/ContextPropagation.md#2025-04-22_snippet_3\n\nLANGUAGE: fsharp\nCODE:\n```\n[<ReactComponent>]\nlet RenderNavbar() =\n    // theme : Theme\n    let theme = React.useContext(themeContext)\n    Html.nav [\n        // render navbar\n    ]\n\n[<ReactComponent>]\nlet RenderSidebar() =\n    let theme = React.useContext(themeContext)\n    Html.aside [\n        // render sidebar\n    ]\n\n[<ReactComponent>]\nlet RenderContent() =\n    let theme = React.useContext(themeContext)\n    Html.div [\n        RenderNavbar()\n        RenderSidebar()\n    ]\n```\n\n----------------------------------------\n\nTITLE: Setting up HTML structure for React portals\nDESCRIPTION: This HTML snippet shows the basic structure needed to use portals in a React application. It includes a root div for the main React app and a separate div for portal content.\nSOURCE: https://github.com/zaid-ajaj/feliz/blob/master/public/Feliz/React/Portals.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<html>\n    <body>\n        <div id=\"root\"></div>\n        <div id=\"portal-root\"></div>\n    </body>\n</html>\n```"
  }
]