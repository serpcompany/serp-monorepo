[
  {
    "owner": "gtk-rs",
    "repo": "gtk4-rs",
    "content": "TITLE: Setting Up GTK-RS Window Callbacks (Rust)\nDESCRIPTION: Extends the `setup_callbacks` method to include additional event handlers. It adds callbacks to react to changes in the \"filter\" setting (filtering tasks), changes in the collection list (updating the UI stack/placeholder), and clicks on collection rows (selecting the collection and showing its tasks).\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_4.md#_snippet_21\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/todo/8/window/mod.rs:setup_callbacks}}\n```\n\n----------------------------------------\n\nTITLE: Implementing GTK-RS Window Close Request (Rust)\nDESCRIPTION: Provides the Rust implementation for the `close_request` method of the GTK-RS window. This method handles saving the application's data when the window is closed, relying on the `CollectionObject::to_collection_data` method for the core serialization logic. The implementation is noted as similar to previous versions.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_4.md#_snippet_11\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/todo/8/window/imp.rs:window_impl}}\n```\n\n----------------------------------------\n\nTITLE: Accessing GTK4 Switch Active Property in Rust\nDESCRIPTION: Shows how to read and write the `active` property of a GTK4 Switch widget using the autogenerated getter (`is_active`) and setter (`set_active`) methods provided by gtk-rs bindings. The snippet demonstrates manipulating the internal state of a standard widget property directly through safe Rust APIs.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/g_object_properties.md#_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n{{#rustdoc_include ../listings/g_object_properties/1/main.rs:switch}}\n```\n\n----------------------------------------\n\nTITLE: Configuring GTK Application Main Entry - main.rs with gtk4-rs\nDESCRIPTION: This Rust snippet outlines the appâ€™s main entry point, setting up the GTK application loop and initializing the main window. Dependencies include gtk4 and application registration boilerplate. The main function typically registers the application, handles command-line arguments, and constructs the window on activation. Expected input is command-line execution; output is a running GTK window.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_1.md#_snippet_3\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/todo/1/main.rs:main}}\n```\n\n----------------------------------------\n\nTITLE: Restoring GTK-RS Window Application Data (Rust)\nDESCRIPTION: Provides the implementation for the `restore_data` method, responsible for loading saved application data. It utilizes `CollectionObject::from_collection_data` for the deserialization. After restoring collections, it selects the first collection's row in the UI using `set_current_collection`.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_4.md#_snippet_15\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/todo/8/window/mod.rs:restore_data}}\n```\n\n----------------------------------------\n\nTITLE: Setting Up GTK-RS Collections List Store (Rust)\nDESCRIPTION: Implements the `setup_collections` method, which initializes the GTK-RS `collections` list store. It configures the list to update the UI (`collections_list`) whenever the model changes and uses the `create_collection_row` method to generate the appropriate UI elements for each collection.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_4.md#_snippet_13\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/todo/8/window/mod.rs:setup_collections}}\n```\n\n----------------------------------------\n\nTITLE: Connecting Signal using connect_closure and closure_local! (Rust)\nDESCRIPTION: Shows how to connect a closure to a GObject signal using the generic `connect_closure` method combined with the `glib::closure_local!` macro in Rust. This approach is versatile, works with any signal (including custom ones), and handles cloning reference-counted objects efficiently. Requires the `glib` crate.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/g_object_signals.md#_snippet_1\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/g_object_signals/1/main.rs:callback}}\n```\n\n----------------------------------------\n\nTITLE: Defining GTK-RS Window State Struct (Rust)\nDESCRIPTION: Defines the `imp::Window` struct in Rust, adding necessary state variables like template widgets (`template_child`), the collections list store, the current collection and filter model, and a handler ID for tracking changes. This state is used to manage the UI and data for the TODO application.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_4.md#_snippet_9\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/todo/8/window/imp.rs:struct}}\n```\n\n----------------------------------------\n\nTITLE: Binding Active Properties of Two GTK4 Switches in Rust\nDESCRIPTION: Demonstrates binding the `active` property of two Switch widgets bidirectionally using the GTK property binding API exposed in gtk-rs. The example binds `switch_1` and `switch_2` so that changes in one toggle the other automatically, syncing their states. It uses the `bidirectional` method to establish two-way bindings.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/g_object_properties.md#_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n{{#rustdoc_include ../listings/g_object_properties/2/main.rs:switches}}\n```\n\nLANGUAGE: rust\nCODE:\n```\n{{#rustdoc_include ../listings/g_object_properties/2/main.rs:bind_active}}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom GObject with Properties Using glib::Properties in Rust\nDESCRIPTION: Defines a custom GTK4 button type (`CustomButton`) with a numeric property `number` that is readable and writable, utilizing the `glib::Properties` derive macro. The snippet shows how the macro auto-generates property boilerplate, including wrapper methods for accessing and mutating the property, which emit notifications for bindings. This enables integration of GObject property patterns in custom widgets.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/g_object_properties.md#_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n{{#rustdoc_include ../listings/g_object_properties/3/custom_button/imp.rs:custom_button}}\n```\n\nLANGUAGE: rust\nCODE:\n```\n{{#rustdoc_include ../listings/g_object_properties/3/custom_button/imp.rs:object_impl}}\n```\n\nLANGUAGE: rust\nCODE:\n```\n{{#rustdoc_include ../listings/g_object_properties/3/custom_button/imp.rs:button_impl}}\n```\n\n----------------------------------------\n\nTITLE: Implementing a GTK 4 Application with Event Handlers in Rust\nDESCRIPTION: An example demonstrating how to set up a GTK application with user interface elements and event handlers. This shows application initialization, window creation, adding a button with a click handler, and running the main event loop.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/gtk4/README.md#_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse gtk4 as gtk;\nuse gtk::prelude::*;\nuse gtk::{glib, Application, ApplicationWindow, Button};\n\nfn main() -> glib::ExitCode {\n    let application = Application::builder()\n        .application_id(\"com.example.FirstGtkApp\")\n        .build();\n\n    application.connect_activate(|app| {\n        let window = ApplicationWindow::builder()\n            .application(app)\n            .title(\"First GTK Program\")\n            .default_width(350)\n            .default_height(70)\n            .build();\n\n        let button = Button::with_label(\"Click me!\");\n        button.connect_clicked(|_| {\n            eprintln!(\"Clicked!\");\n        });\n        window.set_child(Some(&button));\n\n        window.present();\n    });\n\n    application.run()\n}\n```\n\n----------------------------------------\n\nTITLE: Loading CSS in GTK Application\nDESCRIPTION: This snippet showcases the Rust code that loads and applies the `style.css` file to a GTK application. This step is a prerequisite for the CSS styling examples. The CSS file is loaded during application startup.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/css.md#_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nfn main() {\n    let application = gtk::Application::new(Some(\"com.example.css\"), Default::default());\n    application.connect_activate(|app| {\n        let provider = gtk::CssProvider::new();\n        provider.load_from_path(\"style.css\").expect(\"Failed to load CSS\");\n        gtk::StyleContext::add_provider_for_screen(\n            &gdk::Screen::default().expect(\"Could not get default screen.\"),\n            &provider, \n            gtk::STYLE_PROVIDER_PRIORITY_APPLICATION,\n        );\n\n        let window = gtk::ApplicationWindow::new(app);\n        let button = gtk::Button::with_label(\"Click me!\");\n        window.set_child(Some(&button));\n        window.show();\n    });\n    application.run();\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Button State and Click Handling (Rust)\nDESCRIPTION: This snippet modifies the `CustomButton` implementation struct to include a `number` state using `RefCell<u64>` for interior mutability. It overrides the `constructed` method from `ObjectImpl` to initialize the button label using the state. It also overrides the `clicked` method from `ButtonImpl` to increment the number and update the label on each click, adding custom behavior to the button.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/g_object_subclassing.md#_snippet_3\n\nLANGUAGE: Rust\nCODE:\n```\n// This is the implementation struct for our custom button with added state and functionality.\n\nuse glib::object_subclass;\nuse gtk::prelude::*;\nuse gtk::subclass::prelude::*;\nuse std::cell::RefCell;\n\n// Object holding the state\n#[derive(Debug, Default)]\npub struct CustomButton {\n    number: RefCell<u64>,\n}\n\n// The central trait that makes this struct a subclass of a GObject\n#[glib::object_subclass]\nimpl ObjectSubclass for CustomButton {\n    const NAME: &'static str = \"MyGtkAppCustomButton\";\n    type Type = super::CustomButton;\n    type ParentType = gtk::Button;\n}\n\n// Trait for object methods\nimpl ObjectImpl for CustomButton {\n    fn constructed(&self) {\n        self.parent_constructed();\n        // Call construct in case it is implemented by our parent\n\n        let obj = self.obj();\n        obj.set_label(&format!(\"{}\", self.number.borrow()));\n    }\n}\n\n// Trait for button methods\nimpl ButtonImpl for CustomButton {\n    fn clicked(&self) {\n        // Increment the number\n        *self.number.borrow_mut() += 1;\n        // Update label\n        let obj = self.obj();\n        obj.set_label(&format!(\"{}\", self.number.borrow()));\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Managing Window State Loading and Saving in Custom GTK Window Implementation in Rust\nDESCRIPTION: Expands the custom window with internal logic for storing window state, using OnceCell to embed gio::Settings. Overrides the 'constructed' and 'close_request' methods to load persisted state on creation and save it on closure. Requires the Rust gtk4/gio infrastructure, GSettings schema, and OnceCell usage. Key parameters include the window object and the embedded Settings instance. This ensures that the userâ€™s window preferences are correctly restored and persisted. Handles only one-time initialization and does not account for live updates during runtime.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/saving_window_state.md#_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n{{#rustdoc_include ../listings/saving_window_state/1/custom_window/imp.rs:imp}}\n```\n\n----------------------------------------\n\nTITLE: Adding gtk4 Crate Dependency\nDESCRIPTION: This command adds the `gtk4` crate to the project's `Cargo.toml` file, specifying the desired version using the `--features` flag. The `--rename gtk` option is used to simplify crate imports. This allows developers to use the specified GTK4 version and features.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/project_setup.md#_snippet_2\n\nLANGUAGE: Rust\nCODE:\n```\ncargo add gtk4 --rename gtk --features v4_12\n```\n\n----------------------------------------\n\nTITLE: Initial GTK App with Lifetime Error (Rust)\nDESCRIPTION: This Rust code defines a basic GTK application with a single button. It attempts to increment a local mutable variable `number` within the `connect_clicked` signal handler for the button. This code fails to compile because the closure borrows `number`, which does not have a 'static lifetime required by GTK signal handlers. It depends on the `gtk` and `glib` crates.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/g_object_memory_management.md#_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#use gtk::prelude::*;\n#use gtk::{self, glib, Application, ApplicationWindow, Button};\n#\n#const APP_ID: &str = \"org.gtk_rs.GObjectMemoryManagement0\";\n#\n// DOES NOT COMPILE!\nfn main() -> glib::ExitCode {\n    // Create a new application\n    let app = Application::builder().application_id(APP_ID).build();\n\n    // Connect to \"activate\" signal of `app`\n    app.connect_activate(build_ui);\n\n    // Run the application\n    app.run()\n}\n\nfn build_ui(application: &Application) {\n    // Create two buttons\n    let button_increase = Button::builder()\n        .label(\"Increase\")\n        .margin_top(12)\n        .margin_bottom(12)\n        .margin_start(12)\n        .margin_end(12)\n        .build();\n\n    // A mutable integer\n    let mut number = 0;\n\n    // Connect callbacks\n    // When a button is clicked, `number` should be changed\n    button_increase.connect_clicked(|_| number += 1);\n\n    // Create a window\n    let window = ApplicationWindow::builder()\n        .application(application)\n        .title(\"My GTK App\")\n        .child(&button_increase)\n        .build();\n\n    // Present the window\n    window.present();\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting Property Change Notifications to Callbacks in GTK4 with Rust\nDESCRIPTION: Illustrates how to connect a closure to the 'notify' signal of a GObject property (`number` property of a `CustomButton`). When the property value changes, the registered callback is invoked, allowing reactive handling such as printing the current value. This pattern is essential for responding to dynamic state changes in GTK applications.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/g_object_properties.md#_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n{{#rustdoc_include ../listings/g_object_properties/3/main.rs:connect_notify}}\n```\n\n----------------------------------------\n\nTITLE: Installing GTK-RS Asynchronous Window Action (Rust)\nDESCRIPTION: Shows how to add the \"new-collection\" action to the window's class initialization using `install_action_async`. This sets up an asynchronous action that can be triggered by UI elements like buttons to initiate the process of creating a new collection.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_4.md#_snippet_19\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/todo/8/window/imp.rs:object_subclass}}\n```\n\n----------------------------------------\n\nTITLE: Building UI with Button in GTK4 Application in Rust\nDESCRIPTION: This snippet provides the implementation of a user interface containing a button. When clicked, the button's label changes to 'Hello World!'. It uses GTK widgets such as `gtk::Button`, illustrating event handling in Rust with GTK4. The code demonstrates hiding implementation details with the 'eye' icon for clarity, and showcases interactivity by updating the GUI in response to user actions.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/hello_world.md#_snippet_2\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/hello_world/3/main.rs:build_ui}}\n```\n\n----------------------------------------\n\nTITLE: Adding Menu and Header Bar in GTK UI - XML\nDESCRIPTION: This XML snippet modifies the GTK UI resource to add a main menu with submenu items for filtering tasks (All, Open, Done) and actions such as removing done tasks and viewing keyboard shortcuts. It also sets up a GtkHeaderBar with a GtkMenuButton pointing to this menu. The menu is accessible via both the UI and keyboard shortcuts. Dependencies: GTK's interface XML schema, translatable labels are used. The menu connects UI elements to GAction names, enabling filter and clear functions. It expects action groups to be set up for these names and requires proper integration with the rest of the GTK app window and resource compilation.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_2.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n <interface>\n+  <menu id=\"main-menu\">\n+    <submenu>\n+      <attribute name=\"label\" translatable=\"yes\">_Filter</attribute>\n+      <item>\n+        <attribute name=\"label\" translatable=\"yes\">_All</attribute>\n+        <attribute name=\"action\">win.filter</attribute>\n+        <attribute name=\"target\">All</attribute>\n+      </item>\n+      <item>\n+        <attribute name=\"label\" translatable=\"yes\">_Open</attribute>\n+        <attribute name=\"action\">win.filter</attribute>\n+        <attribute name=\"target\">Open</attribute>\n+      </item>\n+      <item>\n+        <attribute name=\"label\" translatable=\"yes\">_Done</attribute>\n+        <attribute name=\"action\">win.filter</attribute>\n+        <attribute name=\"target\">Done</attribute>\n+      </item>\n+    </submenu>\n+    <item>\n+      <attribute name=\"label\" translatable=\"yes\">_Remove Done Tasks</attribute>\n+      <attribute name=\"action\">win.remove-done-tasks</attribute>\n+    </item>\n+    <item>\n+      <attribute name=\"label\" translatable=\"yes\">_Keyboard Shortcuts</attribute>\n+      <attribute name=\"action\">win.show-help-overlay</attribute>\n+    </item>\n+  </menu>\n   <template class=\"TodoWindow\" parent=\"GtkApplicationWindow\">\n     <property name=\"width-request\">360</property>\n     <property name=\"title\" translatable=\"yes\">To-Do</property>\n+    <child type=\"titlebar\">\n+      <object class=\"GtkHeaderBar\">\n+        <child type=\"end\">\n+          <object class=\"GtkMenuButton\" id=\"menu_button\">\n+            <property name=\"icon-name\">open-menu-symbolic</property>\n+            <property name=\"menu-model\">main-menu</property>\n+          </object>\n+        </child>\n+      </object>\n+    </child>\n```\n\n----------------------------------------\n\nTITLE: Configuring GTK 4 Dependencies in Cargo.toml\nDESCRIPTION: Example showing how to specify GTK 4 dependencies in a Cargo.toml file with versioning and feature selection. This demonstrates how to enable specific GTK 4 version APIs like v4_2.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/gtk4/README.md#_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies.gtk]\npackage = \"gtk4\"\nversion = \"0.x.y\"\nfeatures = [\"v4_2\"]\n```\n\n----------------------------------------\n\nTITLE: Setting Up List Factory and Property Binding for Tasks - GTK ListView in Rust\nDESCRIPTION: This Rust snippet sets up a GTK ListFactory with methods for producing TaskRow widgets, binding/unbinding their properties to TaskObject data. It ensures bidirectional binding so UI interactivity and model stay in sync. Dependencies are GTK's factory system, property binding, and handling of widget reuse. Expected input is a model instance; output is displayed and synchronized tasks.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_1.md#_snippet_15\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/todo/1/window/mod.rs:setup_factory}}\n```\n\n----------------------------------------\n\nTITLE: Adding adw::ApplicationWindow to Widget Hierarchy\nDESCRIPTION: Shows how to modify the widget hierarchy by adding adw::ApplicationWindow as an ancestor of the Window class in the Rust implementation, ensuring proper integration with Libadwaita.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_4.md#_snippet_5\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/todo/7/window/mod.rs:glib_wrapper}}\n```\n\n----------------------------------------\n\nTITLE: Bind Data to List Items - Rust\nDESCRIPTION: This snippet demonstrates binding data from the `IntegerObject` in the model to the `Label` in the `ListItem` during the \"bind\" step of the `SignalListItemFactory`.  It retrieves the number from the IntegerObject and sets it as the text of the Label.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/list_widgets.md#_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nfactory.connect_bind(move |_factory, list_item| {\n    // Get integer object from list item\n    let integer_object = list_item\n        .item()\n        .unwrap()\n        .downcast::<super::IntegerObject>()\n        .unwrap();\n\n    // Get label from list item\n    let label = list_item.child().unwrap().downcast::<gtk::Label>().unwrap();\n\n    // Set the label to the number in integer object\n    label.set_label(&integer_object.number().to_string());\n});\n```\n\n----------------------------------------\n\nTITLE: XML UI layout for To-Do app window with Libadwaita NavigationSplitView and Sidebar\nDESCRIPTION: Defines the main window layout using XML, replacing gtk::ApplicationWindow with adw::ApplicationWindow, incorporating adw::NavigationSplitView for adaptive sidebar and content areas, and adding UI elements such as header bars and list box for collections. It specifies properties for adaptive behavior and UI styling.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_4.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<interface>\n  <menu id=\"main-menu\">\n    <!--Menu implementation-->      \n  </menu>\n  <template class=\"TodoWindow\" parent=\"AdwApplicationWindow\">\n    <property name=\"title\" translatable=\"yes\">To-Do</property>\n    <property name=\"width-request\">360</property>\n    <property name=\"height-request\">200</property>\n    <child>\n      <object class=\"AdwBreakpoint\">\n        <condition>max-width: 500sp</condition>\n        <setter object=\"split_view\" property=\"collapsed\">True</setter>\n      </object>\n    </child>\n    <property name=\"content\">\n      <object class=\"AdwNavigationSplitView\" id=\"split_view\">\n        <property name=\"min-sidebar-width\">200</property>\n        <property name=\"sidebar\">\n          <object class=\"AdwNavigationPage\">\n            <!--Collection view implementation-->\n          </object>\n        </property>\n        <property name=\"content\">\n          <object class=\"AdwNavigationPage\">\n            <!--Task view implementation-->\n          </object>\n        </property>\n      </object>\n    </property>\n  </template>\n</interface>\n```\n\n----------------------------------------\n\nTITLE: Defining To-Do Application Main Window using Libadwaita in Rust\nDESCRIPTION: This snippet illustrates the main window module setup for the To-Do application, utilizing Libadwaita's custom window classes and features. It replaces core GTK prelude imports with Libadwaita counterparts and demonstrates how window creation, child widget management, and window configuration are structured. Dependencies are adw::ApplicationWindow and related libadwaita/gtk-rs prelude traits. Expected input includes window instantiation and signals, with the window UI loaded from a structured file. Outputs are the correctly configured and themed main window for the app.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_3.md#_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n{{#rustdoc_include ../listings/todo/5/window/mod.rs:new}}\n```\n\n----------------------------------------\n\nTITLE: Setup SignalListItemFactory - Rust\nDESCRIPTION: This code shows how to connect to the \"setup\" signal of a `SignalListItemFactory`. This signal is emitted when a new widget is needed. A `Label` is created and set as the child of the `ListItem` to represent the list item visually.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/list_widgets.md#_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nfactory.connect_setup(move |_factory, list_item| {\n    // Create label\n    let label = gtk::Label::new(None);\n\n    // Add it to the list item\n    list_item.set_child(Some(&label));\n});\n```\n\n----------------------------------------\n\nTITLE: Managing ListBox Visibility on Item Changes in Libadwaita/GTK4 To-Do App (Rust)\nDESCRIPTION: This snippet connects handler logic to automatically hide or show the GtkListBox widget depending on whether any tasks are present. It listens to item changes in the list model and toggles visibility accordingly. The key input is model change events; the output is dynamic UI updates for empty/non-empty task lists. Dependencies are gtk-rs signal handling and property updates, and the boxed list patternâ€™s constraints on visibility toggling.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_3.md#_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n{{#rustdoc_include ../listings/todo/6/window/mod.rs:connect_items_changed}}\n```\n\n----------------------------------------\n\nTITLE: Implementing Boxed List Layout for To-Do Tasks in GTK4 XML UI\nDESCRIPTION: This XML snippet defines the boxed list UI pattern using a GtkScrolledWindow containing an AdwClamp, GtkBox (vertical), GtkEntry, and a GtkListBox with the 'boxed-list' style class. The ListBox is configured with selection-mode set to none, margins for visual spacing, and nested for hierarchical layout. This layout is designed for small lists (as recycling is unsupported), and integrates with Libadwaitaâ€™s visual guidelines. Expected input is the UI resource file, and output is the styled task entry and list interface. Dependencies are Adwaita and GTK4 UI XML conventions.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_3.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<child>\n  <object class=\"GtkScrolledWindow\">\n    <property name=\"hscrollbar-policy\">never</property>\n    <property name=\"min-content-height\">420</property>\n    <property name=\"vexpand\">True</property>\n    <property name=\"child\">\n      <object class=\"AdwClamp\">\n        <property name=\"child\">\n          <object class=\"GtkBox\">\n            <property name=\"orientation\">vertical</property>\n            <property name=\"spacing\">18</property>\n            <property name=\"margin-top\">24</property>\n            <property name=\"margin-bottom\">24</property>\n            <property name=\"margin-start\">12</property>\n            <property name=\"margin-end\">12</property>\n            <child>\n              <object class=\"GtkEntry\" id=\"entry\">\n                <property name=\"placeholder-text\" translatable=\"yes\">Enter a Taskâ€¦</property>\n                <property name=\"secondary-icon-name\">list-add-symbolic</property>\n              </object>\n            </child>\n            <child>\n              <object class=\"GtkListBox\" id=\"tasks_list\">\n                <property name=\"visible\">False</property>\n                <property name=\"selection-mode\">none</property>\n                <style>\n                  <class name=\"boxed-list\" />\n                </style>\n              </object>\n            </child>\n          </object>\n        </property>\n      </object>\n    </property>\n  </object>\n</child>\n```\n\n----------------------------------------\n\nTITLE: Unbinding Properties and Cleaning Up - TaskRow::unbind in Rust\nDESCRIPTION: This Rust snippet implements TaskRow::unbind to iterate through its stored property bindings and remove them, clearing the binding vector afterward. This is crucial for reusing TaskRow widgets in a list and avoiding memory leaks or stale data. Dependencies include glib::Binding and GTK list handling.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_1.md#_snippet_17\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/todo/1/task_row/mod.rs:unbind}}\n```\n\n----------------------------------------\n\nTITLE: Handling GTK-RS New Collection Dialog (Rust)\nDESCRIPTION: Implements the `async` `new_collection` method, which is triggered by the \"new-collection\" action. It creates and configures an [`adw::AlertDialog`](https://world.pages.gitlab.gnome.org/Rust/libadwaita-rs/stable/latest/docs/libadwaita/struct.AlertDialog.html) for adding a new collection, including input validation (entry sensitivity/error styling), awaiting user interaction, creating the collection if confirmed, and navigating to the task view.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_4.md#_snippet_20\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/todo/8/window/mod.rs:new_collection}}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Entry Callback - Connecting \"activate\" Signal in Rust\nDESCRIPTION: This Rust snippet sets up a callback on the entry widget to respond to the 'activate' signal, creating and appending a new TaskObject to the model when the user presses Enter. It clears the entry after insertion. Dependencies include GTK event system. Input is user text; output is a new task added to the list.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_1.md#_snippet_14\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/todo/1/window/mod.rs:setup_callbacks}}\n```\n\n----------------------------------------\n\nTITLE: Install GTK4 Development Tools on Debian\nDESCRIPTION: This command installs the GTK4 development libraries and build tools (build-essential) on Debian and derivative distributions using the apt package manager. This is required for building GTK4 applications.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/installation_linux.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nsudo apt install libgtk-4-dev build-essential\n```\n\n----------------------------------------\n\nTITLE: Implementing Task Row Widget - gtk::Box Subclass in Rust\nDESCRIPTION: This Rust snippet illustrates subclassing gtk::Box to implement a TaskRow, registering it as a custom composite widget. Dependencies include gtk4-rs macros and matching template IDs. The widget handles individual task display and responds to bound data. Expected output is a reusable row widget for GTK lists.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_1.md#_snippet_9\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/todo/1/task_row/mod.rs:glib_wrapper}}\n```\n\n----------------------------------------\n\nTITLE: Compiling GResources in a Cargo Build Script Using glib-build-tools (Rust)\nDESCRIPTION: This Rust build script compiles GResources for the GTK application using glib-build-tools::compile_resources. It should be placed in build.rs at the crate root, with glib-build-tools specified as a build dependency. Parameters include the array of resource directories, the XML resource manifest, and the output file name. Input is the gresource XML and template files; output is a compiled resource file linked into the Rust binary. The script must run before the application builds. Constraints: paths must match project structure.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/composite_templates.md#_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nfn main() {\n    glib_build_tools::compile_resources(\n        &[\"composite_templates/1/resources\"],\n        \"composite_templates/1/resources/resources.gresource.xml\",\n        \"composite_templates_1.gresource\",\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Actions in a Custom GTK Widget (Rust)\nDESCRIPTION: Demonstrates defining and adding actions within a custom GTK widget's implementation (`impl Window`). A dedicated `setup_actions` method encapsulates the creation of a stateful `ActionEntry` (\"count\") and adding it to the widget's action map, commonly used with composite templates.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/actions.md#_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\n{{#rustdoc_include ../listings/actions/5/window/mod.rs:impl_window}}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Window Widget - gtk4-rs Rust Subclass\nDESCRIPTION: This Rust snippet shows subclassing gtk::ApplicationWindow for the app window, establishing a new custom widget within Rust. Dependencies include gtk4 and glib crates, and proper GObject subclassing macros. The code establishes inheritance, ancestor registration, and may include template initialization. Expected input involves subclass registration; output is a usable Rust struct representing the GTK window. All ancestors/interfaces excluding GObject must be included as required.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_1.md#_snippet_1\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/todo/1/window/mod.rs:glib_wrapper}}\n```\n\n----------------------------------------\n\nTITLE: Emitting Custom GObject Signal (Rust)\nDESCRIPTION: Demonstrates emitting a custom GObject signal (\"max-number-reached\") from within a method of a custom GObject implementation in Rust. The signal is emitted using `self.obj().emit_by_name()` when a specific condition (e.g., a counter reaching a maximum) is met, passing the relevant data (`i32`) as an argument. Requires `glib`.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/g_object_signals.md#_snippet_3\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/g_object_signals/2/custom_button/imp.rs:button_impl}}\n```\n\n----------------------------------------\n\nTITLE: Storing Widget References and Bindings in Task Row - Rust Implementation\nDESCRIPTION: This Rust snippet details the internal implementation for TaskRow, storing references to completed_button, content_label, and a vector of property bindings. Dependencies are property binding support (glib::Binding) and GTK's widget lookup. Key feature is automatic re-binding of rows when models change. Input is widget creation/binding context; output is managed state for UI synchronization.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_1.md#_snippet_10\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/todo/1/task_row/imp.rs:struct_and_subclass}}\n```\n\n----------------------------------------\n\nTITLE: Exposing Properties for Task Data - GObject Properties in Rust\nDESCRIPTION: This Rust snippet shows setting up property exposure via GObject, mapping 'completed' and 'content' as properties. It uses annotations to map struct fields to the GObject property system for GTK bindings and UI interaction. Dependencies are gtk4-rs macros and proper type registration. Key parameters are property metadata and accessors; expected outcome is runtime property accessibility for UI and bindings.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_1.md#_snippet_7\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/todo/1/task_object/imp.rs:struct_and_subclass}}\n```\n\n----------------------------------------\n\nTITLE: Spawning Non-Blocking Tasks with gio::spawn_blocking in GTK (Rust)\nDESCRIPTION: This snippet extends the GTK example to avoid freezing the UI while a long-running operation executes. It leverages gio::spawn_blocking to run the task (e.g., sleeping for several seconds) on a thread pool, keeping the main thread responsive. Requires gtk4, glib, and gio. The callback is triggered by a button; output is continuous GUI responsiveness. Caveat: Multiple simultaneous tasks can be started, as there is no mutex or state control.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/main_event_loop.md#_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n{{#rustdoc_include ../listings/main_event_loop/2/main.rs:callback}}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Button Subclass Public Interface (Rust)\nDESCRIPTION: This snippet defines the public `CustomButton` struct using `glib::wrapper!`. It links the public type to the private implementation (`imp::CustomButton`) and lists the necessary ancestor types and interfaces for `gtk::Button` to ensure trait implementation compatibility. This makes the `CustomButton` usable as a standard GTK widget by providing the necessary GObject boilerplate and trait implementations.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/g_object_subclassing.md#_snippet_1\n\nLANGUAGE: Rust\nCODE:\n```\n// This is the public interface of our custom button.\n// We can add new methods here that aren't available on gtk::Button.\n\nuse glib::wrapper;\n\nwrapper! {\n    pub struct CustomButton(ObjectSubclass<imp::CustomButton>)\n        @extends gtk::Button, gtk::Widget, \n        @implements gtk::Accessible, gtk::Actionable, gtk::Buildable, gtk::ConstraintTarget;\n}\n\nimpl CustomButton {\n    // Constructor for creating a new CustomButton\n    pub fn new() -> Self {\n        glib::Object::new()\n    }\n\n    // Constructor for creating a new CustomButton with a label\n    pub fn with_label(label: &str) -> Self {\n        glib::Object::new_with_properties(&[(\"label\", &label)])\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Handling Custom GObject Signal Emission (Rust)\nDESCRIPTION: Shows how to connect a closure to a custom GObject signal (\"max-number-reached\") emitted by a custom object instance in Rust application code. The closure takes the object instance and the signal's payload (an `i32`) as arguments and executes custom logic, such as printing the received value. Requires `glib`.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/g_object_signals.md#_snippet_4\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/g_object_signals/2/main.rs:signal_handling}}\n```\n\n----------------------------------------\n\nTITLE: Implementing Task Object Subclass - GObject Rust Wrapper\nDESCRIPTION: This Rust snippet implements a GObject subclass for TaskObject, which tracks a task's content (string) and completion (boolean). Dependencies include glib and gtk4-rs, and registering the subclass with appropriate parent type. Parameters include task attributes; output is a GObject wrapping Rust task data. Ensures object can interoperate with GTK's model/view architecture.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_1.md#_snippet_5\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/todo/1/task_object/mod.rs:glib_wrapper_and_new}}\n```\n\n----------------------------------------\n\nTITLE: Adding a New Task - Handling Entry and Model Updates in Rust\nDESCRIPTION: This Rust snippet implements a method to process entry input, create a new TaskObject, clear the entry, and insert the new task into the list model. Dependencies are correct references to entry/model and TaskObject creation logic. Input is current entry text; output is the updated task model with the new task appended.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_1.md#_snippet_13\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/todo/1/window/mod.rs:new_task}}\n```\n\n----------------------------------------\n\nTITLE: Binding GSettings Key Directly to GTK Switch Property in Rust\nDESCRIPTION: This Rust example demonstrates advanced binding where the 'is-switch-enabled' setting is directly bound to the Switch widget's 'active' property using Settings' bind mechanism. This setup ensures real-time synchronization without manual event handling. Dependencies: gtk4, gio. Inputs are the Settings object, Switch widget, and property/key names; output is a persistent, auto-updated Switch state with less boilerplate.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/settings.md#_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n{{#rustdoc_include ../listings/settings/2/main.rs:settings_bind}}\n```\n\n----------------------------------------\n\nTITLE: Implementing Task Saving on Window Close in Rust\nDESCRIPTION: Overrides the close_request virtual function to save tasks when the window closes. It iterates through entries, collects them into a Vec, serializes the data, and writes it to a JSON file.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_2.md#_snippet_16\n\nLANGUAGE: rust\nCODE:\n```\nfn close_request(&self, window: &Self::Type) -> glib::Propagation {\n    // Save tasks\n    if let Err(err) = self.save_tasks(window) {\n        println!(\"Error saving tasks: {err:?}\");\n    }\n    // Propagate close request\n    self.parent_close_request(window)\n}\n\nfn save_tasks(&self, window: &Window) -> Result<(), Box<dyn std::error::Error>> {\n    // Get task list store\n    let model = window.tasks();\n\n    // Collect all tasks\n    let mut tasks = Vec::new();\n    for item in model.iter::<TaskObject>() {\n        let task_object = item.unwrap();\n        tasks.push(task_object.task_data());\n    }\n\n    // Get file path\n    let path = utils::data_path();\n\n    // Write tasks to file\n    let file = std::fs::File::create(path)?;\n    serde_json::to_writer(file, &tasks)?;\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Binding GSettings to Widget Properties in GTK4-rs\nDESCRIPTION: Binds settings values to widget properties to automatically update the UI when settings change, using GObject property binding mechanisms.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/actions.md#_snippet_16\n\nLANGUAGE: rust\nCODE:\n```\nfn bind_settings(&self) {\n    let settings = self.settings();\n\n    // Bind setting \"button-frame\" to property \"has-frame\" of button\n    settings\n        .bind(\"button-frame\", &self.button(), \"has-frame\")\n        .build();\n\n    // Manually bind \"orientation\" because the property is an enum\n    let orientation = match self.orientation().as_str() {\n        \"Horizontal\" => gtk::Orientation::Horizontal,\n        \"Vertical\" => gtk::Orientation::Vertical,\n        _ => unreachable!(),\n    };\n    self.gtk_box().set_orientation(orientation);\n}\n```\n\n----------------------------------------\n\nTITLE: Building a GTK Hello World Application Using the Builder Pattern in Rust\nDESCRIPTION: This Rust snippet demonstrates constructing a basic GTK 'Hello World' app using the builder pattern for widget instantiation. Dependencies include the gtk crate, and the main function sets up an application window and button as described in the referenced file. The input is the application execution, outputting a window and button UI. Parameters include window title and callbacks. There are no major limitations for simple GTK usage.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/composite_templates.md#_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n{{#rustdoc_include ../listings/hello_world/3/main.rs:all}}\n```\n\n----------------------------------------\n\nTITLE: Declaring Embedded Resources for GTK Application in XML\nDESCRIPTION: This XML snippet declares resources to be embedded in the GTK application, specifying which files to include, with options for compression and preprocessing to minimize application size. It relies on the GResource compiler in the glib/gio build chain. Key parameters include the file paths, resource IDs, and flags. No runtime inputs or outputs; it affects the build process. Constraints: resource paths must be consistent with application code and build scripts.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/composite_templates.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n{{#rustdoc_include ../listings/composite_templates/1/resources/resources.gresource.xml}}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Multithreaded GTK UI Manipulation with gio::spawn_blocking (Rust, Does Not Compile)\nDESCRIPTION: This code attempts to update GTK widgets from a worker thread using gio::spawn_blocking, directly mutating UI state from outside the main thread. As GTK objects are not Sync, this code will not compile, resulting in an error about thread safety (NonNull<GObject>). Dependencies include gtk4, glib, gio, std::thread. Intended to highlight thread safety constraints: GTK UI updates must occur on the main thread. Limitation: Provided as an illustration of incorrect usage; will fail to build.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/main_event_loop.md#_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n# use std::{thread, time::Duration};\n# \n# use glib::{clone, MainContext, PRIORITY_DEFAULT};\n# use gtk::{glib, gio};\n# use gtk::prelude::*;\n# use gtk::{Application, ApplicationWindow, Button};\n# \n# fn main() {\n#     // Create a new application\n#     let app = Application::builder()\n#        .application_id(\"org.gtk_rs.MainEventLoop6\")\n#        .build();\n#\n#     // Connect to \"activate\" signal\n#     app.connect_activate(build_ui);\n# \n#     // Get command-line arguments\n#     let args: Vec<String> = args().collect();\n#     // Run the application\n#     app.run(&args);\n# }\n# \n# // When the application is launchedâ€¦\n# fn build_ui(application: &Application) {\n#     // Create a window\n#     let window = ApplicationWindow::builder()\n#         .application(application)\n#         .title(\"My GTK App\")\n#         .build();\n# \n#     // Create a button\n#     let button = Button::builder()\n#         .label(\"Press me!\")\n#         .margin_top(12)\n#         .margin_bottom(12)\n#         .margin_start(12)\n#         .margin_end(12)\n#         .build();\n# \n    // DOES NOT COMPILE!\n    // Connect to \"clicked\" signal of `button`\n    button.connect_clicked(move |button| {\n        button.clone();\n        // The long running operation runs now in a separate thread\n        gio::spawn_blocking(move || {\n            // Deactivate the button until the operation is done\n            button.set_sensitive(false);\n            let five_seconds = Duration::from_secs(5);\n            thread::sleep(five_seconds);\n            // Activate the button again\n            button.set_sensitive(true);\n        });\n    });\n# \n#     // Add button\n#     window.set_child(Some(&button));\n#     window.present();\n# }\n\n```\n\n----------------------------------------\n\nTITLE: Initializing To-Do Application with Libadwaita in Rust\nDESCRIPTION: This snippet defines the main entry point for a To-Do app using Libadwaitaâ€™s adw::Application. It shows how to bootstrap the app, transitions from gtk::Application to Libadwaitaâ€™s subclass, and ensures translations, styles, and icons are set up automatically via Libadwaitaâ€™s built-in initialization. Dependencies include the adw crate (Libadwaita for Rust), with main parameters handling application startup and window management. Input is standard application lifecycle, and the output is a running GUI application. The initialization presumes correct resource and stylesheet naming as per Libadwaita requirements.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_3.md#_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n{{#rustdoc_include ../listings/todo/5/main.rs:main}}\n```\n\n----------------------------------------\n\nTITLE: Binding To-Do Task Model to ListBox in Libadwaita/GTK4 using Rust\nDESCRIPTION: This snippet demonstrates how to bind a model of task data to a GtkListBox for display, replacing the use of a ListView and widget factories. It sets up the ListBox using bind_model, specifying a model and a closure that converts each GObject into a UI widget. Inputs are a model (typically a GListModel or equivalent), and outputs are ListBox rows reflecting the model data. Dependencies include gtk::ListBox, GObject, and related Rust/gtk-rs abstractions. No widget recycling occurs, so each item is persistently mapped to its row.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_3.md#_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n{{#rustdoc_include ../listings/todo/6/window/mod.rs:bind_model}}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom To-Do Task Row Widgets with ActionRow and CheckButton in Rust\nDESCRIPTION: This snippet implements the creation of individual ListBox rows using adw::ActionRow and a gtk::CheckButton. It demonstrates directly binding task state properties to the widget, leveraging that the lack of recycling ensures persistent bindings. Inputs include a GObject representing a task item; outputs are fully interactive and styled row widgets for the boxed list. Dependencies are adw::ActionRow, gtk::CheckButton, and property binding mechanisms from gtk-rs/libadwaita.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_3.md#_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n{{#rustdoc_include ../listings/todo/6/window/mod.rs:create_task_row}}\n```\n\n----------------------------------------\n\nTITLE: Initializing Tokio Runtime for GTK4 Rust Applications Using OnceLock\nDESCRIPTION: This Rust snippet establishes a static, lazily-initialized Tokio runtime using std::sync::OnceLock. It properly defers initialization of Tokio's runtime so it can be safely referenced in GUI callbacks. This approach is essential when combining GLib's event loop and Tokio in the same process. Prerequisites: Rust 1.70+ (for OnceLock), tokio, gtk4, std. Inputs: none directly; Output: a thread-safe reference to Runtime. Limitation: Initialization must happen before use in async callbacks.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/main_event_loop.md#_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\n{{#rustdoc_include ../listings/main_event_loop/9/main.rs:tokio_runtime}}\n```\n\n----------------------------------------\n\nTITLE: Declaring a GTK ApplicationWindow Subclass for Composite Template Usage (Rust)\nDESCRIPTION: This Rust snippet defines a new struct inheriting from gtk::ApplicationWindow, prepared for use with a template resource. The code sets up the custom widget's type and links it to a UI template loaded from the embedded resources. Dependencies include gtk::glib and gtk4-macros crates. Parameters affect class registration. Inputs: template-injected resource; outputs: new widget types. Constraints: must implement related trait and link NAME with template class.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/composite_templates.md#_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n{{#rustdoc_include ../listings/composite_templates/1/window/mod.rs}}\n```\n\n----------------------------------------\n\nTITLE: Defining Application Shortcuts Window UI - XML\nDESCRIPTION: This XML UI describes the shortcuts window using gtk::ShortcutsWindow, organizing entries into ShortcutsSection and ShortcutsGroup, and specifying keyboard shortcut bindings for actions. It supports referencing detailed action names such as \"action_group.action_name(target)\". Inputs: none directly, but proper integration requires the shortcut file to be registered as a resource with the alias gtk/help-overlay.ui. Output: the GTK shortcuts window, auto-displayed via win.show-help-overlay. Limitation: shortcut targets for string values must be in single quotes as per GAction conventions.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_2.md#_snippet_11\n\nLANGUAGE: XML\nCODE:\n```\n{{#rustdoc_include ../listings/todo/2/resources/shortcuts.ui}}\n```\n\n----------------------------------------\n\nTITLE: Assigning Keyboard Accelerators to Actions in Rust\nDESCRIPTION: Demonstrates assigning a keyboard accelerator to a specific action (e.g., \"win.close\") within the `main` function using `set_accels_for_action` on the `GtkApplication`. The action name includes the group prefix (\"win\"). It relies on the action being previously defined and added to the window.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/actions.md#_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n{{#rustdoc_include ../listings/actions/1/main.rs:main}}\n```\n\n----------------------------------------\n\nTITLE: Defining a Window Layout Using GTK Composite Template XML\nDESCRIPTION: This XML snippet serves as a UI definition for a GTK window, including widget hierarchy and properties, to be used as a composite template. Dependencies are GTK4 and compatible Rust bindings. The main parameters are class names and widget ids for mapping UI elements to code. Inputs and outputs are via resource embedding in the application. The structure must use <interface> as the root and specify a custom widget class and parent. Only valid for GTK composite template processing.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/composite_templates.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n{{#rustdoc_include ../listings/composite_templates/1/resources/window.ui}}\n```\n\n----------------------------------------\n\nTITLE: Initializing Composite Template in imp::Window - gtk4-rs Rust\nDESCRIPTION: This Rust snippet initializes the imp::Window struct, holding references to the entry widget, list view, and list model. It establishes the composite template instance fields and boilerplate required by gtk4-rs. Dependencies include accurate class and attribute matching between the Rust struct and the XML template. Expected input is the struct's construction phase; outputs are stored widget references, easing later access and manipulation.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_1.md#_snippet_2\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/todo/1/window/imp.rs:struct_and_subclass}}\n```\n\n----------------------------------------\n\nTITLE: XML UI Layout for Placeholder and Main Stack Pages in GTK4\nDESCRIPTION: Defines the XML UI structure for the To-Do app, including a GtkStack with two pages: a placeholder page shown when no collections exist, and a main view with a split view for task management. Uses AdwStatusPage for empty state display and GtkBox, GtkHeaderBar for layout.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_4.md#_snippet_6\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<interface>\n  <menu id=\"main-menu\">\n    <!--Menu implementation--> \n  </menu>\n  <template class=\"TodoWindow\" parent=\"AdwApplicationWindow\">\n    <property name=\"title\" translatable=\"yes\">To-Do</property>\n    <property name=\"width-request\">360</property>\n    <property name=\"height-request\">200</property>\n    <child>\n      <object class=\"AdwBreakpoint\">\n        <condition>max-width: 500sp</condition>\n        <setter object=\"split_view\" property=\"collapsed\">True</setter>\n      </object>\n    </child>\n    <property name=\"content\">\n      <object class=\"GtkStack\" id=\"stack\">\n        <property name=\"transition-type\">crossfade</property>\n        <child>\n          <object class=\"GtkStackPage\">\n            <property name=\"name\">placeholder</property>\n            <property name=\"child\">\n              <object class=\"GtkBox\">\n                <!--Placeholder page implementation--> \n              </object>\n            </property>\n          </object>\n        </child>\n        <child>\n          <object class=\"GtkStackPage\">\n            <property name=\"name\">main</property>\n            <property name=\"child\">\n              <object class=\"AdwNavigationSplitView\" id=\"split_view\">\n                <!--Main page implementation-->\n              </object>\n            </property>\n          </object>\n        </child>\n      </object>\n    </property>\n  </template>\n</interface>\n\n```\n\n----------------------------------------\n\nTITLE: Defining Persistent Task Filter Setting - GSettings XML Schema\nDESCRIPTION: This XML file declares the GSettings schema for the To-Do app, defining a key named 'filter' to persist the current filter state. The setting is accessed by custom Rust code for stateful actions and acts as the storage for the filter between sessions. It is required to be installed as per GSettings setup steps. Input: none directly for the schema file, but actions will use this setting at runtime. Limitation: changes require recompilation of the schema. This enables integration between UI actions and application logic for persistency.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_2.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n{{#rustdoc_include ../listings/todo/2/org.gtk_rs.Todo2.gschema.xml}}\n```\n\n----------------------------------------\n\nTITLE: Initializing GTK Application and gio::Settings in Rust\nDESCRIPTION: This Rust snippet showcases the initialization of a GTK application and the setup of the gio::Settings object by specifying the application schema ID. Dependencies: gtk4, gio. The function sets up the application structure, ensuring that loaded settings are available for reading and writing the switch state. Inputs include the application ID string; outputs comprise an instantiated Settings object bound to the application's state.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/settings.md#_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n{{#rustdoc_include ../listings/settings/1/main.rs:application}}\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Action Entry in Rust\nDESCRIPTION: Shows how to define a basic `gio::ActionEntry` named \"close\" with no parameters within a `build_ui` function. The action's callback closes the associated `ApplicationWindow`. The action is added to the window's default action group (\"win\") using `add_action_entries`.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/actions.md#_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n{{#rustdoc_include ../listings/actions/1/main.rs:build_ui}}\n```\n\n----------------------------------------\n\nTITLE: Implementing ObjectSubclass and Template Bindings for Custom GTK Window (Rust)\nDESCRIPTION: This Rust snippet implements the ObjectSubclass trait for the custom GTK window, assigning the GTK class name, parent type, and initializing the template in both class_init and instance_init methods. Dependencies include gtk and glib crates. Parameters are NAME/class association and ParentType. Inputs are resource/template bindings and output is initialization state of widget at runtime. Correct linkage is required for template loading to succeed. Limitations: class and parent must match template XML.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/composite_templates.md#_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\n{{#rustdoc_include ../listings/composite_templates/1/window/imp.rs:subclass}}\n```\n\n----------------------------------------\n\nTITLE: Defining Composite Template for Main Window - GTK UI XML\nDESCRIPTION: This XML snippet defines the main ApplicationWindow layout for the To-Do app as a composite template, specifying UI elements like an entry field and a list view. Dependencies include GTK 4 and correct integration into Rust via resource files and code. All widgets used here must match class names and IDs referenced in Rust. Inputs and outputs are determined by GTK widgets; limitations include correct matching between object names in XML and Rust subclassing.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_1.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n{{#rustdoc_include ../listings/todo/1/resources/window.ui}}\n```\n\n----------------------------------------\n\nTITLE: Defining Composite Template for Task Row - GTK UI XML\nDESCRIPTION: This XML snippet defines the template for a single task row, used to represent each task within the task list. It contains UI elements for displaying and interacting with a task (e.g., a toggle button and label). Must be registered as a resource and referenced in matching Rust code. Inputs/outputs are GTK UI widgets; correct naming and structure ensure proper template instantiation.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_1.md#_snippet_8\n\nLANGUAGE: XML\nCODE:\n```\n{{#rustdoc_include ../listings/todo/1/resources/task_row.ui}}\n```\n\n----------------------------------------\n\nTITLE: Enabling GTK CompositeTemplate Derive Macro for Template Child Reference (Rust)\nDESCRIPTION: This Rust snippet uses the gtk::CompositeTemplate derive macro for the widget implementation struct to bind fields to template children identified by their id attributes in the template XML. Dependencies are gtk4-macros and the gtk crate. The main parameter is the template resource path. Inputs are template children in resources; outputs are references to widgets mapped to Rust struct fields for signal connection. Should match widget ids with struct fields. Incompatible with manually-constructed widget hierarchies.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/composite_templates.md#_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n{{#rustdoc_include ../listings/composite_templates/1/window/imp.rs:object}}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Window Construction - GTK Window Content Initialization in Rust\nDESCRIPTION: This Rust snippet demonstrates overriding the constructed method in imp::Window to set up UI components at construction, ensuring widgets and data models are initialized. Dependencies are GTK subclassing rules and correct setup of widget fields. Output is a window whose contents (entry, list view) are initialized before being shown.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_1.md#_snippet_11\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/todo/1/window/imp.rs:constructed}}\n```\n\n----------------------------------------\n\nTITLE: Running the GTK4 Application\nDESCRIPTION: This command uses `cargo run` to build and execute the Rust application. It compiles the Rust code and then runs the executable, assuming the project has been set up correctly with the necessary dependencies and code.  It displays the GTK4 application if everything is set up correctly.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/project_setup.md#_snippet_3\n\nLANGUAGE: Rust\nCODE:\n```\ncargo run\n```\n\n----------------------------------------\n\nTITLE: Rust Implementation of CollectionObject Data Model\nDESCRIPTION: Defines the CollectionObject struct with properties 'title' and 'tasks' for managing collections of tasks. Also includes CollectionData for serialization/deserialization purposes, and methods for instantiation, access, and conversion to facilitate data handling within the app.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_4.md#_snippet_8\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/todo/8/collection_object/imp.rs:collection_object}}\n```\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/todo/8/collection_object/mod.rs:collection_data}}\n```\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/todo/8/collection_object/mod.rs:impl}}\n```\n\n----------------------------------------\n\nTITLE: Setting GTK-RS Current Collection and View (Rust)\nDESCRIPTION: Implements `set_current_collection`, which updates the UI and data models to reflect the currently selected collection. It binds the `tasks_list` to the collection's task model, manages the filter model, controls the visibility of the task list based on task count, and correctly handles signal handlers by disconnecting previous ones.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_4.md#_snippet_16\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/todo/8/window/mod.rs:set_current_collection}}\n```\n\n----------------------------------------\n\nTITLE: Modifying shared state in GTK with Rust\nDESCRIPTION: This code demonstrates sharing a mutable integer between multiple closures using Rc and Cell for interior mutability, typical for handling events in GTK applications.  The initial error message highlights the need for interior mutability with `Fn` closures.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/g_object_memory_management.md#_snippet_4\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/g_object_memory_management/2/main.rs:callback}}\n```\n\n----------------------------------------\n\nTITLE: Breaking reference cycles with weak references in GTK\nDESCRIPTION: This demonstrates how to use weak references with GTK to avoid memory cycles. The code uses `glib::clone!` with weak references for the buttons to break the cycle.  This is crucial to prevent memory leaks.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/g_object_memory_management.md#_snippet_7\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/g_object_memory_management/5/main.rs:callback}}\n```\n\n----------------------------------------\n\nTITLE: Create ListBox with Labels - Rust\nDESCRIPTION: This code snippet creates a `ListBox` and populates it with labels displaying integers from 0 to 100. Each label is added as a child to the `ListBox`, creating a vertical list of numbers.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/list_widgets.md#_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nlet list_box = gtk::ListBox::new();\n\nfor i in 0..=100 {\n    // Create a new label with the number `i`.\n    let label = gtk::Label::new(Some(&i.to_string()));\n\n    // Add the label to the list box.\n    list_box.append(&label);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Keyboard Shortcuts for Actions - Rust\nDESCRIPTION: This Rust snippet binds accelerator keys to their respective actions using set_accels_for_action at the application level. It ensures that menu actions are accessible via keyboard, using detailed action names for specificity. Dependencies: gtk4, relevant action group setup, shortcut naming conventions. Inputs: gtk::Application reference. Outputs: keyboard accelerator binding to actions. Limitations: requires the window and action group exist prior to invocation.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_2.md#_snippet_10\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/todo/2/main.rs:main}}\n```\n\n----------------------------------------\n\nTITLE: Embedding Blocking Functions in async Contexts with gio::spawn_blocking and await (GTK, Rust)\nDESCRIPTION: This snippet demonstrates how to run a synchronous, potentially blocking function within an async context on the GTK main loop. By using gio::spawn_blocking and awaiting its result from inside an async block, the code executes the long operation without freezing the UI and later updates the GUI with the result. Dependencies: gtk4, glib, gio. Inputs involve user actions triggering async computation; the output is updated UI when the result is available. Limitation: The blocked function must be Send; GUI updates must remain on the main thread.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/main_event_loop.md#_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n{{#rustdoc_include ../listings/main_event_loop/6/main.rs:callback}}\n```\n\n----------------------------------------\n\nTITLE: Building UI with GTK in Rust\nDESCRIPTION: This snippet builds the UI using GTK, demonstrating the initialization and layout of UI elements such as buttons and labels.  It's a prerequisite for the following examples as it sets up the application's visual components.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/g_object_memory_management.md#_snippet_3\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/g_object_memory_management/1/main.rs:build_ui}}\n```\n\n----------------------------------------\n\nTITLE: Rust Compiler Error: Closure Outlives Borrowed Variable\nDESCRIPTION: This console output displays the Rust compiler error (E0373) resulting from the first code snippet. It explains that the closure provided to `connect_clicked` borrows the local variable `number` but may outlive the function `build_ui` where `number` is defined. This violates the 'static lifetime requirement for GTK signal handlers. The compiler suggests using the `move` keyword to transfer ownership.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/g_object_memory_management.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nerror[E0373]: closure may outlive the current function, but it borrows `number`, which is owned by the current function\n   |\n32 |     button_increase.connect_clicked(|_| number += 1);\n   |                                     ^^^ ------ `number` is borrowed here\n   |                                     |\n   |                                     may outlive borrowed value `number`\n   |\nnote: function requires argument type to outlive `'static`\n   |\n32 |     button_increase.connect_clicked(|_| number += 1);\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nhelp: to force the closure to take ownership of `number` (and any other referenced variables), use the `move` keyword\n   |\n32 |     button_increase.connect_clicked(move |_| number += 1);\n   |                                    ++++\n```\n\n----------------------------------------\n\nTITLE: Calling Action Setup in Widget Construction (Rust)\nDESCRIPTION: Shows the `ObjectImpl` implementation for a custom GTK widget using composite templates. The `constructed` lifecycle method is overridden to call the widget's `setup_actions` function, ensuring actions are initialized after the widget and its UI template are fully built.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/actions.md#_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\n{{#rustdoc_include ../listings/actions/5/window/imp.rs:object_impl}}\n```\n\n----------------------------------------\n\nTITLE: Binding Properties between TaskRow and TaskObject - Bidirectional Binding in Rust\nDESCRIPTION: This Rust snippet in TaskRow::bind method demonstrates setting up property bindings between a TaskRow and TaskObject, storing the resulting glib::Binding objects in a vector for future management. It enables live updates between data model and UI. Inputs are references to widgets and model; outputs are created property bindings. Must be paired with proper unbinding to avoid leaks.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_1.md#_snippet_16\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/todo/1/task_row/mod.rs:bind}}\n```\n\n----------------------------------------\n\nTITLE: Appending buttons to a GTK box in Rust\nDESCRIPTION: This shows how the `gtk_box` maintains strong references to the buttons appended to it, ensuring their lifetime. It is an example of how GTK manages the lifecycle of the GObjects passed to it.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/g_object_memory_management.md#_snippet_8\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/g_object_memory_management/5/main.rs:box_append}}\n```\n\n----------------------------------------\n\nTITLE: Binding Template Callbacks in GTK Subclass (Rust)\nDESCRIPTION: Shows how to bind the template callbacks defined in the UI file to the Rust handler functions using the `bind_template_callbacks` method within the `class_init` function of a GTK subclass implementation. This connects the UI signals to the Rust logic at runtime.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/composite_templates.md#_snippet_15\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/composite_templates/3/window/imp.rs:subclass}}\n```\n\n----------------------------------------\n\nTITLE: Cloning variables with glib::clone! in Rust\nDESCRIPTION: This snippet introduces the `glib::clone!` macro as a cleaner alternative to manually cloning variables for use within closures, making code more readable. It achieves the same goal as the previous example: sharing and modifying a shared state.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/g_object_memory_management.md#_snippet_5\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/g_object_memory_management/3/main.rs:callback}}\n```\n\n----------------------------------------\n\nTITLE: Customizing GTK-RS Constructed Object Method (Rust)\nDESCRIPTION: Shows the implementation of the `constructed` method for the GTK-RS window object. This method is called after the object is constructed. The updated implementation primarily replaces the call to `setup_tasks` with a call to `setup_collections`, indicating a shift in how initial data setup is handled.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_4.md#_snippet_12\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/todo/8/window/imp.rs:object_impl}}\n```\n\n----------------------------------------\n\nTITLE: Styling Button by Name\nDESCRIPTION: This snippet shows how to set the name of a widget using the `set_widget_name` function and then apply CSS rules to that specific widget using its name. It's a method for styling specific widgets. In this case, setting the font color to magenta for the button named 'button-1'.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/css.md#_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nfn main() {\n    let application = gtk::Application::new(Some(\"com.example.css\"), Default::default());\n    application.connect_activate(|app| {\n        let provider = gtk::CssProvider::new();\n        provider.load_from_path(\"style.css\").expect(\"Failed to load CSS\");\n        gtk::StyleContext::add_provider_for_screen(\n            &gdk::Screen::default().expect(\"Could not get default screen.\"),\n            &provider, \n            gtk::STYLE_PROVIDER_PRIORITY_APPLICATION,\n        );\n\n        let window = gtk::ApplicationWindow::new(app);\n        let hbox = gtk::Box::new(gtk::Orientation::Horizontal, 5);\n\n        let button1 = gtk::Button::with_label(\"Button 1\");\n        button1.set_widget_name(\"button-1\");\n        hbox.append(&button1);\n\n        let button2 = gtk::Button::with_label(\"Button 2\");\n        hbox.append(&button2);\n\n        window.set_child(Some(&hbox));\n        window.show();\n    });\n    application.run();\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining GResource XML for Embedded UI Templates - GTK\nDESCRIPTION: This XML snippet lists embedded resource files required by GTK (e.g., multiple .ui XML files) for the app, defining their registration in a gresource bundle. GTK will use this XML to fetch widget templates at runtime. Any XML-defined resources must be registered and included at build time, and paths must match application expectations.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_1.md#_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n{{#rustdoc_include ../listings/todo/1/resources/resources.gresource.xml}}\n```\n\n----------------------------------------\n\nTITLE: Using glib::Value with String and Handling None (Rust)\nDESCRIPTION: This snippet illustrates using `glib::Value` with a `String` (a boxed type). It shows how the `get` method works for boxed types, returning `Err` if the type is incorrect or if the underlying C value was `NULL`, as included from an external file.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/g_object_values.md#_snippet_2\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/g_object_values/1/main.rs:string}}\n```\n\n----------------------------------------\n\nTITLE: Managing Task List Model - Creating and Accessing Tasks in Window Rust Module\nDESCRIPTION: This Rust snippet provides helper and setup methods for managing the task list (tasks model) within the window module, making it easy to retrieve and manipulate task objects. Dependencies are the internal setup of list models and widgets. Methods take/return task-related data/models; limitations may include thread-safety and lifetime management.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_1.md#_snippet_12\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/todo/1/window/mod.rs:tasks}}\n```\n\n----------------------------------------\n\nTITLE: Initializing Filtered Model and Listening for Filter Changes - Rust\nDESCRIPTION: This Rust snippet sets up the filter model, initializing it with the user's saved filter state and connecting a signal to update the filter when the state changes. Key dependencies: gtk4, glib::Settings, ListStore/ListModel, custom filter function. Inputs: current settings. Outputs: changes to the model's filter, which propagates to the UI. This ensures the task list accurately reflects the user's selected filter and responds to persistent state changes.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_2.md#_snippet_9\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/todo/2/window/mod.rs:setup_tasks}}\n```\n\n----------------------------------------\n\nTITLE: Defining Method to Set ListBox Visibility in Rust for Boxed List\nDESCRIPTION: This snippet defines a method to explicitly set the visibility state of the GtkListBox for the boxed list. It is called as part of model change handlers to ensure correct display semantics for the task list. Inputs are visibility booleans; output is an updated visible property for the ListBox widget. Dependencies are gtk::ListBox and the Rust/gtk-rs widget property APIs.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_3.md#_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\n{{#rustdoc_include ../listings/todo/6/window/mod.rs:set_task_list_visible}}\n```\n\n----------------------------------------\n\nTITLE: Styling Button with Custom Style Class\nDESCRIPTION: This snippet demonstrates how to add a custom style class (`button-1`) to a button and apply CSS rules to it. This allows for more fine-grained control over the styling of individual widgets. It targets the `button-1` class.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/css.md#_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nfn main() {\n    let application = gtk::Application::new(Some(\"com.example.css\"), Default::default());\n    application.connect_activate(|app| {\n        let provider = gtk::CssProvider::new();\n        provider.load_from_path(\"style.css\").expect(\"Failed to load CSS\");\n        gtk::StyleContext::add_provider_for_screen(\n            &gdk::Screen::default().expect(\"Could not get default screen.\"),\n            &provider, \n            gtk::STYLE_PROVIDER_PRIORITY_APPLICATION,\n        );\n\n        let window = gtk::ApplicationWindow::new(app);\n        let hbox = gtk::Box::new(gtk::Orientation::Horizontal, 5);\n\n        let button1 = gtk::Button::with_label(\"Button 1\");\n        button1.add_css_class(\"button-1\");\n        hbox.append(&button1);\n\n        let button2 = gtk::Button::with_label(\"Button 2\");\n        hbox.append(&button2);\n\n        window.set_child(Some(&hbox));\n        window.show();\n    });\n    application.run();\n}\n\n```\n\n----------------------------------------\n\nTITLE: Assigning Accelerators to Custom Group Actions in Rust\nDESCRIPTION: Shows how to assign a keyboard accelerator to an action that belongs to a custom action group (e.g., \"custom-group.close\") using `set_accels_for_action`. This snippet focuses specifically on the accelerator assignment part.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/actions.md#_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n{{#rustdoc_include ../listings/actions/2/main.rs:accel}}\n```\n\n----------------------------------------\n\nTITLE: Removing Completed Tasks from Task List - Rust\nDESCRIPTION: This Rust implementation iterates through the gio::ListStore of TaskObjects, removing all items marked as completed. Used as the handler for the 'remove-done-tasks' action. Dependencies: gio, gtk4, TaskObject structure with is_completed method. Inputs: current state of the task list. Outputs: mutates the model in place to remove completed tasks. This mutator function is designed to be triggered by user actions from the UI.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_2.md#_snippet_7\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/todo/2/window/mod.rs:remove_done_tasks}}\n```\n\n----------------------------------------\n\nTITLE: Creating Stateful Actions with Parameters in Rust\nDESCRIPTION: Example within `build_ui` of creating a stateful `gio::ActionEntry` (\"win.count\") which accepts a parameter. The action maintains an internal count, updates it on activation using the provided integer parameter, modifies a `Label` to reflect the state, and uses `change_state`.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/actions.md#_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n{{#rustdoc_include ../listings/actions/3/main.rs:build_ui}}\n```\n\n----------------------------------------\n\nTITLE: Implementing Filtering for GTK ListModel in Rust\nDESCRIPTION: Shows how to filter a GTK list model using FilterListModel and CustomFilter to only show even numbers. The filter uses a closure to determine which items should be displayed in the list.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/list_widgets.md#_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\n// Create a custom filter to only show even numbers\nlet even_filter = gtk::CustomFilter::new(|obj| {\n    let number_object = obj\n        .downcast_ref::<NumberObject>()\n        .expect(\"The object must be of type `NumberObject`.\");\n    number_object.number() % 2 == 0\n});\n\n// Create a model with filter\nlet filter_model = gtk::FilterListModel::new(Some(&model), Some(&even_filter));\n```\n\n----------------------------------------\n\nTITLE: Loading CSS Stylesheet from Resource Using load_from_resource in Rust\nDESCRIPTION: This Rust code implements the load_css() function for a GTK application, loading a CSS provider from a resource URI via load_from_resource. Dependencies include gtk4, glib, and knowledge of the resource URI scheme. The functionâ€™s input is the path to the in-bundle CSS file; it alters the applicationâ€™s style context globally. If the resource path is invalid or not added, loading will fail.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/css.md#_snippet_16\n\nLANGUAGE: rust\nCODE:\n```\n{{#rustdoc_include ../listings/todo/3/main.rs:load_css}}\n```\n\n----------------------------------------\n\nTITLE: Adding Sorting to a GTK ListModel in Rust\nDESCRIPTION: Demonstrates implementing custom sorting for a GTK list model using SortListModel and CustomSorter. This example sorts the filtered model in reverse order based on number values.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/list_widgets.md#_snippet_14\n\nLANGUAGE: rust\nCODE:\n```\n// Sort the model in reverse order\nlet reverse_sorter = gtk::CustomSorter::new(|obj1, obj2| {\n    let number_object1 = obj1\n        .downcast_ref::<NumberObject>()\n        .expect(\"The object must be of type `NumberObject`.\");\n    let number_object2 = obj2\n        .downcast_ref::<NumberObject>()\n        .expect(\"The object must be of type `NumberObject`.\");\n    number_object2\n        .number()\n        .cmp(&number_object1.number())\n        .into()\n});\n\n// Create a model with filter and sorter\nlet sort_model = gtk::SortListModel::new(Some(&filter_model), Some(&reverse_sorter));\n```\n\n----------------------------------------\n\nTITLE: Controlling GTK-RS Task List Visibility (Rust)\nDESCRIPTION: Provides the `set_task_list_visible` method implementation. This function ensures that the GTK-RS `tasks_list` widget is only displayed in the UI when there is at least one task present in the current collection's task model, preventing an empty list box from showing.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_4.md#_snippet_17\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/todo/8/window/mod.rs:set_task_list_visible}}\n```\n\n----------------------------------------\n\nTITLE: Spawning Tokio Tasks from GTK4 Callback and Using Channel for Results in Rust\nDESCRIPTION: This Rust code snippet shows spawning an asynchronous HTTP request using reqwest in a GTK4 callback, with Tokio runtime managed by OnceLock. The button click triggers an async block, which performs a reqwest::get call. The response is sent back to the main thread via async_channel, where the main loop prints the HTTP response status. Dependencies: gtk4, reqwest, tokio, async_channel, glib. Input: user button click; Output: HTTP status printed to console. Ensure dependencies are properly initialized and runtime entrance is handled via OnceLock.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/main_event_loop.md#_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\n{{#rustdoc_include ../listings/main_event_loop/9/main.rs:callback}}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Action Groups in Rust\nDESCRIPTION: Illustrates creating a `SimpleActionGroup`, adding an action entry (\"close\") to it, and attaching the group named \"custom-group\" to a widget (window) using `insert_action_group` within a `build_ui` function. This approach requires cloning necessary context (like the `window`) into the action's callback closure.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/actions.md#_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n{{#rustdoc_include ../listings/actions/2/main.rs:build_ui}}\n```\n\n----------------------------------------\n\nTITLE: Selecting GTK-RS Collection ListBox Row (Rust)\nDESCRIPTION: Implements the `select_collection_row` method. This helper function ensures that the specific `gtk::ListBoxRow` corresponding to the currently active or selected collection is highlighted in the `collections_list` widget in the user interface.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_4.md#_snippet_18\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/todo/8/window/mod.rs:select_collection_row}}\n```\n\n----------------------------------------\n\nTITLE: Setting Rust Toolchain to MSVC\nDESCRIPTION: Configures Rustup to use the stable MSVC toolchain. This command does not install the MSVC compiler itself, which must be installed separately (e.g., via Visual Studio). This is a prerequisite for building Rust projects that link against libraries compiled with MSVC.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/installation_windows.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nrustup default stable-msvc\n```\n\n----------------------------------------\n\nTITLE: Connecting GTK Signal Callbacks for Template Children in Constructed Phase (Rust)\nDESCRIPTION: This Rust snippet connects Rust callbacks to GTK signals (such as 'clicked') for template children using the stored TemplateChild reference within the constructed function of a widget's implementation. Required dependencies are gtk and glib Rust crates. Input is the initialized struct with accessible template children; output is a connected event for GUI interaction. Key parameters are signal names and handler closures. Limitation: Callback setup must occur after widget instance is constructed.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/composite_templates.md#_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\n{{#rustdoc_include ../listings/composite_templates/1/window/imp.rs:object_impl}}\n```\n\n----------------------------------------\n\nTITLE: Converting Vec to/from glib::Variant (Rust)\nDESCRIPTION: This snippet demonstrates how to convert a Rust container type, specifically a `Vec` of supported elements (like `i32`), to a `glib::Variant` and back. `Variant` can represent complex types, including containers, which is useful for serialization, as included from an external file.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/g_object_values.md#_snippet_5\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/g_object_values/2/main.rs:vec}}\n```\n\n----------------------------------------\n\nTITLE: Defining Actionable Widgets in GtkBuilder UI XML\nDESCRIPTION: Example of a GtkBuilder UI definition (`.ui` file) where an `Actionable` widget (a `Button`) is configured to trigger a specific action. The `action-name` (\"win.count\") and `action-target` (integer 1) properties are set within the XML template.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/actions.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n{{#rustdoc_include ../listings/actions/5/resources/window.ui}}\n```\n\n----------------------------------------\n\nTITLE: Using glib::Value with i32 (Rust)\nDESCRIPTION: This snippet demonstrates how to create a `glib::Value` from an `i32` and how to retrieve the `i32` value from it using the `get` method. This is a basic example showing the simple usage pattern for primitive types, as included from an external file.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/g_object_values.md#_snippet_1\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/g_object_values/1/main.rs:i32}}\n```\n\n----------------------------------------\n\nTITLE: Referencing Settings Object in Window Implementation - Rust\nDESCRIPTION: This Rust snippet adds a settings reference (typically via GSettings or glib::Settings) to the private implementation struct of the To-Do window. It's required for persisting and retrieving UI state, such as the task filter. This struct-level field is necessary for other functions to access and manipulate persistent settings. Dependencies: glib, gtk4, and the application's GSettings schema. Used implicitly by filtering logic and UI action handlers.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_2.md#_snippet_2\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/todo/2/window/imp.rs:struct_default}}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom GObject Signals in ObjectImpl (Rust)\nDESCRIPTION: Implements the `signals` method for a custom GObject's `ObjectImpl` in Rust to define custom signals. It uses `std::sync::OnceLock` for lazy static initialization of the signal definitions. Defines a signal named \"max-number-reached\" which carries an `i32` payload when emitted. Requires `glib::subclass::prelude` and `std::sync::OnceLock`.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/g_object_signals.md#_snippet_2\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/g_object_signals/2/custom_button/imp.rs:object_impl}}\n```\n\n----------------------------------------\n\nTITLE: CSS rule for custom style class\nDESCRIPTION: This CSS snippet is designed to style a button, which has the custom style class `button-1`. This demonstrates setting the font color of a button to magenta based on its style class. The example relies on the Rust code providing the button with the relevant style class.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/css.md#_snippet_4\n\nLANGUAGE: css\nCODE:\n```\nbutton.button-1 {\n  color: magenta;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Installing 'Remove Done Tasks' Custom Action - Rust\nDESCRIPTION: This Rust snippet shows the usage of install_action within a widget subclass to register a new action 'remove-done-tasks' that removes all completed tasks. It highlights the concise API of install_action and notes its constraints: it only works for stateless actions and requires subclassing. Dependencies: gtk4 Rust bindings, window or widget subclass, callback accepting activation context. Inputs: action activation (from menu/menu button). Outputs: calls to removal logic. Limitations: cannot support stateful parameters or actions; for such use setup via add_action is needed.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_2.md#_snippet_6\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/todo/2/window/imp.rs:object_subclass}}\n```\n\n----------------------------------------\n\nTITLE: Compiling and Installing GSettings Schema in Bash\nDESCRIPTION: This Bash snippet copies the schema XML file into the required GLib schemas directory and compiles it using glib-compile-schemas, preparing the settings for runtime access. Prerequisites: glib-compile-schemas must be installed, and paths must be appropriate for the environment (Linux or macOS). Inputs: path to schema file; output: compiled schema available to the application.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/settings.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p $HOME/.local/share/glib-2.0/schemas\ncp org.gtk_rs.Settings1.gschema.xml $HOME/.local/share/glib-2.0/schemas/\nglib-compile-schemas $HOME/.local/share/glib-2.0/schemas/\n\n```\n\n----------------------------------------\n\nTITLE: Adding Styles to Buttons via Interface Builder\nDESCRIPTION: This snippet shows how to define a user interface using XML and includes the styles directly within the UI definition. It's an alternative method for applying CSS classes. This defines the interface by adding a style element inside the UI definition.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/css.md#_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<interface>\n  <requires lib=\"gtk\" version=\"4.0\"/>\n  <object class=\"GtkApplicationWindow\" id=\"window\">\n    <property name=\"default-width\">600</property>\n    <property name=\"default-height\">400</property>\n    <child>\n      <object class=\"GtkBox\">\n        <property name=\"orientation\">horizontal</property>\n        <child>\n          <object class=\"GtkButton\">\n            <property name=\"label\">Destructive</property>\n            <style>\n              <class name=\"destructive-action\"/>\n            </style>\n          </object>\n        </child>\n        <child>\n          <object class=\"GtkButton\">\n            <property name=\"label\">Suggested</property>\n            <style>\n              <class name=\"suggested-action\"/>\n            </style>\n          </object>\n        </child>\n      </object>\n    </child>\n  </object>\n</interface>\n\n```\n\n----------------------------------------\n\nTITLE: Using glib::timeout_future_seconds for Single-Threaded Async Operations in GTK (Rust)\nDESCRIPTION: This snippet presents a single-threaded async alternative, utilizing glib::timeout_future_seconds to simulate an asynchronous wait without channels or threads. The button's sensitivity is toggled within an async block spawned on the main loop, preserving UI responsiveness. Prerequisites: gtk4, glib. It maintains the same UI state control logic as previous examples but does not require multi-threading or channels. Limitations: Only suitable for operations that are natively async or can be awaited non-blockingly.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/main_event_loop.md#_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n{{#rustdoc_include ../listings/main_event_loop/4/main.rs:callback}}\n```\n\n----------------------------------------\n\nTITLE: Install GTK4 Development Tools on Arch\nDESCRIPTION: This command installs the GTK4 libraries and base development tools on Arch Linux and derivative distributions using the pacman package manager. These packages are essential for compiling GTK4 programs.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/installation_linux.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nsudo pacman -S gtk4 base-devel\n```\n\n----------------------------------------\n\nTITLE: Attempting Fix with `move` Closure (Still Fails) (Rust)\nDESCRIPTION: This Rust code snippet shows an attempt to fix the lifetime error from the previous example by adding the `move` keyword before the closure passed to `connect_clicked`. This moves ownership of the `number` variable into the closure, satisfying the 'static lifetime requirement. However, the surrounding context and compile flags indicate this code still fails to compile, likely due to attempting to modify the now-moved, immutable `number` variable inside the closure.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/g_object_memory_management.md#_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n#use gtk::prelude::*;\n#use gtk::{self, glib, Application, ApplicationWindow, Button};\n#\n#const APP_ID: &str = \"org.gtk_rs.GObjectMemoryManagement0\";\n#\n#fn main() -> glib::ExitCode {\n#    // Create a new application\n#    let app = Application::builder().application_id(APP_ID).build();\n#\n#    // Connect to \"activate\" signal of `app`\n#    app.connect_activate(build_ui);\n#\n#    // Run the application\n#    app.run()\n#}\n#\n#fn build_ui(application: &Application) {\n#    // Create two buttons\n#    let button_increase = Button::builder()\n#        .label(\"Increase\")\n#        .margin_top(12)\n#        .margin_bottom(12)\n#        .margin_start(12)\n#        .margin_end(12)\n#        .build();\n#\n    // DOES NOT COMPILE!\n    // A mutable integer\n    let mut number = 0;\n\n    // Connect callbacks\n    // When a button is clicked, `number` should be changed\n    button_increase.connect_clicked(move |_| number += 1);\n#\n#    // Create a window\n#    let window = ApplicationWindow::builder()\n#        .application(application)\n#        .title(\"My GTK App\")\n#        .child(&button_increase)\n#        .build();\n#\n#    // Present the window\n#    window.present();\n#}\n```\n\n----------------------------------------\n\nTITLE: Creating a Utility Function for Data File Path in Rust\nDESCRIPTION: Implements a utility function that returns the file path for storing the application data. It uses glib::user_config_dir to get the user's config directory and creates a subdirectory for the app.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_2.md#_snippet_15\n\nLANGUAGE: rust\nCODE:\n```\nfn data_path() -> std::path::PathBuf {\n    let mut path = glib::user_config_dir();\n    path.push(\"gtk-rs-todo\");\n    std::fs::create_dir_all(&path).expect(\"Could not create directory.\");\n    path.push(\"data.json\");\n    path\n}\n```\n\n----------------------------------------\n\nTITLE: Referring to a Custom Widget in TemplateChild for GTK Template Bindings (Rust)\nDESCRIPTION: This Rust snippet changes the type of a template child field to the custom button struct, ensuring type safety and correct referencing when using a custom widget within a GTK composite template. This requires the custom widget to be defined and exposed in the project. Dependencies are the custom widget module and gtk4-macros. The parameter is the field type. The input is the compiled template resource; output is a strongly typed struct field. Limitation: Must match widget class and module path.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/composite_templates.md#_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\n{{#rustdoc_include ../listings/composite_templates/2/window/imp.rs:object}}\n```\n\n----------------------------------------\n\nTITLE: Installing and Compiling GSettings Schema in Windows PowerShell\nDESCRIPTION: This PowerShell snippet performs schema installation and compilation for Windows users. It copies the schema XML to the correct directory and invokes glib-compile-schemas to make it available for the GTK application. Requires GLib installed on Windows. Inputs: XML schema file path; output: compiled settings schema in the GLib schemas directory.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/settings.md#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nmkdir C:/ProgramData/glib-2.0/schemas/\ncp org.gtk_rs.Settings1.gschema.xml C:/ProgramData/glib-2.0/schemas/\nglib-compile-schemas C:/ProgramData/glib-2.0/schemas/\n\n```\n\n----------------------------------------\n\nTITLE: Adding CSS File Entry to GResource Manifest for GTK Apps in XML (Diff Format)\nDESCRIPTION: This XML diff shows how to amend a GResource XML manifest to include a CSS file ('style.css') in the applicationâ€™s resource bundle for GTK. This enables the stylesheet to be loaded at runtime with load_from_resource. The patch must be applied to resources.gresource.xml before compiling resources. Inputs are the resource XML and filename; outputs are an embedded CSS resource.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/css.md#_snippet_14\n\nLANGUAGE: diff\nCODE:\n```\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n <gresources>\n   <gresource prefix=\"/org/gtk_rs/Todo3/\">\n     <file compressed=\"true\" preprocess=\"xml-stripblanks\" alias=\"gtk/help-overlay.ui\">shortcuts.ui</file>\n     <file compressed=\"true\" preprocess=\"xml-stripblanks\">task_row.ui</file>\n     <file compressed=\"true\" preprocess=\"xml-stripblanks\">window.ui</file>\n+    <file compressed=\"true\">style.css</file>\n   </gresource>\n </gresources>\n```\n\n----------------------------------------\n\nTITLE: Rust Trait Implementation for AdwApplicationWindow\nDESCRIPTION: Defines the necessary trait implementation for the custom application window class, which is crucial for integrating with the GTK and Libadwaita object hierarchy and behavior.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_4.md#_snippet_4\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/todo/7/window/imp.rs:adw_application_window_impl}}\n```\n\n----------------------------------------\n\nTITLE: Bind Properties in Factory Bind - Rust\nDESCRIPTION: This snippet shows how to bind the \"number\" property of the `IntegerObject` to the text of the `Label` in the \"bind\" step of the `SignalListItemFactory`. This attempts to update the label's text whenever the number changes, but it can lead to issues due to widget recycling.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/list_widgets.md#_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\nfactory.connect_bind(move |_factory, list_item| {\n    // Get integer object from list item\n    let integer_object = list_item\n        .item()\n        .unwrap()\n        .downcast::<super::IntegerObject>()\n        .unwrap();\n\n    // Get label from list item\n    let label = list_item.child().unwrap().downcast::<gtk::Label>().unwrap();\n\n    // Set the label to the number in integer object\n    label.set_label(&integer_object.number().to_string());\n\n    integer_object.connect_closure(\"notify::number\", false, glib::Closure::new_local(move |obj: super::IntegerObject, _number: &glib::Value| {\n        label.set_label(&obj.number().to_string());\n    }));\n});\n```\n\n----------------------------------------\n\nTITLE: Styling Arrow of MenuButton\nDESCRIPTION: This snippet demonstrates styling a specific part of a GTK widget (MenuButton) by targeting a CSS node. The example focuses on changing the color of the arrow within the menu button using a specific CSS rule. The main focus is on CSS nodes to modify the visual appearance.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/css.md#_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<interface>\n  <requires lib=\"gtk\" version=\"4.0\"/>\n  <object class=\"GtkApplicationWindow\" id=\"window\">\n    <property name=\"default-width\">600</property>\n    <property name=\"default-height\">400</property>\n    <child>\n      <object class=\"GtkMenuButton\">\n        <property name=\"label\">Menu</property>\n      </object>\n    </child>\n  </object>\n</interface>\n\n```\n\n----------------------------------------\n\nTITLE: Implementing RotationBin Widget Construction in Rust for GTK4\nDESCRIPTION: This code snippet shows how to create a new RotationBin widget in Rust by defining its struct, initializing default properties, and setting up necessary GTK4 widget traits. It depends on gtk4 crate and implements core lifecycle methods for a custom widget.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/examples/rotation_bin/README.md#_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nimpl RotationBin {\n    pub fn new() -> Self {\n        // Create a new instance of RotationBin with default properties\n        Self {\n            // Initialize widget-specific fields\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Connecting Button Click Signal using Convenience Method (Rust)\nDESCRIPTION: Demonstrates connecting a closure to the 'clicked' signal of a GTK Button using the specific `connect_clicked` convenience method in Rust. The closure is executed when the button is clicked. Assumes a Button instance exists. Requires the `gtk4` crate and its prelude.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/g_object_signals.md#_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/hello_world/3/main.rs:callback}}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom CSS for GTK Widgets and Using Exported Colors in CSS\nDESCRIPTION: This CSS snippet defines style rules for GTK widgets, referencing the custom CSS node 'task-row' and utilizing GTK's exported color variables (e.g., @success_color) to style the background. The stylesheet must be loaded into the application as a resource to affect widget appearance. The key input is the CSS rule matching custom widget nodes; the output is the styled GTK widget at runtime. Limitations may include availability of color identifiers between GTK versions.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/css.md#_snippet_13\n\nLANGUAGE: css\nCODE:\n```\n{{#rustdoc_include ../listings/todo/3/resources/style.css}}\n```\n\n----------------------------------------\n\nTITLE: Menu Definition in XML for GTK4 Interface Builder\nDESCRIPTION: Defines a GTK menu structure in XML with different types of actions: a window close action, a toggle button frame action, and orientation selection actions with targets. The menu is connected to a MenuButton through the menu-model property.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/actions.md#_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<interface>\n  <menu id=\"main-menu\">\n    <item>\n      <attribute name=\"label\" translatable=\"yes\">_Close window</attribute>\n      <attribute name=\"action\">window.close</attribute>\n    </item>\n    <item>\n      <attribute name=\"label\" translatable=\"yes\">_Toggle button frame</attribute>\n      <attribute name=\"action\">win.button-frame</attribute>\n    </item>\n    <section>\n      <attribute name=\"label\" translatable=\"yes\">Orientation</attribute>\n      <item>\n        <attribute name=\"label\" translatable=\"yes\">_Horizontal</attribute>\n        <attribute name=\"action\">win.orientation</attribute>\n        <attribute name=\"target\">Horizontal</attribute>\n      </item>\n      <item>\n        <attribute name=\"label\" translatable=\"yes\">_Vertical</attribute>\n        <attribute name=\"action\">win.orientation</attribute>\n        <attribute name=\"target\">Vertical</attribute>\n      </item>\n    </section>\n  </menu>\n  <template class=\"MyGtkAppWindow\" parent=\"GtkApplicationWindow\">\n    <property name=\"title\">My GTK App</property>\n    <property name=\"width-request\">360</property>\n    <child type=\"titlebar\">\n      <object class=\"GtkHeaderBar\">\n        <child type =\"end\">\n          <object class=\"GtkMenuButton\">\n            <property name=\"icon-name\">open-menu-symbolic</property>\n            <property name=\"menu-model\">main-menu</property>\n          </object>\n        </child>\n      </object>\n    </child>\n    <child>\n      <object class=\"GtkBox\" id=\"gtk_box\">\n        <property name=\"orientation\">vertical</property>\n      </object>\n    </child>\n  </template>\n</interface>\n```\n\n----------------------------------------\n\nTITLE: Synchronizing GTK Switch State with GSettings in Rust\nDESCRIPTION: This Rust event connection ensures that whenever the GTK Switch is toggled, the new state is written back to the 'is-switch-enabled' key in gio::Settings. Dependencies: gtk4, gio. Inputs include the Switch widget and user events; outputs update the stored setting, ensuring UI changes persist between sessions.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/settings.md#_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n{{#rustdoc_include ../listings/settings/1/main.rs:connect_state_set}}\n```\n\n----------------------------------------\n\nTITLE: Exposing the Custom GTK Button Struct in Rust for Public Use\nDESCRIPTION: This Rust snippet exposes the public struct for the custom GTK button defined in mod.rs, enabling its use elsewhere in the application and in UI templates. Dependencies include Rust's visibility rules and the previous definition in imp.rs. There are no configurable parameters for this stub. Inputs: public struct from implementation; output: type available for reference in code and in XML templates. Must synchronize names and module layout. Limitation: Only useful in combination with actual custom implementation.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/composite_templates.md#_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\n{{#rustdoc_include ../listings/composite_templates/2/custom_button/mod.rs:mod}}\n```\n\n----------------------------------------\n\nTITLE: Settings Helper Methods for GTK4-rs Window\nDESCRIPTION: Implements helper methods to initialize and access GSettings in a GTK4-rs Window, including type-safe getters and setters for specific settings.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/actions.md#_snippet_14\n\nLANGUAGE: rust\nCODE:\n```\nimpl Window {\n    fn settings(&self) -> &gio::Settings {\n        self.imp()\n            .settings\n            .get_or_init(|| gio::Settings::new(\"org.gtk_rs.Actions7\"))\n    }\n\n    fn setup_settings(&self) {\n        let settings = self.settings();\n        self.imp().settings.set(settings.clone()).unwrap();\n    }\n\n    fn button_frame(&self) -> bool {\n        self.settings().boolean(\"button-frame\")\n    }\n\n    fn set_button_frame(&self, value: bool) {\n        self.settings()\n            .set_boolean(\"button-frame\", value)\n            .expect(\"Could not set button-frame\");\n    }\n\n    fn orientation(&self) -> String {\n        self.settings().string(\"orientation\")\n    }\n\n    fn set_orientation(&self, value: &str) {\n        self.settings()\n            .set_string(\"orientation\", value)\n            .expect(\"Could not set orientation\");\n    }\n    // rest of Window implementation...\n```\n\n----------------------------------------\n\nTITLE: Loading Custom GTK CSS Resource on Startup in Rust\nDESCRIPTION: This Rust snippet invokes load_css() within the connect_startup callback of a GTK application. This ensures the application-specific CSS resource is loaded at launch. Dependencies include gtk4, resource initialization, and a defined load_css function. The main input is the application startup event; the output is an updated widget style after CSS loading.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/css.md#_snippet_15\n\nLANGUAGE: rust\nCODE:\n```\n{{#rustdoc_include ../listings/todo/3/main.rs:connect_startup}}\n```\n\n----------------------------------------\n\nTITLE: Creating and Binding Two Custom GTK4 Buttons with Property Transformations in Rust\nDESCRIPTION: Shows usage of two `CustomButton` instances with their `number` properties bound such that one button's number is always one greater than the other's. This uses GTK binding transformations (`transform_to` and `transform_from`) to convert between property types and values. The binding ensures reactive synchronization of both numeric and label properties upon interaction.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/g_object_properties.md#_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n{{#rustdoc_include ../listings/g_object_properties/3/main.rs:buttons}}\n```\n\nLANGUAGE: rust\nCODE:\n```\n{{#rustdoc_include ../listings/g_object_properties/3/main.rs:bind_numbers}}\n```\n\n----------------------------------------\n\nTITLE: Spawning reqwest Tasks in GTK4 Callback with Static Tokio Runtime in Rust\nDESCRIPTION: This Rust snippet illustrates how to set up async HTTP requests from a GTK4 callback using the reqwest crate. It attempts to spawn a reqwest::get call in a static RUNTIME initialized by tokio::runtime::Runtime::new, but fails to compile due to Rust's restrictions on non-const fn in statics. Intended input: button click; output: HTTP response status (to be sent via channel). Dependencies: gtk4, reqwest@0.12, tokio@1 (rt-multi-thread), async_channel, glib. This approach is not valid; see next snippet for correct initialization.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/main_event_loop.md#_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\n#use std::sync::OnceLock;\n#\n#use glib::clone;\n#use gtk::glib;\n#use gtk::prelude::*;\n#use gtk::{Application, ApplicationWindow, Button};\n#use tokio::runtime::Runtime;\n#\n#const APP_ID: &str = \"org.gtk_rs.MainEventLoop0\";\n#\n// DOES NOT COMPILE!\nstatic RUNTIME: Runtime =\n    Runtime::new().expect(\"Setting up tokio runtime needs to succeed.\");\n#\n#fn main() -> glib::ExitCode {\n#    // Create a new application\n#    let app = Application::builder().application_id(APP_ID).build();\n#\n#    // Connect to \"activate\" signal of `app`\n#    app.connect_activate(build_ui);\n#\n#    // Run the application\n#    app.run()\n#}\n#\n#fn build_ui(app: &Application) {\n#    // Create a button\n#    let button = Button::builder()\n#        .label(\"Press me!\")\n#        .margin_top(12)\n#        .margin_bottom(12)\n#        .margin_start(12)\n#        .margin_end(12)\n#        .build();\n#\n#    // ANCHOR: callback\n#    let (sender, receiver) = async_channel::bounded(1);\n#    // Connect to \"clicked\" signal of `button`\n#    button.connect_clicked(move |_| {\n#        RUNTIME.spawn(clone!(#[strong] sender, async move {\n#            let response = reqwest::get(\"https://www.gtk-rs.org\").await;\n#            sender.send(response).await.expect(\"The channel needs to be open.\");\n#        }));\n#    });\n#\n#    // The main loop executes the asynchronous block\n#    glib::spawn_future_local(async move {\n#        while let Ok(response) = receiver.recv().await {\n#            if let Ok(response) = response {\n#                println!(\"Status: {}\", response.status());\n#            } else {\n#                println!(\"Could not make a `GET` request.\");\n#            }\n#        }\n#    });\n#    // ANCHOR_END: callback\n#\n#    // Create a window\n#    let window = ApplicationWindow::builder()\n#        .application(app)\n#        .title(\"My GTK App\")\n#        .child(&button)\n#        .build();\n#\n#    // Present window\n#    window.present();\n#}\n```\n\n----------------------------------------\n\nTITLE: Applying Hover Effects to Button\nDESCRIPTION: This snippet uses a pseudo-class (hover) to change the button's background color to yellow and the font color to magenta when the mouse hovers over the button with the name `button-1`. It's used in conjunction with an XML UI description and a simple CSS file.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/css.md#_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<interface>\n  <requires lib=\"gtk\" version=\"4.0\"/>\n  <object class=\"GtkApplicationWindow\" id=\"window\">\n    <property name=\"default-width\">600</property>\n    <property name=\"default-height\">400</property>\n    <child>\n      <object class=\"GtkButton\" id=\"button-1\">\n        <property name=\"label\">Hover me!</property>\n      </object>\n    </child>\n  </object>\n</interface>\n\n```\n\n----------------------------------------\n\nTITLE: Connecting Buttons to Actions via Actionable Builder in Rust\nDESCRIPTION: Demonstrates using the `ButtonBuilder` to directly link a `Button` to a GTK action by setting the `action_name` (\"win.count\") and `action_target` (Variant containing 1) properties, leveraging the `Actionable` interface. This simplifies connecting button clicks to actions.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/actions.md#_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n{{#rustdoc_include ../listings/actions/4/main.rs:button_builder}}\n```\n\n----------------------------------------\n\nTITLE: Implementing Settings Struct in GTK4-rs Window Implementation\nDESCRIPTION: Adds a GSettings instance to the Window implementation structure using OnceCell for lazy initialization since GSettings doesn't implement Default.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/actions.md#_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\n// The state of the window\n#[derive(Default)]\npub struct Window {\n    pub button: template_child::TemplateChild<gtk::Button>,\n    pub gtk_box: template_child::TemplateChild<gtk::Box>,\n    pub settings: OnceCell<gio::Settings>,\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Handling Button Click in GTK4-rs (Rust)\nDESCRIPTION: This Rust code snippet demonstrates how to create a GTK Button and connect a callback function to its 'clicked' signal using gtk-rs. It assumes the necessary imports and context from the 'Hello World' example referenced. The specific implementation details for creating the button and connecting the signal would be found in the referenced file.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/widgets.md#_snippet_1\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/hello_world/3/main.rs:button}}\n```\n\n----------------------------------------\n\nTITLE: Installing Meson and Ninja via Pip\nDESCRIPTION: Uses the Python package installer, pip, to install the Meson build system and the Ninja build tool. These are commonly used for compiling projects like GTK and its dependencies. Requires Python and pip to be installed and in the system's PATH.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/installation_windows.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\npip install meson ninja\n```\n\n----------------------------------------\n\nTITLE: Connect to ListView Activate Signal - Rust\nDESCRIPTION: This snippet connects to the \"activate\" signal of the `ListView`. When an item is activated (e.g., double-clicked), the corresponding `IntegerObject`'s number is increased by one using the `increase_number` method.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/list_widgets.md#_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\nlist_view.connect_activate(move |_list_view, list_item| {\n    // Get integer object from list item\n    let integer_object = list_item\n        .item()\n        .unwrap()\n        .downcast::<super::IntegerObject>()\n        .unwrap();\n\n    // Increase number\n    integer_object.increase_number();\n});\n```\n\n----------------------------------------\n\nTITLE: GSettings Schema Definition for Persisting Application State in GTK4-rs\nDESCRIPTION: Defines a GSettings schema with settings for button frame state and orientation, including default values and valid options for enumerations.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/actions.md#_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<schemalist>\n  <schema id=\"org.gtk_rs.Actions7\" path=\"/org/gtk_rs/Actions7/\">\n    <key name=\"button-frame\" type=\"b\">\n      <default>true</default>\n      <summary>Button Frame</summary>\n      <description>Whether the button has a frame</description>\n    </key>\n    <key name=\"orientation\" type=\"s\">\n      <choices>\n        <choice value=\"Horizontal\"/>\n        <choice value=\"Vertical\"/>\n      </choices>\n      <default>\"Vertical\"</default>\n      <summary>Orientation</summary>\n      <description>Orientation of the GtkBox</description>\n    </key>\n  </schema>\n</schemalist>\n```\n\n----------------------------------------\n\nTITLE: XML UI for Tasks View with HeaderBar, Entry, and ListBox\nDESCRIPTION: Defines the task view page with a header bar, a text entry for new tasks, and a list box to display tasks. Includes tooltip and margin styling, with the list initially hidden.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_4.md#_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<object class=\"AdwNavigationPage\">\n  <property name=\"title\" translatable=\"yes\">Tasks</property>\n  <property name=\"child\">\n    <object class=\"AdwToolbarView\">\n      <child type=\"top\">\n        <object class=\"AdwHeaderBar\">\n          <property name=\"show-title\">False</property>\n          <child type=\"end\">\n            <object class=\"GtkMenuButton\">\n              <property name=\"icon-name\">open-menu-symbolic</property>\n              <property name=\"menu-model\">main-menu</property>\n              <property name=\"tooltip-text\" translatable=\"yes\">Main Menu</property>\n            </object>\n          </child>\n        </object>\n      </child>\n      <property name=\"content\">\n        <object class=\"GtkScrolledWindow\">\n          <property name=\"child\">\n            <object class=\"AdwClamp\">\n              <property name=\"maximum-size\">400</property>\n              <property name=\"tightening-threshold\">300</property>\n              <property name=\"child\">\n                <object class=\"GtkBox\">\n                  <property name=\"orientation\">vertical</property>\n                  <property name=\"margin-start\">12</property>\n                  <property name=\"margin-end\">12</property>\n                  <property name=\"spacing\">12</property>\n                  <child>\n                    <object class=\"GtkEntry\" id=\"entry\">\n                      <property name=\"placeholder-text\" translatable=\"yes\">Enter a Taskâ€¦</property>\n                      <property name=\"secondary-icon-name\">list-add-symbolic</property>\n                    </object>\n                  </child>\n                  <child>\n                    <object class=\"GtkListBox\" id=\"tasks_list\">\n                      <property name=\"visible\">False</property>\n                      <property name=\"selection-mode\">none</property>\n                      <style>\n                        <class name=\"boxed-list\" />\n                      </style>\n                    </object>\n                  </child>\n                </object>\n              </property>\n            </object>\n          </property>\n        </object>\n      </property>\n    </object>\n  </property>\n</object>\n```\n\n----------------------------------------\n\nTITLE: Applying Style Classes to a GtkListView in UI Definition (Diff Format)\nDESCRIPTION: This diff snippet illustrates updating a GTK UI (.ui, xml) definition to add 'frame' and 'separators' style classes to a GtkListView widget for enhanced visual separation. The change is made by appending <style><class name=\"frame\"/><class name=\"separators\"/></style> within the widgetâ€™s XML element. The UI file is processed by GTK builder or glade tools; limitations include requiring GTK4 or compatible UI parsing tools.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/css.md#_snippet_17\n\nLANGUAGE: diff\nCODE:\n```\n <object class=\"GtkListView\" id=\"tasks_list\">\n   <property name=\"valign\">start</property>\n+  <style>\n+    <class name=\"frame\"/>\n+    <class name=\"separators\"/>\n+  </style>\n </object>\n```\n\n----------------------------------------\n\nTITLE: XML UI for Placeholder Page with StatusPage in GTK4\nDESCRIPTION: Constructs a vertical GtkBox containing a GtkHeaderBar and a child GtkWindowHandle that hosts an AdwStatusPage indicating no tasks, with a button to create new collections. Uses libadwaita's StatusPage for empty state messaging and actions.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_4.md#_snippet_7\n\nLANGUAGE: XML\nCODE:\n```\n<object class=\"GtkBox\">\n  <property name=\"orientation\">vertical</property>\n  <child>\n    <object class=\"GtkHeaderBar\">\n      <style>\n        <class name=\"flat\" />\n      </style>\n    </object>\n  </child>\n  <child>\n    <object class=\"GtkWindowHandle\">\n      <property name=\"vexpand\">True</property>\n      <property name=\"child\">\n        <object class=\"AdwStatusPage\">\n          <property name=\"icon-name\">checkbox-checked-symbolic</property>\n          <property name=\"title\" translatable=\"yes\">No Tasks</property>\n          <property name=\"description\" translatable=\"yes\">Create some tasks to start using the app.</property>\n          <property name=\"child\">\n            <object class=\"GtkButton\">\n              <property name=\"label\" translatable=\"yes\">_New Collection</property>\n              <property name=\"use-underline\">True</property>\n              <property name=\"halign\">center</property>\n              <property name=\"action-name\">win.new-collection</property>\n              <style>\n                <class name=\"pill\" />\n                <class name=\"suggested-action\" />\n              </style>\n            </object>\n          </property>\n        </object>\n      </property>\n    </object>\n  </child>\n</object>\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Serializable Task Data Structure in Rust\nDESCRIPTION: Defines a TaskData structure with Serde's derive macros to make it serializable and deserializable. This structure holds the task content and completion status.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_2.md#_snippet_14\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Default, Serialize, Deserialize)]\nstruct TaskData {\n    completed: bool,\n    content: String,\n}\n```\n\n----------------------------------------\n\nTITLE: Async Task Handling Without Channels in GTK Main Loop (Rust)\nDESCRIPTION: This refined code shows how, when using single-threaded async tasks on the GTK main loop, explicit channels are unnecessary. The async block launched via glib's APIs controls the button state before and after the awaited operation. Requires gtk4, glib. The main input is the button click, which toggles UI state and performs a simulated async task; the output is maintained user interface responsiveness. Limitation: Not suitable for external thread communication.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/main_event_loop.md#_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n{{#rustdoc_include ../listings/main_event_loop/5/main.rs:callback}}\n```\n\n----------------------------------------\n\nTITLE: Installing GTK 4 on macOS via Homebrew (Bash)\nDESCRIPTION: This command uses Homebrew, the macOS package manager, to install the GTK 4 library and its dependencies. This step is necessary after installing Rustup and Homebrew as prerequisites for building GTK 4 applications with gtk-rs on macOS.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/installation_macos.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew install gtk4\n```\n\n----------------------------------------\n\nTITLE: Add libadwaita crate dependency\nDESCRIPTION: This command adds the `libadwaita` crate as a dependency to your Rust project using Cargo. It renames the crate to `adw` and enables the `v1_5` feature.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/libadwaita.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncargo add libadwaita --rename adw --features v1_5\n```\n\n----------------------------------------\n\nTITLE: Creating GTK4 Application Window in Rust\nDESCRIPTION: This snippet shows how to create a `gtk::ApplicationWindow` within a GTK application in Rust, emphasizing the `activate` signal connection. This step addresses startup warnings by establishing a main window that appears when the application is activated. It relies on `gtk` components and connects the window display to the application's lifecycle, enabling user interaction.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/hello_world.md#_snippet_1\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/hello_world/2/main.rs}}\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Listing Example with Cargo\nDESCRIPTION: This command runs a specific example listing by specifying its binary name with cargo. It executes the example code, allowing users to observe the runtime behavior of GTK-Rust snippets.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --bin listing_name\n```\n\n----------------------------------------\n\nTITLE: Spawning async ashpd Task from GTK4 Callback in Rust\nDESCRIPTION: This snippet demonstrates how to execute an async function from the ashpd crate within a GTK4 application using Rust. The code obtains a WindowIdentifier from a GTK-native widget and passes it to ashpd::desktop::account::UserInformation to retrieve user details, presenting the information in a dialog. Dependencies: gtk4, ashpd, async-std. The key input is a GTK button, and the output is printed user information upon successful sharing. Make sure the application is run on a Linux desktop environment with the required dependencies enabled (gtk4, async-std features for ashpd).\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/main_event_loop.md#_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\n{{#rustdoc_include ../listings/main_event_loop/7/main.rs:callback}}\n```\n\n----------------------------------------\n\nTITLE: CSS rule for Button by name\nDESCRIPTION: This CSS snippet styles a button based on its name. The rule targets a button with the name `button-1` and sets its font color to magenta. This demonstrates a way to apply CSS styles to a single widget.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/css.md#_snippet_6\n\nLANGUAGE: css\nCODE:\n```\nbutton#button-1 {\n  color: magenta;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Example of Serialized JSON Data Format\nDESCRIPTION: Shows an example of how the task data is serialized into JSON format when saved to a file. Each task is represented as an object with 'completed' and 'content' properties.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_2.md#_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"completed\": true,\n    \"content\": \"Task Number Two\"\n  },\n  {\n    \"completed\": false,\n    \"content\": \"Task Number Five\"\n  },\n  {\n    \"completed\": true,\n    \"content\": \"Task Number Six\"\n  },\n  {\n    \"completed\": false,\n    \"content\": \"Task Number Seven\"\n  },\n  {\n    \"completed\": false,\n    \"content\": \"Task Number Eight\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Compound GTK CSS Rule for Button and Descendant Arrow in CSS\nDESCRIPTION: This CSS rule targets an 'arrow' node that is a descendant of a button with a specific ID and style classes, applying a magenta color on hover state. Designed for demonstration, it illustrates complex GTK CSS selectors for widget styling. It requires GTK4 and knowledge of widget node hierarchy. The input is widget composition matching the selector; the output is a color property when hovered.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/css.md#_snippet_18\n\nLANGUAGE: css\nCODE:\n```\nbutton#button-1.toggle.text-button arrow:hover {\n  color: magenta;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Restoration Function in Rust\nDESCRIPTION: Implements a restore_data method to load previously saved tasks when the application starts. It handles the case where no data file exists yet by gracefully returning without error.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_2.md#_snippet_18\n\nLANGUAGE: rust\nCODE:\n```\npub fn restore_data(&self) {\n    // Get path\n    let path = utils::data_path();\n\n    // Open file with saved tasks\n    let file = match std::fs::File::open(path) {\n        Ok(file) => file,\n        Err(err) => {\n            println!(\"Error: Could not load tasks: {err:?}\");\n            return;\n        }\n    };\n\n    // Deserialize tasks from file\n    let tasks: Vec<TaskData> = match serde_json::from_reader(file) {\n        Ok(tasks) => tasks,\n        Err(err) => {\n            println!(\"Error: Could not read tasks from file: {err:?}\");\n            return;\n        }\n    };\n\n    // Create new TaskObject for each task\n    for task_data in tasks.into_iter() {\n        // Create new task object\n        let task_object = TaskObject::new(task_data.completed, &task_data.content);\n\n        // Add task object to model\n        self.tasks().append(&task_object);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GTK Widget Subclass with Custom CSS Node Name in Rust\nDESCRIPTION: This Rust code defines a GTK widget class that subclasses gtk::Box and uses set_css_name to assign the CSS node name 'task-row', enabling widget-specific CSS styling. Dependencies include gtk4 and gtk4-rs subclassing traits. The class is intended for inclusion in a GTK4 application and may implement additional widget logic. The key input is the widget class type; the output is a custom widget whose CSS node is uniquely named for targeted styling.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/css.md#_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\n{{#rustdoc_include ../listings/todo/3/task_row/imp.rs:object_subclass}}\n```\n\n----------------------------------------\n\nTITLE: Changing Directory to Listings Folder\nDESCRIPTION: This snippet contains a command to navigate into the 'listings' directory, which contains example code snippets for GTK-Rust. It prepares the environment for building or executing the examples.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd listings\n```\n\n----------------------------------------\n\nTITLE: CSS rule for button hover effect\nDESCRIPTION: This CSS snippet defines how the appearance of the button named `button-1` changes when the user hovers the mouse pointer over it. Specifically, it sets the background to yellow and the text color to magenta during the hover state. The snippet uses the `:hover` pseudo-class.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/css.md#_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n#button-1:hover {\n  background-color: yellow;\n  color: magenta;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implement IntegerObject - Rust\nDESCRIPTION: This code snippet provides the implementation details for the `IntegerObject` GObject, including the internal state (number), property access, and signal emission when the number changes. It defines the `IntegerObject`'s properties and methods.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/list_widgets.md#_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse glib::ParamSpecInt;\nuse gtk::glib;\nuse gtk::prelude::*\n;\nuse std::cell::Cell;\n\n#[derive(Default)]\npub struct IntegerObject {\n    pub number: Cell<i32>,\n}\n\n#[glib::object_subclass(template)]\nimpl ObjectSubclass for IntegerObject {\n    const NAME: &'static str = \"IntegerObject\";\n    type Type = super::IntegerObject;\n    type ParentType = glib::Object;\n\n    fn properties() -> &'static [glib::ParamSpec] {\n        use once_cell::sync::Lazy;\n        static PROPERTIES: Lazy<Vec<glib::ParamSpec>> = Lazy::new(|| {\n            vec![\n                ParamSpecInt::new(\n                    \"number\",\n                    \"Number\",\n                    \"The number of the integer object\",\n                    i32::MIN,\n                    i32::MAX,\n                    0,\n                    glib::ParamFlags::READWRITE,\n                )\n                .upcast(),\n            ]\n        });\n        PROPERTIES.as_ref()\n    }\n\n    fn set_property(&self, _obj: &Self::Type, _id: usize, value: &glib::Value, pspec: &glib::ParamSpec) {\n        match pspec.name() {\n            \"number\" => {\n                let number = value.get().expect(\"type conformity checked beforehand\");\n                self.number.set(number);\n            }\n            _ => unimplemented!(),\n        };\n    }\n\n    fn property(&self, _obj: &Self::Type, _id: usize, pspec: &glib::ParamSpec) -> glib::Value {\n        match pspec.name() {\n            \"number\" => self.number.get().to_value(),\n            _ => unimplemented!(),\n        }\n    }\n}\n\nimpl ObjectImpl for IntegerObject {\n    fn constructed(&self, obj: &Self::Type) {\n        self.parent_constructed(obj);\n\n        // set accessible role\n        obj.update_accessible_role(gtk::AccessibleRole::Listitem);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing GTK4 Application with Builder Pattern in Rust\nDESCRIPTION: This snippet demonstrates how to create a `gtk::Application` instance using the builder pattern in Rust with gtk-rs. It highlights dependencies on the `gtk` crate, the necessity of importing the prelude for trait extensions, and setting up the application with an application ID for proper registration. The purpose is to initialize the core application object for GTK4 interfaces, providing the foundation for UI construction.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/hello_world.md#_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/hello_world/1/main.rs}}\n```\n\n----------------------------------------\n\nTITLE: Work around missing icons with gvsbuild\nDESCRIPTION: These commands copy icon files and update the icon cache to address a missing icon issue in GTK versions prior to 4.10 when using gvsbuild.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/libadwaita.md#_snippet_7\n\nLANGUAGE: Batch\nCODE:\n```\nxcopy /s /i C:\\gtk-build\\gtk\\x64\\release\\share\\icons\\hicolor\\scalable\\apps C:\\gtk-build\\gtk\\x64\\release\\share\\icons\\hicolor\\scalable\\actions\ngtk4-update-icon-cache.exe -t -f C:\\gtk-build\\gtk\\x64\\release\\share\\icons\\hicolor\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Task State Using async-channel and glib::spawn_future_local in GTK (Rust)\nDESCRIPTION: This example introduces communication between asynchronous tasks and the main thread using async-channel. It ensures only one long-running task can be started at a time by controlling the button's sensitivity. Dependencies: gtk4, glib, async-channel. The callback receives boolean messages to enable or disable the button based on thread state, using glib::spawn_future_local to maintain UI responsiveness. Input is button clicks; output is toggling button state and preventing concurrent execution; limitation: requires async-channel.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/main_event_loop.md#_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n{{#rustdoc_include ../listings/main_event_loop/3/main.rs:callback}}\n```\n\n----------------------------------------\n\nTITLE: Styling Button Font Color based on Style Class\nDESCRIPTION: This snippet defines a CSS rule to set the font color of buttons with the `text-button` style class to magenta. This example builds upon the prior examples by using style classes provided by GTK. This allows styling specific widgets. The code targets buttons containing text.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/css.md#_snippet_2\n\nLANGUAGE: css\nCODE:\n```\nbutton.text-button {\n  color: magenta;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Define IntegerObject GObject - Rust\nDESCRIPTION: This snippet defines a custom GObject called `IntegerObject` in Rust. This object encapsulates an integer and is required for use with `gio::ListStore`.  It's essential for creating scalable lists with ListView, as the ListStore requires GObjects.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/list_widgets.md#_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse glib::Object;\nuse gtk::glib;\n\nmod imp;\n\nglue::wrapper! {\n    pub struct IntegerObject(Object);\n\n    type Instance = glue::InstanceStruct<imp::IntegerObject>;\n    type Class = glue::ClassStruct<imp::IntegerObjectClass>;\n\n    impl {\n        pub fn new(number: i32) -> Self {\n            Object::new(&[(\"number\", &number)]).expect(\"Failed to create IntegerObject\")\n        }\n\n        pub fn number(&self) -> i32 {\n            self.imp().number.get()\n        }\n\n        pub fn set_number(&self, number: i32) {\n            self.imp().number.set(number)\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Handling GTK4 Event and Widget Integration in Rust\nDESCRIPTION: This snippet demonstrates connecting GTK4 widget lifecycle events, such as size allocation and realization, to apply rotation transformations. It requires GTK4 APIs and sets up event handlers to ensure the rotation is correctly applied during widget rendering.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/examples/rotation_bin/README.md#_snippet_2\n\nLANGUAGE: Rust\nCODE:\n```\nwidget.connect_draw(|widget, cr| {\n    let width = widget.width() as f64;\n    let height = widget.height() as f64;\n    cr.save();\n    cr.translate(width / 2.0, height / 2.0);\n    cr.rotate(PI / 2.0);\n    cr.translate(-width / 2.0, -height / 2.0);\n    // Draw child content here\n    cr.restore();\n    glib::signal::Inhibit(false)\n});\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic GTK 4 Hello World Application in Rust\nDESCRIPTION: A minimal example showing how to create a basic GTK 4 application that displays a window with the title 'Hello, World!'. The example initializes a GTK Application, sets up a window, and runs the main loop.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/gtk4/README.md#_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse gtk4 as gtk;\nuse gtk::prelude::*;\nuse gtk::{glib, Application, ApplicationWindow};\n\nfn main() -> glib::ExitCode {\n    let app = Application::builder()\n        .application_id(\"org.example.HelloWorld\")\n        .build();\n\n    app.connect_activate(|app| {\n        // We create the main window.\n        let window = ApplicationWindow::builder()\n            .application(app)\n            .default_width(320)\n            .default_height(200)\n            .title(\"Hello, World!\")\n            .build();\n\n        // Show the window.\n        window.present();\n    });\n\n    app.run()\n}\n```\n\n----------------------------------------\n\nTITLE: Deriving a GTK FilterListModel Filter from Persistent State - Rust\nDESCRIPTION: This Rust function reads the persistent 'filter' state (e.g., All, Open, Done), and returns an Option<gtk4::Filter> for the GtkFilterListModel. If 'All' is selected, it returns None (no filtering); for 'Open' or 'Done', returns a filter that selects only matching tasks. Inputs: current setting value. Outputs: Option<Filter> for use with ListModel. Dependencies: gtk4, custom filter logic, perhaps TaskObject methods for completion status. This enables the ListView to automatically update when the filter state changes.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_2.md#_snippet_8\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/todo/2/window/mod.rs:filter}}\n```\n\n----------------------------------------\n\nTITLE: Increase IntegerObject Number - Rust\nDESCRIPTION: This code adds the `increase_number` method to the `IntegerObject` GObject. This method allows increasing the internal number of the `IntegerObject` by one.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/list_widgets.md#_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\nuse glib::Object;\nuse gtk::glib;\n\nmod imp;\n\nglue::wrapper! {\n    pub struct IntegerObject(Object);\n\n    type Instance = glue::InstanceStruct<imp::IntegerObject>;\n    type Class = glue::ClassStruct<imp::IntegerObjectClass>;\n\n    impl {\n        pub fn new(number: i32) -> Self {\n            Object::new(&[(\"number\", &number)]).expect(\"Failed to create IntegerObject\")\n        }\n\n        pub fn number(&self) -> i32 {\n            self.imp().number.get()\n        }\n\n        pub fn set_number(&self, number: i32) {\n            self.imp().number.set(number);\n        }\n\n        pub fn increase_number(&self) {\n            self.set_number(self.number() + 1);\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting Up Actions Including Filter Action - Rust\nDESCRIPTION: Here, the Rust snippet defines and adds application actions, in particular a 'filter' stateful action bound to UI and menu triggers. This connects user interaction to persistent state and updates the user interface accordingly. The setup involves registering the action, handling parameter types (often enums or strings), and dispatching the correct behavior upon changes. Dependencies: gtk4, gio, glib, and a GSettings schema. Inputs: action invocations (from menu or keyboard). Outputs: UI state transitions and settings changes.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_2.md#_snippet_5\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/todo/2/window/mod.rs:setup_actions}}\n```\n\n----------------------------------------\n\nTITLE: Setting up Factory for StringList with Expressions in Rust GTK\nDESCRIPTION: Shows how to set up a list factory for a StringList model using expressions. This code binds the 'string' property of StringObject items to label widgets in the list.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/list_widgets.md#_snippet_17\n\nLANGUAGE: rust\nCODE:\n```\nfactory.setup(|_, list_item| {\n    // Create label\n    let label = gtk::Label::new(None);\n    list_item.set_child(Some(&label));\n\n    // Create expression on StringObject's string property\n    let item_expression = gtk::ConstantExpression::new(&list_item);\n    let list_item_expression = gtk::PropertyExpression::new(\n        gtk::ListItem::static_type(),\n        Some(&item_expression),\n        \"item\",\n    );\n    let string_expression = gtk::PropertyExpression::new(\n        gtk::StringObject::static_type(),\n        Some(&list_item_expression),\n        \"string\",\n    );\n\n    // Bind the expression to label's label property\n    label.set_property_expression(\"label\", Some(&string_expression));\n});\n```\n\n----------------------------------------\n\nTITLE: Drawing Rotated Content in RotationBin Widget Using GTK4 and Rust\nDESCRIPTION: This snippet provides the implementation of the drawing logic for RotationBin, employing GTK4's drawing API to rotate the child widget by 90 degrees. It involves the use of Cairo contexts and transformations, assuming dependencies on gtk4 and cairo crates.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/examples/rotation_bin/README.md#_snippet_1\n\nLANGUAGE: Rust\nCODE:\n```\nfn draw(&self, cr: &cairo::Context) {\n    cr.save();\n    cr.translate(width / 2.0, height / 2.0);\n    cr.rotate(PI / 2.0);\n    cr.translate(-width / 2.0, -height / 2.0);\n    // Draw child widget content here\n    cr.restore();\n}\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Persistent Settings in Window Module - Rust\nDESCRIPTION: This Rust code provides convenience functions in the window module for reading/writing the application settings (such as the current filter). It abstracts GSettings access and ensures correct handling of keys and signal connections for change notifications. Required dependencies: glib, gtk4. Parameters: typically none directly, but operates on the Window or its private data. Expected output: corresponding setting value. Used throughout filtering and action logic. Limitation: expects a valid settings object to be present.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_2.md#_snippet_3\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/todo/2/window/mod.rs:settings}}\n```\n\n----------------------------------------\n\nTITLE: Sharing GObject references with GTK in Rust\nDESCRIPTION: This snippet shows how to pass GObject references (like buttons) to closures, enabling interactions between UI elements.  This example can highlight potential issues of reference cycles if not handled correctly.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/g_object_memory_management.md#_snippet_6\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/g_object_memory_management/4/main.rs:callback}}\n```\n\n----------------------------------------\n\nTITLE: Storing Task State in Struct Data - TaskObject Rust Struct\nDESCRIPTION: This Rust snippet demonstrates encapsulating task state within a custom struct, holding completed (bool) and content (String) fields. Dependencies are internal Rust struct management and serialization if needed. Accessible as a member rather than individual variables, simplifying future persistence operations. Output is grouped state handling for each TaskObject.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_1.md#_snippet_6\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/todo/1/task_object/mod.rs:task_data}}\n```\n\n----------------------------------------\n\nTITLE: Setting up a Factory with GTK Expressions in Rust\nDESCRIPTION: Demonstrates how to set up a GTK list factory using expressions to bind the 'number' property of a list item to the 'label' property of a label widget. This avoids explicit property binding steps and allows for dynamic relationships.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/list_widgets.md#_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\nfactory.setup(|_, list_item| {\n    let label = gtk::Label::new(None);\n    list_item.set_child(Some(&label));\n\n    // Create a property expression from item's number property\n    let item_expression = gtk::ConstantExpression::new(&list_item);\n    let list_item_expression = gtk::PropertyExpression::new(\n        gtk::ListItem::static_type(),\n        Some(&item_expression),\n        \"item\",\n    );\n    let number_expression = gtk::PropertyExpression::new(\n        NumberObject::static_type(),\n        Some(&list_item_expression),\n        \"number\",\n    );\n\n    // Bind the expression to label's label property\n    label.set_property_expression(\"label\", Some(&number_expression));\n});\n```\n\n----------------------------------------\n\nTITLE: Creating GTK-RS Collection ListBox Row (Rust)\nDESCRIPTION: Shows the implementation of the `create_collection_row` method. This function takes a `CollectionObject` as input and constructs a corresponding [`gtk::ListBoxRow`](https://gtk-rs.org/gtk4-rs/stable/latest/docs/gtk4/struct.ListBoxRow.html) to be displayed in the list of collections, mapping the collection data to the UI row.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_4.md#_snippet_14\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/todo/8/window/mod.rs:create_collection_row}}\n```\n\n----------------------------------------\n\nTITLE: Running a GTK4 Example using Cargo in Rust\nDESCRIPTION: This snippet provides the command to execute a specific GTK4 example.  The 'cargo run --bin' command is used to run a specific binary, where the binary name is constructed as `[example_name]_[number]`.  The user must replace `[example_name]` and `[number]` with the actual example and number to run it. This assumes that the example has already been built.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/listings/README.md#_snippet_1\n\nLANGUAGE: Rust\nCODE:\n```\ncargo run --bin [example_name]_[number]\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom GTK Window for State Persistence in Rust\nDESCRIPTION: Implements a custom GTK window in Rust, adding methods to get and set window state properties using GSettings. Depends on gtk4, gio, glib, and std libraries; requires the associated GSettings schema. This code encapsulates window state management, accessing persisted values for height, width, and maximization. The window restores its state upon creation and updates settings upon closure. Expected inputs are the application instance and mutations to window properties; outputs are state updates in GSettings. Constraints include one-time settings initialization using OnceCell.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/saving_window_state.md#_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n{{#rustdoc_include ../listings/saving_window_state/1/custom_window/mod.rs:mod}}\n```\n\n----------------------------------------\n\nTITLE: Implementing Internal Window State with ListBox Support in Rust\nDESCRIPTION: This Rust snippet updates the implementation of the main window's internal module to reference a GtkListBox instead of a ListView, supporting the boxed list pattern. It defines member variables and state handling necessary for the boxed list approach, removing prior structure required for widget recycling. Expected inputs are GObject subclassing context and window state management, with outputs being the updated state compatible with boxed list UI. Dependencies include gtk-rsâ€™s ListBox and Libadwaita bindings.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_3.md#_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n{{#rustdoc_include ../listings/todo/6/window/imp.rs:window}}\n```\n\n----------------------------------------\n\nTITLE: Add ListView to ScrolledWindow - Rust\nDESCRIPTION: This snippet adds the `ListView` to a `ScrolledWindow`. This allows the user to scroll through the potentially large list of items. The `ListView` must be a direct child of the `ScrolledWindow`.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/list_widgets.md#_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nlet scrolled_window = gtk::ScrolledWindow::new();\nscrolled_window.set_child(Some(&list_view));\n```\n\n----------------------------------------\n\nTITLE: Running GTK4 Example using Cargo - Bash\nDESCRIPTION: This command compiles and runs the specific example binary `list_box_model` located within the project using the Rust build tool, Cargo. It is the standard way to execute runnable examples or binaries defined in the project's `Cargo.toml`.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/examples/list_box_model/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ncargo run --bin list_box_model\n```\n\n----------------------------------------\n\nTITLE: Updating Filter and Sorter on Item Activation in Rust GTK\nDESCRIPTION: Shows how to update filters and sorters when list items are activated. This code calls the 'changed' method on filter and sorter objects to ensure the list view updates when an item's value changes.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/list_widgets.md#_snippet_15\n\nLANGUAGE: rust\nCODE:\n```\nlist_view.connect_activate(move |_, position| {\n    let index = position.into();\n    let number_object = model\n        .object(index)\n        .and_downcast::<NumberObject>()\n        .expect(\"The item needs to be present and of type `NumberObject`.\");\n\n    let old_number = number_object.number();\n    number_object.set_number(old_number.wrapping_add(1));\n    \n    // Remember to update filter and sorter\n    even_filter.changed(gtk::FilterChange::Different);\n    reverse_sorter.changed(gtk::SorterChange::Different);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Button Subclass Implementation (Rust)\nDESCRIPTION: This snippet defines the `CustomButton` implementation struct `imp::CustomButton`. It uses `#[derive(Debug, Default)]` and `#[glib::object_subclass]` to handle GObject implementation boilerplate. It declares the parent type as `gtk::Button` but currently adds no state or overrides any virtual methods, serving as the foundation for the custom GObject's state and behavior.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/g_object_subclassing.md#_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\n// This is an example of a simple custom button\n// that doesn't add any new functionality over gtk::Button.\n\nuse glib::object_subclass;\nuse gtk::prelude::*\nuse gtk::subclass::prelude::*;\n\n// Object holding the state\n#[derive(Debug, Default)]\npub struct CustomButton;\n\n// The central trait that makes this struct a subclass of a GObject\n#[glib::object_subclass]\nimpl ObjectSubclass for CustomButton {\n    const NAME: &'static str = \"MyGtkAppCustomButton\";\n    type Type = super::CustomButton;\n    type ParentType = gtk::Button;\n}\n\n// Trait for object methods\nimpl ObjectImpl for CustomButton {}\n\n// Trait for button methods\nimpl ButtonImpl for CustomButton {}\n\n```\n\n----------------------------------------\n\nTITLE: Install GTK4 Development Tools on Fedora\nDESCRIPTION: This command installs the GTK4 development packages and GCC compiler on Fedora and derivative distributions using the dnf package manager. It provides the necessary tools for compiling GTK4 applications.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/installation_linux.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nsudo dnf install gtk4-devel gcc\n```\n\n----------------------------------------\n\nTITLE: Add ListBox to ScrolledWindow - Rust\nDESCRIPTION: This code snippet adds the `ListBox` created in the previous step to a `ScrolledWindow`.  This allows the user to scroll through the list of items if the list exceeds the visible area. The `ScrolledWindow` handles the scrollbars automatically.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/list_widgets.md#_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nlet scrolled_window = gtk::ScrolledWindow::new();\nscrolled_window.set_child(Some(&list_box));\n```\n\n----------------------------------------\n\nTITLE: Install libadwaita on Fedora\nDESCRIPTION: This command installs the libadwaita development package on Fedora and derivatives using the DNF package manager. It provides the necessary headers and libraries for compiling applications that use libadwaita.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/libadwaita.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nsudo dnf install libadwaita-devel\n```\n\n----------------------------------------\n\nTITLE: Registering UI Resources using GResource XML - XML\nDESCRIPTION: This XML file registers UI and resource files for the application using GResource schema, assigning aliases such as gtk/help-overlay.ui for the shortcuts window. This enables the GTK application to automatically expose the help overlay and associate it with relevant actions/shortcuts. Dependencies: correct file paths and build integration for GResource. Input: resource definition; Output: packed resources as part of the application binary. Limitations: resources must be listed explicitly and aliases should conform to GTK resource conventions.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_2.md#_snippet_12\n\nLANGUAGE: XML\nCODE:\n```\n{{#rustdoc_include ../listings/todo/2/resources/resources.gresource.xml}}\n```\n\n----------------------------------------\n\nTITLE: Defining a GTK Widget with an External Blueprint File in Rust\nDESCRIPTION: Demonstrates using the `gtk::CompositeTemplate` derive macro in Rust to define a custom widget (`MyWidget`). The UI layout is specified in an external blueprint file (`src/my_widget.blp`), referenced via the `#[template(file = ...)]` attribute relative to the project directory. `#[template_child]` attributes link struct fields (`label`, `label2`) to specific widgets defined in the blueprint, using either the field name or an explicit `id`.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/CHANGELOG.md#_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Debug, Default, gtk::CompositeTemplate)]\n#[template(file = \"src/my_widget.blp\")] // relative to the project directory\npub struct MyWidget {\n    #[template_child]\n    pub label: TemplateChild<gtk::Label>,\n    #[template_child(id = \"my_label2\")]\n    pub label2: gtk::TemplateChild<gtk::Label>,\n}\n```\n\n----------------------------------------\n\nTITLE: Create and Fill ListStore Model - Rust\nDESCRIPTION: This snippet creates a `gio::ListStore` and populates it with `IntegerObject` instances, representing integers from 0 to 100,000. This model provides the data for the scalable list, and only contains GObjects.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/list_widgets.md#_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nuse gtk::glib;\n\nlet model = gio::ListStore::new(super::IntegerObject::static_type());\n\nfor i in 0..=100_000 {\n    let integer_object = super::IntegerObject::new(i);\n    model.append(&integer_object);\n}\n```\n\n----------------------------------------\n\nTITLE: Blocking the GTK Main Loop Using std::thread::sleep in Rust\nDESCRIPTION: This Rust code demonstrates how running a long task such as std::thread::sleep directly in the GTK button callback will freeze the UI for the duration, making the window unresponsive. It provides a minimal working GTK main loop and intentionally blocks the callback to highlight issues with synchronous tasks. Dependencies required include gtk4, glib, and std::thread. The main input is a button click; output is a five-second freeze of the window. Limitation: Not responsive to user input during the operation.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/main_event_loop.md#_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n{{#rustdoc_include ../listings/main_event_loop/1/main.rs}}\n```\n\n----------------------------------------\n\nTITLE: Using Enhanced Custom Button in GTK Application (Rust)\nDESCRIPTION: This snippet shows the updated `activate` function in the main application using the enhanced `CustomButton` from the second example. It creates the window and the custom button instance. Notably, it removes the explicit call to `connect_clicked` because the click handling logic is now implemented directly within the button's overridden `clicked` method in the `imp` struct, showcasing the benefits of overriding virtual methods.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/g_object_subclassing.md#_snippet_4\n\nLANGUAGE: Rust\nCODE:\n```\nfn build_ui(app: &Application) {\n    let button = CustomButton::new();\n\n    let window = ApplicationWindow::builder()\n        .application(app)\n        .title(\"My GTK App\")\n        .child(&button)\n        .build();\n\n    window.present();\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding Serde Dependencies to Cargo.toml\nDESCRIPTION: Adds the serde and serde_json dependencies to the project's Cargo.toml file. The serde crate includes the 'derive' feature to enable automatic serialization trait derivation.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_2.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncargo add serde --features derive\ncargo add serde_json\n```\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nserde = { version = \"1.0\", features = [\"derive\"] }\nserde_json = \"1.0\"\n```\n\n----------------------------------------\n\nTITLE: Using Basic Custom Button in GTK Application (Rust)\nDESCRIPTION: This snippet shows how to create and use the basic `CustomButton` instance within a GTK application's `activate` function. It creates a window, sets its title, creates the custom button, adds it to the window, and then presents the window. This demonstrates that the custom button created via subclassing acts like a regular `gtk::Button` and can be integrated into the application.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/g_object_subclassing.md#_snippet_2\n\nLANGUAGE: Rust\nCODE:\n```\n// This is the main application file, showcasing how to use the custom button.\n\nmod custom_button;\n\nuse custom_button::CustomButton;\nuse gtk::prelude::*;\nuse gtk::{Application, ApplicationWindow};\n\nfn build_ui(app: &Application) {\n    let button = CustomButton::new();\n    button.set_label(\"Hello World!\");\n    button.connect_clicked(|button| {\n        button.set_label(\"Hello again!\");\n    });\n\n    let window = ApplicationWindow::builder()\n        .application(app)\n        .title(\"My GTK App\")\n        .child(&button)\n        .build();\n\n    window.present();\n}\n\nfn main() -> glib::ExitCode {\n    let app = Application::builder()\n        .application_id(\"org.gtk-rs.example\")\n        .build();\n\n    app.connect_activate(build_ui);\n\n    app.run()\n}\n\n```\n\n----------------------------------------\n\nTITLE: Create ListView with Selection - Rust\nDESCRIPTION: This code creates a `ListView` with a `SingleSelection` model and a `SignalListItemFactory`.  The `SingleSelection` allows only one item to be selected at a time.  The `ListView` is then configured to use the model and factory.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/list_widgets.md#_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nlet selection_model = gtk::SingleSelection::new(Some(&model));\nlet list_view = gtk::ListView::new(Some(&selection_model), Some(&factory));\n```\n\n----------------------------------------\n\nTITLE: Registering Embedded Resources in GTK Application Startup (Rust)\nDESCRIPTION: This Rust snippet shows how to register compiled resources at application startup using the gio::resources_register_include! macro. This registration must occur before instantiating gtk::Application to ensure templates and asset resources are available at runtime. Dependencies are the gio and gtk crates in Rust. Inputs are resource files embedded at build time; outputs are accessible resources within the binary. Must be placed in main.rs or equivalent startup code. Failure to register will cause template or asset loading to fail.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/composite_templates.md#_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n{{#rustdoc_include ../listings/composite_templates/1/main.rs}}\n```\n\n----------------------------------------\n\nTITLE: XML UI for Collection View Sidebar with HeaderBar and ListBox\nDESCRIPTION: Specifies the sidebar page layout with a toolbar containing a 'New Collection' button and a GtkListBox to display collections, styled with the 'navigation-sidebar' class for consistent sidebar appearance.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_4.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<object class=\"AdwNavigationPage\">\n  <property name=\"title\" bind-source=\"TodoWindow\"\n    bind-property=\"title\" bind-flags=\"sync-create\" />\n  <property name=\"child\">\n    <object class=\"AdwToolbarView\">\n      <child type=\"top\">\n        <object class=\"AdwHeaderBar\">\n          <child type=\"start\">\n            <object class=\"GtkToggleButton\">\n              <property name=\"icon-name\">list-add-symbolic</property>\n              <property name=\"tooltip-text\" translatable=\"yes\">New Collection</property>\n              <property name=\"action-name\">win.new-collection</property>\n            </object>\n          </child>\n        </object>\n      </child>\n      <property name=\"content\">\n        <object class=\"GtkScrolledWindow\">\n          <property name=\"child\">\n            <object class=\"GtkListBox\" id=\"collections_list\">\n              <style>\n                <class name=\"navigation-sidebar\" />\n              </style>\n            </object>\n          </property>\n        </object>\n      </property>\n    </object>\n```\n\n----------------------------------------\n\nTITLE: Updating Git Submodules for gtk4-rs Repository (Bash)\nDESCRIPTION: This snippet ensures that all submodules required by the repository are checked out and up-to-date. The command is necessary before generating code or building the project, as dependencies and autogenerated source data are often managed as submodules. No input parameters are needed; the output will be an updated set of subdirectories corresponding to the repository's submodules.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git submodule update --checkout\n\n```\n\n----------------------------------------\n\nTITLE: Defining GSettings Schema for gio::Settings in XML\nDESCRIPTION: This XML snippet defines a GSettings schema that specifies the unique ID, schema path, key name, type (boolean, 'b'), and default value for storing the switch state. Place this schema as 'org.gtk_rs.Settings1.gschema.xml'. Requires installation into the expected schemas directory and compilation using glib-compile-schemas. Input includes the application ID; output is the compiled schema used at runtime.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/settings.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n{{#rustdoc_include ../listings/settings/1/org.gtk_rs.Settings1.gschema.xml}}\n```\n\n----------------------------------------\n\nTITLE: Running GTK 4 Rust Binding Examples Using Cargo CLI in Bash\nDESCRIPTION: Demonstrates the command-line approach to execute individual example applications provided in the gtk4-rs examples directory. It uses Rust's package manager and build tool, Cargo, to run binary examples by specifying their names. This snippet includes exact commands for running an example from the current working directory. Dependencies include having Rust and Cargo installed along with the gtk4-rs crate and its examples.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/examples/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --bin [example_name]\n```\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --bin basics\n```\n\n----------------------------------------\n\nTITLE: Adding a gtk4-rs Git Dependency in TOML\nDESCRIPTION: This TOML snippet demonstrates how to add a specific package from the `gtk4-rs` git repository (using `gdk4-wayland` as an example, but applicable to `gdk4-x11` as well) as a dependency in a Rust project's `Cargo.toml` file. This allows using the latest, unreleased 'bleeding edge' version directly from the source repository.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/gdk4-x11/README.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\ngdk-wayland = { git = \"https://github.com/gtk-rs/gtk4-rs.git\", package = \"gdk4-wayland\" }\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom GTK Button Subclass and Associated Traits in Rust\nDESCRIPTION: This Rust snippet defines the implementation struct and required traits for a custom GTK button, inheriting from gtk::Button. Dependencies include gtk, glib, and gtk4-macros for CompositeTemplate or widget subclassing. Main parameter is the NAME (class name string) for template reference. Inputs are derived macro attributes and implemented traits; output is a new widget class usable in templates. Limitation: NAME must match reference in template XML.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/composite_templates.md#_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\n{{#rustdoc_include ../listings/composite_templates/2/custom_button/imp.rs:imp}}\n```\n\n----------------------------------------\n\nTITLE: Implementing Task Data Mapping Methods - Rust\nDESCRIPTION: This Rust snippet adds methods (`is_completed`, `task_data`, `from_task_data`) to the TaskObject type, which encapsulate logic for determining completion status and mapping to/from task data representations. These are used in filtering and mutating the ListStore of tasks. Dependencies: the TaskObject GObject, possibly serde or custom traits if tasks are serializable. Inputs: a TaskObject instance or task data structure. Outputs: completion status or conversions. Key in enabling the filter and remove-done-tasks operations.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_2.md#_snippet_4\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/todo/2/task_object/mod.rs:impl}}\n```\n\n----------------------------------------\n\nTITLE: Install libadwaita on Arch Linux\nDESCRIPTION: This command installs libadwaita on Arch Linux and derivatives using the Pacman package manager. This provides the necessary libraries and headers for developing applications with libadwaita.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/libadwaita.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nsudo pacman -S libadwaita\n```\n\n----------------------------------------\n\nTITLE: Install libadwaita on macOS\nDESCRIPTION: This command installs libadwaita on macOS using the Homebrew package manager. This provides the necessary libraries and headers for developing applications with libadwaita.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/libadwaita.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nbrew install libadwaita\n```\n\n----------------------------------------\n\nTITLE: Install libadwaita on Debian\nDESCRIPTION: This command installs the libadwaita development package on Debian and derivatives using the APT package manager. It includes the headers and libraries required for building libadwaita-based applications.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/libadwaita.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nsudo apt install libadwaita-1-dev\n```\n\n----------------------------------------\n\nTITLE: Incorrect Mixing of Versioned and Git Dependencies in Cargo.toml (TOML)\nDESCRIPTION: This example illustrates a common mistake where a developer mixes versioned crate dependencies with git-sourced dependencies for related GTK crates. Specifically, it shows a versioned \"gdk4\" dependency alongside a git dependency for \"gsk4\" which leads to compilation failure due to version conflicts. The snippet advises against mixing crate sources to maintain dependency resolution consistency.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/gsk4/README.md#_snippet_1\n\nLANGUAGE: TOML\nCODE:\n```\n# This will not compile\n[dependencies]\ngdk = {version = \"0.1\", package = \"gdk4\"}\ngsk = { git = \"https://github.com/gtk-rs/gtk4-rs.git\", package = \"gsk4\" }\n```\n\n----------------------------------------\n\nTITLE: Modifying Template Callback for State Access (Rust)\nDESCRIPTION: Updates the signature of a Rust template callback function to include `&self` as the first parameter. This is required when the `swapped=\"true\"` attribute is used in the UI file, providing the callback with a reference to the custom widget instance to access its state.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/composite_templates.md#_snippet_18\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/composite_templates/4/window/imp.rs:template_callbacks}}\n```\n\n----------------------------------------\n\nTITLE: Illustrating Versioned & Git Crate Mixing Conflict - TOML\nDESCRIPTION: This TOML snippet demonstrates an invalid configuration. It shows an example of mixing versioned crates like gdk-x11 and a git crate like gdk-win32. This combination will result in compilation errors.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/gdk4-win32/README.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n# This will not compile\n[dependencies]\ngdk-x11 = {version = \"0.1\", package = \"gdk4-x11\"}\ngdk-win32 = { git = \"https://github.com/gtk-rs/gtk4-rs.git\", package = \"gdk4-win32\" }\n```\n\n----------------------------------------\n\nTITLE: Defining Signal Handler in GTK UI (XML)\nDESCRIPTION: Shows how to specify a signal handler for a widget within a GTK composite template UI file using the `<signal>` tag, linking a UI signal (e.g., \"clicked\") to a Rust function name (e.g., \"handle_button_clicked\"). Requires the corresponding handler function to be defined in the Rust code.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/composite_templates.md#_snippet_13\n\nLANGUAGE: XML\nCODE:\n```\n{{#rustdoc_include ../listings/composite_templates/3/resources/window.ui}}\n```\n\n----------------------------------------\n\nTITLE: Referencing a Custom Button Class in GTK Composite Template XML\nDESCRIPTION: This XML snippet modifies the application template to reference MyGtkAppCustomButton instead of GtkButton, allowing instantiation of custom widgets in the UI definition. The custom class must derive from a GTK type and be properly registered. Dependencies: custom button implementation in Rust; parameters: class name. Inputs: XML template; outputs: UI with custom widget instance. Limitation: Template class name must correspond to the Rust implementation's NAME.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/composite_templates.md#_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n{{#rustdoc_include ../listings/composite_templates/2/resources/window.ui}}\n```\n\n----------------------------------------\n\nTITLE: Enabling Widget State Access in GTK UI Signal (XML)\nDESCRIPTION: Modifies the `<signal>` tag in the GTK composite template UI file by adding the `swapped=\"true\"` attribute. This allows the corresponding Rust signal handler to receive a reference to the custom widget instance (`&self`) as its first parameter, enabling access to the widget's internal state.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/composite_templates.md#_snippet_17\n\nLANGUAGE: XML\nCODE:\n```\n{{#rustdoc_include ../listings/composite_templates/4/resources/window.ui}}\n```\n\n----------------------------------------\n\nTITLE: Implementing Orientation Action with String Parameters in GTK4-rs\nDESCRIPTION: Creates an action that changes the orientation of a GtkBox between horizontal and vertical modes. The action has a string parameter and string state, which helps the menu display the current orientation.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/actions.md#_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\n// Create action for switching orientation\nlet orientation_action = gio::SimpleAction::new_stateful(\n    \"orientation\",\n    Some(&String::static_variant_type()),\n    &\"Vertical\".to_variant(),\n);\norientation_action.connect_activate(glib::clone!(@weak self as window => move |action, parameter| {\n    let parameter = parameter.unwrap();\n    action.set_state(parameter.clone());\n\n    let orientation = match parameter.get::<String>().unwrap().as_str() {\n        \"Horizontal\" => gtk::Orientation::Horizontal,\n        \"Vertical\" => gtk::Orientation::Vertical,\n        _ => unreachable!(),\n    };\n    window.gtk_box().set_orientation(orientation);\n}));\nself.add_action(&orientation_action);\n```\n\n----------------------------------------\n\nTITLE: Managing GTK-RS Window Stack Visibility (Rust)\nDESCRIPTION: Provides the implementation for the `set_stack` method. This function controls which page is visible in a `GtkStack` or similar layout component, switching to the \"main\" view when there is at least one collection and showing a \"placeholder\" page when the collection list is empty.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_4.md#_snippet_22\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/todo/8/window/mod.rs:set_stack}}\n```\n\n----------------------------------------\n\nTITLE: Accessing and Using GSettings Key for Switch State in Rust\nDESCRIPTION: This Rust snippet retrieves the boolean value from the Settings key 'is-switch-enabled' and uses it to initialize a GTK Switch widget at the stored state. Dependencies: gtk4, gio. Inputs involve the Settings object and the key name string; outputs are the initialized Switch widget reflecting the stored persistent state.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/settings.md#_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n{{#rustdoc_include ../listings/settings/1/main.rs:settings}}\n```\n\nLANGUAGE: rust\nCODE:\n```\n{{#rustdoc_include ../listings/settings/1/main.rs:switch}}\n```\n\n----------------------------------------\n\nTITLE: Installing Application Data using Cargo in Rust\nDESCRIPTION: This snippet shows how to install application data required for the GTK4 examples. It uses the 'cargo xtask install' command.  This command presumably executes a custom task defined within the project to handle the installation process.  Ensure cargo and the necessary build tools are installed before running this command.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/listings/README.md#_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\ncargo xtask install\n```\n\n----------------------------------------\n\nTITLE: Implementing Template Callback Handler (Rust)\nDESCRIPTION: Demonstrates the implementation of a Rust function intended to handle a signal specified in a composite template UI file. The `#[template_callbacks]` macro is applied to the function, which must have a signature matching the signal's connection method, typically taking the widget instance as a parameter.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/composite_templates.md#_snippet_14\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/composite_templates/3/window/imp.rs:template_callbacks}}\n```\n\n----------------------------------------\n\nTITLE: Running a Specific GTK4 Example (hello_world_3) in Rust\nDESCRIPTION: This is a concrete example of running a GTK4 example. It demonstrates how to run a specific example named 'hello_world_3' by using the command `cargo run --bin hello_world_3`. This assumes the necessary dependencies are present and the example has been compiled. The binary hello_world_3 must be present in the project's `target` directory.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/listings/README.md#_snippet_2\n\nLANGUAGE: Rust\nCODE:\n```\ncargo run --bin hello_world_3\n```\n\n----------------------------------------\n\nTITLE: Retrieving Optional String from glib::Value (Rust)\nDESCRIPTION: This snippet demonstrates how to explicitly retrieve a boxed type, like `String`, from a `glib::Value` as an `Option<String>`. This allows differentiating between a type mismatch and a `Value` representing a `None`/`NULL` value, as included from an external file.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/g_object_values.md#_snippet_3\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/g_object_values/1/main.rs:string_none}}\n```\n\n----------------------------------------\n\nTITLE: Setting Rust Toolchain to GNU\nDESCRIPTION: Configures Rustup to use the stable GNU toolchain as the default for the current environment. This ensures that subsequent Rust build commands utilize the GNU compiler and libraries instead of the MSVC ones. Requires the GNU toolchain to have been installed via `rustup toolchain install stable-gnu`.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/installation_windows.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nrustup default stable-gnu\n```\n\n----------------------------------------\n\nTITLE: Build libadwaita with gvsbuild\nDESCRIPTION: This command uses `gvsbuild` to build libadwaita and librsvg. This is needed when using `gvsbuild` to manage GTK 4 dependencies on Windows.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/libadwaita.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\ngvsbuild build libadwaita librsvg\n```\n\n----------------------------------------\n\nTITLE: Removing Template Child Definition (Rust)\nDESCRIPTION: Shows the modification of the widget's implementation struct to remove a template child definition. This is done when the child widget no longer needs to be accessed directly via a struct field, for example, when signals are handled via template callbacks instead.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/composite_templates.md#_snippet_19\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/composite_templates/5/window/imp.rs:object}}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom GTK Widget Type (Rust)\nDESCRIPTION: Demonstrates how to manually register a custom GTK widget type within the `class_init` function of the widget's subclass implementation using `ensure_type`. This is necessary to make the custom type available for use in UI templates if it is not implicitly registered via template children.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/composite_templates.md#_snippet_20\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/composite_templates/6/window/imp.rs:subclass}}\n```\n\n----------------------------------------\n\nTITLE: Creating and Populating a GTK StringList in Rust\nDESCRIPTION: Demonstrates how to create a GTK StringList model directly from an iterator of strings. This approach eliminates the need for custom GObjects when working with string-based lists.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/list_widgets.md#_snippet_16\n\nLANGUAGE: rust\nCODE:\n```\n// Create a list of strings\nlet strings = [\"Potato\", \"Tomato\", \"Avocado\", \"Eggplant\", \"Cherry\", \"Banana\",\n            \"Apple\", \"Pear\", \"Peach\", \"Plum\", \"Strawberry\", \"Raspberry\",\n            \"Blackberry\", \"Blueberry\", \"Orange\", \"Mandarin\", \"Grapes\", \"Mango\"];\n    \n// Create a string list model from the iterator\nlet string_list_model = gtk::StringList::new(&strings);\n```\n\n----------------------------------------\n\nTITLE: Setting Up the Application in the Constructed Method in Rust\nDESCRIPTION: Implements the constructed method to set up the application, including restoring saved tasks when the application starts. It's part of the GObject implementation for the Window.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_2.md#_snippet_19\n\nLANGUAGE: rust\nCODE:\n```\nfn constructed(&self, obj: &Self::Type) {\n    // Chain up to the parent constructed\n    self.parent_constructed(obj);\n\n    // Setup\n    self.setup_tasks(obj);\n    self.setup_callbacks(obj);\n    self.setup_actions(obj);\n    self.setup_factory(obj);\n    self.setup_filters(obj);\n\n    // Load data\n    obj.restore_data();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing mdbook using Cargo\nDESCRIPTION: This snippet demonstrates how to install mdbook, a tool for creating and viewing books in Markdown format, via Rust's package manager cargo. The command installs the latest version of mdbook required for building the GTK-Rust book.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo install mdbook\n```\n\n----------------------------------------\n\nTITLE: Adding GTK-RS Window Helper Methods (Rust)\nDESCRIPTION: Includes Rust code for helper methods within the window module (`mod.rs`). These methods are designed to provide common or utility functionality that will be used by other parts of the window implementation later in the development process.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_4.md#_snippet_10\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/todo/8/window/mod.rs:helper}}\n```\n\n----------------------------------------\n\nTITLE: Adding State to GTK Widget Implementation (Rust)\nDESCRIPTION: Illustrates adding internal state, represented by a field like `number`, to the implementation struct (`imp`) of a custom GTK widget. This state can then be accessed and manipulated by the widget's methods and template callbacks.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/composite_templates.md#_snippet_16\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/composite_templates/4/window/imp.rs:object}}\n```\n\n----------------------------------------\n\nTITLE: Work around missing icons manually with MSVC\nDESCRIPTION: These commands copy icon files and update the icon cache to address a missing icon issue in GTK versions prior to 4.10 when building manually with MSVC.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/libadwaita.md#_snippet_8\n\nLANGUAGE: Batch\nCODE:\n```\nxcopy /s /i C:\\gnome\\share\\icons\\hicolor\\scalable\\apps C:\\gnome\\share\\icons\\hicolor\\scalable\\actions\ngtk4-update-icon-cache.exe -t -f C:\\gnome\\share\\icons\\hicolor\n```\n\n----------------------------------------\n\nTITLE: Defining a GTK Widget with an Inline Blueprint String in Rust\nDESCRIPTION: Shows how to use `gtk::CompositeTemplate` in Rust to define a custom widget (`MyWidget`) with its UI layout specified directly within the source code as an inline blueprint string, using the `#[template(string = \"...\")]` attribute. The `#[template_child]` attribute maps struct fields (`label`, `label2`) to widgets defined in the inline template string, identifying them by field name or explicit `id`.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/CHANGELOG.md#_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Debug, Default, gtk::CompositeTemplate)]\n#[template(string = \"\nusing Gtk 4.0;\ntemplate $MyWidget : Widget {\n    Label label {\n        label: 'foobar';\n    }\n    Label my_label2 {\n        label: 'foobaz';\n    }\n}\n\")]\npub struct MyWidget {\n    #[template_child]\n    pub label: TemplateChild<gtk::Label>,\n    #[template_child(id = \"my_label2\")]\n    pub label2: gtk::TemplateChild<gtk::Label>,\n}\n```\n\n----------------------------------------\n\nTITLE: Build libadwaita manually with MSVC\nDESCRIPTION: These commands clone the libadwaita repository, configure the build using Meson, and install it to a specified prefix. This is for manual building on Windows using MSVC.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/libadwaita.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\ncd /\ngit clone --branch libadwaita-1-3 https://gitlab.gnome.org/GNOME/libadwaita.git --depth 1\ncd libadwaita\nmeson setup builddir -Dprefix=C:/gnome -Dintrospection=disabled -Dvapi=false\nmeson install -C builddir\n```\n\n----------------------------------------\n\nTITLE: Creating Actions from GSettings in GTK4-rs\nDESCRIPTION: Uses the create_action method to generate actions from GSettings entries and adds them to the window's action group, ensuring they follow GTK action conventions.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/actions.md#_snippet_15\n\nLANGUAGE: rust\nCODE:\n```\nfn setup_actions(&self) {\n    // Create actions from settings\n    let settings = self.settings();\n    let button_frame_action = settings.create_action(\"button-frame\");\n    let orientation_action = settings.create_action(\"orientation\");\n\n    // Add actions to action group\n    self.add_action(&button_frame_action);\n    self.add_action(&orientation_action);\n}\n```\n\n----------------------------------------\n\nTITLE: Rust Implementation of AdwApplicationWindow Subclass\nDESCRIPTION: Includes Rust code to implement the subclassing of the custom application window, replacing gtk::ApplicationWindow with adw::ApplicationWindow. It involves including the generated object subclass code and implementing the AdwApplicationWindowImpl trait for custom behavior.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/todo_4.md#_snippet_3\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/todo/7/window/imp.rs:object_subclass}}\n```\n\n----------------------------------------\n\nTITLE: Checking Build of Examples with Cargo\nDESCRIPTION: This command verifies that all example listings in the current directory build successfully by compiling them with cargo. It is essential for testing the correctness of code snippets before execution.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncargo build\n```\n\n----------------------------------------\n\nTITLE: Implementing Button Frame PropertyAction in Rust for GTK4\nDESCRIPTION: Creates a PropertyAction that controls the button's has-frame property. This action has a boolean state that toggles when activated, following GTK action conventions.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/actions.md#_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\nlet button_frame_action = gio::PropertyAction::new(\"button-frame\", &self.button(), \"has-frame\");\nself.add_action(&button_frame_action);\n```\n\n----------------------------------------\n\nTITLE: Installing GNU Toolchain for Rust\nDESCRIPTION: Uses Rustup to download and install the stable GNU toolchain. This provides the necessary compiler and tools for Rust projects when targeting environments that use the GNU ABI, such as when building with libraries installed via MSYS2.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/installation_windows.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nrustup toolchain install stable-gnu\n```\n\n----------------------------------------\n\nTITLE: Serving the GTK-Rust Book with mdbook\nDESCRIPTION: This command starts a local server to serve the GTK-Rust book for viewing in a web browser, enabling interactive reading and navigation through the documentation. It requires mdbook to be installed previously.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmdbook serve\n```\n\n----------------------------------------\n\nTITLE: Installing GTK4 and Dependencies with Pacman (MSYS2)\nDESCRIPTION: Uses the Pacman package manager within the MSYS2 environment to install pre-built packages for GTK4, gettext, libxml2, librsvg, pkgconf, and gcc. This is the recommended method when using the GNU toolchain on Windows. Requires MSYS2 MinGW 64-bit terminal.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/installation_windows.md#_snippet_4\n\nLANGUAGE: Sh\nCODE:\n```\npacman -S mingw-w64-x86_64-gtk4 mingw-w64-x86_64-gettext mingw-w64-x86_64-libxml2 mingw-w64-x86_64-librsvg mingw-w64-x86_64-pkgconf mingw-w64-x86_64-gcc\n```\n\n----------------------------------------\n\nTITLE: Initializing Settings in Window Construction for GTK4-rs\nDESCRIPTION: Overrides the ObjectImpl::constructed method to initialize settings and bind them to widget properties during window construction.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/actions.md#_snippet_17\n\nLANGUAGE: rust\nCODE:\n```\nimpl ObjectImpl for Window {\n    fn constructed(&self) {\n        self.parent_constructed();\n\n        // Set up settings\n        let obj = self.obj();\n        obj.setup_settings();\n        obj.setup_actions();\n        obj.bind_settings();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving GTK4 Version\nDESCRIPTION: This command uses `pkg-config` to retrieve the version of GTK4 installed on the system.  This information is used to specify the version of the GTK4 crate to be used in the project's dependencies.  The output is displayed in the terminal.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/project_setup.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\npkg-config --modversion gtk4\n```\n\n----------------------------------------\n\nTITLE: Using Git Dependencies for GTK 4 in Cargo.toml\nDESCRIPTION: Example showing how to use bleeding edge GTK 4 bindings directly from the git repository instead of crates.io. This approach is recommended for tracking the latest development changes.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/gtk4/README.md#_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\ngtk = { git = \"https://github.com/gtk-rs/gtk4-rs.git\", package = \"gtk4\" }\n```\n\n----------------------------------------\n\nTITLE: Building GTK4 with gvsbuild\nDESCRIPTION: Executes the gvsbuild tool to automate the compilation and installation of GTK4 and its dependencies. This simplifies the setup process compared to manual compilation. Requires gvsbuild to be installed and configured according to its documentation.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/installation_windows.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngvsbuild build gtk4\n```\n\n----------------------------------------\n\nTITLE: Compiling GTK4 and Dependencies Manually (MSVC)\nDESCRIPTION: A sequence of commands executed in an MSVC-configured command prompt (like x64 Native Tools Command Prompt) to manually clone, build, and install GTK, libxml2, and librsvg. Requires Git, CMake, Meson, Ninja, Python (with setuptools), and NMake (included with Visual Studio) to be installed and accessible in the environment.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/installation_windows.md#_snippet_3\n\nLANGUAGE: Cmd\nCODE:\n```\ncd /\ngit clone https://gitlab.gnome.org/GNOME/gtk.git --depth 1\ngit clone https://gitlab.gnome.org/GNOME/libxml2.git --depth 1\ngit clone https://gitlab.gnome.org/GNOME/librsvg.git --depth 1\n\n:: Make sure that cmd finds pkg-config-lite when searching for pkg-config\nwhere pkg-config\n\n:: Make sure that setuptools is available.\npip install setuptools\n\ncd gtk\nmeson setup builddir --prefix=C:/gnome -Dbuild-tests=false -Dmedia-gstreamer=disabled\nmeson install -C builddir\ncd /\n\ncd libxml2\ncmake -S . -B build -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=C:\\gnome -D LIBXML2_WITH_ICONV=OFF -D LIBXML2_WITH_LZMA=OFF -D LIBXML2_WITH_PYTHON=OFF -D LIBXML2_WITH_ZLIB=OFF\ncmake --build build --config Release\ncmake --install build\ncd /\n\ncd librsvg/win32\nnmake /f generate-msvc.mak generate-nmake-files\nnmake /f Makefile.vc CFG=release install PREFIX=C:\\gnome\ncd /\n```\n\n----------------------------------------\n\nTITLE: Creating a new Rust Project\nDESCRIPTION: This snippet creates a new Rust project named \"my-gtk-app\" using the cargo command-line tool. It initializes a new directory with the necessary files for a Rust project.  The created project folder is then changed into using the cd command.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/project_setup.md#_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\ncargo new my-gtk-app\ncd my-gtk-app\n```\n\n----------------------------------------\n\nTITLE: Adding GDK 4 Macos Git Dependency in Cargo.toml - TOML\nDESCRIPTION: This snippet shows how to add the gdk4-macos crate as a dependency directly from the gtk4-rs GitHub repository in a Cargo.toml file. This method allows usage of the latest development version of the crate. Dependencies required are Rust (minimum version 1.80) and Cargo. Ensure that only git-based or versioned crates are used consistently to avoid build errors. Users should replace this line with a crates.io version for stable releases if they do not require the latest features.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/gdk4-macos/README.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[dependencies]\ngdk-macos = { git = \"https://github.com/gtk-rs/gtk4-rs.git\", package = \"gdk4-macos\" }\n\n```\n\n----------------------------------------\n\nTITLE: Avoiding Mixing Versioned and Git Dependencies in TOML\nDESCRIPTION: This TOML snippet shows an incorrect configuration in `Cargo.toml` that attempts to mix a versioned dependency from crates.io (`gdk-x11`) with a git dependency (`gdk-wayland`) from the same `gtk4-rs` project. This combination is explicitly discouraged as it will likely lead to compilation errors due to potential version mismatches and incompatibilities between the crates.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/gdk4-x11/README.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n# This will not compile\n[dependencies]\ngdk-x11 = {version = \"0.1\", package = \"gdk4-x11\"}\ngdk-wayland = { git = \"https://github.com/gtk-rs/gtk4-rs.git\", package = \"gdk4-wayland\" }\n```\n\n----------------------------------------\n\nTITLE: Incorrect Mixed Dependency Example in Cargo.toml\nDESCRIPTION: An example demonstrating an incorrect way to mix versioned and git dependencies in a Cargo.toml file. This approach will not compile due to incompatible dependency requirements.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/gtk4/README.md#_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n# This will not compile\n[dependencies]\ngdk = {version = \"0.1\", package = \"gdk4\"}\ngtk = { git = \"https://github.com/gtk-rs/gtk4-rs.git\", package = \"gtk4\" }\n```\n\n----------------------------------------\n\nTITLE: Incorrect Mixing of Versioned and Git Dependencies in Cargo.toml - TOML\nDESCRIPTION: This snippet illustrates an invalid configuration in Cargo.toml that attempts to mix a versioned crates.io dependency and a git-based dependency for gtk4-rs components. Mixing these styles (versioned and git) for related packages will cause build failures due to incompatibilities in Cargo's dependency resolution. For successful builds, ensure that all gtk4-rs-related dependencies are consistently specified as either all from crates.io or all from the git repository.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/gdk4-macos/README.md#_snippet_1\n\nLANGUAGE: TOML\nCODE:\n```\n# This will not compile\n[dependencies]\ngdk-macos = {version = \"0.1\", package = \"gdk4-macos\"}\ngdk-wayland = { git = \"https://github.com/gtk-rs/gtk4-rs.git\", package = \"gdk4-wayland\" }\n\n```\n\n----------------------------------------\n\nTITLE: Declaring gsk4 Dependency from Git Repository in Cargo.toml (TOML)\nDESCRIPTION: This snippet demonstrates how to specify the gsk4 crate dependency directly from the GTK4 Rust bindings Git repository within a Cargo.toml file. It uses the git attribute to pull the latest source, which is useful for tracking bleeding edge changes, and specifies the package name as \"gsk4\". Using this method requires Git and Cargo, and care should be taken to not mix this with versioned crates to avoid compilation errors.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/gsk4/README.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[dependencies]\ngsk = { git = \"https://github.com/gtk-rs/gtk4-rs.git\", package = \"gsk4\" }\n```\n\n----------------------------------------\n\nTITLE: Styling Button Font Color with CSS\nDESCRIPTION: This snippet defines a CSS rule to set the font color of a button to magenta. It creates a `style.css` file that is loaded in the application. The main focus is on changing the appearance of a button using CSS. The code affects the color of the text inside the button.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/css.md#_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nbutton {\n  color: magenta;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Styling the Arrow of MenuButton (CSS)\nDESCRIPTION: This CSS snippet changes the color of the arrow inside the `MenuButton`. This is done by targeting the `arrow` node, which is a descendant of the `menubutton` node. It relies on knowing the structure of the widget.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/css.md#_snippet_11\n\nLANGUAGE: css\nCODE:\n```\nmenubutton arrow {\n  color: magenta;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining GDK-Win32 Git Dependency - TOML\nDESCRIPTION: This TOML snippet demonstrates how to include the gdk-win32 crate as a git dependency in your project.  It specifies the git repository URL and the package name.  This allows developers to track the bleeding edge changes.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/gdk4-win32/README.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\ngdk-win32= { git = \"https://github.com/gtk-rs/gtk4-rs.git\", package = \"gdk4-win32\" }\n```\n\n----------------------------------------\n\nTITLE: Converting i32 to/from glib::Variant (Rust)\nDESCRIPTION: This snippet shows the basic conversion of a primitive Rust type, `i32`, to a `glib::Variant` and back. This process is similar to using `glib::Value` for simple types, demonstrating the fundamental serialization capability of `Variant`, as included from an external file.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/g_object_values.md#_snippet_4\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/g_object_values/2/main.rs:i32}}\n```\n\n----------------------------------------\n\nTITLE: GTK Button Inheritance Hierarchy\nDESCRIPTION: Shows the inheritance tree for a GTK Button, starting from the base GObject, inheriting from Widget, and finally resulting in Button.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/widgets.md#_snippet_0\n\nLANGUAGE: Console\nCODE:\n```\nGObject\nâ•°â”€â”€ Widget\n    â•°â”€â”€ Button\n```\n\n----------------------------------------\n\nTITLE: Conceptual glib::Value Enum Structure (Rust)\nDESCRIPTION: This snippet shows a conceptual Rust enum that represents the structure of `glib::Value`. It illustrates how `Value` can hold various primitive and boxed types, highlighting that boxed types are wrapped in `Option` due to their C origin allowing `NULL`.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/g_object_values.md#_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nenum Value <T> {\n    bool(bool),\n    i8(i8),\n    i32(i32),\n    u32(u32),\n    i64(i64),\n    u64(u64),\n    f32(f32),\n    f64(f64),\n    // boxed types\n    String(Option<String>),\n    Object(Option<dyn IsA<glib::Object>>),\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Window State Schema with GSettings in XML\nDESCRIPTION: Defines a GSettings schema in XML to persist window attributes such as 'height', 'width', and 'is_maximized' for the application. Requires GSettings integration at runtime using the GLib or gio library stack. This schema file is installed with the application and is referenced by the Rust code to store and retrieve user window state. Inputs and outputs are key-value pairs managed by the GSettings backend. The schema must be compiled and present on the system for proper operation.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/saving_window_state.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n{{#rustdoc_include ../listings/saving_window_state/1/org.gtk_rs.SavingWindowState1.gschema.xml}}\n```\n\n----------------------------------------\n\nTITLE: Setting window child in GTK in Rust\nDESCRIPTION: This shows how the window keeps a strong reference to its child `gtk_box`, which helps in the application memory management. When the window is closed, all the attached children will be dropped.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/book/src/g_object_memory_management.md#_snippet_9\n\nLANGUAGE: Rust\nCODE:\n```\n{{#rustdoc_include ../listings/g_object_memory_management/5/main.rs:window_child}}\n```\n\n----------------------------------------\n\nTITLE: Running ListBox with StringListModel Example in Bash\nDESCRIPTION: This snippet shows the command to run the Rust example program that demonstrates a gtk::ListBox combined with a StringListModel and StringSorter. It requires cargo, Rust's package manager, and enables the gtk4 v4_14 feature for compilation and execution.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/examples/list_box_sort_stringlist/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --bin list_box_sort_stringlist --features v4_14\n```\n\n----------------------------------------\n\nTITLE: Running Code Generation with generator.py in GTK4 Rust Bindings (Bash)\nDESCRIPTION: This snippet shows how to generate binding code using the generator.py script. It requires Python 3 and the generator.py script from the gir project as a dependency. Run the command within the repository root to generate or update auto-generated crate sources. Input files to this process typically include Gir.toml and supporting metadata. The output will be Rust source files in relevant module locations. Ensure all submodules are initialized before running.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython3 ./generator.py\n\n```\n\n----------------------------------------\n\nTITLE: Typical Crate Directory Structure in gtk4-rs Repositories (Text)\nDESCRIPTION: This snippet outlines the standard layout expected in gtk4-rs Rust crates (except gtk4-macros). Each sub-directory and file serves a role: Gir.toml controls code generation, README.md provides documentation, src/ contains manual and generated Rust sources, sys/ provides 1:1 bindings to C, and tests/ are for test suites. This structure supports consistent development and automated generation workflows, and users should ensure their contributions conform to this template.\nSOURCE: https://github.com/gtk-rs/gtk4-rs/blob/main/README.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n   ./crate \n   â”œâ”€â”€ Gir.toml\n   â”œâ”€â”€ README.md\n   â”œâ”€â”€ src\n   â”‚\tâ•°â”€â”€ auto\n   â”œâ”€â”€ sys\n   â•°â”€â”€ tests\n\n```"
  }
]