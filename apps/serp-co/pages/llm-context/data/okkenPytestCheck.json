[
  {
    "owner": "okken",
    "repo": "pytest-check",
    "content": "TITLE: Using pytest-check for Multiple Assertions in Python\nDESCRIPTION: Example of using pytest-check to perform multiple checks within a single test function, allowing all checks to be evaluated even if some fail.\nSOURCE: https://github.com/okken/pytest-check/blob/main/README.md#2025-04-13_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport httpx\nfrom pytest_check import check\n\ndef test_httpx_get():\n    r = httpx.get('https://www.example.org/')\n    # bail if bad status code\n    assert r.status_code == 200\n    # but if we get to here\n    # then check everything else without stopping\n    with check:\n        assert r.is_redirect is False\n    with check:\n        assert r.encoding == 'utf-8'\n    with check:\n        assert 'Example Domain' in r.text\n```\n\n----------------------------------------\n\nTITLE: Using pytest-check as a Fixture in Python\nDESCRIPTION: Example of using pytest-check as a fixture without importing it directly, allowing for multiple checks within a test function.\nSOURCE: https://github.com/okken/pytest-check/blob/main/README.md#2025-04-13_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef test_httpx_get(check):\n    r = httpx.get('https://www.example.org/')\n    ...\n    with check:\n        assert r.is_redirect == False\n    ...\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Check Functions with Decorator in Python\nDESCRIPTION: Example of creating a custom check function using the @check.check_func decorator, which wraps an assert statement to be a non-blocking assert function.\nSOURCE: https://github.com/okken/pytest-check/blob/main/README.md#2025-04-13_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom pytest_check import check\n\n@check.check_func\ndef is_four(a):\n    assert a == 4\n\ndef test_all_four():\n    is_four(1)\n    is_four(2)\n    is_four(3)\n    is_four(4)\n```\n\n----------------------------------------\n\nTITLE: Using pytest-check Helper Functions in Python\nDESCRIPTION: Example of using pytest-check's built-in helper functions for common checks, which don't require a 'with check:' block.\nSOURCE: https://github.com/okken/pytest-check/blob/main/README.md#2025-04-13_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef test_httpx_get_with_helpers():\n    r = httpx.get('https://www.example.org/')\n    assert r.status_code == 200\n    check.is_false(r.is_redirect)\n    check.equal(r.encoding, 'utf-8')\n    check.is_in('Example Domain', r.text)\n```\n\n----------------------------------------\n\nTITLE: Using check.raises as a Context Manager in Python\nDESCRIPTION: Example of using check.raises as a context manager to check for raised exceptions without stopping test execution on failure.\nSOURCE: https://github.com/okken/pytest-check/blob/main/README.md#2025-04-13_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom pytest_check import check\n\ndef test_raises():\n    with check.raises(AssertionError):\n        x = 3\n        assert 1 < x < 4\n```\n\n----------------------------------------\n\nTITLE: Using any_failures() for Conditional Checks in Python\nDESCRIPTION: Example of using any_failures() to make a block of checks conditional on not failing in a previous set of checks.\nSOURCE: https://github.com/okken/pytest-check/blob/main/README.md#2025-04-13_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom pytest_check import check\n\ndef test_with_groups_of_checks():\n    # always check these\n    check.equal(1, 1)\n    check.equal(2, 3)\n    if not check.any_failures():\n        # only check these if the above passed\n        check.equal(1, 2)\n        check.equal(2, 2)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Check Functions with check.fail() in Python\nDESCRIPTION: Example of creating a custom check function using check.fail() for improved performance in large loops of checks.\nSOURCE: https://github.com/okken/pytest-check/blob/main/README.md#2025-04-13_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom pytest_check import check\n\ndef is_four(a):\n    __tracebackhide__ = True\n    if a == 4:\n        return True\n    else: \n        check.fail(f\"check {a} == 4\")\n        return False\n\ndef test_all_four():\n  is_four(1)\n  is_four(2)\n  is_four(3)\n  is_four(4)\n```\n\n----------------------------------------\n\nTITLE: Setting Local Speedup Options in Python Tests\nDESCRIPTION: Examples of setting local speedup options (max_tb, max_report, max_fail) for individual tests to control output and performance.\nSOURCE: https://github.com/okken/pytest-check/blob/main/README.md#2025-04-13_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef test_max_tb():\n    check.set_max_tb(2)\n    for i in range(1, 11):\n        check.equal(i, 100)\n\ndef test_max_report():\n    check.set_max_report(5)\n    for i in range(1, 11):\n        check.equal(i, 100)\n\ndef test_max_fail():\n    check.set_max_fail(5)\n    for i in range(1, 11):\n        check.equal(i, 100)\n```\n\n----------------------------------------\n\nTITLE: Installing pytest-check via pip\nDESCRIPTION: Command to install the pytest-check plugin using pip package manager.\nSOURCE: https://github.com/okken/pytest-check/blob/main/README.md#2025-04-13_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install pytest-check\n```\n\n----------------------------------------\n\nTITLE: Installing pytest-check via conda\nDESCRIPTION: Command to install the pytest-check plugin using conda package manager from conda-forge channel.\nSOURCE: https://github.com/okken/pytest-check/blob/main/README.md#2025-04-13_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ conda install -c conda-forge pytest-check\n```\n\n----------------------------------------\n\nTITLE: Changelog Template Structure in Markdown\nDESCRIPTION: Template showing the structure for documenting unreleased changes in the changelog, including sections for Added, Fixed, and Changed items.\nSOURCE: https://github.com/okken/pytest-check/blob/main/changelog.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [Unreleased] - yyyy-month-dd\n\n### Added\n\n- nothing so far\n\n### Fixed\n\n- nothing so far\n\n### Changed\n\n- nothing so far\n```"
  }
]