[
  {
    "owner": "ustbhuangyi",
    "repo": "better-scroll",
    "content": "TITLE: Importing and Initializing BetterScroll (Full)\nDESCRIPTION: This JavaScript code snippet shows how to import BetterScroll and create a new instance.  It initializes BetterScroll with a wrapper element selector and specifies options for movable and zoom functionalities. This example demonstrates the use of the full-featured BetterScroll package.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport BetterScroll from 'better-scroll'\n\nlet bs = new BetterScroll('.wrapper', {\n  movable: true,\n  zoom: true\n})\n```\n\n----------------------------------------\n\nTITLE: Configure BetterScroll with Infinity\nDESCRIPTION: Illustrates how to configure BetterScroll with the infinity plugin, including the required `fetch`, `render`, and `createTombstone` functions.  These functions are responsible for fetching data, rendering list items, and creating placeholder elements, respectively.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/infinity.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nnew BScroll('.bs-wrapper', {\n  scrollY: true,\n  infinity: {\n    fetch(count) {\n      // Fetch data that is larger than count, the function is asynchronous, and it needs to return a Promise.。\n      // After you have successfully fetch the data, you need resolve an array of data (or resolve Promise).\n      // Each element of the array is list data, which will be rendered when the render method executes。\n      // If there is no data, you can resolve (false) to tell the infinite scroll list that there is no more data。\n    },\n    render(item, div?: HTMLElement) {\n      // Rendering each element node, item is data from fetch function\n      // div is an element which is recycled from document or undefined\n      // The function needs to return to a html element.\n    },\n    createTombstone() {\n      // Must return a tombstone DOM node.\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing BetterScroll with JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to initialize BetterScroll. It imports the `BScroll` class from the `@better-scroll/core` package and creates a new instance of BetterScroll by passing the wrapper element as a parameter.  The wrapper element is selected using `document.querySelector`. Ensure the wrapper has a defined height for scrolling to work.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nlet wrapper = document.querySelector('.wrapper')\nlet scroll = new BScroll(wrapper)\n```\n\n----------------------------------------\n\nTITLE: Importing and Initializing BetterScroll Core in JavaScript\nDESCRIPTION: This code snippet demonstrates how to import the BScroll class from the '@better-scroll/core' package and instantiate it to enable scrolling on a specified wrapper element.  The constructor takes the wrapper's CSS selector as the first argument and an optional configuration object as the second argument. The BScroll instance (bs) can then be used to control the scroll behavior of the wrapper.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/core/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\n\nconst bs = new BScroll('.wrapper', {/* ... */})\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Scrollbar with BScroll in JavaScript\nDESCRIPTION: This code snippet demonstrates how to import the BScroll core and Scrollbar plugin, register the plugin with BScroll, and then initialize a BScroll instance with the scrollbar option enabled.  This requires @better-scroll/core and @better-scroll/scroll-bar packages to be installed.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/scroll-bar/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nimport Scrollbar from '@better-scroll/scroll-bar'\nBScroll.use(Scrollbar)\n\nconst bs = new BScroll('.wrapper', {\n  scrollbar: true\n})\n```\n\n----------------------------------------\n\nTITLE: Install BetterScroll with all plugins\nDESCRIPTION: This code snippet shows how to install the complete BetterScroll library, including all official plugins, using either NPM or Yarn.  The `--save` flag adds the dependency to the `package.json` file.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/how-to-install.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install better-scroll --save\n\n// or\n\nyarn add better-scroll\n```\n\n----------------------------------------\n\nTITLE: Initializing BetterScroll with Options - JavaScript\nDESCRIPTION: This code snippet demonstrates how to initialize a BetterScroll instance with specific options, such as enabling vertical scrolling and click event handling. It imports the BetterScroll library and creates a new instance, passing in a DOM element selector and an options object.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/base-scroll-options.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nlet scroll = new BScroll('.wrapper',{\n    scrollY: true,\n    click: true\n})\n```\n\n----------------------------------------\n\nTITLE: Importing and Using the Pull-up Plugin\nDESCRIPTION: This code snippet demonstrates how to import the `BScroll` core and the `PullUp` plugin.  It then registers the plugin using `BScroll.use(PullUp)` to enable pull-up functionality.  Finally, it initializes a new `BScroll` instance with the `pullUpLoad` option enabled.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/pullup.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nimport PullUp from '@better-scroll/pull-up'\n\nBScroll.use(PullUp)\n\nnew BScroll('.bs-wrapper', {\n  pullUpLoad: true\n})\n```\n\n----------------------------------------\n\nTITLE: Using PullDown Plugin with BetterScroll\nDESCRIPTION: This code snippet demonstrates how to integrate the `PullDown` plugin with `BetterScroll`. It imports both modules and uses the `BScroll.use()` method to register the plugin. After registration, the `PullDown` plugin can be configured when creating a `BScroll` instance, enabling pull-down refresh functionality.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/pulldown.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nimport PullDown from '@better-scroll/pull-down'\n\nBScroll.use(PullDown)\n```\n\n----------------------------------------\n\nTITLE: Configuring BetterScroll with Movable Plugin\nDESCRIPTION: This code snippet shows how to configure a BetterScroll instance with the Movable plugin enabled.  It includes essential options such as `bindToTarget`, `scrollX`, `scrollY`, `freeScroll`, `bounce`, and `movable`.  The `movable: true` option is crucial for activating the plugin.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/movable.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nnew BScroll('.bs-wrapper', {\n  bindToTarget: true,\n  scrollX: true,\n  scrollY: true,\n  freeScroll: true,\n  bounce: true\n  movable: true // for movable plugin\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing BetterScroll with a DOM element\nDESCRIPTION: This JavaScript example shows how to initialize BetterScroll with a DOM element. It imports the BScroll class and creates a new instance, passing in the wrapper element obtained using querySelector. This provides basic scrolling functionality.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/README_zh-CN.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nlet wrapper = document.querySelector('.wrapper')\nlet scroll = new BScroll(wrapper)\n```\n\n----------------------------------------\n\nTITLE: Import and Use Zoom Plugin\nDESCRIPTION: Imports the BetterScroll core and Zoom plugin, then registers the plugin with `BScroll.use()`. This is required to enable the zoom functionality.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/zoom.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nimport Zoom from '@better-scroll/zoom'\n\nBScroll.use(Zoom)\n```\n\n----------------------------------------\n\nTITLE: Initializing BetterScroll with Slide Plugin - JavaScript\nDESCRIPTION: This code snippet demonstrates how to import and use the `@better-scroll/slide` plugin with BetterScroll to enable carousel functionality.  It initializes a new `BScroll` instance with specific options for the slide plugin, including loop and threshold settings.  It imports BScroll and Slide module.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/slide/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nimport Slide from '@better-scroll/slide'\nBScroll.use(Slide)\n\nconst bs = new BScroll('.div', {\n  scrollX: false,\n  scrollY: true,\n  slide: {\n    loop: true,\n    threshold: 100\n  },\n  useTransition: true,\n  momentum: false,\n  bounce: false,\n  stopPropagation: true\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Nested Scroll Options (v2.1.0+)\nDESCRIPTION: Illustrates how to configure the `nestedScroll` option with a `groupId` for BetterScroll instances in version 2.1.0 and later. The `groupId` is used to associate BetterScroll instances that should have their scrolling behavior coordinated.  Instances with the same `groupId` share a NestedScroll instance.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/nested-scroll.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// v2.1.0\n// parent bs\nnew BScroll('.outerWrapper', {\n  nestedScroll: {\n    groupId: 'dummy-divide' // string or number\n  }\n})\n// child bs\nnew BScroll('.innerWrapper', {\n  nestedScroll: {\n    groupId: 'dummy-divide'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Structure for BetterScroll\nDESCRIPTION: This HTML snippet demonstrates the basic structure required for BetterScroll to work correctly. The outer `wrapper` div acts as the container, and the `content` ul is the scrollable element. BetterScroll focuses on the first child element within the wrapper.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/README.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"wrapper\">\n  <ul class=\"content\">\n    <li>...</li>\n    <li>...</li>\n    ...\n  </ul>\n  <!-- 这里可以放一些其它的 DOM，但不会影响滚动 -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Registering Pullup Plugin\nDESCRIPTION: Code snippet demonstrating how to register the pullup plugin with BetterScroll using the `BScroll.use()` static method. This is a necessary step before using the plugin.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/pullup.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nimport Pullup from '@better-scroll/pull-up'\n\nBScroll.use(Pullup)\n```\n\n----------------------------------------\n\nTITLE: Integrating Movable Plugin with better-scroll\nDESCRIPTION: This code snippet demonstrates how to import the `Movable` plugin from `@better-scroll/movable` and integrate it into a `BScroll` instance. The `BScroll.use(Movable)` line registers the plugin, and the `movable: true` option in the BScroll constructor enables the movable area functionality. This requires the `@better-scroll/core` and `@better-scroll/movable` packages to be installed.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/movable/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nimport Movable from '@better-scroll/movable'\n\nBScroll.use(Movable)\n\nconst bs = new BScroll('.wrapper', {\n  movable: true\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing BetterScroll with Options (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to initialize a BetterScroll instance with specific configuration options. It imports the BetterScroll library, creates a new instance, and passes an object containing options for enabling vertical scrolling and click event handling.  This allows for a scrollable list that also responds to click events.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-options.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nlet scroll = new BScroll('.wrapper',{\n    scrollY: true,\n    click: true\n})\n```\n\n----------------------------------------\n\nTITLE: ProbeType Usage - JavaScript\nDESCRIPTION: This code snippet provides context for the different values available for `probeType` and how they affect when the scroll event is dispatched. The description elaborates on the different scenarios available to configure when a scroll event occurs.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/base-scroll-options.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// There are two scenarios for dispatching scroll:\n// 1. The finger acts on the scrolling area (content DOM),\n// 2. Invoke the scrollTo method or trigger the momentum scroll animation (in fact, the implementation is still Invoking the scrollTo method)\n\n// For the v2.1.0, the probeType has been unified\n\n// The probeType is:\n// 0, scroll event will not be dispatched at any time，\n// 1, and only when the finger is moving on the scroll area, a scroll event is dispatched every momentumLimitTime milliseconds.\n// 2, and only when the finger is moving on the scroll area, a scroll event is dispatched all the time.\n// 3, scroll events are dispatched at any time, including invoking scrollTo or triggering momentum\n```\n\n----------------------------------------\n\nTITLE: Using BetterScroll with Plugins\nDESCRIPTION: This JavaScript code snippet shows how to use BetterScroll with a plugin.  In this case, the `PullUp` plugin is imported and BetterScroll is initialized with the `pullUpLoad` option set to `true`. This enables pull-to-refresh or pull-to-load-more functionality.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/README.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nimport PullUp from '@better-scroll/pull-up'\n\nlet bs = new BScroll('.wrapper', {\n  pullUpLoad: true\n})\n```\n\n----------------------------------------\n\nTITLE: Require BetterScroll core (CommonJS)\nDESCRIPTION: This JavaScript code demonstrates how to import the BetterScroll core library using the CommonJS syntax. This is commonly used in Node.js environments.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/how-to-install.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar BScroll = require('@better-scroll/scroll')\n```\n\n----------------------------------------\n\nTITLE: Import BetterScroll core (ES Module)\nDESCRIPTION: This JavaScript code shows how to import the BetterScroll core library as an ES module. This requires a build tool like webpack or Parcel to handle the module resolution.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/how-to-install.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\n```\n\n----------------------------------------\n\nTITLE: Importing and Using BetterScroll Slide\nDESCRIPTION: Import the BetterScroll core and slide plugin, then call BScroll.use(Slide) to register the plugin. This makes the slide functionality available for your BetterScroll instances.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/slide.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nimport Slide from '@better-scroll/slide'\n\nBScroll.use(Slide)\n```\n\n----------------------------------------\n\nTITLE: Initializing BetterScroll with Options - JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize BetterScroll with various options.  It creates a new BScroll instance attached to the element with class '.wrapper' and configures pull-up loading, a scrollbar, and pull-down refresh. You'll need to have the better-scroll library installed and a DOM element with the class 'wrapper'.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/better-scroll/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport BScroll from 'better-scroll'\n\nconst bs = new BScroll('.wrapper', {\n  pullUpLoad: true,\n  scrollbar: true,\n  pullDownRefresh: true\n  // and so on\n})\n```\n\n----------------------------------------\n\nTITLE: Import and Use Movable Plugin\nDESCRIPTION: This JavaScript code snippet imports the BetterScroll core and the Movable plugin, then registers the plugin with BetterScroll using `BScroll.use()`. This makes the Movable plugin available for use with BetterScroll instances.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/movable.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nimport Movable from '@better-scroll/movable'\n\nBScroll.use(Movable)\n```\n\n----------------------------------------\n\nTITLE: Initializing BetterScroll with Infinity Plugin\nDESCRIPTION: This snippet shows how to import and initialize the InfinityScroll plugin in a JavaScript environment for use with BetterScroll. `BScroll.use(InfinityScroll)` registers the plugin for use with BetterScroll instances.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/infinity.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nimport InfinityScroll from '@better-scroll/infinity'\n\nBScroll.use(InfinityScroll)\n```\n\n----------------------------------------\n\nTITLE: Importing BetterScroll Core with ES Modules\nDESCRIPTION: Imports the core BetterScroll library in a JavaScript file using ES module syntax. This assumes a build system like webpack is configured to resolve modules from `node_modules`.  `BScroll` is then available for use in the module.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/how-to-install.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\n```\n\n----------------------------------------\n\nTITLE: Configuring BetterScroll Infinity Options\nDESCRIPTION: This TypeScript snippet illustrates the configuration options for the infinity plugin within a BetterScroll instance.  It demonstrates how to define the `fetch`, `render`, and `createTombstone` functions to handle data loading, rendering, and placeholder creation for the infinite scroll functionality. The fetch function must return a Promise.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/infinity.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nnew BScroll('.bs-wrapper', {\n  scrollY: true,\n  infinity: {\n    fetch(count) {\n      // 获取大于 count 数量的数据，该函数是异步的，它需要返回一个 Promise。\n      // case 1. resolve 数据数组Array<data>，来告诉 infinity 渲染数据，render 的第一个参数就是数据项\n      // case 2. resolve(false), 来停止无限滚动\n    },\n    render(item, div?: HTMLElement) {\n      // item 是 fetch 函数提供的每一个数据项，\n      // div 是页面回收的 DOM，可能不存在\n      // 如果 div 不存在，你需要创建一个新的 HTMLElement 元素\n      // 必须返回一个 HTMLElement\n    },\n    createTombstone() {\n      // 必须返回一个墓碑 DOM 节点。\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Registering BetterScroll Wheel Plugin\nDESCRIPTION: This snippet shows how to import the BetterScroll core and the Wheel plugin, and then register the plugin using the BScroll.use() static method. This is a necessary step to enable the wheel functionality within BetterScroll.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/wheel.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nimport Wheel from '@better-scroll/wheel'\n\nBScroll.use(Wheel)\n```\n\n----------------------------------------\n\nTITLE: Initializing Infinity Scroll with BetterScroll\nDESCRIPTION: This JavaScript code snippet demonstrates how to integrate the InfinityScroll plugin into a BetterScroll instance. It imports both BScroll and InfinityScroll, uses the plugin with BScroll.use(), and then configures a new BScroll instance with the infinity options.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/infinity/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nimport InfinityScroll from '@better-scroll/infinity'\nBScroll.use(InfinityScroll)\n\nconst bs = new BScroll('.wrapper', {\n  infinity: {\n    fetch(count) {\n      // Fetch data that is larger than count, the function is asynchronous, and it needs to return a Promise.。\n      // After you have successfully fetch the data, you need resolve an array of data (or resolve Promise).\n      // Each element of the array is list data, which will be rendered when the render method executes。\n      // If there is no data, you can resolve (false) to tell the infinite scroll list that there is no more data。\n    },\n    render(item, div) {\n      // Rendering each element node, item is data, and div is a container for wrapping element nodes.\n      // The function needs to return to the rendered DOM node.\n    },\n    createTombstone() {\n      // Returns a tombstone DOM node.。\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing BetterScroll Core\nDESCRIPTION: This JavaScript code imports the BetterScroll core module and initializes a new instance of BetterScroll. The `.div` selector specifies the wrapper element for the scrollable content.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nconst bs = new BScroll('.div')\n```\n\n----------------------------------------\n\nTITLE: Using putAt instance method\nDESCRIPTION: These JavaScript code examples demonstrate the usage of the `putAt` instance method of the BetterScroll Movable plugin.  The method positions the content element within the wrapper at specified x and y coordinates. The coordinates can be numerical or string-based ('center', 'left', 'right', 'top', 'bottom'). An optional animation duration (in milliseconds) can be specified.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/movable.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst bs = new BScroll('.bs-wrapper', {\n  bindToTarget: true,\n  scrollX: true,\n  scrollY: true,\n  freeScroll: true,\n  movable: true\n})\n\n// Placed in the center of the wrapper\nbs.putAt('center', 'center', 0)\n\n// Placed in the right-bottom corner of the wrapper, the animation duration is 1s\nbs.putAt('right', 'bottom', 1000)\n```\n\n----------------------------------------\n\nTITLE: TypeScript PullUpLoadOptions Interface\nDESCRIPTION: Defines the TypeScript interface for the PullUpLoadOptions, which allows configuring the pullup plugin. Includes the `threshold` option to set the distance from the bottom at which the `pullingUp` event is triggered.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/pullup.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport type PullUpLoadOptions = Partial<PullUpLoadConfig> | true\n\nexport interface PullUpLoadConfig {\n  threshold: number\n}\n```\n\n----------------------------------------\n\nTITLE: Using Observe Image Plugin\nDESCRIPTION: This code demonstrates how to import and use the @better-scroll/observe-image plugin with BetterScroll. The plugin automatically refreshes the scrollable area when images inside the BetterScroll wrapper load. It requires BetterScroll and the ObserveImage plugin as dependencies.  The plugin takes a boolean or an object as configuration and uses the `refresh` method internally.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/observe-image.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nimport ObserveImage from '@better-scroll/observe-image'\nBScroll.use(ObserveImage)\n\nnew BScroll('.bs-wrapper', {\n  //...\n  observeImage: true\n})\n```\n\n----------------------------------------\n\nTITLE: Using @better-scroll/infinity in JavaScript\nDESCRIPTION: This code snippet demonstrates how to import and use the @better-scroll/infinity plugin with BetterScroll. It shows how to initialize BetterScroll with the infinity option, including the fetch, render, and createTombstone functions.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/infinity/README_zh-CN.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nimport InfinityScroll from '@better-scroll/infinity'\nBScroll.use(InfinityScroll)\n\nconst bs = new BScroll('.wrapper', {\n  infinity: {\n    fetch(count) {\n      // 获取大于 count 数量的数据，该函数是异步的，它需要返回一个 Promise。\n      // 成功获取数据后，你需要 resolve 数据数组（也可以 resolve 一个 Promise）。\n      // 数组的每一个元素是列表数据，在 render 方法执行的时候会传递这个数据渲染。\n      // 如果没有数据的时候，你可以 resolve(false)，来告诉无限滚动列表已经没有更多数据了。\n    }\n    render(item, div) {\n      // 渲染每一个元素节点，item 是数据，div 是包裹元素节点的容器。\n      // 该函数需要返回渲染后的 DOM 节点。\n    },\n    createTombstone() {\n      // 返回一个墓碑 DOM 节点。\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Nested Scroll Plugin\nDESCRIPTION: This snippet shows how to import BetterScroll and the NestedScroll plugin and use the `BScroll.use()` method to register the plugin. This enables the nested scroll feature in BetterScroll.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/nested-scroll.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nimport NestedScroll from '@better-scroll/nested-scroll'\n\nBScroll.use(NestedScroll)\n```\n\n----------------------------------------\n\nTITLE: Initializing BetterScroll Core\nDESCRIPTION: This snippet demonstrates how to initialize BetterScroll with its core functionality. It imports the BScroll class and creates an instance, passing in a wrapper element selector and configuration options. This provides basic scrolling capabilities for the specified element.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/use.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nlet bs = new BScroll('.wrapper', {\n  // ...... see options\n})\n```\n\n----------------------------------------\n\nTITLE: Installing BetterScroll with NPM\nDESCRIPTION: This code snippet demonstrates how to install the BetterScroll library using npm. The first command installs the full-featured version, while the second installs only the core functionality.  The -S flag saves the package as a dependency in package.json.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install better-scroll -S # install 2.x，with full-featured plugin.\n\nnpm install @better-scroll/core # only CoreScroll\n```\n\n----------------------------------------\n\nTITLE: Configuring eventPassthrough for Vertical Scrolling in BetterScroll (JS)\nDESCRIPTION: This snippet configures the `eventPassthrough` option in BetterScroll to allow vertical native scrolling when using horizontal scrolling within the BetterScroll container. This prevents the horizontal scroll from blocking the browser's vertical scrollbar.  The `eventPassthrough` is set to `'vertical'` to enable this behavior. Requires BetterScroll library.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/FAQ/diagnosis.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nLet bs = new BScroll('.wrapper', {\n      eventPassthrough: 'vertical' // keep vertical native scrolling\n    })\n```\n\n----------------------------------------\n\nTITLE: Listening for 'pullingUp' event with PullUp plugin\nDESCRIPTION: This snippet demonstrates how to listen for the 'pullingUp' event of the PullUp plugin in BetterScroll. This event is triggered when the bottom pull-up distance exceeds the threshold.  The PullUp plugin needs to be initialized and the `pullUpLoad` option enabled.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/base-scroll-api.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport BetterScroll from '@better-scroll/core'\nimport PullUp from '@better-scroll/pull-up'\n\nBetterScroll.use(PullUp)\nconst bs = new BetterScroll('.wrapper', {\n  pullUpLoad: true\n})\n\nbs.on('pullingUp', () => {\n  await fetchData()\n  bs.finishPullUp()\n})\n```\n\n----------------------------------------\n\nTITLE: Registering BetterScroll Indicators Plugin\nDESCRIPTION: Imports the BScroll and Indicators modules and registers the Indicators plugin with BScroll using the `use()` method.  This makes the Indicators plugin available for use with BetterScroll instances.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/indicators.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nimport Indicators from '@better-scroll/indicators'\n\nBScroll.use(Indicators)\n```\n\n----------------------------------------\n\nTITLE: Initializing BetterScroll with MouseWheel Plugin\nDESCRIPTION: Import the BScroll and MouseWheel modules, register the plugin, and initialize a new BScroll instance with the mouseWheel option.  The mouseWheel option configures the behavior of the mouse wheel scrolling, including speed, invert, and easeTime.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/mouse-wheel.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nimport MouseWheel from '@better-scroll/mouse-wheel'\nBScroll.use(MouseWheel)\n\nnew BScroll('.bs-wrapper', {\n  //...\n  mouseWheel: {\n    speed: 20,\n    invert: false,\n    easeTime: 300\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Plugin Methods via BetterScroll Instance\nDESCRIPTION: This code snippet shows how to access a plugin's method that is delegated to the BetterScroll instance.  It imports BetterScroll and the desired plugin, registers the plugin, and then instantiates BetterScroll. The plugin's methods are then called directly on the BetterScroll instance (e.g., `bs.zoomTo`).\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n  import BScroll from '@better-scroll/core'\n  import Zoom from '@better-scroll/zoom'\n\n  BScroll.use(Zoom)\n\n  const bs = new BScroll('#scroll-wrapper', {\n    freeScroll: true,\n    scrollX: true,\n    scrollY: true,\n    disableMouse: true,\n    useTransition: true,\n    zoom: {\n      start: 1,\n      min: 0.5,\n      max: 2\n    }\n  })\n\n  bs.zoomTo(1.5, 0, 0) // 不用关心 zoom 插件实例，直接通过 bs 获取暴露的属性或者方法。\n```\n\n----------------------------------------\n\nTITLE: Installing BetterScroll Core\nDESCRIPTION: This command installs the core BetterScroll package using npm. This is the first step to using BetterScroll's core scrolling functionality.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @better-scroll/core --save\n```\n\n----------------------------------------\n\nTITLE: Initializing BetterScroll with Full Scrollbar Options\nDESCRIPTION: Creates a new BScroll instance with all scrollbar options configured. This demonstrates how to customize the scrollbar's appearance, interaction, and animation behavior.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/scroll-bar.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst bs = new BScroll('.wrapper', {\n  scrollbar: {\n    fade: true,\n    interactive: false,\n    // supported in v2.2.0\n    customElements: [],\n    minSize: 8,\n    scrollbarTrackClickable: false,\n    scrollbarTrackOffsetType: 'step',\n    scrollbarTrackOffsetTime: 300,\n    // supported in v2.4.0\n    fadeInTime: 250,\n    fadeOutTime: 500\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Installing MouseWheel Plugin with NPM/Yarn\nDESCRIPTION: These commands install the @better-scroll/mouse-wheel plugin using either npm or yarn. The `--save` flag (for npm) ensures the plugin is added as a project dependency.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/mouse-wheel.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @better-scroll/mouse-wheel --save\n\n// or\n\nyarn add @better-scroll/mouse-wheel\n```\n\n----------------------------------------\n\nTITLE: Installing Zoom Plugin using NPM or Yarn\nDESCRIPTION: This code snippet shows how to install the BetterScroll zoom plugin using either npm or yarn. It's a prerequisite for using the zoom functionality.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/zoom.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @better-scroll/zoom --save\n\n// or\n\nyarn add @better-scroll/zoom\n```\n\n----------------------------------------\n\nTITLE: Initializing BetterScroll Core\nDESCRIPTION: Imports and initializes BetterScroll core. This creates a new BScroll instance, enabling scrolling on the specified DOM element ('.div').  The wrapper element is passed as a selector to the BScroll constructor.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/base-scroll.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\n  const bs = new BScroll('.div')\n```\n\n----------------------------------------\n\nTITLE: Initializing BetterScroll with Scrollbar\nDESCRIPTION: Creates a new BScroll instance with scrollY enabled and the scrollbar option set to true. This enables a default scrollbar for vertical scrolling within the specified DOM element.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/scroll-bar.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nnew BScroll('.bs-wrapper', {\n  scrollY: true,\n  scrollbar: true\n})\n```\n\n----------------------------------------\n\nTITLE: Install ObserveDOM Plugin\nDESCRIPTION: This code snippet shows how to install the @better-scroll/observe-dom plugin using npm or yarn.  It adds the plugin as a dependency to your project, allowing BetterScroll to detect DOM changes and refresh accordingly.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/observe-dom.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @better-scroll/observe-dom --save\n\n// or\n\nyarn add @better-scroll/observe-dom\n```\n\n----------------------------------------\n\nTITLE: Initializing BetterScroll with PullDown Refresh\nDESCRIPTION: This example shows how to create a `BetterScroll` instance with the `pullDownRefresh` option enabled.  Setting `pullDownRefresh` to `true` uses the default configuration for the plugin. This activates the pull-to-refresh functionality on the element with the class `.bs-wrapper`.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/pulldown.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nnew BScroll('.bs-wrapper', {\n  pullDownRefresh: true\n})\n```\n\n----------------------------------------\n\nTITLE: Using @better-scroll/mouse-wheel Plugin\nDESCRIPTION: This code snippet demonstrates how to import and use the @better-scroll/mouse-wheel plugin with BetterScroll. It initializes a BScroll instance with the MouseWheel plugin and configures the mouseWheel options.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/mouse-wheel/README_zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nimport MouseWheel from '@better-scroll/mouse-wheel'\nBScroll.use(MouseWheel)\n\nconst bs = new BScroll('.wrapper', {\n  // ...\n  mouseWheel: {\n    speed: 2,\n    invert: false,\n    easeTime: 300,\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using the `putAt` Method\nDESCRIPTION: This code demonstrates how to use the `putAt` method to position the content element within the BetterScroll wrapper.  It initializes a BetterScroll instance with the Movable plugin and then uses `putAt` to move the content to the center and bottom-right corners of the wrapper with specified durations.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/movable.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst bs = new BScroll('.bs-wrapper', {\n  bindToTarget: true,\n  scrollX: true,\n  scrollY: true,\n  freeScroll: true,\n  movable: true\n})\n\nbs.putAt('center', 'center', 0) // 放置在 wrapper 的正中心\nbs.putAt('right', 'bottom', 1000) // 放置在 wrapper 的右下角，动画时长 1s\n```\n\n----------------------------------------\n\nTITLE: Installing BetterScroll Scrollbar Plugin with NPM\nDESCRIPTION: Installs the @better-scroll/scroll-bar plugin using npm. This command adds the scrollbar plugin as a dependency to your project.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/scroll-bar.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @better-scroll/scroll-bar --save\n```\n\n----------------------------------------\n\nTITLE: Installing Observe Image Plugin\nDESCRIPTION: Installation instructions for the @better-scroll/observe-image plugin using npm or yarn.  This plugin is used to observe the loading of image elements within the BetterScroll wrapper and automatically call the refresh method.  No specific inputs or outputs are generated by these commands; they modify the project's dependencies.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/observe-image.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @better-scroll/observe-image --save\n\n// or\n\nyarn add @better-scroll/observe-image\n```\n\n----------------------------------------\n\nTITLE: Importing and Using MouseWheel Plugin with BScroll\nDESCRIPTION: This code snippet demonstrates how to import the MouseWheel plugin and integrate it with Better Scroll.  It initializes a BScroll instance with the MouseWheel plugin enabled and configures the plugin's options such as speed, invert, and easeTime.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/mouse-wheel/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nimport MouseWheel from '@better-scroll/mouse-wheel'\nBScroll.use(MouseWheel)\n\nconst bs = new BScroll('.wrapper', {\n  // ...\n  mouseWheel: {\n    speed: 2,\n    invert: false,\n    easeTime: 300,\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Installing BetterScroll MouseWheel Plugin with NPM\nDESCRIPTION: Install the @better-scroll/mouse-wheel package using npm. This plugin extends BetterScroll's capabilities to support mouse wheel scrolling.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/mouse-wheel.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @better-scroll/mouse-wheel --save\n```\n\n----------------------------------------\n\nTITLE: Integrating BetterScroll Scrollbar in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to integrate the Scrollbar plugin with BetterScroll. It requires importing BScroll from '@better-scroll/core' and Scrollbar from '@better-scroll/scroll-bar'. The Scrollbar plugin is then registered with BScroll using the `use` method. Finally, a BScroll instance is created with the `scrollbar` option set to `true` to enable the scrollbar.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/scroll-bar/README_zh-CN.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nimport Scrollbar from '@better-scroll/scroll-bar'\nBScroll.use(Scrollbar)\n\nconst bs = new BScroll('.wrapper', {\n  scrollbar: true\n})\n```\n\n----------------------------------------\n\nTITLE: Initialize BetterScroll with Movable\nDESCRIPTION: This JavaScript code snippet initializes a BetterScroll instance with the Movable plugin enabled.  It sets configuration options such as `bindToTarget`, `scrollX`, `scrollY`, `freeScroll`, `bounce`, and `movable` to enable movement functionality. `bindToTarget` must be set to `true` to bind touch events to the element to be moved.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/movable.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnew BScroll('.bs-wrapper', {\n  bindToTarget: true,\n  scrollX: true,\n  scrollY: true,\n  freeScroll: true,\n  bounce: true\n  movable: true // for movable plugin\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Pull-Down Refresh with BetterScroll (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to import and use the Pulldown plugin with BetterScroll to enable pull-down refresh functionality. It initializes a BetterScroll instance with the pullDownRefresh option set to true.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/pull-down/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nimport Pulldown from '@better-scroll/pull-down'\nBScroll.use(Pulldown)\n\nconst bs = new BScroll('.wrapper', {\n  pullDownRefresh: true\n})\n```\n\n----------------------------------------\n\nTITLE: Import and Use PullUp plugin with BetterScroll\nDESCRIPTION: This snippet demonstrates how to import the PullUp plugin and integrate it with BetterScroll. It shows the necessary steps to enable the pull-up load feature. The BScroll.use(PullUp) line registers the plugin, and setting pullUpLoad: true in the BScroll constructor options activates the functionality.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/pull-up/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nimport PullUp from '@better-scroll/pull-up'\nBScroll.use(PullUp)\n\nconst bs = new BScroll('.wrapper', {\n  pullUpLoad: true\n})\n```\n\n----------------------------------------\n\nTITLE: Listening for scroll event\nDESCRIPTION: This JavaScript snippet shows how to listen for the `scroll` event in BetterScroll using the `on` method. It imports BetterScroll, creates an instance, and then attaches a callback function `onScroll` to the `scroll` event. The callback logs the current x and y coordinates.  Requires the `@better-scroll/core` package.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-api.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nlet scroll = new BScroll('.wrapper', {\n  probeType: 3\n})\nfunction onScroll(pos) {\n    console.log(`Now position is x: ${pos.x}, y: ${pos.y}`)\n}\nscroll.on('scroll', onScroll)\n```\n\n----------------------------------------\n\nTITLE: Initializing Enhanced Scroll with Pull-Up Plugin in JavaScript\nDESCRIPTION: This snippet shows how to initialize Better Scroll with the pull-up plugin for load-more functionality. It imports both the BScroll core and the Pullup plugin, registers the plugin with BScroll.use(), and then initializes a new BScroll instance with probeType and pullUpLoad options enabled. Requires the '@better-scroll/core' and '@better-scroll/pull-up' packages.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/use.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nimport Pullup from '@better-scroll/pull-up'\n\n// 注册插件\nBScroll.use(Pullup)\n\nlet bs = new BScroll('.wrapper', {\n  probeType: 3,\n  pullUpLoad: true\n})\n```\n\n----------------------------------------\n\nTITLE: Initialize BetterScroll with probeType\nDESCRIPTION: This snippet demonstrates how to initialize BetterScroll with the `probeType` option set to `3`. This configuration ensures that the `scroll` event is emitted in real-time as the user scrolls, providing more accurate and frequent updates on the scrolling position.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/FAQ/diagnosis.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet bs = new BScroll('.div', {\n  probeType: 3 // 实时派发\n})\n```\n\n----------------------------------------\n\nTITLE: Ratio Type Definition\nDESCRIPTION: This TypeScript code defines the `Ratio` type, used to specify the ratio of scroll distances in the x and y directions between related BetterScroll instances. This allows fine-grained control over parallax scrolling effects.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/indicators.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype Ratio = {\n    // Specify the ratio of the scroll distance of x\n    x: number\n    // Specify the ratio of the scroll distance of y\n    y: number\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Nested Scroll with options (v2.1.0)\nDESCRIPTION: This snippet demonstrates how to configure nested scrolling by setting the `nestedScroll` option to `true` or configuring a `groupId`. The `groupId` enables the sharing of nestedScroll instances between multiple BetterScroll instances, coordinating their scrolling behavior.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/nested-scroll.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// < v2.1.0\n// parent bs\nnew BScroll('.outerWrapper', {\n  nestedScroll: true\n})\n// child bs\nnew BScroll('.innerWrapper', {\n  nestedScroll: true\n})\n\n// >= v2.1.0\n// parent bs\nnew BScroll('.outerWrapper', {\n  nestedScroll: {\n    groupId: 'dummy-divide' // string or number\n  }\n})\n// child bs\nnew BScroll('.innerWrapper', {\n  nestedScroll: {\n    groupId: 'dummy-divide'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using BetterScroll Indicators Plugin\nDESCRIPTION: This code snippet demonstrates how to import and use the BetterScroll Indicators plugin. It first imports both BScroll and Indicators, then registers the plugin with BScroll. After that it creates a new BScroll instance with the indicators option configured.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/indicators.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nimport Indicators from '@better-scroll/indicators'\n\nBScroll.use(Indicators)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nnew BScroll('.wrapper', {\n  indicators: {\n    // For details, please refer to the demo below\n    relationElement: someHTMLElement\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Scrollbar Track Click Configuration\nDESCRIPTION: Enables clicking on the scrollbar track to trigger scrolling. The `click: true` option in BetterScroll is required for click events to be properly detected within the scrollable content.  `scrollbarTrackClickable: true` enables the track click functionality.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/scroll-bar.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nnew BScroll('.bs-wrapper', {\n  scrollY: true,\n  click: true // 必不可少\n  scrollbar: {\n    scrollbarTrackClickable: true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Listening to 'pullingUp' event (__pull-up__)\nDESCRIPTION: This code snippet demonstrates how to listen to the 'pullingUp' event, which is triggered when the bottom pulldown distance exceeds the threshold. It requires the `pull-up` plugin. It imports BetterScroll and Pullup, uses the plugin, and attaches a callback function to the 'pullingUp' event using `bs.on('pullingUp', () => {})`. It also includes calls to `fetchData()` and `bs.finishPullUp()`.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-api.md#_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport BetterScroll from '@better-scroll/core'\nimport Pullup from '@better-scroll/pull-up'\n\nBetterScroll.use(Pullup)\nconst bs = new BetterScroll('.wrapper', {\n  pullUpLoad: true\n})\n\nbs.on('pullingUp', () => {\n  await fetchData()\n  bs.finishPullUp()\n})\n```\n\n----------------------------------------\n\nTITLE: Integrating Indicators Plugin with BetterScroll - JavaScript\nDESCRIPTION: This code snippet demonstrates how to integrate the `@better-scroll/indicators` plugin with BetterScroll. It imports both modules, registers the plugin with BScroll, and then initializes a BScroll instance with the `indicators` option. The `indicators` option specifies the related HTML element for the indicator.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/indicators/README_zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nimport Indicators from '@better-scroll/indicators'\nBScroll.use(Indicators)\n\nconst bs = new BScroll('.wrapper', {\n  indicators: [\n    relationElement: someHTMLElement\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring PullDownRefresh Options\nDESCRIPTION: This snippet demonstrates how to configure the `threshold` and `stop` options for the `pullDownRefresh` feature within a `BetterScroll` instance. The `threshold` option specifies the distance required for triggering the `pullingDown` event, while the `stop` option sets the rebound distance after the event is dispatched.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/pulldown.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst bs = new BScroll('.wrapper', {\n  pullDownRefresh: true\n})\n\n// equals\n\nconst bs = new BScroll('.wrapper', {\n  pullDownRefresh: {\n    threshold: 90,\n    stop: 40\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Movable Plugin with better-scroll JavaScript\nDESCRIPTION: This code snippet demonstrates how to import and use the Movable plugin with better-scroll.  It imports both BScroll core and the Movable plugin, registers the plugin with BScroll, and then initializes a BScroll instance with the movable option set to true.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/movable/README_zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nimport Movable from '@better-scroll/movable'\n\nBScroll.use(Movable)\n\nconst bs = new BScroll('.wrapper', {\n  movable: true\n})\n```\n\n----------------------------------------\n\nTITLE: Installing BetterScroll Scrollbar Plugin with Yarn\nDESCRIPTION: Installs the @better-scroll/scroll-bar plugin using yarn. This command adds the scrollbar plugin as a dependency to your project.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/scroll-bar.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @better-scroll/scroll-bar\n```\n\n----------------------------------------\n\nTITLE: Using Observe DOM Plugin with BetterScroll\nDESCRIPTION: This code snippet demonstrates how to import and use the @better-scroll/observe-dom plugin with BetterScroll. It registers the plugin and then initializes BetterScroll with the `observeDOM` option set to `true`.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/observe-dom.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\n  import ObserveDOM from '@better-scroll/observe-dom'\n  BScroll.use(ObserveDOM)\n\n  new BScroll('.bs-wrapper', {\n    //...\n    observeDOM: true // 开启 observe-dom 插件\n  })\n```\n\n----------------------------------------\n\nTITLE: Import and Initialize Indicators with BetterScroll\nDESCRIPTION: This JavaScript code snippet demonstrates how to import the BScroll core and Indicators plugin, then use the plugin to enhance a BScroll instance. It shows the basic setup for incorporating the indicators functionality into a scrolling container.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/indicators/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nimport Indicators from '@better-scroll/indicators'\nBScroll.use(Indicators)\n\nconst bs = new BScroll('.wrapper', {\n  indicators: [\n    relationElement: someHTMLElement\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Using BetterScroll with Full Plugins\nDESCRIPTION: This snippet demonstrates how to use the BetterScroll package with full plugin capabilities. It imports BScroll from the 'better-scroll' package and initializes it with various plugin-related options. This provides a convenient way to use all available plugins without registering them individually.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/use.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from 'better-scroll'\n\nlet bs = new BScroll('.wrapper', {\n  // ...\n  pullUpLoad: true,\n  wheel: true,\n  scrollbar: true,\n  // and so on\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Bounce Options (JavaScript)\nDESCRIPTION: This snippet illustrates configuring individual bounce behaviors for different sides of the scrollable area in BetterScroll. By providing an object to the `bounce` option, you can enable or disable bouncing on the top, bottom, left, and right edges independently.  Setting a side to `false` will prevent the bounce effect on that side when the content exceeds the container's bounds.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-options.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nbounce: {\n  top: true,\n  bottom: true,\n  left: true,\n  right: true\n}\n```\n\n----------------------------------------\n\nTITLE: Pull-up Plugin Configuration Example\nDESCRIPTION: This example shows how to configure the `pullUpLoad` option when initializing a `BScroll` instance. It demonstrates how to enable pull-up loading with the default threshold.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/pullup.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst bs = new BScroll('.wrapper', {\n  pullUpLoad: true\n})\n\n// equals\n\nconst bs = new BScroll('.wrapper', {\n  pullUpLoad: {\n    threshold: 0\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing BetterScroll with Wheel Options\nDESCRIPTION: Initialize a BetterScroll instance with the `wheel` option set to true to enable the wheel plugin.  The plugin allows users to create Picker components similar to those found in iOS. Configuring wheel options enables the wheel functionality within the BetterScroll instance.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/wheel.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet bs = new BScroll('.bs-wrapper', {\n  wheel: true // wheel options\n})\n```\n\n----------------------------------------\n\nTITLE: Using BetterScroll Scrollbar Plugin\nDESCRIPTION: Imports BScroll and ScrollBar, then registers the ScrollBar plugin with BScroll. This allows the scrollbar functionality to be used with BScroll instances.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/scroll-bar.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nimport ScrollBar from '@better-scroll/scroll-bar'\n\nBScroll.use(ScrollBar)\n```\n\n----------------------------------------\n\nTITLE: Importing and Registering Movable Plugin\nDESCRIPTION: This code imports the BScroll core and the Movable plugin, then registers the plugin with BScroll. This step is necessary to enable the Movable plugin's functionality within BetterScroll.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/movable.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nimport Movable from '@better-scroll/movable'\n\nBScroll.use(Movable)\n```\n\n----------------------------------------\n\nTITLE: Initialize BetterScroll with plugins (Script tag)\nDESCRIPTION: This JavaScript code shows how to initialize BetterScroll with all plugins after including it via a script tag, using `BetterScroll.createBScroll` to create the instance.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/how-to-install.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nlet bs = BetterScroll.createBScroll('.wrapper', {})\n```\n\n----------------------------------------\n\nTITLE: Integrating Pull-Down Refresh in BetterScroll (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to import and use the @better-scroll/pull-down plugin with BetterScroll. It first imports BScroll and Pulldown, then uses the Pulldown plugin. Finally, it initializes a new BScroll instance with the pullDownRefresh option set to true, enabling pull-down refresh functionality.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/pull-down/README_zh-CN.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nimport Pulldown from '@better-scroll/pull-down'\nBScroll.use(Pulldown)\n\nconst bs = new BScroll('.wrapper', {\n  pullDownRefresh: true\n})\n```\n\n----------------------------------------\n\nTITLE: Using BetterScroll Wheel Instance Methods\nDESCRIPTION: Illustrates how to use instance methods such as `getSelectedIndex()` and `wheelTo()` which are proxied to the BetterScroll instance.  The methods interact with the wheel plugin after BetterScroll and the plugin are initialized.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/wheel.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nimport Wheel from '@better-scroll/wheel'\n\nBScroll.use(Wheel)\n\nconst bs = new BScroll('.bs-wrapper', {\n  wheel: true\n})\n\nbs.getSelectedIndex()\nbs.wheelTo(1, 300)\n```\n\n----------------------------------------\n\nTITLE: Listening to wheelIndexChanged Event\nDESCRIPTION: This snippet demonstrates how to listen to the `wheelIndexChanged` event, which is emitted when the selected item in the wheel picker changes.  The event handler receives the index of the newly selected item.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/wheel.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nimport Wheel from '@better-scroll/wheel'\n\nBScroll.use(Wheel)\n\nconst bs = new BScroll('.bs-wrapper', {\n  wheel: true\n})\n\nbs.on('wheelIndexChanged', (index) => {\n  console.log(index)\n})\n```\n\n----------------------------------------\n\nTITLE: Getting All NestedScroll Instances\nDESCRIPTION: This TypeScript snippet showcases the usage of the `getAllNestedScrolls()` static method to retrieve an array containing all current nestedScroll instances. This can be useful for debugging or global management of nested scrolling.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/nested-scroll.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport NestedScroll from '@better-scroll/nested-scroll'\n\nconst nestedScrolls: NestedScroll[] = NestedScroll.getAllNestedScrolls()\n```\n\n----------------------------------------\n\nTITLE: Initializing Wheel Plugin with BetterScroll (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to import and use the @better-scroll/wheel plugin with BetterScroll. It initializes a BScroll instance with the wheel plugin, specifying configuration options such as selected index and CSS classes for styling the wheel component.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/wheel/README_zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nimport Wheel from '@better-scroll/wheel'\nBScroll.use(Wheel)\n\nconst bs = new BScroll('.wheel-wrapper', {\n  wheel: {\n    selectedIndex: 0,\n    wheelWrapperClass: 'wheel-scroll',\n    wheelItemClass: 'wheel-item',\n    wheelDisabledItemClass: 'wheel-disabled-item'\n  },\n  probeType: 3\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing BetterScroll with Quadrant Option\nDESCRIPTION: This JavaScript snippet shows how to initialize BetterScroll with the `quadrant` option set to `2`. This configuration is recommended when the wrapper's parent or ancestor element has a rotation angle between (45, 135] degrees. The `BScroll` constructor is used with a selector for the wrapper element and an options object containing the `quadrant` property.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-options.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nlet bs = new BScroll('.wrapper', {\n   quadrant: 2\n})\n```\n\n----------------------------------------\n\nTITLE: Zoom Plugin Initialization\nDESCRIPTION: This JavaScript code snippet demonstrates how to import and use the Zoom plugin with BetterScroll. It initializes a BScroll instance with the Zoom plugin, sets up free scrolling, and configures zoom parameters like start, min, and max zoom levels.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/zoom/README_zh-CN.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nimport Zoom from '@better-scroll/zoom'\nBScroll.use(Zoom)\n\nconst bs = new BScroll('.zoom-wrapper', {\n  freeScroll: true,\n  scrollX: true,\n  scrollY: true,\n  disableMouse: true,\n  useTransition: true,\n  zoom: {\n    start: 1,\n    min: 0.5,\n    max: 2\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Initialize BetterScroll with click enabled\nDESCRIPTION: This snippet shows how to initialize BetterScroll with the `click` option set to `true`. This enables BetterScroll to manage click event dispatch, ensuring that click events are properly triggered within the scrollable area. This is necessary because BetterScroll's touch event handling can interfere with the default click event behavior.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/FAQ/diagnosis.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet bs = new BScroll('.wrapper', {\n  click: true\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling Click Events in BetterScroll (JS)\nDESCRIPTION: This snippet enables click event dispatching in BetterScroll. By default, BetterScroll might prevent click events due to `e.preventDefault()`. Setting `click` to `true` allows BetterScroll to manage the dispatch of click events within its content. Requires BetterScroll library.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/FAQ/diagnosis.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nLet bs = new BScroll('.wrapper', {\n      click: true\n    })\n```\n\n----------------------------------------\n\nTITLE: Integrating BetterScroll Plugins\nDESCRIPTION: This snippet shows how to integrate additional plugins like pull-up functionality into BetterScroll. It imports the BScroll class and the desired plugin, then registers the plugin using `BScroll.use()`.  Finally, it initializes BetterScroll with the wrapper element and configures options related to the plugin.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/use.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nimport Pullup from '@better-scroll/pull-up'\n\n// register plugin\nBScroll.use(Pullup)\n\nlet bs = new BScroll('.wrapper', {\n  probeType: 3,\n  pullUpLoad: true\n})\n```\n\n----------------------------------------\n\nTITLE: BetterScroll Instance Methods Example\nDESCRIPTION: Demonstrates the methods proxied to the BetterScroll instance (finishPullUp, openPullUp, closePullUp) and how to use them after registering and initializing the pullup plugin. These methods control the behavior of the pull-up-to-load feature.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/pullup.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nimport PullUp from '@better-scroll/pull-up'\n\nBScroll.use(PullUp)\n\nconst bs = new BScroll('.bs-wrapper', {\n  pullUpLoad: true\n})\n\nbs.finishPullUp()\nbs.openPullUp({})\nbs.closePullUp()\n```\n\n----------------------------------------\n\nTITLE: Initializing BetterScroll with Scrollbar\nDESCRIPTION: Initializes a BetterScroll instance with the scrollbar plugin enabled.  `scrollY: true` enables vertical scrolling, and `scrollbar: true` activates the default scrollbar plugin options.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/scroll-bar.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnew BScroll('.bs-wrapper', {\n  scrollY: true,\n  scrollbar: true\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Zoom Options in BetterScroll\nDESCRIPTION: This code snippet shows how to configure the zoom options within a BetterScroll instance. It includes settings for `freeScroll`, `scrollX`, `scrollY`, and specific zoom parameters like `start`, `min`, and `max` zoom levels. These settings control how the zoom functionality behaves.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/zoom.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnew BScroll('.bs-wrapper', {\n  freeScroll: true,\n  scrollX: true,\n  scrollY: true,\n  zoom: {\n    start: 1,\n    min: 0.5,\n    max: 2\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Plugin Methods via Property Proxy\nDESCRIPTION: This snippet demonstrates how to use a method exposed by a BetterScroll plugin, specifically the `zoomTo` method from the Zoom plugin. Plugin methods and properties are proxied to the BetterScroll instance (`bs`) using `Object.defineProperty`. This allows direct access to plugin functionalities through the `bs` instance.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n  import BScroll from '@better-scroll/core'\n  import Zoom from '@better-scroll/zoom'\n\n  BScroll.use(Zoom)\n\n  const bs = new BScroll('#scroll-wrapper', {\n    freeScroll: true,\n    scrollX: true,\n    scrollY: true,\n    disableMouse: true,\n    useTransition: true,\n    zoom: {\n      start: 1,\n      min: 0.5,\n      max: 2\n    }\n  })\n\n  bs.zoomTo(1.5, 0, 0) // zoomTo from Zoom Plugin is proxied to bs instance\n```\n\n----------------------------------------\n\nTITLE: Default Wheel Options Configuration\nDESCRIPTION: This snippet displays the default options used when the `wheel` option is simply set to `true`.  It shows the default values for `wheelWrapperClass`, `wheelItemClass`, `rotate`, `adjustTime`, `selectedIndex`, and `wheelDisabledItemClass`, allowing for a clearer understanding of the default behavior.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/wheel.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst bs = new BScroll('.wrapper', {\n  wheel: true\n})\n\n// 相当于\n\nconst bs = new BScroll('.wrapper', {\n  wheel: {\n    wheelWrapperClass: 'wheel-scroll',\n    wheelItemClass: 'wheel-item',\n    rotate: 25,\n    adjustTime: 400,\n    selectedIndex: 0,\n    wheelDisabledItemClass: 'wheel-disabled-item'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configure Initial Zoom Origin\nDESCRIPTION: Configures the initial origin point when initializing zoom. Examples show configuring with numeric offsets as well as string values like 'left', 'right', 'center', 'top', and 'bottom'.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/zoom.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nnew BScroll('.bs-wrapper', {\n  // ... other configuration\n  zoom: {\n    initialOrigin: [50, 50], // Based on 'scaled element', offsetLeft is 50px, offsetRight is 50px\n    initialOrigin: [0, 0], // Based on 'scaled element', the left vertex\n    initialOrigin: ['left', 'top'], // same as above\n    initialOrigin: ['center', 'center'], // Based on 'scaled element', center position\n    initialOrigin: ['right', 'top'], // Based on 'scaled element', the right vertex\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Full-Featured Scroll with Better Scroll in JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize Better Scroll with all available plugins. It imports the 'better-scroll' package which includes all plugin capabilities, and creates a new BScroll instance with options such as pullUpLoad, wheel, and scrollbar enabled. It's recommended to use this approach only when all features are required due to the increased bundle size. Requires the 'better-scroll' package.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/use.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from 'better-scroll'\n\nlet bs = new BScroll('.wrapper', {\n  // ...\n  pullUpLoad: true,\n  wheel: true,\n  scrollbar: true,\n  // and so on\n})\n```\n\n----------------------------------------\n\nTITLE: Sharing NestedScroll Instance\nDESCRIPTION: Demonstrates how BetterScroll instances with the same `groupId` share a single NestedScroll instance. It also shows how destroying one of the BetterScroll instances removes it from the control of the shared NestedScroll instance. This highlights the importance of managing the lifecycle of BetterScroll instances to avoid unexpected behavior.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/nested-scroll.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// parent bs\nconst bs1 = new BScroll('.outerWrapper', {\n  nestedScroll: {\n    groupId: 'shared' // string or number\n  }\n})\n// child bs\nconst bs2 = new BScroll('.innerWrapper', {\n  nestedScroll: {\n    groupId: 'shared'\n  }\n})\n\nconsole.log(bs1.plugins.nestedScroll === bs2.plugins.nestedScroll) // true\n\nbs2.destroy() // nestedScroll 不再约束 bs2，不再协调 bs1 与 bs2 的滚动行为\n```\n\n----------------------------------------\n\nTITLE: Listening for 'scroll' event in BetterScroll\nDESCRIPTION: This snippet demonstrates listening for the 'scroll' event in BetterScroll.  This event is triggered while the content is scrolling. The callback receives a `position` object containing `x` and `y` coordinates.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/base-scroll-api.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nbs.on('scroll', (position) => {\n  console.log(position.x, position.y)\n})\n```\n\n----------------------------------------\n\nTITLE: Using PullDown Instance Methods\nDESCRIPTION: This code shows how to access and call the instance methods (`finishPullDown`, `openPullDown`, `autoPullDownRefresh`) provided by the `PullDown` plugin. The `BScroll` instance is created and then the plugin methods are called on the instance. This assumes the `PullDown` plugin has been installed correctly.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/pulldown.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nimport PullDown from '@better-scroll/pull-down'\n\nBScroll.use(PullDown)\n\nconst bs = new BScroll('.bs-wrapper', {\n  pullDownRefresh: true\n})\n\nbs.finishPullDown()\nbs.openPullDown({})\nbs.autoPullDownRefresh()\n```\n\n----------------------------------------\n\nTITLE: Destroying BetterScroll Instance\nDESCRIPTION: Illustrates that calling `destroy()` on a BetterScroll instance removes it from the control of the NestedScroll instance.  This is an alternative to `purgeNestedScroll()` and is useful when you want to completely dispose of the BetterScroll instance.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/nested-scroll.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst bs1 = new BScroll('.parent-wrapper', {\n  nestedScroll: {\n    groupId: 'dummy'\n  }\n})\n\nconst bs2 = new BScroll('.child-wrapper', {\n  nestedScroll: {\n    groupId: 'dummy'\n  }\n})\n\nbs1.destroy() // nestedScroll 不再管控 bs1\nbs2.destroy() // nestedScroll 不再管控 bs2\n```\n\n----------------------------------------\n\nTITLE: Configuring Bounce Options\nDESCRIPTION: This snippet demonstrates how to configure the bounce effect within BetterScroll, allowing customization for each direction. Options include enabling bounce globally or individually for left, right, top, and bottom boundaries.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/movable.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  bounce: true // 开启四个方向,\n  bounce: {\n    left: true, // 开启左边界回弹\n    right: true, // 开启右边界回弹\n    top: false,\n    bottom: false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Full BetterScroll with ES Modules\nDESCRIPTION: Imports the complete BetterScroll library using ES module syntax.  This assumes a build system like webpack is configured. `BetterScroll` is then available for use in the module.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/how-to-install.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport BetterScroll from 'better-scroll'\nlet bs = new BetterScroll('.wrapper', {})\n```\n\n----------------------------------------\n\nTITLE: Using coordinateTransformation hook\nDESCRIPTION: This code demonstrates how to use the `coordinateTransformation` hook to customize the transformation logic applied to finger movements. The hook allows developers to modify `deltaX` and `deltaY` before they're used for translating the content DOM. The example swaps `deltaX` and `deltaY`, effectively flipping the scrolling axes.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/base-scroll-options.md#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nlet bs = new BScroll('.wrapper', {\n   quadrant: 1 // default value\n})\nbs.scroller.actions.hooks.on(\n   bs.scroller.actions.hooks.eventTypes.coordinateTransformation,\n   (transformateDeltaData) => {\n      // get user finger moved distance\n      const originDeltaX = transformateDeltaData.deltaX\n      const originDeltaY = transformateDeltaData.deltaY\n\n      // apply transformation\n      transformateDeltaData.deltaX = originDeltaY\n      transformateDeltaData.deltaY = originDeltaX\n\n      // transformateDeltaData.deltaX will be used as content DOM style's translateX\n      // transformateDeltaData.deltaY will be used as content DOM style's translateY\n   }\n)\n```\n\n----------------------------------------\n\nTITLE: Using @better-scroll/wheel plugin\nDESCRIPTION: This code snippet demonstrates how to import and use the @better-scroll/wheel plugin with BetterScroll. It initializes a BScroll instance with the Wheel plugin and configures the wheel options, such as the selected index and CSS class names for wheel elements. The probeType option is also set to 3 for continuous scrolling updates.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/wheel/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nimport Wheel from '@better-scroll/wheel'\nBScroll.use(Wheel)\n\nconst bs = new BScroll('.wheel-wrapper', {\n  wheel: {\n    selectedIndex: 0,\n    wheelWrapperClass: 'wheel-scroll',\n    wheelItemClass: 'wheel-item',\n    wheelDisabledItemClass: 'wheel-disabled-item'\n  },\n  probeType: 3\n})\n```\n\n----------------------------------------\n\nTITLE: Setting initialOrigin zoom option\nDESCRIPTION: This code snippet shows how to set the `initialOrigin` option for the zoom plugin. It provides examples of using numeric offsets and string identifiers (`left`, `right`, `center`, `top`, `bottom`) to specify the zoom origin.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/zoom.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n new BScroll('.bs-wrapper', {\n      // ... 其他配置项\n      zoom: {\n        initialOrigin: [50, 50], // 基于缩放元素的左顶点上下偏移量都是 50 px\n        initialOrigin: [0, 0], // 基于缩放元素的左顶点\n        initialOrigin: ['left', 'top'], // 与上面效果相同\n        initialOrigin: ['center', 'center'], // 基于缩放元素的中心\n        initialOrigin: ['right', 'top'], // 基于缩放元素的右顶点\n      }\n    })\n```\n\n----------------------------------------\n\nTITLE: Initializing better-scroll with Slide Plugin (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to import and use the `@better-scroll/slide` plugin with `better-scroll`. It initializes a `BScroll` instance with slide-specific options, such as `loop` and `threshold`, to create a carousel effect.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/slide/README_zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nimport Slide from '@better-scroll/slide'\nBScroll.use(Slide)\n\nconst bs = new BScroll('.div', {\n  scrollX: false,\n  scrollY: true,\n  slide: {\n    loop: true,\n    threshold: 100\n  },\n  useTransition: true,\n  momentum: false,\n  bounce: false,\n  stopPropagation: true\n})\n```\n\n----------------------------------------\n\nTITLE: Using observe-image with BetterScroll\nDESCRIPTION: Import BetterScroll and the ObserveImage plugin, then register the plugin with BetterScroll. Initialize BetterScroll with the observeImage option set to true to enable image observation. This will trigger a refresh when images load.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/observe-image.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nimport ObserveImage from '@better-scroll/observe-image'\nBScroll.use(ObserveImage)\n\nnew BScroll('.bs-wrapper', {\n  //...\n  observeImage: true // 开启 observe-image 插件\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing BetterScroll\nDESCRIPTION: This JavaScript snippet shows how to initialize BetterScroll using a DOM element. It imports the BScroll class from the @better-scroll/core package. A wrapper element is selected using querySelector, and then a new BScroll instance is created, passing the wrapper element as the first parameter.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nlet wrapper = document.querySelector('.wrapper')\nlet scroll = new BScroll(wrapper)\n```\n\n----------------------------------------\n\nTITLE: Installing BetterScroll Core using NPM\nDESCRIPTION: Installs the core BetterScroll library using npm.  This command adds `@better-scroll/core` as a project dependency. The `--save` flag ensures it's saved in package.json.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/how-to-install.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @better-scroll/core --save\n```\n\n----------------------------------------\n\nTITLE: Purging All NestedScroll Instances\nDESCRIPTION: Shows how to destroy all NestedScroll instances using the static method `purgeAllNestedScrolls()`. This removes the control of all NestedScroll instances from their associated BetterScroll instances, releasing resources and preventing further coordination of scrolling behavior.  This is a global operation affecting all NestedScroll instances.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/nested-scroll.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport NestedScroll from '@better-scroll/nested-scroll'\n\n// 不再约束任何 BetterScroll 实例\nNestedScroll.purgeAllNestedScrolls()\n```\n\n----------------------------------------\n\nTITLE: Installing Nested Scroll Plugin\nDESCRIPTION: These commands install the `@better-scroll/nested-scroll` package using npm or yarn. This is a necessary prerequisite for using the nested scroll functionality in BetterScroll.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/nested-scroll.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @better-scroll/nested-scroll --save\n\n// or\n\nyarn add @better-scroll/nested-scroll\n```\n\n----------------------------------------\n\nTITLE: Initialize BetterScroll with Movable and Zoom\nDESCRIPTION: This JavaScript code initializes a BetterScroll instance with both the Movable and Zoom plugins enabled. It imports BetterScroll, Movable, and Zoom, registers the plugins, and then configures BetterScroll with options for both Movable (bindToTarget, scrollX, scrollY, freeScroll, bounce, movable) and Zoom (start, min, max).\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/movable.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nimport Movable from '@better-scroll/movable'\nimport Zoom from '@better-scroll/zoom'\nnew BScroll('.bs-wrapper', {\n  bindToTarget: true,\n  scrollX: true,\n  scrollY: true,\n  freeScroll: true,\n  bounce: true\n  movable: true // for movable plugin\n  zoom: { // for zoom plugin\n    start: 1,\n    min: 1,\n    max: 3\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Installing BetterScroll Slide Plugin\nDESCRIPTION: Install the BetterScroll Slide plugin using npm or yarn. This plugin extends BetterScroll to provide slide functionality.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/slide.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @better-scroll/slide --save\n\n// or\n\nyarn add @better-scroll/slide\n```\n\n----------------------------------------\n\nTITLE: Configuring Bounce - JavaScript\nDESCRIPTION: This code snippet demonstrates how to configure the bounce effect in BetterScroll, allowing developers to specify which edges should have the bounce animation enabled or disabled. It shows how to use an object to set the 'top', 'bottom', 'left', and 'right' properties to true or false.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/base-scroll-options.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n\tbounce: {\n\t\t\ttop: true,\n\t\t\tbottom: true,\n\t\t\tleft: true,\n\t\t\tright: true\n\t\t}\n```\n\n----------------------------------------\n\nTITLE: Installing Nested Scroll Plugin\nDESCRIPTION: Instructions on how to install the @better-scroll/nested-scroll plugin using npm or yarn.  This is a prerequisite for using the plugin in a BetterScroll project. After installation, the plugin needs to be registered with BetterScroll using `BScroll.use()`.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/nested-scroll.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @better-scroll/nested-scroll --save\n\n// or\n\nyarn add @better-scroll/nested-scroll\n```\n\n----------------------------------------\n\nTITLE: Install BetterScroll Infinity Plugin\nDESCRIPTION: Instructions for installing the @better-scroll/infinity plugin using npm or yarn.  This plugin provides BetterScroll with unlimited scrolling capabilities.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/infinity.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @better-scroll/infinity --save\n\n// or\n\nyarn add @better-scroll/infinity\n```\n\n----------------------------------------\n\nTITLE: Enabling Click Events in BetterScroll (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to enable click events within the BetterScroll area. By default, BetterScroll blocks the browser's native click event. Setting the `click` option to `true` allows click events to be dispatched by BetterScroll. The event parameter's `_constructed` property will be true.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/FAQ/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\n\nlet bs = new BScroll('./div', {\n  click: true\n})\n```\n\n----------------------------------------\n\nTITLE: Installing PullDown Plugin\nDESCRIPTION: Instructions to install the @better-scroll/pull-down plugin using npm or yarn. This plugin extends BetterScroll's functionality to provide pull-to-refresh capabilities.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/pulldown.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @better-scroll/pull-down --save\n\n// or\n\nyarn add @better-scroll/pull-down\n```\n\n----------------------------------------\n\nTITLE: Importing and Using BetterScroll Wheel Plugin\nDESCRIPTION: Import the necessary modules and then register the wheel plugin with BetterScroll core. This enables the wheel functionality for the BetterScroll instance. The wheel options determine the behavior of the wheel.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/wheel.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nimport Wheel from '@better-scroll/wheel'\n\nBScroll.use(Wheel)\n```\n\n----------------------------------------\n\nTITLE: Use ObserveDOM with BetterScroll\nDESCRIPTION: This code snippet demonstrates how to import and use the ObserveDOM plugin with BetterScroll.  It first imports both BScroll and ObserveDOM, then registers the plugin with BScroll using BScroll.use(). Finally, it initializes BetterScroll with the 'observeDOM' option set to true, enabling the plugin to monitor DOM changes and automatically refresh the scroll instance.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/observe-dom.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nimport ObserveDOM from '@better-scroll/observe-dom'\nBScroll.use(ObserveDOM)\n\nnew BScroll('.bs-wrapper', {\n  //...\n  observeDOM: true // init observe-dom plugin\n})\n```\n\n----------------------------------------\n\nTITLE: Using @better-scroll/observe-image with BScroll\nDESCRIPTION: This code snippet demonstrates how to import and use the @better-scroll/observe-image plugin with BetterScroll. It imports both modules, registers the plugin with BScroll using `BScroll.use(ObserveImage)`, and then initializes a BetterScroll instance with the `observeImage` option set to `true`. This enables automatic refreshing of the scrollable area when images load or fail.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/observe-image/README_zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nimport ObserveImage from '@better-scroll/observe-image'\nBScroll.use(ObserveImage)\n\nconst bs = new BScroll('.wrapper', {\n  observeImage: true\n})\n```\n\n----------------------------------------\n\nTITLE: Registering Nested Scroll Plugin\nDESCRIPTION: This snippet shows how to import and register the NestedScroll plugin with BetterScroll. This step is necessary to enable the nested scrolling functionality within BetterScroll. The `BScroll.use()` method is used to globally register the plugin.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/nested-scroll.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nimport NestedScroll from '@better-scroll/nested-scroll'\n\nBScroll.use(NestedScroll)\n```\n\n----------------------------------------\n\nTITLE: Configuring observeImage with debounceTime\nDESCRIPTION: When observeImage is set to true, it uses the default plugin options. You can configure the debounceTime option within the observeImage object to control the delay before the refresh method is called after image loading. This helps to avoid excessive refreshes.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/observe-image.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst bs = new BScroll('.wrapper', {\n  observeImage: true\n})\n\n// 相当于\n\nconst bs = new BScroll('.wrapper', {\n  observeImage: {\n    debounceTime: 100 // ms\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Instance Methods\nDESCRIPTION: This code demonstrates the usage of instance methods like `finishPullUp()`, `openPullUp()`, and `closePullUp()` on a BetterScroll instance that has the PullUp plugin installed.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/pullup.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nimport PullUp from '@better-scroll/pull-up'\n\nBScroll.use(PullUp)\n\nconst bs = new BScroll('.bs-wrapper', {\n  pullUpLoad: true\n})\n\nbs.finishPullUp()\nbs.openPullUp({})\nbs.closePullUp()\n```\n\n----------------------------------------\n\nTITLE: Initializing PullDown Plugin\nDESCRIPTION: Shows how to import the PullDown plugin and register it with BetterScroll using the BScroll.use() method. This is a necessary step before using the pulldown refresh functionality.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/pulldown.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nimport PullDown from '@better-scroll/pull-down'\n\nBScroll.use(PullDown)\n```\n\n----------------------------------------\n\nTITLE: Install BetterScroll core via NPM/Yarn\nDESCRIPTION: This code snippet demonstrates how to install the core BetterScroll library using either NPM or Yarn. The `--save` flag ensures that the dependency is added to the `package.json` file.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/how-to-install.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @better-scroll/core --save\n\n// or\n\nyarn add @better-scroll/core\n```\n\n----------------------------------------\n\nTITLE: Binding ScrollTo Hook - Scroller\nDESCRIPTION: Demonstrates how to bind to the 'scrollTo' hook in Scroller to intercept calls to the bs.scrollTo method. Requires importing BScroll and accessing the scroller hooks. The argument is endPoint (x, y).\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/base-scroll-api.md#_snippet_54\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nconst bs = new BScroll('.wrapper', {})\nconst hooks = bs.scroller.hooks\nhooks.on('scrollTo', (endPoint) => {\n  console.log(endPoint.x)\n  console.log(endPoint.y)\n})\nbs.scrollTo(0, -200)\n```\n\n----------------------------------------\n\nTITLE: Configuring BetterScroll with Slide Options\nDESCRIPTION: Initialize a BetterScroll instance with the slide plugin enabled and configured. The configuration includes enabling horizontal scrolling, disabling vertical scrolling, setting slide options, and disabling momentum and bounce effects.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/slide.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnew BScroll('.bs-wrapper', {\n  scrollX: true,\n  scrollY: false,\n  slide: {\n    threshold: 100\n  },\n  momentum: false,\n  bounce: false,\n  stopPropagation: true\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Options of a BetterScroll Plugin\nDESCRIPTION: This TypeScript snippet demonstrates how to handle and merge user-provided options with default options within a BetterScroll plugin, using the `extend` utility function from `@better-scroll/shared-utils`.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/how-to-write.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n        import { extend } from '@better-scroll/shared-utils'\n        export default class MyPlugin {\n          private handleOptions() {\n            const userOptions = (this.scroll.options.myPlugin === true\n              ? {}\n              : this.scroll.options.myPlugin) as Partial<MyPluginConfig>\n            const defaultOptions: MyPluginConfig = {\n              scrollText: 'I am scrolling',\n              scrollEndText: 'Scroll has ended'\n            }\n            this.options = extend(defaultOptions, userOptions)\n          }\n        }\n      \n```\n\n----------------------------------------\n\nTITLE: Pullup Load Configuration Example\nDESCRIPTION: Illustrates the default behavior when the `pullUpLoad` option is set to `true`. It internally uses a default plugin options object which currently only contains the `threshold` option, defaulting to 0.  Demonstrates the equivalence of setting the option to `true` or using a threshold of 0.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/pullup.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst bs = new BScroll('.wrapper', {\n  pullUpLoad: true\n})\n\n// 相当于\n\nconst bs = new BScroll('.wrapper', {\n  pullUpLoad: {\n    threshold: 0\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Use BetterScroll Infinity Plugin\nDESCRIPTION: Shows how to import and use the BetterScroll infinity plugin.  It demonstrates using the static method `BScroll.use()` to register the plugin before instantiating BetterScroll.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/infinity.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nimport InfinityScroll from '@better-scroll/infinity'\n\nBScroll.use(InfinityScroll)\n```\n\n----------------------------------------\n\nTITLE: Including Full BetterScroll via Script Tag\nDESCRIPTION: Includes the complete BetterScroll library directly in an HTML file using a `<script>` tag. This makes `BetterScroll` available as a global object. It uses a CDN (unpkg.com) to serve the file.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/how-to-install.md#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/better-scroll@latest/dist/better-scroll.js\"></script>\n\n<!-- minify -->\n<script src=\"https://unpkg.com/better-scroll@latest/dist/better-scroll.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Listening for 'refresh' event in BetterScroll\nDESCRIPTION: This snippet demonstrates how to listen for the 'refresh' event in BetterScroll. The 'refresh' event is triggered when BetterScroll recalculates its internal dimensions. The event handler is an anonymous function.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/base-scroll-api.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport BetterScroll from '@better-scroll/core'\n\nconst bs = new BetterScroll('.wrapper', {})\n\nbs.on('refresh', () => {})\n```\n\n----------------------------------------\n\nTITLE: Listening to Plugin Events\nDESCRIPTION: This example showcases how to listen for events emitted by a BetterScroll plugin. The plugin's event hooks are delegated to the BetterScroll instance (`bs`), enabling event listeners to be attached directly to `bs`. In this case, it listens for the `zoomStart` event from the Zoom plugin.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n  import BScroll from '@better-scroll/core'\n  import Zoom from '@better-scroll/zoom'\n\n  BScroll.use(Zoom)\n  const bs = new BScroll('#scroll-wrapper', {\n    freeScroll: true,\n    scrollX: true,\n    scrollY: true,\n    zoom: {\n      start: 1,\n      min: 0.5,\n      max: 2\n    }\n  })\n\n  bs.on('zoomStart', () => {\n\n  })\n```\n\n----------------------------------------\n\nTITLE: Configuring MouseWheel to True\nDESCRIPTION: Example showing that if mouseWheel is configured as true, the plugin will use the default plugin options\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/mouse-wheel.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst bs = new BScroll('.wrapper', {\n  mouseWheel: true\n})\n\n// equals\n\nconst bs = new BScroll('.wrapper', {\n  mouseWheel: {\n    speed: 20,\n    invert: false,\n    easeTime: 300,\n    discreteTime: 400,\n    throttleTime: 0,\n    dampingFactor: 0.1\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using zoomTo Method with Different Origins\nDESCRIPTION: This code demonstrates how to use the `zoomTo` method to programmatically control the zoom level and origin.  It shows examples using numeric coordinates and string identifiers for the origin, as well as specifying the animation duration.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/zoom.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst bs = new BScroll('.bs-wrapper', {\n    freeScroll: true,\n    scrollX: true,\n    scrollY: true,\n    zoom: {\n      start: 1,\n      min: 0.5,\n      max: 2\n    }\n  })\n\n  bs.zoomTo(1.8, 'left', 'bottom') // 基于缩放元素的左底点缩放至 1.8 倍\n  bs.zoomTo(1.8, 'left', 'bottom', 1000) // 基于缩放元素的左底点缩放，动画时长为 1s\n  bs.zoomTo(1.8, 100, 100) // 基于缩放元素左顶点的上下偏移量 100 为原点进行缩放\n  bs.zoomTo(2, 'center', 'center') // 基于缩放元素的中心进行缩放\n```\n\n----------------------------------------\n\nTITLE: Installing BetterScroll Indicators using npm\nDESCRIPTION: This command installs the BetterScroll Indicators plugin using npm. It adds the plugin as a dependency to your project.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/indicators.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @better-scroll/indicators --save\n```\n\n----------------------------------------\n\nTITLE: Installing BetterScroll Core\nDESCRIPTION: Installs the core BetterScroll library using npm. This allows for basic scrolling functionality without the full BetterScroll package. It's a prerequisite for using the core scrolling features.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/base-scroll.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @better-scroll/core --save\n```\n\n----------------------------------------\n\nTITLE: Destroying BetterScroll instances\nDESCRIPTION: This snippet illustrates how destroying a BetterScroll instance removes it from the control of the nestedScroll instance, effectively stopping the coordination of scrolling behavior. It's a recommended cleanup approach.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/nested-scroll.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst bs1 = new BScroll('.parent-wrapper', {\n  nestedScroll: {\n    groupId: 'dummy'\n  }\n})\n\nconst bs2 = new BScroll('.child-wrapper', {\n  nestedScroll: {\n    groupId: 'dummy'\n  }\n})\n\nbs1.destroy() // nestedScroll no longer constrains bs1\nbs2.destroy() // nestedScroll no longer constrains bs2\n```\n\n----------------------------------------\n\nTITLE: Listening to BetterScroll events\nDESCRIPTION: This JavaScript snippet demonstrates listening for BetterScroll events using the `on` method. It imports BScroll from `@better-scroll/core`, creates a new BetterScroll instance and then listens for the `scroll` and `refresh` events. Requires the `@better-scroll/core` package.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-api.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nlet bs = new BScroll('.wrapper', {})\n\n// 监听 bs 的 scroll 事件\nbs.on('scroll', () => {})\n// 监听 bs 的 refresh 事件\nbs.on('refresh', () => {})\n```\n\n----------------------------------------\n\nTITLE: Listening for 'mousewheelMove' event with MouseWheel plugin\nDESCRIPTION: This snippet demonstrates how to listen for the 'mousewheelMove' event of the MouseWheel plugin in BetterScroll. This event is triggered while mouse-wheel is scrolling. The MouseWheel plugin must be installed and enabled.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/base-scroll-api.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nbs.on('mousewheelMove', () => {})\n```\n\n----------------------------------------\n\nTITLE: Configuring Dblclick Event Delay - JavaScript\nDESCRIPTION: This code snippet shows how to configure the delay between two clicks when the dblclick option is enabled in BetterScroll. It demonstrates passing an object with a 'delay' property to modify the default delay of 300ms.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/base-scroll-options.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\ndblclick: {\n\t\tdelay: 300\n\t}\n```\n\n----------------------------------------\n\nTITLE: Installing BetterScroll Core using Yarn\nDESCRIPTION: Installs the core BetterScroll library using Yarn.  This command adds `@better-scroll/core` as a project dependency. `yarn add` automatically saves the dependency to package.json.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/how-to-install.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @better-scroll/core\n```\n\n----------------------------------------\n\nTITLE: Initializing BetterScroll (Core, Selector)\nDESCRIPTION: This JavaScript code snippet demonstrates the basic initialization of BetterScroll using a CSS selector to identify the wrapper element. It assumes the `@better-scroll/core` package has been imported as `BScroll`.  The `querySelector` method is used to get the DOM object.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nlet wrapper = document.querySelector('.wrapper')\nlet scroll = new BScroll(wrapper)\n```\n\n----------------------------------------\n\nTITLE: Binding ScrollToElement Hook - Scroller\nDESCRIPTION: Demonstrates how to bind to the 'scrollToElement' hook in Scroller to intercept calls to the bs.scrollToElement method. Requires importing BScroll and accessing the scroller hooks. The wheel plugin listens to this hook.  Arguments are the target DOM element and the endpoint coordinates (top, left).\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/base-scroll-api.md#_snippet_55\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nconst bs = new BScroll('.wrapper', {})\nconst hooks = bs.scroller.hooks\nhooks.on('scrollToElement', (el, pos) => {\n  console.log(el)\n  console.log(pos.left)\n  console.log(pos.top)\n})\nbs.scrollToElement('.some-item', 300, true, true)\n```\n\n----------------------------------------\n\nTITLE: Initializing BetterScroll with Pullup\nDESCRIPTION: Example of how to initialize a BetterScroll instance with the pullup plugin enabled.  The `pullUpLoad` option is set to true to activate the plugin.  The `.bs-wrapper` CSS selector is used to bind the scrollable area.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/pullup.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnew BScroll('.bs-wrapper', {\n  pullUpLoad: true\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Observe Image with debounceTime\nDESCRIPTION: This code snippet shows how to configure the observeImage plugin with a debounceTime. When observeImage is set to true or an object, the plugin's options can be customized. debounceTime specifies the delay (in milliseconds) before calling the refresh method after an image loads.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/observe-image.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst bs = new BScroll('.wrapper', {\n  observeImage: true\n})\n\n// equals\n\nconst bs = new BScroll('.wrapper', {\n  observeImage: {\n    debounceTime: 100 // ms\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Including BetterScroll Core via Script Tag\nDESCRIPTION: Includes the core BetterScroll library directly in an HTML file using a `<script>` tag.  This method makes `BScroll` available as a global object on the `window` object.  It uses a CDN (unpkg.com) to serve the file.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/how-to-install.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/@better-scroll/core@latest/dist/core.js\"></script>\n\n<!-- minify -->\n<script src=\"https://unpkg.com/@better-scroll/core@latest/dist/core.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Installing BetterScroll Infinity Plugin\nDESCRIPTION: This code snippet demonstrates how to install the BetterScroll infinity plugin using either npm or yarn.  This plugin provides infinite scrolling capabilities for BetterScroll.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/infinity.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @better-scroll/infinity --save\n\n// or\n\nyarn add @better-scroll/infinity\n```\n\n----------------------------------------\n\nTITLE: Initializing BetterScroll with and without plugins\nDESCRIPTION: These JavaScript examples demonstrate how to initialize better-scroll, both with the full version and with the core-only version.  The first example shows using the full better-scroll library and setting options like movable and zoom.  The second example demonstrates using the core library with no additional options.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/README_zh-CN.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport BetterScroll from 'better-scroll'\n\nlet bs = new BetterScroll('.wrapper', {\n  movable: true,\n  zoom: true\n})\n\nimport BScroll from '@better-scroll/core'\nlet bs = new BScroll('.wrapper', {})\n```\n\n----------------------------------------\n\nTITLE: Import BetterScroll with plugins (ES Module)\nDESCRIPTION: This JavaScript code demonstrates importing the full BetterScroll library with plugins as an ES module, requiring a build tool like webpack.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/how-to-install.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport BetterScroll from 'better-scroll'\nlet bs = new BetterScroll('.wrapper', {})\n```\n\n----------------------------------------\n\nTITLE: Using ObserveDom Plugin with BetterScroll (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to import and use the ObserveDom plugin with BetterScroll.  It initializes BetterScroll with the `observeDOM` option set to `true`, enabling automatic scroll dimension updates. It requires importing both BScroll core and the ObserveDom plugin.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/observe-dom/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nimport ObserveDom from '@better-scroll/observe-dom'\nBScroll.use(ObserveDom)\n\nconst bs = new BScroll('.wrapper', {\n  observeDOM: true\n})\n```\n\n----------------------------------------\n\nTITLE: Listening for 'mousewheelEnd' event with MouseWheel plugin\nDESCRIPTION: This snippet demonstrates how to listen for the 'mousewheelEnd' event of the MouseWheel plugin in BetterScroll.  This event is triggered when mouse-wheel scrolling ends. The MouseWheel plugin must be initialized and enabled.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/base-scroll-api.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nbs.on('mousewheelEnd', () => {})\n```\n\n----------------------------------------\n\nTITLE: Sharing NestedScroll Instance with GroupId\nDESCRIPTION: This example illustrates how multiple BetterScroll instances with the same `groupId` share a single `nestedScroll` instance (`ns`). When one instance is destroyed, `ns` loses control over it, affecting the coordinated scrolling behavior.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/nested-scroll.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// parent bs\nconst bs1 = new BScroll('.outerWrapper', {\n  nestedScroll: {\n    groupId: 'shared' // string or number\n  }\n})\n// child bs\nconst bs2 = new BScroll('.innerWrapper', {\n  nestedScroll: {\n    groupId: 'shared'\n  }\n})\n\nconsole.log(bs1.plugins.nestedScroll === bs2.plugins.nestedScroll) // true\n\n// nestedScroll no longer constrains bs2\n// nestedScroll no longer coordinates the scrolling behavior of bs1 and bs2\nbs2.destroy()\n```\n\n----------------------------------------\n\nTITLE: Zoom with Default Options\nDESCRIPTION: Demonstrates configuring zoom by setting `zoom` option to `true`, which will enable zoom with default plugin options.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/zoom.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst bs = new BScroll('.wrapper', {\n  zoom: true\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst bs = new BScroll('.wrapper', {\n  zoom: {\n    start: 1,\n    min: 1,\n    max: 4,\n    initialOrigin: [0, 0],\n    minimalZoomDistance: 5,\n    bounceTime: 800, // ms\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Pull-up Plugin with Yarn\nDESCRIPTION: This command installs the `@better-scroll/pull-up` package using Yarn. This is an alternative to using npm for package installation.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/pullup.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @better-scroll/pull-up\n```\n\n----------------------------------------\n\nTITLE: Listening for 'contentChanged' event in BetterScroll\nDESCRIPTION: This snippet demonstrates listening for the 'contentChanged' event in BetterScroll. This event is triggered when `bs.refresh()` is called and the content DOM has changed. It provides the new content as an argument.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/base-scroll-api.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// bs version >= 2.0.4\nbs.on('contentChanged', (newContent: HTMLElement) => {})\n```\n\n----------------------------------------\n\nTITLE: Initializing BetterScroll Core\nDESCRIPTION: Initializes BetterScroll with a wrapper element. The code retrieves an HTML element with the id \"wrapper\" and passes it along with an empty configuration object `{}` to the BScroll constructor to create an instance.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/how-to-install.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nlet wrapper = document.getElementById(\"wrapper\")\nlet bs = new BScroll(wrapper, {})\n```\n\n----------------------------------------\n\nTITLE: Getting All NestedScroll Instances\nDESCRIPTION: Demonstrates how to retrieve all existing NestedScroll instances using the static method `getAllNestedScrolls()`. This returns an array of NestedScroll instances, allowing you to access and manage them if needed. It relies on TypeScript type annotations for the return type.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/nested-scroll.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport NestedScroll from '@better-scroll/nested-scroll'\n\nconst nestedScrolls: NestedScroll[] = NestedScroll.getAllNestedScrolls()\n```\n\n----------------------------------------\n\nTITLE: Include BetterScroll with plugins via Script tag\nDESCRIPTION: This HTML code snippet shows how to include the full BetterScroll library with all plugins directly in an HTML file using a `<script>` tag.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/how-to-install.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/better-scroll@latest/dist/better-scroll.js\"></script>\n\n<!-- minify -->\n<script src=\"https://unpkg.com/better-scroll@latest/dist/better-scroll.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Import and Use ObserveImage Plugin\nDESCRIPTION: This code snippet demonstrates how to import the ObserveImage plugin and register it with BetterScroll.  It also shows how to initialize BetterScroll with the observeImage option enabled, which tells BetterScroll to observe images for loading and error events.  Requires @better-scroll/core and @better-scroll/observe-image as dependencies.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/observe-image/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nimport ObserveImage from '@better-scroll/observe-image'\nBScroll.use(ObserveImage)\n\nconst bs = new BScroll('.wrapper', {\n  observeImage: true\n})\n```\n\n----------------------------------------\n\nTITLE: Creating BetterScroll Instance (Full, CDN)\nDESCRIPTION: This JavaScript code snippet shows how to create a BetterScroll instance when using the full-featured version included via CDN. It retrieves the wrapper element by ID and then creates a BetterScroll instance using the `createBScroll` method.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nlet wrapper = document.getElementById(\"wrapper\")\nlet bs = BetterScroll.createBScroll(wrapper, {})\n```\n\n----------------------------------------\n\nTITLE: Purging NestedScroll via Instance Method\nDESCRIPTION: This snippet demonstrates the use of `purgeNestedScroll()` instance method to remove the nestedScroll instance that controls the BetterScroll instance. It is important to call this method when a component is destroyed to clean up memory.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/nested-scroll.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nimport NestedScroll from '@better-scroll/nested-scroll'\n\nBScroll.use(NestedScroll)\n\nconst bs1 = new BScroll('.parent-wrapper', {\n  nestedScroll: {\n    groupId: 'dummy'\n  }\n})\n\nconst bs2 = new BScroll('.child-wrapper', {\n  nestedScroll: {\n    groupId: 'dummy'\n  }\n})\n\n// purge nestedScroll\n// bs1 and bs2 share the same nestedScroll instance because they have the same groupId\nbs1.purgeNestedScroll() // Same as bs2.purgeNestedScroll()\n```\n\n----------------------------------------\n\nTITLE: Installing observe-image plugin\nDESCRIPTION: Install the observe-image plugin using npm or yarn. This plugin allows BetterScroll to detect image loading events and refresh the scrollable area.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/observe-image.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @better-scroll/observe-image --save\n\n// or\n\nyarn add @better-scroll/observe-image\n```\n\n----------------------------------------\n\nTITLE: Initializing BetterScroll with quadrant option\nDESCRIPTION: This snippet shows how to initialize BetterScroll with the `quadrant` option. This option is crucial when the wrapper's ancestor elements are rotated via CSS. The example shows the initialization with `quadrant` set to `2`, necessary for when the rotation angle is between (45, 135], especially 90 degrees.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/base-scroll-options.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nlet bs = new BScroll('.wrapper', {\n   quadrant: 2\n})\n```\n\n----------------------------------------\n\nTITLE: Installing BetterScroll MouseWheel Plugin with Yarn\nDESCRIPTION: Install the @better-scroll/mouse-wheel package using yarn. This plugin extends BetterScroll's capabilities to support mouse wheel scrolling.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/mouse-wheel.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @better-scroll/mouse-wheel\n```\n\n----------------------------------------\n\nTITLE: BScrollCore Hook: refresh - JavaScript\nDESCRIPTION: This hook is triggered when BetterScroll recalculates its dimensions. This allows you to execute code whenever the scrollable area or viewport size changes, typically after a DOM update or resize event. No specific parameters are passed to the hook's callback function.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-api.md#_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nconst bs = new BScroll('.wrapper', {})\nbs.hooks.on('refresh', () => { console.log('refreshed') })\n```\n\n----------------------------------------\n\nTITLE: Purging All NestedScroll Instances\nDESCRIPTION: This TypeScript snippet demonstrates how to use the static method `purgeAllNestedScrolls()` to purge all current nestedScroll instances, removing the constraints from all BetterScroll instances controlled by them.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/nested-scroll.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport NestedScroll from '@better-scroll/nested-scroll'\n\n// No longer constrain any BetterScroll instances\nNestedScroll.purgeAllNestedScrolls()\n```\n\n----------------------------------------\n\nTITLE: Enabling Scrollbar Track Clickable\nDESCRIPTION: Enables the `scrollbarTrackClickable` option and sets the `click` option to true in BetterScroll. This allows users to click on the scrollbar track to navigate the content, but requires the `click` option to be enabled for event triggering.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/scroll-bar.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nnew BScroll('.bs-wrapper', {\n    scrollY: true,\n    click: true // essential\n    scrollbar: {\n      scrollbarTrackClickable: true\n    }\n  })\n```\n\n----------------------------------------\n\nTITLE: Using PullDown Instance Methods\nDESCRIPTION: Shows how to access and use the pullDown plugin's instance methods like `finishPullDown`, `openPullDown`, and `autoPullDownRefresh` through the BetterScroll instance after the plugin has been registered.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/pulldown.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nimport PullDown from '@better-scroll/pull-down'\n\nBScroll.use(PullDown)\n\nconst bs = new BScroll('.bs-wrapper', {\n  pullDownRefresh: true\n})\n\nbs.finishPullDown()\nbs.openPullDown({})\nbs.autoPullDownRefresh()\n```\n\n----------------------------------------\n\nTITLE: Using @better-scroll/observe-dom with Javascript\nDESCRIPTION: This code snippet demonstrates how to use the @better-scroll/observe-dom plugin with BetterScroll. It imports the necessary modules, registers the plugin with BetterScroll, and initializes a BetterScroll instance with the `observeDOM` option enabled. This enables automatic refreshing of the scroll instance when the DOM changes.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/observe-dom/README_zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nimport ObserveDom from '@better-scroll/observe-dom'\nBScroll.use(ObserveDom)\n\nconst bs = new BScroll('.wrapper', {\n  observeDOM: true\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Scrollbar Elements Configuration\nDESCRIPTION: Configures BetterScroll to use custom HTML elements for the scrollbar.  This allows for complete control over the scrollbar's appearance and styling. The `customElements` array specifies the HTML elements to use for horizontal and vertical scrollbars. When using two scrollbars, the first element is assumed to be horizontal.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/scroll-bar.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// 横向滚动条\nconst horizontalEl = document.getElementById('用户自定义的滚动条')\nnew BScroll('.bs-wrapper', {\n  scrollY: true,\n  scrollbar: {\n    customElements: [horizontalEl]\n  }\n})\n// 竖向滚动条\nconst verticalEl = document.getElementById('用户自定义的滚动条')\nnew BScroll('.bs-wrapper', {\n  scrollY: false,\n  scrollX: true,\n  scrollbar: {\n    customElements: [verticalEl]\n  }\n})\n// 双向滚动条\nconst horizontalEl = document.getElementById('用户自定义的滚动条')\nconst verticalEl = document.getElementById('用户自定义的滚动条')\nnew BScroll('.bs-wrapper', {\n  freeScroll: true,\n  scrollbar: {\n    // 当滚动条是 2 个的时候，数组第一个元素是横向滚动条\n    customElements: [horizontalEl, verticalEl]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Include BetterScroll core via Script tag\nDESCRIPTION: This HTML code snippet shows how to include the BetterScroll core library directly in an HTML file using a `<script>` tag. It retrieves the library from a CDN and makes the `BScroll` object available on the `window` object.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/how-to-install.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/@better-scroll/core@latest/dist/core.js\"></script>\n\n<!-- minify -->\n<script src=\"https://unpkg.com/@better-scroll/core@latest/dist/core.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Subscribing to 'scrollEnd' Hook - JavaScript\nDESCRIPTION: This code snippet demonstrates subscribing to the 'scrollEnd' hook of ScrollerActions. This hook is triggered when scrolling is about to end, but before verifying whether flick and momentum behaviors are triggered. The hook receives the current position and animation duration as arguments.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/base-scroll-api.md#_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nconst bs = new BScroll('.wrapper', {})\nconst hooks = bs.scroller.actions.hooks\nhooks.on('beforeEnd', (pos, duration) => { console.log(pos) })\n```\n\n----------------------------------------\n\nTITLE: Initializing BetterScroll with Default Quadrant\nDESCRIPTION: This JavaScript snippet initializes BetterScroll with the default `quadrant` value (1) and then uses the `coordinateTransformation` hook to define a custom transformation logic. This hook allows developers to adjust the deltaX and deltaY values based on their specific needs when the built-in quadrant logic is insufficient.  It accesses the `coordinateTransformation` event type through the BetterScroll instance's scroller's actions hooks.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-options.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nlet bs = new BScroll('.wrapper', {\n   quadrant: 1 // 保持默认即可\n})\nbs.scroller.actions.hooks.on(\n   bs.scroller.actions.hooks.eventTypes.coordinateTransformation,\n   (transformateDeltaData) => {\n      // 获取用户手指移动的距离\n      const originDeltaX = transformateDeltaData.deltaX\n      const originDeltaY = transformateDeltaData.deltaY\n\n      // 变换位移\n      transformateDeltaData.deltaX = originDeltaY\n      transformateDeltaData.deltaY = originDeltaX\n\n      // transformateDeltaData.deltaX 最终作用在 BetterScroll content DOM 的 translateX\n      // transformateDeltaData.deltaY 最终作用在 BetterScroll content DOM 的 translateY\n   }\n)\n```\n\n----------------------------------------\n\nTITLE: Registering Zoom Plugin with BetterScroll\nDESCRIPTION: This code snippet demonstrates how to import the BetterScroll core and the Zoom plugin, and then register the plugin using `BScroll.use()`. This step is essential to enable the zoom functionality within BetterScroll.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/zoom.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nimport Zoom from '@better-scroll/zoom'\n\nBScroll.use(Zoom)\n```\n\n----------------------------------------\n\nTITLE: Custom Scrollbar with customElements option\nDESCRIPTION: Demonstrates how to use custom HTML elements as scrollbars with the `customElements` option.  It covers horizontal, vertical, and freeScroll scenarios, allowing for custom scrollbar styling and behavior.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/scroll-bar.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// horizontal\n  const horizontalEl = document.getElementById('User-defined scrollbar')\n  new BScroll('.bs-wrapper', {\n    scrollY: true,\n    scrollbar: {\n      customElements: [horizontalEl]\n    }\n  })\n  // vertical\n  const verticalEl = document.getElementById('User-defined scrollbar')\n  new BScroll('.bs-wrapper', {\n    scrollY: false,\n    scrollX: true,\n    scrollbar: {\n      customElements: [verticalEl]\n    }\n  })\n  // freeScroll\n  const horizontalEl = document.getElementById('User-defined scrollbar')\n  const verticalEl = document.getElementById('User-defined scrollbar')\n  new BScroll('.bs-wrapper', {\n    freeScroll: true,\n    scrollbar: {\n      // When there are two scrollbars\n      // the first element of the array is the horizontal\n      customElements: [horizontalEl, verticalEl]\n    }\n  })\n```\n\n----------------------------------------\n\nTITLE: Accessing Plugin Instances\nDESCRIPTION: This example shows how to access the plugin instance through the `bs.plugins` property. This is useful if you need to interact directly with the plugin instance rather than using the proxied properties and methods. Accessing plugin instances is generally less common than using proxied methods.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n  import BScroll from '@better-scroll/scroll'\n  import zoom from '@better-scroll/zoom'\n\n  BScroll.use(zoom)\n\n  const bs = new BScroll('.wrapper', {\n    zoom: true\n  })\n\n  console.log(bs.plugins.zoom)\n```\n\n----------------------------------------\n\nTITLE: Disabling Mouse and Touch Events (JavaScript)\nDESCRIPTION: This code demonstrates explicitly disabling both mouse and touch events for a BetterScroll instance. This can be useful in specific scenarios where you want to override the default behavior of BetterScroll in handling input events. By setting both `disableMouse` and `disableTouch` to `false`, the BetterScroll instance will listen for both mouse and touch events regardless of the environment.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-options.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlet bs = new BScroll('.wrapper', {\n  disableMouse: false,\n  disableTouch: false\n})\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Pullup Plugin with BetterScroll (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to import the `Pullup` plugin and use it with `BetterScroll` to enable pull-up loading. It shows the necessary import statements and the instantiation of `BScroll` with the `pullUpLoad` option set to `true`.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/pull-up/README_zh-CN.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nimport Pullup from '@better-scroll/pull-up'\nBScroll.use(Pullup)\n\nconst bs = new BScroll('.wrapper', {\n  pullUpLoad: true\n})\n```\n\n----------------------------------------\n\nTITLE: Using BetterScroll with Plugins\nDESCRIPTION: This JavaScript code demonstrates how to use BetterScroll with a plugin. It imports both BScroll and the PullUp plugin.  It then initializes a new BScroll instance, configuring it to use pull-up loading.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/README_zh-CN.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nimport PullUp from '@better-scroll/pull-up'\n\nlet bs = new BScroll('.wrapper', {\n  pullUpLoad: true\n})\n```\n\n----------------------------------------\n\nTITLE: Resize Hook Usage\nDESCRIPTION: This JavaScript snippet illustrates the usage of the 'resize' hook in Better Scroll. A listener is attached to the 'resize' hook and logs a message when the window size changes.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-api.md#_snippet_57\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nconst bs = new BScroll('.wrapper', {})\nconst hooks = bs.scroller.hooks\nhooks.on('resize', () => {\n  console.log(\"window's size has changed\")\n})\n```\n\n----------------------------------------\n\nTITLE: Listening to 'pullingDown' event (__pull-down__)\nDESCRIPTION: This code snippet demonstrates how to listen to the 'pullingDown' event, which is triggered when the top pulldown distance exceeds the threshold. It requires the `pull-down` plugin. It imports BetterScroll and Pulldown, uses the plugin, and attaches a callback function to the 'pullingDown' event using `bs.on('pullingDown', () => {})`. It also includes calls to `fetchData()` and `bs.finishPullDown()`.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-api.md#_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport BetterScroll from '@better-scroll/core'\nimport Pulldown from '@better-scroll/pull-down'\n\nBetterScroll.use(Pulldown)\nconst bs = new BetterScroll('.wrapper', {\n  pullDownRefresh: true\n})\n\nbs.on('pullingDown', () => {\n  await fetchData()\n  bs.finishPullDown()\n})\n```\n\n----------------------------------------\n\nTITLE: Creating BetterScroll Instance (Core, CDN)\nDESCRIPTION: This JavaScript code snippet demonstrates how to create a BetterScroll instance using the CoreScroll-only version included via CDN. It gets the wrapper element and instantiates `BScroll` directly.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nlet wrapper = document.getElementById(\"wrapper\")\nlet bs = new BScroll(wrapper, {})\n```\n\n----------------------------------------\n\nTITLE: Subscribing to 'coordinateTransformation' Hook - JavaScript\nDESCRIPTION: This code snippet shows how to subscribe to the 'coordinateTransformation' hook of ScrollerActions. This hook is triggered after calculating the offset of the user's finger but before scrolling occurs, allowing modification of deltaX and deltaY. This is typically used when the wrapper's ancestor element is rotated.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/base-scroll-api.md#_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nlet bs = new BScroll('.wrapper', {\n    quadrant: 1 // default value\n})\nbs.scroller.actions.hooks.on(\n  'coordinateTransformation',\n  (transformateDeltaData) => {\n    // get user finger moved distance\n    const originDeltaX = transformateDeltaData.deltaX\n    const originDeltaY = transformateDeltaData.deltaY\n\n    // apply transformation\n    transformateDeltaData.deltaX = originDeltaY\n    transformateDeltaData.deltaY = originDeltaX\n\n    // transformateDeltaData.deltaX will be used as content DOM style's translateX\n    // transformateDeltaData.deltaY will be used as content DOM style's translateY\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Registering BetterScroll Scrollbar Plugin\nDESCRIPTION: Imports BetterScroll core and the ScrollBar plugin, then registers the plugin using `BScroll.use()`. This step is necessary to enable the scrollbar functionality within BetterScroll instances.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/scroll-bar.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nimport ScrollBar from '@better-scroll/scroll-bar'\n\nBScroll.use(ScrollBar)\n```\n\n----------------------------------------\n\nTITLE: Listening to 'slideWillChange' event (__slide__)\nDESCRIPTION: This code snippet demonstrates how to listen to the 'slideWillChange' event, which is triggered when the carousel is about to switch pages. It requires the `slide` plugin. It imports BetterScroll and Slide, uses the plugin, and attaches a callback function to the 'slideWillChange' event using `bs.on('slideWillChange', (page) => {})`. It also logs the pageX and pageY properties of the `page` object.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-api.md#_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport BetterScroll from '@better-scroll/core'\nimport Slide from '@better-scroll/slide'\n\nBetterScroll.use(Slide)\n\nconst bs = new BetterScroll('.wrapper', {\n  slide: true,\n  momentum: false,\n  bounce: false,\n  probeType: 2\n})\n\nbs.on('slideWillChange', (page) => {\n  // 即将要切换的页面\n  console.log(page.pageX, page.pageY)\n})\n```\n\n----------------------------------------\n\nTITLE: Initialize BetterScroll (Script tag)\nDESCRIPTION: This JavaScript code demonstrates how to initialize BetterScroll after including it via a script tag. It retrieves the wrapper element by ID and creates a new `BScroll` instance with the wrapper and an empty options object.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/how-to-install.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nlet wrapper = document.getElementById(\"wrapper\")\nlet bs = new BScroll(wrapper, {})\n```\n\n----------------------------------------\n\nTITLE: Initialize BetterScroll with preventDefaultException\nDESCRIPTION: This snippet shows how to initialize BetterScroll with the `preventDefaultException` option.  This allows you to selectively disable `e.preventDefault()` calls on touch events for specific elements, in this case elements with the class 'test'. This is useful for allowing browser default behavior like long press on images.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/FAQ/diagnosis.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet bs = new BScroll('.wrapper', {\n  preventDefaultException: {\n    className: /(^|\\s)test(\\s|$)/\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a BetterScroll Plugin Class\nDESCRIPTION: This TypeScript code defines a basic BetterScroll plugin class.  The class implements the PluginAPI interface, defines a static pluginName, and includes a constructor that accepts a BetterScroll instance. The constructor is intended to handle options, integrate with BetterScroll, and register hooks.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/how-to-write.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default class MyPlugin implements PluginAPI {\n  static pluginName = 'myPlugin'\n  public options: MyPluginConfig\n  constructor(public scroll: BScroll){\n    this.handleOptions()\n\n    this.handleBScroll()\n\n    this.registerHooks()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listening to 'zoomEnd' event (__zoom__)\nDESCRIPTION: This code snippet demonstrates how to listen to the 'zoomEnd' event, which is triggered after two-finger zoom behavior ends. It requires the `zoom` plugin and attaches a callback function to the 'zoomEnd' event using `bs.on('zoomEnd', ({ scale }) => {})`. It also receives the scale as a parameter.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-api.md#_snippet_27\n\nLANGUAGE: JavaScript\nCODE:\n```\nbs.on('zoomEnd', ({ scale }) => {})\n```\n\n----------------------------------------\n\nTITLE: Momentum Hook Usage\nDESCRIPTION: This JavaScript snippet shows how to modify the momentum scroll behavior using the 'momentum' hook in Better Scroll. A listener is attached to 'momentum' which is triggered right before the momentum animation starts and changes the final scroll coordinates.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-api.md#_snippet_59\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nconst bs = new BScroll('.wrapper', {})\nconst hooks = bs.scroller.hooks\nhooks.on('momentum', (scrollMetaData) => {\n  scrollMetaData.newX = 0\n  scrollMetaData.newY = -200\n})\n```\n\n----------------------------------------\n\nTITLE: Listening to 'alterOptions' event (__mouse-wheel__)\nDESCRIPTION: This code snippet demonstrates how to listen to the 'alterOptions' event, which is triggered when the mouse wheel starts scrolling. It requires the `mouse-wheel` plugin. It imports BetterScroll and MouseWheel, uses the plugin, and attaches a callback function to the 'alterOptions' event using `bs.on('alterOptions', (mouseWheelOptions) => {})`.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-api.md#_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport BetterScroll from '@better-scroll/core'\nimport MouseWheel from '@better-scroll/mouse-wheel'\n\nBetterScroll.use(MouseWheel)\nconst bs = new BetterScroll('.wrapper', {\n  mouseWheel: true\n})\n\nbs.on('alterOptions', (mouseWheelOptions) => {\n  /**\n   * mouseWheelOptions.speed：鼠标滚轮滚动的速度\n   * mouseWheelOptions.invert：滚轮滚动和 BetterScroll 滚动的方向是否一致\n   * mouseWheelOptions.easeTime：滚动动画的缓动时长。\n   * mouseWheelOptions.discreteTime：触发 wheelEnd 的间隔时长\n   * mouseWheelOptions.throttleTime：滚轮滚动是高频率的动作，因此可以通过 throttleTime 来限制触发频率\n   * mouseWheelOptions.dampingFactor：阻尼因子，当超出边界会施加阻力\n   **/\n})\n```\n\n----------------------------------------\n\nTITLE: Including BetterScroll via CDN (Full)\nDESCRIPTION: This HTML snippet demonstrates how to include BetterScroll in a project using a Content Delivery Network (CDN).  It includes both the standard and minified versions. This provides a quick and easy way to integrate BetterScroll without requiring local installation.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/better-scroll@latest/dist/better-scroll.js\"></script>\n\n<!-- minify -->\n<script src=\"https://unpkg.com/better-scroll@latest/dist/better-scroll.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Binding Momentum Hook - Scroller\nDESCRIPTION: Demonstrates how to bind to the 'momentum' hook in Scroller to intercept and modify momentum data before animation starts. Requires importing BScroll and accessing the scroller hooks.  The slide plugin listens to this hook. The argument is scrollMetaData (time, easing, newX, newY).\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/base-scroll-api.md#_snippet_53\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nconst bs = new BScroll('.wrapper', {})\nconst hooks = bs.scroller.hooks\nhooks.on('momentum', (scrollMetaData) => {\n  scrollMetaData.newX = 0\n  scrollMetaData.newY = -200\n})\n```\n\n----------------------------------------\n\nTITLE: Installing PullDown Plugin using yarn\nDESCRIPTION: This command installs the `@better-scroll/pull-down` package as a project dependency using yarn.  This allows your project to use the pull-to-refresh functionality provided by the plugin. You need to have yarn installed and configured in your environment.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/pulldown.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @better-scroll/pull-down\n```\n\n----------------------------------------\n\nTITLE: Installing Movable Plugin via NPM\nDESCRIPTION: This command installs the @better-scroll/movable plugin as a dependency using npm.  It adds the plugin to your project's node_modules directory and updates the package.json file.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/movable.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @better-scroll/movable --save\n```\n\n----------------------------------------\n\nTITLE: Listening to the zooming event\nDESCRIPTION: This code demonstrates how to listen to the `zooming` event, which is triggered during the zoom process. It shows how to access the current scale value from the event object.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/zoom.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n const bs = new BScroll('.bs-wrapper', {\n      freeScroll: true,\n      scrollX: true,\n      scrollY: true,\n      zoom: {\n        start: 1,\n        min: 0.5,\n        max: 2\n      }\n    })\n\n    bs.on('zooming', ({ scale }) => {\n      // use scale\n      console.log(scale) // 当前 scale 的值\n    })\n```\n\n----------------------------------------\n\nTITLE: Subscribing to 'scroll' Hook - JavaScript\nDESCRIPTION: This code snippet shows how to subscribe to the 'scroll' hook of ScrollerActions. This hook is triggered while scrolling. The hook function receives no arguments.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/base-scroll-api.md#_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nconst bs = new BScroll('.wrapper', {})\nconst hooks = bs.scroller.actions.hooks\nhooks.on('scroll', () => {})\n```\n\n----------------------------------------\n\nTITLE: Enabling Click Events in BetterScroll\nDESCRIPTION: This code snippet demonstrates how to enable click events in BetterScroll by setting the `click` option to `true`. By default, BetterScroll prevents the browser's native click events. Setting this option allows BetterScroll to dispatch a custom click event.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/FAQ/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\n\nlet bs = new BScroll('./div', {\n  click: true\n})\n```\n\n----------------------------------------\n\nTITLE: Default Slide Plugin Options\nDESCRIPTION: Demonstrates the default options used by the slide plugin when 'slide' is configured as true. These options include looping, a threshold for triggering page changes, animation speed, easing function, autoplay, and an interval between slides.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/slide.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst bs = new BScroll('.wrapper', {\n  slide: true\n})\n\n// equals\n\nconst bs = new BScroll('.wrapper', {\n  slide: {\n    loop: true,\n    threshold: 0.1,\n    speed: 400,\n    easing: ease.bounce,\n    listenFlick: true,\n    autoplay: true,\n    interval: 3000\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Handling slideWillChange Event with BScroll\nDESCRIPTION: This snippet demonstrates how to use the `slideWillChange` event in BScroll to capture the page index before the slide transition completes. It initializes BScroll with slide options and registers a listener for the `slideWillChange` event.  The pageX property of the page object provides the index of the horizontal page that will be displayed. This snippet assumes the existence of a this.$refs.slide DOM element.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/slide.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nlet currentPageIndex\nconst slide = new BScroll(this.$refs.slide, {\n  scrollX: true,\n  scrollY: false,\n  slide: {\n    threshold: 100\n  },\n  momentum: false,\n  bounce: false,\n  probeType: 2\n})\nslide.on('slideWillChange', (page) => {\n  currentPageIndex = page.pageX\n})\n```\n\n----------------------------------------\n\nTITLE: Install Movable Plugin\nDESCRIPTION: These commands install the @better-scroll/movable plugin using npm or yarn. The plugin is added as a dependency to your project.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/movable.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @better-scroll/movable --save\n\n// or\n\nyarn add @better-scroll/movable\n```\n\n----------------------------------------\n\nTITLE: Handling slidePageChanged Event with BScroll\nDESCRIPTION: This snippet shows how to use the `slidePageChanged` event in BScroll to capture the page index after the slide transition has completed. It initializes BScroll with slide enabled and registers a listener for the `slidePageChanged` event. The pageX property of the page object provides the index of the horizontal page that is currently displayed. This snippet assumes the existence of a this.$refs.slide DOM element.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/slide.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst slide = new BScroll(this.$refs.slide, {\n  scrollX: true,\n  scrollY: false,\n  slide: true,\n  momentum: false,\n  bounce: false\n})\nslide.on('slidePageChanged', (page) => {\n  currentPageIndex = page.pageX\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Observe DOM Plugin with npm\nDESCRIPTION: This command installs the @better-scroll/observe-dom plugin using npm. It adds the plugin as a project dependency.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/observe-dom.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @better-scroll/observe-dom --save\n```\n\n----------------------------------------\n\nTITLE: Behavior Hook: momentum - JavaScript\nDESCRIPTION: This hook is triggered when the conditions for triggering momentum animation are met, but before the calculation occurs.  It provides the momentum data and the scroll offset as parameters.  `momentumData` is an object with `destination`, `duration`, and `rate` properties, and `distance` is the scroll offset.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-api.md#_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nconst bs = new BScroll('.wrapper', {})\nconst hooks = bs.scroller.scrollBehaviorX.hooks\nhooks.on('momentum', (momentumData, distance) => {})\n```\n\n----------------------------------------\n\nTITLE: Installing PullDown Plugin using npm\nDESCRIPTION: This command installs the `@better-scroll/pull-down` package as a project dependency using npm.  This allows your project to use the pull-to-refresh functionality provided by the plugin. You need to have npm installed and configured in your environment.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/pulldown.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @better-scroll/pull-down --save\n```\n\n----------------------------------------\n\nTITLE: Initialize inner BetterScroll with click disabled\nDESCRIPTION: This snippet demonstrates how to prevent duplicate click events in nested BetterScroll scenarios by disabling the `click` option on the inner BetterScroll instance. This prevents the inner instance from dispatching click events, relying on the outer instance to handle them.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/FAQ/diagnosis.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet innerBS = new BScroll('.wrapper', {\n  click: false\n})\n```\n\n----------------------------------------\n\nTITLE: Declaring TypeScript Modules and Interfaces for BetterScroll Plugin\nDESCRIPTION: This TypeScript code snippet illustrates how to use TypeScript's declaration merging feature to extend the BetterScroll core module with custom options and API definitions for a plugin.  It defines types for plugin options and the plugin's API, and then declares these types as extensions to the BetterScroll module.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/how-to-write.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\n\nexport type MyPluginOptions = Partial<MyPluginConfig> | true\n\ntype MyPluginConfig = {\n  scrollText: string,\n  scrollEndText: string\n}\n\ninterface PluginAPI {\n  printScrollText(): void\n}\n\ndeclare module '@better-scroll/core' {\n  interface CustomOptions {\n    myPlugin?: myPluginOptions\n  }\n\n  interface CustomAPI {\n    myPlugin: PluginAPI\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ActionsHandler Hook: start - JavaScript\nDESCRIPTION: This hook is triggered after the initial touch position is recorded, just before the `touchmove` event is expected. It provides the event object as a parameter. The `event` parameter is the standard touch event object.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-api.md#_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nconst bs = new BScroll('.wrapper', {})\nconst hooks = bs.scroller.actionsHandler.hooks\nhooks.on('start', (event) => { console.log(event.target) })\n```\n\n----------------------------------------\n\nTITLE: Listening to 'scroll' event\nDESCRIPTION: This code snippet demonstrates how to listen to the 'scroll' event, which is triggered while scrolling is in progress. It attaches a callback function to the 'scroll' event using `bs.on('scroll', (position) => {})` and logs the x and y positions.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-api.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nbs.on('scroll', (position) => {\n  console.log(position.x, position.y)\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing BetterScroll with createBScroll\nDESCRIPTION: Initializes BetterScroll using `BetterScroll.createBScroll`.  This method is used when BetterScroll is included via script tag.  It takes a CSS selector for the wrapper element and an optional configuration object.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/how-to-install.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nlet bs = BetterScroll.createBScroll('.wrapper', {})\n```\n\n----------------------------------------\n\nTITLE: Using a BetterScroll Plugin\nDESCRIPTION: This JavaScript code demonstrates how to import and use a custom BetterScroll plugin. It includes registering the plugin with BetterScroll, initializing BetterScroll with plugin-specific options, and subscribing to events and methods exposed by the plugin.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/how-to-write.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n  import BScroll from '@better-scroll/core'\n  import MyPlugin from '@better-scroll/my-plugin'\n\n  BScroll.use(MyPlugin)\n\n  const bs = new BScroll('.wrapper', {\n    myPlugin: {\n      scrollText: 'I am scrolling',\n      scrollEndText: 'Scroll has ended'\n    },\n    // or\n    myPlugin: true\n  })\n\n  // Use the event that is proxied to bs by plugin\n  bs.on('printScrollEndText', (scrollEndText) => {\n    console.log(scrollEndText) // print \"Scroll has ended, position is (xx, yy)\"\n  })\n\n  // Use the method that is proxied to bs by plugin\n  bs.printScrollText() // print \"I am scrolling\"\n```\n\n----------------------------------------\n\nTITLE: Listening to 'contentChanged' event (>= 2.0.4)\nDESCRIPTION: This code snippet demonstrates how to listen to the 'contentChanged' event, which is triggered when `bs.refresh()` detects that the content DOM has changed (version >= 2.0.4). It attaches a callback function to the 'contentChanged' event using `bs.on('contentChanged', (newContent: HTMLElement) => {})`.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-api.md#_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\n// bs 版本 >= 2.0.4\nbs.on('contentChanged', (newContent: HTMLElement) => {})\n```\n\n----------------------------------------\n\nTITLE: Configuring Nested Scroll Options (pre v2.1.0)\nDESCRIPTION: Shows how to configure the `nestedScroll` option for BetterScroll instances before version 2.1.0. This configuration simply enables the nested scroll functionality.  This approach only supports double-layer nesting.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/nested-scroll.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// < v2.1.0\n// parent bs\nnew BScroll('.outerWrapper', {\n  nestedScroll: true\n})\n// child bs\nnew BScroll('.innerWrapper', {\n  nestedScroll: true\n})\n```\n\n----------------------------------------\n\nTITLE: ScrollerActions Hook: beforeEnd - JavaScript\nDESCRIPTION: This hook is triggered after the `touchend` event callback but before the final position is updated. It provides the event object as a parameter. The `event` parameter is the standard touch event object.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-api.md#_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nconst bs = new BScroll('.wrapper', {})\nconst hooks = bs.scroller.actions.hooks\nhooks.on('beforeEnd', (event) => { console.log(event) })\n```\n\n----------------------------------------\n\nTITLE: Integrating Plugin with BetterScroll\nDESCRIPTION: This TypeScript code demonstrates how to integrate a BetterScroll plugin with a BetterScroll instance. It uses the `proxy` method to proxy plugin methods to the BetterScroll instance and registers custom event types for the plugin.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/how-to-write.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default class MyPlugin implements PluginAPI {\n  private handleBScroll() {\n    const propertiesConfig = [\n      {\n        key: 'printScrollText',\n        sourceKey: 'plugins.myPluginOptions.printScrollText'\n      }\n    ]\n    // myPlugin.printScrollText is proxied to bs.printScrollText\n    this.scroll.proxy(propertiesConfig)\n    // Proxy printScrollEndText event to bs\n    // Users can subscribe to events via bs.on('printScrollEndText', handler)\n    this.scroll.registerType(['printScrollEndText'])\n  }\n\n  printScrollText() {\n    console.log(this.options.scrollText)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to 'beforeStart' Hook - JavaScript\nDESCRIPTION: This code snippet demonstrates how to subscribe to the 'beforeStart' hook of ActionsHandler. This hook is triggered immediately after the touchstart event, before the finger's position is recorded. The hook receives the event object as an argument.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/base-scroll-api.md#_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nconst bs = new BScroll('.wrapper', {})\nconst hooks = bs.scroller.actionsHandler.hooks\nhooks.on('beforeStart', (event) => { console.log(event.target) })\n```\n\n----------------------------------------\n\nTITLE: PullUpLoadOptions Type Definition\nDESCRIPTION: This TypeScript code snippet defines the types `PullUpLoadOptions` and `PullUpLoadConfig` used for configuring the pull-up functionality.  `PullUpLoadOptions` can be either a boolean or a partial `PullUpLoadConfig` which contains a `threshold` property.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/pullup.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport type PullUpLoadOptions = Partial<PullUpLoadConfig> | true\n\nexport interface PullUpLoadConfig {\n  threshold: number\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to 'beforeComputeBoundary' Hook - JavaScript\nDESCRIPTION: This code snippet demonstrates subscribing to the 'beforeComputeBoundary' hook of Behavior. This hook is triggered before calculating the scroll boundary. The hook function receives no arguments.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/base-scroll-api.md#_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nconst bs = new BScroll('.wrapper', {})\nconst hooks = bs.scroller.scrollBehaviorX.hooks\nhooks.on('beforeComputeBoundary', () => {})\n```\n\n----------------------------------------\n\nTITLE: End Hook Usage\nDESCRIPTION: This JavaScript snippet demonstrates how to use the 'end' hook in Better Scroll. A listener is attached to the 'end' hook, which is triggered after 'touchEnd' and before click validation, and logs the x and y coordinates of the current position.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-api.md#_snippet_56\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nconst bs = new BScroll('.wrapper', {})\nconst hooks = bs.scroller.hooks\nhooks.on('end', (position) => {\n  console.log(position.x)\n  console.log(position.y)\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring eventPassthrough for Vertical Scrolling in Nested BetterScroll (JS)\nDESCRIPTION: This snippet configures the `eventPassthrough` option in a nested BetterScroll instance to allow vertical native scrolling. This is useful when you have a vertical BetterScroll nested within a horizontal BetterScroll, and you want the vertical scrolling to work correctly.  The `eventPassthrough` is set to `'vertical'` to enable this behavior. Requires BetterScroll library.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/FAQ/diagnosis.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nLet innerBS = new BScroll('.wrapper', {\n      eventPassthrough: 'vertical' // keep vertical native scrolling\n    })\n```\n\n----------------------------------------\n\nTITLE: Subscribing to 'end' Hook - JavaScript\nDESCRIPTION: This code snippet demonstrates subscribing to the 'end' hook of ActionsHandler. This hook is triggered in response to the touchend event. The hook receives the event object as an argument.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/base-scroll-api.md#_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nconst bs = new BScroll('.wrapper', {})\nconst hooks = bs.scroller.actionsHandler.hooks\nhooks.on('end', (event) => {})\n```\n\n----------------------------------------\n\nTITLE: Listening for slidePageChanged Event\nDESCRIPTION: Example code to listen for the `slidePageChanged` event, which is triggered after a slide page has changed. The page object contains information such as the new coordinates and page indexes.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/slide.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst slide = new BScroll(this.$refs.slide, {\n  scrollX: true,\n  scrollY: false,\n  slide: true,\n  momentum: false,\n  bounce: false\n})\nslide.on('slidePageChanged', (page) => {\n  currentPageIndex = page.pageX\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Full BetterScroll using NPM\nDESCRIPTION: Installs the complete BetterScroll library (including plugins) using npm. The command adds `better-scroll` as a project dependency. The `--save` flag adds it to package.json.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/how-to-install.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm install better-scroll --save\n```\n\n----------------------------------------\n\nTITLE: Initialize BetterScroll with preventDefault set to false\nDESCRIPTION: This snippet demonstrates initializing BetterScroll with `preventDefault` set to `false`. This disables the default behavior of preventing default touch events, but can have side effects and is generally not recommended. Other elements may be affected by touch events.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/FAQ/diagnosis.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet bs = new BScroll('.wrapper', {\n  preventDefault: false\n})\n```\n\n----------------------------------------\n\nTITLE: Disabling Click Events in Nested BetterScroll (JS)\nDESCRIPTION: This snippet disables click event dispatching in a nested BetterScroll instance. This can be used as an alternative to `stopPropagation` to prevent multiple click triggers. Requires BetterScroll library.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/FAQ/diagnosis.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet innerBS = new BScroll('.wrapper', {\n    click: false\n  })\n```\n\n----------------------------------------\n\nTITLE: Subscribing to 'move' Hook - JavaScript\nDESCRIPTION: This code snippet demonstrates how to subscribe to the 'move' hook of ActionsHandler. This hook is triggered in response to touchmove events, after the finger's position is recorded. The hook receives an object with deltaX, deltaY, and the event object.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/base-scroll-api.md#_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nconst bs = new BScroll('.wrapper', {})\nconst hooks = bs.scroller.actionsHandler.hooks\nhooks.on('move', ({ deltaX, deltaY, e }) => {})\n```\n\n----------------------------------------\n\nTITLE: Registering Hooks to BetterScroll\nDESCRIPTION: This TypeScript code demonstrates how to register hooks with BetterScroll to implement custom plugin logic. It taps into the 'scrollEnd' hook and dispatches a custom event, 'printScrollEndText', with scroll position information.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/how-to-write.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport default class MyPlugin implements PluginAPI {\n  private registerHooks() {\n    const scroll = this.scroll\n    scroll.on(scroll.eventTypes.scrollEnd, ({ x, y }) => {\n      scroll.trigger(\n        scroll.eventTypes.printScrollEndText,\n        `${this.options.scrollEndText}, position is (${x}, ${y})`\n      )\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling preventDefault in BetterScroll (JS)\nDESCRIPTION: This snippet disables the `preventDefault` behavior in BetterScroll, allowing default browser actions. Setting `preventDefault` to `false` can have side effects and is generally not recommended.  Requires BetterScroll library.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/FAQ/diagnosis.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet bs = new BScroll('.wrapper', {\n    preventDefault: false\n  })\n```\n\n----------------------------------------\n\nTITLE: Subscribing to 'refresh' Hook - JavaScript\nDESCRIPTION: This code snippet shows how to subscribe to the 'refresh' hook of BScrollCore. This hook is triggered when BetterScroll recalculates its dimensions, allowing developers to execute custom logic upon refresh. The hook function receives no arguments.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/base-scroll-api.md#_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nconst bs = new BScroll('.wrapper', {})\nbs.hooks.on('refresh', () => { console.log('refreshed') })\n```\n\n----------------------------------------\n\nTITLE: Zoom To Method Usage\nDESCRIPTION: Illustrates using the `zoomTo` method to programmatically zoom the content. The origin coordinates are specified in different ways, including numeric offsets and string values like 'left', 'bottom', and 'center'.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/zoom.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst bs = new BScroll('.bs-wrapper', {\n  freeScroll: true,\n  scrollX: true,\n  scrollY: true,\n  zoom: {\n    start: 1,\n    min: 0.5,\n    max: 2\n  }\n})\n// scaled to 1.8 based on the bottom left point of the scaled element\nbs.zoomTo(1.8, 'left', 'bottom')\n// animation duration is 1000ms\nbs.zoomTo(1.8, 'left', 'bottom', 1000)\n// scaled to 1.8 based on offsetLeft 100px & offsetTop 100px of the scaled element\nbs.zoomTo(1.8, 100, 100)\n// scaled to 2 based on the center of scaled element\nbs.zoomTo(2, 'center', 'center')\n```\n\n----------------------------------------\n\nTITLE: Binding beforeRefresh Hook - Scroller\nDESCRIPTION: Demonstrates how to bind to the 'beforeRefresh' hook in Scroller, executed before the boundary is calculated. Requires importing BScroll and accessing the scroller hooks. The slide plugin listens to this hook.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/base-scroll-api.md#_snippet_56\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nconst bs = new BScroll('.wrapper', {})\nconst hooks = bs.scroller.hooks\nhooks.on('beforeRefresh', () => {})\n```\n\n----------------------------------------\n\nTITLE: Initializing MouseWheel with BetterScroll (JS)\nDESCRIPTION: This JavaScript code snippet demonstrates how to import and register the MouseWheel plugin with BetterScroll. It also shows how to instantiate BetterScroll with the mouseWheel option, including configuring properties like speed, invert, and easeTime.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/mouse-wheel.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nimport MouseWheel from '@better-scroll/mouse-wheel'\nBScroll.use(MouseWheel)\n\nnew BScroll('.bs-wrapper', {\n  //...\n  mouseWheel: {\n    speed: 20,\n    invert: false,\n    easeTime: 300\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Flick Hook Usage\nDESCRIPTION: This JavaScript snippet shows how to use the 'flick' hook in Better Scroll.  A listener is attached to the 'flick' hook, triggered when a finger flick gesture is detected.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-api.md#_snippet_58\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nconst bs = new BScroll('.wrapper', {})\nconst hooks = bs.scroller.hooks\nhooks.on('flick', () => {})\n```\n\n----------------------------------------\n\nTITLE: Importing BetterScroll with CommonJS\nDESCRIPTION: Imports the core BetterScroll library in a JavaScript file using CommonJS syntax.  This is typical for Node.js environments or older JavaScript projects. The `@better-scroll/scroll` package might be a typo and should probably be `@better-scroll/core`.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/how-to-install.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar BScroll = require('@better-scroll/scroll')\n```\n\n----------------------------------------\n\nTITLE: Binding TimeFunction Hook - Transition\nDESCRIPTION: Demonstrates how to bind to the 'timeFunction' hook in the animation hooks (Transition) to get the CSS3 transition-timing-function. Requires importing BScroll and accessing the animater hooks. The hook is triggered before the CSS3 transition starts.  The argument is the CSS3 transition-timing-function.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/base-scroll-api.md#_snippet_46\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nconst bs = new BScroll('.wrapper', {})\nconst hooks = bs.scroller.animater.hooks\nhooks.on('timeFunction', (easing) => {\n  console.log(easing) // cubic-bezier(0.1, 0.7, 1.0, 0.1)\n})\n```\n\n----------------------------------------\n\nTITLE: Subscribing to 'start' Hook - JavaScript\nDESCRIPTION: This code snippet demonstrates how to subscribe to the 'start' hook of ScrollerActions.  This hook is triggered after recording all the initial scrolling information. The hook receives the event object as an argument.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/base-scroll-api.md#_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nconst bs = new BScroll('.wrapper', {})\nconst hooks = bs.scroller.actions.hooks\nhooks.on('start', (event) => { console.log(event.target) })\n```\n\n----------------------------------------\n\nTITLE: Subscribing to 'beforeInitialScrollTo' Hook - JavaScript\nDESCRIPTION: This code snippet demonstrates how to subscribe to the 'beforeInitialScrollTo' hook of BScrollCore.  It allows modifying the initial scroll position before it's applied. The hook receives a position object with x and y properties.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/base-scroll-api.md#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nconst bs = new BScroll('.wrapper', {})\nbs.hooks.on('beforeInitialScrollTo', (postion) => {\n  postion.x = 0\n  position.y = -200 // Initialize scroll to -200\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Styles to slide-page elements\nDESCRIPTION: Adding the below styles to each `slide-page` element to avoid flickering on some iPhone systems when `useTransition = true`.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/slide.md#_snippet_6\n\nLANGUAGE: css\nCODE:\n```\ntransform: translate3d(0,0,0)\nbackface-visibility: hidden\n```\n\n----------------------------------------\n\nTITLE: Installing Pullup Plugin\nDESCRIPTION: Instructions for installing the BetterScroll pullup plugin using npm or yarn. This plugin extends BetterScroll's functionality to enable pull-up-to-load features.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/pullup.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @better-scroll/pull-up --save\n\n// or\n\nyarn add @better-scroll/pull-up\n```\n\n----------------------------------------\n\nTITLE: Configuring probeType for Scroll Listener\nDESCRIPTION: This code snippet shows how to configure the `probeType` option to enable the `scroll` event listener in BetterScroll. Setting `probeType` to 3 ensures that the scroll event is dispatched during momentum animation, improving performance.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/FAQ/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\n\nlet bs = new BScroll('./div', {\n  probeType: 3\n})\n```\n\n----------------------------------------\n\nTITLE: Listening for 'scrollEnd' event in BetterScroll\nDESCRIPTION: This snippet shows how to listen for the 'scrollEnd' event in BetterScroll. This event is triggered when scrolling ends or is forced to stop. The event handler is an empty anonymous function.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/base-scroll-api.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nbs.on('scrollEnd', () => {})\n```\n\n----------------------------------------\n\nTITLE: Configuring BetterScroll with Indicators\nDESCRIPTION: Creates a new BetterScroll instance with the Indicators plugin configured in the `options`. The `relationElement` option specifies the DOM element to be linked with the BetterScroll instance.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/indicators.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnew BScroll('.wrapper', {\n  indicators: {\n    // 详情可以参考下面的 demo\n    relationElement: \"联动的元素 DOM\"\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing BetterScroll with disableMouse and disableTouch\nDESCRIPTION: This code snippet demonstrates how to instantiate a BetterScroll object with both `disableMouse` and `disableTouch` options set to `false`.  This configuration is useful in scenarios where both touch and mouse events need to be listened to simultaneously, such as on a tablet with mouse support. It overrides BetterScroll's default behavior which may incorrectly determine whether to listen for touch or mouse events based on the environment.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/base-scroll-options.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nlet bs = new BScroll('.wrapper', {\n    disableMouse: false,\n    disableTouch: false\n  })\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Structure for BetterScroll\nDESCRIPTION: This HTML structure demonstrates the basic setup required for BetterScroll. A wrapper element contains the content to be scrolled. BetterScroll is initialized on the wrapper, and the first child element inside the wrapper is treated as the scrollable content.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/README_zh-CN.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"wrapper\">\n  <ul class=\"content\">\n    <li>...</li>\n    <li>...</li>\n    ...\n  </ul>\n  <!-- 这里可以放一些其它的 DOM，但不会影响滚动 -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Subscribing to 'beforeEnd' Hook - JavaScript\nDESCRIPTION: This code snippet demonstrates subscribing to the 'beforeEnd' hook of ScrollerActions. This hook is triggered after the touchend event callback but before updating the final position. The hook receives the event object as an argument.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/base-scroll-api.md#_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nconst bs = new BScroll('.wrapper', {})\nconst hooks = bs.scroller.actions.hooks\nhooks.on('beforeEnd', (event) => { console.log(event) })\n```\n\n----------------------------------------\n\nTITLE: Binding End Hook - scrollBehaviorX\nDESCRIPTION: Demonstrates how to bind to the 'end' hook in scrollBehaviorX to handle the end of a scroll action when momentum is not triggered.  It requires importing BScroll and accessing the scrollBehaviorX hooks. Provides access to the final destination and duration.  The argument is momentumInfo (target position, duration).\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/base-scroll-api.md#_snippet_44\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nconst bs = new BScroll('.wrapper', {})\nconst hooks = bs.scroller.scrollBehaviorX.hooks\nhooks.on('end', (momentumInfo) => {\n  console.log(momentumInfo.destination)\n  console.log(momentumInfo.duration)\n})\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for BetterScroll\nDESCRIPTION: This HTML snippet demonstrates the basic structure required for BetterScroll to function.  It includes a wrapper div with a fixed height and a content ul element that will be scrolled. The wrapper acts as the container, and BetterScroll will handle the scrolling of its first child (content).\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/README.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"wrapper\">\n  <ul class=\"content\">\n    <li>...</li>\n    <li>...</li>\n    ...\n  </ul>\n  <!-- you can put some other DOMs here, it won't affect the scrolling -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing Observe DOM Plugin with Yarn\nDESCRIPTION: This command installs the @better-scroll/observe-dom plugin using Yarn. It adds the plugin as a project dependency.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/observe-dom.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @better-scroll/observe-dom\n```\n\n----------------------------------------\n\nTITLE: Binding Momentum Hook - scrollBehaviorX\nDESCRIPTION: Demonstrates how to bind to the 'momentum' hook in scrollBehaviorX to intercept and modify momentum data before it's applied.  It requires importing BScroll and accessing the scrollBehaviorX hooks.  This allows customization of the scrolling momentum behavior. Arguments are momentumData (target position, duration, rate) and distance (scroll offset).\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/base-scroll-api.md#_snippet_43\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nconst bs = new BScroll('.wrapper', {})\nconst hooks = bs.scroller.scrollBehaviorX.hooks\nhooks.on('momentum', (momentumData, distance) => {})\n```\n\n----------------------------------------\n\nTITLE: Binding Resize Hook - Scroller\nDESCRIPTION: Demonstrates how to bind to the 'resize' hook in Scroller to detect window size changes.  Requires importing BScroll and accessing the scroller hooks.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/base-scroll-api.md#_snippet_51\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nconst bs = new BScroll('.wrapper', {})\nconst hooks = bs.scroller.hooks\nhooks.on('resize', () => {\n  console.log(\"window's size has changed\")\n})\n```\n\n----------------------------------------\n\nTITLE: ScrollerActions Hook: beforeMove - JavaScript\nDESCRIPTION: This hook is triggered before validating whether a scroll is legitimate.  It provides the event object as a parameter. The `event` parameter is the standard touch event object.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-api.md#_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nconst bs = new BScroll('.wrapper', {})\nconst hooks = bs.scroller.actions.hooks\nhooks.on('beforeMove', (event) => { console.log(event.target) })\n```\n\n----------------------------------------\n\nTITLE: Registering Hooks and Dispatching Events in BetterScroll plugin\nDESCRIPTION: This TypeScript snippet demonstrates how to register hooks into BetterScroll's lifecycle and dispatch custom events. It shows how to listen for the `scrollEnd` event and trigger a custom `printScrollEndText` event with relevant data.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/how-to-write.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n        export default class MyPlugin implements PluginAPI {\n          private registerHooks() {\n            const scroll = this.scroll\n            scroll.on(scroll.eventTypes.scrollEnd, ({ x, y }) => {\n              scroll.trigger(\n                scroll.eventTypes.printScrollEndText,\n                `${this.options.scrollEndText}, position is (${x}, ${y})`\n              )\n            })\n          }\n        }\n      \n```\n\n----------------------------------------\n\nTITLE: Initializing BetterScroll Core\nDESCRIPTION: This code snippet demonstrates how to import and initialize BetterScroll Core to enable scrolling within a specified wrapper element.  It creates a new BScroll instance, targeting the '.wrapper' CSS selector. Configuration options can be passed as the second argument.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/core/README_zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\n\nconst bs = new BScroll('.wrapper', {/* ... */})\n```\n\n----------------------------------------\n\nTITLE: Listening for 'touchEnd' event in BetterScroll\nDESCRIPTION: This snippet demonstrates how to listen for the 'touchEnd' event in BetterScroll. This event is triggered when the user's finger leaves the scroll area. The event handler is an empty anonymous function.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/base-scroll-api.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nbs.on('touchEnd', () => {})\n```\n\n----------------------------------------\n\nTITLE: Initializing BetterScroll with Options - JavaScript\nDESCRIPTION: This code snippet demonstrates how to initialize a BetterScroll instance with various options. It imports the `BScroll` class and creates a new instance, passing in the wrapper element selector and an options object that enables `pullUpLoad`, `scrollbar`, and `pullDownRefresh` features. This setup configures the scrollable area with the specified functionalities.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/better-scroll/README_zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from 'better-scroll'\n\nconst bs = new BScroll('.wrapper', {\n  pullUpLoad: true,\n  scrollbar: true,\n  pullDownRefresh: true\n  // and so on\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing BetterScroll with specifiedIndexAsContent\nDESCRIPTION: This code snippet demonstrates how to initialize a BetterScroll instance using the `specifiedIndexAsContent` option. This allows you to designate a specific child element of the wrapper as the content to be scrolled, instead of the default first child. The example selects the second child element (index 1) as the content.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/base-scroll-options.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n// For the above DOM structure, when BetterScroll version <= 2.0.3, only div.content1 is used as content\n// When the version is >= 2.0.4, content can be specified through 'specifiedIndexAsContent'\n\nlet bs = new BScroll('.wrapper', {\n   specifiedIndexAsContent: 1 // use div.content2 as BetterScroll's content\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing BScroll with Zoom Plugin - JavaScript\nDESCRIPTION: This code snippet demonstrates how to import and use the Zoom plugin with BScroll. It initializes a new BScroll instance, enables free scrolling, and configures the zoom options with start, min, and max values.  Dependencies include `@better-scroll/core` and `@better-scroll/zoom`.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/zoom/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nimport Zoom from '@better-scroll/zoom'\nBScroll.use(Zoom)\n\nconst bs = new BScroll('.zoom-wrapper', {\n  freeScroll: true,\n  scrollX: true,\n  scrollY: true,\n  disableMouse: true,\n  useTransition: true,\n  zoom: {\n    start: 1,\n    min: 0.5,\n    max: 2\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Attaching Plugin Events to BetterScroll Instance\nDESCRIPTION: This code snippet demonstrates how to attach event listeners to a BetterScroll plugin's events, which are delegated to the BetterScroll instance. It imports BetterScroll and the plugin, registers the plugin, and then instantiates BetterScroll. Event listeners are added using `bs.on()`.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n  import BScroll from '@better-scroll/core'\n  import Zoom from '@better-scroll/zoom'\n\n  BScroll.use(Zoom)\n\n  const bs = new BScroll('#scroll-wrapper', {\n    freeScroll: true,\n    scrollX: true,\n    scrollY: true,\n    zoom: {\n      start: 1,\n      min: 0.5,\n      max: 2\n    }\n  })\n\n  bs.on('zoomStart', zoomStartHandler)\n  // so, you can do anything in zoomStartHandler\n```\n\n----------------------------------------\n\nTITLE: Subscribing to 'computeBoundary' Hook - JavaScript\nDESCRIPTION: This code snippet demonstrates subscribing to the 'computeBoundary' hook of Behavior. This hook is triggered after calculating the scroll boundary. It allows accessing the minimum and maximum scroll positions. The hook receives the boundary object as an argument.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/base-scroll-api.md#_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nconst bs = new BScroll('.wrapper', {})\nconst hooks = bs.scroller.scrollBehaviorX.hooks\nhooks.on('computeBoundary', (boundary) => {\n  // The maximum value of the upper boundary, the more positive, the greater the pull down\n  console.log(boundary.minScrollPos)\n  // The minimum value of the lower boundary, the more negative, the farther you roll\n  console.log(boundary.maxScrollPos)\n})\n```\n\n----------------------------------------\n\nTITLE: Binding Translate Hook - Translater\nDESCRIPTION: Demonstrates how to bind to the 'translate' hook in Translater to access the point object after the transform style is applied. Requires importing BScroll and accessing the translater hooks. The argument is the point object (x, y).\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/base-scroll-api.md#_snippet_48\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nconst bs = new BScroll('.wrapper', {})\nconst hooks = bs.scroller.translater.hooks\nhooks.on('translate', (point) => {\n  console.log(point) // { x: 0, y: 0 }\n})\n```\n\n----------------------------------------\n\nTITLE: Including BetterScroll via CDN (Core)\nDESCRIPTION: This HTML snippet demonstrates how to include the CoreScroll-only version of BetterScroll using a CDN. Both standard and minified versions are available for inclusion. This is useful for projects needing minimal functionality and reduced bundle size.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/README.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/@better-scroll/core@latest/dist/core.js\"></script>\n\n<!-- minify -->\n<script src=\"https://unpkg.com/@better-scroll/core@latest/dist/core.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: PullDownRefresh Configuration\nDESCRIPTION: Illustrates how to configure the `pullDownRefresh` options with default values when set to `true`. Explains the equivalent configuration object that's used internally when `pullDownRefresh` is simply set to `true`.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/pulldown.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst bs = new BScroll('.wrapper', {\n  pullDownRefresh: true\n})\n\n// 相当于\n\nconst bs = new BScroll('.wrapper', {\n  pullDownRefresh: {\n    threshold: 90,\n    stop: 40\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing BetterScroll with Full Wheel Options\nDESCRIPTION: Initialize BetterScroll with detailed wheel configuration options, customizing the appearance and behavior of the wheel component. Options include setting wrapper class, item class, rotation angle, adjust time, selected index, and disabled item class.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/wheel.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst bs = new BScroll('.wrapper', {\n  wheel: {\n    wheelWrapperClass: 'wheel-scroll',\n    wheelItemClass: 'wheel-item',\n    rotate: 25,\n    adjustTime: 400,\n    selectedIndex: 0,\n    wheelDisabledItemClass: 'wheel-disabled-item'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Puppeteer Download Host with Taobao Mirror\nDESCRIPTION: This shell command sets the PUPPETEER_DOWNLOAD_HOST environment variable to the Taobao mirror, which can help resolve issues when downloading Puppeteer in China. It is used as a prerequisite for installing better-scroll.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/README_zh-CN.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nPUPPETEER_DOWNLOAD_HOST=https://npm.taobao.org/mirrors yarn\n```\n\n----------------------------------------\n\nTITLE: Configuring BetterScroll Slide\nDESCRIPTION: Configure the BetterScroll instance with slide-specific options. This includes setting `scrollX`, `scrollY`, `slide` options, and disabling `momentum` and `bounce` for proper slide behavior. The `stopPropagation` option prevents event bubbling.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/slide.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnew BScroll('.bs-wrapper', {\n  scrollX: true,\n  scrollY: false,\n  slide: {\n    threshold: 100\n  },\n  momentum: false,\n  bounce: false,\n  stopPropagation: true\n})\n```\n\n----------------------------------------\n\nTITLE: Listening to 'mousewheelStart' event (__mouse-wheel__)\nDESCRIPTION: This code snippet demonstrates how to listen to the 'mousewheelStart' event, which is triggered when the mouse wheel starts scrolling. It requires the `mouse-wheel` plugin. It imports BetterScroll and MouseWheel, uses the plugin, and attaches a callback function to the 'mousewheelStart' event using `bs.on('mousewheelStart', () => {})`.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-api.md#_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport BetterScroll from '@better-scroll/core'\nimport MouseWheel from '@better-scroll/mouse-wheel'\n\nBetterScroll.use(MouseWheel)\nconst bs = new BetterScroll('.wrapper', {\n  mouseWheel: true\n})\n\nbs.on('mousewheelStart', () => {})\n```\n\n----------------------------------------\n\nTITLE: Using a BetterScroll Plugin\nDESCRIPTION: This snippet demonstrates how to import, register, and use a BetterScroll plugin. It shows how to pass options to the plugin during BetterScroll initialization and how to use the plugin's exposed events and methods.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/how-to-write.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n  import BScroll from '@better-scroll/core'\n  import MyPlugin from '@better-scroll/my-plugin'\n\n  BScroll.use(MyPlugin)\n\n  const bs = new BScroll('.wrapper', {\n    myPlugin: {\n      scrollText: 'I am scrolling',\n      scrollEndText: 'Scroll has ended'\n    },\n    // 或者\n    myPlugin: true\n  })\n\n  // 使用插件暴露到 bs 的事件\n  bs.on('printScrollEndText', (scrollEndText) => {\n    console.log(scrollEndText) // 打印 \"Scroll has ended, position is (xx, yy)\"\n  })\n\n  // 使用插件代理到 bs 实例上的方法\n  bs.printScrollText() // 打印 \"I am scrolling\"\n\n```\n\n----------------------------------------\n\nTITLE: Using Movable and Zoom Plugins Together\nDESCRIPTION: This code showcases the integration of both Movable and Zoom plugins in a BetterScroll instance. It requires importing and registering both plugins.  The configuration includes settings for both movable and zoom features, such as `start`, `min`, and `max` zoom levels.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/movable.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nimport Movable from '@better-scroll/movable'\nimport Zoom from '@better-scroll/zoom'\nnew BScroll('.bs-wrapper', {\n  bindToTarget: true,\n  scrollX: true,\n  scrollY: true,\n  freeScroll: true,\n  bounce: true\n  movable: true // for movable plugin\n  zoom: { // for zoom plugin\n    start: 1,\n    min: 1,\n    max: 3\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Time Hook Usage\nDESCRIPTION: This JavaScript snippet showcases the usage of the 'time' hook in Better Scroll.  It initializes a BScroll instance and attaches a listener to the 'time' hook which is triggered before a CSS3 transition begins. The code logs the duration of the transition.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-api.md#_snippet_53\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nconst bs = new BScroll('.wrapper', {})\nconst hooks = bs.scroller.animater.hooks\nhooks.on('time', (duration) => {\n  console.log(duration) // 800\n})\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for BetterScroll Slide\nDESCRIPTION: Defines the basic HTML structure required for implementing the BetterScroll slide functionality. It comprises a slide-wrapper, a slide-content (which holds the scrollable content), and multiple slide-page elements representing individual slides.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/slide.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"slide-wrapper\">\n  <div class=\"slide-content\">\n    <div class=\"slide-page\"><div>\n    <div class=\"slide-page\"><div>\n    <div class=\"slide-page\"><div>\n    <div class=\"slide-page\"><div>\n  <div/>\n<div/>\n```\n\n----------------------------------------\n\nTITLE: ScrollerActions Hook: scrollStart - JavaScript\nDESCRIPTION: This hook is triggered when a scroll is validated and about to begin.  No parameters are passed to the hook's callback function.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-api.md#_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nconst bs = new BScroll('.wrapper', {})\nconst hooks = bs.scroller.actions.hooks\nhooks.on('scrollStart', () => {})\n```\n\n----------------------------------------\n\nTITLE: Translate Hook Usage\nDESCRIPTION: This JavaScript snippet demonstrates how to use the 'translate' hook in Better Scroll. It initializes a BScroll instance, accesses the translater's hooks, and logs the 'point' object containing the x and y translation values when the 'translate' event is triggered. The 'translate' hook is triggered after modifying the content element's transform style.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-api.md#_snippet_52\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nconst bs = new BScroll('.wrapper', {})\nconst hooks = bs.scroller.translater.hooks\nhooks.on('translate', (point) => {\n  console.log(point) // { x: 0, y: 0 }\n})\n```\n\n----------------------------------------\n\nTITLE: PullDownRefresh Options Type Definition\nDESCRIPTION: Defines the TypeScript interface for the PullDownRefreshOptions configuration, showcasing the `threshold` and `stop` properties and their respective types.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/pulldown.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport type PullDownRefreshOptions = Partial<PullDownRefreshConfig> | true\n\nexport interface PullDownRefreshConfig {\n  threshold: number\n  stop: number\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Movable Plugin via Yarn\nDESCRIPTION: This command installs the @better-scroll/movable plugin as a dependency using Yarn. It adds the plugin to your project's node_modules directory and updates the yarn.lock file.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/movable.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @better-scroll/movable\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Scroll with Better Scroll (Core) in JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize a basic scrollable area using the core Better Scroll library. It imports the BScroll class and creates a new instance, targeting an element with the class '.wrapper'. Configuration options can be added within the constructor.  It requires the '@better-scroll/core' package.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/use.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nlet bs = new BScroll('.wrapper', {\n  // ...... 详见配置项\n})\n```\n\n----------------------------------------\n\nTITLE: Removing scroll event listener\nDESCRIPTION: This JavaScript snippet demonstrates how to remove a `scroll` event listener in BetterScroll using the `off` method. It imports BetterScroll, creates an instance, attaches a callback function `handler` to the `scroll` event, and then removes the listener.  Requires the `@better-scroll/core` package.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-api.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nlet scroll = new BScroll('.wrapper', {\n  probeType: 3\n})\nfunction handler() {\n    console.log('bs is scrolling now')\n}\nscroll.on('scroll', handler)\n\nscroll.off('scroll', handler)\n```\n\n----------------------------------------\n\nTITLE: Configuring Dblclick Event Delay (JavaScript)\nDESCRIPTION: This snippet showcases how to configure the delay for double-click events in BetterScroll.  It demonstrates passing an object to the `dblclick` option, where the `delay` property specifies the time (in milliseconds) between two clicks to be considered a double-click. This allows customization of the sensitivity of double-click detection.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-options.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndblclick: {\n  delay: 300\n}\n```\n\n----------------------------------------\n\nTITLE: Default Scrollbar Options Configuration\nDESCRIPTION: Demonstrates the default options used internally when the scrollbar is simply set to `true`. This is useful for understanding the initial behavior of the scrollbar and which options can be customized.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/scroll-bar.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst bs = new BScroll('.wrapper', {\n  scrollbar: true\n})\n\n// 相当于\n\nconst bs = new BScroll('.wrapper', {\n  scrollbar: {\n    fade: true,\n    interactive: false,\n    // 以下配置项 v2.2.0 才支持\n    customElements: [],\n    minSize: 8,\n    scrollbarTrackClickable: false,\n    scrollbarTrackOffsetType: 'step',\n    scrollbarTrackOffsetTime: 300,\n    // 以下配置项 v2.4.0 才支持\n    fadeInTime: 250,\n    fadeOutTime: 500\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: BeforeRefresh Hook Usage\nDESCRIPTION: This JavaScript snippet demonstrates the usage of the 'beforeRefresh' hook in Better Scroll. A listener is attached to the 'beforeRefresh' hook which is triggered before calculating the behavior boundary.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-api.md#_snippet_62\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nconst bs = new BScroll('.wrapper', {})\nconst hooks = bs.scroller.hooks\nhooks.on('beforeRefresh', () => {})\n```\n\n----------------------------------------\n\nTITLE: Listening to 'touchEnd' event\nDESCRIPTION: This code snippet demonstrates how to listen to the 'touchEnd' event, which is triggered when the user lifts their finger from the scrolling area. It attaches a callback function to the 'touchEnd' event using `bs.on('touchEnd', () => {})`.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-api.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nbs.on('touchEnd', () => {})\n```\n\n----------------------------------------\n\nTITLE: ScrollToElement Hook Usage\nDESCRIPTION: This JavaScript snippet demonstrates using the 'scrollToElement' hook in Better Scroll. It attaches a listener to 'scrollToElement', triggered when bs.scrollToElement is called, and logs the target element and its position.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-api.md#_snippet_61\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nconst bs = new BScroll('.wrapper', {})\nconst hooks = bs.scroller.hooks\nhooks.on('scrollToElement', (el, pos) => {\n  console.log(el)\n  console.log(pos.left)\n  console.log(pos.top)\n})\nbs.scrollToElement('.some-item', 300, true, true)\n```\n\n----------------------------------------\n\nTITLE: Scrolling with extraTransform\nDESCRIPTION: This JavaScript snippet demonstrates how to use the `scrollTo` method of BetterScroll to scroll to a specific position with an additional CSS transform applied during the animation.  It defines an `extraTransform` object with `start` and `end` properties to specify the transformation's initial and final states. Requires BetterScroll instance.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-api.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet extraTransform = {\n  // 起点的属性\n  start: {\n    scale: 0\n  },\n  // 终点的属性\n  end: {\n    scale: 1.1\n  }\n}\nbs.scrollTo(0, -60, 300, undefined, extraTransform)\n```\n\n----------------------------------------\n\nTITLE: MouseWheelConfig Interface\nDESCRIPTION: Defines the configuration interface for the MouseWheel plugin. It specifies the types and properties for the speed, invert, easeTime, discreteTime, throttleTime and dampingFactor options.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/mouse-wheel.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface MouseWheelConfig {\n  speed: number\n  invert: boolean\n  easeTime: number\n  discreteTime: number\n  throttleTime: number,\n  dampingFactor: number\n}\n```\n\n----------------------------------------\n\nTITLE: Initialize BetterScroll with eventPassthrough\nDESCRIPTION: This code snippet demonstrates how to initialize BetterScroll with the `eventPassthrough` option set to 'vertical'. This configuration allows vertical scrolling on the parent container even when interacting with a horizontal scrolling area within the BetterScroll instance. This is useful for scenarios where you want to maintain native browser scrolling behavior in one direction while using BetterScroll for scrolling in another.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/FAQ/diagnosis.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet bs = new BScroll('.wrapper', {\n  eventPassthrough: 'vertical' // 保持纵向的原生浏览器滚动\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Scroll Hook with probeType (JavaScript)\nDESCRIPTION: This code snippet shows how to configure the `probeType` option in BetterScroll to dispatch the `scroll` hook. The `probeType` option determines when the `scroll` event is dispatched. Setting it to `3` dispatches the event during the `momentum` animation, which is the recommended setting.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/FAQ/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\n\nlet bs = new BScroll('./div', {\n  probeType: 3\n})\n```\n\n----------------------------------------\n\nTITLE: Listening to BetterScroll hooks\nDESCRIPTION: This JavaScript snippet demonstrates listening for BetterScroll hooks using the `hooks.on` method. It imports BScroll from `@better-scroll/core`, creates a new BetterScroll instance and then listens for the `refresh` and `enable` hooks. Requires the `@better-scroll/core` package.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-api.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nlet bs = new BScroll('.wrapper', {})\n\n// 监听 bs 的 refresh 钩子\nbs.hooks.on('refresh', () => {})\n// 监听 bs 的 enable 钩子\nbs.hooks.on('enable', () => {})\n```\n\n----------------------------------------\n\nTITLE: Using a BetterScroll Plugin\nDESCRIPTION: This code snippet demonstrates how to use a BetterScroll plugin.  It imports BetterScroll and the desired plugin, then registers the plugin using `BScroll.use()`. The plugin is configured during BetterScroll instantiation using a configuration object that corresponds to the plugin's name.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n  import BScroll from '@better-scroll/core'\n  import Plugin from 'somewhere'\n\n  BScroll.use(Plugin)\n  new BScroll('.wrapper', {\n    pluginKey: {} // pluginKey 对应 Plugin 类上静态属性 pluginName 的值，否则插件无法实例化\n  })\n```\n\n----------------------------------------\n\nTITLE: Listening for 'pullingDown' event with PullDown plugin\nDESCRIPTION: This snippet demonstrates how to listen for the 'pullingDown' event of the PullDown plugin in BetterScroll. This event is triggered when the top pull-down distance exceeds the defined threshold. The PullDown plugin must be used and pullDownRefresh option must be enabled.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/base-scroll-api.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport BetterScroll from '@better-scroll/core'\nimport PullDown from '@better-scroll/pull-down'\n\nBetterScroll.use(PullDown)\nconst bs = new BetterScroll('.wrapper', {\n  pullDownRefresh: true\n})\n\nbs.on('pullingDown', () => {\n  await fetchData()\n  bs.finishPullDown()\n})\n```\n\n----------------------------------------\n\nTITLE: Import and Use NestedScroll Plugin with better-scroll in JavaScript\nDESCRIPTION: This code snippet demonstrates how to import the better-scroll library and the NestedScroll plugin, and then register the plugin with better-scroll. It shows the basic setup required to use the NestedScroll plugin in a JavaScript environment. The plugin enhances better-scroll's functionality by enabling nested scrolling.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/nested-scroll/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport BScroll from 'better-scroll'\nimport NestedScroll from '@better-scroll/nested-scroll'\n\nBScroll.use(NestedScroll)\n\n// parent bs\nnew BScroll('.outerWrapper', {\n  nestedScroll: true\n})\n// child bs\nnew BScroll('.innerWrapper', {\n  nestedScroll: true\n})\n```\n\n----------------------------------------\n\nTITLE: PullDownRefreshOptions Type Definition\nDESCRIPTION: This TypeScript code defines the types for the `PullDownRefreshOptions` used in the `openPullDown` method. It allows specifying a partial configuration or using the `true` value for default settings.  The configuration includes the `threshold` and `stop` properties, which determine the pull-down distance and rebound distance, respectively.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/pulldown.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport type PullDownRefreshOptions = Partial<PullDownRefreshConfig> | true\n\nexport interface PullDownRefreshConfig {\n  threshold: number\n  stop: number\n}\n```\n\n----------------------------------------\n\nTITLE: Listening for 'slideWillChange' event with Slide plugin\nDESCRIPTION: This snippet demonstrates how to listen for the 'slideWillChange' event of the Slide plugin in BetterScroll. This event is triggered just before the slide switches to a new page, providing the page object as an argument. The Slide plugin must be used and enabled.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/base-scroll-api.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport BetterScroll from '@better-scroll/core'\nimport Slide from '@better-scroll/slide'\n\nBetterScroll.use(Slide)\n\nconst bs = new BetterScroll('.wrapper', {\n  slide: true,\n  momentum: false,\n  bounce: false,\n  probeType: 2\n})\n\nbs.on('slideWillChange', (page) => {\n  // Page about to switch\n  console.log(page.pageX, page.pageY)\n})\n```\n\n----------------------------------------\n\nTITLE: Subscribing to 'end' Hook - JavaScript\nDESCRIPTION: This code snippet demonstrates how to subscribe to the 'end' hook of ScrollerActions. This hook is triggered after the touchend event callback and after updating the scroll direction. It receives the event object and the current position as arguments.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/base-scroll-api.md#_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nconst bs = new BScroll('.wrapper', {})\nconst hooks = bs.scroller.actions.hooks\nhooks.on('end', (e, postion) => { console.log(e) })\n```\n\n----------------------------------------\n\nTITLE: Installing Full BetterScroll using Yarn\nDESCRIPTION: Installs the complete BetterScroll library (including plugins) using Yarn. `yarn add` automatically saves `better-scroll` as a project dependency in package.json.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/how-to-install.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nyarn add better-scroll\n```\n\n----------------------------------------\n\nTITLE: Configuring probeType for Scroll Events in BetterScroll (JS)\nDESCRIPTION: This snippet configures the `probeType` option in BetterScroll to enable real-time dispatch of the `scroll` event. The `probeType` option controls when BetterScroll dispatches the `scroll` event. Setting it to `3` enables real-time dispatch. Requires BetterScroll library.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/FAQ/diagnosis.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nLet bs = new BScroll('.div', {\n      probeType: 3 // real-time dispatch\n    })\n```\n\n----------------------------------------\n\nTITLE: Subscribing to 'start' Hook - JavaScript\nDESCRIPTION: This code snippet demonstrates how to subscribe to the 'start' hook of ActionsHandler. This hook is triggered after the finger's position on the screen is recorded, immediately before touchmove events are processed. The hook receives the event object as an argument.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/base-scroll-api.md#_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nconst bs = new BScroll('.wrapper', {})\nconst hooks = bs.scroller.actionsHandler.hooks\nhooks.on('start', (event) => { console.log(event.target) })\n```\n\n----------------------------------------\n\nTITLE: Initializing BScroll with Wheel Option\nDESCRIPTION: This snippet shows how to initialize a BetterScroll instance with the wheel option set to true.  This enables the wheel plugin and allows for creating wheel-based scrolling experiences.  The wheel option can also be an object for more detailed configuration.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/wheel.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet bs = new BScroll('.bs-wrapper', {\n  wheel: true // wheel options 为 true\n})\n```\n\n----------------------------------------\n\nTITLE: Install Zoom Plugin\nDESCRIPTION: Installs the BetterScroll Zoom plugin using npm or yarn. This is a necessary first step to use the zoom functionality in your BetterScroll implementation.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/zoom.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @better-scroll/zoom --save\n\n// or\n\nyarn add @better-scroll/zoom\n```\n\n----------------------------------------\n\nTITLE: Enabling Vertical Scrolling in Horizontal Slide (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to enable native vertical scrolling when using BetterScroll for horizontal sliding. Setting the `eventPassthrough` option to `vertical` allows the browser's native vertical scrolling to function correctly within the slide area.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/FAQ/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\n\nlet bs = new BScroll('./div', {\n  eventPassthrough: 'vertical'\n})\n```\n\n----------------------------------------\n\nTITLE: Listening to 'beforeZoomStart' event (__zoom__)\nDESCRIPTION: This code snippet demonstrates how to listen to the 'beforeZoomStart' event, which is triggered when two fingers touch the zoom element. It requires the `zoom` plugin. It imports BetterScroll and Zoom, uses the plugin, and attaches a callback function to the 'beforeZoomStart' event using `bs.on('beforeZoomStart', () => {})`.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-api.md#_snippet_24\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport BetterScroll from '@better-scroll/core'\nimport Zoom from '@better-scroll/zoom'\n\nBetterScroll.use(Zoom)\n\nconst bs = new BetterScroll('.wrapper', {\n  zoom: true\n})\n\nbs.on('beforeZoomStart', () => {})\n```\n\n----------------------------------------\n\nTITLE: BScrollCore Hook: enable - JavaScript\nDESCRIPTION: This hook is triggered when BetterScroll is enabled, allowing it to respond to user interactions.  It can be used to initialize or activate functionality tied to user input.  No specific parameters are passed to the hook's callback function.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-api.md#_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nconst bs = new BScroll('.wrapper', {})\nbs.hooks.on('enable', () => { console.log('enabled') })\n```\n\n----------------------------------------\n\nTITLE: ScrollerActions Hook: scrollEnd - JavaScript\nDESCRIPTION: This hook is triggered when scrolling is about to end, but a final check is needed to determine if a flick or momentum behavior occurred.  It takes the current position and the animation duration as parameters.  `pos` is an object with `x` and `y` coordinates representing the current position, and `duration` is the animation duration in milliseconds.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-api.md#_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nconst bs = new BScroll('.wrapper', {})\nconst hooks = bs.scroller.actions.hooks\nhooks.on('beforeEnd', (pos, duration) => { console.log(pos) })\n```\n\n----------------------------------------\n\nTITLE: Listening to the WheelIndexChanged Event\nDESCRIPTION: Demonstrates how to listen for the `wheelIndexChanged` event emitted by BetterScroll when the selected item in the wheel changes. The event provides the index of the currently selected item.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/wheel.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nimport Wheel from '@better-scroll/wheel'\n\nBScroll.use(Wheel)\n\nconst bs = new BScroll('.bs-wrapper', {\n  wheel: true\n})\n\nbs.on('wheelIndexChanged', (index) => {\n  console.log(index)\n})\n```\n\n----------------------------------------\n\nTITLE: Importing and Initializing BetterScroll (Core)\nDESCRIPTION: This JavaScript code snippet demonstrates importing the CoreScroll-only version of BetterScroll and creating a new instance. It takes a wrapper element selector and an options object as arguments. Note that fewer features are included in this core-only version.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\n\nlet bs = new BScroll('.wrapper', {})\n```\n\n----------------------------------------\n\nTITLE: Installing BetterScroll with npm\nDESCRIPTION: These npm commands install better-scroll. The first installs the full version with all plugins. The second installs only the core scrolling functionality. Choose the appropriate command based on your needs.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/README_zh-CN.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install better-scroll -S  # 安装带有所有插件的 BetterScroll\n\nnpm install @better-scroll/core # 核心滚动，大部分情况可能只需要一个简单的滚动\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for BetterScroll\nDESCRIPTION: This HTML code demonstrates the basic structure needed for BetterScroll to function correctly.  The content element (typically a list) must be a direct child of the wrapper element. The wrapper element requires a fixed height to enable scrolling.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/README.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"wrapper\">\n  <ul class=\"content\">\n    <li>...</li>\n    <li>...</li>\n    ...\n  </ul>\n  <!-- you can put some other DOMs here, it won't affect the scrolling\n</div>\n```\n\n----------------------------------------\n\nTITLE: Default Slide Plugin Options\nDESCRIPTION: Shows the default options that are used if the slide config is set to true. It contains loop, threshold, speed, easing, listenFlick, autoplay and interval.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/slide.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst bs = new BScroll('.wrapper', {\n  slide: true\n})\n\n// 相当于\n\nconst bs = new BScroll('.wrapper', {\n  slide: {\n    loop: true,\n    threshold: 0.1,\n    speed: 400,\n    easing: ease.bounce,\n    listenFlick: true,\n    autoplay: true,\n    interval: 3000\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Subscribing to 'contentChanged' Hook - TypeScript\nDESCRIPTION: This code snippet shows how to subscribe to the 'contentChanged' hook in BScrollCore. This hook, available from version 2.0.4, is triggered when the content DOM changes after calling `bs.refresh()`. The hook receives the new content element as an argument.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/base-scroll-api.md#_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nconst bs = new BScroll('.wrapper', {})\n// bs version >= 2.0.4\nbs.hooks.on('contentChanged', (newContent: HTMLElement) => { console.log(newContent) })\n```\n\n----------------------------------------\n\nTITLE: Initialize inner BetterScroll with eventPassthrough vertical\nDESCRIPTION: This snippet shows how to initialize an inner BetterScroll with `eventPassthrough` set to vertical. This configuration makes the inner `BScroll` to keep the default native vertical scroll behavior. This allows the parent `BScroll` to receive vertical scroll events when the inner `BScroll` is at the top or bottom. \nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/FAQ/diagnosis.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet innerBS = new BScroll('.wrapper', {\n  eventPassthrough: 'vertical' // 保持纵向的原生浏览器滚动\n})\n```\n\n----------------------------------------\n\nTITLE: Listening to 'scrollEnd' event\nDESCRIPTION: This code snippet demonstrates how to listen to the 'scrollEnd' event, which is triggered when scrolling ends or when a scrolling content is forced to stop. It attaches a callback function to the 'scrollEnd' event using `bs.on('scrollEnd', () => {})`.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-api.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nbs.on('scrollEnd', () => {})\n```\n\n----------------------------------------\n\nTITLE: Behavior Hook: end - JavaScript\nDESCRIPTION: This hook is triggered when the conditions for triggering momentum animation are not met. It provides the momentum information as a parameter.  `momentumInfo` is an object with `destination` and `duration` properties.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-api.md#_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nconst bs = new BScroll('.wrapper', {})\nconst hooks = bs.scroller.scrollBehaviorX.hooks\nhooks.on('end', (momentumInfo) => {\n  console.log(momentumInfo.destination)\n  console.log(momentumInfo.duration)\n})\n```\n\n----------------------------------------\n\nTITLE: ActionsHandler Hook: move - JavaScript\nDESCRIPTION: This hook is triggered in response to the `touchmove` event, after recording the finger's position on the screen. It provides an object with `deltaX`, `deltaY`, and the event object. `deltaX` and `deltaY` represent the finger's offset in the x and y directions, respectively. `e` is the standard touch event object.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-api.md#_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nconst bs = new BScroll('.wrapper', {})\nconst hooks = bs.scroller.actionsHandler.hooks\nhooks.on('move', ({ deltaX, deltaY, e }) => {})\n```\n\n----------------------------------------\n\nTITLE: Using BetterScroll with All Plugins (Combined)\nDESCRIPTION: This code snippet shows how to use a combined version of BetterScroll that includes all plugins. This simplifies plugin registration but may increase bundle size. The individual plugin options are passed directly into the BScroll constructor.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n  import BScroll from 'better-scroll'\n\n  const bs = new BScroll('#scroll-wrapper', {\n    pullUpLoad: true,\n    pullDownRefresh: true,\n    scrollbar: true,\n    // 等等\n  })\n```\n\n----------------------------------------\n\nTITLE: IndicatorOptions Interface Definition\nDESCRIPTION: This TypeScript code snippet defines the IndicatorOptions interface. It outlines the available configuration properties for each indicator, including interactive behavior, ratio settings, and the related HTML element.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/indicators/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IndicatorOptions {\n  interactive?: boolean\n  ratio?: Ratio\n  relationElementHandleElementIndex?: number\n  relationElement: HTMLElement\n}\n```\n\n----------------------------------------\n\nTITLE: Initialize inner BetterScroll with stopPropagation\nDESCRIPTION: This snippet demonstrates initializing an inner BetterScroll instance with the `stopPropagation` option set to `true`. This prevents events from bubbling up to the outer BetterScroll instance in nested scenarios, which can cause issues like click events being triggered multiple times.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/FAQ/diagnosis.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet innerBS = new BScroll('.wrapper', {\n  stopPropagation: true\n})\n```\n\n----------------------------------------\n\nTITLE: Binding touchEnd Hook - Scroller\nDESCRIPTION: Demonstrates how to bind to the 'touchEnd' hook in Scroller to detect when the user lifts their finger. Requires importing BScroll and accessing the scroller hooks.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/base-scroll-api.md#_snippet_49\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nconst bs = new BScroll('.wrapper', {})\nconst hooks = bs.scroller.hooks\nhooks.on('touchEnd', () => {\n  console.log('your finger has leave')\n})\n```\n\n----------------------------------------\n\nTITLE: Subscribing to 'disable' Hook - JavaScript\nDESCRIPTION: This code snippet demonstrates subscribing to the 'disable' hook of BScrollCore.  This hook is triggered when BetterScroll is disabled, preventing it from responding to user input.  The hook function receives no arguments.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/base-scroll-api.md#_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nconst bs = new BScroll('.wrapper', {})\nbs.hooks.on('disable', () => { console.log('disabled') })\n```\n\n----------------------------------------\n\nTITLE: ActionsHandler Hook: end - JavaScript\nDESCRIPTION: This hook is triggered in response to the `touchend` event. It provides the event object as a parameter. The `event` parameter is the standard touch event object.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-api.md#_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nconst bs = new BScroll('.wrapper', {})\nconst hooks = bs.scroller.actionsHandler.hooks\nhooks.on('end', (event) => {})\n```\n\n----------------------------------------\n\nTITLE: Behavior Hook: beforeComputeBoundary - JavaScript\nDESCRIPTION: This hook is triggered just before calculating the scrolling boundaries. It provides the boundary object as a parameter, allowing for modifications of the scroll boundaries before they're used. The `boundary` parameter is an object with `minScrollPos` and `maxScrollPos` properties.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-api.md#_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nconst bs = new BScroll('.wrapper', {})\nconst hooks = bs.scroller.scrollBehaviorX.hooks\nhooks.on('beforeComputeBoundary', () => {})\n```\n\n----------------------------------------\n\nTITLE: Listening to 'beforeScrollStart' event\nDESCRIPTION: This code snippet demonstrates how to listen to the 'beforeScrollStart' event, which is triggered when the user places their finger on the scrolling area. It attaches a callback function to the 'beforeScrollStart' event using `bs.on('beforeScrollStart', () => {})`.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-api.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nbs.on('beforeScrollStart', () => {})\n```\n\n----------------------------------------\n\nTITLE: Integrating plugin with BetterScroll instance\nDESCRIPTION: This TypeScript snippet demonstrates how to proxy plugin methods to the BetterScroll instance, allowing users to call them directly on the instance. It also shows how to register custom events to be emitted by the plugin.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/how-to-write.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n        export default class MyPlugin implements PluginAPI {\n          private handleBScroll() {\n            const propertiesConfig = [\n              {\n                key: 'printScrollText',\n                sourceKey: 'plugins.myPlugin.printScrollText'\n              }\n            ]\n            // 将 myPlugin.printScrollText 代理至 bs.printScrollText\n            this.scroll.proxy(propertiesConfig)\n            // 注册 printScrollEndText 事件至 bs，以至于用户可以通过 bs.on('printScrollEndText', handler) 来订阅事件\n            this.scroll.registerType(['printScrollEndText'])\n          }\n\n          printScrollText() {\n            console.log(this.options.scrollText)\n          }\n        }\n      \n```\n\n----------------------------------------\n\nTITLE: Subscribing to 'beforeMove' Hook - JavaScript\nDESCRIPTION: This code snippet shows how to subscribe to the 'beforeMove' hook of ScrollerActions. This hook is triggered before checking the validity of a scrolling action. The hook receives the event object as an argument.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/base-scroll-api.md#_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nconst bs = new BScroll('.wrapper', {})\nconst hooks = bs.scroller.actions.hooks\nhooks.on('beforeMove', (event) => { console.log(event.target) })\n```\n\n----------------------------------------\n\nTITLE: Indicator Options Interface - TypeScript\nDESCRIPTION: This TypeScript interface defines the available options for configuring an indicator.  `interactive` enables user interaction, `ratio` sets the scaling ratio, `relationElementHandleElementIndex` maps handles, and `relationElement` links the indicator to an HTML element.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/indicators/README_zh-CN.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IndicatorOptions {\n  interactive?: boolean\n  ratio?: Ratio\n  relationElementHandleElementIndex?: number\n  relationElement: HTMLElement\n}\n```\n\n----------------------------------------\n\nTITLE: Binding beforeTranslate Hook - Translater\nDESCRIPTION: Demonstrates how to bind to the 'beforeTranslate' hook in Translater to modify the transform style before it is applied. Requires importing BScroll and accessing the translater hooks.  Allows modifying transform styles and provides access to the point object (x, y). Arguments are transformStyle array and point object.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/base-scroll-api.md#_snippet_47\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nconst bs = new BScroll('.wrapper', {})\nconst hooks = bs.scroller.translater.hooks\nhooks.on('beforeTranslate', (transformStyle, point) => {\n  transformStyle.push('scale(1.2)')\n  console.log(transformStyle) // ['translateX(0px)', 'translateY(0px)', 'scale(1.2)']\n  console.log(point) // { x: 0, y: 0 }\n})\n```\n\n----------------------------------------\n\nTITLE: Installing BetterScroll Slide Plugin\nDESCRIPTION: Install the BetterScroll slide plugin using npm or yarn. This plugin expands the ability of carousel for BetterScroll. It provides the necessary functionality for creating sliding content areas.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/slide.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @better-scroll/slide --save\n\n// or\n\nyarn add @better-scroll/slide\n```\n\n----------------------------------------\n\nTITLE: Listening for 'flick' event in BetterScroll\nDESCRIPTION: This snippet shows how to listen for the 'flick' event in BetterScroll. This event is triggered when the user performs a flick operation. The event handler is an empty anonymous function.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/base-scroll-api.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nbs.on('flick', () => {})\n```\n\n----------------------------------------\n\nTITLE: Binding Flick Hook - Scroller\nDESCRIPTION: Demonstrates how to bind to the 'flick' hook in Scroller to detect finger flicking. Requires importing BScroll and accessing the scroller hooks.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/base-scroll-api.md#_snippet_52\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nconst bs = new BScroll('.wrapper', {})\nconst hooks = bs.scroller.hooks\nhooks.on('flick', () => {})\n```\n\n----------------------------------------\n\nTITLE: Installing BetterScroll Scrollbar Plugin\nDESCRIPTION: Installs the BetterScroll scrollbar plugin using npm or yarn. This command adds the `@better-scroll/scroll-bar` package as a dependency to your project.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/scroll-bar.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @better-scroll/scroll-bar --save\n\n// or\n\nyarn add @better-scroll/scroll-bar\n```\n\n----------------------------------------\n\nTITLE: Installing BetterScroll Wheel Plugin\nDESCRIPTION: This snippet demonstrates how to install the @better-scroll/wheel plugin using npm or yarn. The plugin is a dependency needed to implement wheel picker functionality in BetterScroll.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/wheel.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @better-scroll/wheel --save\n\n// or\n\nyarn add @better-scroll/wheel\n```\n\n----------------------------------------\n\nTITLE: TypeScript Declaration Merging for a BetterScroll Plugin\nDESCRIPTION: This TypeScript snippet shows how to use declaration merging to extend BetterScroll's options and API with custom plugin-specific properties and methods. This provides autocompletion and type safety when using the plugin.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/how-to-write.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\n\nexport type MyPluginOptions = Partial<MyPluginConfig> | true\n\ntype MyPluginConfig = {\n  scrollText: string,\n  scrollEndText: string\n}\n\ninterface PluginAPI {\n  printScrollText(): void\n}\n\ndeclare module '@better-scroll/core' {\n  interface CustomOptions {\n    myPlugin?: MyPluginOptions\n  }\n\n  interface CustomAPI {\n    myPlugin: PluginAPI\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Subscribing to 'enable' Hook - JavaScript\nDESCRIPTION: This code snippet demonstrates subscribing to the 'enable' hook of BScrollCore. This hook is triggered when BetterScroll is enabled, making it responsive to user interactions. The hook function receives no arguments.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/base-scroll-api.md#_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nconst bs = new BScroll('.wrapper', {})\nbs.hooks.on('enable', () => { console.log('enabled') })\n```\n\n----------------------------------------\n\nTITLE: Configuring preventDefaultException in BetterScroll (JS)\nDESCRIPTION: This snippet configures the `preventDefaultException` option in BetterScroll to prevent `e.preventDefault()` from being called on elements with a specific class name (`test`).  This allows click events to be triggered on these elements, which would otherwise be blocked by BetterScroll's default behavior.  Requires BetterScroll library.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/FAQ/diagnosis.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet bs = new BScroll('.wrapper', {\n    preventDefaultException: {\n      className: /(^|\\s)test(\\s|$)/\n    }\n  })\n```\n\n----------------------------------------\n\nTITLE: Binding End Hook - Scroller\nDESCRIPTION: Demonstrates how to bind to the 'end' hook in Scroller, triggered after touchEnd and before click verification. The pull-down plugin uses this.  Requires importing BScroll and accessing the scroller hooks. The argument is a position object (x, y).\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/base-scroll-api.md#_snippet_50\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nconst bs = new BScroll('.wrapper', {})\nconst hooks = bs.scroller.hooks\nhooks.on('end', (position) => {\n  console.log(position.x)\n  console.log(position.y)\n})\n```\n\n----------------------------------------\n\nTITLE: Listening for 'enable' event in BetterScroll\nDESCRIPTION: This snippet shows how to listen for the 'enable' event in BetterScroll. This event is triggered when BetterScroll is enabled and begins responding to user interactions. The event handler is an empty anonymous function.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/base-scroll-api.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nbs.on('enable', () => {})\n```\n\n----------------------------------------\n\nTITLE: Translater Hook: beforeTranslate - JavaScript\nDESCRIPTION: This hook is triggered before modifying the content element's transform style. The zoom plugin listens to this hook.  It takes the transformStyle array and point object as arguments. The `transformStyle` is array with current transform properties like translateX or translateY , and `point` object with `x` and `y` coordinates.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-api.md#_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nconst bs = new BScroll('.wrapper', {})\nconst hooks = bs.scroller.translater.hooks\nhooks.on('beforeTranslate', (transformStyle, point) => {\n```\n\n----------------------------------------\n\nTITLE: Using BetterScroll Slide Plugin\nDESCRIPTION: Import the BetterScroll core and Slide plugin, then register the plugin using `BScroll.use(Slide)`. This enables the slide functionality within BetterScroll.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/slide.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nimport Slide from '@better-scroll/slide'\n\nBScroll.use(Slide)\n```\n\n----------------------------------------\n\nTITLE: Installing Pull-up Plugin with npm\nDESCRIPTION: This command installs the `@better-scroll/pull-up` package using npm. This is the first step to use pull-up functionality with BetterScroll.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/pullup.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @better-scroll/pull-up --save\n```\n\n----------------------------------------\n\nTITLE: Listening for 'zooming' event with Zoom plugin\nDESCRIPTION: This snippet demonstrates how to listen for the 'zooming' event from the Zoom plugin in BetterScroll. This event is triggered while the two-finger zoom behavior is in progress, providing the current scale. The Zoom plugin must be initialized and enabled.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/base-scroll-api.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nbs.on('zooming', ({ scale }) => {\n  // current scale\n})\n```\n\n----------------------------------------\n\nTITLE: Listening to 'scrollStart' event\nDESCRIPTION: This code snippet demonstrates how to listen to the 'scrollStart' event, which is triggered when the content element meets the scrolling conditions and is about to start scrolling. It attaches a callback function to the 'scrollStart' event using `bs.on('scrollStart', () => {})`.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-api.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nbs.on('scrollStart', () => {})\n```\n\n----------------------------------------\n\nTITLE: Listening for 'alterOptions' event with MouseWheel plugin\nDESCRIPTION: This snippet shows how to listen for the 'alterOptions' event of the MouseWheel plugin in BetterScroll. This event is triggered when mouse-wheel scroll starts, allowing modification of mouseWheelOptions. The MouseWheel plugin must be installed and enabled.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/base-scroll-api.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport BetterScroll from '@better-scroll/core'\nimport MouseWheel from '@better-scroll/mouse-wheel'\n\nBetterScroll.use(MouseWheel)\nconst bs = new BetterScroll('.wrapper', {\n  mouseWheel: true\n})\n\nbs.on('alterOptions', (mouseWheelOptions) => {\n  /**\n   * mouseWheelOptions.speed\n   * mouseWheelOptions.invert\n   * mouseWheelOptions.easeTime\n   * mouseWheelOptions.discreteTime\n   * mouseWheelOptions.throttleTime\n   * mouseWheelOptions.dampingFactor\n   **/\n\n  // please see details in mouse-wheel plugin doc\n})\n```\n\n----------------------------------------\n\nTITLE: BScrollCore Hook: disable - JavaScript\nDESCRIPTION: This hook is triggered when BetterScroll is disabled, preventing it from responding to user interactions. It can be used to deactivate or clean up functionality that's dependent on user input. No specific parameters are passed to the hook's callback function.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-api.md#_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nconst bs = new BScroll('.wrapper', {})\nbs.hooks.on('disable', () => { console.log('disabled') })\n```\n\n----------------------------------------\n\nTITLE: ActionsHandler Hook: beforeStart - JavaScript\nDESCRIPTION: This hook is triggered right after the `touchstart` event, but before the initial touch position is recorded.  It provides the event object as a parameter, allowing inspection of the touch event's target or other properties. The `event` parameter is the standard touch event object.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-api.md#_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nconst bs = new BScroll('.wrapper', {})\nconst hooks = bs.scroller.actionsHandler.hooks\nhooks.on('beforeStart', (event) => { console.log(event.target) })\n```\n\n----------------------------------------\n\nTITLE: ScrollerActions Hook: start - JavaScript\nDESCRIPTION: This hook is triggered after recording all initial scrolling information. It provides the event object as a parameter. The `event` parameter is the standard touch event object.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-api.md#_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nconst bs = new BScroll('.wrapper', {})\nconst hooks = bs.scroller.actions.hooks\nhooks.on('start', (event) => { console.log(event.target) })\n```\n\n----------------------------------------\n\nTITLE: Installing BetterScroll Wheel Plugin\nDESCRIPTION: Install the BetterScroll wheel plugin using npm or yarn. This plugin is necessary for implementing wheel-based picker components.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/wheel.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @better-scroll/wheel --save\n\n// or\n\nyarn add @better-scroll/wheel\n```\n\n----------------------------------------\n\nTITLE: Installing BetterScroll Indicators using yarn\nDESCRIPTION: This command installs the BetterScroll Indicators plugin using yarn. It adds the plugin as a dependency to your project.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/indicators.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @better-scroll/indicators\n```\n\n----------------------------------------\n\nTITLE: Listening for 'zoomStart' event with Zoom plugin\nDESCRIPTION: This snippet shows how to listen for the 'zoomStart' event of the Zoom plugin in BetterScroll. The event is triggered when the two-finger zoom distance exceeds the minimum threshold. The Zoom plugin must be initialized and enabled.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/base-scroll-api.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nbs.on('zoomStart', () => {})\n```\n\n----------------------------------------\n\nTITLE: ScrollerActions Hook: end - JavaScript\nDESCRIPTION: This hook is triggered after the `touchend` event callback and the scroll direction has been updated. It provides the event object and the current position as parameters. `e` is the standard touch event object, and `position` is an object with `x` and `y` coordinates.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-api.md#_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nconst bs = new BScroll('.wrapper', {})\nconst hooks = bs.scroller.actions.hooks\nhooks.on('end', (e, postion) => { console.log(e) })\n```\n\n----------------------------------------\n\nTITLE: Listening for 'mousewheelStart' event with MouseWheel plugin\nDESCRIPTION: This snippet demonstrates how to listen for the 'mousewheelStart' event from the MouseWheel plugin in BetterScroll.  This event is triggered when mouse-wheel scrolling starts. The MouseWheel plugin needs to be imported, used, and enabled.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/base-scroll-api.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport BetterScroll from '@better-scroll/core'\nimport MouseWheel from '@better-scroll/mouse-wheel'\n\nBetterScroll.use(MouseWheel)\nconst bs = new BetterScroll('.wrapper', {\n  mouseWheel: true\n})\n\nbs.on('mousewheelStart', () => {})\n```\n\n----------------------------------------\n\nTITLE: ScrollerActions Hook: coordinateTransformation - JavaScript\nDESCRIPTION: This hook is triggered after calculating the user's finger offset, just before scrolling occurs. It allows modification of the deltaX and deltaY values before they're applied to the content DOM's translation. The parameter `transformateDeltaData` is an object with `deltaX` and `deltaY` properties representing the offset. Available since v2.3.0\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-api.md#_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nconst bs = new BScroll('.wrapper', {})\nconst hooks = bs.scroller.actions.hooks\nhooks.on('coordinateTransformation', (：transformateDeltaData) => { \n  // 获取用户手指移动的距离\n const originDeltaX = transformateDeltaData.deltaX\n const originDeltaY = transformateDeltaData.deltaY\n\n // 变换位移\n transformateDeltaData.deltaX = originDeltaY\n transformateDeltaData.deltaY = originDeltaX\n\n // transformateDeltaData.deltaX 最终作用在 BetterScroll content DOM 的 translateX\n // transformateDeltaData.deltaY 最终作用在 BetterScroll content DOM 的 translateY\n})\n```\n\n----------------------------------------\n\nTITLE: BScrollCore Hook: contentChanged - TypeScript\nDESCRIPTION: This hook is triggered during `bs.refresh()` when the content DOM element has changed. It passes the new content DOM element as a parameter, allowing for adjustments based on the updated content. This hook is available from version 2.0.4 onwards.  The parameter `newContent` is an `HTMLElement` representing the new content.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-api.md#_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nconst bs = new BScroll('.wrapper', {})\n// bs 版本 >= 2.0.4\nbs.hooks.on('contentChanged', (newContent: HTMLElement) => { console.log(newContent) })\n```\n\n----------------------------------------\n\nTITLE: TouchEnd Hook Usage\nDESCRIPTION: This JavaScript snippet shows how to use the 'touchEnd' hook in Better Scroll. It initializes a BScroll instance and attaches a listener to the 'touchEnd' hook which is triggered when the user's finger leaves the scrollable area. The code logs a message to the console when the 'touchEnd' event occurs.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-api.md#_snippet_55\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nconst bs = new BScroll('.wrapper', {})\nconst hooks = bs.scroller.hooks\nhooks.on('touchEnd', () => {\n  console.log('your finger has leave')\n})\n```\n\n----------------------------------------\n\nTITLE: ScrollerActions Hook: scroll - JavaScript\nDESCRIPTION: This hook is triggered while scrolling is in progress.  No parameters are passed to the hook's callback function.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-api.md#_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nconst bs = new BScroll('.wrapper', {})\nconst hooks = bs.scroller.actions.hooks\nhooks.on('scroll', () => {})\n```\n\n----------------------------------------\n\nTITLE: Listening for 'beforeScrollStart' event in BetterScroll\nDESCRIPTION: This snippet shows how to listen for the 'beforeScrollStart' event in BetterScroll. The event is triggered when the user's finger is placed on the scroll area. The event handler is an empty anonymous function.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/base-scroll-api.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nbs.on('beforeScrollStart', () => {})\n```\n\n----------------------------------------\n\nTITLE: TimeFunction Hook Usage\nDESCRIPTION: This JavaScript snippet demonstrates the usage of the 'timeFunction' hook in Better Scroll. A listener is attached to the 'timeFunction' hook, triggered before a CSS3 transition begins, and logs the CSS3 transition-timing-function.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-api.md#_snippet_54\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nconst bs = new BScroll('.wrapper', {})\nconst hooks = bs.scroller.animater.hooks\nhooks.on('timeFunction', (easing) => {\n  console.log(easing) // cubic-bezier(0.1, 0.7, 1.0, 0.1)\n})\n```\n\n----------------------------------------\n\nTITLE: BScrollCore Hook: beforeInitialScrollTo - JavaScript\nDESCRIPTION: This hook is triggered after the plugin is initialized and needs to scroll to a specific position. It allows modification of the target scroll position before the scroll animation begins.  It takes a `position` object as a parameter, containing `x` and `y` coordinates.  Modifying these values will affect the initial scroll position.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-api.md#_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nconst bs = new BScroll('.wrapper', {})\nbs.hooks.on('beforeInitialScrollTo', (postion) => {\n  postion.x = 0\n  position.y = -200 // 初始化滚动至 -200 的位置\n})\n```\n\n----------------------------------------\n\nTITLE: Specifying Content Index (JavaScript)\nDESCRIPTION: This code demonstrates using the `specifiedIndexAsContent` option to select a specific child element of the wrapper as the content for BetterScroll.  This allows you to control which element within the wrapper is used for scrolling, especially when the first child is not the desired content.  The index is zero-based.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-options.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nlet bs = new BScroll('.wrapper', {\n  specifiedIndexAsContent: 1 // 使用 div.content2 作为 BetterScroll 的 content\n})\n```\n\n----------------------------------------\n\nTITLE: Listening to 'destroy' event\nDESCRIPTION: This code snippet demonstrates how to listen to the 'destroy' event, which is triggered when BetterScroll is destroyed. It attaches a callback function to the 'destroy' event using `bs.on('destroy', () => {})`.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-api.md#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nbs.on('destroy', () => {})\n```\n\n----------------------------------------\n\nTITLE: Listening to 'zooming' event (__zoom__)\nDESCRIPTION: This code snippet demonstrates how to listen to the 'zooming' event, which is triggered when two-finger zoom behavior is in progress. It requires the `zoom` plugin and attaches a callback function to the 'zooming' event using `bs.on('zooming', ({ scale }) => {})`. It also receives the current scale as a parameter.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-api.md#_snippet_26\n\nLANGUAGE: JavaScript\nCODE:\n```\nbs.on('zooming', ({ scale }) => {\n  // scale 当前 scale\n})\n```\n\n----------------------------------------\n\nTITLE: Transform Style Modification\nDESCRIPTION: This JavaScript snippet shows how to modify the transform style by pushing 'scale(1.2)' into the transformStyle array and logging the modified style and point object. It's part of an event handler within a Better Scroll component.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-api.md#_snippet_51\n\nLANGUAGE: JavaScript\nCODE:\n```\ntransformStyle.push('scale(1.2)')\nconsole.log(transformStyle) // ['translateX(0px)', 'translateY(0px)', 'scale(1.2)']\nconsole.log(point) // { x: 0, y: 0 }\n```\n\n----------------------------------------\n\nTITLE: Listening for 'scrollCancel' event in BetterScroll\nDESCRIPTION: This snippet demonstrates listening for the 'scrollCancel' event in BetterScroll. This event is triggered when scrolling is canceled. The event handler is an empty anonymous function.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/base-scroll-api.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nbs.on('scrollCancel', () => {})\n```\n\n----------------------------------------\n\nTITLE: ScrollTo Hook Usage\nDESCRIPTION: This JavaScript snippet showcases the usage of the 'scrollTo' hook in Better Scroll. A listener is attached to the 'scrollTo' hook, triggered when the bs.scrollTo method is called, and logs the target x and y coordinates.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-api.md#_snippet_60\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nconst bs = new BScroll('.wrapper', {})\nconst hooks = bs.scroller.hooks\nhooks.on('scrollTo', (endPoint) => {\n  console.log(endPoint.x)\n  console.log(endPoint.y)\n})\nbs.scrollTo(0, -200)\n```\n\n----------------------------------------\n\nTITLE: Behavior Hook: computeBoundary - JavaScript\nDESCRIPTION: This hook is triggered when computing the scrolling boundaries. It allows access to the calculated boundary values.  It provides the boundary object as a parameter. The `boundary` parameter is an object with `minScrollPos` and `maxScrollPos` properties.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-api.md#_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nconst bs = new BScroll('.wrapper', {})\nconst hooks = bs.scroller.scrollBehaviorX.hooks\nhooks.on('computeBoundary', (boundary) => {\n  console.log(boundary.minScrollPos) // 上边界最大值，正的越多，下拉的幅度越大\n  console.log(boundary.maxScrollPos) // 下边界最小值，负的越多，滚的越远\n})\n```\n\n----------------------------------------\n\nTITLE: BScrollCore Hook: destroy - JavaScript\nDESCRIPTION: This hook is triggered when BetterScroll is destroyed. This event allows the execution of cleanup tasks such as removing event listeners or releasing resources. No specific parameters are passed to the hook's callback function.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-api.md#_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nconst bs = new BScroll('.wrapper', {})\nbs.hooks.on('destroy', () => { console.log('destroyed') })\n```\n\n----------------------------------------\n\nTITLE: Listening to 'zoomStart' event (__zoom__)\nDESCRIPTION: This code snippet demonstrates how to listen to the 'zoomStart' event, which is triggered when the distance of two-finger zoom exceeds the minimum threshold. It requires the `zoom` plugin and attaches a callback function to the 'zoomStart' event using `bs.on('zoomStart', () => {})`.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-api.md#_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\nbs.on('zoomStart', () => {})\n```\n\n----------------------------------------\n\nTITLE: Accessing Plugin Instance Directly\nDESCRIPTION: This code snippet demonstrates how to access the plugin instance directly through the `bs.plugins` object. This can be useful if you need to interact with plugin-specific APIs that are not exposed on the main BetterScroll instance.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/README.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n  import BScroll from '@better-scroll/scroll'\n  import zoom from '@better-scroll/zoom'\n\n  BScroll.use(zoom)\n\n  const bs = new BScroll('.wrapper', {\n    zoom: true\n  })\n\n  console.log(bs.plugins.zoom) // 获取对应插件实例\n```\n\n----------------------------------------\n\nTITLE: Listening to 'mousewheelEnd' event (__mouse-wheel__)\nDESCRIPTION: This code snippet demonstrates how to listen to the 'mousewheelEnd' event, which is triggered when the mouse wheel stops scrolling. It requires the `mouse-wheel` plugin and attaches a callback function to the 'mousewheelEnd' event using `bs.on('mousewheelEnd', () => {})`.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-api.md#_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\nbs.on('mousewheelEnd', () => {})\n```\n\n----------------------------------------\n\nTITLE: Listening for 'destroy' event in BetterScroll\nDESCRIPTION: This snippet demonstrates listening for the 'destroy' event in BetterScroll. This event is triggered when BetterScroll is destroyed. The event handler is an empty anonymous function.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/base-scroll-api.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nbs.on('destroy', () => {})\n```\n\n----------------------------------------\n\nTITLE: Default Easing Function\nDESCRIPTION: Defines the default easing function used for slide animations. This function determines the animation curve when useTransition is set to false, providing a custom animation effect.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/slide.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  style: 'cubic-bezier(0.165, 0.84, 0.44, 1)',\n  fn: function(t: number) {\n    return 1 - --t * t * t * t\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listening to 'mousewheelMove' event (__mouse-wheel__)\nDESCRIPTION: This code snippet demonstrates how to listen to the 'mousewheelMove' event, which is triggered when the mouse wheel is moving. It requires the `mouse-wheel` plugin and attaches a callback function to the 'mousewheelMove' event using `bs.on('mousewheelMove', () => {})`.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-api.md#_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\nbs.on('mousewheelMove', () => {})\n```\n\n----------------------------------------\n\nTITLE: Using Core BetterScroll from CDN (no plugins)\nDESCRIPTION: These JavaScript snippets shows how to use the core better-scroll library directly from a CDN. It includes using both the full and minified versions.  It initializes BetterScroll by creating a new BScroll object, passing in the wrapper element and empty options.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/README_zh-CN.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<script src=\"https://unpkg.com/@better-scroll/core@latest/dist/core.js\"></script>\n\n// minify\n<script src=\"https://unpkg.com/@better-scroll/core@latest/dist/core.min.js\"></script>\n\nlet wrapper = document.getElementById(\"wrapper\")\nlet bs = new BScroll(wrapper, {})\n```\n\n----------------------------------------\n\nTITLE: Using `purgeNestedScroll()` Method\nDESCRIPTION: Shows how to use the `purgeNestedScroll()` method to destroy the NestedScroll instance that controls a BetterScroll instance.  This is important for releasing memory and preventing issues when a component or BetterScroll instance is no longer needed. Calling `purgeNestedScroll` on any BetterScroll instance sharing the same group ID will destroy the NestedScroll instance.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/nested-scroll.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nimport NestedScroll from '@better-scroll/nested-scroll'\n\nBScroll.use(NestedScroll)\n\nconst bs1 = new BScroll('.parent-wrapper', {\n  nestedScroll: {\n    groupId: 'dummy'\n  }\n})\n\nconst bs2 = new BScroll('.child-wrapper', {\n  nestedScroll: {\n    groupId: 'dummy'\n  }\n})\n\n// 销毁 nestedScroll，bs1 与 bs2 共享同一个 nestedScroll 实例，因为他们的 groupId 相同\nbs1.purgeNestedScroll() // 与 bs2.purgeNestedScroll() 的效果一样\n```\n\n----------------------------------------\n\nTITLE: Using Wheel Instance Methods\nDESCRIPTION: This snippet demonstrates how to access and use the wheel plugin's instance methods (getSelectedIndex(), wheelTo()) through the BetterScroll instance. These methods allow programmatic control over the wheel picker.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/wheel.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nimport Wheel from '@better-scroll/wheel'\n\nBScroll.use(Wheel)\n\nconst bs = new BScroll('.bs-wrapper', {\n  wheel: true\n})\n\nbs.getSelectedIndex()\nbs.wheelTo(1, 300)\n```\n\n----------------------------------------\n\nTITLE: Listening to 'flick' event\nDESCRIPTION: This code snippet demonstrates how to listen to the 'flick' event, which is triggered when the user performs a flick gesture. It attaches a callback function to the 'flick' event using `bs.on('flick', () => {})`.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-api.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nbs.on('flick', () => {})\n```\n\n----------------------------------------\n\nTITLE: Ratio Type Definition (TypeScript)\nDESCRIPTION: Defines the `Ratio` type in TypeScript, which is used to specify the scaling ratio for the x and y directions when linking BetterScroll instances.  This allows for creating visual parallax scrolling effects.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/indicators.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype Ratio = {\n    x: number // 指定 x 方向滚动距离的比例\n    y: number // 指定 y 方向滚动距离的比例饿\n  }\n```\n\n----------------------------------------\n\nTITLE: Listening to 'enable' event\nDESCRIPTION: This code snippet demonstrates how to listen to the 'enable' event, which is triggered when BetterScroll is enabled and starts responding to user interactions. It attaches a callback function to the 'enable' event using `bs.on('enable', () => {})`.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-api.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nbs.on('enable', () => {})\n```\n\n----------------------------------------\n\nTITLE: Subscribing to 'scrollStart' Hook - JavaScript\nDESCRIPTION: This code snippet shows how to subscribe to the 'scrollStart' hook of ScrollerActions. This hook is triggered when scrolling is about to start. The hook function receives no arguments.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/base-scroll-api.md#_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nconst bs = new BScroll('.wrapper', {})\nconst hooks = bs.scroller.actions.hooks\nhooks.on('scrollStart', () => {})\n```\n\n----------------------------------------\n\nTITLE: Enabling PullDown Refresh\nDESCRIPTION: Demonstrates how to enable the pullDownRefresh feature when instantiating a BetterScroll instance. This requires passing a pullDownRefresh configuration object to the BScroll constructor.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/pulldown.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnew BScroll('.bs-wrapper', {\n  pullDownRefresh: true\n})\n```\n\n----------------------------------------\n\nTITLE: Listening for 'beforeZoomStart' event with Zoom plugin\nDESCRIPTION: This snippet demonstrates how to listen for the 'beforeZoomStart' event of the Zoom plugin in BetterScroll. This event is triggered when two fingers touch the zoom element. The Zoom plugin needs to be imported, used, and enabled.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/base-scroll-api.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport BetterScroll from '@better-scroll/core'\nimport Zoom from '@better-scroll/zoom'\n\nBetterScroll.use(Zoom)\n\nconst bs = new BetterScroll('.wrapper', {\n  zoom: true\n})\n\nbs.on('beforeZoomStart', () => {})\n```\n\n----------------------------------------\n\nTITLE: Styling for Horizontal Scrolling\nDESCRIPTION: These Stylus rules are necessary for enabling horizontal scrolling in BetterScroll.  `white-space: nowrap` prevents the content from wrapping, and `display: inline-block` allows the content to scroll horizontally.  The rules need to be applied to the wrapper and content elements respectively.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll.md#_snippet_2\n\nLANGUAGE: stylus\nCODE:\n```\n.scroll-wrapper\n  // ...\n  white-space nowrap\n.scroll-content\n  // ...\n  display inline-block\n```\n\n----------------------------------------\n\nTITLE: Binding Time Hook - Transition\nDESCRIPTION: Demonstrates how to bind to the 'time' hook in the animation hooks (Transition) to get the CSS3 transition duration. Requires importing BScroll and accessing the animater hooks. The hook is triggered before the CSS3 transition starts.  The argument is the CSS3 transition duration.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/base-scroll-api.md#_snippet_45\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nconst bs = new BScroll('.wrapper', {})\nconst hooks = bs.scroller.animater.hooks\nhooks.on('time', (duration) => {\n  console.log(duration) // 800\n})\n```\n\n----------------------------------------\n\nTITLE: Installing BetterScroll Indicators\nDESCRIPTION: Installs the @better-scroll/indicators package using npm or yarn. This package provides functionality for linking BetterScroll instances.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/indicators.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @better-scroll/indicators --save\n\n// or\n\nyarn add @better-scroll/indicators\n```\n\n----------------------------------------\n\nTITLE: Listening for 'disable' event in BetterScroll\nDESCRIPTION: This snippet demonstrates how to listen for the 'disable' event in BetterScroll. This event is triggered when BetterScroll is disabled and stops responding to user interactions. The event handler is an empty anonymous function.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/base-scroll-api.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nbs.on('disable', () => {})\n```\n\n----------------------------------------\n\nTITLE: Styling for Horizontal Scrolling\nDESCRIPTION: These Stylus snippets provide the necessary CSS to enable horizontal scrolling in BetterScroll.  `white-space: nowrap` prevents the content from wrapping, and `display: inline-block` arranges the content horizontally.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/base-scroll.md#_snippet_2\n\nLANGUAGE: stylus\nCODE:\n```\n.scroll-wrapper\n    // ...\n    white-space nowrap\n  .scroll-content\n    // ...\n    display inline-block\n```\n\n----------------------------------------\n\nTITLE: Easing Function Definition\nDESCRIPTION: Defines the default easing function used for slide transitions when useTransition is false. It provides a custom animation curve.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/slide.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    style: 'cubic-bezier(0.165, 0.84, 0.44, 1)',\n    fn: function(t: number) {\n      return 1 - --t * t * t * t\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: WheelDelta Interface\nDESCRIPTION: Defines the structure of the data emitted during the mousewheelEnd event, indicating direction and delta values on both axes.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/mouse-wheel.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface WheelDelta {\n  x: number\n  y: number\n  directionX: Direction\n  directionY: Direction\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Zoom Options\nDESCRIPTION: Configures the zoom options within the BetterScroll constructor.  This includes setting `freeScroll`, `scrollX`, `scrollY` to `true` and defining zoom parameters such as `start`, `min`, and `max` zoom levels.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/zoom.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnew BScroll('.bs-wrapper', {\n  freeScroll: true,\n  scrollX: true,\n  scrollY: true,\n  zoom: {\n    start: 1,\n    min: 0.5,\n    max: 2\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Listening to 'disable' event\nDESCRIPTION: This code snippet demonstrates how to listen to the 'disable' event, which is triggered when BetterScroll is disabled and stops responding to user interactions. It attaches a callback function to the 'disable' event using `bs.on('disable', () => {})`.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-api.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nbs.on('disable', () => {})\n```\n\n----------------------------------------\n\nTITLE: Listening for 'scrollStart' event in BetterScroll\nDESCRIPTION: This snippet demonstrates how to listen for the 'scrollStart' event in BetterScroll. This event is triggered when the content element meets the scrolling conditions and is about to start scrolling. The event handler is an empty anonymous function.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/base-scroll-api.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nbs.on('scrollStart', () => {})\n```\n\n----------------------------------------\n\nTITLE: Listen for Zooming Event\nDESCRIPTION: Demonstrates how to listen to the 'zooming' event emitted by BetterScroll during a zoom action. It provides the current scale value as an argument.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/zoom.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst bs = new BScroll('.bs-wrapper', {\n  freeScroll: true,\n  scrollX: true,\n  scrollY: true,\n  zoom: {\n    start: 1,\n    min: 0.5,\n    max: 2\n  }\n})\n\nbs.on('zooming', ({ scale }) => {\n  // use scale\n  console.log(scale) // current scale\n})\n```\n\n----------------------------------------\n\nTITLE: Using BetterScroll with All Plugins\nDESCRIPTION: This snippet demonstrates how to use BetterScroll with all available plugins. While convenient, importing all plugins can significantly increase the bundle size. It is recommended to import only the necessary plugins for optimal performance.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n  import BScroll from 'better-scroll'\n\n  const bs = new BScroll('#scroll-wrapper', {\n    pullUpLoad: true,\n    pullDownRefresh: true,\n    scrollbar: true,\n    // and so on\n  })\n```\n\n----------------------------------------\n\nTITLE: Using BetterScroll from CDN with all plugins\nDESCRIPTION: These JavaScript snippets shows how to use the full better-scroll library directly from a CDN. It includes using both the full and minified versions, and initializes BetterScroll using `BetterScroll.createBScroll`.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/README_zh-CN.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<script src=\"https://unpkg.com/better-scroll@latest/dist/better-scroll.js\"></script>\n\n// minify\n<script src=\"https://unpkg.com/better-scroll@latest/dist/better-scroll.min.js\"></script>\n\nlet wrapper = document.getElementById(\"wrapper\")\nlet bs = BetterScroll.createBScroll(wrapper, {})\n```\n\n----------------------------------------\n\nTITLE: Base Class for a BetterScroll Plugin\nDESCRIPTION: This TypeScript snippet demonstrates the base structure of a BetterScroll plugin class. It includes the static pluginName property, implements the PluginAPI interface, and defines the constructor, which accepts a BetterScroll instance.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/how-to-write.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n        export default class MyPlugin implements PluginAPI {\n          static pluginName = 'myPlugin'\n          public options: MyPluginConfig\n          constructor(public scroll: BScroll){\n            this.handleOptions()\n\n            this.handleBScroll()\n\n            this.registerHooks()\n          }\n        }\n      \n```\n\n----------------------------------------\n\nTITLE: Transform and Backface Visibility CSS\nDESCRIPTION: CSS rules to prevent flickering on certain iPhone systems when using transitions.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/slide.md#_snippet_6\n\nLANGUAGE: css\nCODE:\n```\ntransform: translate3d(0,0,0)\nbackface-visibility: hidden\n```\n\n----------------------------------------\n\nTITLE: Enabling Vertical Scrolling in Slide Area\nDESCRIPTION: This snippet configures `eventPassthrough` to 'vertical', allowing the browser's native vertical scrolling to function within a BetterScroll slide area. This is necessary when horizontal scrolling is enabled and you want to preserve vertical scrolling capabilities.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/FAQ/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\n\nlet bs = new BScroll('./div', {\n  eventPassthrough: 'vertical'\n})\n```\n\n----------------------------------------\n\nTITLE: Listening for slideWillChange Event\nDESCRIPTION: Example code to listen for the `slideWillChange` event.  This allows you to update related UI elements, like dot indicators, as the slide changes.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/slide.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nlet currentPageIndex // 控制当前页面\nconst slide = new BScroll(this.$refs.slide, {\n  scrollX: true,\n  scrollY: false,\n  slide: {\n    threshold: 100\n  },\n  useTransition: true,\n  momentum: false,\n  bounce: false,\n  stopPropagation: true,\n  probeType: 2\n})\nslide.on('slideWillChange', (page) => {\n  currentPageIndex = page.pageX\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Plugin Options\nDESCRIPTION: This TypeScript code demonstrates how to handle plugin options within a BetterScroll plugin. It merges user-provided options with default options, ensuring that all required configurations are available for the plugin to function correctly.  The extend function is used to merge the options.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/how-to-write.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { extend } from '@better-scroll/shared-utils'\nexport default class MyPlugin {\n  private handleOptions() {\n    const userOptions = (this.scroll.options.myPlugin === true\n      ? {}\n      : this.scroll.options.myPlugin) as Partial<MyPluginConfig>\n    const defaultOptions: MyPluginConfig = {\n      scrollText: 'I am scrolling',\n      scrollEndText: 'Scroll has ended'\n    }\n    this.options = extend(defaultOptions, userOptions)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for BetterScroll Slide\nDESCRIPTION: Demonstrates the required HTML structure for the BetterScroll Slide plugin. It includes a wrapper, content, and multiple page elements.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/slide.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"slide-wrapper\">\n  <div class=\"slide-content\">\n    <div class=\"slide-page\"><div>\n    <div class=\"slide-page\"><div>\n    <div class=\"slide-page\"><div>\n    <div class=\"slide-page\"><div>\n  <div/>\n<div/>\n```\n\n----------------------------------------\n\nTITLE: Listening to 'refresh' event\nDESCRIPTION: This code snippet demonstrates how to listen to the 'refresh' event, which is triggered when BetterScroll recalculates its dimensions. It imports BetterScroll and attaches a callback function to the 'refresh' event using `bs.on('refresh', () => {})`.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-api.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport BetterScroll from '@better-scroll/core'\n\nconst bs = new BetterScroll('.wrapper', {})\n\nbs.on('refresh', () => {})\n```\n\n----------------------------------------\n\nTITLE: Registering a Plugin with BetterScroll\nDESCRIPTION: This code snippet shows how to register a plugin with BetterScroll using the `BScroll.use()` method. The plugin needs to be registered before creating a new `BScroll` instance. The `pluginKey` configuration option is crucial for instantiating the plugin correctly, mapping to the `pluginName` static attribute of the Plugin class.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/plugins/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n  import BScroll from '@better-scroll/core'\n  import Plugin from 'somewhere'\n\n  new BScroll('.wrapper', {\n    // pluginKey corresponds to the value of the static attribute pluginName on the Plugin class,\n    // otherwise the plugin cannot be instantiated\n    pluginKey: {}\n  })\n```\n\n----------------------------------------\n\nTITLE: Configuring stopPropagation in Nested BetterScroll (JS)\nDESCRIPTION: This snippet configures the `stopPropagation` option in a nested BetterScroll instance to prevent event bubbling. This is useful when you want to prevent a click event in an inner BetterScroll from triggering a click event in an outer BetterScroll. Requires BetterScroll library.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/FAQ/diagnosis.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet innerBS = new BScroll('.wrapper', {\n    stopPropagation: true\n  })\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for Rotated Container\nDESCRIPTION: This CSS snippet demonstrates how to rotate the parent container of the BetterScroll wrapper element. This rotation necessitates the configuration of the `quadrant` option within BetterScroll to ensure proper scrolling behavior. The `transform: rotate(90deg)` style is applied to the `.container` class.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-options.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<style>\n/* wrapper 的父元素强制旋转 */\n.container {\n   transform: rotate(90deg);\n}\n</style>\n<div class=\"container\">\n   <div class=\"wrapper\">\n      <div class=\"content\">\n         <div class=\"content-item\">1.1</div>\n         <div class=\"content-item\">1.2</div>\n      </div>\n   </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Subscribing to 'destroy' Hook - JavaScript\nDESCRIPTION: This code snippet demonstrates subscribing to the 'destroy' hook of BScrollCore.  This hook is triggered when BetterScroll is destroyed.  The hook function receives no arguments.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/base-scroll-api.md#_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nimport BScroll from '@better-scroll/core'\nconst bs = new BScroll('.wrapper', {})\nbs.hooks.on('destroy', () => { console.log('destroyed') })\n```\n\n----------------------------------------\n\nTITLE: Zoom: default plugin options\nDESCRIPTION: This code block demonstrates what the default plugin options are when zoom is configured to true.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/plugins/zoom.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst bs = new BScroll('.wrapper', {\n  zoom: true\n})\n\n// 相当于\n\nconst bs = new BScroll('.wrapper', {\n  zoom: {\n    start: 1,\n    min: 1,\n    max: 4,\n    initialOrigin: [0, 0],\n    minimalZoomDistance: 5,\n    bounceTime: 800, // ms\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Listening to 'scrollCancel' event\nDESCRIPTION: This code snippet demonstrates how to listen to the 'scrollCancel' event, which is triggered when scrolling is cancelled. It attaches a callback function to the 'scrollCancel' event using `bs.on('scrollCancel', () => {})`.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/zh-CN/guide/base-scroll-api.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nbs.on('scrollCancel', () => {})\n```\n\n----------------------------------------\n\nTITLE: Listening for 'zoomEnd' event with Zoom plugin\nDESCRIPTION: This snippet demonstrates listening for the 'zoomEnd' event from the Zoom plugin in BetterScroll. This event is triggered after the two-finger zoom action ends, providing the final scale value. The Zoom plugin must be initialized and enabled.\nSOURCE: https://github.com/ustbhuangyi/better-scroll/blob/dev/packages/vuepress-docs/docs/en-US/guide/base-scroll-api.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nbs.on('zoomEnd', ({ scale }) => {})\n```"
  }
]