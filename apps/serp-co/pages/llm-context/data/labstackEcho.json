[
  {
    "owner": "labstack",
    "repo": "echo",
    "content": "TITLE: Basic Echo Web Server Implementation in Go\nDESCRIPTION: Example of setting up a basic web server using Echo. It demonstrates creating an Echo instance, adding middleware, defining a route, and starting the server.\nSOURCE: https://github.com/labstack/echo/blob/master/README.md#2025-04-16_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"github.com/labstack/echo/v4\"\n  \"github.com/labstack/echo/v4/middleware\"\n  \"log/slog\"\n  \"net/http\"\n)\n\nfunc main() {\n  // Echo instance\n  e := echo.New()\n\n  // Middleware\n  e.Use(middleware.Logger())\n  e.Use(middleware.Recover())\n\n  // Routes\n  e.GET(\"/\", hello)\n\n  // Start server\n  if err := e.Start(\":8080\"); err != nil && !errors.Is(err, http.ErrServerClosed) {\n    slog.Error(\"failed to start server\", \"error\", err)\n  }\n}\n\n// Handler\nfunc hello(c echo.Context) error {\n  return c.String(http.StatusOK, \"Hello, World!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Echo Framework in Go\nDESCRIPTION: Command to install the Echo web framework using Go's package manager. It installs the latest version of Echo v4.\nSOURCE: https://github.com/labstack/echo/blob/master/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n// go get github.com/labstack/echo/{version}\ngo get github.com/labstack/echo/v4\n```\n\n----------------------------------------\n\nTITLE: Adding Custom 404 Handler for Specific Paths in Echo (Go)\nDESCRIPTION: Shows how to add custom 404 handlers for specific paths in Echo. This allows different handling of 'not found' errors for different routes or groups.\nSOURCE: https://github.com/labstack/echo/blob/master/CHANGELOG.md#2025-04-16_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\ne.RouteNotFound(\"/*\", func(c echo.Context) error { return c.NoContent(http.StatusNotFound) })\n\ng := e.Group(\"/images\")\ng.RouteNotFound(\"/*\", func(c echo.Context) error { return c.NoContent(http.StatusNotFound) })\n```\n\n----------------------------------------\n\nTITLE: Adding Custom HTTP Method Route in Echo (Go)\nDESCRIPTION: Demonstrates how to add a route for a custom HTTP method in Echo. This example adds a 'COPY' method route that returns an 'OK COPY' response.\nSOURCE: https://github.com/labstack/echo/blob/master/CHANGELOG.md#2025-04-16_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\ne.Add(\"COPY\", \"/*\", func(c echo.Context) error {\n  return c.String(http.StatusOK, \"OK COPY\")\n})\n```\n\n----------------------------------------\n\nTITLE: Echo Framework UnmarshalParams Interface Example\nDESCRIPTION: Example showing the UnmarshalParams interface that can be implemented for custom parameter binding in Echo v4.12.0+\nSOURCE: https://github.com/labstack/echo/blob/master/CHANGELOG.md#2025-04-16_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nUnmarshalParams(params []string) error\n```\n\n----------------------------------------\n\nTITLE: Generating Self-Signed SSL Certificate with OpenSSL in Bash\nDESCRIPTION: Command to create a self-signed X.509 certificate and private key using OpenSSL 1.1.1 or newer. The certificate is configured for localhost development with appropriate subject alternative names.\nSOURCE: https://github.com/labstack/echo/blob/master/_fixture/certs/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# In OpenSSL â‰¥ 1.1.1\nopenssl req -x509 -newkey rsa:4096 -sha256 -days 9999 -nodes \\\n  -keyout key.pem -out cert.pem -subj \"/CN=localhost\" \\\n  -addext \"subjectAltName=DNS:localhost,IP:127.0.0.1,IP:::1\"\n```\n\n----------------------------------------\n\nTITLE: Echo Framework Import Migration Example\nDESCRIPTION: Migration example showing how to update JWT imports from the old to new package version after JWT middleware removal.\nSOURCE: https://github.com/labstack/echo/blob/master/CHANGELOG.md#2025-04-16_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n\"github.com/golang-jwt/jwt\" // Old import\n\"github.com/golang-jwt/jwt/v5\" // New import\n```\n\n----------------------------------------\n\nTITLE: Verifying SSL Certificate Details with OpenSSL in Bash\nDESCRIPTION: Command to inspect and display the details of an X.509 certificate using OpenSSL. This helps verify the certificate was generated correctly before using it with an Echo server.\nSOURCE: https://github.com/labstack/echo/blob/master/_fixture/certs/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nopenssl x509 -in cert.pem -text\n```\n\n----------------------------------------\n\nTITLE: Find and Replace JWT Library Imports in Bash\nDESCRIPTION: A bash command to recursively find all .go files in the current directory and replace 'dgrijalva/jwt-go' with 'golang-jwt/jwt' to update JWT library imports after Echo v4.5.0's breaking change, followed by updating dependencies.\nSOURCE: https://github.com/labstack/echo/blob/master/CHANGELOG.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nfind -type f -name \"*.go\" -exec sed -i \"s/dgrijalva\\/jwt-go/golang-jwt\\/jwt/g\" {} \\;\ngo mod tidy\n```\n\n----------------------------------------\n\nTITLE: Echo Framework JWT Token Access Example\nDESCRIPTION: Example showing deprecated JWT token access pattern that will cause panics after v4.13.0 due to JWT middleware removal.\nSOURCE: https://github.com/labstack/echo/blob/master/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntoken := c.Get(\"user\").(*jwt.Token)\n```"
  }
]